import{S as Gp,i as Hp,s as Rp,e as s,k as p,w as d,t as n,M as Up,c as o,d as a,m as u,a as l,x as m,h as r,b as h,G as t,g as c,y as f,q as v,o as y,B as _,v as Fp}from"../chunks/vendor-hf-doc-builder.js";import{T as Vp}from"../chunks/Tip-hf-doc-builder.js";import{I}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as j}from"../chunks/CodeBlock-hf-doc-builder.js";function Yp(_s){let w,Z,k,x,H;return{c(){w=s("p"),Z=n("Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=s("code"),x=n("features"),H=n(". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation.")},l(A){w=o(A,"P",{});var N=l(w);Z=r(N,"Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=o(N,"CODE",{});var ee=l(k);x=r(ee,"features"),ee.forEach(a),H=r(N,". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation."),N.forEach(a)},m(A,N){c(A,w,N),t(w,Z),t(w,k),t(k,x),t(w,H)},d(A){A&&a(w)}}}function Jp(_s){let w,Z,k,x,H,A,N,ee,ll,bs,mt,nl,ws,R,te,Dt,Pe,rl,Ct,il,gs,ft,cl,Es,S,ae,Ot,pl,ul,vt,hl,dl,ml,se,It,fl,vl,yt,yl,_l,bl,oe,Nt,wl,gl,_t,El,$l,$s,le,jl,St,kl,Tl,js,U,ne,Mt,Ae,ql,Bt,Pl,ks,re,Al,Lt,xl,Dl,Ts,xe,qs,bt,Cl,Ps,De,As,F,ie,Wt,Ce,Ol,Gt,Il,xs,wt,Nl,Ds,Oe,Cs,V,ce,Ht,Ie,Sl,Rt,Ml,Os,pe,Bl,Ne,Ut,Ll,Wl,Is,ue,Ft,Se,Vt,Gl,Hl,Yt,Rl,Ul,b,Me,Jt,zt,Fl,Vl,Kt,Yl,Jl,Be,Qt,Xt,zl,Kl,Zt,Ql,Xl,Le,ea,ta,Zl,en,We,tn,aa,an,sn,on,Ge,sa,oa,ln,nn,la,rn,cn,He,na,ra,pn,un,ia,hn,dn,Re,ca,pa,mn,fn,ua,vn,yn,Ue,ha,da,_n,bn,ma,wn,gn,Fe,fa,va,En,$n,ya,jn,Ns,he,kn,_a,Tn,qn,Ss,Ve,Ms,de,Pn,ba,An,xn,Bs,Ye,Ls,gt,Dn,Ws,Je,Gs,me,Hs,Y,fe,wa,ze,Cn,ga,On,Rs,Et,In,Us,ve,Ea,Nn,Sn,$a,Mn,Fs,T,Bn,ja,Ln,Wn,ka,Gn,Hn,Ta,Rn,Un,qa,Fn,Vn,Vs,J,ye,Pa,Ke,Yn,Aa,xa,Jn,Ys,Qe,Js,M,zn,Da,Kn,Qn,Ca,Xn,Zn,zs,z,_e,Oa,Xe,er,Ze,Ia,tr,ar,Na,sr,Ks,q,or,Sa,lr,nr,Ma,rr,ir,Ba,cr,pr,La,ur,hr,Qs,et,Xs,D,dr,Wa,mr,fr,Ga,vr,yr,Ha,_r,br,Zs,tt,eo,$t,wr,to,at,ao,K,be,Ra,st,gr,Ua,Er,so,P,$r,Fa,jr,kr,Va,Tr,qr,ot,Pr,Ar,Ya,xr,Dr,oo,jt,Cr,lo,B,Or,Ja,Ir,Nr,za,Sr,Mr,no,kt,Br,ro,Q,we,Ka,lt,Lr,Qa,Wr,io,ge,Gr,Xa,Hr,Rr,co,nt,po,Tt,Ur,uo,rt,ho,qt,Fr,mo,Ee,Vr,Za,Yr,Jr,fo,it,vo,X,$e,es,ct,zr,ts,Kr,yo,g,Qr,as,Xr,Zr,ss,ei,ti,os,ai,si,ls,oi,li,ns,ni,ri,_o,je,ii,rs,ci,pi,bo,pt,wo,ke,ui,is,hi,di,go,ut,Eo,Te,mi,cs,fi,vi,$o,ht,jo,E,yi,ps,_i,bi,us,wi,gi,hs,Ei,$i,ds,ji,ki,ms,Ti,qi,ko;return A=new I({}),Pe=new I({}),Ae=new I({}),xe=new j({props:{code:`import evaluate
accuracy = evaluate.load("accuracy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> evaluate
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),De=new j({props:{code:'word_length = evaluate.load("word_length", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>word_length = evaluate.load(<span class="hljs-string">&quot;word_length&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Ce=new I({}),Oe=new j({props:{code:'element_count = evaluate.load("lvwerra/element_count", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>element_count = evaluate.load(<span class="hljs-string">&quot;lvwerra/element_count&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Ie=new I({}),Ve=new j({props:{code:`accuracy = evaluate.load("accuracy")
accuracy.description`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.description
Accuracy <span class="hljs-keyword">is</span> the proportion of correct predictions among the total number of cases processed. It can be computed <span class="hljs-keyword">with</span>:
Accuracy = (TP + TN) / (TP + TN + FP + FN)
 Where:
TP: <span class="hljs-literal">True</span> positive
TN: <span class="hljs-literal">True</span> negative
FP: <span class="hljs-literal">False</span> positive
FN: <span class="hljs-literal">False</span> negative`}}),Ye=new j({props:{code:"accuracy.citation",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.citation
<span class="hljs-meta">@article{scikit-learn,</span>
  title={Scikit-learn: Machine Learning <span class="hljs-keyword">in</span> {P}ython},
  author={Pedregosa, F. <span class="hljs-keyword">and</span> Varoquaux, G. <span class="hljs-keyword">and</span> Gramfort, A. <span class="hljs-keyword">and</span> Michel, V.
         <span class="hljs-keyword">and</span> Thirion, B. <span class="hljs-keyword">and</span> Grisel, O. <span class="hljs-keyword">and</span> Blondel, M. <span class="hljs-keyword">and</span> Prettenhofer, P.
         <span class="hljs-keyword">and</span> Weiss, R. <span class="hljs-keyword">and</span> Dubourg, V. <span class="hljs-keyword">and</span> Vanderplas, J. <span class="hljs-keyword">and</span> Passos, A. <span class="hljs-keyword">and</span>
         Cournapeau, D. <span class="hljs-keyword">and</span> Brucher, M. <span class="hljs-keyword">and</span> Perrot, M. <span class="hljs-keyword">and</span> Duchesnay, E.},
  journal={Journal of Machine Learning Research},
  volume={<span class="hljs-number">12</span>},
  pages={<span class="hljs-number">2825</span>--<span class="hljs-number">2830</span>},
  year={<span class="hljs-number">2011</span>}
}`}}),Je=new j({props:{code:"accuracy.features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.features
{
    <span class="hljs-string">&#x27;predictions&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
    <span class="hljs-string">&#x27;references&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
}`}}),me=new Vp({props:{$$slots:{default:[Yp]},$$scope:{ctx:_s}}}),ze=new I({}),Ke=new I({}),Qe=new j({props:{code:"accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),Xe=new I({}),et=new j({props:{code:`for ref, pred in zip([0,1,0,1], [1,0,0,1]):
    accuracy.add(references=ref, predictions=pred)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> ref, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add(references=ref, predictions=pred)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),tt=new j({props:{code:`for refs, preds in zip([[0,1],[0,1]], [[1,0],[0,1]]):
    accuracy.add_batch(references=refs, predictions=preds)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> refs, preds <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]], [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add_batch(references=refs, predictions=preds)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),at=new j({props:{code:`for model_inputs, gold_standards in evaluation_dataset:
    predictions = model(model_inputs)
    metric.add_batch(references=gold_standards, predictions=predictions)
metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> model_inputs, gold_standards <span class="hljs-keyword">in</span> evaluation_dataset:
<span class="hljs-meta">&gt;&gt;&gt; </span>    predictions = model(model_inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric.add_batch(references=gold_standards, predictions=predictions)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.compute()`}}),st=new I({}),lt=new I({}),nt=new j({props:{code:`result = accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])

hyperparams = {"model": "bert-base-uncased"}
evaluate.save("./results/"experiment="run 42", **result, **hyperparams)
>>> PosixPath('results/result-2022_05_30-22_09_11.json')`,highlighted:`result = accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])

hyperparams = {<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;bert-base-uncased&quot;</span>}
evaluate.save(<span class="hljs-string">&quot;./results/&quot;</span>experiment=<span class="hljs-string">&quot;run 42&quot;</span>, **result, **hyperparams)
<span class="hljs-meta">&gt;&gt;&gt; </span>PosixPath(<span class="hljs-string">&#x27;results/result-2022_05_30-22_09_11.json&#x27;</span>)`}}),rt=new j({props:{code:`{
    "experiment": "run 42",
    "accuracy": 0.5,
    "model": "bert-base-uncased",
    "_timestamp": "2022-05-30T22:09:11.959469",
    "_git_commit_hash": "123456789abcdefghijkl",
    "_evaluate_version": "0.1.0",
    "_python_version": "3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]",
    "_interpreter_path": "/Users/leandro/git/evaluate/env/bin/python"
}`,highlighted:`<span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;experiment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;run 42&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;accuracy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bert-base-uncased&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-05-30T22:09:11.959469&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_git_commit_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789abcdefghijkl&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_evaluate_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_python_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_interpreter_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Users/leandro/git/evaluate/env/bin/python&quot;</span>
<span class="hljs-punctuation">}</span>`}}),it=new j({props:{code:`evaluate.push_to_hub(
  model_id="huggingface/gpt2-wikitext2",  # model repository on hub
  metric_value=0.5,                       # metric value
  metric_type="bleu",                     # metric name, e.g. accuracy.name
  metric_name="BLEU",                     # pretty name which is displayed
  dataset_type="wikitext",                # dataset name on the hub
  dataset_name="WikiText",                # pretty name
  dataset_split="test",                   # dataset split used
  task_type="text-generation",            # task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json
  task_name="Text Generation"             # pretty name for task
)`,highlighted:`evaluate.push_to_hub(
  model_id=<span class="hljs-string">&quot;huggingface/gpt2-wikitext2&quot;</span>,  <span class="hljs-comment"># model repository on hub</span>
  metric_value=<span class="hljs-number">0.5</span>,                       <span class="hljs-comment"># metric value</span>
  metric_type=<span class="hljs-string">&quot;bleu&quot;</span>,                     <span class="hljs-comment"># metric name, e.g. accuracy.name</span>
  metric_name=<span class="hljs-string">&quot;BLEU&quot;</span>,                     <span class="hljs-comment"># pretty name which is displayed</span>
  dataset_type=<span class="hljs-string">&quot;wikitext&quot;</span>,                <span class="hljs-comment"># dataset name on the hub</span>
  dataset_name=<span class="hljs-string">&quot;WikiText&quot;</span>,                <span class="hljs-comment"># pretty name</span>
  dataset_split=<span class="hljs-string">&quot;test&quot;</span>,                   <span class="hljs-comment"># dataset split used</span>
  task_type=<span class="hljs-string">&quot;text-generation&quot;</span>,            <span class="hljs-comment"># task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json</span>
  task_name=<span class="hljs-string">&quot;Text Generation&quot;</span>             <span class="hljs-comment"># pretty name for task</span>
)`}}),ct=new I({}),pt=new j({props:{code:`from transformers import pipeline
from datasets import load_dataset
from evaluate import evaluator
import evaluate

pipe = pipeline("text-classification", model="lvwerra/distilbert-imdb", device=0)
data = load_dataset("imdb", split="test").shuffle().select(range(1000))
metric = evaluate.load("accuracy")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-keyword">from</span> evaluate <span class="hljs-keyword">import</span> evaluator
<span class="hljs-keyword">import</span> evaluate

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=<span class="hljs-string">&quot;lvwerra/distilbert-imdb&quot;</span>, device=<span class="hljs-number">0</span>)
data = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, split=<span class="hljs-string">&quot;test&quot;</span>).shuffle().select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))
metric = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),ut=new j({props:{code:`eval = evaluator("text-classification")

results = eval.compute(model_or_pipeline=pipe, data=data, metric=metric, label_mapping={"NEGATIVE": 0, "POSITIVE": 1},)

print(results)
>>> {'accuracy': 0.934}`,highlighted:`<span class="hljs-built_in">eval</span> = evaluator(<span class="hljs-string">&quot;text-classification&quot;</span>)

results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric, label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.934</span>}`}}),ht=new j({props:{code:`results = eval.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={"NEGATIVE": 0, "POSITIVE": 1},
                       strategy="bootstrap", n_resamples=200)

print(results)
>>> {'accuracy': {'confidence_interval': (0.906, 0.9406749892841922), 'standard_error': 0.00865213251082787, 'score': 0.923}}`,highlighted:`results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},
                       strategy=<span class="hljs-string">&quot;bootstrap&quot;</span>, n_resamples=<span class="hljs-number">200</span>)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: {<span class="hljs-string">&#x27;confidence_interval&#x27;</span>: (<span class="hljs-number">0.906</span>, <span class="hljs-number">0.9406749892841922</span>), <span class="hljs-string">&#x27;standard_error&#x27;</span>: <span class="hljs-number">0.00865213251082787</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.923</span>}}`}}),{c(){w=s("meta"),Z=p(),k=s("h1"),x=s("a"),H=s("span"),d(A.$$.fragment),N=p(),ee=s("span"),ll=n("A quick tour"),bs=p(),mt=s("p"),nl=n("\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),ws=p(),R=s("h2"),te=s("a"),Dt=s("span"),d(Pe.$$.fragment),rl=p(),Ct=s("span"),il=n("Three types of evaluations"),gs=p(),ft=s("p"),cl=n("There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),Es=p(),S=s("ul"),ae=s("li"),Ot=s("strong"),pl=n("Metric"),ul=n(": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),vt=s("a"),hl=n("evaluate-metric"),dl=n("."),ml=p(),se=s("li"),It=s("strong"),fl=n("Comparison"),vl=n(": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),yt=s("a"),yl=n("evaluate-comparison"),_l=n("."),bl=p(),oe=s("li"),Nt=s("strong"),wl=n("Measurement"),gl=n(": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),_t=s("a"),El=n("evaluate-measurement"),$l=n("."),$s=p(),le=s("p"),jl=n("Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),St=s("code"),kl=n("evaluate.load"),Tl=n("!"),js=p(),U=s("h2"),ne=s("a"),Mt=s("span"),d(Ae.$$.fragment),ql=p(),Bt=s("span"),Pl=n("Load"),ks=p(),re=s("p"),Al=n("Any metric, comparison, or measurement is loaded with the "),Lt=s("code"),xl=n("evaluate.load"),Dl=n(" function:"),Ts=p(),d(xe.$$.fragment),qs=p(),bt=s("p"),Cl=n("If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),Ps=p(),d(De.$$.fragment),As=p(),F=s("h3"),ie=s("a"),Wt=s("span"),d(Ce.$$.fragment),Ol=p(),Gt=s("span"),Il=n("Community modules"),xs=p(),wt=s("p"),Nl=n("Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),Ds=p(),d(Oe.$$.fragment),Cs=p(),V=s("h2"),ce=s("a"),Ht=s("span"),d(Ie.$$.fragment),Sl=p(),Rt=s("span"),Ml=n("Module attributes"),Os=p(),pe=s("p"),Bl=n("All evalution modules come with a range of useful attributes that help to use a module stored in a "),Ne=s("a"),Ut=s("code"),Ll=n("EvaluationModuleInfo"),Wl=n(" object."),Is=p(),ue=s("table"),Ft=s("thead"),Se=s("tr"),Vt=s("th"),Gl=n("Attribute"),Hl=p(),Yt=s("th"),Rl=n("Description"),Ul=p(),b=s("tbody"),Me=s("tr"),Jt=s("td"),zt=s("code"),Fl=n("description"),Vl=p(),Kt=s("td"),Yl=n("A short description of the evaluation module."),Jl=p(),Be=s("tr"),Qt=s("td"),Xt=s("code"),zl=n("citation"),Kl=p(),Zt=s("td"),Ql=n("A BibTex string for citation when available."),Xl=p(),Le=s("tr"),ea=s("td"),ta=s("code"),Zl=n("features"),en=p(),We=s("td"),tn=n("A "),aa=s("code"),an=n("Features"),sn=n(" object defining the input format."),on=p(),Ge=s("tr"),sa=s("td"),oa=s("code"),ln=n("inputs_description"),nn=p(),la=s("td"),rn=n("This is equivalent to the modules docstring."),cn=p(),He=s("tr"),na=s("td"),ra=s("code"),pn=n("homepage"),un=p(),ia=s("td"),hn=n("The homepage of the module."),dn=p(),Re=s("tr"),ca=s("td"),pa=s("code"),mn=n("license"),fn=p(),ua=s("td"),vn=n("The license of the module."),yn=p(),Ue=s("tr"),ha=s("td"),da=s("code"),_n=n("codebase_urls"),bn=p(),ma=s("td"),wn=n("Link to the code behind the module."),gn=p(),Fe=s("tr"),fa=s("td"),va=s("code"),En=n("reference_urls"),$n=p(),ya=s("td"),jn=n("Additional reference URLs."),Ns=p(),he=s("p"),kn=n("Let\u2019s have a look at a few examples. First, let\u2019s look at the "),_a=s("code"),Tn=n("description"),qn=n(" attribute of the accuracy metric:"),Ss=p(),d(Ve.$$.fragment),Ms=p(),de=s("p"),Pn=n("You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),ba=s("code"),An=n("citation"),xn=n(" attribute:"),Bs=p(),d(Ye.$$.fragment),Ls=p(),gt=s("p"),Dn=n("Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),Ws=p(),d(Je.$$.fragment),Gs=p(),d(me.$$.fragment),Hs=p(),Y=s("h2"),fe=s("a"),wa=s("span"),d(ze.$$.fragment),Cn=p(),ga=s("span"),On=n("Compute"),Rs=p(),Et=s("p"),In=n("Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),Us=p(),ve=s("ol"),Ea=s("li"),Nn=n("All-in-one"),Sn=p(),$a=s("li"),Mn=n("Incremental"),Fs=p(),T=s("p"),Bn=n("In the incremental approach the necessary inputs are added to the module with "),ja=s("code"),Ln=n("add"),Wn=n(" or "),ka=s("code"),Gn=n("add_batch"),Hn=n(" and the score is calculated at the end with "),Ta=s("code"),Rn=n("compute()"),Un=n(". Alternatively, one can pass all the inputs at once to "),qa=s("code"),Fn=n("compute()"),Vn=n(". Let\u2019s have a look at the two approaches."),Vs=p(),J=s("h3"),ye=s("a"),Pa=s("span"),d(Ke.$$.fragment),Yn=p(),Aa=s("span"),xa=s("code"),Jn=n("compute()"),Ys=n("\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute()` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute()` method.\n\n	"),d(Qe.$$.fragment),Js=p(),M=s("p"),zn=n("Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),Da=s("code"),Kn=n("add"),Qn=n(" or "),Ca=s("code"),Xn=n("add_batch"),Zn=n(" are useful."),zs=p(),z=s("h3"),_e=s("a"),Oa=s("span"),d(Xe.$$.fragment),er=p(),Ze=s("span"),Ia=s("code"),tr=n("add"),ar=n(" and "),Na=s("code"),sr=n("add_batch"),Ks=p(),q=s("p"),or=n("In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),Sa=s("code"),lr=n("compute()"),nr=n(". With "),Ma=s("code"),rr=n("add"),ir=n(" and "),Ba=s("code"),cr=n("add_batch"),pr=n(" you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),La=s("code"),ur=n("add"),hr=n(":"),Qs=p(),d(et.$$.fragment),Xs=p(),D=s("p"),dr=n("Once you have gathered all predictions you can call "),Wa=s("code"),mr=n("compute()"),fr=n(" to compute the score based on all stored values. When getting predictions and references in batches you can use "),Ga=s("code"),vr=n("add_batch"),yr=n(" which adds a list elements for later processing. The rest works as with "),Ha=s("code"),_r=n("add"),br=n(":"),Zs=p(),d(tt.$$.fragment),eo=p(),$t=s("p"),wr=n("This is especially useful when you need to get the predictions from your model in batches:"),to=p(),d(at.$$.fragment),ao=p(),K=s("h3"),be=s("a"),Ra=s("span"),d(st.$$.fragment),gr=p(),Ua=s("span"),Er=n("Distributed evaluation"),so=p(),P=s("p"),$r=n("Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),Fa=s("code"),jr=n("f(AuB) = f(A) + f(B)"),kr=n("), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),Va=s("code"),Tr=n("f(AuB) \u2260 f(A) + f(B)"),qr=n("), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),ot=s("a"),Pr=n("F1"),Ar=n(" scores of each data subset as your "),Ya=s("strong"),xr=n("final metric"),Dr=n("."),oo=p(),jt=s("p"),Cr=n("A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),lo=p(),B=s("p"),Or=n("\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),Ja=s("code"),Ir=n("EvaluationModule.compute"),Nr=n(" the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),za=s("code"),Sr=n("EvaluationModule.compute"),Mr=n(" will perform the final metric evaluation."),no=p(),kt=s("p"),Br=n("This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),ro=p(),Q=s("h2"),we=s("a"),Ka=s("span"),d(lt.$$.fragment),Lr=p(),Qa=s("span"),Wr=n("Save and push to hub"),io=p(),ge=s("p"),Gr=n("Saving and sharing evaluation results is an important step. We provide the "),Xa=s("code"),Hr=n("evaluate.save()"),Rr=n(" function to easily save metrics result. You can either point pass a specific filename or a directory. In the latter case the results are saved in a file with an automatically created file name. Besides the directory or file name the function takes any key-value pairs as inputs and stores them in a JSON file."),co=p(),d(nt.$$.fragment),po=p(),Tt=s("p"),Ur=n("The content of the JSON file look like the following:"),uo=p(),d(rt.$$.fragment),ho=p(),qt=s("p"),Fr=n("In addition to the specified fields it also contains information about the system useful for reproducing the results."),mo=p(),Ee=s("p"),Vr=n("Besides storing the results locally we also want to report them on the model\u2019s repository on the hub. With the "),Za=s("code"),Yr=n("evaluate.push_to_hub()"),Jr=n(" you can easily report an evaluation results to the model\u2019s repository:"),fo=p(),d(it.$$.fragment),vo=p(),X=s("h2"),$e=s("a"),es=s("span"),d(ct.$$.fragment),zr=p(),ts=s("span"),Kr=n("Evaluator"),yo=p(),g=s("p"),Qr=n("The "),as=s("code"),Xr=n("evaluate.evaluator()"),Zr=n(" provides integrate the inference part of evaluation and only requires a model, dataset, metric in contrast to the metrics in "),ss=s("code"),ei=n("EvaluationModule"),ti=n("s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric. To make that possible it uses the "),os=s("code"),ai=n("Pipeline"),si=n(" abstraction from "),ls=s("code"),oi=n("transformers"),li=n(". However, you can use your own framework as long as it follows the "),ns=s("code"),ni=n("Pipeline"),ri=n(" interface."),_o=p(),je=s("p"),ii=n("To make an evaluation with the "),rs=s("code"),ci=n("evaluator"),pi=n(" let\u2019s load a pipeline with an model trained on IMDb, the IMDb test split and the accuracy metric."),bo=p(),d(pt.$$.fragment),wo=p(),ke=s("p"),ui=n("Then we can create an evaluator for text classification and pass the three objects to the "),is=s("code"),hi=n("compute"),di=n(" method. With the label mapping we provide a method to align the pipeline outputs with the label column in the dataset:"),go=p(),d(ut.$$.fragment),Eo=p(),Te=s("p"),mi=n("Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),cs=s("em"),fi=n("bootstrapping"),vi=n(" we compute confidence intervales and the standard error which helps estimate how stable a score is:"),$o=p(),d(ht.$$.fragment),jo=p(),E=s("p"),yi=n("The evaluator expects a "),ps=s("code"),_i=n('"text"'),bi=n(" and "),us=s("code"),wi=n('"label"'),gi=n(" column for the data input. If your dataset differs you can provide the columns with the keywords "),hs=s("code"),Ei=n('input_column="text"'),$i=n(" and "),ds=s("code"),ji=n('label_column="label"'),ki=n(". Currently only "),ms=s("code"),Ti=n('"text-classification"'),qi=n(" is supported with more tasks being added in the future."),this.h()},l(e){const i=Up('[data-svelte="svelte-1phssyn"]',document.head);w=o(i,"META",{name:!0,content:!0}),i.forEach(a),Z=u(e),k=o(e,"H1",{class:!0});var dt=l(k);x=o(dt,"A",{id:!0,class:!0,href:!0});var Pi=l(x);H=o(Pi,"SPAN",{});var Ai=l(H);m(A.$$.fragment,Ai),Ai.forEach(a),Pi.forEach(a),N=u(dt),ee=o(dt,"SPAN",{});var xi=l(ee);ll=r(xi,"A quick tour"),xi.forEach(a),dt.forEach(a),bs=u(e),mt=o(e,"P",{});var Di=l(mt);nl=r(Di,"\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Di.forEach(a),ws=u(e),R=o(e,"H2",{class:!0});var To=l(R);te=o(To,"A",{id:!0,class:!0,href:!0});var Ci=l(te);Dt=o(Ci,"SPAN",{});var Oi=l(Dt);m(Pe.$$.fragment,Oi),Oi.forEach(a),Ci.forEach(a),rl=u(To),Ct=o(To,"SPAN",{});var Ii=l(Ct);il=r(Ii,"Three types of evaluations"),Ii.forEach(a),To.forEach(a),gs=u(e),ft=o(e,"P",{});var Ni=l(ft);cl=r(Ni,"There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),Ni.forEach(a),Es=u(e),S=o(e,"UL",{});var Pt=l(S);ae=o(Pt,"LI",{});var fs=l(ae);Ot=o(fs,"STRONG",{});var Si=l(Ot);pl=r(Si,"Metric"),Si.forEach(a),ul=r(fs,": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),vt=o(fs,"A",{href:!0});var Mi=l(vt);hl=r(Mi,"evaluate-metric"),Mi.forEach(a),dl=r(fs,"."),fs.forEach(a),ml=u(Pt),se=o(Pt,"LI",{});var vs=l(se);It=o(vs,"STRONG",{});var Bi=l(It);fl=r(Bi,"Comparison"),Bi.forEach(a),vl=r(vs,": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),yt=o(vs,"A",{href:!0});var Li=l(yt);yl=r(Li,"evaluate-comparison"),Li.forEach(a),_l=r(vs,"."),vs.forEach(a),bl=u(Pt),oe=o(Pt,"LI",{});var ys=l(oe);Nt=o(ys,"STRONG",{});var Wi=l(Nt);wl=r(Wi,"Measurement"),Wi.forEach(a),gl=r(ys,": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),_t=o(ys,"A",{href:!0});var Gi=l(_t);El=r(Gi,"evaluate-measurement"),Gi.forEach(a),$l=r(ys,"."),ys.forEach(a),Pt.forEach(a),$s=u(e),le=o(e,"P",{});var qo=l(le);jl=r(qo,"Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),St=o(qo,"CODE",{});var Hi=l(St);kl=r(Hi,"evaluate.load"),Hi.forEach(a),Tl=r(qo,"!"),qo.forEach(a),js=u(e),U=o(e,"H2",{class:!0});var Po=l(U);ne=o(Po,"A",{id:!0,class:!0,href:!0});var Ri=l(ne);Mt=o(Ri,"SPAN",{});var Ui=l(Mt);m(Ae.$$.fragment,Ui),Ui.forEach(a),Ri.forEach(a),ql=u(Po),Bt=o(Po,"SPAN",{});var Fi=l(Bt);Pl=r(Fi,"Load"),Fi.forEach(a),Po.forEach(a),ks=u(e),re=o(e,"P",{});var Ao=l(re);Al=r(Ao,"Any metric, comparison, or measurement is loaded with the "),Lt=o(Ao,"CODE",{});var Vi=l(Lt);xl=r(Vi,"evaluate.load"),Vi.forEach(a),Dl=r(Ao," function:"),Ao.forEach(a),Ts=u(e),m(xe.$$.fragment,e),qs=u(e),bt=o(e,"P",{});var Yi=l(bt);Cl=r(Yi,"If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),Yi.forEach(a),Ps=u(e),m(De.$$.fragment,e),As=u(e),F=o(e,"H3",{class:!0});var xo=l(F);ie=o(xo,"A",{id:!0,class:!0,href:!0});var Ji=l(ie);Wt=o(Ji,"SPAN",{});var zi=l(Wt);m(Ce.$$.fragment,zi),zi.forEach(a),Ji.forEach(a),Ol=u(xo),Gt=o(xo,"SPAN",{});var Ki=l(Gt);Il=r(Ki,"Community modules"),Ki.forEach(a),xo.forEach(a),xs=u(e),wt=o(e,"P",{});var Qi=l(wt);Nl=r(Qi,"Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),Qi.forEach(a),Ds=u(e),m(Oe.$$.fragment,e),Cs=u(e),V=o(e,"H2",{class:!0});var Do=l(V);ce=o(Do,"A",{id:!0,class:!0,href:!0});var Xi=l(ce);Ht=o(Xi,"SPAN",{});var Zi=l(Ht);m(Ie.$$.fragment,Zi),Zi.forEach(a),Xi.forEach(a),Sl=u(Do),Rt=o(Do,"SPAN",{});var ec=l(Rt);Ml=r(ec,"Module attributes"),ec.forEach(a),Do.forEach(a),Os=u(e),pe=o(e,"P",{});var Co=l(pe);Bl=r(Co,"All evalution modules come with a range of useful attributes that help to use a module stored in a "),Ne=o(Co,"A",{href:!0,rel:!0});var tc=l(Ne);Ut=o(tc,"CODE",{});var ac=l(Ut);Ll=r(ac,"EvaluationModuleInfo"),ac.forEach(a),tc.forEach(a),Wl=r(Co," object."),Co.forEach(a),Is=u(e),ue=o(e,"TABLE",{});var Oo=l(ue);Ft=o(Oo,"THEAD",{});var sc=l(Ft);Se=o(sc,"TR",{});var Io=l(Se);Vt=o(Io,"TH",{});var oc=l(Vt);Gl=r(oc,"Attribute"),oc.forEach(a),Hl=u(Io),Yt=o(Io,"TH",{});var lc=l(Yt);Rl=r(lc,"Description"),lc.forEach(a),Io.forEach(a),sc.forEach(a),Ul=u(Oo),b=o(Oo,"TBODY",{});var $=l(b);Me=o($,"TR",{});var No=l(Me);Jt=o(No,"TD",{});var nc=l(Jt);zt=o(nc,"CODE",{});var rc=l(zt);Fl=r(rc,"description"),rc.forEach(a),nc.forEach(a),Vl=u(No),Kt=o(No,"TD",{});var ic=l(Kt);Yl=r(ic,"A short description of the evaluation module."),ic.forEach(a),No.forEach(a),Jl=u($),Be=o($,"TR",{});var So=l(Be);Qt=o(So,"TD",{});var cc=l(Qt);Xt=o(cc,"CODE",{});var pc=l(Xt);zl=r(pc,"citation"),pc.forEach(a),cc.forEach(a),Kl=u(So),Zt=o(So,"TD",{});var uc=l(Zt);Ql=r(uc,"A BibTex string for citation when available."),uc.forEach(a),So.forEach(a),Xl=u($),Le=o($,"TR",{});var Mo=l(Le);ea=o(Mo,"TD",{});var hc=l(ea);ta=o(hc,"CODE",{});var dc=l(ta);Zl=r(dc,"features"),dc.forEach(a),hc.forEach(a),en=u(Mo),We=o(Mo,"TD",{});var Bo=l(We);tn=r(Bo,"A "),aa=o(Bo,"CODE",{});var mc=l(aa);an=r(mc,"Features"),mc.forEach(a),sn=r(Bo," object defining the input format."),Bo.forEach(a),Mo.forEach(a),on=u($),Ge=o($,"TR",{});var Lo=l(Ge);sa=o(Lo,"TD",{});var fc=l(sa);oa=o(fc,"CODE",{});var vc=l(oa);ln=r(vc,"inputs_description"),vc.forEach(a),fc.forEach(a),nn=u(Lo),la=o(Lo,"TD",{});var yc=l(la);rn=r(yc,"This is equivalent to the modules docstring."),yc.forEach(a),Lo.forEach(a),cn=u($),He=o($,"TR",{});var Wo=l(He);na=o(Wo,"TD",{});var _c=l(na);ra=o(_c,"CODE",{});var bc=l(ra);pn=r(bc,"homepage"),bc.forEach(a),_c.forEach(a),un=u(Wo),ia=o(Wo,"TD",{});var wc=l(ia);hn=r(wc,"The homepage of the module."),wc.forEach(a),Wo.forEach(a),dn=u($),Re=o($,"TR",{});var Go=l(Re);ca=o(Go,"TD",{});var gc=l(ca);pa=o(gc,"CODE",{});var Ec=l(pa);mn=r(Ec,"license"),Ec.forEach(a),gc.forEach(a),fn=u(Go),ua=o(Go,"TD",{});var $c=l(ua);vn=r($c,"The license of the module."),$c.forEach(a),Go.forEach(a),yn=u($),Ue=o($,"TR",{});var Ho=l(Ue);ha=o(Ho,"TD",{});var jc=l(ha);da=o(jc,"CODE",{});var kc=l(da);_n=r(kc,"codebase_urls"),kc.forEach(a),jc.forEach(a),bn=u(Ho),ma=o(Ho,"TD",{});var Tc=l(ma);wn=r(Tc,"Link to the code behind the module."),Tc.forEach(a),Ho.forEach(a),gn=u($),Fe=o($,"TR",{});var Ro=l(Fe);fa=o(Ro,"TD",{});var qc=l(fa);va=o(qc,"CODE",{});var Pc=l(va);En=r(Pc,"reference_urls"),Pc.forEach(a),qc.forEach(a),$n=u(Ro),ya=o(Ro,"TD",{});var Ac=l(ya);jn=r(Ac,"Additional reference URLs."),Ac.forEach(a),Ro.forEach(a),$.forEach(a),Oo.forEach(a),Ns=u(e),he=o(e,"P",{});var Uo=l(he);kn=r(Uo,"Let\u2019s have a look at a few examples. First, let\u2019s look at the "),_a=o(Uo,"CODE",{});var xc=l(_a);Tn=r(xc,"description"),xc.forEach(a),qn=r(Uo," attribute of the accuracy metric:"),Uo.forEach(a),Ss=u(e),m(Ve.$$.fragment,e),Ms=u(e),de=o(e,"P",{});var Fo=l(de);Pn=r(Fo,"You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),ba=o(Fo,"CODE",{});var Dc=l(ba);An=r(Dc,"citation"),Dc.forEach(a),xn=r(Fo," attribute:"),Fo.forEach(a),Bs=u(e),m(Ye.$$.fragment,e),Ls=u(e),gt=o(e,"P",{});var Cc=l(gt);Dn=r(Cc,"Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),Cc.forEach(a),Ws=u(e),m(Je.$$.fragment,e),Gs=u(e),m(me.$$.fragment,e),Hs=u(e),Y=o(e,"H2",{class:!0});var Vo=l(Y);fe=o(Vo,"A",{id:!0,class:!0,href:!0});var Oc=l(fe);wa=o(Oc,"SPAN",{});var Ic=l(wa);m(ze.$$.fragment,Ic),Ic.forEach(a),Oc.forEach(a),Cn=u(Vo),ga=o(Vo,"SPAN",{});var Nc=l(ga);On=r(Nc,"Compute"),Nc.forEach(a),Vo.forEach(a),Rs=u(e),Et=o(e,"P",{});var Sc=l(Et);In=r(Sc,"Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),Sc.forEach(a),Us=u(e),ve=o(e,"OL",{});var Yo=l(ve);Ea=o(Yo,"LI",{});var Mc=l(Ea);Nn=r(Mc,"All-in-one"),Mc.forEach(a),Sn=u(Yo),$a=o(Yo,"LI",{});var Bc=l($a);Mn=r(Bc,"Incremental"),Bc.forEach(a),Yo.forEach(a),Fs=u(e),T=o(e,"P",{});var L=l(T);Bn=r(L,"In the incremental approach the necessary inputs are added to the module with "),ja=o(L,"CODE",{});var Lc=l(ja);Ln=r(Lc,"add"),Lc.forEach(a),Wn=r(L," or "),ka=o(L,"CODE",{});var Wc=l(ka);Gn=r(Wc,"add_batch"),Wc.forEach(a),Hn=r(L," and the score is calculated at the end with "),Ta=o(L,"CODE",{});var Gc=l(Ta);Rn=r(Gc,"compute()"),Gc.forEach(a),Un=r(L,". Alternatively, one can pass all the inputs at once to "),qa=o(L,"CODE",{});var Hc=l(qa);Fn=r(Hc,"compute()"),Hc.forEach(a),Vn=r(L,". Let\u2019s have a look at the two approaches."),L.forEach(a),Vs=u(e),J=o(e,"H3",{class:!0});var Jo=l(J);ye=o(Jo,"A",{id:!0,class:!0,href:!0});var Rc=l(ye);Pa=o(Rc,"SPAN",{});var Uc=l(Pa);m(Ke.$$.fragment,Uc),Uc.forEach(a),Rc.forEach(a),Yn=u(Jo),Aa=o(Jo,"SPAN",{});var Fc=l(Aa);xa=o(Fc,"CODE",{});var Vc=l(xa);Jn=r(Vc,"compute()"),Vc.forEach(a),Fc.forEach(a),Jo.forEach(a),Ys=r(e,"\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute()` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute()` method.\n\n	"),m(Qe.$$.fragment,e),Js=u(e),M=o(e,"P",{});var At=l(M);zn=r(At,"Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),Da=o(At,"CODE",{});var Yc=l(Da);Kn=r(Yc,"add"),Yc.forEach(a),Qn=r(At," or "),Ca=o(At,"CODE",{});var Jc=l(Ca);Xn=r(Jc,"add_batch"),Jc.forEach(a),Zn=r(At," are useful."),At.forEach(a),zs=u(e),z=o(e,"H3",{class:!0});var zo=l(z);_e=o(zo,"A",{id:!0,class:!0,href:!0});var zc=l(_e);Oa=o(zc,"SPAN",{});var Kc=l(Oa);m(Xe.$$.fragment,Kc),Kc.forEach(a),zc.forEach(a),er=u(zo),Ze=o(zo,"SPAN",{});var Ko=l(Ze);Ia=o(Ko,"CODE",{});var Qc=l(Ia);tr=r(Qc,"add"),Qc.forEach(a),ar=r(Ko," and "),Na=o(Ko,"CODE",{});var Xc=l(Na);sr=r(Xc,"add_batch"),Xc.forEach(a),Ko.forEach(a),zo.forEach(a),Ks=u(e),q=o(e,"P",{});var W=l(q);or=r(W,"In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),Sa=o(W,"CODE",{});var Zc=l(Sa);lr=r(Zc,"compute()"),Zc.forEach(a),nr=r(W,". With "),Ma=o(W,"CODE",{});var ep=l(Ma);rr=r(ep,"add"),ep.forEach(a),ir=r(W," and "),Ba=o(W,"CODE",{});var tp=l(Ba);cr=r(tp,"add_batch"),tp.forEach(a),pr=r(W," you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),La=o(W,"CODE",{});var ap=l(La);ur=r(ap,"add"),ap.forEach(a),hr=r(W,":"),W.forEach(a),Qs=u(e),m(et.$$.fragment,e),Xs=u(e),D=o(e,"P",{});var qe=l(D);dr=r(qe,"Once you have gathered all predictions you can call "),Wa=o(qe,"CODE",{});var sp=l(Wa);mr=r(sp,"compute()"),sp.forEach(a),fr=r(qe," to compute the score based on all stored values. When getting predictions and references in batches you can use "),Ga=o(qe,"CODE",{});var op=l(Ga);vr=r(op,"add_batch"),op.forEach(a),yr=r(qe," which adds a list elements for later processing. The rest works as with "),Ha=o(qe,"CODE",{});var lp=l(Ha);_r=r(lp,"add"),lp.forEach(a),br=r(qe,":"),qe.forEach(a),Zs=u(e),m(tt.$$.fragment,e),eo=u(e),$t=o(e,"P",{});var np=l($t);wr=r(np,"This is especially useful when you need to get the predictions from your model in batches:"),np.forEach(a),to=u(e),m(at.$$.fragment,e),ao=u(e),K=o(e,"H3",{class:!0});var Qo=l(K);be=o(Qo,"A",{id:!0,class:!0,href:!0});var rp=l(be);Ra=o(rp,"SPAN",{});var ip=l(Ra);m(st.$$.fragment,ip),ip.forEach(a),rp.forEach(a),gr=u(Qo),Ua=o(Qo,"SPAN",{});var cp=l(Ua);Er=r(cp,"Distributed evaluation"),cp.forEach(a),Qo.forEach(a),so=u(e),P=o(e,"P",{});var G=l(P);$r=r(G,"Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),Fa=o(G,"CODE",{});var pp=l(Fa);jr=r(pp,"f(AuB) = f(A) + f(B)"),pp.forEach(a),kr=r(G,"), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),Va=o(G,"CODE",{});var up=l(Va);Tr=r(up,"f(AuB) \u2260 f(A) + f(B)"),up.forEach(a),qr=r(G,"), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),ot=o(G,"A",{href:!0,rel:!0});var hp=l(ot);Pr=r(hp,"F1"),hp.forEach(a),Ar=r(G," scores of each data subset as your "),Ya=o(G,"STRONG",{});var dp=l(Ya);xr=r(dp,"final metric"),dp.forEach(a),Dr=r(G,"."),G.forEach(a),oo=u(e),jt=o(e,"P",{});var mp=l(jt);Cr=r(mp,"A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),mp.forEach(a),lo=u(e),B=o(e,"P",{});var xt=l(B);Or=r(xt,"\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),Ja=o(xt,"CODE",{});var fp=l(Ja);Ir=r(fp,"EvaluationModule.compute"),fp.forEach(a),Nr=r(xt," the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),za=o(xt,"CODE",{});var vp=l(za);Sr=r(vp,"EvaluationModule.compute"),vp.forEach(a),Mr=r(xt," will perform the final metric evaluation."),xt.forEach(a),no=u(e),kt=o(e,"P",{});var yp=l(kt);Br=r(yp,"This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),yp.forEach(a),ro=u(e),Q=o(e,"H2",{class:!0});var Xo=l(Q);we=o(Xo,"A",{id:!0,class:!0,href:!0});var _p=l(we);Ka=o(_p,"SPAN",{});var bp=l(Ka);m(lt.$$.fragment,bp),bp.forEach(a),_p.forEach(a),Lr=u(Xo),Qa=o(Xo,"SPAN",{});var wp=l(Qa);Wr=r(wp,"Save and push to hub"),wp.forEach(a),Xo.forEach(a),io=u(e),ge=o(e,"P",{});var Zo=l(ge);Gr=r(Zo,"Saving and sharing evaluation results is an important step. We provide the "),Xa=o(Zo,"CODE",{});var gp=l(Xa);Hr=r(gp,"evaluate.save()"),gp.forEach(a),Rr=r(Zo," function to easily save metrics result. You can either point pass a specific filename or a directory. In the latter case the results are saved in a file with an automatically created file name. Besides the directory or file name the function takes any key-value pairs as inputs and stores them in a JSON file."),Zo.forEach(a),co=u(e),m(nt.$$.fragment,e),po=u(e),Tt=o(e,"P",{});var Ep=l(Tt);Ur=r(Ep,"The content of the JSON file look like the following:"),Ep.forEach(a),uo=u(e),m(rt.$$.fragment,e),ho=u(e),qt=o(e,"P",{});var $p=l(qt);Fr=r($p,"In addition to the specified fields it also contains information about the system useful for reproducing the results."),$p.forEach(a),mo=u(e),Ee=o(e,"P",{});var el=l(Ee);Vr=r(el,"Besides storing the results locally we also want to report them on the model\u2019s repository on the hub. With the "),Za=o(el,"CODE",{});var jp=l(Za);Yr=r(jp,"evaluate.push_to_hub()"),jp.forEach(a),Jr=r(el," you can easily report an evaluation results to the model\u2019s repository:"),el.forEach(a),fo=u(e),m(it.$$.fragment,e),vo=u(e),X=o(e,"H2",{class:!0});var tl=l(X);$e=o(tl,"A",{id:!0,class:!0,href:!0});var kp=l($e);es=o(kp,"SPAN",{});var Tp=l(es);m(ct.$$.fragment,Tp),Tp.forEach(a),kp.forEach(a),zr=u(tl),ts=o(tl,"SPAN",{});var qp=l(ts);Kr=r(qp,"Evaluator"),qp.forEach(a),tl.forEach(a),yo=u(e),g=o(e,"P",{});var C=l(g);Qr=r(C,"The "),as=o(C,"CODE",{});var Pp=l(as);Xr=r(Pp,"evaluate.evaluator()"),Pp.forEach(a),Zr=r(C," provides integrate the inference part of evaluation and only requires a model, dataset, metric in contrast to the metrics in "),ss=o(C,"CODE",{});var Ap=l(ss);ei=r(Ap,"EvaluationModule"),Ap.forEach(a),ti=r(C,"s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric. To make that possible it uses the "),os=o(C,"CODE",{});var xp=l(os);ai=r(xp,"Pipeline"),xp.forEach(a),si=r(C," abstraction from "),ls=o(C,"CODE",{});var Dp=l(ls);oi=r(Dp,"transformers"),Dp.forEach(a),li=r(C,". However, you can use your own framework as long as it follows the "),ns=o(C,"CODE",{});var Cp=l(ns);ni=r(Cp,"Pipeline"),Cp.forEach(a),ri=r(C," interface."),C.forEach(a),_o=u(e),je=o(e,"P",{});var al=l(je);ii=r(al,"To make an evaluation with the "),rs=o(al,"CODE",{});var Op=l(rs);ci=r(Op,"evaluator"),Op.forEach(a),pi=r(al," let\u2019s load a pipeline with an model trained on IMDb, the IMDb test split and the accuracy metric."),al.forEach(a),bo=u(e),m(pt.$$.fragment,e),wo=u(e),ke=o(e,"P",{});var sl=l(ke);ui=r(sl,"Then we can create an evaluator for text classification and pass the three objects to the "),is=o(sl,"CODE",{});var Ip=l(is);hi=r(Ip,"compute"),Ip.forEach(a),di=r(sl," method. With the label mapping we provide a method to align the pipeline outputs with the label column in the dataset:"),sl.forEach(a),go=u(e),m(ut.$$.fragment,e),Eo=u(e),Te=o(e,"P",{});var ol=l(Te);mi=r(ol,"Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),cs=o(ol,"EM",{});var Np=l(cs);fi=r(Np,"bootstrapping"),Np.forEach(a),vi=r(ol," we compute confidence intervales and the standard error which helps estimate how stable a score is:"),ol.forEach(a),$o=u(e),m(ht.$$.fragment,e),jo=u(e),E=o(e,"P",{});var O=l(E);yi=r(O,"The evaluator expects a "),ps=o(O,"CODE",{});var Sp=l(ps);_i=r(Sp,'"text"'),Sp.forEach(a),bi=r(O," and "),us=o(O,"CODE",{});var Mp=l(us);wi=r(Mp,'"label"'),Mp.forEach(a),gi=r(O," column for the data input. If your dataset differs you can provide the columns with the keywords "),hs=o(O,"CODE",{});var Bp=l(hs);Ei=r(Bp,'input_column="text"'),Bp.forEach(a),$i=r(O," and "),ds=o(O,"CODE",{});var Lp=l(ds);ji=r(Lp,'label_column="label"'),Lp.forEach(a),ki=r(O,". Currently only "),ms=o(O,"CODE",{});var Wp=l(ms);Ti=r(Wp,'"text-classification"'),Wp.forEach(a),qi=r(O," is supported with more tasks being added in the future."),O.forEach(a),this.h()},h(){h(w,"name","hf:doc:metadata"),h(w,"content",JSON.stringify(zp)),h(x,"id","a-quick-tour"),h(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(x,"href","#a-quick-tour"),h(k,"class","relative group"),h(te,"id","three-types-of-evaluations"),h(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(te,"href","#three-types-of-evaluations"),h(R,"class","relative group"),h(vt,"href","hf.co/evaluate-metric"),h(yt,"href","hf.co/evaluate-comparison"),h(_t,"href","hf.co/evaluate-measurement"),h(ne,"id","load"),h(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ne,"href","#load"),h(U,"class","relative group"),h(ie,"id","community-modules"),h(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ie,"href","#community-modules"),h(F,"class","relative group"),h(ce,"id","module-attributes"),h(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ce,"href","#module-attributes"),h(V,"class","relative group"),h(Ne,"href","https://moon-ci-docs.huggingface.co/docs/evaluate/pr_72/en/package_reference/main_classes#evaluate.EvaluationModuleInfo"),h(Ne,"rel","nofollow"),h(fe,"id","compute"),h(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(fe,"href","#compute"),h(Y,"class","relative group"),h(ye,"id","compute"),h(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ye,"href","#compute"),h(J,"class","relative group"),h(_e,"id","add-and-addbatch"),h(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(_e,"href","#add-and-addbatch"),h(z,"class","relative group"),h(be,"id","distributed-evaluation"),h(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(be,"href","#distributed-evaluation"),h(K,"class","relative group"),h(ot,"href","https://huggingface.co/metrics/f1"),h(ot,"rel","nofollow"),h(we,"id","save-and-push-to-hub"),h(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(we,"href","#save-and-push-to-hub"),h(Q,"class","relative group"),h($e,"id","evaluator"),h($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h($e,"href","#evaluator"),h(X,"class","relative group")},m(e,i){t(document.head,w),c(e,Z,i),c(e,k,i),t(k,x),t(x,H),f(A,H,null),t(k,N),t(k,ee),t(ee,ll),c(e,bs,i),c(e,mt,i),t(mt,nl),c(e,ws,i),c(e,R,i),t(R,te),t(te,Dt),f(Pe,Dt,null),t(R,rl),t(R,Ct),t(Ct,il),c(e,gs,i),c(e,ft,i),t(ft,cl),c(e,Es,i),c(e,S,i),t(S,ae),t(ae,Ot),t(Ot,pl),t(ae,ul),t(ae,vt),t(vt,hl),t(ae,dl),t(S,ml),t(S,se),t(se,It),t(It,fl),t(se,vl),t(se,yt),t(yt,yl),t(se,_l),t(S,bl),t(S,oe),t(oe,Nt),t(Nt,wl),t(oe,gl),t(oe,_t),t(_t,El),t(oe,$l),c(e,$s,i),c(e,le,i),t(le,jl),t(le,St),t(St,kl),t(le,Tl),c(e,js,i),c(e,U,i),t(U,ne),t(ne,Mt),f(Ae,Mt,null),t(U,ql),t(U,Bt),t(Bt,Pl),c(e,ks,i),c(e,re,i),t(re,Al),t(re,Lt),t(Lt,xl),t(re,Dl),c(e,Ts,i),f(xe,e,i),c(e,qs,i),c(e,bt,i),t(bt,Cl),c(e,Ps,i),f(De,e,i),c(e,As,i),c(e,F,i),t(F,ie),t(ie,Wt),f(Ce,Wt,null),t(F,Ol),t(F,Gt),t(Gt,Il),c(e,xs,i),c(e,wt,i),t(wt,Nl),c(e,Ds,i),f(Oe,e,i),c(e,Cs,i),c(e,V,i),t(V,ce),t(ce,Ht),f(Ie,Ht,null),t(V,Sl),t(V,Rt),t(Rt,Ml),c(e,Os,i),c(e,pe,i),t(pe,Bl),t(pe,Ne),t(Ne,Ut),t(Ut,Ll),t(pe,Wl),c(e,Is,i),c(e,ue,i),t(ue,Ft),t(Ft,Se),t(Se,Vt),t(Vt,Gl),t(Se,Hl),t(Se,Yt),t(Yt,Rl),t(ue,Ul),t(ue,b),t(b,Me),t(Me,Jt),t(Jt,zt),t(zt,Fl),t(Me,Vl),t(Me,Kt),t(Kt,Yl),t(b,Jl),t(b,Be),t(Be,Qt),t(Qt,Xt),t(Xt,zl),t(Be,Kl),t(Be,Zt),t(Zt,Ql),t(b,Xl),t(b,Le),t(Le,ea),t(ea,ta),t(ta,Zl),t(Le,en),t(Le,We),t(We,tn),t(We,aa),t(aa,an),t(We,sn),t(b,on),t(b,Ge),t(Ge,sa),t(sa,oa),t(oa,ln),t(Ge,nn),t(Ge,la),t(la,rn),t(b,cn),t(b,He),t(He,na),t(na,ra),t(ra,pn),t(He,un),t(He,ia),t(ia,hn),t(b,dn),t(b,Re),t(Re,ca),t(ca,pa),t(pa,mn),t(Re,fn),t(Re,ua),t(ua,vn),t(b,yn),t(b,Ue),t(Ue,ha),t(ha,da),t(da,_n),t(Ue,bn),t(Ue,ma),t(ma,wn),t(b,gn),t(b,Fe),t(Fe,fa),t(fa,va),t(va,En),t(Fe,$n),t(Fe,ya),t(ya,jn),c(e,Ns,i),c(e,he,i),t(he,kn),t(he,_a),t(_a,Tn),t(he,qn),c(e,Ss,i),f(Ve,e,i),c(e,Ms,i),c(e,de,i),t(de,Pn),t(de,ba),t(ba,An),t(de,xn),c(e,Bs,i),f(Ye,e,i),c(e,Ls,i),c(e,gt,i),t(gt,Dn),c(e,Ws,i),f(Je,e,i),c(e,Gs,i),f(me,e,i),c(e,Hs,i),c(e,Y,i),t(Y,fe),t(fe,wa),f(ze,wa,null),t(Y,Cn),t(Y,ga),t(ga,On),c(e,Rs,i),c(e,Et,i),t(Et,In),c(e,Us,i),c(e,ve,i),t(ve,Ea),t(Ea,Nn),t(ve,Sn),t(ve,$a),t($a,Mn),c(e,Fs,i),c(e,T,i),t(T,Bn),t(T,ja),t(ja,Ln),t(T,Wn),t(T,ka),t(ka,Gn),t(T,Hn),t(T,Ta),t(Ta,Rn),t(T,Un),t(T,qa),t(qa,Fn),t(T,Vn),c(e,Vs,i),c(e,J,i),t(J,ye),t(ye,Pa),f(Ke,Pa,null),t(J,Yn),t(J,Aa),t(Aa,xa),t(xa,Jn),c(e,Ys,i),f(Qe,e,i),c(e,Js,i),c(e,M,i),t(M,zn),t(M,Da),t(Da,Kn),t(M,Qn),t(M,Ca),t(Ca,Xn),t(M,Zn),c(e,zs,i),c(e,z,i),t(z,_e),t(_e,Oa),f(Xe,Oa,null),t(z,er),t(z,Ze),t(Ze,Ia),t(Ia,tr),t(Ze,ar),t(Ze,Na),t(Na,sr),c(e,Ks,i),c(e,q,i),t(q,or),t(q,Sa),t(Sa,lr),t(q,nr),t(q,Ma),t(Ma,rr),t(q,ir),t(q,Ba),t(Ba,cr),t(q,pr),t(q,La),t(La,ur),t(q,hr),c(e,Qs,i),f(et,e,i),c(e,Xs,i),c(e,D,i),t(D,dr),t(D,Wa),t(Wa,mr),t(D,fr),t(D,Ga),t(Ga,vr),t(D,yr),t(D,Ha),t(Ha,_r),t(D,br),c(e,Zs,i),f(tt,e,i),c(e,eo,i),c(e,$t,i),t($t,wr),c(e,to,i),f(at,e,i),c(e,ao,i),c(e,K,i),t(K,be),t(be,Ra),f(st,Ra,null),t(K,gr),t(K,Ua),t(Ua,Er),c(e,so,i),c(e,P,i),t(P,$r),t(P,Fa),t(Fa,jr),t(P,kr),t(P,Va),t(Va,Tr),t(P,qr),t(P,ot),t(ot,Pr),t(P,Ar),t(P,Ya),t(Ya,xr),t(P,Dr),c(e,oo,i),c(e,jt,i),t(jt,Cr),c(e,lo,i),c(e,B,i),t(B,Or),t(B,Ja),t(Ja,Ir),t(B,Nr),t(B,za),t(za,Sr),t(B,Mr),c(e,no,i),c(e,kt,i),t(kt,Br),c(e,ro,i),c(e,Q,i),t(Q,we),t(we,Ka),f(lt,Ka,null),t(Q,Lr),t(Q,Qa),t(Qa,Wr),c(e,io,i),c(e,ge,i),t(ge,Gr),t(ge,Xa),t(Xa,Hr),t(ge,Rr),c(e,co,i),f(nt,e,i),c(e,po,i),c(e,Tt,i),t(Tt,Ur),c(e,uo,i),f(rt,e,i),c(e,ho,i),c(e,qt,i),t(qt,Fr),c(e,mo,i),c(e,Ee,i),t(Ee,Vr),t(Ee,Za),t(Za,Yr),t(Ee,Jr),c(e,fo,i),f(it,e,i),c(e,vo,i),c(e,X,i),t(X,$e),t($e,es),f(ct,es,null),t(X,zr),t(X,ts),t(ts,Kr),c(e,yo,i),c(e,g,i),t(g,Qr),t(g,as),t(as,Xr),t(g,Zr),t(g,ss),t(ss,ei),t(g,ti),t(g,os),t(os,ai),t(g,si),t(g,ls),t(ls,oi),t(g,li),t(g,ns),t(ns,ni),t(g,ri),c(e,_o,i),c(e,je,i),t(je,ii),t(je,rs),t(rs,ci),t(je,pi),c(e,bo,i),f(pt,e,i),c(e,wo,i),c(e,ke,i),t(ke,ui),t(ke,is),t(is,hi),t(ke,di),c(e,go,i),f(ut,e,i),c(e,Eo,i),c(e,Te,i),t(Te,mi),t(Te,cs),t(cs,fi),t(Te,vi),c(e,$o,i),f(ht,e,i),c(e,jo,i),c(e,E,i),t(E,yi),t(E,ps),t(ps,_i),t(E,bi),t(E,us),t(us,wi),t(E,gi),t(E,hs),t(hs,Ei),t(E,$i),t(E,ds),t(ds,ji),t(E,ki),t(E,ms),t(ms,Ti),t(E,qi),ko=!0},p(e,[i]){const dt={};i&2&&(dt.$$scope={dirty:i,ctx:e}),me.$set(dt)},i(e){ko||(v(A.$$.fragment,e),v(Pe.$$.fragment,e),v(Ae.$$.fragment,e),v(xe.$$.fragment,e),v(De.$$.fragment,e),v(Ce.$$.fragment,e),v(Oe.$$.fragment,e),v(Ie.$$.fragment,e),v(Ve.$$.fragment,e),v(Ye.$$.fragment,e),v(Je.$$.fragment,e),v(me.$$.fragment,e),v(ze.$$.fragment,e),v(Ke.$$.fragment,e),v(Qe.$$.fragment,e),v(Xe.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v(at.$$.fragment,e),v(st.$$.fragment,e),v(lt.$$.fragment,e),v(nt.$$.fragment,e),v(rt.$$.fragment,e),v(it.$$.fragment,e),v(ct.$$.fragment,e),v(pt.$$.fragment,e),v(ut.$$.fragment,e),v(ht.$$.fragment,e),ko=!0)},o(e){y(A.$$.fragment,e),y(Pe.$$.fragment,e),y(Ae.$$.fragment,e),y(xe.$$.fragment,e),y(De.$$.fragment,e),y(Ce.$$.fragment,e),y(Oe.$$.fragment,e),y(Ie.$$.fragment,e),y(Ve.$$.fragment,e),y(Ye.$$.fragment,e),y(Je.$$.fragment,e),y(me.$$.fragment,e),y(ze.$$.fragment,e),y(Ke.$$.fragment,e),y(Qe.$$.fragment,e),y(Xe.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(at.$$.fragment,e),y(st.$$.fragment,e),y(lt.$$.fragment,e),y(nt.$$.fragment,e),y(rt.$$.fragment,e),y(it.$$.fragment,e),y(ct.$$.fragment,e),y(pt.$$.fragment,e),y(ut.$$.fragment,e),y(ht.$$.fragment,e),ko=!1},d(e){a(w),e&&a(Z),e&&a(k),_(A),e&&a(bs),e&&a(mt),e&&a(ws),e&&a(R),_(Pe),e&&a(gs),e&&a(ft),e&&a(Es),e&&a(S),e&&a($s),e&&a(le),e&&a(js),e&&a(U),_(Ae),e&&a(ks),e&&a(re),e&&a(Ts),_(xe,e),e&&a(qs),e&&a(bt),e&&a(Ps),_(De,e),e&&a(As),e&&a(F),_(Ce),e&&a(xs),e&&a(wt),e&&a(Ds),_(Oe,e),e&&a(Cs),e&&a(V),_(Ie),e&&a(Os),e&&a(pe),e&&a(Is),e&&a(ue),e&&a(Ns),e&&a(he),e&&a(Ss),_(Ve,e),e&&a(Ms),e&&a(de),e&&a(Bs),_(Ye,e),e&&a(Ls),e&&a(gt),e&&a(Ws),_(Je,e),e&&a(Gs),_(me,e),e&&a(Hs),e&&a(Y),_(ze),e&&a(Rs),e&&a(Et),e&&a(Us),e&&a(ve),e&&a(Fs),e&&a(T),e&&a(Vs),e&&a(J),_(Ke),e&&a(Ys),_(Qe,e),e&&a(Js),e&&a(M),e&&a(zs),e&&a(z),_(Xe),e&&a(Ks),e&&a(q),e&&a(Qs),_(et,e),e&&a(Xs),e&&a(D),e&&a(Zs),_(tt,e),e&&a(eo),e&&a($t),e&&a(to),_(at,e),e&&a(ao),e&&a(K),_(st),e&&a(so),e&&a(P),e&&a(oo),e&&a(jt),e&&a(lo),e&&a(B),e&&a(no),e&&a(kt),e&&a(ro),e&&a(Q),_(lt),e&&a(io),e&&a(ge),e&&a(co),_(nt,e),e&&a(po),e&&a(Tt),e&&a(uo),_(rt,e),e&&a(ho),e&&a(qt),e&&a(mo),e&&a(Ee),e&&a(fo),_(it,e),e&&a(vo),e&&a(X),_(ct),e&&a(yo),e&&a(g),e&&a(_o),e&&a(je),e&&a(bo),_(pt,e),e&&a(wo),e&&a(ke),e&&a(go),_(ut,e),e&&a(Eo),e&&a(Te),e&&a($o),_(ht,e),e&&a(jo),e&&a(E)}}}const zp={local:"a-quick-tour",sections:[{local:"three-types-of-evaluations",title:"Three types of evaluations"},{local:"load",sections:[{local:"community-modules",title:"Community modules"}],title:"Load"},{local:"module-attributes",title:"Module attributes"},{local:"compute",sections:[{local:"compute",title:"`compute()`"},{local:"add-and-addbatch",title:"`add` and `add_batch`"},{local:"distributed-evaluation",title:"Distributed evaluation"}],title:"Compute"},{local:"save-and-push-to-hub",title:"Save and push to hub"},{local:"evaluator",title:"Evaluator"}],title:"A quick tour"};function Kp(_s){return Fp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class tu extends Gp{constructor(w){super();Hp(this,w,Kp,Jp,Rp,{})}}export{tu as default,zp as metadata};
