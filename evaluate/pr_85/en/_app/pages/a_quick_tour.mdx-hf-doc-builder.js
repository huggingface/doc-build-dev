import{S as bu,i as wu,s as gu,e as s,k as p,w as d,t as n,M as Eu,c as l,d as a,m as u,a as o,x as m,h as r,b as h,G as t,g as c,y as f,q as v,o as y,B as _,v as $u}from"../chunks/vendor-hf-doc-builder.js";import{T as ju}from"../chunks/Tip-hf-doc-builder.js";import{I}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as g}from"../chunks/CodeBlock-hf-doc-builder.js";function ku(Ds){let w,se,k,A,U;return{c(){w=s("p"),se=n("Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=s("code"),A=n("features"),U=n(". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation.")},l(P){w=l(P,"P",{});var N=o(w);se=r(N,"Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=l(N,"CODE",{});var le=o(k);A=r(le,"features"),le.forEach(a),U=r(N,". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation."),N.forEach(a)},m(P,N){c(P,w,N),t(w,se),t(w,k),t(k,A),t(w,U)},d(P){P&&a(w)}}}function xu(Ds){let w,se,k,A,U,P,N,le,wo,Cs,_t,go,Os,Y,oe,Wt,De,Eo,Ft,$o,Is,bt,jo,Ns,S,ne,Gt,ko,xo,wt,To,qo,Po,re,Rt,Ao,Do,gt,Co,Oo,Io,ie,Ut,No,So,Et,Mo,Bo,Ss,ce,Lo,$t,Ho,Wo,Ms,V,pe,Yt,Ce,Fo,Vt,Go,Bs,ue,Ro,Jt,Uo,Yo,Ls,Oe,Hs,jt,Vo,Ws,Ie,Fs,J,he,zt,Ne,Jo,Kt,zo,Gs,kt,Ko,Rs,Se,Us,z,de,Qt,Me,Qo,Xt,Xo,Ys,me,Zo,Zt,en,tn,Vs,Be,Js,K,fe,ea,Le,an,ta,sn,zs,ve,ln,xt,on,nn,Ks,ye,aa,He,sa,rn,cn,la,pn,un,b,We,oa,na,hn,dn,ra,mn,fn,Fe,ia,ca,vn,yn,pa,_n,bn,Ge,ua,ha,wn,gn,Re,En,da,$n,jn,kn,Ue,ma,fa,xn,Tn,va,qn,Pn,Ye,ya,_a,An,Dn,ba,Cn,On,Ve,wa,ga,In,Nn,Ea,Sn,Mn,Je,$a,ja,Bn,Ln,ka,Hn,Wn,ze,xa,Ta,Fn,Gn,qa,Rn,Qs,_e,Un,Pa,Yn,Vn,Xs,Ke,Zs,be,Jn,Aa,zn,Kn,el,Qe,tl,Tt,Qn,al,Xe,sl,we,ll,Q,ge,Da,Ze,Xn,Ca,Zn,ol,qt,er,nl,Ee,Oa,tr,ar,Ia,sr,rl,x,lr,Na,or,nr,Sa,rr,ir,Pt,cr,pr,Ma,ur,hr,il,X,$e,Ba,et,dr,La,Ha,mr,cl,tt,pl,M,fr,Wa,vr,yr,Fa,_r,br,ul,Z,je,Ga,at,wr,st,Ra,gr,Er,Ua,$r,hl,T,jr,Ya,kr,xr,Va,Tr,qr,Ja,Pr,Ar,za,Dr,Cr,dl,lt,ml,D,Or,Ka,Ir,Nr,Qa,Sr,Mr,Xa,Br,Lr,fl,ot,vl,At,Hr,yl,nt,_l,ee,ke,Za,rt,Wr,es,Fr,bl,q,Gr,ts,Rr,Ur,as,Yr,Vr,it,Jr,zr,ss,Kr,Qr,wl,Dt,Xr,gl,B,Zr,ls,ei,ti,os,ai,si,El,Ct,li,$l,te,xe,ns,ct,oi,rs,ni,jl,Te,ri,is,ii,ci,kl,pt,xl,Ot,pi,Tl,ut,ql,It,ui,Pl,qe,hi,cs,di,mi,Al,ht,Dl,ae,Pe,ps,dt,fi,us,vi,Cl,E,yi,hs,_i,bi,ds,wi,gi,ms,Ei,$i,fs,ji,ki,vs,xi,Ti,Ol,L,qi,ys,Pi,Ai,_s,Di,Ci,Il,mt,Nl,H,Oi,bs,Ii,Ni,ws,Si,Mi,Sl,ft,Ml,W,Bi,gs,Li,Hi,Es,Wi,Fi,Bl,vt,Ll,$,Gi,$s,Ri,Ui,js,Yi,Vi,ks,Ji,zi,xs,Ki,Qi,Ts,Xi,Zi,Hl;return P=new I({}),De=new I({}),Ce=new I({}),Oe=new g({props:{code:`import evaluate
accuracy = evaluate.load("accuracy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> evaluate
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),Ie=new g({props:{code:'word_length = evaluate.load("word_length", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>word_length = evaluate.load(<span class="hljs-string">&quot;word_length&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Ne=new I({}),Se=new g({props:{code:'element_count = evaluate.load("lvwerra/element_count", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>element_count = evaluate.load(<span class="hljs-string">&quot;lvwerra/element_count&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Me=new I({}),Be=new g({props:{code:`evaluate.list_evaluation_modules(
  module_type="comparison",
  include_community=False, 
  with_details=True)

>>> [{'name': 'mcnemar', 'type': 'comparison', 'community': False, 'likes': 1},
...  {'name': 'exact_match', 'type': 'comparison', 'community': False, 'likes': 0}]`,highlighted:`evaluate.list_evaluation_modules(
  module_type=<span class="hljs-string">&quot;comparison&quot;</span>,
  include_community=<span class="hljs-literal">False</span>, 
  with_details=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>[{<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;mcnemar&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;comparison&#x27;</span>, <span class="hljs-string">&#x27;community&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">1</span>},
<span class="hljs-meta">... </span> {<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;exact_match&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;comparison&#x27;</span>, <span class="hljs-string">&#x27;community&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">0</span>}]`}}),Le=new I({}),Ke=new g({props:{code:`accuracy = evaluate.load("accuracy")
accuracy.description`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.description
Accuracy <span class="hljs-keyword">is</span> the proportion of correct predictions among the total number of cases processed. It can be computed <span class="hljs-keyword">with</span>:
Accuracy = (TP + TN) / (TP + TN + FP + FN)
 Where:
TP: <span class="hljs-literal">True</span> positive
TN: <span class="hljs-literal">True</span> negative
FP: <span class="hljs-literal">False</span> positive
FN: <span class="hljs-literal">False</span> negative`}}),Qe=new g({props:{code:"accuracy.citation",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.citation
<span class="hljs-meta">@article{scikit-learn,</span>
  title={Scikit-learn: Machine Learning <span class="hljs-keyword">in</span> {P}ython},
  author={Pedregosa, F. <span class="hljs-keyword">and</span> Varoquaux, G. <span class="hljs-keyword">and</span> Gramfort, A. <span class="hljs-keyword">and</span> Michel, V.
         <span class="hljs-keyword">and</span> Thirion, B. <span class="hljs-keyword">and</span> Grisel, O. <span class="hljs-keyword">and</span> Blondel, M. <span class="hljs-keyword">and</span> Prettenhofer, P.
         <span class="hljs-keyword">and</span> Weiss, R. <span class="hljs-keyword">and</span> Dubourg, V. <span class="hljs-keyword">and</span> Vanderplas, J. <span class="hljs-keyword">and</span> Passos, A. <span class="hljs-keyword">and</span>
         Cournapeau, D. <span class="hljs-keyword">and</span> Brucher, M. <span class="hljs-keyword">and</span> Perrot, M. <span class="hljs-keyword">and</span> Duchesnay, E.},
  journal={Journal of Machine Learning Research},
  volume={<span class="hljs-number">12</span>},
  pages={<span class="hljs-number">2825</span>--<span class="hljs-number">2830</span>},
  year={<span class="hljs-number">2011</span>}
}`}}),Xe=new g({props:{code:"accuracy.features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.features
{
    <span class="hljs-string">&#x27;predictions&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
    <span class="hljs-string">&#x27;references&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
}`}}),we=new ju({props:{$$slots:{default:[ku]},$$scope:{ctx:Ds}}}),Ze=new I({}),et=new I({}),tt=new g({props:{code:"accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),at=new I({}),lt=new g({props:{code:`for ref, pred in zip([0,1,0,1], [1,0,0,1]):
    accuracy.add(references=ref, predictions=pred)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> ref, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add(references=ref, predictions=pred)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),ot=new g({props:{code:`for refs, preds in zip([[0,1],[0,1]], [[1,0],[0,1]]):
    accuracy.add_batch(references=refs, predictions=preds)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> refs, preds <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]], [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add_batch(references=refs, predictions=preds)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),nt=new g({props:{code:`for model_inputs, gold_standards in evaluation_dataset:
    predictions = model(model_inputs)
    metric.add_batch(references=gold_standards, predictions=predictions)
metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> model_inputs, gold_standards <span class="hljs-keyword">in</span> evaluation_dataset:
<span class="hljs-meta">&gt;&gt;&gt; </span>    predictions = model(model_inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric.add_batch(references=gold_standards, predictions=predictions)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.compute()`}}),rt=new I({}),ct=new I({}),pt=new g({props:{code:`result = accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])

hyperparams = {"model": "bert-base-uncased"}
evaluate.save("./results/"experiment="run 42", **result, **hyperparams)
>>> PosixPath('results/result-2022_05_30-22_09_11.json')`,highlighted:`result = accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])

hyperparams = {<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;bert-base-uncased&quot;</span>}
evaluate.save(<span class="hljs-string">&quot;./results/&quot;</span>experiment=<span class="hljs-string">&quot;run 42&quot;</span>, **result, **hyperparams)
<span class="hljs-meta">&gt;&gt;&gt; </span>PosixPath(<span class="hljs-string">&#x27;results/result-2022_05_30-22_09_11.json&#x27;</span>)`}}),ut=new g({props:{code:`{
    "experiment": "run 42",
    "accuracy": 0.5,
    "model": "bert-base-uncased",
    "_timestamp": "2022-05-30T22:09:11.959469",
    "_git_commit_hash": "123456789abcdefghijkl",
    "_evaluate_version": "0.1.0",
    "_python_version": "3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]",
    "_interpreter_path": "/Users/leandro/git/evaluate/env/bin/python"
}`,highlighted:`<span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;experiment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;run 42&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;accuracy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bert-base-uncased&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-05-30T22:09:11.959469&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_git_commit_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789abcdefghijkl&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_evaluate_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_python_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_interpreter_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Users/leandro/git/evaluate/env/bin/python&quot;</span>
<span class="hljs-punctuation">}</span>`}}),ht=new g({props:{code:`evaluate.push_to_hub(
  model_id="huggingface/gpt2-wikitext2",  # model repository on hub
  metric_value=0.5,                       # metric value
  metric_type="bleu",                     # metric name, e.g. accuracy.name
  metric_name="BLEU",                     # pretty name which is displayed
  dataset_type="wikitext",                # dataset name on the hub
  dataset_name="WikiText",                # pretty name
  dataset_split="test",                   # dataset split used
  task_type="text-generation",            # task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json
  task_name="Text Generation"             # pretty name for task
)`,highlighted:`evaluate.push_to_hub(
  model_id=<span class="hljs-string">&quot;huggingface/gpt2-wikitext2&quot;</span>,  <span class="hljs-comment"># model repository on hub</span>
  metric_value=<span class="hljs-number">0.5</span>,                       <span class="hljs-comment"># metric value</span>
  metric_type=<span class="hljs-string">&quot;bleu&quot;</span>,                     <span class="hljs-comment"># metric name, e.g. accuracy.name</span>
  metric_name=<span class="hljs-string">&quot;BLEU&quot;</span>,                     <span class="hljs-comment"># pretty name which is displayed</span>
  dataset_type=<span class="hljs-string">&quot;wikitext&quot;</span>,                <span class="hljs-comment"># dataset name on the hub</span>
  dataset_name=<span class="hljs-string">&quot;WikiText&quot;</span>,                <span class="hljs-comment"># pretty name</span>
  dataset_split=<span class="hljs-string">&quot;test&quot;</span>,                   <span class="hljs-comment"># dataset split used</span>
  task_type=<span class="hljs-string">&quot;text-generation&quot;</span>,            <span class="hljs-comment"># task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json</span>
  task_name=<span class="hljs-string">&quot;Text Generation&quot;</span>             <span class="hljs-comment"># pretty name for task</span>
)`}}),dt=new I({}),mt=new g({props:{code:`from transformers import pipeline
from datasets import load_dataset
from evaluate import evaluator
import evaluate

pipe = pipeline("text-classification", model="lvwerra/distilbert-imdb", device=0)
data = load_dataset("imdb", split="test").shuffle().select(range(1000))
metric = evaluate.load("accuracy")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-keyword">from</span> evaluate <span class="hljs-keyword">import</span> evaluator
<span class="hljs-keyword">import</span> evaluate

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=<span class="hljs-string">&quot;lvwerra/distilbert-imdb&quot;</span>, device=<span class="hljs-number">0</span>)
data = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, split=<span class="hljs-string">&quot;test&quot;</span>).shuffle().select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))
metric = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),ft=new g({props:{code:`eval = evaluator("text-classification")

results = eval.compute(model_or_pipeline=pipe, data=data, metric=metric, label_mapping={"NEGATIVE": 0, "POSITIVE": 1},)

print(results)
>>> {'accuracy': 0.934}`,highlighted:`<span class="hljs-built_in">eval</span> = evaluator(<span class="hljs-string">&quot;text-classification&quot;</span>)

results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric, label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.934</span>}`}}),vt=new g({props:{code:`results = eval.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={"NEGATIVE": 0, "POSITIVE": 1},
                       strategy="bootstrap", n_resamples=200)

print(results)
>>> {'accuracy': {'confidence_interval': (0.906, 0.9406749892841922), 'standard_error': 0.00865213251082787, 'score': 0.923}}`,highlighted:`results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},
                       strategy=<span class="hljs-string">&quot;bootstrap&quot;</span>, n_resamples=<span class="hljs-number">200</span>)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: {<span class="hljs-string">&#x27;confidence_interval&#x27;</span>: (<span class="hljs-number">0.906</span>, <span class="hljs-number">0.9406749892841922</span>), <span class="hljs-string">&#x27;standard_error&#x27;</span>: <span class="hljs-number">0.00865213251082787</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.923</span>}}`}}),{c(){w=s("meta"),se=p(),k=s("h1"),A=s("a"),U=s("span"),d(P.$$.fragment),N=p(),le=s("span"),wo=n("A quick tour"),Cs=p(),_t=s("p"),go=n("\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Os=p(),Y=s("h2"),oe=s("a"),Wt=s("span"),d(De.$$.fragment),Eo=p(),Ft=s("span"),$o=n("Three types of evaluations"),Is=p(),bt=s("p"),jo=n("There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),Ns=p(),S=s("ul"),ne=s("li"),Gt=s("strong"),ko=n("Metric"),xo=n(": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),wt=s("a"),To=n("evaluate-metric"),qo=n("."),Po=p(),re=s("li"),Rt=s("strong"),Ao=n("Comparison"),Do=n(": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),gt=s("a"),Co=n("evaluate-comparison"),Oo=n("."),Io=p(),ie=s("li"),Ut=s("strong"),No=n("Measurement"),So=n(": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),Et=s("a"),Mo=n("evaluate-measurement"),Bo=n("."),Ss=p(),ce=s("p"),Lo=n("Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),$t=s("a"),Ho=n("evaluate.load()"),Wo=n("!"),Ms=p(),V=s("h2"),pe=s("a"),Yt=s("span"),d(Ce.$$.fragment),Fo=p(),Vt=s("span"),Go=n("Load"),Bs=p(),ue=s("p"),Ro=n("Any metric, comparison, or measurement is loaded with the "),Jt=s("code"),Uo=n("evaluate.load"),Yo=n(" function:"),Ls=p(),d(Oe.$$.fragment),Hs=p(),jt=s("p"),Vo=n("If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),Ws=p(),d(Ie.$$.fragment),Fs=p(),J=s("h3"),he=s("a"),zt=s("span"),d(Ne.$$.fragment),Jo=p(),Kt=s("span"),zo=n("Community modules"),Gs=p(),kt=s("p"),Ko=n("Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),Rs=p(),d(Se.$$.fragment),Us=p(),z=s("h3"),de=s("a"),Qt=s("span"),d(Me.$$.fragment),Qo=p(),Xt=s("span"),Xo=n("List available modules"),Ys=p(),me=s("p"),Zo=n("With "),Zt=s("code"),en=n("list_available_modules"),tn=n(" you can check what modules are available on the hub. You can also filter for a specific modules and skip community metrics if you want. You can also see additional information such as likes:"),Vs=p(),d(Be.$$.fragment),Js=p(),K=s("h2"),fe=s("a"),ea=s("span"),d(Le.$$.fragment),an=p(),ta=s("span"),sn=n("Module attributes"),zs=p(),ve=s("p"),ln=n("All evalution modules come with a range of useful attributes that help to use a module stored in a "),xt=s("a"),on=n("EvaluationModuleInfo"),nn=n(" object."),Ks=p(),ye=s("table"),aa=s("thead"),He=s("tr"),sa=s("th"),rn=n("Attribute"),cn=p(),la=s("th"),pn=n("Description"),un=p(),b=s("tbody"),We=s("tr"),oa=s("td"),na=s("code"),hn=n("description"),dn=p(),ra=s("td"),mn=n("A short description of the evaluation module."),fn=p(),Fe=s("tr"),ia=s("td"),ca=s("code"),vn=n("citation"),yn=p(),pa=s("td"),_n=n("A BibTex string for citation when available."),bn=p(),Ge=s("tr"),ua=s("td"),ha=s("code"),wn=n("features"),gn=p(),Re=s("td"),En=n("A "),da=s("code"),$n=n("Features"),jn=n(" object defining the input format."),kn=p(),Ue=s("tr"),ma=s("td"),fa=s("code"),xn=n("inputs_description"),Tn=p(),va=s("td"),qn=n("This is equivalent to the modules docstring."),Pn=p(),Ye=s("tr"),ya=s("td"),_a=s("code"),An=n("homepage"),Dn=p(),ba=s("td"),Cn=n("The homepage of the module."),On=p(),Ve=s("tr"),wa=s("td"),ga=s("code"),In=n("license"),Nn=p(),Ea=s("td"),Sn=n("The license of the module."),Mn=p(),Je=s("tr"),$a=s("td"),ja=s("code"),Bn=n("codebase_urls"),Ln=p(),ka=s("td"),Hn=n("Link to the code behind the module."),Wn=p(),ze=s("tr"),xa=s("td"),Ta=s("code"),Fn=n("reference_urls"),Gn=p(),qa=s("td"),Rn=n("Additional reference URLs."),Qs=p(),_e=s("p"),Un=n("Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Pa=s("code"),Yn=n("description"),Vn=n(" attribute of the accuracy metric:"),Xs=p(),d(Ke.$$.fragment),Zs=p(),be=s("p"),Jn=n("You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Aa=s("code"),zn=n("citation"),Kn=n(" attribute:"),el=p(),d(Qe.$$.fragment),tl=p(),Tt=s("p"),Qn=n("Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),al=p(),d(Xe.$$.fragment),sl=p(),d(we.$$.fragment),ll=p(),Q=s("h2"),ge=s("a"),Da=s("span"),d(Ze.$$.fragment),Xn=p(),Ca=s("span"),Zn=n("Compute"),ol=p(),qt=s("p"),er=n("Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),nl=p(),Ee=s("ol"),Oa=s("li"),tr=n("All-in-one"),ar=p(),Ia=s("li"),sr=n("Incremental"),rl=p(),x=s("p"),lr=n("In the incremental approach the necessary inputs are added to the module with "),Na=s("code"),or=n("EvaluationModule.add()"),nr=n(" or "),Sa=s("code"),rr=n("EvaluationModule.add_batch()"),ir=n(" and the score is calculated at the end with "),Pt=s("a"),cr=n("EvaluationModule.compute()"),pr=n(". Alternatively, one can pass all the inputs at once to "),Ma=s("code"),ur=n("compute()"),hr=n(". Let\u2019s have a look at the two approaches."),il=p(),X=s("h3"),$e=s("a"),Ba=s("span"),d(et.$$.fragment),dr=p(),La=s("span"),Ha=s("code"),mr=n("compute()"),cl=n("\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute()` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute()` method.\n\n	"),d(tt.$$.fragment),pl=p(),M=s("p"),fr=n("Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),Wa=s("code"),vr=n("add()"),yr=n(" or "),Fa=s("code"),_r=n("add_batch()"),br=n(" are useful."),ul=p(),Z=s("h3"),je=s("a"),Ga=s("span"),d(at.$$.fragment),wr=p(),st=s("span"),Ra=s("code"),gr=n("add()"),Er=n(" and "),Ua=s("code"),$r=n("add_batch()"),hl=p(),T=s("p"),jr=n("In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),Ya=s("code"),kr=n("compute()"),xr=n(". With "),Va=s("code"),Tr=n("add()"),qr=n(" and "),Ja=s("code"),Pr=n("add_batch()"),Ar=n(" you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),za=s("code"),Dr=n("add()"),Cr=n(":"),dl=p(),d(lt.$$.fragment),ml=p(),D=s("p"),Or=n("Once you have gathered all predictions you can call "),Ka=s("code"),Ir=n("compute()"),Nr=n(" to compute the score based on all stored values. When getting predictions and references in batches you can use "),Qa=s("code"),Sr=n("add_batch()"),Mr=n(" which adds a list elements for later processing. The rest works as with "),Xa=s("code"),Br=n("add()"),Lr=n(":"),fl=p(),d(ot.$$.fragment),vl=p(),At=s("p"),Hr=n("This is especially useful when you need to get the predictions from your model in batches:"),yl=p(),d(nt.$$.fragment),_l=p(),ee=s("h3"),ke=s("a"),Za=s("span"),d(rt.$$.fragment),Wr=p(),es=s("span"),Fr=n("Distributed evaluation"),bl=p(),q=s("p"),Gr=n("Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ts=s("code"),Rr=n("f(AuB) = f(A) + f(B)"),Ur=n("), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),as=s("code"),Yr=n("f(AuB) \u2260 f(A) + f(B)"),Vr=n("), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),it=s("a"),Jr=n("F1"),zr=n(" scores of each data subset as your "),ss=s("strong"),Kr=n("final metric"),Qr=n("."),wl=p(),Dt=s("p"),Xr=n("A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),gl=p(),B=s("p"),Zr=n("\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),ls=s("code"),ei=n("compute"),ti=n(" the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),os=s("code"),ai=n("compute"),si=n(" will perform the final metric evaluation."),El=p(),Ct=s("p"),li=n("This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),$l=p(),te=s("h2"),xe=s("a"),ns=s("span"),d(ct.$$.fragment),oi=p(),rs=s("span"),ni=n("Save and push to the Hub"),jl=p(),Te=s("p"),ri=n("Saving and sharing evaluation results is an important step. We provide the "),is=s("code"),ii=n("evaluate.save()"),ci=n(" function to easily save metrics results. You can either pass a specific filename or a directory. In the latter case, the results are saved in a file with an automatically created file name. Besides the directory or file name, the function takes any key-value pairs as inputs and stores them in a JSON file."),kl=p(),d(pt.$$.fragment),xl=p(),Ot=s("p"),pi=n("The content of the JSON file look like the following:"),Tl=p(),d(ut.$$.fragment),ql=p(),It=s("p"),ui=n("In addition to the specified fields, it also contains useful system information for reproducing the results."),Pl=p(),qe=s("p"),hi=n("Besides storing the results locally, you should report them on the model\u2019s repository on the Hub. With the "),cs=s("code"),di=n("evaluate.push_to_hub()"),mi=n(" function, you can easily report evaluation results to the model\u2019s repository:"),Al=p(),d(ht.$$.fragment),Dl=p(),ae=s("h2"),Pe=s("a"),ps=s("span"),d(dt.$$.fragment),fi=p(),us=s("span"),vi=n("Evaluator"),Cl=p(),E=s("p"),yi=n("The "),hs=s("code"),_i=n("evaluate.evaluator()"),bi=n(" provides automated evaluation and only requires a model, dataset, metric in contrast to the metrics in "),ds=s("code"),wi=n("EvaluationModule"),gi=n("s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric as the inference is handled internally. To make that possible it uses the "),ms=s("code"),Ei=n("Pipeline"),$i=n(" abstraction from "),fs=s("code"),ji=n("transformers"),ki=n(". However, you can use your own framework as long as it follows the "),vs=s("code"),xi=n("Pipeline"),Ti=n(" interface."),Ol=p(),L=s("p"),qi=n("To make an evaluation with the "),ys=s("code"),Pi=n("evaluator"),Ai=n(" let\u2019s load a "),_s=s("code"),Di=n("transformers"),Ci=n(" pipeline (but you can pass your own custom inference class for any framework as long as it follows the pipeline call API) with an model trained on IMDb, the IMDb test split and the accuracy metric."),Il=p(),d(mt.$$.fragment),Nl=p(),H=s("p"),Oi=n("Then you can create an evaluator for text classification and pass the three objects to the "),bs=s("code"),Ii=n("compute()"),Ni=n(" method. With the label mapping "),ws=s("code"),Si=n("evaluate"),Mi=n(" provides a method to align the pipeline outputs with the label column in the dataset:"),Sl=p(),d(ft.$$.fragment),Ml=p(),W=s("p"),Bi=n("Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),gs=s("em"),Li=n("bootstrapping"),Hi=p(),Es=s("code"),Wi=n("evaluate"),Fi=n(" computes confidence intervals and the standard error which helps estimate how stable a score is:"),Bl=p(),d(vt.$$.fragment),Ll=p(),$=s("p"),Gi=n("The evaluator expects a "),$s=s("code"),Ri=n('"text"'),Ui=n(" and "),js=s("code"),Yi=n('"label"'),Vi=n(" column for the data input. If your dataset differs you can provide the columns with the keywords "),ks=s("code"),Ji=n('input_column="text"'),zi=n(" and "),xs=s("code"),Ki=n('label_column="label"'),Qi=n(". Currently only "),Ts=s("code"),Xi=n('"text-classification"'),Zi=n(" is supported with more tasks being added in the future."),this.h()},l(e){const i=Eu('[data-svelte="svelte-1phssyn"]',document.head);w=l(i,"META",{name:!0,content:!0}),i.forEach(a),se=u(e),k=l(e,"H1",{class:!0});var yt=o(k);A=l(yt,"A",{id:!0,class:!0,href:!0});var ec=o(A);U=l(ec,"SPAN",{});var tc=o(U);m(P.$$.fragment,tc),tc.forEach(a),ec.forEach(a),N=u(yt),le=l(yt,"SPAN",{});var ac=o(le);wo=r(ac,"A quick tour"),ac.forEach(a),yt.forEach(a),Cs=u(e),_t=l(e,"P",{});var sc=o(_t);go=r(sc,"\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),sc.forEach(a),Os=u(e),Y=l(e,"H2",{class:!0});var Wl=o(Y);oe=l(Wl,"A",{id:!0,class:!0,href:!0});var lc=o(oe);Wt=l(lc,"SPAN",{});var oc=o(Wt);m(De.$$.fragment,oc),oc.forEach(a),lc.forEach(a),Eo=u(Wl),Ft=l(Wl,"SPAN",{});var nc=o(Ft);$o=r(nc,"Three types of evaluations"),nc.forEach(a),Wl.forEach(a),Is=u(e),bt=l(e,"P",{});var rc=o(bt);jo=r(rc,"There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),rc.forEach(a),Ns=u(e),S=l(e,"UL",{});var Nt=o(S);ne=l(Nt,"LI",{});var qs=o(ne);Gt=l(qs,"STRONG",{});var ic=o(Gt);ko=r(ic,"Metric"),ic.forEach(a),xo=r(qs,": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),wt=l(qs,"A",{href:!0});var cc=o(wt);To=r(cc,"evaluate-metric"),cc.forEach(a),qo=r(qs,"."),qs.forEach(a),Po=u(Nt),re=l(Nt,"LI",{});var Ps=o(re);Rt=l(Ps,"STRONG",{});var pc=o(Rt);Ao=r(pc,"Comparison"),pc.forEach(a),Do=r(Ps,": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),gt=l(Ps,"A",{href:!0});var uc=o(gt);Co=r(uc,"evaluate-comparison"),uc.forEach(a),Oo=r(Ps,"."),Ps.forEach(a),Io=u(Nt),ie=l(Nt,"LI",{});var As=o(ie);Ut=l(As,"STRONG",{});var hc=o(Ut);No=r(hc,"Measurement"),hc.forEach(a),So=r(As,": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),Et=l(As,"A",{href:!0});var dc=o(Et);Mo=r(dc,"evaluate-measurement"),dc.forEach(a),Bo=r(As,"."),As.forEach(a),Nt.forEach(a),Ss=u(e),ce=l(e,"P",{});var Fl=o(ce);Lo=r(Fl,"Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),$t=l(Fl,"A",{href:!0});var mc=o($t);Ho=r(mc,"evaluate.load()"),mc.forEach(a),Wo=r(Fl,"!"),Fl.forEach(a),Ms=u(e),V=l(e,"H2",{class:!0});var Gl=o(V);pe=l(Gl,"A",{id:!0,class:!0,href:!0});var fc=o(pe);Yt=l(fc,"SPAN",{});var vc=o(Yt);m(Ce.$$.fragment,vc),vc.forEach(a),fc.forEach(a),Fo=u(Gl),Vt=l(Gl,"SPAN",{});var yc=o(Vt);Go=r(yc,"Load"),yc.forEach(a),Gl.forEach(a),Bs=u(e),ue=l(e,"P",{});var Rl=o(ue);Ro=r(Rl,"Any metric, comparison, or measurement is loaded with the "),Jt=l(Rl,"CODE",{});var _c=o(Jt);Uo=r(_c,"evaluate.load"),_c.forEach(a),Yo=r(Rl," function:"),Rl.forEach(a),Ls=u(e),m(Oe.$$.fragment,e),Hs=u(e),jt=l(e,"P",{});var bc=o(jt);Vo=r(bc,"If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),bc.forEach(a),Ws=u(e),m(Ie.$$.fragment,e),Fs=u(e),J=l(e,"H3",{class:!0});var Ul=o(J);he=l(Ul,"A",{id:!0,class:!0,href:!0});var wc=o(he);zt=l(wc,"SPAN",{});var gc=o(zt);m(Ne.$$.fragment,gc),gc.forEach(a),wc.forEach(a),Jo=u(Ul),Kt=l(Ul,"SPAN",{});var Ec=o(Kt);zo=r(Ec,"Community modules"),Ec.forEach(a),Ul.forEach(a),Gs=u(e),kt=l(e,"P",{});var $c=o(kt);Ko=r($c,"Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),$c.forEach(a),Rs=u(e),m(Se.$$.fragment,e),Us=u(e),z=l(e,"H3",{class:!0});var Yl=o(z);de=l(Yl,"A",{id:!0,class:!0,href:!0});var jc=o(de);Qt=l(jc,"SPAN",{});var kc=o(Qt);m(Me.$$.fragment,kc),kc.forEach(a),jc.forEach(a),Qo=u(Yl),Xt=l(Yl,"SPAN",{});var xc=o(Xt);Xo=r(xc,"List available modules"),xc.forEach(a),Yl.forEach(a),Ys=u(e),me=l(e,"P",{});var Vl=o(me);Zo=r(Vl,"With "),Zt=l(Vl,"CODE",{});var Tc=o(Zt);en=r(Tc,"list_available_modules"),Tc.forEach(a),tn=r(Vl," you can check what modules are available on the hub. You can also filter for a specific modules and skip community metrics if you want. You can also see additional information such as likes:"),Vl.forEach(a),Vs=u(e),m(Be.$$.fragment,e),Js=u(e),K=l(e,"H2",{class:!0});var Jl=o(K);fe=l(Jl,"A",{id:!0,class:!0,href:!0});var qc=o(fe);ea=l(qc,"SPAN",{});var Pc=o(ea);m(Le.$$.fragment,Pc),Pc.forEach(a),qc.forEach(a),an=u(Jl),ta=l(Jl,"SPAN",{});var Ac=o(ta);sn=r(Ac,"Module attributes"),Ac.forEach(a),Jl.forEach(a),zs=u(e),ve=l(e,"P",{});var zl=o(ve);ln=r(zl,"All evalution modules come with a range of useful attributes that help to use a module stored in a "),xt=l(zl,"A",{href:!0});var Dc=o(xt);on=r(Dc,"EvaluationModuleInfo"),Dc.forEach(a),nn=r(zl," object."),zl.forEach(a),Ks=u(e),ye=l(e,"TABLE",{});var Kl=o(ye);aa=l(Kl,"THEAD",{});var Cc=o(aa);He=l(Cc,"TR",{});var Ql=o(He);sa=l(Ql,"TH",{});var Oc=o(sa);rn=r(Oc,"Attribute"),Oc.forEach(a),cn=u(Ql),la=l(Ql,"TH",{});var Ic=o(la);pn=r(Ic,"Description"),Ic.forEach(a),Ql.forEach(a),Cc.forEach(a),un=u(Kl),b=l(Kl,"TBODY",{});var j=o(b);We=l(j,"TR",{});var Xl=o(We);oa=l(Xl,"TD",{});var Nc=o(oa);na=l(Nc,"CODE",{});var Sc=o(na);hn=r(Sc,"description"),Sc.forEach(a),Nc.forEach(a),dn=u(Xl),ra=l(Xl,"TD",{});var Mc=o(ra);mn=r(Mc,"A short description of the evaluation module."),Mc.forEach(a),Xl.forEach(a),fn=u(j),Fe=l(j,"TR",{});var Zl=o(Fe);ia=l(Zl,"TD",{});var Bc=o(ia);ca=l(Bc,"CODE",{});var Lc=o(ca);vn=r(Lc,"citation"),Lc.forEach(a),Bc.forEach(a),yn=u(Zl),pa=l(Zl,"TD",{});var Hc=o(pa);_n=r(Hc,"A BibTex string for citation when available."),Hc.forEach(a),Zl.forEach(a),bn=u(j),Ge=l(j,"TR",{});var eo=o(Ge);ua=l(eo,"TD",{});var Wc=o(ua);ha=l(Wc,"CODE",{});var Fc=o(ha);wn=r(Fc,"features"),Fc.forEach(a),Wc.forEach(a),gn=u(eo),Re=l(eo,"TD",{});var to=o(Re);En=r(to,"A "),da=l(to,"CODE",{});var Gc=o(da);$n=r(Gc,"Features"),Gc.forEach(a),jn=r(to," object defining the input format."),to.forEach(a),eo.forEach(a),kn=u(j),Ue=l(j,"TR",{});var ao=o(Ue);ma=l(ao,"TD",{});var Rc=o(ma);fa=l(Rc,"CODE",{});var Uc=o(fa);xn=r(Uc,"inputs_description"),Uc.forEach(a),Rc.forEach(a),Tn=u(ao),va=l(ao,"TD",{});var Yc=o(va);qn=r(Yc,"This is equivalent to the modules docstring."),Yc.forEach(a),ao.forEach(a),Pn=u(j),Ye=l(j,"TR",{});var so=o(Ye);ya=l(so,"TD",{});var Vc=o(ya);_a=l(Vc,"CODE",{});var Jc=o(_a);An=r(Jc,"homepage"),Jc.forEach(a),Vc.forEach(a),Dn=u(so),ba=l(so,"TD",{});var zc=o(ba);Cn=r(zc,"The homepage of the module."),zc.forEach(a),so.forEach(a),On=u(j),Ve=l(j,"TR",{});var lo=o(Ve);wa=l(lo,"TD",{});var Kc=o(wa);ga=l(Kc,"CODE",{});var Qc=o(ga);In=r(Qc,"license"),Qc.forEach(a),Kc.forEach(a),Nn=u(lo),Ea=l(lo,"TD",{});var Xc=o(Ea);Sn=r(Xc,"The license of the module."),Xc.forEach(a),lo.forEach(a),Mn=u(j),Je=l(j,"TR",{});var oo=o(Je);$a=l(oo,"TD",{});var Zc=o($a);ja=l(Zc,"CODE",{});var ep=o(ja);Bn=r(ep,"codebase_urls"),ep.forEach(a),Zc.forEach(a),Ln=u(oo),ka=l(oo,"TD",{});var tp=o(ka);Hn=r(tp,"Link to the code behind the module."),tp.forEach(a),oo.forEach(a),Wn=u(j),ze=l(j,"TR",{});var no=o(ze);xa=l(no,"TD",{});var ap=o(xa);Ta=l(ap,"CODE",{});var sp=o(Ta);Fn=r(sp,"reference_urls"),sp.forEach(a),ap.forEach(a),Gn=u(no),qa=l(no,"TD",{});var lp=o(qa);Rn=r(lp,"Additional reference URLs."),lp.forEach(a),no.forEach(a),j.forEach(a),Kl.forEach(a),Qs=u(e),_e=l(e,"P",{});var ro=o(_e);Un=r(ro,"Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Pa=l(ro,"CODE",{});var op=o(Pa);Yn=r(op,"description"),op.forEach(a),Vn=r(ro," attribute of the accuracy metric:"),ro.forEach(a),Xs=u(e),m(Ke.$$.fragment,e),Zs=u(e),be=l(e,"P",{});var io=o(be);Jn=r(io,"You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Aa=l(io,"CODE",{});var np=o(Aa);zn=r(np,"citation"),np.forEach(a),Kn=r(io," attribute:"),io.forEach(a),el=u(e),m(Qe.$$.fragment,e),tl=u(e),Tt=l(e,"P",{});var rp=o(Tt);Qn=r(rp,"Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),rp.forEach(a),al=u(e),m(Xe.$$.fragment,e),sl=u(e),m(we.$$.fragment,e),ll=u(e),Q=l(e,"H2",{class:!0});var co=o(Q);ge=l(co,"A",{id:!0,class:!0,href:!0});var ip=o(ge);Da=l(ip,"SPAN",{});var cp=o(Da);m(Ze.$$.fragment,cp),cp.forEach(a),ip.forEach(a),Xn=u(co),Ca=l(co,"SPAN",{});var pp=o(Ca);Zn=r(pp,"Compute"),pp.forEach(a),co.forEach(a),ol=u(e),qt=l(e,"P",{});var up=o(qt);er=r(up,"Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),up.forEach(a),nl=u(e),Ee=l(e,"OL",{});var po=o(Ee);Oa=l(po,"LI",{});var hp=o(Oa);tr=r(hp,"All-in-one"),hp.forEach(a),ar=u(po),Ia=l(po,"LI",{});var dp=o(Ia);sr=r(dp,"Incremental"),dp.forEach(a),po.forEach(a),rl=u(e),x=l(e,"P",{});var F=o(x);lr=r(F,"In the incremental approach the necessary inputs are added to the module with "),Na=l(F,"CODE",{});var mp=o(Na);or=r(mp,"EvaluationModule.add()"),mp.forEach(a),nr=r(F," or "),Sa=l(F,"CODE",{});var fp=o(Sa);rr=r(fp,"EvaluationModule.add_batch()"),fp.forEach(a),ir=r(F," and the score is calculated at the end with "),Pt=l(F,"A",{href:!0});var vp=o(Pt);cr=r(vp,"EvaluationModule.compute()"),vp.forEach(a),pr=r(F,". Alternatively, one can pass all the inputs at once to "),Ma=l(F,"CODE",{});var yp=o(Ma);ur=r(yp,"compute()"),yp.forEach(a),hr=r(F,". Let\u2019s have a look at the two approaches."),F.forEach(a),il=u(e),X=l(e,"H3",{class:!0});var uo=o(X);$e=l(uo,"A",{id:!0,class:!0,href:!0});var _p=o($e);Ba=l(_p,"SPAN",{});var bp=o(Ba);m(et.$$.fragment,bp),bp.forEach(a),_p.forEach(a),dr=u(uo),La=l(uo,"SPAN",{});var wp=o(La);Ha=l(wp,"CODE",{});var gp=o(Ha);mr=r(gp,"compute()"),gp.forEach(a),wp.forEach(a),uo.forEach(a),cl=r(e,"\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute()` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute()` method.\n\n	"),m(tt.$$.fragment,e),pl=u(e),M=l(e,"P",{});var St=o(M);fr=r(St,"Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),Wa=l(St,"CODE",{});var Ep=o(Wa);vr=r(Ep,"add()"),Ep.forEach(a),yr=r(St," or "),Fa=l(St,"CODE",{});var $p=o(Fa);_r=r($p,"add_batch()"),$p.forEach(a),br=r(St," are useful."),St.forEach(a),ul=u(e),Z=l(e,"H3",{class:!0});var ho=o(Z);je=l(ho,"A",{id:!0,class:!0,href:!0});var jp=o(je);Ga=l(jp,"SPAN",{});var kp=o(Ga);m(at.$$.fragment,kp),kp.forEach(a),jp.forEach(a),wr=u(ho),st=l(ho,"SPAN",{});var mo=o(st);Ra=l(mo,"CODE",{});var xp=o(Ra);gr=r(xp,"add()"),xp.forEach(a),Er=r(mo," and "),Ua=l(mo,"CODE",{});var Tp=o(Ua);$r=r(Tp,"add_batch()"),Tp.forEach(a),mo.forEach(a),ho.forEach(a),hl=u(e),T=l(e,"P",{});var G=o(T);jr=r(G,"In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),Ya=l(G,"CODE",{});var qp=o(Ya);kr=r(qp,"compute()"),qp.forEach(a),xr=r(G,". With "),Va=l(G,"CODE",{});var Pp=o(Va);Tr=r(Pp,"add()"),Pp.forEach(a),qr=r(G," and "),Ja=l(G,"CODE",{});var Ap=o(Ja);Pr=r(Ap,"add_batch()"),Ap.forEach(a),Ar=r(G," you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),za=l(G,"CODE",{});var Dp=o(za);Dr=r(Dp,"add()"),Dp.forEach(a),Cr=r(G,":"),G.forEach(a),dl=u(e),m(lt.$$.fragment,e),ml=u(e),D=l(e,"P",{});var Ae=o(D);Or=r(Ae,"Once you have gathered all predictions you can call "),Ka=l(Ae,"CODE",{});var Cp=o(Ka);Ir=r(Cp,"compute()"),Cp.forEach(a),Nr=r(Ae," to compute the score based on all stored values. When getting predictions and references in batches you can use "),Qa=l(Ae,"CODE",{});var Op=o(Qa);Sr=r(Op,"add_batch()"),Op.forEach(a),Mr=r(Ae," which adds a list elements for later processing. The rest works as with "),Xa=l(Ae,"CODE",{});var Ip=o(Xa);Br=r(Ip,"add()"),Ip.forEach(a),Lr=r(Ae,":"),Ae.forEach(a),fl=u(e),m(ot.$$.fragment,e),vl=u(e),At=l(e,"P",{});var Np=o(At);Hr=r(Np,"This is especially useful when you need to get the predictions from your model in batches:"),Np.forEach(a),yl=u(e),m(nt.$$.fragment,e),_l=u(e),ee=l(e,"H3",{class:!0});var fo=o(ee);ke=l(fo,"A",{id:!0,class:!0,href:!0});var Sp=o(ke);Za=l(Sp,"SPAN",{});var Mp=o(Za);m(rt.$$.fragment,Mp),Mp.forEach(a),Sp.forEach(a),Wr=u(fo),es=l(fo,"SPAN",{});var Bp=o(es);Fr=r(Bp,"Distributed evaluation"),Bp.forEach(a),fo.forEach(a),bl=u(e),q=l(e,"P",{});var R=o(q);Gr=r(R,"Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ts=l(R,"CODE",{});var Lp=o(ts);Rr=r(Lp,"f(AuB) = f(A) + f(B)"),Lp.forEach(a),Ur=r(R,"), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),as=l(R,"CODE",{});var Hp=o(as);Yr=r(Hp,"f(AuB) \u2260 f(A) + f(B)"),Hp.forEach(a),Vr=r(R,"), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),it=l(R,"A",{href:!0,rel:!0});var Wp=o(it);Jr=r(Wp,"F1"),Wp.forEach(a),zr=r(R," scores of each data subset as your "),ss=l(R,"STRONG",{});var Fp=o(ss);Kr=r(Fp,"final metric"),Fp.forEach(a),Qr=r(R,"."),R.forEach(a),wl=u(e),Dt=l(e,"P",{});var Gp=o(Dt);Xr=r(Gp,"A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),Gp.forEach(a),gl=u(e),B=l(e,"P",{});var Mt=o(B);Zr=r(Mt,"\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),ls=l(Mt,"CODE",{});var Rp=o(ls);ei=r(Rp,"compute"),Rp.forEach(a),ti=r(Mt," the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),os=l(Mt,"CODE",{});var Up=o(os);ai=r(Up,"compute"),Up.forEach(a),si=r(Mt," will perform the final metric evaluation."),Mt.forEach(a),El=u(e),Ct=l(e,"P",{});var Yp=o(Ct);li=r(Yp,"This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),Yp.forEach(a),$l=u(e),te=l(e,"H2",{class:!0});var vo=o(te);xe=l(vo,"A",{id:!0,class:!0,href:!0});var Vp=o(xe);ns=l(Vp,"SPAN",{});var Jp=o(ns);m(ct.$$.fragment,Jp),Jp.forEach(a),Vp.forEach(a),oi=u(vo),rs=l(vo,"SPAN",{});var zp=o(rs);ni=r(zp,"Save and push to the Hub"),zp.forEach(a),vo.forEach(a),jl=u(e),Te=l(e,"P",{});var yo=o(Te);ri=r(yo,"Saving and sharing evaluation results is an important step. We provide the "),is=l(yo,"CODE",{});var Kp=o(is);ii=r(Kp,"evaluate.save()"),Kp.forEach(a),ci=r(yo," function to easily save metrics results. You can either pass a specific filename or a directory. In the latter case, the results are saved in a file with an automatically created file name. Besides the directory or file name, the function takes any key-value pairs as inputs and stores them in a JSON file."),yo.forEach(a),kl=u(e),m(pt.$$.fragment,e),xl=u(e),Ot=l(e,"P",{});var Qp=o(Ot);pi=r(Qp,"The content of the JSON file look like the following:"),Qp.forEach(a),Tl=u(e),m(ut.$$.fragment,e),ql=u(e),It=l(e,"P",{});var Xp=o(It);ui=r(Xp,"In addition to the specified fields, it also contains useful system information for reproducing the results."),Xp.forEach(a),Pl=u(e),qe=l(e,"P",{});var _o=o(qe);hi=r(_o,"Besides storing the results locally, you should report them on the model\u2019s repository on the Hub. With the "),cs=l(_o,"CODE",{});var Zp=o(cs);di=r(Zp,"evaluate.push_to_hub()"),Zp.forEach(a),mi=r(_o," function, you can easily report evaluation results to the model\u2019s repository:"),_o.forEach(a),Al=u(e),m(ht.$$.fragment,e),Dl=u(e),ae=l(e,"H2",{class:!0});var bo=o(ae);Pe=l(bo,"A",{id:!0,class:!0,href:!0});var eu=o(Pe);ps=l(eu,"SPAN",{});var tu=o(ps);m(dt.$$.fragment,tu),tu.forEach(a),eu.forEach(a),fi=u(bo),us=l(bo,"SPAN",{});var au=o(us);vi=r(au,"Evaluator"),au.forEach(a),bo.forEach(a),Cl=u(e),E=l(e,"P",{});var C=o(E);yi=r(C,"The "),hs=l(C,"CODE",{});var su=o(hs);_i=r(su,"evaluate.evaluator()"),su.forEach(a),bi=r(C," provides automated evaluation and only requires a model, dataset, metric in contrast to the metrics in "),ds=l(C,"CODE",{});var lu=o(ds);wi=r(lu,"EvaluationModule"),lu.forEach(a),gi=r(C,"s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric as the inference is handled internally. To make that possible it uses the "),ms=l(C,"CODE",{});var ou=o(ms);Ei=r(ou,"Pipeline"),ou.forEach(a),$i=r(C," abstraction from "),fs=l(C,"CODE",{});var nu=o(fs);ji=r(nu,"transformers"),nu.forEach(a),ki=r(C,". However, you can use your own framework as long as it follows the "),vs=l(C,"CODE",{});var ru=o(vs);xi=r(ru,"Pipeline"),ru.forEach(a),Ti=r(C," interface."),C.forEach(a),Ol=u(e),L=l(e,"P",{});var Bt=o(L);qi=r(Bt,"To make an evaluation with the "),ys=l(Bt,"CODE",{});var iu=o(ys);Pi=r(iu,"evaluator"),iu.forEach(a),Ai=r(Bt," let\u2019s load a "),_s=l(Bt,"CODE",{});var cu=o(_s);Di=r(cu,"transformers"),cu.forEach(a),Ci=r(Bt," pipeline (but you can pass your own custom inference class for any framework as long as it follows the pipeline call API) with an model trained on IMDb, the IMDb test split and the accuracy metric."),Bt.forEach(a),Il=u(e),m(mt.$$.fragment,e),Nl=u(e),H=l(e,"P",{});var Lt=o(H);Oi=r(Lt,"Then you can create an evaluator for text classification and pass the three objects to the "),bs=l(Lt,"CODE",{});var pu=o(bs);Ii=r(pu,"compute()"),pu.forEach(a),Ni=r(Lt," method. With the label mapping "),ws=l(Lt,"CODE",{});var uu=o(ws);Si=r(uu,"evaluate"),uu.forEach(a),Mi=r(Lt," provides a method to align the pipeline outputs with the label column in the dataset:"),Lt.forEach(a),Sl=u(e),m(ft.$$.fragment,e),Ml=u(e),W=l(e,"P",{});var Ht=o(W);Bi=r(Ht,"Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),gs=l(Ht,"EM",{});var hu=o(gs);Li=r(hu,"bootstrapping"),hu.forEach(a),Hi=u(Ht),Es=l(Ht,"CODE",{});var du=o(Es);Wi=r(du,"evaluate"),du.forEach(a),Fi=r(Ht," computes confidence intervals and the standard error which helps estimate how stable a score is:"),Ht.forEach(a),Bl=u(e),m(vt.$$.fragment,e),Ll=u(e),$=l(e,"P",{});var O=o($);Gi=r(O,"The evaluator expects a "),$s=l(O,"CODE",{});var mu=o($s);Ri=r(mu,'"text"'),mu.forEach(a),Ui=r(O," and "),js=l(O,"CODE",{});var fu=o(js);Yi=r(fu,'"label"'),fu.forEach(a),Vi=r(O," column for the data input. If your dataset differs you can provide the columns with the keywords "),ks=l(O,"CODE",{});var vu=o(ks);Ji=r(vu,'input_column="text"'),vu.forEach(a),zi=r(O," and "),xs=l(O,"CODE",{});var yu=o(xs);Ki=r(yu,'label_column="label"'),yu.forEach(a),Qi=r(O,". Currently only "),Ts=l(O,"CODE",{});var _u=o(Ts);Xi=r(_u,'"text-classification"'),_u.forEach(a),Zi=r(O," is supported with more tasks being added in the future."),O.forEach(a),this.h()},h(){h(w,"name","hf:doc:metadata"),h(w,"content",JSON.stringify(Tu)),h(A,"id","a-quick-tour"),h(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(A,"href","#a-quick-tour"),h(k,"class","relative group"),h(oe,"id","three-types-of-evaluations"),h(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oe,"href","#three-types-of-evaluations"),h(Y,"class","relative group"),h(wt,"href","hf.co/evaluate-metric"),h(gt,"href","hf.co/evaluate-comparison"),h(Et,"href","hf.co/evaluate-measurement"),h($t,"href","/docs/evaluate/pr_85/en/package_reference/loading_methods#evaluate.load"),h(pe,"id","load"),h(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(pe,"href","#load"),h(V,"class","relative group"),h(he,"id","community-modules"),h(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(he,"href","#community-modules"),h(J,"class","relative group"),h(de,"id","list-available-modules"),h(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(de,"href","#list-available-modules"),h(z,"class","relative group"),h(fe,"id","module-attributes"),h(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(fe,"href","#module-attributes"),h(K,"class","relative group"),h(xt,"href","/docs/evaluate/pr_85/en/package_reference/main_classes#evaluate.EvaluationModuleInfo"),h(ge,"id","compute"),h(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ge,"href","#compute"),h(Q,"class","relative group"),h(Pt,"href","/docs/evaluate/pr_85/en/package_reference/main_classes#evaluate.EvaluationModule.compute"),h($e,"id","compute"),h($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h($e,"href","#compute"),h(X,"class","relative group"),h(je,"id","add-and-addbatch"),h(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(je,"href","#add-and-addbatch"),h(Z,"class","relative group"),h(ke,"id","distributed-evaluation"),h(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ke,"href","#distributed-evaluation"),h(ee,"class","relative group"),h(it,"href","https://huggingface.co/spaces/evaluate-metric/f1"),h(it,"rel","nofollow"),h(xe,"id","save-and-push-to-the-hub"),h(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(xe,"href","#save-and-push-to-the-hub"),h(te,"class","relative group"),h(Pe,"id","evaluator"),h(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Pe,"href","#evaluator"),h(ae,"class","relative group")},m(e,i){t(document.head,w),c(e,se,i),c(e,k,i),t(k,A),t(A,U),f(P,U,null),t(k,N),t(k,le),t(le,wo),c(e,Cs,i),c(e,_t,i),t(_t,go),c(e,Os,i),c(e,Y,i),t(Y,oe),t(oe,Wt),f(De,Wt,null),t(Y,Eo),t(Y,Ft),t(Ft,$o),c(e,Is,i),c(e,bt,i),t(bt,jo),c(e,Ns,i),c(e,S,i),t(S,ne),t(ne,Gt),t(Gt,ko),t(ne,xo),t(ne,wt),t(wt,To),t(ne,qo),t(S,Po),t(S,re),t(re,Rt),t(Rt,Ao),t(re,Do),t(re,gt),t(gt,Co),t(re,Oo),t(S,Io),t(S,ie),t(ie,Ut),t(Ut,No),t(ie,So),t(ie,Et),t(Et,Mo),t(ie,Bo),c(e,Ss,i),c(e,ce,i),t(ce,Lo),t(ce,$t),t($t,Ho),t(ce,Wo),c(e,Ms,i),c(e,V,i),t(V,pe),t(pe,Yt),f(Ce,Yt,null),t(V,Fo),t(V,Vt),t(Vt,Go),c(e,Bs,i),c(e,ue,i),t(ue,Ro),t(ue,Jt),t(Jt,Uo),t(ue,Yo),c(e,Ls,i),f(Oe,e,i),c(e,Hs,i),c(e,jt,i),t(jt,Vo),c(e,Ws,i),f(Ie,e,i),c(e,Fs,i),c(e,J,i),t(J,he),t(he,zt),f(Ne,zt,null),t(J,Jo),t(J,Kt),t(Kt,zo),c(e,Gs,i),c(e,kt,i),t(kt,Ko),c(e,Rs,i),f(Se,e,i),c(e,Us,i),c(e,z,i),t(z,de),t(de,Qt),f(Me,Qt,null),t(z,Qo),t(z,Xt),t(Xt,Xo),c(e,Ys,i),c(e,me,i),t(me,Zo),t(me,Zt),t(Zt,en),t(me,tn),c(e,Vs,i),f(Be,e,i),c(e,Js,i),c(e,K,i),t(K,fe),t(fe,ea),f(Le,ea,null),t(K,an),t(K,ta),t(ta,sn),c(e,zs,i),c(e,ve,i),t(ve,ln),t(ve,xt),t(xt,on),t(ve,nn),c(e,Ks,i),c(e,ye,i),t(ye,aa),t(aa,He),t(He,sa),t(sa,rn),t(He,cn),t(He,la),t(la,pn),t(ye,un),t(ye,b),t(b,We),t(We,oa),t(oa,na),t(na,hn),t(We,dn),t(We,ra),t(ra,mn),t(b,fn),t(b,Fe),t(Fe,ia),t(ia,ca),t(ca,vn),t(Fe,yn),t(Fe,pa),t(pa,_n),t(b,bn),t(b,Ge),t(Ge,ua),t(ua,ha),t(ha,wn),t(Ge,gn),t(Ge,Re),t(Re,En),t(Re,da),t(da,$n),t(Re,jn),t(b,kn),t(b,Ue),t(Ue,ma),t(ma,fa),t(fa,xn),t(Ue,Tn),t(Ue,va),t(va,qn),t(b,Pn),t(b,Ye),t(Ye,ya),t(ya,_a),t(_a,An),t(Ye,Dn),t(Ye,ba),t(ba,Cn),t(b,On),t(b,Ve),t(Ve,wa),t(wa,ga),t(ga,In),t(Ve,Nn),t(Ve,Ea),t(Ea,Sn),t(b,Mn),t(b,Je),t(Je,$a),t($a,ja),t(ja,Bn),t(Je,Ln),t(Je,ka),t(ka,Hn),t(b,Wn),t(b,ze),t(ze,xa),t(xa,Ta),t(Ta,Fn),t(ze,Gn),t(ze,qa),t(qa,Rn),c(e,Qs,i),c(e,_e,i),t(_e,Un),t(_e,Pa),t(Pa,Yn),t(_e,Vn),c(e,Xs,i),f(Ke,e,i),c(e,Zs,i),c(e,be,i),t(be,Jn),t(be,Aa),t(Aa,zn),t(be,Kn),c(e,el,i),f(Qe,e,i),c(e,tl,i),c(e,Tt,i),t(Tt,Qn),c(e,al,i),f(Xe,e,i),c(e,sl,i),f(we,e,i),c(e,ll,i),c(e,Q,i),t(Q,ge),t(ge,Da),f(Ze,Da,null),t(Q,Xn),t(Q,Ca),t(Ca,Zn),c(e,ol,i),c(e,qt,i),t(qt,er),c(e,nl,i),c(e,Ee,i),t(Ee,Oa),t(Oa,tr),t(Ee,ar),t(Ee,Ia),t(Ia,sr),c(e,rl,i),c(e,x,i),t(x,lr),t(x,Na),t(Na,or),t(x,nr),t(x,Sa),t(Sa,rr),t(x,ir),t(x,Pt),t(Pt,cr),t(x,pr),t(x,Ma),t(Ma,ur),t(x,hr),c(e,il,i),c(e,X,i),t(X,$e),t($e,Ba),f(et,Ba,null),t(X,dr),t(X,La),t(La,Ha),t(Ha,mr),c(e,cl,i),f(tt,e,i),c(e,pl,i),c(e,M,i),t(M,fr),t(M,Wa),t(Wa,vr),t(M,yr),t(M,Fa),t(Fa,_r),t(M,br),c(e,ul,i),c(e,Z,i),t(Z,je),t(je,Ga),f(at,Ga,null),t(Z,wr),t(Z,st),t(st,Ra),t(Ra,gr),t(st,Er),t(st,Ua),t(Ua,$r),c(e,hl,i),c(e,T,i),t(T,jr),t(T,Ya),t(Ya,kr),t(T,xr),t(T,Va),t(Va,Tr),t(T,qr),t(T,Ja),t(Ja,Pr),t(T,Ar),t(T,za),t(za,Dr),t(T,Cr),c(e,dl,i),f(lt,e,i),c(e,ml,i),c(e,D,i),t(D,Or),t(D,Ka),t(Ka,Ir),t(D,Nr),t(D,Qa),t(Qa,Sr),t(D,Mr),t(D,Xa),t(Xa,Br),t(D,Lr),c(e,fl,i),f(ot,e,i),c(e,vl,i),c(e,At,i),t(At,Hr),c(e,yl,i),f(nt,e,i),c(e,_l,i),c(e,ee,i),t(ee,ke),t(ke,Za),f(rt,Za,null),t(ee,Wr),t(ee,es),t(es,Fr),c(e,bl,i),c(e,q,i),t(q,Gr),t(q,ts),t(ts,Rr),t(q,Ur),t(q,as),t(as,Yr),t(q,Vr),t(q,it),t(it,Jr),t(q,zr),t(q,ss),t(ss,Kr),t(q,Qr),c(e,wl,i),c(e,Dt,i),t(Dt,Xr),c(e,gl,i),c(e,B,i),t(B,Zr),t(B,ls),t(ls,ei),t(B,ti),t(B,os),t(os,ai),t(B,si),c(e,El,i),c(e,Ct,i),t(Ct,li),c(e,$l,i),c(e,te,i),t(te,xe),t(xe,ns),f(ct,ns,null),t(te,oi),t(te,rs),t(rs,ni),c(e,jl,i),c(e,Te,i),t(Te,ri),t(Te,is),t(is,ii),t(Te,ci),c(e,kl,i),f(pt,e,i),c(e,xl,i),c(e,Ot,i),t(Ot,pi),c(e,Tl,i),f(ut,e,i),c(e,ql,i),c(e,It,i),t(It,ui),c(e,Pl,i),c(e,qe,i),t(qe,hi),t(qe,cs),t(cs,di),t(qe,mi),c(e,Al,i),f(ht,e,i),c(e,Dl,i),c(e,ae,i),t(ae,Pe),t(Pe,ps),f(dt,ps,null),t(ae,fi),t(ae,us),t(us,vi),c(e,Cl,i),c(e,E,i),t(E,yi),t(E,hs),t(hs,_i),t(E,bi),t(E,ds),t(ds,wi),t(E,gi),t(E,ms),t(ms,Ei),t(E,$i),t(E,fs),t(fs,ji),t(E,ki),t(E,vs),t(vs,xi),t(E,Ti),c(e,Ol,i),c(e,L,i),t(L,qi),t(L,ys),t(ys,Pi),t(L,Ai),t(L,_s),t(_s,Di),t(L,Ci),c(e,Il,i),f(mt,e,i),c(e,Nl,i),c(e,H,i),t(H,Oi),t(H,bs),t(bs,Ii),t(H,Ni),t(H,ws),t(ws,Si),t(H,Mi),c(e,Sl,i),f(ft,e,i),c(e,Ml,i),c(e,W,i),t(W,Bi),t(W,gs),t(gs,Li),t(W,Hi),t(W,Es),t(Es,Wi),t(W,Fi),c(e,Bl,i),f(vt,e,i),c(e,Ll,i),c(e,$,i),t($,Gi),t($,$s),t($s,Ri),t($,Ui),t($,js),t(js,Yi),t($,Vi),t($,ks),t(ks,Ji),t($,zi),t($,xs),t(xs,Ki),t($,Qi),t($,Ts),t(Ts,Xi),t($,Zi),Hl=!0},p(e,[i]){const yt={};i&2&&(yt.$$scope={dirty:i,ctx:e}),we.$set(yt)},i(e){Hl||(v(P.$$.fragment,e),v(De.$$.fragment,e),v(Ce.$$.fragment,e),v(Oe.$$.fragment,e),v(Ie.$$.fragment,e),v(Ne.$$.fragment,e),v(Se.$$.fragment,e),v(Me.$$.fragment,e),v(Be.$$.fragment,e),v(Le.$$.fragment,e),v(Ke.$$.fragment,e),v(Qe.$$.fragment,e),v(Xe.$$.fragment,e),v(we.$$.fragment,e),v(Ze.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v(at.$$.fragment,e),v(lt.$$.fragment,e),v(ot.$$.fragment,e),v(nt.$$.fragment,e),v(rt.$$.fragment,e),v(ct.$$.fragment,e),v(pt.$$.fragment,e),v(ut.$$.fragment,e),v(ht.$$.fragment,e),v(dt.$$.fragment,e),v(mt.$$.fragment,e),v(ft.$$.fragment,e),v(vt.$$.fragment,e),Hl=!0)},o(e){y(P.$$.fragment,e),y(De.$$.fragment,e),y(Ce.$$.fragment,e),y(Oe.$$.fragment,e),y(Ie.$$.fragment,e),y(Ne.$$.fragment,e),y(Se.$$.fragment,e),y(Me.$$.fragment,e),y(Be.$$.fragment,e),y(Le.$$.fragment,e),y(Ke.$$.fragment,e),y(Qe.$$.fragment,e),y(Xe.$$.fragment,e),y(we.$$.fragment,e),y(Ze.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(at.$$.fragment,e),y(lt.$$.fragment,e),y(ot.$$.fragment,e),y(nt.$$.fragment,e),y(rt.$$.fragment,e),y(ct.$$.fragment,e),y(pt.$$.fragment,e),y(ut.$$.fragment,e),y(ht.$$.fragment,e),y(dt.$$.fragment,e),y(mt.$$.fragment,e),y(ft.$$.fragment,e),y(vt.$$.fragment,e),Hl=!1},d(e){a(w),e&&a(se),e&&a(k),_(P),e&&a(Cs),e&&a(_t),e&&a(Os),e&&a(Y),_(De),e&&a(Is),e&&a(bt),e&&a(Ns),e&&a(S),e&&a(Ss),e&&a(ce),e&&a(Ms),e&&a(V),_(Ce),e&&a(Bs),e&&a(ue),e&&a(Ls),_(Oe,e),e&&a(Hs),e&&a(jt),e&&a(Ws),_(Ie,e),e&&a(Fs),e&&a(J),_(Ne),e&&a(Gs),e&&a(kt),e&&a(Rs),_(Se,e),e&&a(Us),e&&a(z),_(Me),e&&a(Ys),e&&a(me),e&&a(Vs),_(Be,e),e&&a(Js),e&&a(K),_(Le),e&&a(zs),e&&a(ve),e&&a(Ks),e&&a(ye),e&&a(Qs),e&&a(_e),e&&a(Xs),_(Ke,e),e&&a(Zs),e&&a(be),e&&a(el),_(Qe,e),e&&a(tl),e&&a(Tt),e&&a(al),_(Xe,e),e&&a(sl),_(we,e),e&&a(ll),e&&a(Q),_(Ze),e&&a(ol),e&&a(qt),e&&a(nl),e&&a(Ee),e&&a(rl),e&&a(x),e&&a(il),e&&a(X),_(et),e&&a(cl),_(tt,e),e&&a(pl),e&&a(M),e&&a(ul),e&&a(Z),_(at),e&&a(hl),e&&a(T),e&&a(dl),_(lt,e),e&&a(ml),e&&a(D),e&&a(fl),_(ot,e),e&&a(vl),e&&a(At),e&&a(yl),_(nt,e),e&&a(_l),e&&a(ee),_(rt),e&&a(bl),e&&a(q),e&&a(wl),e&&a(Dt),e&&a(gl),e&&a(B),e&&a(El),e&&a(Ct),e&&a($l),e&&a(te),_(ct),e&&a(jl),e&&a(Te),e&&a(kl),_(pt,e),e&&a(xl),e&&a(Ot),e&&a(Tl),_(ut,e),e&&a(ql),e&&a(It),e&&a(Pl),e&&a(qe),e&&a(Al),_(ht,e),e&&a(Dl),e&&a(ae),_(dt),e&&a(Cl),e&&a(E),e&&a(Ol),e&&a(L),e&&a(Il),_(mt,e),e&&a(Nl),e&&a(H),e&&a(Sl),_(ft,e),e&&a(Ml),e&&a(W),e&&a(Bl),_(vt,e),e&&a(Ll),e&&a($)}}}const Tu={local:"a-quick-tour",sections:[{local:"three-types-of-evaluations",title:"Three types of evaluations"},{local:"load",sections:[{local:"community-modules",title:"Community modules"},{local:"list-available-modules",title:"List available modules"}],title:"Load"},{local:"module-attributes",title:"Module attributes"},{local:"compute",sections:[{local:"compute",title:"`compute()`"},{local:"add-and-addbatch",title:"`add()` and `add_batch()`"},{local:"distributed-evaluation",title:"Distributed evaluation"}],title:"Compute"},{local:"save-and-push-to-the-hub",title:"Save and push to the Hub"},{local:"evaluator",title:"Evaluator"}],title:"A quick tour"};function qu(Ds){return $u(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ou extends bu{constructor(w){super();wu(this,w,qu,xu,gu,{})}}export{Ou as default,Tu as metadata};
