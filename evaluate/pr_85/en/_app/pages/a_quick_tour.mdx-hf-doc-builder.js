import{S as xu,i as Tu,s as qu,e as s,k as p,w as d,t as n,M as Au,c as l,d as a,m as u,a as o,x as m,h as r,b as h,G as t,g as c,y as f,q as v,o as y,B as _,v as Pu}from"../chunks/vendor-hf-doc-builder.js";import{T as Du}from"../chunks/Tip-hf-doc-builder.js";import{I}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function Cu(Os){let g,le,k,P,Y;return{c(){g=s("p"),le=n("Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=s("code"),P=n("features"),Y=n(". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation.")},l(A){g=l(A,"P",{});var N=o(g);le=r(N,"Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=l(N,"CODE",{});var oe=o(k);P=r(oe,"features"),oe.forEach(a),Y=r(N,". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation."),N.forEach(a)},m(A,N){c(A,g,N),t(g,le),t(g,k),t(k,P),t(g,Y)},d(A){A&&a(g)}}}function Ou(Os){let g,le,k,P,Y,A,N,oe,Eo,Is,gt,$o,Ns,V,ne,zt,Ce,jo,Kt,ko,Ss,wt,xo,Ms,S,re,Qt,To,qo,Et,Ao,Po,Do,ie,Xt,Co,Oo,$t,Io,No,So,ce,Zt,Mo,Bo,jt,Lo,Ho,Bs,pe,Uo,kt,Wo,Fo,Ls,J,ue,ea,Oe,Go,ta,Ro,Hs,he,Yo,aa,Vo,Jo,Us,Ie,Ws,xt,zo,Fs,Ne,Gs,z,de,sa,Se,Ko,la,Qo,Rs,Tt,Xo,Ys,Me,Vs,K,me,oa,Be,Zo,na,en,Js,fe,tn,qt,an,sn,zs,Le,Ks,Q,ve,ra,He,ln,ia,on,Qs,ye,nn,At,rn,cn,Xs,_e,ca,Ue,pa,pn,un,ua,hn,dn,b,We,ha,da,mn,fn,ma,vn,yn,Fe,fa,va,_n,bn,ya,gn,wn,Ge,_a,ba,En,$n,Re,jn,ga,kn,xn,Tn,Ye,wa,Ea,qn,An,$a,Pn,Dn,Ve,ja,ka,Cn,On,xa,In,Nn,Je,Ta,qa,Sn,Mn,Aa,Bn,Ln,ze,Pa,Da,Hn,Un,Ca,Wn,Fn,Ke,Oa,Ia,Gn,Rn,Na,Yn,Zs,be,Vn,Sa,Jn,zn,el,Qe,tl,ge,Kn,Ma,Qn,Xn,al,Xe,sl,Pt,Zn,ll,Ze,ol,we,nl,X,Ee,Ba,et,er,La,tr,rl,Dt,ar,il,$e,Ha,sr,lr,Ua,or,cl,x,nr,Ct,rr,ir,Ot,cr,pr,It,ur,hr,Wa,dr,mr,pl,Z,je,Fa,tt,fr,at,vr,Ga,yr,_r,ul,st,hl,M,br,Ra,gr,wr,Ya,Er,$r,dl,ee,ke,Va,lt,jr,B,kr,Ja,xr,Tr,za,qr,Ar,Ka,Pr,ml,T,Dr,Qa,Cr,Or,Xa,Ir,Nr,Za,Sr,Mr,es,Br,Lr,fl,ot,vl,D,Hr,ts,Ur,Wr,as,Fr,Gr,ss,Rr,Yr,yl,nt,_l,Nt,Vr,bl,rt,gl,te,xe,ls,it,Jr,os,zr,wl,q,Kr,ns,Qr,Xr,rs,Zr,ei,ct,ti,ai,is,si,li,El,St,oi,$l,L,ni,cs,ri,ii,ps,ci,pi,jl,Mt,ui,kl,ae,Te,us,pt,hi,hs,di,xl,qe,mi,Bt,fi,vi,Tl,ut,ql,Lt,yi,Al,ht,Pl,Ht,_i,Dl,Ae,bi,Ut,gi,wi,Cl,dt,Ol,se,Pe,ds,mt,Ei,ms,$i,Il,E,ji,Wt,ki,xi,fs,Ti,qi,vs,Ai,Pi,ys,Di,Ci,_s,Oi,Ii,Nl,H,Ni,bs,Si,Mi,gs,Bi,Li,Sl,ft,Ml,U,Hi,ws,Ui,Wi,Es,Fi,Gi,Bl,vt,Ll,W,Ri,$s,Yi,Vi,js,Ji,zi,Hl,yt,Ul,$,Ki,ks,Qi,Xi,xs,Zi,ec,Ts,tc,ac,qs,sc,lc,As,oc,nc,Wl;return A=new I({}),Ce=new I({}),Oe=new I({}),Ie=new w({props:{code:`import evaluate
accuracy = evaluate.load("accuracy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> evaluate
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),Ne=new w({props:{code:'word_length = evaluate.load("word_length", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>word_length = evaluate.load(<span class="hljs-string">&quot;word_length&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Se=new I({}),Me=new w({props:{code:'element_count = evaluate.load("lvwerra/element_count", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>element_count = evaluate.load(<span class="hljs-string">&quot;lvwerra/element_count&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Be=new I({}),Le=new w({props:{code:`evaluate.list_evaluation_modules(
  module_type="comparison",
  include_community=False, 
  with_details=True)

>>> [{'name': 'mcnemar', 'type': 'comparison', 'community': False, 'likes': 1},
...  {'name': 'exact_match', 'type': 'comparison', 'community': False, 'likes': 0}]`,highlighted:`evaluate.list_evaluation_modules(
  module_type=<span class="hljs-string">&quot;comparison&quot;</span>,
  include_community=<span class="hljs-literal">False</span>, 
  with_details=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>[{<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;mcnemar&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;comparison&#x27;</span>, <span class="hljs-string">&#x27;community&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">1</span>},
<span class="hljs-meta">... </span> {<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;exact_match&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;comparison&#x27;</span>, <span class="hljs-string">&#x27;community&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">0</span>}]`}}),He=new I({}),Qe=new w({props:{code:`accuracy = evaluate.load("accuracy")
accuracy.description`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.description
Accuracy <span class="hljs-keyword">is</span> the proportion of correct predictions among the total number of cases processed. It can be computed <span class="hljs-keyword">with</span>:
Accuracy = (TP + TN) / (TP + TN + FP + FN)
 Where:
TP: <span class="hljs-literal">True</span> positive
TN: <span class="hljs-literal">True</span> negative
FP: <span class="hljs-literal">False</span> positive
FN: <span class="hljs-literal">False</span> negative`}}),Xe=new w({props:{code:"accuracy.citation",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.citation
<span class="hljs-meta">@article{scikit-learn,</span>
  title={Scikit-learn: Machine Learning <span class="hljs-keyword">in</span> {P}ython},
  author={Pedregosa, F. <span class="hljs-keyword">and</span> Varoquaux, G. <span class="hljs-keyword">and</span> Gramfort, A. <span class="hljs-keyword">and</span> Michel, V.
         <span class="hljs-keyword">and</span> Thirion, B. <span class="hljs-keyword">and</span> Grisel, O. <span class="hljs-keyword">and</span> Blondel, M. <span class="hljs-keyword">and</span> Prettenhofer, P.
         <span class="hljs-keyword">and</span> Weiss, R. <span class="hljs-keyword">and</span> Dubourg, V. <span class="hljs-keyword">and</span> Vanderplas, J. <span class="hljs-keyword">and</span> Passos, A. <span class="hljs-keyword">and</span>
         Cournapeau, D. <span class="hljs-keyword">and</span> Brucher, M. <span class="hljs-keyword">and</span> Perrot, M. <span class="hljs-keyword">and</span> Duchesnay, E.},
  journal={Journal of Machine Learning Research},
  volume={<span class="hljs-number">12</span>},
  pages={<span class="hljs-number">2825</span>--<span class="hljs-number">2830</span>},
  year={<span class="hljs-number">2011</span>}
}`}}),Ze=new w({props:{code:"accuracy.features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.features
{
    <span class="hljs-string">&#x27;predictions&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
    <span class="hljs-string">&#x27;references&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
}`}}),we=new Du({props:{$$slots:{default:[Cu]},$$scope:{ctx:Os}}}),et=new I({}),tt=new I({}),st=new w({props:{code:"accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),lt=new I({}),ot=new w({props:{code:`for ref, pred in zip([0,1,0,1], [1,0,0,1]):
    accuracy.add(references=ref, predictions=pred)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> ref, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add(references=ref, predictions=pred)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),nt=new w({props:{code:`for refs, preds in zip([[0,1],[0,1]], [[1,0],[0,1]]):
    accuracy.add_batch(references=refs, predictions=preds)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> refs, preds <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]], [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add_batch(references=refs, predictions=preds)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),rt=new w({props:{code:`for model_inputs, gold_standards in evaluation_dataset:
    predictions = model(model_inputs)
    metric.add_batch(references=gold_standards, predictions=predictions)
metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> model_inputs, gold_standards <span class="hljs-keyword">in</span> evaluation_dataset:
<span class="hljs-meta">&gt;&gt;&gt; </span>    predictions = model(model_inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric.add_batch(references=gold_standards, predictions=predictions)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.compute()`}}),it=new I({}),pt=new I({}),ut=new w({props:{code:`result = accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])

hyperparams = {"model": "bert-base-uncased"}
evaluate.save("./results/"experiment="run 42", **result, **hyperparams)
>>> PosixPath('results/result-2022_05_30-22_09_11.json')`,highlighted:`result = accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])

hyperparams = {<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;bert-base-uncased&quot;</span>}
evaluate.save(<span class="hljs-string">&quot;./results/&quot;</span>experiment=<span class="hljs-string">&quot;run 42&quot;</span>, **result, **hyperparams)
<span class="hljs-meta">&gt;&gt;&gt; </span>PosixPath(<span class="hljs-string">&#x27;results/result-2022_05_30-22_09_11.json&#x27;</span>)`}}),ht=new w({props:{code:`{
    "experiment": "run 42",
    "accuracy": 0.5,
    "model": "bert-base-uncased",
    "_timestamp": "2022-05-30T22:09:11.959469",
    "_git_commit_hash": "123456789abcdefghijkl",
    "_evaluate_version": "0.1.0",
    "_python_version": "3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]",
    "_interpreter_path": "/Users/leandro/git/evaluate/env/bin/python"
}`,highlighted:`<span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;experiment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;run 42&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;accuracy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bert-base-uncased&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-05-30T22:09:11.959469&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_git_commit_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789abcdefghijkl&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_evaluate_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_python_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_interpreter_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Users/leandro/git/evaluate/env/bin/python&quot;</span>
<span class="hljs-punctuation">}</span>`}}),dt=new w({props:{code:`evaluate.push_to_hub(
  model_id="huggingface/gpt2-wikitext2",  # model repository on hub
  metric_value=0.5,                       # metric value
  metric_type="bleu",                     # metric name, e.g. accuracy.name
  metric_name="BLEU",                     # pretty name which is displayed
  dataset_type="wikitext",                # dataset name on the hub
  dataset_name="WikiText",                # pretty name
  dataset_split="test",                   # dataset split used
  task_type="text-generation",            # task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json
  task_name="Text Generation"             # pretty name for task
)`,highlighted:`evaluate.push_to_hub(
  model_id=<span class="hljs-string">&quot;huggingface/gpt2-wikitext2&quot;</span>,  <span class="hljs-comment"># model repository on hub</span>
  metric_value=<span class="hljs-number">0.5</span>,                       <span class="hljs-comment"># metric value</span>
  metric_type=<span class="hljs-string">&quot;bleu&quot;</span>,                     <span class="hljs-comment"># metric name, e.g. accuracy.name</span>
  metric_name=<span class="hljs-string">&quot;BLEU&quot;</span>,                     <span class="hljs-comment"># pretty name which is displayed</span>
  dataset_type=<span class="hljs-string">&quot;wikitext&quot;</span>,                <span class="hljs-comment"># dataset name on the hub</span>
  dataset_name=<span class="hljs-string">&quot;WikiText&quot;</span>,                <span class="hljs-comment"># pretty name</span>
  dataset_split=<span class="hljs-string">&quot;test&quot;</span>,                   <span class="hljs-comment"># dataset split used</span>
  task_type=<span class="hljs-string">&quot;text-generation&quot;</span>,            <span class="hljs-comment"># task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json</span>
  task_name=<span class="hljs-string">&quot;Text Generation&quot;</span>             <span class="hljs-comment"># pretty name for task</span>
)`}}),mt=new I({}),ft=new w({props:{code:`from transformers import pipeline
from datasets import load_dataset
from evaluate import evaluator
import evaluate

pipe = pipeline("text-classification", model="lvwerra/distilbert-imdb", device=0)
data = load_dataset("imdb", split="test").shuffle().select(range(1000))
metric = evaluate.load("accuracy")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-keyword">from</span> evaluate <span class="hljs-keyword">import</span> evaluator
<span class="hljs-keyword">import</span> evaluate

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=<span class="hljs-string">&quot;lvwerra/distilbert-imdb&quot;</span>, device=<span class="hljs-number">0</span>)
data = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, split=<span class="hljs-string">&quot;test&quot;</span>).shuffle().select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))
metric = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),vt=new w({props:{code:`eval = evaluator("text-classification")

results = eval.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={"NEGATIVE": 0, "POSITIVE": 1},)

print(results)
>>> {'accuracy': 0.934}`,highlighted:`<span class="hljs-built_in">eval</span> = evaluator(<span class="hljs-string">&quot;text-classification&quot;</span>)

results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.934</span>}`}}),yt=new w({props:{code:`results = eval.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={"NEGATIVE": 0, "POSITIVE": 1},
                       strategy="bootstrap", n_resamples=200)

print(results)
>>> {'accuracy': 
...     {
...       'confidence_interval': (0.906, 0.9406749892841922),
...       'standard_error': 0.00865213251082787,
...       'score': 0.923
...     }
... }`,highlighted:`results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},
                       strategy=<span class="hljs-string">&quot;bootstrap&quot;</span>, n_resamples=<span class="hljs-number">200</span>)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: 
<span class="hljs-meta">... </span>    {
<span class="hljs-meta">... </span>      <span class="hljs-string">&#x27;confidence_interval&#x27;</span>: (<span class="hljs-number">0.906</span>, <span class="hljs-number">0.9406749892841922</span>),
<span class="hljs-meta">... </span>      <span class="hljs-string">&#x27;standard_error&#x27;</span>: <span class="hljs-number">0.00865213251082787</span>,
<span class="hljs-meta">... </span>      <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.923</span>
<span class="hljs-meta">... </span>    }
<span class="hljs-meta">... </span>}`}}),{c(){g=s("meta"),le=p(),k=s("h1"),P=s("a"),Y=s("span"),d(A.$$.fragment),N=p(),oe=s("span"),Eo=n("A quick tour"),Is=p(),gt=s("p"),$o=n("\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Ns=p(),V=s("h2"),ne=s("a"),zt=s("span"),d(Ce.$$.fragment),jo=p(),Kt=s("span"),ko=n("Three types of evaluations"),Ss=p(),wt=s("p"),xo=n("There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),Ms=p(),S=s("ul"),re=s("li"),Qt=s("strong"),To=n("Metric"),qo=n(": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Et=s("a"),Ao=n("evaluate-metric"),Po=n("."),Do=p(),ie=s("li"),Xt=s("strong"),Co=n("Comparison"),Oo=n(": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),$t=s("a"),Io=n("evaluate-comparison"),No=n("."),So=p(),ce=s("li"),Zt=s("strong"),Mo=n("Measurement"),Bo=n(": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),jt=s("a"),Lo=n("evaluate-measurement"),Ho=n("."),Bs=p(),pe=s("p"),Uo=n("Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),kt=s("a"),Wo=n("evaluate.load()"),Fo=n("!"),Ls=p(),J=s("h2"),ue=s("a"),ea=s("span"),d(Oe.$$.fragment),Go=p(),ta=s("span"),Ro=n("Load"),Hs=p(),he=s("p"),Yo=n("Any metric, comparison, or measurement is loaded with the "),aa=s("code"),Vo=n("evaluate.load"),Jo=n(" function:"),Us=p(),d(Ie.$$.fragment),Ws=p(),xt=s("p"),zo=n("If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),Fs=p(),d(Ne.$$.fragment),Gs=p(),z=s("h3"),de=s("a"),sa=s("span"),d(Se.$$.fragment),Ko=p(),la=s("span"),Qo=n("Community modules"),Rs=p(),Tt=s("p"),Xo=n("Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),Ys=p(),d(Me.$$.fragment),Vs=p(),K=s("h3"),me=s("a"),oa=s("span"),d(Be.$$.fragment),Zo=p(),na=s("span"),en=n("List available modules"),Js=p(),fe=s("p"),tn=n("With "),qt=s("a"),an=n("list_evaluation_modules()"),sn=n(" you can check what modules are available on the hub. You can also filter for a specific modules and skip community metrics if you want. You can also see additional information such as likes:"),zs=p(),d(Le.$$.fragment),Ks=p(),Q=s("h2"),ve=s("a"),ra=s("span"),d(He.$$.fragment),ln=p(),ia=s("span"),on=n("Module attributes"),Qs=p(),ye=s("p"),nn=n("All evalution modules come with a range of useful attributes that help to use a module stored in a "),At=s("a"),rn=n("EvaluationModuleInfo"),cn=n(" object."),Xs=p(),_e=s("table"),ca=s("thead"),Ue=s("tr"),pa=s("th"),pn=n("Attribute"),un=p(),ua=s("th"),hn=n("Description"),dn=p(),b=s("tbody"),We=s("tr"),ha=s("td"),da=s("code"),mn=n("description"),fn=p(),ma=s("td"),vn=n("A short description of the evaluation module."),yn=p(),Fe=s("tr"),fa=s("td"),va=s("code"),_n=n("citation"),bn=p(),ya=s("td"),gn=n("A BibTex string for citation when available."),wn=p(),Ge=s("tr"),_a=s("td"),ba=s("code"),En=n("features"),$n=p(),Re=s("td"),jn=n("A "),ga=s("code"),kn=n("Features"),xn=n(" object defining the input format."),Tn=p(),Ye=s("tr"),wa=s("td"),Ea=s("code"),qn=n("inputs_description"),An=p(),$a=s("td"),Pn=n("This is equivalent to the modules docstring."),Dn=p(),Ve=s("tr"),ja=s("td"),ka=s("code"),Cn=n("homepage"),On=p(),xa=s("td"),In=n("The homepage of the module."),Nn=p(),Je=s("tr"),Ta=s("td"),qa=s("code"),Sn=n("license"),Mn=p(),Aa=s("td"),Bn=n("The license of the module."),Ln=p(),ze=s("tr"),Pa=s("td"),Da=s("code"),Hn=n("codebase_urls"),Un=p(),Ca=s("td"),Wn=n("Link to the code behind the module."),Fn=p(),Ke=s("tr"),Oa=s("td"),Ia=s("code"),Gn=n("reference_urls"),Rn=p(),Na=s("td"),Yn=n("Additional reference URLs."),Zs=p(),be=s("p"),Vn=n("Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Sa=s("code"),Jn=n("description"),zn=n(" attribute of the accuracy metric:"),el=p(),d(Qe.$$.fragment),tl=p(),ge=s("p"),Kn=n("You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Ma=s("code"),Qn=n("citation"),Xn=n(" attribute:"),al=p(),d(Xe.$$.fragment),sl=p(),Pt=s("p"),Zn=n("Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),ll=p(),d(Ze.$$.fragment),ol=p(),d(we.$$.fragment),nl=p(),X=s("h2"),Ee=s("a"),Ba=s("span"),d(et.$$.fragment),er=p(),La=s("span"),tr=n("Compute"),rl=p(),Dt=s("p"),ar=n("Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),il=p(),$e=s("ol"),Ha=s("li"),sr=n("All-in-one"),lr=p(),Ua=s("li"),or=n("Incremental"),cl=p(),x=s("p"),nr=n("In the incremental approach the necessary inputs are added to the module with "),Ct=s("a"),rr=n("EvaluationModule.add()"),ir=n(" or "),Ot=s("a"),cr=n("EvaluationModule.add_batch()"),pr=n(" and the score is calculated at the end with "),It=s("a"),ur=n("EvaluationModule.compute()"),hr=n(". Alternatively, one can pass all the inputs at once to "),Wa=s("code"),dr=n("compute()"),mr=n(". Let\u2019s have a look at the two approaches."),pl=p(),Z=s("h3"),je=s("a"),Fa=s("span"),d(tt.$$.fragment),fr=p(),at=s("span"),vr=n("Using "),Ga=s("code"),yr=n("compute()"),_r=n(" alone"),ul=n("\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute()` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute()` method.\n\n	"),d(st.$$.fragment),hl=p(),M=s("p"),br=n("Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),Ra=s("code"),gr=n("add()"),wr=n(" or "),Ya=s("code"),Er=n("add_batch()"),$r=n(" are useful."),dl=p(),ee=s("h3"),ke=s("a"),Va=s("span"),d(lt.$$.fragment),jr=p(),B=s("span"),kr=n("Using "),Ja=s("code"),xr=n("add()"),Tr=n(" and "),za=s("code"),qr=n("add_batch()"),Ar=n(" with "),Ka=s("code"),Pr=n("compute()"),ml=p(),T=s("p"),Dr=n("In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),Qa=s("code"),Cr=n("compute()"),Or=n(". With "),Xa=s("code"),Ir=n("add()"),Nr=n(" and "),Za=s("code"),Sr=n("add_batch()"),Mr=n(" you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),es=s("code"),Br=n("add()"),Lr=n(":"),fl=p(),d(ot.$$.fragment),vl=p(),D=s("p"),Hr=n("Once you have gathered all predictions you can call "),ts=s("code"),Ur=n("compute()"),Wr=n(" to compute the score based on all stored values. When getting predictions and references in batches you can use "),as=s("code"),Fr=n("add_batch()"),Gr=n(" which adds a list elements for later processing. The rest works as with "),ss=s("code"),Rr=n("add()"),Yr=n(":"),yl=p(),d(nt.$$.fragment),_l=p(),Nt=s("p"),Vr=n("This is especially useful when you need to get the predictions from your model in batches:"),bl=p(),d(rt.$$.fragment),gl=p(),te=s("h3"),xe=s("a"),ls=s("span"),d(it.$$.fragment),Jr=p(),os=s("span"),zr=n("Distributed evaluation"),wl=p(),q=s("p"),Kr=n("Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ns=s("code"),Qr=n("f(AuB) = f(A) + f(B)"),Xr=n("), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),rs=s("code"),Zr=n("f(AuB) \u2260 f(A) + f(B)"),ei=n("), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),ct=s("a"),ti=n("F1"),ai=n(" scores of each data subset as your "),is=s("strong"),si=n("final metric"),li=n("."),El=p(),St=s("p"),oi=n("A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),$l=p(),L=s("p"),ni=n("\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),cs=s("code"),ri=n("compute"),ii=n(" the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),ps=s("code"),ci=n("compute"),pi=n(" will perform the final metric evaluation."),jl=p(),Mt=s("p"),ui=n("This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),kl=p(),ae=s("h2"),Te=s("a"),us=s("span"),d(pt.$$.fragment),hi=p(),hs=s("span"),di=n("Save and push to the Hub"),xl=p(),qe=s("p"),mi=n("Saving and sharing evaluation results is an important step. We provide the "),Bt=s("a"),fi=n("evaluate.save()"),vi=n(" function to easily save metrics results. You can either pass a specific filename or a directory. In the latter case, the results are saved in a file with an automatically created file name. Besides the directory or file name, the function takes any key-value pairs as inputs and stores them in a JSON file."),Tl=p(),d(ut.$$.fragment),ql=p(),Lt=s("p"),yi=n("The content of the JSON file look like the following:"),Al=p(),d(ht.$$.fragment),Pl=p(),Ht=s("p"),_i=n("In addition to the specified fields, it also contains useful system information for reproducing the results."),Dl=p(),Ae=s("p"),bi=n("Besides storing the results locally, you should report them on the model\u2019s repository on the Hub. With the "),Ut=s("a"),gi=n("evaluate.push_to_hub()"),wi=n(" function, you can easily report evaluation results to the model\u2019s repository:"),Cl=p(),d(dt.$$.fragment),Ol=p(),se=s("h2"),Pe=s("a"),ds=s("span"),d(mt.$$.fragment),Ei=p(),ms=s("span"),$i=n("Evaluator"),Il=p(),E=s("p"),ji=n("The "),Wt=s("a"),ki=n("evaluate.evaluator()"),xi=n(" provides automated evaluation and only requires a model, dataset, metric in contrast to the metrics in "),fs=s("code"),Ti=n("EvaluationModule"),qi=n("s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric as the inference is handled internally. To make that possible it uses the "),vs=s("code"),Ai=n("Pipeline"),Pi=n(" abstraction from "),ys=s("code"),Di=n("transformers"),Ci=n(". However, you can use your own framework as long as it follows the "),_s=s("code"),Oi=n("Pipeline"),Ii=n(" interface."),Nl=p(),H=s("p"),Ni=n("To make an evaluation with the "),bs=s("code"),Si=n("evaluator"),Mi=n(" let\u2019s load a "),gs=s("code"),Bi=n("transformers"),Li=n(" pipeline (but you can pass your own custom inference class for any framework as long as it follows the pipeline call API) with an model trained on IMDb, the IMDb test split and the accuracy metric."),Sl=p(),d(ft.$$.fragment),Ml=p(),U=s("p"),Hi=n("Then you can create an evaluator for text classification and pass the three objects to the "),ws=s("code"),Ui=n("compute()"),Wi=n(" method. With the label mapping "),Es=s("code"),Fi=n("evaluate"),Gi=n(" provides a method to align the pipeline outputs with the label column in the dataset:"),Bl=p(),d(vt.$$.fragment),Ll=p(),W=s("p"),Ri=n("Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),$s=s("em"),Yi=n("bootstrapping"),Vi=p(),js=s("code"),Ji=n("evaluate"),zi=n(" computes confidence intervals and the standard error which helps estimate how stable a score is:"),Hl=p(),d(yt.$$.fragment),Ul=p(),$=s("p"),Ki=n("The evaluator expects a "),ks=s("code"),Qi=n('"text"'),Xi=n(" and "),xs=s("code"),Zi=n('"label"'),ec=n(" column for the data input. If your dataset differs you can provide the columns with the keywords "),Ts=s("code"),tc=n('input_column="text"'),ac=n(" and "),qs=s("code"),sc=n('label_column="label"'),lc=n(". Currently only "),As=s("code"),oc=n('"text-classification"'),nc=n(" is supported with more tasks being added in the future."),this.h()},l(e){const i=Au('[data-svelte="svelte-1phssyn"]',document.head);g=l(i,"META",{name:!0,content:!0}),i.forEach(a),le=u(e),k=l(e,"H1",{class:!0});var _t=o(k);P=l(_t,"A",{id:!0,class:!0,href:!0});var rc=o(P);Y=l(rc,"SPAN",{});var ic=o(Y);m(A.$$.fragment,ic),ic.forEach(a),rc.forEach(a),N=u(_t),oe=l(_t,"SPAN",{});var cc=o(oe);Eo=r(cc,"A quick tour"),cc.forEach(a),_t.forEach(a),Is=u(e),gt=l(e,"P",{});var pc=o(gt);$o=r(pc,"\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),pc.forEach(a),Ns=u(e),V=l(e,"H2",{class:!0});var Fl=o(V);ne=l(Fl,"A",{id:!0,class:!0,href:!0});var uc=o(ne);zt=l(uc,"SPAN",{});var hc=o(zt);m(Ce.$$.fragment,hc),hc.forEach(a),uc.forEach(a),jo=u(Fl),Kt=l(Fl,"SPAN",{});var dc=o(Kt);ko=r(dc,"Three types of evaluations"),dc.forEach(a),Fl.forEach(a),Ss=u(e),wt=l(e,"P",{});var mc=o(wt);xo=r(mc,"There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),mc.forEach(a),Ms=u(e),S=l(e,"UL",{});var Ft=o(S);re=l(Ft,"LI",{});var Ps=o(re);Qt=l(Ps,"STRONG",{});var fc=o(Qt);To=r(fc,"Metric"),fc.forEach(a),qo=r(Ps,": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Et=l(Ps,"A",{href:!0});var vc=o(Et);Ao=r(vc,"evaluate-metric"),vc.forEach(a),Po=r(Ps,"."),Ps.forEach(a),Do=u(Ft),ie=l(Ft,"LI",{});var Ds=o(ie);Xt=l(Ds,"STRONG",{});var yc=o(Xt);Co=r(yc,"Comparison"),yc.forEach(a),Oo=r(Ds,": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),$t=l(Ds,"A",{href:!0});var _c=o($t);Io=r(_c,"evaluate-comparison"),_c.forEach(a),No=r(Ds,"."),Ds.forEach(a),So=u(Ft),ce=l(Ft,"LI",{});var Cs=o(ce);Zt=l(Cs,"STRONG",{});var bc=o(Zt);Mo=r(bc,"Measurement"),bc.forEach(a),Bo=r(Cs,": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),jt=l(Cs,"A",{href:!0});var gc=o(jt);Lo=r(gc,"evaluate-measurement"),gc.forEach(a),Ho=r(Cs,"."),Cs.forEach(a),Ft.forEach(a),Bs=u(e),pe=l(e,"P",{});var Gl=o(pe);Uo=r(Gl,"Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),kt=l(Gl,"A",{href:!0});var wc=o(kt);Wo=r(wc,"evaluate.load()"),wc.forEach(a),Fo=r(Gl,"!"),Gl.forEach(a),Ls=u(e),J=l(e,"H2",{class:!0});var Rl=o(J);ue=l(Rl,"A",{id:!0,class:!0,href:!0});var Ec=o(ue);ea=l(Ec,"SPAN",{});var $c=o(ea);m(Oe.$$.fragment,$c),$c.forEach(a),Ec.forEach(a),Go=u(Rl),ta=l(Rl,"SPAN",{});var jc=o(ta);Ro=r(jc,"Load"),jc.forEach(a),Rl.forEach(a),Hs=u(e),he=l(e,"P",{});var Yl=o(he);Yo=r(Yl,"Any metric, comparison, or measurement is loaded with the "),aa=l(Yl,"CODE",{});var kc=o(aa);Vo=r(kc,"evaluate.load"),kc.forEach(a),Jo=r(Yl," function:"),Yl.forEach(a),Us=u(e),m(Ie.$$.fragment,e),Ws=u(e),xt=l(e,"P",{});var xc=o(xt);zo=r(xc,"If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),xc.forEach(a),Fs=u(e),m(Ne.$$.fragment,e),Gs=u(e),z=l(e,"H3",{class:!0});var Vl=o(z);de=l(Vl,"A",{id:!0,class:!0,href:!0});var Tc=o(de);sa=l(Tc,"SPAN",{});var qc=o(sa);m(Se.$$.fragment,qc),qc.forEach(a),Tc.forEach(a),Ko=u(Vl),la=l(Vl,"SPAN",{});var Ac=o(la);Qo=r(Ac,"Community modules"),Ac.forEach(a),Vl.forEach(a),Rs=u(e),Tt=l(e,"P",{});var Pc=o(Tt);Xo=r(Pc,"Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),Pc.forEach(a),Ys=u(e),m(Me.$$.fragment,e),Vs=u(e),K=l(e,"H3",{class:!0});var Jl=o(K);me=l(Jl,"A",{id:!0,class:!0,href:!0});var Dc=o(me);oa=l(Dc,"SPAN",{});var Cc=o(oa);m(Be.$$.fragment,Cc),Cc.forEach(a),Dc.forEach(a),Zo=u(Jl),na=l(Jl,"SPAN",{});var Oc=o(na);en=r(Oc,"List available modules"),Oc.forEach(a),Jl.forEach(a),Js=u(e),fe=l(e,"P",{});var zl=o(fe);tn=r(zl,"With "),qt=l(zl,"A",{href:!0});var Ic=o(qt);an=r(Ic,"list_evaluation_modules()"),Ic.forEach(a),sn=r(zl," you can check what modules are available on the hub. You can also filter for a specific modules and skip community metrics if you want. You can also see additional information such as likes:"),zl.forEach(a),zs=u(e),m(Le.$$.fragment,e),Ks=u(e),Q=l(e,"H2",{class:!0});var Kl=o(Q);ve=l(Kl,"A",{id:!0,class:!0,href:!0});var Nc=o(ve);ra=l(Nc,"SPAN",{});var Sc=o(ra);m(He.$$.fragment,Sc),Sc.forEach(a),Nc.forEach(a),ln=u(Kl),ia=l(Kl,"SPAN",{});var Mc=o(ia);on=r(Mc,"Module attributes"),Mc.forEach(a),Kl.forEach(a),Qs=u(e),ye=l(e,"P",{});var Ql=o(ye);nn=r(Ql,"All evalution modules come with a range of useful attributes that help to use a module stored in a "),At=l(Ql,"A",{href:!0});var Bc=o(At);rn=r(Bc,"EvaluationModuleInfo"),Bc.forEach(a),cn=r(Ql," object."),Ql.forEach(a),Xs=u(e),_e=l(e,"TABLE",{});var Xl=o(_e);ca=l(Xl,"THEAD",{});var Lc=o(ca);Ue=l(Lc,"TR",{});var Zl=o(Ue);pa=l(Zl,"TH",{});var Hc=o(pa);pn=r(Hc,"Attribute"),Hc.forEach(a),un=u(Zl),ua=l(Zl,"TH",{});var Uc=o(ua);hn=r(Uc,"Description"),Uc.forEach(a),Zl.forEach(a),Lc.forEach(a),dn=u(Xl),b=l(Xl,"TBODY",{});var j=o(b);We=l(j,"TR",{});var eo=o(We);ha=l(eo,"TD",{});var Wc=o(ha);da=l(Wc,"CODE",{});var Fc=o(da);mn=r(Fc,"description"),Fc.forEach(a),Wc.forEach(a),fn=u(eo),ma=l(eo,"TD",{});var Gc=o(ma);vn=r(Gc,"A short description of the evaluation module."),Gc.forEach(a),eo.forEach(a),yn=u(j),Fe=l(j,"TR",{});var to=o(Fe);fa=l(to,"TD",{});var Rc=o(fa);va=l(Rc,"CODE",{});var Yc=o(va);_n=r(Yc,"citation"),Yc.forEach(a),Rc.forEach(a),bn=u(to),ya=l(to,"TD",{});var Vc=o(ya);gn=r(Vc,"A BibTex string for citation when available."),Vc.forEach(a),to.forEach(a),wn=u(j),Ge=l(j,"TR",{});var ao=o(Ge);_a=l(ao,"TD",{});var Jc=o(_a);ba=l(Jc,"CODE",{});var zc=o(ba);En=r(zc,"features"),zc.forEach(a),Jc.forEach(a),$n=u(ao),Re=l(ao,"TD",{});var so=o(Re);jn=r(so,"A "),ga=l(so,"CODE",{});var Kc=o(ga);kn=r(Kc,"Features"),Kc.forEach(a),xn=r(so," object defining the input format."),so.forEach(a),ao.forEach(a),Tn=u(j),Ye=l(j,"TR",{});var lo=o(Ye);wa=l(lo,"TD",{});var Qc=o(wa);Ea=l(Qc,"CODE",{});var Xc=o(Ea);qn=r(Xc,"inputs_description"),Xc.forEach(a),Qc.forEach(a),An=u(lo),$a=l(lo,"TD",{});var Zc=o($a);Pn=r(Zc,"This is equivalent to the modules docstring."),Zc.forEach(a),lo.forEach(a),Dn=u(j),Ve=l(j,"TR",{});var oo=o(Ve);ja=l(oo,"TD",{});var ep=o(ja);ka=l(ep,"CODE",{});var tp=o(ka);Cn=r(tp,"homepage"),tp.forEach(a),ep.forEach(a),On=u(oo),xa=l(oo,"TD",{});var ap=o(xa);In=r(ap,"The homepage of the module."),ap.forEach(a),oo.forEach(a),Nn=u(j),Je=l(j,"TR",{});var no=o(Je);Ta=l(no,"TD",{});var sp=o(Ta);qa=l(sp,"CODE",{});var lp=o(qa);Sn=r(lp,"license"),lp.forEach(a),sp.forEach(a),Mn=u(no),Aa=l(no,"TD",{});var op=o(Aa);Bn=r(op,"The license of the module."),op.forEach(a),no.forEach(a),Ln=u(j),ze=l(j,"TR",{});var ro=o(ze);Pa=l(ro,"TD",{});var np=o(Pa);Da=l(np,"CODE",{});var rp=o(Da);Hn=r(rp,"codebase_urls"),rp.forEach(a),np.forEach(a),Un=u(ro),Ca=l(ro,"TD",{});var ip=o(Ca);Wn=r(ip,"Link to the code behind the module."),ip.forEach(a),ro.forEach(a),Fn=u(j),Ke=l(j,"TR",{});var io=o(Ke);Oa=l(io,"TD",{});var cp=o(Oa);Ia=l(cp,"CODE",{});var pp=o(Ia);Gn=r(pp,"reference_urls"),pp.forEach(a),cp.forEach(a),Rn=u(io),Na=l(io,"TD",{});var up=o(Na);Yn=r(up,"Additional reference URLs."),up.forEach(a),io.forEach(a),j.forEach(a),Xl.forEach(a),Zs=u(e),be=l(e,"P",{});var co=o(be);Vn=r(co,"Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Sa=l(co,"CODE",{});var hp=o(Sa);Jn=r(hp,"description"),hp.forEach(a),zn=r(co," attribute of the accuracy metric:"),co.forEach(a),el=u(e),m(Qe.$$.fragment,e),tl=u(e),ge=l(e,"P",{});var po=o(ge);Kn=r(po,"You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Ma=l(po,"CODE",{});var dp=o(Ma);Qn=r(dp,"citation"),dp.forEach(a),Xn=r(po," attribute:"),po.forEach(a),al=u(e),m(Xe.$$.fragment,e),sl=u(e),Pt=l(e,"P",{});var mp=o(Pt);Zn=r(mp,"Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),mp.forEach(a),ll=u(e),m(Ze.$$.fragment,e),ol=u(e),m(we.$$.fragment,e),nl=u(e),X=l(e,"H2",{class:!0});var uo=o(X);Ee=l(uo,"A",{id:!0,class:!0,href:!0});var fp=o(Ee);Ba=l(fp,"SPAN",{});var vp=o(Ba);m(et.$$.fragment,vp),vp.forEach(a),fp.forEach(a),er=u(uo),La=l(uo,"SPAN",{});var yp=o(La);tr=r(yp,"Compute"),yp.forEach(a),uo.forEach(a),rl=u(e),Dt=l(e,"P",{});var _p=o(Dt);ar=r(_p,"Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),_p.forEach(a),il=u(e),$e=l(e,"OL",{});var ho=o($e);Ha=l(ho,"LI",{});var bp=o(Ha);sr=r(bp,"All-in-one"),bp.forEach(a),lr=u(ho),Ua=l(ho,"LI",{});var gp=o(Ua);or=r(gp,"Incremental"),gp.forEach(a),ho.forEach(a),cl=u(e),x=l(e,"P",{});var F=o(x);nr=r(F,"In the incremental approach the necessary inputs are added to the module with "),Ct=l(F,"A",{href:!0});var wp=o(Ct);rr=r(wp,"EvaluationModule.add()"),wp.forEach(a),ir=r(F," or "),Ot=l(F,"A",{href:!0});var Ep=o(Ot);cr=r(Ep,"EvaluationModule.add_batch()"),Ep.forEach(a),pr=r(F," and the score is calculated at the end with "),It=l(F,"A",{href:!0});var $p=o(It);ur=r($p,"EvaluationModule.compute()"),$p.forEach(a),hr=r(F,". Alternatively, one can pass all the inputs at once to "),Wa=l(F,"CODE",{});var jp=o(Wa);dr=r(jp,"compute()"),jp.forEach(a),mr=r(F,". Let\u2019s have a look at the two approaches."),F.forEach(a),pl=u(e),Z=l(e,"H3",{class:!0});var mo=o(Z);je=l(mo,"A",{id:!0,class:!0,href:!0});var kp=o(je);Fa=l(kp,"SPAN",{});var xp=o(Fa);m(tt.$$.fragment,xp),xp.forEach(a),kp.forEach(a),fr=u(mo),at=l(mo,"SPAN",{});var fo=o(at);vr=r(fo,"Using "),Ga=l(fo,"CODE",{});var Tp=o(Ga);yr=r(Tp,"compute()"),Tp.forEach(a),_r=r(fo," alone"),fo.forEach(a),mo.forEach(a),ul=r(e,"\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute()` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute()` method.\n\n	"),m(st.$$.fragment,e),hl=u(e),M=l(e,"P",{});var Gt=o(M);br=r(Gt,"Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),Ra=l(Gt,"CODE",{});var qp=o(Ra);gr=r(qp,"add()"),qp.forEach(a),wr=r(Gt," or "),Ya=l(Gt,"CODE",{});var Ap=o(Ya);Er=r(Ap,"add_batch()"),Ap.forEach(a),$r=r(Gt," are useful."),Gt.forEach(a),dl=u(e),ee=l(e,"H3",{class:!0});var vo=o(ee);ke=l(vo,"A",{id:!0,class:!0,href:!0});var Pp=o(ke);Va=l(Pp,"SPAN",{});var Dp=o(Va);m(lt.$$.fragment,Dp),Dp.forEach(a),Pp.forEach(a),jr=u(vo),B=l(vo,"SPAN",{});var bt=o(B);kr=r(bt,"Using "),Ja=l(bt,"CODE",{});var Cp=o(Ja);xr=r(Cp,"add()"),Cp.forEach(a),Tr=r(bt," and "),za=l(bt,"CODE",{});var Op=o(za);qr=r(Op,"add_batch()"),Op.forEach(a),Ar=r(bt," with "),Ka=l(bt,"CODE",{});var Ip=o(Ka);Pr=r(Ip,"compute()"),Ip.forEach(a),bt.forEach(a),vo.forEach(a),ml=u(e),T=l(e,"P",{});var G=o(T);Dr=r(G,"In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),Qa=l(G,"CODE",{});var Np=o(Qa);Cr=r(Np,"compute()"),Np.forEach(a),Or=r(G,". With "),Xa=l(G,"CODE",{});var Sp=o(Xa);Ir=r(Sp,"add()"),Sp.forEach(a),Nr=r(G," and "),Za=l(G,"CODE",{});var Mp=o(Za);Sr=r(Mp,"add_batch()"),Mp.forEach(a),Mr=r(G," you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),es=l(G,"CODE",{});var Bp=o(es);Br=r(Bp,"add()"),Bp.forEach(a),Lr=r(G,":"),G.forEach(a),fl=u(e),m(ot.$$.fragment,e),vl=u(e),D=l(e,"P",{});var De=o(D);Hr=r(De,"Once you have gathered all predictions you can call "),ts=l(De,"CODE",{});var Lp=o(ts);Ur=r(Lp,"compute()"),Lp.forEach(a),Wr=r(De," to compute the score based on all stored values. When getting predictions and references in batches you can use "),as=l(De,"CODE",{});var Hp=o(as);Fr=r(Hp,"add_batch()"),Hp.forEach(a),Gr=r(De," which adds a list elements for later processing. The rest works as with "),ss=l(De,"CODE",{});var Up=o(ss);Rr=r(Up,"add()"),Up.forEach(a),Yr=r(De,":"),De.forEach(a),yl=u(e),m(nt.$$.fragment,e),_l=u(e),Nt=l(e,"P",{});var Wp=o(Nt);Vr=r(Wp,"This is especially useful when you need to get the predictions from your model in batches:"),Wp.forEach(a),bl=u(e),m(rt.$$.fragment,e),gl=u(e),te=l(e,"H3",{class:!0});var yo=o(te);xe=l(yo,"A",{id:!0,class:!0,href:!0});var Fp=o(xe);ls=l(Fp,"SPAN",{});var Gp=o(ls);m(it.$$.fragment,Gp),Gp.forEach(a),Fp.forEach(a),Jr=u(yo),os=l(yo,"SPAN",{});var Rp=o(os);zr=r(Rp,"Distributed evaluation"),Rp.forEach(a),yo.forEach(a),wl=u(e),q=l(e,"P",{});var R=o(q);Kr=r(R,"Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ns=l(R,"CODE",{});var Yp=o(ns);Qr=r(Yp,"f(AuB) = f(A) + f(B)"),Yp.forEach(a),Xr=r(R,"), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),rs=l(R,"CODE",{});var Vp=o(rs);Zr=r(Vp,"f(AuB) \u2260 f(A) + f(B)"),Vp.forEach(a),ei=r(R,"), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),ct=l(R,"A",{href:!0,rel:!0});var Jp=o(ct);ti=r(Jp,"F1"),Jp.forEach(a),ai=r(R," scores of each data subset as your "),is=l(R,"STRONG",{});var zp=o(is);si=r(zp,"final metric"),zp.forEach(a),li=r(R,"."),R.forEach(a),El=u(e),St=l(e,"P",{});var Kp=o(St);oi=r(Kp,"A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),Kp.forEach(a),$l=u(e),L=l(e,"P",{});var Rt=o(L);ni=r(Rt,"\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),cs=l(Rt,"CODE",{});var Qp=o(cs);ri=r(Qp,"compute"),Qp.forEach(a),ii=r(Rt," the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),ps=l(Rt,"CODE",{});var Xp=o(ps);ci=r(Xp,"compute"),Xp.forEach(a),pi=r(Rt," will perform the final metric evaluation."),Rt.forEach(a),jl=u(e),Mt=l(e,"P",{});var Zp=o(Mt);ui=r(Zp,"This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),Zp.forEach(a),kl=u(e),ae=l(e,"H2",{class:!0});var _o=o(ae);Te=l(_o,"A",{id:!0,class:!0,href:!0});var eu=o(Te);us=l(eu,"SPAN",{});var tu=o(us);m(pt.$$.fragment,tu),tu.forEach(a),eu.forEach(a),hi=u(_o),hs=l(_o,"SPAN",{});var au=o(hs);di=r(au,"Save and push to the Hub"),au.forEach(a),_o.forEach(a),xl=u(e),qe=l(e,"P",{});var bo=o(qe);mi=r(bo,"Saving and sharing evaluation results is an important step. We provide the "),Bt=l(bo,"A",{href:!0});var su=o(Bt);fi=r(su,"evaluate.save()"),su.forEach(a),vi=r(bo," function to easily save metrics results. You can either pass a specific filename or a directory. In the latter case, the results are saved in a file with an automatically created file name. Besides the directory or file name, the function takes any key-value pairs as inputs and stores them in a JSON file."),bo.forEach(a),Tl=u(e),m(ut.$$.fragment,e),ql=u(e),Lt=l(e,"P",{});var lu=o(Lt);yi=r(lu,"The content of the JSON file look like the following:"),lu.forEach(a),Al=u(e),m(ht.$$.fragment,e),Pl=u(e),Ht=l(e,"P",{});var ou=o(Ht);_i=r(ou,"In addition to the specified fields, it also contains useful system information for reproducing the results."),ou.forEach(a),Dl=u(e),Ae=l(e,"P",{});var go=o(Ae);bi=r(go,"Besides storing the results locally, you should report them on the model\u2019s repository on the Hub. With the "),Ut=l(go,"A",{href:!0});var nu=o(Ut);gi=r(nu,"evaluate.push_to_hub()"),nu.forEach(a),wi=r(go," function, you can easily report evaluation results to the model\u2019s repository:"),go.forEach(a),Cl=u(e),m(dt.$$.fragment,e),Ol=u(e),se=l(e,"H2",{class:!0});var wo=o(se);Pe=l(wo,"A",{id:!0,class:!0,href:!0});var ru=o(Pe);ds=l(ru,"SPAN",{});var iu=o(ds);m(mt.$$.fragment,iu),iu.forEach(a),ru.forEach(a),Ei=u(wo),ms=l(wo,"SPAN",{});var cu=o(ms);$i=r(cu,"Evaluator"),cu.forEach(a),wo.forEach(a),Il=u(e),E=l(e,"P",{});var C=o(E);ji=r(C,"The "),Wt=l(C,"A",{href:!0});var pu=o(Wt);ki=r(pu,"evaluate.evaluator()"),pu.forEach(a),xi=r(C," provides automated evaluation and only requires a model, dataset, metric in contrast to the metrics in "),fs=l(C,"CODE",{});var uu=o(fs);Ti=r(uu,"EvaluationModule"),uu.forEach(a),qi=r(C,"s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric as the inference is handled internally. To make that possible it uses the "),vs=l(C,"CODE",{});var hu=o(vs);Ai=r(hu,"Pipeline"),hu.forEach(a),Pi=r(C," abstraction from "),ys=l(C,"CODE",{});var du=o(ys);Di=r(du,"transformers"),du.forEach(a),Ci=r(C,". However, you can use your own framework as long as it follows the "),_s=l(C,"CODE",{});var mu=o(_s);Oi=r(mu,"Pipeline"),mu.forEach(a),Ii=r(C," interface."),C.forEach(a),Nl=u(e),H=l(e,"P",{});var Yt=o(H);Ni=r(Yt,"To make an evaluation with the "),bs=l(Yt,"CODE",{});var fu=o(bs);Si=r(fu,"evaluator"),fu.forEach(a),Mi=r(Yt," let\u2019s load a "),gs=l(Yt,"CODE",{});var vu=o(gs);Bi=r(vu,"transformers"),vu.forEach(a),Li=r(Yt," pipeline (but you can pass your own custom inference class for any framework as long as it follows the pipeline call API) with an model trained on IMDb, the IMDb test split and the accuracy metric."),Yt.forEach(a),Sl=u(e),m(ft.$$.fragment,e),Ml=u(e),U=l(e,"P",{});var Vt=o(U);Hi=r(Vt,"Then you can create an evaluator for text classification and pass the three objects to the "),ws=l(Vt,"CODE",{});var yu=o(ws);Ui=r(yu,"compute()"),yu.forEach(a),Wi=r(Vt," method. With the label mapping "),Es=l(Vt,"CODE",{});var _u=o(Es);Fi=r(_u,"evaluate"),_u.forEach(a),Gi=r(Vt," provides a method to align the pipeline outputs with the label column in the dataset:"),Vt.forEach(a),Bl=u(e),m(vt.$$.fragment,e),Ll=u(e),W=l(e,"P",{});var Jt=o(W);Ri=r(Jt,"Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),$s=l(Jt,"EM",{});var bu=o($s);Yi=r(bu,"bootstrapping"),bu.forEach(a),Vi=u(Jt),js=l(Jt,"CODE",{});var gu=o(js);Ji=r(gu,"evaluate"),gu.forEach(a),zi=r(Jt," computes confidence intervals and the standard error which helps estimate how stable a score is:"),Jt.forEach(a),Hl=u(e),m(yt.$$.fragment,e),Ul=u(e),$=l(e,"P",{});var O=o($);Ki=r(O,"The evaluator expects a "),ks=l(O,"CODE",{});var wu=o(ks);Qi=r(wu,'"text"'),wu.forEach(a),Xi=r(O," and "),xs=l(O,"CODE",{});var Eu=o(xs);Zi=r(Eu,'"label"'),Eu.forEach(a),ec=r(O," column for the data input. If your dataset differs you can provide the columns with the keywords "),Ts=l(O,"CODE",{});var $u=o(Ts);tc=r($u,'input_column="text"'),$u.forEach(a),ac=r(O," and "),qs=l(O,"CODE",{});var ju=o(qs);sc=r(ju,'label_column="label"'),ju.forEach(a),lc=r(O,". Currently only "),As=l(O,"CODE",{});var ku=o(As);oc=r(ku,'"text-classification"'),ku.forEach(a),nc=r(O," is supported with more tasks being added in the future."),O.forEach(a),this.h()},h(){h(g,"name","hf:doc:metadata"),h(g,"content",JSON.stringify(Iu)),h(P,"id","a-quick-tour"),h(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(P,"href","#a-quick-tour"),h(k,"class","relative group"),h(ne,"id","three-types-of-evaluations"),h(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ne,"href","#three-types-of-evaluations"),h(V,"class","relative group"),h(Et,"href","hf.co/evaluate-metric"),h($t,"href","hf.co/evaluate-comparison"),h(jt,"href","hf.co/evaluate-measurement"),h(kt,"href","/docs/evaluate/pr_85/en/package_reference/loading_methods#evaluate.load"),h(ue,"id","load"),h(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ue,"href","#load"),h(J,"class","relative group"),h(de,"id","community-modules"),h(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(de,"href","#community-modules"),h(z,"class","relative group"),h(me,"id","list-available-modules"),h(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(me,"href","#list-available-modules"),h(K,"class","relative group"),h(qt,"href","/docs/evaluate/pr_85/en/package_reference/loading_methods#evaluate.list_evaluation_modules"),h(ve,"id","module-attributes"),h(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ve,"href","#module-attributes"),h(Q,"class","relative group"),h(At,"href","/docs/evaluate/pr_85/en/package_reference/main_classes#evaluate.EvaluationModuleInfo"),h(Ee,"id","compute"),h(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ee,"href","#compute"),h(X,"class","relative group"),h(Ct,"href","/docs/evaluate/pr_85/en/package_reference/main_classes#evaluate.EvaluationModule.add"),h(Ot,"href","/docs/evaluate/pr_85/en/package_reference/main_classes#evaluate.EvaluationModule.add_batch"),h(It,"href","/docs/evaluate/pr_85/en/package_reference/main_classes#evaluate.EvaluationModule.compute"),h(je,"id","using-compute-alone"),h(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(je,"href","#using-compute-alone"),h(Z,"class","relative group"),h(ke,"id","using-add-and-addbatch-with-compute"),h(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ke,"href","#using-add-and-addbatch-with-compute"),h(ee,"class","relative group"),h(xe,"id","distributed-evaluation"),h(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(xe,"href","#distributed-evaluation"),h(te,"class","relative group"),h(ct,"href","https://huggingface.co/spaces/evaluate-metric/f1"),h(ct,"rel","nofollow"),h(Te,"id","save-and-push-to-the-hub"),h(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Te,"href","#save-and-push-to-the-hub"),h(ae,"class","relative group"),h(Bt,"href","/docs/evaluate/pr_85/en/package_reference/saving_methods#evaluate.save"),h(Ut,"href","/docs/evaluate/pr_85/en/package_reference/hub_methods#evaluate.push_to_hub"),h(Pe,"id","evaluator"),h(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Pe,"href","#evaluator"),h(se,"class","relative group"),h(Wt,"href","/docs/evaluate/pr_85/en/package_reference/evaluator_classes#evaluate.evaluator")},m(e,i){t(document.head,g),c(e,le,i),c(e,k,i),t(k,P),t(P,Y),f(A,Y,null),t(k,N),t(k,oe),t(oe,Eo),c(e,Is,i),c(e,gt,i),t(gt,$o),c(e,Ns,i),c(e,V,i),t(V,ne),t(ne,zt),f(Ce,zt,null),t(V,jo),t(V,Kt),t(Kt,ko),c(e,Ss,i),c(e,wt,i),t(wt,xo),c(e,Ms,i),c(e,S,i),t(S,re),t(re,Qt),t(Qt,To),t(re,qo),t(re,Et),t(Et,Ao),t(re,Po),t(S,Do),t(S,ie),t(ie,Xt),t(Xt,Co),t(ie,Oo),t(ie,$t),t($t,Io),t(ie,No),t(S,So),t(S,ce),t(ce,Zt),t(Zt,Mo),t(ce,Bo),t(ce,jt),t(jt,Lo),t(ce,Ho),c(e,Bs,i),c(e,pe,i),t(pe,Uo),t(pe,kt),t(kt,Wo),t(pe,Fo),c(e,Ls,i),c(e,J,i),t(J,ue),t(ue,ea),f(Oe,ea,null),t(J,Go),t(J,ta),t(ta,Ro),c(e,Hs,i),c(e,he,i),t(he,Yo),t(he,aa),t(aa,Vo),t(he,Jo),c(e,Us,i),f(Ie,e,i),c(e,Ws,i),c(e,xt,i),t(xt,zo),c(e,Fs,i),f(Ne,e,i),c(e,Gs,i),c(e,z,i),t(z,de),t(de,sa),f(Se,sa,null),t(z,Ko),t(z,la),t(la,Qo),c(e,Rs,i),c(e,Tt,i),t(Tt,Xo),c(e,Ys,i),f(Me,e,i),c(e,Vs,i),c(e,K,i),t(K,me),t(me,oa),f(Be,oa,null),t(K,Zo),t(K,na),t(na,en),c(e,Js,i),c(e,fe,i),t(fe,tn),t(fe,qt),t(qt,an),t(fe,sn),c(e,zs,i),f(Le,e,i),c(e,Ks,i),c(e,Q,i),t(Q,ve),t(ve,ra),f(He,ra,null),t(Q,ln),t(Q,ia),t(ia,on),c(e,Qs,i),c(e,ye,i),t(ye,nn),t(ye,At),t(At,rn),t(ye,cn),c(e,Xs,i),c(e,_e,i),t(_e,ca),t(ca,Ue),t(Ue,pa),t(pa,pn),t(Ue,un),t(Ue,ua),t(ua,hn),t(_e,dn),t(_e,b),t(b,We),t(We,ha),t(ha,da),t(da,mn),t(We,fn),t(We,ma),t(ma,vn),t(b,yn),t(b,Fe),t(Fe,fa),t(fa,va),t(va,_n),t(Fe,bn),t(Fe,ya),t(ya,gn),t(b,wn),t(b,Ge),t(Ge,_a),t(_a,ba),t(ba,En),t(Ge,$n),t(Ge,Re),t(Re,jn),t(Re,ga),t(ga,kn),t(Re,xn),t(b,Tn),t(b,Ye),t(Ye,wa),t(wa,Ea),t(Ea,qn),t(Ye,An),t(Ye,$a),t($a,Pn),t(b,Dn),t(b,Ve),t(Ve,ja),t(ja,ka),t(ka,Cn),t(Ve,On),t(Ve,xa),t(xa,In),t(b,Nn),t(b,Je),t(Je,Ta),t(Ta,qa),t(qa,Sn),t(Je,Mn),t(Je,Aa),t(Aa,Bn),t(b,Ln),t(b,ze),t(ze,Pa),t(Pa,Da),t(Da,Hn),t(ze,Un),t(ze,Ca),t(Ca,Wn),t(b,Fn),t(b,Ke),t(Ke,Oa),t(Oa,Ia),t(Ia,Gn),t(Ke,Rn),t(Ke,Na),t(Na,Yn),c(e,Zs,i),c(e,be,i),t(be,Vn),t(be,Sa),t(Sa,Jn),t(be,zn),c(e,el,i),f(Qe,e,i),c(e,tl,i),c(e,ge,i),t(ge,Kn),t(ge,Ma),t(Ma,Qn),t(ge,Xn),c(e,al,i),f(Xe,e,i),c(e,sl,i),c(e,Pt,i),t(Pt,Zn),c(e,ll,i),f(Ze,e,i),c(e,ol,i),f(we,e,i),c(e,nl,i),c(e,X,i),t(X,Ee),t(Ee,Ba),f(et,Ba,null),t(X,er),t(X,La),t(La,tr),c(e,rl,i),c(e,Dt,i),t(Dt,ar),c(e,il,i),c(e,$e,i),t($e,Ha),t(Ha,sr),t($e,lr),t($e,Ua),t(Ua,or),c(e,cl,i),c(e,x,i),t(x,nr),t(x,Ct),t(Ct,rr),t(x,ir),t(x,Ot),t(Ot,cr),t(x,pr),t(x,It),t(It,ur),t(x,hr),t(x,Wa),t(Wa,dr),t(x,mr),c(e,pl,i),c(e,Z,i),t(Z,je),t(je,Fa),f(tt,Fa,null),t(Z,fr),t(Z,at),t(at,vr),t(at,Ga),t(Ga,yr),t(at,_r),c(e,ul,i),f(st,e,i),c(e,hl,i),c(e,M,i),t(M,br),t(M,Ra),t(Ra,gr),t(M,wr),t(M,Ya),t(Ya,Er),t(M,$r),c(e,dl,i),c(e,ee,i),t(ee,ke),t(ke,Va),f(lt,Va,null),t(ee,jr),t(ee,B),t(B,kr),t(B,Ja),t(Ja,xr),t(B,Tr),t(B,za),t(za,qr),t(B,Ar),t(B,Ka),t(Ka,Pr),c(e,ml,i),c(e,T,i),t(T,Dr),t(T,Qa),t(Qa,Cr),t(T,Or),t(T,Xa),t(Xa,Ir),t(T,Nr),t(T,Za),t(Za,Sr),t(T,Mr),t(T,es),t(es,Br),t(T,Lr),c(e,fl,i),f(ot,e,i),c(e,vl,i),c(e,D,i),t(D,Hr),t(D,ts),t(ts,Ur),t(D,Wr),t(D,as),t(as,Fr),t(D,Gr),t(D,ss),t(ss,Rr),t(D,Yr),c(e,yl,i),f(nt,e,i),c(e,_l,i),c(e,Nt,i),t(Nt,Vr),c(e,bl,i),f(rt,e,i),c(e,gl,i),c(e,te,i),t(te,xe),t(xe,ls),f(it,ls,null),t(te,Jr),t(te,os),t(os,zr),c(e,wl,i),c(e,q,i),t(q,Kr),t(q,ns),t(ns,Qr),t(q,Xr),t(q,rs),t(rs,Zr),t(q,ei),t(q,ct),t(ct,ti),t(q,ai),t(q,is),t(is,si),t(q,li),c(e,El,i),c(e,St,i),t(St,oi),c(e,$l,i),c(e,L,i),t(L,ni),t(L,cs),t(cs,ri),t(L,ii),t(L,ps),t(ps,ci),t(L,pi),c(e,jl,i),c(e,Mt,i),t(Mt,ui),c(e,kl,i),c(e,ae,i),t(ae,Te),t(Te,us),f(pt,us,null),t(ae,hi),t(ae,hs),t(hs,di),c(e,xl,i),c(e,qe,i),t(qe,mi),t(qe,Bt),t(Bt,fi),t(qe,vi),c(e,Tl,i),f(ut,e,i),c(e,ql,i),c(e,Lt,i),t(Lt,yi),c(e,Al,i),f(ht,e,i),c(e,Pl,i),c(e,Ht,i),t(Ht,_i),c(e,Dl,i),c(e,Ae,i),t(Ae,bi),t(Ae,Ut),t(Ut,gi),t(Ae,wi),c(e,Cl,i),f(dt,e,i),c(e,Ol,i),c(e,se,i),t(se,Pe),t(Pe,ds),f(mt,ds,null),t(se,Ei),t(se,ms),t(ms,$i),c(e,Il,i),c(e,E,i),t(E,ji),t(E,Wt),t(Wt,ki),t(E,xi),t(E,fs),t(fs,Ti),t(E,qi),t(E,vs),t(vs,Ai),t(E,Pi),t(E,ys),t(ys,Di),t(E,Ci),t(E,_s),t(_s,Oi),t(E,Ii),c(e,Nl,i),c(e,H,i),t(H,Ni),t(H,bs),t(bs,Si),t(H,Mi),t(H,gs),t(gs,Bi),t(H,Li),c(e,Sl,i),f(ft,e,i),c(e,Ml,i),c(e,U,i),t(U,Hi),t(U,ws),t(ws,Ui),t(U,Wi),t(U,Es),t(Es,Fi),t(U,Gi),c(e,Bl,i),f(vt,e,i),c(e,Ll,i),c(e,W,i),t(W,Ri),t(W,$s),t($s,Yi),t(W,Vi),t(W,js),t(js,Ji),t(W,zi),c(e,Hl,i),f(yt,e,i),c(e,Ul,i),c(e,$,i),t($,Ki),t($,ks),t(ks,Qi),t($,Xi),t($,xs),t(xs,Zi),t($,ec),t($,Ts),t(Ts,tc),t($,ac),t($,qs),t(qs,sc),t($,lc),t($,As),t(As,oc),t($,nc),Wl=!0},p(e,[i]){const _t={};i&2&&(_t.$$scope={dirty:i,ctx:e}),we.$set(_t)},i(e){Wl||(v(A.$$.fragment,e),v(Ce.$$.fragment,e),v(Oe.$$.fragment,e),v(Ie.$$.fragment,e),v(Ne.$$.fragment,e),v(Se.$$.fragment,e),v(Me.$$.fragment,e),v(Be.$$.fragment,e),v(Le.$$.fragment,e),v(He.$$.fragment,e),v(Qe.$$.fragment,e),v(Xe.$$.fragment,e),v(Ze.$$.fragment,e),v(we.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v(st.$$.fragment,e),v(lt.$$.fragment,e),v(ot.$$.fragment,e),v(nt.$$.fragment,e),v(rt.$$.fragment,e),v(it.$$.fragment,e),v(pt.$$.fragment,e),v(ut.$$.fragment,e),v(ht.$$.fragment,e),v(dt.$$.fragment,e),v(mt.$$.fragment,e),v(ft.$$.fragment,e),v(vt.$$.fragment,e),v(yt.$$.fragment,e),Wl=!0)},o(e){y(A.$$.fragment,e),y(Ce.$$.fragment,e),y(Oe.$$.fragment,e),y(Ie.$$.fragment,e),y(Ne.$$.fragment,e),y(Se.$$.fragment,e),y(Me.$$.fragment,e),y(Be.$$.fragment,e),y(Le.$$.fragment,e),y(He.$$.fragment,e),y(Qe.$$.fragment,e),y(Xe.$$.fragment,e),y(Ze.$$.fragment,e),y(we.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(st.$$.fragment,e),y(lt.$$.fragment,e),y(ot.$$.fragment,e),y(nt.$$.fragment,e),y(rt.$$.fragment,e),y(it.$$.fragment,e),y(pt.$$.fragment,e),y(ut.$$.fragment,e),y(ht.$$.fragment,e),y(dt.$$.fragment,e),y(mt.$$.fragment,e),y(ft.$$.fragment,e),y(vt.$$.fragment,e),y(yt.$$.fragment,e),Wl=!1},d(e){a(g),e&&a(le),e&&a(k),_(A),e&&a(Is),e&&a(gt),e&&a(Ns),e&&a(V),_(Ce),e&&a(Ss),e&&a(wt),e&&a(Ms),e&&a(S),e&&a(Bs),e&&a(pe),e&&a(Ls),e&&a(J),_(Oe),e&&a(Hs),e&&a(he),e&&a(Us),_(Ie,e),e&&a(Ws),e&&a(xt),e&&a(Fs),_(Ne,e),e&&a(Gs),e&&a(z),_(Se),e&&a(Rs),e&&a(Tt),e&&a(Ys),_(Me,e),e&&a(Vs),e&&a(K),_(Be),e&&a(Js),e&&a(fe),e&&a(zs),_(Le,e),e&&a(Ks),e&&a(Q),_(He),e&&a(Qs),e&&a(ye),e&&a(Xs),e&&a(_e),e&&a(Zs),e&&a(be),e&&a(el),_(Qe,e),e&&a(tl),e&&a(ge),e&&a(al),_(Xe,e),e&&a(sl),e&&a(Pt),e&&a(ll),_(Ze,e),e&&a(ol),_(we,e),e&&a(nl),e&&a(X),_(et),e&&a(rl),e&&a(Dt),e&&a(il),e&&a($e),e&&a(cl),e&&a(x),e&&a(pl),e&&a(Z),_(tt),e&&a(ul),_(st,e),e&&a(hl),e&&a(M),e&&a(dl),e&&a(ee),_(lt),e&&a(ml),e&&a(T),e&&a(fl),_(ot,e),e&&a(vl),e&&a(D),e&&a(yl),_(nt,e),e&&a(_l),e&&a(Nt),e&&a(bl),_(rt,e),e&&a(gl),e&&a(te),_(it),e&&a(wl),e&&a(q),e&&a(El),e&&a(St),e&&a($l),e&&a(L),e&&a(jl),e&&a(Mt),e&&a(kl),e&&a(ae),_(pt),e&&a(xl),e&&a(qe),e&&a(Tl),_(ut,e),e&&a(ql),e&&a(Lt),e&&a(Al),_(ht,e),e&&a(Pl),e&&a(Ht),e&&a(Dl),e&&a(Ae),e&&a(Cl),_(dt,e),e&&a(Ol),e&&a(se),_(mt),e&&a(Il),e&&a(E),e&&a(Nl),e&&a(H),e&&a(Sl),_(ft,e),e&&a(Ml),e&&a(U),e&&a(Bl),_(vt,e),e&&a(Ll),e&&a(W),e&&a(Hl),_(yt,e),e&&a(Ul),e&&a($)}}}const Iu={local:"a-quick-tour",sections:[{local:"three-types-of-evaluations",title:"Three types of evaluations"},{local:"load",sections:[{local:"community-modules",title:"Community modules"},{local:"list-available-modules",title:"List available modules"}],title:"Load"},{local:"module-attributes",title:"Module attributes"},{local:"compute",sections:[{local:"using-compute-alone",title:"Using `compute()` alone"},{local:"using-add-and-addbatch-with-compute",title:"Using `add()` and `add_batch()` with `compute()`"},{local:"distributed-evaluation",title:"Distributed evaluation"}],title:"Compute"},{local:"save-and-push-to-the-hub",title:"Save and push to the Hub"},{local:"evaluator",title:"Evaluator"}],title:"A quick tour"};function Nu(Os){return Pu(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hu extends xu{constructor(g){super();Tu(this,g,Nu,Ou,qu,{})}}export{Hu as default,Iu as metadata};
