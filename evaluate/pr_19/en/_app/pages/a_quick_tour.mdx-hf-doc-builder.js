import{S as lh,i as oh,s as nh,e as s,k as p,w as d,t as n,M as rh,c as l,d as a,m as u,a as o,x as m,h as r,b as h,N as ih,G as t,g as c,y as f,q as v,o as y,B as _,v as ch}from"../chunks/vendor-hf-doc-builder.js";import{T as ph}from"../chunks/Tip-hf-doc-builder.js";import{I}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function uh(Ws){let b,le,k,P,Y;return{c(){b=s("p"),le=n("Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=s("code"),P=n("features"),Y=n(". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation.")},l(A){b=l(A,"P",{});var N=o(b);le=r(N,"Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),k=l(N,"CODE",{});var oe=o(k);P=r(oe,"features"),oe.forEach(a),Y=r(N,". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation."),N.forEach(a)},m(A,N){c(A,b,N),t(b,le),t(b,k),t(k,P),t(b,Y)},d(A){A&&a(b)}}}function hh(Ws){let b,le,k,P,Y,A,N,oe,Mo,Gs,qt,Bo,Rs,V,ne,aa,Ne,Ho,sa,Lo,Ys,Tt,Fo,Vs,M,re,la,Uo,Wo,Me,Go,Ro,Yo,ie,oa,Vo,Jo,Be,zo,Ko,Qo,ce,na,Xo,Zo,He,en,tn,Js,pe,an,Le,sn,ln,zs,Fe,At,Oc,Ks,ue,on,Pt,nn,rn,Qs,J,he,ra,Ue,cn,ia,pn,Xs,de,un,ca,hn,dn,Zs,We,el,Dt,mn,tl,Ge,al,z,me,pa,Re,fn,ua,vn,sl,Ct,yn,ll,Ye,ol,fe,_n,Ot,gn,bn,nl,K,ve,ha,Ve,wn,da,En,rl,ye,$n,St,jn,kn,il,Je,cl,Q,_e,ma,ze,xn,fa,qn,pl,ge,Tn,It,An,Pn,ul,be,va,Ke,ya,Dn,Cn,_a,On,Sn,g,Qe,ga,ba,In,Nn,wa,Mn,Bn,Xe,Ea,$a,Hn,Ln,ja,Fn,Un,Ze,ka,xa,Wn,Gn,et,Rn,qa,Yn,Vn,Jn,tt,Ta,Aa,zn,Kn,Pa,Qn,Xn,at,Da,Ca,Zn,er,Oa,tr,ar,st,Sa,Ia,sr,lr,Na,or,nr,lt,Ma,Ba,rr,ir,Ha,cr,pr,ot,La,Fa,ur,hr,Ua,dr,hl,we,mr,Wa,fr,vr,dl,nt,ml,Ee,yr,Ga,_r,gr,fl,rt,vl,Nt,br,yl,it,_l,$e,gl,X,je,Ra,ct,wr,Ya,Er,bl,Mt,$r,wl,ke,Va,jr,kr,Ja,xr,El,x,qr,Bt,Tr,Ar,Ht,Pr,Dr,Lt,Cr,Or,za,Sr,Ir,$l,Z,xe,Ka,pt,Nr,Ft,Mr,Qa,Br,jl,D,Hr,Xa,Lr,Fr,Za,Ur,Wr,es,Gr,Rr,kl,ut,xl,B,Yr,ts,Vr,Jr,as,zr,Kr,ql,ee,qe,ss,ht,Qr,Te,Xr,ls,Zr,ei,os,ti,Tl,q,ai,ns,si,li,rs,oi,ni,is,ri,ii,cs,ci,pi,Al,dt,Pl,C,ui,ps,hi,di,us,mi,fi,hs,vi,yi,Dl,mt,Cl,Ut,_i,Ol,ft,Sl,te,Ae,ds,vt,gi,ms,bi,Il,T,wi,fs,Ei,$i,vs,ji,ki,yt,xi,qi,ys,Ti,Ai,Nl,Wt,Pi,Ml,H,Di,_s,Ci,Oi,gs,Si,Ii,Bl,Gt,Ni,Hl,ae,Pe,bs,_t,Mi,ws,Bi,Ll,De,Hi,Rt,Li,Fi,Fl,gt,Ul,Yt,Ui,Wl,bt,Gl,Vt,Wi,Rl,Ce,Gi,Jt,Ri,Yi,Yl,wt,Vl,se,Oe,Es,Et,Vi,$s,Ji,Jl,E,zi,zt,Ki,Qi,js,Xi,Zi,ks,ec,tc,xs,ac,sc,qs,lc,oc,zl,L,nc,Ts,rc,ic,As,cc,pc,Kl,$t,Ql,F,uc,Ps,hc,dc,Ds,mc,fc,Xl,jt,Zl,U,vc,Cs,yc,_c,Os,gc,bc,eo,kt,to,$,wc,Ss,Ec,$c,Is,jc,kc,Ns,xc,qc,Ms,Tc,Ac,Bs,Pc,Dc,ao;return A=new I({}),Ne=new I({}),Ue=new I({}),We=new w({props:{code:`import evaluate
accuracy = evaluate.load("accuracy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> evaluate
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),Ge=new w({props:{code:'word_length = evaluate.load("word_length", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>word_length = evaluate.load(<span class="hljs-string">&quot;word_length&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Re=new I({}),Ye=new w({props:{code:'element_count = evaluate.load("lvwerra/element_count", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>element_count = evaluate.load(<span class="hljs-string">&quot;lvwerra/element_count&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),Ve=new I({}),Je=new w({props:{code:`
[{'name': 'mcnemar', 'type': 'comparison', 'community': False, 'likes': 1},
 {'name': 'exact_match', 'type': 'comparison', 'community': False, 'likes': 0}]`,highlighted:`evaluate.list_evaluation_modules(
  module_type=<span class="hljs-string">&quot;comparison&quot;</span>,
  include_community=<span class="hljs-literal">False</span>, 
  with_details=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>[{<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;mcnemar&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;comparison&#x27;</span>, <span class="hljs-string">&#x27;community&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">1</span>},
<span class="hljs-meta">... </span> {<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;exact_match&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;comparison&#x27;</span>, <span class="hljs-string">&#x27;community&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">0</span>}]`}}),ze=new I({}),nt=new w({props:{code:`accuracy = evaluate.load("accuracy")
accuracy.description`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.description
Accuracy <span class="hljs-keyword">is</span> the proportion of correct predictions among the total number of cases processed. It can be computed <span class="hljs-keyword">with</span>:
Accuracy = (TP + TN) / (TP + TN + FP + FN)
 Where:
TP: <span class="hljs-literal">True</span> positive
TN: <span class="hljs-literal">True</span> negative
FP: <span class="hljs-literal">False</span> positive
FN: <span class="hljs-literal">False</span> negative`}}),rt=new w({props:{code:"accuracy.citation",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.citation
<span class="hljs-meta">@article{scikit-learn,</span>
  title={Scikit-learn: Machine Learning <span class="hljs-keyword">in</span> {P}ython},
  author={Pedregosa, F. <span class="hljs-keyword">and</span> Varoquaux, G. <span class="hljs-keyword">and</span> Gramfort, A. <span class="hljs-keyword">and</span> Michel, V.
         <span class="hljs-keyword">and</span> Thirion, B. <span class="hljs-keyword">and</span> Grisel, O. <span class="hljs-keyword">and</span> Blondel, M. <span class="hljs-keyword">and</span> Prettenhofer, P.
         <span class="hljs-keyword">and</span> Weiss, R. <span class="hljs-keyword">and</span> Dubourg, V. <span class="hljs-keyword">and</span> Vanderplas, J. <span class="hljs-keyword">and</span> Passos, A. <span class="hljs-keyword">and</span>
         Cournapeau, D. <span class="hljs-keyword">and</span> Brucher, M. <span class="hljs-keyword">and</span> Perrot, M. <span class="hljs-keyword">and</span> Duchesnay, E.},
  journal={Journal of Machine Learning Research},
  volume={<span class="hljs-number">12</span>},
  pages={<span class="hljs-number">2825</span>--<span class="hljs-number">2830</span>},
  year={<span class="hljs-number">2011</span>}
}`}}),it=new w({props:{code:"accuracy.features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.features
{
    <span class="hljs-string">&#x27;predictions&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
    <span class="hljs-string">&#x27;references&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
}`}}),$e=new ph({props:{$$slots:{default:[uh]},$$scope:{ctx:Ws}}}),ct=new I({}),pt=new I({}),ut=new w({props:{code:"accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),ht=new I({}),dt=new w({props:{code:`for ref, pred in zip([0,1,0,1], [1,0,0,1]):
    accuracy.add(references=ref, predictions=pred)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> ref, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add(references=ref, predictions=pred)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),mt=new w({props:{code:`for refs, preds in zip([[0,1],[0,1]], [[1,0],[0,1]]):
    accuracy.add_batch(references=refs, predictions=preds)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> refs, preds <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]], [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add_batch(references=refs, predictions=preds)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),ft=new w({props:{code:`for model_inputs, gold_standards in evaluation_dataset:
    predictions = model(model_inputs)
    metric.add_batch(references=gold_standards, predictions=predictions)
metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> model_inputs, gold_standards <span class="hljs-keyword">in</span> evaluation_dataset:
<span class="hljs-meta">&gt;&gt;&gt; </span>    predictions = model(model_inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric.add_batch(references=gold_standards, predictions=predictions)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.compute()`}}),vt=new I({}),_t=new I({}),gt=new w({props:{code:`
PosixPath('results/result-2022_05_30-22_09_11.json')`,highlighted:`result = accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])

hyperparams = {<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;bert-base-uncased&quot;</span>}
evaluate.save(<span class="hljs-string">&quot;./results/&quot;</span>experiment=<span class="hljs-string">&quot;run 42&quot;</span>, **result, **hyperparams)
<span class="hljs-meta">&gt;&gt;&gt; </span>PosixPath(<span class="hljs-string">&#x27;results/result-2022_05_30-22_09_11.json&#x27;</span>)`}}),bt=new w({props:{code:`{
    "experiment": "run 42",
    "accuracy": 0.5,
    "model": "bert-base-uncased",
    "_timestamp": "2022-05-30T22:09:11.959469",
    "_git_commit_hash": "123456789abcdefghijkl",
    "_evaluate_version": "0.1.0",
    "_python_version": "3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]",
    "_interpreter_path": "/Users/leandro/git/evaluate/env/bin/python"
}`,highlighted:`<span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;experiment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;run 42&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;accuracy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bert-base-uncased&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-05-30T22:09:11.959469&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_git_commit_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789abcdefghijkl&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_evaluate_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_python_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.9.12 (main, Mar 26 2022, 15:51:15) \\n[Clang 13.1.6 (clang-1316.0.21.2)]&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;_interpreter_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Users/leandro/git/evaluate/env/bin/python&quot;</span>
<span class="hljs-punctuation">}</span>`}}),wt=new w({props:{code:`evaluate.push_to_hub(
  model_id="huggingface/gpt2-wikitext2",  # model repository on hub
  metric_value=0.5,                       # metric value
  metric_type="bleu",                     # metric name, e.g. accuracy.name
  metric_name="BLEU",                     # pretty name which is displayed
  dataset_type="wikitext",                # dataset name on the hub
  dataset_name="WikiText",                # pretty name
  dataset_split="test",                   # dataset split used
  task_type="text-generation",            # task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json
  task_name="Text Generation"             # pretty name for task
)`,highlighted:`evaluate.push_to_hub(
  model_id=<span class="hljs-string">&quot;huggingface/gpt2-wikitext2&quot;</span>,  <span class="hljs-comment"># model repository on hub</span>
  metric_value=<span class="hljs-number">0.5</span>,                       <span class="hljs-comment"># metric value</span>
  metric_type=<span class="hljs-string">&quot;bleu&quot;</span>,                     <span class="hljs-comment"># metric name, e.g. accuracy.name</span>
  metric_name=<span class="hljs-string">&quot;BLEU&quot;</span>,                     <span class="hljs-comment"># pretty name which is displayed</span>
  dataset_type=<span class="hljs-string">&quot;wikitext&quot;</span>,                <span class="hljs-comment"># dataset name on the hub</span>
  dataset_name=<span class="hljs-string">&quot;WikiText&quot;</span>,                <span class="hljs-comment"># pretty name</span>
  dataset_split=<span class="hljs-string">&quot;test&quot;</span>,                   <span class="hljs-comment"># dataset split used</span>
  task_type=<span class="hljs-string">&quot;text-generation&quot;</span>,            <span class="hljs-comment"># task id, see https://github.com/huggingface/datasets/blob/master/src/datasets/utils/resources/tasks.json</span>
  task_name=<span class="hljs-string">&quot;Text Generation&quot;</span>             <span class="hljs-comment"># pretty name for task</span>
)`}}),Et=new I({}),$t=new w({props:{code:`from transformers import pipeline
from datasets import load_dataset
from evaluate import evaluator
import evaluate

pipe = pipeline("text-classification", model="lvwerra/distilbert-imdb", device=0)
data = load_dataset("imdb", split="test").shuffle().select(range(1000))
metric = evaluate.load("accuracy")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-keyword">from</span> evaluate <span class="hljs-keyword">import</span> evaluator
<span class="hljs-keyword">import</span> evaluate

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=<span class="hljs-string">&quot;lvwerra/distilbert-imdb&quot;</span>, device=<span class="hljs-number">0</span>)
data = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, split=<span class="hljs-string">&quot;test&quot;</span>).shuffle().select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))
metric = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),jt=new w({props:{code:`

{'accuracy': 0.934}`,highlighted:`<span class="hljs-built_in">eval</span> = evaluator(<span class="hljs-string">&quot;text-classification&quot;</span>)

results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.934</span>}`}}),kt=new w({props:{code:`
{'accuracy': 
    {
      'confidence_interval': (0.906, 0.9406749892841922),
      'standard_error': 0.00865213251082787,
      'score': 0.923
    }
}`,highlighted:`results = <span class="hljs-built_in">eval</span>.compute(model_or_pipeline=pipe, data=data, metric=metric,
                       label_mapping={<span class="hljs-string">&quot;NEGATIVE&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;POSITIVE&quot;</span>: <span class="hljs-number">1</span>},
                       strategy=<span class="hljs-string">&quot;bootstrap&quot;</span>, n_resamples=<span class="hljs-number">200</span>)

<span class="hljs-built_in">print</span>(results)
<span class="hljs-meta">&gt;&gt;&gt; </span>{<span class="hljs-string">&#x27;accuracy&#x27;</span>: 
<span class="hljs-meta">... </span>    {
<span class="hljs-meta">... </span>      <span class="hljs-string">&#x27;confidence_interval&#x27;</span>: (<span class="hljs-number">0.906</span>, <span class="hljs-number">0.9406749892841922</span>),
<span class="hljs-meta">... </span>      <span class="hljs-string">&#x27;standard_error&#x27;</span>: <span class="hljs-number">0.00865213251082787</span>,
<span class="hljs-meta">... </span>      <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.923</span>
<span class="hljs-meta">... </span>    }
<span class="hljs-meta">... </span>}`}}),{c(){b=s("meta"),le=p(),k=s("h1"),P=s("a"),Y=s("span"),d(A.$$.fragment),N=p(),oe=s("span"),Mo=n("A quick tour"),Gs=p(),qt=s("p"),Bo=n("\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Rs=p(),V=s("h2"),ne=s("a"),aa=s("span"),d(Ne.$$.fragment),Ho=p(),sa=s("span"),Lo=n("Types of evaluations"),Ys=p(),Tt=s("p"),Fo=n("There are different aspects of a typical machine learning pipeline that can be evaluated and for each aspect \u{1F917} Evaluate provides a tool:"),Vs=p(),M=s("ul"),re=s("li"),la=s("strong"),Uo=n("Metric"),Wo=n(": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Me=s("a"),Go=n("evaluate-metric"),Ro=n("."),Yo=p(),ie=s("li"),oa=s("strong"),Vo=n("Comparison"),Jo=n(": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),Be=s("a"),zo=n("evaluate-comparison"),Ko=n("."),Qo=p(),ce=s("li"),na=s("strong"),Xo=n("Measurement"),Zo=n(": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),He=s("a"),en=n("evaluate-measurement"),tn=n("."),Js=p(),pe=s("p"),an=n("Each of these evaluation modules live on Hugging Face Hub as a Space. They come with an interactive widget and a documentation card documenting its use and limitations. For example "),Le=s("a"),sn=n("accuracy"),ln=n(":"),zs=p(),Fe=s("div"),At=s("img"),Ks=p(),ue=s("p"),on=n("Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),Pt=s("a"),nn=n("evaluate.load()"),rn=n("!"),Qs=p(),J=s("h2"),he=s("a"),ra=s("span"),d(Ue.$$.fragment),cn=p(),ia=s("span"),pn=n("Load"),Xs=p(),de=s("p"),un=n("Any metric, comparison, or measurement is loaded with the "),ca=s("code"),hn=n("evaluate.load"),dn=n(" function:"),Zs=p(),d(We.$$.fragment),el=p(),Dt=s("p"),mn=n("If you want to make sure you are loading the right type of evaluation (especially if there are name clashes) you can explicitely pass the type:"),tl=p(),d(Ge.$$.fragment),al=p(),z=s("h3"),me=s("a"),pa=s("span"),d(Re.$$.fragment),fn=p(),ua=s("span"),vn=n("Community modules"),sl=p(),Ct=s("p"),yn=n("Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by specifying the repository ID of the metric implementation:"),ll=p(),d(Ye.$$.fragment),ol=p(),fe=s("p"),_n=n("See the "),Ot=s("a"),gn=n("Creating and Sharing Guide"),bn=n(" for information about uploading custom metrics."),nl=p(),K=s("h3"),ve=s("a"),ha=s("span"),d(Ve.$$.fragment),wn=p(),da=s("span"),En=n("List available modules"),rl=p(),ye=s("p"),$n=n("With "),St=s("a"),jn=n("list_evaluation_modules()"),kn=n(" you can check what modules are available on the hub. You can also filter for a specific modules and skip community metrics if you want. You can also see additional information such as likes:"),il=p(),d(Je.$$.fragment),cl=p(),Q=s("h2"),_e=s("a"),ma=s("span"),d(ze.$$.fragment),xn=p(),fa=s("span"),qn=n("Module attributes"),pl=p(),ge=s("p"),Tn=n("All evalution modules come with a range of useful attributes that help to use a module stored in a "),It=s("a"),An=n("EvaluationModuleInfo"),Pn=n(" object."),ul=p(),be=s("table"),va=s("thead"),Ke=s("tr"),ya=s("th"),Dn=n("Attribute"),Cn=p(),_a=s("th"),On=n("Description"),Sn=p(),g=s("tbody"),Qe=s("tr"),ga=s("td"),ba=s("code"),In=n("description"),Nn=p(),wa=s("td"),Mn=n("A short description of the evaluation module."),Bn=p(),Xe=s("tr"),Ea=s("td"),$a=s("code"),Hn=n("citation"),Ln=p(),ja=s("td"),Fn=n("A BibTex string for citation when available."),Un=p(),Ze=s("tr"),ka=s("td"),xa=s("code"),Wn=n("features"),Gn=p(),et=s("td"),Rn=n("A "),qa=s("code"),Yn=n("Features"),Vn=n(" object defining the input format."),Jn=p(),tt=s("tr"),Ta=s("td"),Aa=s("code"),zn=n("inputs_description"),Kn=p(),Pa=s("td"),Qn=n("This is equivalent to the modules docstring."),Xn=p(),at=s("tr"),Da=s("td"),Ca=s("code"),Zn=n("homepage"),er=p(),Oa=s("td"),tr=n("The homepage of the module."),ar=p(),st=s("tr"),Sa=s("td"),Ia=s("code"),sr=n("license"),lr=p(),Na=s("td"),or=n("The license of the module."),nr=p(),lt=s("tr"),Ma=s("td"),Ba=s("code"),rr=n("codebase_urls"),ir=p(),Ha=s("td"),cr=n("Link to the code behind the module."),pr=p(),ot=s("tr"),La=s("td"),Fa=s("code"),ur=n("reference_urls"),hr=p(),Ua=s("td"),dr=n("Additional reference URLs."),hl=p(),we=s("p"),mr=n("Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Wa=s("code"),fr=n("description"),vr=n(" attribute of the accuracy metric:"),dl=p(),d(nt.$$.fragment),ml=p(),Ee=s("p"),yr=n("You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Ga=s("code"),_r=n("citation"),gr=n(" attribute:"),fl=p(),d(rt.$$.fragment),vl=p(),Nt=s("p"),br=n("Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),yl=p(),d(it.$$.fragment),_l=p(),d($e.$$.fragment),gl=p(),X=s("h2"),je=s("a"),Ra=s("span"),d(ct.$$.fragment),wr=p(),Ya=s("span"),Er=n("Compute"),bl=p(),Mt=s("p"),$r=n("Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),wl=p(),ke=s("ol"),Va=s("li"),jr=n("All-in-one"),kr=p(),Ja=s("li"),xr=n("Incremental"),El=p(),x=s("p"),qr=n("In the incremental approach the necessary inputs are added to the module with "),Bt=s("a"),Tr=n("EvaluationModule.add()"),Ar=n(" or "),Ht=s("a"),Pr=n("EvaluationModule.add_batch()"),Dr=n(" and the score is calculated at the end with "),Lt=s("a"),Cr=n("EvaluationModule.compute()"),Or=n(". Alternatively, one can pass all the inputs at once to "),za=s("code"),Sr=n("compute()"),Ir=n(". Let\u2019s have a look at the two approaches."),$l=p(),Z=s("h3"),xe=s("a"),Ka=s("span"),d(pt.$$.fragment),Nr=p(),Ft=s("span"),Mr=n("Using "),Qa=s("code"),Br=n("compute()"),jl=p(),D=s("p"),Hr=n("The simplest way to calculate the score of an evaluation module is by calling "),Xa=s("code"),Lr=n("compute()"),Fr=n(" directly with the necessary inputs. Simply pass the inputs as seen in "),Za=s("code"),Ur=n("features"),Wr=n(" to the "),es=s("code"),Gr=n("compute()"),Rr=n(" method."),kl=p(),d(ut.$$.fragment),xl=p(),B=s("p"),Yr=n("Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),ts=s("code"),Vr=n("add()"),Jr=n(" or "),as=s("code"),zr=n("add_batch()"),Kr=n(" are useful."),ql=p(),ee=s("h3"),qe=s("a"),ss=s("span"),d(ht.$$.fragment),Qr=p(),Te=s("span"),Xr=n("Using "),ls=s("code"),Zr=n("add()"),ei=n(" and "),os=s("code"),ti=n("add_batch()"),Tl=p(),q=s("p"),ai=n("In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),ns=s("code"),si=n("compute()"),li=n(". With "),rs=s("code"),oi=n("add()"),ni=n(" and "),is=s("code"),ri=n("add_batch()"),ii=n(" you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),cs=s("code"),ci=n("add()"),pi=n(":"),Al=p(),d(dt.$$.fragment),Pl=p(),C=s("p"),ui=n("Once you have gathered all predictions you can call "),ps=s("code"),hi=n("compute()"),di=n(" to compute the score based on all stored values. When getting predictions and references in batches you can use "),us=s("code"),mi=n("add_batch()"),fi=n(" which adds a list elements for later processing. The rest works as with "),hs=s("code"),vi=n("add()"),yi=n(":"),Dl=p(),d(mt.$$.fragment),Cl=p(),Ut=s("p"),_i=n("This is especially useful when you need to get the predictions from your model in batches:"),Ol=p(),d(ft.$$.fragment),Sl=p(),te=s("h3"),Ae=s("a"),ds=s("span"),d(vt.$$.fragment),gi=p(),ms=s("span"),bi=n("Distributed evaluation"),Il=p(),T=s("p"),wi=n("Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),fs=s("code"),Ei=n("f(AuB) = f(A) + f(B)"),$i=n("), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),vs=s("code"),ji=n("f(AuB) \u2260 f(A) + f(B)"),ki=n("), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),yt=s("a"),xi=n("F1"),qi=n(" scores of each data subset as your "),ys=s("strong"),Ti=n("final metric"),Ai=n("."),Nl=p(),Wt=s("p"),Pi=n("A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),Ml=p(),H=s("p"),Di=n("\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),_s=s("code"),Ci=n("compute()"),Oi=n(" the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),gs=s("code"),Si=n("compute()"),Ii=n(" will perform the final metric evaluation."),Bl=p(),Gt=s("p"),Ni=n("This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),Hl=p(),ae=s("h2"),Pe=s("a"),bs=s("span"),d(_t.$$.fragment),Mi=p(),ws=s("span"),Bi=n("Save and push to the Hub"),Ll=p(),De=s("p"),Hi=n("Saving and sharing evaluation results is an important step. We provide the "),Rt=s("a"),Li=n("evaluate.save()"),Fi=n(" function to easily save metrics results. You can either pass a specific filename or a directory. In the latter case, the results are saved in a file with an automatically created file name. Besides the directory or file name, the function takes any key-value pairs as inputs and stores them in a JSON file."),Fl=p(),d(gt.$$.fragment),Ul=p(),Yt=s("p"),Ui=n("The content of the JSON file look like the following:"),Wl=p(),d(bt.$$.fragment),Gl=p(),Vt=s("p"),Wi=n("In addition to the specified fields, it also contains useful system information for reproducing the results."),Rl=p(),Ce=s("p"),Gi=n("Besides storing the results locally, you should report them on the model\u2019s repository on the Hub. With the "),Jt=s("a"),Ri=n("evaluate.push_to_hub()"),Yi=n(" function, you can easily report evaluation results to the model\u2019s repository:"),Yl=p(),d(wt.$$.fragment),Vl=p(),se=s("h2"),Oe=s("a"),Es=s("span"),d(Et.$$.fragment),Vi=p(),$s=s("span"),Ji=n("Evaluator"),Jl=p(),E=s("p"),zi=n("The "),zt=s("a"),Ki=n("evaluate.evaluator()"),Qi=n(" provides automated evaluation and only requires a model, dataset, metric in contrast to the metrics in "),js=s("code"),Xi=n("EvaluationModule"),Zi=n("s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric as the inference is handled internally. To make that possible it uses the "),ks=s("code"),ec=n("Pipeline"),tc=n(" abstraction from "),xs=s("code"),ac=n("transformers"),sc=n(". However, you can use your own framework as long as it follows the "),qs=s("code"),lc=n("Pipeline"),oc=n(" interface."),zl=p(),L=s("p"),nc=n("To make an evaluation with the "),Ts=s("code"),rc=n("evaluator"),ic=n(" let\u2019s load a "),As=s("code"),cc=n("transformers"),pc=n(" pipeline (but you can pass your own custom inference class for any framework as long as it follows the pipeline call API) with an model trained on IMDb, the IMDb test split and the accuracy metric."),Kl=p(),d($t.$$.fragment),Ql=p(),F=s("p"),uc=n("Then you can create an evaluator for text classification and pass the three objects to the "),Ps=s("code"),hc=n("compute()"),dc=n(" method. With the label mapping "),Ds=s("code"),mc=n("evaluate"),fc=n(" provides a method to align the pipeline outputs with the label column in the dataset:"),Xl=p(),d(jt.$$.fragment),Zl=p(),U=s("p"),vc=n("Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),Cs=s("em"),yc=n("bootstrapping"),_c=p(),Os=s("code"),gc=n("evaluate"),bc=n(" computes confidence intervals and the standard error which helps estimate how stable a score is:"),eo=p(),d(kt.$$.fragment),to=p(),$=s("p"),wc=n("The evaluator expects a "),Ss=s("code"),Ec=n('"text"'),$c=n(" and "),Is=s("code"),jc=n('"label"'),kc=n(" column for the data input. If your dataset differs you can provide the columns with the keywords "),Ns=s("code"),xc=n('input_column="text"'),qc=n(" and "),Ms=s("code"),Tc=n('label_column="label"'),Ac=n(". Currently only "),Bs=s("code"),Pc=n('"text-classification"'),Dc=n(" is supported with more tasks being added in the future."),this.h()},l(e){const i=rh('[data-svelte="svelte-1phssyn"]',document.head);b=l(i,"META",{name:!0,content:!0}),i.forEach(a),le=u(e),k=l(e,"H1",{class:!0});var xt=o(k);P=l(xt,"A",{id:!0,class:!0,href:!0});var Sc=o(P);Y=l(Sc,"SPAN",{});var Ic=o(Y);m(A.$$.fragment,Ic),Ic.forEach(a),Sc.forEach(a),N=u(xt),oe=l(xt,"SPAN",{});var Nc=o(oe);Mo=r(Nc,"A quick tour"),Nc.forEach(a),xt.forEach(a),Gs=u(e),qt=l(e,"P",{});var Mc=o(qt);Bo=r(Mc,"\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Mc.forEach(a),Rs=u(e),V=l(e,"H2",{class:!0});var so=o(V);ne=l(so,"A",{id:!0,class:!0,href:!0});var Bc=o(ne);aa=l(Bc,"SPAN",{});var Hc=o(aa);m(Ne.$$.fragment,Hc),Hc.forEach(a),Bc.forEach(a),Ho=u(so),sa=l(so,"SPAN",{});var Lc=o(sa);Lo=r(Lc,"Types of evaluations"),Lc.forEach(a),so.forEach(a),Ys=u(e),Tt=l(e,"P",{});var Fc=o(Tt);Fo=r(Fc,"There are different aspects of a typical machine learning pipeline that can be evaluated and for each aspect \u{1F917} Evaluate provides a tool:"),Fc.forEach(a),Vs=u(e),M=l(e,"UL",{});var Kt=o(M);re=l(Kt,"LI",{});var Hs=o(re);la=l(Hs,"STRONG",{});var Uc=o(la);Uo=r(Uc,"Metric"),Uc.forEach(a),Wo=r(Hs,": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Me=l(Hs,"A",{href:!0,rel:!0});var Wc=o(Me);Go=r(Wc,"evaluate-metric"),Wc.forEach(a),Ro=r(Hs,"."),Hs.forEach(a),Yo=u(Kt),ie=l(Kt,"LI",{});var Ls=o(ie);oa=l(Ls,"STRONG",{});var Gc=o(oa);Vo=r(Gc,"Comparison"),Gc.forEach(a),Jo=r(Ls,": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),Be=l(Ls,"A",{href:!0,rel:!0});var Rc=o(Be);zo=r(Rc,"evaluate-comparison"),Rc.forEach(a),Ko=r(Ls,"."),Ls.forEach(a),Qo=u(Kt),ce=l(Kt,"LI",{});var Fs=o(ce);na=l(Fs,"STRONG",{});var Yc=o(na);Xo=r(Yc,"Measurement"),Yc.forEach(a),Zo=r(Fs,": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),He=l(Fs,"A",{href:!0,rel:!0});var Vc=o(He);en=r(Vc,"evaluate-measurement"),Vc.forEach(a),tn=r(Fs,"."),Fs.forEach(a),Kt.forEach(a),Js=u(e),pe=l(e,"P",{});var lo=o(pe);an=r(lo,"Each of these evaluation modules live on Hugging Face Hub as a Space. They come with an interactive widget and a documentation card documenting its use and limitations. For example "),Le=l(lo,"A",{href:!0,rel:!0});var Jc=o(Le);sn=r(Jc,"accuracy"),Jc.forEach(a),ln=r(lo,":"),lo.forEach(a),zs=u(e),Fe=l(e,"DIV",{class:!0});var zc=o(Fe);At=l(zc,"IMG",{src:!0,width:!0}),zc.forEach(a),Ks=u(e),ue=l(e,"P",{});var oo=o(ue);on=r(oo,"Each metric, comparison, and measurement is a separate Python module, but for using any of them, there is a single entry point: "),Pt=l(oo,"A",{href:!0});var Kc=o(Pt);nn=r(Kc,"evaluate.load()"),Kc.forEach(a),rn=r(oo,"!"),oo.forEach(a),Qs=u(e),J=l(e,"H2",{class:!0});var no=o(J);he=l(no,"A",{id:!0,class:!0,href:!0});var Qc=o(he);ra=l(Qc,"SPAN",{});var Xc=o(ra);m(Ue.$$.fragment,Xc),Xc.forEach(a),Qc.forEach(a),cn=u(no),ia=l(no,"SPAN",{});var Zc=o(ia);pn=r(Zc,"Load"),Zc.forEach(a),no.forEach(a),Xs=u(e),de=l(e,"P",{});var ro=o(de);un=r(ro,"Any metric, comparison, or measurement is loaded with the "),ca=l(ro,"CODE",{});var ep=o(ca);hn=r(ep,"evaluate.load"),ep.forEach(a),dn=r(ro," function:"),ro.forEach(a),Zs=u(e),m(We.$$.fragment,e),el=u(e),Dt=l(e,"P",{});var tp=o(Dt);mn=r(tp,"If you want to make sure you are loading the right type of evaluation (especially if there are name clashes) you can explicitely pass the type:"),tp.forEach(a),tl=u(e),m(Ge.$$.fragment,e),al=u(e),z=l(e,"H3",{class:!0});var io=o(z);me=l(io,"A",{id:!0,class:!0,href:!0});var ap=o(me);pa=l(ap,"SPAN",{});var sp=o(pa);m(Re.$$.fragment,sp),sp.forEach(a),ap.forEach(a),fn=u(io),ua=l(io,"SPAN",{});var lp=o(ua);vn=r(lp,"Community modules"),lp.forEach(a),io.forEach(a),sl=u(e),Ct=l(e,"P",{});var op=o(Ct);yn=r(op,"Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by specifying the repository ID of the metric implementation:"),op.forEach(a),ll=u(e),m(Ye.$$.fragment,e),ol=u(e),fe=l(e,"P",{});var co=o(fe);_n=r(co,"See the "),Ot=l(co,"A",{href:!0});var np=o(Ot);gn=r(np,"Creating and Sharing Guide"),np.forEach(a),bn=r(co," for information about uploading custom metrics."),co.forEach(a),nl=u(e),K=l(e,"H3",{class:!0});var po=o(K);ve=l(po,"A",{id:!0,class:!0,href:!0});var rp=o(ve);ha=l(rp,"SPAN",{});var ip=o(ha);m(Ve.$$.fragment,ip),ip.forEach(a),rp.forEach(a),wn=u(po),da=l(po,"SPAN",{});var cp=o(da);En=r(cp,"List available modules"),cp.forEach(a),po.forEach(a),rl=u(e),ye=l(e,"P",{});var uo=o(ye);$n=r(uo,"With "),St=l(uo,"A",{href:!0});var pp=o(St);jn=r(pp,"list_evaluation_modules()"),pp.forEach(a),kn=r(uo," you can check what modules are available on the hub. You can also filter for a specific modules and skip community metrics if you want. You can also see additional information such as likes:"),uo.forEach(a),il=u(e),m(Je.$$.fragment,e),cl=u(e),Q=l(e,"H2",{class:!0});var ho=o(Q);_e=l(ho,"A",{id:!0,class:!0,href:!0});var up=o(_e);ma=l(up,"SPAN",{});var hp=o(ma);m(ze.$$.fragment,hp),hp.forEach(a),up.forEach(a),xn=u(ho),fa=l(ho,"SPAN",{});var dp=o(fa);qn=r(dp,"Module attributes"),dp.forEach(a),ho.forEach(a),pl=u(e),ge=l(e,"P",{});var mo=o(ge);Tn=r(mo,"All evalution modules come with a range of useful attributes that help to use a module stored in a "),It=l(mo,"A",{href:!0});var mp=o(It);An=r(mp,"EvaluationModuleInfo"),mp.forEach(a),Pn=r(mo," object."),mo.forEach(a),ul=u(e),be=l(e,"TABLE",{});var fo=o(be);va=l(fo,"THEAD",{});var fp=o(va);Ke=l(fp,"TR",{});var vo=o(Ke);ya=l(vo,"TH",{});var vp=o(ya);Dn=r(vp,"Attribute"),vp.forEach(a),Cn=u(vo),_a=l(vo,"TH",{});var yp=o(_a);On=r(yp,"Description"),yp.forEach(a),vo.forEach(a),fp.forEach(a),Sn=u(fo),g=l(fo,"TBODY",{});var j=o(g);Qe=l(j,"TR",{});var yo=o(Qe);ga=l(yo,"TD",{});var _p=o(ga);ba=l(_p,"CODE",{});var gp=o(ba);In=r(gp,"description"),gp.forEach(a),_p.forEach(a),Nn=u(yo),wa=l(yo,"TD",{});var bp=o(wa);Mn=r(bp,"A short description of the evaluation module."),bp.forEach(a),yo.forEach(a),Bn=u(j),Xe=l(j,"TR",{});var _o=o(Xe);Ea=l(_o,"TD",{});var wp=o(Ea);$a=l(wp,"CODE",{});var Ep=o($a);Hn=r(Ep,"citation"),Ep.forEach(a),wp.forEach(a),Ln=u(_o),ja=l(_o,"TD",{});var $p=o(ja);Fn=r($p,"A BibTex string for citation when available."),$p.forEach(a),_o.forEach(a),Un=u(j),Ze=l(j,"TR",{});var go=o(Ze);ka=l(go,"TD",{});var jp=o(ka);xa=l(jp,"CODE",{});var kp=o(xa);Wn=r(kp,"features"),kp.forEach(a),jp.forEach(a),Gn=u(go),et=l(go,"TD",{});var bo=o(et);Rn=r(bo,"A "),qa=l(bo,"CODE",{});var xp=o(qa);Yn=r(xp,"Features"),xp.forEach(a),Vn=r(bo," object defining the input format."),bo.forEach(a),go.forEach(a),Jn=u(j),tt=l(j,"TR",{});var wo=o(tt);Ta=l(wo,"TD",{});var qp=o(Ta);Aa=l(qp,"CODE",{});var Tp=o(Aa);zn=r(Tp,"inputs_description"),Tp.forEach(a),qp.forEach(a),Kn=u(wo),Pa=l(wo,"TD",{});var Ap=o(Pa);Qn=r(Ap,"This is equivalent to the modules docstring."),Ap.forEach(a),wo.forEach(a),Xn=u(j),at=l(j,"TR",{});var Eo=o(at);Da=l(Eo,"TD",{});var Pp=o(Da);Ca=l(Pp,"CODE",{});var Dp=o(Ca);Zn=r(Dp,"homepage"),Dp.forEach(a),Pp.forEach(a),er=u(Eo),Oa=l(Eo,"TD",{});var Cp=o(Oa);tr=r(Cp,"The homepage of the module."),Cp.forEach(a),Eo.forEach(a),ar=u(j),st=l(j,"TR",{});var $o=o(st);Sa=l($o,"TD",{});var Op=o(Sa);Ia=l(Op,"CODE",{});var Sp=o(Ia);sr=r(Sp,"license"),Sp.forEach(a),Op.forEach(a),lr=u($o),Na=l($o,"TD",{});var Ip=o(Na);or=r(Ip,"The license of the module."),Ip.forEach(a),$o.forEach(a),nr=u(j),lt=l(j,"TR",{});var jo=o(lt);Ma=l(jo,"TD",{});var Np=o(Ma);Ba=l(Np,"CODE",{});var Mp=o(Ba);rr=r(Mp,"codebase_urls"),Mp.forEach(a),Np.forEach(a),ir=u(jo),Ha=l(jo,"TD",{});var Bp=o(Ha);cr=r(Bp,"Link to the code behind the module."),Bp.forEach(a),jo.forEach(a),pr=u(j),ot=l(j,"TR",{});var ko=o(ot);La=l(ko,"TD",{});var Hp=o(La);Fa=l(Hp,"CODE",{});var Lp=o(Fa);ur=r(Lp,"reference_urls"),Lp.forEach(a),Hp.forEach(a),hr=u(ko),Ua=l(ko,"TD",{});var Fp=o(Ua);dr=r(Fp,"Additional reference URLs."),Fp.forEach(a),ko.forEach(a),j.forEach(a),fo.forEach(a),hl=u(e),we=l(e,"P",{});var xo=o(we);mr=r(xo,"Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Wa=l(xo,"CODE",{});var Up=o(Wa);fr=r(Up,"description"),Up.forEach(a),vr=r(xo," attribute of the accuracy metric:"),xo.forEach(a),dl=u(e),m(nt.$$.fragment,e),ml=u(e),Ee=l(e,"P",{});var qo=o(Ee);yr=r(qo,"You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Ga=l(qo,"CODE",{});var Wp=o(Ga);_r=r(Wp,"citation"),Wp.forEach(a),gr=r(qo," attribute:"),qo.forEach(a),fl=u(e),m(rt.$$.fragment,e),vl=u(e),Nt=l(e,"P",{});var Gp=o(Nt);br=r(Gp,"Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),Gp.forEach(a),yl=u(e),m(it.$$.fragment,e),_l=u(e),m($e.$$.fragment,e),gl=u(e),X=l(e,"H2",{class:!0});var To=o(X);je=l(To,"A",{id:!0,class:!0,href:!0});var Rp=o(je);Ra=l(Rp,"SPAN",{});var Yp=o(Ra);m(ct.$$.fragment,Yp),Yp.forEach(a),Rp.forEach(a),wr=u(To),Ya=l(To,"SPAN",{});var Vp=o(Ya);Er=r(Vp,"Compute"),Vp.forEach(a),To.forEach(a),bl=u(e),Mt=l(e,"P",{});var Jp=o(Mt);$r=r(Jp,"Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),Jp.forEach(a),wl=u(e),ke=l(e,"OL",{});var Ao=o(ke);Va=l(Ao,"LI",{});var zp=o(Va);jr=r(zp,"All-in-one"),zp.forEach(a),kr=u(Ao),Ja=l(Ao,"LI",{});var Kp=o(Ja);xr=r(Kp,"Incremental"),Kp.forEach(a),Ao.forEach(a),El=u(e),x=l(e,"P",{});var W=o(x);qr=r(W,"In the incremental approach the necessary inputs are added to the module with "),Bt=l(W,"A",{href:!0});var Qp=o(Bt);Tr=r(Qp,"EvaluationModule.add()"),Qp.forEach(a),Ar=r(W," or "),Ht=l(W,"A",{href:!0});var Xp=o(Ht);Pr=r(Xp,"EvaluationModule.add_batch()"),Xp.forEach(a),Dr=r(W," and the score is calculated at the end with "),Lt=l(W,"A",{href:!0});var Zp=o(Lt);Cr=r(Zp,"EvaluationModule.compute()"),Zp.forEach(a),Or=r(W,". Alternatively, one can pass all the inputs at once to "),za=l(W,"CODE",{});var eu=o(za);Sr=r(eu,"compute()"),eu.forEach(a),Ir=r(W,". Let\u2019s have a look at the two approaches."),W.forEach(a),$l=u(e),Z=l(e,"H3",{class:!0});var Po=o(Z);xe=l(Po,"A",{id:!0,class:!0,href:!0});var tu=o(xe);Ka=l(tu,"SPAN",{});var au=o(Ka);m(pt.$$.fragment,au),au.forEach(a),tu.forEach(a),Nr=u(Po),Ft=l(Po,"SPAN",{});var Cc=o(Ft);Mr=r(Cc,"Using "),Qa=l(Cc,"CODE",{});var su=o(Qa);Br=r(su,"compute()"),su.forEach(a),Cc.forEach(a),Po.forEach(a),jl=u(e),D=l(e,"P",{});var Se=o(D);Hr=r(Se,"The simplest way to calculate the score of an evaluation module is by calling "),Xa=l(Se,"CODE",{});var lu=o(Xa);Lr=r(lu,"compute()"),lu.forEach(a),Fr=r(Se," directly with the necessary inputs. Simply pass the inputs as seen in "),Za=l(Se,"CODE",{});var ou=o(Za);Ur=r(ou,"features"),ou.forEach(a),Wr=r(Se," to the "),es=l(Se,"CODE",{});var nu=o(es);Gr=r(nu,"compute()"),nu.forEach(a),Rr=r(Se," method."),Se.forEach(a),kl=u(e),m(ut.$$.fragment,e),xl=u(e),B=l(e,"P",{});var Qt=o(B);Yr=r(Qt,"Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),ts=l(Qt,"CODE",{});var ru=o(ts);Vr=r(ru,"add()"),ru.forEach(a),Jr=r(Qt," or "),as=l(Qt,"CODE",{});var iu=o(as);zr=r(iu,"add_batch()"),iu.forEach(a),Kr=r(Qt," are useful."),Qt.forEach(a),ql=u(e),ee=l(e,"H3",{class:!0});var Do=o(ee);qe=l(Do,"A",{id:!0,class:!0,href:!0});var cu=o(qe);ss=l(cu,"SPAN",{});var pu=o(ss);m(ht.$$.fragment,pu),pu.forEach(a),cu.forEach(a),Qr=u(Do),Te=l(Do,"SPAN",{});var Us=o(Te);Xr=r(Us,"Using "),ls=l(Us,"CODE",{});var uu=o(ls);Zr=r(uu,"add()"),uu.forEach(a),ei=r(Us," and "),os=l(Us,"CODE",{});var hu=o(os);ti=r(hu,"add_batch()"),hu.forEach(a),Us.forEach(a),Do.forEach(a),Tl=u(e),q=l(e,"P",{});var G=o(q);ai=r(G,"In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),ns=l(G,"CODE",{});var du=o(ns);si=r(du,"compute()"),du.forEach(a),li=r(G,". With "),rs=l(G,"CODE",{});var mu=o(rs);oi=r(mu,"add()"),mu.forEach(a),ni=r(G," and "),is=l(G,"CODE",{});var fu=o(is);ri=r(fu,"add_batch()"),fu.forEach(a),ii=r(G," you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),cs=l(G,"CODE",{});var vu=o(cs);ci=r(vu,"add()"),vu.forEach(a),pi=r(G,":"),G.forEach(a),Al=u(e),m(dt.$$.fragment,e),Pl=u(e),C=l(e,"P",{});var Ie=o(C);ui=r(Ie,"Once you have gathered all predictions you can call "),ps=l(Ie,"CODE",{});var yu=o(ps);hi=r(yu,"compute()"),yu.forEach(a),di=r(Ie," to compute the score based on all stored values. When getting predictions and references in batches you can use "),us=l(Ie,"CODE",{});var _u=o(us);mi=r(_u,"add_batch()"),_u.forEach(a),fi=r(Ie," which adds a list elements for later processing. The rest works as with "),hs=l(Ie,"CODE",{});var gu=o(hs);vi=r(gu,"add()"),gu.forEach(a),yi=r(Ie,":"),Ie.forEach(a),Dl=u(e),m(mt.$$.fragment,e),Cl=u(e),Ut=l(e,"P",{});var bu=o(Ut);_i=r(bu,"This is especially useful when you need to get the predictions from your model in batches:"),bu.forEach(a),Ol=u(e),m(ft.$$.fragment,e),Sl=u(e),te=l(e,"H3",{class:!0});var Co=o(te);Ae=l(Co,"A",{id:!0,class:!0,href:!0});var wu=o(Ae);ds=l(wu,"SPAN",{});var Eu=o(ds);m(vt.$$.fragment,Eu),Eu.forEach(a),wu.forEach(a),gi=u(Co),ms=l(Co,"SPAN",{});var $u=o(ms);bi=r($u,"Distributed evaluation"),$u.forEach(a),Co.forEach(a),Il=u(e),T=l(e,"P",{});var R=o(T);wi=r(R,"Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),fs=l(R,"CODE",{});var ju=o(fs);Ei=r(ju,"f(AuB) = f(A) + f(B)"),ju.forEach(a),$i=r(R,"), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),vs=l(R,"CODE",{});var ku=o(vs);ji=r(ku,"f(AuB) \u2260 f(A) + f(B)"),ku.forEach(a),ki=r(R,"), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),yt=l(R,"A",{href:!0,rel:!0});var xu=o(yt);xi=r(xu,"F1"),xu.forEach(a),qi=r(R," scores of each data subset as your "),ys=l(R,"STRONG",{});var qu=o(ys);Ti=r(qu,"final metric"),qu.forEach(a),Ai=r(R,"."),R.forEach(a),Nl=u(e),Wt=l(e,"P",{});var Tu=o(Wt);Pi=r(Tu,"A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),Tu.forEach(a),Ml=u(e),H=l(e,"P",{});var Xt=o(H);Di=r(Xt,"\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),_s=l(Xt,"CODE",{});var Au=o(_s);Ci=r(Au,"compute()"),Au.forEach(a),Oi=r(Xt," the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),gs=l(Xt,"CODE",{});var Pu=o(gs);Si=r(Pu,"compute()"),Pu.forEach(a),Ii=r(Xt," will perform the final metric evaluation."),Xt.forEach(a),Bl=u(e),Gt=l(e,"P",{});var Du=o(Gt);Ni=r(Du,"This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),Du.forEach(a),Hl=u(e),ae=l(e,"H2",{class:!0});var Oo=o(ae);Pe=l(Oo,"A",{id:!0,class:!0,href:!0});var Cu=o(Pe);bs=l(Cu,"SPAN",{});var Ou=o(bs);m(_t.$$.fragment,Ou),Ou.forEach(a),Cu.forEach(a),Mi=u(Oo),ws=l(Oo,"SPAN",{});var Su=o(ws);Bi=r(Su,"Save and push to the Hub"),Su.forEach(a),Oo.forEach(a),Ll=u(e),De=l(e,"P",{});var So=o(De);Hi=r(So,"Saving and sharing evaluation results is an important step. We provide the "),Rt=l(So,"A",{href:!0});var Iu=o(Rt);Li=r(Iu,"evaluate.save()"),Iu.forEach(a),Fi=r(So," function to easily save metrics results. You can either pass a specific filename or a directory. In the latter case, the results are saved in a file with an automatically created file name. Besides the directory or file name, the function takes any key-value pairs as inputs and stores them in a JSON file."),So.forEach(a),Fl=u(e),m(gt.$$.fragment,e),Ul=u(e),Yt=l(e,"P",{});var Nu=o(Yt);Ui=r(Nu,"The content of the JSON file look like the following:"),Nu.forEach(a),Wl=u(e),m(bt.$$.fragment,e),Gl=u(e),Vt=l(e,"P",{});var Mu=o(Vt);Wi=r(Mu,"In addition to the specified fields, it also contains useful system information for reproducing the results."),Mu.forEach(a),Rl=u(e),Ce=l(e,"P",{});var Io=o(Ce);Gi=r(Io,"Besides storing the results locally, you should report them on the model\u2019s repository on the Hub. With the "),Jt=l(Io,"A",{href:!0});var Bu=o(Jt);Ri=r(Bu,"evaluate.push_to_hub()"),Bu.forEach(a),Yi=r(Io," function, you can easily report evaluation results to the model\u2019s repository:"),Io.forEach(a),Yl=u(e),m(wt.$$.fragment,e),Vl=u(e),se=l(e,"H2",{class:!0});var No=o(se);Oe=l(No,"A",{id:!0,class:!0,href:!0});var Hu=o(Oe);Es=l(Hu,"SPAN",{});var Lu=o(Es);m(Et.$$.fragment,Lu),Lu.forEach(a),Hu.forEach(a),Vi=u(No),$s=l(No,"SPAN",{});var Fu=o($s);Ji=r(Fu,"Evaluator"),Fu.forEach(a),No.forEach(a),Jl=u(e),E=l(e,"P",{});var O=o(E);zi=r(O,"The "),zt=l(O,"A",{href:!0});var Uu=o(zt);Ki=r(Uu,"evaluate.evaluator()"),Uu.forEach(a),Qi=r(O," provides automated evaluation and only requires a model, dataset, metric in contrast to the metrics in "),js=l(O,"CODE",{});var Wu=o(js);Xi=r(Wu,"EvaluationModule"),Wu.forEach(a),Zi=r(O,"s that require the model\u2019s predictions. As such it is easier to evaluate a model on a dataset with a given metric as the inference is handled internally. To make that possible it uses the "),ks=l(O,"CODE",{});var Gu=o(ks);ec=r(Gu,"Pipeline"),Gu.forEach(a),tc=r(O," abstraction from "),xs=l(O,"CODE",{});var Ru=o(xs);ac=r(Ru,"transformers"),Ru.forEach(a),sc=r(O,". However, you can use your own framework as long as it follows the "),qs=l(O,"CODE",{});var Yu=o(qs);lc=r(Yu,"Pipeline"),Yu.forEach(a),oc=r(O," interface."),O.forEach(a),zl=u(e),L=l(e,"P",{});var Zt=o(L);nc=r(Zt,"To make an evaluation with the "),Ts=l(Zt,"CODE",{});var Vu=o(Ts);rc=r(Vu,"evaluator"),Vu.forEach(a),ic=r(Zt," let\u2019s load a "),As=l(Zt,"CODE",{});var Ju=o(As);cc=r(Ju,"transformers"),Ju.forEach(a),pc=r(Zt," pipeline (but you can pass your own custom inference class for any framework as long as it follows the pipeline call API) with an model trained on IMDb, the IMDb test split and the accuracy metric."),Zt.forEach(a),Kl=u(e),m($t.$$.fragment,e),Ql=u(e),F=l(e,"P",{});var ea=o(F);uc=r(ea,"Then you can create an evaluator for text classification and pass the three objects to the "),Ps=l(ea,"CODE",{});var zu=o(Ps);hc=r(zu,"compute()"),zu.forEach(a),dc=r(ea," method. With the label mapping "),Ds=l(ea,"CODE",{});var Ku=o(Ds);mc=r(Ku,"evaluate"),Ku.forEach(a),fc=r(ea," provides a method to align the pipeline outputs with the label column in the dataset:"),ea.forEach(a),Xl=u(e),m(jt.$$.fragment,e),Zl=u(e),U=l(e,"P",{});var ta=o(U);vc=r(ta,"Calculating the value of the metric alone is often not enough to know if a model performs significantly better than another one. With "),Cs=l(ta,"EM",{});var Qu=o(Cs);yc=r(Qu,"bootstrapping"),Qu.forEach(a),_c=u(ta),Os=l(ta,"CODE",{});var Xu=o(Os);gc=r(Xu,"evaluate"),Xu.forEach(a),bc=r(ta," computes confidence intervals and the standard error which helps estimate how stable a score is:"),ta.forEach(a),eo=u(e),m(kt.$$.fragment,e),to=u(e),$=l(e,"P",{});var S=o($);wc=r(S,"The evaluator expects a "),Ss=l(S,"CODE",{});var Zu=o(Ss);Ec=r(Zu,'"text"'),Zu.forEach(a),$c=r(S," and "),Is=l(S,"CODE",{});var eh=o(Is);jc=r(eh,'"label"'),eh.forEach(a),kc=r(S," column for the data input. If your dataset differs you can provide the columns with the keywords "),Ns=l(S,"CODE",{});var th=o(Ns);xc=r(th,'input_column="text"'),th.forEach(a),qc=r(S," and "),Ms=l(S,"CODE",{});var ah=o(Ms);Tc=r(ah,'label_column="label"'),ah.forEach(a),Ac=r(S,". Currently only "),Bs=l(S,"CODE",{});var sh=o(Bs);Pc=r(sh,'"text-classification"'),sh.forEach(a),Dc=r(S," is supported with more tasks being added in the future."),S.forEach(a),this.h()},h(){h(b,"name","hf:doc:metadata"),h(b,"content",JSON.stringify(dh)),h(P,"id","a-quick-tour"),h(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(P,"href","#a-quick-tour"),h(k,"class","relative group"),h(ne,"id","types-of-evaluations"),h(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ne,"href","#types-of-evaluations"),h(V,"class","relative group"),h(Me,"href","https://huggingface.co/evaluate-metric"),h(Me,"rel","nofollow"),h(Be,"href","https://huggingface.co/evaluate-comparison"),h(Be,"rel","nofollow"),h(He,"href","https://huggingface.co/evaluate-measurement"),h(He,"rel","nofollow"),h(Le,"href","https://huggingface.co/spaces/evaluate-metric/accuracy"),h(Le,"rel","nofollow"),ih(At.src,Oc="https://huggingface.co/datasets/evaluate/media/resolve/main/metric-widget.png")||h(At,"src",Oc),h(At,"width","400"),h(Fe,"class","flex justify-center"),h(Pt,"href","/docs/evaluate/pr_19/en/package_reference/loading_methods#evaluate.load"),h(he,"id","load"),h(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(he,"href","#load"),h(J,"class","relative group"),h(me,"id","community-modules"),h(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(me,"href","#community-modules"),h(z,"class","relative group"),h(Ot,"href","/docs/evaluate/main/en/creating_and_sharing"),h(ve,"id","list-available-modules"),h(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ve,"href","#list-available-modules"),h(K,"class","relative group"),h(St,"href","/docs/evaluate/pr_19/en/package_reference/loading_methods#evaluate.list_evaluation_modules"),h(_e,"id","module-attributes"),h(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(_e,"href","#module-attributes"),h(Q,"class","relative group"),h(It,"href","/docs/evaluate/pr_19/en/package_reference/main_classes#evaluate.EvaluationModuleInfo"),h(je,"id","compute"),h(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(je,"href","#compute"),h(X,"class","relative group"),h(Bt,"href","/docs/evaluate/pr_19/en/package_reference/main_classes#evaluate.EvaluationModule.add"),h(Ht,"href","/docs/evaluate/pr_19/en/package_reference/main_classes#evaluate.EvaluationModule.add_batch"),h(Lt,"href","/docs/evaluate/pr_19/en/package_reference/main_classes#evaluate.EvaluationModule.compute"),h(xe,"id","using-compute"),h(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(xe,"href","#using-compute"),h(Z,"class","relative group"),h(qe,"id","using-add-and-addbatch"),h(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(qe,"href","#using-add-and-addbatch"),h(ee,"class","relative group"),h(Ae,"id","distributed-evaluation"),h(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ae,"href","#distributed-evaluation"),h(te,"class","relative group"),h(yt,"href","https://huggingface.co/spaces/evaluate-metric/f1"),h(yt,"rel","nofollow"),h(Pe,"id","save-and-push-to-the-hub"),h(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Pe,"href","#save-and-push-to-the-hub"),h(ae,"class","relative group"),h(Rt,"href","/docs/evaluate/pr_19/en/package_reference/saving_methods#evaluate.save"),h(Jt,"href","/docs/evaluate/pr_19/en/package_reference/hub_methods#evaluate.push_to_hub"),h(Oe,"id","evaluator"),h(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Oe,"href","#evaluator"),h(se,"class","relative group"),h(zt,"href","/docs/evaluate/pr_19/en/package_reference/evaluator_classes#evaluate.evaluator")},m(e,i){t(document.head,b),c(e,le,i),c(e,k,i),t(k,P),t(P,Y),f(A,Y,null),t(k,N),t(k,oe),t(oe,Mo),c(e,Gs,i),c(e,qt,i),t(qt,Bo),c(e,Rs,i),c(e,V,i),t(V,ne),t(ne,aa),f(Ne,aa,null),t(V,Ho),t(V,sa),t(sa,Lo),c(e,Ys,i),c(e,Tt,i),t(Tt,Fo),c(e,Vs,i),c(e,M,i),t(M,re),t(re,la),t(la,Uo),t(re,Wo),t(re,Me),t(Me,Go),t(re,Ro),t(M,Yo),t(M,ie),t(ie,oa),t(oa,Vo),t(ie,Jo),t(ie,Be),t(Be,zo),t(ie,Ko),t(M,Qo),t(M,ce),t(ce,na),t(na,Xo),t(ce,Zo),t(ce,He),t(He,en),t(ce,tn),c(e,Js,i),c(e,pe,i),t(pe,an),t(pe,Le),t(Le,sn),t(pe,ln),c(e,zs,i),c(e,Fe,i),t(Fe,At),c(e,Ks,i),c(e,ue,i),t(ue,on),t(ue,Pt),t(Pt,nn),t(ue,rn),c(e,Qs,i),c(e,J,i),t(J,he),t(he,ra),f(Ue,ra,null),t(J,cn),t(J,ia),t(ia,pn),c(e,Xs,i),c(e,de,i),t(de,un),t(de,ca),t(ca,hn),t(de,dn),c(e,Zs,i),f(We,e,i),c(e,el,i),c(e,Dt,i),t(Dt,mn),c(e,tl,i),f(Ge,e,i),c(e,al,i),c(e,z,i),t(z,me),t(me,pa),f(Re,pa,null),t(z,fn),t(z,ua),t(ua,vn),c(e,sl,i),c(e,Ct,i),t(Ct,yn),c(e,ll,i),f(Ye,e,i),c(e,ol,i),c(e,fe,i),t(fe,_n),t(fe,Ot),t(Ot,gn),t(fe,bn),c(e,nl,i),c(e,K,i),t(K,ve),t(ve,ha),f(Ve,ha,null),t(K,wn),t(K,da),t(da,En),c(e,rl,i),c(e,ye,i),t(ye,$n),t(ye,St),t(St,jn),t(ye,kn),c(e,il,i),f(Je,e,i),c(e,cl,i),c(e,Q,i),t(Q,_e),t(_e,ma),f(ze,ma,null),t(Q,xn),t(Q,fa),t(fa,qn),c(e,pl,i),c(e,ge,i),t(ge,Tn),t(ge,It),t(It,An),t(ge,Pn),c(e,ul,i),c(e,be,i),t(be,va),t(va,Ke),t(Ke,ya),t(ya,Dn),t(Ke,Cn),t(Ke,_a),t(_a,On),t(be,Sn),t(be,g),t(g,Qe),t(Qe,ga),t(ga,ba),t(ba,In),t(Qe,Nn),t(Qe,wa),t(wa,Mn),t(g,Bn),t(g,Xe),t(Xe,Ea),t(Ea,$a),t($a,Hn),t(Xe,Ln),t(Xe,ja),t(ja,Fn),t(g,Un),t(g,Ze),t(Ze,ka),t(ka,xa),t(xa,Wn),t(Ze,Gn),t(Ze,et),t(et,Rn),t(et,qa),t(qa,Yn),t(et,Vn),t(g,Jn),t(g,tt),t(tt,Ta),t(Ta,Aa),t(Aa,zn),t(tt,Kn),t(tt,Pa),t(Pa,Qn),t(g,Xn),t(g,at),t(at,Da),t(Da,Ca),t(Ca,Zn),t(at,er),t(at,Oa),t(Oa,tr),t(g,ar),t(g,st),t(st,Sa),t(Sa,Ia),t(Ia,sr),t(st,lr),t(st,Na),t(Na,or),t(g,nr),t(g,lt),t(lt,Ma),t(Ma,Ba),t(Ba,rr),t(lt,ir),t(lt,Ha),t(Ha,cr),t(g,pr),t(g,ot),t(ot,La),t(La,Fa),t(Fa,ur),t(ot,hr),t(ot,Ua),t(Ua,dr),c(e,hl,i),c(e,we,i),t(we,mr),t(we,Wa),t(Wa,fr),t(we,vr),c(e,dl,i),f(nt,e,i),c(e,ml,i),c(e,Ee,i),t(Ee,yr),t(Ee,Ga),t(Ga,_r),t(Ee,gr),c(e,fl,i),f(rt,e,i),c(e,vl,i),c(e,Nt,i),t(Nt,br),c(e,yl,i),f(it,e,i),c(e,_l,i),f($e,e,i),c(e,gl,i),c(e,X,i),t(X,je),t(je,Ra),f(ct,Ra,null),t(X,wr),t(X,Ya),t(Ya,Er),c(e,bl,i),c(e,Mt,i),t(Mt,$r),c(e,wl,i),c(e,ke,i),t(ke,Va),t(Va,jr),t(ke,kr),t(ke,Ja),t(Ja,xr),c(e,El,i),c(e,x,i),t(x,qr),t(x,Bt),t(Bt,Tr),t(x,Ar),t(x,Ht),t(Ht,Pr),t(x,Dr),t(x,Lt),t(Lt,Cr),t(x,Or),t(x,za),t(za,Sr),t(x,Ir),c(e,$l,i),c(e,Z,i),t(Z,xe),t(xe,Ka),f(pt,Ka,null),t(Z,Nr),t(Z,Ft),t(Ft,Mr),t(Ft,Qa),t(Qa,Br),c(e,jl,i),c(e,D,i),t(D,Hr),t(D,Xa),t(Xa,Lr),t(D,Fr),t(D,Za),t(Za,Ur),t(D,Wr),t(D,es),t(es,Gr),t(D,Rr),c(e,kl,i),f(ut,e,i),c(e,xl,i),c(e,B,i),t(B,Yr),t(B,ts),t(ts,Vr),t(B,Jr),t(B,as),t(as,zr),t(B,Kr),c(e,ql,i),c(e,ee,i),t(ee,qe),t(qe,ss),f(ht,ss,null),t(ee,Qr),t(ee,Te),t(Te,Xr),t(Te,ls),t(ls,Zr),t(Te,ei),t(Te,os),t(os,ti),c(e,Tl,i),c(e,q,i),t(q,ai),t(q,ns),t(ns,si),t(q,li),t(q,rs),t(rs,oi),t(q,ni),t(q,is),t(is,ri),t(q,ii),t(q,cs),t(cs,ci),t(q,pi),c(e,Al,i),f(dt,e,i),c(e,Pl,i),c(e,C,i),t(C,ui),t(C,ps),t(ps,hi),t(C,di),t(C,us),t(us,mi),t(C,fi),t(C,hs),t(hs,vi),t(C,yi),c(e,Dl,i),f(mt,e,i),c(e,Cl,i),c(e,Ut,i),t(Ut,_i),c(e,Ol,i),f(ft,e,i),c(e,Sl,i),c(e,te,i),t(te,Ae),t(Ae,ds),f(vt,ds,null),t(te,gi),t(te,ms),t(ms,bi),c(e,Il,i),c(e,T,i),t(T,wi),t(T,fs),t(fs,Ei),t(T,$i),t(T,vs),t(vs,ji),t(T,ki),t(T,yt),t(yt,xi),t(T,qi),t(T,ys),t(ys,Ti),t(T,Ai),c(e,Nl,i),c(e,Wt,i),t(Wt,Pi),c(e,Ml,i),c(e,H,i),t(H,Di),t(H,_s),t(_s,Ci),t(H,Oi),t(H,gs),t(gs,Si),t(H,Ii),c(e,Bl,i),c(e,Gt,i),t(Gt,Ni),c(e,Hl,i),c(e,ae,i),t(ae,Pe),t(Pe,bs),f(_t,bs,null),t(ae,Mi),t(ae,ws),t(ws,Bi),c(e,Ll,i),c(e,De,i),t(De,Hi),t(De,Rt),t(Rt,Li),t(De,Fi),c(e,Fl,i),f(gt,e,i),c(e,Ul,i),c(e,Yt,i),t(Yt,Ui),c(e,Wl,i),f(bt,e,i),c(e,Gl,i),c(e,Vt,i),t(Vt,Wi),c(e,Rl,i),c(e,Ce,i),t(Ce,Gi),t(Ce,Jt),t(Jt,Ri),t(Ce,Yi),c(e,Yl,i),f(wt,e,i),c(e,Vl,i),c(e,se,i),t(se,Oe),t(Oe,Es),f(Et,Es,null),t(se,Vi),t(se,$s),t($s,Ji),c(e,Jl,i),c(e,E,i),t(E,zi),t(E,zt),t(zt,Ki),t(E,Qi),t(E,js),t(js,Xi),t(E,Zi),t(E,ks),t(ks,ec),t(E,tc),t(E,xs),t(xs,ac),t(E,sc),t(E,qs),t(qs,lc),t(E,oc),c(e,zl,i),c(e,L,i),t(L,nc),t(L,Ts),t(Ts,rc),t(L,ic),t(L,As),t(As,cc),t(L,pc),c(e,Kl,i),f($t,e,i),c(e,Ql,i),c(e,F,i),t(F,uc),t(F,Ps),t(Ps,hc),t(F,dc),t(F,Ds),t(Ds,mc),t(F,fc),c(e,Xl,i),f(jt,e,i),c(e,Zl,i),c(e,U,i),t(U,vc),t(U,Cs),t(Cs,yc),t(U,_c),t(U,Os),t(Os,gc),t(U,bc),c(e,eo,i),f(kt,e,i),c(e,to,i),c(e,$,i),t($,wc),t($,Ss),t(Ss,Ec),t($,$c),t($,Is),t(Is,jc),t($,kc),t($,Ns),t(Ns,xc),t($,qc),t($,Ms),t(Ms,Tc),t($,Ac),t($,Bs),t(Bs,Pc),t($,Dc),ao=!0},p(e,[i]){const xt={};i&2&&(xt.$$scope={dirty:i,ctx:e}),$e.$set(xt)},i(e){ao||(v(A.$$.fragment,e),v(Ne.$$.fragment,e),v(Ue.$$.fragment,e),v(We.$$.fragment,e),v(Ge.$$.fragment,e),v(Re.$$.fragment,e),v(Ye.$$.fragment,e),v(Ve.$$.fragment,e),v(Je.$$.fragment,e),v(ze.$$.fragment,e),v(nt.$$.fragment,e),v(rt.$$.fragment,e),v(it.$$.fragment,e),v($e.$$.fragment,e),v(ct.$$.fragment,e),v(pt.$$.fragment,e),v(ut.$$.fragment,e),v(ht.$$.fragment,e),v(dt.$$.fragment,e),v(mt.$$.fragment,e),v(ft.$$.fragment,e),v(vt.$$.fragment,e),v(_t.$$.fragment,e),v(gt.$$.fragment,e),v(bt.$$.fragment,e),v(wt.$$.fragment,e),v(Et.$$.fragment,e),v($t.$$.fragment,e),v(jt.$$.fragment,e),v(kt.$$.fragment,e),ao=!0)},o(e){y(A.$$.fragment,e),y(Ne.$$.fragment,e),y(Ue.$$.fragment,e),y(We.$$.fragment,e),y(Ge.$$.fragment,e),y(Re.$$.fragment,e),y(Ye.$$.fragment,e),y(Ve.$$.fragment,e),y(Je.$$.fragment,e),y(ze.$$.fragment,e),y(nt.$$.fragment,e),y(rt.$$.fragment,e),y(it.$$.fragment,e),y($e.$$.fragment,e),y(ct.$$.fragment,e),y(pt.$$.fragment,e),y(ut.$$.fragment,e),y(ht.$$.fragment,e),y(dt.$$.fragment,e),y(mt.$$.fragment,e),y(ft.$$.fragment,e),y(vt.$$.fragment,e),y(_t.$$.fragment,e),y(gt.$$.fragment,e),y(bt.$$.fragment,e),y(wt.$$.fragment,e),y(Et.$$.fragment,e),y($t.$$.fragment,e),y(jt.$$.fragment,e),y(kt.$$.fragment,e),ao=!1},d(e){a(b),e&&a(le),e&&a(k),_(A),e&&a(Gs),e&&a(qt),e&&a(Rs),e&&a(V),_(Ne),e&&a(Ys),e&&a(Tt),e&&a(Vs),e&&a(M),e&&a(Js),e&&a(pe),e&&a(zs),e&&a(Fe),e&&a(Ks),e&&a(ue),e&&a(Qs),e&&a(J),_(Ue),e&&a(Xs),e&&a(de),e&&a(Zs),_(We,e),e&&a(el),e&&a(Dt),e&&a(tl),_(Ge,e),e&&a(al),e&&a(z),_(Re),e&&a(sl),e&&a(Ct),e&&a(ll),_(Ye,e),e&&a(ol),e&&a(fe),e&&a(nl),e&&a(K),_(Ve),e&&a(rl),e&&a(ye),e&&a(il),_(Je,e),e&&a(cl),e&&a(Q),_(ze),e&&a(pl),e&&a(ge),e&&a(ul),e&&a(be),e&&a(hl),e&&a(we),e&&a(dl),_(nt,e),e&&a(ml),e&&a(Ee),e&&a(fl),_(rt,e),e&&a(vl),e&&a(Nt),e&&a(yl),_(it,e),e&&a(_l),_($e,e),e&&a(gl),e&&a(X),_(ct),e&&a(bl),e&&a(Mt),e&&a(wl),e&&a(ke),e&&a(El),e&&a(x),e&&a($l),e&&a(Z),_(pt),e&&a(jl),e&&a(D),e&&a(kl),_(ut,e),e&&a(xl),e&&a(B),e&&a(ql),e&&a(ee),_(ht),e&&a(Tl),e&&a(q),e&&a(Al),_(dt,e),e&&a(Pl),e&&a(C),e&&a(Dl),_(mt,e),e&&a(Cl),e&&a(Ut),e&&a(Ol),_(ft,e),e&&a(Sl),e&&a(te),_(vt),e&&a(Il),e&&a(T),e&&a(Nl),e&&a(Wt),e&&a(Ml),e&&a(H),e&&a(Bl),e&&a(Gt),e&&a(Hl),e&&a(ae),_(_t),e&&a(Ll),e&&a(De),e&&a(Fl),_(gt,e),e&&a(Ul),e&&a(Yt),e&&a(Wl),_(bt,e),e&&a(Gl),e&&a(Vt),e&&a(Rl),e&&a(Ce),e&&a(Yl),_(wt,e),e&&a(Vl),e&&a(se),_(Et),e&&a(Jl),e&&a(E),e&&a(zl),e&&a(L),e&&a(Kl),_($t,e),e&&a(Ql),e&&a(F),e&&a(Xl),_(jt,e),e&&a(Zl),e&&a(U),e&&a(eo),_(kt,e),e&&a(to),e&&a($)}}}const dh={local:"a-quick-tour",sections:[{local:"types-of-evaluations",title:"Types of evaluations"},{local:"load",sections:[{local:"community-modules",title:"Community modules"},{local:"list-available-modules",title:"List available modules"}],title:"Load"},{local:"module-attributes",title:"Module attributes"},{local:"compute",sections:[{local:"using-compute",title:"Using `compute()`"},{local:"using-add-and-addbatch",title:"Using `add()` and `add_batch()`"},{local:"distributed-evaluation",title:"Distributed evaluation"}],title:"Compute"},{local:"save-and-push-to-the-hub",title:"Save and push to the Hub"},{local:"evaluator",title:"Evaluator"}],title:"A quick tour"};function mh(Ws){return ch(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gh extends lh{constructor(b){super();oh(this,b,mh,hh,nh,{})}}export{gh as default,dh as metadata};
