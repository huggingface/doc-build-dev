import{S as Yr,i as Zr,s as es,e as o,k as l,w as p,t as s,M as ts,c as n,d as a,m as c,a as r,x as f,h as i,b as m,G as e,g as u,y as v,L as as,q as h,o as g,B as _,v as os}from"../../chunks/vendor-hf-doc-builder.js";import{D as b}from"../../chunks/Docstring-hf-doc-builder.js";import{I as wa}from"../../chunks/IconCopyLink-hf-doc-builder.js";function ns(zn){let U,Kt,V,Q,Be,de,Ma,Je,ka,zt,q,j,Ke,me,Ia,ze,Na,Ht,x,Ca,He,Oa,Da,Qe,Pa,Aa,je,Ta,La,We,Sa,Fa,Qt,y,ue,Ua,P,Va,Ge,qa,Ra,Xe,Ba,Ja,Ye,Ka,za,Ha,Le,Ze,Qa,ja,Wa,et,Ga,Xa,W,pe,Ya,fe,Za,tt,eo,to,ao,G,ve,oo,R,no,at,ro,so,ot,io,lo,jt,M,he,co,nt,mo,uo,Se,rt,po,fo,vo,st,ho,Wt,k,ge,go,it,_o,bo,Fe,lt,yo,Eo,$o,ct,xo,Gt,I,_e,wo,dt,Mo,ko,Ue,mt,Io,No,Co,ut,Oo,Xt,B,X,pt,be,Do,ft,Po,Yt,w,Ao,vt,To,Lo,ht,So,Fo,gt,Uo,Vo,_t,qo,Ro,Zt,E,ye,Bo,bt,Jo,Ko,Y,Ee,zo,yt,Ho,Qo,Z,$e,jo,Et,Wo,Go,A,xe,Xo,$t,Yo,Zo,xt,en,tn,ee,we,an,wt,on,ea,J,Me,nn,Mt,rn,ta,K,ke,sn,kt,ln,aa,z,Ie,cn,It,dn,oa,H,te,Nt,Ne,mn,Ct,un,na,C,pn,Ot,fn,vn,Dt,hn,gn,Pt,_n,bn,ra,$,Ce,yn,Oe,En,At,$n,xn,wn,Tt,Mn,kn,Lt,In,Nn,St,Ft,Ut,Vt,Cn,sa,N,De,On,ae,Pe,Dn,qt,Pn,An,oe,Ae,Tn,Rt,Ln,Sn,T,Te,Fn,Bt,Un,Vn,Jt,qn,ia;return de=new wa({}),me=new wa({}),ue=new b({props:{name:"class evaluate.EvaluationModuleInfo",anchor:"evaluate.EvaluationModuleInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": typing.Union[datasets.features.features.Features, typing.List[datasets.features.features.Features]]"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"module_type",val:": str = 'metric'"},{name:"module_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/info.py#L35"}}),pe=new b({props:{name:"from_directory",anchor:"evaluate.EvaluationModuleInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/info.py#L82"}}),ve=new b({props:{name:"write_to_directory",anchor:"evaluate.EvaluationModuleInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/info.py#L72"}}),he=new b({props:{name:"class evaluate.MetricInfo",anchor:"evaluate.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": typing.Union[datasets.features.features.Features, typing.List[datasets.features.features.Features]]"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"module_type",val:": str = 'metric'"},{name:"module_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/info.py#L105"}}),ge=new b({props:{name:"class evaluate.ComparisonInfo",anchor:"evaluate.ComparisonInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": typing.Union[datasets.features.features.Features, typing.List[datasets.features.features.Features]]"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"module_type",val:": str = 'comparison'"},{name:"module_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/info.py#L118"}}),_e=new b({props:{name:"class evaluate.MeasurementInfo",anchor:"evaluate.MeasurementInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": typing.Union[datasets.features.features.Features, typing.List[datasets.features.features.Features]]"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"module_type",val:": str = 'measurement'"},{name:"module_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/info.py#L131"}}),be=new wa({}),ye=new b({props:{name:"class evaluate.EvaluationModule",anchor:"evaluate.EvaluationModule",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.EvaluationModule.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a module computation script and prevents the module&#x2019;s data
to be overridden when the module loading script is modified.`,name:"config_name"},{anchor:"evaluate.EvaluationModule.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"evaluate.EvaluationModule.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"evaluate.EvaluationModule.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute module in distributed setups (in particular non-additive modules like F1).`,name:"num_process"},{anchor:"evaluate.EvaluationModule.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute module in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"evaluate.EvaluationModule.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/evaluate/pr_201/en/package_reference/main_classes#evaluate.EvaluationModule.compute">evaluate.EvaluationModule.compute()</a> is run.',name:"seed"},{anchor:"evaluate.EvaluationModule.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute module in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"evaluate.EvaluationModule.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent module cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"evaluate.EvaluationModule.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L145"}}),Ee=new b({props:{name:"add",anchor:"evaluate.EvaluationModule.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.EvaluationModule.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"evaluate.EvaluationModule.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L508"}}),$e=new b({props:{name:"add_batch",anchor:"evaluate.EvaluationModule.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.EvaluationModule.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"evaluate.EvaluationModule.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L460"}}),xe=new b({props:{name:"compute",anchor:"evaluate.EvaluationModule.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.EvaluationModule.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"evaluate.EvaluationModule.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"evaluate.EvaluationModule.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the evaluation module <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L396",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the results if this evaluation module is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the evaluation module is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),we=new b({props:{name:"download_and_prepare",anchor:"evaluate.EvaluationModule.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[evaluate.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"evaluate.EvaluationModule.download_and_prepare.download_config",description:"<strong>download_config</strong> (<code>DownloadConfig</code>, optional) &#x2014; Specific download configuration parameters.",name:"download_config"},{anchor:"evaluate.EvaluationModule.download_and_prepare.dl_manager",description:"<strong>dl_manager</strong> (<code>DownloadManager</code>, optional) &#x2014; Specific download manager to use.",name:"dl_manager"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L625"}}),Me=new b({props:{name:"class evaluate.Metric",anchor:"evaluate.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metric computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"evaluate.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"evaluate.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"evaluate.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"evaluate.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"evaluate.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/evaluate/pr_201/en/package_reference/main_classes#evaluate.EvaluationModule.compute">evaluate.Metric.compute()</a> is run.',name:"seed"},{anchor:"evaluate.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"evaluate.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metric cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"evaluate.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L722"}}),ke=new b({props:{name:"class evaluate.Comparison",anchor:"evaluate.Comparison",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.Comparison.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a comparison computation script and prevents the comparison&#x2019;s data
to be overridden when the  comparison loading script is modified.`,name:"config_name"},{anchor:"evaluate.Comparison.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"evaluate.Comparison.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"evaluate.Comparison.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute  comparisons in distributed setups (in particular non-additive comparisons).`,name:"num_process"},{anchor:"evaluate.Comparison.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute  comparisons in distributed setups (in particular non-additive comparisons).`,name:"process_id"},{anchor:"evaluate.Comparison.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/evaluate/pr_201/en/package_reference/main_classes#evaluate.EvaluationModule.compute">evaluate.Comparison.compute()</a> is run.',name:"seed"},{anchor:"evaluate.Comparison.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute  comparisons in distributed setups (in particular non-additive comparisons).`,name:"experiment_id"},{anchor:"evaluate.Comparison.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent comparison cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"evaluate.Comparison.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L743"}}),Ie=new b({props:{name:"class evaluate.Measurement",anchor:"evaluate.Measurement",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.Measurement.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a measurement computation script and prevents the measurement&#x2019;s data
to be overridden when the measurement loading script is modified.`,name:"config_name"},{anchor:"evaluate.Measurement.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"evaluate.Measurement.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"evaluate.Measurement.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute measurements in distributed setups (in particular non-additive measurements).`,name:"num_process"},{anchor:"evaluate.Measurement.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute measurements in distributed setups (in particular non-additive measurements).`,name:"process_id"},{anchor:"evaluate.Measurement.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/evaluate/pr_201/en/package_reference/main_classes#evaluate.EvaluationModule.compute">evaluate.Measurement.compute()</a> is run.',name:"seed"},{anchor:"evaluate.Measurement.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute measurements in distributed setups (in particular non-additive measurements).`,name:"experiment_id"},{anchor:"evaluate.Measurement.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent measurement cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"evaluate.Measurement.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L764"}}),Ne=new wa({}),Ce=new b({props:{name:"evaluate.combine",anchor:"evaluate.combine",parameters:[{name:"evaluations",val:""},{name:"force_prefix",val:" = False"}],parametersDescription:[{anchor:"evaluate.combine.evaluations",description:`<strong>evaluations</strong> (<code>Union[list, dict]</code>) &#x2014; A list or dictionary of evaluation modules. The modules can either be passed
as strings or loaded <em>EvaluationModule</em>s. If a dictionary is passed its keys are the names used and the values the modules.
The names are used as prefix in case there are name overlaps in the returned results of each module or if <em>force_prefix=True</em>.`,name:"evaluations"},{anchor:"evaluate.combine.force_prefix",description:`<strong>force_prefix</strong> (<code>bool</code>, optional, defaults to <em>False</em>) &#x2014; If <em>True</em> all scores from the modules are prefixed with their name. If
a dictionary is passed the keys are used as name otherwise the module&#x2019;s name.`,name:"force_prefix"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L883"}}),De=new b({props:{name:"class evaluate.CombinedEvaluations",anchor:"evaluate.CombinedEvaluations",parameters:[{name:"evaluation_modules",val:""},{name:"force_prefix",val:" = False"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L785"}}),Pe=new b({props:{name:"add",anchor:"evaluate.CombinedEvaluations.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.CombinedEvaluations.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"evaluate.CombinedEvaluations.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L808"}}),Ae=new b({props:{name:"add_batch",anchor:"evaluate.CombinedEvaluations.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.CombinedEvaluations.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"evaluate.CombinedEvaluations.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L820"}}),Te=new b({props:{name:"compute",anchor:"evaluate.CombinedEvaluations.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"evaluate.CombinedEvaluations.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"evaluate.CombinedEvaluations.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"evaluate.CombinedEvaluations.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the evaluation module <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/evaluate/blob/vr_201/src/evaluate/module.py#L832",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the results if this evaluation module is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the evaluation module is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),{c(){U=o("meta"),Kt=l(),V=o("h1"),Q=o("a"),Be=o("span"),p(de.$$.fragment),Ma=l(),Je=o("span"),ka=s("Main classes"),zt=l(),q=o("h2"),j=o("a"),Ke=o("span"),p(me.$$.fragment),Ia=l(),ze=o("span"),Na=s("EvaluationModuleInfo"),Ht=l(),x=o("p"),Ca=s("The base class "),He=o("code"),Oa=s("EvaluationModuleInfo"),Da=s(" implements a the logic for the subclasses "),Qe=o("code"),Pa=s("MetricInfo"),Aa=s(", "),je=o("code"),Ta=s("ComparisonInfo"),La=s(", and "),We=o("code"),Sa=s("MeasurementInfo"),Fa=s("."),Qt=l(),y=o("div"),p(ue.$$.fragment),Ua=l(),P=o("p"),Va=s("Base class to store fnformation about an evaluation used for "),Ge=o("code"),qa=s("MetricInfo"),Ra=s(", "),Xe=o("code"),Ba=s("ComparisonInfo"),Ja=s(`,
and `),Ye=o("code"),Ka=s("MeasurementInfo"),za=s("."),Ha=l(),Le=o("p"),Ze=o("code"),Qa=s("EvaluationModuleInfo"),ja=s(` documents an evaluation, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Wa=l(),et=o("p"),Ga=s("Note: Not all fields are known on construction and may be updated later."),Xa=l(),W=o("div"),p(pe.$$.fragment),Ya=l(),fe=o("p"),Za=s("Create EvaluationModuleInfo from the JSON file in "),tt=o("code"),eo=s("metric_info_dir"),to=s("."),ao=l(),G=o("div"),p(ve.$$.fragment),oo=l(),R=o("p"),no=s("Write "),at=o("code"),ro=s("EvaluationModuleInfo"),so=s(" as JSON to "),ot=o("code"),io=s("metric_info_dir"),lo=s(`.
Also save the license separately in LICENCE.`),jt=l(),M=o("div"),p(he.$$.fragment),co=l(),nt=o("p"),mo=s("Information about a metric."),uo=l(),Se=o("p"),rt=o("code"),po=s("EvaluationModuleInfo"),fo=s(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),vo=l(),st=o("p"),ho=s("Note: Not all fields are known on construction and may be updated later."),Wt=l(),k=o("div"),p(ge.$$.fragment),go=l(),it=o("p"),_o=s("Information about a comparison."),bo=l(),Fe=o("p"),lt=o("code"),yo=s("EvaluationModuleInfo"),Eo=s(` documents a comparison, including its name, version, and features.
See the constructor arguments and properties for a full list.`),$o=l(),ct=o("p"),xo=s("Note: Not all fields are known on construction and may be updated later."),Gt=l(),I=o("div"),p(_e.$$.fragment),wo=l(),dt=o("p"),Mo=s("Information about a measurement."),ko=l(),Ue=o("p"),mt=o("code"),Io=s("EvaluationModuleInfo"),No=s(` documents a measurement, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Co=l(),ut=o("p"),Oo=s("Note: Not all fields are known on construction and may be updated later."),Xt=l(),B=o("h2"),X=o("a"),pt=o("span"),p(be.$$.fragment),Do=l(),ft=o("span"),Po=s("EvaluationModule"),Yt=l(),w=o("p"),Ao=s("The base class "),vt=o("code"),To=s("EvaluationModule"),Lo=s(" implements a the logic for the subclasses "),ht=o("code"),So=s("Metric"),Fo=s(", "),gt=o("code"),Uo=s("Comparison"),Vo=s(", and "),_t=o("code"),qo=s("Measurement"),Ro=s("."),Zt=l(),E=o("div"),p(ye.$$.fragment),Bo=l(),bt=o("p"),Jo=s("A EvaluationModule is the base class and common API for metrics, comparisons, and measurements."),Ko=l(),Y=o("div"),p(Ee.$$.fragment),zo=l(),yt=o("p"),Ho=s("Add one prediction and reference for the evaluation module\u2019s stack."),Qo=l(),Z=o("div"),p($e.$$.fragment),jo=l(),Et=o("p"),Wo=s("Add a batch of predictions and references for the evaluation module\u2019s stack."),Go=l(),A=o("div"),p(xe.$$.fragment),Xo=l(),$t=o("p"),Yo=s("Compute the evaluation module."),Zo=l(),xt=o("p"),en=s("Usage of positional arguments is not allowed to prevent mistakes."),tn=l(),ee=o("div"),p(we.$$.fragment),an=l(),wt=o("p"),on=s("Downloads and prepares dataset for reading."),ea=l(),J=o("div"),p(Me.$$.fragment),nn=l(),Mt=o("p"),rn=s("A Metric is the base class and common API for all metrics."),ta=l(),K=o("div"),p(ke.$$.fragment),sn=l(),kt=o("p"),ln=s("A Comparison is the base class and common API for all comparisons."),aa=l(),z=o("div"),p(Ie.$$.fragment),cn=l(),It=o("p"),dn=s("A Measurement is the base class and common API for all measurements."),oa=l(),H=o("h2"),te=o("a"),Nt=o("span"),p(Ne.$$.fragment),mn=l(),Ct=o("span"),un=s("CombinedEvaluations"),na=l(),C=o("p"),pn=s("The "),Ot=o("code"),fn=s("combine"),vn=s(" function allows to combine multiple "),Dt=o("code"),hn=s("EvaluationModule"),gn=s("s into a single "),Pt=o("code"),_n=s("CombinedEvaluations"),bn=s("."),ra=l(),$=o("div"),p(Ce.$$.fragment),yn=l(),Oe=o("p"),En=s("Combines several metrics, comparisons, or measurements into a single "),At=o("em"),$n=s("CombinedEvaluations"),xn=s(` object that
can be used like a single evaluation module.`),wn=l(),Tt=o("p"),Mn=s(`If two scores have the same name, then they are prefixed with their module names.
And if two modules have the same name, please use a dictionary to give them different names, otherwise an integer id is appended to the prefix.`),kn=l(),Lt=o("p"),In=s("Examples:"),Nn=l(),St=o("blockquote"),Ft=o("blockquote"),Ut=o("blockquote"),Vt=o("p"),Cn=s(`clf_metrics = combine([\u201Caccuracy\u201D, \u201Cf1\u201D, \u201Cprecision\u201D,\u201Crecall\u201D])
clf_metrics.compute(predictions=[0,1], references=[1,1])
{\u2018accuracy\u2019: 0.5, \u2018f1\u2019: 0.66, \u2018precision\u2019: 1.0, \u2018recall\u2019: 0.5}`),sa=l(),N=o("div"),p(De.$$.fragment),On=l(),ae=o("div"),p(Pe.$$.fragment),Dn=l(),qt=o("p"),Pn=s("Add one prediction and reference for each evaluation module\u2019s stack."),An=l(),oe=o("div"),p(Ae.$$.fragment),Tn=l(),Rt=o("p"),Ln=s("Add a batch of predictions and references for each evaluation module\u2019s stack."),Sn=l(),T=o("div"),p(Te.$$.fragment),Fn=l(),Bt=o("p"),Un=s("Compute each evaluation module."),Vn=l(),Jt=o("p"),qn=s("Usage of positional arguments is not allowed to prevent mistakes."),this.h()},l(t){const d=ts('[data-svelte="svelte-1phssyn"]',document.head);U=n(d,"META",{name:!0,content:!0}),d.forEach(a),Kt=c(t),V=n(t,"H1",{class:!0});var la=r(V);Q=n(la,"A",{id:!0,class:!0,href:!0});var Hn=r(Q);Be=n(Hn,"SPAN",{});var Qn=r(Be);f(de.$$.fragment,Qn),Qn.forEach(a),Hn.forEach(a),Ma=c(la),Je=n(la,"SPAN",{});var jn=r(Je);ka=i(jn,"Main classes"),jn.forEach(a),la.forEach(a),zt=c(t),q=n(t,"H2",{class:!0});var ca=r(q);j=n(ca,"A",{id:!0,class:!0,href:!0});var Wn=r(j);Ke=n(Wn,"SPAN",{});var Gn=r(Ke);f(me.$$.fragment,Gn),Gn.forEach(a),Wn.forEach(a),Ia=c(ca),ze=n(ca,"SPAN",{});var Xn=r(ze);Na=i(Xn,"EvaluationModuleInfo"),Xn.forEach(a),ca.forEach(a),Ht=c(t),x=n(t,"P",{});var L=r(x);Ca=i(L,"The base class "),He=n(L,"CODE",{});var Yn=r(He);Oa=i(Yn,"EvaluationModuleInfo"),Yn.forEach(a),Da=i(L," implements a the logic for the subclasses "),Qe=n(L,"CODE",{});var Zn=r(Qe);Pa=i(Zn,"MetricInfo"),Zn.forEach(a),Aa=i(L,", "),je=n(L,"CODE",{});var er=r(je);Ta=i(er,"ComparisonInfo"),er.forEach(a),La=i(L,", and "),We=n(L,"CODE",{});var tr=r(We);Sa=i(tr,"MeasurementInfo"),tr.forEach(a),Fa=i(L,"."),L.forEach(a),Qt=c(t),y=n(t,"DIV",{class:!0});var O=r(y);f(ue.$$.fragment,O),Ua=c(O),P=n(O,"P",{});var ne=r(P);Va=i(ne,"Base class to store fnformation about an evaluation used for "),Ge=n(ne,"CODE",{});var ar=r(Ge);qa=i(ar,"MetricInfo"),ar.forEach(a),Ra=i(ne,", "),Xe=n(ne,"CODE",{});var or=r(Xe);Ba=i(or,"ComparisonInfo"),or.forEach(a),Ja=i(ne,`,
and `),Ye=n(ne,"CODE",{});var nr=r(Ye);Ka=i(nr,"MeasurementInfo"),nr.forEach(a),za=i(ne,"."),ne.forEach(a),Ha=c(O),Le=n(O,"P",{});var Rn=r(Le);Ze=n(Rn,"CODE",{});var rr=r(Ze);Qa=i(rr,"EvaluationModuleInfo"),rr.forEach(a),ja=i(Rn,` documents an evaluation, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Rn.forEach(a),Wa=c(O),et=n(O,"P",{});var sr=r(et);Ga=i(sr,"Note: Not all fields are known on construction and may be updated later."),sr.forEach(a),Xa=c(O),W=n(O,"DIV",{class:!0});var da=r(W);f(pe.$$.fragment,da),Ya=c(da),fe=n(da,"P",{});var ma=r(fe);Za=i(ma,"Create EvaluationModuleInfo from the JSON file in "),tt=n(ma,"CODE",{});var ir=r(tt);eo=i(ir,"metric_info_dir"),ir.forEach(a),to=i(ma,"."),ma.forEach(a),da.forEach(a),ao=c(O),G=n(O,"DIV",{class:!0});var ua=r(G);f(ve.$$.fragment,ua),oo=c(ua),R=n(ua,"P",{});var Ve=r(R);no=i(Ve,"Write "),at=n(Ve,"CODE",{});var lr=r(at);ro=i(lr,"EvaluationModuleInfo"),lr.forEach(a),so=i(Ve," as JSON to "),ot=n(Ve,"CODE",{});var cr=r(ot);io=i(cr,"metric_info_dir"),cr.forEach(a),lo=i(Ve,`.
Also save the license separately in LICENCE.`),Ve.forEach(a),ua.forEach(a),O.forEach(a),jt=c(t),M=n(t,"DIV",{class:!0});var re=r(M);f(he.$$.fragment,re),co=c(re),nt=n(re,"P",{});var dr=r(nt);mo=i(dr,"Information about a metric."),dr.forEach(a),uo=c(re),Se=n(re,"P",{});var Bn=r(Se);rt=n(Bn,"CODE",{});var mr=r(rt);po=i(mr,"EvaluationModuleInfo"),mr.forEach(a),fo=i(Bn,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Bn.forEach(a),vo=c(re),st=n(re,"P",{});var ur=r(st);ho=i(ur,"Note: Not all fields are known on construction and may be updated later."),ur.forEach(a),re.forEach(a),Wt=c(t),k=n(t,"DIV",{class:!0});var se=r(k);f(ge.$$.fragment,se),go=c(se),it=n(se,"P",{});var pr=r(it);_o=i(pr,"Information about a comparison."),pr.forEach(a),bo=c(se),Fe=n(se,"P",{});var Jn=r(Fe);lt=n(Jn,"CODE",{});var fr=r(lt);yo=i(fr,"EvaluationModuleInfo"),fr.forEach(a),Eo=i(Jn,` documents a comparison, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Jn.forEach(a),$o=c(se),ct=n(se,"P",{});var vr=r(ct);xo=i(vr,"Note: Not all fields are known on construction and may be updated later."),vr.forEach(a),se.forEach(a),Gt=c(t),I=n(t,"DIV",{class:!0});var ie=r(I);f(_e.$$.fragment,ie),wo=c(ie),dt=n(ie,"P",{});var hr=r(dt);Mo=i(hr,"Information about a measurement."),hr.forEach(a),ko=c(ie),Ue=n(ie,"P",{});var Kn=r(Ue);mt=n(Kn,"CODE",{});var gr=r(mt);Io=i(gr,"EvaluationModuleInfo"),gr.forEach(a),No=i(Kn,` documents a measurement, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Kn.forEach(a),Co=c(ie),ut=n(ie,"P",{});var _r=r(ut);Oo=i(_r,"Note: Not all fields are known on construction and may be updated later."),_r.forEach(a),ie.forEach(a),Xt=c(t),B=n(t,"H2",{class:!0});var pa=r(B);X=n(pa,"A",{id:!0,class:!0,href:!0});var br=r(X);pt=n(br,"SPAN",{});var yr=r(pt);f(be.$$.fragment,yr),yr.forEach(a),br.forEach(a),Do=c(pa),ft=n(pa,"SPAN",{});var Er=r(ft);Po=i(Er,"EvaluationModule"),Er.forEach(a),pa.forEach(a),Yt=c(t),w=n(t,"P",{});var S=r(w);Ao=i(S,"The base class "),vt=n(S,"CODE",{});var $r=r(vt);To=i($r,"EvaluationModule"),$r.forEach(a),Lo=i(S," implements a the logic for the subclasses "),ht=n(S,"CODE",{});var xr=r(ht);So=i(xr,"Metric"),xr.forEach(a),Fo=i(S,", "),gt=n(S,"CODE",{});var wr=r(gt);Uo=i(wr,"Comparison"),wr.forEach(a),Vo=i(S,", and "),_t=n(S,"CODE",{});var Mr=r(_t);qo=i(Mr,"Measurement"),Mr.forEach(a),Ro=i(S,"."),S.forEach(a),Zt=c(t),E=n(t,"DIV",{class:!0});var D=r(E);f(ye.$$.fragment,D),Bo=c(D),bt=n(D,"P",{});var kr=r(bt);Jo=i(kr,"A EvaluationModule is the base class and common API for metrics, comparisons, and measurements."),kr.forEach(a),Ko=c(D),Y=n(D,"DIV",{class:!0});var fa=r(Y);f(Ee.$$.fragment,fa),zo=c(fa),yt=n(fa,"P",{});var Ir=r(yt);Ho=i(Ir,"Add one prediction and reference for the evaluation module\u2019s stack."),Ir.forEach(a),fa.forEach(a),Qo=c(D),Z=n(D,"DIV",{class:!0});var va=r(Z);f($e.$$.fragment,va),jo=c(va),Et=n(va,"P",{});var Nr=r(Et);Wo=i(Nr,"Add a batch of predictions and references for the evaluation module\u2019s stack."),Nr.forEach(a),va.forEach(a),Go=c(D),A=n(D,"DIV",{class:!0});var qe=r(A);f(xe.$$.fragment,qe),Xo=c(qe),$t=n(qe,"P",{});var Cr=r($t);Yo=i(Cr,"Compute the evaluation module."),Cr.forEach(a),Zo=c(qe),xt=n(qe,"P",{});var Or=r(xt);en=i(Or,"Usage of positional arguments is not allowed to prevent mistakes."),Or.forEach(a),qe.forEach(a),tn=c(D),ee=n(D,"DIV",{class:!0});var ha=r(ee);f(we.$$.fragment,ha),an=c(ha),wt=n(ha,"P",{});var Dr=r(wt);on=i(Dr,"Downloads and prepares dataset for reading."),Dr.forEach(a),ha.forEach(a),D.forEach(a),ea=c(t),J=n(t,"DIV",{class:!0});var ga=r(J);f(Me.$$.fragment,ga),nn=c(ga),Mt=n(ga,"P",{});var Pr=r(Mt);rn=i(Pr,"A Metric is the base class and common API for all metrics."),Pr.forEach(a),ga.forEach(a),ta=c(t),K=n(t,"DIV",{class:!0});var _a=r(K);f(ke.$$.fragment,_a),sn=c(_a),kt=n(_a,"P",{});var Ar=r(kt);ln=i(Ar,"A Comparison is the base class and common API for all comparisons."),Ar.forEach(a),_a.forEach(a),aa=c(t),z=n(t,"DIV",{class:!0});var ba=r(z);f(Ie.$$.fragment,ba),cn=c(ba),It=n(ba,"P",{});var Tr=r(It);dn=i(Tr,"A Measurement is the base class and common API for all measurements."),Tr.forEach(a),ba.forEach(a),oa=c(t),H=n(t,"H2",{class:!0});var ya=r(H);te=n(ya,"A",{id:!0,class:!0,href:!0});var Lr=r(te);Nt=n(Lr,"SPAN",{});var Sr=r(Nt);f(Ne.$$.fragment,Sr),Sr.forEach(a),Lr.forEach(a),mn=c(ya),Ct=n(ya,"SPAN",{});var Fr=r(Ct);un=i(Fr,"CombinedEvaluations"),Fr.forEach(a),ya.forEach(a),na=c(t),C=n(t,"P",{});var le=r(C);pn=i(le,"The "),Ot=n(le,"CODE",{});var Ur=r(Ot);fn=i(Ur,"combine"),Ur.forEach(a),vn=i(le," function allows to combine multiple "),Dt=n(le,"CODE",{});var Vr=r(Dt);hn=i(Vr,"EvaluationModule"),Vr.forEach(a),gn=i(le,"s into a single "),Pt=n(le,"CODE",{});var qr=r(Pt);_n=i(qr,"CombinedEvaluations"),qr.forEach(a),bn=i(le,"."),le.forEach(a),ra=c(t),$=n(t,"DIV",{class:!0});var F=r($);f(Ce.$$.fragment,F),yn=c(F),Oe=n(F,"P",{});var Ea=r(Oe);En=i(Ea,"Combines several metrics, comparisons, or measurements into a single "),At=n(Ea,"EM",{});var Rr=r(At);$n=i(Rr,"CombinedEvaluations"),Rr.forEach(a),xn=i(Ea,` object that
can be used like a single evaluation module.`),Ea.forEach(a),wn=c(F),Tt=n(F,"P",{});var Br=r(Tt);Mn=i(Br,`If two scores have the same name, then they are prefixed with their module names.
And if two modules have the same name, please use a dictionary to give them different names, otherwise an integer id is appended to the prefix.`),Br.forEach(a),kn=c(F),Lt=n(F,"P",{});var Jr=r(Lt);In=i(Jr,"Examples:"),Jr.forEach(a),Nn=c(F),St=n(F,"BLOCKQUOTE",{});var Kr=r(St);Ft=n(Kr,"BLOCKQUOTE",{});var zr=r(Ft);Ut=n(zr,"BLOCKQUOTE",{});var Hr=r(Ut);Vt=n(Hr,"P",{});var Qr=r(Vt);Cn=i(Qr,`clf_metrics = combine([\u201Caccuracy\u201D, \u201Cf1\u201D, \u201Cprecision\u201D,\u201Crecall\u201D])
clf_metrics.compute(predictions=[0,1], references=[1,1])
{\u2018accuracy\u2019: 0.5, \u2018f1\u2019: 0.66, \u2018precision\u2019: 1.0, \u2018recall\u2019: 0.5}`),Qr.forEach(a),Hr.forEach(a),zr.forEach(a),Kr.forEach(a),F.forEach(a),sa=c(t),N=n(t,"DIV",{class:!0});var ce=r(N);f(De.$$.fragment,ce),On=c(ce),ae=n(ce,"DIV",{class:!0});var $a=r(ae);f(Pe.$$.fragment,$a),Dn=c($a),qt=n($a,"P",{});var jr=r(qt);Pn=i(jr,"Add one prediction and reference for each evaluation module\u2019s stack."),jr.forEach(a),$a.forEach(a),An=c(ce),oe=n(ce,"DIV",{class:!0});var xa=r(oe);f(Ae.$$.fragment,xa),Tn=c(xa),Rt=n(xa,"P",{});var Wr=r(Rt);Ln=i(Wr,"Add a batch of predictions and references for each evaluation module\u2019s stack."),Wr.forEach(a),xa.forEach(a),Sn=c(ce),T=n(ce,"DIV",{class:!0});var Re=r(T);f(Te.$$.fragment,Re),Fn=c(Re),Bt=n(Re,"P",{});var Gr=r(Bt);Un=i(Gr,"Compute each evaluation module."),Gr.forEach(a),Vn=c(Re),Jt=n(Re,"P",{});var Xr=r(Jt);qn=i(Xr,"Usage of positional arguments is not allowed to prevent mistakes."),Xr.forEach(a),Re.forEach(a),ce.forEach(a),this.h()},h(){m(U,"name","hf:doc:metadata"),m(U,"content",JSON.stringify(rs)),m(Q,"id","main-classes"),m(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Q,"href","#main-classes"),m(V,"class","relative group"),m(j,"id","evaluate.EvaluationModuleInfo"),m(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(j,"href","#evaluate.EvaluationModuleInfo"),m(q,"class","relative group"),m(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(X,"id","evaluate.EvaluationModule"),m(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(X,"href","#evaluate.EvaluationModule"),m(B,"class","relative group"),m(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(te,"id","evaluate.combine"),m(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(te,"href","#evaluate.combine"),m(H,"class","relative group"),m($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,d){e(document.head,U),u(t,Kt,d),u(t,V,d),e(V,Q),e(Q,Be),v(de,Be,null),e(V,Ma),e(V,Je),e(Je,ka),u(t,zt,d),u(t,q,d),e(q,j),e(j,Ke),v(me,Ke,null),e(q,Ia),e(q,ze),e(ze,Na),u(t,Ht,d),u(t,x,d),e(x,Ca),e(x,He),e(He,Oa),e(x,Da),e(x,Qe),e(Qe,Pa),e(x,Aa),e(x,je),e(je,Ta),e(x,La),e(x,We),e(We,Sa),e(x,Fa),u(t,Qt,d),u(t,y,d),v(ue,y,null),e(y,Ua),e(y,P),e(P,Va),e(P,Ge),e(Ge,qa),e(P,Ra),e(P,Xe),e(Xe,Ba),e(P,Ja),e(P,Ye),e(Ye,Ka),e(P,za),e(y,Ha),e(y,Le),e(Le,Ze),e(Ze,Qa),e(Le,ja),e(y,Wa),e(y,et),e(et,Ga),e(y,Xa),e(y,W),v(pe,W,null),e(W,Ya),e(W,fe),e(fe,Za),e(fe,tt),e(tt,eo),e(fe,to),e(y,ao),e(y,G),v(ve,G,null),e(G,oo),e(G,R),e(R,no),e(R,at),e(at,ro),e(R,so),e(R,ot),e(ot,io),e(R,lo),u(t,jt,d),u(t,M,d),v(he,M,null),e(M,co),e(M,nt),e(nt,mo),e(M,uo),e(M,Se),e(Se,rt),e(rt,po),e(Se,fo),e(M,vo),e(M,st),e(st,ho),u(t,Wt,d),u(t,k,d),v(ge,k,null),e(k,go),e(k,it),e(it,_o),e(k,bo),e(k,Fe),e(Fe,lt),e(lt,yo),e(Fe,Eo),e(k,$o),e(k,ct),e(ct,xo),u(t,Gt,d),u(t,I,d),v(_e,I,null),e(I,wo),e(I,dt),e(dt,Mo),e(I,ko),e(I,Ue),e(Ue,mt),e(mt,Io),e(Ue,No),e(I,Co),e(I,ut),e(ut,Oo),u(t,Xt,d),u(t,B,d),e(B,X),e(X,pt),v(be,pt,null),e(B,Do),e(B,ft),e(ft,Po),u(t,Yt,d),u(t,w,d),e(w,Ao),e(w,vt),e(vt,To),e(w,Lo),e(w,ht),e(ht,So),e(w,Fo),e(w,gt),e(gt,Uo),e(w,Vo),e(w,_t),e(_t,qo),e(w,Ro),u(t,Zt,d),u(t,E,d),v(ye,E,null),e(E,Bo),e(E,bt),e(bt,Jo),e(E,Ko),e(E,Y),v(Ee,Y,null),e(Y,zo),e(Y,yt),e(yt,Ho),e(E,Qo),e(E,Z),v($e,Z,null),e(Z,jo),e(Z,Et),e(Et,Wo),e(E,Go),e(E,A),v(xe,A,null),e(A,Xo),e(A,$t),e($t,Yo),e(A,Zo),e(A,xt),e(xt,en),e(E,tn),e(E,ee),v(we,ee,null),e(ee,an),e(ee,wt),e(wt,on),u(t,ea,d),u(t,J,d),v(Me,J,null),e(J,nn),e(J,Mt),e(Mt,rn),u(t,ta,d),u(t,K,d),v(ke,K,null),e(K,sn),e(K,kt),e(kt,ln),u(t,aa,d),u(t,z,d),v(Ie,z,null),e(z,cn),e(z,It),e(It,dn),u(t,oa,d),u(t,H,d),e(H,te),e(te,Nt),v(Ne,Nt,null),e(H,mn),e(H,Ct),e(Ct,un),u(t,na,d),u(t,C,d),e(C,pn),e(C,Ot),e(Ot,fn),e(C,vn),e(C,Dt),e(Dt,hn),e(C,gn),e(C,Pt),e(Pt,_n),e(C,bn),u(t,ra,d),u(t,$,d),v(Ce,$,null),e($,yn),e($,Oe),e(Oe,En),e(Oe,At),e(At,$n),e(Oe,xn),e($,wn),e($,Tt),e(Tt,Mn),e($,kn),e($,Lt),e(Lt,In),e($,Nn),e($,St),e(St,Ft),e(Ft,Ut),e(Ut,Vt),e(Vt,Cn),u(t,sa,d),u(t,N,d),v(De,N,null),e(N,On),e(N,ae),v(Pe,ae,null),e(ae,Dn),e(ae,qt),e(qt,Pn),e(N,An),e(N,oe),v(Ae,oe,null),e(oe,Tn),e(oe,Rt),e(Rt,Ln),e(N,Sn),e(N,T),v(Te,T,null),e(T,Fn),e(T,Bt),e(Bt,Un),e(T,Vn),e(T,Jt),e(Jt,qn),ia=!0},p:as,i(t){ia||(h(de.$$.fragment,t),h(me.$$.fragment,t),h(ue.$$.fragment,t),h(pe.$$.fragment,t),h(ve.$$.fragment,t),h(he.$$.fragment,t),h(ge.$$.fragment,t),h(_e.$$.fragment,t),h(be.$$.fragment,t),h(ye.$$.fragment,t),h(Ee.$$.fragment,t),h($e.$$.fragment,t),h(xe.$$.fragment,t),h(we.$$.fragment,t),h(Me.$$.fragment,t),h(ke.$$.fragment,t),h(Ie.$$.fragment,t),h(Ne.$$.fragment,t),h(Ce.$$.fragment,t),h(De.$$.fragment,t),h(Pe.$$.fragment,t),h(Ae.$$.fragment,t),h(Te.$$.fragment,t),ia=!0)},o(t){g(de.$$.fragment,t),g(me.$$.fragment,t),g(ue.$$.fragment,t),g(pe.$$.fragment,t),g(ve.$$.fragment,t),g(he.$$.fragment,t),g(ge.$$.fragment,t),g(_e.$$.fragment,t),g(be.$$.fragment,t),g(ye.$$.fragment,t),g(Ee.$$.fragment,t),g($e.$$.fragment,t),g(xe.$$.fragment,t),g(we.$$.fragment,t),g(Me.$$.fragment,t),g(ke.$$.fragment,t),g(Ie.$$.fragment,t),g(Ne.$$.fragment,t),g(Ce.$$.fragment,t),g(De.$$.fragment,t),g(Pe.$$.fragment,t),g(Ae.$$.fragment,t),g(Te.$$.fragment,t),ia=!1},d(t){a(U),t&&a(Kt),t&&a(V),_(de),t&&a(zt),t&&a(q),_(me),t&&a(Ht),t&&a(x),t&&a(Qt),t&&a(y),_(ue),_(pe),_(ve),t&&a(jt),t&&a(M),_(he),t&&a(Wt),t&&a(k),_(ge),t&&a(Gt),t&&a(I),_(_e),t&&a(Xt),t&&a(B),_(be),t&&a(Yt),t&&a(w),t&&a(Zt),t&&a(E),_(ye),_(Ee),_($e),_(xe),_(we),t&&a(ea),t&&a(J),_(Me),t&&a(ta),t&&a(K),_(ke),t&&a(aa),t&&a(z),_(Ie),t&&a(oa),t&&a(H),_(Ne),t&&a(na),t&&a(C),t&&a(ra),t&&a($),_(Ce),t&&a(sa),t&&a(N),_(De),_(Pe),_(Ae),_(Te)}}}const rs={local:"main-classes",sections:[{local:"evaluate.EvaluationModuleInfo",title:"EvaluationModuleInfo"},{local:"evaluate.EvaluationModule",title:"EvaluationModule"},{local:"evaluate.combine",title:"CombinedEvaluations"}],title:"Main classes"};function ss(zn){return os(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ds extends Yr{constructor(U){super();Zr(this,U,ss,ns,es,{})}}export{ds as default,rs as metadata};
