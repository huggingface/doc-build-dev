import{S as Ga,i as Ja,s as Ka,e as s,k as c,w as y,t as l,M as Qa,c as n,d as a,m as d,a as r,x as $,h as i,b as v,G as e,g as f,y as w,q as E,o as x,B as q,v as Xa,L as va}from"../../chunks/vendor-hf-doc-builder.js";import{D as L}from"../../chunks/Docstring-hf-doc-builder.js";import{C as _a}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Wa}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as ha}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ya(O){let u,T,g,p,_;return p=new _a({props:{code:`from evaluate import evaluator
# Sentiment analysis evaluator
evaluator("sentiment-analysis")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> evaluate <span class="hljs-keyword">import</span> evaluator
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Sentiment analysis evaluator</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>evaluator(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)`}}),{c(){u=s("p"),T=l("Examples:"),g=c(),y(p.$$.fragment)},l(o){u=n(o,"P",{});var h=r(u);T=i(h,"Examples:"),h.forEach(a),g=d(o),$(p.$$.fragment,o)},m(o,h){f(o,u,h),e(u,T),f(o,g,h),w(p,o,h),_=!0},p:va,i(o){_||(E(p.$$.fragment,o),_=!0)},o(o){x(p.$$.fragment,o),_=!1},d(o){o&&a(u),o&&a(g),q(p,o)}}}function Za(O){let u,T,g,p,_;return p=new _a({props:{code:`from evaluate import evaluator
from datasets import Dataset, load_dataset
e = evaluator("text-classification")
data =  Dataset.from_dict(load_dataset("imdb")["test"][:2])
results = e.compute(
    model_or_pipeline="huggingface/prunebert-base-uncased-6-finepruned-w-distil-mnli",
    data=data,
    metric="accuracy",
    input_column="text",
    label_column="label",
    label_mapping={"LABEL_0": 0.0, "LABEL_1": 1.0},
    strategy="bootstrap",
    n_resamples=10,
    random_state=0
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> evaluate <span class="hljs-keyword">import</span> evaluator
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>e = evaluator(<span class="hljs-string">&quot;text-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>data =  Dataset.from_dict(load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)[<span class="hljs-string">&quot;test&quot;</span>][:<span class="hljs-number">2</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>results = e.compute(
<span class="hljs-meta">&gt;&gt;&gt; </span>    model_or_pipeline=<span class="hljs-string">&quot;huggingface/prunebert-base-uncased-6-finepruned-w-distil-mnli&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    data=data,
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric=<span class="hljs-string">&quot;accuracy&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    input_column=<span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    label_column=<span class="hljs-string">&quot;label&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    label_mapping={<span class="hljs-string">&quot;LABEL_0&quot;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&quot;LABEL_1&quot;</span>: <span class="hljs-number">1.0</span>},
<span class="hljs-meta">&gt;&gt;&gt; </span>    strategy=<span class="hljs-string">&quot;bootstrap&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    n_resamples=<span class="hljs-number">10</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    random_state=<span class="hljs-number">0</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>)`}}),{c(){u=s("p"),T=l("Examples:"),g=c(),y(p.$$.fragment)},l(o){u=n(o,"P",{});var h=r(u);T=i(h,"Examples:"),h.forEach(a),g=d(o),$(p.$$.fragment,o)},m(o,h){f(o,u,h),e(u,T),f(o,g,h),w(p,o,h),_=!0},p:va,i(o){_||(E(p.$$.fragment,o),_=!0)},o(o){x(p.$$.fragment,o),_=!1},d(o){o&&a(u),o&&a(g),q(p,o)}}}function eo(O){let u,T,g,p,_;return p=new _a({props:{code:`from evaluate import evaluator
from datasets import Dataset, load_dataset
e = evaluator("image-classification")
data =  Dataset.from_dict(load_dataset("beans")["test"][:2])
results = e.compute(
    model_or_pipeline="nateraw/vit-base-beans",
    data=data,
    metric="accuracy",
    input_column="image",
    label_column="labels",
    label_mapping={'angular_leaf_spot': 0, 'bean_rust': 1, 'healthy': 2},
    strategy="bootstrap",
    n_resamples=10,
    random_state=0
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> evaluate <span class="hljs-keyword">import</span> evaluator
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>e = evaluator(<span class="hljs-string">&quot;image-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>data =  Dataset.from_dict(load_dataset(<span class="hljs-string">&quot;beans&quot;</span>)[<span class="hljs-string">&quot;test&quot;</span>][:<span class="hljs-number">2</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>results = e.compute(
<span class="hljs-meta">&gt;&gt;&gt; </span>    model_or_pipeline=<span class="hljs-string">&quot;nateraw/vit-base-beans&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    data=data,
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric=<span class="hljs-string">&quot;accuracy&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    input_column=<span class="hljs-string">&quot;image&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    label_column=<span class="hljs-string">&quot;labels&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    label_mapping={<span class="hljs-string">&#x27;angular_leaf_spot&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;bean_rust&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;healthy&#x27;</span>: <span class="hljs-number">2</span>},
<span class="hljs-meta">&gt;&gt;&gt; </span>    strategy=<span class="hljs-string">&quot;bootstrap&quot;</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    n_resamples=<span class="hljs-number">10</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>    random_state=<span class="hljs-number">0</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>)`}}),{c(){u=s("p"),T=l("Examples:"),g=c(),y(p.$$.fragment)},l(o){u=n(o,"P",{});var h=r(u);T=i(h,"Examples:"),h.forEach(a),g=d(o),$(p.$$.fragment,o)},m(o,h){f(o,u,h),e(u,T),f(o,g,h),w(p,o,h),_=!0},p:va,i(o){_||(E(p.$$.fragment,o),_=!0)},o(o){x(p.$$.fragment,o),_=!1},d(o){o&&a(u),o&&a(g),q(p,o)}}}function to(O){let u,T,g,p,_,o,h,xe,lt,He,pe,it,We,z,R,qe,Y,ct,Te,dt,Ge,ue,pt,Je,P,Z,ut,C,mt,me,ft,gt,je,ht,vt,ke,_t,bt,yt,S,Ke,fe,$t,Qe,b,ee,wt,Pe,Et,xt,B,te,qt,A,Tt,Ce,jt,kt,De,Pt,Ct,Dt,V,ae,Nt,Ne,It,Lt,H,oe,Ft,Ie,Mt,Ut,W,se,zt,Le,At,Ot,G,ne,Rt,Fe,St,Xe,ge,Bt,Ye,D,re,Vt,k,Ht,he,Wt,Gt,Me,Jt,Kt,Ue,Qt,Xt,ze,Yt,Zt,ea,F,le,ta,Ae,aa,oa,J,Ze,N,ie,sa,I,na,ve,ra,la,Oe,ia,ca,Re,da,pa,ua,M,ce,ma,Se,fa,ga,K,et;return o=new Wa({}),Y=new Wa({}),Z=new L({props:{name:"evaluate.evaluator",anchor:"evaluate.evaluator",parameters:[{name:"task",val:": str = None"}],parametersDescription:[{anchor:"evaluate.evaluator.task",description:`<strong>task</strong> (<code>str</code>) &#x2014;
The task defining which evaluator will be returned. Currently accepted tasks are:<ul>
<li><code>&quot;text-classification&quot;</code> (alias <code>&quot;sentiment-analysis&quot;</code> available): will return a <a href="/docs/evaluate/pr_178/en/package_reference/evaluator_classes#evaluate.TextClassificationEvaluator">TextClassificationEvaluator</a>.</li>
<li><code>&quot;image-classification&quot;</code>: will return a <a href="/docs/evaluate/pr_178/en/package_reference/evaluator_classes#evaluate.ImageClassificationEvaluator">ImageClassificationEvaluator</a>.</li>
</ul>`,name:"task"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/__init__.py#L73",returnDescription:`
<p>An evaluator suitable for the task.</p>
`,returnType:`
<p><a
  href="/docs/evaluate/pr_178/en/package_reference/evaluator_classes#evaluate.Evaluator"
>Evaluator</a></p>
`}}),S=new ha({props:{anchor:"evaluate.evaluator.example",$$slots:{default:[Ya]},$$scope:{ctx:O}}}),ee=new L({props:{name:"class evaluate.Evaluator",anchor:"evaluate.Evaluator",parameters:[{name:"task",val:": str"},{name:"default_metric_name",val:": str = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/base.py#L54"}}),te=new L({props:{name:"compute",anchor:"evaluate.Evaluator.compute",parameters:[{name:"model_or_pipeline",val:": typing.Union[str, ForwardRef('Pipeline'), typing.Callable, ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] = None"},{name:"data",val:": typing.Union[str, datasets.arrow_dataset.Dataset] = None"},{name:"metric",val:": typing.Union[str, evaluate.module.EvaluationModule] = None"},{name:"tokenizer",val:": typing.Union[str, ForwardRef('PreTrainedTokenizer'), NoneType] = None"},{name:"strategy",val:": typing.Literal['simple', 'bootstrap'] = 'simple'"},{name:"confidence_level",val:": float = 0.95"},{name:"n_resamples",val:": int = 9999"},{name:"**compute_parameters",val:": typing.Dict"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/base.py#L113"}}),ae=new L({props:{name:"core_compute",anchor:"evaluate.Evaluator.core_compute",parameters:[{name:"references",val:": typing.List"},{name:"predictions",val:": typing.List"},{name:"metric",val:": EvaluationModule"},{name:"strategy",val:": typing.Literal['simple', 'bootstrap'] = 'simple'"},{name:"confidence_level",val:": float = 0.95"},{name:"n_resamples",val:": int = 9999"},{name:"random_state",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/base.py#L227"}}),oe=new L({props:{name:"prepare_data",anchor:"evaluate.Evaluator.prepare_data",parameters:[{name:"data",val:": typing.Union[str, datasets.arrow_dataset.Dataset]"},{name:"input_column",val:": str"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"evaluate.Evaluator.prepare_data.data",description:"<strong>data</strong> (<code>str</code> or <code>Dataset</code>, defaults to <code>None) -- Specifies the dataset we will run evaluation on. If it is of type </code>str`, we treat it as the dataset\nname, and load it. Otherwise we assume it represents a pre-loaded dataset.",name:"data"},{anchor:"evaluate.Evaluator.prepare_data.input_column",description:`<strong>input_column</strong> (<code>str</code>, defaults to <code>&quot;text&quot;</code>) &#x2014;
the name of the column containing the text feature in the dataset specified by <code>data</code>.`,name:"input_column"},{anchor:"evaluate.Evaluator.prepare_data.label_column",description:`<strong>label_column</strong> (<code>str</code>, defaults to <code>&quot;label&quot;</code>) &#x2014;
the name of the column containing the labels in the dataset specified by <code>data</code>.`,name:"label_column"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/base.py#L131",returnDescription:`
<p>Loaded <code>datasets.Dataset</code>.</p>
`}}),se=new L({props:{name:"prepare_metric",anchor:"evaluate.Evaluator.prepare_metric",parameters:[{name:"metric",val:": typing.Union[str, evaluate.module.EvaluationModule]"}],parametersDescription:[{anchor:"evaluate.Evaluator.prepare_metric.metric",description:`<strong>metric</strong> (<code>str</code> or <code>EvaluationModule</code>, defaults to <code>None</code>) &#x2014;
Specifies the metric we use in evaluator. If it is of type <code>str</code>, we treat it as the metric name, and
load it. Otherwise we assume it represents a pre-loaded metric.`,name:"metric"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/base.py#L203",returnDescription:`
<p>The loaded metric.</p>
`}}),ne=new L({props:{name:"prepare_pipeline",anchor:"evaluate.Evaluator.prepare_pipeline",parameters:[{name:"model_or_pipeline",val:": typing.Union[str, ForwardRef('Pipeline'), typing.Callable, ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')]"},{name:"preprocessor",val:": typing.Union[ForwardRef('PreTrainedTokenizerBase'), ForwardRef('FeatureExtractionMixin')] = None"}],parametersDescription:[{anchor:"evaluate.Evaluator.prepare_pipeline.model_or_pipeline",description:"<strong>model_or_pipeline</strong> (<code>str</code> or <code>Pipeline</code> or <code>Callable</code> or <code>PreTrainedModel</code> or <code>TFPreTrainedModel</code>, &#x2014;",name:"model_or_pipeline"},{anchor:"evaluate.Evaluator.prepare_pipeline.defaults",description:`<strong>defaults</strong> to <code>None</code>) &#x2014;
If the argument in not specified, we initialize the default pipeline for the task (in this case
<code>text-classification</code> or its alias - <code>sentiment-analysis</code>). If the argument is of the type <code>str</code> or
is a model instance, we use it to initialize a new <code>Pipeline</code> with the given model. Otherwise we assume the
argument specifies a pre-initialized pipeline.`,name:"defaults"},{anchor:"evaluate.Evaluator.prepare_pipeline.preprocessor",description:`<strong>preprocessor</strong> (<code>PreTrainedTokenizerBase</code> or <code>FeatureExtractionMixin</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Argument can be used to overwrite a default preprocessor if <code>model_or_pipeline</code> represents a model for
which we build a pipeline. If <code>model_or_pipeline</code> is <code>None</code> or a pre-initialized pipeline, we ignore
this argument.`,name:"preprocessor"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/base.py#L162",returnDescription:`
<p>The initialized pipeline.</p>
`}}),re=new L({props:{name:"class evaluate.TextClassificationEvaluator",anchor:"evaluate.TextClassificationEvaluator",parameters:[{name:"task",val:" = 'text-classification'"},{name:"default_metric_name",val:" = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/text_classification.py#L40"}}),le=new L({props:{name:"compute",anchor:"evaluate.TextClassificationEvaluator.compute",parameters:[{name:"model_or_pipeline",val:": typing.Union[str, ForwardRef('Pipeline'), typing.Callable, ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] = None"},{name:"data",val:": typing.Union[str, datasets.arrow_dataset.Dataset] = None"},{name:"metric",val:": typing.Union[str, evaluate.module.EvaluationModule] = None"},{name:"tokenizer",val:": typing.Union[str, ForwardRef('PreTrainedTokenizer'), NoneType] = None"},{name:"strategy",val:": typing.Literal['simple', 'bootstrap'] = 'simple'"},{name:"confidence_level",val:": float = 0.95"},{name:"n_resamples",val:": int = 9999"},{name:"random_state",val:": typing.Optional[int] = None"},{name:"input_column",val:": str = 'text'"},{name:"label_column",val:": str = 'label'"},{name:"label_mapping",val:": typing.Union[typing.Dict[str, numbers.Number], NoneType] = None"}],parametersDescription:[{anchor:"evaluate.TextClassificationEvaluator.compute.model_or_pipeline",description:`<strong>model_or_pipeline</strong> (<code>str</code> or <code>Pipeline</code> or <code>Callable</code> or <code>PreTrainedModel</code> or <code>TFPreTrainedModel</code>, defaults to <code>None</code>) &#x2014;
If the argument in not specified, we initialize the default pipeline for the task (in this case
<code>text-classification</code> or its alias - <code>sentiment-analysis</code>). If the argument is of the type <code>str</code> or
is a model instance, we use it to initialize a new <code>Pipeline</code> with the given model. Otherwise we assume the
argument specifies a pre-initialized pipeline.`,name:"model_or_pipeline"},{anchor:"evaluate.TextClassificationEvaluator.compute.data",description:`<strong>data</strong> (<code>str</code> or <code>Dataset</code>, defaults to <code>None</code>) &#x2014;
Specifies the dataset we will run evaluation on. If it is of type <code>str</code>, we treat it as the dataset
name, and load it. Otherwise we assume it represents a pre-loaded dataset.`,name:"data"},{anchor:"evaluate.TextClassificationEvaluator.compute.metric",description:`<strong>metric</strong> (<code>str</code> or <code>EvaluationModule</code>, defaults to <code>None</code>) &#x2014;
Specifies the metric we use in evaluator. If it is of type <code>str</code>, we treat it as the metric name, and
load it. Otherwise we assume it represents a pre-loaded metric.
tokenizer &#x2014; (<code>str</code> or <code>PreTrainedTokenizer</code>, <em>optional</em>, defaults to <code>None</code>):
Argument can be used to overwrite a default tokenizer if <code>model_or_pipeline</code> represents a model for
which we build a pipeline. If <code>model_or_pipeline</code> is <code>None</code> or a pre-initialized pipeline, we ignore
this argument.
strategy &#x2014; (<code>Literal[&quot;simple&quot;, &quot;bootstrap&quot;, &quot;perf&quot;]</code> or <code>List[Literal[&quot;simple&quot;, &quot;bootstrap&quot;, &quot;perf&quot;]]</code>, defaults to &#x201C;simple&#x201D;):
specifies the evaluation strategy. Possible values are:<ul>
<li><code>&quot;simple&quot;</code> - we evaluate the metric and return the scores.</li>
<li><code>&quot;bootstrap&quot;</code> - on top of computing the metric scores, we calculate the confidence interval for each
of the returned metric keys, using <code>scipy</code>&#x2019;s <code>bootstrap</code> method
<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html" rel="nofollow">https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html</a>.</li>
</ul>`,name:"metric"},{anchor:"evaluate.TextClassificationEvaluator.compute.confidence_level",description:`<strong>confidence_level</strong> (<code>float</code>, defaults to <code>0.95</code>) &#x2014;
The <code>confidence_level</code> value passed to <code>bootstrap</code> if <code>&quot;bootstrap&quot;</code> strategy is chosen.`,name:"confidence_level"},{anchor:"evaluate.TextClassificationEvaluator.compute.n_resamples",description:`<strong>n_resamples</strong> (<code>int</code>, defaults to <code>9999</code>) &#x2014;
The <code>n_resamples</code> value passed to <code>bootstrap</code> if <code>&quot;bootstrap&quot;</code> strategy is chosen.`,name:"n_resamples"},{anchor:"evaluate.TextClassificationEvaluator.compute.random_state",description:`<strong>random_state</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The <code>random_state</code> value passed to <code>bootstrap</code> if <code>&quot;bootstrap&quot;</code> strategy is chosen. Useful for
debugging.`,name:"random_state"},{anchor:"evaluate.TextClassificationEvaluator.compute.input_column",description:`<strong>input_column</strong> (<code>str</code>, defaults to <code>&quot;text&quot;</code>) &#x2014;
the name of the column containing the text feature in the dataset specified by <code>data</code>.`,name:"input_column"},{anchor:"evaluate.TextClassificationEvaluator.compute.label_column",description:`<strong>label_column</strong> (<code>str</code>, defaults to <code>&quot;label&quot;</code>) &#x2014;
the name of the column containing the labels in the dataset specified by <code>data</code>.`,name:"label_column"},{anchor:"evaluate.TextClassificationEvaluator.compute.label_mapping",description:`<strong>label_mapping</strong> (<code>Dict[str, Number]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
We want to map class labels defined by the model in the pipeline to values consistent with those
defined in the <code>label_column</code> of the <code>data</code> dataset.`,name:"label_mapping"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/text_classification.py#L52",returnDescription:`
<p>A <code>Dict</code>. The keys represent metric keys calculated for the <code>metric</code> spefied in function arguments. For the
<code>"simple"</code> strategy, the value is the metric score. For the <code>"bootstrap"</code> strategy, the value is a <code>Dict</code>
containing the score, the confidence interval and the standard error calculated for each metric key.</p>
`}}),J=new ha({props:{anchor:"evaluate.TextClassificationEvaluator.compute.example",$$slots:{default:[Za]},$$scope:{ctx:O}}}),ie=new L({props:{name:"class evaluate.ImageClassificationEvaluator",anchor:"evaluate.ImageClassificationEvaluator",parameters:[{name:"task",val:" = 'image-classification'"},{name:"default_metric_name",val:" = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/image_classification.py#L41"}}),ce=new L({props:{name:"compute",anchor:"evaluate.ImageClassificationEvaluator.compute",parameters:[{name:"model_or_pipeline",val:": typing.Union[str, ForwardRef('Pipeline'), typing.Callable, ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] = None"},{name:"data",val:": typing.Union[str, datasets.arrow_dataset.Dataset] = None"},{name:"metric",val:": typing.Union[str, evaluate.module.EvaluationModule] = None"},{name:"feature_extractor",val:": typing.Union[str, ForwardRef('FeatureExtractionMixin'), NoneType] = None"},{name:"strategy",val:": typing.Literal['simple', 'bootstrap'] = 'simple'"},{name:"confidence_level",val:": float = 0.95"},{name:"n_resamples",val:": int = 9999"},{name:"random_state",val:": typing.Optional[int] = None"},{name:"input_column",val:": str = 'image'"},{name:"label_column",val:": str = 'labels'"},{name:"label_mapping",val:": typing.Union[typing.Dict[str, numbers.Number], NoneType] = None"}],parametersDescription:[{anchor:"evaluate.ImageClassificationEvaluator.compute.model_or_pipeline",description:`<strong>model_or_pipeline</strong> (<code>str</code> or <code>Pipeline</code> or <code>Callable</code> or <code>PreTrainedModel</code> or <code>TFPreTrainedModel</code>, defaults to <code>None</code>) &#x2014;
If the argument in not specified, we initialize the default pipeline for the task (in this case
<code>image-classification</code>. If the argument is of the type <code>str</code> or
is a model instance, we use it to initialize a new <code>Pipeline</code> with the given model. Otherwise we assume the
argument specifies a pre-initialized pipeline.`,name:"model_or_pipeline"},{anchor:"evaluate.ImageClassificationEvaluator.compute.data",description:`<strong>data</strong> (<code>str</code> or <code>Dataset</code>, defaults to <code>None</code>) &#x2014;
Specifies the dataset we will run evaluation on. If it is of type <code>str</code>, we treat it as the dataset
name, and load it. Otherwise we assume it represents a pre-loaded dataset.`,name:"data"},{anchor:"evaluate.ImageClassificationEvaluator.compute.metric",description:`<strong>metric</strong> (<code>str</code> or <code>EvaluationModule</code>, defaults to <code>None</code>) &#x2014;
Specifies the metric we use in evaluator. If it is of type <code>str</code>, we treat it as the metric name, and
load it. Otherwise we assume it represents a pre-loaded metric.
feature_extractor &#x2014; (<code>str</code> or <code>FeatureExtractionMixin</code>, <em>optional</em>, defaults to <code>None</code>):
Argument can be used to overwrite a default feature extractor if <code>model_or_pipeline</code> represents a model for
which we build a pipeline. If <code>model_or_pipeline</code> is <code>None</code> or a pre-initialized pipeline, we ignore
this argument.
strategy &#x2014; (<code>Literal[&quot;simple&quot;, &quot;bootstrap&quot;, &quot;perf&quot;]</code> or <code>List[Literal[&quot;simple&quot;, &quot;bootstrap&quot;, &quot;perf&quot;]]</code>, defaults to &#x201C;simple&#x201D;):
specifies the evaluation strategy. Possible values are:<ul>
<li><code>&quot;simple&quot;</code> - we evaluate the metric and return the scores.</li>
<li><code>&quot;bootstrap&quot;</code> - on top of computing the metric scores, we calculate the confidence interval for each
of the returned metric keys, using <code>scipy</code>&#x2019;s <code>bootstrap</code> method
<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html" rel="nofollow">https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html</a>.</li>
</ul>`,name:"metric"},{anchor:"evaluate.ImageClassificationEvaluator.compute.confidence_level",description:`<strong>confidence_level</strong> (<code>float</code>, defaults to <code>0.95</code>) &#x2014;
The <code>confidence_level</code> value passed to <code>bootstrap</code> if <code>&quot;bootstrap&quot;</code> strategy is chosen.`,name:"confidence_level"},{anchor:"evaluate.ImageClassificationEvaluator.compute.n_resamples",description:`<strong>n_resamples</strong> (<code>int</code>, defaults to <code>9999</code>) &#x2014;
The <code>n_resamples</code> value passed to <code>bootstrap</code> if <code>&quot;bootstrap&quot;</code> strategy is chosen.`,name:"n_resamples"},{anchor:"evaluate.ImageClassificationEvaluator.compute.random_state",description:`<strong>random_state</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The <code>random_state</code> value passed to <code>bootstrap</code> if <code>&quot;bootstrap&quot;</code> strategy is chosen. Useful for
debugging.`,name:"random_state"},{anchor:"evaluate.ImageClassificationEvaluator.compute.input_column",description:`<strong>input_column</strong> (<code>str</code>, defaults to <code>&quot;image&quot;</code>) &#x2014;
the name of the column containing the images as PIL ImageFile in the dataset specified by <code>data</code>.`,name:"input_column"},{anchor:"evaluate.ImageClassificationEvaluator.compute.label_column",description:`<strong>label_column</strong> (<code>str</code>, defaults to <code>&quot;labels&quot;</code>) &#x2014;
the name of the column containing the labels in the dataset specified by <code>data</code>.`,name:"label_column"},{anchor:"evaluate.ImageClassificationEvaluator.compute.label_mapping",description:`<strong>label_mapping</strong> (<code>Dict[str, Number]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
We want to map class labels defined by the model in the pipeline to values consistent with those
defined in the <code>label_column</code> of the <code>data</code> dataset.`,name:"label_mapping"}],source:"https://github.com/huggingface/evaluate/blob/vr_178/src/evaluate/evaluator/image_classification.py#L52",returnDescription:`
<p>A <code>Dict</code>. The keys represent metric keys calculated for the <code>metric</code> spefied in function arguments. For the
<code>"simple"</code> strategy, the value is the metric score. For the <code>"bootstrap"</code> strategy, the value is a <code>Dict</code>
containing the score, the confidence interval and the standard error calculated for each metric key.</p>
`}}),K=new ha({props:{anchor:"evaluate.ImageClassificationEvaluator.compute.example",$$slots:{default:[eo]},$$scope:{ctx:O}}}),{c(){u=s("meta"),T=c(),g=s("h1"),p=s("a"),_=s("span"),y(o.$$.fragment),h=c(),xe=s("span"),lt=l("Evaluator"),He=c(),pe=s("p"),it=l("The evaluator classes for automatic evaluation."),We=c(),z=s("h2"),R=s("a"),qe=s("span"),y(Y.$$.fragment),ct=c(),Te=s("span"),dt=l("Evaluator classes"),Ge=c(),ue=s("p"),pt=l("The main entry point for using the evaluator:"),Je=c(),P=s("div"),y(Z.$$.fragment),ut=c(),C=s("p"),mt=l("Utility factory method to build an "),me=s("a"),ft=l("Evaluator"),gt=l(`.
Evaluators encapsulate a task and a default metric name. They leverage `),je=s("code"),ht=l("pipeline"),vt=l(" functionalify from "),ke=s("code"),_t=l("transformers"),bt=l(`
to simplify the evaluation of multiple combinations of models, datasets and metrics for a given task.`),yt=c(),y(S.$$.fragment),Ke=c(),fe=s("p"),$t=l("The base class for all evaluator classes:"),Qe=c(),b=s("div"),y(ee.$$.fragment),wt=c(),Pe=s("p"),Et=l(`The Evaluator class is the class from which all evaluators inherit. Refer to this class for methods shared across
different evaluators.
Base class implementing evaluator operations.`),xt=c(),B=s("div"),y(te.$$.fragment),qt=c(),A=s("p"),Tt=l("A core method of the "),Ce=s("code"),jt=l("Evaluator"),kt=l(` class, computes the metric value for a pipeline and dataset compatible
with the task specified by the `),De=s("code"),Pt=l("Evaluator"),Ct=l("."),Dt=c(),V=s("div"),y(ae.$$.fragment),Nt=c(),Ne=s("p"),It=l("Compute and return metrics."),Lt=c(),H=s("div"),y(oe.$$.fragment),Ft=c(),Ie=s("p"),Mt=l("Prepare data."),Ut=c(),W=s("div"),y(se.$$.fragment),zt=c(),Le=s("p"),At=l("Prepare metric."),Ot=c(),G=s("div"),y(ne.$$.fragment),Rt=c(),Fe=s("p"),St=l("Prepare pipeline."),Xe=c(),ge=s("p"),Bt=l("The class for text classification evaluation:"),Ye=c(),D=s("div"),y(re.$$.fragment),Vt=c(),k=s("p"),Ht=l(`Text classification evaluator.
This text classification evaluator can currently be loaded from `),he=s("a"),Wt=l("evaluator()"),Gt=l(` using the default task name
`),Me=s("code"),Jt=l("text-classification"),Kt=l(" or with a "),Ue=s("code"),Qt=l('"sentiment-analysis"'),Xt=l(` alias.
Methods in this class assume a data format compatible with the `),ze=s("code"),Yt=l("TextClassificationPipeline"),Zt=l(` - a single textual
feature as input and a categorical label as output.`),ea=c(),F=s("div"),y(le.$$.fragment),ta=c(),Ae=s("p"),aa=l("Compute the metric for a given pipeline and dataset combination."),oa=c(),y(J.$$.fragment),Ze=c(),N=s("div"),y(ie.$$.fragment),sa=c(),I=s("p"),na=l(`Image classification evaluator.
This image classification evaluator can currently be loaded from `),ve=s("a"),ra=l("evaluator()"),la=l(` using the default task name
`),Oe=s("code"),ia=l("image-classification"),ca=l(`.
Methods in this class assume a data format compatible with the `),Re=s("code"),da=l("ImageClassificationPipeline"),pa=l("."),ua=c(),M=s("div"),y(ce.$$.fragment),ma=c(),Se=s("p"),fa=l("Compute the metric for a given pipeline and dataset combination."),ga=c(),y(K.$$.fragment),this.h()},l(t){const m=Qa('[data-svelte="svelte-1phssyn"]',document.head);u=n(m,"META",{name:!0,content:!0}),m.forEach(a),T=d(t),g=n(t,"H1",{class:!0});var de=r(g);p=n(de,"A",{id:!0,class:!0,href:!0});var Be=r(p);_=n(Be,"SPAN",{});var Ve=r(_);$(o.$$.fragment,Ve),Ve.forEach(a),Be.forEach(a),h=d(de),xe=n(de,"SPAN",{});var ba=r(xe);lt=i(ba,"Evaluator"),ba.forEach(a),de.forEach(a),He=d(t),pe=n(t,"P",{});var ya=r(pe);it=i(ya,"The evaluator classes for automatic evaluation."),ya.forEach(a),We=d(t),z=n(t,"H2",{class:!0});var tt=r(z);R=n(tt,"A",{id:!0,class:!0,href:!0});var $a=r(R);qe=n($a,"SPAN",{});var wa=r(qe);$(Y.$$.fragment,wa),wa.forEach(a),$a.forEach(a),ct=d(tt),Te=n(tt,"SPAN",{});var Ea=r(Te);dt=i(Ea,"Evaluator classes"),Ea.forEach(a),tt.forEach(a),Ge=d(t),ue=n(t,"P",{});var xa=r(ue);pt=i(xa,"The main entry point for using the evaluator:"),xa.forEach(a),Je=d(t),P=n(t,"DIV",{class:!0});var _e=r(P);$(Z.$$.fragment,_e),ut=d(_e),C=n(_e,"P",{});var Q=r(C);mt=i(Q,"Utility factory method to build an "),me=n(Q,"A",{href:!0});var qa=r(me);ft=i(qa,"Evaluator"),qa.forEach(a),gt=i(Q,`.
Evaluators encapsulate a task and a default metric name. They leverage `),je=n(Q,"CODE",{});var Ta=r(je);ht=i(Ta,"pipeline"),Ta.forEach(a),vt=i(Q," functionalify from "),ke=n(Q,"CODE",{});var ja=r(ke);_t=i(ja,"transformers"),ja.forEach(a),bt=i(Q,`
to simplify the evaluation of multiple combinations of models, datasets and metrics for a given task.`),Q.forEach(a),yt=d(_e),$(S.$$.fragment,_e),_e.forEach(a),Ke=d(t),fe=n(t,"P",{});var ka=r(fe);$t=i(ka,"The base class for all evaluator classes:"),ka.forEach(a),Qe=d(t),b=n(t,"DIV",{class:!0});var j=r(b);$(ee.$$.fragment,j),wt=d(j),Pe=n(j,"P",{});var Pa=r(Pe);Et=i(Pa,`The Evaluator class is the class from which all evaluators inherit. Refer to this class for methods shared across
different evaluators.
Base class implementing evaluator operations.`),Pa.forEach(a),xt=d(j),B=n(j,"DIV",{class:!0});var at=r(B);$(te.$$.fragment,at),qt=d(at),A=n(at,"P",{});var be=r(A);Tt=i(be,"A core method of the "),Ce=n(be,"CODE",{});var Ca=r(Ce);jt=i(Ca,"Evaluator"),Ca.forEach(a),kt=i(be,` class, computes the metric value for a pipeline and dataset compatible
with the task specified by the `),De=n(be,"CODE",{});var Da=r(De);Pt=i(Da,"Evaluator"),Da.forEach(a),Ct=i(be,"."),be.forEach(a),at.forEach(a),Dt=d(j),V=n(j,"DIV",{class:!0});var ot=r(V);$(ae.$$.fragment,ot),Nt=d(ot),Ne=n(ot,"P",{});var Na=r(Ne);It=i(Na,"Compute and return metrics."),Na.forEach(a),ot.forEach(a),Lt=d(j),H=n(j,"DIV",{class:!0});var st=r(H);$(oe.$$.fragment,st),Ft=d(st),Ie=n(st,"P",{});var Ia=r(Ie);Mt=i(Ia,"Prepare data."),Ia.forEach(a),st.forEach(a),Ut=d(j),W=n(j,"DIV",{class:!0});var nt=r(W);$(se.$$.fragment,nt),zt=d(nt),Le=n(nt,"P",{});var La=r(Le);At=i(La,"Prepare metric."),La.forEach(a),nt.forEach(a),Ot=d(j),G=n(j,"DIV",{class:!0});var rt=r(G);$(ne.$$.fragment,rt),Rt=d(rt),Fe=n(rt,"P",{});var Fa=r(Fe);St=i(Fa,"Prepare pipeline."),Fa.forEach(a),rt.forEach(a),j.forEach(a),Xe=d(t),ge=n(t,"P",{});var Ma=r(ge);Bt=i(Ma,"The class for text classification evaluation:"),Ma.forEach(a),Ye=d(t),D=n(t,"DIV",{class:!0});var ye=r(D);$(re.$$.fragment,ye),Vt=d(ye),k=n(ye,"P",{});var U=r(k);Ht=i(U,`Text classification evaluator.
This text classification evaluator can currently be loaded from `),he=n(U,"A",{href:!0});var Ua=r(he);Wt=i(Ua,"evaluator()"),Ua.forEach(a),Gt=i(U,` using the default task name
`),Me=n(U,"CODE",{});var za=r(Me);Jt=i(za,"text-classification"),za.forEach(a),Kt=i(U," or with a "),Ue=n(U,"CODE",{});var Aa=r(Ue);Qt=i(Aa,'"sentiment-analysis"'),Aa.forEach(a),Xt=i(U,` alias.
Methods in this class assume a data format compatible with the `),ze=n(U,"CODE",{});var Oa=r(ze);Yt=i(Oa,"TextClassificationPipeline"),Oa.forEach(a),Zt=i(U,` - a single textual
feature as input and a categorical label as output.`),U.forEach(a),ea=d(ye),F=n(ye,"DIV",{class:!0});var $e=r(F);$(le.$$.fragment,$e),ta=d($e),Ae=n($e,"P",{});var Ra=r(Ae);aa=i(Ra,"Compute the metric for a given pipeline and dataset combination."),Ra.forEach(a),oa=d($e),$(J.$$.fragment,$e),$e.forEach(a),ye.forEach(a),Ze=d(t),N=n(t,"DIV",{class:!0});var we=r(N);$(ie.$$.fragment,we),sa=d(we),I=n(we,"P",{});var X=r(I);na=i(X,`Image classification evaluator.
This image classification evaluator can currently be loaded from `),ve=n(X,"A",{href:!0});var Sa=r(ve);ra=i(Sa,"evaluator()"),Sa.forEach(a),la=i(X,` using the default task name
`),Oe=n(X,"CODE",{});var Ba=r(Oe);ia=i(Ba,"image-classification"),Ba.forEach(a),ca=i(X,`.
Methods in this class assume a data format compatible with the `),Re=n(X,"CODE",{});var Va=r(Re);da=i(Va,"ImageClassificationPipeline"),Va.forEach(a),pa=i(X,"."),X.forEach(a),ua=d(we),M=n(we,"DIV",{class:!0});var Ee=r(M);$(ce.$$.fragment,Ee),ma=d(Ee),Se=n(Ee,"P",{});var Ha=r(Se);fa=i(Ha,"Compute the metric for a given pipeline and dataset combination."),Ha.forEach(a),ga=d(Ee),$(K.$$.fragment,Ee),Ee.forEach(a),we.forEach(a),this.h()},h(){v(u,"name","hf:doc:metadata"),v(u,"content",JSON.stringify(ao)),v(p,"id","evaluator"),v(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(p,"href","#evaluator"),v(g,"class","relative group"),v(R,"id","evaluate.evaluator"),v(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(R,"href","#evaluate.evaluator"),v(z,"class","relative group"),v(me,"href","/docs/evaluate/pr_178/en/package_reference/evaluator_classes#evaluate.Evaluator"),v(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(he,"href","/docs/evaluate/pr_178/en/package_reference/evaluator_classes#evaluate.evaluator"),v(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(ve,"href","/docs/evaluate/pr_178/en/package_reference/evaluator_classes#evaluate.evaluator"),v(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,m){e(document.head,u),f(t,T,m),f(t,g,m),e(g,p),e(p,_),w(o,_,null),e(g,h),e(g,xe),e(xe,lt),f(t,He,m),f(t,pe,m),e(pe,it),f(t,We,m),f(t,z,m),e(z,R),e(R,qe),w(Y,qe,null),e(z,ct),e(z,Te),e(Te,dt),f(t,Ge,m),f(t,ue,m),e(ue,pt),f(t,Je,m),f(t,P,m),w(Z,P,null),e(P,ut),e(P,C),e(C,mt),e(C,me),e(me,ft),e(C,gt),e(C,je),e(je,ht),e(C,vt),e(C,ke),e(ke,_t),e(C,bt),e(P,yt),w(S,P,null),f(t,Ke,m),f(t,fe,m),e(fe,$t),f(t,Qe,m),f(t,b,m),w(ee,b,null),e(b,wt),e(b,Pe),e(Pe,Et),e(b,xt),e(b,B),w(te,B,null),e(B,qt),e(B,A),e(A,Tt),e(A,Ce),e(Ce,jt),e(A,kt),e(A,De),e(De,Pt),e(A,Ct),e(b,Dt),e(b,V),w(ae,V,null),e(V,Nt),e(V,Ne),e(Ne,It),e(b,Lt),e(b,H),w(oe,H,null),e(H,Ft),e(H,Ie),e(Ie,Mt),e(b,Ut),e(b,W),w(se,W,null),e(W,zt),e(W,Le),e(Le,At),e(b,Ot),e(b,G),w(ne,G,null),e(G,Rt),e(G,Fe),e(Fe,St),f(t,Xe,m),f(t,ge,m),e(ge,Bt),f(t,Ye,m),f(t,D,m),w(re,D,null),e(D,Vt),e(D,k),e(k,Ht),e(k,he),e(he,Wt),e(k,Gt),e(k,Me),e(Me,Jt),e(k,Kt),e(k,Ue),e(Ue,Qt),e(k,Xt),e(k,ze),e(ze,Yt),e(k,Zt),e(D,ea),e(D,F),w(le,F,null),e(F,ta),e(F,Ae),e(Ae,aa),e(F,oa),w(J,F,null),f(t,Ze,m),f(t,N,m),w(ie,N,null),e(N,sa),e(N,I),e(I,na),e(I,ve),e(ve,ra),e(I,la),e(I,Oe),e(Oe,ia),e(I,ca),e(I,Re),e(Re,da),e(I,pa),e(N,ua),e(N,M),w(ce,M,null),e(M,ma),e(M,Se),e(Se,fa),e(M,ga),w(K,M,null),et=!0},p(t,[m]){const de={};m&2&&(de.$$scope={dirty:m,ctx:t}),S.$set(de);const Be={};m&2&&(Be.$$scope={dirty:m,ctx:t}),J.$set(Be);const Ve={};m&2&&(Ve.$$scope={dirty:m,ctx:t}),K.$set(Ve)},i(t){et||(E(o.$$.fragment,t),E(Y.$$.fragment,t),E(Z.$$.fragment,t),E(S.$$.fragment,t),E(ee.$$.fragment,t),E(te.$$.fragment,t),E(ae.$$.fragment,t),E(oe.$$.fragment,t),E(se.$$.fragment,t),E(ne.$$.fragment,t),E(re.$$.fragment,t),E(le.$$.fragment,t),E(J.$$.fragment,t),E(ie.$$.fragment,t),E(ce.$$.fragment,t),E(K.$$.fragment,t),et=!0)},o(t){x(o.$$.fragment,t),x(Y.$$.fragment,t),x(Z.$$.fragment,t),x(S.$$.fragment,t),x(ee.$$.fragment,t),x(te.$$.fragment,t),x(ae.$$.fragment,t),x(oe.$$.fragment,t),x(se.$$.fragment,t),x(ne.$$.fragment,t),x(re.$$.fragment,t),x(le.$$.fragment,t),x(J.$$.fragment,t),x(ie.$$.fragment,t),x(ce.$$.fragment,t),x(K.$$.fragment,t),et=!1},d(t){a(u),t&&a(T),t&&a(g),q(o),t&&a(He),t&&a(pe),t&&a(We),t&&a(z),q(Y),t&&a(Ge),t&&a(ue),t&&a(Je),t&&a(P),q(Z),q(S),t&&a(Ke),t&&a(fe),t&&a(Qe),t&&a(b),q(ee),q(te),q(ae),q(oe),q(se),q(ne),t&&a(Xe),t&&a(ge),t&&a(Ye),t&&a(D),q(re),q(le),q(J),t&&a(Ze),t&&a(N),q(ie),q(ce),q(K)}}}const ao={local:"evaluator",sections:[{local:"evaluate.evaluator",title:"Evaluator classes"}],title:"Evaluator"};function oo(O){return Xa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class co extends Ga{constructor(u){super();Ja(this,u,oo,to,Ka,{})}}export{co as default,ao as metadata};
