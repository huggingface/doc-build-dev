import{S as Uf,i as zf,s as Mf,e as a,k as f,w as v,t as o,M as Yf,c as l,d as t,m as p,a as n,x as b,h as g,b as u,F as r,g as i,y as h,q as m,o as d,B as c,v as Jf}from"../../chunks/vendor-e830fc9c.js";import{C as M,T as Kf}from"../../chunks/CodeBlock-7b28e4e9.js";import{D as V}from"../../chunks/Docstring-785cfc11.js";import{I as H}from"../../chunks/IconCopyLink-af4c5c5b.js";function Qf(Ba){let E,me,w,_,N,P,Qe,Y,J,de,D,K,j,Xe,Ze,L,x,et,Q,X,tt,ce,R,W,$,rt,B,Z,at;return{c(){E=a("p"),me=o("HuggingFace datasets library has following logging levels:"),w=f(),_=a("ul"),N=a("li"),P=a("em"),Qe=o("evaluate.logging.CRITICAL"),Y=o(", "),J=a("em"),de=o("evaluate.logging.FATAL"),D=f(),K=a("li"),j=a("em"),Xe=o("evaluate.logging.ERROR"),Ze=f(),L=a("li"),x=a("em"),et=o("evaluate.logging.WARNING"),Q=o(", "),X=a("em"),tt=o("evaluate.logging.WARN"),ce=f(),R=a("li"),W=a("em"),$=o("evaluate.logging.INFO"),rt=f(),B=a("li"),Z=a("em"),at=o("evaluate.logging.DEBUG")},l(y){E=l(y,"P",{});var q=n(E);me=g(q,"HuggingFace datasets library has following logging levels:"),q.forEach(t),w=p(y),_=l(y,"UL",{});var I=n(_);N=l(I,"LI",{});var U=n(N);P=l(U,"EM",{});var Dt=n(P);Qe=g(Dt,"evaluate.logging.CRITICAL"),Dt.forEach(t),Y=g(U,", "),J=l(U,"EM",{});var Lt=n(J);de=g(Lt,"evaluate.logging.FATAL"),Lt.forEach(t),U.forEach(t),D=p(I),K=l(I,"LI",{});var _e=n(K);j=l(_e,"EM",{});var kt=n(j);Xe=g(kt,"evaluate.logging.ERROR"),kt.forEach(t),_e.forEach(t),Ze=p(I),L=l(I,"LI",{});var $e=n(L);x=l($e,"EM",{});var ye=n(x);et=g(ye,"evaluate.logging.WARNING"),ye.forEach(t),Q=g($e,", "),X=l($e,"EM",{});var jt=n(X);tt=g(jt,"evaluate.logging.WARN"),jt.forEach(t),$e.forEach(t),ce=p(I),R=l(I,"LI",{});var Bt=n(R);W=l(Bt,"EM",{});var Ee=n(W);$=g(Ee,"evaluate.logging.INFO"),Ee.forEach(t),Bt.forEach(t),rt=p(I),B=l(I,"LI",{});var Gt=n(B);Z=l(Gt,"EM",{});var Vt=n(Z);at=g(Vt,"evaluate.logging.DEBUG"),Vt.forEach(t),Gt.forEach(t),I.forEach(t)},m(y,q){i(y,E,q),r(E,me),i(y,w,q),i(y,_,q),r(_,N),r(N,P),r(P,Qe),r(N,Y),r(N,J),r(J,de),r(_,D),r(_,K),r(K,j),r(j,Xe),r(_,Ze),r(_,L),r(L,x),r(x,et),r(L,Q),r(L,X),r(X,tt),r(_,ce),r(_,R),r(R,W),r(W,$),r(_,rt),r(_,B),r(B,Z),r(Z,at)},d(y){y&&t(E),y&&t(w),y&&t(_)}}}function Xf(Ba){let E,me,w,_,N,P,Qe,Y,J,de,D,K,j,Xe,Ze,L,x,et,Q,X,tt,ce,R,W,$,rt,B,Z,at,y,q,I,U,Dt,Lt,_e,kt,$e,ye,jt,Bt,Ee,Gt,Vt,Ga,lt,Va,Ht,kn,Ha,we,Wt,qt,jn,Bn,Gn,Ut,zt,Vn,Hn,Wa,xe,Wn,Dr,qn,Un,qa,A,Ie,Lr,zn,Mn,kr,Yn,Jn,Kn,Mt,jr,Qn,Xn,Zn,Ae,Br,es,ts,Gr,rs,as,ls,Yt,Vr,ns,ss,is,Jt,Hr,os,gs,Ua,k,fs,Wr,ps,us,Kt,vs,bs,Qt,hs,ms,za,ee,Te,qr,nt,ds,Ur,cs,Ma,G,st,_s,zr,$s,ys,Ne,Ya,te,it,Es,Mr,ws,Ja,O,ot,xs,Yr,Is,As,Jr,Ts,Ns,Xt,Ps,Kr,Rs,Ka,S,gt,Os,Qr,Ss,Fs,Xr,Cs,Ds,Zt,Ls,Zr,ks,Qa,F,ft,js,ea,Bs,Gs,ta,Vs,Hs,er,Ws,ra,qs,Xa,C,pt,Us,aa,zs,Ms,la,Ys,Js,tr,Ks,na,Qs,Za,re,ut,Xs,sa,Zs,el,ae,vt,ei,ia,ti,tl,le,bt,ri,oa,ai,rl,ne,ht,li,ga,ni,al,se,mt,si,fa,ii,ll,ie,Pe,pa,dt,oi,ua,gi,nl,oe,Re,va,ct,fi,ba,pi,sl,rr,ui,il,ar,vi,ol,lr,bi,gl,Oe,hi,ha,mi,di,fl,nr,ci,pl,_t,ul,ge,Se,ma,$t,_i,da,$i,vl,sr,yi,bl,ir,Ei,hl,or,wi,ml,Fe,xi,ca,Ii,Ai,dl,gr,Ti,cl,yt,_l,fe,Ce,_a,Et,Ni,$a,Pi,$l,fr,Ri,yl,pr,Oi,El,ur,Si,wl,De,Fi,ya,Ci,Di,xl,vr,Li,Il,wt,Al,pe,Le,Ea,xt,ki,wa,ji,Tl,br,Bi,Nl,hr,Gi,Pl,mr,Vi,Rl,ke,Hi,xa,Wi,qi,Ol,dr,Ui,Sl,It,Fl,ue,je,Ia,At,zi,Aa,Mi,Cl,cr,Yi,Dl,_r,Ji,Ll,$r,Ki,kl,Be,Qi,Ta,Xi,Zi,jl,yr,eo,Bl,Tt,Gl,ve,Ge,Na,Nt,to,Pa,ro,Vl,Er,ao,Hl,wr,lo,Wl,xr,no,ql,Ve,so,Ra,io,oo,Ul,Ir,go,zl,Pt,Ml,be,He,Oa,Rt,fo,Sa,po,Yl,Ar,uo,Jl,Tr,vo,Kl,Nr,bo,Ql,We,ho,Fa,mo,co,Xl,Pr,_o,Zl,Ot,en,he,qe,Ca,St,$o,Da,yo,tn,Rr,Eo,rn,Or,wo,an,Sr,xo,ln,Ue,Io,La,Ao,To,nn,Fr,No,sn,Ft,on;return P=new H({}),R=new M({props:{code:`import datasets
evaluate.logging.set_verbosity_info()`,highlighted:`<span class="hljs-keyword">import</span> datasets
evaluate.logging.set_verbosity_info()`}}),lt=new M({props:{code:"DATASETS_VERBOSITY=error ./myprogram.py",highlighted:"DATASETS_VERBOSITY=error ./myprogram.py"}}),nt=new H({}),st=new V({props:{name:"evaluate.utils.logging.get_verbosity",anchor:"evaluate.utils.logging.get_verbosity",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L87",returnDescription:`
<p>Logging level, e.g., <code>evaluate.logging.DEBUG</code> and <code>evaluate.logging.INFO</code>.</p>
`}}),Ne=new Kf({props:{$$slots:{default:[Qf]},$$scope:{ctx:Ba}}}),it=new V({props:{name:"evaluate.utils.logging.set_verbosity",anchor:"evaluate.utils.logging.set_verbosity",parameters:[{name:"verbosity",val:": int"}],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L106"}}),ot=new V({props:{name:"evaluate.utils.logging.set_verbosity_info",anchor:"evaluate.utils.logging.set_verbosity_info",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L115"}}),gt=new V({props:{name:"evaluate.utils.logging.set_verbosity_warning",anchor:"evaluate.utils.logging.set_verbosity_warning",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L125"}}),ft=new V({props:{name:"evaluate.utils.logging.set_verbosity_debug",anchor:"evaluate.utils.logging.set_verbosity_debug",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L135"}}),pt=new V({props:{name:"evaluate.utils.logging.set_verbosity_error",anchor:"evaluate.utils.logging.set_verbosity_error",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L145"}}),ut=new V({props:{name:"evaluate.utils.logging.disable_propagation",anchor:"evaluate.utils.logging.disable_propagation",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L155"}}),vt=new V({props:{name:"evaluate.utils.logging.enable_propagation",anchor:"evaluate.utils.logging.enable_propagation",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L162"}}),bt=new V({props:{name:"evaluate.utils.logging.get_logger",anchor:"evaluate.utils.logging.get_logger",parameters:[{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L78"}}),ht=new V({props:{name:"evaluate.enable_progress_bar",anchor:"evaluate.enable_progress_bar",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L227"}}),mt=new V({props:{name:"evaluate.disable_progress_bar",anchor:"evaluate.disable_progress_bar",parameters:[],source:"https://github.com/huggingface/evaluate/blob/vr_45/src/evaluate/utils/logging.py#L233"}}),dt=new H({}),ct=new H({}),_t=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),$t=new H({}),yt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Et=new H({}),wt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),xt=new H({}),It=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),At=new H({}),Tt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Nt=new H({}),Pt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Rt=new H({}),Ot=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),St=new H({}),Ft=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),{c(){E=a("meta"),me=f(),w=a("h1"),_=a("a"),N=a("span"),v(P.$$.fragment),Qe=f(),Y=a("span"),J=o("Logging methods"),de=f(),D=a("p"),K=o("\u{1F917} Datasets strives to be transparent and explicit about how it works, but this can be quite verbose at times. We have included a series of logging methods which allow you to easily adjust the level of verbosity of the entire library. Currently the default verbosity of the library is set to "),j=a("code"),Xe=o("WARNING"),Ze=o("."),L=f(),x=a("p"),et=o("To change the level of verbosity, use one of the direct setters. For instance, here is how to change the verbosity to the "),Q=a("code"),X=o("INFO"),tt=o(" level:"),ce=f(),v(R.$$.fragment),W=f(),$=a("p"),rt=o("You can also use the environment variable "),B=a("code"),Z=o("DATASETS_VERBOSITY"),at=o(" to override the default verbosity, and set it to one of the following: "),y=a("code"),q=o("debug"),I=o(", "),U=a("code"),Dt=o("info"),Lt=o(", "),_e=a("code"),kt=o("warning"),$e=o(", "),ye=a("code"),jt=o("error"),Bt=o(", "),Ee=a("code"),Gt=o("critical"),Vt=o(":"),Ga=f(),v(lt.$$.fragment),Va=f(),Ht=a("p"),kn=o("All the methods of this logging module are documented below. The main ones are:"),Ha=f(),we=a("ul"),Wt=a("li"),qt=a("a"),jn=o("logging.get_verbosity()"),Bn=o(" to get the current level of verbosity in the logger"),Gn=f(),Ut=a("li"),zt=a("a"),Vn=o("logging.set_verbosity()"),Hn=o(" to set the verbosity to the level of your choice"),Wa=f(),xe=a("p"),Wn=o("In order from the least to the most verbose (with their corresponding "),Dr=a("code"),qn=o("int"),Un=o(" values):"),qa=f(),A=a("ol"),Ie=a("li"),Lr=a("code"),zn=o("logging.CRITICAL"),Mn=o(" or "),kr=a("code"),Yn=o("logging.FATAL"),Jn=o(" (int value, 50): only report the most critical errors."),Kn=f(),Mt=a("li"),jr=a("code"),Qn=o("logging.ERROR"),Xn=o(" (int value, 40): only report errors."),Zn=f(),Ae=a("li"),Br=a("code"),es=o("logging.WARNING"),ts=o(" or "),Gr=a("code"),rs=o("logging.WARN"),as=o(" (int value, 30): only reports error and warnings. This the default level used by the library."),ls=f(),Yt=a("li"),Vr=a("code"),ns=o("logging.INFO"),ss=o(" (int value, 20): reports error, warnings and basic information."),is=f(),Jt=a("li"),Hr=a("code"),os=o("logging.DEBUG"),gs=o(" (int value, 10): report all information."),Ua=f(),k=a("p"),fs=o("By default, "),Wr=a("code"),ps=o("tqdm"),us=o(" progress bars will be displayed during dataset download and preprocessing. "),Kt=a("a"),vs=o("logging.disable_progress_bar()"),bs=o(" and "),Qt=a("a"),hs=o("logging.enable_progress_bar()"),ms=o(" can be used to suppress or unsuppress this behavior."),za=f(),ee=a("h2"),Te=a("a"),qr=a("span"),v(nt.$$.fragment),ds=f(),Ur=a("span"),cs=o("Functions"),Ma=f(),G=a("div"),v(st.$$.fragment),_s=f(),zr=a("p"),$s=o("Return the current level for the HuggingFace datasets library\u2019s root logger."),ys=f(),v(Ne.$$.fragment),Ya=f(),te=a("div"),v(it.$$.fragment),Es=f(),Mr=a("p"),ws=o("Set the level for the HuggingFace datasets library\u2019s root logger."),Ja=f(),O=a("div"),v(ot.$$.fragment),xs=f(),Yr=a("p"),Is=o("Set the level for the HuggingFace datasets library\u2019s root logger to INFO."),As=f(),Jr=a("p"),Ts=o("This will display most of the logging information and tqdm bars."),Ns=f(),Xt=a("p"),Ps=o("Shortcut to "),Kr=a("code"),Rs=o("evaluate.logging.set_verbosity(evaluate.logging.INFO)"),Ka=f(),S=a("div"),v(gt.$$.fragment),Os=f(),Qr=a("p"),Ss=o("Set the level for the HuggingFace datasets library\u2019s root logger to WARNING."),Fs=f(),Xr=a("p"),Cs=o("This will display only the warning and errors logging information and tqdm bars."),Ds=f(),Zt=a("p"),Ls=o("Shortcut to "),Zr=a("code"),ks=o("evaluate.logging.set_verbosity(evaluate.logging.WARNING)"),Qa=f(),F=a("div"),v(ft.$$.fragment),js=f(),ea=a("p"),Bs=o("Set the level for the HuggingFace datasets library\u2019s root logger to DEBUG."),Gs=f(),ta=a("p"),Vs=o("This will display all the logging information and tqdm bars."),Hs=f(),er=a("p"),Ws=o("Shortcut to "),ra=a("code"),qs=o("evaluate.logging.set_verbosity(evaluate.logging.DEBUG)"),Xa=f(),C=a("div"),v(pt.$$.fragment),Us=f(),aa=a("p"),zs=o("Set the level for the HuggingFace datasets library\u2019s root logger to ERROR."),Ms=f(),la=a("p"),Ys=o("This will display only the errors logging information and tqdm bars."),Js=f(),tr=a("p"),Ks=o("Shortcut to "),na=a("code"),Qs=o("evaluate.logging.set_verbosity(evaluate.logging.ERROR)"),Za=f(),re=a("div"),v(ut.$$.fragment),Xs=f(),sa=a("p"),Zs=o(`Disable propagation of the library log outputs.
Note that log propagation is disabled by default.`),el=f(),ae=a("div"),v(vt.$$.fragment),ei=f(),ia=a("p"),ti=o(`Enable propagation of the library log outputs.
Please disable the HuggingFace datasets library\u2019s default handler to prevent double logging if the root logger has
been configured.`),tl=f(),le=a("div"),v(bt.$$.fragment),ri=f(),oa=a("p"),ai=o(`Return a logger with the specified name.
This function can be used in dataset and metrics scripts.`),rl=f(),ne=a("div"),v(ht.$$.fragment),li=f(),ga=a("p"),ni=o("Enable tqdm progress bar."),al=f(),se=a("div"),v(mt.$$.fragment),si=f(),fa=a("p"),ii=o("Enable tqdm progress bar."),ll=f(),ie=a("h2"),Pe=a("a"),pa=a("span"),v(dt.$$.fragment),oi=f(),ua=a("span"),gi=o("Levels"),nl=f(),oe=a("h3"),Re=a("a"),va=a("span"),v(ct.$$.fragment),fi=f(),ba=a("span"),pi=o("evaluate.logging.CRITICAL"),sl=f(),rr=a("p"),ui=o("evaluate.logging.CRITICAL = 50"),il=f(),ar=a("p"),vi=o("int([x]) -> integer"),ol=f(),lr=a("p"),bi=o("int(x, base=10) -> integer"),gl=f(),Oe=a("p"),hi=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ha=a("strong"),mi=o("int"),di=o(`().  For floating point
numbers, this truncates towards zero.`),fl=f(),nr=a("p"),ci=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),pl=f(),v(_t.$$.fragment),ul=f(),ge=a("h3"),Se=a("a"),ma=a("span"),v($t.$$.fragment),_i=f(),da=a("span"),$i=o("evaluate.logging.DEBUG"),vl=f(),sr=a("p"),yi=o("evaluate.logging.DEBUG = 10"),bl=f(),ir=a("p"),Ei=o("int([x]) -> integer"),hl=f(),or=a("p"),wi=o("int(x, base=10) -> integer"),ml=f(),Fe=a("p"),xi=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ca=a("strong"),Ii=o("int"),Ai=o(`().  For floating point
numbers, this truncates towards zero.`),dl=f(),gr=a("p"),Ti=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),cl=f(),v(yt.$$.fragment),_l=f(),fe=a("h3"),Ce=a("a"),_a=a("span"),v(Et.$$.fragment),Ni=f(),$a=a("span"),Pi=o("evaluate.logging.ERROR"),$l=f(),fr=a("p"),Ri=o("evaluate.logging.ERROR = 40"),yl=f(),pr=a("p"),Oi=o("int([x]) -> integer"),El=f(),ur=a("p"),Si=o("int(x, base=10) -> integer"),wl=f(),De=a("p"),Fi=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ya=a("strong"),Ci=o("int"),Di=o(`().  For floating point
numbers, this truncates towards zero.`),xl=f(),vr=a("p"),Li=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Il=f(),v(wt.$$.fragment),Al=f(),pe=a("h3"),Le=a("a"),Ea=a("span"),v(xt.$$.fragment),ki=f(),wa=a("span"),ji=o("evaluate.logging.FATAL"),Tl=f(),br=a("p"),Bi=o("evaluate.logging.FATAL = 50"),Nl=f(),hr=a("p"),Gi=o("int([x]) -> integer"),Pl=f(),mr=a("p"),Vi=o("int(x, base=10) -> integer"),Rl=f(),ke=a("p"),Hi=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),xa=a("strong"),Wi=o("int"),qi=o(`().  For floating point
numbers, this truncates towards zero.`),Ol=f(),dr=a("p"),Ui=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Sl=f(),v(It.$$.fragment),Fl=f(),ue=a("h3"),je=a("a"),Ia=a("span"),v(At.$$.fragment),zi=f(),Aa=a("span"),Mi=o("evaluate.logging.INFO"),Cl=f(),cr=a("p"),Yi=o("evaluate.logging.INFO = 20"),Dl=f(),_r=a("p"),Ji=o("int([x]) -> integer"),Ll=f(),$r=a("p"),Ki=o("int(x, base=10) -> integer"),kl=f(),Be=a("p"),Qi=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ta=a("strong"),Xi=o("int"),Zi=o(`().  For floating point
numbers, this truncates towards zero.`),jl=f(),yr=a("p"),eo=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Bl=f(),v(Tt.$$.fragment),Gl=f(),ve=a("h3"),Ge=a("a"),Na=a("span"),v(Nt.$$.fragment),to=f(),Pa=a("span"),ro=o("evaluate.logging.NOTSET"),Vl=f(),Er=a("p"),ao=o("evaluate.logging.NOTSET = 0"),Hl=f(),wr=a("p"),lo=o("int([x]) -> integer"),Wl=f(),xr=a("p"),no=o("int(x, base=10) -> integer"),ql=f(),Ve=a("p"),so=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ra=a("strong"),io=o("int"),oo=o(`().  For floating point
numbers, this truncates towards zero.`),Ul=f(),Ir=a("p"),go=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),zl=f(),v(Pt.$$.fragment),Ml=f(),be=a("h3"),He=a("a"),Oa=a("span"),v(Rt.$$.fragment),fo=f(),Sa=a("span"),po=o("evaluate.logging.WARN"),Yl=f(),Ar=a("p"),uo=o("evaluate.logging.WARN = 30"),Jl=f(),Tr=a("p"),vo=o("int([x]) -> integer"),Kl=f(),Nr=a("p"),bo=o("int(x, base=10) -> integer"),Ql=f(),We=a("p"),ho=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Fa=a("strong"),mo=o("int"),co=o(`().  For floating point
numbers, this truncates towards zero.`),Xl=f(),Pr=a("p"),_o=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Zl=f(),v(Ot.$$.fragment),en=f(),he=a("h3"),qe=a("a"),Ca=a("span"),v(St.$$.fragment),$o=f(),Da=a("span"),yo=o("evaluate.logging.WARNING"),tn=f(),Rr=a("p"),Eo=o("evaluate.logging.WARNING = 30"),rn=f(),Or=a("p"),wo=o("int([x]) -> integer"),an=f(),Sr=a("p"),xo=o("int(x, base=10) -> integer"),ln=f(),Ue=a("p"),Io=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),La=a("strong"),Ao=o("int"),To=o(`().  For floating point
numbers, this truncates towards zero.`),nn=f(),Fr=a("p"),No=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),sn=f(),v(Ft.$$.fragment),this.h()},l(e){const s=Yf('[data-svelte="svelte-1phssyn"]',document.head);E=l(s,"META",{name:!0,content:!0}),s.forEach(t),me=p(e),w=l(e,"H1",{class:!0});var Ct=n(w);_=l(Ct,"A",{id:!0,class:!0,href:!0});var jo=n(_);N=l(jo,"SPAN",{});var Bo=n(N);b(P.$$.fragment,Bo),Bo.forEach(t),jo.forEach(t),Qe=p(Ct),Y=l(Ct,"SPAN",{});var Go=n(Y);J=g(Go,"Logging methods"),Go.forEach(t),Ct.forEach(t),de=p(e),D=l(e,"P",{});var gn=n(D);K=g(gn,"\u{1F917} Datasets strives to be transparent and explicit about how it works, but this can be quite verbose at times. We have included a series of logging methods which allow you to easily adjust the level of verbosity of the entire library. Currently the default verbosity of the library is set to "),j=l(gn,"CODE",{});var Vo=n(j);Xe=g(Vo,"WARNING"),Vo.forEach(t),Ze=g(gn,"."),gn.forEach(t),L=p(e),x=l(e,"P",{});var fn=n(x);et=g(fn,"To change the level of verbosity, use one of the direct setters. For instance, here is how to change the verbosity to the "),Q=l(fn,"CODE",{});var Ho=n(Q);X=g(Ho,"INFO"),Ho.forEach(t),tt=g(fn," level:"),fn.forEach(t),ce=p(e),b(R.$$.fragment,e),W=p(e),$=l(e,"P",{});var T=n($);rt=g(T,"You can also use the environment variable "),B=l(T,"CODE",{});var Wo=n(B);Z=g(Wo,"DATASETS_VERBOSITY"),Wo.forEach(t),at=g(T," to override the default verbosity, and set it to one of the following: "),y=l(T,"CODE",{});var qo=n(y);q=g(qo,"debug"),qo.forEach(t),I=g(T,", "),U=l(T,"CODE",{});var Uo=n(U);Dt=g(Uo,"info"),Uo.forEach(t),Lt=g(T,", "),_e=l(T,"CODE",{});var zo=n(_e);kt=g(zo,"warning"),zo.forEach(t),$e=g(T,", "),ye=l(T,"CODE",{});var Mo=n(ye);jt=g(Mo,"error"),Mo.forEach(t),Bt=g(T,", "),Ee=l(T,"CODE",{});var Yo=n(Ee);Gt=g(Yo,"critical"),Yo.forEach(t),Vt=g(T,":"),T.forEach(t),Ga=p(e),b(lt.$$.fragment,e),Va=p(e),Ht=l(e,"P",{});var Jo=n(Ht);kn=g(Jo,"All the methods of this logging module are documented below. The main ones are:"),Jo.forEach(t),Ha=p(e),we=l(e,"UL",{});var pn=n(we);Wt=l(pn,"LI",{});var Po=n(Wt);qt=l(Po,"A",{href:!0});var Ko=n(qt);jn=g(Ko,"logging.get_verbosity()"),Ko.forEach(t),Bn=g(Po," to get the current level of verbosity in the logger"),Po.forEach(t),Gn=p(pn),Ut=l(pn,"LI",{});var Ro=n(Ut);zt=l(Ro,"A",{href:!0});var Qo=n(zt);Vn=g(Qo,"logging.set_verbosity()"),Qo.forEach(t),Hn=g(Ro," to set the verbosity to the level of your choice"),Ro.forEach(t),pn.forEach(t),Wa=p(e),xe=l(e,"P",{});var un=n(xe);Wn=g(un,"In order from the least to the most verbose (with their corresponding "),Dr=l(un,"CODE",{});var Xo=n(Dr);qn=g(Xo,"int"),Xo.forEach(t),Un=g(un," values):"),un.forEach(t),qa=p(e),A=l(e,"OL",{});var z=n(A);Ie=l(z,"LI",{});var ka=n(Ie);Lr=l(ka,"CODE",{});var Zo=n(Lr);zn=g(Zo,"logging.CRITICAL"),Zo.forEach(t),Mn=g(ka," or "),kr=l(ka,"CODE",{});var eg=n(kr);Yn=g(eg,"logging.FATAL"),eg.forEach(t),Jn=g(ka," (int value, 50): only report the most critical errors."),ka.forEach(t),Kn=p(z),Mt=l(z,"LI",{});var Oo=n(Mt);jr=l(Oo,"CODE",{});var tg=n(jr);Qn=g(tg,"logging.ERROR"),tg.forEach(t),Xn=g(Oo," (int value, 40): only report errors."),Oo.forEach(t),Zn=p(z),Ae=l(z,"LI",{});var ja=n(Ae);Br=l(ja,"CODE",{});var rg=n(Br);es=g(rg,"logging.WARNING"),rg.forEach(t),ts=g(ja," or "),Gr=l(ja,"CODE",{});var ag=n(Gr);rs=g(ag,"logging.WARN"),ag.forEach(t),as=g(ja," (int value, 30): only reports error and warnings. This the default level used by the library."),ja.forEach(t),ls=p(z),Yt=l(z,"LI",{});var So=n(Yt);Vr=l(So,"CODE",{});var lg=n(Vr);ns=g(lg,"logging.INFO"),lg.forEach(t),ss=g(So," (int value, 20): reports error, warnings and basic information."),So.forEach(t),is=p(z),Jt=l(z,"LI",{});var Fo=n(Jt);Hr=l(Fo,"CODE",{});var ng=n(Hr);os=g(ng,"logging.DEBUG"),ng.forEach(t),gs=g(Fo," (int value, 10): report all information."),Fo.forEach(t),z.forEach(t),Ua=p(e),k=l(e,"P",{});var ze=n(k);fs=g(ze,"By default, "),Wr=l(ze,"CODE",{});var sg=n(Wr);ps=g(sg,"tqdm"),sg.forEach(t),us=g(ze," progress bars will be displayed during dataset download and preprocessing. "),Kt=l(ze,"A",{href:!0});var ig=n(Kt);vs=g(ig,"logging.disable_progress_bar()"),ig.forEach(t),bs=g(ze," and "),Qt=l(ze,"A",{href:!0});var og=n(Qt);hs=g(og,"logging.enable_progress_bar()"),og.forEach(t),ms=g(ze," can be used to suppress or unsuppress this behavior."),ze.forEach(t),za=p(e),ee=l(e,"H2",{class:!0});var vn=n(ee);Te=l(vn,"A",{id:!0,class:!0,href:!0});var gg=n(Te);qr=l(gg,"SPAN",{});var fg=n(qr);b(nt.$$.fragment,fg),fg.forEach(t),gg.forEach(t),ds=p(vn),Ur=l(vn,"SPAN",{});var pg=n(Ur);cs=g(pg,"Functions"),pg.forEach(t),vn.forEach(t),Ma=p(e),G=l(e,"DIV",{class:!0});var Cr=n(G);b(st.$$.fragment,Cr),_s=p(Cr),zr=l(Cr,"P",{});var ug=n(zr);$s=g(ug,"Return the current level for the HuggingFace datasets library\u2019s root logger."),ug.forEach(t),ys=p(Cr),b(Ne.$$.fragment,Cr),Cr.forEach(t),Ya=p(e),te=l(e,"DIV",{class:!0});var bn=n(te);b(it.$$.fragment,bn),Es=p(bn),Mr=l(bn,"P",{});var vg=n(Mr);ws=g(vg,"Set the level for the HuggingFace datasets library\u2019s root logger."),vg.forEach(t),bn.forEach(t),Ja=p(e),O=l(e,"DIV",{class:!0});var Me=n(O);b(ot.$$.fragment,Me),xs=p(Me),Yr=l(Me,"P",{});var bg=n(Yr);Is=g(bg,"Set the level for the HuggingFace datasets library\u2019s root logger to INFO."),bg.forEach(t),As=p(Me),Jr=l(Me,"P",{});var hg=n(Jr);Ts=g(hg,"This will display most of the logging information and tqdm bars."),hg.forEach(t),Ns=p(Me),Xt=l(Me,"P",{});var Co=n(Xt);Ps=g(Co,"Shortcut to "),Kr=l(Co,"CODE",{});var mg=n(Kr);Rs=g(mg,"evaluate.logging.set_verbosity(evaluate.logging.INFO)"),mg.forEach(t),Co.forEach(t),Me.forEach(t),Ka=p(e),S=l(e,"DIV",{class:!0});var Ye=n(S);b(gt.$$.fragment,Ye),Os=p(Ye),Qr=l(Ye,"P",{});var dg=n(Qr);Ss=g(dg,"Set the level for the HuggingFace datasets library\u2019s root logger to WARNING."),dg.forEach(t),Fs=p(Ye),Xr=l(Ye,"P",{});var cg=n(Xr);Cs=g(cg,"This will display only the warning and errors logging information and tqdm bars."),cg.forEach(t),Ds=p(Ye),Zt=l(Ye,"P",{});var Do=n(Zt);Ls=g(Do,"Shortcut to "),Zr=l(Do,"CODE",{});var _g=n(Zr);ks=g(_g,"evaluate.logging.set_verbosity(evaluate.logging.WARNING)"),_g.forEach(t),Do.forEach(t),Ye.forEach(t),Qa=p(e),F=l(e,"DIV",{class:!0});var Je=n(F);b(ft.$$.fragment,Je),js=p(Je),ea=l(Je,"P",{});var $g=n(ea);Bs=g($g,"Set the level for the HuggingFace datasets library\u2019s root logger to DEBUG."),$g.forEach(t),Gs=p(Je),ta=l(Je,"P",{});var yg=n(ta);Vs=g(yg,"This will display all the logging information and tqdm bars."),yg.forEach(t),Hs=p(Je),er=l(Je,"P",{});var Lo=n(er);Ws=g(Lo,"Shortcut to "),ra=l(Lo,"CODE",{});var Eg=n(ra);qs=g(Eg,"evaluate.logging.set_verbosity(evaluate.logging.DEBUG)"),Eg.forEach(t),Lo.forEach(t),Je.forEach(t),Xa=p(e),C=l(e,"DIV",{class:!0});var Ke=n(C);b(pt.$$.fragment,Ke),Us=p(Ke),aa=l(Ke,"P",{});var wg=n(aa);zs=g(wg,"Set the level for the HuggingFace datasets library\u2019s root logger to ERROR."),wg.forEach(t),Ms=p(Ke),la=l(Ke,"P",{});var xg=n(la);Ys=g(xg,"This will display only the errors logging information and tqdm bars."),xg.forEach(t),Js=p(Ke),tr=l(Ke,"P",{});var ko=n(tr);Ks=g(ko,"Shortcut to "),na=l(ko,"CODE",{});var Ig=n(na);Qs=g(Ig,"evaluate.logging.set_verbosity(evaluate.logging.ERROR)"),Ig.forEach(t),ko.forEach(t),Ke.forEach(t),Za=p(e),re=l(e,"DIV",{class:!0});var hn=n(re);b(ut.$$.fragment,hn),Xs=p(hn),sa=l(hn,"P",{});var Ag=n(sa);Zs=g(Ag,`Disable propagation of the library log outputs.
Note that log propagation is disabled by default.`),Ag.forEach(t),hn.forEach(t),el=p(e),ae=l(e,"DIV",{class:!0});var mn=n(ae);b(vt.$$.fragment,mn),ei=p(mn),ia=l(mn,"P",{});var Tg=n(ia);ti=g(Tg,`Enable propagation of the library log outputs.
Please disable the HuggingFace datasets library\u2019s default handler to prevent double logging if the root logger has
been configured.`),Tg.forEach(t),mn.forEach(t),tl=p(e),le=l(e,"DIV",{class:!0});var dn=n(le);b(bt.$$.fragment,dn),ri=p(dn),oa=l(dn,"P",{});var Ng=n(oa);ai=g(Ng,`Return a logger with the specified name.
This function can be used in dataset and metrics scripts.`),Ng.forEach(t),dn.forEach(t),rl=p(e),ne=l(e,"DIV",{class:!0});var cn=n(ne);b(ht.$$.fragment,cn),li=p(cn),ga=l(cn,"P",{});var Pg=n(ga);ni=g(Pg,"Enable tqdm progress bar."),Pg.forEach(t),cn.forEach(t),al=p(e),se=l(e,"DIV",{class:!0});var _n=n(se);b(mt.$$.fragment,_n),si=p(_n),fa=l(_n,"P",{});var Rg=n(fa);ii=g(Rg,"Enable tqdm progress bar."),Rg.forEach(t),_n.forEach(t),ll=p(e),ie=l(e,"H2",{class:!0});var $n=n(ie);Pe=l($n,"A",{id:!0,class:!0,href:!0});var Og=n(Pe);pa=l(Og,"SPAN",{});var Sg=n(pa);b(dt.$$.fragment,Sg),Sg.forEach(t),Og.forEach(t),oi=p($n),ua=l($n,"SPAN",{});var Fg=n(ua);gi=g(Fg,"Levels"),Fg.forEach(t),$n.forEach(t),nl=p(e),oe=l(e,"H3",{class:!0});var yn=n(oe);Re=l(yn,"A",{id:!0,class:!0,href:!0});var Cg=n(Re);va=l(Cg,"SPAN",{});var Dg=n(va);b(ct.$$.fragment,Dg),Dg.forEach(t),Cg.forEach(t),fi=p(yn),ba=l(yn,"SPAN",{});var Lg=n(ba);pi=g(Lg,"evaluate.logging.CRITICAL"),Lg.forEach(t),yn.forEach(t),sl=p(e),rr=l(e,"P",{});var kg=n(rr);ui=g(kg,"evaluate.logging.CRITICAL = 50"),kg.forEach(t),il=p(e),ar=l(e,"P",{});var jg=n(ar);vi=g(jg,"int([x]) -> integer"),jg.forEach(t),ol=p(e),lr=l(e,"P",{});var Bg=n(lr);bi=g(Bg,"int(x, base=10) -> integer"),Bg.forEach(t),gl=p(e),Oe=l(e,"P",{});var En=n(Oe);hi=g(En,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ha=l(En,"STRONG",{});var Gg=n(ha);mi=g(Gg,"int"),Gg.forEach(t),di=g(En,`().  For floating point
numbers, this truncates towards zero.`),En.forEach(t),fl=p(e),nr=l(e,"P",{});var Vg=n(nr);ci=g(Vg,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Vg.forEach(t),pl=p(e),b(_t.$$.fragment,e),ul=p(e),ge=l(e,"H3",{class:!0});var wn=n(ge);Se=l(wn,"A",{id:!0,class:!0,href:!0});var Hg=n(Se);ma=l(Hg,"SPAN",{});var Wg=n(ma);b($t.$$.fragment,Wg),Wg.forEach(t),Hg.forEach(t),_i=p(wn),da=l(wn,"SPAN",{});var qg=n(da);$i=g(qg,"evaluate.logging.DEBUG"),qg.forEach(t),wn.forEach(t),vl=p(e),sr=l(e,"P",{});var Ug=n(sr);yi=g(Ug,"evaluate.logging.DEBUG = 10"),Ug.forEach(t),bl=p(e),ir=l(e,"P",{});var zg=n(ir);Ei=g(zg,"int([x]) -> integer"),zg.forEach(t),hl=p(e),or=l(e,"P",{});var Mg=n(or);wi=g(Mg,"int(x, base=10) -> integer"),Mg.forEach(t),ml=p(e),Fe=l(e,"P",{});var xn=n(Fe);xi=g(xn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ca=l(xn,"STRONG",{});var Yg=n(ca);Ii=g(Yg,"int"),Yg.forEach(t),Ai=g(xn,`().  For floating point
numbers, this truncates towards zero.`),xn.forEach(t),dl=p(e),gr=l(e,"P",{});var Jg=n(gr);Ti=g(Jg,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Jg.forEach(t),cl=p(e),b(yt.$$.fragment,e),_l=p(e),fe=l(e,"H3",{class:!0});var In=n(fe);Ce=l(In,"A",{id:!0,class:!0,href:!0});var Kg=n(Ce);_a=l(Kg,"SPAN",{});var Qg=n(_a);b(Et.$$.fragment,Qg),Qg.forEach(t),Kg.forEach(t),Ni=p(In),$a=l(In,"SPAN",{});var Xg=n($a);Pi=g(Xg,"evaluate.logging.ERROR"),Xg.forEach(t),In.forEach(t),$l=p(e),fr=l(e,"P",{});var Zg=n(fr);Ri=g(Zg,"evaluate.logging.ERROR = 40"),Zg.forEach(t),yl=p(e),pr=l(e,"P",{});var ef=n(pr);Oi=g(ef,"int([x]) -> integer"),ef.forEach(t),El=p(e),ur=l(e,"P",{});var tf=n(ur);Si=g(tf,"int(x, base=10) -> integer"),tf.forEach(t),wl=p(e),De=l(e,"P",{});var An=n(De);Fi=g(An,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ya=l(An,"STRONG",{});var rf=n(ya);Ci=g(rf,"int"),rf.forEach(t),Di=g(An,`().  For floating point
numbers, this truncates towards zero.`),An.forEach(t),xl=p(e),vr=l(e,"P",{});var af=n(vr);Li=g(af,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),af.forEach(t),Il=p(e),b(wt.$$.fragment,e),Al=p(e),pe=l(e,"H3",{class:!0});var Tn=n(pe);Le=l(Tn,"A",{id:!0,class:!0,href:!0});var lf=n(Le);Ea=l(lf,"SPAN",{});var nf=n(Ea);b(xt.$$.fragment,nf),nf.forEach(t),lf.forEach(t),ki=p(Tn),wa=l(Tn,"SPAN",{});var sf=n(wa);ji=g(sf,"evaluate.logging.FATAL"),sf.forEach(t),Tn.forEach(t),Tl=p(e),br=l(e,"P",{});var of=n(br);Bi=g(of,"evaluate.logging.FATAL = 50"),of.forEach(t),Nl=p(e),hr=l(e,"P",{});var gf=n(hr);Gi=g(gf,"int([x]) -> integer"),gf.forEach(t),Pl=p(e),mr=l(e,"P",{});var ff=n(mr);Vi=g(ff,"int(x, base=10) -> integer"),ff.forEach(t),Rl=p(e),ke=l(e,"P",{});var Nn=n(ke);Hi=g(Nn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),xa=l(Nn,"STRONG",{});var pf=n(xa);Wi=g(pf,"int"),pf.forEach(t),qi=g(Nn,`().  For floating point
numbers, this truncates towards zero.`),Nn.forEach(t),Ol=p(e),dr=l(e,"P",{});var uf=n(dr);Ui=g(uf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),uf.forEach(t),Sl=p(e),b(It.$$.fragment,e),Fl=p(e),ue=l(e,"H3",{class:!0});var Pn=n(ue);je=l(Pn,"A",{id:!0,class:!0,href:!0});var vf=n(je);Ia=l(vf,"SPAN",{});var bf=n(Ia);b(At.$$.fragment,bf),bf.forEach(t),vf.forEach(t),zi=p(Pn),Aa=l(Pn,"SPAN",{});var hf=n(Aa);Mi=g(hf,"evaluate.logging.INFO"),hf.forEach(t),Pn.forEach(t),Cl=p(e),cr=l(e,"P",{});var mf=n(cr);Yi=g(mf,"evaluate.logging.INFO = 20"),mf.forEach(t),Dl=p(e),_r=l(e,"P",{});var df=n(_r);Ji=g(df,"int([x]) -> integer"),df.forEach(t),Ll=p(e),$r=l(e,"P",{});var cf=n($r);Ki=g(cf,"int(x, base=10) -> integer"),cf.forEach(t),kl=p(e),Be=l(e,"P",{});var Rn=n(Be);Qi=g(Rn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ta=l(Rn,"STRONG",{});var _f=n(Ta);Xi=g(_f,"int"),_f.forEach(t),Zi=g(Rn,`().  For floating point
numbers, this truncates towards zero.`),Rn.forEach(t),jl=p(e),yr=l(e,"P",{});var $f=n(yr);eo=g($f,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),$f.forEach(t),Bl=p(e),b(Tt.$$.fragment,e),Gl=p(e),ve=l(e,"H3",{class:!0});var On=n(ve);Ge=l(On,"A",{id:!0,class:!0,href:!0});var yf=n(Ge);Na=l(yf,"SPAN",{});var Ef=n(Na);b(Nt.$$.fragment,Ef),Ef.forEach(t),yf.forEach(t),to=p(On),Pa=l(On,"SPAN",{});var wf=n(Pa);ro=g(wf,"evaluate.logging.NOTSET"),wf.forEach(t),On.forEach(t),Vl=p(e),Er=l(e,"P",{});var xf=n(Er);ao=g(xf,"evaluate.logging.NOTSET = 0"),xf.forEach(t),Hl=p(e),wr=l(e,"P",{});var If=n(wr);lo=g(If,"int([x]) -> integer"),If.forEach(t),Wl=p(e),xr=l(e,"P",{});var Af=n(xr);no=g(Af,"int(x, base=10) -> integer"),Af.forEach(t),ql=p(e),Ve=l(e,"P",{});var Sn=n(Ve);so=g(Sn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ra=l(Sn,"STRONG",{});var Tf=n(Ra);io=g(Tf,"int"),Tf.forEach(t),oo=g(Sn,`().  For floating point
numbers, this truncates towards zero.`),Sn.forEach(t),Ul=p(e),Ir=l(e,"P",{});var Nf=n(Ir);go=g(Nf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Nf.forEach(t),zl=p(e),b(Pt.$$.fragment,e),Ml=p(e),be=l(e,"H3",{class:!0});var Fn=n(be);He=l(Fn,"A",{id:!0,class:!0,href:!0});var Pf=n(He);Oa=l(Pf,"SPAN",{});var Rf=n(Oa);b(Rt.$$.fragment,Rf),Rf.forEach(t),Pf.forEach(t),fo=p(Fn),Sa=l(Fn,"SPAN",{});var Of=n(Sa);po=g(Of,"evaluate.logging.WARN"),Of.forEach(t),Fn.forEach(t),Yl=p(e),Ar=l(e,"P",{});var Sf=n(Ar);uo=g(Sf,"evaluate.logging.WARN = 30"),Sf.forEach(t),Jl=p(e),Tr=l(e,"P",{});var Ff=n(Tr);vo=g(Ff,"int([x]) -> integer"),Ff.forEach(t),Kl=p(e),Nr=l(e,"P",{});var Cf=n(Nr);bo=g(Cf,"int(x, base=10) -> integer"),Cf.forEach(t),Ql=p(e),We=l(e,"P",{});var Cn=n(We);ho=g(Cn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Fa=l(Cn,"STRONG",{});var Df=n(Fa);mo=g(Df,"int"),Df.forEach(t),co=g(Cn,`().  For floating point
numbers, this truncates towards zero.`),Cn.forEach(t),Xl=p(e),Pr=l(e,"P",{});var Lf=n(Pr);_o=g(Lf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Lf.forEach(t),Zl=p(e),b(Ot.$$.fragment,e),en=p(e),he=l(e,"H3",{class:!0});var Dn=n(he);qe=l(Dn,"A",{id:!0,class:!0,href:!0});var kf=n(qe);Ca=l(kf,"SPAN",{});var jf=n(Ca);b(St.$$.fragment,jf),jf.forEach(t),kf.forEach(t),$o=p(Dn),Da=l(Dn,"SPAN",{});var Bf=n(Da);yo=g(Bf,"evaluate.logging.WARNING"),Bf.forEach(t),Dn.forEach(t),tn=p(e),Rr=l(e,"P",{});var Gf=n(Rr);Eo=g(Gf,"evaluate.logging.WARNING = 30"),Gf.forEach(t),rn=p(e),Or=l(e,"P",{});var Vf=n(Or);wo=g(Vf,"int([x]) -> integer"),Vf.forEach(t),an=p(e),Sr=l(e,"P",{});var Hf=n(Sr);xo=g(Hf,"int(x, base=10) -> integer"),Hf.forEach(t),ln=p(e),Ue=l(e,"P",{});var Ln=n(Ue);Io=g(Ln,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),La=l(Ln,"STRONG",{});var Wf=n(La);Ao=g(Wf,"int"),Wf.forEach(t),To=g(Ln,`().  For floating point
numbers, this truncates towards zero.`),Ln.forEach(t),nn=p(e),Fr=l(e,"P",{});var qf=n(Fr);No=g(qf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),qf.forEach(t),sn=p(e),b(Ft.$$.fragment,e),this.h()},h(){u(E,"name","hf:doc:metadata"),u(E,"content",JSON.stringify(Zf)),u(_,"id","logging-methods"),u(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_,"href","#logging-methods"),u(w,"class","relative group"),u(qt,"href","/docs/evaluate/pr_45/en/package_reference/logging_methods#evaluate.utils.logging.get_verbosity"),u(zt,"href","/docs/evaluate/pr_45/en/package_reference/logging_methods#evaluate.utils.logging.set_verbosity"),u(Kt,"href","/docs/evaluate/pr_45/en/package_reference/logging_methods#evaluate.disable_progress_bar"),u(Qt,"href","/docs/evaluate/pr_45/en/package_reference/logging_methods#evaluate.enable_progress_bar"),u(Te,"id","evaluate.utils.logging.get_verbosity"),u(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Te,"href","#evaluate.utils.logging.get_verbosity"),u(ee,"class","relative group"),u(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Pe,"id","levels"),u(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Pe,"href","#levels"),u(ie,"class","relative group"),u(Re,"id","evaluateloggingcritical"),u(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Re,"href","#evaluateloggingcritical"),u(oe,"class","relative group"),u(Se,"id","evaluateloggingdebug"),u(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Se,"href","#evaluateloggingdebug"),u(ge,"class","relative group"),u(Ce,"id","evaluateloggingerror"),u(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ce,"href","#evaluateloggingerror"),u(fe,"class","relative group"),u(Le,"id","evaluateloggingfatal"),u(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Le,"href","#evaluateloggingfatal"),u(pe,"class","relative group"),u(je,"id","evaluatelogginginfo"),u(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(je,"href","#evaluatelogginginfo"),u(ue,"class","relative group"),u(Ge,"id","evaluateloggingnotset"),u(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ge,"href","#evaluateloggingnotset"),u(ve,"class","relative group"),u(He,"id","evaluateloggingwarn"),u(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(He,"href","#evaluateloggingwarn"),u(be,"class","relative group"),u(qe,"id","evaluateloggingwarning"),u(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(qe,"href","#evaluateloggingwarning"),u(he,"class","relative group")},m(e,s){r(document.head,E),i(e,me,s),i(e,w,s),r(w,_),r(_,N),h(P,N,null),r(w,Qe),r(w,Y),r(Y,J),i(e,de,s),i(e,D,s),r(D,K),r(D,j),r(j,Xe),r(D,Ze),i(e,L,s),i(e,x,s),r(x,et),r(x,Q),r(Q,X),r(x,tt),i(e,ce,s),h(R,e,s),i(e,W,s),i(e,$,s),r($,rt),r($,B),r(B,Z),r($,at),r($,y),r(y,q),r($,I),r($,U),r(U,Dt),r($,Lt),r($,_e),r(_e,kt),r($,$e),r($,ye),r(ye,jt),r($,Bt),r($,Ee),r(Ee,Gt),r($,Vt),i(e,Ga,s),h(lt,e,s),i(e,Va,s),i(e,Ht,s),r(Ht,kn),i(e,Ha,s),i(e,we,s),r(we,Wt),r(Wt,qt),r(qt,jn),r(Wt,Bn),r(we,Gn),r(we,Ut),r(Ut,zt),r(zt,Vn),r(Ut,Hn),i(e,Wa,s),i(e,xe,s),r(xe,Wn),r(xe,Dr),r(Dr,qn),r(xe,Un),i(e,qa,s),i(e,A,s),r(A,Ie),r(Ie,Lr),r(Lr,zn),r(Ie,Mn),r(Ie,kr),r(kr,Yn),r(Ie,Jn),r(A,Kn),r(A,Mt),r(Mt,jr),r(jr,Qn),r(Mt,Xn),r(A,Zn),r(A,Ae),r(Ae,Br),r(Br,es),r(Ae,ts),r(Ae,Gr),r(Gr,rs),r(Ae,as),r(A,ls),r(A,Yt),r(Yt,Vr),r(Vr,ns),r(Yt,ss),r(A,is),r(A,Jt),r(Jt,Hr),r(Hr,os),r(Jt,gs),i(e,Ua,s),i(e,k,s),r(k,fs),r(k,Wr),r(Wr,ps),r(k,us),r(k,Kt),r(Kt,vs),r(k,bs),r(k,Qt),r(Qt,hs),r(k,ms),i(e,za,s),i(e,ee,s),r(ee,Te),r(Te,qr),h(nt,qr,null),r(ee,ds),r(ee,Ur),r(Ur,cs),i(e,Ma,s),i(e,G,s),h(st,G,null),r(G,_s),r(G,zr),r(zr,$s),r(G,ys),h(Ne,G,null),i(e,Ya,s),i(e,te,s),h(it,te,null),r(te,Es),r(te,Mr),r(Mr,ws),i(e,Ja,s),i(e,O,s),h(ot,O,null),r(O,xs),r(O,Yr),r(Yr,Is),r(O,As),r(O,Jr),r(Jr,Ts),r(O,Ns),r(O,Xt),r(Xt,Ps),r(Xt,Kr),r(Kr,Rs),i(e,Ka,s),i(e,S,s),h(gt,S,null),r(S,Os),r(S,Qr),r(Qr,Ss),r(S,Fs),r(S,Xr),r(Xr,Cs),r(S,Ds),r(S,Zt),r(Zt,Ls),r(Zt,Zr),r(Zr,ks),i(e,Qa,s),i(e,F,s),h(ft,F,null),r(F,js),r(F,ea),r(ea,Bs),r(F,Gs),r(F,ta),r(ta,Vs),r(F,Hs),r(F,er),r(er,Ws),r(er,ra),r(ra,qs),i(e,Xa,s),i(e,C,s),h(pt,C,null),r(C,Us),r(C,aa),r(aa,zs),r(C,Ms),r(C,la),r(la,Ys),r(C,Js),r(C,tr),r(tr,Ks),r(tr,na),r(na,Qs),i(e,Za,s),i(e,re,s),h(ut,re,null),r(re,Xs),r(re,sa),r(sa,Zs),i(e,el,s),i(e,ae,s),h(vt,ae,null),r(ae,ei),r(ae,ia),r(ia,ti),i(e,tl,s),i(e,le,s),h(bt,le,null),r(le,ri),r(le,oa),r(oa,ai),i(e,rl,s),i(e,ne,s),h(ht,ne,null),r(ne,li),r(ne,ga),r(ga,ni),i(e,al,s),i(e,se,s),h(mt,se,null),r(se,si),r(se,fa),r(fa,ii),i(e,ll,s),i(e,ie,s),r(ie,Pe),r(Pe,pa),h(dt,pa,null),r(ie,oi),r(ie,ua),r(ua,gi),i(e,nl,s),i(e,oe,s),r(oe,Re),r(Re,va),h(ct,va,null),r(oe,fi),r(oe,ba),r(ba,pi),i(e,sl,s),i(e,rr,s),r(rr,ui),i(e,il,s),i(e,ar,s),r(ar,vi),i(e,ol,s),i(e,lr,s),r(lr,bi),i(e,gl,s),i(e,Oe,s),r(Oe,hi),r(Oe,ha),r(ha,mi),r(Oe,di),i(e,fl,s),i(e,nr,s),r(nr,ci),i(e,pl,s),h(_t,e,s),i(e,ul,s),i(e,ge,s),r(ge,Se),r(Se,ma),h($t,ma,null),r(ge,_i),r(ge,da),r(da,$i),i(e,vl,s),i(e,sr,s),r(sr,yi),i(e,bl,s),i(e,ir,s),r(ir,Ei),i(e,hl,s),i(e,or,s),r(or,wi),i(e,ml,s),i(e,Fe,s),r(Fe,xi),r(Fe,ca),r(ca,Ii),r(Fe,Ai),i(e,dl,s),i(e,gr,s),r(gr,Ti),i(e,cl,s),h(yt,e,s),i(e,_l,s),i(e,fe,s),r(fe,Ce),r(Ce,_a),h(Et,_a,null),r(fe,Ni),r(fe,$a),r($a,Pi),i(e,$l,s),i(e,fr,s),r(fr,Ri),i(e,yl,s),i(e,pr,s),r(pr,Oi),i(e,El,s),i(e,ur,s),r(ur,Si),i(e,wl,s),i(e,De,s),r(De,Fi),r(De,ya),r(ya,Ci),r(De,Di),i(e,xl,s),i(e,vr,s),r(vr,Li),i(e,Il,s),h(wt,e,s),i(e,Al,s),i(e,pe,s),r(pe,Le),r(Le,Ea),h(xt,Ea,null),r(pe,ki),r(pe,wa),r(wa,ji),i(e,Tl,s),i(e,br,s),r(br,Bi),i(e,Nl,s),i(e,hr,s),r(hr,Gi),i(e,Pl,s),i(e,mr,s),r(mr,Vi),i(e,Rl,s),i(e,ke,s),r(ke,Hi),r(ke,xa),r(xa,Wi),r(ke,qi),i(e,Ol,s),i(e,dr,s),r(dr,Ui),i(e,Sl,s),h(It,e,s),i(e,Fl,s),i(e,ue,s),r(ue,je),r(je,Ia),h(At,Ia,null),r(ue,zi),r(ue,Aa),r(Aa,Mi),i(e,Cl,s),i(e,cr,s),r(cr,Yi),i(e,Dl,s),i(e,_r,s),r(_r,Ji),i(e,Ll,s),i(e,$r,s),r($r,Ki),i(e,kl,s),i(e,Be,s),r(Be,Qi),r(Be,Ta),r(Ta,Xi),r(Be,Zi),i(e,jl,s),i(e,yr,s),r(yr,eo),i(e,Bl,s),h(Tt,e,s),i(e,Gl,s),i(e,ve,s),r(ve,Ge),r(Ge,Na),h(Nt,Na,null),r(ve,to),r(ve,Pa),r(Pa,ro),i(e,Vl,s),i(e,Er,s),r(Er,ao),i(e,Hl,s),i(e,wr,s),r(wr,lo),i(e,Wl,s),i(e,xr,s),r(xr,no),i(e,ql,s),i(e,Ve,s),r(Ve,so),r(Ve,Ra),r(Ra,io),r(Ve,oo),i(e,Ul,s),i(e,Ir,s),r(Ir,go),i(e,zl,s),h(Pt,e,s),i(e,Ml,s),i(e,be,s),r(be,He),r(He,Oa),h(Rt,Oa,null),r(be,fo),r(be,Sa),r(Sa,po),i(e,Yl,s),i(e,Ar,s),r(Ar,uo),i(e,Jl,s),i(e,Tr,s),r(Tr,vo),i(e,Kl,s),i(e,Nr,s),r(Nr,bo),i(e,Ql,s),i(e,We,s),r(We,ho),r(We,Fa),r(Fa,mo),r(We,co),i(e,Xl,s),i(e,Pr,s),r(Pr,_o),i(e,Zl,s),h(Ot,e,s),i(e,en,s),i(e,he,s),r(he,qe),r(qe,Ca),h(St,Ca,null),r(he,$o),r(he,Da),r(Da,yo),i(e,tn,s),i(e,Rr,s),r(Rr,Eo),i(e,rn,s),i(e,Or,s),r(Or,wo),i(e,an,s),i(e,Sr,s),r(Sr,xo),i(e,ln,s),i(e,Ue,s),r(Ue,Io),r(Ue,La),r(La,Ao),r(Ue,To),i(e,nn,s),i(e,Fr,s),r(Fr,No),i(e,sn,s),h(Ft,e,s),on=!0},p(e,[s]){const Ct={};s&2&&(Ct.$$scope={dirty:s,ctx:e}),Ne.$set(Ct)},i(e){on||(m(P.$$.fragment,e),m(R.$$.fragment,e),m(lt.$$.fragment,e),m(nt.$$.fragment,e),m(st.$$.fragment,e),m(Ne.$$.fragment,e),m(it.$$.fragment,e),m(ot.$$.fragment,e),m(gt.$$.fragment,e),m(ft.$$.fragment,e),m(pt.$$.fragment,e),m(ut.$$.fragment,e),m(vt.$$.fragment,e),m(bt.$$.fragment,e),m(ht.$$.fragment,e),m(mt.$$.fragment,e),m(dt.$$.fragment,e),m(ct.$$.fragment,e),m(_t.$$.fragment,e),m($t.$$.fragment,e),m(yt.$$.fragment,e),m(Et.$$.fragment,e),m(wt.$$.fragment,e),m(xt.$$.fragment,e),m(It.$$.fragment,e),m(At.$$.fragment,e),m(Tt.$$.fragment,e),m(Nt.$$.fragment,e),m(Pt.$$.fragment,e),m(Rt.$$.fragment,e),m(Ot.$$.fragment,e),m(St.$$.fragment,e),m(Ft.$$.fragment,e),on=!0)},o(e){d(P.$$.fragment,e),d(R.$$.fragment,e),d(lt.$$.fragment,e),d(nt.$$.fragment,e),d(st.$$.fragment,e),d(Ne.$$.fragment,e),d(it.$$.fragment,e),d(ot.$$.fragment,e),d(gt.$$.fragment,e),d(ft.$$.fragment,e),d(pt.$$.fragment,e),d(ut.$$.fragment,e),d(vt.$$.fragment,e),d(bt.$$.fragment,e),d(ht.$$.fragment,e),d(mt.$$.fragment,e),d(dt.$$.fragment,e),d(ct.$$.fragment,e),d(_t.$$.fragment,e),d($t.$$.fragment,e),d(yt.$$.fragment,e),d(Et.$$.fragment,e),d(wt.$$.fragment,e),d(xt.$$.fragment,e),d(It.$$.fragment,e),d(At.$$.fragment,e),d(Tt.$$.fragment,e),d(Nt.$$.fragment,e),d(Pt.$$.fragment,e),d(Rt.$$.fragment,e),d(Ot.$$.fragment,e),d(St.$$.fragment,e),d(Ft.$$.fragment,e),on=!1},d(e){t(E),e&&t(me),e&&t(w),c(P),e&&t(de),e&&t(D),e&&t(L),e&&t(x),e&&t(ce),c(R,e),e&&t(W),e&&t($),e&&t(Ga),c(lt,e),e&&t(Va),e&&t(Ht),e&&t(Ha),e&&t(we),e&&t(Wa),e&&t(xe),e&&t(qa),e&&t(A),e&&t(Ua),e&&t(k),e&&t(za),e&&t(ee),c(nt),e&&t(Ma),e&&t(G),c(st),c(Ne),e&&t(Ya),e&&t(te),c(it),e&&t(Ja),e&&t(O),c(ot),e&&t(Ka),e&&t(S),c(gt),e&&t(Qa),e&&t(F),c(ft),e&&t(Xa),e&&t(C),c(pt),e&&t(Za),e&&t(re),c(ut),e&&t(el),e&&t(ae),c(vt),e&&t(tl),e&&t(le),c(bt),e&&t(rl),e&&t(ne),c(ht),e&&t(al),e&&t(se),c(mt),e&&t(ll),e&&t(ie),c(dt),e&&t(nl),e&&t(oe),c(ct),e&&t(sl),e&&t(rr),e&&t(il),e&&t(ar),e&&t(ol),e&&t(lr),e&&t(gl),e&&t(Oe),e&&t(fl),e&&t(nr),e&&t(pl),c(_t,e),e&&t(ul),e&&t(ge),c($t),e&&t(vl),e&&t(sr),e&&t(bl),e&&t(ir),e&&t(hl),e&&t(or),e&&t(ml),e&&t(Fe),e&&t(dl),e&&t(gr),e&&t(cl),c(yt,e),e&&t(_l),e&&t(fe),c(Et),e&&t($l),e&&t(fr),e&&t(yl),e&&t(pr),e&&t(El),e&&t(ur),e&&t(wl),e&&t(De),e&&t(xl),e&&t(vr),e&&t(Il),c(wt,e),e&&t(Al),e&&t(pe),c(xt),e&&t(Tl),e&&t(br),e&&t(Nl),e&&t(hr),e&&t(Pl),e&&t(mr),e&&t(Rl),e&&t(ke),e&&t(Ol),e&&t(dr),e&&t(Sl),c(It,e),e&&t(Fl),e&&t(ue),c(At),e&&t(Cl),e&&t(cr),e&&t(Dl),e&&t(_r),e&&t(Ll),e&&t($r),e&&t(kl),e&&t(Be),e&&t(jl),e&&t(yr),e&&t(Bl),c(Tt,e),e&&t(Gl),e&&t(ve),c(Nt),e&&t(Vl),e&&t(Er),e&&t(Hl),e&&t(wr),e&&t(Wl),e&&t(xr),e&&t(ql),e&&t(Ve),e&&t(Ul),e&&t(Ir),e&&t(zl),c(Pt,e),e&&t(Ml),e&&t(be),c(Rt),e&&t(Yl),e&&t(Ar),e&&t(Jl),e&&t(Tr),e&&t(Kl),e&&t(Nr),e&&t(Ql),e&&t(We),e&&t(Xl),e&&t(Pr),e&&t(Zl),c(Ot,e),e&&t(en),e&&t(he),c(St),e&&t(tn),e&&t(Rr),e&&t(rn),e&&t(Or),e&&t(an),e&&t(Sr),e&&t(ln),e&&t(Ue),e&&t(nn),e&&t(Fr),e&&t(sn),c(Ft,e)}}}const Zf={local:"logging-methods",sections:[{local:"evaluate.utils.logging.get_verbosity",title:"Functions"},{local:"levels",sections:[{local:"evaluateloggingcritical",title:"evaluate.logging.CRITICAL"},{local:"evaluateloggingdebug",title:"evaluate.logging.DEBUG"},{local:"evaluateloggingerror",title:"evaluate.logging.ERROR"},{local:"evaluateloggingfatal",title:"evaluate.logging.FATAL"},{local:"evaluatelogginginfo",title:"evaluate.logging.INFO"},{local:"evaluateloggingnotset",title:"evaluate.logging.NOTSET"},{local:"evaluateloggingwarn",title:"evaluate.logging.WARN"},{local:"evaluateloggingwarning",title:"evaluate.logging.WARNING"}],title:"Levels"}],title:"Logging methods"};function ep(Ba){return Jf(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class np extends Uf{constructor(E){super();zf(this,E,ep,Xf,Mf,{})}}export{np as default,Zf as metadata};
