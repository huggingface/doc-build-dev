import{S as $e,i as be,s as xe,e as o,k as u,w as J,t as E,M as Ee,c as r,d as t,m as f,a as i,x as W,h as k,b as n,F as a,g as l,y as X,L as ke,q as j,o as z,B as K,v as Se}from"../../chunks/vendor-e830fc9c.js";import{D as De}from"../../chunks/Docstring-785cfc11.js";import{I as le}from"../../chunks/IconCopyLink-af4c5c5b.js";function Me(ce){let c,T,d,v,D,w,Q,M,Y,F,S,Z,C,m,g,N,y,ee,A,te,I,p,_,L,$,ae,P,oe,U,h,b,re,x,ie,O,ne,se,H;return w=new le({}),y=new le({}),$=new le({}),b=new De({props:{name:"evaluate.load_metric",anchor:"evaluate.load_metric",parameters:[{name:"path",val:": str"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"process_id",val:": int = 0"},{name:"num_process",val:": int = 1"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"download_config",val:": typing.Optional[evaluate.utils.file_utils.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.utils.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"**metric_init_kwargs",val:""}],parametersDescription:[{anchor:"evaluate.load_metric.path",description:`<strong>path</strong> (<code>str</code>) &#x2014;
path to the metric processing script with the metric builder. Can be either:<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./metrics/rouge&apos;</code> or <code>&apos;./metrics/rogue/rouge.py&apos;</code></li>
<li>a metric identifier on the HuggingFace datasets repo (list all available metrics with <code>datasets.list_metrics()</code>)
e.g. <code>&apos;rouge&apos;</code> or <code>&apos;bleu&apos;</code></li>
</ul>`,name:"path"},{anchor:"evaluate.load_metric.config_name",description:"<strong>config_name</strong> (<code>str</code>, optional) &#x2014; selecting a configuration for the metric (e.g. the GLUE metric has a configuration for each subset)",name:"config_name"},{anchor:"evaluate.load_metric.process_id",description:"<strong>process_id</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: id of the process",name:"process_id"},{anchor:"evaluate.load_metric.num_process",description:"<strong>num_process</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: total number of processes",name:"num_process"},{anchor:"evaluate.load_metric.cache_dir",description:"<strong>cache_dir</strong> (Optional str) &#x2014; path to store the temporary predictions and references (default to <em>~/.cache/huggingface/metrics/</em>)",name:"cache_dir"},{anchor:"evaluate.load_metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"evaluate.load_metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool) &#x2014; Whether to store the temporary results in memory (defaults to False)",name:"keep_in_memory"},{anchor:"evaluate.load_metric.download_config",description:"<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code> &#x2014; specific download configuration parameters.",name:"download_config"},{anchor:"evaluate.load_metric.download_mode",description:"<strong>download_mode</strong> (<code>DownloadMode</code>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.",name:"download_mode"},{anchor:"evaluate.load_metric.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014; if specified, the module will be loaded from the datasets repository
at this version. By default it is set to the local version of the lib. Specifying a version that is different from
your local version of the lib might cause compatibility issues.`,name:"revision"}],source:"https://github.com/huggingface/evaluate/blob/vr_41/src/evaluate/load.py#L705",returnDescription:`
<p><em>evaluate.Metric</em></p>
`}}),{c(){c=o("meta"),T=u(),d=o("h1"),v=o("a"),D=o("span"),J(w.$$.fragment),Q=u(),M=o("span"),Y=E("Loading methods"),F=u(),S=o("p"),Z=E("Methods for listing and loading datasets and metrics:"),C=u(),m=o("h2"),g=o("a"),N=o("span"),J(y.$$.fragment),ee=u(),A=o("span"),te=E("Datasets"),I=u(),p=o("h2"),_=o("a"),L=o("span"),J($.$$.fragment),ae=u(),P=o("span"),oe=E("Metrics"),U=u(),h=o("div"),J(b.$$.fragment),re=u(),x=o("p"),ie=E("Load a "),O=o("em"),ne=E("evaluate.Metric"),se=E("."),this.h()},l(e){const s=Ee('[data-svelte="svelte-1phssyn"]',document.head);c=r(s,"META",{name:!0,content:!0}),s.forEach(t),T=f(e),d=r(e,"H1",{class:!0});var q=i(d);v=r(q,"A",{id:!0,class:!0,href:!0});var de=i(v);D=r(de,"SPAN",{});var me=i(D);W(w.$$.fragment,me),me.forEach(t),de.forEach(t),Q=f(q),M=r(q,"SPAN",{});var pe=i(M);Y=k(pe,"Loading methods"),pe.forEach(t),q.forEach(t),F=f(e),S=r(e,"P",{});var he=i(S);Z=k(he,"Methods for listing and loading datasets and metrics:"),he.forEach(t),C=f(e),m=r(e,"H2",{class:!0});var V=i(m);g=r(V,"A",{id:!0,class:!0,href:!0});var ue=i(g);N=r(ue,"SPAN",{});var fe=i(N);W(y.$$.fragment,fe),fe.forEach(t),ue.forEach(t),ee=f(V),A=r(V,"SPAN",{});var ve=i(A);te=k(ve,"Datasets"),ve.forEach(t),V.forEach(t),I=f(e),p=r(e,"H2",{class:!0});var B=i(p);_=r(B,"A",{id:!0,class:!0,href:!0});var ge=i(_);L=r(ge,"SPAN",{});var _e=i(L);W($.$$.fragment,_e),_e.forEach(t),ge.forEach(t),ae=f(B),P=r(B,"SPAN",{});var we=i(P);oe=k(we,"Metrics"),we.forEach(t),B.forEach(t),U=f(e),h=r(e,"DIV",{class:!0});var R=i(h);W(b.$$.fragment,R),re=f(R),x=r(R,"P",{});var G=i(x);ie=k(G,"Load a "),O=r(G,"EM",{});var ye=i(O);ne=k(ye,"evaluate.Metric"),ye.forEach(t),se=k(G,"."),G.forEach(t),R.forEach(t),this.h()},h(){n(c,"name","hf:doc:metadata"),n(c,"content",JSON.stringify(Ne)),n(v,"id","loading-methods"),n(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(v,"href","#loading-methods"),n(d,"class","relative group"),n(g,"id","datasets"),n(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(g,"href","#datasets"),n(m,"class","relative group"),n(_,"id","evaluate.load_metric"),n(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(_,"href","#evaluate.load_metric"),n(p,"class","relative group"),n(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){a(document.head,c),l(e,T,s),l(e,d,s),a(d,v),a(v,D),X(w,D,null),a(d,Q),a(d,M),a(M,Y),l(e,F,s),l(e,S,s),a(S,Z),l(e,C,s),l(e,m,s),a(m,g),a(g,N),X(y,N,null),a(m,ee),a(m,A),a(A,te),l(e,I,s),l(e,p,s),a(p,_),a(_,L),X($,L,null),a(p,ae),a(p,P),a(P,oe),l(e,U,s),l(e,h,s),X(b,h,null),a(h,re),a(h,x),a(x,ie),a(x,O),a(O,ne),a(x,se),H=!0},p:ke,i(e){H||(j(w.$$.fragment,e),j(y.$$.fragment,e),j($.$$.fragment,e),j(b.$$.fragment,e),H=!0)},o(e){z(w.$$.fragment,e),z(y.$$.fragment,e),z($.$$.fragment,e),z(b.$$.fragment,e),H=!1},d(e){t(c),e&&t(T),e&&t(d),K(w),e&&t(F),e&&t(S),e&&t(C),e&&t(m),K(y),e&&t(I),e&&t(p),K($),e&&t(U),e&&t(h),K(b)}}}const Ne={local:"loading-methods",sections:[{local:"datasets",title:"Datasets"},{local:"evaluate.load_metric",title:"Metrics"}],title:"Loading methods"};function Ae(ce){return Se(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Te extends $e{constructor(c){super();be(this,c,Ae,Me,xe,{})}}export{Te as default,Ne as metadata};
