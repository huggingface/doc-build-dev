import{S as Ci,i as Oi,s as xi,e as s,k as d,w as h,t as l,M as Ni,c as o,d as a,m as p,a as r,x as f,h as n,b as u,G as t,g as c,y as m,q as v,o as y,B as w,v as Si}from"../chunks/vendor-hf-doc-builder.js";import{T as Ii}from"../chunks/Tip-hf-doc-builder.js";import{I}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as q}from"../chunks/CodeBlock-hf-doc-builder.js";function qi(Ia){let E,V,$,A,M;return{c(){E=s("p"),V=l("Note that features always describe the type of a single input element. In general we will add list of elements so you can always think of a list around the types in "),$=s("code"),A=l("features"),M=l(". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation.")},l(j){E=o(j,"P",{});var D=r(E);V=n(D,"Note that features always describe the type of a single input element. In general we will add list of elements so you can always think of a list around the types in "),$=o(D,"CODE",{});var z=r($);A=n(z,"features"),z.forEach(a),M=n(D,". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation."),D.forEach(a)},m(j,D){c(j,E,D),t(E,V),t(E,$),t($,A),t(E,M)},d(j){j&&a(E)}}}function Mi(Ia){let E,V,$,A,M,j,D,z,eo,qa,Ke,to,Ma,B,J,ut,ye,ao,ht,so,Ba,Qe,oo,La,C,K,ft,ro,lo,Xe,no,io,co,Q,mt,po,uo,Ze,ho,fo,mo,X,vt,vo,yo,et,wo,_o,Fa,Z,Eo,tt,bo,$o,Ra,L,ee,yt,we,go,wt,ko,Ua,te,jo,_t,Ao,To,Ga,_e,Ha,at,Po,Wa,Ee,Ya,F,ae,Et,be,Do,bt,Co,Va,st,Oo,za,$e,Ja,R,se,$t,ge,xo,gt,No,Ka,oe,So,kt,Io,qo,Qa,re,jt,ke,At,Mo,Bo,Tt,Lo,Fo,_,je,Pt,Dt,Ro,Uo,Ct,Go,Ho,Ae,Ot,xt,Wo,Yo,Nt,Vo,zo,Te,St,It,Jo,Ko,Pe,Qo,qt,Xo,Zo,er,De,Mt,Bt,tr,ar,Lt,sr,or,Ce,Ft,Rt,rr,lr,Ut,nr,ir,Oe,Gt,Ht,cr,dr,Wt,pr,ur,xe,Yt,Vt,hr,fr,zt,mr,vr,Ne,Jt,Kt,yr,wr,Qt,_r,Xa,le,Er,Xt,br,$r,Za,Se,es,ne,gr,Zt,kr,jr,ts,Ie,as,ot,Ar,ss,qe,os,ie,rs,U,ce,ea,Me,Tr,ta,Pr,ls,rt,Dr,ns,de,aa,Cr,Or,sa,xr,is,g,Nr,oa,Sr,Ir,ra,qr,Mr,la,Br,Lr,na,Fr,Rr,cs,G,pe,ia,Be,Ur,ca,da,Gr,ds,Le,ps,O,Hr,pa,Wr,Yr,ua,Vr,zr,us,H,ue,ha,Fe,Jr,Re,fa,Kr,Qr,ma,Xr,hs,T,Zr,va,el,tl,ya,al,sl,wa,ol,rl,fs,Ue,ms,P,ll,_a,nl,il,Ea,cl,dl,ba,pl,ul,vs,Ge,ys,lt,hl,ws,He,_s,W,he,$a,We,fl,ga,ml,Es,k,vl,ka,yl,wl,ja,_l,El,Ye,bl,$l,Aa,gl,kl,bs,nt,jl,$s,x,Al,Ta,Tl,Pl,Pa,Dl,Cl,gs,it,Ol,ks,Y,fe,Da,Ve,xl,Ca,Nl,js,ze,Oa,Sl,Il,As;return j=new I({}),ye=new I({}),we=new I({}),_e=new q({props:{code:`import evaluate
accuracy = evaluate.load("accuracy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> evaluate
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),Ee=new q({props:{code:'word_length = evaluate.load("word_length", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>word_length = evaluate.load(<span class="hljs-string">&quot;word_length&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),be=new I({}),$e=new q({props:{code:'element_count = evaluate.load("lvwerra/element_count", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>element_count = evaluate.load(<span class="hljs-string">&quot;lvwerra/element_count&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),ge=new I({}),Se=new q({props:{code:`accuracy = evaluate.load("accuracy")
accuracy.description`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.description
Accuracy <span class="hljs-keyword">is</span> the proportion of correct predictions among the total number of cases processed. It can be computed <span class="hljs-keyword">with</span>:
Accuracy = (TP + TN) / (TP + TN + FP + FN)
 Where:
TP: <span class="hljs-literal">True</span> positive
TN: <span class="hljs-literal">True</span> negative
FP: <span class="hljs-literal">False</span> positive
FN: <span class="hljs-literal">False</span> negative`}}),Ie=new q({props:{code:"accuracy.citation",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.citation
<span class="hljs-meta">@article{scikit-learn,</span>
  title={Scikit-learn: Machine Learning <span class="hljs-keyword">in</span> {P}ython},
  author={Pedregosa, F. <span class="hljs-keyword">and</span> Varoquaux, G. <span class="hljs-keyword">and</span> Gramfort, A. <span class="hljs-keyword">and</span> Michel, V.
         <span class="hljs-keyword">and</span> Thirion, B. <span class="hljs-keyword">and</span> Grisel, O. <span class="hljs-keyword">and</span> Blondel, M. <span class="hljs-keyword">and</span> Prettenhofer, P.
         <span class="hljs-keyword">and</span> Weiss, R. <span class="hljs-keyword">and</span> Dubourg, V. <span class="hljs-keyword">and</span> Vanderplas, J. <span class="hljs-keyword">and</span> Passos, A. <span class="hljs-keyword">and</span>
         Cournapeau, D. <span class="hljs-keyword">and</span> Brucher, M. <span class="hljs-keyword">and</span> Perrot, M. <span class="hljs-keyword">and</span> Duchesnay, E.},
  journal={Journal of Machine Learning Research},
  volume={<span class="hljs-number">12</span>},
  pages={<span class="hljs-number">2825</span>--<span class="hljs-number">2830</span>},
  year={<span class="hljs-number">2011</span>}
}`}}),qe=new q({props:{code:"accuracy.features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.features
{
    <span class="hljs-string">&#x27;predictions&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
    <span class="hljs-string">&#x27;references&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
}`}}),ie=new Ii({props:{$$slots:{default:[qi]},$$scope:{ctx:Ia}}}),Me=new I({}),Be=new I({}),Le=new q({props:{code:"accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),Fe=new I({}),Ue=new q({props:{code:`for ref, pred in zip([0,1,0,1], [1,0,0,1]):
    accuracy.add(references=ref, predictions=pred)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> ref, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add(references=ref, predictions=pred)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),Ge=new q({props:{code:`for refs, preds in zip([[0,1],[0,1]], [[1,0],[0,1]]):
    accuracy.add_batch(references=refs, predictions=preds)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> refs, preds <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]], [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add_batch(references=refs, predictions=preds)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),He=new q({props:{code:`for model_inputs, gold_standards in evaluation_dataset:
    predictions = model(model_inputs)
    metric.add_batch(references=gold_standards, predictions=predictions)
metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> model_inputs, gold_standards <span class="hljs-keyword">in</span> evaluation_dataset:
<span class="hljs-meta">&gt;&gt;&gt; </span>    predictions = model(model_inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric.add_batch(references=gold_standards, predictions=predictions)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.compute()`}}),We=new I({}),Ve=new I({}),{c(){E=s("meta"),V=d(),$=s("h1"),A=s("a"),M=s("span"),h(j.$$.fragment),D=d(),z=s("span"),eo=l("A quick tour"),qa=d(),Ke=s("p"),to=l("\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Ma=d(),B=s("h2"),J=s("a"),ut=s("span"),h(ye.$$.fragment),ao=d(),ht=s("span"),so=l("Three types of evaluations"),Ba=d(),Qe=s("p"),oo=l("There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),La=d(),C=s("ul"),K=s("li"),ft=s("strong"),ro=l("Metric"),lo=l(": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Xe=s("a"),no=l("evaluate-metric"),io=l("."),co=d(),Q=s("li"),mt=s("strong"),po=l("Comparison"),uo=l(": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and compute their agreement. You can find all integrated comparisons at "),Ze=s("a"),ho=l("evaluate-comparison"),fo=l("."),mo=d(),X=s("li"),vt=s("strong"),vo=l("Measurement"),yo=l(": As important as the model is the dataset used to train it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),et=s("a"),wo=l("evaluate-measurement"),_o=l("."),Fa=d(),Z=s("p"),Eo=l("For all of these methods there is a single entry point: "),tt=s("a"),bo=l("evaluate.load()"),$o=l("!"),Ra=d(),L=s("h2"),ee=s("a"),yt=s("span"),h(we.$$.fragment),go=d(),wt=s("span"),ko=l("Load"),Ua=d(),te=s("p"),jo=l("Any metric, comparison, or measurement is loaded with the "),_t=s("code"),Ao=l("evaluate.load"),To=l(" function:"),Ga=d(),h(_e.$$.fragment),Ha=d(),at=s("p"),Po=l("If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),Wa=d(),h(Ee.$$.fragment),Ya=d(),F=s("h3"),ae=s("a"),Et=s("span"),h(be.$$.fragment),Do=d(),bt=s("span"),Co=l("Community modules"),Va=d(),st=s("p"),Oo=l("Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the users name:"),za=d(),h($e.$$.fragment),Ja=d(),R=s("h2"),se=s("a"),$t=s("span"),h(ge.$$.fragment),xo=d(),gt=s("span"),No=l("Module attributes"),Ka=d(),oe=s("p"),So=l("All evalution modules come with a range of useful attributes that help to use a module stored in a "),kt=s("code"),Io=l("EvaluationModuleInfo"),qo=l(" object."),Qa=d(),re=s("table"),jt=s("thead"),ke=s("tr"),At=s("th"),Mo=l("Attribute"),Bo=d(),Tt=s("th"),Lo=l("Description"),Fo=d(),_=s("tbody"),je=s("tr"),Pt=s("td"),Dt=s("code"),Ro=l("description"),Uo=d(),Ct=s("td"),Go=l("A short description of the evaluation module."),Ho=d(),Ae=s("tr"),Ot=s("td"),xt=s("code"),Wo=l("citation"),Yo=d(),Nt=s("td"),Vo=l("A BibTex string for citation when available."),zo=d(),Te=s("tr"),St=s("td"),It=s("code"),Jo=l("features"),Ko=d(),Pe=s("td"),Qo=l("A "),qt=s("code"),Xo=l("Features"),Zo=l(" object defining the input format."),er=d(),De=s("tr"),Mt=s("td"),Bt=s("code"),tr=l("inputs_description"),ar=d(),Lt=s("td"),sr=l("This is equivalent to the modules docstring."),or=d(),Ce=s("tr"),Ft=s("td"),Rt=s("code"),rr=l("homepage"),lr=d(),Ut=s("td"),nr=l("The homepage of the module."),ir=d(),Oe=s("tr"),Gt=s("td"),Ht=s("code"),cr=l("license"),dr=d(),Wt=s("td"),pr=l("The license of the module."),ur=d(),xe=s("tr"),Yt=s("td"),Vt=s("code"),hr=l("codebase_urls"),fr=d(),zt=s("td"),mr=l("Link to the code behind the module."),vr=d(),Ne=s("tr"),Jt=s("td"),Kt=s("code"),yr=l("reference_urls"),wr=d(),Qt=s("td"),_r=l("Additional reference URLs."),Xa=d(),le=s("p"),Er=l("Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Xt=s("code"),br=l("description"),$r=l(" attribute of the accuracy metric:"),Za=d(),h(Se.$$.fragment),es=d(),ne=s("p"),gr=l("You can see that it describes how the metric works in theory. If you use this metric for you work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Zt=s("code"),kr=l("citation"),jr=l(" attribute:"),ts=d(),h(Ie.$$.fragment),as=d(),ot=s("p"),Ar=l("Before we can apply a metric or other evaluation module to a use-case we need to know what the input format of the metric is:"),ss=d(),h(qe.$$.fragment),os=d(),h(ie.$$.fragment),rs=d(),U=s("h2"),ce=s("a"),ea=s("span"),h(Me.$$.fragment),Tr=d(),ta=s("span"),Pr=l("Compute"),ls=d(),rt=s("p"),Dr=l("Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),ns=d(),de=s("ol"),aa=s("li"),Cr=l("All-in-one"),Or=d(),sa=s("li"),xr=l("Incremental"),is=d(),g=s("p"),Nr=l("In the incremental approach the necessary inputs are added to the module with "),oa=s("code"),Sr=l("add"),Ir=l(" or "),ra=s("code"),qr=l("add_batch"),Mr=l(" and the score is calculated at the end with "),la=s("code"),Br=l("compute"),Lr=l(". Alternatively, one can pass all the inputs at once to "),na=s("code"),Fr=l("compute"),Rr=l(". Let\u2019s have a look at the two approaches."),cs=d(),G=s("h3"),pe=s("a"),ia=s("span"),h(Be.$$.fragment),Ur=d(),ca=s("span"),da=s("code"),Gr=l("compute"),ds=l("\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute` method.\n\n	"),h(Le.$$.fragment),ps=d(),O=s("p"),Hr=l("Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),pa=s("code"),Wr=l("add"),Yr=l(" or "),ua=s("code"),Vr=l("add_batch"),zr=l(" are useful."),us=d(),H=s("h3"),ue=s("a"),ha=s("span"),h(Fe.$$.fragment),Jr=d(),Re=s("span"),fa=s("code"),Kr=l("add"),Qr=l(" and "),ma=s("code"),Xr=l("add_batch"),hs=d(),T=s("p"),Zr=l("In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),va=s("code"),el=l("compute"),tl=l(". With "),ya=s("code"),al=l("add"),sl=l(" and add batch you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),wa=s("code"),ol=l("add"),rl=l(":"),fs=d(),h(Ue.$$.fragment),ms=d(),P=s("p"),ll=l("Once you have gathered all predictions you can call "),_a=s("code"),nl=l("compute"),il=l(" to compute the score based on all stored values. When getting predictions and references in batches you can use "),Ea=s("code"),cl=l("add_batch"),dl=l(" which adds a list elements for later processing. The rest works as with "),ba=s("code"),pl=l("add"),ul=l(":"),vs=d(),h(Ge.$$.fragment),ys=d(),lt=s("p"),hl=l("This is especially useful when you need to get the predictions from your model in batches:"),ws=d(),h(He.$$.fragment),_s=d(),W=s("h3"),he=s("a"),$a=s("span"),h(We.$$.fragment),fl=d(),ga=s("span"),ml=l("Distributed evaluation"),Es=d(),k=s("p"),vl=l("Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ka=s("code"),yl=l("f(AuB) = f(A) + f(B)"),wl=l("), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),ja=s("code"),_l=l("f(AuB) \u2260 f(A) + f(B)"),El=l("), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),Ye=s("a"),bl=l("F1"),$l=l(" scores of each data subset as your "),Aa=s("strong"),gl=l("final metric"),kl=l("."),bs=d(),nt=s("p"),jl=l("A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),$s=d(),x=s("p"),Al=l("\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),Ta=s("code"),Tl=l("EvaluationModule.compute"),Pl=l(" the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),Pa=s("code"),Dl=l("EvaluationModule.compute"),Cl=l(" will perform the final metric evaluation."),gs=d(),it=s("p"),Ol=l("This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory. distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),ks=d(),Y=s("h2"),fe=s("a"),Da=s("span"),h(Ve.$$.fragment),xl=d(),Ca=s("span"),Nl=l("Save and share"),js=d(),ze=s("p"),Oa=s("strong"),Sl=l("TODO"),Il=l(": add references to save and push_to_hub."),this.h()},l(e){const i=Ni('[data-svelte="svelte-1phssyn"]',document.head);E=o(i,"META",{name:!0,content:!0}),i.forEach(a),V=p(e),$=o(e,"H1",{class:!0});var Je=r($);A=o(Je,"A",{id:!0,class:!0,href:!0});var Ml=r(A);M=o(Ml,"SPAN",{});var Bl=r(M);f(j.$$.fragment,Bl),Bl.forEach(a),Ml.forEach(a),D=p(Je),z=o(Je,"SPAN",{});var Ll=r(z);eo=n(Ll,"A quick tour"),Ll.forEach(a),Je.forEach(a),qa=p(e),Ke=o(e,"P",{});var Fl=r(Ke);to=n(Fl,"\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Fl.forEach(a),Ma=p(e),B=o(e,"H2",{class:!0});var Ts=r(B);J=o(Ts,"A",{id:!0,class:!0,href:!0});var Rl=r(J);ut=o(Rl,"SPAN",{});var Ul=r(ut);f(ye.$$.fragment,Ul),Ul.forEach(a),Rl.forEach(a),ao=p(Ts),ht=o(Ts,"SPAN",{});var Gl=r(ht);so=n(Gl,"Three types of evaluations"),Gl.forEach(a),Ts.forEach(a),Ba=p(e),Qe=o(e,"P",{});var Hl=r(Qe);oo=n(Hl,"There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),Hl.forEach(a),La=p(e),C=o(e,"UL",{});var ct=r(C);K=o(ct,"LI",{});var xa=r(K);ft=o(xa,"STRONG",{});var Wl=r(ft);ro=n(Wl,"Metric"),Wl.forEach(a),lo=n(xa,": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Xe=o(xa,"A",{href:!0});var Yl=r(Xe);no=n(Yl,"evaluate-metric"),Yl.forEach(a),io=n(xa,"."),xa.forEach(a),co=p(ct),Q=o(ct,"LI",{});var Na=r(Q);mt=o(Na,"STRONG",{});var Vl=r(mt);po=n(Vl,"Comparison"),Vl.forEach(a),uo=n(Na,": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and compute their agreement. You can find all integrated comparisons at "),Ze=o(Na,"A",{href:!0});var zl=r(Ze);ho=n(zl,"evaluate-comparison"),zl.forEach(a),fo=n(Na,"."),Na.forEach(a),mo=p(ct),X=o(ct,"LI",{});var Sa=r(X);vt=o(Sa,"STRONG",{});var Jl=r(vt);vo=n(Jl,"Measurement"),Jl.forEach(a),yo=n(Sa,": As important as the model is the dataset used to train it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),et=o(Sa,"A",{href:!0});var Kl=r(et);wo=n(Kl,"evaluate-measurement"),Kl.forEach(a),_o=n(Sa,"."),Sa.forEach(a),ct.forEach(a),Fa=p(e),Z=o(e,"P",{});var Ps=r(Z);Eo=n(Ps,"For all of these methods there is a single entry point: "),tt=o(Ps,"A",{href:!0});var Ql=r(tt);bo=n(Ql,"evaluate.load()"),Ql.forEach(a),$o=n(Ps,"!"),Ps.forEach(a),Ra=p(e),L=o(e,"H2",{class:!0});var Ds=r(L);ee=o(Ds,"A",{id:!0,class:!0,href:!0});var Xl=r(ee);yt=o(Xl,"SPAN",{});var Zl=r(yt);f(we.$$.fragment,Zl),Zl.forEach(a),Xl.forEach(a),go=p(Ds),wt=o(Ds,"SPAN",{});var en=r(wt);ko=n(en,"Load"),en.forEach(a),Ds.forEach(a),Ua=p(e),te=o(e,"P",{});var Cs=r(te);jo=n(Cs,"Any metric, comparison, or measurement is loaded with the "),_t=o(Cs,"CODE",{});var tn=r(_t);Ao=n(tn,"evaluate.load"),tn.forEach(a),To=n(Cs," function:"),Cs.forEach(a),Ga=p(e),f(_e.$$.fragment,e),Ha=p(e),at=o(e,"P",{});var an=r(at);Po=n(an,"If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),an.forEach(a),Wa=p(e),f(Ee.$$.fragment,e),Ya=p(e),F=o(e,"H3",{class:!0});var Os=r(F);ae=o(Os,"A",{id:!0,class:!0,href:!0});var sn=r(ae);Et=o(sn,"SPAN",{});var on=r(Et);f(be.$$.fragment,on),on.forEach(a),sn.forEach(a),Do=p(Os),bt=o(Os,"SPAN",{});var rn=r(bt);Co=n(rn,"Community modules"),rn.forEach(a),Os.forEach(a),Va=p(e),st=o(e,"P",{});var ln=r(st);Oo=n(ln,"Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the users name:"),ln.forEach(a),za=p(e),f($e.$$.fragment,e),Ja=p(e),R=o(e,"H2",{class:!0});var xs=r(R);se=o(xs,"A",{id:!0,class:!0,href:!0});var nn=r(se);$t=o(nn,"SPAN",{});var cn=r($t);f(ge.$$.fragment,cn),cn.forEach(a),nn.forEach(a),xo=p(xs),gt=o(xs,"SPAN",{});var dn=r(gt);No=n(dn,"Module attributes"),dn.forEach(a),xs.forEach(a),Ka=p(e),oe=o(e,"P",{});var Ns=r(oe);So=n(Ns,"All evalution modules come with a range of useful attributes that help to use a module stored in a "),kt=o(Ns,"CODE",{});var pn=r(kt);Io=n(pn,"EvaluationModuleInfo"),pn.forEach(a),qo=n(Ns," object."),Ns.forEach(a),Qa=p(e),re=o(e,"TABLE",{});var Ss=r(re);jt=o(Ss,"THEAD",{});var un=r(jt);ke=o(un,"TR",{});var Is=r(ke);At=o(Is,"TH",{});var hn=r(At);Mo=n(hn,"Attribute"),hn.forEach(a),Bo=p(Is),Tt=o(Is,"TH",{});var fn=r(Tt);Lo=n(fn,"Description"),fn.forEach(a),Is.forEach(a),un.forEach(a),Fo=p(Ss),_=o(Ss,"TBODY",{});var b=r(_);je=o(b,"TR",{});var qs=r(je);Pt=o(qs,"TD",{});var mn=r(Pt);Dt=o(mn,"CODE",{});var vn=r(Dt);Ro=n(vn,"description"),vn.forEach(a),mn.forEach(a),Uo=p(qs),Ct=o(qs,"TD",{});var yn=r(Ct);Go=n(yn,"A short description of the evaluation module."),yn.forEach(a),qs.forEach(a),Ho=p(b),Ae=o(b,"TR",{});var Ms=r(Ae);Ot=o(Ms,"TD",{});var wn=r(Ot);xt=o(wn,"CODE",{});var _n=r(xt);Wo=n(_n,"citation"),_n.forEach(a),wn.forEach(a),Yo=p(Ms),Nt=o(Ms,"TD",{});var En=r(Nt);Vo=n(En,"A BibTex string for citation when available."),En.forEach(a),Ms.forEach(a),zo=p(b),Te=o(b,"TR",{});var Bs=r(Te);St=o(Bs,"TD",{});var bn=r(St);It=o(bn,"CODE",{});var $n=r(It);Jo=n($n,"features"),$n.forEach(a),bn.forEach(a),Ko=p(Bs),Pe=o(Bs,"TD",{});var Ls=r(Pe);Qo=n(Ls,"A "),qt=o(Ls,"CODE",{});var gn=r(qt);Xo=n(gn,"Features"),gn.forEach(a),Zo=n(Ls," object defining the input format."),Ls.forEach(a),Bs.forEach(a),er=p(b),De=o(b,"TR",{});var Fs=r(De);Mt=o(Fs,"TD",{});var kn=r(Mt);Bt=o(kn,"CODE",{});var jn=r(Bt);tr=n(jn,"inputs_description"),jn.forEach(a),kn.forEach(a),ar=p(Fs),Lt=o(Fs,"TD",{});var An=r(Lt);sr=n(An,"This is equivalent to the modules docstring."),An.forEach(a),Fs.forEach(a),or=p(b),Ce=o(b,"TR",{});var Rs=r(Ce);Ft=o(Rs,"TD",{});var Tn=r(Ft);Rt=o(Tn,"CODE",{});var Pn=r(Rt);rr=n(Pn,"homepage"),Pn.forEach(a),Tn.forEach(a),lr=p(Rs),Ut=o(Rs,"TD",{});var Dn=r(Ut);nr=n(Dn,"The homepage of the module."),Dn.forEach(a),Rs.forEach(a),ir=p(b),Oe=o(b,"TR",{});var Us=r(Oe);Gt=o(Us,"TD",{});var Cn=r(Gt);Ht=o(Cn,"CODE",{});var On=r(Ht);cr=n(On,"license"),On.forEach(a),Cn.forEach(a),dr=p(Us),Wt=o(Us,"TD",{});var xn=r(Wt);pr=n(xn,"The license of the module."),xn.forEach(a),Us.forEach(a),ur=p(b),xe=o(b,"TR",{});var Gs=r(xe);Yt=o(Gs,"TD",{});var Nn=r(Yt);Vt=o(Nn,"CODE",{});var Sn=r(Vt);hr=n(Sn,"codebase_urls"),Sn.forEach(a),Nn.forEach(a),fr=p(Gs),zt=o(Gs,"TD",{});var In=r(zt);mr=n(In,"Link to the code behind the module."),In.forEach(a),Gs.forEach(a),vr=p(b),Ne=o(b,"TR",{});var Hs=r(Ne);Jt=o(Hs,"TD",{});var qn=r(Jt);Kt=o(qn,"CODE",{});var Mn=r(Kt);yr=n(Mn,"reference_urls"),Mn.forEach(a),qn.forEach(a),wr=p(Hs),Qt=o(Hs,"TD",{});var Bn=r(Qt);_r=n(Bn,"Additional reference URLs."),Bn.forEach(a),Hs.forEach(a),b.forEach(a),Ss.forEach(a),Xa=p(e),le=o(e,"P",{});var Ws=r(le);Er=n(Ws,"Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Xt=o(Ws,"CODE",{});var Ln=r(Xt);br=n(Ln,"description"),Ln.forEach(a),$r=n(Ws," attribute of the accuracy metric:"),Ws.forEach(a),Za=p(e),f(Se.$$.fragment,e),es=p(e),ne=o(e,"P",{});var Ys=r(ne);gr=n(Ys,"You can see that it describes how the metric works in theory. If you use this metric for you work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Zt=o(Ys,"CODE",{});var Fn=r(Zt);kr=n(Fn,"citation"),Fn.forEach(a),jr=n(Ys," attribute:"),Ys.forEach(a),ts=p(e),f(Ie.$$.fragment,e),as=p(e),ot=o(e,"P",{});var Rn=r(ot);Ar=n(Rn,"Before we can apply a metric or other evaluation module to a use-case we need to know what the input format of the metric is:"),Rn.forEach(a),ss=p(e),f(qe.$$.fragment,e),os=p(e),f(ie.$$.fragment,e),rs=p(e),U=o(e,"H2",{class:!0});var Vs=r(U);ce=o(Vs,"A",{id:!0,class:!0,href:!0});var Un=r(ce);ea=o(Un,"SPAN",{});var Gn=r(ea);f(Me.$$.fragment,Gn),Gn.forEach(a),Un.forEach(a),Tr=p(Vs),ta=o(Vs,"SPAN",{});var Hn=r(ta);Pr=n(Hn,"Compute"),Hn.forEach(a),Vs.forEach(a),ls=p(e),rt=o(e,"P",{});var Wn=r(rt);Dr=n(Wn,"Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),Wn.forEach(a),ns=p(e),de=o(e,"OL",{});var zs=r(de);aa=o(zs,"LI",{});var Yn=r(aa);Cr=n(Yn,"All-in-one"),Yn.forEach(a),Or=p(zs),sa=o(zs,"LI",{});var Vn=r(sa);xr=n(Vn,"Incremental"),Vn.forEach(a),zs.forEach(a),is=p(e),g=o(e,"P",{});var N=r(g);Nr=n(N,"In the incremental approach the necessary inputs are added to the module with "),oa=o(N,"CODE",{});var zn=r(oa);Sr=n(zn,"add"),zn.forEach(a),Ir=n(N," or "),ra=o(N,"CODE",{});var Jn=r(ra);qr=n(Jn,"add_batch"),Jn.forEach(a),Mr=n(N," and the score is calculated at the end with "),la=o(N,"CODE",{});var Kn=r(la);Br=n(Kn,"compute"),Kn.forEach(a),Lr=n(N,". Alternatively, one can pass all the inputs at once to "),na=o(N,"CODE",{});var Qn=r(na);Fr=n(Qn,"compute"),Qn.forEach(a),Rr=n(N,". Let\u2019s have a look at the two approaches."),N.forEach(a),cs=p(e),G=o(e,"H3",{class:!0});var Js=r(G);pe=o(Js,"A",{id:!0,class:!0,href:!0});var Xn=r(pe);ia=o(Xn,"SPAN",{});var Zn=r(ia);f(Be.$$.fragment,Zn),Zn.forEach(a),Xn.forEach(a),Ur=p(Js),ca=o(Js,"SPAN",{});var ei=r(ca);da=o(ei,"CODE",{});var ti=r(da);Gr=n(ti,"compute"),ti.forEach(a),ei.forEach(a),Js.forEach(a),ds=n(e,"\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute` method.\n\n	"),f(Le.$$.fragment,e),ps=p(e),O=o(e,"P",{});var dt=r(O);Hr=n(dt,"Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),pa=o(dt,"CODE",{});var ai=r(pa);Wr=n(ai,"add"),ai.forEach(a),Yr=n(dt," or "),ua=o(dt,"CODE",{});var si=r(ua);Vr=n(si,"add_batch"),si.forEach(a),zr=n(dt," are useful."),dt.forEach(a),us=p(e),H=o(e,"H3",{class:!0});var Ks=r(H);ue=o(Ks,"A",{id:!0,class:!0,href:!0});var oi=r(ue);ha=o(oi,"SPAN",{});var ri=r(ha);f(Fe.$$.fragment,ri),ri.forEach(a),oi.forEach(a),Jr=p(Ks),Re=o(Ks,"SPAN",{});var Qs=r(Re);fa=o(Qs,"CODE",{});var li=r(fa);Kr=n(li,"add"),li.forEach(a),Qr=n(Qs," and "),ma=o(Qs,"CODE",{});var ni=r(ma);Xr=n(ni,"add_batch"),ni.forEach(a),Qs.forEach(a),Ks.forEach(a),hs=p(e),T=o(e,"P",{});var me=r(T);Zr=n(me,"In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),va=o(me,"CODE",{});var ii=r(va);el=n(ii,"compute"),ii.forEach(a),tl=n(me,". With "),ya=o(me,"CODE",{});var ci=r(ya);al=n(ci,"add"),ci.forEach(a),sl=n(me," and add batch you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),wa=o(me,"CODE",{});var di=r(wa);ol=n(di,"add"),di.forEach(a),rl=n(me,":"),me.forEach(a),fs=p(e),f(Ue.$$.fragment,e),ms=p(e),P=o(e,"P",{});var ve=r(P);ll=n(ve,"Once you have gathered all predictions you can call "),_a=o(ve,"CODE",{});var pi=r(_a);nl=n(pi,"compute"),pi.forEach(a),il=n(ve," to compute the score based on all stored values. When getting predictions and references in batches you can use "),Ea=o(ve,"CODE",{});var ui=r(Ea);cl=n(ui,"add_batch"),ui.forEach(a),dl=n(ve," which adds a list elements for later processing. The rest works as with "),ba=o(ve,"CODE",{});var hi=r(ba);pl=n(hi,"add"),hi.forEach(a),ul=n(ve,":"),ve.forEach(a),vs=p(e),f(Ge.$$.fragment,e),ys=p(e),lt=o(e,"P",{});var fi=r(lt);hl=n(fi,"This is especially useful when you need to get the predictions from your model in batches:"),fi.forEach(a),ws=p(e),f(He.$$.fragment,e),_s=p(e),W=o(e,"H3",{class:!0});var Xs=r(W);he=o(Xs,"A",{id:!0,class:!0,href:!0});var mi=r(he);$a=o(mi,"SPAN",{});var vi=r($a);f(We.$$.fragment,vi),vi.forEach(a),mi.forEach(a),fl=p(Xs),ga=o(Xs,"SPAN",{});var yi=r(ga);ml=n(yi,"Distributed evaluation"),yi.forEach(a),Xs.forEach(a),Es=p(e),k=o(e,"P",{});var S=r(k);vl=n(S,"Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ka=o(S,"CODE",{});var wi=r(ka);yl=n(wi,"f(AuB) = f(A) + f(B)"),wi.forEach(a),wl=n(S,"), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),ja=o(S,"CODE",{});var _i=r(ja);_l=n(_i,"f(AuB) \u2260 f(A) + f(B)"),_i.forEach(a),El=n(S,"), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),Ye=o(S,"A",{href:!0,rel:!0});var Ei=r(Ye);bl=n(Ei,"F1"),Ei.forEach(a),$l=n(S," scores of each data subset as your "),Aa=o(S,"STRONG",{});var bi=r(Aa);gl=n(bi,"final metric"),bi.forEach(a),kl=n(S,"."),S.forEach(a),bs=p(e),nt=o(e,"P",{});var $i=r(nt);jl=n($i,"A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),$i.forEach(a),$s=p(e),x=o(e,"P",{});var pt=r(x);Al=n(pt,"\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),Ta=o(pt,"CODE",{});var gi=r(Ta);Tl=n(gi,"EvaluationModule.compute"),gi.forEach(a),Pl=n(pt," the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),Pa=o(pt,"CODE",{});var ki=r(Pa);Dl=n(ki,"EvaluationModule.compute"),ki.forEach(a),Cl=n(pt," will perform the final metric evaluation."),pt.forEach(a),gs=p(e),it=o(e,"P",{});var ji=r(it);Ol=n(ji,"This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory. distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),ji.forEach(a),ks=p(e),Y=o(e,"H2",{class:!0});var Zs=r(Y);fe=o(Zs,"A",{id:!0,class:!0,href:!0});var Ai=r(fe);Da=o(Ai,"SPAN",{});var Ti=r(Da);f(Ve.$$.fragment,Ti),Ti.forEach(a),Ai.forEach(a),xl=p(Zs),Ca=o(Zs,"SPAN",{});var Pi=r(Ca);Nl=n(Pi,"Save and share"),Pi.forEach(a),Zs.forEach(a),js=p(e),ze=o(e,"P",{});var ql=r(ze);Oa=o(ql,"STRONG",{});var Di=r(Oa);Sl=n(Di,"TODO"),Di.forEach(a),Il=n(ql,": add references to save and push_to_hub."),ql.forEach(a),this.h()},h(){u(E,"name","hf:doc:metadata"),u(E,"content",JSON.stringify(Bi)),u(A,"id","a-quick-tour"),u(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(A,"href","#a-quick-tour"),u($,"class","relative group"),u(J,"id","three-types-of-evaluations"),u(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(J,"href","#three-types-of-evaluations"),u(B,"class","relative group"),u(Xe,"href","hf.co/evaluate-metric"),u(Ze,"href","hf.co/evaluate-comparison"),u(et,"href","hf.co/evaluate-measurement"),u(tt,"href","/docs/evaluate/pr_72/en/package_reference/loading_methods#evaluate.load"),u(ee,"id","load"),u(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ee,"href","#load"),u(L,"class","relative group"),u(ae,"id","community-modules"),u(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ae,"href","#community-modules"),u(F,"class","relative group"),u(se,"id","module-attributes"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#module-attributes"),u(R,"class","relative group"),u(ce,"id","compute"),u(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ce,"href","#compute"),u(U,"class","relative group"),u(pe,"id","compute"),u(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(pe,"href","#compute"),u(G,"class","relative group"),u(ue,"id","add-and-addbatch"),u(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ue,"href","#add-and-addbatch"),u(H,"class","relative group"),u(he,"id","distributed-evaluation"),u(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(he,"href","#distributed-evaluation"),u(W,"class","relative group"),u(Ye,"href","https://huggingface.co/metrics/f1"),u(Ye,"rel","nofollow"),u(fe,"id","save-and-share"),u(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(fe,"href","#save-and-share"),u(Y,"class","relative group")},m(e,i){t(document.head,E),c(e,V,i),c(e,$,i),t($,A),t(A,M),m(j,M,null),t($,D),t($,z),t(z,eo),c(e,qa,i),c(e,Ke,i),t(Ke,to),c(e,Ma,i),c(e,B,i),t(B,J),t(J,ut),m(ye,ut,null),t(B,ao),t(B,ht),t(ht,so),c(e,Ba,i),c(e,Qe,i),t(Qe,oo),c(e,La,i),c(e,C,i),t(C,K),t(K,ft),t(ft,ro),t(K,lo),t(K,Xe),t(Xe,no),t(K,io),t(C,co),t(C,Q),t(Q,mt),t(mt,po),t(Q,uo),t(Q,Ze),t(Ze,ho),t(Q,fo),t(C,mo),t(C,X),t(X,vt),t(vt,vo),t(X,yo),t(X,et),t(et,wo),t(X,_o),c(e,Fa,i),c(e,Z,i),t(Z,Eo),t(Z,tt),t(tt,bo),t(Z,$o),c(e,Ra,i),c(e,L,i),t(L,ee),t(ee,yt),m(we,yt,null),t(L,go),t(L,wt),t(wt,ko),c(e,Ua,i),c(e,te,i),t(te,jo),t(te,_t),t(_t,Ao),t(te,To),c(e,Ga,i),m(_e,e,i),c(e,Ha,i),c(e,at,i),t(at,Po),c(e,Wa,i),m(Ee,e,i),c(e,Ya,i),c(e,F,i),t(F,ae),t(ae,Et),m(be,Et,null),t(F,Do),t(F,bt),t(bt,Co),c(e,Va,i),c(e,st,i),t(st,Oo),c(e,za,i),m($e,e,i),c(e,Ja,i),c(e,R,i),t(R,se),t(se,$t),m(ge,$t,null),t(R,xo),t(R,gt),t(gt,No),c(e,Ka,i),c(e,oe,i),t(oe,So),t(oe,kt),t(kt,Io),t(oe,qo),c(e,Qa,i),c(e,re,i),t(re,jt),t(jt,ke),t(ke,At),t(At,Mo),t(ke,Bo),t(ke,Tt),t(Tt,Lo),t(re,Fo),t(re,_),t(_,je),t(je,Pt),t(Pt,Dt),t(Dt,Ro),t(je,Uo),t(je,Ct),t(Ct,Go),t(_,Ho),t(_,Ae),t(Ae,Ot),t(Ot,xt),t(xt,Wo),t(Ae,Yo),t(Ae,Nt),t(Nt,Vo),t(_,zo),t(_,Te),t(Te,St),t(St,It),t(It,Jo),t(Te,Ko),t(Te,Pe),t(Pe,Qo),t(Pe,qt),t(qt,Xo),t(Pe,Zo),t(_,er),t(_,De),t(De,Mt),t(Mt,Bt),t(Bt,tr),t(De,ar),t(De,Lt),t(Lt,sr),t(_,or),t(_,Ce),t(Ce,Ft),t(Ft,Rt),t(Rt,rr),t(Ce,lr),t(Ce,Ut),t(Ut,nr),t(_,ir),t(_,Oe),t(Oe,Gt),t(Gt,Ht),t(Ht,cr),t(Oe,dr),t(Oe,Wt),t(Wt,pr),t(_,ur),t(_,xe),t(xe,Yt),t(Yt,Vt),t(Vt,hr),t(xe,fr),t(xe,zt),t(zt,mr),t(_,vr),t(_,Ne),t(Ne,Jt),t(Jt,Kt),t(Kt,yr),t(Ne,wr),t(Ne,Qt),t(Qt,_r),c(e,Xa,i),c(e,le,i),t(le,Er),t(le,Xt),t(Xt,br),t(le,$r),c(e,Za,i),m(Se,e,i),c(e,es,i),c(e,ne,i),t(ne,gr),t(ne,Zt),t(Zt,kr),t(ne,jr),c(e,ts,i),m(Ie,e,i),c(e,as,i),c(e,ot,i),t(ot,Ar),c(e,ss,i),m(qe,e,i),c(e,os,i),m(ie,e,i),c(e,rs,i),c(e,U,i),t(U,ce),t(ce,ea),m(Me,ea,null),t(U,Tr),t(U,ta),t(ta,Pr),c(e,ls,i),c(e,rt,i),t(rt,Dr),c(e,ns,i),c(e,de,i),t(de,aa),t(aa,Cr),t(de,Or),t(de,sa),t(sa,xr),c(e,is,i),c(e,g,i),t(g,Nr),t(g,oa),t(oa,Sr),t(g,Ir),t(g,ra),t(ra,qr),t(g,Mr),t(g,la),t(la,Br),t(g,Lr),t(g,na),t(na,Fr),t(g,Rr),c(e,cs,i),c(e,G,i),t(G,pe),t(pe,ia),m(Be,ia,null),t(G,Ur),t(G,ca),t(ca,da),t(da,Gr),c(e,ds,i),m(Le,e,i),c(e,ps,i),c(e,O,i),t(O,Hr),t(O,pa),t(pa,Wr),t(O,Yr),t(O,ua),t(ua,Vr),t(O,zr),c(e,us,i),c(e,H,i),t(H,ue),t(ue,ha),m(Fe,ha,null),t(H,Jr),t(H,Re),t(Re,fa),t(fa,Kr),t(Re,Qr),t(Re,ma),t(ma,Xr),c(e,hs,i),c(e,T,i),t(T,Zr),t(T,va),t(va,el),t(T,tl),t(T,ya),t(ya,al),t(T,sl),t(T,wa),t(wa,ol),t(T,rl),c(e,fs,i),m(Ue,e,i),c(e,ms,i),c(e,P,i),t(P,ll),t(P,_a),t(_a,nl),t(P,il),t(P,Ea),t(Ea,cl),t(P,dl),t(P,ba),t(ba,pl),t(P,ul),c(e,vs,i),m(Ge,e,i),c(e,ys,i),c(e,lt,i),t(lt,hl),c(e,ws,i),m(He,e,i),c(e,_s,i),c(e,W,i),t(W,he),t(he,$a),m(We,$a,null),t(W,fl),t(W,ga),t(ga,ml),c(e,Es,i),c(e,k,i),t(k,vl),t(k,ka),t(ka,yl),t(k,wl),t(k,ja),t(ja,_l),t(k,El),t(k,Ye),t(Ye,bl),t(k,$l),t(k,Aa),t(Aa,gl),t(k,kl),c(e,bs,i),c(e,nt,i),t(nt,jl),c(e,$s,i),c(e,x,i),t(x,Al),t(x,Ta),t(Ta,Tl),t(x,Pl),t(x,Pa),t(Pa,Dl),t(x,Cl),c(e,gs,i),c(e,it,i),t(it,Ol),c(e,ks,i),c(e,Y,i),t(Y,fe),t(fe,Da),m(Ve,Da,null),t(Y,xl),t(Y,Ca),t(Ca,Nl),c(e,js,i),c(e,ze,i),t(ze,Oa),t(Oa,Sl),t(ze,Il),As=!0},p(e,[i]){const Je={};i&2&&(Je.$$scope={dirty:i,ctx:e}),ie.$set(Je)},i(e){As||(v(j.$$.fragment,e),v(ye.$$.fragment,e),v(we.$$.fragment,e),v(_e.$$.fragment,e),v(Ee.$$.fragment,e),v(be.$$.fragment,e),v($e.$$.fragment,e),v(ge.$$.fragment,e),v(Se.$$.fragment,e),v(Ie.$$.fragment,e),v(qe.$$.fragment,e),v(ie.$$.fragment,e),v(Me.$$.fragment,e),v(Be.$$.fragment,e),v(Le.$$.fragment,e),v(Fe.$$.fragment,e),v(Ue.$$.fragment,e),v(Ge.$$.fragment,e),v(He.$$.fragment,e),v(We.$$.fragment,e),v(Ve.$$.fragment,e),As=!0)},o(e){y(j.$$.fragment,e),y(ye.$$.fragment,e),y(we.$$.fragment,e),y(_e.$$.fragment,e),y(Ee.$$.fragment,e),y(be.$$.fragment,e),y($e.$$.fragment,e),y(ge.$$.fragment,e),y(Se.$$.fragment,e),y(Ie.$$.fragment,e),y(qe.$$.fragment,e),y(ie.$$.fragment,e),y(Me.$$.fragment,e),y(Be.$$.fragment,e),y(Le.$$.fragment,e),y(Fe.$$.fragment,e),y(Ue.$$.fragment,e),y(Ge.$$.fragment,e),y(He.$$.fragment,e),y(We.$$.fragment,e),y(Ve.$$.fragment,e),As=!1},d(e){a(E),e&&a(V),e&&a($),w(j),e&&a(qa),e&&a(Ke),e&&a(Ma),e&&a(B),w(ye),e&&a(Ba),e&&a(Qe),e&&a(La),e&&a(C),e&&a(Fa),e&&a(Z),e&&a(Ra),e&&a(L),w(we),e&&a(Ua),e&&a(te),e&&a(Ga),w(_e,e),e&&a(Ha),e&&a(at),e&&a(Wa),w(Ee,e),e&&a(Ya),e&&a(F),w(be),e&&a(Va),e&&a(st),e&&a(za),w($e,e),e&&a(Ja),e&&a(R),w(ge),e&&a(Ka),e&&a(oe),e&&a(Qa),e&&a(re),e&&a(Xa),e&&a(le),e&&a(Za),w(Se,e),e&&a(es),e&&a(ne),e&&a(ts),w(Ie,e),e&&a(as),e&&a(ot),e&&a(ss),w(qe,e),e&&a(os),w(ie,e),e&&a(rs),e&&a(U),w(Me),e&&a(ls),e&&a(rt),e&&a(ns),e&&a(de),e&&a(is),e&&a(g),e&&a(cs),e&&a(G),w(Be),e&&a(ds),w(Le,e),e&&a(ps),e&&a(O),e&&a(us),e&&a(H),w(Fe),e&&a(hs),e&&a(T),e&&a(fs),w(Ue,e),e&&a(ms),e&&a(P),e&&a(vs),w(Ge,e),e&&a(ys),e&&a(lt),e&&a(ws),w(He,e),e&&a(_s),e&&a(W),w(We),e&&a(Es),e&&a(k),e&&a(bs),e&&a(nt),e&&a($s),e&&a(x),e&&a(gs),e&&a(it),e&&a(ks),e&&a(Y),w(Ve),e&&a(js),e&&a(ze)}}}const Bi={local:"a-quick-tour",sections:[{local:"three-types-of-evaluations",title:"Three types of evaluations"},{local:"load",sections:[{local:"community-modules",title:"Community modules"}],title:"Load"},{local:"module-attributes",title:"Module attributes"},{local:"compute",sections:[{local:"compute",title:"`compute`"},{local:"add-and-addbatch",title:"`add` and `add_batch`"},{local:"distributed-evaluation",title:"Distributed evaluation"}],title:"Compute"},{local:"save-and-share",title:"Save and share"}],title:"A quick tour"};function Li(Ia){return Si(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hi extends Ci{constructor(E){super();Oi(this,E,Li,Mi,xi,{})}}export{Hi as default,Bi as metadata};
