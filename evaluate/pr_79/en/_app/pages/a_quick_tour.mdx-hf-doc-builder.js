import{S as Si,i as Ii,s as qi,e as s,k as d,w as u,t as l,M as Mi,c as o,d as a,m as p,a as r,x as f,h as n,b as h,G as t,g as c,y as m,q as v,o as y,B as _,v as Bi}from"../chunks/vendor-hf-doc-builder.js";import{T as Li}from"../chunks/Tip-hf-doc-builder.js";import{I as q}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as M}from"../chunks/CodeBlock-hf-doc-builder.js";function Fi(qa){let E,z,$,A,B;return{c(){E=s("p"),z=l("Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),$=s("code"),A=l("features"),B=l(". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation.")},l(T){E=o(T,"P",{});var D=r(E);z=n(D,"Note that features always describe the type of a single input element. In general we will add lists of elements so you can always think of a list around the types in "),$=o(D,"CODE",{});var J=r($);A=n(J,"features"),J.forEach(a),B=n(D,". Evaluate accepts various input formats (Python lists, NumPy arrays, PyTorch tensors, etc.) and converts them to an appropriate format for storage and computation."),D.forEach(a)},m(T,D){c(T,E,D),t(E,z),t(E,$),t($,A),t(E,B)},d(T){T&&a(E)}}}function Ri(qa){let E,z,$,A,B,T,D,J,to,Ma,Ke,ao,Ba,L,K,ht,ye,so,ut,oo,La,Qe,ro,Fa,C,Q,ft,lo,no,Xe,io,co,po,X,mt,ho,uo,Ze,fo,mo,vo,Z,vt,yo,_o,et,wo,Eo,Ra,ee,bo,tt,$o,go,Ga,F,te,yt,_e,ko,_t,jo,Ha,ae,To,wt,Ao,Po,Ua,we,Wa,at,Do,Ya,Ee,Va,R,se,Et,be,Co,bt,Oo,za,st,xo,Ja,$e,Ka,G,oe,$t,ge,No,gt,So,Qa,re,Io,kt,qo,Mo,Xa,le,jt,ke,Tt,Bo,Lo,At,Fo,Ro,w,je,Pt,Dt,Go,Ho,Ct,Uo,Wo,Te,Ot,xt,Yo,Vo,Nt,zo,Jo,Ae,St,It,Ko,Qo,Pe,Xo,qt,Zo,er,tr,De,Mt,Bt,ar,sr,Lt,or,rr,Ce,Ft,Rt,lr,nr,Gt,ir,cr,Oe,Ht,Ut,dr,pr,Wt,hr,ur,xe,Yt,Vt,fr,mr,zt,vr,yr,Ne,Jt,Kt,_r,wr,Qt,Er,Za,ne,br,Xt,$r,gr,es,Se,ts,ie,kr,Zt,jr,Tr,as,Ie,ss,ot,Ar,os,qe,rs,ce,ls,H,de,ea,Me,Pr,ta,Dr,ns,rt,Cr,is,pe,aa,Or,xr,sa,Nr,cs,g,Sr,oa,Ir,qr,ra,Mr,Br,la,Lr,Fr,na,Rr,Gr,ds,U,he,ia,Be,Hr,ca,da,Ur,ps,Le,hs,O,Wr,pa,Yr,Vr,ha,zr,Jr,us,W,ue,ua,Fe,Kr,Re,fa,Qr,Xr,ma,Zr,fs,k,el,va,tl,al,ya,sl,ol,_a,rl,ll,wa,nl,il,ms,Ge,vs,P,cl,Ea,dl,pl,ba,hl,ul,$a,fl,ml,ys,He,_s,lt,vl,ws,Ue,Es,Y,fe,ga,We,yl,ka,_l,bs,j,wl,ja,El,bl,Ta,$l,gl,Ye,kl,jl,Aa,Tl,Al,$s,nt,Pl,gs,x,Dl,Pa,Cl,Ol,Da,xl,Nl,ks,it,Sl,js,V,me,Ca,Ve,Il,Oa,ql,Ts,ze,xa,Ml,Bl,As;return T=new q({}),ye=new q({}),_e=new q({}),we=new M({props:{code:`import evaluate
accuracy = evaluate.load("accuracy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> evaluate
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),Ee=new M({props:{code:'word_length = evaluate.load("word_length", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>word_length = evaluate.load(<span class="hljs-string">&quot;word_length&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),be=new q({}),$e=new M({props:{code:'element_count = evaluate.load("lvwerra/element_count", module_type="measurement")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>element_count = evaluate.load(<span class="hljs-string">&quot;lvwerra/element_count&quot;</span>, module_type=<span class="hljs-string">&quot;measurement&quot;</span>)'}}),ge=new q({}),Se=new M({props:{code:`accuracy = evaluate.load("accuracy")
accuracy.description`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = evaluate.load(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.description
Accuracy <span class="hljs-keyword">is</span> the proportion of correct predictions among the total number of cases processed. It can be computed <span class="hljs-keyword">with</span>:
Accuracy = (TP + TN) / (TP + TN + FP + FN)
 Where:
TP: <span class="hljs-literal">True</span> positive
TN: <span class="hljs-literal">True</span> negative
FP: <span class="hljs-literal">False</span> positive
FN: <span class="hljs-literal">False</span> negative`}}),Ie=new M({props:{code:"accuracy.citation",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.citation
<span class="hljs-meta">@article{scikit-learn,</span>
  title={Scikit-learn: Machine Learning <span class="hljs-keyword">in</span> {P}ython},
  author={Pedregosa, F. <span class="hljs-keyword">and</span> Varoquaux, G. <span class="hljs-keyword">and</span> Gramfort, A. <span class="hljs-keyword">and</span> Michel, V.
         <span class="hljs-keyword">and</span> Thirion, B. <span class="hljs-keyword">and</span> Grisel, O. <span class="hljs-keyword">and</span> Blondel, M. <span class="hljs-keyword">and</span> Prettenhofer, P.
         <span class="hljs-keyword">and</span> Weiss, R. <span class="hljs-keyword">and</span> Dubourg, V. <span class="hljs-keyword">and</span> Vanderplas, J. <span class="hljs-keyword">and</span> Passos, A. <span class="hljs-keyword">and</span>
         Cournapeau, D. <span class="hljs-keyword">and</span> Brucher, M. <span class="hljs-keyword">and</span> Perrot, M. <span class="hljs-keyword">and</span> Duchesnay, E.},
  journal={Journal of Machine Learning Research},
  volume={<span class="hljs-number">12</span>},
  pages={<span class="hljs-number">2825</span>--<span class="hljs-number">2830</span>},
  year={<span class="hljs-number">2011</span>}
}`}}),qe=new M({props:{code:"accuracy.features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.features
{
    <span class="hljs-string">&#x27;predictions&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
    <span class="hljs-string">&#x27;references&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
}`}}),ce=new Li({props:{$$slots:{default:[Fi]},$$scope:{ctx:qa}}}),Me=new q({}),Be=new q({}),Le=new M({props:{code:"accuracy.compute(references=[0,1,0,1], predictions=[1,0,0,1])",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], predictions=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),Fe=new q({}),Ge=new M({props:{code:`for ref, pred in zip([0,1,0,1], [1,0,0,1]):
    accuracy.add(references=ref, predictions=pred)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> ref, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add(references=ref, predictions=pred)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),He=new M({props:{code:`for refs, preds in zip([[0,1],[0,1]], [[1,0],[0,1]]):
    accuracy.add_batch(references=refs, predictions=preds)
accuracy.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> refs, preds <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]], [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]):
<span class="hljs-meta">&gt;&gt;&gt; </span>    accuracy.add_batch(references=refs, predictions=preds)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute()
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),Ue=new M({props:{code:`for model_inputs, gold_standards in evaluation_dataset:
    predictions = model(model_inputs)
    metric.add_batch(references=gold_standards, predictions=predictions)
metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> model_inputs, gold_standards <span class="hljs-keyword">in</span> evaluation_dataset:
<span class="hljs-meta">&gt;&gt;&gt; </span>    predictions = model(model_inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>    metric.add_batch(references=gold_standards, predictions=predictions)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.compute()`}}),We=new q({}),Ve=new q({}),{c(){E=s("meta"),z=d(),$=s("h1"),A=s("a"),B=s("span"),u(T.$$.fragment),D=d(),J=s("span"),to=l("A quick tour"),Ma=d(),Ke=s("p"),ao=l("\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Ba=d(),L=s("h2"),K=s("a"),ht=s("span"),u(ye.$$.fragment),so=d(),ut=s("span"),oo=l("Three types of evaluations"),La=d(),Qe=s("p"),ro=l("There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),Fa=d(),C=s("ul"),Q=s("li"),ft=s("strong"),lo=l("Metric"),no=l(": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Xe=s("a"),io=l("evaluate-metric"),co=l("."),po=d(),X=s("li"),mt=s("strong"),ho=l("Comparison"),uo=l(": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),Ze=s("a"),fo=l("evaluate-comparison"),mo=l("."),vo=d(),Z=s("li"),vt=s("strong"),yo=l("Measurement"),_o=l(": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),et=s("a"),wo=l("evaluate-measurement"),Eo=l("."),Ra=d(),ee=s("p"),bo=l("For all of these methods there is a single entry point: "),tt=s("a"),$o=l("evaluate.load()"),go=l("!"),Ga=d(),F=s("h2"),te=s("a"),yt=s("span"),u(_e.$$.fragment),ko=d(),_t=s("span"),jo=l("Load"),Ha=d(),ae=s("p"),To=l("Any metric, comparison, or measurement is loaded with the "),wt=s("code"),Ao=l("evaluate.load"),Po=l(" function:"),Ua=d(),u(we.$$.fragment),Wa=d(),at=s("p"),Do=l("If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),Ya=d(),u(Ee.$$.fragment),Va=d(),R=s("h3"),se=s("a"),Et=s("span"),u(be.$$.fragment),Co=d(),bt=s("span"),Oo=l("Community modules"),za=d(),st=s("p"),xo=l("Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),Ja=d(),u($e.$$.fragment),Ka=d(),G=s("h2"),oe=s("a"),$t=s("span"),u(ge.$$.fragment),No=d(),gt=s("span"),So=l("Module attributes"),Qa=d(),re=s("p"),Io=l("All evalution modules come with a range of useful attributes that help to use a module stored in a "),kt=s("code"),qo=l("EvaluationModuleInfo"),Mo=l(" object."),Xa=d(),le=s("table"),jt=s("thead"),ke=s("tr"),Tt=s("th"),Bo=l("Attribute"),Lo=d(),At=s("th"),Fo=l("Description"),Ro=d(),w=s("tbody"),je=s("tr"),Pt=s("td"),Dt=s("code"),Go=l("description"),Ho=d(),Ct=s("td"),Uo=l("A short description of the evaluation module."),Wo=d(),Te=s("tr"),Ot=s("td"),xt=s("code"),Yo=l("citation"),Vo=d(),Nt=s("td"),zo=l("A BibTex string for citation when available."),Jo=d(),Ae=s("tr"),St=s("td"),It=s("code"),Ko=l("features"),Qo=d(),Pe=s("td"),Xo=l("A "),qt=s("code"),Zo=l("Features"),er=l(" object defining the input format."),tr=d(),De=s("tr"),Mt=s("td"),Bt=s("code"),ar=l("inputs_description"),sr=d(),Lt=s("td"),or=l("This is equivalent to the modules docstring."),rr=d(),Ce=s("tr"),Ft=s("td"),Rt=s("code"),lr=l("homepage"),nr=d(),Gt=s("td"),ir=l("The homepage of the module."),cr=d(),Oe=s("tr"),Ht=s("td"),Ut=s("code"),dr=l("license"),pr=d(),Wt=s("td"),hr=l("The license of the module."),ur=d(),xe=s("tr"),Yt=s("td"),Vt=s("code"),fr=l("codebase_urls"),mr=d(),zt=s("td"),vr=l("Link to the code behind the module."),yr=d(),Ne=s("tr"),Jt=s("td"),Kt=s("code"),_r=l("reference_urls"),wr=d(),Qt=s("td"),Er=l("Additional reference URLs."),Za=d(),ne=s("p"),br=l("Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Xt=s("code"),$r=l("description"),gr=l(" attribute of the accuracy metric:"),es=d(),u(Se.$$.fragment),ts=d(),ie=s("p"),kr=l("You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Zt=s("code"),jr=l("citation"),Tr=l(" attribute:"),as=d(),u(Ie.$$.fragment),ss=d(),ot=s("p"),Ar=l("Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),os=d(),u(qe.$$.fragment),rs=d(),u(ce.$$.fragment),ls=d(),H=s("h2"),de=s("a"),ea=s("span"),u(Me.$$.fragment),Pr=d(),ta=s("span"),Dr=l("Compute"),ns=d(),rt=s("p"),Cr=l("Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),is=d(),pe=s("ol"),aa=s("li"),Or=l("All-in-one"),xr=d(),sa=s("li"),Nr=l("Incremental"),cs=d(),g=s("p"),Sr=l("In the incremental approach the necessary inputs are added to the module with "),oa=s("code"),Ir=l("add"),qr=l(" or "),ra=s("code"),Mr=l("add_batch"),Br=l(" and the score is calculated at the end with "),la=s("code"),Lr=l("compute"),Fr=l(". Alternatively, one can pass all the inputs at once to "),na=s("code"),Rr=l("compute"),Gr=l(". Let\u2019s have a look at the two approaches."),ds=d(),U=s("h3"),he=s("a"),ia=s("span"),u(Be.$$.fragment),Hr=d(),ca=s("span"),da=s("code"),Ur=l("compute"),ps=l("\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute` method.\n\n	"),u(Le.$$.fragment),hs=d(),O=s("p"),Wr=l("Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),pa=s("code"),Yr=l("add"),Vr=l(" or "),ha=s("code"),zr=l("add_batch"),Jr=l(" are useful."),us=d(),W=s("h3"),ue=s("a"),ua=s("span"),u(Fe.$$.fragment),Kr=d(),Re=s("span"),fa=s("code"),Qr=l("add"),Xr=l(" and "),ma=s("code"),Zr=l("add_batch"),fs=d(),k=s("p"),el=l("In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),va=s("code"),tl=l("compute"),al=l(". With "),ya=s("code"),sl=l("add"),ol=l(" and "),_a=s("code"),rl=l("add_batch"),ll=l(" you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),wa=s("code"),nl=l("add"),il=l(":"),ms=d(),u(Ge.$$.fragment),vs=d(),P=s("p"),cl=l("Once you have gathered all predictions you can call "),Ea=s("code"),dl=l("compute"),pl=l(" to compute the score based on all stored values. When getting predictions and references in batches you can use "),ba=s("code"),hl=l("add_batch"),ul=l(" which adds a list elements for later processing. The rest works as with "),$a=s("code"),fl=l("add"),ml=l(":"),ys=d(),u(He.$$.fragment),_s=d(),lt=s("p"),vl=l("This is especially useful when you need to get the predictions from your model in batches:"),ws=d(),u(Ue.$$.fragment),Es=d(),Y=s("h3"),fe=s("a"),ga=s("span"),u(We.$$.fragment),yl=d(),ka=s("span"),_l=l("Distributed evaluation"),bs=d(),j=s("p"),wl=l("Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ja=s("code"),El=l("f(AuB) = f(A) + f(B)"),bl=l("), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),Ta=s("code"),$l=l("f(AuB) \u2260 f(A) + f(B)"),gl=l("), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),Ye=s("a"),kl=l("F1"),jl=l(" scores of each data subset as your "),Aa=s("strong"),Tl=l("final metric"),Al=l("."),$s=d(),nt=s("p"),Pl=l("A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),gs=d(),x=s("p"),Dl=l("\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),Pa=s("code"),Cl=l("EvaluationModule.compute"),Ol=l(" the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),Da=s("code"),xl=l("EvaluationModule.compute"),Nl=l(" will perform the final metric evaluation."),ks=d(),it=s("p"),Sl=l("This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),js=d(),V=s("h2"),me=s("a"),Ca=s("span"),u(Ve.$$.fragment),Il=d(),Oa=s("span"),ql=l("Save and share"),Ts=d(),ze=s("p"),xa=s("strong"),Ml=l("TODO"),Bl=l(": add references to save and push_to_hub."),this.h()},l(e){const i=Mi('[data-svelte="svelte-1phssyn"]',document.head);E=o(i,"META",{name:!0,content:!0}),i.forEach(a),z=p(e),$=o(e,"H1",{class:!0});var Je=r($);A=o(Je,"A",{id:!0,class:!0,href:!0});var Fl=r(A);B=o(Fl,"SPAN",{});var Rl=r(B);f(T.$$.fragment,Rl),Rl.forEach(a),Fl.forEach(a),D=p(Je),J=o(Je,"SPAN",{});var Gl=r(J);to=n(Gl,"A quick tour"),Gl.forEach(a),Je.forEach(a),Ma=p(e),Ke=o(e,"P",{});var Hl=r(Ke);ao=n(Hl,"\u{1F917} Evaluate provides access to a wide range of evaluation tools. It covers a range of modalities such as text, computer vision, audio, etc. as well as tools to evaluate models or datasets. These tools are split into three categories."),Hl.forEach(a),Ba=p(e),L=o(e,"H2",{class:!0});var Ps=r(L);K=o(Ps,"A",{id:!0,class:!0,href:!0});var Ul=r(K);ht=o(Ul,"SPAN",{});var Wl=r(ht);f(ye.$$.fragment,Wl),Wl.forEach(a),Ul.forEach(a),so=p(Ps),ut=o(Ps,"SPAN",{});var Yl=r(ut);oo=n(Yl,"Three types of evaluations"),Yl.forEach(a),Ps.forEach(a),La=p(e),Qe=o(e,"P",{});var Vl=r(Qe);ro=n(Vl,"There are different aspects of a typical machine learning pipeline that can be evaluated and for aspect we provide a tool:"),Vl.forEach(a),Fa=p(e),C=o(e,"UL",{});var ct=r(C);Q=o(ct,"LI",{});var Na=r(Q);ft=o(Na,"STRONG",{});var zl=r(ft);lo=n(zl,"Metric"),zl.forEach(a),no=n(Na,": A metric is used to evaluate a model\u2019s performance and usually involves the model\u2019s predictions as well as some ground truth labels. You can find all integrated metrics at "),Xe=o(Na,"A",{href:!0});var Jl=r(Xe);io=n(Jl,"evaluate-metric"),Jl.forEach(a),co=n(Na,"."),Na.forEach(a),po=p(ct),X=o(ct,"LI",{});var Sa=r(X);mt=o(Sa,"STRONG",{});var Kl=r(mt);ho=n(Kl,"Comparison"),Kl.forEach(a),uo=n(Sa,": A comparison is used to compare two models. This can for example be done by comparing their predictions to ground truth labels and computing their agreement. You can find all integrated comparisons at "),Ze=o(Sa,"A",{href:!0});var Ql=r(Ze);fo=n(Ql,"evaluate-comparison"),Ql.forEach(a),mo=n(Sa,"."),Sa.forEach(a),vo=p(ct),Z=o(ct,"LI",{});var Ia=r(Z);vt=o(Ia,"STRONG",{});var Xl=r(vt);yo=n(Xl,"Measurement"),Xl.forEach(a),_o=n(Ia,": The dataset is as important as the model trained on it. With measurements one can investigate a dataset\u2019s properties. You can find all integrated measurements at "),et=o(Ia,"A",{href:!0});var Zl=r(et);wo=n(Zl,"evaluate-measurement"),Zl.forEach(a),Eo=n(Ia,"."),Ia.forEach(a),ct.forEach(a),Ra=p(e),ee=o(e,"P",{});var Ds=r(ee);bo=n(Ds,"For all of these methods there is a single entry point: "),tt=o(Ds,"A",{href:!0});var en=r(tt);$o=n(en,"evaluate.load()"),en.forEach(a),go=n(Ds,"!"),Ds.forEach(a),Ga=p(e),F=o(e,"H2",{class:!0});var Cs=r(F);te=o(Cs,"A",{id:!0,class:!0,href:!0});var tn=r(te);yt=o(tn,"SPAN",{});var an=r(yt);f(_e.$$.fragment,an),an.forEach(a),tn.forEach(a),ko=p(Cs),_t=o(Cs,"SPAN",{});var sn=r(_t);jo=n(sn,"Load"),sn.forEach(a),Cs.forEach(a),Ha=p(e),ae=o(e,"P",{});var Os=r(ae);To=n(Os,"Any metric, comparison, or measurement is loaded with the "),wt=o(Os,"CODE",{});var on=r(wt);Ao=n(on,"evaluate.load"),on.forEach(a),Po=n(Os," function:"),Os.forEach(a),Ua=p(e),f(we.$$.fragment,e),Wa=p(e),at=o(e,"P",{});var rn=r(at);Do=n(rn,"If you want to make sure you are loading the right type of module (especially if there are name clashes) you can explicitely pass the type:"),rn.forEach(a),Ya=p(e),f(Ee.$$.fragment,e),Va=p(e),R=o(e,"H3",{class:!0});var xs=r(R);se=o(xs,"A",{id:!0,class:!0,href:!0});var ln=r(se);Et=o(ln,"SPAN",{});var nn=r(Et);f(be.$$.fragment,nn),nn.forEach(a),ln.forEach(a),Co=p(xs),bt=o(xs,"SPAN",{});var cn=r(bt);Oo=n(cn,"Community modules"),cn.forEach(a),xs.forEach(a),za=p(e),st=o(e,"P",{});var dn=r(st);xo=n(dn,"Besides the modules implemented in \u{1F917} Evaluate you can also load any community module by prepending the user\u2019s username:"),dn.forEach(a),Ja=p(e),f($e.$$.fragment,e),Ka=p(e),G=o(e,"H2",{class:!0});var Ns=r(G);oe=o(Ns,"A",{id:!0,class:!0,href:!0});var pn=r(oe);$t=o(pn,"SPAN",{});var hn=r($t);f(ge.$$.fragment,hn),hn.forEach(a),pn.forEach(a),No=p(Ns),gt=o(Ns,"SPAN",{});var un=r(gt);So=n(un,"Module attributes"),un.forEach(a),Ns.forEach(a),Qa=p(e),re=o(e,"P",{});var Ss=r(re);Io=n(Ss,"All evalution modules come with a range of useful attributes that help to use a module stored in a "),kt=o(Ss,"CODE",{});var fn=r(kt);qo=n(fn,"EvaluationModuleInfo"),fn.forEach(a),Mo=n(Ss," object."),Ss.forEach(a),Xa=p(e),le=o(e,"TABLE",{});var Is=r(le);jt=o(Is,"THEAD",{});var mn=r(jt);ke=o(mn,"TR",{});var qs=r(ke);Tt=o(qs,"TH",{});var vn=r(Tt);Bo=n(vn,"Attribute"),vn.forEach(a),Lo=p(qs),At=o(qs,"TH",{});var yn=r(At);Fo=n(yn,"Description"),yn.forEach(a),qs.forEach(a),mn.forEach(a),Ro=p(Is),w=o(Is,"TBODY",{});var b=r(w);je=o(b,"TR",{});var Ms=r(je);Pt=o(Ms,"TD",{});var _n=r(Pt);Dt=o(_n,"CODE",{});var wn=r(Dt);Go=n(wn,"description"),wn.forEach(a),_n.forEach(a),Ho=p(Ms),Ct=o(Ms,"TD",{});var En=r(Ct);Uo=n(En,"A short description of the evaluation module."),En.forEach(a),Ms.forEach(a),Wo=p(b),Te=o(b,"TR",{});var Bs=r(Te);Ot=o(Bs,"TD",{});var bn=r(Ot);xt=o(bn,"CODE",{});var $n=r(xt);Yo=n($n,"citation"),$n.forEach(a),bn.forEach(a),Vo=p(Bs),Nt=o(Bs,"TD",{});var gn=r(Nt);zo=n(gn,"A BibTex string for citation when available."),gn.forEach(a),Bs.forEach(a),Jo=p(b),Ae=o(b,"TR",{});var Ls=r(Ae);St=o(Ls,"TD",{});var kn=r(St);It=o(kn,"CODE",{});var jn=r(It);Ko=n(jn,"features"),jn.forEach(a),kn.forEach(a),Qo=p(Ls),Pe=o(Ls,"TD",{});var Fs=r(Pe);Xo=n(Fs,"A "),qt=o(Fs,"CODE",{});var Tn=r(qt);Zo=n(Tn,"Features"),Tn.forEach(a),er=n(Fs," object defining the input format."),Fs.forEach(a),Ls.forEach(a),tr=p(b),De=o(b,"TR",{});var Rs=r(De);Mt=o(Rs,"TD",{});var An=r(Mt);Bt=o(An,"CODE",{});var Pn=r(Bt);ar=n(Pn,"inputs_description"),Pn.forEach(a),An.forEach(a),sr=p(Rs),Lt=o(Rs,"TD",{});var Dn=r(Lt);or=n(Dn,"This is equivalent to the modules docstring."),Dn.forEach(a),Rs.forEach(a),rr=p(b),Ce=o(b,"TR",{});var Gs=r(Ce);Ft=o(Gs,"TD",{});var Cn=r(Ft);Rt=o(Cn,"CODE",{});var On=r(Rt);lr=n(On,"homepage"),On.forEach(a),Cn.forEach(a),nr=p(Gs),Gt=o(Gs,"TD",{});var xn=r(Gt);ir=n(xn,"The homepage of the module."),xn.forEach(a),Gs.forEach(a),cr=p(b),Oe=o(b,"TR",{});var Hs=r(Oe);Ht=o(Hs,"TD",{});var Nn=r(Ht);Ut=o(Nn,"CODE",{});var Sn=r(Ut);dr=n(Sn,"license"),Sn.forEach(a),Nn.forEach(a),pr=p(Hs),Wt=o(Hs,"TD",{});var In=r(Wt);hr=n(In,"The license of the module."),In.forEach(a),Hs.forEach(a),ur=p(b),xe=o(b,"TR",{});var Us=r(xe);Yt=o(Us,"TD",{});var qn=r(Yt);Vt=o(qn,"CODE",{});var Mn=r(Vt);fr=n(Mn,"codebase_urls"),Mn.forEach(a),qn.forEach(a),mr=p(Us),zt=o(Us,"TD",{});var Bn=r(zt);vr=n(Bn,"Link to the code behind the module."),Bn.forEach(a),Us.forEach(a),yr=p(b),Ne=o(b,"TR",{});var Ws=r(Ne);Jt=o(Ws,"TD",{});var Ln=r(Jt);Kt=o(Ln,"CODE",{});var Fn=r(Kt);_r=n(Fn,"reference_urls"),Fn.forEach(a),Ln.forEach(a),wr=p(Ws),Qt=o(Ws,"TD",{});var Rn=r(Qt);Er=n(Rn,"Additional reference URLs."),Rn.forEach(a),Ws.forEach(a),b.forEach(a),Is.forEach(a),Za=p(e),ne=o(e,"P",{});var Ys=r(ne);br=n(Ys,"Let\u2019s have a look at a few examples. First, let\u2019s look at the "),Xt=o(Ys,"CODE",{});var Gn=r(Xt);$r=n(Gn,"description"),Gn.forEach(a),gr=n(Ys," attribute of the accuracy metric:"),Ys.forEach(a),es=p(e),f(Se.$$.fragment,e),ts=p(e),ie=o(e,"P",{});var Vs=r(ie);kr=n(Vs,"You can see that it describes how the metric works in theory. If you use this metric for your work, especially if it is an academic publication you want to reference it properly. For that you can look at the "),Zt=o(Vs,"CODE",{});var Hn=r(Zt);jr=n(Hn,"citation"),Hn.forEach(a),Tr=n(Vs," attribute:"),Vs.forEach(a),as=p(e),f(Ie.$$.fragment,e),ss=p(e),ot=o(e,"P",{});var Un=r(ot);Ar=n(Un,"Before we can apply a metric or other evaluation module to a use-case, we need to know what the input format of the metric is:"),Un.forEach(a),os=p(e),f(qe.$$.fragment,e),rs=p(e),f(ce.$$.fragment,e),ls=p(e),H=o(e,"H2",{class:!0});var zs=r(H);de=o(zs,"A",{id:!0,class:!0,href:!0});var Wn=r(de);ea=o(Wn,"SPAN",{});var Yn=r(ea);f(Me.$$.fragment,Yn),Yn.forEach(a),Wn.forEach(a),Pr=p(zs),ta=o(zs,"SPAN",{});var Vn=r(ta);Dr=n(Vn,"Compute"),Vn.forEach(a),zs.forEach(a),ns=p(e),rt=o(e,"P",{});var zn=r(rt);Cr=n(zn,"Now that we know how the evaluation module works and what should go in there we want to actually use it! When it comes to computing the actual score there are two main ways to do it:"),zn.forEach(a),is=p(e),pe=o(e,"OL",{});var Js=r(pe);aa=o(Js,"LI",{});var Jn=r(aa);Or=n(Jn,"All-in-one"),Jn.forEach(a),xr=p(Js),sa=o(Js,"LI",{});var Kn=r(sa);Nr=n(Kn,"Incremental"),Kn.forEach(a),Js.forEach(a),cs=p(e),g=o(e,"P",{});var N=r(g);Sr=n(N,"In the incremental approach the necessary inputs are added to the module with "),oa=o(N,"CODE",{});var Qn=r(oa);Ir=n(Qn,"add"),Qn.forEach(a),qr=n(N," or "),ra=o(N,"CODE",{});var Xn=r(ra);Mr=n(Xn,"add_batch"),Xn.forEach(a),Br=n(N," and the score is calculated at the end with "),la=o(N,"CODE",{});var Zn=r(la);Lr=n(Zn,"compute"),Zn.forEach(a),Fr=n(N,". Alternatively, one can pass all the inputs at once to "),na=o(N,"CODE",{});var ei=r(na);Rr=n(ei,"compute"),ei.forEach(a),Gr=n(N,". Let\u2019s have a look at the two approaches."),N.forEach(a),ds=p(e),U=o(e,"H3",{class:!0});var Ks=r(U);he=o(Ks,"A",{id:!0,class:!0,href:!0});var ti=r(he);ia=o(ti,"SPAN",{});var ai=r(ia);f(Be.$$.fragment,ai),ai.forEach(a),ti.forEach(a),Hr=p(Ks),ca=o(Ks,"SPAN",{});var si=r(ca);da=o(si,"CODE",{});var oi=r(da);Ur=n(oi,"compute"),oi.forEach(a),si.forEach(a),Ks.forEach(a),ps=n(e,"\n\nThe simplest way to calculate the score of an evaluation module is by calling `compute` directly with the necessary inputs. Simply pass the inputs as seen in `features` to the `compute` method.\n\n	"),f(Le.$$.fragment,e),hs=p(e),O=o(e,"P",{});var dt=r(O);Wr=n(dt,"Evaluation modules return the results in a dictionary. However, in some instances you build up the predictions iteratively or in a distributed fashion in which case "),pa=o(dt,"CODE",{});var ri=r(pa);Yr=n(ri,"add"),ri.forEach(a),Vr=n(dt," or "),ha=o(dt,"CODE",{});var li=r(ha);zr=n(li,"add_batch"),li.forEach(a),Jr=n(dt," are useful."),dt.forEach(a),us=p(e),W=o(e,"H3",{class:!0});var Qs=r(W);ue=o(Qs,"A",{id:!0,class:!0,href:!0});var ni=r(ue);ua=o(ni,"SPAN",{});var ii=r(ua);f(Fe.$$.fragment,ii),ii.forEach(a),ni.forEach(a),Kr=p(Qs),Re=o(Qs,"SPAN",{});var Xs=r(Re);fa=o(Xs,"CODE",{});var ci=r(fa);Qr=n(ci,"add"),ci.forEach(a),Xr=n(Xs," and "),ma=o(Xs,"CODE",{});var di=r(ma);Zr=n(di,"add_batch"),di.forEach(a),Xs.forEach(a),Qs.forEach(a),fs=p(e),k=o(e,"P",{});var S=r(k);el=n(S,"In many evaluation pipelines you build the predictions iteratively such as in a for-loop. In that case you could store the predictions in a list and at the end pass them to "),va=o(S,"CODE",{});var pi=r(va);tl=n(pi,"compute"),pi.forEach(a),al=n(S,". With "),ya=o(S,"CODE",{});var hi=r(ya);sl=n(hi,"add"),hi.forEach(a),ol=n(S," and "),_a=o(S,"CODE",{});var ui=r(_a);rl=n(ui,"add_batch"),ui.forEach(a),ll=n(S," you can circumvent the step of storing the predictions separately. If you are only creating single predictions at a time you can use "),wa=o(S,"CODE",{});var fi=r(wa);nl=n(fi,"add"),fi.forEach(a),il=n(S,":"),S.forEach(a),ms=p(e),f(Ge.$$.fragment,e),vs=p(e),P=o(e,"P",{});var ve=r(P);cl=n(ve,"Once you have gathered all predictions you can call "),Ea=o(ve,"CODE",{});var mi=r(Ea);dl=n(mi,"compute"),mi.forEach(a),pl=n(ve," to compute the score based on all stored values. When getting predictions and references in batches you can use "),ba=o(ve,"CODE",{});var vi=r(ba);hl=n(vi,"add_batch"),vi.forEach(a),ul=n(ve," which adds a list elements for later processing. The rest works as with "),$a=o(ve,"CODE",{});var yi=r($a);fl=n(yi,"add"),yi.forEach(a),ml=n(ve,":"),ve.forEach(a),ys=p(e),f(He.$$.fragment,e),_s=p(e),lt=o(e,"P",{});var _i=r(lt);vl=n(_i,"This is especially useful when you need to get the predictions from your model in batches:"),_i.forEach(a),ws=p(e),f(Ue.$$.fragment,e),Es=p(e),Y=o(e,"H3",{class:!0});var Zs=r(Y);fe=o(Zs,"A",{id:!0,class:!0,href:!0});var wi=r(fe);ga=o(wi,"SPAN",{});var Ei=r(ga);f(We.$$.fragment,Ei),Ei.forEach(a),wi.forEach(a),yl=p(Zs),ka=o(Zs,"SPAN",{});var bi=r(ka);_l=n(bi,"Distributed evaluation"),bi.forEach(a),Zs.forEach(a),bs=p(e),j=o(e,"P",{});var I=r(j);wl=n(I,"Computing metrics in a distributed environment can be tricky. Metric evaluation is executed in separate Python processes, or nodes, on different subsets of a dataset. Typically, when a metric score is additive ("),ja=o(I,"CODE",{});var $i=r(ja);El=n($i,"f(AuB) = f(A) + f(B)"),$i.forEach(a),bl=n(I,"), you can use distributed reduce operations to gather the scores for each subset of the dataset. But when a metric is non-additive ("),Ta=o(I,"CODE",{});var gi=r(Ta);$l=n(gi,"f(AuB) \u2260 f(A) + f(B)"),gi.forEach(a),gl=n(I,"), it\u2019s not that simple. For example, you can\u2019t take the sum of the "),Ye=o(I,"A",{href:!0,rel:!0});var ki=r(Ye);kl=n(ki,"F1"),ki.forEach(a),jl=n(I," scores of each data subset as your "),Aa=o(I,"STRONG",{});var ji=r(Aa);Tl=n(ji,"final metric"),ji.forEach(a),Al=n(I,"."),I.forEach(a),$s=p(e),nt=o(e,"P",{});var Ti=r(nt);Pl=n(Ti,"A common way to overcome this issue is to fallback on single process evaluation. The metrics are evaluated on a single GPU, which becomes inefficient."),Ti.forEach(a),gs=p(e),x=o(e,"P",{});var pt=r(x);Dl=n(pt,"\u{1F917} Evaluate solves this issue by only computing the final metric on the first node. The predictions and references are computed and provided to the metric separately for each node. These are temporarily stored in an Apache Arrow table, avoiding cluttering the GPU or CPU memory. When you are ready to "),Pa=o(pt,"CODE",{});var Ai=r(Pa);Cl=n(Ai,"EvaluationModule.compute"),Ai.forEach(a),Ol=n(pt," the final metric, the first node is able to access the predictions and references stored on all the other nodes. Once it has gathered all the predictions and references, "),Da=o(pt,"CODE",{});var Pi=r(Da);xl=n(Pi,"EvaluationModule.compute"),Pi.forEach(a),Nl=n(pt," will perform the final metric evaluation."),pt.forEach(a),ks=p(e),it=o(e,"P",{});var Di=r(it);Sl=n(Di,"This solution allows \u{1F917} Evaluate to perform distributed predictions, which is important for evaluation speed in distributed settings. At the same time, you can also use complex non-additive metrics without wasting valuable GPU or CPU memory."),Di.forEach(a),js=p(e),V=o(e,"H2",{class:!0});var eo=r(V);me=o(eo,"A",{id:!0,class:!0,href:!0});var Ci=r(me);Ca=o(Ci,"SPAN",{});var Oi=r(Ca);f(Ve.$$.fragment,Oi),Oi.forEach(a),Ci.forEach(a),Il=p(eo),Oa=o(eo,"SPAN",{});var xi=r(Oa);ql=n(xi,"Save and share"),xi.forEach(a),eo.forEach(a),Ts=p(e),ze=o(e,"P",{});var Ll=r(ze);xa=o(Ll,"STRONG",{});var Ni=r(xa);Ml=n(Ni,"TODO"),Ni.forEach(a),Bl=n(Ll,": add references to save and push_to_hub."),Ll.forEach(a),this.h()},h(){h(E,"name","hf:doc:metadata"),h(E,"content",JSON.stringify(Gi)),h(A,"id","a-quick-tour"),h(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(A,"href","#a-quick-tour"),h($,"class","relative group"),h(K,"id","three-types-of-evaluations"),h(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(K,"href","#three-types-of-evaluations"),h(L,"class","relative group"),h(Xe,"href","hf.co/evaluate-metric"),h(Ze,"href","hf.co/evaluate-comparison"),h(et,"href","hf.co/evaluate-measurement"),h(tt,"href","/docs/evaluate/pr_79/en/package_reference/loading_methods#evaluate.load"),h(te,"id","load"),h(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(te,"href","#load"),h(F,"class","relative group"),h(se,"id","community-modules"),h(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(se,"href","#community-modules"),h(R,"class","relative group"),h(oe,"id","module-attributes"),h(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oe,"href","#module-attributes"),h(G,"class","relative group"),h(de,"id","compute"),h(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(de,"href","#compute"),h(H,"class","relative group"),h(he,"id","compute"),h(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(he,"href","#compute"),h(U,"class","relative group"),h(ue,"id","add-and-addbatch"),h(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ue,"href","#add-and-addbatch"),h(W,"class","relative group"),h(fe,"id","distributed-evaluation"),h(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(fe,"href","#distributed-evaluation"),h(Y,"class","relative group"),h(Ye,"href","https://huggingface.co/metrics/f1"),h(Ye,"rel","nofollow"),h(me,"id","save-and-share"),h(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(me,"href","#save-and-share"),h(V,"class","relative group")},m(e,i){t(document.head,E),c(e,z,i),c(e,$,i),t($,A),t(A,B),m(T,B,null),t($,D),t($,J),t(J,to),c(e,Ma,i),c(e,Ke,i),t(Ke,ao),c(e,Ba,i),c(e,L,i),t(L,K),t(K,ht),m(ye,ht,null),t(L,so),t(L,ut),t(ut,oo),c(e,La,i),c(e,Qe,i),t(Qe,ro),c(e,Fa,i),c(e,C,i),t(C,Q),t(Q,ft),t(ft,lo),t(Q,no),t(Q,Xe),t(Xe,io),t(Q,co),t(C,po),t(C,X),t(X,mt),t(mt,ho),t(X,uo),t(X,Ze),t(Ze,fo),t(X,mo),t(C,vo),t(C,Z),t(Z,vt),t(vt,yo),t(Z,_o),t(Z,et),t(et,wo),t(Z,Eo),c(e,Ra,i),c(e,ee,i),t(ee,bo),t(ee,tt),t(tt,$o),t(ee,go),c(e,Ga,i),c(e,F,i),t(F,te),t(te,yt),m(_e,yt,null),t(F,ko),t(F,_t),t(_t,jo),c(e,Ha,i),c(e,ae,i),t(ae,To),t(ae,wt),t(wt,Ao),t(ae,Po),c(e,Ua,i),m(we,e,i),c(e,Wa,i),c(e,at,i),t(at,Do),c(e,Ya,i),m(Ee,e,i),c(e,Va,i),c(e,R,i),t(R,se),t(se,Et),m(be,Et,null),t(R,Co),t(R,bt),t(bt,Oo),c(e,za,i),c(e,st,i),t(st,xo),c(e,Ja,i),m($e,e,i),c(e,Ka,i),c(e,G,i),t(G,oe),t(oe,$t),m(ge,$t,null),t(G,No),t(G,gt),t(gt,So),c(e,Qa,i),c(e,re,i),t(re,Io),t(re,kt),t(kt,qo),t(re,Mo),c(e,Xa,i),c(e,le,i),t(le,jt),t(jt,ke),t(ke,Tt),t(Tt,Bo),t(ke,Lo),t(ke,At),t(At,Fo),t(le,Ro),t(le,w),t(w,je),t(je,Pt),t(Pt,Dt),t(Dt,Go),t(je,Ho),t(je,Ct),t(Ct,Uo),t(w,Wo),t(w,Te),t(Te,Ot),t(Ot,xt),t(xt,Yo),t(Te,Vo),t(Te,Nt),t(Nt,zo),t(w,Jo),t(w,Ae),t(Ae,St),t(St,It),t(It,Ko),t(Ae,Qo),t(Ae,Pe),t(Pe,Xo),t(Pe,qt),t(qt,Zo),t(Pe,er),t(w,tr),t(w,De),t(De,Mt),t(Mt,Bt),t(Bt,ar),t(De,sr),t(De,Lt),t(Lt,or),t(w,rr),t(w,Ce),t(Ce,Ft),t(Ft,Rt),t(Rt,lr),t(Ce,nr),t(Ce,Gt),t(Gt,ir),t(w,cr),t(w,Oe),t(Oe,Ht),t(Ht,Ut),t(Ut,dr),t(Oe,pr),t(Oe,Wt),t(Wt,hr),t(w,ur),t(w,xe),t(xe,Yt),t(Yt,Vt),t(Vt,fr),t(xe,mr),t(xe,zt),t(zt,vr),t(w,yr),t(w,Ne),t(Ne,Jt),t(Jt,Kt),t(Kt,_r),t(Ne,wr),t(Ne,Qt),t(Qt,Er),c(e,Za,i),c(e,ne,i),t(ne,br),t(ne,Xt),t(Xt,$r),t(ne,gr),c(e,es,i),m(Se,e,i),c(e,ts,i),c(e,ie,i),t(ie,kr),t(ie,Zt),t(Zt,jr),t(ie,Tr),c(e,as,i),m(Ie,e,i),c(e,ss,i),c(e,ot,i),t(ot,Ar),c(e,os,i),m(qe,e,i),c(e,rs,i),m(ce,e,i),c(e,ls,i),c(e,H,i),t(H,de),t(de,ea),m(Me,ea,null),t(H,Pr),t(H,ta),t(ta,Dr),c(e,ns,i),c(e,rt,i),t(rt,Cr),c(e,is,i),c(e,pe,i),t(pe,aa),t(aa,Or),t(pe,xr),t(pe,sa),t(sa,Nr),c(e,cs,i),c(e,g,i),t(g,Sr),t(g,oa),t(oa,Ir),t(g,qr),t(g,ra),t(ra,Mr),t(g,Br),t(g,la),t(la,Lr),t(g,Fr),t(g,na),t(na,Rr),t(g,Gr),c(e,ds,i),c(e,U,i),t(U,he),t(he,ia),m(Be,ia,null),t(U,Hr),t(U,ca),t(ca,da),t(da,Ur),c(e,ps,i),m(Le,e,i),c(e,hs,i),c(e,O,i),t(O,Wr),t(O,pa),t(pa,Yr),t(O,Vr),t(O,ha),t(ha,zr),t(O,Jr),c(e,us,i),c(e,W,i),t(W,ue),t(ue,ua),m(Fe,ua,null),t(W,Kr),t(W,Re),t(Re,fa),t(fa,Qr),t(Re,Xr),t(Re,ma),t(ma,Zr),c(e,fs,i),c(e,k,i),t(k,el),t(k,va),t(va,tl),t(k,al),t(k,ya),t(ya,sl),t(k,ol),t(k,_a),t(_a,rl),t(k,ll),t(k,wa),t(wa,nl),t(k,il),c(e,ms,i),m(Ge,e,i),c(e,vs,i),c(e,P,i),t(P,cl),t(P,Ea),t(Ea,dl),t(P,pl),t(P,ba),t(ba,hl),t(P,ul),t(P,$a),t($a,fl),t(P,ml),c(e,ys,i),m(He,e,i),c(e,_s,i),c(e,lt,i),t(lt,vl),c(e,ws,i),m(Ue,e,i),c(e,Es,i),c(e,Y,i),t(Y,fe),t(fe,ga),m(We,ga,null),t(Y,yl),t(Y,ka),t(ka,_l),c(e,bs,i),c(e,j,i),t(j,wl),t(j,ja),t(ja,El),t(j,bl),t(j,Ta),t(Ta,$l),t(j,gl),t(j,Ye),t(Ye,kl),t(j,jl),t(j,Aa),t(Aa,Tl),t(j,Al),c(e,$s,i),c(e,nt,i),t(nt,Pl),c(e,gs,i),c(e,x,i),t(x,Dl),t(x,Pa),t(Pa,Cl),t(x,Ol),t(x,Da),t(Da,xl),t(x,Nl),c(e,ks,i),c(e,it,i),t(it,Sl),c(e,js,i),c(e,V,i),t(V,me),t(me,Ca),m(Ve,Ca,null),t(V,Il),t(V,Oa),t(Oa,ql),c(e,Ts,i),c(e,ze,i),t(ze,xa),t(xa,Ml),t(ze,Bl),As=!0},p(e,[i]){const Je={};i&2&&(Je.$$scope={dirty:i,ctx:e}),ce.$set(Je)},i(e){As||(v(T.$$.fragment,e),v(ye.$$.fragment,e),v(_e.$$.fragment,e),v(we.$$.fragment,e),v(Ee.$$.fragment,e),v(be.$$.fragment,e),v($e.$$.fragment,e),v(ge.$$.fragment,e),v(Se.$$.fragment,e),v(Ie.$$.fragment,e),v(qe.$$.fragment,e),v(ce.$$.fragment,e),v(Me.$$.fragment,e),v(Be.$$.fragment,e),v(Le.$$.fragment,e),v(Fe.$$.fragment,e),v(Ge.$$.fragment,e),v(He.$$.fragment,e),v(Ue.$$.fragment,e),v(We.$$.fragment,e),v(Ve.$$.fragment,e),As=!0)},o(e){y(T.$$.fragment,e),y(ye.$$.fragment,e),y(_e.$$.fragment,e),y(we.$$.fragment,e),y(Ee.$$.fragment,e),y(be.$$.fragment,e),y($e.$$.fragment,e),y(ge.$$.fragment,e),y(Se.$$.fragment,e),y(Ie.$$.fragment,e),y(qe.$$.fragment,e),y(ce.$$.fragment,e),y(Me.$$.fragment,e),y(Be.$$.fragment,e),y(Le.$$.fragment,e),y(Fe.$$.fragment,e),y(Ge.$$.fragment,e),y(He.$$.fragment,e),y(Ue.$$.fragment,e),y(We.$$.fragment,e),y(Ve.$$.fragment,e),As=!1},d(e){a(E),e&&a(z),e&&a($),_(T),e&&a(Ma),e&&a(Ke),e&&a(Ba),e&&a(L),_(ye),e&&a(La),e&&a(Qe),e&&a(Fa),e&&a(C),e&&a(Ra),e&&a(ee),e&&a(Ga),e&&a(F),_(_e),e&&a(Ha),e&&a(ae),e&&a(Ua),_(we,e),e&&a(Wa),e&&a(at),e&&a(Ya),_(Ee,e),e&&a(Va),e&&a(R),_(be),e&&a(za),e&&a(st),e&&a(Ja),_($e,e),e&&a(Ka),e&&a(G),_(ge),e&&a(Qa),e&&a(re),e&&a(Xa),e&&a(le),e&&a(Za),e&&a(ne),e&&a(es),_(Se,e),e&&a(ts),e&&a(ie),e&&a(as),_(Ie,e),e&&a(ss),e&&a(ot),e&&a(os),_(qe,e),e&&a(rs),_(ce,e),e&&a(ls),e&&a(H),_(Me),e&&a(ns),e&&a(rt),e&&a(is),e&&a(pe),e&&a(cs),e&&a(g),e&&a(ds),e&&a(U),_(Be),e&&a(ps),_(Le,e),e&&a(hs),e&&a(O),e&&a(us),e&&a(W),_(Fe),e&&a(fs),e&&a(k),e&&a(ms),_(Ge,e),e&&a(vs),e&&a(P),e&&a(ys),_(He,e),e&&a(_s),e&&a(lt),e&&a(ws),_(Ue,e),e&&a(Es),e&&a(Y),_(We),e&&a(bs),e&&a(j),e&&a($s),e&&a(nt),e&&a(gs),e&&a(x),e&&a(ks),e&&a(it),e&&a(js),e&&a(V),_(Ve),e&&a(Ts),e&&a(ze)}}}const Gi={local:"a-quick-tour",sections:[{local:"three-types-of-evaluations",title:"Three types of evaluations"},{local:"load",sections:[{local:"community-modules",title:"Community modules"}],title:"Load"},{local:"module-attributes",title:"Module attributes"},{local:"compute",sections:[{local:"compute",title:"`compute`"},{local:"add-and-addbatch",title:"`add` and `add_batch`"},{local:"distributed-evaluation",title:"Distributed evaluation"}],title:"Compute"},{local:"save-and-share",title:"Save and share"}],title:"A quick tour"};function Hi(qa){return Bi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class zi extends Si{constructor(E){super();Ii(this,E,Hi,Ri,qi,{})}}export{zi as default,Gi as metadata};
