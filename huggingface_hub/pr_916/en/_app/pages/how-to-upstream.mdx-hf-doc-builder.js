import{S as Fi,i as Gi,s as Ri,e as a,k as p,w as u,t as s,M as Ni,c as l,d as o,m as f,a as r,x as m,h as i,b as c,G as t,g as h,y as d,L as Mi,q as g,o as _,B as y,v as Ui}from"../chunks/vendor-hf-doc-builder.js";import{I as ho}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as j}from"../chunks/CodeBlock-hf-doc-builder.js";function Bi(wr){let P,po,q,F,wt,ae,ja,vt,Aa,fo,G,Ha,bt,Ca,Pa,co,v,le,qa,Et,xa,Oa,Ia,se,La,Se,Ta,Da,Sa,re,Fa,ie,Ga,Ra,Na,Fe,Ma,Ge,Ua,uo,Re,Ba,mo,R,ne,$t,Ya,Wa,he,Ja,x,pe,za,kt,Ka,Qa,Va,fe,Xa,Ne,jt,Za,el,go,O,N,At,ce,tl,Ht,ol,_o,b,al,Ct,ll,sl,Pt,rl,il,qt,nl,hl,yo,E,ue,pl,xt,fl,cl,ul,me,ml,Ot,dl,gl,_l,It,yl,wl,de,vl,Lt,bl,El,wo,ge,vo,Me,$l,bo,_e,Eo,M,kl,Tt,jl,Al,$o,ye,ko,U,Hl,Dt,Cl,Pl,jo,we,Ao,Ue,ql,Ho,B,St,ve,Ft,xl,Ol,Gt,Il,Ll,I,be,Rt,Tl,Dl,Nt,Sl,Fl,Ee,Mt,Gl,Rl,Ut,Nl,Ml,$e,Bt,Ul,Bl,Yt,Yl,Co,Y,Wl,Wt,Jl,zl,Po,ke,qo,L,W,Jt,je,Kl,zt,Ql,xo,w,Vl,Be,Xl,Zl,Ye,es,ts,Kt,os,as,We,ls,ss,Je,rs,is,Oo,Ae,Io,H,ns,ze,hs,ps,Ke,fs,cs,Lo,He,To,J,us,Qe,ms,ds,Do,Ce,So,T,z,Qt,Pe,gs,Vt,_s,Fo,Ve,ys,Go,qe,Ro,Xe,ws,No,D,K,Xt,xe,vs,Oe,bs,Zt,Es,$s,Mo,A,eo,ks,js,Ze,As,Hs,et,Cs,Ps,Uo,Ie,Bo,S,tt,qs,xs,ot,Os,Is,Yo,Q,Le,at,Ls,Ts,Te,lt,to,Ds,Ss,Fs,st,oo,Gs,Rs,Ns,V,rt,Ms,Us,ao,Bs,Ys,Wo,X,Ws,it,Js,zs,Jo,$,nt,ht,Ks,Qs,Vs,pt,ft,Xs,Zs,er,ct,ut,tr,or,ar,mt,lo,lr,sr,zo,C,rr,so,ir,nr,ro,hr,pr,Ko;return ae=new ho({}),he=new j({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),fe=new j({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),ce=new ho({}),ge=new j({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),_e=new j({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),ye=new j({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),we=new j({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),ke=new j({props:{code:`# Inspect an error.
>>> last_command.stderr

# Check whether a push is completed or ongoing.
>>> last_command.is_done

# Check whether a push command has errored.
>>> last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),je=new ho({}),Ae=new j({props:{code:`from huggingface_hub import Repository
repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),He=new j({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),Ce=new j({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),Pe=new ho({}),qe=new j({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),xe=new ho({}),Ie=new j({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]
api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>)`}}),{c(){P=a("meta"),po=p(),q=a("h1"),F=a("a"),wt=a("span"),u(ae.$$.fragment),ja=p(),vt=a("span"),Aa=s("Upload files to the Hub"),fo=p(),G=a("p"),Ha=s("Sharing your files and work is a very important aspect of the Hub. The "),bt=a("code"),Ca=s("huggingface_hub"),Pa=s(" uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),co=p(),v=a("ul"),le=a("li"),qa=s("Push files with a "),Et=a("code"),xa=s("commit"),Oa=s(" context manager."),Ia=p(),se=a("li"),La=s("Push files with the "),Se=a("a"),Ta=s("push_to_hub()"),Da=s(" function."),Sa=p(),re=a("li"),Fa=s("Upload very large files with "),ie=a("a"),Ga=s("Git LFS"),Ra=s("."),Na=p(),Fe=a("li"),Ma=s("Push files without Git installed with "),Ge=a("a"),Ua=s("HfApi"),uo=p(),Re=a("p"),Ba=s("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),mo=p(),R=a("ol"),ne=a("li"),$t=a("p"),Ya=s("Log in to your Hugging Face account with the following command:"),Wa=p(),u(he.$$.fragment),Ja=p(),x=a("li"),pe=a("p"),za=s("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),kt=a("code"),Ka=s("notebook_login()"),Qa=s(":"),Va=p(),u(fe.$$.fragment),Xa=p(),Ne=a("p"),jt=a("code"),Za=s("notebook_login()"),el=s(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),go=p(),O=a("h2"),N=a("a"),At=a("span"),u(ce.$$.fragment),tl=p(),Ht=a("span"),ol=s("commit context manager"),_o=p(),b=a("p"),al=s("The "),Ct=a("code"),ll=s("commit"),sl=s(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Pt=a("code"),rl=s("git-lfs"),il=s(" automatically tracks any file larger than 10MB. In the following example, the "),qt=a("code"),nl=s("commit"),hl=s(" context manager:"),yo=p(),E=a("ol"),ue=a("li"),pl=s("Pulls from the "),xt=a("code"),fl=s("text-files"),cl=s(" repository."),ul=p(),me=a("li"),ml=s("Adds a change made to "),Ot=a("code"),dl=s("file.txt"),gl=s("."),_l=p(),It=a("li"),yl=s("Commits the change."),wl=p(),de=a("li"),vl=s("Pushes the change to the "),Lt=a("code"),bl=s("text-files"),El=s(" repository."),wo=p(),u(ge.$$.fragment),vo=p(),Me=a("p"),$l=s("Here is another example of how to save and upload a file to a repository:"),bo=p(),u(_e.$$.fragment),Eo=p(),M=a("p"),kl=s("Set "),Tt=a("code"),jl=s("blocking=False"),Al=s(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),$o=p(),u(ye.$$.fragment),ko=p(),U=a("p"),Hl=s("You can check the status of your push with the "),Dt=a("code"),Cl=s("command_queue"),Pl=s(" method:"),jo=p(),u(we.$$.fragment),Ao=p(),Ue=a("p"),ql=s("Refer to the table below for the possible statuses:"),Ho=p(),B=a("table"),St=a("thead"),ve=a("tr"),Ft=a("th"),xl=s("Status"),Ol=p(),Gt=a("th"),Il=s("Description"),Ll=p(),I=a("tbody"),be=a("tr"),Rt=a("td"),Tl=s("-1"),Dl=p(),Nt=a("td"),Sl=s("The push is ongoing."),Fl=p(),Ee=a("tr"),Mt=a("td"),Gl=s("0"),Rl=p(),Ut=a("td"),Nl=s("The push has completed successfully."),Ml=p(),$e=a("tr"),Bt=a("td"),Ul=s("Non-zero"),Bl=p(),Yt=a("td"),Yl=s("An error has occurred."),Co=p(),Y=a("p"),Wl=s("When "),Wt=a("code"),Jl=s("blocking=False"),zl=s(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Po=p(),u(ke.$$.fragment),qo=p(),L=a("h2"),W=a("a"),Jt=a("span"),u(je.$$.fragment),Kl=p(),zt=a("span"),Ql=s("push_to_hub"),xo=p(),w=a("p"),Vl=s("The "),Be=a("a"),Xl=s("Repository"),Zl=s(" class also has a "),Ye=a("a"),es=s("push_to_hub()"),ts=s(" function to add files, make a commit, and push them to a repository. Unlike the "),Kt=a("code"),os=s("commit"),as=s(" context manager, "),We=a("a"),ls=s("push_to_hub()"),ss=s(" requires you to pull from a repository first, save the files, and then call "),Je=a("a"),rs=s("push_to_hub()"),is=s("."),Oo=p(),u(Ae.$$.fragment),Io=p(),H=a("p"),ns=s("However, if you aren\u2019t ready to push a file yet, you can still use "),ze=a("a"),hs=s("git_add()"),ps=s(" and "),Ke=a("a"),fs=s("git_commit()"),cs=s(" to add and commit your file:"),Lo=p(),u(He.$$.fragment),To=p(),J=a("p"),us=s("Once you\u2019re ready, you can push your file to your repository with "),Qe=a("a"),ms=s("git_push()"),ds=s(":"),Do=p(),u(Ce.$$.fragment),So=p(),T=a("h2"),z=a("a"),Qt=a("span"),u(Pe.$$.fragment),gs=p(),Vt=a("span"),_s=s("Upload with Git LFS"),Fo=p(),Ve=a("p"),ys=s("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),Go=p(),u(qe.$$.fragment),Ro=p(),Xe=a("p"),ws=s("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),No=p(),D=a("h2"),K=a("a"),Xt=a("span"),u(xe.$$.fragment),vs=p(),Oe=a("span"),bs=s("Managing files in a repo without Git with the "),Zt=a("code"),Es=s("create_commit"),$s=s(" API"),Mo=p(),A=a("p"),eo=a("code"),ks=s("huggingface_hub"),js=s(" also offers a way to upload files to the Hub without Git installed on your system with the "),Ze=a("a"),As=s("create_commit()"),Hs=s(" method of "),et=a("a"),Cs=s("HfApi"),Ps=s(`.
For example, if you want to upload two files and delete another file in a Hub repo:`),Uo=p(),u(Ie.$$.fragment),Bo=p(),S=a("p"),tt=a("a"),qs=s("create_commit()"),xs=s(` uses the HTTP protocol to upload files to the Hub. It automatically takes care of uploading large files and binary files with the Git LFS protocol.
There are currently two kind of operations supported by the `),ot=a("a"),Os=s("create_commit()"),Is=s(" method:"),Yo=p(),Q=a("ol"),Le=a("li"),at=a("a"),Ls=s("CommitOperationAdd"),Ts=s(" to upload a file to the Hub. If the file already exists, its content will be overwritten. It takes two arguments:"),Te=a("ul"),lt=a("li"),to=a("code"),Ds=s("path_in_repo"),Ss=s(": the path in the repository where the file should be uploaded"),Fs=p(),st=a("li"),oo=a("code"),Gs=s("path_or_fileobj"),Rs=s(": either a path to a file on your filesystem, or a file-like object. The content of the file to upload to the Hub."),Ns=p(),V=a("li"),rt=a("a"),Ms=s("CommitOperationDelete"),Us=s(" to remove a file from a repository. It takes "),ao=a("code"),Bs=s("path_in_repo"),Ys=s(" as an argument."),Wo=p(),X=a("p"),Ws=s("Instead of "),it=a("a"),Js=s("create_commit()"),zs=s(", you can also use the following convenience methods:"),Jo=p(),$=a("ul"),nt=a("li"),ht=a("a"),Ks=s("upload_file()"),Qs=s(" to upload a single file to a repo on the Hub"),Vs=p(),pt=a("li"),ft=a("a"),Xs=s("upload_folder()"),Zs=s(" to upload a local directory to a repo on the Hub"),er=p(),ct=a("li"),ut=a("a"),tr=s("delete_file()"),or=s(" to delete a single file from a repo on the Hub"),ar=p(),mt=a("li"),lo=a("code"),lr=s("metadata_update()"),sr=s(" to update a repo\u2019s metadata"),zo=p(),C=a("p"),rr=s("All these methods use the "),so=a("code"),ir=s("create_commit"),nr=s(` API under the hood.
For a more detailed description, visit the `),ro=a("code"),hr=s("hf_api()"),pr=s(" documentation page."),this.h()},l(e){const n=Ni('[data-svelte="svelte-1phssyn"]',document.head);P=l(n,"META",{name:!0,content:!0}),n.forEach(o),po=f(e),q=l(e,"H1",{class:!0});var Qo=r(q);F=l(Qo,"A",{id:!0,class:!0,href:!0});var vr=r(F);wt=l(vr,"SPAN",{});var br=r(wt);m(ae.$$.fragment,br),br.forEach(o),vr.forEach(o),ja=f(Qo),vt=l(Qo,"SPAN",{});var Er=r(vt);Aa=i(Er,"Upload files to the Hub"),Er.forEach(o),Qo.forEach(o),fo=f(e),G=l(e,"P",{});var Vo=r(G);Ha=i(Vo,"Sharing your files and work is a very important aspect of the Hub. The "),bt=l(Vo,"CODE",{});var $r=r(bt);Ca=i($r,"huggingface_hub"),$r.forEach(o),Pa=i(Vo," uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),Vo.forEach(o),co=f(e),v=l(e,"UL",{});var Z=r(v);le=l(Z,"LI",{});var Xo=r(le);qa=i(Xo,"Push files with a "),Et=l(Xo,"CODE",{});var kr=r(Et);xa=i(kr,"commit"),kr.forEach(o),Oa=i(Xo," context manager."),Xo.forEach(o),Ia=f(Z),se=l(Z,"LI",{});var Zo=r(se);La=i(Zo,"Push files with the "),Se=l(Zo,"A",{href:!0});var jr=r(Se);Ta=i(jr,"push_to_hub()"),jr.forEach(o),Da=i(Zo," function."),Zo.forEach(o),Sa=f(Z),re=l(Z,"LI",{});var ea=r(re);Fa=i(ea,"Upload very large files with "),ie=l(ea,"A",{href:!0,rel:!0});var Ar=r(ie);Ga=i(Ar,"Git LFS"),Ar.forEach(o),Ra=i(ea,"."),ea.forEach(o),Na=f(Z),Fe=l(Z,"LI",{});var fr=r(Fe);Ma=i(fr,"Push files without Git installed with "),Ge=l(fr,"A",{href:!0});var Hr=r(Ge);Ua=i(Hr,"HfApi"),Hr.forEach(o),fr.forEach(o),Z.forEach(o),uo=f(e),Re=l(e,"P",{});var Cr=r(Re);Ba=i(Cr,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Cr.forEach(o),mo=f(e),R=l(e,"OL",{});var ta=r(R);ne=l(ta,"LI",{});var oa=r(ne);$t=l(oa,"P",{});var Pr=r($t);Ya=i(Pr,"Log in to your Hugging Face account with the following command:"),Pr.forEach(o),Wa=f(oa),m(he.$$.fragment,oa),oa.forEach(o),Ja=f(ta),x=l(ta,"LI",{});var dt=r(x);pe=l(dt,"P",{});var aa=r(pe);za=i(aa,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),kt=l(aa,"CODE",{});var qr=r(kt);Ka=i(qr,"notebook_login()"),qr.forEach(o),Qa=i(aa,":"),aa.forEach(o),Va=f(dt),m(fe.$$.fragment,dt),Xa=f(dt),Ne=l(dt,"P",{});var cr=r(Ne);jt=l(cr,"CODE",{});var xr=r(jt);Za=i(xr,"notebook_login()"),xr.forEach(o),el=i(cr," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),cr.forEach(o),dt.forEach(o),ta.forEach(o),go=f(e),O=l(e,"H2",{class:!0});var la=r(O);N=l(la,"A",{id:!0,class:!0,href:!0});var Or=r(N);At=l(Or,"SPAN",{});var Ir=r(At);m(ce.$$.fragment,Ir),Ir.forEach(o),Or.forEach(o),tl=f(la),Ht=l(la,"SPAN",{});var Lr=r(Ht);ol=i(Lr,"commit context manager"),Lr.forEach(o),la.forEach(o),_o=f(e),b=l(e,"P",{});var ee=r(b);al=i(ee,"The "),Ct=l(ee,"CODE",{});var Tr=r(Ct);ll=i(Tr,"commit"),Tr.forEach(o),sl=i(ee," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Pt=l(ee,"CODE",{});var Dr=r(Pt);rl=i(Dr,"git-lfs"),Dr.forEach(o),il=i(ee," automatically tracks any file larger than 10MB. In the following example, the "),qt=l(ee,"CODE",{});var Sr=r(qt);nl=i(Sr,"commit"),Sr.forEach(o),hl=i(ee," context manager:"),ee.forEach(o),yo=f(e),E=l(e,"OL",{});var te=r(E);ue=l(te,"LI",{});var sa=r(ue);pl=i(sa,"Pulls from the "),xt=l(sa,"CODE",{});var Fr=r(xt);fl=i(Fr,"text-files"),Fr.forEach(o),cl=i(sa," repository."),sa.forEach(o),ul=f(te),me=l(te,"LI",{});var ra=r(me);ml=i(ra,"Adds a change made to "),Ot=l(ra,"CODE",{});var Gr=r(Ot);dl=i(Gr,"file.txt"),Gr.forEach(o),gl=i(ra,"."),ra.forEach(o),_l=f(te),It=l(te,"LI",{});var Rr=r(It);yl=i(Rr,"Commits the change."),Rr.forEach(o),wl=f(te),de=l(te,"LI",{});var ia=r(de);vl=i(ia,"Pushes the change to the "),Lt=l(ia,"CODE",{});var Nr=r(Lt);bl=i(Nr,"text-files"),Nr.forEach(o),El=i(ia," repository."),ia.forEach(o),te.forEach(o),wo=f(e),m(ge.$$.fragment,e),vo=f(e),Me=l(e,"P",{});var Mr=r(Me);$l=i(Mr,"Here is another example of how to save and upload a file to a repository:"),Mr.forEach(o),bo=f(e),m(_e.$$.fragment,e),Eo=f(e),M=l(e,"P",{});var na=r(M);kl=i(na,"Set "),Tt=l(na,"CODE",{});var Ur=r(Tt);jl=i(Ur,"blocking=False"),Ur.forEach(o),Al=i(na," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),na.forEach(o),$o=f(e),m(ye.$$.fragment,e),ko=f(e),U=l(e,"P",{});var ha=r(U);Hl=i(ha,"You can check the status of your push with the "),Dt=l(ha,"CODE",{});var Br=r(Dt);Cl=i(Br,"command_queue"),Br.forEach(o),Pl=i(ha," method:"),ha.forEach(o),jo=f(e),m(we.$$.fragment,e),Ao=f(e),Ue=l(e,"P",{});var Yr=r(Ue);ql=i(Yr,"Refer to the table below for the possible statuses:"),Yr.forEach(o),Ho=f(e),B=l(e,"TABLE",{});var pa=r(B);St=l(pa,"THEAD",{});var Wr=r(St);ve=l(Wr,"TR",{});var fa=r(ve);Ft=l(fa,"TH",{});var Jr=r(Ft);xl=i(Jr,"Status"),Jr.forEach(o),Ol=f(fa),Gt=l(fa,"TH",{});var zr=r(Gt);Il=i(zr,"Description"),zr.forEach(o),fa.forEach(o),Wr.forEach(o),Ll=f(pa),I=l(pa,"TBODY",{});var gt=r(I);be=l(gt,"TR",{});var ca=r(be);Rt=l(ca,"TD",{});var Kr=r(Rt);Tl=i(Kr,"-1"),Kr.forEach(o),Dl=f(ca),Nt=l(ca,"TD",{});var Qr=r(Nt);Sl=i(Qr,"The push is ongoing."),Qr.forEach(o),ca.forEach(o),Fl=f(gt),Ee=l(gt,"TR",{});var ua=r(Ee);Mt=l(ua,"TD",{});var Vr=r(Mt);Gl=i(Vr,"0"),Vr.forEach(o),Rl=f(ua),Ut=l(ua,"TD",{});var Xr=r(Ut);Nl=i(Xr,"The push has completed successfully."),Xr.forEach(o),ua.forEach(o),Ml=f(gt),$e=l(gt,"TR",{});var ma=r($e);Bt=l(ma,"TD",{});var Zr=r(Bt);Ul=i(Zr,"Non-zero"),Zr.forEach(o),Bl=f(ma),Yt=l(ma,"TD",{});var ei=r(Yt);Yl=i(ei,"An error has occurred."),ei.forEach(o),ma.forEach(o),gt.forEach(o),pa.forEach(o),Co=f(e),Y=l(e,"P",{});var da=r(Y);Wl=i(da,"When "),Wt=l(da,"CODE",{});var ti=r(Wt);Jl=i(ti,"blocking=False"),ti.forEach(o),zl=i(da,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),da.forEach(o),Po=f(e),m(ke.$$.fragment,e),qo=f(e),L=l(e,"H2",{class:!0});var ga=r(L);W=l(ga,"A",{id:!0,class:!0,href:!0});var oi=r(W);Jt=l(oi,"SPAN",{});var ai=r(Jt);m(je.$$.fragment,ai),ai.forEach(o),oi.forEach(o),Kl=f(ga),zt=l(ga,"SPAN",{});var li=r(zt);Ql=i(li,"push_to_hub"),li.forEach(o),ga.forEach(o),xo=f(e),w=l(e,"P",{});var k=r(w);Vl=i(k,"The "),Be=l(k,"A",{href:!0});var si=r(Be);Xl=i(si,"Repository"),si.forEach(o),Zl=i(k," class also has a "),Ye=l(k,"A",{href:!0});var ri=r(Ye);es=i(ri,"push_to_hub()"),ri.forEach(o),ts=i(k," function to add files, make a commit, and push them to a repository. Unlike the "),Kt=l(k,"CODE",{});var ii=r(Kt);os=i(ii,"commit"),ii.forEach(o),as=i(k," context manager, "),We=l(k,"A",{href:!0});var ni=r(We);ls=i(ni,"push_to_hub()"),ni.forEach(o),ss=i(k," requires you to pull from a repository first, save the files, and then call "),Je=l(k,"A",{href:!0});var hi=r(Je);rs=i(hi,"push_to_hub()"),hi.forEach(o),is=i(k,"."),k.forEach(o),Oo=f(e),m(Ae.$$.fragment,e),Io=f(e),H=l(e,"P",{});var _t=r(H);ns=i(_t,"However, if you aren\u2019t ready to push a file yet, you can still use "),ze=l(_t,"A",{href:!0});var pi=r(ze);hs=i(pi,"git_add()"),pi.forEach(o),ps=i(_t," and "),Ke=l(_t,"A",{href:!0});var fi=r(Ke);fs=i(fi,"git_commit()"),fi.forEach(o),cs=i(_t," to add and commit your file:"),_t.forEach(o),Lo=f(e),m(He.$$.fragment,e),To=f(e),J=l(e,"P",{});var _a=r(J);us=i(_a,"Once you\u2019re ready, you can push your file to your repository with "),Qe=l(_a,"A",{href:!0});var ci=r(Qe);ms=i(ci,"git_push()"),ci.forEach(o),ds=i(_a,":"),_a.forEach(o),Do=f(e),m(Ce.$$.fragment,e),So=f(e),T=l(e,"H2",{class:!0});var ya=r(T);z=l(ya,"A",{id:!0,class:!0,href:!0});var ui=r(z);Qt=l(ui,"SPAN",{});var mi=r(Qt);m(Pe.$$.fragment,mi),mi.forEach(o),ui.forEach(o),gs=f(ya),Vt=l(ya,"SPAN",{});var di=r(Vt);_s=i(di,"Upload with Git LFS"),di.forEach(o),ya.forEach(o),Fo=f(e),Ve=l(e,"P",{});var gi=r(Ve);ys=i(gi,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),gi.forEach(o),Go=f(e),m(qe.$$.fragment,e),Ro=f(e),Xe=l(e,"P",{});var _i=r(Xe);ws=i(_i,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),_i.forEach(o),No=f(e),D=l(e,"H2",{class:!0});var wa=r(D);K=l(wa,"A",{id:!0,class:!0,href:!0});var yi=r(K);Xt=l(yi,"SPAN",{});var wi=r(Xt);m(xe.$$.fragment,wi),wi.forEach(o),yi.forEach(o),vs=f(wa),Oe=l(wa,"SPAN",{});var va=r(Oe);bs=i(va,"Managing files in a repo without Git with the "),Zt=l(va,"CODE",{});var vi=r(Zt);Es=i(vi,"create_commit"),vi.forEach(o),$s=i(va," API"),va.forEach(o),wa.forEach(o),Mo=f(e),A=l(e,"P",{});var De=r(A);eo=l(De,"CODE",{});var bi=r(eo);ks=i(bi,"huggingface_hub"),bi.forEach(o),js=i(De," also offers a way to upload files to the Hub without Git installed on your system with the "),Ze=l(De,"A",{href:!0});var Ei=r(Ze);As=i(Ei,"create_commit()"),Ei.forEach(o),Hs=i(De," method of "),et=l(De,"A",{href:!0});var $i=r(et);Cs=i($i,"HfApi"),$i.forEach(o),Ps=i(De,`.
For example, if you want to upload two files and delete another file in a Hub repo:`),De.forEach(o),Uo=f(e),m(Ie.$$.fragment,e),Bo=f(e),S=l(e,"P",{});var io=r(S);tt=l(io,"A",{href:!0});var ki=r(tt);qs=i(ki,"create_commit()"),ki.forEach(o),xs=i(io,` uses the HTTP protocol to upload files to the Hub. It automatically takes care of uploading large files and binary files with the Git LFS protocol.
There are currently two kind of operations supported by the `),ot=l(io,"A",{href:!0});var ji=r(ot);Os=i(ji,"create_commit()"),ji.forEach(o),Is=i(io," method:"),io.forEach(o),Yo=f(e),Q=l(e,"OL",{});var ba=r(Q);Le=l(ba,"LI",{});var Ea=r(Le);at=l(Ea,"A",{href:!0});var Ai=r(at);Ls=i(Ai,"CommitOperationAdd"),Ai.forEach(o),Ts=i(Ea," to upload a file to the Hub. If the file already exists, its content will be overwritten. It takes two arguments:"),Te=l(Ea,"UL",{});var $a=r(Te);lt=l($a,"LI",{});var ur=r(lt);to=l(ur,"CODE",{});var Hi=r(to);Ds=i(Hi,"path_in_repo"),Hi.forEach(o),Ss=i(ur,": the path in the repository where the file should be uploaded"),ur.forEach(o),Fs=f($a),st=l($a,"LI",{});var mr=r(st);oo=l(mr,"CODE",{});var Ci=r(oo);Gs=i(Ci,"path_or_fileobj"),Ci.forEach(o),Rs=i(mr,": either a path to a file on your filesystem, or a file-like object. The content of the file to upload to the Hub."),mr.forEach(o),$a.forEach(o),Ea.forEach(o),Ns=f(ba),V=l(ba,"LI",{});var no=r(V);rt=l(no,"A",{href:!0});var Pi=r(rt);Ms=i(Pi,"CommitOperationDelete"),Pi.forEach(o),Us=i(no," to remove a file from a repository. It takes "),ao=l(no,"CODE",{});var qi=r(ao);Bs=i(qi,"path_in_repo"),qi.forEach(o),Ys=i(no," as an argument."),no.forEach(o),ba.forEach(o),Wo=f(e),X=l(e,"P",{});var ka=r(X);Ws=i(ka,"Instead of "),it=l(ka,"A",{href:!0});var xi=r(it);Js=i(xi,"create_commit()"),xi.forEach(o),zs=i(ka,", you can also use the following convenience methods:"),ka.forEach(o),Jo=f(e),$=l(e,"UL",{});var oe=r($);nt=l(oe,"LI",{});var dr=r(nt);ht=l(dr,"A",{href:!0});var Oi=r(ht);Ks=i(Oi,"upload_file()"),Oi.forEach(o),Qs=i(dr," to upload a single file to a repo on the Hub"),dr.forEach(o),Vs=f(oe),pt=l(oe,"LI",{});var gr=r(pt);ft=l(gr,"A",{href:!0});var Ii=r(ft);Xs=i(Ii,"upload_folder()"),Ii.forEach(o),Zs=i(gr," to upload a local directory to a repo on the Hub"),gr.forEach(o),er=f(oe),ct=l(oe,"LI",{});var _r=r(ct);ut=l(_r,"A",{href:!0});var Li=r(ut);tr=i(Li,"delete_file()"),Li.forEach(o),or=i(_r," to delete a single file from a repo on the Hub"),_r.forEach(o),ar=f(oe),mt=l(oe,"LI",{});var yr=r(mt);lo=l(yr,"CODE",{});var Ti=r(lo);lr=i(Ti,"metadata_update()"),Ti.forEach(o),sr=i(yr," to update a repo\u2019s metadata"),yr.forEach(o),oe.forEach(o),zo=f(e),C=l(e,"P",{});var yt=r(C);rr=i(yt,"All these methods use the "),so=l(yt,"CODE",{});var Di=r(so);ir=i(Di,"create_commit"),Di.forEach(o),nr=i(yt,` API under the hood.
For a more detailed description, visit the `),ro=l(yt,"CODE",{});var Si=r(ro);hr=i(Si,"hf_api()"),Si.forEach(o),pr=i(yt," documentation page."),yt.forEach(o),this.h()},h(){c(P,"name","hf:doc:metadata"),c(P,"content",JSON.stringify(Yi)),c(F,"id","upload-files-to-the-hub"),c(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F,"href","#upload-files-to-the-hub"),c(q,"class","relative group"),c(Se,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(ie,"href","https://git-lfs.github.com/"),c(ie,"rel","nofollow"),c(Ge,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi"),c(N,"id","commit-context-manager"),c(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N,"href","#commit-context-manager"),c(O,"class","relative group"),c(W,"id","pushtohub"),c(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W,"href","#pushtohub"),c(L,"class","relative group"),c(Be,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository"),c(Ye,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(We,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Je,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(ze,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository.git_add"),c(Ke,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository.git_commit"),c(Qe,"href","/docs/huggingface_hub/pr_916/en/package_reference/repository#huggingface_hub.Repository.git_push"),c(z,"id","upload-with-git-lfs"),c(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z,"href","#upload-with-git-lfs"),c(T,"class","relative group"),c(K,"id","managing-files-in-a-repo-without-git-with-the-createcommit-api"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#managing-files-in-a-repo-without-git-with-the-createcommit-api"),c(D,"class","relative group"),c(Ze,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(et,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi"),c(tt,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(ot,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(at,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd"),c(rt,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete"),c(it,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(ht,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(ft,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(ut,"href","/docs/huggingface_hub/pr_916/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file")},m(e,n){t(document.head,P),h(e,po,n),h(e,q,n),t(q,F),t(F,wt),d(ae,wt,null),t(q,ja),t(q,vt),t(vt,Aa),h(e,fo,n),h(e,G,n),t(G,Ha),t(G,bt),t(bt,Ca),t(G,Pa),h(e,co,n),h(e,v,n),t(v,le),t(le,qa),t(le,Et),t(Et,xa),t(le,Oa),t(v,Ia),t(v,se),t(se,La),t(se,Se),t(Se,Ta),t(se,Da),t(v,Sa),t(v,re),t(re,Fa),t(re,ie),t(ie,Ga),t(re,Ra),t(v,Na),t(v,Fe),t(Fe,Ma),t(Fe,Ge),t(Ge,Ua),h(e,uo,n),h(e,Re,n),t(Re,Ba),h(e,mo,n),h(e,R,n),t(R,ne),t(ne,$t),t($t,Ya),t(ne,Wa),d(he,ne,null),t(R,Ja),t(R,x),t(x,pe),t(pe,za),t(pe,kt),t(kt,Ka),t(pe,Qa),t(x,Va),d(fe,x,null),t(x,Xa),t(x,Ne),t(Ne,jt),t(jt,Za),t(Ne,el),h(e,go,n),h(e,O,n),t(O,N),t(N,At),d(ce,At,null),t(O,tl),t(O,Ht),t(Ht,ol),h(e,_o,n),h(e,b,n),t(b,al),t(b,Ct),t(Ct,ll),t(b,sl),t(b,Pt),t(Pt,rl),t(b,il),t(b,qt),t(qt,nl),t(b,hl),h(e,yo,n),h(e,E,n),t(E,ue),t(ue,pl),t(ue,xt),t(xt,fl),t(ue,cl),t(E,ul),t(E,me),t(me,ml),t(me,Ot),t(Ot,dl),t(me,gl),t(E,_l),t(E,It),t(It,yl),t(E,wl),t(E,de),t(de,vl),t(de,Lt),t(Lt,bl),t(de,El),h(e,wo,n),d(ge,e,n),h(e,vo,n),h(e,Me,n),t(Me,$l),h(e,bo,n),d(_e,e,n),h(e,Eo,n),h(e,M,n),t(M,kl),t(M,Tt),t(Tt,jl),t(M,Al),h(e,$o,n),d(ye,e,n),h(e,ko,n),h(e,U,n),t(U,Hl),t(U,Dt),t(Dt,Cl),t(U,Pl),h(e,jo,n),d(we,e,n),h(e,Ao,n),h(e,Ue,n),t(Ue,ql),h(e,Ho,n),h(e,B,n),t(B,St),t(St,ve),t(ve,Ft),t(Ft,xl),t(ve,Ol),t(ve,Gt),t(Gt,Il),t(B,Ll),t(B,I),t(I,be),t(be,Rt),t(Rt,Tl),t(be,Dl),t(be,Nt),t(Nt,Sl),t(I,Fl),t(I,Ee),t(Ee,Mt),t(Mt,Gl),t(Ee,Rl),t(Ee,Ut),t(Ut,Nl),t(I,Ml),t(I,$e),t($e,Bt),t(Bt,Ul),t($e,Bl),t($e,Yt),t(Yt,Yl),h(e,Co,n),h(e,Y,n),t(Y,Wl),t(Y,Wt),t(Wt,Jl),t(Y,zl),h(e,Po,n),d(ke,e,n),h(e,qo,n),h(e,L,n),t(L,W),t(W,Jt),d(je,Jt,null),t(L,Kl),t(L,zt),t(zt,Ql),h(e,xo,n),h(e,w,n),t(w,Vl),t(w,Be),t(Be,Xl),t(w,Zl),t(w,Ye),t(Ye,es),t(w,ts),t(w,Kt),t(Kt,os),t(w,as),t(w,We),t(We,ls),t(w,ss),t(w,Je),t(Je,rs),t(w,is),h(e,Oo,n),d(Ae,e,n),h(e,Io,n),h(e,H,n),t(H,ns),t(H,ze),t(ze,hs),t(H,ps),t(H,Ke),t(Ke,fs),t(H,cs),h(e,Lo,n),d(He,e,n),h(e,To,n),h(e,J,n),t(J,us),t(J,Qe),t(Qe,ms),t(J,ds),h(e,Do,n),d(Ce,e,n),h(e,So,n),h(e,T,n),t(T,z),t(z,Qt),d(Pe,Qt,null),t(T,gs),t(T,Vt),t(Vt,_s),h(e,Fo,n),h(e,Ve,n),t(Ve,ys),h(e,Go,n),d(qe,e,n),h(e,Ro,n),h(e,Xe,n),t(Xe,ws),h(e,No,n),h(e,D,n),t(D,K),t(K,Xt),d(xe,Xt,null),t(D,vs),t(D,Oe),t(Oe,bs),t(Oe,Zt),t(Zt,Es),t(Oe,$s),h(e,Mo,n),h(e,A,n),t(A,eo),t(eo,ks),t(A,js),t(A,Ze),t(Ze,As),t(A,Hs),t(A,et),t(et,Cs),t(A,Ps),h(e,Uo,n),d(Ie,e,n),h(e,Bo,n),h(e,S,n),t(S,tt),t(tt,qs),t(S,xs),t(S,ot),t(ot,Os),t(S,Is),h(e,Yo,n),h(e,Q,n),t(Q,Le),t(Le,at),t(at,Ls),t(Le,Ts),t(Le,Te),t(Te,lt),t(lt,to),t(to,Ds),t(lt,Ss),t(Te,Fs),t(Te,st),t(st,oo),t(oo,Gs),t(st,Rs),t(Q,Ns),t(Q,V),t(V,rt),t(rt,Ms),t(V,Us),t(V,ao),t(ao,Bs),t(V,Ys),h(e,Wo,n),h(e,X,n),t(X,Ws),t(X,it),t(it,Js),t(X,zs),h(e,Jo,n),h(e,$,n),t($,nt),t(nt,ht),t(ht,Ks),t(nt,Qs),t($,Vs),t($,pt),t(pt,ft),t(ft,Xs),t(pt,Zs),t($,er),t($,ct),t(ct,ut),t(ut,tr),t(ct,or),t($,ar),t($,mt),t(mt,lo),t(lo,lr),t(mt,sr),h(e,zo,n),h(e,C,n),t(C,rr),t(C,so),t(so,ir),t(C,nr),t(C,ro),t(ro,hr),t(C,pr),Ko=!0},p:Mi,i(e){Ko||(g(ae.$$.fragment,e),g(he.$$.fragment,e),g(fe.$$.fragment,e),g(ce.$$.fragment,e),g(ge.$$.fragment,e),g(_e.$$.fragment,e),g(ye.$$.fragment,e),g(we.$$.fragment,e),g(ke.$$.fragment,e),g(je.$$.fragment,e),g(Ae.$$.fragment,e),g(He.$$.fragment,e),g(Ce.$$.fragment,e),g(Pe.$$.fragment,e),g(qe.$$.fragment,e),g(xe.$$.fragment,e),g(Ie.$$.fragment,e),Ko=!0)},o(e){_(ae.$$.fragment,e),_(he.$$.fragment,e),_(fe.$$.fragment,e),_(ce.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(ye.$$.fragment,e),_(we.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Ae.$$.fragment,e),_(He.$$.fragment,e),_(Ce.$$.fragment,e),_(Pe.$$.fragment,e),_(qe.$$.fragment,e),_(xe.$$.fragment,e),_(Ie.$$.fragment,e),Ko=!1},d(e){o(P),e&&o(po),e&&o(q),y(ae),e&&o(fo),e&&o(G),e&&o(co),e&&o(v),e&&o(uo),e&&o(Re),e&&o(mo),e&&o(R),y(he),y(fe),e&&o(go),e&&o(O),y(ce),e&&o(_o),e&&o(b),e&&o(yo),e&&o(E),e&&o(wo),y(ge,e),e&&o(vo),e&&o(Me),e&&o(bo),y(_e,e),e&&o(Eo),e&&o(M),e&&o($o),y(ye,e),e&&o(ko),e&&o(U),e&&o(jo),y(we,e),e&&o(Ao),e&&o(Ue),e&&o(Ho),e&&o(B),e&&o(Co),e&&o(Y),e&&o(Po),y(ke,e),e&&o(qo),e&&o(L),y(je),e&&o(xo),e&&o(w),e&&o(Oo),y(Ae,e),e&&o(Io),e&&o(H),e&&o(Lo),y(He,e),e&&o(To),e&&o(J),e&&o(Do),y(Ce,e),e&&o(So),e&&o(T),y(Pe),e&&o(Fo),e&&o(Ve),e&&o(Go),y(qe,e),e&&o(Ro),e&&o(Xe),e&&o(No),e&&o(D),y(xe),e&&o(Mo),e&&o(A),e&&o(Uo),y(Ie,e),e&&o(Bo),e&&o(S),e&&o(Yo),e&&o(Q),e&&o(Wo),e&&o(X),e&&o(Jo),e&&o($),e&&o(zo),e&&o(C)}}}const Yi={local:"upload-files-to-the-hub",sections:[{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"},{local:"managing-files-in-a-repo-without-git-with-the-createcommit-api",title:"Managing files in a repo without Git with the `create_commit` API"}],title:"Upload files to the Hub"};function Wi(wr){return Ui(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Qi extends Fi{constructor(P){super();Gi(this,P,Wi,Bi,Ri,{})}}export{Qi as default,Yi as metadata};
