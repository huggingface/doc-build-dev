import{S as cs,i as us,s as hs,e as n,k as c,w as x,t as a,M as ds,c as o,d as s,m as u,a as i,x as E,h as r,b as h,G as e,g as l,y as w,L as ls,q as C,o as T,B as A,v as gs}from"../../chunks/vendor-hf-doc-builder.js";import{D as z}from"../../chunks/Docstring-hf-doc-builder.js";import{I as rs}from"../../chunks/IconCopyLink-hf-doc-builder.js";function ms(Wt){let v,$e,D,S,ce,W,Ue,ue,Fe,xe,q,I,he,L,Re,de,Be,Ee,y,N,Ge,le,Je,we,$,O,ze,V,Ke,K,Qe,Xe,Ce,g,H,Ye,ge,Ze,et,me,tt,st,m,pe,Q,nt,ot,fe,X,it,at,_e,Y,rt,ct,be,Z,ut,Te,p,j,ht,ve,dt,lt,M,gt,ee,mt,pt,Ae,f,U,ft,De,_t,bt,F,vt,te,Dt,qt,Se,_,R,yt,qe,$t,xt,B,Et,se,wt,Ct,Ie,b,G,Tt,ye,At,St,J,It,ne,Pt,kt,Pe;return W=new rs({}),L=new rs({}),N=new z({props:{name:"class huggingface_hub.Discussion",anchor:"huggingface_hub.Discussion",parameters:[{name:"title",val:": str"},{name:"status",val:": str"},{name:"num",val:": int"},{name:"repo_id",val:": str"},{name:"repo_type",val:": str"},{name:"author",val:": str"},{name:"is_pull_request",val:": bool"},{name:"created_at",val:": datetime"}],parametersDescription:[{anchor:"huggingface_hub.Discussion.title",description:`<strong>title</strong> (<code>str</code>) &#x2014;
The title of the discussion / pull request`,name:"title"},{anchor:"huggingface_hub.Discussion.status",description:`<strong>status</strong> (<code>str</code>) &#x2014;
The status of the discussion / pull request.
It can be one of:<ul>
<li><code>&quot;open&quot;</code></li>
<li><code>&quot;closed&quot;</code></li>
<li><code>&quot;merged&quot;</code> (only for pull requests)</li>
<li><code>&quot;draft&quot;</code> (only for pull requests)</li>
</ul>`,name:"status"},{anchor:"huggingface_hub.Discussion.num",description:`<strong>num</strong> (<code>int</code>) &#x2014;
The number of the discussion / pull request.`,name:"num"},{anchor:"huggingface_hub.Discussion.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The id (<code>&quot;{namespace}/{repo_name}&quot;</code>) of the repo on which
the discussion / pull request was open.`,name:"repo_id"},{anchor:"huggingface_hub.Discussion.repo_type",description:`<strong>repo_type</strong> (<code>str</code>) &#x2014;
The type of the repo on which the discussion / pull request was open.
Posiible values are: <code>&quot;model&quot;</code>, <code>&quot;dataset&quot;</code>, <code>&quot;space&quot;</code>.`,name:"repo_type"},{anchor:"huggingface_hub.Discussion.author",description:`<strong>author</strong> (<code>str</code>) &#x2014;
The username of the discussion / pull request author.
Can be <code>&quot;deleted&quot;</code> if the user has been deleted since.`,name:"author"},{anchor:"huggingface_hub.Discussion.is_pull_request",description:`<strong>is_pull_request</strong> (<code>bool</code>) &#x2014;
Wether or not this is a pull request.`,name:"is_pull_request"},{anchor:"huggingface_hub.Discussion.created_at",description:`<strong>created_at</strong> (<code>datetime</code>) &#x2014;
The <code>datetime</code> of creation of the discussion / pull request.`,name:"created_at"}],source:"https://github.com/huggingface/huggingface_hub/blob/vr_930/src/huggingface_hub/community.py#L16"}}),O=new z({props:{name:"class huggingface_hub.DiscussionWithDetails",anchor:"huggingface_hub.DiscussionWithDetails",parameters:[{name:"title",val:": str"},{name:"status",val:": str"},{name:"num",val:": int"},{name:"repo_id",val:": str"},{name:"repo_type",val:": str"},{name:"author",val:": str"},{name:"is_pull_request",val:": bool"},{name:"created_at",val:": datetime"},{name:"events",val:": typing.List[ForwardRef('DiscussionEvent')]"},{name:"conflicting_files",val:": typing.Optional[typing.List[str]]"},{name:"target_branch",val:": typing.Optional[str]"},{name:"merge_commit_oid",val:": typing.Optional[str]"},{name:"diff",val:": typing.Optional[str]"}],parametersDescription:[{anchor:"huggingface_hub.DiscussionWithDetails.title",description:`<strong>title</strong> (<code>str</code>) &#x2014;
The title of the discussion / pull request`,name:"title"},{anchor:"huggingface_hub.DiscussionWithDetails.status",description:`<strong>status</strong> (<code>str</code>) &#x2014;
The status of the discussion / pull request.
It can be one of:<ul>
<li><code>&quot;open&quot;</code></li>
<li><code>&quot;closed&quot;</code></li>
<li><code>&quot;merged&quot;</code> (only for pull requests)</li>
<li><code>&quot;draft&quot;</code> (only for pull requests)</li>
</ul>`,name:"status"},{anchor:"huggingface_hub.DiscussionWithDetails.num",description:`<strong>num</strong> (<code>int</code>) &#x2014;
The number of the discussion / pull request.`,name:"num"},{anchor:"huggingface_hub.DiscussionWithDetails.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The id (<code>&quot;{namespace}/{repo_name}&quot;</code>) of the repo on which
the discussion / pull request was open.`,name:"repo_id"},{anchor:"huggingface_hub.DiscussionWithDetails.repo_type",description:`<strong>repo_type</strong> (<code>str</code>) &#x2014;
The type of the repo on which the discussion / pull request was open.
Posiible values are: <code>&quot;model&quot;</code>, <code>&quot;dataset&quot;</code>, <code>&quot;space&quot;</code>.`,name:"repo_type"},{anchor:"huggingface_hub.DiscussionWithDetails.author",description:`<strong>author</strong> (<code>str</code>) &#x2014;
The username of the discussion / pull request author.
Can be <code>&quot;deleted&quot;</code> if the user has been deleted since.`,name:"author"},{anchor:"huggingface_hub.DiscussionWithDetails.is_pull_request",description:`<strong>is_pull_request</strong> (<code>bool</code>) &#x2014;
Wether or not this is a pull request.`,name:"is_pull_request"},{anchor:"huggingface_hub.DiscussionWithDetails.created_at",description:`<strong>created_at</strong> (<code>datetime</code>) &#x2014;
The <code>datetime</code> of creation of the discussion / pull request.`,name:"created_at"},{anchor:"huggingface_hub.DiscussionWithDetails.events",description:`<strong>events</strong> (<code>list</code> of <a href="/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionEvent">DiscussionEvent</a>) &#x2014;
The list of <code>DiscussionEvents</code> in this discussion or pull request.`,name:"events"},{anchor:"huggingface_hub.DiscussionWithDetails.conflicting_files",description:`<strong>conflicting_files</strong> (<code>list</code> of <code>str</code>, <em>optional</em>) &#x2014;
A list of conflicting files if this is a pull request.
<code>None</code> if <code>self.is_pull_request</code> is <code>False</code>.`,name:"conflicting_files"},{anchor:"huggingface_hub.DiscussionWithDetails.target_branch",description:`<strong>target_branch</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The branch into which changes are to be merged if this is a
pull request. <code>None</code>  if <code>self.is_pull_request</code> is <code>False</code>.`,name:"target_branch"},{anchor:"huggingface_hub.DiscussionWithDetails.merge_commit_oid",description:`<strong>merge_commit_oid</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If this is a merged pull request, this is set to the OID / SHA of
the merge commit, <code>None</code> otherwise.`,name:"merge_commit_oid"},{anchor:"huggingface_hub.DiscussionWithDetails.diff",description:`<strong>diff</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git diff if this is a pull request, <code>None</code> otherwise.`,name:"diff"}],source:"https://github.com/huggingface/huggingface_hub/blob/vr_930/src/huggingface_hub/community.py#L68"}}),H=new z({props:{name:"class huggingface_hub.DiscussionEvent",anchor:"huggingface_hub.DiscussionEvent",parameters:[{name:"id",val:": str"},{name:"type",val:": str"},{name:"created_at",val:": datetime"},{name:"author",val:": str"},{name:"_event",val:": dict"}],parametersDescription:[{anchor:"huggingface_hub.DiscussionEvent.id",description:`<strong>id</strong> (<code>str</code>) &#x2014;
The ID of the event. An hexadecimal string.`,name:"id"},{anchor:"huggingface_hub.DiscussionEvent.type",description:`<strong>type</strong> (<code>str</code>) &#x2014;
The type of the event.`,name:"type"},{anchor:"huggingface_hub.DiscussionEvent.created_at",description:`<strong>created_at</strong> (<code>datetime</code>) &#x2014;
A <a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#datetime.datetime" rel="nofollow"><code>datetime</code></a>
object holding the creation timestamp for the event.`,name:"created_at"},{anchor:"huggingface_hub.DiscussionEvent.author",description:`<strong>author</strong> (<code>str</code>) &#x2014;
The username of the discussion / pull request author.
Can be <code>&quot;deleted&quot;</code> if the user has been deleted since.`,name:"author"}],source:"https://github.com/huggingface/huggingface_hub/blob/vr_930/src/huggingface_hub/community.py#L120"}}),j=new z({props:{name:"class huggingface_hub.DiscussionComment",anchor:"huggingface_hub.DiscussionComment",parameters:[{name:"id",val:": str"},{name:"type",val:": str"},{name:"created_at",val:": datetime"},{name:"author",val:": str"},{name:"_event",val:": dict"},{name:"content",val:": str"},{name:"edited",val:": bool"},{name:"hidden",val:": bool"}],parametersDescription:[{anchor:"huggingface_hub.DiscussionComment.id",description:`<strong>id</strong> (<code>str</code>) &#x2014;
The ID of the event. An hexadecimal string.`,name:"id"},{anchor:"huggingface_hub.DiscussionComment.type",description:`<strong>type</strong> (<code>str</code>) &#x2014;
The type of the event.`,name:"type"},{anchor:"huggingface_hub.DiscussionComment.created_at",description:`<strong>created_at</strong> (<code>datetime</code>) &#x2014;
A <a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#datetime.datetime" rel="nofollow"><code>datetime</code></a>
object holding the creation timestamp for the event.`,name:"created_at"},{anchor:"huggingface_hub.DiscussionComment.author",description:`<strong>author</strong> (<code>str</code>) &#x2014;
The username of the discussion / pull request author.
Can be <code>&quot;deleted&quot;</code> if the user has been deleted since.`,name:"author"},{anchor:"huggingface_hub.DiscussionComment.content",description:`<strong>content</strong> (<code>str</code>) &#x2014;
The raw markdown content of the comment. Mentions, links and images are not rendered.`,name:"content"},{anchor:"huggingface_hub.DiscussionComment.edited",description:`<strong>edited</strong> (<code>bool</code>) &#x2014;
Wether or not this comment has been edited.`,name:"edited"},{anchor:"huggingface_hub.DiscussionComment.hidden",description:`<strong>hidden</strong> (<code>bool</code>) &#x2014;
Whether or not this comment has been hidden.`,name:"hidden"}],source:"https://github.com/huggingface/huggingface_hub/blob/vr_930/src/huggingface_hub/community.py#L153"}}),U=new z({props:{name:"class huggingface_hub.DiscussionStatusChange",anchor:"huggingface_hub.DiscussionStatusChange",parameters:[{name:"id",val:": str"},{name:"type",val:": str"},{name:"created_at",val:": datetime"},{name:"author",val:": str"},{name:"_event",val:": dict"},{name:"new_status",val:": str"}],parametersDescription:[{anchor:"huggingface_hub.DiscussionStatusChange.id",description:`<strong>id</strong> (<code>str</code>) &#x2014;
The ID of the event. An hexadecimal string.`,name:"id"},{anchor:"huggingface_hub.DiscussionStatusChange.type",description:`<strong>type</strong> (<code>str</code>) &#x2014;
The type of the event.`,name:"type"},{anchor:"huggingface_hub.DiscussionStatusChange.created_at",description:`<strong>created_at</strong> (<code>datetime</code>) &#x2014;
A <a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#datetime.datetime" rel="nofollow"><code>datetime</code></a>
object holding the creation timestamp for the event.`,name:"created_at"},{anchor:"huggingface_hub.DiscussionStatusChange.author",description:`<strong>author</strong> (<code>str</code>) &#x2014;
The username of the discussion / pull request author.
Can be <code>&quot;deleted&quot;</code> if the user has been deleted since.`,name:"author"},{anchor:"huggingface_hub.DiscussionStatusChange.new_status",description:`<strong>new_status</strong> (<code>str</code>) &#x2014;
The status of the discussion / pull request after the change.
It can be one of:<ul>
<li><code>&quot;open&quot;</code></li>
<li><code>&quot;closed&quot;</code></li>
<li><code>&quot;merged&quot;</code> (only for pull requests)</li>
</ul>`,name:"new_status"}],source:"https://github.com/huggingface/huggingface_hub/blob/vr_930/src/huggingface_hub/community.py#L208"}}),R=new z({props:{name:"class huggingface_hub.DiscussionCommit",anchor:"huggingface_hub.DiscussionCommit",parameters:[{name:"id",val:": str"},{name:"type",val:": str"},{name:"created_at",val:": datetime"},{name:"author",val:": str"},{name:"_event",val:": dict"},{name:"summary",val:": str"},{name:"oid",val:": str"}],parametersDescription:[{anchor:"huggingface_hub.DiscussionCommit.id",description:`<strong>id</strong> (<code>str</code>) &#x2014;
The ID of the event. An hexadecimal string.`,name:"id"},{anchor:"huggingface_hub.DiscussionCommit.type",description:`<strong>type</strong> (<code>str</code>) &#x2014;
The type of the event.`,name:"type"},{anchor:"huggingface_hub.DiscussionCommit.created_at",description:`<strong>created_at</strong> (<code>datetime</code>) &#x2014;
A <a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#datetime.datetime" rel="nofollow"><code>datetime</code></a>
object holding the creation timestamp for the event.`,name:"created_at"},{anchor:"huggingface_hub.DiscussionCommit.author",description:`<strong>author</strong> (<code>str</code>) &#x2014;
The username of the discussion / pull request author.
Can be <code>&quot;deleted&quot;</code> if the user has been deleted since.`,name:"author"},{anchor:"huggingface_hub.DiscussionCommit.summary",description:`<strong>summary</strong> (<code>str</code>) &#x2014;
The summary of the commit.`,name:"summary"},{anchor:"huggingface_hub.DiscussionCommit.oid",description:`<strong>oid</strong> (<code>str</code>) &#x2014;
The OID / SHA of the commit, as a hexadecimal string.`,name:"oid"}],source:"https://github.com/huggingface/huggingface_hub/blob/vr_930/src/huggingface_hub/community.py#L236"}}),G=new z({props:{name:"class huggingface_hub.DiscussionTitleChange",anchor:"huggingface_hub.DiscussionTitleChange",parameters:[{name:"id",val:": str"},{name:"type",val:": str"},{name:"created_at",val:": datetime"},{name:"author",val:": str"},{name:"_event",val:": dict"},{name:"old_title",val:": str"},{name:"new_title",val:": str"}],parametersDescription:[{anchor:"huggingface_hub.DiscussionTitleChange.id",description:`<strong>id</strong> (<code>str</code>) &#x2014;
The ID of the event. An hexadecimal string.`,name:"id"},{anchor:"huggingface_hub.DiscussionTitleChange.type",description:`<strong>type</strong> (<code>str</code>) &#x2014;
The type of the event.`,name:"type"},{anchor:"huggingface_hub.DiscussionTitleChange.created_at",description:`<strong>created_at</strong> (<code>datetime</code>) &#x2014;
A <a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#datetime.datetime" rel="nofollow"><code>datetime</code></a>
object holding the creation timestamp for the event.`,name:"created_at"},{anchor:"huggingface_hub.DiscussionTitleChange.author",description:`<strong>author</strong> (<code>str</code>) &#x2014;
The username of the discussion / pull request author.
Can be <code>&quot;deleted&quot;</code> if the user has been deleted since.`,name:"author"},{anchor:"huggingface_hub.DiscussionTitleChange.old_title",description:`<strong>old_title</strong> (<code>str</code>) &#x2014;
The previous title for the discussion / pull request.`,name:"old_title"},{anchor:"huggingface_hub.DiscussionTitleChange.new_title",description:`<strong>new_title</strong> (<code>str</code>) &#x2014;
The new title.`,name:"new_title"}],source:"https://github.com/huggingface/huggingface_hub/blob/vr_930/src/huggingface_hub/community.py#L263"}}),{c(){v=n("meta"),$e=c(),D=n("h1"),S=n("a"),ce=n("span"),x(W.$$.fragment),Ue=c(),ue=n("span"),Fe=a("Interacting with discussions and pull requests"),xe=c(),q=n("h2"),I=n("a"),he=n("span"),x(L.$$.fragment),Re=c(),de=n("span"),Be=a("Data structures"),Ee=c(),y=n("div"),x(N.$$.fragment),Ge=c(),le=n("p"),Je=a("A discussion or pull request on the Hub."),we=c(),$=n("div"),x(O.$$.fragment),ze=c(),V=n("p"),Ke=a("Subclass of "),K=n("a"),Qe=a("Discussion"),Xe=a("."),Ce=c(),g=n("div"),x(H.$$.fragment),Ye=c(),ge=n("p"),Ze=a("An event in a discussion or pull request."),et=c(),me=n("p"),tt=a("Use concrete classes:"),st=c(),m=n("ul"),pe=n("li"),Q=n("a"),nt=a("DiscussionComment"),ot=c(),fe=n("li"),X=n("a"),it=a("DiscussionStatusChange"),at=c(),_e=n("li"),Y=n("a"),rt=a("DiscussionCommit"),ct=c(),be=n("li"),Z=n("a"),ut=a("DiscussionTitleChange"),Te=c(),p=n("div"),x(j.$$.fragment),ht=c(),ve=n("p"),dt=a("A comment in a discussion / pull request."),lt=c(),M=n("p"),gt=a("Subclass of "),ee=n("a"),mt=a("DiscussionEvent"),pt=a("."),Ae=c(),f=n("div"),x(U.$$.fragment),ft=c(),De=n("p"),_t=a("A change of status in a discussion / pull request."),bt=c(),F=n("p"),vt=a("Subclass of "),te=n("a"),Dt=a("DiscussionEvent"),qt=a("."),Se=c(),_=n("div"),x(R.$$.fragment),yt=c(),qe=n("p"),$t=a("A commit in a pull request."),xt=c(),B=n("p"),Et=a("Subclass of "),se=n("a"),wt=a("DiscussionEvent"),Ct=a("."),Ie=c(),b=n("div"),x(G.$$.fragment),Tt=c(),ye=n("p"),At=a("A rename event in a discussion / pull request."),St=c(),J=n("p"),It=a("Subclass of "),ne=n("a"),Pt=a("DiscussionEvent"),kt=a("."),this.h()},l(t){const d=ds('[data-svelte="svelte-1phssyn"]',document.head);v=o(d,"META",{name:!0,content:!0}),d.forEach(s),$e=u(t),D=o(t,"H1",{class:!0});var ke=i(D);S=o(ke,"A",{id:!0,class:!0,href:!0});var Lt=i(S);ce=o(Lt,"SPAN",{});var Nt=i(ce);E(W.$$.fragment,Nt),Nt.forEach(s),Lt.forEach(s),Ue=u(ke),ue=o(ke,"SPAN",{});var Ot=i(ue);Fe=r(Ot,"Interacting with discussions and pull requests"),Ot.forEach(s),ke.forEach(s),xe=u(t),q=o(t,"H2",{class:!0});var We=i(q);I=o(We,"A",{id:!0,class:!0,href:!0});var Vt=i(I);he=o(Vt,"SPAN",{});var Ht=i(he);E(L.$$.fragment,Ht),Ht.forEach(s),Vt.forEach(s),Re=u(We),de=o(We,"SPAN",{});var jt=i(de);Be=r(jt,"Data structures"),jt.forEach(s),We.forEach(s),Ee=u(t),y=o(t,"DIV",{class:!0});var Le=i(y);E(N.$$.fragment,Le),Ge=u(Le),le=o(Le,"P",{});var Mt=i(le);Je=r(Mt,"A discussion or pull request on the Hub."),Mt.forEach(s),Le.forEach(s),we=u(t),$=o(t,"DIV",{class:!0});var Ne=i($);E(O.$$.fragment,Ne),ze=u(Ne),V=o(Ne,"P",{});var Oe=i(V);Ke=r(Oe,"Subclass of "),K=o(Oe,"A",{href:!0});var Ut=i(K);Qe=r(Ut,"Discussion"),Ut.forEach(s),Xe=r(Oe,"."),Oe.forEach(s),Ne.forEach(s),Ce=u(t),g=o(t,"DIV",{class:!0});var P=i(g);E(H.$$.fragment,P),Ye=u(P),ge=o(P,"P",{});var Ft=i(ge);Ze=r(Ft,"An event in a discussion or pull request."),Ft.forEach(s),et=u(P),me=o(P,"P",{});var Rt=i(me);tt=r(Rt,"Use concrete classes:"),Rt.forEach(s),st=u(P),m=o(P,"UL",{});var k=i(m);pe=o(k,"LI",{});var Bt=i(pe);Q=o(Bt,"A",{href:!0});var Gt=i(Q);nt=r(Gt,"DiscussionComment"),Gt.forEach(s),Bt.forEach(s),ot=u(k),fe=o(k,"LI",{});var Jt=i(fe);X=o(Jt,"A",{href:!0});var zt=i(X);it=r(zt,"DiscussionStatusChange"),zt.forEach(s),Jt.forEach(s),at=u(k),_e=o(k,"LI",{});var Kt=i(_e);Y=o(Kt,"A",{href:!0});var Qt=i(Y);rt=r(Qt,"DiscussionCommit"),Qt.forEach(s),Kt.forEach(s),ct=u(k),be=o(k,"LI",{});var Xt=i(be);Z=o(Xt,"A",{href:!0});var Yt=i(Z);ut=r(Yt,"DiscussionTitleChange"),Yt.forEach(s),Xt.forEach(s),k.forEach(s),P.forEach(s),Te=u(t),p=o(t,"DIV",{class:!0});var oe=i(p);E(j.$$.fragment,oe),ht=u(oe),ve=o(oe,"P",{});var Zt=i(ve);dt=r(Zt,"A comment in a discussion / pull request."),Zt.forEach(s),lt=u(oe),M=o(oe,"P",{});var Ve=i(M);gt=r(Ve,"Subclass of "),ee=o(Ve,"A",{href:!0});var es=i(ee);mt=r(es,"DiscussionEvent"),es.forEach(s),pt=r(Ve,"."),Ve.forEach(s),oe.forEach(s),Ae=u(t),f=o(t,"DIV",{class:!0});var ie=i(f);E(U.$$.fragment,ie),ft=u(ie),De=o(ie,"P",{});var ts=i(De);_t=r(ts,"A change of status in a discussion / pull request."),ts.forEach(s),bt=u(ie),F=o(ie,"P",{});var He=i(F);vt=r(He,"Subclass of "),te=o(He,"A",{href:!0});var ss=i(te);Dt=r(ss,"DiscussionEvent"),ss.forEach(s),qt=r(He,"."),He.forEach(s),ie.forEach(s),Se=u(t),_=o(t,"DIV",{class:!0});var ae=i(_);E(R.$$.fragment,ae),yt=u(ae),qe=o(ae,"P",{});var ns=i(qe);$t=r(ns,"A commit in a pull request."),ns.forEach(s),xt=u(ae),B=o(ae,"P",{});var je=i(B);Et=r(je,"Subclass of "),se=o(je,"A",{href:!0});var os=i(se);wt=r(os,"DiscussionEvent"),os.forEach(s),Ct=r(je,"."),je.forEach(s),ae.forEach(s),Ie=u(t),b=o(t,"DIV",{class:!0});var re=i(b);E(G.$$.fragment,re),Tt=u(re),ye=o(re,"P",{});var is=i(ye);At=r(is,"A rename event in a discussion / pull request."),is.forEach(s),St=u(re),J=o(re,"P",{});var Me=i(J);It=r(Me,"Subclass of "),ne=o(Me,"A",{href:!0});var as=i(ne);Pt=r(as,"DiscussionEvent"),as.forEach(s),kt=r(Me,"."),Me.forEach(s),re.forEach(s),this.h()},h(){h(v,"name","hf:doc:metadata"),h(v,"content",JSON.stringify(ps)),h(S,"id","interacting-with-discussions-and-pull-requests"),h(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(S,"href","#interacting-with-discussions-and-pull-requests"),h(D,"class","relative group"),h(I,"id","huggingface_hub.Discussion"),h(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(I,"href","#huggingface_hub.Discussion"),h(q,"class","relative group"),h(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(K,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.Discussion"),h($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Q,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionComment"),h(X,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionStatusChange"),h(Y,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionCommit"),h(Z,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionTitleChange"),h(g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ee,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionEvent"),h(p,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(te,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionEvent"),h(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(se,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionEvent"),h(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ne,"href","/docs/huggingface_hub/pr_930/en/package_reference/community#huggingface_hub.DiscussionEvent"),h(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,d){e(document.head,v),l(t,$e,d),l(t,D,d),e(D,S),e(S,ce),w(W,ce,null),e(D,Ue),e(D,ue),e(ue,Fe),l(t,xe,d),l(t,q,d),e(q,I),e(I,he),w(L,he,null),e(q,Re),e(q,de),e(de,Be),l(t,Ee,d),l(t,y,d),w(N,y,null),e(y,Ge),e(y,le),e(le,Je),l(t,we,d),l(t,$,d),w(O,$,null),e($,ze),e($,V),e(V,Ke),e(V,K),e(K,Qe),e(V,Xe),l(t,Ce,d),l(t,g,d),w(H,g,null),e(g,Ye),e(g,ge),e(ge,Ze),e(g,et),e(g,me),e(me,tt),e(g,st),e(g,m),e(m,pe),e(pe,Q),e(Q,nt),e(m,ot),e(m,fe),e(fe,X),e(X,it),e(m,at),e(m,_e),e(_e,Y),e(Y,rt),e(m,ct),e(m,be),e(be,Z),e(Z,ut),l(t,Te,d),l(t,p,d),w(j,p,null),e(p,ht),e(p,ve),e(ve,dt),e(p,lt),e(p,M),e(M,gt),e(M,ee),e(ee,mt),e(M,pt),l(t,Ae,d),l(t,f,d),w(U,f,null),e(f,ft),e(f,De),e(De,_t),e(f,bt),e(f,F),e(F,vt),e(F,te),e(te,Dt),e(F,qt),l(t,Se,d),l(t,_,d),w(R,_,null),e(_,yt),e(_,qe),e(qe,$t),e(_,xt),e(_,B),e(B,Et),e(B,se),e(se,wt),e(B,Ct),l(t,Ie,d),l(t,b,d),w(G,b,null),e(b,Tt),e(b,ye),e(ye,At),e(b,St),e(b,J),e(J,It),e(J,ne),e(ne,Pt),e(J,kt),Pe=!0},p:ls,i(t){Pe||(C(W.$$.fragment,t),C(L.$$.fragment,t),C(N.$$.fragment,t),C(O.$$.fragment,t),C(H.$$.fragment,t),C(j.$$.fragment,t),C(U.$$.fragment,t),C(R.$$.fragment,t),C(G.$$.fragment,t),Pe=!0)},o(t){T(W.$$.fragment,t),T(L.$$.fragment,t),T(N.$$.fragment,t),T(O.$$.fragment,t),T(H.$$.fragment,t),T(j.$$.fragment,t),T(U.$$.fragment,t),T(R.$$.fragment,t),T(G.$$.fragment,t),Pe=!1},d(t){s(v),t&&s($e),t&&s(D),A(W),t&&s(xe),t&&s(q),A(L),t&&s(Ee),t&&s(y),A(N),t&&s(we),t&&s($),A(O),t&&s(Ce),t&&s(g),A(H),t&&s(Te),t&&s(p),A(j),t&&s(Ae),t&&s(f),A(U),t&&s(Se),t&&s(_),A(R),t&&s(Ie),t&&s(b),A(G)}}}const ps={local:"interacting-with-discussions-and-pull-requests",sections:[{local:"huggingface_hub.Discussion",title:"Data structures"}],title:"Interacting with discussions and pull requests"};function fs(Wt){return gs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ds extends cs{constructor(v){super();us(this,v,fs,ms,hs,{})}}export{Ds as default,ps as metadata};
