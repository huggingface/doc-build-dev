import{S as Kl,i as Ql,s as Vl,e as s,k as p,w as c,t as r,M as Xl,c as a,d as o,m as f,a as l,x as m,h as i,b as u,P as Zl,G as t,g as h,y as g,L as er,q as d,o as _,B as y,v as tr}from"../chunks/vendor-hf-doc-builder.js";import{I as xt}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as k}from"../chunks/CodeBlock-hf-doc-builder.js";function or(Ba){let P,Tt,A,C,Ke,Q,Io,Qe,Mo,Rt,D,No,Ve,Bo,Yo,St,v,V,Uo,Ae,Wo,Jo,zo,X,Ko,Xe,Qo,Vo,Xo,Z,Zo,qe,es,ts,os,ee,ss,te,as,ls,Ct,He,rs,Dt,xe,Te,Ya,Lt,Re,is,Gt,L,oe,Ze,ns,hs,se,ps,q,ae,fs,et,us,cs,ms,le,gs,Se,tt,ds,_s,Ot,H,G,ot,re,ys,st,ws,Ft,O,vs,Ce,bs,$s,It,ie,Mt,x,F,at,ne,Es,lt,ks,Nt,b,js,rt,Ps,As,it,qs,Hs,nt,xs,Ts,Bt,$,he,Rs,ht,Ss,Cs,Ds,pe,Ls,pt,Gs,Os,Fs,ft,Is,Ms,fe,Ns,ut,Bs,Ys,Yt,ue,Ut,De,Us,Wt,ce,Jt,I,Ws,ct,Js,zs,zt,me,Kt,M,Ks,mt,Qs,Vs,Qt,ge,Vt,Le,Xs,Xt,N,gt,de,dt,Zs,ea,_t,ta,oa,T,_e,yt,sa,aa,wt,la,ra,ye,vt,ia,na,bt,ha,pa,we,$t,fa,ua,Et,ca,Zt,B,ma,kt,ga,da,eo,ve,to,R,Y,jt,be,_a,Pt,ya,oo,w,wa,Ge,va,ba,Oe,$a,Ea,At,ka,ja,Fe,Pa,Aa,Ie,qa,Ha,so,$e,ao,j,xa,Me,Ta,Ra,Ne,Sa,Ca,lo,Ee,ro,U,Da,Be,La,Ga,io,ke,no,S,W,qt,je,Oa,Ht,Fa,ho,Ye,Ia,po,Pe,fo,Ue,Ma,uo;return Q=new xt({}),se=new k({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),le=new k({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),re=new xt({}),ie=new k({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(path_or_fileobj="/local/path/to/README.md",
                path_in_repo="README.md",
                repo="lysandre/test-model"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(path_or_fileobj=<span class="hljs-string">&quot;/local/path/to/README.md&quot;</span>,
<span class="hljs-meta">... </span>                path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>,
<span class="hljs-meta">... </span>                repo=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>
<span class="hljs-meta">... </span>)`}}),ne=new xt({}),ue=new k({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),ce=new k({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),me=new k({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),ge=new k({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),ve=new k({props:{code:`# Inspect an error.
>>> last_command.stderr

# Check whether a push is completed or ongoing.
>>> last_command.is_done

# Check whether a push command has errored.
>>> last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),be=new xt({}),$e=new k({props:{code:`from huggingface_hub import Repository
repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),Ee=new k({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),ke=new k({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),je=new xt({}),Pe=new k({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),{c(){P=s("meta"),Tt=p(),A=s("h1"),C=s("a"),Ke=s("span"),c(Q.$$.fragment),Io=p(),Qe=s("span"),Mo=r("Upload files to the Hub"),Rt=p(),D=s("p"),No=r("Sharing your files and work is a very important aspect of the Hub. The "),Ve=s("code"),Bo=r("huggingface_hub"),Yo=r(`
uses a Git-based workflow to upload files to the Hub. You can use these functions
independently or integrate them into your own library, making it more convenient for
your users to interact with the Hub. This guide will show you how to:`),St=p(),v=s("ul"),V=s("li"),Uo=r("Push a single file to the Hub with the "),Ae=s("a"),Wo=r("upload_file()"),Jo=r(" function."),zo=p(),X=s("li"),Ko=r("Push files with a "),Xe=s("code"),Qo=r("commit"),Vo=r(" context manager."),Xo=p(),Z=s("li"),Zo=r("Push files with the "),qe=s("a"),es=r("push_to_hub()"),ts=r(" function."),os=p(),ee=s("li"),ss=r("Push very large files with "),te=s("a"),as=r("Git LFS"),ls=r("."),Ct=p(),He=s("p"),rs=r(`Refer to the following chart to select a uploading method that works best for you and
then read more to learn about it.`),Dt=p(),xe=s("p"),Te=s("img"),Lt=p(),Re=s("p"),is=r(`Whenever you want to upload files to the Hub, you need to log in to your Hugging Face
account:`),Gt=p(),L=s("ol"),oe=s("li"),Ze=s("p"),ns=r("Log in to your Hugging Face account with the following command:"),hs=p(),c(se.$$.fragment),ps=p(),q=s("li"),ae=s("p"),fs=r(`Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login
with `),et=s("code"),us=r("notebook_login()"),cs=r(":"),ms=p(),c(le.$$.fragment),gs=p(),Se=s("p"),tt=s("code"),ds=r("notebook_login()"),_s=r(` will launch a widget in your notebook from which you can enter
your Hugging Face credentials.`),Ot=p(),H=s("h2"),G=s("a"),ot=s("span"),c(re.$$.fragment),ys=p(),st=s("span"),ws=r("Push without Git commands"),Ft=p(),O=s("p"),vs=r("The "),Ce=s("a"),bs=r("upload_file()"),$s=r(` function uploads a local file to a repository without using Git
commands. You need to provide the path of the local file, the desired path of the file
in the repository, and the repository you want to upload the file to.`),It=p(),c(ie.$$.fragment),Mt=p(),x=s("h2"),F=s("a"),at=s("span"),c(ne.$$.fragment),Es=p(),lt=s("span"),ks=r("Push files in a single step"),Nt=p(),b=s("p"),js=r("The "),rt=s("code"),Ps=r("commit"),As=r(` context manager handles four of the most common Git commands: pull, add,
commit, and push. `),it=s("code"),qs=r("git-lfs"),Hs=r(` automatically tracks any file larger than 10MB. In the
following example, the `),nt=s("code"),xs=r("commit"),Ts=r(" context manager:"),Bt=p(),$=s("ol"),he=s("li"),Rs=r("Pulls from the "),ht=s("code"),Ss=r("text-files"),Cs=r(" repository."),Ds=p(),pe=s("li"),Ls=r("Adds a change made to "),pt=s("code"),Gs=r("file.txt"),Os=r("."),Fs=p(),ft=s("li"),Is=r("Commits the change."),Ms=p(),fe=s("li"),Ns=r("Pushes the change to the "),ut=s("code"),Bs=r("text-files"),Ys=r(" repository."),Yt=p(),c(ue.$$.fragment),Ut=p(),De=s("p"),Us=r("Here is another example of how to save and upload a file to a repository:"),Wt=p(),c(ce.$$.fragment),Jt=p(),I=s("p"),Ws=r("Set "),ct=s("code"),Js=r("blocking=False"),zs=r(` if you would like to push your commits asynchronously. Non-blocking
behavior is helpful when you want to continue running your script while you push your
commits.`),zt=p(),c(me.$$.fragment),Kt=p(),M=s("p"),Ks=r("You can check the status of your push with the "),mt=s("code"),Qs=r("command_queue"),Vs=r(" method:"),Qt=p(),c(ge.$$.fragment),Vt=p(),Le=s("p"),Xs=r("Refer to the table below for the possible statuses:"),Xt=p(),N=s("table"),gt=s("thead"),de=s("tr"),dt=s("th"),Zs=r("Status"),ea=p(),_t=s("th"),ta=r("Description"),oa=p(),T=s("tbody"),_e=s("tr"),yt=s("td"),sa=r("-1"),aa=p(),wt=s("td"),la=r("The push is ongoing."),ra=p(),ye=s("tr"),vt=s("td"),ia=r("0"),na=p(),bt=s("td"),ha=r("The push has completed successfully."),pa=p(),we=s("tr"),$t=s("td"),fa=r("Non-zero"),ua=p(),Et=s("td"),ca=r("An error has occurred."),Zt=p(),B=s("p"),ma=r("When "),kt=s("code"),ga=r("blocking=False"),da=r(`, commands are tracked, and your script will only exit when all
pushes are completed, even if other errors occur in your script. Some additional useful
commands for checking the status of a push include:`),eo=p(),c(ve.$$.fragment),to=p(),R=s("h2"),Y=s("a"),jt=s("span"),c(be.$$.fragment),_a=p(),Pt=s("span"),ya=r("Pull before pushing to a repository"),oo=p(),w=s("p"),wa=r("The "),Ge=s("a"),va=r("Repository"),ba=r(" class also has a "),Oe=s("a"),$a=r("push_to_hub()"),Ea=r(` function to add files,
make a commit, and push them to a repository. Unlike the `),At=s("code"),ka=r("commit"),ja=r(` context manager,
`),Fe=s("a"),Pa=r("push_to_hub()"),Aa=r(` requires you to pull from a repository first, save the
files, and then call `),Ie=s("a"),qa=r("push_to_hub()"),Ha=r("."),so=p(),c($e.$$.fragment),ao=p(),j=s("p"),xa=r(`However, if you aren\u2019t ready to push a file yet, you can still use
`),Me=s("a"),Ta=r("git_add()"),Ra=r(" and "),Ne=s("a"),Sa=r("git_commit()"),Ca=r(" to add and commit your file:"),lo=p(),c(Ee.$$.fragment),ro=p(),U=s("p"),Da=r(`Once you\u2019re ready, you can push your file to your repository with
`),Be=s("a"),La=r("git_push()"),Ga=r(":"),io=p(),c(ke.$$.fragment),no=p(),S=s("h2"),W=s("a"),qt=s("span"),c(je.$$.fragment),Oa=p(),Ht=s("span"),Fa=r("Push large files with Git LFS"),ho=p(),Ye=s("p"),Ia=r("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),po=p(),c(Pe.$$.fragment),fo=p(),Ue=s("p"),Ma=r(`You should install this for each model repository that contains a model file. Once
installed, you are now able to push files larger than 5GB.`),this.h()},l(e){const n=Xl('[data-svelte="svelte-1phssyn"]',document.head);P=a(n,"META",{name:!0,content:!0}),n.forEach(o),Tt=f(e),A=a(e,"H1",{class:!0});var co=l(A);C=a(co,"A",{id:!0,class:!0,href:!0});var Ua=l(C);Ke=a(Ua,"SPAN",{});var Wa=l(Ke);m(Q.$$.fragment,Wa),Wa.forEach(o),Ua.forEach(o),Io=f(co),Qe=a(co,"SPAN",{});var Ja=l(Qe);Mo=i(Ja,"Upload files to the Hub"),Ja.forEach(o),co.forEach(o),Rt=f(e),D=a(e,"P",{});var mo=l(D);No=i(mo,"Sharing your files and work is a very important aspect of the Hub. The "),Ve=a(mo,"CODE",{});var za=l(Ve);Bo=i(za,"huggingface_hub"),za.forEach(o),Yo=i(mo,`
uses a Git-based workflow to upload files to the Hub. You can use these functions
independently or integrate them into your own library, making it more convenient for
your users to interact with the Hub. This guide will show you how to:`),mo.forEach(o),St=f(e),v=a(e,"UL",{});var J=l(v);V=a(J,"LI",{});var go=l(V);Uo=i(go,"Push a single file to the Hub with the "),Ae=a(go,"A",{href:!0});var Ka=l(Ae);Wo=i(Ka,"upload_file()"),Ka.forEach(o),Jo=i(go," function."),go.forEach(o),zo=f(J),X=a(J,"LI",{});var _o=l(X);Ko=i(_o,"Push files with a "),Xe=a(_o,"CODE",{});var Qa=l(Xe);Qo=i(Qa,"commit"),Qa.forEach(o),Vo=i(_o," context manager."),_o.forEach(o),Xo=f(J),Z=a(J,"LI",{});var yo=l(Z);Zo=i(yo,"Push files with the "),qe=a(yo,"A",{href:!0});var Va=l(qe);es=i(Va,"push_to_hub()"),Va.forEach(o),ts=i(yo," function."),yo.forEach(o),os=f(J),ee=a(J,"LI",{});var wo=l(ee);ss=i(wo,"Push very large files with "),te=a(wo,"A",{href:!0,rel:!0});var Xa=l(te);as=i(Xa,"Git LFS"),Xa.forEach(o),ls=i(wo,"."),wo.forEach(o),J.forEach(o),Ct=f(e),He=a(e,"P",{});var Za=l(He);rs=i(Za,`Refer to the following chart to select a uploading method that works best for you and
then read more to learn about it.`),Za.forEach(o),Dt=f(e),xe=a(e,"P",{});var el=l(xe);Te=a(el,"IMG",{src:!0,alt:!0}),el.forEach(o),Lt=f(e),Re=a(e,"P",{});var tl=l(Re);is=i(tl,`Whenever you want to upload files to the Hub, you need to log in to your Hugging Face
account:`),tl.forEach(o),Gt=f(e),L=a(e,"OL",{});var vo=l(L);oe=a(vo,"LI",{});var bo=l(oe);Ze=a(bo,"P",{});var ol=l(Ze);ns=i(ol,"Log in to your Hugging Face account with the following command:"),ol.forEach(o),hs=f(bo),m(se.$$.fragment,bo),bo.forEach(o),ps=f(vo),q=a(vo,"LI",{});var We=l(q);ae=a(We,"P",{});var $o=l(ae);fs=i($o,`Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login
with `),et=a($o,"CODE",{});var sl=l(et);us=i(sl,"notebook_login()"),sl.forEach(o),cs=i($o,":"),$o.forEach(o),ms=f(We),m(le.$$.fragment,We),gs=f(We),Se=a(We,"P",{});var Na=l(Se);tt=a(Na,"CODE",{});var al=l(tt);ds=i(al,"notebook_login()"),al.forEach(o),_s=i(Na,` will launch a widget in your notebook from which you can enter
your Hugging Face credentials.`),Na.forEach(o),We.forEach(o),vo.forEach(o),Ot=f(e),H=a(e,"H2",{class:!0});var Eo=l(H);G=a(Eo,"A",{id:!0,class:!0,href:!0});var ll=l(G);ot=a(ll,"SPAN",{});var rl=l(ot);m(re.$$.fragment,rl),rl.forEach(o),ll.forEach(o),ys=f(Eo),st=a(Eo,"SPAN",{});var il=l(st);ws=i(il,"Push without Git commands"),il.forEach(o),Eo.forEach(o),Ft=f(e),O=a(e,"P",{});var ko=l(O);vs=i(ko,"The "),Ce=a(ko,"A",{href:!0});var nl=l(Ce);bs=i(nl,"upload_file()"),nl.forEach(o),$s=i(ko,` function uploads a local file to a repository without using Git
commands. You need to provide the path of the local file, the desired path of the file
in the repository, and the repository you want to upload the file to.`),ko.forEach(o),It=f(e),m(ie.$$.fragment,e),Mt=f(e),x=a(e,"H2",{class:!0});var jo=l(x);F=a(jo,"A",{id:!0,class:!0,href:!0});var hl=l(F);at=a(hl,"SPAN",{});var pl=l(at);m(ne.$$.fragment,pl),pl.forEach(o),hl.forEach(o),Es=f(jo),lt=a(jo,"SPAN",{});var fl=l(lt);ks=i(fl,"Push files in a single step"),fl.forEach(o),jo.forEach(o),Nt=f(e),b=a(e,"P",{});var z=l(b);js=i(z,"The "),rt=a(z,"CODE",{});var ul=l(rt);Ps=i(ul,"commit"),ul.forEach(o),As=i(z,` context manager handles four of the most common Git commands: pull, add,
commit, and push. `),it=a(z,"CODE",{});var cl=l(it);qs=i(cl,"git-lfs"),cl.forEach(o),Hs=i(z,` automatically tracks any file larger than 10MB. In the
following example, the `),nt=a(z,"CODE",{});var ml=l(nt);xs=i(ml,"commit"),ml.forEach(o),Ts=i(z," context manager:"),z.forEach(o),Bt=f(e),$=a(e,"OL",{});var K=l($);he=a(K,"LI",{});var Po=l(he);Rs=i(Po,"Pulls from the "),ht=a(Po,"CODE",{});var gl=l(ht);Ss=i(gl,"text-files"),gl.forEach(o),Cs=i(Po," repository."),Po.forEach(o),Ds=f(K),pe=a(K,"LI",{});var Ao=l(pe);Ls=i(Ao,"Adds a change made to "),pt=a(Ao,"CODE",{});var dl=l(pt);Gs=i(dl,"file.txt"),dl.forEach(o),Os=i(Ao,"."),Ao.forEach(o),Fs=f(K),ft=a(K,"LI",{});var _l=l(ft);Is=i(_l,"Commits the change."),_l.forEach(o),Ms=f(K),fe=a(K,"LI",{});var qo=l(fe);Ns=i(qo,"Pushes the change to the "),ut=a(qo,"CODE",{});var yl=l(ut);Bs=i(yl,"text-files"),yl.forEach(o),Ys=i(qo," repository."),qo.forEach(o),K.forEach(o),Yt=f(e),m(ue.$$.fragment,e),Ut=f(e),De=a(e,"P",{});var wl=l(De);Us=i(wl,"Here is another example of how to save and upload a file to a repository:"),wl.forEach(o),Wt=f(e),m(ce.$$.fragment,e),Jt=f(e),I=a(e,"P",{});var Ho=l(I);Ws=i(Ho,"Set "),ct=a(Ho,"CODE",{});var vl=l(ct);Js=i(vl,"blocking=False"),vl.forEach(o),zs=i(Ho,` if you would like to push your commits asynchronously. Non-blocking
behavior is helpful when you want to continue running your script while you push your
commits.`),Ho.forEach(o),zt=f(e),m(me.$$.fragment,e),Kt=f(e),M=a(e,"P",{});var xo=l(M);Ks=i(xo,"You can check the status of your push with the "),mt=a(xo,"CODE",{});var bl=l(mt);Qs=i(bl,"command_queue"),bl.forEach(o),Vs=i(xo," method:"),xo.forEach(o),Qt=f(e),m(ge.$$.fragment,e),Vt=f(e),Le=a(e,"P",{});var $l=l(Le);Xs=i($l,"Refer to the table below for the possible statuses:"),$l.forEach(o),Xt=f(e),N=a(e,"TABLE",{});var To=l(N);gt=a(To,"THEAD",{});var El=l(gt);de=a(El,"TR",{});var Ro=l(de);dt=a(Ro,"TH",{});var kl=l(dt);Zs=i(kl,"Status"),kl.forEach(o),ea=f(Ro),_t=a(Ro,"TH",{});var jl=l(_t);ta=i(jl,"Description"),jl.forEach(o),Ro.forEach(o),El.forEach(o),oa=f(To),T=a(To,"TBODY",{});var Je=l(T);_e=a(Je,"TR",{});var So=l(_e);yt=a(So,"TD",{});var Pl=l(yt);sa=i(Pl,"-1"),Pl.forEach(o),aa=f(So),wt=a(So,"TD",{});var Al=l(wt);la=i(Al,"The push is ongoing."),Al.forEach(o),So.forEach(o),ra=f(Je),ye=a(Je,"TR",{});var Co=l(ye);vt=a(Co,"TD",{});var ql=l(vt);ia=i(ql,"0"),ql.forEach(o),na=f(Co),bt=a(Co,"TD",{});var Hl=l(bt);ha=i(Hl,"The push has completed successfully."),Hl.forEach(o),Co.forEach(o),pa=f(Je),we=a(Je,"TR",{});var Do=l(we);$t=a(Do,"TD",{});var xl=l($t);fa=i(xl,"Non-zero"),xl.forEach(o),ua=f(Do),Et=a(Do,"TD",{});var Tl=l(Et);ca=i(Tl,"An error has occurred."),Tl.forEach(o),Do.forEach(o),Je.forEach(o),To.forEach(o),Zt=f(e),B=a(e,"P",{});var Lo=l(B);ma=i(Lo,"When "),kt=a(Lo,"CODE",{});var Rl=l(kt);ga=i(Rl,"blocking=False"),Rl.forEach(o),da=i(Lo,`, commands are tracked, and your script will only exit when all
pushes are completed, even if other errors occur in your script. Some additional useful
commands for checking the status of a push include:`),Lo.forEach(o),eo=f(e),m(ve.$$.fragment,e),to=f(e),R=a(e,"H2",{class:!0});var Go=l(R);Y=a(Go,"A",{id:!0,class:!0,href:!0});var Sl=l(Y);jt=a(Sl,"SPAN",{});var Cl=l(jt);m(be.$$.fragment,Cl),Cl.forEach(o),Sl.forEach(o),_a=f(Go),Pt=a(Go,"SPAN",{});var Dl=l(Pt);ya=i(Dl,"Pull before pushing to a repository"),Dl.forEach(o),Go.forEach(o),oo=f(e),w=a(e,"P",{});var E=l(w);wa=i(E,"The "),Ge=a(E,"A",{href:!0});var Ll=l(Ge);va=i(Ll,"Repository"),Ll.forEach(o),ba=i(E," class also has a "),Oe=a(E,"A",{href:!0});var Gl=l(Oe);$a=i(Gl,"push_to_hub()"),Gl.forEach(o),Ea=i(E,` function to add files,
make a commit, and push them to a repository. Unlike the `),At=a(E,"CODE",{});var Ol=l(At);ka=i(Ol,"commit"),Ol.forEach(o),ja=i(E,` context manager,
`),Fe=a(E,"A",{href:!0});var Fl=l(Fe);Pa=i(Fl,"push_to_hub()"),Fl.forEach(o),Aa=i(E,` requires you to pull from a repository first, save the
files, and then call `),Ie=a(E,"A",{href:!0});var Il=l(Ie);qa=i(Il,"push_to_hub()"),Il.forEach(o),Ha=i(E,"."),E.forEach(o),so=f(e),m($e.$$.fragment,e),ao=f(e),j=a(e,"P",{});var ze=l(j);xa=i(ze,`However, if you aren\u2019t ready to push a file yet, you can still use
`),Me=a(ze,"A",{href:!0});var Ml=l(Me);Ta=i(Ml,"git_add()"),Ml.forEach(o),Ra=i(ze," and "),Ne=a(ze,"A",{href:!0});var Nl=l(Ne);Sa=i(Nl,"git_commit()"),Nl.forEach(o),Ca=i(ze," to add and commit your file:"),ze.forEach(o),lo=f(e),m(Ee.$$.fragment,e),ro=f(e),U=a(e,"P",{});var Oo=l(U);Da=i(Oo,`Once you\u2019re ready, you can push your file to your repository with
`),Be=a(Oo,"A",{href:!0});var Bl=l(Be);La=i(Bl,"git_push()"),Bl.forEach(o),Ga=i(Oo,":"),Oo.forEach(o),io=f(e),m(ke.$$.fragment,e),no=f(e),S=a(e,"H2",{class:!0});var Fo=l(S);W=a(Fo,"A",{id:!0,class:!0,href:!0});var Yl=l(W);qt=a(Yl,"SPAN",{});var Ul=l(qt);m(je.$$.fragment,Ul),Ul.forEach(o),Yl.forEach(o),Oa=f(Fo),Ht=a(Fo,"SPAN",{});var Wl=l(Ht);Fa=i(Wl,"Push large files with Git LFS"),Wl.forEach(o),Fo.forEach(o),ho=f(e),Ye=a(e,"P",{});var Jl=l(Ye);Ia=i(Jl,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),Jl.forEach(o),po=f(e),m(Pe.$$.fragment,e),fo=f(e),Ue=a(e,"P",{});var zl=l(Ue);Ma=i(zl,`You should install this for each model repository that contains a model file. Once
installed, you are now able to push files larger than 5GB.`),zl.forEach(o),this.h()},h(){u(P,"name","hf:doc:metadata"),u(P,"content",JSON.stringify(sr)),u(C,"id","upload-files-to-the-hub"),u(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(C,"href","#upload-files-to-the-hub"),u(A,"class","relative group"),u(Ae,"href","/docs/huggingface_hub/pr_883/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(qe,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(te,"href","https://git-lfs.github.com/"),u(te,"rel","nofollow"),Zl(Te.src,Ya="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub_upload_flowchart.svg")||u(Te,"src",Ya),u(Te,"alt",`Hub upload
flowchart`),u(G,"id","push-without-git-commands"),u(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(G,"href","#push-without-git-commands"),u(H,"class","relative group"),u(Ce,"href","/docs/huggingface_hub/pr_883/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(F,"id","push-files-in-a-single-step"),u(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(F,"href","#push-files-in-a-single-step"),u(x,"class","relative group"),u(Y,"id","pull-before-pushing-to-a-repository"),u(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Y,"href","#pull-before-pushing-to-a-repository"),u(R,"class","relative group"),u(Ge,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository"),u(Oe,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(Fe,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(Ie,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(Me,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository.git_add"),u(Ne,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository.git_commit"),u(Be,"href","/docs/huggingface_hub/pr_883/en/package_reference/repository#huggingface_hub.Repository.git_push"),u(W,"id","push-large-files-with-git-lfs"),u(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(W,"href","#push-large-files-with-git-lfs"),u(S,"class","relative group")},m(e,n){t(document.head,P),h(e,Tt,n),h(e,A,n),t(A,C),t(C,Ke),g(Q,Ke,null),t(A,Io),t(A,Qe),t(Qe,Mo),h(e,Rt,n),h(e,D,n),t(D,No),t(D,Ve),t(Ve,Bo),t(D,Yo),h(e,St,n),h(e,v,n),t(v,V),t(V,Uo),t(V,Ae),t(Ae,Wo),t(V,Jo),t(v,zo),t(v,X),t(X,Ko),t(X,Xe),t(Xe,Qo),t(X,Vo),t(v,Xo),t(v,Z),t(Z,Zo),t(Z,qe),t(qe,es),t(Z,ts),t(v,os),t(v,ee),t(ee,ss),t(ee,te),t(te,as),t(ee,ls),h(e,Ct,n),h(e,He,n),t(He,rs),h(e,Dt,n),h(e,xe,n),t(xe,Te),h(e,Lt,n),h(e,Re,n),t(Re,is),h(e,Gt,n),h(e,L,n),t(L,oe),t(oe,Ze),t(Ze,ns),t(oe,hs),g(se,oe,null),t(L,ps),t(L,q),t(q,ae),t(ae,fs),t(ae,et),t(et,us),t(ae,cs),t(q,ms),g(le,q,null),t(q,gs),t(q,Se),t(Se,tt),t(tt,ds),t(Se,_s),h(e,Ot,n),h(e,H,n),t(H,G),t(G,ot),g(re,ot,null),t(H,ys),t(H,st),t(st,ws),h(e,Ft,n),h(e,O,n),t(O,vs),t(O,Ce),t(Ce,bs),t(O,$s),h(e,It,n),g(ie,e,n),h(e,Mt,n),h(e,x,n),t(x,F),t(F,at),g(ne,at,null),t(x,Es),t(x,lt),t(lt,ks),h(e,Nt,n),h(e,b,n),t(b,js),t(b,rt),t(rt,Ps),t(b,As),t(b,it),t(it,qs),t(b,Hs),t(b,nt),t(nt,xs),t(b,Ts),h(e,Bt,n),h(e,$,n),t($,he),t(he,Rs),t(he,ht),t(ht,Ss),t(he,Cs),t($,Ds),t($,pe),t(pe,Ls),t(pe,pt),t(pt,Gs),t(pe,Os),t($,Fs),t($,ft),t(ft,Is),t($,Ms),t($,fe),t(fe,Ns),t(fe,ut),t(ut,Bs),t(fe,Ys),h(e,Yt,n),g(ue,e,n),h(e,Ut,n),h(e,De,n),t(De,Us),h(e,Wt,n),g(ce,e,n),h(e,Jt,n),h(e,I,n),t(I,Ws),t(I,ct),t(ct,Js),t(I,zs),h(e,zt,n),g(me,e,n),h(e,Kt,n),h(e,M,n),t(M,Ks),t(M,mt),t(mt,Qs),t(M,Vs),h(e,Qt,n),g(ge,e,n),h(e,Vt,n),h(e,Le,n),t(Le,Xs),h(e,Xt,n),h(e,N,n),t(N,gt),t(gt,de),t(de,dt),t(dt,Zs),t(de,ea),t(de,_t),t(_t,ta),t(N,oa),t(N,T),t(T,_e),t(_e,yt),t(yt,sa),t(_e,aa),t(_e,wt),t(wt,la),t(T,ra),t(T,ye),t(ye,vt),t(vt,ia),t(ye,na),t(ye,bt),t(bt,ha),t(T,pa),t(T,we),t(we,$t),t($t,fa),t(we,ua),t(we,Et),t(Et,ca),h(e,Zt,n),h(e,B,n),t(B,ma),t(B,kt),t(kt,ga),t(B,da),h(e,eo,n),g(ve,e,n),h(e,to,n),h(e,R,n),t(R,Y),t(Y,jt),g(be,jt,null),t(R,_a),t(R,Pt),t(Pt,ya),h(e,oo,n),h(e,w,n),t(w,wa),t(w,Ge),t(Ge,va),t(w,ba),t(w,Oe),t(Oe,$a),t(w,Ea),t(w,At),t(At,ka),t(w,ja),t(w,Fe),t(Fe,Pa),t(w,Aa),t(w,Ie),t(Ie,qa),t(w,Ha),h(e,so,n),g($e,e,n),h(e,ao,n),h(e,j,n),t(j,xa),t(j,Me),t(Me,Ta),t(j,Ra),t(j,Ne),t(Ne,Sa),t(j,Ca),h(e,lo,n),g(Ee,e,n),h(e,ro,n),h(e,U,n),t(U,Da),t(U,Be),t(Be,La),t(U,Ga),h(e,io,n),g(ke,e,n),h(e,no,n),h(e,S,n),t(S,W),t(W,qt),g(je,qt,null),t(S,Oa),t(S,Ht),t(Ht,Fa),h(e,ho,n),h(e,Ye,n),t(Ye,Ia),h(e,po,n),g(Pe,e,n),h(e,fo,n),h(e,Ue,n),t(Ue,Ma),uo=!0},p:er,i(e){uo||(d(Q.$$.fragment,e),d(se.$$.fragment,e),d(le.$$.fragment,e),d(re.$$.fragment,e),d(ie.$$.fragment,e),d(ne.$$.fragment,e),d(ue.$$.fragment,e),d(ce.$$.fragment,e),d(me.$$.fragment,e),d(ge.$$.fragment,e),d(ve.$$.fragment,e),d(be.$$.fragment,e),d($e.$$.fragment,e),d(Ee.$$.fragment,e),d(ke.$$.fragment,e),d(je.$$.fragment,e),d(Pe.$$.fragment,e),uo=!0)},o(e){_(Q.$$.fragment,e),_(se.$$.fragment,e),_(le.$$.fragment,e),_(re.$$.fragment,e),_(ie.$$.fragment,e),_(ne.$$.fragment,e),_(ue.$$.fragment,e),_(ce.$$.fragment,e),_(me.$$.fragment,e),_(ge.$$.fragment,e),_(ve.$$.fragment,e),_(be.$$.fragment,e),_($e.$$.fragment,e),_(Ee.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Pe.$$.fragment,e),uo=!1},d(e){o(P),e&&o(Tt),e&&o(A),y(Q),e&&o(Rt),e&&o(D),e&&o(St),e&&o(v),e&&o(Ct),e&&o(He),e&&o(Dt),e&&o(xe),e&&o(Lt),e&&o(Re),e&&o(Gt),e&&o(L),y(se),y(le),e&&o(Ot),e&&o(H),y(re),e&&o(Ft),e&&o(O),e&&o(It),y(ie,e),e&&o(Mt),e&&o(x),y(ne),e&&o(Nt),e&&o(b),e&&o(Bt),e&&o($),e&&o(Yt),y(ue,e),e&&o(Ut),e&&o(De),e&&o(Wt),y(ce,e),e&&o(Jt),e&&o(I),e&&o(zt),y(me,e),e&&o(Kt),e&&o(M),e&&o(Qt),y(ge,e),e&&o(Vt),e&&o(Le),e&&o(Xt),e&&o(N),e&&o(Zt),e&&o(B),e&&o(eo),y(ve,e),e&&o(to),e&&o(R),y(be),e&&o(oo),e&&o(w),e&&o(so),y($e,e),e&&o(ao),e&&o(j),e&&o(lo),y(Ee,e),e&&o(ro),e&&o(U),e&&o(io),y(ke,e),e&&o(no),e&&o(S),y(je),e&&o(ho),e&&o(Ye),e&&o(po),y(Pe,e),e&&o(fo),e&&o(Ue)}}}const sr={local:"upload-files-to-the-hub",sections:[{local:"push-without-git-commands",title:"Push without Git commands"},{local:"push-files-in-a-single-step",title:"Push files in a single step"},{local:"pull-before-pushing-to-a-repository",title:"Pull before pushing to a repository"},{local:"push-large-files-with-git-lfs",title:"Push large files with Git LFS"}],title:"Upload files to the Hub"};function ar(Ba){return tr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nr extends Kl{constructor(P){super();Ql(this,P,ar,or,Vl,{})}}export{nr as default,sr as metadata};
