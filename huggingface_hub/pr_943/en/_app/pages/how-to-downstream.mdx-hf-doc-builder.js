import{S as Zn,i as el,s as al,e as l,k as d,w as _,t,M as ol,c as s,d as o,m as p,a as r,x as g,h as n,b as f,P as Xn,G as a,g as h,y as w,L as tl,q as m,o as v,B as b,v as nl}from"../chunks/vendor-hf-doc-builder.js";import{I as lo}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as O}from"../chunks/CodeBlock-hf-doc-builder.js";function ll(zt){let C,_a,S,R,Ie,z,so,Re,ro,ga,M,io,Me,ho,fo,wa,k,Be,po,co,Fe,uo,_o,Ge,go,ma,H,B,We,K,wo,Je,mo,va,j,vo,Ye,bo,yo,pe,$o,Eo,ba,Q,ya,T,ce,Kt,xo,ue,Qt,$a,_e,ko,Ea,X,xa,ge,jo,ka,Z,ja,q,qo,Ve,Do,Po,ze,Ao,Oo,qa,ee,Da,L,F,Ke,ae,Co,Qe,So,Pa,E,we,Ho,To,me,Lo,No,ve,Uo,Io,Aa,D,Ro,be,Mo,Bo,ye,Fo,Go,Oa,oe,Ca,x,$e,Wo,Jo,Ee,Yo,Vo,xe,zo,Ko,Sa,te,Ha,N,G,Xe,ne,Qo,Ze,Xo,Ta,U,ke,Zo,et,je,at,ot,La,qe,tt,Na,le,Ua,I,De,nt,lt,ea,st,rt,Ia,se,Ra,P,it,Pe,ht,ft,Ae,dt,pt,Ma,c,ct,Oe,ut,_t,aa,gt,wt,oa,mt,vt,ta,bt,yt,na,$t,Et,Ba,W,xt,re,la,kt,jt,Fa,J,qt,sa,Dt,Pt,Ga,ie,Wa,y,At,ra,Ot,Ct,ia,St,Ht,ha,Tt,Lt,Ja,he,Ya,Y,Nt,Ce,Ut,It,Va,u,Rt,fa,Mt,Bt,da,Ft,Gt,pa,Wt,Jt,Se,Yt,Vt,za;return z=new lo({}),K=new lo({}),Q=new O({props:{code:`from huggingface_hub import hf_hub_url
hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/main/config.json&#x27;</span>`}}),X=new O({props:{code:`hf_hub_url(repo_id="lysandre/arxiv-nlp", 
           filename="config.json", 
           revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, 
<span class="hljs-meta">... </span>           filename=<span class="hljs-string">&quot;config.json&quot;</span>, 
<span class="hljs-meta">... </span>           revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/877b84a8f93f2d619faa2a6e514a32beef88ab0a/config.json&#x27;</span>`}}),Z=new O({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="main")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)'}}),ee=new O({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="v1.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;v1.0&quot;</span>)'}}),ae=new lo({}),oe=new O({props:{code:`from huggingface_hub import hf_hub_url, cached_download
config_file_url = hf_hub_url("lysandre/arxiv-nlp", filename="config.json")
cached_download(config_file_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url, cached_download
<span class="hljs-meta">&gt;&gt;&gt; </span>config_file_url = hf_hub_url(<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>cached_download(config_file_url)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/bc0e8cc2f8271b322304e8bb84b3b7580701d53a335ab2d75da19c249e2eeebb.066dae6fdb1e2b8cce60c35cc0f78ed1451d9b341c78de19f3ad469d10a8cbb1&#x27;</span>`}}),te=new O({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)`}}),ne=new lo({}),le=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/lysandre__arxiv-nlp.894a9adde21d9a3e3843e6d5aeaaf01875c7fade&#x27;</span>`}}),se=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", revision="main")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)`}}),ie=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", allow_regex="*.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, allow_regex=<span class="hljs-string">&quot;*.json&quot;</span>)`}}),he=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", ignore_regex=["*.msgpack", "*.h5"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, ignore_regex=[<span class="hljs-string">&quot;*.msgpack&quot;</span>, <span class="hljs-string">&quot;*.h5&quot;</span>])`}}),{c(){C=l("meta"),_a=d(),S=l("h1"),R=l("a"),Ie=l("span"),_(z.$$.fragment),so=d(),Re=l("span"),ro=t("Download files from the Hub"),ga=d(),M=l("p"),io=t("The "),Me=l("code"),ho=t("huggingface_hub"),fo=t(` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),wa=d(),k=l("ul"),Be=l("li"),po=t("Specify a file to download from the Hub."),co=d(),Fe=l("li"),uo=t("Download and cache a file on your disk."),_o=d(),Ge=l("li"),go=t("Download all the files in a repository."),ma=d(),H=l("h2"),B=l("a"),We=l("span"),_(K.$$.fragment),wo=d(),Je=l("span"),mo=t("Choose a file to download"),va=d(),j=l("p"),vo=t("Use the "),Ye=l("code"),bo=t("filename"),yo=t(" parameter in the "),pe=l("a"),$o=t("hf_hub_url()"),Eo=t(` function to retrieve the URL of a
specific file to download:`),ba=d(),_(Q.$$.fragment),ya=d(),T=l("div"),ce=l("img"),xo=d(),ue=l("img"),$a=d(),_e=l("p"),ko=t(`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),Ea=d(),_(X.$$.fragment),xa=d(),ge=l("p"),jo=t("To specify a file revision with the branch name:"),ka=d(),_(Z.$$.fragment),ja=d(),q=l("p"),qo=t("To specify a file revision with a tag identifier. For example, if you want "),Ve=l("code"),Do=t("v1.0"),Po=t(` of the
`),ze=l("code"),Ao=t("config.json"),Oo=t(" file:"),qa=d(),_(ee.$$.fragment),Da=d(),L=l("h2"),F=l("a"),Ke=l("span"),_(ae.$$.fragment),Co=d(),Qe=l("span"),So=t("Download and store a file"),Pa=d(),E=l("p"),we=l("a"),Ho=t("cached_download()"),To=t(` is used to download and cache a file on your local disk. Once a file
is stored in your cache, you don\u2019t have to redownload it the next time you use it.
`),me=l("a"),Lo=t("cached_download()"),No=t(` is a hands-free solution for staying up to date with new file
versions. When a downloaded file is updated in the remote repository,
`),ve=l("a"),Uo=t("cached_download()"),Io=t(" will automatically download and store it."),Aa=d(),D=l("p"),Ro=t("Begin by retrieving the file URL with "),be=l("a"),Mo=t("hf_hub_url()"),Bo=t(`, and then pass the specified URL to
`),ye=l("a"),Fo=t("cached_download()"),Go=t(" to download the file:"),Oa=d(),_(oe.$$.fragment),Ca=d(),x=l("p"),$e=l("a"),Wo=t("hf_hub_url()"),Jo=t(" and "),Ee=l("a"),Yo=t("cached_download()"),Vo=t(` work hand-in-hand to download a file. This is
such a standard workflow that `),xe=l("a"),zo=t("hf_hub_download()"),Ko=t(` is a wrapper that calls both of these
functions.`),Sa=d(),_(te.$$.fragment),Ha=d(),N=l("h2"),G=l("a"),Xe=l("span"),_(ne.$$.fragment),Qo=d(),Ze=l("span"),Xo=t("Download an entire repository"),Ta=d(),U=l("p"),ke=l("a"),Zo=t("snapshot_download()"),et=t(` downloads an entire repository at a given revision. Like
`),je=l("a"),at=t("cached_download()"),ot=t(`, all downloaded files are cached on your local disk. However, even
if only a single file is updated, the entire repository will be redownloaded.`),La=d(),qe=l("p"),tt=t("Download a whole repository as shown in the following:"),Na=d(),_(le.$$.fragment),Ua=d(),I=l("p"),De=l("a"),nt=t("snapshot_download()"),lt=t(` downloads the latest revision by default. If you want a specific
repository revision, use the `),ea=l("code"),st=t("revision"),rt=t(" parameter:"),Ia=d(),_(se.$$.fragment),Ra=d(),P=l("p"),it=t("In general, it is usually better to download files with "),Pe=l("a"),ht=t("hf_hub_download()"),ft=t(` - if you
already know the file name - to avoid redownloading an entire repository.
`),Ae=l("a"),dt=t("snapshot_download()"),pt=t(" is helpful when you are unaware of which files to download."),Ma=d(),c=l("p"),ct=t(`However, you don\u2019t always want to download the contents of an entire repository with
`),Oe=l("a"),ut=t("snapshot_download()"),_t=t(`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),aa=l("code"),gt=t("allow_regex"),wt=t(" and "),oa=l("code"),mt=t("ignore_regex"),vt=t(`. Use the
`),ta=l("code"),bt=t("allow_regex"),yt=t(" and "),na=l("code"),$t=t("ignore_regex"),Et=t(` arguments to specify which files to download. These
parameters accept either a single regex or a list of regexes.`),Ba=d(),W=l("p"),xt=t(`The regex matching is based on
`),re=l("a"),la=l("code"),kt=t("fnmatch"),jt=t(`, which provides support for
Unix shell-style wildcards.`),Fa=d(),J=l("p"),qt=t("For example, you can use "),sa=l("code"),Dt=t("allow_regex"),Pt=t(" to only download JSON configuration files:"),Ga=d(),_(ie.$$.fragment),Wa=d(),y=l("p"),At=t("On the other hand, "),ra=l("code"),Ot=t("ignore_regex"),Ct=t(` can exclude certain files from being downloaded. The
following example ignores the `),ia=l("code"),St=t(".msgpack"),Ht=t(" and "),ha=l("code"),Tt=t(".h5"),Lt=t(" file extensions:"),Ja=d(),_(he.$$.fragment),Ya=d(),Y=l("p"),Nt=t(`Passing a regex can be especially useful when repositories contain files that are never
expected to be downloaded by `),Ce=l("a"),Ut=t("snapshot_download()"),It=t("."),Va=d(),u=l("p"),Rt=t("Note that passing "),fa=l("code"),Mt=t("allow_regex"),Bt=t(" or "),da=l("code"),Ft=t("ignore_regex"),Gt=t(" does "),pa=l("strong"),Wt=t("not"),Jt=t(` prevent
`),Se=l("a"),Yt=t("snapshot_download()"),Vt=t(` from redownloading the entire model repository if an ignored file
is changed.`),this.h()},l(e){const i=ol('[data-svelte="svelte-1phssyn"]',document.head);C=s(i,"META",{name:!0,content:!0}),i.forEach(o),_a=p(e),S=s(e,"H1",{class:!0});var Ka=r(S);R=s(Ka,"A",{id:!0,class:!0,href:!0});var Xt=r(R);Ie=s(Xt,"SPAN",{});var Zt=r(Ie);g(z.$$.fragment,Zt),Zt.forEach(o),Xt.forEach(o),so=p(Ka),Re=s(Ka,"SPAN",{});var en=r(Re);ro=n(en,"Download files from the Hub"),en.forEach(o),Ka.forEach(o),ga=p(e),M=s(e,"P",{});var Qa=r(M);io=n(Qa,"The "),Me=s(Qa,"CODE",{});var an=r(Me);ho=n(an,"huggingface_hub"),an.forEach(o),fo=n(Qa,` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),Qa.forEach(o),wa=p(e),k=s(e,"UL",{});var He=r(k);Be=s(He,"LI",{});var on=r(Be);po=n(on,"Specify a file to download from the Hub."),on.forEach(o),co=p(He),Fe=s(He,"LI",{});var tn=r(Fe);uo=n(tn,"Download and cache a file on your disk."),tn.forEach(o),_o=p(He),Ge=s(He,"LI",{});var nn=r(Ge);go=n(nn,"Download all the files in a repository."),nn.forEach(o),He.forEach(o),ma=p(e),H=s(e,"H2",{class:!0});var Xa=r(H);B=s(Xa,"A",{id:!0,class:!0,href:!0});var ln=r(B);We=s(ln,"SPAN",{});var sn=r(We);g(K.$$.fragment,sn),sn.forEach(o),ln.forEach(o),wo=p(Xa),Je=s(Xa,"SPAN",{});var rn=r(Je);mo=n(rn,"Choose a file to download"),rn.forEach(o),Xa.forEach(o),va=p(e),j=s(e,"P",{});var Te=r(j);vo=n(Te,"Use the "),Ye=s(Te,"CODE",{});var hn=r(Ye);bo=n(hn,"filename"),hn.forEach(o),yo=n(Te," parameter in the "),pe=s(Te,"A",{href:!0});var fn=r(pe);$o=n(fn,"hf_hub_url()"),fn.forEach(o),Eo=n(Te,` function to retrieve the URL of a
specific file to download:`),Te.forEach(o),ba=p(e),g(Q.$$.fragment,e),ya=p(e),T=s(e,"DIV",{class:!0});var Za=r(T);ce=s(Za,"IMG",{class:!0,src:!0}),xo=p(Za),ue=s(Za,"IMG",{class:!0,src:!0}),Za.forEach(o),$a=p(e),_e=s(e,"P",{});var dn=r(_e);ko=n(dn,`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),dn.forEach(o),Ea=p(e),g(X.$$.fragment,e),xa=p(e),ge=s(e,"P",{});var pn=r(ge);jo=n(pn,"To specify a file revision with the branch name:"),pn.forEach(o),ka=p(e),g(Z.$$.fragment,e),ja=p(e),q=s(e,"P",{});var Le=r(q);qo=n(Le,"To specify a file revision with a tag identifier. For example, if you want "),Ve=s(Le,"CODE",{});var cn=r(Ve);Do=n(cn,"v1.0"),cn.forEach(o),Po=n(Le,` of the
`),ze=s(Le,"CODE",{});var un=r(ze);Ao=n(un,"config.json"),un.forEach(o),Oo=n(Le," file:"),Le.forEach(o),qa=p(e),g(ee.$$.fragment,e),Da=p(e),L=s(e,"H2",{class:!0});var eo=r(L);F=s(eo,"A",{id:!0,class:!0,href:!0});var _n=r(F);Ke=s(_n,"SPAN",{});var gn=r(Ke);g(ae.$$.fragment,gn),gn.forEach(o),_n.forEach(o),Co=p(eo),Qe=s(eo,"SPAN",{});var wn=r(Qe);So=n(wn,"Download and store a file"),wn.forEach(o),eo.forEach(o),Pa=p(e),E=s(e,"P",{});var fe=r(E);we=s(fe,"A",{href:!0});var mn=r(we);Ho=n(mn,"cached_download()"),mn.forEach(o),To=n(fe,` is used to download and cache a file on your local disk. Once a file
is stored in your cache, you don\u2019t have to redownload it the next time you use it.
`),me=s(fe,"A",{href:!0});var vn=r(me);Lo=n(vn,"cached_download()"),vn.forEach(o),No=n(fe,` is a hands-free solution for staying up to date with new file
versions. When a downloaded file is updated in the remote repository,
`),ve=s(fe,"A",{href:!0});var bn=r(ve);Uo=n(bn,"cached_download()"),bn.forEach(o),Io=n(fe," will automatically download and store it."),fe.forEach(o),Aa=p(e),D=s(e,"P",{});var Ne=r(D);Ro=n(Ne,"Begin by retrieving the file URL with "),be=s(Ne,"A",{href:!0});var yn=r(be);Mo=n(yn,"hf_hub_url()"),yn.forEach(o),Bo=n(Ne,`, and then pass the specified URL to
`),ye=s(Ne,"A",{href:!0});var $n=r(ye);Fo=n($n,"cached_download()"),$n.forEach(o),Go=n(Ne," to download the file:"),Ne.forEach(o),Oa=p(e),g(oe.$$.fragment,e),Ca=p(e),x=s(e,"P",{});var de=r(x);$e=s(de,"A",{href:!0});var En=r($e);Wo=n(En,"hf_hub_url()"),En.forEach(o),Jo=n(de," and "),Ee=s(de,"A",{href:!0});var xn=r(Ee);Yo=n(xn,"cached_download()"),xn.forEach(o),Vo=n(de,` work hand-in-hand to download a file. This is
such a standard workflow that `),xe=s(de,"A",{href:!0});var kn=r(xe);zo=n(kn,"hf_hub_download()"),kn.forEach(o),Ko=n(de,` is a wrapper that calls both of these
functions.`),de.forEach(o),Sa=p(e),g(te.$$.fragment,e),Ha=p(e),N=s(e,"H2",{class:!0});var ao=r(N);G=s(ao,"A",{id:!0,class:!0,href:!0});var jn=r(G);Xe=s(jn,"SPAN",{});var qn=r(Xe);g(ne.$$.fragment,qn),qn.forEach(o),jn.forEach(o),Qo=p(ao),Ze=s(ao,"SPAN",{});var Dn=r(Ze);Xo=n(Dn,"Download an entire repository"),Dn.forEach(o),ao.forEach(o),Ta=p(e),U=s(e,"P",{});var ca=r(U);ke=s(ca,"A",{href:!0});var Pn=r(ke);Zo=n(Pn,"snapshot_download()"),Pn.forEach(o),et=n(ca,` downloads an entire repository at a given revision. Like
`),je=s(ca,"A",{href:!0});var An=r(je);at=n(An,"cached_download()"),An.forEach(o),ot=n(ca,`, all downloaded files are cached on your local disk. However, even
if only a single file is updated, the entire repository will be redownloaded.`),ca.forEach(o),La=p(e),qe=s(e,"P",{});var On=r(qe);tt=n(On,"Download a whole repository as shown in the following:"),On.forEach(o),Na=p(e),g(le.$$.fragment,e),Ua=p(e),I=s(e,"P",{});var ua=r(I);De=s(ua,"A",{href:!0});var Cn=r(De);nt=n(Cn,"snapshot_download()"),Cn.forEach(o),lt=n(ua,` downloads the latest revision by default. If you want a specific
repository revision, use the `),ea=s(ua,"CODE",{});var Sn=r(ea);st=n(Sn,"revision"),Sn.forEach(o),rt=n(ua," parameter:"),ua.forEach(o),Ia=p(e),g(se.$$.fragment,e),Ra=p(e),P=s(e,"P",{});var Ue=r(P);it=n(Ue,"In general, it is usually better to download files with "),Pe=s(Ue,"A",{href:!0});var Hn=r(Pe);ht=n(Hn,"hf_hub_download()"),Hn.forEach(o),ft=n(Ue,` - if you
already know the file name - to avoid redownloading an entire repository.
`),Ae=s(Ue,"A",{href:!0});var Tn=r(Ae);dt=n(Tn,"snapshot_download()"),Tn.forEach(o),pt=n(Ue," is helpful when you are unaware of which files to download."),Ue.forEach(o),Ma=p(e),c=s(e,"P",{});var $=r(c);ct=n($,`However, you don\u2019t always want to download the contents of an entire repository with
`),Oe=s($,"A",{href:!0});var Ln=r(Oe);ut=n(Ln,"snapshot_download()"),Ln.forEach(o),_t=n($,`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),aa=s($,"CODE",{});var Nn=r(aa);gt=n(Nn,"allow_regex"),Nn.forEach(o),wt=n($," and "),oa=s($,"CODE",{});var Un=r(oa);mt=n(Un,"ignore_regex"),Un.forEach(o),vt=n($,`. Use the
`),ta=s($,"CODE",{});var In=r(ta);bt=n(In,"allow_regex"),In.forEach(o),yt=n($," and "),na=s($,"CODE",{});var Rn=r(na);$t=n(Rn,"ignore_regex"),Rn.forEach(o),Et=n($,` arguments to specify which files to download. These
parameters accept either a single regex or a list of regexes.`),$.forEach(o),Ba=p(e),W=s(e,"P",{});var oo=r(W);xt=n(oo,`The regex matching is based on
`),re=s(oo,"A",{href:!0,rel:!0});var Mn=r(re);la=s(Mn,"CODE",{});var Bn=r(la);kt=n(Bn,"fnmatch"),Bn.forEach(o),Mn.forEach(o),jt=n(oo,`, which provides support for
Unix shell-style wildcards.`),oo.forEach(o),Fa=p(e),J=s(e,"P",{});var to=r(J);qt=n(to,"For example, you can use "),sa=s(to,"CODE",{});var Fn=r(sa);Dt=n(Fn,"allow_regex"),Fn.forEach(o),Pt=n(to," to only download JSON configuration files:"),to.forEach(o),Ga=p(e),g(ie.$$.fragment,e),Wa=p(e),y=s(e,"P",{});var V=r(y);At=n(V,"On the other hand, "),ra=s(V,"CODE",{});var Gn=r(ra);Ot=n(Gn,"ignore_regex"),Gn.forEach(o),Ct=n(V,` can exclude certain files from being downloaded. The
following example ignores the `),ia=s(V,"CODE",{});var Wn=r(ia);St=n(Wn,".msgpack"),Wn.forEach(o),Ht=n(V," and "),ha=s(V,"CODE",{});var Jn=r(ha);Tt=n(Jn,".h5"),Jn.forEach(o),Lt=n(V," file extensions:"),V.forEach(o),Ja=p(e),g(he.$$.fragment,e),Ya=p(e),Y=s(e,"P",{});var no=r(Y);Nt=n(no,`Passing a regex can be especially useful when repositories contain files that are never
expected to be downloaded by `),Ce=s(no,"A",{href:!0});var Yn=r(Ce);Ut=n(Yn,"snapshot_download()"),Yn.forEach(o),It=n(no,"."),no.forEach(o),Va=p(e),u=s(e,"P",{});var A=r(u);Rt=n(A,"Note that passing "),fa=s(A,"CODE",{});var Vn=r(fa);Mt=n(Vn,"allow_regex"),Vn.forEach(o),Bt=n(A," or "),da=s(A,"CODE",{});var zn=r(da);Ft=n(zn,"ignore_regex"),zn.forEach(o),Gt=n(A," does "),pa=s(A,"STRONG",{});var Kn=r(pa);Wt=n(Kn,"not"),Kn.forEach(o),Jt=n(A,` prevent
`),Se=s(A,"A",{href:!0});var Qn=r(Se);Yt=n(Qn,"snapshot_download()"),Qn.forEach(o),Vt=n(A,` from redownloading the entire model repository if an ignored file
is changed.`),A.forEach(o),this.h()},h(){f(C,"name","hf:doc:metadata"),f(C,"content",JSON.stringify(sl)),f(R,"id","download-files-from-the-hub"),f(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(R,"href","#download-files-from-the-hub"),f(S,"class","relative group"),f(B,"id","choose-a-file-to-download"),f(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(B,"href","#choose-a-file-to-download"),f(H,"class","relative group"),f(pe,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.hf_hub_url"),f(ce,"class","block dark:hidden"),Xn(ce.src,Kt="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo.png")||f(ce,"src",Kt),f(ue,"class","hidden dark:block"),Xn(ue.src,Qt="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo-dark.png")||f(ue,"src",Qt),f(T,"class","flex justify-center"),f(F,"id","download-and-store-a-file"),f(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(F,"href","#download-and-store-a-file"),f(L,"class","relative group"),f(we,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.cached_download"),f(me,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.cached_download"),f(ve,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.cached_download"),f(be,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.hf_hub_url"),f(ye,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.cached_download"),f($e,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.hf_hub_url"),f(Ee,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.cached_download"),f(xe,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.hf_hub_download"),f(G,"id","download-an-entire-repository"),f(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(G,"href","#download-an-entire-repository"),f(N,"class","relative group"),f(ke,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(je,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.cached_download"),f(De,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(Pe,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.hf_hub_download"),f(Ae,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(Oe,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(re,"href","https://docs.python.org/3/library/fnmatch.html"),f(re,"rel","nofollow"),f(Ce,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(Se,"href","/docs/huggingface_hub/pr_943/en/package_reference/file_download#huggingface_hub.snapshot_download")},m(e,i){a(document.head,C),h(e,_a,i),h(e,S,i),a(S,R),a(R,Ie),w(z,Ie,null),a(S,so),a(S,Re),a(Re,ro),h(e,ga,i),h(e,M,i),a(M,io),a(M,Me),a(Me,ho),a(M,fo),h(e,wa,i),h(e,k,i),a(k,Be),a(Be,po),a(k,co),a(k,Fe),a(Fe,uo),a(k,_o),a(k,Ge),a(Ge,go),h(e,ma,i),h(e,H,i),a(H,B),a(B,We),w(K,We,null),a(H,wo),a(H,Je),a(Je,mo),h(e,va,i),h(e,j,i),a(j,vo),a(j,Ye),a(Ye,bo),a(j,yo),a(j,pe),a(pe,$o),a(j,Eo),h(e,ba,i),w(Q,e,i),h(e,ya,i),h(e,T,i),a(T,ce),a(T,xo),a(T,ue),h(e,$a,i),h(e,_e,i),a(_e,ko),h(e,Ea,i),w(X,e,i),h(e,xa,i),h(e,ge,i),a(ge,jo),h(e,ka,i),w(Z,e,i),h(e,ja,i),h(e,q,i),a(q,qo),a(q,Ve),a(Ve,Do),a(q,Po),a(q,ze),a(ze,Ao),a(q,Oo),h(e,qa,i),w(ee,e,i),h(e,Da,i),h(e,L,i),a(L,F),a(F,Ke),w(ae,Ke,null),a(L,Co),a(L,Qe),a(Qe,So),h(e,Pa,i),h(e,E,i),a(E,we),a(we,Ho),a(E,To),a(E,me),a(me,Lo),a(E,No),a(E,ve),a(ve,Uo),a(E,Io),h(e,Aa,i),h(e,D,i),a(D,Ro),a(D,be),a(be,Mo),a(D,Bo),a(D,ye),a(ye,Fo),a(D,Go),h(e,Oa,i),w(oe,e,i),h(e,Ca,i),h(e,x,i),a(x,$e),a($e,Wo),a(x,Jo),a(x,Ee),a(Ee,Yo),a(x,Vo),a(x,xe),a(xe,zo),a(x,Ko),h(e,Sa,i),w(te,e,i),h(e,Ha,i),h(e,N,i),a(N,G),a(G,Xe),w(ne,Xe,null),a(N,Qo),a(N,Ze),a(Ze,Xo),h(e,Ta,i),h(e,U,i),a(U,ke),a(ke,Zo),a(U,et),a(U,je),a(je,at),a(U,ot),h(e,La,i),h(e,qe,i),a(qe,tt),h(e,Na,i),w(le,e,i),h(e,Ua,i),h(e,I,i),a(I,De),a(De,nt),a(I,lt),a(I,ea),a(ea,st),a(I,rt),h(e,Ia,i),w(se,e,i),h(e,Ra,i),h(e,P,i),a(P,it),a(P,Pe),a(Pe,ht),a(P,ft),a(P,Ae),a(Ae,dt),a(P,pt),h(e,Ma,i),h(e,c,i),a(c,ct),a(c,Oe),a(Oe,ut),a(c,_t),a(c,aa),a(aa,gt),a(c,wt),a(c,oa),a(oa,mt),a(c,vt),a(c,ta),a(ta,bt),a(c,yt),a(c,na),a(na,$t),a(c,Et),h(e,Ba,i),h(e,W,i),a(W,xt),a(W,re),a(re,la),a(la,kt),a(W,jt),h(e,Fa,i),h(e,J,i),a(J,qt),a(J,sa),a(sa,Dt),a(J,Pt),h(e,Ga,i),w(ie,e,i),h(e,Wa,i),h(e,y,i),a(y,At),a(y,ra),a(ra,Ot),a(y,Ct),a(y,ia),a(ia,St),a(y,Ht),a(y,ha),a(ha,Tt),a(y,Lt),h(e,Ja,i),w(he,e,i),h(e,Ya,i),h(e,Y,i),a(Y,Nt),a(Y,Ce),a(Ce,Ut),a(Y,It),h(e,Va,i),h(e,u,i),a(u,Rt),a(u,fa),a(fa,Mt),a(u,Bt),a(u,da),a(da,Ft),a(u,Gt),a(u,pa),a(pa,Wt),a(u,Jt),a(u,Se),a(Se,Yt),a(u,Vt),za=!0},p:tl,i(e){za||(m(z.$$.fragment,e),m(K.$$.fragment,e),m(Q.$$.fragment,e),m(X.$$.fragment,e),m(Z.$$.fragment,e),m(ee.$$.fragment,e),m(ae.$$.fragment,e),m(oe.$$.fragment,e),m(te.$$.fragment,e),m(ne.$$.fragment,e),m(le.$$.fragment,e),m(se.$$.fragment,e),m(ie.$$.fragment,e),m(he.$$.fragment,e),za=!0)},o(e){v(z.$$.fragment,e),v(K.$$.fragment,e),v(Q.$$.fragment,e),v(X.$$.fragment,e),v(Z.$$.fragment,e),v(ee.$$.fragment,e),v(ae.$$.fragment,e),v(oe.$$.fragment,e),v(te.$$.fragment,e),v(ne.$$.fragment,e),v(le.$$.fragment,e),v(se.$$.fragment,e),v(ie.$$.fragment,e),v(he.$$.fragment,e),za=!1},d(e){o(C),e&&o(_a),e&&o(S),b(z),e&&o(ga),e&&o(M),e&&o(wa),e&&o(k),e&&o(ma),e&&o(H),b(K),e&&o(va),e&&o(j),e&&o(ba),b(Q,e),e&&o(ya),e&&o(T),e&&o($a),e&&o(_e),e&&o(Ea),b(X,e),e&&o(xa),e&&o(ge),e&&o(ka),b(Z,e),e&&o(ja),e&&o(q),e&&o(qa),b(ee,e),e&&o(Da),e&&o(L),b(ae),e&&o(Pa),e&&o(E),e&&o(Aa),e&&o(D),e&&o(Oa),b(oe,e),e&&o(Ca),e&&o(x),e&&o(Sa),b(te,e),e&&o(Ha),e&&o(N),b(ne),e&&o(Ta),e&&o(U),e&&o(La),e&&o(qe),e&&o(Na),b(le,e),e&&o(Ua),e&&o(I),e&&o(Ia),b(se,e),e&&o(Ra),e&&o(P),e&&o(Ma),e&&o(c),e&&o(Ba),e&&o(W),e&&o(Fa),e&&o(J),e&&o(Ga),b(ie,e),e&&o(Wa),e&&o(y),e&&o(Ja),b(he,e),e&&o(Ya),e&&o(Y),e&&o(Va),e&&o(u)}}}const sl={local:"download-files-from-the-hub",sections:[{local:"choose-a-file-to-download",title:"Choose a file to download"},{local:"download-and-store-a-file",title:"Download and store a file"},{local:"download-an-entire-repository",title:"Download an entire repository"}],title:"Download files from the Hub"};function rl(zt){return nl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dl extends Zn{constructor(C){super();el(this,C,rl,ll,al,{})}}export{dl as default,sl as metadata};
