import{S as Fi,i as Ni,s as Mi,e as a,k as p,w as u,t as s,M as Bi,c as l,d as o,m as f,a as i,x as m,h as r,b as c,G as t,g as h,y as d,L as Ui,q as g,o as _,B as y,v as Yi}from"../chunks/vendor-hf-doc-builder.js";import{I as no}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as j}from"../chunks/CodeBlock-hf-doc-builder.js";function Wi(vr){let C,ho,q,S,_t,oe,Pa,yt,Ca,po,G,qa,bt,xa,Oa,fo,v,ae,La,Ge,Ia,Ta,Da,se,Sa,le,Ga,Ra,Fa,re,Na,vt,Ma,Ba,Ua,ie,Ya,Re,Wa,Ja,co,Fe,za,uo,R,ne,wt,Ka,Qa,he,Va,pe,fe,Xa,Et,Za,es,ts,ce,mo,x,F,$t,ue,os,me,as,kt,ss,ls,go,A,jt,rs,is,Ne,ns,hs,Me,ps,fs,_o,de,yo,O,Be,cs,us,Ue,ms,ds,bo,N,ge,At,gs,_s,_e,Ye,Ht,ys,bs,vs,We,Pt,ws,Es,$s,M,Ct,ks,js,qt,As,Hs,vo,B,Ps,Je,Cs,qs,wo,w,ze,Ke,xs,Os,Ls,Qe,Ve,Is,Ts,Ds,Xe,Ze,Ss,Gs,Rs,et,xt,Fs,Ns,Eo,H,Ms,Ot,Bs,Us,Lt,Ys,Ws,$o,L,U,It,ye,Js,Tt,zs,ko,tt,Ks,jo,ot,Qs,Ao,be,Ho,at,Vs,Po,I,Y,Dt,ve,Xs,St,Zs,Co,st,el,qo,E,tl,Gt,ol,al,Rt,sl,ll,Ft,rl,il,xo,$,we,nl,Nt,hl,pl,fl,Ee,cl,Mt,ul,ml,dl,Bt,gl,_l,$e,yl,Ut,bl,vl,Oo,ke,Lo,lt,wl,Io,je,To,W,El,Yt,$l,kl,Do,Ae,So,J,jl,Wt,Al,Hl,Go,He,Ro,rt,Pl,Fo,z,Jt,Pe,zt,Cl,ql,Kt,xl,Ol,T,Ce,Qt,Ll,Il,Vt,Tl,Dl,qe,Xt,Sl,Gl,Zt,Rl,Fl,xe,eo,Nl,Ml,to,Bl,No,K,Ul,oo,Yl,Wl,Mo,Oe,Bo,D,Q,ao,Le,Jl,so,zl,Uo,b,Kl,it,Ql,Vl,nt,Xl,Zl,lo,er,tr,ht,or,ar,pt,sr,lr,Yo,Ie,Wo,P,rr,ft,ir,nr,ct,hr,pr,Jo,Te,zo,V,fr,ut,cr,ur,Ko,De,Qo;return oe=new no({}),he=new j({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),ce=new j({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),ue=new no({}),de=new j({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]
api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>)`}}),ye=new no({}),be=new j({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),ve=new no({}),ke=new j({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),je=new j({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Ae=new j({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),He=new j({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),Oe=new j({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),Le=new no({}),Ie=new j({props:{code:`from huggingface_hub import Repository
repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),Te=new j({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),De=new j({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),{c(){C=a("meta"),ho=p(),q=a("h1"),S=a("a"),_t=a("span"),u(oe.$$.fragment),Pa=p(),yt=a("span"),Ca=s("Upload files to the Hub"),po=p(),G=a("p"),qa=s("Sharing your files and work is a very important aspect of the Hub. The "),bt=a("code"),xa=s("huggingface_hub"),Oa=s(" uses a Git-based workflow to upload files to the Hub, but in most cases you don\u2019t need git or git-lfs installed locally. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),fo=p(),v=a("ul"),ae=a("li"),La=s("Push files directly from this library\u2019s "),Ge=a("a"),Ia=s("HfApi"),Ta=s(", without even needing Git or git-lfs installed."),Da=p(),se=a("li"),Sa=s("Push files from the command line using git and "),le=a("a"),Ga=s("Git LFS"),Ra=s("."),Fa=p(),re=a("li"),Na=s("Push files with a "),vt=a("code"),Ma=s("commit"),Ba=s(" context manager."),Ua=p(),ie=a("li"),Ya=s("Push files with the "),Re=a("a"),Wa=s("push_to_hub()"),Ja=s(" function."),co=p(),Fe=a("p"),za=s("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),uo=p(),R=a("ol"),ne=a("li"),wt=a("p"),Ka=s("Log in to your Hugging Face account with the following command:"),Qa=p(),u(he.$$.fragment),Va=p(),pe=a("li"),fe=a("p"),Xa=s("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Et=a("code"),Za=s("notebook_login()"),es=s(":"),ts=p(),u(ce.$$.fragment),mo=p(),x=a("h2"),F=a("a"),$t=a("span"),u(ue.$$.fragment),os=p(),me=a("span"),as=s("Push files directly from this library's [HfApi](/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi) with the "),kt=a("code"),ss=s("create_commit"),ls=s(" API"),go=p(),A=a("p"),jt=a("code"),rs=s("huggingface_hub"),is=s(" offers a way to upload files to the Hub without Git installed on your system with the "),Ne=a("a"),ns=s("create_commit()"),hs=s(" method of "),Me=a("a"),ps=s("HfApi"),fs=s(`.
For example, if you want to upload two files and delete another file in a Hub repo, in a single commit:`),_o=p(),u(de.$$.fragment),yo=p(),O=a("p"),Be=a("a"),cs=s("create_commit()"),us=s(` uses the HTTP protocol to upload files to the Hub. It automatically takes care of uploading large files and binary files with the Git LFS protocol.
There are two operations supported by the `),Ue=a("a"),ms=s("create_commit()"),ds=s(" method:"),bo=p(),N=a("ol"),ge=a("li"),At=a("code"),gs=s("CommitOperationAdd"),_s=s(" to upload a file to the Hub. If the file already exists, its content will be overwritten. It takes two arguments:"),_e=a("ul"),Ye=a("li"),Ht=a("code"),ys=s("path_in_repo"),bs=s(": the path in the repository where the file should be uploaded"),vs=p(),We=a("li"),Pt=a("code"),ws=s("path_or_fileobj"),Es=s(": either a path to a file on your filesystem, or a file-like object. The content of the file to upload to the Hub."),$s=p(),M=a("li"),Ct=a("code"),ks=s("CommitOperationDelete"),js=s(" to remove a file from a repository. It takes "),qt=a("code"),As=s("path_in_repo"),Hs=s(" as an argument."),vo=p(),B=a("p"),Ps=s("Instead of "),Je=a("a"),Cs=s("create_commit()"),qs=s(", you can also use the following convenience methods:"),wo=p(),w=a("ul"),ze=a("li"),Ke=a("a"),xs=s("upload_file()"),Os=s(" to upload a single file to a repo on the Hub"),Ls=p(),Qe=a("li"),Ve=a("a"),Is=s("upload_folder()"),Ts=s(" to upload a local directory to a repo on the Hub"),Ds=p(),Xe=a("li"),Ze=a("a"),Ss=s("delete_file()"),Gs=s(" to delete a single file from a repo on the Hub"),Rs=p(),et=a("li"),xt=a("code"),Fs=s("metadata_update()"),Ns=s(" to update a repo\u2019s metadata"),Eo=p(),H=a("p"),Ms=s("All these methods use the "),Ot=a("code"),Bs=s("create_commit"),Us=s(` API under the hood.
For a more detailed description, visit the `),Lt=a("code"),Ys=s("hf_api()"),Ws=s(" documentation page."),$o=p(),L=a("h2"),U=a("a"),It=a("span"),u(ye.$$.fragment),Js=p(),Tt=a("span"),zs=s("Push from Git and Git LFS on the command line"),ko=p(),tt=a("p"),Ks=s("You can always also use Git and Git LFS on the command line to push your changes to your repo."),jo=p(),ot=a("p"),Qs=s("Note that for huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),Ao=p(),u(be.$$.fragment),Ho=p(),at=a("p"),Vs=s("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),Po=p(),I=a("h2"),Y=a("a"),Dt=a("span"),u(ve.$$.fragment),Xs=p(),St=a("span"),Zs=s("Push with a commit context manager"),Co=p(),st=a("p"),el=s("This is another option to programmatically push changes to your repo, but this one uses git and git-lfs under the hood (so it requires to have them installed locally)."),qo=p(),E=a("p"),tl=s("The "),Gt=a("code"),ol=s("commit"),al=s(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Rt=a("code"),sl=s("git-lfs"),ll=s(" automatically tracks any file larger than 10MB. In the following example, the "),Ft=a("code"),rl=s("commit"),il=s(" context manager:"),xo=p(),$=a("ol"),we=a("li"),nl=s("Pulls from the "),Nt=a("code"),hl=s("text-files"),pl=s(" repository."),fl=p(),Ee=a("li"),cl=s("Adds a change made to "),Mt=a("code"),ul=s("file.txt"),ml=s("."),dl=p(),Bt=a("li"),gl=s("Commits the change."),_l=p(),$e=a("li"),yl=s("Pushes the change to the "),Ut=a("code"),bl=s("text-files"),vl=s(" repository."),Oo=p(),u(ke.$$.fragment),Lo=p(),lt=a("p"),wl=s("Here is another example of how to save and upload a file to a repository:"),Io=p(),u(je.$$.fragment),To=p(),W=a("p"),El=s("Set "),Yt=a("code"),$l=s("blocking=False"),kl=s(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Do=p(),u(Ae.$$.fragment),So=p(),J=a("p"),jl=s("You can check the status of your push with the "),Wt=a("code"),Al=s("command_queue"),Hl=s(" method:"),Go=p(),u(He.$$.fragment),Ro=p(),rt=a("p"),Pl=s("Refer to the table below for the possible statuses:"),Fo=p(),z=a("table"),Jt=a("thead"),Pe=a("tr"),zt=a("th"),Cl=s("Status"),ql=p(),Kt=a("th"),xl=s("Description"),Ol=p(),T=a("tbody"),Ce=a("tr"),Qt=a("td"),Ll=s("-1"),Il=p(),Vt=a("td"),Tl=s("The push is ongoing."),Dl=p(),qe=a("tr"),Xt=a("td"),Sl=s("0"),Gl=p(),Zt=a("td"),Rl=s("The push has completed successfully."),Fl=p(),xe=a("tr"),eo=a("td"),Nl=s("Non-zero"),Ml=p(),to=a("td"),Bl=s("An error has occurred."),No=p(),K=a("p"),Ul=s("When "),oo=a("code"),Yl=s("blocking=False"),Wl=s(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Mo=p(),u(Oe.$$.fragment),Bo=p(),D=a("h2"),Q=a("a"),ao=a("span"),u(Le.$$.fragment),Jl=p(),so=a("span"),zl=s("Repository.push_to_hub"),Uo=p(),b=a("p"),Kl=s("Finally, the "),it=a("a"),Ql=s("Repository"),Vl=s(" class also has a "),nt=a("a"),Xl=s("push_to_hub()"),Zl=s(" function to add files, make a commit, and push them to a repository. Unlike the "),lo=a("code"),er=s("commit"),tr=s(" context manager, "),ht=a("a"),or=s("push_to_hub()"),ar=s(" requires you to pull from a repository first, save the files, and then call "),pt=a("a"),sr=s("push_to_hub()"),lr=s("."),Yo=p(),u(Ie.$$.fragment),Wo=p(),P=a("p"),rr=s("However, if you aren\u2019t ready to push a file yet, you can still use "),ft=a("a"),ir=s("git_add()"),nr=s(" and "),ct=a("a"),hr=s("git_commit()"),pr=s(" to add and commit your file:"),Jo=p(),u(Te.$$.fragment),zo=p(),V=a("p"),fr=s("Once you\u2019re ready, you can push your file to your repository with "),ut=a("a"),cr=s("git_push()"),ur=s(":"),Ko=p(),u(De.$$.fragment),this.h()},l(e){const n=Bi('[data-svelte="svelte-1phssyn"]',document.head);C=l(n,"META",{name:!0,content:!0}),n.forEach(o),ho=f(e),q=l(e,"H1",{class:!0});var Vo=i(q);S=l(Vo,"A",{id:!0,class:!0,href:!0});var wr=i(S);_t=l(wr,"SPAN",{});var Er=i(_t);m(oe.$$.fragment,Er),Er.forEach(o),wr.forEach(o),Pa=f(Vo),yt=l(Vo,"SPAN",{});var $r=i(yt);Ca=r($r,"Upload files to the Hub"),$r.forEach(o),Vo.forEach(o),po=f(e),G=l(e,"P",{});var Xo=i(G);qa=r(Xo,"Sharing your files and work is a very important aspect of the Hub. The "),bt=l(Xo,"CODE",{});var kr=i(bt);xa=r(kr,"huggingface_hub"),kr.forEach(o),Oa=r(Xo," uses a Git-based workflow to upload files to the Hub, but in most cases you don\u2019t need git or git-lfs installed locally. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),Xo.forEach(o),fo=f(e),v=l(e,"UL",{});var X=i(v);ae=l(X,"LI",{});var Zo=i(ae);La=r(Zo,"Push files directly from this library\u2019s "),Ge=l(Zo,"A",{href:!0});var jr=i(Ge);Ia=r(jr,"HfApi"),jr.forEach(o),Ta=r(Zo,", without even needing Git or git-lfs installed."),Zo.forEach(o),Da=f(X),se=l(X,"LI",{});var ea=i(se);Sa=r(ea,"Push files from the command line using git and "),le=l(ea,"A",{href:!0,rel:!0});var Ar=i(le);Ga=r(Ar,"Git LFS"),Ar.forEach(o),Ra=r(ea,"."),ea.forEach(o),Fa=f(X),re=l(X,"LI",{});var ta=i(re);Na=r(ta,"Push files with a "),vt=l(ta,"CODE",{});var Hr=i(vt);Ma=r(Hr,"commit"),Hr.forEach(o),Ba=r(ta," context manager."),ta.forEach(o),Ua=f(X),ie=l(X,"LI",{});var oa=i(ie);Ya=r(oa,"Push files with the "),Re=l(oa,"A",{href:!0});var Pr=i(Re);Wa=r(Pr,"push_to_hub()"),Pr.forEach(o),Ja=r(oa," function."),oa.forEach(o),X.forEach(o),co=f(e),Fe=l(e,"P",{});var Cr=i(Fe);za=r(Cr,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Cr.forEach(o),uo=f(e),R=l(e,"OL",{});var aa=i(R);ne=l(aa,"LI",{});var sa=i(ne);wt=l(sa,"P",{});var qr=i(wt);Ka=r(qr,"Log in to your Hugging Face account with the following command:"),qr.forEach(o),Qa=f(sa),m(he.$$.fragment,sa),sa.forEach(o),Va=f(aa),pe=l(aa,"LI",{});var la=i(pe);fe=l(la,"P",{});var ra=i(fe);Xa=r(ra,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Et=l(ra,"CODE",{});var xr=i(Et);Za=r(xr,"notebook_login()"),xr.forEach(o),es=r(ra,":"),ra.forEach(o),ts=f(la),m(ce.$$.fragment,la),la.forEach(o),aa.forEach(o),mo=f(e),x=l(e,"H2",{class:!0});var ia=i(x);F=l(ia,"A",{id:!0,class:!0,href:!0});var Or=i(F);$t=l(Or,"SPAN",{});var Lr=i($t);m(ue.$$.fragment,Lr),Lr.forEach(o),Or.forEach(o),os=f(ia),me=l(ia,"SPAN",{});var na=i(me);as=r(na,"Push files directly from this library's [HfApi](/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi) with the "),kt=l(na,"CODE",{});var Ir=i(kt);ss=r(Ir,"create_commit"),Ir.forEach(o),ls=r(na," API"),na.forEach(o),ia.forEach(o),go=f(e),A=l(e,"P",{});var Se=i(A);jt=l(Se,"CODE",{});var Tr=i(jt);rs=r(Tr,"huggingface_hub"),Tr.forEach(o),is=r(Se," offers a way to upload files to the Hub without Git installed on your system with the "),Ne=l(Se,"A",{href:!0});var Dr=i(Ne);ns=r(Dr,"create_commit()"),Dr.forEach(o),hs=r(Se," method of "),Me=l(Se,"A",{href:!0});var Sr=i(Me);ps=r(Sr,"HfApi"),Sr.forEach(o),fs=r(Se,`.
For example, if you want to upload two files and delete another file in a Hub repo, in a single commit:`),Se.forEach(o),_o=f(e),m(de.$$.fragment,e),yo=f(e),O=l(e,"P",{});var ro=i(O);Be=l(ro,"A",{href:!0});var Gr=i(Be);cs=r(Gr,"create_commit()"),Gr.forEach(o),us=r(ro,` uses the HTTP protocol to upload files to the Hub. It automatically takes care of uploading large files and binary files with the Git LFS protocol.
There are two operations supported by the `),Ue=l(ro,"A",{href:!0});var Rr=i(Ue);ms=r(Rr,"create_commit()"),Rr.forEach(o),ds=r(ro," method:"),ro.forEach(o),bo=f(e),N=l(e,"OL",{});var ha=i(N);ge=l(ha,"LI",{});var pa=i(ge);At=l(pa,"CODE",{});var Fr=i(At);gs=r(Fr,"CommitOperationAdd"),Fr.forEach(o),_s=r(pa," to upload a file to the Hub. If the file already exists, its content will be overwritten. It takes two arguments:"),_e=l(pa,"UL",{});var fa=i(_e);Ye=l(fa,"LI",{});var mr=i(Ye);Ht=l(mr,"CODE",{});var Nr=i(Ht);ys=r(Nr,"path_in_repo"),Nr.forEach(o),bs=r(mr,": the path in the repository where the file should be uploaded"),mr.forEach(o),vs=f(fa),We=l(fa,"LI",{});var dr=i(We);Pt=l(dr,"CODE",{});var Mr=i(Pt);ws=r(Mr,"path_or_fileobj"),Mr.forEach(o),Es=r(dr,": either a path to a file on your filesystem, or a file-like object. The content of the file to upload to the Hub."),dr.forEach(o),fa.forEach(o),pa.forEach(o),$s=f(ha),M=l(ha,"LI",{});var io=i(M);Ct=l(io,"CODE",{});var Br=i(Ct);ks=r(Br,"CommitOperationDelete"),Br.forEach(o),js=r(io," to remove a file from a repository. It takes "),qt=l(io,"CODE",{});var Ur=i(qt);As=r(Ur,"path_in_repo"),Ur.forEach(o),Hs=r(io," as an argument."),io.forEach(o),ha.forEach(o),vo=f(e),B=l(e,"P",{});var ca=i(B);Ps=r(ca,"Instead of "),Je=l(ca,"A",{href:!0});var Yr=i(Je);Cs=r(Yr,"create_commit()"),Yr.forEach(o),qs=r(ca,", you can also use the following convenience methods:"),ca.forEach(o),wo=f(e),w=l(e,"UL",{});var Z=i(w);ze=l(Z,"LI",{});var gr=i(ze);Ke=l(gr,"A",{href:!0});var Wr=i(Ke);xs=r(Wr,"upload_file()"),Wr.forEach(o),Os=r(gr," to upload a single file to a repo on the Hub"),gr.forEach(o),Ls=f(Z),Qe=l(Z,"LI",{});var _r=i(Qe);Ve=l(_r,"A",{href:!0});var Jr=i(Ve);Is=r(Jr,"upload_folder()"),Jr.forEach(o),Ts=r(_r," to upload a local directory to a repo on the Hub"),_r.forEach(o),Ds=f(Z),Xe=l(Z,"LI",{});var yr=i(Xe);Ze=l(yr,"A",{href:!0});var zr=i(Ze);Ss=r(zr,"delete_file()"),zr.forEach(o),Gs=r(yr," to delete a single file from a repo on the Hub"),yr.forEach(o),Rs=f(Z),et=l(Z,"LI",{});var br=i(et);xt=l(br,"CODE",{});var Kr=i(xt);Fs=r(Kr,"metadata_update()"),Kr.forEach(o),Ns=r(br," to update a repo\u2019s metadata"),br.forEach(o),Z.forEach(o),Eo=f(e),H=l(e,"P",{});var mt=i(H);Ms=r(mt,"All these methods use the "),Ot=l(mt,"CODE",{});var Qr=i(Ot);Bs=r(Qr,"create_commit"),Qr.forEach(o),Us=r(mt,` API under the hood.
For a more detailed description, visit the `),Lt=l(mt,"CODE",{});var Vr=i(Lt);Ys=r(Vr,"hf_api()"),Vr.forEach(o),Ws=r(mt," documentation page."),mt.forEach(o),$o=f(e),L=l(e,"H2",{class:!0});var ua=i(L);U=l(ua,"A",{id:!0,class:!0,href:!0});var Xr=i(U);It=l(Xr,"SPAN",{});var Zr=i(It);m(ye.$$.fragment,Zr),Zr.forEach(o),Xr.forEach(o),Js=f(ua),Tt=l(ua,"SPAN",{});var ei=i(Tt);zs=r(ei,"Push from Git and Git LFS on the command line"),ei.forEach(o),ua.forEach(o),ko=f(e),tt=l(e,"P",{});var ti=i(tt);Ks=r(ti,"You can always also use Git and Git LFS on the command line to push your changes to your repo."),ti.forEach(o),jo=f(e),ot=l(e,"P",{});var oi=i(ot);Qs=r(oi,"Note that for huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),oi.forEach(o),Ao=f(e),m(be.$$.fragment,e),Ho=f(e),at=l(e,"P",{});var ai=i(at);Vs=r(ai,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),ai.forEach(o),Po=f(e),I=l(e,"H2",{class:!0});var ma=i(I);Y=l(ma,"A",{id:!0,class:!0,href:!0});var si=i(Y);Dt=l(si,"SPAN",{});var li=i(Dt);m(ve.$$.fragment,li),li.forEach(o),si.forEach(o),Xs=f(ma),St=l(ma,"SPAN",{});var ri=i(St);Zs=r(ri,"Push with a commit context manager"),ri.forEach(o),ma.forEach(o),Co=f(e),st=l(e,"P",{});var ii=i(st);el=r(ii,"This is another option to programmatically push changes to your repo, but this one uses git and git-lfs under the hood (so it requires to have them installed locally)."),ii.forEach(o),qo=f(e),E=l(e,"P",{});var ee=i(E);tl=r(ee,"The "),Gt=l(ee,"CODE",{});var ni=i(Gt);ol=r(ni,"commit"),ni.forEach(o),al=r(ee," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Rt=l(ee,"CODE",{});var hi=i(Rt);sl=r(hi,"git-lfs"),hi.forEach(o),ll=r(ee," automatically tracks any file larger than 10MB. In the following example, the "),Ft=l(ee,"CODE",{});var pi=i(Ft);rl=r(pi,"commit"),pi.forEach(o),il=r(ee," context manager:"),ee.forEach(o),xo=f(e),$=l(e,"OL",{});var te=i($);we=l(te,"LI",{});var da=i(we);nl=r(da,"Pulls from the "),Nt=l(da,"CODE",{});var fi=i(Nt);hl=r(fi,"text-files"),fi.forEach(o),pl=r(da," repository."),da.forEach(o),fl=f(te),Ee=l(te,"LI",{});var ga=i(Ee);cl=r(ga,"Adds a change made to "),Mt=l(ga,"CODE",{});var ci=i(Mt);ul=r(ci,"file.txt"),ci.forEach(o),ml=r(ga,"."),ga.forEach(o),dl=f(te),Bt=l(te,"LI",{});var ui=i(Bt);gl=r(ui,"Commits the change."),ui.forEach(o),_l=f(te),$e=l(te,"LI",{});var _a=i($e);yl=r(_a,"Pushes the change to the "),Ut=l(_a,"CODE",{});var mi=i(Ut);bl=r(mi,"text-files"),mi.forEach(o),vl=r(_a," repository."),_a.forEach(o),te.forEach(o),Oo=f(e),m(ke.$$.fragment,e),Lo=f(e),lt=l(e,"P",{});var di=i(lt);wl=r(di,"Here is another example of how to save and upload a file to a repository:"),di.forEach(o),Io=f(e),m(je.$$.fragment,e),To=f(e),W=l(e,"P",{});var ya=i(W);El=r(ya,"Set "),Yt=l(ya,"CODE",{});var gi=i(Yt);$l=r(gi,"blocking=False"),gi.forEach(o),kl=r(ya," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),ya.forEach(o),Do=f(e),m(Ae.$$.fragment,e),So=f(e),J=l(e,"P",{});var ba=i(J);jl=r(ba,"You can check the status of your push with the "),Wt=l(ba,"CODE",{});var _i=i(Wt);Al=r(_i,"command_queue"),_i.forEach(o),Hl=r(ba," method:"),ba.forEach(o),Go=f(e),m(He.$$.fragment,e),Ro=f(e),rt=l(e,"P",{});var yi=i(rt);Pl=r(yi,"Refer to the table below for the possible statuses:"),yi.forEach(o),Fo=f(e),z=l(e,"TABLE",{});var va=i(z);Jt=l(va,"THEAD",{});var bi=i(Jt);Pe=l(bi,"TR",{});var wa=i(Pe);zt=l(wa,"TH",{});var vi=i(zt);Cl=r(vi,"Status"),vi.forEach(o),ql=f(wa),Kt=l(wa,"TH",{});var wi=i(Kt);xl=r(wi,"Description"),wi.forEach(o),wa.forEach(o),bi.forEach(o),Ol=f(va),T=l(va,"TBODY",{});var dt=i(T);Ce=l(dt,"TR",{});var Ea=i(Ce);Qt=l(Ea,"TD",{});var Ei=i(Qt);Ll=r(Ei,"-1"),Ei.forEach(o),Il=f(Ea),Vt=l(Ea,"TD",{});var $i=i(Vt);Tl=r($i,"The push is ongoing."),$i.forEach(o),Ea.forEach(o),Dl=f(dt),qe=l(dt,"TR",{});var $a=i(qe);Xt=l($a,"TD",{});var ki=i(Xt);Sl=r(ki,"0"),ki.forEach(o),Gl=f($a),Zt=l($a,"TD",{});var ji=i(Zt);Rl=r(ji,"The push has completed successfully."),ji.forEach(o),$a.forEach(o),Fl=f(dt),xe=l(dt,"TR",{});var ka=i(xe);eo=l(ka,"TD",{});var Ai=i(eo);Nl=r(Ai,"Non-zero"),Ai.forEach(o),Ml=f(ka),to=l(ka,"TD",{});var Hi=i(to);Bl=r(Hi,"An error has occurred."),Hi.forEach(o),ka.forEach(o),dt.forEach(o),va.forEach(o),No=f(e),K=l(e,"P",{});var ja=i(K);Ul=r(ja,"When "),oo=l(ja,"CODE",{});var Pi=i(oo);Yl=r(Pi,"blocking=False"),Pi.forEach(o),Wl=r(ja,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),ja.forEach(o),Mo=f(e),m(Oe.$$.fragment,e),Bo=f(e),D=l(e,"H2",{class:!0});var Aa=i(D);Q=l(Aa,"A",{id:!0,class:!0,href:!0});var Ci=i(Q);ao=l(Ci,"SPAN",{});var qi=i(ao);m(Le.$$.fragment,qi),qi.forEach(o),Ci.forEach(o),Jl=f(Aa),so=l(Aa,"SPAN",{});var xi=i(so);zl=r(xi,"Repository.push_to_hub"),xi.forEach(o),Aa.forEach(o),Uo=f(e),b=l(e,"P",{});var k=i(b);Kl=r(k,"Finally, the "),it=l(k,"A",{href:!0});var Oi=i(it);Ql=r(Oi,"Repository"),Oi.forEach(o),Vl=r(k," class also has a "),nt=l(k,"A",{href:!0});var Li=i(nt);Xl=r(Li,"push_to_hub()"),Li.forEach(o),Zl=r(k," function to add files, make a commit, and push them to a repository. Unlike the "),lo=l(k,"CODE",{});var Ii=i(lo);er=r(Ii,"commit"),Ii.forEach(o),tr=r(k," context manager, "),ht=l(k,"A",{href:!0});var Ti=i(ht);or=r(Ti,"push_to_hub()"),Ti.forEach(o),ar=r(k," requires you to pull from a repository first, save the files, and then call "),pt=l(k,"A",{href:!0});var Di=i(pt);sr=r(Di,"push_to_hub()"),Di.forEach(o),lr=r(k,"."),k.forEach(o),Yo=f(e),m(Ie.$$.fragment,e),Wo=f(e),P=l(e,"P",{});var gt=i(P);rr=r(gt,"However, if you aren\u2019t ready to push a file yet, you can still use "),ft=l(gt,"A",{href:!0});var Si=i(ft);ir=r(Si,"git_add()"),Si.forEach(o),nr=r(gt," and "),ct=l(gt,"A",{href:!0});var Gi=i(ct);hr=r(Gi,"git_commit()"),Gi.forEach(o),pr=r(gt," to add and commit your file:"),gt.forEach(o),Jo=f(e),m(Te.$$.fragment,e),zo=f(e),V=l(e,"P",{});var Ha=i(V);fr=r(Ha,"Once you\u2019re ready, you can push your file to your repository with "),ut=l(Ha,"A",{href:!0});var Ri=i(ut);cr=r(Ri,"git_push()"),Ri.forEach(o),ur=r(Ha,":"),Ha.forEach(o),Ko=f(e),m(De.$$.fragment,e),this.h()},h(){c(C,"name","hf:doc:metadata"),c(C,"content",JSON.stringify(Ji)),c(S,"id","upload-files-to-the-hub"),c(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S,"href","#upload-files-to-the-hub"),c(q,"class","relative group"),c(Ge,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi"),c(le,"href","https://git-lfs.github.com/"),c(le,"rel","nofollow"),c(Re,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(F,"id","push-files-directly-from-this-librarys-hfapidocshuggingfacehubpr947enpackagereferencehfapihuggingfacehubhfapi-with-the-createcommit-api"),c(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F,"href","#push-files-directly-from-this-librarys-hfapidocshuggingfacehubpr947enpackagereferencehfapihuggingfacehubhfapi-with-the-createcommit-api"),c(x,"class","relative group"),c(Ne,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Me,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi"),c(Be,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ue,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Je,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ke,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Ve,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Ze,"href","/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),c(U,"id","push-from-git-and-git-lfs-on-the-command-line"),c(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U,"href","#push-from-git-and-git-lfs-on-the-command-line"),c(L,"class","relative group"),c(Y,"id","push-with-a-commit-context-manager"),c(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y,"href","#push-with-a-commit-context-manager"),c(I,"class","relative group"),c(Q,"id","repositorypushtohub"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#repositorypushtohub"),c(D,"class","relative group"),c(it,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository"),c(nt,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(ht,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(pt,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(ft,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository.git_add"),c(ct,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository.git_commit"),c(ut,"href","/docs/huggingface_hub/pr_947/en/package_reference/repository#huggingface_hub.Repository.git_push")},m(e,n){t(document.head,C),h(e,ho,n),h(e,q,n),t(q,S),t(S,_t),d(oe,_t,null),t(q,Pa),t(q,yt),t(yt,Ca),h(e,po,n),h(e,G,n),t(G,qa),t(G,bt),t(bt,xa),t(G,Oa),h(e,fo,n),h(e,v,n),t(v,ae),t(ae,La),t(ae,Ge),t(Ge,Ia),t(ae,Ta),t(v,Da),t(v,se),t(se,Sa),t(se,le),t(le,Ga),t(se,Ra),t(v,Fa),t(v,re),t(re,Na),t(re,vt),t(vt,Ma),t(re,Ba),t(v,Ua),t(v,ie),t(ie,Ya),t(ie,Re),t(Re,Wa),t(ie,Ja),h(e,co,n),h(e,Fe,n),t(Fe,za),h(e,uo,n),h(e,R,n),t(R,ne),t(ne,wt),t(wt,Ka),t(ne,Qa),d(he,ne,null),t(R,Va),t(R,pe),t(pe,fe),t(fe,Xa),t(fe,Et),t(Et,Za),t(fe,es),t(pe,ts),d(ce,pe,null),h(e,mo,n),h(e,x,n),t(x,F),t(F,$t),d(ue,$t,null),t(x,os),t(x,me),t(me,as),t(me,kt),t(kt,ss),t(me,ls),h(e,go,n),h(e,A,n),t(A,jt),t(jt,rs),t(A,is),t(A,Ne),t(Ne,ns),t(A,hs),t(A,Me),t(Me,ps),t(A,fs),h(e,_o,n),d(de,e,n),h(e,yo,n),h(e,O,n),t(O,Be),t(Be,cs),t(O,us),t(O,Ue),t(Ue,ms),t(O,ds),h(e,bo,n),h(e,N,n),t(N,ge),t(ge,At),t(At,gs),t(ge,_s),t(ge,_e),t(_e,Ye),t(Ye,Ht),t(Ht,ys),t(Ye,bs),t(_e,vs),t(_e,We),t(We,Pt),t(Pt,ws),t(We,Es),t(N,$s),t(N,M),t(M,Ct),t(Ct,ks),t(M,js),t(M,qt),t(qt,As),t(M,Hs),h(e,vo,n),h(e,B,n),t(B,Ps),t(B,Je),t(Je,Cs),t(B,qs),h(e,wo,n),h(e,w,n),t(w,ze),t(ze,Ke),t(Ke,xs),t(ze,Os),t(w,Ls),t(w,Qe),t(Qe,Ve),t(Ve,Is),t(Qe,Ts),t(w,Ds),t(w,Xe),t(Xe,Ze),t(Ze,Ss),t(Xe,Gs),t(w,Rs),t(w,et),t(et,xt),t(xt,Fs),t(et,Ns),h(e,Eo,n),h(e,H,n),t(H,Ms),t(H,Ot),t(Ot,Bs),t(H,Us),t(H,Lt),t(Lt,Ys),t(H,Ws),h(e,$o,n),h(e,L,n),t(L,U),t(U,It),d(ye,It,null),t(L,Js),t(L,Tt),t(Tt,zs),h(e,ko,n),h(e,tt,n),t(tt,Ks),h(e,jo,n),h(e,ot,n),t(ot,Qs),h(e,Ao,n),d(be,e,n),h(e,Ho,n),h(e,at,n),t(at,Vs),h(e,Po,n),h(e,I,n),t(I,Y),t(Y,Dt),d(ve,Dt,null),t(I,Xs),t(I,St),t(St,Zs),h(e,Co,n),h(e,st,n),t(st,el),h(e,qo,n),h(e,E,n),t(E,tl),t(E,Gt),t(Gt,ol),t(E,al),t(E,Rt),t(Rt,sl),t(E,ll),t(E,Ft),t(Ft,rl),t(E,il),h(e,xo,n),h(e,$,n),t($,we),t(we,nl),t(we,Nt),t(Nt,hl),t(we,pl),t($,fl),t($,Ee),t(Ee,cl),t(Ee,Mt),t(Mt,ul),t(Ee,ml),t($,dl),t($,Bt),t(Bt,gl),t($,_l),t($,$e),t($e,yl),t($e,Ut),t(Ut,bl),t($e,vl),h(e,Oo,n),d(ke,e,n),h(e,Lo,n),h(e,lt,n),t(lt,wl),h(e,Io,n),d(je,e,n),h(e,To,n),h(e,W,n),t(W,El),t(W,Yt),t(Yt,$l),t(W,kl),h(e,Do,n),d(Ae,e,n),h(e,So,n),h(e,J,n),t(J,jl),t(J,Wt),t(Wt,Al),t(J,Hl),h(e,Go,n),d(He,e,n),h(e,Ro,n),h(e,rt,n),t(rt,Pl),h(e,Fo,n),h(e,z,n),t(z,Jt),t(Jt,Pe),t(Pe,zt),t(zt,Cl),t(Pe,ql),t(Pe,Kt),t(Kt,xl),t(z,Ol),t(z,T),t(T,Ce),t(Ce,Qt),t(Qt,Ll),t(Ce,Il),t(Ce,Vt),t(Vt,Tl),t(T,Dl),t(T,qe),t(qe,Xt),t(Xt,Sl),t(qe,Gl),t(qe,Zt),t(Zt,Rl),t(T,Fl),t(T,xe),t(xe,eo),t(eo,Nl),t(xe,Ml),t(xe,to),t(to,Bl),h(e,No,n),h(e,K,n),t(K,Ul),t(K,oo),t(oo,Yl),t(K,Wl),h(e,Mo,n),d(Oe,e,n),h(e,Bo,n),h(e,D,n),t(D,Q),t(Q,ao),d(Le,ao,null),t(D,Jl),t(D,so),t(so,zl),h(e,Uo,n),h(e,b,n),t(b,Kl),t(b,it),t(it,Ql),t(b,Vl),t(b,nt),t(nt,Xl),t(b,Zl),t(b,lo),t(lo,er),t(b,tr),t(b,ht),t(ht,or),t(b,ar),t(b,pt),t(pt,sr),t(b,lr),h(e,Yo,n),d(Ie,e,n),h(e,Wo,n),h(e,P,n),t(P,rr),t(P,ft),t(ft,ir),t(P,nr),t(P,ct),t(ct,hr),t(P,pr),h(e,Jo,n),d(Te,e,n),h(e,zo,n),h(e,V,n),t(V,fr),t(V,ut),t(ut,cr),t(V,ur),h(e,Ko,n),d(De,e,n),Qo=!0},p:Ui,i(e){Qo||(g(oe.$$.fragment,e),g(he.$$.fragment,e),g(ce.$$.fragment,e),g(ue.$$.fragment,e),g(de.$$.fragment,e),g(ye.$$.fragment,e),g(be.$$.fragment,e),g(ve.$$.fragment,e),g(ke.$$.fragment,e),g(je.$$.fragment,e),g(Ae.$$.fragment,e),g(He.$$.fragment,e),g(Oe.$$.fragment,e),g(Le.$$.fragment,e),g(Ie.$$.fragment,e),g(Te.$$.fragment,e),g(De.$$.fragment,e),Qo=!0)},o(e){_(oe.$$.fragment,e),_(he.$$.fragment,e),_(ce.$$.fragment,e),_(ue.$$.fragment,e),_(de.$$.fragment,e),_(ye.$$.fragment,e),_(be.$$.fragment,e),_(ve.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Ae.$$.fragment,e),_(He.$$.fragment,e),_(Oe.$$.fragment,e),_(Le.$$.fragment,e),_(Ie.$$.fragment,e),_(Te.$$.fragment,e),_(De.$$.fragment,e),Qo=!1},d(e){o(C),e&&o(ho),e&&o(q),y(oe),e&&o(po),e&&o(G),e&&o(fo),e&&o(v),e&&o(co),e&&o(Fe),e&&o(uo),e&&o(R),y(he),y(ce),e&&o(mo),e&&o(x),y(ue),e&&o(go),e&&o(A),e&&o(_o),y(de,e),e&&o(yo),e&&o(O),e&&o(bo),e&&o(N),e&&o(vo),e&&o(B),e&&o(wo),e&&o(w),e&&o(Eo),e&&o(H),e&&o($o),e&&o(L),y(ye),e&&o(ko),e&&o(tt),e&&o(jo),e&&o(ot),e&&o(Ao),y(be,e),e&&o(Ho),e&&o(at),e&&o(Po),e&&o(I),y(ve),e&&o(Co),e&&o(st),e&&o(qo),e&&o(E),e&&o(xo),e&&o($),e&&o(Oo),y(ke,e),e&&o(Lo),e&&o(lt),e&&o(Io),y(je,e),e&&o(To),e&&o(W),e&&o(Do),y(Ae,e),e&&o(So),e&&o(J),e&&o(Go),y(He,e),e&&o(Ro),e&&o(rt),e&&o(Fo),e&&o(z),e&&o(No),e&&o(K),e&&o(Mo),y(Oe,e),e&&o(Bo),e&&o(D),y(Le),e&&o(Uo),e&&o(b),e&&o(Yo),y(Ie,e),e&&o(Wo),e&&o(P),e&&o(Jo),y(Te,e),e&&o(zo),e&&o(V),e&&o(Ko),y(De,e)}}}const Ji={local:"upload-files-to-the-hub",sections:[{local:"push-files-directly-from-this-librarys-hfapidocshuggingfacehubpr947enpackagereferencehfapihuggingfacehubhfapi-with-the-createcommit-api",title:"Push files directly from this library's [HfApi](/docs/huggingface_hub/pr_947/en/package_reference/hf_api#huggingface_hub.HfApi) with the `create_commit` API"},{local:"push-from-git-and-git-lfs-on-the-command-line",title:"Push from Git and Git LFS on the command line"},{local:"push-with-a-commit-context-manager",title:"Push with a commit context manager"},{local:"repositorypushtohub",title:"Repository.push_to_hub"}],title:"Upload files to the Hub"};function zi(vr){return Yi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Xi extends Fi{constructor(C){super();Ni(this,C,zi,Wi,Mi,{})}}export{Xi as default,Ji as metadata};
