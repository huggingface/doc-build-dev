import{S as ls,i as rs,s as is,e as n,k as h,w,t,M as fs,c as l,d as a,m as d,a as i,x as g,h as s,b as p,P as ns,G as o,g as f,y as m,L as hs,q as v,o as b,B as y,v as ds}from"../chunks/vendor-hf-doc-builder.js";import{I as Fo}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as B}from"../chunks/CodeBlock-hf-doc-builder.js";function ps(pt){let j,Xe,q,T,ke,W,Go,je,Jo,Ze,S,Bo,qe,Wo,Yo,eo,I,De,Vo,zo,Pe,Ko,oo,D,L,Ae,Y,Qo,Ce,Xo,ao,U,Zo,ne,ea,oa,to,le,aa,so,$,ta,He,sa,na,Oe,la,ra,no,V,lo,P,re,ct,ia,ie,ut,ro,fe,fa,io,z,fo,he,ha,ho,K,po,E,da,Te,pa,ca,Se,ua,_a,co,Q,uo,A,N,Ie,X,wa,Le,ga,_o,x,ma,de,va,ba,pe,ya,$a,wo,C,R,Ue,Z,Ea,Ne,xa,go,H,ce,ka,ja,ue,qa,Da,mo,_e,Pa,vo,ee,bo,O,we,Aa,Ca,Re,Ha,Oa,yo,oe,$o,k,Ta,ge,Sa,Ia,me,La,Ua,Eo,c,Na,ve,Ra,Ma,Me,Fa,Ga,Fe,Ja,Ba,Ge,Wa,Ya,Je,Va,za,xo,M,Ka,ae,Be,Qa,Xa,ko,F,Za,We,et,ot,jo,te,qo,u,at,Ye,tt,st,Ve,nt,lt,ze,rt,it,Do,se,Po,G,ft,be,ht,dt,Ao;return W=new Fo({}),Y=new Fo({}),V=new B({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/bc0e8cc2f8271b322304e8bb84b3b7580701d53a335ab2d75da19c249e2eeebb.066dae6fdb1e2b8cce60c35cc0f78ed1451d9b341c78de19f3ad469d10a8cbb1&#x27;</span>`}}),z=new B({props:{code:`hf_hub_download(
   repo_id="lysandre/arxiv-nlp",
   filename="config.json",
   revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(
<span class="hljs-meta">... </span>   repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>,
<span class="hljs-meta">... </span>   filename=<span class="hljs-string">&quot;config.json&quot;</span>,
<span class="hljs-meta">... </span>   revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/bc0e8cc2f8271b322304e8bb84b3b7580701d53a335ab2d75da19c249e2eeebb.066dae6fdb1e2b8cce60c35cc0f78ed1451d9b341c78de19f3ad469d10a8cbb1&#x27;</span>`}}),K=new B({props:{code:'hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="main")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)'}}),Q=new B({props:{code:'hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="v1.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;v1.0&quot;</span>)'}}),X=new Fo({}),Z=new Fo({}),ee=new B({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/lysandre__arxiv-nlp.894a9adde21d9a3e3843e6d5aeaaf01875c7fade&#x27;</span>`}}),oe=new B({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", revision="main")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)`}}),te=new B({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", allow_regex="*.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, allow_regex=<span class="hljs-string">&quot;*.json&quot;</span>)`}}),se=new B({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", ignore_regex=["*.msgpack", "*.h5"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, ignore_regex=[<span class="hljs-string">&quot;*.msgpack&quot;</span>, <span class="hljs-string">&quot;*.h5&quot;</span>])`}}),{c(){j=n("meta"),Xe=h(),q=n("h1"),T=n("a"),ke=n("span"),w(W.$$.fragment),Go=h(),je=n("span"),Jo=t("Download files from the Hub"),Ze=h(),S=n("p"),Bo=t("The "),qe=n("code"),Wo=t("huggingface_hub"),Yo=t(` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),eo=h(),I=n("ul"),De=n("li"),Vo=t("Download and store a file from the Hub."),zo=h(),Pe=n("li"),Ko=t("Download all the files in a repository."),oo=h(),D=n("h2"),L=n("a"),Ae=n("span"),w(Y.$$.fragment),Qo=h(),Ce=n("span"),Xo=t("Download and store a file from the Hub"),ao=h(),U=n("p"),Zo=t("The "),ne=n("a"),ea=t("hf_hub_download()"),oa=t(" function is the main function for downloading files from the Hub."),to=h(),le=n("p"),aa=t("It downloads the remote file, stores it on disk (in a version-aware way), and returns its local file path."),so=h(),$=n("p"),ta=t("Use the "),He=n("code"),sa=t("repo_id"),na=t(" and "),Oe=n("code"),la=t("filename"),ra=t(" parameters to specify which file to download:"),no=h(),w(V.$$.fragment),lo=h(),P=n("div"),re=n("img"),ia=h(),ie=n("img"),ro=h(),fe=n("p"),fa=t(`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),io=h(),w(z.$$.fragment),fo=h(),he=n("p"),ha=t("To specify a file revision with the branch name:"),ho=h(),w(K.$$.fragment),po=h(),E=n("p"),da=t("To specify a file revision with a tag identifier. For example, if you want "),Te=n("code"),pa=t("v1.0"),ca=t(` of the
`),Se=n("code"),ua=t("config.json"),_a=t(" file:"),co=h(),w(Q.$$.fragment),uo=h(),A=n("h2"),N=n("a"),Ie=n("span"),w(X.$$.fragment),wa=h(),Le=n("span"),ga=t("Construct a download URL"),_o=h(),x=n("p"),ma=t("In case you want to construct the URL used to download a file from a repo, you can use "),de=n("a"),va=t("hf_hub_url()"),ba=t(` which returns a URL.
Note that it is used internally by `),pe=n("a"),ya=t("hf_hub_download()"),$a=t("."),wo=h(),C=n("h2"),R=n("a"),Ue=n("span"),w(Z.$$.fragment),Ea=h(),Ne=n("span"),xa=t("Download an entire repository"),go=h(),H=n("p"),ce=n("a"),ka=t("snapshot_download()"),ja=t(` downloads an entire repository at a given revision. Like
`),ue=n("a"),qa=t("hf_hub_download()"),Da=t(", all downloaded files are cached on your local disk."),mo=h(),_e=n("p"),Pa=t("Download a whole repository as shown in the following:"),vo=h(),w(ee.$$.fragment),bo=h(),O=n("p"),we=n("a"),Aa=t("snapshot_download()"),Ca=t(` downloads the latest revision by default. If you want a specific
repository revision, use the `),Re=n("code"),Ha=t("revision"),Oa=t(" parameter:"),yo=h(),w(oe.$$.fragment),$o=h(),k=n("p"),Ta=t("In general, it is usually better to download files with "),ge=n("a"),Sa=t("hf_hub_download()"),Ia=t(` - if you
already know the file names you need.
`),me=n("a"),La=t("snapshot_download()"),Ua=t(" is helpful when you are unaware of which files to download."),Eo=h(),c=n("p"),Na=t(`However, you don\u2019t always want to download the contents of an entire repository with
`),ve=n("a"),Ra=t("snapshot_download()"),Ma=t(`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),Me=n("code"),Fa=t("allow_regex"),Ga=t(" and "),Fe=n("code"),Ja=t("ignore_regex"),Ba=t(`. Use the
`),Ge=n("code"),Wa=t("allow_regex"),Ya=t(" and "),Je=n("code"),Va=t("ignore_regex"),za=t(` arguments to specify which files to download. These
parameters accept either a single regex or a list of regexes.`),xo=h(),M=n("p"),Ka=t(`The regex matching is based on
`),ae=n("a"),Be=n("code"),Qa=t("fnmatch"),Xa=t(`, which provides support for
Unix shell-style wildcards.`),ko=h(),F=n("p"),Za=t("For example, you can use "),We=n("code"),et=t("allow_regex"),ot=t(" to only download JSON configuration files:"),jo=h(),w(te.$$.fragment),qo=h(),u=n("p"),at=t("On the other hand, "),Ye=n("code"),tt=t("ignore_regex"),st=t(` can exclude certain files from being downloaded. The
following example ignores the `),Ve=n("code"),nt=t(".msgpack"),lt=t(" and "),ze=n("code"),rt=t(".h5"),it=t(" file extensions:"),Do=h(),w(se.$$.fragment),Po=h(),G=n("p"),ft=t(`Passing a regex can be especially useful when repositories contain files that are never
expected to be downloaded by `),be=n("a"),ht=t("snapshot_download()"),dt=t("."),this.h()},l(e){const r=fs('[data-svelte="svelte-1phssyn"]',document.head);j=l(r,"META",{name:!0,content:!0}),r.forEach(a),Xe=d(e),q=l(e,"H1",{class:!0});var Co=i(q);T=l(Co,"A",{id:!0,class:!0,href:!0});var _t=i(T);ke=l(_t,"SPAN",{});var wt=i(ke);g(W.$$.fragment,wt),wt.forEach(a),_t.forEach(a),Go=d(Co),je=l(Co,"SPAN",{});var gt=i(je);Jo=s(gt,"Download files from the Hub"),gt.forEach(a),Co.forEach(a),Ze=d(e),S=l(e,"P",{});var Ho=i(S);Bo=s(Ho,"The "),qe=l(Ho,"CODE",{});var mt=i(qe);Wo=s(mt,"huggingface_hub"),mt.forEach(a),Yo=s(Ho,` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),Ho.forEach(a),eo=d(e),I=l(e,"UL",{});var Oo=i(I);De=l(Oo,"LI",{});var vt=i(De);Vo=s(vt,"Download and store a file from the Hub."),vt.forEach(a),zo=d(Oo),Pe=l(Oo,"LI",{});var bt=i(Pe);Ko=s(bt,"Download all the files in a repository."),bt.forEach(a),Oo.forEach(a),oo=d(e),D=l(e,"H2",{class:!0});var To=i(D);L=l(To,"A",{id:!0,class:!0,href:!0});var yt=i(L);Ae=l(yt,"SPAN",{});var $t=i(Ae);g(Y.$$.fragment,$t),$t.forEach(a),yt.forEach(a),Qo=d(To),Ce=l(To,"SPAN",{});var Et=i(Ce);Xo=s(Et,"Download and store a file from the Hub"),Et.forEach(a),To.forEach(a),ao=d(e),U=l(e,"P",{});var So=i(U);Zo=s(So,"The "),ne=l(So,"A",{href:!0});var xt=i(ne);ea=s(xt,"hf_hub_download()"),xt.forEach(a),oa=s(So," function is the main function for downloading files from the Hub."),So.forEach(a),to=d(e),le=l(e,"P",{});var kt=i(le);aa=s(kt,"It downloads the remote file, stores it on disk (in a version-aware way), and returns its local file path."),kt.forEach(a),so=d(e),$=l(e,"P",{});var ye=i($);ta=s(ye,"Use the "),He=l(ye,"CODE",{});var jt=i(He);sa=s(jt,"repo_id"),jt.forEach(a),na=s(ye," and "),Oe=l(ye,"CODE",{});var qt=i(Oe);la=s(qt,"filename"),qt.forEach(a),ra=s(ye," parameters to specify which file to download:"),ye.forEach(a),no=d(e),g(V.$$.fragment,e),lo=d(e),P=l(e,"DIV",{class:!0});var Io=i(P);re=l(Io,"IMG",{class:!0,src:!0}),ia=d(Io),ie=l(Io,"IMG",{class:!0,src:!0}),Io.forEach(a),ro=d(e),fe=l(e,"P",{});var Dt=i(fe);fa=s(Dt,`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),Dt.forEach(a),io=d(e),g(z.$$.fragment,e),fo=d(e),he=l(e,"P",{});var Pt=i(he);ha=s(Pt,"To specify a file revision with the branch name:"),Pt.forEach(a),ho=d(e),g(K.$$.fragment,e),po=d(e),E=l(e,"P",{});var $e=i(E);da=s($e,"To specify a file revision with a tag identifier. For example, if you want "),Te=l($e,"CODE",{});var At=i(Te);pa=s(At,"v1.0"),At.forEach(a),ca=s($e,` of the
`),Se=l($e,"CODE",{});var Ct=i(Se);ua=s(Ct,"config.json"),Ct.forEach(a),_a=s($e," file:"),$e.forEach(a),co=d(e),g(Q.$$.fragment,e),uo=d(e),A=l(e,"H2",{class:!0});var Lo=i(A);N=l(Lo,"A",{id:!0,class:!0,href:!0});var Ht=i(N);Ie=l(Ht,"SPAN",{});var Ot=i(Ie);g(X.$$.fragment,Ot),Ot.forEach(a),Ht.forEach(a),wa=d(Lo),Le=l(Lo,"SPAN",{});var Tt=i(Le);ga=s(Tt,"Construct a download URL"),Tt.forEach(a),Lo.forEach(a),_o=d(e),x=l(e,"P",{});var Ee=i(x);ma=s(Ee,"In case you want to construct the URL used to download a file from a repo, you can use "),de=l(Ee,"A",{href:!0});var St=i(de);va=s(St,"hf_hub_url()"),St.forEach(a),ba=s(Ee,` which returns a URL.
Note that it is used internally by `),pe=l(Ee,"A",{href:!0});var It=i(pe);ya=s(It,"hf_hub_download()"),It.forEach(a),$a=s(Ee,"."),Ee.forEach(a),wo=d(e),C=l(e,"H2",{class:!0});var Uo=i(C);R=l(Uo,"A",{id:!0,class:!0,href:!0});var Lt=i(R);Ue=l(Lt,"SPAN",{});var Ut=i(Ue);g(Z.$$.fragment,Ut),Ut.forEach(a),Lt.forEach(a),Ea=d(Uo),Ne=l(Uo,"SPAN",{});var Nt=i(Ne);xa=s(Nt,"Download an entire repository"),Nt.forEach(a),Uo.forEach(a),go=d(e),H=l(e,"P",{});var Ke=i(H);ce=l(Ke,"A",{href:!0});var Rt=i(ce);ka=s(Rt,"snapshot_download()"),Rt.forEach(a),ja=s(Ke,` downloads an entire repository at a given revision. Like
`),ue=l(Ke,"A",{href:!0});var Mt=i(ue);qa=s(Mt,"hf_hub_download()"),Mt.forEach(a),Da=s(Ke,", all downloaded files are cached on your local disk."),Ke.forEach(a),mo=d(e),_e=l(e,"P",{});var Ft=i(_e);Pa=s(Ft,"Download a whole repository as shown in the following:"),Ft.forEach(a),vo=d(e),g(ee.$$.fragment,e),bo=d(e),O=l(e,"P",{});var Qe=i(O);we=l(Qe,"A",{href:!0});var Gt=i(we);Aa=s(Gt,"snapshot_download()"),Gt.forEach(a),Ca=s(Qe,` downloads the latest revision by default. If you want a specific
repository revision, use the `),Re=l(Qe,"CODE",{});var Jt=i(Re);Ha=s(Jt,"revision"),Jt.forEach(a),Oa=s(Qe," parameter:"),Qe.forEach(a),yo=d(e),g(oe.$$.fragment,e),$o=d(e),k=l(e,"P",{});var xe=i(k);Ta=s(xe,"In general, it is usually better to download files with "),ge=l(xe,"A",{href:!0});var Bt=i(ge);Sa=s(Bt,"hf_hub_download()"),Bt.forEach(a),Ia=s(xe,` - if you
already know the file names you need.
`),me=l(xe,"A",{href:!0});var Wt=i(me);La=s(Wt,"snapshot_download()"),Wt.forEach(a),Ua=s(xe," is helpful when you are unaware of which files to download."),xe.forEach(a),Eo=d(e),c=l(e,"P",{});var _=i(c);Na=s(_,`However, you don\u2019t always want to download the contents of an entire repository with
`),ve=l(_,"A",{href:!0});var Yt=i(ve);Ra=s(Yt,"snapshot_download()"),Yt.forEach(a),Ma=s(_,`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),Me=l(_,"CODE",{});var Vt=i(Me);Fa=s(Vt,"allow_regex"),Vt.forEach(a),Ga=s(_," and "),Fe=l(_,"CODE",{});var zt=i(Fe);Ja=s(zt,"ignore_regex"),zt.forEach(a),Ba=s(_,`. Use the
`),Ge=l(_,"CODE",{});var Kt=i(Ge);Wa=s(Kt,"allow_regex"),Kt.forEach(a),Ya=s(_," and "),Je=l(_,"CODE",{});var Qt=i(Je);Va=s(Qt,"ignore_regex"),Qt.forEach(a),za=s(_,` arguments to specify which files to download. These
parameters accept either a single regex or a list of regexes.`),_.forEach(a),xo=d(e),M=l(e,"P",{});var No=i(M);Ka=s(No,`The regex matching is based on
`),ae=l(No,"A",{href:!0,rel:!0});var Xt=i(ae);Be=l(Xt,"CODE",{});var Zt=i(Be);Qa=s(Zt,"fnmatch"),Zt.forEach(a),Xt.forEach(a),Xa=s(No,`, which provides support for
Unix shell-style wildcards.`),No.forEach(a),ko=d(e),F=l(e,"P",{});var Ro=i(F);Za=s(Ro,"For example, you can use "),We=l(Ro,"CODE",{});var es=i(We);et=s(es,"allow_regex"),es.forEach(a),ot=s(Ro," to only download JSON configuration files:"),Ro.forEach(a),jo=d(e),g(te.$$.fragment,e),qo=d(e),u=l(e,"P",{});var J=i(u);at=s(J,"On the other hand, "),Ye=l(J,"CODE",{});var os=i(Ye);tt=s(os,"ignore_regex"),os.forEach(a),st=s(J,` can exclude certain files from being downloaded. The
following example ignores the `),Ve=l(J,"CODE",{});var as=i(Ve);nt=s(as,".msgpack"),as.forEach(a),lt=s(J," and "),ze=l(J,"CODE",{});var ts=i(ze);rt=s(ts,".h5"),ts.forEach(a),it=s(J," file extensions:"),J.forEach(a),Do=d(e),g(se.$$.fragment,e),Po=d(e),G=l(e,"P",{});var Mo=i(G);ft=s(Mo,`Passing a regex can be especially useful when repositories contain files that are never
expected to be downloaded by `),be=l(Mo,"A",{href:!0});var ss=i(be);ht=s(ss,"snapshot_download()"),ss.forEach(a),dt=s(Mo,"."),Mo.forEach(a),this.h()},h(){p(j,"name","hf:doc:metadata"),p(j,"content",JSON.stringify(cs)),p(T,"id","download-files-from-the-hub"),p(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(T,"href","#download-files-from-the-hub"),p(q,"class","relative group"),p(L,"id","download-and-store-a-file-from-the-hub"),p(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(L,"href","#download-and-store-a-file-from-the-hub"),p(D,"class","relative group"),p(ne,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(re,"class","block dark:hidden"),ns(re.src,ct="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo.png")||p(re,"src",ct),p(ie,"class","hidden dark:block"),ns(ie.src,ut="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo-dark.png")||p(ie,"src",ut),p(P,"class","flex justify-center"),p(N,"id","construct-a-download-url"),p(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(N,"href","#construct-a-download-url"),p(A,"class","relative group"),p(de,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.hf_hub_url"),p(pe,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(R,"id","download-an-entire-repository"),p(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(R,"href","#download-an-entire-repository"),p(C,"class","relative group"),p(ce,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ue,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(we,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ge,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(me,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ve,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ae,"href","https://docs.python.org/3/library/fnmatch.html"),p(ae,"rel","nofollow"),p(be,"href","/docs/huggingface_hub/pr_948/en/package_reference/file_download#huggingface_hub.snapshot_download")},m(e,r){o(document.head,j),f(e,Xe,r),f(e,q,r),o(q,T),o(T,ke),m(W,ke,null),o(q,Go),o(q,je),o(je,Jo),f(e,Ze,r),f(e,S,r),o(S,Bo),o(S,qe),o(qe,Wo),o(S,Yo),f(e,eo,r),f(e,I,r),o(I,De),o(De,Vo),o(I,zo),o(I,Pe),o(Pe,Ko),f(e,oo,r),f(e,D,r),o(D,L),o(L,Ae),m(Y,Ae,null),o(D,Qo),o(D,Ce),o(Ce,Xo),f(e,ao,r),f(e,U,r),o(U,Zo),o(U,ne),o(ne,ea),o(U,oa),f(e,to,r),f(e,le,r),o(le,aa),f(e,so,r),f(e,$,r),o($,ta),o($,He),o(He,sa),o($,na),o($,Oe),o(Oe,la),o($,ra),f(e,no,r),m(V,e,r),f(e,lo,r),f(e,P,r),o(P,re),o(P,ia),o(P,ie),f(e,ro,r),f(e,fe,r),o(fe,fa),f(e,io,r),m(z,e,r),f(e,fo,r),f(e,he,r),o(he,ha),f(e,ho,r),m(K,e,r),f(e,po,r),f(e,E,r),o(E,da),o(E,Te),o(Te,pa),o(E,ca),o(E,Se),o(Se,ua),o(E,_a),f(e,co,r),m(Q,e,r),f(e,uo,r),f(e,A,r),o(A,N),o(N,Ie),m(X,Ie,null),o(A,wa),o(A,Le),o(Le,ga),f(e,_o,r),f(e,x,r),o(x,ma),o(x,de),o(de,va),o(x,ba),o(x,pe),o(pe,ya),o(x,$a),f(e,wo,r),f(e,C,r),o(C,R),o(R,Ue),m(Z,Ue,null),o(C,Ea),o(C,Ne),o(Ne,xa),f(e,go,r),f(e,H,r),o(H,ce),o(ce,ka),o(H,ja),o(H,ue),o(ue,qa),o(H,Da),f(e,mo,r),f(e,_e,r),o(_e,Pa),f(e,vo,r),m(ee,e,r),f(e,bo,r),f(e,O,r),o(O,we),o(we,Aa),o(O,Ca),o(O,Re),o(Re,Ha),o(O,Oa),f(e,yo,r),m(oe,e,r),f(e,$o,r),f(e,k,r),o(k,Ta),o(k,ge),o(ge,Sa),o(k,Ia),o(k,me),o(me,La),o(k,Ua),f(e,Eo,r),f(e,c,r),o(c,Na),o(c,ve),o(ve,Ra),o(c,Ma),o(c,Me),o(Me,Fa),o(c,Ga),o(c,Fe),o(Fe,Ja),o(c,Ba),o(c,Ge),o(Ge,Wa),o(c,Ya),o(c,Je),o(Je,Va),o(c,za),f(e,xo,r),f(e,M,r),o(M,Ka),o(M,ae),o(ae,Be),o(Be,Qa),o(M,Xa),f(e,ko,r),f(e,F,r),o(F,Za),o(F,We),o(We,et),o(F,ot),f(e,jo,r),m(te,e,r),f(e,qo,r),f(e,u,r),o(u,at),o(u,Ye),o(Ye,tt),o(u,st),o(u,Ve),o(Ve,nt),o(u,lt),o(u,ze),o(ze,rt),o(u,it),f(e,Do,r),m(se,e,r),f(e,Po,r),f(e,G,r),o(G,ft),o(G,be),o(be,ht),o(G,dt),Ao=!0},p:hs,i(e){Ao||(v(W.$$.fragment,e),v(Y.$$.fragment,e),v(V.$$.fragment,e),v(z.$$.fragment,e),v(K.$$.fragment,e),v(Q.$$.fragment,e),v(X.$$.fragment,e),v(Z.$$.fragment,e),v(ee.$$.fragment,e),v(oe.$$.fragment,e),v(te.$$.fragment,e),v(se.$$.fragment,e),Ao=!0)},o(e){b(W.$$.fragment,e),b(Y.$$.fragment,e),b(V.$$.fragment,e),b(z.$$.fragment,e),b(K.$$.fragment,e),b(Q.$$.fragment,e),b(X.$$.fragment,e),b(Z.$$.fragment,e),b(ee.$$.fragment,e),b(oe.$$.fragment,e),b(te.$$.fragment,e),b(se.$$.fragment,e),Ao=!1},d(e){a(j),e&&a(Xe),e&&a(q),y(W),e&&a(Ze),e&&a(S),e&&a(eo),e&&a(I),e&&a(oo),e&&a(D),y(Y),e&&a(ao),e&&a(U),e&&a(to),e&&a(le),e&&a(so),e&&a($),e&&a(no),y(V,e),e&&a(lo),e&&a(P),e&&a(ro),e&&a(fe),e&&a(io),y(z,e),e&&a(fo),e&&a(he),e&&a(ho),y(K,e),e&&a(po),e&&a(E),e&&a(co),y(Q,e),e&&a(uo),e&&a(A),y(X),e&&a(_o),e&&a(x),e&&a(wo),e&&a(C),y(Z),e&&a(go),e&&a(H),e&&a(mo),e&&a(_e),e&&a(vo),y(ee,e),e&&a(bo),e&&a(O),e&&a(yo),y(oe,e),e&&a($o),e&&a(k),e&&a(Eo),e&&a(c),e&&a(xo),e&&a(M),e&&a(ko),e&&a(F),e&&a(jo),y(te,e),e&&a(qo),e&&a(u),e&&a(Do),y(se,e),e&&a(Po),e&&a(G)}}}const cs={local:"download-files-from-the-hub",sections:[{local:"download-and-store-a-file-from-the-hub",title:"Download and store a file from the Hub"},{local:"construct-a-download-url",title:"Construct a download URL"},{local:"download-an-entire-repository",title:"Download an entire repository"}],title:"Download files from the Hub"};function us(pt){return ds(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ms extends ls{constructor(j){super();rs(this,j,us,ps,is,{})}}export{ms as default,cs as metadata};
