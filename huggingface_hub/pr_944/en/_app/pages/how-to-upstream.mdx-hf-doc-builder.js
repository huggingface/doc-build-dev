import{S as lh,i as sh,s as rh,e as s,k as h,w as d,t as a,M as ih,c as r,d as o,m as f,a as i,x as m,h as l,b as u,G as t,g as n,y as _,q as g,o as y,B as v,v as ph}from"../chunks/vendor-hf-doc-builder.js";import{T as nh}from"../chunks/Tip-hf-doc-builder.js";import{I as yt}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as $}from"../chunks/CodeBlock-hf-doc-builder.js";function hh(pa){let c,te,E,H,N,k,Ae,M,L,oe,q,T,B,He;return{c(){c=s("p"),te=a("The "),E=s("a"),H=a("create_commit()"),N=a(" function is a low-level API for working at a commit level. The "),k=s("a"),Ae=a("upload_file()"),M=a(" and "),L=s("a"),oe=a("upload_folder()"),q=a(" functions are higher-level APIs that use "),T=s("a"),B=a("create_commit()"),He=a(" under the hood. We recommend trying these functions first if you don\u2019t need to work at a lower level."),this.h()},l(Y){c=r(Y,"P",{});var b=i(c);te=l(b,"The "),E=r(b,"A",{href:!0});var w=i(E);H=l(w,"create_commit()"),w.forEach(o),N=l(b," function is a low-level API for working at a commit level. The "),k=r(b,"A",{href:!0});var S=i(k);Ae=l(S,"upload_file()"),S.forEach(o),M=l(b," and "),L=r(b,"A",{href:!0});var vt=i(L);oe=l(vt,"upload_folder()"),vt.forEach(o),q=l(b," functions are higher-level APIs that use "),T=r(b,"A",{href:!0});var W=i(T);B=l(W,"create_commit()"),W.forEach(o),He=l(b," under the hood. We recommend trying these functions first if you don\u2019t need to work at a lower level."),b.forEach(o),this.h()},h(){u(E,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(k,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(L,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(T,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit")},m(Y,b){n(Y,c,b),t(c,te),t(c,E),t(E,H),t(c,N),t(c,k),t(k,Ae),t(c,M),t(c,L),t(L,oe),t(c,q),t(c,T),t(T,B),t(c,He)},d(Y){Y&&o(c)}}}function fh(pa){let c,te,E,H,N,k,Ae,M,L,oe,q,T,B,He,Y,b,w,S,vt,W,Ml,Bl,Yl,qe,Wl,wt,zl,Jl,Kl,Pe,Ql,po,Vl,Xl,Zl,Ce,es,bt,ts,os,as,Oe,ls,De,ss,rs,is,xe,ps,Et,ns,hs,na,$t,fs,ha,ae,Le,no,us,cs,Te,ds,z,Se,ms,ho,_s,gs,ys,Ue,vs,kt,fo,ws,bs,fa,J,le,uo,Ie,Es,co,$s,ua,U,ks,jt,mo,js,As,At,Hs,qs,ca,P,Ps,_o,Cs,Os,go,Ds,xs,yo,Ls,Ts,da,Re,ma,K,se,vo,Fe,Ss,wo,Us,_a,j,Is,Ht,Rs,Fs,bo,Gs,Ns,Eo,Ms,Bs,$o,Ys,Ws,ga,Ge,ya,Q,re,ko,Ne,zs,jo,Js,va,C,Ks,Ao,Qs,Vs,Ho,Xs,Zs,qo,er,tr,wa,O,Me,or,Po,ar,lr,sr,Be,rr,Co,ir,pr,nr,Oo,hr,fr,Ye,ur,Do,cr,dr,ba,We,Ea,qt,mr,$a,ze,ka,ie,_r,xo,gr,yr,ja,Je,Aa,pe,vr,Lo,wr,br,Ha,Ke,qa,Pt,Er,Pa,ne,To,Qe,So,$r,kr,Uo,jr,Ar,V,Ve,Io,Hr,qr,Ro,Pr,Cr,Xe,Fo,Or,Dr,Go,xr,Lr,Ze,No,Tr,Sr,Mo,Ur,Ca,he,Ir,Bo,Rr,Fr,Oa,et,Da,X,fe,Yo,tt,Gr,Wo,Nr,xa,A,Mr,Ct,Br,Yr,Ot,Wr,zr,zo,Jr,Kr,Dt,Qr,Vr,La,ue,Xr,Jo,Zr,ei,Ta,ot,Sa,ce,ti,xt,oi,ai,Ua,at,Ia,I,li,Lt,si,ri,Tt,ii,pi,Ra,lt,Fa,de,ni,St,hi,fi,Ga,st,Na,Z,me,Ko,rt,ui,Qo,ci,Ma,Ut,di,Ba,it,Ya,It,mi,Wa,ee,_e,Vo,pt,_i,Xo,gi,za,ge,Ja,R,yi,Rt,vi,wi,Ft,bi,Ei,Ka,ye,$i,Gt,ki,ji,Qa,ve,nt,Nt,Zo,Ai,Hi,qi,ht,Mt,ea,Pi,Ci,Oi,Bt,ta,Di,xi,Li,oa,we,aa,Ti,Si,la,Ui,Ii,Va,Yt,Ri,Xa,Wt,ft,Fi,sa,Gi,Ni,Za,ut,el,ct,dt,Mi,zt,Bi,Yi,tl,mt,ol,_t,Jt,Wi,zi,al,D,Kt,Qt,Ji,Ki,Qi,Vt,Xt,Vi,Xi,Zi,Zt,eo,ep,tp,op,to,ra,ap,lp,ll,be,sp,oo,rp,ip,sl;return k=new yt({}),Te=new $({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Ue=new $({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),Ie=new yt({}),Re=new $({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(path_or_fileobj="/path/to/local/folder/README.md", 
                path_in_repo="README.md", 
                repo_id="username/test-dataset",
                repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(path_or_fileobj=<span class="hljs-string">&quot;/path/to/local/folder/README.md&quot;</span>, 
<span class="hljs-meta">... </span>                path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>                repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>                repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Fe=new yt({}),Ge=new $({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(folder_path="/path/to/local/folder",
                  path_in_repo="my-dataset/train",
                  repo_id="username/test-dataset"
                  repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>                  path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>                  repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>
<span class="hljs-meta">... </span>                  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-comment"># https://huggingface.co/datasets/username/test-dataset/tree/main/my-dataset/train/</span>`}}),Ne=new yt({}),We=new $({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),ze=new $({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Je=new $({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),Ke=new $({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),et=new $({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),tt=new yt({}),ot=new $({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)`}}),at=new $({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),lt=new $({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),st=new $({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),rt=new yt({}),it=new $({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),pt=new yt({}),ge=new nh({props:{$$slots:{default:[hh]},$$scope:{ctx:pa}}}),ut=new $({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),mt=new $({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){c=s("meta"),te=h(),E=s("h1"),H=s("a"),N=s("span"),d(k.$$.fragment),Ae=h(),M=s("span"),L=a("Upload files to the Hub"),oe=h(),q=s("p"),T=a("Sharing your files and work is a very important aspect of the Hub. The "),B=s("code"),He=a("huggingface_hub"),Y=a(" offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),b=h(),w=s("ul"),S=s("li"),vt=a("Upload a file with "),W=s("a"),Ml=a("upload_file()"),Bl=a("."),Yl=h(),qe=s("li"),Wl=a("Upload a folder with "),wt=s("a"),zl=a("upload_folder()"),Jl=a("."),Kl=h(),Pe=s("li"),Ql=a("Push files with a "),po=s("code"),Vl=a("commit"),Xl=a(" context manager."),Zl=h(),Ce=s("li"),es=a("Push files with the "),bt=s("a"),ts=a("push_to_hub()"),os=a(" function."),as=h(),Oe=s("li"),ls=a("Upload very large files with "),De=s("a"),ss=a("Git LFS"),rs=a("."),is=h(),xe=s("li"),ps=a("Use "),Et=s("a"),ns=a("create_commit()"),hs=a(" to push files without Git."),na=h(),$t=s("p"),fs=a("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),ha=h(),ae=s("ul"),Le=s("li"),no=s("p"),us=a("Log in to your Hugging Face account with the following command:"),cs=h(),d(Te.$$.fragment),ds=h(),z=s("li"),Se=s("p"),ms=a("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),ho=s("code"),_s=a("notebook_login()"),gs=a(":"),ys=h(),d(Ue.$$.fragment),vs=h(),kt=s("p"),fo=s("code"),ws=a("notebook_login()"),bs=a(" launches a widget in your notebook from which you can enter your Hugging Face credentials."),fa=h(),J=s("h2"),le=s("a"),uo=s("span"),d(Ie.$$.fragment),Es=h(),co=s("span"),$s=a("Upload a file"),ua=h(),U=s("p"),ks=a("Once you\u2019ve created a repository with the "),jt=s("a"),mo=s("code"),js=a("create_repo"),As=a(" function, you can upload your files to your repository. Use the "),At=s("a"),Hs=a("upload_file()"),qs=a(" function to upload a file."),ca=h(),P=s("p"),Ps=a("Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),_o=s("code"),Cs=a("dataset"),Os=a(", "),go=s("code"),Ds=a("model"),xs=a(" or "),yo=s("code"),Ls=a("space"),Ts=a("."),da=h(),d(Re.$$.fragment),ma=h(),K=s("h2"),se=s("a"),vo=s("span"),d(Fe.$$.fragment),Ss=h(),wo=s("span"),Us=a("Upload a folder"),_a=h(),j=s("p"),Is=a("Use the "),Ht=s("a"),Rs=a("upload_folder()"),Fs=a(" function to upload a local folder to a repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),bo=s("code"),Gs=a("dataset"),Ns=a(", "),Eo=s("code"),Ms=a("model"),Bs=a(" or "),$o=s("code"),Ys=a("space"),Ws=a("."),ga=h(),d(Ge.$$.fragment),ya=h(),Q=s("h2"),re=s("a"),ko=s("span"),d(Ne.$$.fragment),zs=h(),jo=s("span"),Js=a("commit context manager"),va=h(),C=s("p"),Ks=a("The "),Ao=s("code"),Qs=a("commit"),Vs=a(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Ho=s("code"),Xs=a("git-lfs"),Zs=a(" automatically tracks any file larger than 10MB. In the following example, the "),qo=s("code"),er=a("commit"),tr=a(" context manager:"),wa=h(),O=s("ol"),Me=s("li"),or=a("Pulls from the "),Po=s("code"),ar=a("text-files"),lr=a(" repository."),sr=h(),Be=s("li"),rr=a("Adds a change made to "),Co=s("code"),ir=a("file.txt"),pr=a("."),nr=h(),Oo=s("li"),hr=a("Commits the change."),fr=h(),Ye=s("li"),ur=a("Pushes the change to the "),Do=s("code"),cr=a("text-files"),dr=a(" repository."),ba=h(),d(We.$$.fragment),Ea=h(),qt=s("p"),mr=a("Here is another example of how to save and upload a file to a repository:"),$a=h(),d(ze.$$.fragment),ka=h(),ie=s("p"),_r=a("Set "),xo=s("code"),gr=a("blocking=False"),yr=a(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),ja=h(),d(Je.$$.fragment),Aa=h(),pe=s("p"),vr=a("You can check the status of your push with the "),Lo=s("code"),wr=a("command_queue"),br=a(" method:"),Ha=h(),d(Ke.$$.fragment),qa=h(),Pt=s("p"),Er=a("Refer to the table below for the possible statuses:"),Pa=h(),ne=s("table"),To=s("thead"),Qe=s("tr"),So=s("th"),$r=a("Status"),kr=h(),Uo=s("th"),jr=a("Description"),Ar=h(),V=s("tbody"),Ve=s("tr"),Io=s("td"),Hr=a("-1"),qr=h(),Ro=s("td"),Pr=a("The push is ongoing."),Cr=h(),Xe=s("tr"),Fo=s("td"),Or=a("0"),Dr=h(),Go=s("td"),xr=a("The push has completed successfully."),Lr=h(),Ze=s("tr"),No=s("td"),Tr=a("Non-zero"),Sr=h(),Mo=s("td"),Ur=a("An error has occurred."),Ca=h(),he=s("p"),Ir=a("When "),Bo=s("code"),Rr=a("blocking=False"),Fr=a(", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Oa=h(),d(et.$$.fragment),Da=h(),X=s("h2"),fe=s("a"),Yo=s("span"),d(tt.$$.fragment),Gr=h(),Wo=s("span"),Nr=a("push_to_hub"),xa=h(),A=s("p"),Mr=a("The "),Ct=s("a"),Br=a("Repository"),Yr=a(" class has a "),Ot=s("a"),Wr=a("push_to_hub()"),zr=a(" function to add files, make a commit, and push them to a repository. Unlike the "),zo=s("code"),Jr=a("commit"),Kr=a(" context manager, requires you\u2019ll need to pull from a repository first before calling "),Dt=s("a"),Qr=a("push_to_hub()"),Vr=a("."),La=h(),ue=s("p"),Xr=a("For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),Jo=s("code"),Zr=a("repo"),ei=a(" from the local directory:"),Ta=h(),d(ot.$$.fragment),Sa=h(),ce=s("p"),ti=a("Update your local clone with "),xt=s("a"),oi=a("git_pull()"),ai=a(" and then push your file to the Hub:"),Ua=h(),d(at.$$.fragment),Ia=h(),I=s("p"),li=a("However, if you aren\u2019t ready to push a file yet, you can still use "),Lt=s("a"),si=a("git_add()"),ri=a(" and "),Tt=s("a"),ii=a("git_commit()"),pi=a(" to add and commit your file:"),Ra=h(),d(lt.$$.fragment),Fa=h(),de=s("p"),ni=a("Once you\u2019re ready, push the file to your repository with "),St=s("a"),hi=a("git_push()"),fi=a(":"),Ga=h(),d(st.$$.fragment),Na=h(),Z=s("h2"),me=s("a"),Ko=s("span"),d(rt.$$.fragment),ui=h(),Qo=s("span"),ci=a("Upload with Git LFS"),Ma=h(),Ut=s("p"),di=a("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),Ba=h(),d(it.$$.fragment),Ya=h(),It=s("p"),mi=a("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),Wa=h(),ee=s("h2"),_e=s("a"),Vo=s("span"),d(pt.$$.fragment),_i=h(),Xo=s("span"),gi=a("Upload without Git installed"),za=h(),d(ge.$$.fragment),Ja=h(),R=s("p"),yi=a("If you don\u2019t have Git installed on your system, use the "),Rt=s("a"),vi=a("create_commit()"),wi=a(" function to upload your file. "),Ft=s("a"),bi=a("create_commit()"),Ei=a(" uses the HTTP protocol to upload files to the Hub. Large and binary files are automatically uploaded with the Git LFS protocol."),Ka=h(),ye=s("p"),$i=a("There are two kinds of operations supported by the "),Gt=s("a"),ki=a("create_commit()"),ji=a(" function:"),Qa=h(),ve=s("ul"),nt=s("li"),Nt=s("p"),Zo=s("code"),Ai=a("CommitOperationAdd"),Hi=a(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),qi=h(),ht=s("ul"),Mt=s("li"),ea=s("code"),Pi=a("path_in_repo"),Ci=a(": the repository path to upload a file to."),Oi=h(),Bt=s("li"),ta=s("code"),Di=a("path_or_fileobj"),xi=a(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Li=h(),oa=s("li"),we=s("p"),aa=s("code"),Ti=a("CommitOperationDelete"),Si=a(" removes a file from a repository. This operation accepts "),la=s("code"),Ui=a("path_in_repo"),Ii=a(" as an argument."),Va=h(),Yt=s("p"),Ri=a("For example, if you want to upload two files and delete a file in a Hub repository:"),Xa=h(),Wt=s("ol"),ft=s("li"),Fi=a("Use the appropriate "),sa=s("code"),Gi=a("CommitOperation"),Ni=a(" to add and delete a file:"),Za=h(),d(ut.$$.fragment),el=h(),ct=s("ol"),dt=s("li"),Mi=a("Pass your operations to "),zt=s("a"),Bi=a("create_commit()"),Yi=a(":"),tl=h(),d(mt.$$.fragment),ol=h(),_t=s("p"),Jt=s("a"),Wi=a("create_commit()"),zi=a(" enables each of these other functions:"),al=h(),D=s("ul"),Kt=s("li"),Qt=s("a"),Ji=a("upload_file()"),Ki=a(" uploads a single file to a repository on the Hub."),Qi=h(),Vt=s("li"),Xt=s("a"),Vi=a("upload_folder()"),Xi=a(" uploads a local directory to a repository on the Hub."),Zi=h(),Zt=s("li"),eo=s("a"),ep=a("delete_file()"),tp=a(" deletes a single file from a repository on the Hub."),op=h(),to=s("li"),ra=s("code"),ap=a("metadata_update()"),lp=a(" updates a repository\u2019s metadata."),ll=h(),be=s("p"),sp=a("For more detailed information about these functions, take a look at the "),oo=s("a"),rp=a("HfApi"),ip=a(" reference."),this.h()},l(e){const p=ih('[data-svelte="svelte-1phssyn"]',document.head);c=r(p,"META",{name:!0,content:!0}),p.forEach(o),te=f(e),E=r(e,"H1",{class:!0});var gt=i(E);H=r(gt,"A",{id:!0,class:!0,href:!0});var gp=i(H);N=r(gp,"SPAN",{});var yp=i(N);m(k.$$.fragment,yp),yp.forEach(o),gp.forEach(o),Ae=f(gt),M=r(gt,"SPAN",{});var vp=i(M);L=l(vp,"Upload files to the Hub"),vp.forEach(o),gt.forEach(o),oe=f(e),q=r(e,"P",{});var rl=i(q);T=l(rl,"Sharing your files and work is a very important aspect of the Hub. The "),B=r(rl,"CODE",{});var wp=i(B);He=l(wp,"huggingface_hub"),wp.forEach(o),Y=l(rl," offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),rl.forEach(o),b=f(e),w=r(e,"UL",{});var x=i(w);S=r(x,"LI",{});var il=i(S);vt=l(il,"Upload a file with "),W=r(il,"A",{href:!0});var bp=i(W);Ml=l(bp,"upload_file()"),bp.forEach(o),Bl=l(il,"."),il.forEach(o),Yl=f(x),qe=r(x,"LI",{});var pl=i(qe);Wl=l(pl,"Upload a folder with "),wt=r(pl,"A",{href:!0});var Ep=i(wt);zl=l(Ep,"upload_folder()"),Ep.forEach(o),Jl=l(pl,"."),pl.forEach(o),Kl=f(x),Pe=r(x,"LI",{});var nl=i(Pe);Ql=l(nl,"Push files with a "),po=r(nl,"CODE",{});var $p=i(po);Vl=l($p,"commit"),$p.forEach(o),Xl=l(nl," context manager."),nl.forEach(o),Zl=f(x),Ce=r(x,"LI",{});var hl=i(Ce);es=l(hl,"Push files with the "),bt=r(hl,"A",{href:!0});var kp=i(bt);ts=l(kp,"push_to_hub()"),kp.forEach(o),os=l(hl," function."),hl.forEach(o),as=f(x),Oe=r(x,"LI",{});var fl=i(Oe);ls=l(fl,"Upload very large files with "),De=r(fl,"A",{href:!0,rel:!0});var jp=i(De);ss=l(jp,"Git LFS"),jp.forEach(o),rs=l(fl,"."),fl.forEach(o),is=f(x),xe=r(x,"LI",{});var ul=i(xe);ps=l(ul,"Use "),Et=r(ul,"A",{href:!0});var Ap=i(Et);ns=l(Ap,"create_commit()"),Ap.forEach(o),hs=l(ul," to push files without Git."),ul.forEach(o),x.forEach(o),na=f(e),$t=r(e,"P",{});var Hp=i($t);fs=l(Hp,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Hp.forEach(o),ha=f(e),ae=r(e,"UL",{});var cl=i(ae);Le=r(cl,"LI",{});var dl=i(Le);no=r(dl,"P",{});var qp=i(no);us=l(qp,"Log in to your Hugging Face account with the following command:"),qp.forEach(o),cs=f(dl),m(Te.$$.fragment,dl),dl.forEach(o),ds=f(cl),z=r(cl,"LI",{});var ao=i(z);Se=r(ao,"P",{});var ml=i(Se);ms=l(ml,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),ho=r(ml,"CODE",{});var Pp=i(ho);_s=l(Pp,"notebook_login()"),Pp.forEach(o),gs=l(ml,":"),ml.forEach(o),ys=f(ao),m(Ue.$$.fragment,ao),vs=f(ao),kt=r(ao,"P",{});var pp=i(kt);fo=r(pp,"CODE",{});var Cp=i(fo);ws=l(Cp,"notebook_login()"),Cp.forEach(o),bs=l(pp," launches a widget in your notebook from which you can enter your Hugging Face credentials."),pp.forEach(o),ao.forEach(o),cl.forEach(o),fa=f(e),J=r(e,"H2",{class:!0});var _l=i(J);le=r(_l,"A",{id:!0,class:!0,href:!0});var Op=i(le);uo=r(Op,"SPAN",{});var Dp=i(uo);m(Ie.$$.fragment,Dp),Dp.forEach(o),Op.forEach(o),Es=f(_l),co=r(_l,"SPAN",{});var xp=i(co);$s=l(xp,"Upload a file"),xp.forEach(o),_l.forEach(o),ua=f(e),U=r(e,"P",{});var lo=i(U);ks=l(lo,"Once you\u2019ve created a repository with the "),jt=r(lo,"A",{href:!0});var Lp=i(jt);mo=r(Lp,"CODE",{});var Tp=i(mo);js=l(Tp,"create_repo"),Tp.forEach(o),Lp.forEach(o),As=l(lo," function, you can upload your files to your repository. Use the "),At=r(lo,"A",{href:!0});var Sp=i(At);Hs=l(Sp,"upload_file()"),Sp.forEach(o),qs=l(lo," function to upload a file."),lo.forEach(o),ca=f(e),P=r(e,"P",{});var Ee=i(P);Ps=l(Ee,"Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),_o=r(Ee,"CODE",{});var Up=i(_o);Cs=l(Up,"dataset"),Up.forEach(o),Os=l(Ee,", "),go=r(Ee,"CODE",{});var Ip=i(go);Ds=l(Ip,"model"),Ip.forEach(o),xs=l(Ee," or "),yo=r(Ee,"CODE",{});var Rp=i(yo);Ls=l(Rp,"space"),Rp.forEach(o),Ts=l(Ee,"."),Ee.forEach(o),da=f(e),m(Re.$$.fragment,e),ma=f(e),K=r(e,"H2",{class:!0});var gl=i(K);se=r(gl,"A",{id:!0,class:!0,href:!0});var Fp=i(se);vo=r(Fp,"SPAN",{});var Gp=i(vo);m(Fe.$$.fragment,Gp),Gp.forEach(o),Fp.forEach(o),Ss=f(gl),wo=r(gl,"SPAN",{});var Np=i(wo);Us=l(Np,"Upload a folder"),Np.forEach(o),gl.forEach(o),_a=f(e),j=r(e,"P",{});var F=i(j);Is=l(F,"Use the "),Ht=r(F,"A",{href:!0});var Mp=i(Ht);Rs=l(Mp,"upload_folder()"),Mp.forEach(o),Fs=l(F," function to upload a local folder to a repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),bo=r(F,"CODE",{});var Bp=i(bo);Gs=l(Bp,"dataset"),Bp.forEach(o),Ns=l(F,", "),Eo=r(F,"CODE",{});var Yp=i(Eo);Ms=l(Yp,"model"),Yp.forEach(o),Bs=l(F," or "),$o=r(F,"CODE",{});var Wp=i($o);Ys=l(Wp,"space"),Wp.forEach(o),Ws=l(F,"."),F.forEach(o),ga=f(e),m(Ge.$$.fragment,e),ya=f(e),Q=r(e,"H2",{class:!0});var yl=i(Q);re=r(yl,"A",{id:!0,class:!0,href:!0});var zp=i(re);ko=r(zp,"SPAN",{});var Jp=i(ko);m(Ne.$$.fragment,Jp),Jp.forEach(o),zp.forEach(o),zs=f(yl),jo=r(yl,"SPAN",{});var Kp=i(jo);Js=l(Kp,"commit context manager"),Kp.forEach(o),yl.forEach(o),va=f(e),C=r(e,"P",{});var $e=i(C);Ks=l($e,"The "),Ao=r($e,"CODE",{});var Qp=i(Ao);Qs=l(Qp,"commit"),Qp.forEach(o),Vs=l($e," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Ho=r($e,"CODE",{});var Vp=i(Ho);Xs=l(Vp,"git-lfs"),Vp.forEach(o),Zs=l($e," automatically tracks any file larger than 10MB. In the following example, the "),qo=r($e,"CODE",{});var Xp=i(qo);er=l(Xp,"commit"),Xp.forEach(o),tr=l($e," context manager:"),$e.forEach(o),wa=f(e),O=r(e,"OL",{});var ke=i(O);Me=r(ke,"LI",{});var vl=i(Me);or=l(vl,"Pulls from the "),Po=r(vl,"CODE",{});var Zp=i(Po);ar=l(Zp,"text-files"),Zp.forEach(o),lr=l(vl," repository."),vl.forEach(o),sr=f(ke),Be=r(ke,"LI",{});var wl=i(Be);rr=l(wl,"Adds a change made to "),Co=r(wl,"CODE",{});var en=i(Co);ir=l(en,"file.txt"),en.forEach(o),pr=l(wl,"."),wl.forEach(o),nr=f(ke),Oo=r(ke,"LI",{});var tn=i(Oo);hr=l(tn,"Commits the change."),tn.forEach(o),fr=f(ke),Ye=r(ke,"LI",{});var bl=i(Ye);ur=l(bl,"Pushes the change to the "),Do=r(bl,"CODE",{});var on=i(Do);cr=l(on,"text-files"),on.forEach(o),dr=l(bl," repository."),bl.forEach(o),ke.forEach(o),ba=f(e),m(We.$$.fragment,e),Ea=f(e),qt=r(e,"P",{});var an=i(qt);mr=l(an,"Here is another example of how to save and upload a file to a repository:"),an.forEach(o),$a=f(e),m(ze.$$.fragment,e),ka=f(e),ie=r(e,"P",{});var El=i(ie);_r=l(El,"Set "),xo=r(El,"CODE",{});var ln=i(xo);gr=l(ln,"blocking=False"),ln.forEach(o),yr=l(El," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),El.forEach(o),ja=f(e),m(Je.$$.fragment,e),Aa=f(e),pe=r(e,"P",{});var $l=i(pe);vr=l($l,"You can check the status of your push with the "),Lo=r($l,"CODE",{});var sn=i(Lo);wr=l(sn,"command_queue"),sn.forEach(o),br=l($l," method:"),$l.forEach(o),Ha=f(e),m(Ke.$$.fragment,e),qa=f(e),Pt=r(e,"P",{});var rn=i(Pt);Er=l(rn,"Refer to the table below for the possible statuses:"),rn.forEach(o),Pa=f(e),ne=r(e,"TABLE",{});var kl=i(ne);To=r(kl,"THEAD",{});var pn=i(To);Qe=r(pn,"TR",{});var jl=i(Qe);So=r(jl,"TH",{});var nn=i(So);$r=l(nn,"Status"),nn.forEach(o),kr=f(jl),Uo=r(jl,"TH",{});var hn=i(Uo);jr=l(hn,"Description"),hn.forEach(o),jl.forEach(o),pn.forEach(o),Ar=f(kl),V=r(kl,"TBODY",{});var so=i(V);Ve=r(so,"TR",{});var Al=i(Ve);Io=r(Al,"TD",{});var fn=i(Io);Hr=l(fn,"-1"),fn.forEach(o),qr=f(Al),Ro=r(Al,"TD",{});var un=i(Ro);Pr=l(un,"The push is ongoing."),un.forEach(o),Al.forEach(o),Cr=f(so),Xe=r(so,"TR",{});var Hl=i(Xe);Fo=r(Hl,"TD",{});var cn=i(Fo);Or=l(cn,"0"),cn.forEach(o),Dr=f(Hl),Go=r(Hl,"TD",{});var dn=i(Go);xr=l(dn,"The push has completed successfully."),dn.forEach(o),Hl.forEach(o),Lr=f(so),Ze=r(so,"TR",{});var ql=i(Ze);No=r(ql,"TD",{});var mn=i(No);Tr=l(mn,"Non-zero"),mn.forEach(o),Sr=f(ql),Mo=r(ql,"TD",{});var _n=i(Mo);Ur=l(_n,"An error has occurred."),_n.forEach(o),ql.forEach(o),so.forEach(o),kl.forEach(o),Ca=f(e),he=r(e,"P",{});var Pl=i(he);Ir=l(Pl,"When "),Bo=r(Pl,"CODE",{});var gn=i(Bo);Rr=l(gn,"blocking=False"),gn.forEach(o),Fr=l(Pl,", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Pl.forEach(o),Oa=f(e),m(et.$$.fragment,e),Da=f(e),X=r(e,"H2",{class:!0});var Cl=i(X);fe=r(Cl,"A",{id:!0,class:!0,href:!0});var yn=i(fe);Yo=r(yn,"SPAN",{});var vn=i(Yo);m(tt.$$.fragment,vn),vn.forEach(o),yn.forEach(o),Gr=f(Cl),Wo=r(Cl,"SPAN",{});var wn=i(Wo);Nr=l(wn,"push_to_hub"),wn.forEach(o),Cl.forEach(o),xa=f(e),A=r(e,"P",{});var G=i(A);Mr=l(G,"The "),Ct=r(G,"A",{href:!0});var bn=i(Ct);Br=l(bn,"Repository"),bn.forEach(o),Yr=l(G," class has a "),Ot=r(G,"A",{href:!0});var En=i(Ot);Wr=l(En,"push_to_hub()"),En.forEach(o),zr=l(G," function to add files, make a commit, and push them to a repository. Unlike the "),zo=r(G,"CODE",{});var $n=i(zo);Jr=l($n,"commit"),$n.forEach(o),Kr=l(G," context manager, requires you\u2019ll need to pull from a repository first before calling "),Dt=r(G,"A",{href:!0});var kn=i(Dt);Qr=l(kn,"push_to_hub()"),kn.forEach(o),Vr=l(G,"."),G.forEach(o),La=f(e),ue=r(e,"P",{});var Ol=i(ue);Xr=l(Ol,"For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),Jo=r(Ol,"CODE",{});var jn=i(Jo);Zr=l(jn,"repo"),jn.forEach(o),ei=l(Ol," from the local directory:"),Ol.forEach(o),Ta=f(e),m(ot.$$.fragment,e),Sa=f(e),ce=r(e,"P",{});var Dl=i(ce);ti=l(Dl,"Update your local clone with "),xt=r(Dl,"A",{href:!0});var An=i(xt);oi=l(An,"git_pull()"),An.forEach(o),ai=l(Dl," and then push your file to the Hub:"),Dl.forEach(o),Ua=f(e),m(at.$$.fragment,e),Ia=f(e),I=r(e,"P",{});var ro=i(I);li=l(ro,"However, if you aren\u2019t ready to push a file yet, you can still use "),Lt=r(ro,"A",{href:!0});var Hn=i(Lt);si=l(Hn,"git_add()"),Hn.forEach(o),ri=l(ro," and "),Tt=r(ro,"A",{href:!0});var qn=i(Tt);ii=l(qn,"git_commit()"),qn.forEach(o),pi=l(ro," to add and commit your file:"),ro.forEach(o),Ra=f(e),m(lt.$$.fragment,e),Fa=f(e),de=r(e,"P",{});var xl=i(de);ni=l(xl,"Once you\u2019re ready, push the file to your repository with "),St=r(xl,"A",{href:!0});var Pn=i(St);hi=l(Pn,"git_push()"),Pn.forEach(o),fi=l(xl,":"),xl.forEach(o),Ga=f(e),m(st.$$.fragment,e),Na=f(e),Z=r(e,"H2",{class:!0});var Ll=i(Z);me=r(Ll,"A",{id:!0,class:!0,href:!0});var Cn=i(me);Ko=r(Cn,"SPAN",{});var On=i(Ko);m(rt.$$.fragment,On),On.forEach(o),Cn.forEach(o),ui=f(Ll),Qo=r(Ll,"SPAN",{});var Dn=i(Qo);ci=l(Dn,"Upload with Git LFS"),Dn.forEach(o),Ll.forEach(o),Ma=f(e),Ut=r(e,"P",{});var xn=i(Ut);di=l(xn,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),xn.forEach(o),Ba=f(e),m(it.$$.fragment,e),Ya=f(e),It=r(e,"P",{});var Ln=i(It);mi=l(Ln,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),Ln.forEach(o),Wa=f(e),ee=r(e,"H2",{class:!0});var Tl=i(ee);_e=r(Tl,"A",{id:!0,class:!0,href:!0});var Tn=i(_e);Vo=r(Tn,"SPAN",{});var Sn=i(Vo);m(pt.$$.fragment,Sn),Sn.forEach(o),Tn.forEach(o),_i=f(Tl),Xo=r(Tl,"SPAN",{});var Un=i(Xo);gi=l(Un,"Upload without Git installed"),Un.forEach(o),Tl.forEach(o),za=f(e),m(ge.$$.fragment,e),Ja=f(e),R=r(e,"P",{});var io=i(R);yi=l(io,"If you don\u2019t have Git installed on your system, use the "),Rt=r(io,"A",{href:!0});var In=i(Rt);vi=l(In,"create_commit()"),In.forEach(o),wi=l(io," function to upload your file. "),Ft=r(io,"A",{href:!0});var Rn=i(Ft);bi=l(Rn,"create_commit()"),Rn.forEach(o),Ei=l(io," uses the HTTP protocol to upload files to the Hub. Large and binary files are automatically uploaded with the Git LFS protocol."),io.forEach(o),Ka=f(e),ye=r(e,"P",{});var Sl=i(ye);$i=l(Sl,"There are two kinds of operations supported by the "),Gt=r(Sl,"A",{href:!0});var Fn=i(Gt);ki=l(Fn,"create_commit()"),Fn.forEach(o),ji=l(Sl," function:"),Sl.forEach(o),Qa=f(e),ve=r(e,"UL",{});var Ul=i(ve);nt=r(Ul,"LI",{});var Il=i(nt);Nt=r(Il,"P",{});var np=i(Nt);Zo=r(np,"CODE",{});var Gn=i(Zo);Ai=l(Gn,"CommitOperationAdd"),Gn.forEach(o),Hi=l(np," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),np.forEach(o),qi=f(Il),ht=r(Il,"UL",{});var Rl=i(ht);Mt=r(Rl,"LI",{});var hp=i(Mt);ea=r(hp,"CODE",{});var Nn=i(ea);Pi=l(Nn,"path_in_repo"),Nn.forEach(o),Ci=l(hp,": the repository path to upload a file to."),hp.forEach(o),Oi=f(Rl),Bt=r(Rl,"LI",{});var fp=i(Bt);ta=r(fp,"CODE",{});var Mn=i(ta);Di=l(Mn,"path_or_fileobj"),Mn.forEach(o),xi=l(fp,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),fp.forEach(o),Rl.forEach(o),Il.forEach(o),Li=f(Ul),oa=r(Ul,"LI",{});var Bn=i(oa);we=r(Bn,"P",{});var ia=i(we);aa=r(ia,"CODE",{});var Yn=i(aa);Ti=l(Yn,"CommitOperationDelete"),Yn.forEach(o),Si=l(ia," removes a file from a repository. This operation accepts "),la=r(ia,"CODE",{});var Wn=i(la);Ui=l(Wn,"path_in_repo"),Wn.forEach(o),Ii=l(ia," as an argument."),ia.forEach(o),Bn.forEach(o),Ul.forEach(o),Va=f(e),Yt=r(e,"P",{});var zn=i(Yt);Ri=l(zn,"For example, if you want to upload two files and delete a file in a Hub repository:"),zn.forEach(o),Xa=f(e),Wt=r(e,"OL",{});var Jn=i(Wt);ft=r(Jn,"LI",{});var Fl=i(ft);Fi=l(Fl,"Use the appropriate "),sa=r(Fl,"CODE",{});var Kn=i(sa);Gi=l(Kn,"CommitOperation"),Kn.forEach(o),Ni=l(Fl," to add and delete a file:"),Fl.forEach(o),Jn.forEach(o),Za=f(e),m(ut.$$.fragment,e),el=f(e),ct=r(e,"OL",{start:!0});var Qn=i(ct);dt=r(Qn,"LI",{});var Gl=i(dt);Mi=l(Gl,"Pass your operations to "),zt=r(Gl,"A",{href:!0});var Vn=i(zt);Bi=l(Vn,"create_commit()"),Vn.forEach(o),Yi=l(Gl,":"),Gl.forEach(o),Qn.forEach(o),tl=f(e),m(mt.$$.fragment,e),ol=f(e),_t=r(e,"P",{});var up=i(_t);Jt=r(up,"A",{href:!0});var Xn=i(Jt);Wi=l(Xn,"create_commit()"),Xn.forEach(o),zi=l(up," enables each of these other functions:"),up.forEach(o),al=f(e),D=r(e,"UL",{});var je=i(D);Kt=r(je,"LI",{});var cp=i(Kt);Qt=r(cp,"A",{href:!0});var Zn=i(Qt);Ji=l(Zn,"upload_file()"),Zn.forEach(o),Ki=l(cp," uploads a single file to a repository on the Hub."),cp.forEach(o),Qi=f(je),Vt=r(je,"LI",{});var dp=i(Vt);Xt=r(dp,"A",{href:!0});var eh=i(Xt);Vi=l(eh,"upload_folder()"),eh.forEach(o),Xi=l(dp," uploads a local directory to a repository on the Hub."),dp.forEach(o),Zi=f(je),Zt=r(je,"LI",{});var mp=i(Zt);eo=r(mp,"A",{href:!0});var th=i(eo);ep=l(th,"delete_file()"),th.forEach(o),tp=l(mp," deletes a single file from a repository on the Hub."),mp.forEach(o),op=f(je),to=r(je,"LI",{});var _p=i(to);ra=r(_p,"CODE",{});var oh=i(ra);ap=l(oh,"metadata_update()"),oh.forEach(o),lp=l(_p," updates a repository\u2019s metadata."),_p.forEach(o),je.forEach(o),ll=f(e),be=r(e,"P",{});var Nl=i(be);sp=l(Nl,"For more detailed information about these functions, take a look at the "),oo=r(Nl,"A",{href:!0});var ah=i(oo);rp=l(ah,"HfApi"),ah.forEach(o),ip=l(Nl," reference."),Nl.forEach(o),this.h()},h(){u(c,"name","hf:doc:metadata"),u(c,"content",JSON.stringify(uh)),u(H,"id","upload-files-to-the-hub"),u(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(H,"href","#upload-files-to-the-hub"),u(E,"class","relative group"),u(W,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(wt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(bt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(De,"href","https://git-lfs.github.com/"),u(De,"rel","nofollow"),u(Et,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(le,"id","upload-a-file"),u(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(le,"href","#upload-a-file"),u(J,"class","relative group"),u(jt,"href","./how-to-manage#create-a-repository"),u(At,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(se,"id","upload-a-folder"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#upload-a-folder"),u(K,"class","relative group"),u(Ht,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(re,"id","commit-context-manager"),u(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(re,"href","#commit-context-manager"),u(Q,"class","relative group"),u(fe,"id","pushtohub"),u(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(fe,"href","#pushtohub"),u(X,"class","relative group"),u(Ct,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository"),u(Ot,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(Dt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(xt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_pull"),u(Lt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_add"),u(Tt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_commit"),u(St,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_push"),u(me,"id","upload-with-git-lfs"),u(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(me,"href","#upload-with-git-lfs"),u(Z,"class","relative group"),u(_e,"id","upload-without-git-installed"),u(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_e,"href","#upload-without-git-installed"),u(ee,"class","relative group"),u(Rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Ft,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Gt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(zt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(ct,"start","2"),u(Jt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Qt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(Xt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(eo,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),u(oo,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi")},m(e,p){t(document.head,c),n(e,te,p),n(e,E,p),t(E,H),t(H,N),_(k,N,null),t(E,Ae),t(E,M),t(M,L),n(e,oe,p),n(e,q,p),t(q,T),t(q,B),t(B,He),t(q,Y),n(e,b,p),n(e,w,p),t(w,S),t(S,vt),t(S,W),t(W,Ml),t(S,Bl),t(w,Yl),t(w,qe),t(qe,Wl),t(qe,wt),t(wt,zl),t(qe,Jl),t(w,Kl),t(w,Pe),t(Pe,Ql),t(Pe,po),t(po,Vl),t(Pe,Xl),t(w,Zl),t(w,Ce),t(Ce,es),t(Ce,bt),t(bt,ts),t(Ce,os),t(w,as),t(w,Oe),t(Oe,ls),t(Oe,De),t(De,ss),t(Oe,rs),t(w,is),t(w,xe),t(xe,ps),t(xe,Et),t(Et,ns),t(xe,hs),n(e,na,p),n(e,$t,p),t($t,fs),n(e,ha,p),n(e,ae,p),t(ae,Le),t(Le,no),t(no,us),t(Le,cs),_(Te,Le,null),t(ae,ds),t(ae,z),t(z,Se),t(Se,ms),t(Se,ho),t(ho,_s),t(Se,gs),t(z,ys),_(Ue,z,null),t(z,vs),t(z,kt),t(kt,fo),t(fo,ws),t(kt,bs),n(e,fa,p),n(e,J,p),t(J,le),t(le,uo),_(Ie,uo,null),t(J,Es),t(J,co),t(co,$s),n(e,ua,p),n(e,U,p),t(U,ks),t(U,jt),t(jt,mo),t(mo,js),t(U,As),t(U,At),t(At,Hs),t(U,qs),n(e,ca,p),n(e,P,p),t(P,Ps),t(P,_o),t(_o,Cs),t(P,Os),t(P,go),t(go,Ds),t(P,xs),t(P,yo),t(yo,Ls),t(P,Ts),n(e,da,p),_(Re,e,p),n(e,ma,p),n(e,K,p),t(K,se),t(se,vo),_(Fe,vo,null),t(K,Ss),t(K,wo),t(wo,Us),n(e,_a,p),n(e,j,p),t(j,Is),t(j,Ht),t(Ht,Rs),t(j,Fs),t(j,bo),t(bo,Gs),t(j,Ns),t(j,Eo),t(Eo,Ms),t(j,Bs),t(j,$o),t($o,Ys),t(j,Ws),n(e,ga,p),_(Ge,e,p),n(e,ya,p),n(e,Q,p),t(Q,re),t(re,ko),_(Ne,ko,null),t(Q,zs),t(Q,jo),t(jo,Js),n(e,va,p),n(e,C,p),t(C,Ks),t(C,Ao),t(Ao,Qs),t(C,Vs),t(C,Ho),t(Ho,Xs),t(C,Zs),t(C,qo),t(qo,er),t(C,tr),n(e,wa,p),n(e,O,p),t(O,Me),t(Me,or),t(Me,Po),t(Po,ar),t(Me,lr),t(O,sr),t(O,Be),t(Be,rr),t(Be,Co),t(Co,ir),t(Be,pr),t(O,nr),t(O,Oo),t(Oo,hr),t(O,fr),t(O,Ye),t(Ye,ur),t(Ye,Do),t(Do,cr),t(Ye,dr),n(e,ba,p),_(We,e,p),n(e,Ea,p),n(e,qt,p),t(qt,mr),n(e,$a,p),_(ze,e,p),n(e,ka,p),n(e,ie,p),t(ie,_r),t(ie,xo),t(xo,gr),t(ie,yr),n(e,ja,p),_(Je,e,p),n(e,Aa,p),n(e,pe,p),t(pe,vr),t(pe,Lo),t(Lo,wr),t(pe,br),n(e,Ha,p),_(Ke,e,p),n(e,qa,p),n(e,Pt,p),t(Pt,Er),n(e,Pa,p),n(e,ne,p),t(ne,To),t(To,Qe),t(Qe,So),t(So,$r),t(Qe,kr),t(Qe,Uo),t(Uo,jr),t(ne,Ar),t(ne,V),t(V,Ve),t(Ve,Io),t(Io,Hr),t(Ve,qr),t(Ve,Ro),t(Ro,Pr),t(V,Cr),t(V,Xe),t(Xe,Fo),t(Fo,Or),t(Xe,Dr),t(Xe,Go),t(Go,xr),t(V,Lr),t(V,Ze),t(Ze,No),t(No,Tr),t(Ze,Sr),t(Ze,Mo),t(Mo,Ur),n(e,Ca,p),n(e,he,p),t(he,Ir),t(he,Bo),t(Bo,Rr),t(he,Fr),n(e,Oa,p),_(et,e,p),n(e,Da,p),n(e,X,p),t(X,fe),t(fe,Yo),_(tt,Yo,null),t(X,Gr),t(X,Wo),t(Wo,Nr),n(e,xa,p),n(e,A,p),t(A,Mr),t(A,Ct),t(Ct,Br),t(A,Yr),t(A,Ot),t(Ot,Wr),t(A,zr),t(A,zo),t(zo,Jr),t(A,Kr),t(A,Dt),t(Dt,Qr),t(A,Vr),n(e,La,p),n(e,ue,p),t(ue,Xr),t(ue,Jo),t(Jo,Zr),t(ue,ei),n(e,Ta,p),_(ot,e,p),n(e,Sa,p),n(e,ce,p),t(ce,ti),t(ce,xt),t(xt,oi),t(ce,ai),n(e,Ua,p),_(at,e,p),n(e,Ia,p),n(e,I,p),t(I,li),t(I,Lt),t(Lt,si),t(I,ri),t(I,Tt),t(Tt,ii),t(I,pi),n(e,Ra,p),_(lt,e,p),n(e,Fa,p),n(e,de,p),t(de,ni),t(de,St),t(St,hi),t(de,fi),n(e,Ga,p),_(st,e,p),n(e,Na,p),n(e,Z,p),t(Z,me),t(me,Ko),_(rt,Ko,null),t(Z,ui),t(Z,Qo),t(Qo,ci),n(e,Ma,p),n(e,Ut,p),t(Ut,di),n(e,Ba,p),_(it,e,p),n(e,Ya,p),n(e,It,p),t(It,mi),n(e,Wa,p),n(e,ee,p),t(ee,_e),t(_e,Vo),_(pt,Vo,null),t(ee,_i),t(ee,Xo),t(Xo,gi),n(e,za,p),_(ge,e,p),n(e,Ja,p),n(e,R,p),t(R,yi),t(R,Rt),t(Rt,vi),t(R,wi),t(R,Ft),t(Ft,bi),t(R,Ei),n(e,Ka,p),n(e,ye,p),t(ye,$i),t(ye,Gt),t(Gt,ki),t(ye,ji),n(e,Qa,p),n(e,ve,p),t(ve,nt),t(nt,Nt),t(Nt,Zo),t(Zo,Ai),t(Nt,Hi),t(nt,qi),t(nt,ht),t(ht,Mt),t(Mt,ea),t(ea,Pi),t(Mt,Ci),t(ht,Oi),t(ht,Bt),t(Bt,ta),t(ta,Di),t(Bt,xi),t(ve,Li),t(ve,oa),t(oa,we),t(we,aa),t(aa,Ti),t(we,Si),t(we,la),t(la,Ui),t(we,Ii),n(e,Va,p),n(e,Yt,p),t(Yt,Ri),n(e,Xa,p),n(e,Wt,p),t(Wt,ft),t(ft,Fi),t(ft,sa),t(sa,Gi),t(ft,Ni),n(e,Za,p),_(ut,e,p),n(e,el,p),n(e,ct,p),t(ct,dt),t(dt,Mi),t(dt,zt),t(zt,Bi),t(dt,Yi),n(e,tl,p),_(mt,e,p),n(e,ol,p),n(e,_t,p),t(_t,Jt),t(Jt,Wi),t(_t,zi),n(e,al,p),n(e,D,p),t(D,Kt),t(Kt,Qt),t(Qt,Ji),t(Kt,Ki),t(D,Qi),t(D,Vt),t(Vt,Xt),t(Xt,Vi),t(Vt,Xi),t(D,Zi),t(D,Zt),t(Zt,eo),t(eo,ep),t(Zt,tp),t(D,op),t(D,to),t(to,ra),t(ra,ap),t(to,lp),n(e,ll,p),n(e,be,p),t(be,sp),t(be,oo),t(oo,rp),t(be,ip),sl=!0},p(e,[p]){const gt={};p&2&&(gt.$$scope={dirty:p,ctx:e}),ge.$set(gt)},i(e){sl||(g(k.$$.fragment,e),g(Te.$$.fragment,e),g(Ue.$$.fragment,e),g(Ie.$$.fragment,e),g(Re.$$.fragment,e),g(Fe.$$.fragment,e),g(Ge.$$.fragment,e),g(Ne.$$.fragment,e),g(We.$$.fragment,e),g(ze.$$.fragment,e),g(Je.$$.fragment,e),g(Ke.$$.fragment,e),g(et.$$.fragment,e),g(tt.$$.fragment,e),g(ot.$$.fragment,e),g(at.$$.fragment,e),g(lt.$$.fragment,e),g(st.$$.fragment,e),g(rt.$$.fragment,e),g(it.$$.fragment,e),g(pt.$$.fragment,e),g(ge.$$.fragment,e),g(ut.$$.fragment,e),g(mt.$$.fragment,e),sl=!0)},o(e){y(k.$$.fragment,e),y(Te.$$.fragment,e),y(Ue.$$.fragment,e),y(Ie.$$.fragment,e),y(Re.$$.fragment,e),y(Fe.$$.fragment,e),y(Ge.$$.fragment,e),y(Ne.$$.fragment,e),y(We.$$.fragment,e),y(ze.$$.fragment,e),y(Je.$$.fragment,e),y(Ke.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(ot.$$.fragment,e),y(at.$$.fragment,e),y(lt.$$.fragment,e),y(st.$$.fragment,e),y(rt.$$.fragment,e),y(it.$$.fragment,e),y(pt.$$.fragment,e),y(ge.$$.fragment,e),y(ut.$$.fragment,e),y(mt.$$.fragment,e),sl=!1},d(e){o(c),e&&o(te),e&&o(E),v(k),e&&o(oe),e&&o(q),e&&o(b),e&&o(w),e&&o(na),e&&o($t),e&&o(ha),e&&o(ae),v(Te),v(Ue),e&&o(fa),e&&o(J),v(Ie),e&&o(ua),e&&o(U),e&&o(ca),e&&o(P),e&&o(da),v(Re,e),e&&o(ma),e&&o(K),v(Fe),e&&o(_a),e&&o(j),e&&o(ga),v(Ge,e),e&&o(ya),e&&o(Q),v(Ne),e&&o(va),e&&o(C),e&&o(wa),e&&o(O),e&&o(ba),v(We,e),e&&o(Ea),e&&o(qt),e&&o($a),v(ze,e),e&&o(ka),e&&o(ie),e&&o(ja),v(Je,e),e&&o(Aa),e&&o(pe),e&&o(Ha),v(Ke,e),e&&o(qa),e&&o(Pt),e&&o(Pa),e&&o(ne),e&&o(Ca),e&&o(he),e&&o(Oa),v(et,e),e&&o(Da),e&&o(X),v(tt),e&&o(xa),e&&o(A),e&&o(La),e&&o(ue),e&&o(Ta),v(ot,e),e&&o(Sa),e&&o(ce),e&&o(Ua),v(at,e),e&&o(Ia),e&&o(I),e&&o(Ra),v(lt,e),e&&o(Fa),e&&o(de),e&&o(Ga),v(st,e),e&&o(Na),e&&o(Z),v(rt),e&&o(Ma),e&&o(Ut),e&&o(Ba),v(it,e),e&&o(Ya),e&&o(It),e&&o(Wa),e&&o(ee),v(pt),e&&o(za),v(ge,e),e&&o(Ja),e&&o(R),e&&o(Ka),e&&o(ye),e&&o(Qa),e&&o(ve),e&&o(Va),e&&o(Yt),e&&o(Xa),e&&o(Wt),e&&o(Za),v(ut,e),e&&o(el),e&&o(ct),e&&o(tl),v(mt,e),e&&o(ol),e&&o(_t),e&&o(al),e&&o(D),e&&o(ll),e&&o(be)}}}const uh={local:"upload-files-to-the-hub",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"},{local:"upload-without-git-installed",title:"Upload without Git installed"}],title:"Upload files to the Hub"};function ch(pa){return ph(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class yh extends lh{constructor(c){super();sh(this,c,ch,fh,rh,{})}}export{yh as default,uh as metadata};
