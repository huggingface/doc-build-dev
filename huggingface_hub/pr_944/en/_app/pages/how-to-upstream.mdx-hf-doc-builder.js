import{S as xn,i as On,s as Tn,e as a,k as h,w as c,t as r,M as Dn,c as l,d as o,m as f,a as s,x as m,h as i,b as u,G as t,g as p,y as d,L as Sn,q as _,o as g,B as y,v as In}from"../chunks/vendor-hf-doc-builder.js";import{I as Pt}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as b}from"../chunks/CodeBlock-hf-doc-builder.js";function Rn(li){let C,jo,L,R,xt,se,Xa,Ot,Za,Ao,U,el,Tt,tl,ol,Ho,w,re,al,We,ll,sl,rl,ie,il,Dt,nl,pl,hl,ne,fl,Je,ul,cl,ml,pe,dl,he,_l,gl,yl,fe,vl,ze,wl,bl,qo,Ke,El,Co,F,ue,St,$l,kl,ce,jl,P,me,Al,It,Hl,ql,Cl,de,Ll,Qe,Rt,Pl,xl,Lo,x,G,Ut,_e,Ol,Ft,Tl,Po,N,Dl,Ve,Sl,Il,xo,ge,Oo,O,M,Gt,ye,Rl,Nt,Ul,To,E,Fl,Mt,Gl,Nl,Bt,Ml,Bl,Yt,Yl,Wl,Do,$,ve,Jl,Wt,zl,Kl,Ql,we,Vl,Jt,Xl,Zl,es,zt,ts,os,be,as,Kt,ls,ss,So,Ee,Io,Xe,rs,Ro,$e,Uo,B,is,Qt,ns,ps,Fo,ke,Go,Y,hs,Vt,fs,us,No,je,Mo,Ze,cs,Bo,W,Xt,Ae,Zt,ms,ds,eo,_s,gs,T,He,to,ys,vs,oo,ws,bs,qe,ao,Es,$s,lo,ks,js,Ce,so,As,Hs,ro,qs,Yo,J,Cs,io,Ls,Ps,Wo,Le,Jo,D,z,no,Pe,xs,po,Os,zo,v,Ts,et,Ds,Ss,tt,Is,Rs,ho,Us,Fs,ot,Gs,Ns,at,Ms,Bs,Ko,xe,Qo,A,Ys,lt,Ws,Js,st,zs,Ks,Vo,Oe,Xo,K,Qs,rt,Vs,Xs,Zo,Te,ea,S,Q,fo,De,Zs,uo,er,ta,it,tr,oa,Se,aa,nt,or,la,I,V,co,Ie,ar,mo,lr,sa,H,sr,pt,rr,ir,ht,nr,pr,ra,X,hr,ft,fr,ur,ia,Z,Re,ut,_o,cr,mr,dr,Ue,ct,go,_r,gr,yr,mt,yo,vr,wr,br,vo,ee,wo,Er,$r,bo,kr,jr,na,dt,Ar,pa,_t,Fe,Hr,Eo,qr,Cr,ha,Ge,fa,Ne,Me,Lr,gt,Pr,xr,ua,Be,ca,Ye,yt,Or,Tr,ma,k,vt,wt,Dr,Sr,Ir,bt,Et,Rr,Ur,Fr,$t,kt,Gr,Nr,Mr,jt,$o,Br,Yr,da,te,Wr,At,Jr,zr,_a;return se=new Pt({}),ce=new b({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),de=new b({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),_e=new Pt({}),ge=new b({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(path_or_fileobj="/home/lysandre/dummy-test/README.md", 
                path_in_repo="README.md", 
                repo_id="lysandre/test-model",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(path_or_fileobj=<span class="hljs-string">&quot;/home/lysandre/dummy-test/README.md&quot;</span>, 
<span class="hljs-meta">... </span>                path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>                repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>)`}}),ye=new Pt({}),Ee=new b({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),$e=new b({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),ke=new b({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),je=new b({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),Le=new b({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),Pe=new Pt({}),xe=new b({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")
repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),Oe=new b({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),Te=new b({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),De=new Pt({}),Se=new b({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),Ie=new Pt({}),Ge=new b({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),Be=new b({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){C=a("meta"),jo=h(),L=a("h1"),R=a("a"),xt=a("span"),c(se.$$.fragment),Xa=h(),Ot=a("span"),Za=r("Upload files to the Hub"),Ao=h(),U=a("p"),el=r("Sharing your files and work is a very important aspect of the Hub. The "),Tt=a("code"),tl=r("huggingface_hub"),ol=r(" uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),Ho=h(),w=a("ul"),re=a("li"),al=r("Upload a file with "),We=a("a"),ll=r("upload_file()"),sl=r("."),rl=h(),ie=a("li"),il=r("Push files with a "),Dt=a("code"),nl=r("commit"),pl=r(" context manager."),hl=h(),ne=a("li"),fl=r("Push files with the "),Je=a("a"),ul=r("push_to_hub()"),cl=r(" function."),ml=h(),pe=a("li"),dl=r("Upload very large files with "),he=a("a"),_l=r("Git LFS"),gl=r("."),yl=h(),fe=a("li"),vl=r("Use "),ze=a("a"),wl=r("create_commit()"),bl=r(" to push files without Git."),qo=h(),Ke=a("p"),El=r("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Co=h(),F=a("ol"),ue=a("li"),St=a("p"),$l=r("Log in to your Hugging Face account with the following command:"),kl=h(),c(ce.$$.fragment),jl=h(),P=a("li"),me=a("p"),Al=r("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),It=a("code"),Hl=r("notebook_login()"),ql=r(":"),Cl=h(),c(de.$$.fragment),Ll=h(),Qe=a("p"),Rt=a("code"),Pl=r("notebook_login()"),xl=r(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Lo=h(),x=a("h2"),G=a("a"),Ut=a("span"),c(_e.$$.fragment),Ol=h(),Ft=a("span"),Tl=r("Upload a file"),Po=h(),N=a("p"),Dl=r("Use the "),Ve=a("a"),Sl=r("upload_file()"),Il=r(" function to upload a file to a repository. Let the function know where the file you want to upload is, where you want to upload the file to in the repository, and the name of the repository you want to add the file to."),xo=h(),c(ge.$$.fragment),Oo=h(),O=a("h2"),M=a("a"),Gt=a("span"),c(ye.$$.fragment),Rl=h(),Nt=a("span"),Ul=r("commit context manager"),To=h(),E=a("p"),Fl=r("The "),Mt=a("code"),Gl=r("commit"),Nl=r(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Bt=a("code"),Ml=r("git-lfs"),Bl=r(" automatically tracks any file larger than 10MB. In the following example, the "),Yt=a("code"),Yl=r("commit"),Wl=r(" context manager:"),Do=h(),$=a("ol"),ve=a("li"),Jl=r("Pulls from the "),Wt=a("code"),zl=r("text-files"),Kl=r(" repository."),Ql=h(),we=a("li"),Vl=r("Adds a change made to "),Jt=a("code"),Xl=r("file.txt"),Zl=r("."),es=h(),zt=a("li"),ts=r("Commits the change."),os=h(),be=a("li"),as=r("Pushes the change to the "),Kt=a("code"),ls=r("text-files"),ss=r(" repository."),So=h(),c(Ee.$$.fragment),Io=h(),Xe=a("p"),rs=r("Here is another example of how to save and upload a file to a repository:"),Ro=h(),c($e.$$.fragment),Uo=h(),B=a("p"),is=r("Set "),Qt=a("code"),ns=r("blocking=False"),ps=r(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Fo=h(),c(ke.$$.fragment),Go=h(),Y=a("p"),hs=r("You can check the status of your push with the "),Vt=a("code"),fs=r("command_queue"),us=r(" method:"),No=h(),c(je.$$.fragment),Mo=h(),Ze=a("p"),cs=r("Refer to the table below for the possible statuses:"),Bo=h(),W=a("table"),Xt=a("thead"),Ae=a("tr"),Zt=a("th"),ms=r("Status"),ds=h(),eo=a("th"),_s=r("Description"),gs=h(),T=a("tbody"),He=a("tr"),to=a("td"),ys=r("-1"),vs=h(),oo=a("td"),ws=r("The push is ongoing."),bs=h(),qe=a("tr"),ao=a("td"),Es=r("0"),$s=h(),lo=a("td"),ks=r("The push has completed successfully."),js=h(),Ce=a("tr"),so=a("td"),As=r("Non-zero"),Hs=h(),ro=a("td"),qs=r("An error has occurred."),Yo=h(),J=a("p"),Cs=r("When "),io=a("code"),Ls=r("blocking=False"),Ps=r(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Wo=h(),c(Le.$$.fragment),Jo=h(),D=a("h2"),z=a("a"),no=a("span"),c(Pe.$$.fragment),xs=h(),po=a("span"),Os=r("push_to_hub"),zo=h(),v=a("p"),Ts=r("The "),et=a("a"),Ds=r("Repository"),Ss=r(" class also has a "),tt=a("a"),Is=r("push_to_hub()"),Rs=r(" function to add files, make a commit, and push them to a repository. Unlike the "),ho=a("code"),Us=r("commit"),Fs=r(" context manager, "),ot=a("a"),Gs=r("push_to_hub()"),Ns=r(" requires you to pull from a repository first, save the files, and then call "),at=a("a"),Ms=r("push_to_hub()"),Bs=r("."),Ko=h(),c(xe.$$.fragment),Qo=h(),A=a("p"),Ys=r("However, if you aren\u2019t ready to push a file yet, you can still use "),lt=a("a"),Ws=r("git_add()"),Js=r(" and "),st=a("a"),zs=r("git_commit()"),Ks=r(" to add and commit your file:"),Vo=h(),c(Oe.$$.fragment),Xo=h(),K=a("p"),Qs=r("Once you\u2019re ready, you can push your file to your repository with "),rt=a("a"),Vs=r("git_push()"),Xs=r(":"),Zo=h(),c(Te.$$.fragment),ea=h(),S=a("h2"),Q=a("a"),fo=a("span"),c(De.$$.fragment),Zs=h(),uo=a("span"),er=r("Upload with Git LFS"),ta=h(),it=a("p"),tr=r("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),oa=h(),c(Se.$$.fragment),aa=h(),nt=a("p"),or=r("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),la=h(),I=a("h2"),V=a("a"),co=a("span"),c(Ie.$$.fragment),ar=h(),mo=a("span"),lr=r("Upload without Git installed"),sa=h(),H=a("p"),sr=r("If you don\u2019t have Git installed on your system, use the "),pt=a("a"),rr=r("create_commit()"),ir=r(" function to upload your file. "),ht=a("a"),nr=r("create_commit()"),pr=r(" uses the HTTP protocol to upload files to the Hub. Large files and binary files are automatically uploaded with the Git LFS protocol."),ra=h(),X=a("p"),hr=r("There are two kinds of operations supported by the "),ft=a("a"),fr=r("create_commit()"),ur=r(" function:"),ia=h(),Z=a("ul"),Re=a("li"),ut=a("p"),_o=a("code"),cr=r("CommitOperationAdd"),mr=r(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),dr=h(),Ue=a("ul"),ct=a("li"),go=a("code"),_r=r("path_in_repo"),gr=r(": the repository path to upload a file to."),yr=h(),mt=a("li"),yo=a("code"),vr=r("path_or_fileobj"),wr=r(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),br=h(),vo=a("li"),ee=a("p"),wo=a("code"),Er=r("CommitOperationDelete"),$r=r(" removes a file from a repository. This operation accepts "),bo=a("code"),kr=r("path_in_repo"),jr=r(" as an argument."),na=h(),dt=a("p"),Ar=r("For example, if you want to upload two files and delete a file in a Hub repository:"),pa=h(),_t=a("ol"),Fe=a("li"),Hr=r("Use the appropriate "),Eo=a("code"),qr=r("CommitOperation"),Cr=r(" to add and delete a file:"),ha=h(),c(Ge.$$.fragment),fa=h(),Ne=a("ol"),Me=a("li"),Lr=r("Pass your operations to "),gt=a("a"),Pr=r("create_commit()"),xr=r(":"),ua=h(),c(Be.$$.fragment),ca=h(),Ye=a("p"),yt=a("a"),Or=r("create_commit()"),Tr=r(" is the underlying function behind each of these:"),ma=h(),k=a("ul"),vt=a("li"),wt=a("a"),Dr=r("upload_file()"),Sr=r(" uploads a single file to a repository on the Hub."),Ir=h(),bt=a("li"),Et=a("a"),Rr=r("upload_folder()"),Ur=r(" uploads a local directory to a repository on the Hub."),Fr=h(),$t=a("li"),kt=a("a"),Gr=r("delete_file()"),Nr=r(" deletes a single file from a repository on the Hub."),Mr=h(),jt=a("li"),$o=a("code"),Br=r("metadata_update()"),Yr=r(" updates a repository\u2019s metadata."),da=h(),te=a("p"),Wr=r("For more detailed information about these functions, take a look at the "),At=a("a"),Jr=r("HfApi"),zr=r(" reference."),this.h()},l(e){const n=Dn('[data-svelte="svelte-1phssyn"]',document.head);C=l(n,"META",{name:!0,content:!0}),n.forEach(o),jo=f(e),L=l(e,"H1",{class:!0});var ga=s(L);R=l(ga,"A",{id:!0,class:!0,href:!0});var si=s(R);xt=l(si,"SPAN",{});var ri=s(xt);m(se.$$.fragment,ri),ri.forEach(o),si.forEach(o),Xa=f(ga),Ot=l(ga,"SPAN",{});var ii=s(Ot);Za=i(ii,"Upload files to the Hub"),ii.forEach(o),ga.forEach(o),Ao=f(e),U=l(e,"P",{});var ya=s(U);el=i(ya,"Sharing your files and work is a very important aspect of the Hub. The "),Tt=l(ya,"CODE",{});var ni=s(Tt);tl=i(ni,"huggingface_hub"),ni.forEach(o),ol=i(ya," uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),ya.forEach(o),Ho=f(e),w=l(e,"UL",{});var q=s(w);re=l(q,"LI",{});var va=s(re);al=i(va,"Upload a file with "),We=l(va,"A",{href:!0});var pi=s(We);ll=i(pi,"upload_file()"),pi.forEach(o),sl=i(va,"."),va.forEach(o),rl=f(q),ie=l(q,"LI",{});var wa=s(ie);il=i(wa,"Push files with a "),Dt=l(wa,"CODE",{});var hi=s(Dt);nl=i(hi,"commit"),hi.forEach(o),pl=i(wa," context manager."),wa.forEach(o),hl=f(q),ne=l(q,"LI",{});var ba=s(ne);fl=i(ba,"Push files with the "),Je=l(ba,"A",{href:!0});var fi=s(Je);ul=i(fi,"push_to_hub()"),fi.forEach(o),cl=i(ba," function."),ba.forEach(o),ml=f(q),pe=l(q,"LI",{});var Ea=s(pe);dl=i(Ea,"Upload very large files with "),he=l(Ea,"A",{href:!0,rel:!0});var ui=s(he);_l=i(ui,"Git LFS"),ui.forEach(o),gl=i(Ea,"."),Ea.forEach(o),yl=f(q),fe=l(q,"LI",{});var $a=s(fe);vl=i($a,"Use "),ze=l($a,"A",{href:!0});var ci=s(ze);wl=i(ci,"create_commit()"),ci.forEach(o),bl=i($a," to push files without Git."),$a.forEach(o),q.forEach(o),qo=f(e),Ke=l(e,"P",{});var mi=s(Ke);El=i(mi,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),mi.forEach(o),Co=f(e),F=l(e,"OL",{});var ka=s(F);ue=l(ka,"LI",{});var ja=s(ue);St=l(ja,"P",{});var di=s(St);$l=i(di,"Log in to your Hugging Face account with the following command:"),di.forEach(o),kl=f(ja),m(ce.$$.fragment,ja),ja.forEach(o),jl=f(ka),P=l(ka,"LI",{});var Ht=s(P);me=l(Ht,"P",{});var Aa=s(me);Al=i(Aa,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),It=l(Aa,"CODE",{});var _i=s(It);Hl=i(_i,"notebook_login()"),_i.forEach(o),ql=i(Aa,":"),Aa.forEach(o),Cl=f(Ht),m(de.$$.fragment,Ht),Ll=f(Ht),Qe=l(Ht,"P",{});var Kr=s(Qe);Rt=l(Kr,"CODE",{});var gi=s(Rt);Pl=i(gi,"notebook_login()"),gi.forEach(o),xl=i(Kr," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Kr.forEach(o),Ht.forEach(o),ka.forEach(o),Lo=f(e),x=l(e,"H2",{class:!0});var Ha=s(x);G=l(Ha,"A",{id:!0,class:!0,href:!0});var yi=s(G);Ut=l(yi,"SPAN",{});var vi=s(Ut);m(_e.$$.fragment,vi),vi.forEach(o),yi.forEach(o),Ol=f(Ha),Ft=l(Ha,"SPAN",{});var wi=s(Ft);Tl=i(wi,"Upload a file"),wi.forEach(o),Ha.forEach(o),Po=f(e),N=l(e,"P",{});var qa=s(N);Dl=i(qa,"Use the "),Ve=l(qa,"A",{href:!0});var bi=s(Ve);Sl=i(bi,"upload_file()"),bi.forEach(o),Il=i(qa," function to upload a file to a repository. Let the function know where the file you want to upload is, where you want to upload the file to in the repository, and the name of the repository you want to add the file to."),qa.forEach(o),xo=f(e),m(ge.$$.fragment,e),Oo=f(e),O=l(e,"H2",{class:!0});var Ca=s(O);M=l(Ca,"A",{id:!0,class:!0,href:!0});var Ei=s(M);Gt=l(Ei,"SPAN",{});var $i=s(Gt);m(ye.$$.fragment,$i),$i.forEach(o),Ei.forEach(o),Rl=f(Ca),Nt=l(Ca,"SPAN",{});var ki=s(Nt);Ul=i(ki,"commit context manager"),ki.forEach(o),Ca.forEach(o),To=f(e),E=l(e,"P",{});var oe=s(E);Fl=i(oe,"The "),Mt=l(oe,"CODE",{});var ji=s(Mt);Gl=i(ji,"commit"),ji.forEach(o),Nl=i(oe," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Bt=l(oe,"CODE",{});var Ai=s(Bt);Ml=i(Ai,"git-lfs"),Ai.forEach(o),Bl=i(oe," automatically tracks any file larger than 10MB. In the following example, the "),Yt=l(oe,"CODE",{});var Hi=s(Yt);Yl=i(Hi,"commit"),Hi.forEach(o),Wl=i(oe," context manager:"),oe.forEach(o),Do=f(e),$=l(e,"OL",{});var ae=s($);ve=l(ae,"LI",{});var La=s(ve);Jl=i(La,"Pulls from the "),Wt=l(La,"CODE",{});var qi=s(Wt);zl=i(qi,"text-files"),qi.forEach(o),Kl=i(La," repository."),La.forEach(o),Ql=f(ae),we=l(ae,"LI",{});var Pa=s(we);Vl=i(Pa,"Adds a change made to "),Jt=l(Pa,"CODE",{});var Ci=s(Jt);Xl=i(Ci,"file.txt"),Ci.forEach(o),Zl=i(Pa,"."),Pa.forEach(o),es=f(ae),zt=l(ae,"LI",{});var Li=s(zt);ts=i(Li,"Commits the change."),Li.forEach(o),os=f(ae),be=l(ae,"LI",{});var xa=s(be);as=i(xa,"Pushes the change to the "),Kt=l(xa,"CODE",{});var Pi=s(Kt);ls=i(Pi,"text-files"),Pi.forEach(o),ss=i(xa," repository."),xa.forEach(o),ae.forEach(o),So=f(e),m(Ee.$$.fragment,e),Io=f(e),Xe=l(e,"P",{});var xi=s(Xe);rs=i(xi,"Here is another example of how to save and upload a file to a repository:"),xi.forEach(o),Ro=f(e),m($e.$$.fragment,e),Uo=f(e),B=l(e,"P",{});var Oa=s(B);is=i(Oa,"Set "),Qt=l(Oa,"CODE",{});var Oi=s(Qt);ns=i(Oi,"blocking=False"),Oi.forEach(o),ps=i(Oa," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Oa.forEach(o),Fo=f(e),m(ke.$$.fragment,e),Go=f(e),Y=l(e,"P",{});var Ta=s(Y);hs=i(Ta,"You can check the status of your push with the "),Vt=l(Ta,"CODE",{});var Ti=s(Vt);fs=i(Ti,"command_queue"),Ti.forEach(o),us=i(Ta," method:"),Ta.forEach(o),No=f(e),m(je.$$.fragment,e),Mo=f(e),Ze=l(e,"P",{});var Di=s(Ze);cs=i(Di,"Refer to the table below for the possible statuses:"),Di.forEach(o),Bo=f(e),W=l(e,"TABLE",{});var Da=s(W);Xt=l(Da,"THEAD",{});var Si=s(Xt);Ae=l(Si,"TR",{});var Sa=s(Ae);Zt=l(Sa,"TH",{});var Ii=s(Zt);ms=i(Ii,"Status"),Ii.forEach(o),ds=f(Sa),eo=l(Sa,"TH",{});var Ri=s(eo);_s=i(Ri,"Description"),Ri.forEach(o),Sa.forEach(o),Si.forEach(o),gs=f(Da),T=l(Da,"TBODY",{});var qt=s(T);He=l(qt,"TR",{});var Ia=s(He);to=l(Ia,"TD",{});var Ui=s(to);ys=i(Ui,"-1"),Ui.forEach(o),vs=f(Ia),oo=l(Ia,"TD",{});var Fi=s(oo);ws=i(Fi,"The push is ongoing."),Fi.forEach(o),Ia.forEach(o),bs=f(qt),qe=l(qt,"TR",{});var Ra=s(qe);ao=l(Ra,"TD",{});var Gi=s(ao);Es=i(Gi,"0"),Gi.forEach(o),$s=f(Ra),lo=l(Ra,"TD",{});var Ni=s(lo);ks=i(Ni,"The push has completed successfully."),Ni.forEach(o),Ra.forEach(o),js=f(qt),Ce=l(qt,"TR",{});var Ua=s(Ce);so=l(Ua,"TD",{});var Mi=s(so);As=i(Mi,"Non-zero"),Mi.forEach(o),Hs=f(Ua),ro=l(Ua,"TD",{});var Bi=s(ro);qs=i(Bi,"An error has occurred."),Bi.forEach(o),Ua.forEach(o),qt.forEach(o),Da.forEach(o),Yo=f(e),J=l(e,"P",{});var Fa=s(J);Cs=i(Fa,"When "),io=l(Fa,"CODE",{});var Yi=s(io);Ls=i(Yi,"blocking=False"),Yi.forEach(o),Ps=i(Fa,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Fa.forEach(o),Wo=f(e),m(Le.$$.fragment,e),Jo=f(e),D=l(e,"H2",{class:!0});var Ga=s(D);z=l(Ga,"A",{id:!0,class:!0,href:!0});var Wi=s(z);no=l(Wi,"SPAN",{});var Ji=s(no);m(Pe.$$.fragment,Ji),Ji.forEach(o),Wi.forEach(o),xs=f(Ga),po=l(Ga,"SPAN",{});var zi=s(po);Os=i(zi,"push_to_hub"),zi.forEach(o),Ga.forEach(o),zo=f(e),v=l(e,"P",{});var j=s(v);Ts=i(j,"The "),et=l(j,"A",{href:!0});var Ki=s(et);Ds=i(Ki,"Repository"),Ki.forEach(o),Ss=i(j," class also has a "),tt=l(j,"A",{href:!0});var Qi=s(tt);Is=i(Qi,"push_to_hub()"),Qi.forEach(o),Rs=i(j," function to add files, make a commit, and push them to a repository. Unlike the "),ho=l(j,"CODE",{});var Vi=s(ho);Us=i(Vi,"commit"),Vi.forEach(o),Fs=i(j," context manager, "),ot=l(j,"A",{href:!0});var Xi=s(ot);Gs=i(Xi,"push_to_hub()"),Xi.forEach(o),Ns=i(j," requires you to pull from a repository first, save the files, and then call "),at=l(j,"A",{href:!0});var Zi=s(at);Ms=i(Zi,"push_to_hub()"),Zi.forEach(o),Bs=i(j,"."),j.forEach(o),Ko=f(e),m(xe.$$.fragment,e),Qo=f(e),A=l(e,"P",{});var Ct=s(A);Ys=i(Ct,"However, if you aren\u2019t ready to push a file yet, you can still use "),lt=l(Ct,"A",{href:!0});var en=s(lt);Ws=i(en,"git_add()"),en.forEach(o),Js=i(Ct," and "),st=l(Ct,"A",{href:!0});var tn=s(st);zs=i(tn,"git_commit()"),tn.forEach(o),Ks=i(Ct," to add and commit your file:"),Ct.forEach(o),Vo=f(e),m(Oe.$$.fragment,e),Xo=f(e),K=l(e,"P",{});var Na=s(K);Qs=i(Na,"Once you\u2019re ready, you can push your file to your repository with "),rt=l(Na,"A",{href:!0});var on=s(rt);Vs=i(on,"git_push()"),on.forEach(o),Xs=i(Na,":"),Na.forEach(o),Zo=f(e),m(Te.$$.fragment,e),ea=f(e),S=l(e,"H2",{class:!0});var Ma=s(S);Q=l(Ma,"A",{id:!0,class:!0,href:!0});var an=s(Q);fo=l(an,"SPAN",{});var ln=s(fo);m(De.$$.fragment,ln),ln.forEach(o),an.forEach(o),Zs=f(Ma),uo=l(Ma,"SPAN",{});var sn=s(uo);er=i(sn,"Upload with Git LFS"),sn.forEach(o),Ma.forEach(o),ta=f(e),it=l(e,"P",{});var rn=s(it);tr=i(rn,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),rn.forEach(o),oa=f(e),m(Se.$$.fragment,e),aa=f(e),nt=l(e,"P",{});var nn=s(nt);or=i(nn,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),nn.forEach(o),la=f(e),I=l(e,"H2",{class:!0});var Ba=s(I);V=l(Ba,"A",{id:!0,class:!0,href:!0});var pn=s(V);co=l(pn,"SPAN",{});var hn=s(co);m(Ie.$$.fragment,hn),hn.forEach(o),pn.forEach(o),ar=f(Ba),mo=l(Ba,"SPAN",{});var fn=s(mo);lr=i(fn,"Upload without Git installed"),fn.forEach(o),Ba.forEach(o),sa=f(e),H=l(e,"P",{});var Lt=s(H);sr=i(Lt,"If you don\u2019t have Git installed on your system, use the "),pt=l(Lt,"A",{href:!0});var un=s(pt);rr=i(un,"create_commit()"),un.forEach(o),ir=i(Lt," function to upload your file. "),ht=l(Lt,"A",{href:!0});var cn=s(ht);nr=i(cn,"create_commit()"),cn.forEach(o),pr=i(Lt," uses the HTTP protocol to upload files to the Hub. Large files and binary files are automatically uploaded with the Git LFS protocol."),Lt.forEach(o),ra=f(e),X=l(e,"P",{});var Ya=s(X);hr=i(Ya,"There are two kinds of operations supported by the "),ft=l(Ya,"A",{href:!0});var mn=s(ft);fr=i(mn,"create_commit()"),mn.forEach(o),ur=i(Ya," function:"),Ya.forEach(o),ia=f(e),Z=l(e,"UL",{});var Wa=s(Z);Re=l(Wa,"LI",{});var Ja=s(Re);ut=l(Ja,"P",{});var Qr=s(ut);_o=l(Qr,"CODE",{});var dn=s(_o);cr=i(dn,"CommitOperationAdd"),dn.forEach(o),mr=i(Qr," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Qr.forEach(o),dr=f(Ja),Ue=l(Ja,"UL",{});var za=s(Ue);ct=l(za,"LI",{});var Vr=s(ct);go=l(Vr,"CODE",{});var _n=s(go);_r=i(_n,"path_in_repo"),_n.forEach(o),gr=i(Vr,": the repository path to upload a file to."),Vr.forEach(o),yr=f(za),mt=l(za,"LI",{});var Xr=s(mt);yo=l(Xr,"CODE",{});var gn=s(yo);vr=i(gn,"path_or_fileobj"),gn.forEach(o),wr=i(Xr,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Xr.forEach(o),za.forEach(o),Ja.forEach(o),br=f(Wa),vo=l(Wa,"LI",{});var yn=s(vo);ee=l(yn,"P",{});var ko=s(ee);wo=l(ko,"CODE",{});var vn=s(wo);Er=i(vn,"CommitOperationDelete"),vn.forEach(o),$r=i(ko," removes a file from a repository. This operation accepts "),bo=l(ko,"CODE",{});var wn=s(bo);kr=i(wn,"path_in_repo"),wn.forEach(o),jr=i(ko," as an argument."),ko.forEach(o),yn.forEach(o),Wa.forEach(o),na=f(e),dt=l(e,"P",{});var bn=s(dt);Ar=i(bn,"For example, if you want to upload two files and delete a file in a Hub repository:"),bn.forEach(o),pa=f(e),_t=l(e,"OL",{});var En=s(_t);Fe=l(En,"LI",{});var Ka=s(Fe);Hr=i(Ka,"Use the appropriate "),Eo=l(Ka,"CODE",{});var $n=s(Eo);qr=i($n,"CommitOperation"),$n.forEach(o),Cr=i(Ka," to add and delete a file:"),Ka.forEach(o),En.forEach(o),ha=f(e),m(Ge.$$.fragment,e),fa=f(e),Ne=l(e,"OL",{start:!0});var kn=s(Ne);Me=l(kn,"LI",{});var Qa=s(Me);Lr=i(Qa,"Pass your operations to "),gt=l(Qa,"A",{href:!0});var jn=s(gt);Pr=i(jn,"create_commit()"),jn.forEach(o),xr=i(Qa,":"),Qa.forEach(o),kn.forEach(o),ua=f(e),m(Be.$$.fragment,e),ca=f(e),Ye=l(e,"P",{});var Zr=s(Ye);yt=l(Zr,"A",{href:!0});var An=s(yt);Or=i(An,"create_commit()"),An.forEach(o),Tr=i(Zr," is the underlying function behind each of these:"),Zr.forEach(o),ma=f(e),k=l(e,"UL",{});var le=s(k);vt=l(le,"LI",{});var ei=s(vt);wt=l(ei,"A",{href:!0});var Hn=s(wt);Dr=i(Hn,"upload_file()"),Hn.forEach(o),Sr=i(ei," uploads a single file to a repository on the Hub."),ei.forEach(o),Ir=f(le),bt=l(le,"LI",{});var ti=s(bt);Et=l(ti,"A",{href:!0});var qn=s(Et);Rr=i(qn,"upload_folder()"),qn.forEach(o),Ur=i(ti," uploads a local directory to a repository on the Hub."),ti.forEach(o),Fr=f(le),$t=l(le,"LI",{});var oi=s($t);kt=l(oi,"A",{href:!0});var Cn=s(kt);Gr=i(Cn,"delete_file()"),Cn.forEach(o),Nr=i(oi," deletes a single file from a repository on the Hub."),oi.forEach(o),Mr=f(le),jt=l(le,"LI",{});var ai=s(jt);$o=l(ai,"CODE",{});var Ln=s($o);Br=i(Ln,"metadata_update()"),Ln.forEach(o),Yr=i(ai," updates a repository\u2019s metadata."),ai.forEach(o),le.forEach(o),da=f(e),te=l(e,"P",{});var Va=s(te);Wr=i(Va,"For more detailed information about these functions, take a look at the "),At=l(Va,"A",{href:!0});var Pn=s(At);Jr=i(Pn,"HfApi"),Pn.forEach(o),zr=i(Va," reference."),Va.forEach(o),this.h()},h(){u(C,"name","hf:doc:metadata"),u(C,"content",JSON.stringify(Un)),u(R,"id","upload-files-to-the-hub"),u(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(R,"href","#upload-files-to-the-hub"),u(L,"class","relative group"),u(We,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(Je,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(he,"href","https://git-lfs.github.com/"),u(he,"rel","nofollow"),u(ze,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(G,"id","upload-a-file"),u(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(G,"href","#upload-a-file"),u(x,"class","relative group"),u(Ve,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(M,"id","commit-context-manager"),u(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(M,"href","#commit-context-manager"),u(O,"class","relative group"),u(z,"id","pushtohub"),u(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(z,"href","#pushtohub"),u(D,"class","relative group"),u(et,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository"),u(tt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(ot,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(at,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(lt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_add"),u(st,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_commit"),u(rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_push"),u(Q,"id","upload-with-git-lfs"),u(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Q,"href","#upload-with-git-lfs"),u(S,"class","relative group"),u(V,"id","upload-without-git-installed"),u(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(V,"href","#upload-without-git-installed"),u(I,"class","relative group"),u(pt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(ht,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(ft,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(gt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Ne,"start","2"),u(yt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(wt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(Et,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(kt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),u(At,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi")},m(e,n){t(document.head,C),p(e,jo,n),p(e,L,n),t(L,R),t(R,xt),d(se,xt,null),t(L,Xa),t(L,Ot),t(Ot,Za),p(e,Ao,n),p(e,U,n),t(U,el),t(U,Tt),t(Tt,tl),t(U,ol),p(e,Ho,n),p(e,w,n),t(w,re),t(re,al),t(re,We),t(We,ll),t(re,sl),t(w,rl),t(w,ie),t(ie,il),t(ie,Dt),t(Dt,nl),t(ie,pl),t(w,hl),t(w,ne),t(ne,fl),t(ne,Je),t(Je,ul),t(ne,cl),t(w,ml),t(w,pe),t(pe,dl),t(pe,he),t(he,_l),t(pe,gl),t(w,yl),t(w,fe),t(fe,vl),t(fe,ze),t(ze,wl),t(fe,bl),p(e,qo,n),p(e,Ke,n),t(Ke,El),p(e,Co,n),p(e,F,n),t(F,ue),t(ue,St),t(St,$l),t(ue,kl),d(ce,ue,null),t(F,jl),t(F,P),t(P,me),t(me,Al),t(me,It),t(It,Hl),t(me,ql),t(P,Cl),d(de,P,null),t(P,Ll),t(P,Qe),t(Qe,Rt),t(Rt,Pl),t(Qe,xl),p(e,Lo,n),p(e,x,n),t(x,G),t(G,Ut),d(_e,Ut,null),t(x,Ol),t(x,Ft),t(Ft,Tl),p(e,Po,n),p(e,N,n),t(N,Dl),t(N,Ve),t(Ve,Sl),t(N,Il),p(e,xo,n),d(ge,e,n),p(e,Oo,n),p(e,O,n),t(O,M),t(M,Gt),d(ye,Gt,null),t(O,Rl),t(O,Nt),t(Nt,Ul),p(e,To,n),p(e,E,n),t(E,Fl),t(E,Mt),t(Mt,Gl),t(E,Nl),t(E,Bt),t(Bt,Ml),t(E,Bl),t(E,Yt),t(Yt,Yl),t(E,Wl),p(e,Do,n),p(e,$,n),t($,ve),t(ve,Jl),t(ve,Wt),t(Wt,zl),t(ve,Kl),t($,Ql),t($,we),t(we,Vl),t(we,Jt),t(Jt,Xl),t(we,Zl),t($,es),t($,zt),t(zt,ts),t($,os),t($,be),t(be,as),t(be,Kt),t(Kt,ls),t(be,ss),p(e,So,n),d(Ee,e,n),p(e,Io,n),p(e,Xe,n),t(Xe,rs),p(e,Ro,n),d($e,e,n),p(e,Uo,n),p(e,B,n),t(B,is),t(B,Qt),t(Qt,ns),t(B,ps),p(e,Fo,n),d(ke,e,n),p(e,Go,n),p(e,Y,n),t(Y,hs),t(Y,Vt),t(Vt,fs),t(Y,us),p(e,No,n),d(je,e,n),p(e,Mo,n),p(e,Ze,n),t(Ze,cs),p(e,Bo,n),p(e,W,n),t(W,Xt),t(Xt,Ae),t(Ae,Zt),t(Zt,ms),t(Ae,ds),t(Ae,eo),t(eo,_s),t(W,gs),t(W,T),t(T,He),t(He,to),t(to,ys),t(He,vs),t(He,oo),t(oo,ws),t(T,bs),t(T,qe),t(qe,ao),t(ao,Es),t(qe,$s),t(qe,lo),t(lo,ks),t(T,js),t(T,Ce),t(Ce,so),t(so,As),t(Ce,Hs),t(Ce,ro),t(ro,qs),p(e,Yo,n),p(e,J,n),t(J,Cs),t(J,io),t(io,Ls),t(J,Ps),p(e,Wo,n),d(Le,e,n),p(e,Jo,n),p(e,D,n),t(D,z),t(z,no),d(Pe,no,null),t(D,xs),t(D,po),t(po,Os),p(e,zo,n),p(e,v,n),t(v,Ts),t(v,et),t(et,Ds),t(v,Ss),t(v,tt),t(tt,Is),t(v,Rs),t(v,ho),t(ho,Us),t(v,Fs),t(v,ot),t(ot,Gs),t(v,Ns),t(v,at),t(at,Ms),t(v,Bs),p(e,Ko,n),d(xe,e,n),p(e,Qo,n),p(e,A,n),t(A,Ys),t(A,lt),t(lt,Ws),t(A,Js),t(A,st),t(st,zs),t(A,Ks),p(e,Vo,n),d(Oe,e,n),p(e,Xo,n),p(e,K,n),t(K,Qs),t(K,rt),t(rt,Vs),t(K,Xs),p(e,Zo,n),d(Te,e,n),p(e,ea,n),p(e,S,n),t(S,Q),t(Q,fo),d(De,fo,null),t(S,Zs),t(S,uo),t(uo,er),p(e,ta,n),p(e,it,n),t(it,tr),p(e,oa,n),d(Se,e,n),p(e,aa,n),p(e,nt,n),t(nt,or),p(e,la,n),p(e,I,n),t(I,V),t(V,co),d(Ie,co,null),t(I,ar),t(I,mo),t(mo,lr),p(e,sa,n),p(e,H,n),t(H,sr),t(H,pt),t(pt,rr),t(H,ir),t(H,ht),t(ht,nr),t(H,pr),p(e,ra,n),p(e,X,n),t(X,hr),t(X,ft),t(ft,fr),t(X,ur),p(e,ia,n),p(e,Z,n),t(Z,Re),t(Re,ut),t(ut,_o),t(_o,cr),t(ut,mr),t(Re,dr),t(Re,Ue),t(Ue,ct),t(ct,go),t(go,_r),t(ct,gr),t(Ue,yr),t(Ue,mt),t(mt,yo),t(yo,vr),t(mt,wr),t(Z,br),t(Z,vo),t(vo,ee),t(ee,wo),t(wo,Er),t(ee,$r),t(ee,bo),t(bo,kr),t(ee,jr),p(e,na,n),p(e,dt,n),t(dt,Ar),p(e,pa,n),p(e,_t,n),t(_t,Fe),t(Fe,Hr),t(Fe,Eo),t(Eo,qr),t(Fe,Cr),p(e,ha,n),d(Ge,e,n),p(e,fa,n),p(e,Ne,n),t(Ne,Me),t(Me,Lr),t(Me,gt),t(gt,Pr),t(Me,xr),p(e,ua,n),d(Be,e,n),p(e,ca,n),p(e,Ye,n),t(Ye,yt),t(yt,Or),t(Ye,Tr),p(e,ma,n),p(e,k,n),t(k,vt),t(vt,wt),t(wt,Dr),t(vt,Sr),t(k,Ir),t(k,bt),t(bt,Et),t(Et,Rr),t(bt,Ur),t(k,Fr),t(k,$t),t($t,kt),t(kt,Gr),t($t,Nr),t(k,Mr),t(k,jt),t(jt,$o),t($o,Br),t(jt,Yr),p(e,da,n),p(e,te,n),t(te,Wr),t(te,At),t(At,Jr),t(te,zr),_a=!0},p:Sn,i(e){_a||(_(se.$$.fragment,e),_(ce.$$.fragment,e),_(de.$$.fragment,e),_(_e.$$.fragment,e),_(ge.$$.fragment,e),_(ye.$$.fragment,e),_(Ee.$$.fragment,e),_($e.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Le.$$.fragment,e),_(Pe.$$.fragment,e),_(xe.$$.fragment,e),_(Oe.$$.fragment,e),_(Te.$$.fragment,e),_(De.$$.fragment,e),_(Se.$$.fragment,e),_(Ie.$$.fragment,e),_(Ge.$$.fragment,e),_(Be.$$.fragment,e),_a=!0)},o(e){g(se.$$.fragment,e),g(ce.$$.fragment,e),g(de.$$.fragment,e),g(_e.$$.fragment,e),g(ge.$$.fragment,e),g(ye.$$.fragment,e),g(Ee.$$.fragment,e),g($e.$$.fragment,e),g(ke.$$.fragment,e),g(je.$$.fragment,e),g(Le.$$.fragment,e),g(Pe.$$.fragment,e),g(xe.$$.fragment,e),g(Oe.$$.fragment,e),g(Te.$$.fragment,e),g(De.$$.fragment,e),g(Se.$$.fragment,e),g(Ie.$$.fragment,e),g(Ge.$$.fragment,e),g(Be.$$.fragment,e),_a=!1},d(e){o(C),e&&o(jo),e&&o(L),y(se),e&&o(Ao),e&&o(U),e&&o(Ho),e&&o(w),e&&o(qo),e&&o(Ke),e&&o(Co),e&&o(F),y(ce),y(de),e&&o(Lo),e&&o(x),y(_e),e&&o(Po),e&&o(N),e&&o(xo),y(ge,e),e&&o(Oo),e&&o(O),y(ye),e&&o(To),e&&o(E),e&&o(Do),e&&o($),e&&o(So),y(Ee,e),e&&o(Io),e&&o(Xe),e&&o(Ro),y($e,e),e&&o(Uo),e&&o(B),e&&o(Fo),y(ke,e),e&&o(Go),e&&o(Y),e&&o(No),y(je,e),e&&o(Mo),e&&o(Ze),e&&o(Bo),e&&o(W),e&&o(Yo),e&&o(J),e&&o(Wo),y(Le,e),e&&o(Jo),e&&o(D),y(Pe),e&&o(zo),e&&o(v),e&&o(Ko),y(xe,e),e&&o(Qo),e&&o(A),e&&o(Vo),y(Oe,e),e&&o(Xo),e&&o(K),e&&o(Zo),y(Te,e),e&&o(ea),e&&o(S),y(De),e&&o(ta),e&&o(it),e&&o(oa),y(Se,e),e&&o(aa),e&&o(nt),e&&o(la),e&&o(I),y(Ie),e&&o(sa),e&&o(H),e&&o(ra),e&&o(X),e&&o(ia),e&&o(Z),e&&o(na),e&&o(dt),e&&o(pa),e&&o(_t),e&&o(ha),y(Ge,e),e&&o(fa),e&&o(Ne),e&&o(ua),y(Be,e),e&&o(ca),e&&o(Ye),e&&o(ma),e&&o(k),e&&o(da),e&&o(te)}}}const Un={local:"upload-files-to-the-hub",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"},{local:"upload-without-git-installed",title:"Upload without Git installed"}],title:"Upload files to the Hub"};function Fn(li){return In(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Bn extends xn{constructor(C){super();On(this,C,Fn,Rn,Tn,{})}}export{Bn as default,Un as metadata};
