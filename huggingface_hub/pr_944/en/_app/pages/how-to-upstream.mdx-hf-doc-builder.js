import{S as hp,i as fp,s as up,e as a,k as h,w as c,t as r,M as cp,c as l,d as o,m as f,a as s,x as m,h as i,b as u,G as t,g as p,y as d,q as _,o as g,B as y,v as mp}from"../chunks/vendor-hf-doc-builder.js";import{T as dp}from"../chunks/Tip-hf-doc-builder.js";import{I as lt}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";function _p(Ro){let v,M,w,j,O;return{c(){v=a("p"),M=r("The "),w=a("a"),j=r("create_commit()"),O=r(" is really useful for certain use-cases. In general though, it is simpler to use one of the other uploading functions mentioned above."),this.h()},l(k){v=l(k,"P",{});var L=s(v);M=i(L,"The "),w=l(L,"A",{href:!0});var B=s(w);j=i(B,"create_commit()"),B.forEach(o),O=i(L," is really useful for certain use-cases. In general though, it is simpler to use one of the other uploading functions mentioned above."),L.forEach(o),this.h()},h(){u(w,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit")},m(k,L){p(k,v,L),t(v,M),t(v,w),t(w,j),t(v,O)},d(k){k&&o(v)}}}function gp(Ro){let v,M,w,j,O,k,L,B,yl,Fo,Y,vl,Wt,wl,bl,Go,b,me,$l,st,El,kl,jl,de,Al,rt,Hl,ql,Pl,_e,Cl,Jt,Ll,xl,Tl,ge,Ol,it,Dl,Sl,Ul,ye,Il,ve,Rl,Fl,Gl,we,Nl,nt,Ml,Bl,No,pt,Yl,Mo,W,be,zt,Wl,Jl,$e,zl,D,Ee,Kl,Kt,Ql,Vl,Xl,ke,Zl,ht,Qt,es,ts,Bo,S,J,Vt,je,os,Xt,as,Yo,z,ls,ft,ss,rs,Wo,Ae,Jo,U,K,Zt,He,is,eo,ns,zo,Q,ps,ut,hs,fs,Ko,qe,Qo,I,V,to,Pe,us,oo,cs,Vo,A,ms,ao,ds,_s,lo,gs,ys,so,vs,ws,Xo,H,Ce,bs,ro,$s,Es,ks,Le,js,io,As,Hs,qs,no,Ps,Cs,xe,Ls,po,xs,Ts,Zo,Te,ea,ct,Os,ta,Oe,oa,X,Ds,ho,Ss,Us,aa,De,la,Z,Is,fo,Rs,Fs,sa,Se,ra,mt,Gs,ia,ee,uo,Ue,co,Ns,Ms,mo,Bs,Ys,R,Ie,_o,Ws,Js,go,zs,Ks,Re,yo,Qs,Vs,vo,Xs,Zs,Fe,wo,er,tr,bo,or,na,te,ar,$o,lr,sr,pa,Ge,ha,F,oe,Eo,Ne,rr,ko,ir,fa,$,nr,dt,pr,hr,_t,fr,ur,jo,cr,mr,gt,dr,_r,yt,gr,yr,ua,Me,ca,x,vr,vt,wr,br,wt,$r,Er,ma,Be,da,ae,kr,bt,jr,Ar,_a,Ye,ga,G,le,Ao,We,Hr,Ho,qr,ya,$t,Pr,va,Je,wa,Et,Cr,ba,N,se,qo,ze,Lr,Po,xr,$a,re,Ea,T,Tr,kt,Or,Dr,jt,Sr,Ur,ka,ie,Ir,At,Rr,Fr,ja,ne,Ke,Ht,Co,Gr,Nr,Mr,Qe,qt,Lo,Br,Yr,Wr,Pt,xo,Jr,zr,Kr,To,pe,Oo,Qr,Vr,Do,Xr,Zr,Aa,Ct,ei,Ha,Lt,Ve,ti,So,oi,ai,qa,Xe,Pa,Ze,et,li,xt,si,ri,Ca,tt,La,ot,Tt,ii,ni,xa,q,Ot,Dt,pi,hi,fi,St,Ut,ui,ci,mi,It,Rt,di,_i,gi,Ft,Uo,yi,vi,Ta,he,wi,Gt,bi,$i,Oa;return k=new lt({}),$e=new E({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),ke=new E({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),je=new lt({}),Ae=new E({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(path_or_fileobj="/home/lysandre/dummy-test/README.md", 
                path_in_repo="README.md", 
                repo_id="lysandre/test-model",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(path_or_fileobj=<span class="hljs-string">&quot;/home/lysandre/dummy-test/README.md&quot;</span>, 
<span class="hljs-meta">... </span>                path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>                repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>)`}}),He=new lt({}),qe=new E({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(folder_path="/path/to/local/folder",
                  path_in_repo="my-dataset/train",
                  repo_id="username/test-dataset"
                  repo_type="datasets",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>                  path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>                  repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>
<span class="hljs-meta">... </span>                  repo_type=<span class="hljs-string">&quot;datasets&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-comment"># https://huggingface.co/datasets/username/test-dataset/tree/main/my-dataset/train/</span>`}}),Pe=new lt({}),Te=new E({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),Oe=new E({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),De=new E({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),Se=new E({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),Ge=new E({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),Ne=new lt({}),Me=new E({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")
repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),Be=new E({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),Ye=new E({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),We=new lt({}),Je=new E({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),ze=new lt({}),re=new dp({props:{$$slots:{default:[_p]},$$scope:{ctx:Ro}}}),Xe=new E({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),tt=new E({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){v=a("meta"),M=h(),w=a("h1"),j=a("a"),O=a("span"),c(k.$$.fragment),L=h(),B=a("span"),yl=r("Upload files to the Hub"),Fo=h(),Y=a("p"),vl=r("Sharing your files and work is a very important aspect of the Hub. The "),Wt=a("code"),wl=r("huggingface_hub"),bl=r(" uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),Go=h(),b=a("ul"),me=a("li"),$l=r("Upload a file with "),st=a("a"),El=r("upload_file()"),kl=r("."),jl=h(),de=a("li"),Al=r("Upload a folder with "),rt=a("a"),Hl=r("upload_folder()"),ql=r("."),Pl=h(),_e=a("li"),Cl=r("Push files with a "),Jt=a("code"),Ll=r("commit"),xl=r(" context manager."),Tl=h(),ge=a("li"),Ol=r("Push files with the "),it=a("a"),Dl=r("push_to_hub()"),Sl=r(" function."),Ul=h(),ye=a("li"),Il=r("Upload very large files with "),ve=a("a"),Rl=r("Git LFS"),Fl=r("."),Gl=h(),we=a("li"),Nl=r("Use "),nt=a("a"),Ml=r("create_commit()"),Bl=r(" to push files without Git."),No=h(),pt=a("p"),Yl=r("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Mo=h(),W=a("ol"),be=a("li"),zt=a("p"),Wl=r("Log in to your Hugging Face account with the following command:"),Jl=h(),c($e.$$.fragment),zl=h(),D=a("li"),Ee=a("p"),Kl=r("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Kt=a("code"),Ql=r("notebook_login()"),Vl=r(":"),Xl=h(),c(ke.$$.fragment),Zl=h(),ht=a("p"),Qt=a("code"),es=r("notebook_login()"),ts=r(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Bo=h(),S=a("h2"),J=a("a"),Vt=a("span"),c(je.$$.fragment),os=h(),Xt=a("span"),as=r("Upload a file"),Yo=h(),z=a("p"),ls=r("Use the "),ft=a("a"),ss=r("upload_file()"),rs=r(" function to upload a file to a repository. Let the function know where the file you want to upload is, where you want to upload the file to in the repository, and the name of the repository you want to add the file to."),Wo=h(),c(Ae.$$.fragment),Jo=h(),U=a("h2"),K=a("a"),Zt=a("span"),c(He.$$.fragment),is=h(),eo=a("span"),ns=r("Upload a folder"),zo=h(),Q=a("p"),ps=r("Use the "),ut=a("a"),hs=r("upload_folder()"),fs=r(" function to upload a local folder to a repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to."),Ko=h(),c(qe.$$.fragment),Qo=h(),I=a("h2"),V=a("a"),to=a("span"),c(Pe.$$.fragment),us=h(),oo=a("span"),cs=r("commit context manager"),Vo=h(),A=a("p"),ms=r("The "),ao=a("code"),ds=r("commit"),_s=r(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),lo=a("code"),gs=r("git-lfs"),ys=r(" automatically tracks any file larger than 10MB. In the following example, the "),so=a("code"),vs=r("commit"),ws=r(" context manager:"),Xo=h(),H=a("ol"),Ce=a("li"),bs=r("Pulls from the "),ro=a("code"),$s=r("text-files"),Es=r(" repository."),ks=h(),Le=a("li"),js=r("Adds a change made to "),io=a("code"),As=r("file.txt"),Hs=r("."),qs=h(),no=a("li"),Ps=r("Commits the change."),Cs=h(),xe=a("li"),Ls=r("Pushes the change to the "),po=a("code"),xs=r("text-files"),Ts=r(" repository."),Zo=h(),c(Te.$$.fragment),ea=h(),ct=a("p"),Os=r("Here is another example of how to save and upload a file to a repository:"),ta=h(),c(Oe.$$.fragment),oa=h(),X=a("p"),Ds=r("Set "),ho=a("code"),Ss=r("blocking=False"),Us=r(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),aa=h(),c(De.$$.fragment),la=h(),Z=a("p"),Is=r("You can check the status of your push with the "),fo=a("code"),Rs=r("command_queue"),Fs=r(" method:"),sa=h(),c(Se.$$.fragment),ra=h(),mt=a("p"),Gs=r("Refer to the table below for the possible statuses:"),ia=h(),ee=a("table"),uo=a("thead"),Ue=a("tr"),co=a("th"),Ns=r("Status"),Ms=h(),mo=a("th"),Bs=r("Description"),Ys=h(),R=a("tbody"),Ie=a("tr"),_o=a("td"),Ws=r("-1"),Js=h(),go=a("td"),zs=r("The push is ongoing."),Ks=h(),Re=a("tr"),yo=a("td"),Qs=r("0"),Vs=h(),vo=a("td"),Xs=r("The push has completed successfully."),Zs=h(),Fe=a("tr"),wo=a("td"),er=r("Non-zero"),tr=h(),bo=a("td"),or=r("An error has occurred."),na=h(),te=a("p"),ar=r("When "),$o=a("code"),lr=r("blocking=False"),sr=r(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),pa=h(),c(Ge.$$.fragment),ha=h(),F=a("h2"),oe=a("a"),Eo=a("span"),c(Ne.$$.fragment),rr=h(),ko=a("span"),ir=r("push_to_hub"),fa=h(),$=a("p"),nr=r("The "),dt=a("a"),pr=r("Repository"),hr=r(" class also has a "),_t=a("a"),fr=r("push_to_hub()"),ur=r(" function to add files, make a commit, and push them to a repository. Unlike the "),jo=a("code"),cr=r("commit"),mr=r(" context manager, "),gt=a("a"),dr=r("push_to_hub()"),_r=r(" requires you to pull from a repository first, save the files, and then call "),yt=a("a"),gr=r("push_to_hub()"),yr=r("."),ua=h(),c(Me.$$.fragment),ca=h(),x=a("p"),vr=r("However, if you aren\u2019t ready to push a file yet, you can still use "),vt=a("a"),wr=r("git_add()"),br=r(" and "),wt=a("a"),$r=r("git_commit()"),Er=r(" to add and commit your file:"),ma=h(),c(Be.$$.fragment),da=h(),ae=a("p"),kr=r("Once you\u2019re ready, you can push your file to your repository with "),bt=a("a"),jr=r("git_push()"),Ar=r(":"),_a=h(),c(Ye.$$.fragment),ga=h(),G=a("h2"),le=a("a"),Ao=a("span"),c(We.$$.fragment),Hr=h(),Ho=a("span"),qr=r("Upload with Git LFS"),ya=h(),$t=a("p"),Pr=r("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),va=h(),c(Je.$$.fragment),wa=h(),Et=a("p"),Cr=r("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),ba=h(),N=a("h2"),se=a("a"),qo=a("span"),c(ze.$$.fragment),Lr=h(),Po=a("span"),xr=r("Upload without Git installed"),$a=h(),c(re.$$.fragment),Ea=h(),T=a("p"),Tr=r("If you don\u2019t have Git installed on your system, use the "),kt=a("a"),Or=r("create_commit()"),Dr=r(" function to upload your file. "),jt=a("a"),Sr=r("create_commit()"),Ur=r(" uses the HTTP protocol to upload files to the Hub. Large files and binary files are automatically uploaded with the Git LFS protocol."),ka=h(),ie=a("p"),Ir=r("There are two kinds of operations supported by the "),At=a("a"),Rr=r("create_commit()"),Fr=r(" function:"),ja=h(),ne=a("ul"),Ke=a("li"),Ht=a("p"),Co=a("code"),Gr=r("CommitOperationAdd"),Nr=r(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Mr=h(),Qe=a("ul"),qt=a("li"),Lo=a("code"),Br=r("path_in_repo"),Yr=r(": the repository path to upload a file to."),Wr=h(),Pt=a("li"),xo=a("code"),Jr=r("path_or_fileobj"),zr=r(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Kr=h(),To=a("li"),pe=a("p"),Oo=a("code"),Qr=r("CommitOperationDelete"),Vr=r(" removes a file from a repository. This operation accepts "),Do=a("code"),Xr=r("path_in_repo"),Zr=r(" as an argument."),Aa=h(),Ct=a("p"),ei=r("For example, if you want to upload two files and delete a file in a Hub repository:"),Ha=h(),Lt=a("ol"),Ve=a("li"),ti=r("Use the appropriate "),So=a("code"),oi=r("CommitOperation"),ai=r(" to add and delete a file:"),qa=h(),c(Xe.$$.fragment),Pa=h(),Ze=a("ol"),et=a("li"),li=r("Pass your operations to "),xt=a("a"),si=r("create_commit()"),ri=r(":"),Ca=h(),c(tt.$$.fragment),La=h(),ot=a("p"),Tt=a("a"),ii=r("create_commit()"),ni=r(" is the underlying function behind each of these other functions:"),xa=h(),q=a("ul"),Ot=a("li"),Dt=a("a"),pi=r("upload_file()"),hi=r(" uploads a single file to a repository on the Hub."),fi=h(),St=a("li"),Ut=a("a"),ui=r("upload_folder()"),ci=r(" uploads a local directory to a repository on the Hub."),mi=h(),It=a("li"),Rt=a("a"),di=r("delete_file()"),_i=r(" deletes a single file from a repository on the Hub."),gi=h(),Ft=a("li"),Uo=a("code"),yi=r("metadata_update()"),vi=r(" updates a repository\u2019s metadata."),Ta=h(),he=a("p"),wi=r("For more detailed information about these functions, take a look at the "),Gt=a("a"),bi=r("HfApi"),$i=r(" reference."),this.h()},l(e){const n=cp('[data-svelte="svelte-1phssyn"]',document.head);v=l(n,"META",{name:!0,content:!0}),n.forEach(o),M=f(e),w=l(e,"H1",{class:!0});var at=s(w);j=l(at,"A",{id:!0,class:!0,href:!0});var xi=s(j);O=l(xi,"SPAN",{});var Ti=s(O);m(k.$$.fragment,Ti),Ti.forEach(o),xi.forEach(o),L=f(at),B=l(at,"SPAN",{});var Oi=s(B);yl=i(Oi,"Upload files to the Hub"),Oi.forEach(o),at.forEach(o),Fo=f(e),Y=l(e,"P",{});var Da=s(Y);vl=i(Da,"Sharing your files and work is a very important aspect of the Hub. The "),Wt=l(Da,"CODE",{});var Di=s(Wt);wl=i(Di,"huggingface_hub"),Di.forEach(o),bl=i(Da," uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),Da.forEach(o),Go=f(e),b=l(e,"UL",{});var P=s(b);me=l(P,"LI",{});var Sa=s(me);$l=i(Sa,"Upload a file with "),st=l(Sa,"A",{href:!0});var Si=s(st);El=i(Si,"upload_file()"),Si.forEach(o),kl=i(Sa,"."),Sa.forEach(o),jl=f(P),de=l(P,"LI",{});var Ua=s(de);Al=i(Ua,"Upload a folder with "),rt=l(Ua,"A",{href:!0});var Ui=s(rt);Hl=i(Ui,"upload_folder()"),Ui.forEach(o),ql=i(Ua,"."),Ua.forEach(o),Pl=f(P),_e=l(P,"LI",{});var Ia=s(_e);Cl=i(Ia,"Push files with a "),Jt=l(Ia,"CODE",{});var Ii=s(Jt);Ll=i(Ii,"commit"),Ii.forEach(o),xl=i(Ia," context manager."),Ia.forEach(o),Tl=f(P),ge=l(P,"LI",{});var Ra=s(ge);Ol=i(Ra,"Push files with the "),it=l(Ra,"A",{href:!0});var Ri=s(it);Dl=i(Ri,"push_to_hub()"),Ri.forEach(o),Sl=i(Ra," function."),Ra.forEach(o),Ul=f(P),ye=l(P,"LI",{});var Fa=s(ye);Il=i(Fa,"Upload very large files with "),ve=l(Fa,"A",{href:!0,rel:!0});var Fi=s(ve);Rl=i(Fi,"Git LFS"),Fi.forEach(o),Fl=i(Fa,"."),Fa.forEach(o),Gl=f(P),we=l(P,"LI",{});var Ga=s(we);Nl=i(Ga,"Use "),nt=l(Ga,"A",{href:!0});var Gi=s(nt);Ml=i(Gi,"create_commit()"),Gi.forEach(o),Bl=i(Ga," to push files without Git."),Ga.forEach(o),P.forEach(o),No=f(e),pt=l(e,"P",{});var Ni=s(pt);Yl=i(Ni,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Ni.forEach(o),Mo=f(e),W=l(e,"OL",{});var Na=s(W);be=l(Na,"LI",{});var Ma=s(be);zt=l(Ma,"P",{});var Mi=s(zt);Wl=i(Mi,"Log in to your Hugging Face account with the following command:"),Mi.forEach(o),Jl=f(Ma),m($e.$$.fragment,Ma),Ma.forEach(o),zl=f(Na),D=l(Na,"LI",{});var Nt=s(D);Ee=l(Nt,"P",{});var Ba=s(Ee);Kl=i(Ba,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Kt=l(Ba,"CODE",{});var Bi=s(Kt);Ql=i(Bi,"notebook_login()"),Bi.forEach(o),Vl=i(Ba,":"),Ba.forEach(o),Xl=f(Nt),m(ke.$$.fragment,Nt),Zl=f(Nt),ht=l(Nt,"P",{});var Ei=s(ht);Qt=l(Ei,"CODE",{});var Yi=s(Qt);es=i(Yi,"notebook_login()"),Yi.forEach(o),ts=i(Ei," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Ei.forEach(o),Nt.forEach(o),Na.forEach(o),Bo=f(e),S=l(e,"H2",{class:!0});var Ya=s(S);J=l(Ya,"A",{id:!0,class:!0,href:!0});var Wi=s(J);Vt=l(Wi,"SPAN",{});var Ji=s(Vt);m(je.$$.fragment,Ji),Ji.forEach(o),Wi.forEach(o),os=f(Ya),Xt=l(Ya,"SPAN",{});var zi=s(Xt);as=i(zi,"Upload a file"),zi.forEach(o),Ya.forEach(o),Yo=f(e),z=l(e,"P",{});var Wa=s(z);ls=i(Wa,"Use the "),ft=l(Wa,"A",{href:!0});var Ki=s(ft);ss=i(Ki,"upload_file()"),Ki.forEach(o),rs=i(Wa," function to upload a file to a repository. Let the function know where the file you want to upload is, where you want to upload the file to in the repository, and the name of the repository you want to add the file to."),Wa.forEach(o),Wo=f(e),m(Ae.$$.fragment,e),Jo=f(e),U=l(e,"H2",{class:!0});var Ja=s(U);K=l(Ja,"A",{id:!0,class:!0,href:!0});var Qi=s(K);Zt=l(Qi,"SPAN",{});var Vi=s(Zt);m(He.$$.fragment,Vi),Vi.forEach(o),Qi.forEach(o),is=f(Ja),eo=l(Ja,"SPAN",{});var Xi=s(eo);ns=i(Xi,"Upload a folder"),Xi.forEach(o),Ja.forEach(o),zo=f(e),Q=l(e,"P",{});var za=s(Q);ps=i(za,"Use the "),ut=l(za,"A",{href:!0});var Zi=s(ut);hs=i(Zi,"upload_folder()"),Zi.forEach(o),fs=i(za," function to upload a local folder to a repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to."),za.forEach(o),Ko=f(e),m(qe.$$.fragment,e),Qo=f(e),I=l(e,"H2",{class:!0});var Ka=s(I);V=l(Ka,"A",{id:!0,class:!0,href:!0});var en=s(V);to=l(en,"SPAN",{});var tn=s(to);m(Pe.$$.fragment,tn),tn.forEach(o),en.forEach(o),us=f(Ka),oo=l(Ka,"SPAN",{});var on=s(oo);cs=i(on,"commit context manager"),on.forEach(o),Ka.forEach(o),Vo=f(e),A=l(e,"P",{});var fe=s(A);ms=i(fe,"The "),ao=l(fe,"CODE",{});var an=s(ao);ds=i(an,"commit"),an.forEach(o),_s=i(fe," context manager handles four of the most common Git commands: pull, add, commit, and push. "),lo=l(fe,"CODE",{});var ln=s(lo);gs=i(ln,"git-lfs"),ln.forEach(o),ys=i(fe," automatically tracks any file larger than 10MB. In the following example, the "),so=l(fe,"CODE",{});var sn=s(so);vs=i(sn,"commit"),sn.forEach(o),ws=i(fe," context manager:"),fe.forEach(o),Xo=f(e),H=l(e,"OL",{});var ue=s(H);Ce=l(ue,"LI",{});var Qa=s(Ce);bs=i(Qa,"Pulls from the "),ro=l(Qa,"CODE",{});var rn=s(ro);$s=i(rn,"text-files"),rn.forEach(o),Es=i(Qa," repository."),Qa.forEach(o),ks=f(ue),Le=l(ue,"LI",{});var Va=s(Le);js=i(Va,"Adds a change made to "),io=l(Va,"CODE",{});var nn=s(io);As=i(nn,"file.txt"),nn.forEach(o),Hs=i(Va,"."),Va.forEach(o),qs=f(ue),no=l(ue,"LI",{});var pn=s(no);Ps=i(pn,"Commits the change."),pn.forEach(o),Cs=f(ue),xe=l(ue,"LI",{});var Xa=s(xe);Ls=i(Xa,"Pushes the change to the "),po=l(Xa,"CODE",{});var hn=s(po);xs=i(hn,"text-files"),hn.forEach(o),Ts=i(Xa," repository."),Xa.forEach(o),ue.forEach(o),Zo=f(e),m(Te.$$.fragment,e),ea=f(e),ct=l(e,"P",{});var fn=s(ct);Os=i(fn,"Here is another example of how to save and upload a file to a repository:"),fn.forEach(o),ta=f(e),m(Oe.$$.fragment,e),oa=f(e),X=l(e,"P",{});var Za=s(X);Ds=i(Za,"Set "),ho=l(Za,"CODE",{});var un=s(ho);Ss=i(un,"blocking=False"),un.forEach(o),Us=i(Za," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Za.forEach(o),aa=f(e),m(De.$$.fragment,e),la=f(e),Z=l(e,"P",{});var el=s(Z);Is=i(el,"You can check the status of your push with the "),fo=l(el,"CODE",{});var cn=s(fo);Rs=i(cn,"command_queue"),cn.forEach(o),Fs=i(el," method:"),el.forEach(o),sa=f(e),m(Se.$$.fragment,e),ra=f(e),mt=l(e,"P",{});var mn=s(mt);Gs=i(mn,"Refer to the table below for the possible statuses:"),mn.forEach(o),ia=f(e),ee=l(e,"TABLE",{});var tl=s(ee);uo=l(tl,"THEAD",{});var dn=s(uo);Ue=l(dn,"TR",{});var ol=s(Ue);co=l(ol,"TH",{});var _n=s(co);Ns=i(_n,"Status"),_n.forEach(o),Ms=f(ol),mo=l(ol,"TH",{});var gn=s(mo);Bs=i(gn,"Description"),gn.forEach(o),ol.forEach(o),dn.forEach(o),Ys=f(tl),R=l(tl,"TBODY",{});var Mt=s(R);Ie=l(Mt,"TR",{});var al=s(Ie);_o=l(al,"TD",{});var yn=s(_o);Ws=i(yn,"-1"),yn.forEach(o),Js=f(al),go=l(al,"TD",{});var vn=s(go);zs=i(vn,"The push is ongoing."),vn.forEach(o),al.forEach(o),Ks=f(Mt),Re=l(Mt,"TR",{});var ll=s(Re);yo=l(ll,"TD",{});var wn=s(yo);Qs=i(wn,"0"),wn.forEach(o),Vs=f(ll),vo=l(ll,"TD",{});var bn=s(vo);Xs=i(bn,"The push has completed successfully."),bn.forEach(o),ll.forEach(o),Zs=f(Mt),Fe=l(Mt,"TR",{});var sl=s(Fe);wo=l(sl,"TD",{});var $n=s(wo);er=i($n,"Non-zero"),$n.forEach(o),tr=f(sl),bo=l(sl,"TD",{});var En=s(bo);or=i(En,"An error has occurred."),En.forEach(o),sl.forEach(o),Mt.forEach(o),tl.forEach(o),na=f(e),te=l(e,"P",{});var rl=s(te);ar=i(rl,"When "),$o=l(rl,"CODE",{});var kn=s($o);lr=i(kn,"blocking=False"),kn.forEach(o),sr=i(rl,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),rl.forEach(o),pa=f(e),m(Ge.$$.fragment,e),ha=f(e),F=l(e,"H2",{class:!0});var il=s(F);oe=l(il,"A",{id:!0,class:!0,href:!0});var jn=s(oe);Eo=l(jn,"SPAN",{});var An=s(Eo);m(Ne.$$.fragment,An),An.forEach(o),jn.forEach(o),rr=f(il),ko=l(il,"SPAN",{});var Hn=s(ko);ir=i(Hn,"push_to_hub"),Hn.forEach(o),il.forEach(o),fa=f(e),$=l(e,"P",{});var C=s($);nr=i(C,"The "),dt=l(C,"A",{href:!0});var qn=s(dt);pr=i(qn,"Repository"),qn.forEach(o),hr=i(C," class also has a "),_t=l(C,"A",{href:!0});var Pn=s(_t);fr=i(Pn,"push_to_hub()"),Pn.forEach(o),ur=i(C," function to add files, make a commit, and push them to a repository. Unlike the "),jo=l(C,"CODE",{});var Cn=s(jo);cr=i(Cn,"commit"),Cn.forEach(o),mr=i(C," context manager, "),gt=l(C,"A",{href:!0});var Ln=s(gt);dr=i(Ln,"push_to_hub()"),Ln.forEach(o),_r=i(C," requires you to pull from a repository first, save the files, and then call "),yt=l(C,"A",{href:!0});var xn=s(yt);gr=i(xn,"push_to_hub()"),xn.forEach(o),yr=i(C,"."),C.forEach(o),ua=f(e),m(Me.$$.fragment,e),ca=f(e),x=l(e,"P",{});var Bt=s(x);vr=i(Bt,"However, if you aren\u2019t ready to push a file yet, you can still use "),vt=l(Bt,"A",{href:!0});var Tn=s(vt);wr=i(Tn,"git_add()"),Tn.forEach(o),br=i(Bt," and "),wt=l(Bt,"A",{href:!0});var On=s(wt);$r=i(On,"git_commit()"),On.forEach(o),Er=i(Bt," to add and commit your file:"),Bt.forEach(o),ma=f(e),m(Be.$$.fragment,e),da=f(e),ae=l(e,"P",{});var nl=s(ae);kr=i(nl,"Once you\u2019re ready, you can push your file to your repository with "),bt=l(nl,"A",{href:!0});var Dn=s(bt);jr=i(Dn,"git_push()"),Dn.forEach(o),Ar=i(nl,":"),nl.forEach(o),_a=f(e),m(Ye.$$.fragment,e),ga=f(e),G=l(e,"H2",{class:!0});var pl=s(G);le=l(pl,"A",{id:!0,class:!0,href:!0});var Sn=s(le);Ao=l(Sn,"SPAN",{});var Un=s(Ao);m(We.$$.fragment,Un),Un.forEach(o),Sn.forEach(o),Hr=f(pl),Ho=l(pl,"SPAN",{});var In=s(Ho);qr=i(In,"Upload with Git LFS"),In.forEach(o),pl.forEach(o),ya=f(e),$t=l(e,"P",{});var Rn=s($t);Pr=i(Rn,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),Rn.forEach(o),va=f(e),m(Je.$$.fragment,e),wa=f(e),Et=l(e,"P",{});var Fn=s(Et);Cr=i(Fn,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),Fn.forEach(o),ba=f(e),N=l(e,"H2",{class:!0});var hl=s(N);se=l(hl,"A",{id:!0,class:!0,href:!0});var Gn=s(se);qo=l(Gn,"SPAN",{});var Nn=s(qo);m(ze.$$.fragment,Nn),Nn.forEach(o),Gn.forEach(o),Lr=f(hl),Po=l(hl,"SPAN",{});var Mn=s(Po);xr=i(Mn,"Upload without Git installed"),Mn.forEach(o),hl.forEach(o),$a=f(e),m(re.$$.fragment,e),Ea=f(e),T=l(e,"P",{});var Yt=s(T);Tr=i(Yt,"If you don\u2019t have Git installed on your system, use the "),kt=l(Yt,"A",{href:!0});var Bn=s(kt);Or=i(Bn,"create_commit()"),Bn.forEach(o),Dr=i(Yt," function to upload your file. "),jt=l(Yt,"A",{href:!0});var Yn=s(jt);Sr=i(Yn,"create_commit()"),Yn.forEach(o),Ur=i(Yt," uses the HTTP protocol to upload files to the Hub. Large files and binary files are automatically uploaded with the Git LFS protocol."),Yt.forEach(o),ka=f(e),ie=l(e,"P",{});var fl=s(ie);Ir=i(fl,"There are two kinds of operations supported by the "),At=l(fl,"A",{href:!0});var Wn=s(At);Rr=i(Wn,"create_commit()"),Wn.forEach(o),Fr=i(fl," function:"),fl.forEach(o),ja=f(e),ne=l(e,"UL",{});var ul=s(ne);Ke=l(ul,"LI",{});var cl=s(Ke);Ht=l(cl,"P",{});var ki=s(Ht);Co=l(ki,"CODE",{});var Jn=s(Co);Gr=i(Jn,"CommitOperationAdd"),Jn.forEach(o),Nr=i(ki," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),ki.forEach(o),Mr=f(cl),Qe=l(cl,"UL",{});var ml=s(Qe);qt=l(ml,"LI",{});var ji=s(qt);Lo=l(ji,"CODE",{});var zn=s(Lo);Br=i(zn,"path_in_repo"),zn.forEach(o),Yr=i(ji,": the repository path to upload a file to."),ji.forEach(o),Wr=f(ml),Pt=l(ml,"LI",{});var Ai=s(Pt);xo=l(Ai,"CODE",{});var Kn=s(xo);Jr=i(Kn,"path_or_fileobj"),Kn.forEach(o),zr=i(Ai,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Ai.forEach(o),ml.forEach(o),cl.forEach(o),Kr=f(ul),To=l(ul,"LI",{});var Qn=s(To);pe=l(Qn,"P",{});var Io=s(pe);Oo=l(Io,"CODE",{});var Vn=s(Oo);Qr=i(Vn,"CommitOperationDelete"),Vn.forEach(o),Vr=i(Io," removes a file from a repository. This operation accepts "),Do=l(Io,"CODE",{});var Xn=s(Do);Xr=i(Xn,"path_in_repo"),Xn.forEach(o),Zr=i(Io," as an argument."),Io.forEach(o),Qn.forEach(o),ul.forEach(o),Aa=f(e),Ct=l(e,"P",{});var Zn=s(Ct);ei=i(Zn,"For example, if you want to upload two files and delete a file in a Hub repository:"),Zn.forEach(o),Ha=f(e),Lt=l(e,"OL",{});var ep=s(Lt);Ve=l(ep,"LI",{});var dl=s(Ve);ti=i(dl,"Use the appropriate "),So=l(dl,"CODE",{});var tp=s(So);oi=i(tp,"CommitOperation"),tp.forEach(o),ai=i(dl," to add and delete a file:"),dl.forEach(o),ep.forEach(o),qa=f(e),m(Xe.$$.fragment,e),Pa=f(e),Ze=l(e,"OL",{start:!0});var op=s(Ze);et=l(op,"LI",{});var _l=s(et);li=i(_l,"Pass your operations to "),xt=l(_l,"A",{href:!0});var ap=s(xt);si=i(ap,"create_commit()"),ap.forEach(o),ri=i(_l,":"),_l.forEach(o),op.forEach(o),Ca=f(e),m(tt.$$.fragment,e),La=f(e),ot=l(e,"P",{});var Hi=s(ot);Tt=l(Hi,"A",{href:!0});var lp=s(Tt);ii=i(lp,"create_commit()"),lp.forEach(o),ni=i(Hi," is the underlying function behind each of these other functions:"),Hi.forEach(o),xa=f(e),q=l(e,"UL",{});var ce=s(q);Ot=l(ce,"LI",{});var qi=s(Ot);Dt=l(qi,"A",{href:!0});var sp=s(Dt);pi=i(sp,"upload_file()"),sp.forEach(o),hi=i(qi," uploads a single file to a repository on the Hub."),qi.forEach(o),fi=f(ce),St=l(ce,"LI",{});var Pi=s(St);Ut=l(Pi,"A",{href:!0});var rp=s(Ut);ui=i(rp,"upload_folder()"),rp.forEach(o),ci=i(Pi," uploads a local directory to a repository on the Hub."),Pi.forEach(o),mi=f(ce),It=l(ce,"LI",{});var Ci=s(It);Rt=l(Ci,"A",{href:!0});var ip=s(Rt);di=i(ip,"delete_file()"),ip.forEach(o),_i=i(Ci," deletes a single file from a repository on the Hub."),Ci.forEach(o),gi=f(ce),Ft=l(ce,"LI",{});var Li=s(Ft);Uo=l(Li,"CODE",{});var np=s(Uo);yi=i(np,"metadata_update()"),np.forEach(o),vi=i(Li," updates a repository\u2019s metadata."),Li.forEach(o),ce.forEach(o),Ta=f(e),he=l(e,"P",{});var gl=s(he);wi=i(gl,"For more detailed information about these functions, take a look at the "),Gt=l(gl,"A",{href:!0});var pp=s(Gt);bi=i(pp,"HfApi"),pp.forEach(o),$i=i(gl," reference."),gl.forEach(o),this.h()},h(){u(v,"name","hf:doc:metadata"),u(v,"content",JSON.stringify(yp)),u(j,"id","upload-files-to-the-hub"),u(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(j,"href","#upload-files-to-the-hub"),u(w,"class","relative group"),u(st,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(it,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(ve,"href","https://git-lfs.github.com/"),u(ve,"rel","nofollow"),u(nt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(J,"id","upload-a-file"),u(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(J,"href","#upload-a-file"),u(S,"class","relative group"),u(ft,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(K,"id","upload-a-folder"),u(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(K,"href","#upload-a-folder"),u(U,"class","relative group"),u(ut,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(V,"id","commit-context-manager"),u(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(V,"href","#commit-context-manager"),u(I,"class","relative group"),u(oe,"id","pushtohub"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#pushtohub"),u(F,"class","relative group"),u(dt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository"),u(_t,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(gt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(yt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(vt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_add"),u(wt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_commit"),u(bt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_push"),u(le,"id","upload-with-git-lfs"),u(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(le,"href","#upload-with-git-lfs"),u(G,"class","relative group"),u(se,"id","upload-without-git-installed"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#upload-without-git-installed"),u(N,"class","relative group"),u(kt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(jt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(At,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(xt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Ze,"start","2"),u(Tt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Dt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(Ut,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(Rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),u(Gt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi")},m(e,n){t(document.head,v),p(e,M,n),p(e,w,n),t(w,j),t(j,O),d(k,O,null),t(w,L),t(w,B),t(B,yl),p(e,Fo,n),p(e,Y,n),t(Y,vl),t(Y,Wt),t(Wt,wl),t(Y,bl),p(e,Go,n),p(e,b,n),t(b,me),t(me,$l),t(me,st),t(st,El),t(me,kl),t(b,jl),t(b,de),t(de,Al),t(de,rt),t(rt,Hl),t(de,ql),t(b,Pl),t(b,_e),t(_e,Cl),t(_e,Jt),t(Jt,Ll),t(_e,xl),t(b,Tl),t(b,ge),t(ge,Ol),t(ge,it),t(it,Dl),t(ge,Sl),t(b,Ul),t(b,ye),t(ye,Il),t(ye,ve),t(ve,Rl),t(ye,Fl),t(b,Gl),t(b,we),t(we,Nl),t(we,nt),t(nt,Ml),t(we,Bl),p(e,No,n),p(e,pt,n),t(pt,Yl),p(e,Mo,n),p(e,W,n),t(W,be),t(be,zt),t(zt,Wl),t(be,Jl),d($e,be,null),t(W,zl),t(W,D),t(D,Ee),t(Ee,Kl),t(Ee,Kt),t(Kt,Ql),t(Ee,Vl),t(D,Xl),d(ke,D,null),t(D,Zl),t(D,ht),t(ht,Qt),t(Qt,es),t(ht,ts),p(e,Bo,n),p(e,S,n),t(S,J),t(J,Vt),d(je,Vt,null),t(S,os),t(S,Xt),t(Xt,as),p(e,Yo,n),p(e,z,n),t(z,ls),t(z,ft),t(ft,ss),t(z,rs),p(e,Wo,n),d(Ae,e,n),p(e,Jo,n),p(e,U,n),t(U,K),t(K,Zt),d(He,Zt,null),t(U,is),t(U,eo),t(eo,ns),p(e,zo,n),p(e,Q,n),t(Q,ps),t(Q,ut),t(ut,hs),t(Q,fs),p(e,Ko,n),d(qe,e,n),p(e,Qo,n),p(e,I,n),t(I,V),t(V,to),d(Pe,to,null),t(I,us),t(I,oo),t(oo,cs),p(e,Vo,n),p(e,A,n),t(A,ms),t(A,ao),t(ao,ds),t(A,_s),t(A,lo),t(lo,gs),t(A,ys),t(A,so),t(so,vs),t(A,ws),p(e,Xo,n),p(e,H,n),t(H,Ce),t(Ce,bs),t(Ce,ro),t(ro,$s),t(Ce,Es),t(H,ks),t(H,Le),t(Le,js),t(Le,io),t(io,As),t(Le,Hs),t(H,qs),t(H,no),t(no,Ps),t(H,Cs),t(H,xe),t(xe,Ls),t(xe,po),t(po,xs),t(xe,Ts),p(e,Zo,n),d(Te,e,n),p(e,ea,n),p(e,ct,n),t(ct,Os),p(e,ta,n),d(Oe,e,n),p(e,oa,n),p(e,X,n),t(X,Ds),t(X,ho),t(ho,Ss),t(X,Us),p(e,aa,n),d(De,e,n),p(e,la,n),p(e,Z,n),t(Z,Is),t(Z,fo),t(fo,Rs),t(Z,Fs),p(e,sa,n),d(Se,e,n),p(e,ra,n),p(e,mt,n),t(mt,Gs),p(e,ia,n),p(e,ee,n),t(ee,uo),t(uo,Ue),t(Ue,co),t(co,Ns),t(Ue,Ms),t(Ue,mo),t(mo,Bs),t(ee,Ys),t(ee,R),t(R,Ie),t(Ie,_o),t(_o,Ws),t(Ie,Js),t(Ie,go),t(go,zs),t(R,Ks),t(R,Re),t(Re,yo),t(yo,Qs),t(Re,Vs),t(Re,vo),t(vo,Xs),t(R,Zs),t(R,Fe),t(Fe,wo),t(wo,er),t(Fe,tr),t(Fe,bo),t(bo,or),p(e,na,n),p(e,te,n),t(te,ar),t(te,$o),t($o,lr),t(te,sr),p(e,pa,n),d(Ge,e,n),p(e,ha,n),p(e,F,n),t(F,oe),t(oe,Eo),d(Ne,Eo,null),t(F,rr),t(F,ko),t(ko,ir),p(e,fa,n),p(e,$,n),t($,nr),t($,dt),t(dt,pr),t($,hr),t($,_t),t(_t,fr),t($,ur),t($,jo),t(jo,cr),t($,mr),t($,gt),t(gt,dr),t($,_r),t($,yt),t(yt,gr),t($,yr),p(e,ua,n),d(Me,e,n),p(e,ca,n),p(e,x,n),t(x,vr),t(x,vt),t(vt,wr),t(x,br),t(x,wt),t(wt,$r),t(x,Er),p(e,ma,n),d(Be,e,n),p(e,da,n),p(e,ae,n),t(ae,kr),t(ae,bt),t(bt,jr),t(ae,Ar),p(e,_a,n),d(Ye,e,n),p(e,ga,n),p(e,G,n),t(G,le),t(le,Ao),d(We,Ao,null),t(G,Hr),t(G,Ho),t(Ho,qr),p(e,ya,n),p(e,$t,n),t($t,Pr),p(e,va,n),d(Je,e,n),p(e,wa,n),p(e,Et,n),t(Et,Cr),p(e,ba,n),p(e,N,n),t(N,se),t(se,qo),d(ze,qo,null),t(N,Lr),t(N,Po),t(Po,xr),p(e,$a,n),d(re,e,n),p(e,Ea,n),p(e,T,n),t(T,Tr),t(T,kt),t(kt,Or),t(T,Dr),t(T,jt),t(jt,Sr),t(T,Ur),p(e,ka,n),p(e,ie,n),t(ie,Ir),t(ie,At),t(At,Rr),t(ie,Fr),p(e,ja,n),p(e,ne,n),t(ne,Ke),t(Ke,Ht),t(Ht,Co),t(Co,Gr),t(Ht,Nr),t(Ke,Mr),t(Ke,Qe),t(Qe,qt),t(qt,Lo),t(Lo,Br),t(qt,Yr),t(Qe,Wr),t(Qe,Pt),t(Pt,xo),t(xo,Jr),t(Pt,zr),t(ne,Kr),t(ne,To),t(To,pe),t(pe,Oo),t(Oo,Qr),t(pe,Vr),t(pe,Do),t(Do,Xr),t(pe,Zr),p(e,Aa,n),p(e,Ct,n),t(Ct,ei),p(e,Ha,n),p(e,Lt,n),t(Lt,Ve),t(Ve,ti),t(Ve,So),t(So,oi),t(Ve,ai),p(e,qa,n),d(Xe,e,n),p(e,Pa,n),p(e,Ze,n),t(Ze,et),t(et,li),t(et,xt),t(xt,si),t(et,ri),p(e,Ca,n),d(tt,e,n),p(e,La,n),p(e,ot,n),t(ot,Tt),t(Tt,ii),t(ot,ni),p(e,xa,n),p(e,q,n),t(q,Ot),t(Ot,Dt),t(Dt,pi),t(Ot,hi),t(q,fi),t(q,St),t(St,Ut),t(Ut,ui),t(St,ci),t(q,mi),t(q,It),t(It,Rt),t(Rt,di),t(It,_i),t(q,gi),t(q,Ft),t(Ft,Uo),t(Uo,yi),t(Ft,vi),p(e,Ta,n),p(e,he,n),t(he,wi),t(he,Gt),t(Gt,bi),t(he,$i),Oa=!0},p(e,[n]){const at={};n&2&&(at.$$scope={dirty:n,ctx:e}),re.$set(at)},i(e){Oa||(_(k.$$.fragment,e),_($e.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Ae.$$.fragment,e),_(He.$$.fragment,e),_(qe.$$.fragment,e),_(Pe.$$.fragment,e),_(Te.$$.fragment,e),_(Oe.$$.fragment,e),_(De.$$.fragment,e),_(Se.$$.fragment,e),_(Ge.$$.fragment,e),_(Ne.$$.fragment,e),_(Me.$$.fragment,e),_(Be.$$.fragment,e),_(Ye.$$.fragment,e),_(We.$$.fragment,e),_(Je.$$.fragment,e),_(ze.$$.fragment,e),_(re.$$.fragment,e),_(Xe.$$.fragment,e),_(tt.$$.fragment,e),Oa=!0)},o(e){g(k.$$.fragment,e),g($e.$$.fragment,e),g(ke.$$.fragment,e),g(je.$$.fragment,e),g(Ae.$$.fragment,e),g(He.$$.fragment,e),g(qe.$$.fragment,e),g(Pe.$$.fragment,e),g(Te.$$.fragment,e),g(Oe.$$.fragment,e),g(De.$$.fragment,e),g(Se.$$.fragment,e),g(Ge.$$.fragment,e),g(Ne.$$.fragment,e),g(Me.$$.fragment,e),g(Be.$$.fragment,e),g(Ye.$$.fragment,e),g(We.$$.fragment,e),g(Je.$$.fragment,e),g(ze.$$.fragment,e),g(re.$$.fragment,e),g(Xe.$$.fragment,e),g(tt.$$.fragment,e),Oa=!1},d(e){o(v),e&&o(M),e&&o(w),y(k),e&&o(Fo),e&&o(Y),e&&o(Go),e&&o(b),e&&o(No),e&&o(pt),e&&o(Mo),e&&o(W),y($e),y(ke),e&&o(Bo),e&&o(S),y(je),e&&o(Yo),e&&o(z),e&&o(Wo),y(Ae,e),e&&o(Jo),e&&o(U),y(He),e&&o(zo),e&&o(Q),e&&o(Ko),y(qe,e),e&&o(Qo),e&&o(I),y(Pe),e&&o(Vo),e&&o(A),e&&o(Xo),e&&o(H),e&&o(Zo),y(Te,e),e&&o(ea),e&&o(ct),e&&o(ta),y(Oe,e),e&&o(oa),e&&o(X),e&&o(aa),y(De,e),e&&o(la),e&&o(Z),e&&o(sa),y(Se,e),e&&o(ra),e&&o(mt),e&&o(ia),e&&o(ee),e&&o(na),e&&o(te),e&&o(pa),y(Ge,e),e&&o(ha),e&&o(F),y(Ne),e&&o(fa),e&&o($),e&&o(ua),y(Me,e),e&&o(ca),e&&o(x),e&&o(ma),y(Be,e),e&&o(da),e&&o(ae),e&&o(_a),y(Ye,e),e&&o(ga),e&&o(G),y(We),e&&o(ya),e&&o($t),e&&o(va),y(Je,e),e&&o(wa),e&&o(Et),e&&o(ba),e&&o(N),y(ze),e&&o($a),y(re,e),e&&o(Ea),e&&o(T),e&&o(ka),e&&o(ie),e&&o(ja),e&&o(ne),e&&o(Aa),e&&o(Ct),e&&o(Ha),e&&o(Lt),e&&o(qa),y(Xe,e),e&&o(Pa),e&&o(Ze),e&&o(Ca),y(tt,e),e&&o(La),e&&o(ot),e&&o(xa),e&&o(q),e&&o(Ta),e&&o(he)}}}const yp={local:"upload-files-to-the-hub",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"},{local:"upload-without-git-installed",title:"Upload without Git installed"}],title:"Upload files to the Hub"};function vp(Ro){return mp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kp extends hp{constructor(v){super();fp(this,v,vp,gp,up,{})}}export{kp as default,yp as metadata};
