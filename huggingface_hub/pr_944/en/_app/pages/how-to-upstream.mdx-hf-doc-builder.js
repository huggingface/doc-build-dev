import{S as gh,i as yh,s as vh,e as s,k as h,w as u,t as a,M as wh,c as r,d as o,m as f,a as i,x as m,h as l,b as c,G as t,g as p,y as d,L as bh,q as _,o as g,B as y,v as Eh}from"../chunks/vendor-hf-doc-builder.js";import{I as ve}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as v}from"../chunks/CodeBlock-hf-doc-builder.js";function $h(kn){let L,la,S,Y,Vt,we,Gl,Xt,Ml,sa,z,Bl,Zt,Wl,Yl,ra,$,eo,zl,Jl,be,Kl,Ee,Ql,Vl,Xl,$e,Zl,to,es,ts,os,ke,as,nt,ls,ss,ia,pt,rs,na,J,je,oo,is,ns,Ae,ps,I,He,hs,ao,fs,cs,us,qe,ms,ht,lo,ds,_s,pa,R,K,so,Pe,gs,ro,ys,ha,q,vs,ft,ws,bs,ct,Es,$s,fa,w,ks,ut,js,As,mt,Hs,qs,dt,Ps,Cs,_t,xs,Os,ca,F,Q,io,Ce,Ds,no,Ts,ua,P,Ls,gt,po,Ss,Is,yt,Rs,Fs,ma,k,Ns,ho,Us,Gs,fo,Ms,Bs,co,Ws,Ys,da,xe,_a,N,V,uo,Oe,zs,mo,Js,ga,b,Ks,vt,Qs,Vs,_o,Xs,Zs,go,er,tr,yo,or,ar,ya,De,va,U,X,vo,Te,lr,wo,sr,wa,C,rr,wt,ir,nr,bt,pr,hr,ba,Z,Le,Et,bo,fr,cr,ur,Se,$t,Eo,mr,dr,_r,kt,$o,gr,yr,vr,ko,ee,jo,wr,br,Ao,Er,$r,Ea,jt,kr,$a,At,Ie,jr,Ho,Ar,Hr,ka,Re,ja,Fe,Ne,qr,Ht,Pr,Cr,Aa,Ue,Ha,j,xr,qt,Or,Dr,Pt,Tr,Lr,Ct,Sr,Ir,qa,te,xt,Ot,Rr,Fr,Nr,Dt,qo,Ur,Gr,Pa,oe,Mr,Tt,Br,Wr,Ca,G,ae,Po,Ge,Yr,Co,zr,xa,Lt,Jr,Oa,Me,Da,St,Kr,Ta,M,le,xo,Be,Qr,Oo,Vr,La,A,Xr,Do,Zr,ei,To,ti,oi,Lo,ai,li,Sa,H,We,si,So,ri,ii,ni,Ye,pi,Io,hi,fi,ci,Ro,ui,mi,ze,di,Fo,_i,gi,Ia,Je,Ra,se,yi,No,vi,wi,Fa,Ke,Na,re,bi,Uo,Ei,$i,Ua,Qe,Ga,ie,ki,Go,ji,Ai,Ma,Ve,Ba,It,Hi,Wa,ne,Mo,Xe,Bo,qi,Pi,Wo,Ci,xi,B,Ze,Yo,Oi,Di,zo,Ti,Li,et,Jo,Si,Ii,Ko,Ri,Fi,tt,Qo,Ni,Ui,Vo,Gi,Ya,pe,Mi,Xo,Bi,Wi,za,ot,Ja,W,he,Zo,at,Yi,ea,zi,Ka,E,Ji,Rt,Ki,Qi,Ft,Vi,Xi,ta,Zi,en,Nt,tn,on,Qa,fe,an,oa,ln,sn,Va,lt,Xa,ce,rn,Ut,nn,pn,Za,st,el,x,hn,Gt,fn,cn,Mt,un,mn,tl,rt,ol,ue,dn,Bt,_n,gn,al,it,ll;return we=new ve({}),Ae=new v({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),qe=new v({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),Pe=new ve({}),Ce=new ve({}),xe=new v({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(path_or_fileobj="/path/to/local/folder/README.md", 
                path_in_repo="README.md", 
                repo_id="username/test-dataset",
                repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(path_or_fileobj=<span class="hljs-string">&quot;/path/to/local/folder/README.md&quot;</span>, 
<span class="hljs-meta">... </span>                path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>                repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>                repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Oe=new ve({}),De=new v({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(folder_path="/path/to/local/folder",
                  path_in_repo="my-dataset/train",
                  repo_id="username/test-dataset",
                  repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>                  path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>                  repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>                  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Te=new ve({}),Re=new v({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),Ue=new v({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Ge=new ve({}),Me=new v({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),Be=new ve({}),Je=new v({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),Ke=new v({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Qe=new v({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),Ve=new v({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),ot=new v({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),at=new ve({}),lt=new v({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)`}}),st=new v({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),rt=new v({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),it=new v({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),{c(){L=s("meta"),la=h(),S=s("h1"),Y=s("a"),Vt=s("span"),u(we.$$.fragment),Gl=h(),Xt=s("span"),Ml=a("Upload files to the Hub"),sa=h(),z=s("p"),Bl=a("Sharing your files and work is an important aspect of the Hub. The "),Zt=s("code"),Wl=a("huggingface_hub"),Yl=a(" offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),ra=h(),$=s("ul"),eo=s("li"),zl=a("without using Git."),Jl=h(),be=s("li"),Kl=a("that are very large with "),Ee=s("a"),Ql=a("Git LFS"),Vl=a("."),Xl=h(),$e=s("li"),Zl=a("with the "),to=s("code"),es=a("commit"),ts=a(" context manager."),os=h(),ke=s("li"),as=a("with the "),nt=s("a"),ls=a("push_to_hub()"),ss=a(" function."),ia=h(),pt=s("p"),rs=a("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),na=h(),J=s("ul"),je=s("li"),oo=s("p"),is=a("Log in to your Hugging Face account with the following command:"),ns=h(),u(Ae.$$.fragment),ps=h(),I=s("li"),He=s("p"),hs=a("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, log in with "),ao=s("code"),fs=a("notebook_login()"),cs=a(":"),us=h(),u(qe.$$.fragment),ms=h(),ht=s("p"),lo=s("code"),ds=a("notebook_login()"),_s=a(" launches a widget in your notebook from which you can enter your Hugging Face credentials."),pa=h(),R=s("h2"),K=s("a"),so=s("span"),u(Pe.$$.fragment),gs=h(),ro=s("span"),ys=a("Push files without Git"),ha=h(),q=s("p"),vs=a("If you don\u2019t have Git installed on your system, use "),ft=s("a"),ws=a("create_commit()"),bs=a(" to push your files to the Hub. "),ct=s("a"),Es=a("create_commit()"),$s=a(" uses the HTTP protocol to upload files to the Hub."),fa=h(),w=s("p"),ks=a("However, "),ut=s("a"),js=a("create_commit()"),As=a(" is a low-level API for working at a commit level. The "),mt=s("a"),Hs=a("upload_file()"),qs=a(" and "),dt=s("a"),Ps=a("upload_folder()"),Cs=a(" functions are higher-level APIs that use "),_t=s("a"),xs=a("create_commit()"),Os=a(" under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),ca=h(),F=s("h3"),Q=s("a"),io=s("span"),u(Ce.$$.fragment),Ds=h(),no=s("span"),Ts=a("Upload a file"),ua=h(),P=s("p"),Ls=a("Once you\u2019ve created a repository with the "),gt=s("a"),po=s("code"),Ss=a("create_repo"),Is=a(" function, you can upload a file to your repository with the "),yt=s("a"),Rs=a("upload_file()"),Fs=a(" function."),ma=h(),k=s("p"),Ns=a("Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),ho=s("code"),Us=a("dataset"),Gs=a(", "),fo=s("code"),Ms=a("model"),Bs=a(", or "),co=s("code"),Ws=a("space"),Ys=a("."),da=h(),u(xe.$$.fragment),_a=h(),N=s("h3"),V=s("a"),uo=s("span"),u(Oe.$$.fragment),zs=h(),mo=s("span"),Js=a("Upload a folder"),ga=h(),b=s("p"),Ks=a("Use the "),vt=s("a"),Qs=a("upload_folder()"),Vs=a(" function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),_o=s("code"),Xs=a("dataset"),Zs=a(", "),go=s("code"),er=a("model"),tr=a(", or "),yo=s("code"),or=a("space"),ar=a("."),ya=h(),u(De.$$.fragment),va=h(),U=s("h3"),X=s("a"),vo=s("span"),u(Te.$$.fragment),lr=h(),wo=s("span"),sr=a("create_commit"),wa=h(),C=s("p"),rr=a("If you want to work at a commit-level, use the "),wt=s("a"),ir=a("create_commit()"),nr=a(" function directly. There are two types of operations supported by "),bt=s("a"),pr=a("create_commit()"),hr=a(":"),ba=h(),Z=s("ul"),Le=s("li"),Et=s("p"),bo=s("code"),fr=a("CommitOperationAdd"),cr=a(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),ur=h(),Se=s("ul"),$t=s("li"),Eo=s("code"),mr=a("path_in_repo"),dr=a(": the repository path to upload a file to."),_r=h(),kt=s("li"),$o=s("code"),gr=a("path_or_fileobj"),yr=a(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),vr=h(),ko=s("li"),ee=s("p"),jo=s("code"),wr=a("CommitOperationDelete"),br=a(" removes a file from a repository. This operation accepts "),Ao=s("code"),Er=a("path_in_repo"),$r=a(" as an argument."),Ea=h(),jt=s("p"),kr=a("For example, if you want to upload two files and delete a file in a Hub repository:"),$a=h(),At=s("ol"),Ie=s("li"),jr=a("Use the appropriate "),Ho=s("code"),Ar=a("CommitOperation"),Hr=a(" to add and delete a file:"),ka=h(),u(Re.$$.fragment),ja=h(),Fe=s("ol"),Ne=s("li"),qr=a("Pass your operations to "),Ht=s("a"),Pr=a("create_commit()"),Cr=a(":"),Aa=h(),u(Ue.$$.fragment),Ha=h(),j=s("p"),xr=a("In addition to "),qt=s("a"),Or=a("upload_file()"),Dr=a(" and "),Pt=s("a"),Tr=a("upload_folder()"),Lr=a(", the following functions also use "),Ct=s("a"),Sr=a("create_commit()"),Ir=a(" under the hood:"),qa=h(),te=s("ul"),xt=s("li"),Ot=s("a"),Rr=a("delete_file()"),Fr=a(" deletes a single file from a repository on the Hub."),Nr=h(),Dt=s("li"),qo=s("code"),Ur=a("metadata_update()"),Gr=a(" updates a repository\u2019s metadata."),Pa=h(),oe=s("p"),Mr=a("For more detailed information, take a look at the "),Tt=s("a"),Br=a("HfApi"),Wr=a(" reference."),Ca=h(),G=s("h2"),ae=s("a"),Po=s("span"),u(Ge.$$.fragment),Yr=h(),Co=s("span"),zr=a("Push files with Git LFS"),xa=h(),Lt=s("p"),Jr=a("Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),Oa=h(),u(Me.$$.fragment),Da=h(),St=s("p"),Kr=a("You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),Ta=h(),M=s("h2"),le=s("a"),xo=s("span"),u(Be.$$.fragment),Qr=h(),Oo=s("span"),Vr=a("commit context manager"),La=h(),A=s("p"),Xr=a("The "),Do=s("code"),Zr=a("commit"),ei=a(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),To=s("code"),ti=a("git-lfs"),oi=a(" automatically tracks any file larger than 10MB. In the following example, the "),Lo=s("code"),ai=a("commit"),li=a(" context manager:"),Sa=h(),H=s("ol"),We=s("li"),si=a("Pulls from the "),So=s("code"),ri=a("text-files"),ii=a(" repository."),ni=h(),Ye=s("li"),pi=a("Adds a change made to "),Io=s("code"),hi=a("file.txt"),fi=a("."),ci=h(),Ro=s("li"),ui=a("Commits the change."),mi=h(),ze=s("li"),di=a("Pushes the change to the "),Fo=s("code"),_i=a("text-files"),gi=a(" repository."),Ia=h(),u(Je.$$.fragment),Ra=h(),se=s("p"),yi=a("Here is another example of how to use the "),No=s("code"),vi=a("commit"),wi=a(" context manager to save and upload a file to a repository:"),Fa=h(),u(Ke.$$.fragment),Na=h(),re=s("p"),bi=a("Set "),Uo=s("code"),Ei=a("blocking=False"),$i=a(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Ua=h(),u(Qe.$$.fragment),Ga=h(),ie=s("p"),ki=a("You can check the status of your push with the "),Go=s("code"),ji=a("command_queue"),Ai=a(" method:"),Ma=h(),u(Ve.$$.fragment),Ba=h(),It=s("p"),Hi=a("Refer to the table below for the possible statuses:"),Wa=h(),ne=s("table"),Mo=s("thead"),Xe=s("tr"),Bo=s("th"),qi=a("Status"),Pi=h(),Wo=s("th"),Ci=a("Description"),xi=h(),B=s("tbody"),Ze=s("tr"),Yo=s("td"),Oi=a("-1"),Di=h(),zo=s("td"),Ti=a("The push is ongoing."),Li=h(),et=s("tr"),Jo=s("td"),Si=a("0"),Ii=h(),Ko=s("td"),Ri=a("The push has completed successfully."),Fi=h(),tt=s("tr"),Qo=s("td"),Ni=a("Non-zero"),Ui=h(),Vo=s("td"),Gi=a("An error has occurred."),Ya=h(),pe=s("p"),Mi=a("When "),Xo=s("code"),Bi=a("blocking=False"),Wi=a(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),za=h(),u(ot.$$.fragment),Ja=h(),W=s("h2"),he=s("a"),Zo=s("span"),u(at.$$.fragment),Yi=h(),ea=s("span"),zi=a("push_to_hub"),Ka=h(),E=s("p"),Ji=a("The "),Rt=s("a"),Ki=a("Repository"),Qi=a(" class has a "),Ft=s("a"),Vi=a("push_to_hub()"),Xi=a(" function to add files, make a commit, and push them to a repository. Unlike the "),ta=s("code"),Zi=a("commit"),en=a(" context manager, you\u2019ll need to pull from a repository first before calling "),Nt=s("a"),tn=a("push_to_hub()"),on=a("."),Qa=h(),fe=s("p"),an=a("For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),oa=s("code"),ln=a("repo"),sn=a(" from the local directory:"),Va=h(),u(lt.$$.fragment),Xa=h(),ce=s("p"),rn=a("Update your local clone with "),Ut=s("a"),nn=a("git_pull()"),pn=a(" and then push your file to the Hub:"),Za=h(),u(st.$$.fragment),el=h(),x=s("p"),hn=a("However, if you aren\u2019t ready to push a file yet, you can use "),Gt=s("a"),fn=a("git_add()"),cn=a(" and "),Mt=s("a"),un=a("git_commit()"),mn=a(" to only add and commit your file:"),tl=h(),u(rt.$$.fragment),ol=h(),ue=s("p"),dn=a("When you\u2019re ready, push the file to your repository with "),Bt=s("a"),_n=a("git_push()"),gn=a(":"),al=h(),u(it.$$.fragment),this.h()},l(e){const n=wh('[data-svelte="svelte-1phssyn"]',document.head);L=r(n,"META",{name:!0,content:!0}),n.forEach(o),la=f(e),S=r(e,"H1",{class:!0});var sl=i(S);Y=r(sl,"A",{id:!0,class:!0,href:!0});var jn=i(Y);Vt=r(jn,"SPAN",{});var An=i(Vt);m(we.$$.fragment,An),An.forEach(o),jn.forEach(o),Gl=f(sl),Xt=r(sl,"SPAN",{});var Hn=i(Xt);Ml=l(Hn,"Upload files to the Hub"),Hn.forEach(o),sl.forEach(o),sa=f(e),z=r(e,"P",{});var rl=i(z);Bl=l(rl,"Sharing your files and work is an important aspect of the Hub. The "),Zt=r(rl,"CODE",{});var qn=i(Zt);Wl=l(qn,"huggingface_hub"),qn.forEach(o),Yl=l(rl," offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),rl.forEach(o),ra=f(e),$=r(e,"UL",{});var me=i($);eo=r(me,"LI",{});var Pn=i(eo);zl=l(Pn,"without using Git."),Pn.forEach(o),Jl=f(me),be=r(me,"LI",{});var il=i(be);Kl=l(il,"that are very large with "),Ee=r(il,"A",{href:!0,rel:!0});var Cn=i(Ee);Ql=l(Cn,"Git LFS"),Cn.forEach(o),Vl=l(il,"."),il.forEach(o),Xl=f(me),$e=r(me,"LI",{});var nl=i($e);Zl=l(nl,"with the "),to=r(nl,"CODE",{});var xn=i(to);es=l(xn,"commit"),xn.forEach(o),ts=l(nl," context manager."),nl.forEach(o),os=f(me),ke=r(me,"LI",{});var pl=i(ke);as=l(pl,"with the "),nt=r(pl,"A",{href:!0});var On=i(nt);ls=l(On,"push_to_hub()"),On.forEach(o),ss=l(pl," function."),pl.forEach(o),me.forEach(o),ia=f(e),pt=r(e,"P",{});var Dn=i(pt);rs=l(Dn,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Dn.forEach(o),na=f(e),J=r(e,"UL",{});var hl=i(J);je=r(hl,"LI",{});var fl=i(je);oo=r(fl,"P",{});var Tn=i(oo);is=l(Tn,"Log in to your Hugging Face account with the following command:"),Tn.forEach(o),ns=f(fl),m(Ae.$$.fragment,fl),fl.forEach(o),ps=f(hl),I=r(hl,"LI",{});var Wt=i(I);He=r(Wt,"P",{});var cl=i(He);hs=l(cl,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, log in with "),ao=r(cl,"CODE",{});var Ln=i(ao);fs=l(Ln,"notebook_login()"),Ln.forEach(o),cs=l(cl,":"),cl.forEach(o),us=f(Wt),m(qe.$$.fragment,Wt),ms=f(Wt),ht=r(Wt,"P",{});var yn=i(ht);lo=r(yn,"CODE",{});var Sn=i(lo);ds=l(Sn,"notebook_login()"),Sn.forEach(o),_s=l(yn," launches a widget in your notebook from which you can enter your Hugging Face credentials."),yn.forEach(o),Wt.forEach(o),hl.forEach(o),pa=f(e),R=r(e,"H2",{class:!0});var ul=i(R);K=r(ul,"A",{id:!0,class:!0,href:!0});var In=i(K);so=r(In,"SPAN",{});var Rn=i(so);m(Pe.$$.fragment,Rn),Rn.forEach(o),In.forEach(o),gs=f(ul),ro=r(ul,"SPAN",{});var Fn=i(ro);ys=l(Fn,"Push files without Git"),Fn.forEach(o),ul.forEach(o),ha=f(e),q=r(e,"P",{});var Yt=i(q);vs=l(Yt,"If you don\u2019t have Git installed on your system, use "),ft=r(Yt,"A",{href:!0});var Nn=i(ft);ws=l(Nn,"create_commit()"),Nn.forEach(o),bs=l(Yt," to push your files to the Hub. "),ct=r(Yt,"A",{href:!0});var Un=i(ct);Es=l(Un,"create_commit()"),Un.forEach(o),$s=l(Yt," uses the HTTP protocol to upload files to the Hub."),Yt.forEach(o),fa=f(e),w=r(e,"P",{});var O=i(w);ks=l(O,"However, "),ut=r(O,"A",{href:!0});var Gn=i(ut);js=l(Gn,"create_commit()"),Gn.forEach(o),As=l(O," is a low-level API for working at a commit level. The "),mt=r(O,"A",{href:!0});var Mn=i(mt);Hs=l(Mn,"upload_file()"),Mn.forEach(o),qs=l(O," and "),dt=r(O,"A",{href:!0});var Bn=i(dt);Ps=l(Bn,"upload_folder()"),Bn.forEach(o),Cs=l(O," functions are higher-level APIs that use "),_t=r(O,"A",{href:!0});var Wn=i(_t);xs=l(Wn,"create_commit()"),Wn.forEach(o),Os=l(O," under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),O.forEach(o),ca=f(e),F=r(e,"H3",{class:!0});var ml=i(F);Q=r(ml,"A",{id:!0,class:!0,href:!0});var Yn=i(Q);io=r(Yn,"SPAN",{});var zn=i(io);m(Ce.$$.fragment,zn),zn.forEach(o),Yn.forEach(o),Ds=f(ml),no=r(ml,"SPAN",{});var Jn=i(no);Ts=l(Jn,"Upload a file"),Jn.forEach(o),ml.forEach(o),ua=f(e),P=r(e,"P",{});var zt=i(P);Ls=l(zt,"Once you\u2019ve created a repository with the "),gt=r(zt,"A",{href:!0});var Kn=i(gt);po=r(Kn,"CODE",{});var Qn=i(po);Ss=l(Qn,"create_repo"),Qn.forEach(o),Kn.forEach(o),Is=l(zt," function, you can upload a file to your repository with the "),yt=r(zt,"A",{href:!0});var Vn=i(yt);Rs=l(Vn,"upload_file()"),Vn.forEach(o),Fs=l(zt," function."),zt.forEach(o),ma=f(e),k=r(e,"P",{});var de=i(k);Ns=l(de,"Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),ho=r(de,"CODE",{});var Xn=i(ho);Us=l(Xn,"dataset"),Xn.forEach(o),Gs=l(de,", "),fo=r(de,"CODE",{});var Zn=i(fo);Ms=l(Zn,"model"),Zn.forEach(o),Bs=l(de,", or "),co=r(de,"CODE",{});var ep=i(co);Ws=l(ep,"space"),ep.forEach(o),Ys=l(de,"."),de.forEach(o),da=f(e),m(xe.$$.fragment,e),_a=f(e),N=r(e,"H3",{class:!0});var dl=i(N);V=r(dl,"A",{id:!0,class:!0,href:!0});var tp=i(V);uo=r(tp,"SPAN",{});var op=i(uo);m(Oe.$$.fragment,op),op.forEach(o),tp.forEach(o),zs=f(dl),mo=r(dl,"SPAN",{});var ap=i(mo);Js=l(ap,"Upload a folder"),ap.forEach(o),dl.forEach(o),ga=f(e),b=r(e,"P",{});var D=i(b);Ks=l(D,"Use the "),vt=r(D,"A",{href:!0});var lp=i(vt);Qs=l(lp,"upload_folder()"),lp.forEach(o),Vs=l(D," function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),_o=r(D,"CODE",{});var sp=i(_o);Xs=l(sp,"dataset"),sp.forEach(o),Zs=l(D,", "),go=r(D,"CODE",{});var rp=i(go);er=l(rp,"model"),rp.forEach(o),tr=l(D,", or "),yo=r(D,"CODE",{});var ip=i(yo);or=l(ip,"space"),ip.forEach(o),ar=l(D,"."),D.forEach(o),ya=f(e),m(De.$$.fragment,e),va=f(e),U=r(e,"H3",{class:!0});var _l=i(U);X=r(_l,"A",{id:!0,class:!0,href:!0});var np=i(X);vo=r(np,"SPAN",{});var pp=i(vo);m(Te.$$.fragment,pp),pp.forEach(o),np.forEach(o),lr=f(_l),wo=r(_l,"SPAN",{});var hp=i(wo);sr=l(hp,"create_commit"),hp.forEach(o),_l.forEach(o),wa=f(e),C=r(e,"P",{});var Jt=i(C);rr=l(Jt,"If you want to work at a commit-level, use the "),wt=r(Jt,"A",{href:!0});var fp=i(wt);ir=l(fp,"create_commit()"),fp.forEach(o),nr=l(Jt," function directly. There are two types of operations supported by "),bt=r(Jt,"A",{href:!0});var cp=i(bt);pr=l(cp,"create_commit()"),cp.forEach(o),hr=l(Jt,":"),Jt.forEach(o),ba=f(e),Z=r(e,"UL",{});var gl=i(Z);Le=r(gl,"LI",{});var yl=i(Le);Et=r(yl,"P",{});var vn=i(Et);bo=r(vn,"CODE",{});var up=i(bo);fr=l(up,"CommitOperationAdd"),up.forEach(o),cr=l(vn," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),vn.forEach(o),ur=f(yl),Se=r(yl,"UL",{});var vl=i(Se);$t=r(vl,"LI",{});var wn=i($t);Eo=r(wn,"CODE",{});var mp=i(Eo);mr=l(mp,"path_in_repo"),mp.forEach(o),dr=l(wn,": the repository path to upload a file to."),wn.forEach(o),_r=f(vl),kt=r(vl,"LI",{});var bn=i(kt);$o=r(bn,"CODE",{});var dp=i($o);gr=l(dp,"path_or_fileobj"),dp.forEach(o),yr=l(bn,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),bn.forEach(o),vl.forEach(o),yl.forEach(o),vr=f(gl),ko=r(gl,"LI",{});var _p=i(ko);ee=r(_p,"P",{});var aa=i(ee);jo=r(aa,"CODE",{});var gp=i(jo);wr=l(gp,"CommitOperationDelete"),gp.forEach(o),br=l(aa," removes a file from a repository. This operation accepts "),Ao=r(aa,"CODE",{});var yp=i(Ao);Er=l(yp,"path_in_repo"),yp.forEach(o),$r=l(aa," as an argument."),aa.forEach(o),_p.forEach(o),gl.forEach(o),Ea=f(e),jt=r(e,"P",{});var vp=i(jt);kr=l(vp,"For example, if you want to upload two files and delete a file in a Hub repository:"),vp.forEach(o),$a=f(e),At=r(e,"OL",{});var wp=i(At);Ie=r(wp,"LI",{});var wl=i(Ie);jr=l(wl,"Use the appropriate "),Ho=r(wl,"CODE",{});var bp=i(Ho);Ar=l(bp,"CommitOperation"),bp.forEach(o),Hr=l(wl," to add and delete a file:"),wl.forEach(o),wp.forEach(o),ka=f(e),m(Re.$$.fragment,e),ja=f(e),Fe=r(e,"OL",{start:!0});var Ep=i(Fe);Ne=r(Ep,"LI",{});var bl=i(Ne);qr=l(bl,"Pass your operations to "),Ht=r(bl,"A",{href:!0});var $p=i(Ht);Pr=l($p,"create_commit()"),$p.forEach(o),Cr=l(bl,":"),bl.forEach(o),Ep.forEach(o),Aa=f(e),m(Ue.$$.fragment,e),Ha=f(e),j=r(e,"P",{});var _e=i(j);xr=l(_e,"In addition to "),qt=r(_e,"A",{href:!0});var kp=i(qt);Or=l(kp,"upload_file()"),kp.forEach(o),Dr=l(_e," and "),Pt=r(_e,"A",{href:!0});var jp=i(Pt);Tr=l(jp,"upload_folder()"),jp.forEach(o),Lr=l(_e,", the following functions also use "),Ct=r(_e,"A",{href:!0});var Ap=i(Ct);Sr=l(Ap,"create_commit()"),Ap.forEach(o),Ir=l(_e," under the hood:"),_e.forEach(o),qa=f(e),te=r(e,"UL",{});var El=i(te);xt=r(El,"LI",{});var En=i(xt);Ot=r(En,"A",{href:!0});var Hp=i(Ot);Rr=l(Hp,"delete_file()"),Hp.forEach(o),Fr=l(En," deletes a single file from a repository on the Hub."),En.forEach(o),Nr=f(El),Dt=r(El,"LI",{});var $n=i(Dt);qo=r($n,"CODE",{});var qp=i(qo);Ur=l(qp,"metadata_update()"),qp.forEach(o),Gr=l($n," updates a repository\u2019s metadata."),$n.forEach(o),El.forEach(o),Pa=f(e),oe=r(e,"P",{});var $l=i(oe);Mr=l($l,"For more detailed information, take a look at the "),Tt=r($l,"A",{href:!0});var Pp=i(Tt);Br=l(Pp,"HfApi"),Pp.forEach(o),Wr=l($l," reference."),$l.forEach(o),Ca=f(e),G=r(e,"H2",{class:!0});var kl=i(G);ae=r(kl,"A",{id:!0,class:!0,href:!0});var Cp=i(ae);Po=r(Cp,"SPAN",{});var xp=i(Po);m(Ge.$$.fragment,xp),xp.forEach(o),Cp.forEach(o),Yr=f(kl),Co=r(kl,"SPAN",{});var Op=i(Co);zr=l(Op,"Push files with Git LFS"),Op.forEach(o),kl.forEach(o),xa=f(e),Lt=r(e,"P",{});var Dp=i(Lt);Jr=l(Dp,"Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),Dp.forEach(o),Oa=f(e),m(Me.$$.fragment,e),Da=f(e),St=r(e,"P",{});var Tp=i(St);Kr=l(Tp,"You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),Tp.forEach(o),Ta=f(e),M=r(e,"H2",{class:!0});var jl=i(M);le=r(jl,"A",{id:!0,class:!0,href:!0});var Lp=i(le);xo=r(Lp,"SPAN",{});var Sp=i(xo);m(Be.$$.fragment,Sp),Sp.forEach(o),Lp.forEach(o),Qr=f(jl),Oo=r(jl,"SPAN",{});var Ip=i(Oo);Vr=l(Ip,"commit context manager"),Ip.forEach(o),jl.forEach(o),La=f(e),A=r(e,"P",{});var ge=i(A);Xr=l(ge,"The "),Do=r(ge,"CODE",{});var Rp=i(Do);Zr=l(Rp,"commit"),Rp.forEach(o),ei=l(ge," context manager handles four of the most common Git commands: pull, add, commit, and push. "),To=r(ge,"CODE",{});var Fp=i(To);ti=l(Fp,"git-lfs"),Fp.forEach(o),oi=l(ge," automatically tracks any file larger than 10MB. In the following example, the "),Lo=r(ge,"CODE",{});var Np=i(Lo);ai=l(Np,"commit"),Np.forEach(o),li=l(ge," context manager:"),ge.forEach(o),Sa=f(e),H=r(e,"OL",{});var ye=i(H);We=r(ye,"LI",{});var Al=i(We);si=l(Al,"Pulls from the "),So=r(Al,"CODE",{});var Up=i(So);ri=l(Up,"text-files"),Up.forEach(o),ii=l(Al," repository."),Al.forEach(o),ni=f(ye),Ye=r(ye,"LI",{});var Hl=i(Ye);pi=l(Hl,"Adds a change made to "),Io=r(Hl,"CODE",{});var Gp=i(Io);hi=l(Gp,"file.txt"),Gp.forEach(o),fi=l(Hl,"."),Hl.forEach(o),ci=f(ye),Ro=r(ye,"LI",{});var Mp=i(Ro);ui=l(Mp,"Commits the change."),Mp.forEach(o),mi=f(ye),ze=r(ye,"LI",{});var ql=i(ze);di=l(ql,"Pushes the change to the "),Fo=r(ql,"CODE",{});var Bp=i(Fo);_i=l(Bp,"text-files"),Bp.forEach(o),gi=l(ql," repository."),ql.forEach(o),ye.forEach(o),Ia=f(e),m(Je.$$.fragment,e),Ra=f(e),se=r(e,"P",{});var Pl=i(se);yi=l(Pl,"Here is another example of how to use the "),No=r(Pl,"CODE",{});var Wp=i(No);vi=l(Wp,"commit"),Wp.forEach(o),wi=l(Pl," context manager to save and upload a file to a repository:"),Pl.forEach(o),Fa=f(e),m(Ke.$$.fragment,e),Na=f(e),re=r(e,"P",{});var Cl=i(re);bi=l(Cl,"Set "),Uo=r(Cl,"CODE",{});var Yp=i(Uo);Ei=l(Yp,"blocking=False"),Yp.forEach(o),$i=l(Cl," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Cl.forEach(o),Ua=f(e),m(Qe.$$.fragment,e),Ga=f(e),ie=r(e,"P",{});var xl=i(ie);ki=l(xl,"You can check the status of your push with the "),Go=r(xl,"CODE",{});var zp=i(Go);ji=l(zp,"command_queue"),zp.forEach(o),Ai=l(xl," method:"),xl.forEach(o),Ma=f(e),m(Ve.$$.fragment,e),Ba=f(e),It=r(e,"P",{});var Jp=i(It);Hi=l(Jp,"Refer to the table below for the possible statuses:"),Jp.forEach(o),Wa=f(e),ne=r(e,"TABLE",{});var Ol=i(ne);Mo=r(Ol,"THEAD",{});var Kp=i(Mo);Xe=r(Kp,"TR",{});var Dl=i(Xe);Bo=r(Dl,"TH",{});var Qp=i(Bo);qi=l(Qp,"Status"),Qp.forEach(o),Pi=f(Dl),Wo=r(Dl,"TH",{});var Vp=i(Wo);Ci=l(Vp,"Description"),Vp.forEach(o),Dl.forEach(o),Kp.forEach(o),xi=f(Ol),B=r(Ol,"TBODY",{});var Kt=i(B);Ze=r(Kt,"TR",{});var Tl=i(Ze);Yo=r(Tl,"TD",{});var Xp=i(Yo);Oi=l(Xp,"-1"),Xp.forEach(o),Di=f(Tl),zo=r(Tl,"TD",{});var Zp=i(zo);Ti=l(Zp,"The push is ongoing."),Zp.forEach(o),Tl.forEach(o),Li=f(Kt),et=r(Kt,"TR",{});var Ll=i(et);Jo=r(Ll,"TD",{});var eh=i(Jo);Si=l(eh,"0"),eh.forEach(o),Ii=f(Ll),Ko=r(Ll,"TD",{});var th=i(Ko);Ri=l(th,"The push has completed successfully."),th.forEach(o),Ll.forEach(o),Fi=f(Kt),tt=r(Kt,"TR",{});var Sl=i(tt);Qo=r(Sl,"TD",{});var oh=i(Qo);Ni=l(oh,"Non-zero"),oh.forEach(o),Ui=f(Sl),Vo=r(Sl,"TD",{});var ah=i(Vo);Gi=l(ah,"An error has occurred."),ah.forEach(o),Sl.forEach(o),Kt.forEach(o),Ol.forEach(o),Ya=f(e),pe=r(e,"P",{});var Il=i(pe);Mi=l(Il,"When "),Xo=r(Il,"CODE",{});var lh=i(Xo);Bi=l(lh,"blocking=False"),lh.forEach(o),Wi=l(Il,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Il.forEach(o),za=f(e),m(ot.$$.fragment,e),Ja=f(e),W=r(e,"H2",{class:!0});var Rl=i(W);he=r(Rl,"A",{id:!0,class:!0,href:!0});var sh=i(he);Zo=r(sh,"SPAN",{});var rh=i(Zo);m(at.$$.fragment,rh),rh.forEach(o),sh.forEach(o),Yi=f(Rl),ea=r(Rl,"SPAN",{});var ih=i(ea);zi=l(ih,"push_to_hub"),ih.forEach(o),Rl.forEach(o),Ka=f(e),E=r(e,"P",{});var T=i(E);Ji=l(T,"The "),Rt=r(T,"A",{href:!0});var nh=i(Rt);Ki=l(nh,"Repository"),nh.forEach(o),Qi=l(T," class has a "),Ft=r(T,"A",{href:!0});var ph=i(Ft);Vi=l(ph,"push_to_hub()"),ph.forEach(o),Xi=l(T," function to add files, make a commit, and push them to a repository. Unlike the "),ta=r(T,"CODE",{});var hh=i(ta);Zi=l(hh,"commit"),hh.forEach(o),en=l(T," context manager, you\u2019ll need to pull from a repository first before calling "),Nt=r(T,"A",{href:!0});var fh=i(Nt);tn=l(fh,"push_to_hub()"),fh.forEach(o),on=l(T,"."),T.forEach(o),Qa=f(e),fe=r(e,"P",{});var Fl=i(fe);an=l(Fl,"For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),oa=r(Fl,"CODE",{});var ch=i(oa);ln=l(ch,"repo"),ch.forEach(o),sn=l(Fl," from the local directory:"),Fl.forEach(o),Va=f(e),m(lt.$$.fragment,e),Xa=f(e),ce=r(e,"P",{});var Nl=i(ce);rn=l(Nl,"Update your local clone with "),Ut=r(Nl,"A",{href:!0});var uh=i(Ut);nn=l(uh,"git_pull()"),uh.forEach(o),pn=l(Nl," and then push your file to the Hub:"),Nl.forEach(o),Za=f(e),m(st.$$.fragment,e),el=f(e),x=r(e,"P",{});var Qt=i(x);hn=l(Qt,"However, if you aren\u2019t ready to push a file yet, you can use "),Gt=r(Qt,"A",{href:!0});var mh=i(Gt);fn=l(mh,"git_add()"),mh.forEach(o),cn=l(Qt," and "),Mt=r(Qt,"A",{href:!0});var dh=i(Mt);un=l(dh,"git_commit()"),dh.forEach(o),mn=l(Qt," to only add and commit your file:"),Qt.forEach(o),tl=f(e),m(rt.$$.fragment,e),ol=f(e),ue=r(e,"P",{});var Ul=i(ue);dn=l(Ul,"When you\u2019re ready, push the file to your repository with "),Bt=r(Ul,"A",{href:!0});var _h=i(Bt);_n=l(_h,"git_push()"),_h.forEach(o),gn=l(Ul,":"),Ul.forEach(o),al=f(e),m(it.$$.fragment,e),this.h()},h(){c(L,"name","hf:doc:metadata"),c(L,"content",JSON.stringify(kh)),c(Y,"id","upload-files-to-the-hub"),c(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y,"href","#upload-files-to-the-hub"),c(S,"class","relative group"),c(Ee,"href","https://git-lfs.github.com/"),c(Ee,"rel","nofollow"),c(nt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(K,"id","push-files-without-git"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#push-files-without-git"),c(R,"class","relative group"),c(ft,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(ct,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(ut,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(mt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(dt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(_t,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Q,"id","upload-a-file"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#upload-a-file"),c(F,"class","relative group"),c(gt,"href","./how-to-manage#create-a-repository"),c(yt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(V,"id","upload-a-folder"),c(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V,"href","#upload-a-folder"),c(N,"class","relative group"),c(vt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(X,"id","createcommit"),c(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X,"href","#createcommit"),c(U,"class","relative group"),c(wt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(bt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ht,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Fe,"start","2"),c(qt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Pt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Ct,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ot,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),c(Tt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi"),c(ae,"id","push-files-with-git-lfs"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#push-files-with-git-lfs"),c(G,"class","relative group"),c(le,"id","commit-context-manager"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#commit-context-manager"),c(M,"class","relative group"),c(he,"id","pushtohub"),c(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(he,"href","#pushtohub"),c(W,"class","relative group"),c(Rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository"),c(Ft,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Nt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Ut,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_pull"),c(Gt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_add"),c(Mt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_commit"),c(Bt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_push")},m(e,n){t(document.head,L),p(e,la,n),p(e,S,n),t(S,Y),t(Y,Vt),d(we,Vt,null),t(S,Gl),t(S,Xt),t(Xt,Ml),p(e,sa,n),p(e,z,n),t(z,Bl),t(z,Zt),t(Zt,Wl),t(z,Yl),p(e,ra,n),p(e,$,n),t($,eo),t(eo,zl),t($,Jl),t($,be),t(be,Kl),t(be,Ee),t(Ee,Ql),t(be,Vl),t($,Xl),t($,$e),t($e,Zl),t($e,to),t(to,es),t($e,ts),t($,os),t($,ke),t(ke,as),t(ke,nt),t(nt,ls),t(ke,ss),p(e,ia,n),p(e,pt,n),t(pt,rs),p(e,na,n),p(e,J,n),t(J,je),t(je,oo),t(oo,is),t(je,ns),d(Ae,je,null),t(J,ps),t(J,I),t(I,He),t(He,hs),t(He,ao),t(ao,fs),t(He,cs),t(I,us),d(qe,I,null),t(I,ms),t(I,ht),t(ht,lo),t(lo,ds),t(ht,_s),p(e,pa,n),p(e,R,n),t(R,K),t(K,so),d(Pe,so,null),t(R,gs),t(R,ro),t(ro,ys),p(e,ha,n),p(e,q,n),t(q,vs),t(q,ft),t(ft,ws),t(q,bs),t(q,ct),t(ct,Es),t(q,$s),p(e,fa,n),p(e,w,n),t(w,ks),t(w,ut),t(ut,js),t(w,As),t(w,mt),t(mt,Hs),t(w,qs),t(w,dt),t(dt,Ps),t(w,Cs),t(w,_t),t(_t,xs),t(w,Os),p(e,ca,n),p(e,F,n),t(F,Q),t(Q,io),d(Ce,io,null),t(F,Ds),t(F,no),t(no,Ts),p(e,ua,n),p(e,P,n),t(P,Ls),t(P,gt),t(gt,po),t(po,Ss),t(P,Is),t(P,yt),t(yt,Rs),t(P,Fs),p(e,ma,n),p(e,k,n),t(k,Ns),t(k,ho),t(ho,Us),t(k,Gs),t(k,fo),t(fo,Ms),t(k,Bs),t(k,co),t(co,Ws),t(k,Ys),p(e,da,n),d(xe,e,n),p(e,_a,n),p(e,N,n),t(N,V),t(V,uo),d(Oe,uo,null),t(N,zs),t(N,mo),t(mo,Js),p(e,ga,n),p(e,b,n),t(b,Ks),t(b,vt),t(vt,Qs),t(b,Vs),t(b,_o),t(_o,Xs),t(b,Zs),t(b,go),t(go,er),t(b,tr),t(b,yo),t(yo,or),t(b,ar),p(e,ya,n),d(De,e,n),p(e,va,n),p(e,U,n),t(U,X),t(X,vo),d(Te,vo,null),t(U,lr),t(U,wo),t(wo,sr),p(e,wa,n),p(e,C,n),t(C,rr),t(C,wt),t(wt,ir),t(C,nr),t(C,bt),t(bt,pr),t(C,hr),p(e,ba,n),p(e,Z,n),t(Z,Le),t(Le,Et),t(Et,bo),t(bo,fr),t(Et,cr),t(Le,ur),t(Le,Se),t(Se,$t),t($t,Eo),t(Eo,mr),t($t,dr),t(Se,_r),t(Se,kt),t(kt,$o),t($o,gr),t(kt,yr),t(Z,vr),t(Z,ko),t(ko,ee),t(ee,jo),t(jo,wr),t(ee,br),t(ee,Ao),t(Ao,Er),t(ee,$r),p(e,Ea,n),p(e,jt,n),t(jt,kr),p(e,$a,n),p(e,At,n),t(At,Ie),t(Ie,jr),t(Ie,Ho),t(Ho,Ar),t(Ie,Hr),p(e,ka,n),d(Re,e,n),p(e,ja,n),p(e,Fe,n),t(Fe,Ne),t(Ne,qr),t(Ne,Ht),t(Ht,Pr),t(Ne,Cr),p(e,Aa,n),d(Ue,e,n),p(e,Ha,n),p(e,j,n),t(j,xr),t(j,qt),t(qt,Or),t(j,Dr),t(j,Pt),t(Pt,Tr),t(j,Lr),t(j,Ct),t(Ct,Sr),t(j,Ir),p(e,qa,n),p(e,te,n),t(te,xt),t(xt,Ot),t(Ot,Rr),t(xt,Fr),t(te,Nr),t(te,Dt),t(Dt,qo),t(qo,Ur),t(Dt,Gr),p(e,Pa,n),p(e,oe,n),t(oe,Mr),t(oe,Tt),t(Tt,Br),t(oe,Wr),p(e,Ca,n),p(e,G,n),t(G,ae),t(ae,Po),d(Ge,Po,null),t(G,Yr),t(G,Co),t(Co,zr),p(e,xa,n),p(e,Lt,n),t(Lt,Jr),p(e,Oa,n),d(Me,e,n),p(e,Da,n),p(e,St,n),t(St,Kr),p(e,Ta,n),p(e,M,n),t(M,le),t(le,xo),d(Be,xo,null),t(M,Qr),t(M,Oo),t(Oo,Vr),p(e,La,n),p(e,A,n),t(A,Xr),t(A,Do),t(Do,Zr),t(A,ei),t(A,To),t(To,ti),t(A,oi),t(A,Lo),t(Lo,ai),t(A,li),p(e,Sa,n),p(e,H,n),t(H,We),t(We,si),t(We,So),t(So,ri),t(We,ii),t(H,ni),t(H,Ye),t(Ye,pi),t(Ye,Io),t(Io,hi),t(Ye,fi),t(H,ci),t(H,Ro),t(Ro,ui),t(H,mi),t(H,ze),t(ze,di),t(ze,Fo),t(Fo,_i),t(ze,gi),p(e,Ia,n),d(Je,e,n),p(e,Ra,n),p(e,se,n),t(se,yi),t(se,No),t(No,vi),t(se,wi),p(e,Fa,n),d(Ke,e,n),p(e,Na,n),p(e,re,n),t(re,bi),t(re,Uo),t(Uo,Ei),t(re,$i),p(e,Ua,n),d(Qe,e,n),p(e,Ga,n),p(e,ie,n),t(ie,ki),t(ie,Go),t(Go,ji),t(ie,Ai),p(e,Ma,n),d(Ve,e,n),p(e,Ba,n),p(e,It,n),t(It,Hi),p(e,Wa,n),p(e,ne,n),t(ne,Mo),t(Mo,Xe),t(Xe,Bo),t(Bo,qi),t(Xe,Pi),t(Xe,Wo),t(Wo,Ci),t(ne,xi),t(ne,B),t(B,Ze),t(Ze,Yo),t(Yo,Oi),t(Ze,Di),t(Ze,zo),t(zo,Ti),t(B,Li),t(B,et),t(et,Jo),t(Jo,Si),t(et,Ii),t(et,Ko),t(Ko,Ri),t(B,Fi),t(B,tt),t(tt,Qo),t(Qo,Ni),t(tt,Ui),t(tt,Vo),t(Vo,Gi),p(e,Ya,n),p(e,pe,n),t(pe,Mi),t(pe,Xo),t(Xo,Bi),t(pe,Wi),p(e,za,n),d(ot,e,n),p(e,Ja,n),p(e,W,n),t(W,he),t(he,Zo),d(at,Zo,null),t(W,Yi),t(W,ea),t(ea,zi),p(e,Ka,n),p(e,E,n),t(E,Ji),t(E,Rt),t(Rt,Ki),t(E,Qi),t(E,Ft),t(Ft,Vi),t(E,Xi),t(E,ta),t(ta,Zi),t(E,en),t(E,Nt),t(Nt,tn),t(E,on),p(e,Qa,n),p(e,fe,n),t(fe,an),t(fe,oa),t(oa,ln),t(fe,sn),p(e,Va,n),d(lt,e,n),p(e,Xa,n),p(e,ce,n),t(ce,rn),t(ce,Ut),t(Ut,nn),t(ce,pn),p(e,Za,n),d(st,e,n),p(e,el,n),p(e,x,n),t(x,hn),t(x,Gt),t(Gt,fn),t(x,cn),t(x,Mt),t(Mt,un),t(x,mn),p(e,tl,n),d(rt,e,n),p(e,ol,n),p(e,ue,n),t(ue,dn),t(ue,Bt),t(Bt,_n),t(ue,gn),p(e,al,n),d(it,e,n),ll=!0},p:bh,i(e){ll||(_(we.$$.fragment,e),_(Ae.$$.fragment,e),_(qe.$$.fragment,e),_(Pe.$$.fragment,e),_(Ce.$$.fragment,e),_(xe.$$.fragment,e),_(Oe.$$.fragment,e),_(De.$$.fragment,e),_(Te.$$.fragment,e),_(Re.$$.fragment,e),_(Ue.$$.fragment,e),_(Ge.$$.fragment,e),_(Me.$$.fragment,e),_(Be.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(Ve.$$.fragment,e),_(ot.$$.fragment,e),_(at.$$.fragment,e),_(lt.$$.fragment,e),_(st.$$.fragment,e),_(rt.$$.fragment,e),_(it.$$.fragment,e),ll=!0)},o(e){g(we.$$.fragment,e),g(Ae.$$.fragment,e),g(qe.$$.fragment,e),g(Pe.$$.fragment,e),g(Ce.$$.fragment,e),g(xe.$$.fragment,e),g(Oe.$$.fragment,e),g(De.$$.fragment,e),g(Te.$$.fragment,e),g(Re.$$.fragment,e),g(Ue.$$.fragment,e),g(Ge.$$.fragment,e),g(Me.$$.fragment,e),g(Be.$$.fragment,e),g(Je.$$.fragment,e),g(Ke.$$.fragment,e),g(Qe.$$.fragment,e),g(Ve.$$.fragment,e),g(ot.$$.fragment,e),g(at.$$.fragment,e),g(lt.$$.fragment,e),g(st.$$.fragment,e),g(rt.$$.fragment,e),g(it.$$.fragment,e),ll=!1},d(e){o(L),e&&o(la),e&&o(S),y(we),e&&o(sa),e&&o(z),e&&o(ra),e&&o($),e&&o(ia),e&&o(pt),e&&o(na),e&&o(J),y(Ae),y(qe),e&&o(pa),e&&o(R),y(Pe),e&&o(ha),e&&o(q),e&&o(fa),e&&o(w),e&&o(ca),e&&o(F),y(Ce),e&&o(ua),e&&o(P),e&&o(ma),e&&o(k),e&&o(da),y(xe,e),e&&o(_a),e&&o(N),y(Oe),e&&o(ga),e&&o(b),e&&o(ya),y(De,e),e&&o(va),e&&o(U),y(Te),e&&o(wa),e&&o(C),e&&o(ba),e&&o(Z),e&&o(Ea),e&&o(jt),e&&o($a),e&&o(At),e&&o(ka),y(Re,e),e&&o(ja),e&&o(Fe),e&&o(Aa),y(Ue,e),e&&o(Ha),e&&o(j),e&&o(qa),e&&o(te),e&&o(Pa),e&&o(oe),e&&o(Ca),e&&o(G),y(Ge),e&&o(xa),e&&o(Lt),e&&o(Oa),y(Me,e),e&&o(Da),e&&o(St),e&&o(Ta),e&&o(M),y(Be),e&&o(La),e&&o(A),e&&o(Sa),e&&o(H),e&&o(Ia),y(Je,e),e&&o(Ra),e&&o(se),e&&o(Fa),y(Ke,e),e&&o(Na),e&&o(re),e&&o(Ua),y(Qe,e),e&&o(Ga),e&&o(ie),e&&o(Ma),y(Ve,e),e&&o(Ba),e&&o(It),e&&o(Wa),e&&o(ne),e&&o(Ya),e&&o(pe),e&&o(za),y(ot,e),e&&o(Ja),e&&o(W),y(at),e&&o(Ka),e&&o(E),e&&o(Qa),e&&o(fe),e&&o(Va),y(lt,e),e&&o(Xa),e&&o(ce),e&&o(Za),y(st,e),e&&o(el),e&&o(x),e&&o(tl),y(rt,e),e&&o(ol),e&&o(ue),e&&o(al),y(it,e)}}}const kh={local:"upload-files-to-the-hub",sections:[{local:"push-files-without-git",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"createcommit",title:"create_commit"}],title:"Push files without Git"},{local:"push-files-with-git-lfs",title:"Push files with Git LFS"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"}],title:"Upload files to the Hub"};function jh(kn){return Eh(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ph extends gh{constructor(L){super();yh(this,L,jh,$h,vh,{})}}export{Ph as default,kh as metadata};
