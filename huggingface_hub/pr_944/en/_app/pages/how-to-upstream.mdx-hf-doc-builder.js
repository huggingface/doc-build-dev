import{S as nh,i as ph,s as hh,e as s,k as h,w as d,t as a,M as fh,c as r,d as o,m as f,a as i,x as m,h as l,b as c,G as t,g as p,y as _,q as g,o as y,B as v,v as ch}from"../chunks/vendor-hf-doc-builder.js";import{T as uh}from"../chunks/Tip-hf-doc-builder.js";import{I as vt}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as $}from"../chunks/CodeBlock-hf-doc-builder.js";function dh(pa){let u,te,E,H,N,k,He,M,L,oe,q,T,B,qe;return{c(){u=s("p"),te=a("The "),E=s("a"),H=a("create_commit()"),N=a(" function is a low-level API for working at a commit level. The "),k=s("a"),He=a("upload_file()"),M=a(" and "),L=s("a"),oe=a("upload_folder()"),q=a(" functions are higher-level APIs that use "),T=s("a"),B=a("create_commit()"),qe=a(" under the hood. We recommend trying these functions first if you don\u2019t need to work at a lower level."),this.h()},l(W){u=r(W,"P",{});var b=i(u);te=l(b,"The "),E=r(b,"A",{href:!0});var w=i(E);H=l(w,"create_commit()"),w.forEach(o),N=l(b," function is a low-level API for working at a commit level. The "),k=r(b,"A",{href:!0});var S=i(k);He=l(S,"upload_file()"),S.forEach(o),M=l(b," and "),L=r(b,"A",{href:!0});var wt=i(L);oe=l(wt,"upload_folder()"),wt.forEach(o),q=l(b," functions are higher-level APIs that use "),T=r(b,"A",{href:!0});var Y=i(T);B=l(Y,"create_commit()"),Y.forEach(o),qe=l(b," under the hood. We recommend trying these functions first if you don\u2019t need to work at a lower level."),b.forEach(o),this.h()},h(){c(E,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(k,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(L,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(T,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit")},m(W,b){p(W,u,b),t(u,te),t(u,E),t(E,H),t(u,N),t(u,k),t(k,He),t(u,M),t(u,L),t(L,oe),t(u,q),t(u,T),t(T,B),t(u,qe)},d(W){W&&o(u)}}}function mh(pa){let u,te,E,H,N,k,He,M,L,oe,q,T,B,qe,W,b,w,S,wt,Y,Wl,Yl,zl,Ce,Jl,bt,Kl,Ql,Vl,Pe,Xl,no,Zl,es,ts,xe,os,Et,as,ls,ss,Oe,rs,De,is,ns,ps,Le,hs,$t,fs,cs,ha,kt,us,fa,ae,Te,po,ds,ms,Se,_s,z,Ie,gs,ho,ys,vs,ws,Ue,bs,jt,fo,Es,$s,ca,J,le,co,Re,ks,uo,js,ua,I,As,At,mo,Hs,qs,Ht,Cs,Ps,da,C,xs,_o,Os,Ds,go,Ls,Ts,yo,Ss,Is,ma,Fe,_a,K,se,vo,Ge,Us,wo,Rs,ga,j,Fs,qt,Gs,Ns,bo,Ms,Bs,Eo,Ws,Ys,$o,zs,Js,ya,Ne,va,Q,re,ko,Me,Ks,jo,Qs,wa,P,Vs,Ao,Xs,Zs,Ho,er,tr,qo,or,ar,ba,x,Be,lr,Co,sr,rr,ir,We,nr,Po,pr,hr,fr,xo,cr,ur,Ye,dr,Oo,mr,_r,Ea,ze,$a,ie,gr,Do,yr,vr,ka,Je,ja,ne,wr,Lo,br,Er,Aa,Ke,Ha,pe,$r,To,kr,jr,qa,Qe,Ca,Ct,Ar,Pa,he,So,Ve,Io,Hr,qr,Uo,Cr,Pr,V,Xe,Ro,xr,Or,Fo,Dr,Lr,Ze,Go,Tr,Sr,No,Ir,Ur,et,Mo,Rr,Fr,Bo,Gr,xa,fe,Nr,Wo,Mr,Br,Oa,tt,Da,X,ce,Yo,ot,Wr,zo,Yr,La,A,zr,Pt,Jr,Kr,xt,Qr,Vr,Jo,Xr,Zr,Ot,ei,ti,Ta,ue,oi,Ko,ai,li,Sa,at,Ia,de,si,Dt,ri,ii,Ua,lt,Ra,U,ni,Lt,pi,hi,Tt,fi,ci,Fa,st,Ga,me,ui,St,di,mi,Na,rt,Ma,Z,_e,Qo,it,_i,Vo,gi,Ba,It,yi,Wa,nt,Ya,Ut,vi,za,ee,ge,Xo,pt,wi,Zo,bi,Ja,ye,Ka,R,Ei,Rt,$i,ki,Ft,ji,Ai,Qa,ve,Hi,Gt,qi,Ci,Va,we,ht,Nt,ea,Pi,xi,Oi,ft,Mt,ta,Di,Li,Ti,Bt,oa,Si,Ii,Ui,aa,be,la,Ri,Fi,sa,Gi,Ni,Xa,Wt,Mi,Za,Yt,ct,Bi,ra,Wi,Yi,el,ut,tl,dt,mt,zi,zt,Ji,Ki,ol,_t,al,gt,Jt,Qi,Vi,ll,O,Kt,Qt,Xi,Zi,en,Vt,Xt,tn,on,an,Zt,eo,ln,sn,rn,to,ia,nn,pn,sl,Ee,hn,oo,fn,cn,rl;return k=new vt({}),Se=new $({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Ue=new $({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),Re=new vt({}),Fe=new $({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(path_or_fileobj="/path/to/local/folder/README.md", 
                path_in_repo="README.md", 
                repo_id="username/test-dataset",
                repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(path_or_fileobj=<span class="hljs-string">&quot;/path/to/local/folder/README.md&quot;</span>, 
<span class="hljs-meta">... </span>                path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>                repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>                repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Ge=new vt({}),Ne=new $({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(folder_path="/path/to/local/folder",
                  path_in_repo="my-dataset/train",
                  repo_id="username/test-dataset",
                  repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>                  path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>                  repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>                  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-comment"># https://huggingface.co/datasets/username/test-dataset/tree/main/my-dataset/train/</span>`}}),Me=new vt({}),ze=new $({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),Je=new $({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Ke=new $({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),Qe=new $({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),tt=new $({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),ot=new vt({}),at=new $({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)`}}),lt=new $({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),st=new $({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),rt=new $({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),it=new vt({}),nt=new $({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),pt=new vt({}),ye=new uh({props:{$$slots:{default:[dh]},$$scope:{ctx:pa}}}),ut=new $({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),_t=new $({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){u=s("meta"),te=h(),E=s("h1"),H=s("a"),N=s("span"),d(k.$$.fragment),He=h(),M=s("span"),L=a("Upload files to the Hub"),oe=h(),q=s("p"),T=a("Sharing your files and work is a very important aspect of the Hub. The "),B=s("code"),qe=a("huggingface_hub"),W=a(" offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),b=h(),w=s("ul"),S=s("li"),wt=a("Upload a file with "),Y=s("a"),Wl=a("upload_file()"),Yl=a("."),zl=h(),Ce=s("li"),Jl=a("Upload a folder with "),bt=s("a"),Kl=a("upload_folder()"),Ql=a("."),Vl=h(),Pe=s("li"),Xl=a("Push files with the "),no=s("code"),Zl=a("commit"),es=a(" context manager."),ts=h(),xe=s("li"),os=a("Push files with the "),Et=s("a"),as=a("push_to_hub()"),ls=a(" function."),ss=h(),Oe=s("li"),rs=a("Upload very large files with "),De=s("a"),is=a("Git LFS"),ns=a("."),ps=h(),Le=s("li"),hs=a("Use "),$t=s("a"),fs=a("create_commit()"),cs=a(" to push files without Git."),ha=h(),kt=s("p"),us=a("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),fa=h(),ae=s("ul"),Te=s("li"),po=s("p"),ds=a("Log in to your Hugging Face account with the following command:"),ms=h(),d(Se.$$.fragment),_s=h(),z=s("li"),Ie=s("p"),gs=a("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),ho=s("code"),ys=a("notebook_login()"),vs=a(":"),ws=h(),d(Ue.$$.fragment),bs=h(),jt=s("p"),fo=s("code"),Es=a("notebook_login()"),$s=a(" launches a widget in your notebook from which you can enter your Hugging Face credentials."),ca=h(),J=s("h2"),le=s("a"),co=s("span"),d(Re.$$.fragment),ks=h(),uo=s("span"),js=a("Upload a file"),ua=h(),I=s("p"),As=a("Once you\u2019ve created a repository with the "),At=s("a"),mo=s("code"),Hs=a("create_repo"),qs=a(" function, you can upload files to your repository with the "),Ht=s("a"),Cs=a("upload_file()"),Ps=a(" function."),da=h(),C=s("p"),xs=a("Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),_o=s("code"),Os=a("dataset"),Ds=a(", "),go=s("code"),Ls=a("model"),Ts=a(" or "),yo=s("code"),Ss=a("space"),Is=a("."),ma=h(),d(Fe.$$.fragment),_a=h(),K=s("h2"),se=s("a"),vo=s("span"),d(Ge.$$.fragment),Us=h(),wo=s("span"),Rs=a("Upload a folder"),ga=h(),j=s("p"),Fs=a("Use the "),qt=s("a"),Gs=a("upload_folder()"),Ns=a(" function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),bo=s("code"),Ms=a("dataset"),Bs=a(", "),Eo=s("code"),Ws=a("model"),Ys=a(" or "),$o=s("code"),zs=a("space"),Js=a("."),ya=h(),d(Ne.$$.fragment),va=h(),Q=s("h2"),re=s("a"),ko=s("span"),d(Me.$$.fragment),Ks=h(),jo=s("span"),Qs=a("commit context manager"),wa=h(),P=s("p"),Vs=a("The "),Ao=s("code"),Xs=a("commit"),Zs=a(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Ho=s("code"),er=a("git-lfs"),tr=a(" automatically tracks any file larger than 10MB. In the following example, the "),qo=s("code"),or=a("commit"),ar=a(" context manager:"),ba=h(),x=s("ol"),Be=s("li"),lr=a("Pulls from the "),Co=s("code"),sr=a("text-files"),rr=a(" repository."),ir=h(),We=s("li"),nr=a("Adds a change made to "),Po=s("code"),pr=a("file.txt"),hr=a("."),fr=h(),xo=s("li"),cr=a("Commits the change."),ur=h(),Ye=s("li"),dr=a("Pushes the change to the "),Oo=s("code"),mr=a("text-files"),_r=a(" repository."),Ea=h(),d(ze.$$.fragment),$a=h(),ie=s("p"),gr=a("Here is another example of how to use the "),Do=s("code"),yr=a("commit"),vr=a(" context manager to save and upload a file to a repository:"),ka=h(),d(Je.$$.fragment),ja=h(),ne=s("p"),wr=a("Set "),Lo=s("code"),br=a("blocking=False"),Er=a(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Aa=h(),d(Ke.$$.fragment),Ha=h(),pe=s("p"),$r=a("You can check the status of your push with the "),To=s("code"),kr=a("command_queue"),jr=a(" method:"),qa=h(),d(Qe.$$.fragment),Ca=h(),Ct=s("p"),Ar=a("Refer to the table below for the possible statuses:"),Pa=h(),he=s("table"),So=s("thead"),Ve=s("tr"),Io=s("th"),Hr=a("Status"),qr=h(),Uo=s("th"),Cr=a("Description"),Pr=h(),V=s("tbody"),Xe=s("tr"),Ro=s("td"),xr=a("-1"),Or=h(),Fo=s("td"),Dr=a("The push is ongoing."),Lr=h(),Ze=s("tr"),Go=s("td"),Tr=a("0"),Sr=h(),No=s("td"),Ir=a("The push has completed successfully."),Ur=h(),et=s("tr"),Mo=s("td"),Rr=a("Non-zero"),Fr=h(),Bo=s("td"),Gr=a("An error has occurred."),xa=h(),fe=s("p"),Nr=a("When "),Wo=s("code"),Mr=a("blocking=False"),Br=a(", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Oa=h(),d(tt.$$.fragment),Da=h(),X=s("h2"),ce=s("a"),Yo=s("span"),d(ot.$$.fragment),Wr=h(),zo=s("span"),Yr=a("push_to_hub"),La=h(),A=s("p"),zr=a("The "),Pt=s("a"),Jr=a("Repository"),Kr=a(" class has a "),xt=s("a"),Qr=a("push_to_hub()"),Vr=a(" function to add files, make a commit, and push them to a repository. Unlike the "),Jo=s("code"),Xr=a("commit"),Zr=a(" context manager, you\u2019ll need to pull from a repository first before calling "),Ot=s("a"),ei=a("push_to_hub()"),ti=a("."),Ta=h(),ue=s("p"),oi=a("For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),Ko=s("code"),ai=a("repo"),li=a(" from the local directory:"),Sa=h(),d(at.$$.fragment),Ia=h(),de=s("p"),si=a("Update your local clone with "),Dt=s("a"),ri=a("git_pull()"),ii=a(" and then push your file to the Hub:"),Ua=h(),d(lt.$$.fragment),Ra=h(),U=s("p"),ni=a("However, if you aren\u2019t ready to push a file yet, you can use "),Lt=s("a"),pi=a("git_add()"),hi=a(" and "),Tt=s("a"),fi=a("git_commit()"),ci=a(" to only add and commit your file:"),Fa=h(),d(st.$$.fragment),Ga=h(),me=s("p"),ui=a("When you\u2019re ready, push the file to your repository with "),St=s("a"),di=a("git_push()"),mi=a(":"),Na=h(),d(rt.$$.fragment),Ma=h(),Z=s("h2"),_e=s("a"),Qo=s("span"),d(it.$$.fragment),_i=h(),Vo=s("span"),gi=a("Upload with Git LFS"),Ba=h(),It=s("p"),yi=a("For large files (>5GB), you need to install a custom transfer agent for Git LFS:"),Wa=h(),d(nt.$$.fragment),Ya=h(),Ut=s("p"),vi=a("You should install this for each model repository that contains a model file. Once installed, you\u2019ll be able to push files larger than 5GB."),za=h(),ee=s("h2"),ge=s("a"),Xo=s("span"),d(pt.$$.fragment),wi=h(),Zo=s("span"),bi=a("Upload without Git installed"),Ja=h(),d(ye.$$.fragment),Ka=h(),R=s("p"),Ei=a("If you don\u2019t have Git installed on your system, use the "),Rt=s("a"),$i=a("create_commit()"),ki=a(" function to upload your file. "),Ft=s("a"),ji=a("create_commit()"),Ai=a(" uses the HTTP protocol to upload files to the Hub. Large and binary files are automatically uploaded with Git LFS."),Qa=h(),ve=s("p"),Hi=a("There are two kinds of operations supported by the "),Gt=s("a"),qi=a("create_commit()"),Ci=a(" function:"),Va=h(),we=s("ul"),ht=s("li"),Nt=s("p"),ea=s("code"),Pi=a("CommitOperationAdd"),xi=a(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Oi=h(),ft=s("ul"),Mt=s("li"),ta=s("code"),Di=a("path_in_repo"),Li=a(": the repository path to upload a file to."),Ti=h(),Bt=s("li"),oa=s("code"),Si=a("path_or_fileobj"),Ii=a(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Ui=h(),aa=s("li"),be=s("p"),la=s("code"),Ri=a("CommitOperationDelete"),Fi=a(" removes a file from a repository. This operation accepts "),sa=s("code"),Gi=a("path_in_repo"),Ni=a(" as an argument."),Xa=h(),Wt=s("p"),Mi=a("For example, if you want to upload two files and delete a file in a Hub repository:"),Za=h(),Yt=s("ol"),ct=s("li"),Bi=a("Use the appropriate "),ra=s("code"),Wi=a("CommitOperation"),Yi=a(" to add and delete a file:"),el=h(),d(ut.$$.fragment),tl=h(),dt=s("ol"),mt=s("li"),zi=a("Pass your operations to "),zt=s("a"),Ji=a("create_commit()"),Ki=a(":"),ol=h(),d(_t.$$.fragment),al=h(),gt=s("p"),Jt=s("a"),Qi=a("create_commit()"),Vi=a(" enables each of these other functions:"),ll=h(),O=s("ul"),Kt=s("li"),Qt=s("a"),Xi=a("upload_file()"),Zi=a(" uploads a single file to a repository on the Hub."),en=h(),Vt=s("li"),Xt=s("a"),tn=a("upload_folder()"),on=a(" uploads a local directory to a repository on the Hub."),an=h(),Zt=s("li"),eo=s("a"),ln=a("delete_file()"),sn=a(" deletes a single file from a repository on the Hub."),rn=h(),to=s("li"),ia=s("code"),nn=a("metadata_update()"),pn=a(" updates a repository\u2019s metadata."),sl=h(),Ee=s("p"),hn=a("For more detailed information about these functions, take a look at the "),oo=s("a"),fn=a("HfApi"),cn=a(" reference."),this.h()},l(e){const n=fh('[data-svelte="svelte-1phssyn"]',document.head);u=r(n,"META",{name:!0,content:!0}),n.forEach(o),te=f(e),E=r(e,"H1",{class:!0});var yt=i(E);H=r(yt,"A",{id:!0,class:!0,href:!0});var En=i(H);N=r(En,"SPAN",{});var $n=i(N);m(k.$$.fragment,$n),$n.forEach(o),En.forEach(o),He=f(yt),M=r(yt,"SPAN",{});var kn=i(M);L=l(kn,"Upload files to the Hub"),kn.forEach(o),yt.forEach(o),oe=f(e),q=r(e,"P",{});var il=i(q);T=l(il,"Sharing your files and work is a very important aspect of the Hub. The "),B=r(il,"CODE",{});var jn=i(B);qe=l(jn,"huggingface_hub"),jn.forEach(o),W=l(il," offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),il.forEach(o),b=f(e),w=r(e,"UL",{});var D=i(w);S=r(D,"LI",{});var nl=i(S);wt=l(nl,"Upload a file with "),Y=r(nl,"A",{href:!0});var An=i(Y);Wl=l(An,"upload_file()"),An.forEach(o),Yl=l(nl,"."),nl.forEach(o),zl=f(D),Ce=r(D,"LI",{});var pl=i(Ce);Jl=l(pl,"Upload a folder with "),bt=r(pl,"A",{href:!0});var Hn=i(bt);Kl=l(Hn,"upload_folder()"),Hn.forEach(o),Ql=l(pl,"."),pl.forEach(o),Vl=f(D),Pe=r(D,"LI",{});var hl=i(Pe);Xl=l(hl,"Push files with the "),no=r(hl,"CODE",{});var qn=i(no);Zl=l(qn,"commit"),qn.forEach(o),es=l(hl," context manager."),hl.forEach(o),ts=f(D),xe=r(D,"LI",{});var fl=i(xe);os=l(fl,"Push files with the "),Et=r(fl,"A",{href:!0});var Cn=i(Et);as=l(Cn,"push_to_hub()"),Cn.forEach(o),ls=l(fl," function."),fl.forEach(o),ss=f(D),Oe=r(D,"LI",{});var cl=i(Oe);rs=l(cl,"Upload very large files with "),De=r(cl,"A",{href:!0,rel:!0});var Pn=i(De);is=l(Pn,"Git LFS"),Pn.forEach(o),ns=l(cl,"."),cl.forEach(o),ps=f(D),Le=r(D,"LI",{});var ul=i(Le);hs=l(ul,"Use "),$t=r(ul,"A",{href:!0});var xn=i($t);fs=l(xn,"create_commit()"),xn.forEach(o),cs=l(ul," to push files without Git."),ul.forEach(o),D.forEach(o),ha=f(e),kt=r(e,"P",{});var On=i(kt);us=l(On,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),On.forEach(o),fa=f(e),ae=r(e,"UL",{});var dl=i(ae);Te=r(dl,"LI",{});var ml=i(Te);po=r(ml,"P",{});var Dn=i(po);ds=l(Dn,"Log in to your Hugging Face account with the following command:"),Dn.forEach(o),ms=f(ml),m(Se.$$.fragment,ml),ml.forEach(o),_s=f(dl),z=r(dl,"LI",{});var ao=i(z);Ie=r(ao,"P",{});var _l=i(Ie);gs=l(_l,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),ho=r(_l,"CODE",{});var Ln=i(ho);ys=l(Ln,"notebook_login()"),Ln.forEach(o),vs=l(_l,":"),_l.forEach(o),ws=f(ao),m(Ue.$$.fragment,ao),bs=f(ao),jt=r(ao,"P",{});var un=i(jt);fo=r(un,"CODE",{});var Tn=i(fo);Es=l(Tn,"notebook_login()"),Tn.forEach(o),$s=l(un," launches a widget in your notebook from which you can enter your Hugging Face credentials."),un.forEach(o),ao.forEach(o),dl.forEach(o),ca=f(e),J=r(e,"H2",{class:!0});var gl=i(J);le=r(gl,"A",{id:!0,class:!0,href:!0});var Sn=i(le);co=r(Sn,"SPAN",{});var In=i(co);m(Re.$$.fragment,In),In.forEach(o),Sn.forEach(o),ks=f(gl),uo=r(gl,"SPAN",{});var Un=i(uo);js=l(Un,"Upload a file"),Un.forEach(o),gl.forEach(o),ua=f(e),I=r(e,"P",{});var lo=i(I);As=l(lo,"Once you\u2019ve created a repository with the "),At=r(lo,"A",{href:!0});var Rn=i(At);mo=r(Rn,"CODE",{});var Fn=i(mo);Hs=l(Fn,"create_repo"),Fn.forEach(o),Rn.forEach(o),qs=l(lo," function, you can upload files to your repository with the "),Ht=r(lo,"A",{href:!0});var Gn=i(Ht);Cs=l(Gn,"upload_file()"),Gn.forEach(o),Ps=l(lo," function."),lo.forEach(o),da=f(e),C=r(e,"P",{});var $e=i(C);xs=l($e,"Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),_o=r($e,"CODE",{});var Nn=i(_o);Os=l(Nn,"dataset"),Nn.forEach(o),Ds=l($e,", "),go=r($e,"CODE",{});var Mn=i(go);Ls=l(Mn,"model"),Mn.forEach(o),Ts=l($e," or "),yo=r($e,"CODE",{});var Bn=i(yo);Ss=l(Bn,"space"),Bn.forEach(o),Is=l($e,"."),$e.forEach(o),ma=f(e),m(Fe.$$.fragment,e),_a=f(e),K=r(e,"H2",{class:!0});var yl=i(K);se=r(yl,"A",{id:!0,class:!0,href:!0});var Wn=i(se);vo=r(Wn,"SPAN",{});var Yn=i(vo);m(Ge.$$.fragment,Yn),Yn.forEach(o),Wn.forEach(o),Us=f(yl),wo=r(yl,"SPAN",{});var zn=i(wo);Rs=l(zn,"Upload a folder"),zn.forEach(o),yl.forEach(o),ga=f(e),j=r(e,"P",{});var F=i(j);Fs=l(F,"Use the "),qt=r(F,"A",{href:!0});var Jn=i(qt);Gs=l(Jn,"upload_folder()"),Jn.forEach(o),Ns=l(F," function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),bo=r(F,"CODE",{});var Kn=i(bo);Ms=l(Kn,"dataset"),Kn.forEach(o),Bs=l(F,", "),Eo=r(F,"CODE",{});var Qn=i(Eo);Ws=l(Qn,"model"),Qn.forEach(o),Ys=l(F," or "),$o=r(F,"CODE",{});var Vn=i($o);zs=l(Vn,"space"),Vn.forEach(o),Js=l(F,"."),F.forEach(o),ya=f(e),m(Ne.$$.fragment,e),va=f(e),Q=r(e,"H2",{class:!0});var vl=i(Q);re=r(vl,"A",{id:!0,class:!0,href:!0});var Xn=i(re);ko=r(Xn,"SPAN",{});var Zn=i(ko);m(Me.$$.fragment,Zn),Zn.forEach(o),Xn.forEach(o),Ks=f(vl),jo=r(vl,"SPAN",{});var ep=i(jo);Qs=l(ep,"commit context manager"),ep.forEach(o),vl.forEach(o),wa=f(e),P=r(e,"P",{});var ke=i(P);Vs=l(ke,"The "),Ao=r(ke,"CODE",{});var tp=i(Ao);Xs=l(tp,"commit"),tp.forEach(o),Zs=l(ke," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Ho=r(ke,"CODE",{});var op=i(Ho);er=l(op,"git-lfs"),op.forEach(o),tr=l(ke," automatically tracks any file larger than 10MB. In the following example, the "),qo=r(ke,"CODE",{});var ap=i(qo);or=l(ap,"commit"),ap.forEach(o),ar=l(ke," context manager:"),ke.forEach(o),ba=f(e),x=r(e,"OL",{});var je=i(x);Be=r(je,"LI",{});var wl=i(Be);lr=l(wl,"Pulls from the "),Co=r(wl,"CODE",{});var lp=i(Co);sr=l(lp,"text-files"),lp.forEach(o),rr=l(wl," repository."),wl.forEach(o),ir=f(je),We=r(je,"LI",{});var bl=i(We);nr=l(bl,"Adds a change made to "),Po=r(bl,"CODE",{});var sp=i(Po);pr=l(sp,"file.txt"),sp.forEach(o),hr=l(bl,"."),bl.forEach(o),fr=f(je),xo=r(je,"LI",{});var rp=i(xo);cr=l(rp,"Commits the change."),rp.forEach(o),ur=f(je),Ye=r(je,"LI",{});var El=i(Ye);dr=l(El,"Pushes the change to the "),Oo=r(El,"CODE",{});var ip=i(Oo);mr=l(ip,"text-files"),ip.forEach(o),_r=l(El," repository."),El.forEach(o),je.forEach(o),Ea=f(e),m(ze.$$.fragment,e),$a=f(e),ie=r(e,"P",{});var $l=i(ie);gr=l($l,"Here is another example of how to use the "),Do=r($l,"CODE",{});var np=i(Do);yr=l(np,"commit"),np.forEach(o),vr=l($l," context manager to save and upload a file to a repository:"),$l.forEach(o),ka=f(e),m(Je.$$.fragment,e),ja=f(e),ne=r(e,"P",{});var kl=i(ne);wr=l(kl,"Set "),Lo=r(kl,"CODE",{});var pp=i(Lo);br=l(pp,"blocking=False"),pp.forEach(o),Er=l(kl," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),kl.forEach(o),Aa=f(e),m(Ke.$$.fragment,e),Ha=f(e),pe=r(e,"P",{});var jl=i(pe);$r=l(jl,"You can check the status of your push with the "),To=r(jl,"CODE",{});var hp=i(To);kr=l(hp,"command_queue"),hp.forEach(o),jr=l(jl," method:"),jl.forEach(o),qa=f(e),m(Qe.$$.fragment,e),Ca=f(e),Ct=r(e,"P",{});var fp=i(Ct);Ar=l(fp,"Refer to the table below for the possible statuses:"),fp.forEach(o),Pa=f(e),he=r(e,"TABLE",{});var Al=i(he);So=r(Al,"THEAD",{});var cp=i(So);Ve=r(cp,"TR",{});var Hl=i(Ve);Io=r(Hl,"TH",{});var up=i(Io);Hr=l(up,"Status"),up.forEach(o),qr=f(Hl),Uo=r(Hl,"TH",{});var dp=i(Uo);Cr=l(dp,"Description"),dp.forEach(o),Hl.forEach(o),cp.forEach(o),Pr=f(Al),V=r(Al,"TBODY",{});var so=i(V);Xe=r(so,"TR",{});var ql=i(Xe);Ro=r(ql,"TD",{});var mp=i(Ro);xr=l(mp,"-1"),mp.forEach(o),Or=f(ql),Fo=r(ql,"TD",{});var _p=i(Fo);Dr=l(_p,"The push is ongoing."),_p.forEach(o),ql.forEach(o),Lr=f(so),Ze=r(so,"TR",{});var Cl=i(Ze);Go=r(Cl,"TD",{});var gp=i(Go);Tr=l(gp,"0"),gp.forEach(o),Sr=f(Cl),No=r(Cl,"TD",{});var yp=i(No);Ir=l(yp,"The push has completed successfully."),yp.forEach(o),Cl.forEach(o),Ur=f(so),et=r(so,"TR",{});var Pl=i(et);Mo=r(Pl,"TD",{});var vp=i(Mo);Rr=l(vp,"Non-zero"),vp.forEach(o),Fr=f(Pl),Bo=r(Pl,"TD",{});var wp=i(Bo);Gr=l(wp,"An error has occurred."),wp.forEach(o),Pl.forEach(o),so.forEach(o),Al.forEach(o),xa=f(e),fe=r(e,"P",{});var xl=i(fe);Nr=l(xl,"When "),Wo=r(xl,"CODE",{});var bp=i(Wo);Mr=l(bp,"blocking=False"),bp.forEach(o),Br=l(xl,", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),xl.forEach(o),Oa=f(e),m(tt.$$.fragment,e),Da=f(e),X=r(e,"H2",{class:!0});var Ol=i(X);ce=r(Ol,"A",{id:!0,class:!0,href:!0});var Ep=i(ce);Yo=r(Ep,"SPAN",{});var $p=i(Yo);m(ot.$$.fragment,$p),$p.forEach(o),Ep.forEach(o),Wr=f(Ol),zo=r(Ol,"SPAN",{});var kp=i(zo);Yr=l(kp,"push_to_hub"),kp.forEach(o),Ol.forEach(o),La=f(e),A=r(e,"P",{});var G=i(A);zr=l(G,"The "),Pt=r(G,"A",{href:!0});var jp=i(Pt);Jr=l(jp,"Repository"),jp.forEach(o),Kr=l(G," class has a "),xt=r(G,"A",{href:!0});var Ap=i(xt);Qr=l(Ap,"push_to_hub()"),Ap.forEach(o),Vr=l(G," function to add files, make a commit, and push them to a repository. Unlike the "),Jo=r(G,"CODE",{});var Hp=i(Jo);Xr=l(Hp,"commit"),Hp.forEach(o),Zr=l(G," context manager, you\u2019ll need to pull from a repository first before calling "),Ot=r(G,"A",{href:!0});var qp=i(Ot);ei=l(qp,"push_to_hub()"),qp.forEach(o),ti=l(G,"."),G.forEach(o),Ta=f(e),ue=r(e,"P",{});var Dl=i(ue);oi=l(Dl,"For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),Ko=r(Dl,"CODE",{});var Cp=i(Ko);ai=l(Cp,"repo"),Cp.forEach(o),li=l(Dl," from the local directory:"),Dl.forEach(o),Sa=f(e),m(at.$$.fragment,e),Ia=f(e),de=r(e,"P",{});var Ll=i(de);si=l(Ll,"Update your local clone with "),Dt=r(Ll,"A",{href:!0});var Pp=i(Dt);ri=l(Pp,"git_pull()"),Pp.forEach(o),ii=l(Ll," and then push your file to the Hub:"),Ll.forEach(o),Ua=f(e),m(lt.$$.fragment,e),Ra=f(e),U=r(e,"P",{});var ro=i(U);ni=l(ro,"However, if you aren\u2019t ready to push a file yet, you can use "),Lt=r(ro,"A",{href:!0});var xp=i(Lt);pi=l(xp,"git_add()"),xp.forEach(o),hi=l(ro," and "),Tt=r(ro,"A",{href:!0});var Op=i(Tt);fi=l(Op,"git_commit()"),Op.forEach(o),ci=l(ro," to only add and commit your file:"),ro.forEach(o),Fa=f(e),m(st.$$.fragment,e),Ga=f(e),me=r(e,"P",{});var Tl=i(me);ui=l(Tl,"When you\u2019re ready, push the file to your repository with "),St=r(Tl,"A",{href:!0});var Dp=i(St);di=l(Dp,"git_push()"),Dp.forEach(o),mi=l(Tl,":"),Tl.forEach(o),Na=f(e),m(rt.$$.fragment,e),Ma=f(e),Z=r(e,"H2",{class:!0});var Sl=i(Z);_e=r(Sl,"A",{id:!0,class:!0,href:!0});var Lp=i(_e);Qo=r(Lp,"SPAN",{});var Tp=i(Qo);m(it.$$.fragment,Tp),Tp.forEach(o),Lp.forEach(o),_i=f(Sl),Vo=r(Sl,"SPAN",{});var Sp=i(Vo);gi=l(Sp,"Upload with Git LFS"),Sp.forEach(o),Sl.forEach(o),Ba=f(e),It=r(e,"P",{});var Ip=i(It);yi=l(Ip,"For large files (>5GB), you need to install a custom transfer agent for Git LFS:"),Ip.forEach(o),Wa=f(e),m(nt.$$.fragment,e),Ya=f(e),Ut=r(e,"P",{});var Up=i(Ut);vi=l(Up,"You should install this for each model repository that contains a model file. Once installed, you\u2019ll be able to push files larger than 5GB."),Up.forEach(o),za=f(e),ee=r(e,"H2",{class:!0});var Il=i(ee);ge=r(Il,"A",{id:!0,class:!0,href:!0});var Rp=i(ge);Xo=r(Rp,"SPAN",{});var Fp=i(Xo);m(pt.$$.fragment,Fp),Fp.forEach(o),Rp.forEach(o),wi=f(Il),Zo=r(Il,"SPAN",{});var Gp=i(Zo);bi=l(Gp,"Upload without Git installed"),Gp.forEach(o),Il.forEach(o),Ja=f(e),m(ye.$$.fragment,e),Ka=f(e),R=r(e,"P",{});var io=i(R);Ei=l(io,"If you don\u2019t have Git installed on your system, use the "),Rt=r(io,"A",{href:!0});var Np=i(Rt);$i=l(Np,"create_commit()"),Np.forEach(o),ki=l(io," function to upload your file. "),Ft=r(io,"A",{href:!0});var Mp=i(Ft);ji=l(Mp,"create_commit()"),Mp.forEach(o),Ai=l(io," uses the HTTP protocol to upload files to the Hub. Large and binary files are automatically uploaded with Git LFS."),io.forEach(o),Qa=f(e),ve=r(e,"P",{});var Ul=i(ve);Hi=l(Ul,"There are two kinds of operations supported by the "),Gt=r(Ul,"A",{href:!0});var Bp=i(Gt);qi=l(Bp,"create_commit()"),Bp.forEach(o),Ci=l(Ul," function:"),Ul.forEach(o),Va=f(e),we=r(e,"UL",{});var Rl=i(we);ht=r(Rl,"LI",{});var Fl=i(ht);Nt=r(Fl,"P",{});var dn=i(Nt);ea=r(dn,"CODE",{});var Wp=i(ea);Pi=l(Wp,"CommitOperationAdd"),Wp.forEach(o),xi=l(dn," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),dn.forEach(o),Oi=f(Fl),ft=r(Fl,"UL",{});var Gl=i(ft);Mt=r(Gl,"LI",{});var mn=i(Mt);ta=r(mn,"CODE",{});var Yp=i(ta);Di=l(Yp,"path_in_repo"),Yp.forEach(o),Li=l(mn,": the repository path to upload a file to."),mn.forEach(o),Ti=f(Gl),Bt=r(Gl,"LI",{});var _n=i(Bt);oa=r(_n,"CODE",{});var zp=i(oa);Si=l(zp,"path_or_fileobj"),zp.forEach(o),Ii=l(_n,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),_n.forEach(o),Gl.forEach(o),Fl.forEach(o),Ui=f(Rl),aa=r(Rl,"LI",{});var Jp=i(aa);be=r(Jp,"P",{});var na=i(be);la=r(na,"CODE",{});var Kp=i(la);Ri=l(Kp,"CommitOperationDelete"),Kp.forEach(o),Fi=l(na," removes a file from a repository. This operation accepts "),sa=r(na,"CODE",{});var Qp=i(sa);Gi=l(Qp,"path_in_repo"),Qp.forEach(o),Ni=l(na," as an argument."),na.forEach(o),Jp.forEach(o),Rl.forEach(o),Xa=f(e),Wt=r(e,"P",{});var Vp=i(Wt);Mi=l(Vp,"For example, if you want to upload two files and delete a file in a Hub repository:"),Vp.forEach(o),Za=f(e),Yt=r(e,"OL",{});var Xp=i(Yt);ct=r(Xp,"LI",{});var Nl=i(ct);Bi=l(Nl,"Use the appropriate "),ra=r(Nl,"CODE",{});var Zp=i(ra);Wi=l(Zp,"CommitOperation"),Zp.forEach(o),Yi=l(Nl," to add and delete a file:"),Nl.forEach(o),Xp.forEach(o),el=f(e),m(ut.$$.fragment,e),tl=f(e),dt=r(e,"OL",{start:!0});var eh=i(dt);mt=r(eh,"LI",{});var Ml=i(mt);zi=l(Ml,"Pass your operations to "),zt=r(Ml,"A",{href:!0});var th=i(zt);Ji=l(th,"create_commit()"),th.forEach(o),Ki=l(Ml,":"),Ml.forEach(o),eh.forEach(o),ol=f(e),m(_t.$$.fragment,e),al=f(e),gt=r(e,"P",{});var gn=i(gt);Jt=r(gn,"A",{href:!0});var oh=i(Jt);Qi=l(oh,"create_commit()"),oh.forEach(o),Vi=l(gn," enables each of these other functions:"),gn.forEach(o),ll=f(e),O=r(e,"UL",{});var Ae=i(O);Kt=r(Ae,"LI",{});var yn=i(Kt);Qt=r(yn,"A",{href:!0});var ah=i(Qt);Xi=l(ah,"upload_file()"),ah.forEach(o),Zi=l(yn," uploads a single file to a repository on the Hub."),yn.forEach(o),en=f(Ae),Vt=r(Ae,"LI",{});var vn=i(Vt);Xt=r(vn,"A",{href:!0});var lh=i(Xt);tn=l(lh,"upload_folder()"),lh.forEach(o),on=l(vn," uploads a local directory to a repository on the Hub."),vn.forEach(o),an=f(Ae),Zt=r(Ae,"LI",{});var wn=i(Zt);eo=r(wn,"A",{href:!0});var sh=i(eo);ln=l(sh,"delete_file()"),sh.forEach(o),sn=l(wn," deletes a single file from a repository on the Hub."),wn.forEach(o),rn=f(Ae),to=r(Ae,"LI",{});var bn=i(to);ia=r(bn,"CODE",{});var rh=i(ia);nn=l(rh,"metadata_update()"),rh.forEach(o),pn=l(bn," updates a repository\u2019s metadata."),bn.forEach(o),Ae.forEach(o),sl=f(e),Ee=r(e,"P",{});var Bl=i(Ee);hn=l(Bl,"For more detailed information about these functions, take a look at the "),oo=r(Bl,"A",{href:!0});var ih=i(oo);fn=l(ih,"HfApi"),ih.forEach(o),cn=l(Bl," reference."),Bl.forEach(o),this.h()},h(){c(u,"name","hf:doc:metadata"),c(u,"content",JSON.stringify(_h)),c(H,"id","upload-files-to-the-hub"),c(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H,"href","#upload-files-to-the-hub"),c(E,"class","relative group"),c(Y,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(bt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Et,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(De,"href","https://git-lfs.github.com/"),c(De,"rel","nofollow"),c($t,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(le,"id","upload-a-file"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#upload-a-file"),c(J,"class","relative group"),c(At,"href","./how-to-manage#create-a-repository"),c(Ht,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(se,"id","upload-a-folder"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#upload-a-folder"),c(K,"class","relative group"),c(qt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(re,"id","commit-context-manager"),c(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(re,"href","#commit-context-manager"),c(Q,"class","relative group"),c(ce,"id","pushtohub"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#pushtohub"),c(X,"class","relative group"),c(Pt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository"),c(xt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Ot,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Dt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_pull"),c(Lt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_add"),c(Tt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_commit"),c(St,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_push"),c(_e,"id","upload-with-git-lfs"),c(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_e,"href","#upload-with-git-lfs"),c(Z,"class","relative group"),c(ge,"id","upload-without-git-installed"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#upload-without-git-installed"),c(ee,"class","relative group"),c(Rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ft,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Gt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(zt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(dt,"start","2"),c(Jt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Qt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Xt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(eo,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),c(oo,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi")},m(e,n){t(document.head,u),p(e,te,n),p(e,E,n),t(E,H),t(H,N),_(k,N,null),t(E,He),t(E,M),t(M,L),p(e,oe,n),p(e,q,n),t(q,T),t(q,B),t(B,qe),t(q,W),p(e,b,n),p(e,w,n),t(w,S),t(S,wt),t(S,Y),t(Y,Wl),t(S,Yl),t(w,zl),t(w,Ce),t(Ce,Jl),t(Ce,bt),t(bt,Kl),t(Ce,Ql),t(w,Vl),t(w,Pe),t(Pe,Xl),t(Pe,no),t(no,Zl),t(Pe,es),t(w,ts),t(w,xe),t(xe,os),t(xe,Et),t(Et,as),t(xe,ls),t(w,ss),t(w,Oe),t(Oe,rs),t(Oe,De),t(De,is),t(Oe,ns),t(w,ps),t(w,Le),t(Le,hs),t(Le,$t),t($t,fs),t(Le,cs),p(e,ha,n),p(e,kt,n),t(kt,us),p(e,fa,n),p(e,ae,n),t(ae,Te),t(Te,po),t(po,ds),t(Te,ms),_(Se,Te,null),t(ae,_s),t(ae,z),t(z,Ie),t(Ie,gs),t(Ie,ho),t(ho,ys),t(Ie,vs),t(z,ws),_(Ue,z,null),t(z,bs),t(z,jt),t(jt,fo),t(fo,Es),t(jt,$s),p(e,ca,n),p(e,J,n),t(J,le),t(le,co),_(Re,co,null),t(J,ks),t(J,uo),t(uo,js),p(e,ua,n),p(e,I,n),t(I,As),t(I,At),t(At,mo),t(mo,Hs),t(I,qs),t(I,Ht),t(Ht,Cs),t(I,Ps),p(e,da,n),p(e,C,n),t(C,xs),t(C,_o),t(_o,Os),t(C,Ds),t(C,go),t(go,Ls),t(C,Ts),t(C,yo),t(yo,Ss),t(C,Is),p(e,ma,n),_(Fe,e,n),p(e,_a,n),p(e,K,n),t(K,se),t(se,vo),_(Ge,vo,null),t(K,Us),t(K,wo),t(wo,Rs),p(e,ga,n),p(e,j,n),t(j,Fs),t(j,qt),t(qt,Gs),t(j,Ns),t(j,bo),t(bo,Ms),t(j,Bs),t(j,Eo),t(Eo,Ws),t(j,Ys),t(j,$o),t($o,zs),t(j,Js),p(e,ya,n),_(Ne,e,n),p(e,va,n),p(e,Q,n),t(Q,re),t(re,ko),_(Me,ko,null),t(Q,Ks),t(Q,jo),t(jo,Qs),p(e,wa,n),p(e,P,n),t(P,Vs),t(P,Ao),t(Ao,Xs),t(P,Zs),t(P,Ho),t(Ho,er),t(P,tr),t(P,qo),t(qo,or),t(P,ar),p(e,ba,n),p(e,x,n),t(x,Be),t(Be,lr),t(Be,Co),t(Co,sr),t(Be,rr),t(x,ir),t(x,We),t(We,nr),t(We,Po),t(Po,pr),t(We,hr),t(x,fr),t(x,xo),t(xo,cr),t(x,ur),t(x,Ye),t(Ye,dr),t(Ye,Oo),t(Oo,mr),t(Ye,_r),p(e,Ea,n),_(ze,e,n),p(e,$a,n),p(e,ie,n),t(ie,gr),t(ie,Do),t(Do,yr),t(ie,vr),p(e,ka,n),_(Je,e,n),p(e,ja,n),p(e,ne,n),t(ne,wr),t(ne,Lo),t(Lo,br),t(ne,Er),p(e,Aa,n),_(Ke,e,n),p(e,Ha,n),p(e,pe,n),t(pe,$r),t(pe,To),t(To,kr),t(pe,jr),p(e,qa,n),_(Qe,e,n),p(e,Ca,n),p(e,Ct,n),t(Ct,Ar),p(e,Pa,n),p(e,he,n),t(he,So),t(So,Ve),t(Ve,Io),t(Io,Hr),t(Ve,qr),t(Ve,Uo),t(Uo,Cr),t(he,Pr),t(he,V),t(V,Xe),t(Xe,Ro),t(Ro,xr),t(Xe,Or),t(Xe,Fo),t(Fo,Dr),t(V,Lr),t(V,Ze),t(Ze,Go),t(Go,Tr),t(Ze,Sr),t(Ze,No),t(No,Ir),t(V,Ur),t(V,et),t(et,Mo),t(Mo,Rr),t(et,Fr),t(et,Bo),t(Bo,Gr),p(e,xa,n),p(e,fe,n),t(fe,Nr),t(fe,Wo),t(Wo,Mr),t(fe,Br),p(e,Oa,n),_(tt,e,n),p(e,Da,n),p(e,X,n),t(X,ce),t(ce,Yo),_(ot,Yo,null),t(X,Wr),t(X,zo),t(zo,Yr),p(e,La,n),p(e,A,n),t(A,zr),t(A,Pt),t(Pt,Jr),t(A,Kr),t(A,xt),t(xt,Qr),t(A,Vr),t(A,Jo),t(Jo,Xr),t(A,Zr),t(A,Ot),t(Ot,ei),t(A,ti),p(e,Ta,n),p(e,ue,n),t(ue,oi),t(ue,Ko),t(Ko,ai),t(ue,li),p(e,Sa,n),_(at,e,n),p(e,Ia,n),p(e,de,n),t(de,si),t(de,Dt),t(Dt,ri),t(de,ii),p(e,Ua,n),_(lt,e,n),p(e,Ra,n),p(e,U,n),t(U,ni),t(U,Lt),t(Lt,pi),t(U,hi),t(U,Tt),t(Tt,fi),t(U,ci),p(e,Fa,n),_(st,e,n),p(e,Ga,n),p(e,me,n),t(me,ui),t(me,St),t(St,di),t(me,mi),p(e,Na,n),_(rt,e,n),p(e,Ma,n),p(e,Z,n),t(Z,_e),t(_e,Qo),_(it,Qo,null),t(Z,_i),t(Z,Vo),t(Vo,gi),p(e,Ba,n),p(e,It,n),t(It,yi),p(e,Wa,n),_(nt,e,n),p(e,Ya,n),p(e,Ut,n),t(Ut,vi),p(e,za,n),p(e,ee,n),t(ee,ge),t(ge,Xo),_(pt,Xo,null),t(ee,wi),t(ee,Zo),t(Zo,bi),p(e,Ja,n),_(ye,e,n),p(e,Ka,n),p(e,R,n),t(R,Ei),t(R,Rt),t(Rt,$i),t(R,ki),t(R,Ft),t(Ft,ji),t(R,Ai),p(e,Qa,n),p(e,ve,n),t(ve,Hi),t(ve,Gt),t(Gt,qi),t(ve,Ci),p(e,Va,n),p(e,we,n),t(we,ht),t(ht,Nt),t(Nt,ea),t(ea,Pi),t(Nt,xi),t(ht,Oi),t(ht,ft),t(ft,Mt),t(Mt,ta),t(ta,Di),t(Mt,Li),t(ft,Ti),t(ft,Bt),t(Bt,oa),t(oa,Si),t(Bt,Ii),t(we,Ui),t(we,aa),t(aa,be),t(be,la),t(la,Ri),t(be,Fi),t(be,sa),t(sa,Gi),t(be,Ni),p(e,Xa,n),p(e,Wt,n),t(Wt,Mi),p(e,Za,n),p(e,Yt,n),t(Yt,ct),t(ct,Bi),t(ct,ra),t(ra,Wi),t(ct,Yi),p(e,el,n),_(ut,e,n),p(e,tl,n),p(e,dt,n),t(dt,mt),t(mt,zi),t(mt,zt),t(zt,Ji),t(mt,Ki),p(e,ol,n),_(_t,e,n),p(e,al,n),p(e,gt,n),t(gt,Jt),t(Jt,Qi),t(gt,Vi),p(e,ll,n),p(e,O,n),t(O,Kt),t(Kt,Qt),t(Qt,Xi),t(Kt,Zi),t(O,en),t(O,Vt),t(Vt,Xt),t(Xt,tn),t(Vt,on),t(O,an),t(O,Zt),t(Zt,eo),t(eo,ln),t(Zt,sn),t(O,rn),t(O,to),t(to,ia),t(ia,nn),t(to,pn),p(e,sl,n),p(e,Ee,n),t(Ee,hn),t(Ee,oo),t(oo,fn),t(Ee,cn),rl=!0},p(e,[n]){const yt={};n&2&&(yt.$$scope={dirty:n,ctx:e}),ye.$set(yt)},i(e){rl||(g(k.$$.fragment,e),g(Se.$$.fragment,e),g(Ue.$$.fragment,e),g(Re.$$.fragment,e),g(Fe.$$.fragment,e),g(Ge.$$.fragment,e),g(Ne.$$.fragment,e),g(Me.$$.fragment,e),g(ze.$$.fragment,e),g(Je.$$.fragment,e),g(Ke.$$.fragment,e),g(Qe.$$.fragment,e),g(tt.$$.fragment,e),g(ot.$$.fragment,e),g(at.$$.fragment,e),g(lt.$$.fragment,e),g(st.$$.fragment,e),g(rt.$$.fragment,e),g(it.$$.fragment,e),g(nt.$$.fragment,e),g(pt.$$.fragment,e),g(ye.$$.fragment,e),g(ut.$$.fragment,e),g(_t.$$.fragment,e),rl=!0)},o(e){y(k.$$.fragment,e),y(Se.$$.fragment,e),y(Ue.$$.fragment,e),y(Re.$$.fragment,e),y(Fe.$$.fragment,e),y(Ge.$$.fragment,e),y(Ne.$$.fragment,e),y(Me.$$.fragment,e),y(ze.$$.fragment,e),y(Je.$$.fragment,e),y(Ke.$$.fragment,e),y(Qe.$$.fragment,e),y(tt.$$.fragment,e),y(ot.$$.fragment,e),y(at.$$.fragment,e),y(lt.$$.fragment,e),y(st.$$.fragment,e),y(rt.$$.fragment,e),y(it.$$.fragment,e),y(nt.$$.fragment,e),y(pt.$$.fragment,e),y(ye.$$.fragment,e),y(ut.$$.fragment,e),y(_t.$$.fragment,e),rl=!1},d(e){o(u),e&&o(te),e&&o(E),v(k),e&&o(oe),e&&o(q),e&&o(b),e&&o(w),e&&o(ha),e&&o(kt),e&&o(fa),e&&o(ae),v(Se),v(Ue),e&&o(ca),e&&o(J),v(Re),e&&o(ua),e&&o(I),e&&o(da),e&&o(C),e&&o(ma),v(Fe,e),e&&o(_a),e&&o(K),v(Ge),e&&o(ga),e&&o(j),e&&o(ya),v(Ne,e),e&&o(va),e&&o(Q),v(Me),e&&o(wa),e&&o(P),e&&o(ba),e&&o(x),e&&o(Ea),v(ze,e),e&&o($a),e&&o(ie),e&&o(ka),v(Je,e),e&&o(ja),e&&o(ne),e&&o(Aa),v(Ke,e),e&&o(Ha),e&&o(pe),e&&o(qa),v(Qe,e),e&&o(Ca),e&&o(Ct),e&&o(Pa),e&&o(he),e&&o(xa),e&&o(fe),e&&o(Oa),v(tt,e),e&&o(Da),e&&o(X),v(ot),e&&o(La),e&&o(A),e&&o(Ta),e&&o(ue),e&&o(Sa),v(at,e),e&&o(Ia),e&&o(de),e&&o(Ua),v(lt,e),e&&o(Ra),e&&o(U),e&&o(Fa),v(st,e),e&&o(Ga),e&&o(me),e&&o(Na),v(rt,e),e&&o(Ma),e&&o(Z),v(it),e&&o(Ba),e&&o(It),e&&o(Wa),v(nt,e),e&&o(Ya),e&&o(Ut),e&&o(za),e&&o(ee),v(pt),e&&o(Ja),v(ye,e),e&&o(Ka),e&&o(R),e&&o(Qa),e&&o(ve),e&&o(Va),e&&o(we),e&&o(Xa),e&&o(Wt),e&&o(Za),e&&o(Yt),e&&o(el),v(ut,e),e&&o(tl),e&&o(dt),e&&o(ol),v(_t,e),e&&o(al),e&&o(gt),e&&o(ll),e&&o(O),e&&o(sl),e&&o(Ee)}}}const _h={local:"upload-files-to-the-hub",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"},{local:"upload-without-git-installed",title:"Upload without Git installed"}],title:"Upload files to the Hub"};function gh(pa){return ch(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Eh extends nh{constructor(u){super();ph(this,u,gh,mh,hh,{})}}export{Eh as default,_h as metadata};
