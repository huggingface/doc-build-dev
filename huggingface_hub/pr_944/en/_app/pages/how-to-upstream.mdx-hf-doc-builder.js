import{S as op,i as ap,s as lp,e as a,k as h,w as c,t as r,M as sp,c as l,d as o,m as f,a as s,x as m,h as i,b as u,G as t,g as p,y as d,q as _,o as g,B as y,v as rp}from"../chunks/vendor-hf-doc-builder.js";import{T as ip}from"../chunks/Tip-hf-doc-builder.js";import{I as at}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as $}from"../chunks/CodeBlock-hf-doc-builder.js";function np(Io){let v,M,w,j,O;return{c(){v=a("p"),M=r("The "),w=a("a"),j=r("create_commit()"),O=r(" is really useful for certain use-cases. In general though, it is simpler to use one of the other uploading functions mentioned above."),this.h()},l(k){v=l(k,"P",{});var C=s(v);M=i(C,"The "),w=l(C,"A",{href:!0});var B=s(w);j=i(B,"create_commit()"),B.forEach(o),O=i(C," is really useful for certain use-cases. In general though, it is simpler to use one of the other uploading functions mentioned above."),C.forEach(o),this.h()},h(){u(w,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit")},m(k,C){p(k,v,C),t(v,M),t(v,w),t(w,j),t(v,O)},d(k){k&&o(v)}}}function pp(Io){let v,M,w,j,O,k,C,B,dl,Uo,Y,_l,Bt,gl,yl,Ro,E,me,vl,lt,wl,bl,$l,de,El,Yt,kl,jl,Al,_e,Hl,st,ql,Pl,Cl,ge,Ll,ye,xl,Tl,Ol,ve,Dl,rt,Sl,Il,Fo,it,Ul,Go,W,we,Wt,Rl,Fl,be,Gl,D,$e,Nl,Jt,Ml,Bl,Yl,Ee,Wl,nt,zt,Jl,zl,No,S,J,Kt,ke,Kl,Qt,Ql,Mo,z,Vl,pt,Xl,Zl,Bo,je,Yo,I,K,Vt,Ae,es,Xt,ts,Wo,Q,os,ht,as,ls,Jo,He,zo,U,V,Zt,qe,ss,eo,rs,Ko,A,is,to,ns,ps,oo,hs,fs,ao,us,cs,Qo,H,Pe,ms,lo,ds,_s,gs,Ce,ys,so,vs,ws,bs,ro,$s,Es,Le,ks,io,js,As,Vo,xe,Xo,ft,Hs,Zo,Te,ea,X,qs,no,Ps,Cs,ta,Oe,oa,Z,Ls,po,xs,Ts,aa,De,la,ut,Os,sa,ee,ho,Se,fo,Ds,Ss,uo,Is,Us,R,Ie,co,Rs,Fs,mo,Gs,Ns,Ue,_o,Ms,Bs,go,Ys,Ws,Re,yo,Js,zs,vo,Ks,ra,te,Qs,wo,Vs,Xs,ia,Fe,na,F,oe,bo,Ge,Zs,$o,er,pa,b,tr,ct,or,ar,mt,lr,sr,Eo,rr,ir,dt,nr,pr,_t,hr,fr,ha,Ne,fa,L,ur,gt,cr,mr,yt,dr,_r,ua,Me,ca,ae,gr,vt,yr,vr,ma,Be,da,G,le,ko,Ye,wr,jo,br,_a,wt,$r,ga,We,ya,bt,Er,va,N,se,Ao,Je,kr,Ho,jr,wa,re,ba,x,Ar,$t,Hr,qr,Et,Pr,Cr,$a,ie,Lr,kt,xr,Tr,Ea,ne,ze,jt,qo,Or,Dr,Sr,Ke,At,Po,Ir,Ur,Rr,Ht,Co,Fr,Gr,Nr,Lo,pe,xo,Mr,Br,To,Yr,Wr,ka,qt,Jr,ja,Pt,Qe,zr,Oo,Kr,Qr,Aa,Ve,Ha,Xe,Ze,Vr,Ct,Xr,Zr,qa,et,Pa,tt,Lt,ei,ti,Ca,q,xt,Tt,oi,ai,li,Ot,Dt,si,ri,ii,St,It,ni,pi,hi,Ut,Do,fi,ui,La,he,ci,Rt,mi,di,xa;return k=new at({}),be=new $({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Ee=new $({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),ke=new at({}),je=new $({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(path_or_fileobj="/home/lysandre/dummy-test/README.md", 
                path_in_repo="README.md", 
                repo_id="lysandre/test-model",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(path_or_fileobj=<span class="hljs-string">&quot;/home/lysandre/dummy-test/README.md&quot;</span>, 
<span class="hljs-meta">... </span>                path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>                repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Ae=new at({}),He=new $({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(folder_path="/path/to/local/folder",
                  path_in_repo="my-dataset/train",
                  repo_id="username/test-dataset"
                  repo_type="datasets",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>                  path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>                  repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>
<span class="hljs-meta">... </span>                  repo_type=<span class="hljs-string">&quot;datasets&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-comment"># https://huggingface.co/datasets/username/test-dataset/tree/main/my-dataset/train/</span>`}}),qe=new at({}),xe=new $({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),Te=new $({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Oe=new $({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),De=new $({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),Fe=new $({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),Ge=new at({}),Ne=new $({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")
repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),Me=new $({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),Be=new $({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),Ye=new at({}),We=new $({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),Je=new at({}),re=new ip({props:{$$slots:{default:[np]},$$scope:{ctx:Io}}}),Ve=new $({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),et=new $({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){v=a("meta"),M=h(),w=a("h1"),j=a("a"),O=a("span"),c(k.$$.fragment),C=h(),B=a("span"),dl=r("Upload files to the Hub"),Uo=h(),Y=a("p"),_l=r("Sharing your files and work is a very important aspect of the Hub. The "),Bt=a("code"),gl=r("huggingface_hub"),yl=r(" uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),Ro=h(),E=a("ul"),me=a("li"),vl=r("Upload a file with "),lt=a("a"),wl=r("upload_file()"),bl=r("."),$l=h(),de=a("li"),El=r("Push files with a "),Yt=a("code"),kl=r("commit"),jl=r(" context manager."),Al=h(),_e=a("li"),Hl=r("Push files with the "),st=a("a"),ql=r("push_to_hub()"),Pl=r(" function."),Cl=h(),ge=a("li"),Ll=r("Upload very large files with "),ye=a("a"),xl=r("Git LFS"),Tl=r("."),Ol=h(),ve=a("li"),Dl=r("Use "),rt=a("a"),Sl=r("create_commit()"),Il=r(" to push files without Git."),Fo=h(),it=a("p"),Ul=r("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Go=h(),W=a("ol"),we=a("li"),Wt=a("p"),Rl=r("Log in to your Hugging Face account with the following command:"),Fl=h(),c(be.$$.fragment),Gl=h(),D=a("li"),$e=a("p"),Nl=r("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Jt=a("code"),Ml=r("notebook_login()"),Bl=r(":"),Yl=h(),c(Ee.$$.fragment),Wl=h(),nt=a("p"),zt=a("code"),Jl=r("notebook_login()"),zl=r(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),No=h(),S=a("h2"),J=a("a"),Kt=a("span"),c(ke.$$.fragment),Kl=h(),Qt=a("span"),Ql=r("Upload a file"),Mo=h(),z=a("p"),Vl=r("Use the "),pt=a("a"),Xl=r("upload_file()"),Zl=r(" function to upload a file to a repository. Let the function know where the file you want to upload is, where you want to upload the file to in the repository, and the name of the repository you want to add the file to."),Bo=h(),c(je.$$.fragment),Yo=h(),I=a("h2"),K=a("a"),Vt=a("span"),c(Ae.$$.fragment),es=h(),Xt=a("span"),ts=r("Upload a folder"),Wo=h(),Q=a("p"),os=r("Use the "),ht=a("a"),as=r("upload_folder()"),ls=r(" function to upload a local folder to a repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to."),Jo=h(),c(He.$$.fragment),zo=h(),U=a("h2"),V=a("a"),Zt=a("span"),c(qe.$$.fragment),ss=h(),eo=a("span"),rs=r("commit context manager"),Ko=h(),A=a("p"),is=r("The "),to=a("code"),ns=r("commit"),ps=r(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),oo=a("code"),hs=r("git-lfs"),fs=r(" automatically tracks any file larger than 10MB. In the following example, the "),ao=a("code"),us=r("commit"),cs=r(" context manager:"),Qo=h(),H=a("ol"),Pe=a("li"),ms=r("Pulls from the "),lo=a("code"),ds=r("text-files"),_s=r(" repository."),gs=h(),Ce=a("li"),ys=r("Adds a change made to "),so=a("code"),vs=r("file.txt"),ws=r("."),bs=h(),ro=a("li"),$s=r("Commits the change."),Es=h(),Le=a("li"),ks=r("Pushes the change to the "),io=a("code"),js=r("text-files"),As=r(" repository."),Vo=h(),c(xe.$$.fragment),Xo=h(),ft=a("p"),Hs=r("Here is another example of how to save and upload a file to a repository:"),Zo=h(),c(Te.$$.fragment),ea=h(),X=a("p"),qs=r("Set "),no=a("code"),Ps=r("blocking=False"),Cs=r(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),ta=h(),c(Oe.$$.fragment),oa=h(),Z=a("p"),Ls=r("You can check the status of your push with the "),po=a("code"),xs=r("command_queue"),Ts=r(" method:"),aa=h(),c(De.$$.fragment),la=h(),ut=a("p"),Os=r("Refer to the table below for the possible statuses:"),sa=h(),ee=a("table"),ho=a("thead"),Se=a("tr"),fo=a("th"),Ds=r("Status"),Ss=h(),uo=a("th"),Is=r("Description"),Us=h(),R=a("tbody"),Ie=a("tr"),co=a("td"),Rs=r("-1"),Fs=h(),mo=a("td"),Gs=r("The push is ongoing."),Ns=h(),Ue=a("tr"),_o=a("td"),Ms=r("0"),Bs=h(),go=a("td"),Ys=r("The push has completed successfully."),Ws=h(),Re=a("tr"),yo=a("td"),Js=r("Non-zero"),zs=h(),vo=a("td"),Ks=r("An error has occurred."),ra=h(),te=a("p"),Qs=r("When "),wo=a("code"),Vs=r("blocking=False"),Xs=r(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),ia=h(),c(Fe.$$.fragment),na=h(),F=a("h2"),oe=a("a"),bo=a("span"),c(Ge.$$.fragment),Zs=h(),$o=a("span"),er=r("push_to_hub"),pa=h(),b=a("p"),tr=r("The "),ct=a("a"),or=r("Repository"),ar=r(" class also has a "),mt=a("a"),lr=r("push_to_hub()"),sr=r(" function to add files, make a commit, and push them to a repository. Unlike the "),Eo=a("code"),rr=r("commit"),ir=r(" context manager, "),dt=a("a"),nr=r("push_to_hub()"),pr=r(" requires you to pull from a repository first, save the files, and then call "),_t=a("a"),hr=r("push_to_hub()"),fr=r("."),ha=h(),c(Ne.$$.fragment),fa=h(),L=a("p"),ur=r("However, if you aren\u2019t ready to push a file yet, you can still use "),gt=a("a"),cr=r("git_add()"),mr=r(" and "),yt=a("a"),dr=r("git_commit()"),_r=r(" to add and commit your file:"),ua=h(),c(Me.$$.fragment),ca=h(),ae=a("p"),gr=r("Once you\u2019re ready, you can push your file to your repository with "),vt=a("a"),yr=r("git_push()"),vr=r(":"),ma=h(),c(Be.$$.fragment),da=h(),G=a("h2"),le=a("a"),ko=a("span"),c(Ye.$$.fragment),wr=h(),jo=a("span"),br=r("Upload with Git LFS"),_a=h(),wt=a("p"),$r=r("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),ga=h(),c(We.$$.fragment),ya=h(),bt=a("p"),Er=r("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),va=h(),N=a("h2"),se=a("a"),Ao=a("span"),c(Je.$$.fragment),kr=h(),Ho=a("span"),jr=r("Upload without Git installed"),wa=h(),c(re.$$.fragment),ba=h(),x=a("p"),Ar=r("If you don\u2019t have Git installed on your system, use the "),$t=a("a"),Hr=r("create_commit()"),qr=r(" function to upload your file. "),Et=a("a"),Pr=r("create_commit()"),Cr=r(" uses the HTTP protocol to upload files to the Hub. Large files and binary files are automatically uploaded with the Git LFS protocol."),$a=h(),ie=a("p"),Lr=r("There are two kinds of operations supported by the "),kt=a("a"),xr=r("create_commit()"),Tr=r(" function:"),Ea=h(),ne=a("ul"),ze=a("li"),jt=a("p"),qo=a("code"),Or=r("CommitOperationAdd"),Dr=r(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Sr=h(),Ke=a("ul"),At=a("li"),Po=a("code"),Ir=r("path_in_repo"),Ur=r(": the repository path to upload a file to."),Rr=h(),Ht=a("li"),Co=a("code"),Fr=r("path_or_fileobj"),Gr=r(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Nr=h(),Lo=a("li"),pe=a("p"),xo=a("code"),Mr=r("CommitOperationDelete"),Br=r(" removes a file from a repository. This operation accepts "),To=a("code"),Yr=r("path_in_repo"),Wr=r(" as an argument."),ka=h(),qt=a("p"),Jr=r("For example, if you want to upload two files and delete a file in a Hub repository:"),ja=h(),Pt=a("ol"),Qe=a("li"),zr=r("Use the appropriate "),Oo=a("code"),Kr=r("CommitOperation"),Qr=r(" to add and delete a file:"),Aa=h(),c(Ve.$$.fragment),Ha=h(),Xe=a("ol"),Ze=a("li"),Vr=r("Pass your operations to "),Ct=a("a"),Xr=r("create_commit()"),Zr=r(":"),qa=h(),c(et.$$.fragment),Pa=h(),tt=a("p"),Lt=a("a"),ei=r("create_commit()"),ti=r(" is the underlying function behind each of these other functions:"),Ca=h(),q=a("ul"),xt=a("li"),Tt=a("a"),oi=r("upload_file()"),ai=r(" uploads a single file to a repository on the Hub."),li=h(),Ot=a("li"),Dt=a("a"),si=r("upload_folder()"),ri=r(" uploads a local directory to a repository on the Hub."),ii=h(),St=a("li"),It=a("a"),ni=r("delete_file()"),pi=r(" deletes a single file from a repository on the Hub."),hi=h(),Ut=a("li"),Do=a("code"),fi=r("metadata_update()"),ui=r(" updates a repository\u2019s metadata."),La=h(),he=a("p"),ci=r("For more detailed information about these functions, take a look at the "),Rt=a("a"),mi=r("HfApi"),di=r(" reference."),this.h()},l(e){const n=sp('[data-svelte="svelte-1phssyn"]',document.head);v=l(n,"META",{name:!0,content:!0}),n.forEach(o),M=f(e),w=l(e,"H1",{class:!0});var ot=s(w);j=l(ot,"A",{id:!0,class:!0,href:!0});var ji=s(j);O=l(ji,"SPAN",{});var Ai=s(O);m(k.$$.fragment,Ai),Ai.forEach(o),ji.forEach(o),C=f(ot),B=l(ot,"SPAN",{});var Hi=s(B);dl=i(Hi,"Upload files to the Hub"),Hi.forEach(o),ot.forEach(o),Uo=f(e),Y=l(e,"P",{});var Ta=s(Y);_l=i(Ta,"Sharing your files and work is a very important aspect of the Hub. The "),Bt=l(Ta,"CODE",{});var qi=s(Bt);gl=i(qi,"huggingface_hub"),qi.forEach(o),yl=i(Ta," uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library, making it more convenient for your users to interact with the Hub. This guide will show you how to:"),Ta.forEach(o),Ro=f(e),E=l(e,"UL",{});var T=s(E);me=l(T,"LI",{});var Oa=s(me);vl=i(Oa,"Upload a file with "),lt=l(Oa,"A",{href:!0});var Pi=s(lt);wl=i(Pi,"upload_file()"),Pi.forEach(o),bl=i(Oa,"."),Oa.forEach(o),$l=f(T),de=l(T,"LI",{});var Da=s(de);El=i(Da,"Push files with a "),Yt=l(Da,"CODE",{});var Ci=s(Yt);kl=i(Ci,"commit"),Ci.forEach(o),jl=i(Da," context manager."),Da.forEach(o),Al=f(T),_e=l(T,"LI",{});var Sa=s(_e);Hl=i(Sa,"Push files with the "),st=l(Sa,"A",{href:!0});var Li=s(st);ql=i(Li,"push_to_hub()"),Li.forEach(o),Pl=i(Sa," function."),Sa.forEach(o),Cl=f(T),ge=l(T,"LI",{});var Ia=s(ge);Ll=i(Ia,"Upload very large files with "),ye=l(Ia,"A",{href:!0,rel:!0});var xi=s(ye);xl=i(xi,"Git LFS"),xi.forEach(o),Tl=i(Ia,"."),Ia.forEach(o),Ol=f(T),ve=l(T,"LI",{});var Ua=s(ve);Dl=i(Ua,"Use "),rt=l(Ua,"A",{href:!0});var Ti=s(rt);Sl=i(Ti,"create_commit()"),Ti.forEach(o),Il=i(Ua," to push files without Git."),Ua.forEach(o),T.forEach(o),Fo=f(e),it=l(e,"P",{});var Oi=s(it);Ul=i(Oi,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Oi.forEach(o),Go=f(e),W=l(e,"OL",{});var Ra=s(W);we=l(Ra,"LI",{});var Fa=s(we);Wt=l(Fa,"P",{});var Di=s(Wt);Rl=i(Di,"Log in to your Hugging Face account with the following command:"),Di.forEach(o),Fl=f(Fa),m(be.$$.fragment,Fa),Fa.forEach(o),Gl=f(Ra),D=l(Ra,"LI",{});var Ft=s(D);$e=l(Ft,"P",{});var Ga=s($e);Nl=i(Ga,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Jt=l(Ga,"CODE",{});var Si=s(Jt);Ml=i(Si,"notebook_login()"),Si.forEach(o),Bl=i(Ga,":"),Ga.forEach(o),Yl=f(Ft),m(Ee.$$.fragment,Ft),Wl=f(Ft),nt=l(Ft,"P",{});var _i=s(nt);zt=l(_i,"CODE",{});var Ii=s(zt);Jl=i(Ii,"notebook_login()"),Ii.forEach(o),zl=i(_i," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),_i.forEach(o),Ft.forEach(o),Ra.forEach(o),No=f(e),S=l(e,"H2",{class:!0});var Na=s(S);J=l(Na,"A",{id:!0,class:!0,href:!0});var Ui=s(J);Kt=l(Ui,"SPAN",{});var Ri=s(Kt);m(ke.$$.fragment,Ri),Ri.forEach(o),Ui.forEach(o),Kl=f(Na),Qt=l(Na,"SPAN",{});var Fi=s(Qt);Ql=i(Fi,"Upload a file"),Fi.forEach(o),Na.forEach(o),Mo=f(e),z=l(e,"P",{});var Ma=s(z);Vl=i(Ma,"Use the "),pt=l(Ma,"A",{href:!0});var Gi=s(pt);Xl=i(Gi,"upload_file()"),Gi.forEach(o),Zl=i(Ma," function to upload a file to a repository. Let the function know where the file you want to upload is, where you want to upload the file to in the repository, and the name of the repository you want to add the file to."),Ma.forEach(o),Bo=f(e),m(je.$$.fragment,e),Yo=f(e),I=l(e,"H2",{class:!0});var Ba=s(I);K=l(Ba,"A",{id:!0,class:!0,href:!0});var Ni=s(K);Vt=l(Ni,"SPAN",{});var Mi=s(Vt);m(Ae.$$.fragment,Mi),Mi.forEach(o),Ni.forEach(o),es=f(Ba),Xt=l(Ba,"SPAN",{});var Bi=s(Xt);ts=i(Bi,"Upload a folder"),Bi.forEach(o),Ba.forEach(o),Wo=f(e),Q=l(e,"P",{});var Ya=s(Q);os=i(Ya,"Use the "),ht=l(Ya,"A",{href:!0});var Yi=s(ht);as=i(Yi,"upload_folder()"),Yi.forEach(o),ls=i(Ya," function to upload a local folder to a repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to."),Ya.forEach(o),Jo=f(e),m(He.$$.fragment,e),zo=f(e),U=l(e,"H2",{class:!0});var Wa=s(U);V=l(Wa,"A",{id:!0,class:!0,href:!0});var Wi=s(V);Zt=l(Wi,"SPAN",{});var Ji=s(Zt);m(qe.$$.fragment,Ji),Ji.forEach(o),Wi.forEach(o),ss=f(Wa),eo=l(Wa,"SPAN",{});var zi=s(eo);rs=i(zi,"commit context manager"),zi.forEach(o),Wa.forEach(o),Ko=f(e),A=l(e,"P",{});var fe=s(A);is=i(fe,"The "),to=l(fe,"CODE",{});var Ki=s(to);ns=i(Ki,"commit"),Ki.forEach(o),ps=i(fe," context manager handles four of the most common Git commands: pull, add, commit, and push. "),oo=l(fe,"CODE",{});var Qi=s(oo);hs=i(Qi,"git-lfs"),Qi.forEach(o),fs=i(fe," automatically tracks any file larger than 10MB. In the following example, the "),ao=l(fe,"CODE",{});var Vi=s(ao);us=i(Vi,"commit"),Vi.forEach(o),cs=i(fe," context manager:"),fe.forEach(o),Qo=f(e),H=l(e,"OL",{});var ue=s(H);Pe=l(ue,"LI",{});var Ja=s(Pe);ms=i(Ja,"Pulls from the "),lo=l(Ja,"CODE",{});var Xi=s(lo);ds=i(Xi,"text-files"),Xi.forEach(o),_s=i(Ja," repository."),Ja.forEach(o),gs=f(ue),Ce=l(ue,"LI",{});var za=s(Ce);ys=i(za,"Adds a change made to "),so=l(za,"CODE",{});var Zi=s(so);vs=i(Zi,"file.txt"),Zi.forEach(o),ws=i(za,"."),za.forEach(o),bs=f(ue),ro=l(ue,"LI",{});var en=s(ro);$s=i(en,"Commits the change."),en.forEach(o),Es=f(ue),Le=l(ue,"LI",{});var Ka=s(Le);ks=i(Ka,"Pushes the change to the "),io=l(Ka,"CODE",{});var tn=s(io);js=i(tn,"text-files"),tn.forEach(o),As=i(Ka," repository."),Ka.forEach(o),ue.forEach(o),Vo=f(e),m(xe.$$.fragment,e),Xo=f(e),ft=l(e,"P",{});var on=s(ft);Hs=i(on,"Here is another example of how to save and upload a file to a repository:"),on.forEach(o),Zo=f(e),m(Te.$$.fragment,e),ea=f(e),X=l(e,"P",{});var Qa=s(X);qs=i(Qa,"Set "),no=l(Qa,"CODE",{});var an=s(no);Ps=i(an,"blocking=False"),an.forEach(o),Cs=i(Qa," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Qa.forEach(o),ta=f(e),m(Oe.$$.fragment,e),oa=f(e),Z=l(e,"P",{});var Va=s(Z);Ls=i(Va,"You can check the status of your push with the "),po=l(Va,"CODE",{});var ln=s(po);xs=i(ln,"command_queue"),ln.forEach(o),Ts=i(Va," method:"),Va.forEach(o),aa=f(e),m(De.$$.fragment,e),la=f(e),ut=l(e,"P",{});var sn=s(ut);Os=i(sn,"Refer to the table below for the possible statuses:"),sn.forEach(o),sa=f(e),ee=l(e,"TABLE",{});var Xa=s(ee);ho=l(Xa,"THEAD",{});var rn=s(ho);Se=l(rn,"TR",{});var Za=s(Se);fo=l(Za,"TH",{});var nn=s(fo);Ds=i(nn,"Status"),nn.forEach(o),Ss=f(Za),uo=l(Za,"TH",{});var pn=s(uo);Is=i(pn,"Description"),pn.forEach(o),Za.forEach(o),rn.forEach(o),Us=f(Xa),R=l(Xa,"TBODY",{});var Gt=s(R);Ie=l(Gt,"TR",{});var el=s(Ie);co=l(el,"TD",{});var hn=s(co);Rs=i(hn,"-1"),hn.forEach(o),Fs=f(el),mo=l(el,"TD",{});var fn=s(mo);Gs=i(fn,"The push is ongoing."),fn.forEach(o),el.forEach(o),Ns=f(Gt),Ue=l(Gt,"TR",{});var tl=s(Ue);_o=l(tl,"TD",{});var un=s(_o);Ms=i(un,"0"),un.forEach(o),Bs=f(tl),go=l(tl,"TD",{});var cn=s(go);Ys=i(cn,"The push has completed successfully."),cn.forEach(o),tl.forEach(o),Ws=f(Gt),Re=l(Gt,"TR",{});var ol=s(Re);yo=l(ol,"TD",{});var mn=s(yo);Js=i(mn,"Non-zero"),mn.forEach(o),zs=f(ol),vo=l(ol,"TD",{});var dn=s(vo);Ks=i(dn,"An error has occurred."),dn.forEach(o),ol.forEach(o),Gt.forEach(o),Xa.forEach(o),ra=f(e),te=l(e,"P",{});var al=s(te);Qs=i(al,"When "),wo=l(al,"CODE",{});var _n=s(wo);Vs=i(_n,"blocking=False"),_n.forEach(o),Xs=i(al,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),al.forEach(o),ia=f(e),m(Fe.$$.fragment,e),na=f(e),F=l(e,"H2",{class:!0});var ll=s(F);oe=l(ll,"A",{id:!0,class:!0,href:!0});var gn=s(oe);bo=l(gn,"SPAN",{});var yn=s(bo);m(Ge.$$.fragment,yn),yn.forEach(o),gn.forEach(o),Zs=f(ll),$o=l(ll,"SPAN",{});var vn=s($o);er=i(vn,"push_to_hub"),vn.forEach(o),ll.forEach(o),pa=f(e),b=l(e,"P",{});var P=s(b);tr=i(P,"The "),ct=l(P,"A",{href:!0});var wn=s(ct);or=i(wn,"Repository"),wn.forEach(o),ar=i(P," class also has a "),mt=l(P,"A",{href:!0});var bn=s(mt);lr=i(bn,"push_to_hub()"),bn.forEach(o),sr=i(P," function to add files, make a commit, and push them to a repository. Unlike the "),Eo=l(P,"CODE",{});var $n=s(Eo);rr=i($n,"commit"),$n.forEach(o),ir=i(P," context manager, "),dt=l(P,"A",{href:!0});var En=s(dt);nr=i(En,"push_to_hub()"),En.forEach(o),pr=i(P," requires you to pull from a repository first, save the files, and then call "),_t=l(P,"A",{href:!0});var kn=s(_t);hr=i(kn,"push_to_hub()"),kn.forEach(o),fr=i(P,"."),P.forEach(o),ha=f(e),m(Ne.$$.fragment,e),fa=f(e),L=l(e,"P",{});var Nt=s(L);ur=i(Nt,"However, if you aren\u2019t ready to push a file yet, you can still use "),gt=l(Nt,"A",{href:!0});var jn=s(gt);cr=i(jn,"git_add()"),jn.forEach(o),mr=i(Nt," and "),yt=l(Nt,"A",{href:!0});var An=s(yt);dr=i(An,"git_commit()"),An.forEach(o),_r=i(Nt," to add and commit your file:"),Nt.forEach(o),ua=f(e),m(Me.$$.fragment,e),ca=f(e),ae=l(e,"P",{});var sl=s(ae);gr=i(sl,"Once you\u2019re ready, you can push your file to your repository with "),vt=l(sl,"A",{href:!0});var Hn=s(vt);yr=i(Hn,"git_push()"),Hn.forEach(o),vr=i(sl,":"),sl.forEach(o),ma=f(e),m(Be.$$.fragment,e),da=f(e),G=l(e,"H2",{class:!0});var rl=s(G);le=l(rl,"A",{id:!0,class:!0,href:!0});var qn=s(le);ko=l(qn,"SPAN",{});var Pn=s(ko);m(Ye.$$.fragment,Pn),Pn.forEach(o),qn.forEach(o),wr=f(rl),jo=l(rl,"SPAN",{});var Cn=s(jo);br=i(Cn,"Upload with Git LFS"),Cn.forEach(o),rl.forEach(o),_a=f(e),wt=l(e,"P",{});var Ln=s(wt);$r=i(Ln,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),Ln.forEach(o),ga=f(e),m(We.$$.fragment,e),ya=f(e),bt=l(e,"P",{});var xn=s(bt);Er=i(xn,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),xn.forEach(o),va=f(e),N=l(e,"H2",{class:!0});var il=s(N);se=l(il,"A",{id:!0,class:!0,href:!0});var Tn=s(se);Ao=l(Tn,"SPAN",{});var On=s(Ao);m(Je.$$.fragment,On),On.forEach(o),Tn.forEach(o),kr=f(il),Ho=l(il,"SPAN",{});var Dn=s(Ho);jr=i(Dn,"Upload without Git installed"),Dn.forEach(o),il.forEach(o),wa=f(e),m(re.$$.fragment,e),ba=f(e),x=l(e,"P",{});var Mt=s(x);Ar=i(Mt,"If you don\u2019t have Git installed on your system, use the "),$t=l(Mt,"A",{href:!0});var Sn=s($t);Hr=i(Sn,"create_commit()"),Sn.forEach(o),qr=i(Mt," function to upload your file. "),Et=l(Mt,"A",{href:!0});var In=s(Et);Pr=i(In,"create_commit()"),In.forEach(o),Cr=i(Mt," uses the HTTP protocol to upload files to the Hub. Large files and binary files are automatically uploaded with the Git LFS protocol."),Mt.forEach(o),$a=f(e),ie=l(e,"P",{});var nl=s(ie);Lr=i(nl,"There are two kinds of operations supported by the "),kt=l(nl,"A",{href:!0});var Un=s(kt);xr=i(Un,"create_commit()"),Un.forEach(o),Tr=i(nl," function:"),nl.forEach(o),Ea=f(e),ne=l(e,"UL",{});var pl=s(ne);ze=l(pl,"LI",{});var hl=s(ze);jt=l(hl,"P",{});var gi=s(jt);qo=l(gi,"CODE",{});var Rn=s(qo);Or=i(Rn,"CommitOperationAdd"),Rn.forEach(o),Dr=i(gi," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),gi.forEach(o),Sr=f(hl),Ke=l(hl,"UL",{});var fl=s(Ke);At=l(fl,"LI",{});var yi=s(At);Po=l(yi,"CODE",{});var Fn=s(Po);Ir=i(Fn,"path_in_repo"),Fn.forEach(o),Ur=i(yi,": the repository path to upload a file to."),yi.forEach(o),Rr=f(fl),Ht=l(fl,"LI",{});var vi=s(Ht);Co=l(vi,"CODE",{});var Gn=s(Co);Fr=i(Gn,"path_or_fileobj"),Gn.forEach(o),Gr=i(vi,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),vi.forEach(o),fl.forEach(o),hl.forEach(o),Nr=f(pl),Lo=l(pl,"LI",{});var Nn=s(Lo);pe=l(Nn,"P",{});var So=s(pe);xo=l(So,"CODE",{});var Mn=s(xo);Mr=i(Mn,"CommitOperationDelete"),Mn.forEach(o),Br=i(So," removes a file from a repository. This operation accepts "),To=l(So,"CODE",{});var Bn=s(To);Yr=i(Bn,"path_in_repo"),Bn.forEach(o),Wr=i(So," as an argument."),So.forEach(o),Nn.forEach(o),pl.forEach(o),ka=f(e),qt=l(e,"P",{});var Yn=s(qt);Jr=i(Yn,"For example, if you want to upload two files and delete a file in a Hub repository:"),Yn.forEach(o),ja=f(e),Pt=l(e,"OL",{});var Wn=s(Pt);Qe=l(Wn,"LI",{});var ul=s(Qe);zr=i(ul,"Use the appropriate "),Oo=l(ul,"CODE",{});var Jn=s(Oo);Kr=i(Jn,"CommitOperation"),Jn.forEach(o),Qr=i(ul," to add and delete a file:"),ul.forEach(o),Wn.forEach(o),Aa=f(e),m(Ve.$$.fragment,e),Ha=f(e),Xe=l(e,"OL",{start:!0});var zn=s(Xe);Ze=l(zn,"LI",{});var cl=s(Ze);Vr=i(cl,"Pass your operations to "),Ct=l(cl,"A",{href:!0});var Kn=s(Ct);Xr=i(Kn,"create_commit()"),Kn.forEach(o),Zr=i(cl,":"),cl.forEach(o),zn.forEach(o),qa=f(e),m(et.$$.fragment,e),Pa=f(e),tt=l(e,"P",{});var wi=s(tt);Lt=l(wi,"A",{href:!0});var Qn=s(Lt);ei=i(Qn,"create_commit()"),Qn.forEach(o),ti=i(wi," is the underlying function behind each of these other functions:"),wi.forEach(o),Ca=f(e),q=l(e,"UL",{});var ce=s(q);xt=l(ce,"LI",{});var bi=s(xt);Tt=l(bi,"A",{href:!0});var Vn=s(Tt);oi=i(Vn,"upload_file()"),Vn.forEach(o),ai=i(bi," uploads a single file to a repository on the Hub."),bi.forEach(o),li=f(ce),Ot=l(ce,"LI",{});var $i=s(Ot);Dt=l($i,"A",{href:!0});var Xn=s(Dt);si=i(Xn,"upload_folder()"),Xn.forEach(o),ri=i($i," uploads a local directory to a repository on the Hub."),$i.forEach(o),ii=f(ce),St=l(ce,"LI",{});var Ei=s(St);It=l(Ei,"A",{href:!0});var Zn=s(It);ni=i(Zn,"delete_file()"),Zn.forEach(o),pi=i(Ei," deletes a single file from a repository on the Hub."),Ei.forEach(o),hi=f(ce),Ut=l(ce,"LI",{});var ki=s(Ut);Do=l(ki,"CODE",{});var ep=s(Do);fi=i(ep,"metadata_update()"),ep.forEach(o),ui=i(ki," updates a repository\u2019s metadata."),ki.forEach(o),ce.forEach(o),La=f(e),he=l(e,"P",{});var ml=s(he);ci=i(ml,"For more detailed information about these functions, take a look at the "),Rt=l(ml,"A",{href:!0});var tp=s(Rt);mi=i(tp,"HfApi"),tp.forEach(o),di=i(ml," reference."),ml.forEach(o),this.h()},h(){u(v,"name","hf:doc:metadata"),u(v,"content",JSON.stringify(hp)),u(j,"id","upload-files-to-the-hub"),u(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(j,"href","#upload-files-to-the-hub"),u(w,"class","relative group"),u(lt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(st,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(ye,"href","https://git-lfs.github.com/"),u(ye,"rel","nofollow"),u(rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(J,"id","upload-a-file"),u(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(J,"href","#upload-a-file"),u(S,"class","relative group"),u(pt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(K,"id","upload-a-folder"),u(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(K,"href","#upload-a-folder"),u(I,"class","relative group"),u(ht,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(V,"id","commit-context-manager"),u(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(V,"href","#commit-context-manager"),u(U,"class","relative group"),u(oe,"id","pushtohub"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#pushtohub"),u(F,"class","relative group"),u(ct,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository"),u(mt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(dt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(_t,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(gt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_add"),u(yt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_commit"),u(vt,"href","/docs/huggingface_hub/pr_944/en/package_reference/repository#huggingface_hub.Repository.git_push"),u(le,"id","upload-with-git-lfs"),u(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(le,"href","#upload-with-git-lfs"),u(G,"class","relative group"),u(se,"id","upload-without-git-installed"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#upload-without-git-installed"),u(N,"class","relative group"),u($t,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Et,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(kt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Ct,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Xe,"start","2"),u(Lt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),u(Tt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),u(Dt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),u(It,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),u(Rt,"href","/docs/huggingface_hub/pr_944/en/package_reference/hf_api#huggingface_hub.HfApi")},m(e,n){t(document.head,v),p(e,M,n),p(e,w,n),t(w,j),t(j,O),d(k,O,null),t(w,C),t(w,B),t(B,dl),p(e,Uo,n),p(e,Y,n),t(Y,_l),t(Y,Bt),t(Bt,gl),t(Y,yl),p(e,Ro,n),p(e,E,n),t(E,me),t(me,vl),t(me,lt),t(lt,wl),t(me,bl),t(E,$l),t(E,de),t(de,El),t(de,Yt),t(Yt,kl),t(de,jl),t(E,Al),t(E,_e),t(_e,Hl),t(_e,st),t(st,ql),t(_e,Pl),t(E,Cl),t(E,ge),t(ge,Ll),t(ge,ye),t(ye,xl),t(ge,Tl),t(E,Ol),t(E,ve),t(ve,Dl),t(ve,rt),t(rt,Sl),t(ve,Il),p(e,Fo,n),p(e,it,n),t(it,Ul),p(e,Go,n),p(e,W,n),t(W,we),t(we,Wt),t(Wt,Rl),t(we,Fl),d(be,we,null),t(W,Gl),t(W,D),t(D,$e),t($e,Nl),t($e,Jt),t(Jt,Ml),t($e,Bl),t(D,Yl),d(Ee,D,null),t(D,Wl),t(D,nt),t(nt,zt),t(zt,Jl),t(nt,zl),p(e,No,n),p(e,S,n),t(S,J),t(J,Kt),d(ke,Kt,null),t(S,Kl),t(S,Qt),t(Qt,Ql),p(e,Mo,n),p(e,z,n),t(z,Vl),t(z,pt),t(pt,Xl),t(z,Zl),p(e,Bo,n),d(je,e,n),p(e,Yo,n),p(e,I,n),t(I,K),t(K,Vt),d(Ae,Vt,null),t(I,es),t(I,Xt),t(Xt,ts),p(e,Wo,n),p(e,Q,n),t(Q,os),t(Q,ht),t(ht,as),t(Q,ls),p(e,Jo,n),d(He,e,n),p(e,zo,n),p(e,U,n),t(U,V),t(V,Zt),d(qe,Zt,null),t(U,ss),t(U,eo),t(eo,rs),p(e,Ko,n),p(e,A,n),t(A,is),t(A,to),t(to,ns),t(A,ps),t(A,oo),t(oo,hs),t(A,fs),t(A,ao),t(ao,us),t(A,cs),p(e,Qo,n),p(e,H,n),t(H,Pe),t(Pe,ms),t(Pe,lo),t(lo,ds),t(Pe,_s),t(H,gs),t(H,Ce),t(Ce,ys),t(Ce,so),t(so,vs),t(Ce,ws),t(H,bs),t(H,ro),t(ro,$s),t(H,Es),t(H,Le),t(Le,ks),t(Le,io),t(io,js),t(Le,As),p(e,Vo,n),d(xe,e,n),p(e,Xo,n),p(e,ft,n),t(ft,Hs),p(e,Zo,n),d(Te,e,n),p(e,ea,n),p(e,X,n),t(X,qs),t(X,no),t(no,Ps),t(X,Cs),p(e,ta,n),d(Oe,e,n),p(e,oa,n),p(e,Z,n),t(Z,Ls),t(Z,po),t(po,xs),t(Z,Ts),p(e,aa,n),d(De,e,n),p(e,la,n),p(e,ut,n),t(ut,Os),p(e,sa,n),p(e,ee,n),t(ee,ho),t(ho,Se),t(Se,fo),t(fo,Ds),t(Se,Ss),t(Se,uo),t(uo,Is),t(ee,Us),t(ee,R),t(R,Ie),t(Ie,co),t(co,Rs),t(Ie,Fs),t(Ie,mo),t(mo,Gs),t(R,Ns),t(R,Ue),t(Ue,_o),t(_o,Ms),t(Ue,Bs),t(Ue,go),t(go,Ys),t(R,Ws),t(R,Re),t(Re,yo),t(yo,Js),t(Re,zs),t(Re,vo),t(vo,Ks),p(e,ra,n),p(e,te,n),t(te,Qs),t(te,wo),t(wo,Vs),t(te,Xs),p(e,ia,n),d(Fe,e,n),p(e,na,n),p(e,F,n),t(F,oe),t(oe,bo),d(Ge,bo,null),t(F,Zs),t(F,$o),t($o,er),p(e,pa,n),p(e,b,n),t(b,tr),t(b,ct),t(ct,or),t(b,ar),t(b,mt),t(mt,lr),t(b,sr),t(b,Eo),t(Eo,rr),t(b,ir),t(b,dt),t(dt,nr),t(b,pr),t(b,_t),t(_t,hr),t(b,fr),p(e,ha,n),d(Ne,e,n),p(e,fa,n),p(e,L,n),t(L,ur),t(L,gt),t(gt,cr),t(L,mr),t(L,yt),t(yt,dr),t(L,_r),p(e,ua,n),d(Me,e,n),p(e,ca,n),p(e,ae,n),t(ae,gr),t(ae,vt),t(vt,yr),t(ae,vr),p(e,ma,n),d(Be,e,n),p(e,da,n),p(e,G,n),t(G,le),t(le,ko),d(Ye,ko,null),t(G,wr),t(G,jo),t(jo,br),p(e,_a,n),p(e,wt,n),t(wt,$r),p(e,ga,n),d(We,e,n),p(e,ya,n),p(e,bt,n),t(bt,Er),p(e,va,n),p(e,N,n),t(N,se),t(se,Ao),d(Je,Ao,null),t(N,kr),t(N,Ho),t(Ho,jr),p(e,wa,n),d(re,e,n),p(e,ba,n),p(e,x,n),t(x,Ar),t(x,$t),t($t,Hr),t(x,qr),t(x,Et),t(Et,Pr),t(x,Cr),p(e,$a,n),p(e,ie,n),t(ie,Lr),t(ie,kt),t(kt,xr),t(ie,Tr),p(e,Ea,n),p(e,ne,n),t(ne,ze),t(ze,jt),t(jt,qo),t(qo,Or),t(jt,Dr),t(ze,Sr),t(ze,Ke),t(Ke,At),t(At,Po),t(Po,Ir),t(At,Ur),t(Ke,Rr),t(Ke,Ht),t(Ht,Co),t(Co,Fr),t(Ht,Gr),t(ne,Nr),t(ne,Lo),t(Lo,pe),t(pe,xo),t(xo,Mr),t(pe,Br),t(pe,To),t(To,Yr),t(pe,Wr),p(e,ka,n),p(e,qt,n),t(qt,Jr),p(e,ja,n),p(e,Pt,n),t(Pt,Qe),t(Qe,zr),t(Qe,Oo),t(Oo,Kr),t(Qe,Qr),p(e,Aa,n),d(Ve,e,n),p(e,Ha,n),p(e,Xe,n),t(Xe,Ze),t(Ze,Vr),t(Ze,Ct),t(Ct,Xr),t(Ze,Zr),p(e,qa,n),d(et,e,n),p(e,Pa,n),p(e,tt,n),t(tt,Lt),t(Lt,ei),t(tt,ti),p(e,Ca,n),p(e,q,n),t(q,xt),t(xt,Tt),t(Tt,oi),t(xt,ai),t(q,li),t(q,Ot),t(Ot,Dt),t(Dt,si),t(Ot,ri),t(q,ii),t(q,St),t(St,It),t(It,ni),t(St,pi),t(q,hi),t(q,Ut),t(Ut,Do),t(Do,fi),t(Ut,ui),p(e,La,n),p(e,he,n),t(he,ci),t(he,Rt),t(Rt,mi),t(he,di),xa=!0},p(e,[n]){const ot={};n&2&&(ot.$$scope={dirty:n,ctx:e}),re.$set(ot)},i(e){xa||(_(k.$$.fragment,e),_(be.$$.fragment,e),_(Ee.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Ae.$$.fragment,e),_(He.$$.fragment,e),_(qe.$$.fragment,e),_(xe.$$.fragment,e),_(Te.$$.fragment,e),_(Oe.$$.fragment,e),_(De.$$.fragment,e),_(Fe.$$.fragment,e),_(Ge.$$.fragment,e),_(Ne.$$.fragment,e),_(Me.$$.fragment,e),_(Be.$$.fragment,e),_(Ye.$$.fragment,e),_(We.$$.fragment,e),_(Je.$$.fragment,e),_(re.$$.fragment,e),_(Ve.$$.fragment,e),_(et.$$.fragment,e),xa=!0)},o(e){g(k.$$.fragment,e),g(be.$$.fragment,e),g(Ee.$$.fragment,e),g(ke.$$.fragment,e),g(je.$$.fragment,e),g(Ae.$$.fragment,e),g(He.$$.fragment,e),g(qe.$$.fragment,e),g(xe.$$.fragment,e),g(Te.$$.fragment,e),g(Oe.$$.fragment,e),g(De.$$.fragment,e),g(Fe.$$.fragment,e),g(Ge.$$.fragment,e),g(Ne.$$.fragment,e),g(Me.$$.fragment,e),g(Be.$$.fragment,e),g(Ye.$$.fragment,e),g(We.$$.fragment,e),g(Je.$$.fragment,e),g(re.$$.fragment,e),g(Ve.$$.fragment,e),g(et.$$.fragment,e),xa=!1},d(e){o(v),e&&o(M),e&&o(w),y(k),e&&o(Uo),e&&o(Y),e&&o(Ro),e&&o(E),e&&o(Fo),e&&o(it),e&&o(Go),e&&o(W),y(be),y(Ee),e&&o(No),e&&o(S),y(ke),e&&o(Mo),e&&o(z),e&&o(Bo),y(je,e),e&&o(Yo),e&&o(I),y(Ae),e&&o(Wo),e&&o(Q),e&&o(Jo),y(He,e),e&&o(zo),e&&o(U),y(qe),e&&o(Ko),e&&o(A),e&&o(Qo),e&&o(H),e&&o(Vo),y(xe,e),e&&o(Xo),e&&o(ft),e&&o(Zo),y(Te,e),e&&o(ea),e&&o(X),e&&o(ta),y(Oe,e),e&&o(oa),e&&o(Z),e&&o(aa),y(De,e),e&&o(la),e&&o(ut),e&&o(sa),e&&o(ee),e&&o(ra),e&&o(te),e&&o(ia),y(Fe,e),e&&o(na),e&&o(F),y(Ge),e&&o(pa),e&&o(b),e&&o(ha),y(Ne,e),e&&o(fa),e&&o(L),e&&o(ua),y(Me,e),e&&o(ca),e&&o(ae),e&&o(ma),y(Be,e),e&&o(da),e&&o(G),y(Ye),e&&o(_a),e&&o(wt),e&&o(ga),y(We,e),e&&o(ya),e&&o(bt),e&&o(va),e&&o(N),y(Je),e&&o(wa),y(re,e),e&&o(ba),e&&o(x),e&&o($a),e&&o(ie),e&&o(Ea),e&&o(ne),e&&o(ka),e&&o(qt),e&&o(ja),e&&o(Pt),e&&o(Aa),y(Ve,e),e&&o(Ha),e&&o(Xe),e&&o(qa),y(et,e),e&&o(Pa),e&&o(tt),e&&o(Ca),e&&o(q),e&&o(La),e&&o(he)}}}const hp={local:"upload-files-to-the-hub",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"},{local:"upload-without-git-installed",title:"Upload without Git installed"}],title:"Upload files to the Hub"};function fp(Io){return rp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _p extends op{constructor(v){super();ap(this,v,fp,pp,lp,{})}}export{_p as default,hp as metadata};
