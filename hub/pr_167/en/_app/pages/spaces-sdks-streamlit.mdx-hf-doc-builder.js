import{S as so,i as oo,s as ro,e as r,k as c,w as F,t as s,N as lo,c as l,d as a,m as f,a as i,x as L,h as o,b as n,P as ao,G as t,g as h,y as B,L as io,q as K,o as z,B as W,v as no}from"../chunks/vendor-hf-doc-builder.js";import{I as Je}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as rs}from"../chunks/CodeBlock-hf-doc-builder.js";function po(ls){let E,Ve,k,N,Se,U,At,_e,Pt,Qe,_,ye,Tt,Nt,be,Dt,Ct,J,Ot,xt,Xe,d,Rt,Ee,qt,Gt,V,Ht,It,ke,Mt,Yt,$e,Ft,Lt,je,Bt,Kt,Ae,zt,Wt,Ze,v,Ut,Pe,Jt,Vt,D,Te,Qt,Xt,Zt,Ne,ea,ta,et,Q,tt,y,aa,De,sa,oa,fe,ra,la,at,C,ia,X,na,pa,st,$,O,Ce,Z,ha,Oe,ca,ot,b,fa,xe,da,ua,ee,ma,ga,rt,x,va,te,wa,Sa,lt,j,R,Re,ae,_a,qe,ya,it,w,ba,se,Ea,ka,Ge,$a,ja,de,Aa,Pa,nt,A,q,He,oe,Ta,Ie,Na,pt,S,Da,Me,Ca,Oa,re,xa,Ra,Ye,qa,Ga,ht,le,ct,ue,Ha,ft,P,G,Fe,ie,Ia,Le,Ma,dt,H,Ya,Be,Fa,La,ut,ne,mt,u,Ba,pe,Ka,za,he,Wa,Ua,Ke,Ja,Va,ze,Qa,Xa,We,Za,es,Ue,ts,as,gt,T,me,is,ss,ge,ns,vt;return U=new Je({}),Q=new rs({props:{code:`sdk: streamlit
sdk_version: 1.2.0 # The latest supported version`,highlighted:`<span class="hljs-attr">sdk:</span> <span class="hljs-string">streamlit</span>
<span class="hljs-attr">sdk_version:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.0</span> <span class="hljs-comment"># The latest supported version</span>`}}),Z=new Je({}),ae=new Je({}),oe=new Je({}),le=new rs({props:{code:`transformers
torch`,highlighted:`<span class="hljs-attribute">transformers
torch</span>`}}),ie=new Je({}),ne=new rs({props:{code:`import streamlit as st
from transformers import pipeline
from PIL import Image

pipeline = pipeline(task="image-classification", model="julien-c/hotdog-not-hotdog")

st.title("Hot Dog? Or Not?")

file_name = st.file_uploader("Upload a hot dog candidate image")

if file_name is not None:
  col1, col2 = st.columns(2)

  image = Image.open(file_name)
  col1.image(image, use_column_width=True)
  predictions = pipeline(image)

  col2.header("Probabilities")
  for p in predictions:
    col2.subheader(f"{ p['label'] }: { round(p['score'] * 100, 1)}%")`,highlighted:`<span class="hljs-keyword">import</span> streamlit <span class="hljs-keyword">as</span> st
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image

pipeline = pipeline(task=<span class="hljs-string">&quot;image-classification&quot;</span>, model=<span class="hljs-string">&quot;julien-c/hotdog-not-hotdog&quot;</span>)

st.title(<span class="hljs-string">&quot;Hot Dog? Or Not?&quot;</span>)

file_name = st.file_uploader(<span class="hljs-string">&quot;Upload a hot dog candidate image&quot;</span>)

<span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
  col1, col2 = st.columns(<span class="hljs-number">2</span>)

  image = Image.<span class="hljs-built_in">open</span>(file_name)
  col1.image(image, use_column_width=<span class="hljs-literal">True</span>)
  predictions = pipeline(image)

  col2.header(<span class="hljs-string">&quot;Probabilities&quot;</span>)
  <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> predictions:
    col2.subheader(<span class="hljs-string">f&quot;<span class="hljs-subst">{ p[<span class="hljs-string">&#x27;label&#x27;</span>] }</span>: <span class="hljs-subst">{ <span class="hljs-built_in">round</span>(p[<span class="hljs-string">&#x27;score&#x27;</span>] * <span class="hljs-number">100</span>, <span class="hljs-number">1</span>)}</span>%&quot;</span>)`}}),{c(){E=r("meta"),Ve=c(),k=r("h1"),N=r("a"),Se=r("span"),F(U.$$.fragment),At=c(),_e=r("span"),Pt=s("Streamlit Spaces"),Qe=c(),_=r("p"),ye=r("strong"),Tt=s("Streamlit"),Nt=s(" gives users more freedom to build a full-featured web app with Python in a "),be=r("em"),Dt=s("reactive"),Ct=s(" way. Your code is rerun each time the state of the app changes. Streamlit is also great for data visualization and supports several charting libraries such as Bokeh, Plotly, and Altair. Read this "),J=r("a"),Ot=s("blog post"),xt=s(" about building and hosting Streamlit apps in Spaces."),Xe=c(),d=r("p"),Rt=s("Selecting "),Ee=r("strong"),qt=s("Streankut"),Gt=s(" as the SDK when "),V=r("a"),Ht=s("creating a new Space"),It=s(" will initialize your Space with the latest version of Streamlit by setting the "),ke=r("code"),Mt=s("sdk"),Yt=s(" property to "),$e=r("code"),Ft=s("streamlit"),Lt=s(" in your "),je=r("code"),Bt=s("README.md"),Kt=s(" file\u2019s YAML block. If you\u2019d like to change the Streamlit version, you can edit the "),Ae=r("code"),zt=s("sdk_version"),Wt=s(" property."),Ze=c(),v=r("p"),Ut=s("To use Streamlit in a Space, select "),Pe=r("strong"),Jt=s("Streamlit"),Vt=s(" as the SDK when you create a Space through the "),D=r("a"),Te=r("strong"),Qt=s("New Space"),Xt=s(" form"),Zt=s(". This will create a repository with a "),Ne=r("code"),ea=s("README.md"),ta=s(" that contains the following properties in the YAML configuration block:"),et=c(),F(Q.$$.fragment),tt=c(),y=r("p"),aa=s("You can edit the "),De=r("code"),sa=s("sdk_version"),oa=s(", but note that issues may occur when you use an unsupported Streamlit version. Not all Streamlit versions are supported, so please refer to the "),fe=r("a"),ra=s("reference section"),la=s(" to see which versions are available."),at=c(),C=r("p"),ia=s("For in-depth information about Streamlit, refer to the "),X=r("a"),na=s("Streamlit documentation"),pa=s("."),st=c(),$=r("h2"),O=r("a"),Ce=r("span"),F(Z.$$.fragment),ha=c(),Oe=r("span"),ca=s("Your First Streamlit Space: Hot Dog Classifier"),ot=c(),b=r("p"),fa=s("In the following sections, you\u2019ll learn the basics of creating a Space, configuring it, and deploying your code to it. We\u2019ll create a "),xe=r("strong"),da=s("Hot Dog Classifier"),ua=s(" Space with Streamlit that\u2019ll be used to demo the "),ee=r("a"),ma=s("julien-c/hotdog-not-hotdog"),ga=s(" model, which can detect whether a given picture contains a hot dog \u{1F32D}"),rt=c(),x=r("p"),va=s("You can find a completed version of this hosted at "),te=r("a"),wa=s("NimaBoscarino/hotdog-streamlit"),Sa=s("."),lt=c(),j=r("h2"),R=r("a"),Re=r("span"),F(ae.$$.fragment),_a=c(),qe=r("span"),ya=s("Create a new Streamlit Space"),it=c(),w=r("p"),ba=s("We\u2019ll start by "),se=r("a"),Ea=s("creating a brand new Space"),ka=s(" and choosing "),Ge=r("strong"),$a=s("Streamlit"),ja=s(" as our SDK. Hugging Face Spaces are Git repositories, meaning that you can work on your Space incrementally (and collaboratively) by pushing commits. Take a look at the "),de=r("a"),Aa=s("Getting Started with Repositories"),Pa=s(" guide to learn about how you can create and edit files before continuing."),nt=c(),A=r("h2"),q=r("a"),He=r("span"),F(oe.$$.fragment),Ta=c(),Ie=r("span"),Na=s("Add the dependencies"),pt=c(),S=r("p"),Da=s("For the "),Me=r("strong"),Ca=s("Hot Dog Classifier"),Oa=s(" we\u2019ll be using a "),re=r("a"),xa=s("\u{1F917} Transformers pipeline"),Ra=s(" to use the model, so we need to start by installing a few dependencies. This can be done by creating a "),Ye=r("strong"),qa=s("requirements.txt"),Ga=s(" file in our repository, and adding the following dependencies to it:"),ht=c(),F(le.$$.fragment),ct=c(),ue=r("p"),Ha=s("The Spaces runtime will handle installing the dependencies!"),ft=c(),P=r("h2"),G=r("a"),Fe=r("span"),F(ie.$$.fragment),Ia=c(),Le=r("span"),Ma=s("Create the Streamlit app"),dt=c(),H=r("p"),Ya=s("To create the Streamlit app, make a new file in the repository called "),Be=r("strong"),Fa=s("app.py"),La=s(", and add the following code:"),ut=c(),F(ne.$$.fragment),mt=c(),u=r("p"),Ba=s("This Python script uses a "),pe=r("a"),Ka=s("\u{1F917} Transformers pipeline"),za=s(" to load the "),he=r("a"),Wa=s("julien-c/hotdog-not-hotdog"),Ua=s(" model, which is used by the Streamlit interface. The Streamlit app will expect you to upload an image, which it\u2019ll then classify as "),Ke=r("em"),Ja=s("hot dog"),Va=s(" or "),ze=r("em"),Qa=s("not hot dog"),Xa=s(". Once you\u2019ve saved the code to the "),We=r("strong"),Za=s("app.py"),es=s(" file, visit the "),Ue=r("strong"),ts=s("App"),as=s(" tab to see your app in action!"),gt=c(),T=r("div"),me=r("img"),ss=c(),ge=r("img"),this.h()},l(e){const p=lo('[data-svelte="svelte-1phssyn"]',document.head);E=l(p,"META",{name:!0,content:!0}),p.forEach(a),Ve=f(e),k=l(e,"H1",{class:!0});var wt=i(k);N=l(wt,"A",{id:!0,class:!0,href:!0});var ps=i(N);Se=l(ps,"SPAN",{});var hs=i(Se);L(U.$$.fragment,hs),hs.forEach(a),ps.forEach(a),At=f(wt),_e=l(wt,"SPAN",{});var cs=i(_e);Pt=o(cs,"Streamlit Spaces"),cs.forEach(a),wt.forEach(a),Qe=f(e),_=l(e,"P",{});var ce=i(_);ye=l(ce,"STRONG",{});var fs=i(ye);Tt=o(fs,"Streamlit"),fs.forEach(a),Nt=o(ce," gives users more freedom to build a full-featured web app with Python in a "),be=l(ce,"EM",{});var ds=i(be);Dt=o(ds,"reactive"),ds.forEach(a),Ct=o(ce," way. Your code is rerun each time the state of the app changes. Streamlit is also great for data visualization and supports several charting libraries such as Bokeh, Plotly, and Altair. Read this "),J=l(ce,"A",{href:!0,rel:!0});var us=i(J);Ot=o(us,"blog post"),us.forEach(a),xt=o(ce," about building and hosting Streamlit apps in Spaces."),ce.forEach(a),Xe=f(e),d=l(e,"P",{});var m=i(d);Rt=o(m,"Selecting "),Ee=l(m,"STRONG",{});var ms=i(Ee);qt=o(ms,"Streankut"),ms.forEach(a),Gt=o(m," as the SDK when "),V=l(m,"A",{href:!0,rel:!0});var gs=i(V);Ht=o(gs,"creating a new Space"),gs.forEach(a),It=o(m," will initialize your Space with the latest version of Streamlit by setting the "),ke=l(m,"CODE",{});var vs=i(ke);Mt=o(vs,"sdk"),vs.forEach(a),Yt=o(m," property to "),$e=l(m,"CODE",{});var ws=i($e);Ft=o(ws,"streamlit"),ws.forEach(a),Lt=o(m," in your "),je=l(m,"CODE",{});var Ss=i(je);Bt=o(Ss,"README.md"),Ss.forEach(a),Kt=o(m," file\u2019s YAML block. If you\u2019d like to change the Streamlit version, you can edit the "),Ae=l(m,"CODE",{});var _s=i(Ae);zt=o(_s,"sdk_version"),_s.forEach(a),Wt=o(m," property."),m.forEach(a),Ze=f(e),v=l(e,"P",{});var I=i(v);Ut=o(I,"To use Streamlit in a Space, select "),Pe=l(I,"STRONG",{});var ys=i(Pe);Jt=o(ys,"Streamlit"),ys.forEach(a),Vt=o(I," as the SDK when you create a Space through the "),D=l(I,"A",{href:!0,rel:!0});var os=i(D);Te=l(os,"STRONG",{});var bs=i(Te);Qt=o(bs,"New Space"),bs.forEach(a),Xt=o(os," form"),os.forEach(a),Zt=o(I,". This will create a repository with a "),Ne=l(I,"CODE",{});var Es=i(Ne);ea=o(Es,"README.md"),Es.forEach(a),ta=o(I," that contains the following properties in the YAML configuration block:"),I.forEach(a),et=f(e),L(Q.$$.fragment,e),tt=f(e),y=l(e,"P",{});var ve=i(y);aa=o(ve,"You can edit the "),De=l(ve,"CODE",{});var ks=i(De);sa=o(ks,"sdk_version"),ks.forEach(a),oa=o(ve,", but note that issues may occur when you use an unsupported Streamlit version. Not all Streamlit versions are supported, so please refer to the "),fe=l(ve,"A",{href:!0});var $s=i(fe);ra=o($s,"reference section"),$s.forEach(a),la=o(ve," to see which versions are available."),ve.forEach(a),at=f(e),C=l(e,"P",{});var St=i(C);ia=o(St,"For in-depth information about Streamlit, refer to the "),X=l(St,"A",{href:!0,rel:!0});var js=i(X);na=o(js,"Streamlit documentation"),js.forEach(a),pa=o(St,"."),St.forEach(a),st=f(e),$=l(e,"H2",{class:!0});var _t=i($);O=l(_t,"A",{id:!0,class:!0,href:!0});var As=i(O);Ce=l(As,"SPAN",{});var Ps=i(Ce);L(Z.$$.fragment,Ps),Ps.forEach(a),As.forEach(a),ha=f(_t),Oe=l(_t,"SPAN",{});var Ts=i(Oe);ca=o(Ts,"Your First Streamlit Space: Hot Dog Classifier"),Ts.forEach(a),_t.forEach(a),ot=f(e),b=l(e,"P",{});var we=i(b);fa=o(we,"In the following sections, you\u2019ll learn the basics of creating a Space, configuring it, and deploying your code to it. We\u2019ll create a "),xe=l(we,"STRONG",{});var Ns=i(xe);da=o(Ns,"Hot Dog Classifier"),Ns.forEach(a),ua=o(we," Space with Streamlit that\u2019ll be used to demo the "),ee=l(we,"A",{href:!0,rel:!0});var Ds=i(ee);ma=o(Ds,"julien-c/hotdog-not-hotdog"),Ds.forEach(a),ga=o(we," model, which can detect whether a given picture contains a hot dog \u{1F32D}"),we.forEach(a),rt=f(e),x=l(e,"P",{});var yt=i(x);va=o(yt,"You can find a completed version of this hosted at "),te=l(yt,"A",{href:!0,rel:!0});var Cs=i(te);wa=o(Cs,"NimaBoscarino/hotdog-streamlit"),Cs.forEach(a),Sa=o(yt,"."),yt.forEach(a),lt=f(e),j=l(e,"H2",{class:!0});var bt=i(j);R=l(bt,"A",{id:!0,class:!0,href:!0});var Os=i(R);Re=l(Os,"SPAN",{});var xs=i(Re);L(ae.$$.fragment,xs),xs.forEach(a),Os.forEach(a),_a=f(bt),qe=l(bt,"SPAN",{});var Rs=i(qe);ya=o(Rs,"Create a new Streamlit Space"),Rs.forEach(a),bt.forEach(a),it=f(e),w=l(e,"P",{});var M=i(w);ba=o(M,"We\u2019ll start by "),se=l(M,"A",{href:!0,rel:!0});var qs=i(se);Ea=o(qs,"creating a brand new Space"),qs.forEach(a),ka=o(M," and choosing "),Ge=l(M,"STRONG",{});var Gs=i(Ge);$a=o(Gs,"Streamlit"),Gs.forEach(a),ja=o(M," as our SDK. Hugging Face Spaces are Git repositories, meaning that you can work on your Space incrementally (and collaboratively) by pushing commits. Take a look at the "),de=l(M,"A",{href:!0});var Hs=i(de);Aa=o(Hs,"Getting Started with Repositories"),Hs.forEach(a),Pa=o(M," guide to learn about how you can create and edit files before continuing."),M.forEach(a),nt=f(e),A=l(e,"H2",{class:!0});var Et=i(A);q=l(Et,"A",{id:!0,class:!0,href:!0});var Is=i(q);He=l(Is,"SPAN",{});var Ms=i(He);L(oe.$$.fragment,Ms),Ms.forEach(a),Is.forEach(a),Ta=f(Et),Ie=l(Et,"SPAN",{});var Ys=i(Ie);Na=o(Ys,"Add the dependencies"),Ys.forEach(a),Et.forEach(a),pt=f(e),S=l(e,"P",{});var Y=i(S);Da=o(Y,"For the "),Me=l(Y,"STRONG",{});var Fs=i(Me);Ca=o(Fs,"Hot Dog Classifier"),Fs.forEach(a),Oa=o(Y," we\u2019ll be using a "),re=l(Y,"A",{href:!0,rel:!0});var Ls=i(re);xa=o(Ls,"\u{1F917} Transformers pipeline"),Ls.forEach(a),Ra=o(Y," to use the model, so we need to start by installing a few dependencies. This can be done by creating a "),Ye=l(Y,"STRONG",{});var Bs=i(Ye);qa=o(Bs,"requirements.txt"),Bs.forEach(a),Ga=o(Y," file in our repository, and adding the following dependencies to it:"),Y.forEach(a),ht=f(e),L(le.$$.fragment,e),ct=f(e),ue=l(e,"P",{});var Ks=i(ue);Ha=o(Ks,"The Spaces runtime will handle installing the dependencies!"),Ks.forEach(a),ft=f(e),P=l(e,"H2",{class:!0});var kt=i(P);G=l(kt,"A",{id:!0,class:!0,href:!0});var zs=i(G);Fe=l(zs,"SPAN",{});var Ws=i(Fe);L(ie.$$.fragment,Ws),Ws.forEach(a),zs.forEach(a),Ia=f(kt),Le=l(kt,"SPAN",{});var Us=i(Le);Ma=o(Us,"Create the Streamlit app"),Us.forEach(a),kt.forEach(a),dt=f(e),H=l(e,"P",{});var $t=i(H);Ya=o($t,"To create the Streamlit app, make a new file in the repository called "),Be=l($t,"STRONG",{});var Js=i(Be);Fa=o(Js,"app.py"),Js.forEach(a),La=o($t,", and add the following code:"),$t.forEach(a),ut=f(e),L(ne.$$.fragment,e),mt=f(e),u=l(e,"P",{});var g=i(u);Ba=o(g,"This Python script uses a "),pe=l(g,"A",{href:!0,rel:!0});var Vs=i(pe);Ka=o(Vs,"\u{1F917} Transformers pipeline"),Vs.forEach(a),za=o(g," to load the "),he=l(g,"A",{href:!0,rel:!0});var Qs=i(he);Wa=o(Qs,"julien-c/hotdog-not-hotdog"),Qs.forEach(a),Ua=o(g," model, which is used by the Streamlit interface. The Streamlit app will expect you to upload an image, which it\u2019ll then classify as "),Ke=l(g,"EM",{});var Xs=i(Ke);Ja=o(Xs,"hot dog"),Xs.forEach(a),Va=o(g," or "),ze=l(g,"EM",{});var Zs=i(ze);Qa=o(Zs,"not hot dog"),Zs.forEach(a),Xa=o(g,". Once you\u2019ve saved the code to the "),We=l(g,"STRONG",{});var eo=i(We);Za=o(eo,"app.py"),eo.forEach(a),es=o(g," file, visit the "),Ue=l(g,"STRONG",{});var to=i(Ue);ts=o(to,"App"),to.forEach(a),as=o(g," tab to see your app in action!"),g.forEach(a),gt=f(e),T=l(e,"DIV",{class:!0});var jt=i(T);me=l(jt,"IMG",{class:!0,src:!0}),ss=f(jt),ge=l(jt,"IMG",{class:!0,src:!0}),jt.forEach(a),this.h()},h(){n(E,"name","hf:doc:metadata"),n(E,"content",JSON.stringify(ho)),n(N,"id","streamlit-spaces"),n(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(N,"href","#streamlit-spaces"),n(k,"class","relative group"),n(J,"href","https://huggingface.co/blog/streamlit-spaces"),n(J,"rel","nofollow"),n(V,"href","https://huggingface.co/new-space"),n(V,"rel","nofollow"),n(D,"href","https://huggingface.co/new-space"),n(D,"rel","nofollow"),n(fe,"href","./spaces-config-reference"),n(X,"href","https://docs.streamlit.io/"),n(X,"rel","nofollow"),n(O,"id","your-first-streamlit-space-hot-dog-classifier"),n(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(O,"href","#your-first-streamlit-space-hot-dog-classifier"),n($,"class","relative group"),n(ee,"href","https://huggingface.co/julien-c/hotdog-not-hotdog"),n(ee,"rel","nofollow"),n(te,"href","https://huggingface.co/spaces/NimaBoscarino/hotdog-streamlit"),n(te,"rel","nofollow"),n(R,"id","create-a-new-streamlit-space"),n(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(R,"href","#create-a-new-streamlit-space"),n(j,"class","relative group"),n(se,"href","https://huggingface.co/new-space"),n(se,"rel","nofollow"),n(de,"href","./repositories-getting-started"),n(q,"id","add-the-dependencies"),n(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(q,"href","#add-the-dependencies"),n(A,"class","relative group"),n(re,"href","https://huggingface.co/docs/transformers/pipeline_tutorial"),n(re,"rel","nofollow"),n(G,"id","create-the-streamlit-app"),n(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(G,"href","#create-the-streamlit-app"),n(P,"class","relative group"),n(pe,"href","https://huggingface.co/docs/transformers/pipeline_tutorial"),n(pe,"rel","nofollow"),n(he,"href","https://huggingface.co/julien-c/hotdog-not-hotdog"),n(he,"rel","nofollow"),n(me,"class","block dark:hidden"),ao(me.src,is="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/spaces-hot-dog-streamlit.png")||n(me,"src",is),n(ge,"class","hidden dark:block"),ao(ge.src,ns="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/spaces-hot-dog-streamlit-dark.png")||n(ge,"src",ns),n(T,"class","flex justify-center")},m(e,p){t(document.head,E),h(e,Ve,p),h(e,k,p),t(k,N),t(N,Se),B(U,Se,null),t(k,At),t(k,_e),t(_e,Pt),h(e,Qe,p),h(e,_,p),t(_,ye),t(ye,Tt),t(_,Nt),t(_,be),t(be,Dt),t(_,Ct),t(_,J),t(J,Ot),t(_,xt),h(e,Xe,p),h(e,d,p),t(d,Rt),t(d,Ee),t(Ee,qt),t(d,Gt),t(d,V),t(V,Ht),t(d,It),t(d,ke),t(ke,Mt),t(d,Yt),t(d,$e),t($e,Ft),t(d,Lt),t(d,je),t(je,Bt),t(d,Kt),t(d,Ae),t(Ae,zt),t(d,Wt),h(e,Ze,p),h(e,v,p),t(v,Ut),t(v,Pe),t(Pe,Jt),t(v,Vt),t(v,D),t(D,Te),t(Te,Qt),t(D,Xt),t(v,Zt),t(v,Ne),t(Ne,ea),t(v,ta),h(e,et,p),B(Q,e,p),h(e,tt,p),h(e,y,p),t(y,aa),t(y,De),t(De,sa),t(y,oa),t(y,fe),t(fe,ra),t(y,la),h(e,at,p),h(e,C,p),t(C,ia),t(C,X),t(X,na),t(C,pa),h(e,st,p),h(e,$,p),t($,O),t(O,Ce),B(Z,Ce,null),t($,ha),t($,Oe),t(Oe,ca),h(e,ot,p),h(e,b,p),t(b,fa),t(b,xe),t(xe,da),t(b,ua),t(b,ee),t(ee,ma),t(b,ga),h(e,rt,p),h(e,x,p),t(x,va),t(x,te),t(te,wa),t(x,Sa),h(e,lt,p),h(e,j,p),t(j,R),t(R,Re),B(ae,Re,null),t(j,_a),t(j,qe),t(qe,ya),h(e,it,p),h(e,w,p),t(w,ba),t(w,se),t(se,Ea),t(w,ka),t(w,Ge),t(Ge,$a),t(w,ja),t(w,de),t(de,Aa),t(w,Pa),h(e,nt,p),h(e,A,p),t(A,q),t(q,He),B(oe,He,null),t(A,Ta),t(A,Ie),t(Ie,Na),h(e,pt,p),h(e,S,p),t(S,Da),t(S,Me),t(Me,Ca),t(S,Oa),t(S,re),t(re,xa),t(S,Ra),t(S,Ye),t(Ye,qa),t(S,Ga),h(e,ht,p),B(le,e,p),h(e,ct,p),h(e,ue,p),t(ue,Ha),h(e,ft,p),h(e,P,p),t(P,G),t(G,Fe),B(ie,Fe,null),t(P,Ia),t(P,Le),t(Le,Ma),h(e,dt,p),h(e,H,p),t(H,Ya),t(H,Be),t(Be,Fa),t(H,La),h(e,ut,p),B(ne,e,p),h(e,mt,p),h(e,u,p),t(u,Ba),t(u,pe),t(pe,Ka),t(u,za),t(u,he),t(he,Wa),t(u,Ua),t(u,Ke),t(Ke,Ja),t(u,Va),t(u,ze),t(ze,Qa),t(u,Xa),t(u,We),t(We,Za),t(u,es),t(u,Ue),t(Ue,ts),t(u,as),h(e,gt,p),h(e,T,p),t(T,me),t(T,ss),t(T,ge),vt=!0},p:io,i(e){vt||(K(U.$$.fragment,e),K(Q.$$.fragment,e),K(Z.$$.fragment,e),K(ae.$$.fragment,e),K(oe.$$.fragment,e),K(le.$$.fragment,e),K(ie.$$.fragment,e),K(ne.$$.fragment,e),vt=!0)},o(e){z(U.$$.fragment,e),z(Q.$$.fragment,e),z(Z.$$.fragment,e),z(ae.$$.fragment,e),z(oe.$$.fragment,e),z(le.$$.fragment,e),z(ie.$$.fragment,e),z(ne.$$.fragment,e),vt=!1},d(e){a(E),e&&a(Ve),e&&a(k),W(U),e&&a(Qe),e&&a(_),e&&a(Xe),e&&a(d),e&&a(Ze),e&&a(v),e&&a(et),W(Q,e),e&&a(tt),e&&a(y),e&&a(at),e&&a(C),e&&a(st),e&&a($),W(Z),e&&a(ot),e&&a(b),e&&a(rt),e&&a(x),e&&a(lt),e&&a(j),W(ae),e&&a(it),e&&a(w),e&&a(nt),e&&a(A),W(oe),e&&a(pt),e&&a(S),e&&a(ht),W(le,e),e&&a(ct),e&&a(ue),e&&a(ft),e&&a(P),W(ie),e&&a(dt),e&&a(H),e&&a(ut),W(ne,e),e&&a(mt),e&&a(u),e&&a(gt),e&&a(T)}}}const ho={local:"streamlit-spaces",sections:[{local:"your-first-streamlit-space-hot-dog-classifier",title:"Your First Streamlit Space: Hot Dog Classifier"},{local:"create-a-new-streamlit-space",title:"Create a new Streamlit Space"},{local:"add-the-dependencies",title:"Add the dependencies"},{local:"create-the-streamlit-app",title:"Create the Streamlit app"}],title:"Streamlit Spaces"};function co(ls){return no(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class go extends so{constructor(E){super();oo(this,E,co,po,ro,{})}}export{go as default,ho as metadata};
