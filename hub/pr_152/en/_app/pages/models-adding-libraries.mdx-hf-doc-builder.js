import{S as mh,i as yh,s as gh,e as r,k as f,w as d,t as s,N as bh,c as a,d as o,m as p,a as l,x as c,h as i,b as u,P as _h,G as t,g as h,y as _,L as vh,q as m,o as y,B as g,v as wh}from"../chunks/vendor-hf-doc-builder.js";import{I as ge}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as b}from"../chunks/CodeBlock-hf-doc-builder.js";function Eh(Pi){let q,zo,S,G,Mt,be,da,Nt,ca,Yo,v,_a,ve,ma,ya,we,ga,ba,Ee,va,wa,Go,pt,Ea,Jo,w,Ut,$a,ka,$e,Aa,ke,Pa,ja,Ia,Ae,Ha,Pe,Da,La,xa,Bt,Oa,Ko,ut,Ca,Qo,J,Ta,je,qa,Sa,Vo,K,Fa,Ie,Ma,Na,Xo,F,Q,Wt,He,Ua,Rt,Ba,Zo,I,De,Le,Wa,zt,Ra,za,Ya,xe,Ga,M,Oe,Ja,Yt,Ka,Qa,Va,Ce,Xa,Te,Za,N,qe,el,Gt,tl,ol,rl,Se,al,dt,Jt,ll,sl,er,U,V,Kt,Fe,il,Qt,nl,tr,ct,hl,or,E,fl,Vt,pl,ul,Xt,dl,cl,Zt,_l,ml,rr,H,yl,eo,gl,bl,Me,vl,wl,ar,Ne,lr,D,El,to,$l,kl,oo,Al,Pl,sr,_t,jl,ir,Ue,nr,X,Il,ro,Hl,Dl,hr,Be,fr,B,Z,ao,We,Ll,lo,xl,pr,mt,Ol,ur,yt,gt,ji,dr,L,Cl,Re,Tl,ql,ze,Sl,Fl,cr,Ye,_r,bt,Ml,mr,vt,wt,Ii,yr,W,ee,so,Ge,Nl,io,Ul,gr,te,Bl,no,Wl,Rl,br,oe,Et,ho,zl,Yl,Gl,$t,fo,Jl,Kl,vr,R,re,po,Je,Ql,uo,co,Vl,wr,x,Xl,_o,Zl,es,mo,ts,os,Er,Ke,$r,ae,rs,yo,as,ls,kr,z,le,go,Qe,ss,bo,vo,is,Ar,se,ns,wo,hs,fs,Pr,O,Eo,ps,us,$o,ds,cs,ko,_s,jr,kt,ms,Ir,Ve,Hr,C,ys,Ao,gs,bs,At,vs,ws,Dr,Pt,Es,Lr,ie,$s,jt,ks,As,xr,Y,ne,Po,Xe,Ps,jo,js,Or,It,Is,Cr,he,Hs,Ze,Ds,Ls,Tr,T,Io,k,xs,Ho,Os,Cs,Do,Ts,qs,Lo,Ss,Fs,Ms,et,xo,Ns,Us,A,Oo,tt,Bs,Co,Ws,Rs,zs,ot,P,Ys,To,Gs,Js,rt,Ks,Qs,qo,Vs,Xs,Zs,at,ei,So,j,ti,Fo,oi,ri,Mo,ai,li,lt,si,ii,ni,st,it,hi,No,fi,pi,ui,nt,di,ht,Uo,ci,_i,ft,qr,$,mi,Bo,yi,gi,Wo,bi,vi,Ro,wi,Ei,Sr;return be=new ge({}),He=new ge({}),xe=new b({props:{code:"python -m pip install huggingface_hub",highlighted:"python -m pip install huggingface_hub"}}),Ce=new b({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Te=new b({props:{code:`     _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|
     _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|
     _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|
     _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|
     _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|

     
Username: 
Password:`,highlighted:`     _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|
     _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|
     _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|
     _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|
     _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|

     
Username: 
Password:`}}),Se=new b({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),Fe=new ge({}),Ne=new b({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)`}}),Ue=new b({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>)`}}),Be=new b({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", cache_dir="/home/lysandre/test")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, cache_dir=<span class="hljs-string">&quot;/home/lysandre/test&quot;</span>)`}}),We=new ge({}),Ye=new b({props:{code:'const asteroid = (model: ModelData) =>\n`from asteroid.models import BaseModel\n  \nmodel = BaseModel.from_pretrained("${model.id}")`;',highlighted:'<span class="hljs-keyword">const</span> <span class="hljs-title function_">asteroid</span> = (<span class="hljs-params">model: ModelData</span>) =&gt;\n<span class="hljs-string">`from asteroid.models import BaseModel\n  \nmodel = BaseModel.from_pretrained(&quot;<span class="hljs-subst">${model.id}</span>&quot;)`</span>;'}}),Ge=new ge({}),Je=new ge({}),Ke=new b({props:{code:`from huggingface_hub import create_repo
create_repo(repo_id="test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(repo_id=<span class="hljs-string">&quot;test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),Qe=new ge({}),Ve=new b({props:{code:`from huggingface_hub import upload_file
upload_file(
   path_or_fileobj="/home/lysandre/dummy-test/README.md", 
   path_in_repo="README.md", 
   repo_id="lysandre/test-model"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> upload_file
<span class="hljs-meta">&gt;&gt;&gt; </span>upload_file(
<span class="hljs-meta">... </span>   path_or_fileobj=<span class="hljs-string">&quot;/home/lysandre/dummy-test/README.md&quot;</span>, 
<span class="hljs-meta">... </span>   path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>   repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model/blob/main/README.md&#x27;</span>`}}),Xe=new ge({}),at=new b({props:{code:`ALLOWED_TASKS: Dict[str, Type[Pipeline]] = {
    "token-classification": TokenClassificationPipeline
}`,highlighted:`ALLOWED_TASKS: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Type</span>[Pipeline]] = {
    <span class="hljs-string">&quot;token-classification&quot;</span>: TokenClassificationPipeline
}`}}),nt=new b({props:{code:`TESTABLE_MODELS: Dict[str,str] = {
    "text-generation": "my-gpt2-model"
}`,highlighted:`TESTABLE_MODELS: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>,<span class="hljs-built_in">str</span>] = {
    <span class="hljs-string">&quot;text-generation&quot;</span>: <span class="hljs-string">&quot;my-gpt2-model&quot;</span>
}`}}),ft=new b({props:{code:"pytest -sv --rootdir docker_images/your-awesome-library/docker_images/your-awesome-library/",highlighted:"pytest -sv --rootdir docker_images/your-awesome-library/docker_images/your-awesome-library/"}}),{c(){q=r("meta"),zo=f(),S=r("h1"),G=r("a"),Mt=r("span"),d(be.$$.fragment),da=f(),Nt=r("span"),ca=s("Integrate your library with the Hub"),Yo=f(),v=r("p"),_a=s("The Hugging Face Hub aims to facilitate sharing machine learning models, checkpoints, and artifacts. This endeavor includes integrating the Hub into many of the amazing third-party libraries in the community. Some of the ones already integrated include "),ve=r("a"),ma=s("spaCy"),ya=s(", "),we=r("a"),ga=s("AllenNLP"),ba=s(", and "),Ee=r("a"),va=s("timm"),wa=s(", among many others. Integration means users can download and upload files to the Hub directly from your library. We hope you will integrate your library and join us in democratizing artificial intelligence for everyone!"),Go=f(),pt=r("p"),Ea=s("Integrating the Hub with your library provides many benefits, including:"),Jo=f(),w=r("ul"),Ut=r("li"),$a=s("Free model hosting for you and your users."),ka=f(),$e=r("li"),Aa=s("Built-in file versioning - even for huge files - made possible by "),ke=r("a"),Pa=s("Git-LFS"),ja=s("."),Ia=f(),Ae=r("li"),Ha=s("All public models are powered by the "),Pe=r("a"),Da=s("Inference API"),La=s("."),xa=f(),Bt=r("li"),Oa=s("In-browser widgets allow users to interact with your hosted models directly."),Ko=f(),ut=r("p"),Ca=s("This tutorial will help you integrate the Hub into your library so your users can benefit from all the features offered by the Hub."),Qo=f(),J=r("p"),Ta=s("Before you begin, we recommend you create a "),je=r("a"),qa=s("Hugging Face account"),Sa=s(" from which you can manage your repositories and files."),Vo=f(),K=r("p"),Fa=s("If you need help with the integration, feel free to open an "),Ie=r("a"),Ma=s("issue"),Na=s(", and we would be more than happy to help you!"),Xo=f(),F=r("h2"),Q=r("a"),Wt=r("span"),d(He.$$.fragment),Ua=f(),Rt=r("span"),Ba=s("Installation"),Zo=f(),I=r("ol"),De=r("li"),Le=r("p"),Wa=s("Install the "),zt=r("code"),Ra=s("huggingface_hub"),za=s(" library with pip in your environment:"),Ya=f(),d(xe.$$.fragment),Ga=f(),M=r("li"),Oe=r("p"),Ja=s("Once you have successfully installed the "),Yt=r("code"),Ka=s("huggingface_hub"),Qa=s(" library, log in to your Hugging Face account:"),Va=f(),d(Ce.$$.fragment),Xa=f(),d(Te.$$.fragment),Za=f(),N=r("li"),qe=r("p"),el=s("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Gt=r("code"),tl=s("notebook_login"),ol=s(":"),rl=f(),d(Se.$$.fragment),al=f(),dt=r("p"),Jt=r("code"),ll=s("notebook_login"),sl=s(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),er=f(),U=r("h2"),V=r("a"),Kt=r("span"),d(Fe.$$.fragment),il=f(),Qt=r("span"),nl=s("Download files from the Hub"),tr=f(),ct=r("p"),hl=s("Integration allows users to download your hosted files directly from the Hub using your library."),or=f(),E=r("p"),fl=s("Use the "),Vt=r("code"),pl=s("hf_hub_download"),ul=s(" function to retrieve a URL and download files from your repository. Downloaded files are stored in your cache: "),Xt=r("code"),dl=s("~/.cache/huggingface/hub"),cl=s(". You don\u2019t have to re-download the file the next time you use it, and for larger files, this can save a lot of time. Furthermore, if the repository is updated with a new version of the file, "),Zt=r("code"),_l=s("huggingface_hub"),ml=s(" will automatically download the latest version and store it in the cache for you. Users don\u2019t have to worry about updating their files."),rr=f(),H=r("p"),yl=s("For example, download the "),eo=r("code"),gl=s("config.json"),bl=s(" file from the "),Me=r("a"),vl=s("lysandre/arxiv-nlp"),wl=s(" repository:"),ar=f(),d(Ne.$$.fragment),lr=f(),D=r("p"),El=s("Download a specific version of the file by specifying the "),to=r("code"),$l=s("revision"),kl=s(" parameter. The "),oo=r("code"),Al=s("revision"),Pl=s(" parameter can be a branch name, tag, or commit hash."),sr=f(),_t=r("p"),jl=s("The commit hash must be a full-length hash instead of the shorter 7-character commit hash:"),ir=f(),d(Ue.$$.fragment),nr=f(),X=r("p"),Il=s("Use the "),ro=r("code"),Hl=s("cache_dir"),Dl=s(" parameter to change where a file is stored:"),hr=f(),d(Be.$$.fragment),fr=f(),B=r("h3"),Z=r("a"),ao=r("span"),d(We.$$.fragment),Ll=f(),lo=r("span"),xl=s("Code sample"),pr=f(),mt=r("p"),Ol=s("We recommend adding a code snippet to explain how to use a model in your downstream library."),ur=f(),yt=r("p"),gt=r("img"),dr=f(),L=r("p"),Cl=s("Add a code snippet by updating the "),Re=r("a"),Tl=s("Libraries Typescript file"),ql=s(" with instructions for your model. For example, the "),ze=r("a"),Sl=s("Asteroid"),Fl=s(" integration includes a brief code snippet for how to load and use an Asteroid model:"),cr=f(),d(Ye.$$.fragment),_r=f(),bt=r("p"),Ml=s("Doing so will also add a tag to your model so users can quickly identify models from your library."),mr=f(),vt=r("p"),wt=r("img"),yr=f(),W=r("h2"),ee=r("a"),so=r("span"),d(Ge.$$.fragment),Nl=f(),io=r("span"),Ul=s("Upload files to the Hub"),gr=f(),te=r("p"),Bl=s("You might also want to provide a method for creating model repositories and uploading files to the Hub directly from your library. The "),no=r("code"),Wl=s("huggingface_hub"),Rl=s(" library offers two ways to assist you with creating repositories and uploading files:"),br=f(),oe=r("ul"),Et=r("li"),ho=r("code"),zl=s("create_repo"),Yl=s(" creates a repository on the Hub."),Gl=f(),$t=r("li"),fo=r("code"),Jl=s("upload_file"),Kl=s(" directly uploads files to a repository on the Hub."),vr=f(),R=r("h3"),re=r("a"),po=r("span"),d(Je.$$.fragment),Ql=f(),uo=r("span"),co=r("code"),Vl=s("create_repo"),wr=f(),x=r("p"),Xl=s("The "),_o=r("code"),Zl=s("create_repo"),es=s(" method creates a repository on the Hub. Use the "),mo=r("code"),ts=s("name"),os=s(" parameter to provide a name for your repository:"),Er=f(),d(Ke.$$.fragment),$r=f(),ae=r("p"),rs=s("When you check your Hugging Face account, you should now see a "),yo=r("code"),as=s("test-model"),ls=s(" repository under your namespace."),kr=f(),z=r("h3"),le=r("a"),go=r("span"),d(Qe.$$.fragment),ss=f(),bo=r("span"),vo=r("code"),is=s("upload_file"),Ar=f(),se=r("p"),ns=s("The "),wo=r("code"),hs=s("upload_file"),fs=s(" method uploads files to the Hub. This method requires the following:"),Pr=f(),O=r("ul"),Eo=r("li"),ps=s("A path to the file to upload."),us=f(),$o=r("li"),ds=s("The final path in the repository."),cs=f(),ko=r("li"),_s=s("The repository you wish to push the files to."),jr=f(),kt=r("p"),ms=s("For example:"),Ir=f(),d(Ve.$$.fragment),Hr=f(),C=r("p"),ys=s("If you need to upload more than one file, look at the utilities offered by the "),Ao=r("code"),gs=s("Repository"),bs=s(" class "),At=r("a"),vs=s("here"),ws=s("."),Dr=f(),Pt=r("p"),Es=s("Once again, if you check your Hugging Face account, you should see the file inside your repository."),Lr=f(),ie=r("p"),$s=s("Lastly, it is important to add a model card so users understand how to use your model. See "),jt=r("a"),ks=s("here"),As=s(" for more details about how to create a model card."),xr=f(),Y=r("h2"),ne=r("a"),Po=r("span"),d(Xe.$$.fragment),Ps=f(),jo=r("span"),js=s("Set up the Inference API"),Or=f(),It=r("p"),Is=s("Our Inference API powers models uploaded to the Hub through your library."),Cr=f(),he=r("p"),Hs=s("All third-party libraries are Dockerized, so you can install the dependencies you\u2019ll need for your library to work correctly. Add your library to the existing Docker images by navigating to the "),Ze=r("a"),Ds=s("Docker images folder"),Ls=s("."),Tr=f(),T=r("ol"),Io=r("li"),k=r("p"),xs=s("Copy the "),Ho=r("code"),Os=s("common"),Cs=s(" folder and rename it with the name of your library (e.g. "),Do=r("code"),Ts=s("docker/common"),qs=s(" to "),Lo=r("code"),Ss=s("docker/your-awesome-library"),Fs=s(")."),Ms=f(),et=r("li"),xo=r("p"),Ns=s("There are four files you need to edit:"),Us=f(),A=r("ul"),Oo=r("li"),tt=r("p"),Bs=s("List the packages required for your library to work in "),Co=r("code"),Ws=s("requirements.txt"),Rs=s("."),zs=f(),ot=r("li"),P=r("p"),Ys=s("Update "),To=r("code"),Gs=s("app/main.py"),Js=s(" with the tasks supported by your model (see "),rt=r("a"),Ks=s("here"),Qs=s(" for a complete list of available tasks). Look out for the "),qo=r("code"),Vs=s("IMPLEMENT_THIS"),Xs=s(" flag to add your supported task."),Zs=f(),d(at.$$.fragment),ei=f(),So=r("li"),j=r("p"),ti=s("For each task your library supports, modify the "),Fo=r("code"),oi=s("app/pipelines/task_name.py"),ri=s(" files accordingly. We have also added an "),Mo=r("code"),ai=s("IMPLEMENT_THIS"),li=s(" flag in the pipeline files to guide you. If there isn\u2019t a pipeline that supports your task, feel free to add one. Open an "),lt=r("a"),si=s("issue"),ii=s(" here, and we will be happy to help you."),ni=f(),st=r("li"),it=r("p"),hi=s("Add your model and task to the "),No=r("code"),fi=s("tests/test_api.py"),pi=s(" file. For example, if you have a text generation model:"),ui=f(),d(nt.$$.fragment),di=f(),ht=r("li"),Uo=r("p"),ci=s("Finally, run the following test to ensure everything works as expected:"),_i=f(),d(ft.$$.fragment),qr=f(),$=r("p"),mi=s("With these simple but powerful methods, you brought the full functionality of the Hub into your library. Users can download files stored on the Hub from your library with "),Bo=r("code"),yi=s("hf_hub_download"),gi=s(", create repositories with "),Wo=r("code"),bi=s("create_repo"),vi=s(", and upload files with "),Ro=r("code"),wi=s("upload_file"),Ei=s(". You also set up Inference API with your library, allowing users to interact with your models on the Hub from inside a browser."),this.h()},l(e){const n=bh('[data-svelte="svelte-1phssyn"]',document.head);q=a(n,"META",{name:!0,content:!0}),n.forEach(o),zo=p(e),S=a(e,"H1",{class:!0});var Fr=l(S);G=a(Fr,"A",{id:!0,class:!0,href:!0});var Hi=l(G);Mt=a(Hi,"SPAN",{});var Di=l(Mt);c(be.$$.fragment,Di),Di.forEach(o),Hi.forEach(o),da=p(Fr),Nt=a(Fr,"SPAN",{});var Li=l(Nt);ca=i(Li,"Integrate your library with the Hub"),Li.forEach(o),Fr.forEach(o),Yo=p(e),v=a(e,"P",{});var fe=l(v);_a=i(fe,"The Hugging Face Hub aims to facilitate sharing machine learning models, checkpoints, and artifacts. This endeavor includes integrating the Hub into many of the amazing third-party libraries in the community. Some of the ones already integrated include "),ve=a(fe,"A",{href:!0,rel:!0});var xi=l(ve);ma=i(xi,"spaCy"),xi.forEach(o),ya=i(fe,", "),we=a(fe,"A",{href:!0,rel:!0});var Oi=l(we);ga=i(Oi,"AllenNLP"),Oi.forEach(o),ba=i(fe,", and "),Ee=a(fe,"A",{href:!0,rel:!0});var Ci=l(Ee);va=i(Ci,"timm"),Ci.forEach(o),wa=i(fe,", among many others. Integration means users can download and upload files to the Hub directly from your library. We hope you will integrate your library and join us in democratizing artificial intelligence for everyone!"),fe.forEach(o),Go=p(e),pt=a(e,"P",{});var Ti=l(pt);Ea=i(Ti,"Integrating the Hub with your library provides many benefits, including:"),Ti.forEach(o),Jo=p(e),w=a(e,"UL",{});var pe=l(w);Ut=a(pe,"LI",{});var qi=l(Ut);$a=i(qi,"Free model hosting for you and your users."),qi.forEach(o),ka=p(pe),$e=a(pe,"LI",{});var Mr=l($e);Aa=i(Mr,"Built-in file versioning - even for huge files - made possible by "),ke=a(Mr,"A",{href:!0,rel:!0});var Si=l(ke);Pa=i(Si,"Git-LFS"),Si.forEach(o),ja=i(Mr,"."),Mr.forEach(o),Ia=p(pe),Ae=a(pe,"LI",{});var Nr=l(Ae);Ha=i(Nr,"All public models are powered by the "),Pe=a(Nr,"A",{href:!0,rel:!0});var Fi=l(Pe);Da=i(Fi,"Inference API"),Fi.forEach(o),La=i(Nr,"."),Nr.forEach(o),xa=p(pe),Bt=a(pe,"LI",{});var Mi=l(Bt);Oa=i(Mi,"In-browser widgets allow users to interact with your hosted models directly."),Mi.forEach(o),pe.forEach(o),Ko=p(e),ut=a(e,"P",{});var Ni=l(ut);Ca=i(Ni,"This tutorial will help you integrate the Hub into your library so your users can benefit from all the features offered by the Hub."),Ni.forEach(o),Qo=p(e),J=a(e,"P",{});var Ur=l(J);Ta=i(Ur,"Before you begin, we recommend you create a "),je=a(Ur,"A",{href:!0,rel:!0});var Ui=l(je);qa=i(Ui,"Hugging Face account"),Ui.forEach(o),Sa=i(Ur," from which you can manage your repositories and files."),Ur.forEach(o),Vo=p(e),K=a(e,"P",{});var Br=l(K);Fa=i(Br,"If you need help with the integration, feel free to open an "),Ie=a(Br,"A",{href:!0,rel:!0});var Bi=l(Ie);Ma=i(Bi,"issue"),Bi.forEach(o),Na=i(Br,", and we would be more than happy to help you!"),Br.forEach(o),Xo=p(e),F=a(e,"H2",{class:!0});var Wr=l(F);Q=a(Wr,"A",{id:!0,class:!0,href:!0});var Wi=l(Q);Wt=a(Wi,"SPAN",{});var Ri=l(Wt);c(He.$$.fragment,Ri),Ri.forEach(o),Wi.forEach(o),Ua=p(Wr),Rt=a(Wr,"SPAN",{});var zi=l(Rt);Ba=i(zi,"Installation"),zi.forEach(o),Wr.forEach(o),Zo=p(e),I=a(e,"OL",{});var Ht=l(I);De=a(Ht,"LI",{});var Rr=l(De);Le=a(Rr,"P",{});var zr=l(Le);Wa=i(zr,"Install the "),zt=a(zr,"CODE",{});var Yi=l(zt);Ra=i(Yi,"huggingface_hub"),Yi.forEach(o),za=i(zr," library with pip in your environment:"),zr.forEach(o),Ya=p(Rr),c(xe.$$.fragment,Rr),Rr.forEach(o),Ga=p(Ht),M=a(Ht,"LI",{});var Dt=l(M);Oe=a(Dt,"P",{});var Yr=l(Oe);Ja=i(Yr,"Once you have successfully installed the "),Yt=a(Yr,"CODE",{});var Gi=l(Yt);Ka=i(Gi,"huggingface_hub"),Gi.forEach(o),Qa=i(Yr," library, log in to your Hugging Face account:"),Yr.forEach(o),Va=p(Dt),c(Ce.$$.fragment,Dt),Xa=p(Dt),c(Te.$$.fragment,Dt),Dt.forEach(o),Za=p(Ht),N=a(Ht,"LI",{});var Lt=l(N);qe=a(Lt,"P",{});var Gr=l(qe);el=i(Gr,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Gt=a(Gr,"CODE",{});var Ji=l(Gt);tl=i(Ji,"notebook_login"),Ji.forEach(o),ol=i(Gr,":"),Gr.forEach(o),rl=p(Lt),c(Se.$$.fragment,Lt),al=p(Lt),dt=a(Lt,"P",{});var $i=l(dt);Jt=a($i,"CODE",{});var Ki=l(Jt);ll=i(Ki,"notebook_login"),Ki.forEach(o),sl=i($i," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),$i.forEach(o),Lt.forEach(o),Ht.forEach(o),er=p(e),U=a(e,"H2",{class:!0});var Jr=l(U);V=a(Jr,"A",{id:!0,class:!0,href:!0});var Qi=l(V);Kt=a(Qi,"SPAN",{});var Vi=l(Kt);c(Fe.$$.fragment,Vi),Vi.forEach(o),Qi.forEach(o),il=p(Jr),Qt=a(Jr,"SPAN",{});var Xi=l(Qt);nl=i(Xi,"Download files from the Hub"),Xi.forEach(o),Jr.forEach(o),tr=p(e),ct=a(e,"P",{});var Zi=l(ct);hl=i(Zi,"Integration allows users to download your hosted files directly from the Hub using your library."),Zi.forEach(o),or=p(e),E=a(e,"P",{});var ue=l(E);fl=i(ue,"Use the "),Vt=a(ue,"CODE",{});var en=l(Vt);pl=i(en,"hf_hub_download"),en.forEach(o),ul=i(ue," function to retrieve a URL and download files from your repository. Downloaded files are stored in your cache: "),Xt=a(ue,"CODE",{});var tn=l(Xt);dl=i(tn,"~/.cache/huggingface/hub"),tn.forEach(o),cl=i(ue,". You don\u2019t have to re-download the file the next time you use it, and for larger files, this can save a lot of time. Furthermore, if the repository is updated with a new version of the file, "),Zt=a(ue,"CODE",{});var on=l(Zt);_l=i(on,"huggingface_hub"),on.forEach(o),ml=i(ue," will automatically download the latest version and store it in the cache for you. Users don\u2019t have to worry about updating their files."),ue.forEach(o),rr=p(e),H=a(e,"P",{});var xt=l(H);yl=i(xt,"For example, download the "),eo=a(xt,"CODE",{});var rn=l(eo);gl=i(rn,"config.json"),rn.forEach(o),bl=i(xt," file from the "),Me=a(xt,"A",{href:!0,rel:!0});var an=l(Me);vl=i(an,"lysandre/arxiv-nlp"),an.forEach(o),wl=i(xt," repository:"),xt.forEach(o),ar=p(e),c(Ne.$$.fragment,e),lr=p(e),D=a(e,"P",{});var Ot=l(D);El=i(Ot,"Download a specific version of the file by specifying the "),to=a(Ot,"CODE",{});var ln=l(to);$l=i(ln,"revision"),ln.forEach(o),kl=i(Ot," parameter. The "),oo=a(Ot,"CODE",{});var sn=l(oo);Al=i(sn,"revision"),sn.forEach(o),Pl=i(Ot," parameter can be a branch name, tag, or commit hash."),Ot.forEach(o),sr=p(e),_t=a(e,"P",{});var nn=l(_t);jl=i(nn,"The commit hash must be a full-length hash instead of the shorter 7-character commit hash:"),nn.forEach(o),ir=p(e),c(Ue.$$.fragment,e),nr=p(e),X=a(e,"P",{});var Kr=l(X);Il=i(Kr,"Use the "),ro=a(Kr,"CODE",{});var hn=l(ro);Hl=i(hn,"cache_dir"),hn.forEach(o),Dl=i(Kr," parameter to change where a file is stored:"),Kr.forEach(o),hr=p(e),c(Be.$$.fragment,e),fr=p(e),B=a(e,"H3",{class:!0});var Qr=l(B);Z=a(Qr,"A",{id:!0,class:!0,href:!0});var fn=l(Z);ao=a(fn,"SPAN",{});var pn=l(ao);c(We.$$.fragment,pn),pn.forEach(o),fn.forEach(o),Ll=p(Qr),lo=a(Qr,"SPAN",{});var un=l(lo);xl=i(un,"Code sample"),un.forEach(o),Qr.forEach(o),pr=p(e),mt=a(e,"P",{});var dn=l(mt);Ol=i(dn,"We recommend adding a code snippet to explain how to use a model in your downstream library."),dn.forEach(o),ur=p(e),yt=a(e,"P",{});var cn=l(yt);gt=a(cn,"IMG",{src:!0,alt:!0}),cn.forEach(o),dr=p(e),L=a(e,"P",{});var Ct=l(L);Cl=i(Ct,"Add a code snippet by updating the "),Re=a(Ct,"A",{href:!0,rel:!0});var _n=l(Re);Tl=i(_n,"Libraries Typescript file"),_n.forEach(o),ql=i(Ct," with instructions for your model. For example, the "),ze=a(Ct,"A",{href:!0,rel:!0});var mn=l(ze);Sl=i(mn,"Asteroid"),mn.forEach(o),Fl=i(Ct," integration includes a brief code snippet for how to load and use an Asteroid model:"),Ct.forEach(o),cr=p(e),c(Ye.$$.fragment,e),_r=p(e),bt=a(e,"P",{});var yn=l(bt);Ml=i(yn,"Doing so will also add a tag to your model so users can quickly identify models from your library."),yn.forEach(o),mr=p(e),vt=a(e,"P",{});var gn=l(vt);wt=a(gn,"IMG",{src:!0,alt:!0}),gn.forEach(o),yr=p(e),W=a(e,"H2",{class:!0});var Vr=l(W);ee=a(Vr,"A",{id:!0,class:!0,href:!0});var bn=l(ee);so=a(bn,"SPAN",{});var vn=l(so);c(Ge.$$.fragment,vn),vn.forEach(o),bn.forEach(o),Nl=p(Vr),io=a(Vr,"SPAN",{});var wn=l(io);Ul=i(wn,"Upload files to the Hub"),wn.forEach(o),Vr.forEach(o),gr=p(e),te=a(e,"P",{});var Xr=l(te);Bl=i(Xr,"You might also want to provide a method for creating model repositories and uploading files to the Hub directly from your library. The "),no=a(Xr,"CODE",{});var En=l(no);Wl=i(En,"huggingface_hub"),En.forEach(o),Rl=i(Xr," library offers two ways to assist you with creating repositories and uploading files:"),Xr.forEach(o),br=p(e),oe=a(e,"UL",{});var Zr=l(oe);Et=a(Zr,"LI",{});var ki=l(Et);ho=a(ki,"CODE",{});var $n=l(ho);zl=i($n,"create_repo"),$n.forEach(o),Yl=i(ki," creates a repository on the Hub."),ki.forEach(o),Gl=p(Zr),$t=a(Zr,"LI",{});var Ai=l($t);fo=a(Ai,"CODE",{});var kn=l(fo);Jl=i(kn,"upload_file"),kn.forEach(o),Kl=i(Ai," directly uploads files to a repository on the Hub."),Ai.forEach(o),Zr.forEach(o),vr=p(e),R=a(e,"H3",{class:!0});var ea=l(R);re=a(ea,"A",{id:!0,class:!0,href:!0});var An=l(re);po=a(An,"SPAN",{});var Pn=l(po);c(Je.$$.fragment,Pn),Pn.forEach(o),An.forEach(o),Ql=p(ea),uo=a(ea,"SPAN",{});var jn=l(uo);co=a(jn,"CODE",{});var In=l(co);Vl=i(In,"create_repo"),In.forEach(o),jn.forEach(o),ea.forEach(o),wr=p(e),x=a(e,"P",{});var Tt=l(x);Xl=i(Tt,"The "),_o=a(Tt,"CODE",{});var Hn=l(_o);Zl=i(Hn,"create_repo"),Hn.forEach(o),es=i(Tt," method creates a repository on the Hub. Use the "),mo=a(Tt,"CODE",{});var Dn=l(mo);ts=i(Dn,"name"),Dn.forEach(o),os=i(Tt," parameter to provide a name for your repository:"),Tt.forEach(o),Er=p(e),c(Ke.$$.fragment,e),$r=p(e),ae=a(e,"P",{});var ta=l(ae);rs=i(ta,"When you check your Hugging Face account, you should now see a "),yo=a(ta,"CODE",{});var Ln=l(yo);as=i(Ln,"test-model"),Ln.forEach(o),ls=i(ta," repository under your namespace."),ta.forEach(o),kr=p(e),z=a(e,"H3",{class:!0});var oa=l(z);le=a(oa,"A",{id:!0,class:!0,href:!0});var xn=l(le);go=a(xn,"SPAN",{});var On=l(go);c(Qe.$$.fragment,On),On.forEach(o),xn.forEach(o),ss=p(oa),bo=a(oa,"SPAN",{});var Cn=l(bo);vo=a(Cn,"CODE",{});var Tn=l(vo);is=i(Tn,"upload_file"),Tn.forEach(o),Cn.forEach(o),oa.forEach(o),Ar=p(e),se=a(e,"P",{});var ra=l(se);ns=i(ra,"The "),wo=a(ra,"CODE",{});var qn=l(wo);hs=i(qn,"upload_file"),qn.forEach(o),fs=i(ra," method uploads files to the Hub. This method requires the following:"),ra.forEach(o),Pr=p(e),O=a(e,"UL",{});var qt=l(O);Eo=a(qt,"LI",{});var Sn=l(Eo);ps=i(Sn,"A path to the file to upload."),Sn.forEach(o),us=p(qt),$o=a(qt,"LI",{});var Fn=l($o);ds=i(Fn,"The final path in the repository."),Fn.forEach(o),cs=p(qt),ko=a(qt,"LI",{});var Mn=l(ko);_s=i(Mn,"The repository you wish to push the files to."),Mn.forEach(o),qt.forEach(o),jr=p(e),kt=a(e,"P",{});var Nn=l(kt);ms=i(Nn,"For example:"),Nn.forEach(o),Ir=p(e),c(Ve.$$.fragment,e),Hr=p(e),C=a(e,"P",{});var St=l(C);ys=i(St,"If you need to upload more than one file, look at the utilities offered by the "),Ao=a(St,"CODE",{});var Un=l(Ao);gs=i(Un,"Repository"),Un.forEach(o),bs=i(St," class "),At=a(St,"A",{href:!0});var Bn=l(At);vs=i(Bn,"here"),Bn.forEach(o),ws=i(St,"."),St.forEach(o),Dr=p(e),Pt=a(e,"P",{});var Wn=l(Pt);Es=i(Wn,"Once again, if you check your Hugging Face account, you should see the file inside your repository."),Wn.forEach(o),Lr=p(e),ie=a(e,"P",{});var aa=l(ie);$s=i(aa,"Lastly, it is important to add a model card so users understand how to use your model. See "),jt=a(aa,"A",{href:!0});var Rn=l(jt);ks=i(Rn,"here"),Rn.forEach(o),As=i(aa," for more details about how to create a model card."),aa.forEach(o),xr=p(e),Y=a(e,"H2",{class:!0});var la=l(Y);ne=a(la,"A",{id:!0,class:!0,href:!0});var zn=l(ne);Po=a(zn,"SPAN",{});var Yn=l(Po);c(Xe.$$.fragment,Yn),Yn.forEach(o),zn.forEach(o),Ps=p(la),jo=a(la,"SPAN",{});var Gn=l(jo);js=i(Gn,"Set up the Inference API"),Gn.forEach(o),la.forEach(o),Or=p(e),It=a(e,"P",{});var Jn=l(It);Is=i(Jn,"Our Inference API powers models uploaded to the Hub through your library."),Jn.forEach(o),Cr=p(e),he=a(e,"P",{});var sa=l(he);Hs=i(sa,"All third-party libraries are Dockerized, so you can install the dependencies you\u2019ll need for your library to work correctly. Add your library to the existing Docker images by navigating to the "),Ze=a(sa,"A",{href:!0,rel:!0});var Kn=l(Ze);Ds=i(Kn,"Docker images folder"),Kn.forEach(o),Ls=i(sa,"."),sa.forEach(o),Tr=p(e),T=a(e,"OL",{});var Ft=l(T);Io=a(Ft,"LI",{});var Qn=l(Io);k=a(Qn,"P",{});var de=l(k);xs=i(de,"Copy the "),Ho=a(de,"CODE",{});var Vn=l(Ho);Os=i(Vn,"common"),Vn.forEach(o),Cs=i(de," folder and rename it with the name of your library (e.g. "),Do=a(de,"CODE",{});var Xn=l(Do);Ts=i(Xn,"docker/common"),Xn.forEach(o),qs=i(de," to "),Lo=a(de,"CODE",{});var Zn=l(Lo);Ss=i(Zn,"docker/your-awesome-library"),Zn.forEach(o),Fs=i(de,")."),de.forEach(o),Qn.forEach(o),Ms=p(Ft),et=a(Ft,"LI",{});var ia=l(et);xo=a(ia,"P",{});var eh=l(xo);Ns=i(eh,"There are four files you need to edit:"),eh.forEach(o),Us=p(ia),A=a(ia,"UL",{});var ce=l(A);Oo=a(ce,"LI",{});var th=l(Oo);tt=a(th,"P",{});var na=l(tt);Bs=i(na,"List the packages required for your library to work in "),Co=a(na,"CODE",{});var oh=l(Co);Ws=i(oh,"requirements.txt"),oh.forEach(o),Rs=i(na,"."),na.forEach(o),th.forEach(o),zs=p(ce),ot=a(ce,"LI",{});var ha=l(ot);P=a(ha,"P",{});var _e=l(P);Ys=i(_e,"Update "),To=a(_e,"CODE",{});var rh=l(To);Gs=i(rh,"app/main.py"),rh.forEach(o),Js=i(_e," with the tasks supported by your model (see "),rt=a(_e,"A",{href:!0,rel:!0});var ah=l(rt);Ks=i(ah,"here"),ah.forEach(o),Qs=i(_e," for a complete list of available tasks). Look out for the "),qo=a(_e,"CODE",{});var lh=l(qo);Vs=i(lh,"IMPLEMENT_THIS"),lh.forEach(o),Xs=i(_e," flag to add your supported task."),_e.forEach(o),Zs=p(ha),c(at.$$.fragment,ha),ha.forEach(o),ei=p(ce),So=a(ce,"LI",{});var sh=l(So);j=a(sh,"P",{});var me=l(j);ti=i(me,"For each task your library supports, modify the "),Fo=a(me,"CODE",{});var ih=l(Fo);oi=i(ih,"app/pipelines/task_name.py"),ih.forEach(o),ri=i(me," files accordingly. We have also added an "),Mo=a(me,"CODE",{});var nh=l(Mo);ai=i(nh,"IMPLEMENT_THIS"),nh.forEach(o),li=i(me," flag in the pipeline files to guide you. If there isn\u2019t a pipeline that supports your task, feel free to add one. Open an "),lt=a(me,"A",{href:!0,rel:!0});var hh=l(lt);si=i(hh,"issue"),hh.forEach(o),ii=i(me," here, and we will be happy to help you."),me.forEach(o),sh.forEach(o),ni=p(ce),st=a(ce,"LI",{});var fa=l(st);it=a(fa,"P",{});var pa=l(it);hi=i(pa,"Add your model and task to the "),No=a(pa,"CODE",{});var fh=l(No);fi=i(fh,"tests/test_api.py"),fh.forEach(o),pi=i(pa," file. For example, if you have a text generation model:"),pa.forEach(o),ui=p(fa),c(nt.$$.fragment,fa),fa.forEach(o),ce.forEach(o),ia.forEach(o),di=p(Ft),ht=a(Ft,"LI",{});var ua=l(ht);Uo=a(ua,"P",{});var ph=l(Uo);ci=i(ph,"Finally, run the following test to ensure everything works as expected:"),ph.forEach(o),_i=p(ua),c(ft.$$.fragment,ua),ua.forEach(o),Ft.forEach(o),qr=p(e),$=a(e,"P",{});var ye=l($);mi=i(ye,"With these simple but powerful methods, you brought the full functionality of the Hub into your library. Users can download files stored on the Hub from your library with "),Bo=a(ye,"CODE",{});var uh=l(Bo);yi=i(uh,"hf_hub_download"),uh.forEach(o),gi=i(ye,", create repositories with "),Wo=a(ye,"CODE",{});var dh=l(Wo);bi=i(dh,"create_repo"),dh.forEach(o),vi=i(ye,", and upload files with "),Ro=a(ye,"CODE",{});var ch=l(Ro);wi=i(ch,"upload_file"),ch.forEach(o),Ei=i(ye,". You also set up Inference API with your library, allowing users to interact with your models on the Hub from inside a browser."),ye.forEach(o),this.h()},h(){u(q,"name","hf:doc:metadata"),u(q,"content",JSON.stringify($h)),u(G,"id","integrate-your-library-with-the-hub"),u(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(G,"href","#integrate-your-library-with-the-hub"),u(S,"class","relative group"),u(ve,"href","https://spacy.io/usage/projects#huggingface_hub"),u(ve,"rel","nofollow"),u(we,"href","https://allennlp.org/"),u(we,"rel","nofollow"),u(Ee,"href","https://rwightman.github.io/pytorch-image-models/"),u(Ee,"rel","nofollow"),u(ke,"href","https://git-lfs.github.com/"),u(ke,"rel","nofollow"),u(Pe,"href","https://api-inference.huggingface.co/docs/python/html/index.html"),u(Pe,"rel","nofollow"),u(je,"href","https://huggingface.co/join"),u(je,"rel","nofollow"),u(Ie,"href","https://github.com/huggingface/huggingface_hub/issues/new/choose"),u(Ie,"rel","nofollow"),u(Q,"id","installation"),u(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Q,"href","#installation"),u(F,"class","relative group"),u(V,"id","download-files-from-the-hub"),u(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(V,"href","#download-files-from-the-hub"),u(U,"class","relative group"),u(Me,"href","https://huggingface.co/lysandre/arxiv-nlp"),u(Me,"rel","nofollow"),u(Z,"id","code-sample"),u(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Z,"href","#code-sample"),u(B,"class","relative group"),_h(gt.src,ji="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/code_snippet.png")||u(gt,"src",ji),u(gt,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/code_snippet.png"),u(Re,"href","https://github.com/huggingface/hub-docs/blob/main/js/src/lib/interfaces/Libraries.ts"),u(Re,"rel","nofollow"),u(ze,"href","https://huggingface.co/asteroid-team"),u(ze,"rel","nofollow"),_h(wt.src,Ii="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-tags.png")||u(wt,"src",Ii),u(wt,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-tags.png"),u(ee,"id","upload-files-to-the-hub"),u(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ee,"href","#upload-files-to-the-hub"),u(W,"class","relative group"),u(re,"id","createrepo"),u(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(re,"href","#createrepo"),u(R,"class","relative group"),u(le,"id","uploadfile"),u(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(le,"href","#uploadfile"),u(z,"class","relative group"),u(At,"href","TODO"),u(jt,"href","/docs/hub/model-repos#what-are-model-cards-and-why-are-they-useful"),u(ne,"id","set-up-the-inference-api"),u(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ne,"href","#set-up-the-inference-api"),u(Y,"class","relative group"),u(Ze,"href","https://github.com/huggingface/api-inference-community/tree/main/docker_images"),u(Ze,"rel","nofollow"),u(rt,"href","https://github.com/huggingface/api-inference-community"),u(rt,"rel","nofollow"),u(lt,"href","https://github.com/huggingface/hub-docs/issues/new"),u(lt,"rel","nofollow")},m(e,n){t(document.head,q),h(e,zo,n),h(e,S,n),t(S,G),t(G,Mt),_(be,Mt,null),t(S,da),t(S,Nt),t(Nt,ca),h(e,Yo,n),h(e,v,n),t(v,_a),t(v,ve),t(ve,ma),t(v,ya),t(v,we),t(we,ga),t(v,ba),t(v,Ee),t(Ee,va),t(v,wa),h(e,Go,n),h(e,pt,n),t(pt,Ea),h(e,Jo,n),h(e,w,n),t(w,Ut),t(Ut,$a),t(w,ka),t(w,$e),t($e,Aa),t($e,ke),t(ke,Pa),t($e,ja),t(w,Ia),t(w,Ae),t(Ae,Ha),t(Ae,Pe),t(Pe,Da),t(Ae,La),t(w,xa),t(w,Bt),t(Bt,Oa),h(e,Ko,n),h(e,ut,n),t(ut,Ca),h(e,Qo,n),h(e,J,n),t(J,Ta),t(J,je),t(je,qa),t(J,Sa),h(e,Vo,n),h(e,K,n),t(K,Fa),t(K,Ie),t(Ie,Ma),t(K,Na),h(e,Xo,n),h(e,F,n),t(F,Q),t(Q,Wt),_(He,Wt,null),t(F,Ua),t(F,Rt),t(Rt,Ba),h(e,Zo,n),h(e,I,n),t(I,De),t(De,Le),t(Le,Wa),t(Le,zt),t(zt,Ra),t(Le,za),t(De,Ya),_(xe,De,null),t(I,Ga),t(I,M),t(M,Oe),t(Oe,Ja),t(Oe,Yt),t(Yt,Ka),t(Oe,Qa),t(M,Va),_(Ce,M,null),t(M,Xa),_(Te,M,null),t(I,Za),t(I,N),t(N,qe),t(qe,el),t(qe,Gt),t(Gt,tl),t(qe,ol),t(N,rl),_(Se,N,null),t(N,al),t(N,dt),t(dt,Jt),t(Jt,ll),t(dt,sl),h(e,er,n),h(e,U,n),t(U,V),t(V,Kt),_(Fe,Kt,null),t(U,il),t(U,Qt),t(Qt,nl),h(e,tr,n),h(e,ct,n),t(ct,hl),h(e,or,n),h(e,E,n),t(E,fl),t(E,Vt),t(Vt,pl),t(E,ul),t(E,Xt),t(Xt,dl),t(E,cl),t(E,Zt),t(Zt,_l),t(E,ml),h(e,rr,n),h(e,H,n),t(H,yl),t(H,eo),t(eo,gl),t(H,bl),t(H,Me),t(Me,vl),t(H,wl),h(e,ar,n),_(Ne,e,n),h(e,lr,n),h(e,D,n),t(D,El),t(D,to),t(to,$l),t(D,kl),t(D,oo),t(oo,Al),t(D,Pl),h(e,sr,n),h(e,_t,n),t(_t,jl),h(e,ir,n),_(Ue,e,n),h(e,nr,n),h(e,X,n),t(X,Il),t(X,ro),t(ro,Hl),t(X,Dl),h(e,hr,n),_(Be,e,n),h(e,fr,n),h(e,B,n),t(B,Z),t(Z,ao),_(We,ao,null),t(B,Ll),t(B,lo),t(lo,xl),h(e,pr,n),h(e,mt,n),t(mt,Ol),h(e,ur,n),h(e,yt,n),t(yt,gt),h(e,dr,n),h(e,L,n),t(L,Cl),t(L,Re),t(Re,Tl),t(L,ql),t(L,ze),t(ze,Sl),t(L,Fl),h(e,cr,n),_(Ye,e,n),h(e,_r,n),h(e,bt,n),t(bt,Ml),h(e,mr,n),h(e,vt,n),t(vt,wt),h(e,yr,n),h(e,W,n),t(W,ee),t(ee,so),_(Ge,so,null),t(W,Nl),t(W,io),t(io,Ul),h(e,gr,n),h(e,te,n),t(te,Bl),t(te,no),t(no,Wl),t(te,Rl),h(e,br,n),h(e,oe,n),t(oe,Et),t(Et,ho),t(ho,zl),t(Et,Yl),t(oe,Gl),t(oe,$t),t($t,fo),t(fo,Jl),t($t,Kl),h(e,vr,n),h(e,R,n),t(R,re),t(re,po),_(Je,po,null),t(R,Ql),t(R,uo),t(uo,co),t(co,Vl),h(e,wr,n),h(e,x,n),t(x,Xl),t(x,_o),t(_o,Zl),t(x,es),t(x,mo),t(mo,ts),t(x,os),h(e,Er,n),_(Ke,e,n),h(e,$r,n),h(e,ae,n),t(ae,rs),t(ae,yo),t(yo,as),t(ae,ls),h(e,kr,n),h(e,z,n),t(z,le),t(le,go),_(Qe,go,null),t(z,ss),t(z,bo),t(bo,vo),t(vo,is),h(e,Ar,n),h(e,se,n),t(se,ns),t(se,wo),t(wo,hs),t(se,fs),h(e,Pr,n),h(e,O,n),t(O,Eo),t(Eo,ps),t(O,us),t(O,$o),t($o,ds),t(O,cs),t(O,ko),t(ko,_s),h(e,jr,n),h(e,kt,n),t(kt,ms),h(e,Ir,n),_(Ve,e,n),h(e,Hr,n),h(e,C,n),t(C,ys),t(C,Ao),t(Ao,gs),t(C,bs),t(C,At),t(At,vs),t(C,ws),h(e,Dr,n),h(e,Pt,n),t(Pt,Es),h(e,Lr,n),h(e,ie,n),t(ie,$s),t(ie,jt),t(jt,ks),t(ie,As),h(e,xr,n),h(e,Y,n),t(Y,ne),t(ne,Po),_(Xe,Po,null),t(Y,Ps),t(Y,jo),t(jo,js),h(e,Or,n),h(e,It,n),t(It,Is),h(e,Cr,n),h(e,he,n),t(he,Hs),t(he,Ze),t(Ze,Ds),t(he,Ls),h(e,Tr,n),h(e,T,n),t(T,Io),t(Io,k),t(k,xs),t(k,Ho),t(Ho,Os),t(k,Cs),t(k,Do),t(Do,Ts),t(k,qs),t(k,Lo),t(Lo,Ss),t(k,Fs),t(T,Ms),t(T,et),t(et,xo),t(xo,Ns),t(et,Us),t(et,A),t(A,Oo),t(Oo,tt),t(tt,Bs),t(tt,Co),t(Co,Ws),t(tt,Rs),t(A,zs),t(A,ot),t(ot,P),t(P,Ys),t(P,To),t(To,Gs),t(P,Js),t(P,rt),t(rt,Ks),t(P,Qs),t(P,qo),t(qo,Vs),t(P,Xs),t(ot,Zs),_(at,ot,null),t(A,ei),t(A,So),t(So,j),t(j,ti),t(j,Fo),t(Fo,oi),t(j,ri),t(j,Mo),t(Mo,ai),t(j,li),t(j,lt),t(lt,si),t(j,ii),t(A,ni),t(A,st),t(st,it),t(it,hi),t(it,No),t(No,fi),t(it,pi),t(st,ui),_(nt,st,null),t(T,di),t(T,ht),t(ht,Uo),t(Uo,ci),t(ht,_i),_(ft,ht,null),h(e,qr,n),h(e,$,n),t($,mi),t($,Bo),t(Bo,yi),t($,gi),t($,Wo),t(Wo,bi),t($,vi),t($,Ro),t(Ro,wi),t($,Ei),Sr=!0},p:vh,i(e){Sr||(m(be.$$.fragment,e),m(He.$$.fragment,e),m(xe.$$.fragment,e),m(Ce.$$.fragment,e),m(Te.$$.fragment,e),m(Se.$$.fragment,e),m(Fe.$$.fragment,e),m(Ne.$$.fragment,e),m(Ue.$$.fragment,e),m(Be.$$.fragment,e),m(We.$$.fragment,e),m(Ye.$$.fragment,e),m(Ge.$$.fragment,e),m(Je.$$.fragment,e),m(Ke.$$.fragment,e),m(Qe.$$.fragment,e),m(Ve.$$.fragment,e),m(Xe.$$.fragment,e),m(at.$$.fragment,e),m(nt.$$.fragment,e),m(ft.$$.fragment,e),Sr=!0)},o(e){y(be.$$.fragment,e),y(He.$$.fragment,e),y(xe.$$.fragment,e),y(Ce.$$.fragment,e),y(Te.$$.fragment,e),y(Se.$$.fragment,e),y(Fe.$$.fragment,e),y(Ne.$$.fragment,e),y(Ue.$$.fragment,e),y(Be.$$.fragment,e),y(We.$$.fragment,e),y(Ye.$$.fragment,e),y(Ge.$$.fragment,e),y(Je.$$.fragment,e),y(Ke.$$.fragment,e),y(Qe.$$.fragment,e),y(Ve.$$.fragment,e),y(Xe.$$.fragment,e),y(at.$$.fragment,e),y(nt.$$.fragment,e),y(ft.$$.fragment,e),Sr=!1},d(e){o(q),e&&o(zo),e&&o(S),g(be),e&&o(Yo),e&&o(v),e&&o(Go),e&&o(pt),e&&o(Jo),e&&o(w),e&&o(Ko),e&&o(ut),e&&o(Qo),e&&o(J),e&&o(Vo),e&&o(K),e&&o(Xo),e&&o(F),g(He),e&&o(Zo),e&&o(I),g(xe),g(Ce),g(Te),g(Se),e&&o(er),e&&o(U),g(Fe),e&&o(tr),e&&o(ct),e&&o(or),e&&o(E),e&&o(rr),e&&o(H),e&&o(ar),g(Ne,e),e&&o(lr),e&&o(D),e&&o(sr),e&&o(_t),e&&o(ir),g(Ue,e),e&&o(nr),e&&o(X),e&&o(hr),g(Be,e),e&&o(fr),e&&o(B),g(We),e&&o(pr),e&&o(mt),e&&o(ur),e&&o(yt),e&&o(dr),e&&o(L),e&&o(cr),g(Ye,e),e&&o(_r),e&&o(bt),e&&o(mr),e&&o(vt),e&&o(yr),e&&o(W),g(Ge),e&&o(gr),e&&o(te),e&&o(br),e&&o(oe),e&&o(vr),e&&o(R),g(Je),e&&o(wr),e&&o(x),e&&o(Er),g(Ke,e),e&&o($r),e&&o(ae),e&&o(kr),e&&o(z),g(Qe),e&&o(Ar),e&&o(se),e&&o(Pr),e&&o(O),e&&o(jr),e&&o(kt),e&&o(Ir),g(Ve,e),e&&o(Hr),e&&o(C),e&&o(Dr),e&&o(Pt),e&&o(Lr),e&&o(ie),e&&o(xr),e&&o(Y),g(Xe),e&&o(Or),e&&o(It),e&&o(Cr),e&&o(he),e&&o(Tr),e&&o(T),g(at),g(nt),g(ft),e&&o(qr),e&&o($)}}}const $h={local:"integrate-your-library-with-the-hub",sections:[{local:"installation",title:"Installation"},{local:"download-files-from-the-hub",sections:[{local:"code-sample",title:"Code sample"}],title:"Download files from the Hub"},{local:"upload-files-to-the-hub",sections:[{local:"createrepo",title:"`create_repo`"},{local:"uploadfile",title:"`upload_file`"}],title:"Upload files to the Hub"},{local:"set-up-the-inference-api",title:"Set up the Inference API"}],title:"Integrate your library with the Hub"};function kh(Pi){return wh(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ih extends mh{constructor(q){super();yh(this,q,kh,Eh,gh,{})}}export{Ih as default,$h as metadata};
