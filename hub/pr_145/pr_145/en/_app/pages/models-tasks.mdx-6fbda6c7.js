import{S as Vl,i as Jl,s as zl,e as a,k as c,w as N,t as l,N as Kl,c as r,d as o,m as u,a as i,x as S,h as s,b as n,P as Ql,F as t,g as h,y as C,L as Xl,q as H,o as O,B as U,v as Zl}from"../chunks/vendor-e46c3074.js";import{I as R}from"../chunks/IconCopyLink-380c1989.js";function es(pi){let b,Xt,_,q,it,le,ia,lt,la,Zt,E,D,st,se,sa,nt,na,eo,qe,fa,to,De,Ye,mi,oo,Y,ha,ft,ca,ua,ao,k,W,ht,ne,da,ct,pa,ro,We,ma,io,m,ut,va,ga,dt,ya,wa,pt,ba,lo,je,_a,so,j,Ea,fe,ka,Aa,no,Ge,Ia,fo,v,he,Pa,mt,$a,Ta,La,Fe,xa,Me,Na,Sa,vt,Ca,ho,Be,Ha,co,G,Oa,gt,Ua,Ra,uo,A,F,yt,ce,qa,wt,Da,po,I,M,bt,ue,Ya,_t,Wa,mo,d,ja,Et,Ga,Fa,kt,Ma,Ba,At,Va,Ja,vo,B,It,de,za,Ka,Pt,pe,Qa,go,Ve,Xa,yo,P,V,$t,me,Za,Tt,er,wo,J,tr,ve,or,ar,bo,Je,Lt,rr,_o,z,K,ir,ge,lr,sr,$,xt,ye,nr,fr,Nt,we,hr,cr,St,be,ur,dr,Q,pr,_e,Ct,mr,vr,Ht,Ot,Ee,gr,Eo,T,X,Ut,ke,yr,Rt,wr,ko,ze,qt,br,Ao,Z,_r,Ae,Er,kr,Io,p,Ar,Ie,Ir,Pr,Dt,$r,Tr,Yt,Lr,xr,Po,L,ee,Wt,Pe,Nr,jt,Sr,$o,Ke,Cr,To,Qe,Xe,Hr,Gt,Or,Lo,te,Ur,$e,Rr,qr,xo,g,Te,Dr,Ft,Yr,Wr,jr,Le,Gr,Mt,Fr,Mr,Br,xe,Vr,Bt,Jr,zr,No,Ne,Vt,Kr,So,y,Qr,Se,Xr,Zr,Ce,ei,ti,Co,x,oe,Jt,He,oi,zt,ai,Ho,ae,ri,Oe,ii,li,Oo,w,si,Ue,ni,fi,Re,hi,ci,Uo;return le=new R({}),se=new R({}),ne=new R({}),ce=new R({}),ue=new R({}),me=new R({}),ke=new R({}),Pe=new R({}),He=new R({}),{c(){b=a("meta"),Xt=c(),_=a("h1"),q=a("a"),it=a("span"),N(le.$$.fragment),ia=c(),lt=a("span"),la=l("Tasks"),Zt=c(),E=a("h2"),D=a("a"),st=a("span"),N(se.$$.fragment),sa=c(),nt=a("span"),na=l("What's a task?"),eo=c(),qe=a("p"),fa=l("Tasks, or pipeline types, describe the \u201Cshape\u201D of each model\u2019s API (inputs and outputs) and are used to determine which Inference API and widget we want to display for any given model."),to=c(),De=a("p"),Ye=a("img"),oo=c(),Y=a("p"),ha=l("This classification is relatively coarse-grained (you can always add more fine-grained task names in your model tags), so "),ft=a("strong"),ca=l("you should rarely have to create a new task"),ua=l(". If you want to add support for a new task, this document explains the required steps."),ao=c(),k=a("h2"),W=a("a"),ht=a("span"),N(ne.$$.fragment),da=c(),ct=a("span"),pa=l("Overview"),ro=c(),We=a("p"),ma=l("Having a new task integrated into the Hub means that:"),io=c(),m=a("ul"),ut=a("li"),va=l("Users can search for all models of a given task."),ga=c(),dt=a("li"),ya=l("The Inference API supports the task."),wa=c(),pt=a("li"),ba=l("Users can try out models directly with the widget. \u{1F3C6}"),lo=c(),je=a("p"),_a=l("Note that you don\u2019t need to implement all the steps by yourself. Adding a new task is a community effort, and multiple people can contribute. \u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}"),so=c(),j=a("p"),Ea=l("To begin the process, open a new issue in the "),fe=a("a"),ka=l("huggingface_hub"),Aa=l(" repository. Please use the \u201CAdding a new task\u201D template. \u26A0\uFE0FBefore doing any coding, it\u2019s suggested to go over this document. \u26A0\uFE0F"),no=c(),Ge=a("p"),Ia=l("The first step is to upload a model for your proposed task. Once you have a model in the Hub for the new task, the next step is to enable it in the Inference API. There are three types of support that you can choose from:"),fo=c(),v=a("ul"),he=a("li"),Pa=l("\u{1F917} using a "),mt=a("code"),$a=l("transformers"),Ta=l(" model"),La=c(),Fe=a("li"),xa=l("\u{1F433} using a model from an "),Me=a("a"),Na=l("officially supported library"),Sa=c(),vt=a("li"),Ca=l("\u{1F5A8}\uFE0F using a model with custom inference code. This experimental option has downsides, so we recommend using one of the other approaches."),ho=c(),Be=a("p"),Ha=l("Finally, you can add a couple of UI elements, such as the task icon and the widget, that complete the integration in the Hub. \u{1F4F7}"),co=c(),G=a("p"),Oa=l("Some steps are orthogonal; you don\u2019t need to do them in order. "),gt=a("strong"),Ua=l("You don\u2019t need the Inference API to add the icon."),Ra=l(" This means that, even if there isn\u2019t full integration yet, users can still search for models of a given task."),uo=c(),A=a("h2"),F=a("a"),yt=a("span"),N(ce.$$.fragment),qa=c(),wt=a("span"),Da=l("Adding new tasks to the Hub"),po=c(),I=a("h3"),M=a("a"),bt=a("span"),N(ue.$$.fragment),Ya=c(),_t=a("span"),Wa=l("Using Hugging Face transformers library"),mo=c(),d=a("p"),ja=l("If your model is a "),Et=a("code"),Ga=l("transformers"),Fa=l("-based model, there is a 1:1 mapping between the Inference API task and a "),kt=a("code"),Ma=l("pipeline"),Ba=l(" class. Here are some example PRs from the "),At=a("code"),Va=l("transformers"),Ja=l(" library:"),vo=c(),B=a("ul"),It=a("li"),de=a("a"),za=l("Adding ImageClassificationPipeline"),Ka=c(),Pt=a("li"),pe=a("a"),Qa=l("Adding AudioClassificationPipeline"),go=c(),Ve=a("p"),Xa=l("Once the pipeline is submitted and deployed, you should be able to use the Inference API for your model."),yo=c(),P=a("h3"),V=a("a"),$t=a("span"),N(me.$$.fragment),Za=c(),Tt=a("span"),er=l("Using Community Inference API with a supported library"),wo=c(),J=a("p"),tr=l("The Hub also supports over 10 open-source libraries in the "),ve=a("a"),or=l("Community Inference API"),ar=l("."),bo=c(),Je=a("p"),Lt=a("strong"),rr=l("Adding a new task is relatively straightforward and requires 2 PRs:"),_o=c(),z=a("ul"),K=a("li"),ir=l("PR 1: Add the new task to the API "),ge=a("a"),lr=l("validation"),sr=l(". This code ensures that the inference input is valid for a given task. Some PR examples:"),$=a("ul"),xt=a("li"),ye=a("a"),nr=l("Add text-to-image"),fr=c(),Nt=a("li"),we=a("a"),hr=l("Add audio-classification"),cr=c(),St=a("li"),be=a("a"),ur=l("Add structured-data-classification"),dr=c(),Q=a("li"),pr=l("PR 2: Add the new task to a library docker image. You should also add a template to "),_e=a("a"),Ct=a("code"),mr=l("docker_images/common/app/pipelines"),vr=l(" to facilitate integrating the task in other libraries. Here is an example PR:"),Ht=a("ul"),Ot=a("li"),Ee=a("a"),gr=l("Add text-classification to spaCy"),Eo=c(),T=a("h3"),X=a("a"),Ut=a("span"),N(ke.$$.fragment),yr=c(),Rt=a("span"),wr=l("Adding Community Inference API for a quick prototype"),ko=c(),ze=a("p"),qt=a("strong"),br=l("My model is not supported by any library. Am I doomed? \u{1F631}"),Ao=c(),Z=a("p"),_r=l("No, you\u2019re not! The "),Ae=a("a"),Er=l("generic Inference API"),kr=l(" is an experimental Docker image for quickly prototyping new tasks and introducing new libraries,  which should allow you to have a new task in production with very little development from your side."),Io=c(),p=a("p"),Ar=l("How does it work from the user\u2019s point of view? Users create a copy of a "),Ie=a("a"),Ir=l("template"),Pr=l(" repo for their given task. Users then need to define their "),Dt=a("code"),$r=l("requirements.txt"),Tr=l(" and fill "),Yt=a("code"),Lr=l("pipeline.py"),xr=l(". Note that this is intended for quick experimentation and prototyping instead of fast production use-cases."),Po=c(),L=a("h3"),ee=a("a"),Wt=a("span"),N(Pe.$$.fragment),Nr=c(),jt=a("span"),Sr=l("UI elements"),$o=c(),Ke=a("p"),Cr=l("The Hub allows users to filter models by a given task. To do this, you need to add the task to several places. You\u2019ll also get to pick an icon for the task!"),To=c(),Qe=a("ol"),Xe=a("li"),Hr=l("Add the task type to "),Gt=a("code"),Or=l("Types.ts"),Lo=c(),te=a("p"),Ur=l("In "),$e=a("a"),Rr=l("interfaces/Types.ts"),qr=l(", you need to do a couple of things"),xo=c(),g=a("ul"),Te=a("li"),Dr=l("Add the type to "),Ft=a("code"),Yr=l("PipelineType"),Wr=l(". Note that pipeline types are sorted into different categories (NLP, Audio, Computer Vision, and others)."),jr=c(),Le=a("li"),Gr=l("Specify the task color in "),Mt=a("code"),Fr=l("PIPELINE_COLOR"),Mr=l("."),Br=c(),xe=a("li"),Vr=l("Specify the display order in "),Bt=a("code"),Jr=l("PIPELINE_TAGS_DISPLAY_ORDER"),zr=l("."),No=c(),Ne=a("ol"),Vt=a("li"),Kr=l("Choose an icon"),So=c(),y=a("p"),Qr=l("You can add an icon in the "),Se=a("a"),Xr=l("lib/Icons"),Zr=l(" directory. We usually choose carbon icons from "),Ce=a("a"),ei=l("https://icones.js.org/collection/carbon"),ti=l("."),Co=c(),x=a("h3"),oe=a("a"),Jt=a("span"),N(He.$$.fragment),oi=c(),zt=a("span"),ai=l("Widget"),Ho=c(),ae=a("p"),ri=l("Once the task is in production, what could be more exciting than implementing some way for users to play directly with the models in their browser? \u{1F929} You can find all the widgets "),Oe=a("a"),ii=l("here"),li=l("."),Oo=c(),w=a("p"),si=l("If you would be interested in contributing with a widget, you can look at the "),Ue=a("a"),ni=l("implementation"),fi=l(" of all the widgets. You can also find WIP documentation on implementing a widget in "),Re=a("a"),hi=l("https://github.com/huggingface/hub-docs/tree/main/js"),ci=l("."),this.h()},l(e){const f=Kl('[data-svelte="svelte-1phssyn"]',document.head);b=r(f,"META",{name:!0,content:!0}),f.forEach(o),Xt=u(e),_=r(e,"H1",{class:!0});var Ro=i(_);q=r(Ro,"A",{id:!0,class:!0,href:!0});var vi=i(q);it=r(vi,"SPAN",{});var gi=i(it);S(le.$$.fragment,gi),gi.forEach(o),vi.forEach(o),ia=u(Ro),lt=r(Ro,"SPAN",{});var yi=i(lt);la=s(yi,"Tasks"),yi.forEach(o),Ro.forEach(o),Zt=u(e),E=r(e,"H2",{class:!0});var qo=i(E);D=r(qo,"A",{id:!0,class:!0,href:!0});var wi=i(D);st=r(wi,"SPAN",{});var bi=i(st);S(se.$$.fragment,bi),bi.forEach(o),wi.forEach(o),sa=u(qo),nt=r(qo,"SPAN",{});var _i=i(nt);na=s(_i,"What's a task?"),_i.forEach(o),qo.forEach(o),eo=u(e),qe=r(e,"P",{});var Ei=i(qe);fa=s(Ei,"Tasks, or pipeline types, describe the \u201Cshape\u201D of each model\u2019s API (inputs and outputs) and are used to determine which Inference API and widget we want to display for any given model."),Ei.forEach(o),to=u(e),De=r(e,"P",{});var ki=i(De);Ye=r(ki,"IMG",{src:!0,alt:!0}),ki.forEach(o),oo=u(e),Y=r(e,"P",{});var Do=i(Y);ha=s(Do,"This classification is relatively coarse-grained (you can always add more fine-grained task names in your model tags), so "),ft=r(Do,"STRONG",{});var Ai=i(ft);ca=s(Ai,"you should rarely have to create a new task"),Ai.forEach(o),ua=s(Do,". If you want to add support for a new task, this document explains the required steps."),Do.forEach(o),ao=u(e),k=r(e,"H2",{class:!0});var Yo=i(k);W=r(Yo,"A",{id:!0,class:!0,href:!0});var Ii=i(W);ht=r(Ii,"SPAN",{});var Pi=i(ht);S(ne.$$.fragment,Pi),Pi.forEach(o),Ii.forEach(o),da=u(Yo),ct=r(Yo,"SPAN",{});var $i=i(ct);pa=s($i,"Overview"),$i.forEach(o),Yo.forEach(o),ro=u(e),We=r(e,"P",{});var Ti=i(We);ma=s(Ti,"Having a new task integrated into the Hub means that:"),Ti.forEach(o),io=u(e),m=r(e,"UL",{});var Ze=i(m);ut=r(Ze,"LI",{});var Li=i(ut);va=s(Li,"Users can search for all models of a given task."),Li.forEach(o),ga=u(Ze),dt=r(Ze,"LI",{});var xi=i(dt);ya=s(xi,"The Inference API supports the task."),xi.forEach(o),wa=u(Ze),pt=r(Ze,"LI",{});var Ni=i(pt);ba=s(Ni,"Users can try out models directly with the widget. \u{1F3C6}"),Ni.forEach(o),Ze.forEach(o),lo=u(e),je=r(e,"P",{});var Si=i(je);_a=s(Si,"Note that you don\u2019t need to implement all the steps by yourself. Adding a new task is a community effort, and multiple people can contribute. \u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}"),Si.forEach(o),so=u(e),j=r(e,"P",{});var Wo=i(j);Ea=s(Wo,"To begin the process, open a new issue in the "),fe=r(Wo,"A",{href:!0,rel:!0});var Ci=i(fe);ka=s(Ci,"huggingface_hub"),Ci.forEach(o),Aa=s(Wo," repository. Please use the \u201CAdding a new task\u201D template. \u26A0\uFE0FBefore doing any coding, it\u2019s suggested to go over this document. \u26A0\uFE0F"),Wo.forEach(o),no=u(e),Ge=r(e,"P",{});var Hi=i(Ge);Ia=s(Hi,"The first step is to upload a model for your proposed task. Once you have a model in the Hub for the new task, the next step is to enable it in the Inference API. There are three types of support that you can choose from:"),Hi.forEach(o),fo=u(e),v=r(e,"UL",{});var et=i(v);he=r(et,"LI",{});var jo=i(he);Pa=s(jo,"\u{1F917} using a "),mt=r(jo,"CODE",{});var Oi=i(mt);$a=s(Oi,"transformers"),Oi.forEach(o),Ta=s(jo," model"),jo.forEach(o),La=u(et),Fe=r(et,"LI",{});var ui=i(Fe);xa=s(ui,"\u{1F433} using a model from an "),Me=r(ui,"A",{href:!0});var Ui=i(Me);Na=s(Ui,"officially supported library"),Ui.forEach(o),ui.forEach(o),Sa=u(et),vt=r(et,"LI",{});var Ri=i(vt);Ca=s(Ri,"\u{1F5A8}\uFE0F using a model with custom inference code. This experimental option has downsides, so we recommend using one of the other approaches."),Ri.forEach(o),et.forEach(o),ho=u(e),Be=r(e,"P",{});var qi=i(Be);Ha=s(qi,"Finally, you can add a couple of UI elements, such as the task icon and the widget, that complete the integration in the Hub. \u{1F4F7}"),qi.forEach(o),co=u(e),G=r(e,"P",{});var Go=i(G);Oa=s(Go,"Some steps are orthogonal; you don\u2019t need to do them in order. "),gt=r(Go,"STRONG",{});var Di=i(gt);Ua=s(Di,"You don\u2019t need the Inference API to add the icon."),Di.forEach(o),Ra=s(Go," This means that, even if there isn\u2019t full integration yet, users can still search for models of a given task."),Go.forEach(o),uo=u(e),A=r(e,"H2",{class:!0});var Fo=i(A);F=r(Fo,"A",{id:!0,class:!0,href:!0});var Yi=i(F);yt=r(Yi,"SPAN",{});var Wi=i(yt);S(ce.$$.fragment,Wi),Wi.forEach(o),Yi.forEach(o),qa=u(Fo),wt=r(Fo,"SPAN",{});var ji=i(wt);Da=s(ji,"Adding new tasks to the Hub"),ji.forEach(o),Fo.forEach(o),po=u(e),I=r(e,"H3",{class:!0});var Mo=i(I);M=r(Mo,"A",{id:!0,class:!0,href:!0});var Gi=i(M);bt=r(Gi,"SPAN",{});var Fi=i(bt);S(ue.$$.fragment,Fi),Fi.forEach(o),Gi.forEach(o),Ya=u(Mo),_t=r(Mo,"SPAN",{});var Mi=i(_t);Wa=s(Mi,"Using Hugging Face transformers library"),Mi.forEach(o),Mo.forEach(o),mo=u(e),d=r(e,"P",{});var re=i(d);ja=s(re,"If your model is a "),Et=r(re,"CODE",{});var Bi=i(Et);Ga=s(Bi,"transformers"),Bi.forEach(o),Fa=s(re,"-based model, there is a 1:1 mapping between the Inference API task and a "),kt=r(re,"CODE",{});var Vi=i(kt);Ma=s(Vi,"pipeline"),Vi.forEach(o),Ba=s(re," class. Here are some example PRs from the "),At=r(re,"CODE",{});var Ji=i(At);Va=s(Ji,"transformers"),Ji.forEach(o),Ja=s(re," library:"),re.forEach(o),vo=u(e),B=r(e,"UL",{});var Bo=i(B);It=r(Bo,"LI",{});var zi=i(It);de=r(zi,"A",{href:!0,rel:!0});var Ki=i(de);za=s(Ki,"Adding ImageClassificationPipeline"),Ki.forEach(o),zi.forEach(o),Ka=u(Bo),Pt=r(Bo,"LI",{});var Qi=i(Pt);pe=r(Qi,"A",{href:!0,rel:!0});var Xi=i(pe);Qa=s(Xi,"Adding AudioClassificationPipeline"),Xi.forEach(o),Qi.forEach(o),Bo.forEach(o),go=u(e),Ve=r(e,"P",{});var Zi=i(Ve);Xa=s(Zi,"Once the pipeline is submitted and deployed, you should be able to use the Inference API for your model."),Zi.forEach(o),yo=u(e),P=r(e,"H3",{class:!0});var Vo=i(P);V=r(Vo,"A",{id:!0,class:!0,href:!0});var el=i(V);$t=r(el,"SPAN",{});var tl=i($t);S(me.$$.fragment,tl),tl.forEach(o),el.forEach(o),Za=u(Vo),Tt=r(Vo,"SPAN",{});var ol=i(Tt);er=s(ol,"Using Community Inference API with a supported library"),ol.forEach(o),Vo.forEach(o),wo=u(e),J=r(e,"P",{});var Jo=i(J);tr=s(Jo,"The Hub also supports over 10 open-source libraries in the "),ve=r(Jo,"A",{href:!0,rel:!0});var al=i(ve);or=s(al,"Community Inference API"),al.forEach(o),ar=s(Jo,"."),Jo.forEach(o),bo=u(e),Je=r(e,"P",{});var rl=i(Je);Lt=r(rl,"STRONG",{});var il=i(Lt);rr=s(il,"Adding a new task is relatively straightforward and requires 2 PRs:"),il.forEach(o),rl.forEach(o),_o=u(e),z=r(e,"UL",{});var zo=i(z);K=r(zo,"LI",{});var Kt=i(K);ir=s(Kt,"PR 1: Add the new task to the API "),ge=r(Kt,"A",{href:!0,rel:!0});var ll=i(ge);lr=s(ll,"validation"),ll.forEach(o),sr=s(Kt,". This code ensures that the inference input is valid for a given task. Some PR examples:"),$=r(Kt,"UL",{});var tt=i($);xt=r(tt,"LI",{});var sl=i(xt);ye=r(sl,"A",{href:!0,rel:!0});var nl=i(ye);nr=s(nl,"Add text-to-image"),nl.forEach(o),sl.forEach(o),fr=u(tt),Nt=r(tt,"LI",{});var fl=i(Nt);we=r(fl,"A",{href:!0,rel:!0});var hl=i(we);hr=s(hl,"Add audio-classification"),hl.forEach(o),fl.forEach(o),cr=u(tt),St=r(tt,"LI",{});var cl=i(St);be=r(cl,"A",{href:!0,rel:!0});var ul=i(be);ur=s(ul,"Add structured-data-classification"),ul.forEach(o),cl.forEach(o),tt.forEach(o),Kt.forEach(o),dr=u(zo),Q=r(zo,"LI",{});var Qt=i(Q);pr=s(Qt,"PR 2: Add the new task to a library docker image. You should also add a template to "),_e=r(Qt,"A",{href:!0,rel:!0});var dl=i(_e);Ct=r(dl,"CODE",{});var pl=i(Ct);mr=s(pl,"docker_images/common/app/pipelines"),pl.forEach(o),dl.forEach(o),vr=s(Qt," to facilitate integrating the task in other libraries. Here is an example PR:"),Ht=r(Qt,"UL",{});var ml=i(Ht);Ot=r(ml,"LI",{});var vl=i(Ot);Ee=r(vl,"A",{href:!0,rel:!0});var gl=i(Ee);gr=s(gl,"Add text-classification to spaCy"),gl.forEach(o),vl.forEach(o),ml.forEach(o),Qt.forEach(o),zo.forEach(o),Eo=u(e),T=r(e,"H3",{class:!0});var Ko=i(T);X=r(Ko,"A",{id:!0,class:!0,href:!0});var yl=i(X);Ut=r(yl,"SPAN",{});var wl=i(Ut);S(ke.$$.fragment,wl),wl.forEach(o),yl.forEach(o),yr=u(Ko),Rt=r(Ko,"SPAN",{});var bl=i(Rt);wr=s(bl,"Adding Community Inference API for a quick prototype"),bl.forEach(o),Ko.forEach(o),ko=u(e),ze=r(e,"P",{});var _l=i(ze);qt=r(_l,"STRONG",{});var El=i(qt);br=s(El,"My model is not supported by any library. Am I doomed? \u{1F631}"),El.forEach(o),_l.forEach(o),Ao=u(e),Z=r(e,"P",{});var Qo=i(Z);_r=s(Qo,"No, you\u2019re not! The "),Ae=r(Qo,"A",{href:!0,rel:!0});var kl=i(Ae);Er=s(kl,"generic Inference API"),kl.forEach(o),kr=s(Qo," is an experimental Docker image for quickly prototyping new tasks and introducing new libraries,  which should allow you to have a new task in production with very little development from your side."),Qo.forEach(o),Io=u(e),p=r(e,"P",{});var ie=i(p);Ar=s(ie,"How does it work from the user\u2019s point of view? Users create a copy of a "),Ie=r(ie,"A",{href:!0,rel:!0});var Al=i(Ie);Ir=s(Al,"template"),Al.forEach(o),Pr=s(ie," repo for their given task. Users then need to define their "),Dt=r(ie,"CODE",{});var Il=i(Dt);$r=s(Il,"requirements.txt"),Il.forEach(o),Tr=s(ie," and fill "),Yt=r(ie,"CODE",{});var Pl=i(Yt);Lr=s(Pl,"pipeline.py"),Pl.forEach(o),xr=s(ie,". Note that this is intended for quick experimentation and prototyping instead of fast production use-cases."),ie.forEach(o),Po=u(e),L=r(e,"H3",{class:!0});var Xo=i(L);ee=r(Xo,"A",{id:!0,class:!0,href:!0});var $l=i(ee);Wt=r($l,"SPAN",{});var Tl=i(Wt);S(Pe.$$.fragment,Tl),Tl.forEach(o),$l.forEach(o),Nr=u(Xo),jt=r(Xo,"SPAN",{});var Ll=i(jt);Sr=s(Ll,"UI elements"),Ll.forEach(o),Xo.forEach(o),$o=u(e),Ke=r(e,"P",{});var xl=i(Ke);Cr=s(xl,"The Hub allows users to filter models by a given task. To do this, you need to add the task to several places. You\u2019ll also get to pick an icon for the task!"),xl.forEach(o),To=u(e),Qe=r(e,"OL",{});var Nl=i(Qe);Xe=r(Nl,"LI",{});var di=i(Xe);Hr=s(di,"Add the task type to "),Gt=r(di,"CODE",{});var Sl=i(Gt);Or=s(Sl,"Types.ts"),Sl.forEach(o),di.forEach(o),Nl.forEach(o),Lo=u(e),te=r(e,"P",{});var Zo=i(te);Ur=s(Zo,"In "),$e=r(Zo,"A",{href:!0,rel:!0});var Cl=i($e);Rr=s(Cl,"interfaces/Types.ts"),Cl.forEach(o),qr=s(Zo,", you need to do a couple of things"),Zo.forEach(o),xo=u(e),g=r(e,"UL",{});var ot=i(g);Te=r(ot,"LI",{});var ea=i(Te);Dr=s(ea,"Add the type to "),Ft=r(ea,"CODE",{});var Hl=i(Ft);Yr=s(Hl,"PipelineType"),Hl.forEach(o),Wr=s(ea,". Note that pipeline types are sorted into different categories (NLP, Audio, Computer Vision, and others)."),ea.forEach(o),jr=u(ot),Le=r(ot,"LI",{});var ta=i(Le);Gr=s(ta,"Specify the task color in "),Mt=r(ta,"CODE",{});var Ol=i(Mt);Fr=s(Ol,"PIPELINE_COLOR"),Ol.forEach(o),Mr=s(ta,"."),ta.forEach(o),Br=u(ot),xe=r(ot,"LI",{});var oa=i(xe);Vr=s(oa,"Specify the display order in "),Bt=r(oa,"CODE",{});var Ul=i(Bt);Jr=s(Ul,"PIPELINE_TAGS_DISPLAY_ORDER"),Ul.forEach(o),zr=s(oa,"."),oa.forEach(o),ot.forEach(o),No=u(e),Ne=r(e,"OL",{start:!0});var Rl=i(Ne);Vt=r(Rl,"LI",{});var ql=i(Vt);Kr=s(ql,"Choose an icon"),ql.forEach(o),Rl.forEach(o),So=u(e),y=r(e,"P",{});var at=i(y);Qr=s(at,"You can add an icon in the "),Se=r(at,"A",{href:!0,rel:!0});var Dl=i(Se);Xr=s(Dl,"lib/Icons"),Dl.forEach(o),Zr=s(at," directory. We usually choose carbon icons from "),Ce=r(at,"A",{href:!0,rel:!0});var Yl=i(Ce);ei=s(Yl,"https://icones.js.org/collection/carbon"),Yl.forEach(o),ti=s(at,"."),at.forEach(o),Co=u(e),x=r(e,"H3",{class:!0});var aa=i(x);oe=r(aa,"A",{id:!0,class:!0,href:!0});var Wl=i(oe);Jt=r(Wl,"SPAN",{});var jl=i(Jt);S(He.$$.fragment,jl),jl.forEach(o),Wl.forEach(o),oi=u(aa),zt=r(aa,"SPAN",{});var Gl=i(zt);ai=s(Gl,"Widget"),Gl.forEach(o),aa.forEach(o),Ho=u(e),ae=r(e,"P",{});var ra=i(ae);ri=s(ra,"Once the task is in production, what could be more exciting than implementing some way for users to play directly with the models in their browser? \u{1F929} You can find all the widgets "),Oe=r(ra,"A",{href:!0,rel:!0});var Fl=i(Oe);ii=s(Fl,"here"),Fl.forEach(o),li=s(ra,"."),ra.forEach(o),Oo=u(e),w=r(e,"P",{});var rt=i(w);si=s(rt,"If you would be interested in contributing with a widget, you can look at the "),Ue=r(rt,"A",{href:!0,rel:!0});var Ml=i(Ue);ni=s(Ml,"implementation"),Ml.forEach(o),fi=s(rt," of all the widgets. You can also find WIP documentation on implementing a widget in "),Re=r(rt,"A",{href:!0,rel:!0});var Bl=i(Re);hi=s(Bl,"https://github.com/huggingface/hub-docs/tree/main/js"),Bl.forEach(o),ci=s(rt,"."),rt.forEach(o),this.h()},h(){n(b,"name","hf:doc:metadata"),n(b,"content",JSON.stringify(ts)),n(q,"id","tasks"),n(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(q,"href","#tasks"),n(_,"class","relative group"),n(D,"id","whats-a-task"),n(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(D,"href","#whats-a-task"),n(E,"class","relative group"),Ql(Ye.src,mi="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/tasks.png")||n(Ye,"src",mi),n(Ye,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/tasks.png"),n(W,"id","overview"),n(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(W,"href","#overview"),n(k,"class","relative group"),n(fe,"href","https://github.com/huggingface/huggingface_hub/issues"),n(fe,"rel","nofollow"),n(Me,"href","/docs/hub/libraries"),n(F,"id","adding-new-tasks-to-the-hub"),n(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(F,"href","#adding-new-tasks-to-the-hub"),n(A,"class","relative group"),n(M,"id","using-hugging-face-transformers-library"),n(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(M,"href","#using-hugging-face-transformers-library"),n(I,"class","relative group"),n(de,"href","https://github.com/huggingface/transformers/pull/11598"),n(de,"rel","nofollow"),n(pe,"href","https://github.com/huggingface/transformers/pull/13342"),n(pe,"rel","nofollow"),n(V,"id","using-community-inference-api-with-a-supported-library"),n(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(V,"href","#using-community-inference-api-with-a-supported-library"),n(P,"class","relative group"),n(ve,"href","https://github.com/huggingface/api-inference-community"),n(ve,"rel","nofollow"),n(ge,"href","https://github.com/huggingface/api-inference-community/blob/main/api_inference_community/validation.py"),n(ge,"rel","nofollow"),n(ye,"href","https://github.com/huggingface/huggingface_hub/commit/5f040a117cf2a44d704621012eb41c01b103cfca#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189"),n(ye,"rel","nofollow"),n(we,"href","https://github.com/huggingface/huggingface_hub/commit/141e30588a2031d4d5798eaa2c1250d1d1b75905#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189"),n(we,"rel","nofollow"),n(be,"href","https://github.com/huggingface/huggingface_hub/commit/dbea604a45df163d3f0b4b1d897e4b0fb951c650#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189"),n(be,"rel","nofollow"),n(_e,"href","https://github.com/huggingface/api-inference-community/tree/main/docker_images/common/app/pipelines"),n(_e,"rel","nofollow"),n(Ee,"href","https://github.com/huggingface/huggingface_hub/commit/6926fd9bec23cb963ce3f58ec53496083997f0fa#diff-3f1083a92ca0047b50f9ad2d04f0fe8dfaeee0e26ab71eb8835e365359a1d0dc"),n(Ee,"rel","nofollow"),n(X,"id","adding-community-inference-api-for-a-quick-prototype"),n(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(X,"href","#adding-community-inference-api-for-a-quick-prototype"),n(T,"class","relative group"),n(Ae,"href","https://github.com/huggingface/api-inference-community/tree/main/docker_images/generic"),n(Ae,"rel","nofollow"),n(Ie,"href","https://huggingface.co/templates"),n(Ie,"rel","nofollow"),n(ee,"id","ui-elements"),n(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(ee,"href","#ui-elements"),n(L,"class","relative group"),n($e,"href","https://github.com/huggingface/hub-docs/blob/main/js/src/lib/interfaces/Types.ts"),n($e,"rel","nofollow"),n(Ne,"start","2"),n(Se,"href","https://github.com/huggingface/hub-docs/tree/main/js/src/lib/Icons"),n(Se,"rel","nofollow"),n(Ce,"href","https://icones.js.org/collection/carbon"),n(Ce,"rel","nofollow"),n(oe,"id","widget"),n(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(oe,"href","#widget"),n(x,"class","relative group"),n(Oe,"href","https://huggingface-widgets.netlify.app/"),n(Oe,"rel","nofollow"),n(Ue,"href","https://github.com/huggingface/hub-docs/tree/main/js/src/lib/components/InferenceWidget/widgets"),n(Ue,"rel","nofollow"),n(Re,"href","https://github.com/huggingface/hub-docs/tree/main/js"),n(Re,"rel","nofollow")},m(e,f){t(document.head,b),h(e,Xt,f),h(e,_,f),t(_,q),t(q,it),C(le,it,null),t(_,ia),t(_,lt),t(lt,la),h(e,Zt,f),h(e,E,f),t(E,D),t(D,st),C(se,st,null),t(E,sa),t(E,nt),t(nt,na),h(e,eo,f),h(e,qe,f),t(qe,fa),h(e,to,f),h(e,De,f),t(De,Ye),h(e,oo,f),h(e,Y,f),t(Y,ha),t(Y,ft),t(ft,ca),t(Y,ua),h(e,ao,f),h(e,k,f),t(k,W),t(W,ht),C(ne,ht,null),t(k,da),t(k,ct),t(ct,pa),h(e,ro,f),h(e,We,f),t(We,ma),h(e,io,f),h(e,m,f),t(m,ut),t(ut,va),t(m,ga),t(m,dt),t(dt,ya),t(m,wa),t(m,pt),t(pt,ba),h(e,lo,f),h(e,je,f),t(je,_a),h(e,so,f),h(e,j,f),t(j,Ea),t(j,fe),t(fe,ka),t(j,Aa),h(e,no,f),h(e,Ge,f),t(Ge,Ia),h(e,fo,f),h(e,v,f),t(v,he),t(he,Pa),t(he,mt),t(mt,$a),t(he,Ta),t(v,La),t(v,Fe),t(Fe,xa),t(Fe,Me),t(Me,Na),t(v,Sa),t(v,vt),t(vt,Ca),h(e,ho,f),h(e,Be,f),t(Be,Ha),h(e,co,f),h(e,G,f),t(G,Oa),t(G,gt),t(gt,Ua),t(G,Ra),h(e,uo,f),h(e,A,f),t(A,F),t(F,yt),C(ce,yt,null),t(A,qa),t(A,wt),t(wt,Da),h(e,po,f),h(e,I,f),t(I,M),t(M,bt),C(ue,bt,null),t(I,Ya),t(I,_t),t(_t,Wa),h(e,mo,f),h(e,d,f),t(d,ja),t(d,Et),t(Et,Ga),t(d,Fa),t(d,kt),t(kt,Ma),t(d,Ba),t(d,At),t(At,Va),t(d,Ja),h(e,vo,f),h(e,B,f),t(B,It),t(It,de),t(de,za),t(B,Ka),t(B,Pt),t(Pt,pe),t(pe,Qa),h(e,go,f),h(e,Ve,f),t(Ve,Xa),h(e,yo,f),h(e,P,f),t(P,V),t(V,$t),C(me,$t,null),t(P,Za),t(P,Tt),t(Tt,er),h(e,wo,f),h(e,J,f),t(J,tr),t(J,ve),t(ve,or),t(J,ar),h(e,bo,f),h(e,Je,f),t(Je,Lt),t(Lt,rr),h(e,_o,f),h(e,z,f),t(z,K),t(K,ir),t(K,ge),t(ge,lr),t(K,sr),t(K,$),t($,xt),t(xt,ye),t(ye,nr),t($,fr),t($,Nt),t(Nt,we),t(we,hr),t($,cr),t($,St),t(St,be),t(be,ur),t(z,dr),t(z,Q),t(Q,pr),t(Q,_e),t(_e,Ct),t(Ct,mr),t(Q,vr),t(Q,Ht),t(Ht,Ot),t(Ot,Ee),t(Ee,gr),h(e,Eo,f),h(e,T,f),t(T,X),t(X,Ut),C(ke,Ut,null),t(T,yr),t(T,Rt),t(Rt,wr),h(e,ko,f),h(e,ze,f),t(ze,qt),t(qt,br),h(e,Ao,f),h(e,Z,f),t(Z,_r),t(Z,Ae),t(Ae,Er),t(Z,kr),h(e,Io,f),h(e,p,f),t(p,Ar),t(p,Ie),t(Ie,Ir),t(p,Pr),t(p,Dt),t(Dt,$r),t(p,Tr),t(p,Yt),t(Yt,Lr),t(p,xr),h(e,Po,f),h(e,L,f),t(L,ee),t(ee,Wt),C(Pe,Wt,null),t(L,Nr),t(L,jt),t(jt,Sr),h(e,$o,f),h(e,Ke,f),t(Ke,Cr),h(e,To,f),h(e,Qe,f),t(Qe,Xe),t(Xe,Hr),t(Xe,Gt),t(Gt,Or),h(e,Lo,f),h(e,te,f),t(te,Ur),t(te,$e),t($e,Rr),t(te,qr),h(e,xo,f),h(e,g,f),t(g,Te),t(Te,Dr),t(Te,Ft),t(Ft,Yr),t(Te,Wr),t(g,jr),t(g,Le),t(Le,Gr),t(Le,Mt),t(Mt,Fr),t(Le,Mr),t(g,Br),t(g,xe),t(xe,Vr),t(xe,Bt),t(Bt,Jr),t(xe,zr),h(e,No,f),h(e,Ne,f),t(Ne,Vt),t(Vt,Kr),h(e,So,f),h(e,y,f),t(y,Qr),t(y,Se),t(Se,Xr),t(y,Zr),t(y,Ce),t(Ce,ei),t(y,ti),h(e,Co,f),h(e,x,f),t(x,oe),t(oe,Jt),C(He,Jt,null),t(x,oi),t(x,zt),t(zt,ai),h(e,Ho,f),h(e,ae,f),t(ae,ri),t(ae,Oe),t(Oe,ii),t(ae,li),h(e,Oo,f),h(e,w,f),t(w,si),t(w,Ue),t(Ue,ni),t(w,fi),t(w,Re),t(Re,hi),t(w,ci),Uo=!0},p:Xl,i(e){Uo||(H(le.$$.fragment,e),H(se.$$.fragment,e),H(ne.$$.fragment,e),H(ce.$$.fragment,e),H(ue.$$.fragment,e),H(me.$$.fragment,e),H(ke.$$.fragment,e),H(Pe.$$.fragment,e),H(He.$$.fragment,e),Uo=!0)},o(e){O(le.$$.fragment,e),O(se.$$.fragment,e),O(ne.$$.fragment,e),O(ce.$$.fragment,e),O(ue.$$.fragment,e),O(me.$$.fragment,e),O(ke.$$.fragment,e),O(Pe.$$.fragment,e),O(He.$$.fragment,e),Uo=!1},d(e){o(b),e&&o(Xt),e&&o(_),U(le),e&&o(Zt),e&&o(E),U(se),e&&o(eo),e&&o(qe),e&&o(to),e&&o(De),e&&o(oo),e&&o(Y),e&&o(ao),e&&o(k),U(ne),e&&o(ro),e&&o(We),e&&o(io),e&&o(m),e&&o(lo),e&&o(je),e&&o(so),e&&o(j),e&&o(no),e&&o(Ge),e&&o(fo),e&&o(v),e&&o(ho),e&&o(Be),e&&o(co),e&&o(G),e&&o(uo),e&&o(A),U(ce),e&&o(po),e&&o(I),U(ue),e&&o(mo),e&&o(d),e&&o(vo),e&&o(B),e&&o(go),e&&o(Ve),e&&o(yo),e&&o(P),U(me),e&&o(wo),e&&o(J),e&&o(bo),e&&o(Je),e&&o(_o),e&&o(z),e&&o(Eo),e&&o(T),U(ke),e&&o(ko),e&&o(ze),e&&o(Ao),e&&o(Z),e&&o(Io),e&&o(p),e&&o(Po),e&&o(L),U(Pe),e&&o($o),e&&o(Ke),e&&o(To),e&&o(Qe),e&&o(Lo),e&&o(te),e&&o(xo),e&&o(g),e&&o(No),e&&o(Ne),e&&o(So),e&&o(y),e&&o(Co),e&&o(x),U(He),e&&o(Ho),e&&o(ae),e&&o(Oo),e&&o(w)}}}const ts={local:"tasks",sections:[{local:"whats-a-task",title:"What's a task?"},{local:"overview",title:"Overview"},{local:"adding-new-tasks-to-the-hub",sections:[{local:"using-hugging-face-transformers-library",title:"Using Hugging Face transformers library"},{local:"using-community-inference-api-with-a-supported-library",title:"Using Community Inference API with a supported library"},{local:"adding-community-inference-api-for-a-quick-prototype",title:"Adding Community Inference API for a quick prototype"},{local:"ui-elements",title:"UI elements"},{local:"widget",title:"Widget"}],title:"Adding new tasks to the Hub"}],title:"Tasks"};function os(pi){return Zl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class is extends Vl{constructor(b){super();Jl(this,b,os,es,zl,{})}}export{is as default,ts as metadata};
