import{S as vs,i as ys,s as ws,e as i,k as u,w as y,t as s,N as _s,c as r,d as t,m as c,a,x as w,h as n,b as f,P as Be,G as o,g as h,y as _,L as bs,q as b,o as E,B as $,v as Es}from"../chunks/vendor-hf-doc-builder.js";import{I as be}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Rt}from"../chunks/CodeBlock-hf-doc-builder.js";function $s(Vr){let A,Ft,N,R,je,ie,Xo,Ue,Jo,Ot,Ee,Ko,Yt,I,F,Ve,re,Qo,We,Zo,Dt,d,ei,Xe,ti,oi,ae,ii,ri,se,ai,si,qt,O,ni,Y,Je,li,hi,fi,Bt,ne,jt,D,ui,Ke,ci,pi,Ut,g,Wr,Vt,x,q,Qe,le,mi,Ze,gi,Wt,B,di,et,vi,yi,Xt,$e,he,wi,fe,_i,bi,Jt,ke,Te,Xr,Kt,C,tt,ot,Ei,$i,it,rt,ki,Qt,k,Ti,at,Pi,zi,Pe,st,Si,Ai,Zt,ze,Ni,eo,Se,Ae,Jr,to,T,Ii,nt,xi,Ci,Ne,lt,Gi,Hi,oo,G,j,ht,ue,Li,ft,Mi,io,U,Ri,ut,Fi,Oi,ro,ce,ao,H,V,ct,pe,Yi,pt,Di,so,Ie,qi,no,W,Bi,mt,ji,Ui,lo,me,ho,X,Vi,gt,Wi,Xi,fo,ge,uo,v,Ji,dt,Ki,Qi,vt,Zi,er,yt,tr,or,co,p,ir,wt,rr,ar,_t,sr,nr,bt,lr,hr,Et,fr,ur,po,de,mo,J,cr,$t,pr,mr,go,xe,Ce,Kr,vo,L,K,kt,ve,gr,Tt,dr,yo,Ge,He,Qr,wo,Le,vr,_o,Me,Re,Zr,bo,M,Q,Pt,ye,yr,zt,wr,Eo,Z,_r,St,br,Er,$o,Fe,$r,ko,m,At,kr,Tr,Nt,Pr,zr,It,Sr,Ar,xt,Nr,Ir,we,xr,Ct,Cr,Gr,To,Oe,Hr,Po,P,Gt,Lr,Mr,_e,Rr,Ht,Fr,Or,Yr,Lt,Dr,zo,ee,qr,Mt,Br,jr,So;return ie=new be({}),re=new be({}),ne=new Rt({props:{code:`python -m pip install huggingface_hub
huggingface-cli login`,highlighted:`python -m pip install huggingface_hub
huggingface-cli login`}}),le=new be({}),ue=new be({}),ce=new Rt({props:{code:`git clone https://huggingface.co/<your-username>/<your-model-id>
cd <your-model-id>`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/&lt;your-username&gt;/&lt;your-model-id&gt;
<span class="hljs-built_in">cd</span> &lt;your-model-id&gt;`}}),pe=new be({}),me=new Rt({props:{code:"git lfs install",highlighted:"git lfs install"}}),ge=new Rt({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),de=new Rt({props:{code:`# Create any files you like! Then...
git add .
git commit -m "First model version"  # You can choose any descriptive message
git push`,highlighted:`<span class="hljs-comment"># Create any files you like! Then...</span>
git add .
git commit -m <span class="hljs-string">&quot;First model version&quot;</span>  <span class="hljs-comment"># You can choose any descriptive message</span>
git push`}}),ve=new be({}),ye=new be({}),{c(){A=i("meta"),Ft=u(),N=i("h1"),R=i("a"),je=i("span"),y(ie.$$.fragment),Xo=u(),Ue=i("span"),Jo=s("Getting Started with Repositories"),Ot=u(),Ee=i("p"),Ko=s("This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),Yt=u(),I=i("h2"),F=i("a"),Ve=i("span"),y(re.$$.fragment),Qo=u(),We=i("span"),Zo=s("Requirements"),Dt=u(),d=i("p"),ei=s("If you do not have "),Xe=i("code"),ti=s("git"),oi=s(" available as a CLI command yet, you will need to "),ae=i("a"),ii=s("install Git"),ri=s(" for your platform. You will also need to "),se=i("a"),ai=s("install Git LFS"),si=s(", which will be used to handle large files such as images and model weights."),qt=u(),O=i("p"),ni=s("To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),Y=i("a"),Je=i("code"),li=s("huggingface_hub"),hi=s(" CLI"),fi=s(" and running the login command:"),Bt=u(),y(ne.$$.fragment),jt=u(),D=i("p"),ui=s("The content in the "),Ke=i("strong"),ci=s("Getting Started"),pi=s(" section of this document is also available as a video!"),Ut=u(),g=i("iframe"),Vt=u(),x=i("h2"),q=i("a"),Qe=i("span"),y(le.$$.fragment),mi=u(),Ze=i("span"),gi=s("Creating a repository"),Wt=u(),B=i("p"),di=s("Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide we\u2019ll be creating a "),et=i("strong"),vi=s("model repository"),yi=s(" for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),Xt=u(),$e=i("ol"),he=i("li"),wi=s("To create a new repository, visit "),fe=i("a"),_i=s("huggingface.co/new"),bi=s(":"),Jt=u(),ke=i("p"),Te=i("img"),Kt=u(),C=i("ol"),tt=i("li"),ot=i("p"),Ei=s("First, specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),$i=u(),it=i("li"),rt=i("p"),ki=s("Next, enter your model\u2019s name. This will also be the name of the repository. Finally, you can specify whether you want your model to be public or private."),Qt=u(),k=i("p"),Ti=s("You can leave the "),at=i("em"),Pi=s("License"),zi=s(" field blank for now. To learn about licenses, visit the "),Pe=i("a"),st=i("strong"),Si=s("Licenses"),Ai=s(" section of this documentation."),Zt=u(),ze=i("p"),Ni=s("After creating your model repository, you should see a page like this:"),eo=u(),Se=i("p"),Ae=i("img"),to=u(),T=i("p"),Ii=s("Note that the Hub prompts you to create a "),nt=i("em"),xi=s("Model Card"),Ci=s(", which you can learn about in the "),Ne=i("a"),lt=i("strong"),Gi=s("Model Cards documentation"),Hi=s(". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),oo=u(),G=i("h2"),j=i("a"),ht=i("span"),y(ue.$$.fragment),Li=u(),ft=i("span"),Mi=s("Cloning repositories"),io=u(),U=i("p"),Ri=s("Downloading repositories to your local machine is called "),ut=i("em"),Fi=s("cloning"),Oi=s(". You can use the following commands to load the repo that we made and navigate to it:"),ro=u(),y(ce.$$.fragment),ao=u(),H=i("h2"),V=i("a"),ct=i("span"),y(pe.$$.fragment),Yi=u(),pt=i("span"),Di=s("Adding files to a repository"),so=u(),Ie=i("p"),qi=s("Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),no=u(),W=i("p"),Bi=s("Do you have files larger than 10MB? Those files should be tracked with "),mt=i("code"),ji=s("git-lfs"),Ui=s(", which you can initialize with:"),lo=u(),y(me.$$.fragment),ho=u(),X=i("p"),Vi=s("Note that if your files are larger than "),gt=i("strong"),Wi=s("5GB"),Xi=s(" you\u2019ll also need to run:"),fo=u(),y(ge.$$.fragment),uo=u(),v=i("p"),Ji=s("When you use Hugging Face to create a repository, we automatically provide a list of common file extensions for these files in the "),dt=i("code"),Ki=s(".gitattributes"),Qi=s(" file, which "),vt=i("code"),Zi=s("git-lfs"),er=s(" uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),yt=i("code"),tr=s('git lfs track "*.your_extension"'),or=s("."),co=u(),p=i("p"),ir=s("You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),wt=i("em"),rr=s("commit"),ar=s(", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, we have to "),_t=i("code"),sr=s("add"),nr=s(" the files to let Git know that we\u2019re planning on saving the changes and then "),bt=i("code"),lr=s("commit"),hr=s(" those changes. In order to sync the new commit with the Hugging Face Hub, we then "),Et=i("code"),fr=s("push"),ur=s(" the commit to the Hub."),po=u(),y(de.$$.fragment),mo=u(),J=i("p"),cr=s("And we\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that one of the files in this example has a size of "),$t=i("code"),pr=s("413 MB"),mr=s(", so the repo uses Git LFS to track it."),go=u(),xe=i("p"),Ce=i("img"),vo=u(),L=i("h2"),K=i("a"),kt=i("span"),y(ve.$$.fragment),gr=u(),Tt=i("span"),dr=s("Viewing a repo's history"),yo=s("\n\nEvery time you go through the `add`-`commit`-`push` cycle, the repo will keep track of every change you've made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as *diff*) introduced by each commit. To see the history, you can click on the **History: X commits** link.\n"),Ge=i("p"),He=i("img"),wo=u(),Le=i("p"),vr=s("You can click on an individual commit to see what changes that commit introduced:"),_o=u(),Me=i("p"),Re=i("img"),bo=u(),M=i("h2"),Q=i("a"),Pt=i("span"),y(ye.$$.fragment),yr=u(),zt=i("span"),wr=s("Renaming or transferring a repo"),Eo=u(),Z=i("p"),_r=s("If you own a repository, you will be able to visit the "),St=i("strong"),br=s("Settings"),Er=s(" tab to manage the name and ownership. Note that there are certain limitations in terms of use cases."),$o=u(),Fe=i("p"),$r=s("Moving can be used in these use cases \u2705"),ko=u(),m=i("ul"),At=i("li"),kr=s("Renaming a repository within same user."),Tr=u(),Nt=i("li"),Pr=s("Renaming a repository within same organization. The user must be part of the organization and have \u201Cwrite\u201D or \u201Cadmin\u201D rights in the organization."),zr=u(),It=i("li"),Sr=s("Transferring repository from user to an organization. The user must be part of the organization and have \u201Cwrite\u201D or \u201Cadmin\u201D rights in the organization."),Ar=u(),xt=i("li"),Nr=s("Transferring a repository from an organization to yourself. You must be part of the organization, and have \u201Cadmin\u201D rights in the organization."),Ir=u(),we=i("li"),xr=s("Transferring a repository from a source organization to another target organization. The user must have \u201Cadmin\u201D rights in the source organization "),Ct=i("strong"),Cr=s("and"),Gr=s(" either \u201Cwrite\u201D or \u201Cadmin\u201D rights in the target organization."),To=u(),Oe=i("p"),Hr=s("Moving does not work for \u274C"),Po=u(),P=i("ul"),Gt=i("li"),Lr=s("Transferring a repository from an organization to another user who is not yourself."),Mr=u(),_e=i("li"),Rr=s("Transferring a repository from a source organization to another target organization if the user does not have both \u201Cadmin\u201D rights in the source organization "),Ht=i("strong"),Fr=s("and"),Or=s(" either \u201Cwrite\u201D or \u201Cadmin\u201D rights in the target organization."),Yr=u(),Lt=i("li"),Dr=s("Transferring a repository from user A to user B."),zo=u(),ee=i("p"),qr=s("If these are use cases you need help with, please send us an email at "),Mt=i("strong"),Br=s("website at huggingface.co"),jr=s("."),this.h()},l(e){const l=_s('[data-svelte="svelte-1phssyn"]',document.head);A=r(l,"META",{name:!0,content:!0}),l.forEach(t),Ft=c(e),N=r(e,"H1",{class:!0});var Ao=a(N);R=r(Ao,"A",{id:!0,class:!0,href:!0});var ea=a(R);je=r(ea,"SPAN",{});var ta=a(je);w(ie.$$.fragment,ta),ta.forEach(t),ea.forEach(t),Xo=c(Ao),Ue=r(Ao,"SPAN",{});var oa=a(Ue);Jo=n(oa,"Getting Started with Repositories"),oa.forEach(t),Ao.forEach(t),Ot=c(e),Ee=r(e,"P",{});var ia=a(Ee);Ko=n(ia,"This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),ia.forEach(t),Yt=c(e),I=r(e,"H2",{class:!0});var No=a(I);F=r(No,"A",{id:!0,class:!0,href:!0});var ra=a(F);Ve=r(ra,"SPAN",{});var aa=a(Ve);w(re.$$.fragment,aa),aa.forEach(t),ra.forEach(t),Qo=c(No),We=r(No,"SPAN",{});var sa=a(We);Zo=n(sa,"Requirements"),sa.forEach(t),No.forEach(t),Dt=c(e),d=r(e,"P",{});var te=a(d);ei=n(te,"If you do not have "),Xe=r(te,"CODE",{});var na=a(Xe);ti=n(na,"git"),na.forEach(t),oi=n(te," available as a CLI command yet, you will need to "),ae=r(te,"A",{href:!0,rel:!0});var la=a(ae);ii=n(la,"install Git"),la.forEach(t),ri=n(te," for your platform. You will also need to "),se=r(te,"A",{href:!0,rel:!0});var ha=a(se);ai=n(ha,"install Git LFS"),ha.forEach(t),si=n(te,", which will be used to handle large files such as images and model weights."),te.forEach(t),qt=c(e),O=r(e,"P",{});var Io=a(O);ni=n(Io,"To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),Y=r(Io,"A",{href:!0,rel:!0});var Ur=a(Y);Je=r(Ur,"CODE",{});var fa=a(Je);li=n(fa,"huggingface_hub"),fa.forEach(t),hi=n(Ur," CLI"),Ur.forEach(t),fi=n(Io," and running the login command:"),Io.forEach(t),Bt=c(e),w(ne.$$.fragment,e),jt=c(e),D=r(e,"P",{});var xo=a(D);ui=n(xo,"The content in the "),Ke=r(xo,"STRONG",{});var ua=a(Ke);ci=n(ua,"Getting Started"),ua.forEach(t),pi=n(xo," section of this document is also available as a video!"),xo.forEach(t),Ut=c(e),g=r(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),a(g).forEach(t),Vt=c(e),x=r(e,"H2",{class:!0});var Co=a(x);q=r(Co,"A",{id:!0,class:!0,href:!0});var ca=a(q);Qe=r(ca,"SPAN",{});var pa=a(Qe);w(le.$$.fragment,pa),pa.forEach(t),ca.forEach(t),mi=c(Co),Ze=r(Co,"SPAN",{});var ma=a(Ze);gi=n(ma,"Creating a repository"),ma.forEach(t),Co.forEach(t),Wt=c(e),B=r(e,"P",{});var Go=a(B);di=n(Go,"Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide we\u2019ll be creating a "),et=r(Go,"STRONG",{});var ga=a(et);vi=n(ga,"model repository"),ga.forEach(t),yi=n(Go," for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),Go.forEach(t),Xt=c(e),$e=r(e,"OL",{});var da=a($e);he=r(da,"LI",{});var Ho=a(he);wi=n(Ho,"To create a new repository, visit "),fe=r(Ho,"A",{href:!0,rel:!0});var va=a(fe);_i=n(va,"huggingface.co/new"),va.forEach(t),bi=n(Ho,":"),Ho.forEach(t),da.forEach(t),Jt=c(e),ke=r(e,"P",{});var ya=a(ke);Te=r(ya,"IMG",{src:!0,alt:!0}),ya.forEach(t),Kt=c(e),C=r(e,"OL",{start:!0});var Lo=a(C);tt=r(Lo,"LI",{});var wa=a(tt);ot=r(wa,"P",{});var _a=a(ot);Ei=n(_a,"First, specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),_a.forEach(t),wa.forEach(t),$i=c(Lo),it=r(Lo,"LI",{});var ba=a(it);rt=r(ba,"P",{});var Ea=a(rt);ki=n(Ea,"Next, enter your model\u2019s name. This will also be the name of the repository. Finally, you can specify whether you want your model to be public or private."),Ea.forEach(t),ba.forEach(t),Lo.forEach(t),Qt=c(e),k=r(e,"P",{});var Ye=a(k);Ti=n(Ye,"You can leave the "),at=r(Ye,"EM",{});var $a=a(at);Pi=n($a,"License"),$a.forEach(t),zi=n(Ye," field blank for now. To learn about licenses, visit the "),Pe=r(Ye,"A",{href:!0});var ka=a(Pe);st=r(ka,"STRONG",{});var Ta=a(st);Si=n(Ta,"Licenses"),Ta.forEach(t),ka.forEach(t),Ai=n(Ye," section of this documentation."),Ye.forEach(t),Zt=c(e),ze=r(e,"P",{});var Pa=a(ze);Ni=n(Pa,"After creating your model repository, you should see a page like this:"),Pa.forEach(t),eo=c(e),Se=r(e,"P",{});var za=a(Se);Ae=r(za,"IMG",{src:!0,alt:!0}),za.forEach(t),to=c(e),T=r(e,"P",{});var De=a(T);Ii=n(De,"Note that the Hub prompts you to create a "),nt=r(De,"EM",{});var Sa=a(nt);xi=n(Sa,"Model Card"),Sa.forEach(t),Ci=n(De,", which you can learn about in the "),Ne=r(De,"A",{href:!0});var Aa=a(Ne);lt=r(Aa,"STRONG",{});var Na=a(lt);Gi=n(Na,"Model Cards documentation"),Na.forEach(t),Aa.forEach(t),Hi=n(De,". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),De.forEach(t),oo=c(e),G=r(e,"H2",{class:!0});var Mo=a(G);j=r(Mo,"A",{id:!0,class:!0,href:!0});var Ia=a(j);ht=r(Ia,"SPAN",{});var xa=a(ht);w(ue.$$.fragment,xa),xa.forEach(t),Ia.forEach(t),Li=c(Mo),ft=r(Mo,"SPAN",{});var Ca=a(ft);Mi=n(Ca,"Cloning repositories"),Ca.forEach(t),Mo.forEach(t),io=c(e),U=r(e,"P",{});var Ro=a(U);Ri=n(Ro,"Downloading repositories to your local machine is called "),ut=r(Ro,"EM",{});var Ga=a(ut);Fi=n(Ga,"cloning"),Ga.forEach(t),Oi=n(Ro,". You can use the following commands to load the repo that we made and navigate to it:"),Ro.forEach(t),ro=c(e),w(ce.$$.fragment,e),ao=c(e),H=r(e,"H2",{class:!0});var Fo=a(H);V=r(Fo,"A",{id:!0,class:!0,href:!0});var Ha=a(V);ct=r(Ha,"SPAN",{});var La=a(ct);w(pe.$$.fragment,La),La.forEach(t),Ha.forEach(t),Yi=c(Fo),pt=r(Fo,"SPAN",{});var Ma=a(pt);Di=n(Ma,"Adding files to a repository"),Ma.forEach(t),Fo.forEach(t),so=c(e),Ie=r(e,"P",{});var Ra=a(Ie);qi=n(Ra,"Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),Ra.forEach(t),no=c(e),W=r(e,"P",{});var Oo=a(W);Bi=n(Oo,"Do you have files larger than 10MB? Those files should be tracked with "),mt=r(Oo,"CODE",{});var Fa=a(mt);ji=n(Fa,"git-lfs"),Fa.forEach(t),Ui=n(Oo,", which you can initialize with:"),Oo.forEach(t),lo=c(e),w(me.$$.fragment,e),ho=c(e),X=r(e,"P",{});var Yo=a(X);Vi=n(Yo,"Note that if your files are larger than "),gt=r(Yo,"STRONG",{});var Oa=a(gt);Wi=n(Oa,"5GB"),Oa.forEach(t),Xi=n(Yo," you\u2019ll also need to run:"),Yo.forEach(t),fo=c(e),w(ge.$$.fragment,e),uo=c(e),v=r(e,"P",{});var oe=a(v);Ji=n(oe,"When you use Hugging Face to create a repository, we automatically provide a list of common file extensions for these files in the "),dt=r(oe,"CODE",{});var Ya=a(dt);Ki=n(Ya,".gitattributes"),Ya.forEach(t),Qi=n(oe," file, which "),vt=r(oe,"CODE",{});var Da=a(vt);Zi=n(Da,"git-lfs"),Da.forEach(t),er=n(oe," uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),yt=r(oe,"CODE",{});var qa=a(yt);tr=n(qa,'git lfs track "*.your_extension"'),qa.forEach(t),or=n(oe,"."),oe.forEach(t),co=c(e),p=r(e,"P",{});var z=a(p);ir=n(z,"You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),wt=r(z,"EM",{});var Ba=a(wt);rr=n(Ba,"commit"),Ba.forEach(t),ar=n(z,", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, we have to "),_t=r(z,"CODE",{});var ja=a(_t);sr=n(ja,"add"),ja.forEach(t),nr=n(z," the files to let Git know that we\u2019re planning on saving the changes and then "),bt=r(z,"CODE",{});var Ua=a(bt);lr=n(Ua,"commit"),Ua.forEach(t),hr=n(z," those changes. In order to sync the new commit with the Hugging Face Hub, we then "),Et=r(z,"CODE",{});var Va=a(Et);fr=n(Va,"push"),Va.forEach(t),ur=n(z," the commit to the Hub."),z.forEach(t),po=c(e),w(de.$$.fragment,e),mo=c(e),J=r(e,"P",{});var Do=a(J);cr=n(Do,"And we\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that one of the files in this example has a size of "),$t=r(Do,"CODE",{});var Wa=a($t);pr=n(Wa,"413 MB"),Wa.forEach(t),mr=n(Do,", so the repo uses Git LFS to track it."),Do.forEach(t),go=c(e),xe=r(e,"P",{});var Xa=a(xe);Ce=r(Xa,"IMG",{src:!0,alt:!0}),Xa.forEach(t),vo=c(e),L=r(e,"H2",{class:!0});var qo=a(L);K=r(qo,"A",{id:!0,class:!0,href:!0});var Ja=a(K);kt=r(Ja,"SPAN",{});var Ka=a(kt);w(ve.$$.fragment,Ka),Ka.forEach(t),Ja.forEach(t),gr=c(qo),Tt=r(qo,"SPAN",{});var Qa=a(Tt);dr=n(Qa,"Viewing a repo's history"),Qa.forEach(t),qo.forEach(t),yo=n(e,"\n\nEvery time you go through the `add`-`commit`-`push` cycle, the repo will keep track of every change you've made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as *diff*) introduced by each commit. To see the history, you can click on the **History: X commits** link.\n"),Ge=r(e,"P",{});var Za=a(Ge);He=r(Za,"IMG",{src:!0,alt:!0}),Za.forEach(t),wo=c(e),Le=r(e,"P",{});var es=a(Le);vr=n(es,"You can click on an individual commit to see what changes that commit introduced:"),es.forEach(t),_o=c(e),Me=r(e,"P",{});var ts=a(Me);Re=r(ts,"IMG",{src:!0,alt:!0}),ts.forEach(t),bo=c(e),M=r(e,"H2",{class:!0});var Bo=a(M);Q=r(Bo,"A",{id:!0,class:!0,href:!0});var os=a(Q);Pt=r(os,"SPAN",{});var is=a(Pt);w(ye.$$.fragment,is),is.forEach(t),os.forEach(t),yr=c(Bo),zt=r(Bo,"SPAN",{});var rs=a(zt);wr=n(rs,"Renaming or transferring a repo"),rs.forEach(t),Bo.forEach(t),Eo=c(e),Z=r(e,"P",{});var jo=a(Z);_r=n(jo,"If you own a repository, you will be able to visit the "),St=r(jo,"STRONG",{});var as=a(St);br=n(as,"Settings"),as.forEach(t),Er=n(jo," tab to manage the name and ownership. Note that there are certain limitations in terms of use cases."),jo.forEach(t),$o=c(e),Fe=r(e,"P",{});var ss=a(Fe);$r=n(ss,"Moving can be used in these use cases \u2705"),ss.forEach(t),ko=c(e),m=r(e,"UL",{});var S=a(m);At=r(S,"LI",{});var ns=a(At);kr=n(ns,"Renaming a repository within same user."),ns.forEach(t),Tr=c(S),Nt=r(S,"LI",{});var ls=a(Nt);Pr=n(ls,"Renaming a repository within same organization. The user must be part of the organization and have \u201Cwrite\u201D or \u201Cadmin\u201D rights in the organization."),ls.forEach(t),zr=c(S),It=r(S,"LI",{});var hs=a(It);Sr=n(hs,"Transferring repository from user to an organization. The user must be part of the organization and have \u201Cwrite\u201D or \u201Cadmin\u201D rights in the organization."),hs.forEach(t),Ar=c(S),xt=r(S,"LI",{});var fs=a(xt);Nr=n(fs,"Transferring a repository from an organization to yourself. You must be part of the organization, and have \u201Cadmin\u201D rights in the organization."),fs.forEach(t),Ir=c(S),we=r(S,"LI",{});var Uo=a(we);xr=n(Uo,"Transferring a repository from a source organization to another target organization. The user must have \u201Cadmin\u201D rights in the source organization "),Ct=r(Uo,"STRONG",{});var us=a(Ct);Cr=n(us,"and"),us.forEach(t),Gr=n(Uo," either \u201Cwrite\u201D or \u201Cadmin\u201D rights in the target organization."),Uo.forEach(t),S.forEach(t),To=c(e),Oe=r(e,"P",{});var cs=a(Oe);Hr=n(cs,"Moving does not work for \u274C"),cs.forEach(t),Po=c(e),P=r(e,"UL",{});var qe=a(P);Gt=r(qe,"LI",{});var ps=a(Gt);Lr=n(ps,"Transferring a repository from an organization to another user who is not yourself."),ps.forEach(t),Mr=c(qe),_e=r(qe,"LI",{});var Vo=a(_e);Rr=n(Vo,"Transferring a repository from a source organization to another target organization if the user does not have both \u201Cadmin\u201D rights in the source organization "),Ht=r(Vo,"STRONG",{});var ms=a(Ht);Fr=n(ms,"and"),ms.forEach(t),Or=n(Vo," either \u201Cwrite\u201D or \u201Cadmin\u201D rights in the target organization."),Vo.forEach(t),Yr=c(qe),Lt=r(qe,"LI",{});var gs=a(Lt);Dr=n(gs,"Transferring a repository from user A to user B."),gs.forEach(t),qe.forEach(t),zo=c(e),ee=r(e,"P",{});var Wo=a(ee);qr=n(Wo,"If these are use cases you need help with, please send us an email at "),Mt=r(Wo,"STRONG",{});var ds=a(Mt);Br=n(ds,"website at huggingface.co"),ds.forEach(t),jr=n(Wo,"."),Wo.forEach(t),this.h()},h(){f(A,"name","hf:doc:metadata"),f(A,"content",JSON.stringify(ks)),f(R,"id","getting-started-with-repositories"),f(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(R,"href","#getting-started-with-repositories"),f(N,"class","relative group"),f(F,"id","requirements"),f(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(F,"href","#requirements"),f(I,"class","relative group"),f(ae,"href","https://git-scm.com/downloads"),f(ae,"rel","nofollow"),f(se,"href","https://git-lfs.github.com/"),f(se,"rel","nofollow"),f(Y,"href","https://huggingface.co/docs/huggingface_hub/index"),f(Y,"rel","nofollow"),f(g,"width","560"),f(g,"height","315"),Be(g.src,Wr="https://www.youtube-nocookie.com/embed/rkCly_cbMBk")||f(g,"src",Wr),f(g,"title","Managing a repo"),f(g,"frameborder","0"),f(g,"allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"),g.allowFullscreen=!0,f(q,"id","creating-a-repository"),f(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(q,"href","#creating-a-repository"),f(x,"class","relative group"),f(fe,"href","http://huggingface.co/new"),f(fe,"rel","nofollow"),Be(Te.src,Xr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo.png")||f(Te,"src",Xr),f(Te,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo.png"),f(C,"start","2"),f(Pe,"href","repositories-best-practices#Licenses"),Be(Ae.src,Jr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo.png")||f(Ae,"src",Jr),f(Ae,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo.png"),f(Ne,"href","./models-cards"),f(j,"id","cloning-repositories"),f(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(j,"href","#cloning-repositories"),f(G,"class","relative group"),f(V,"id","adding-files-to-a-repository"),f(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(V,"href","#adding-files-to-a-repository"),f(H,"class","relative group"),Be(Ce.src,Kr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files.png")||f(Ce,"src",Kr),f(Ce,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files.png"),f(K,"id","viewing-a-repos-history"),f(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(K,"href","#viewing-a-repos-history"),f(L,"class","relative group"),Be(He.src,Qr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history.png")||f(He,"src",Qr),f(He,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history.png"),Be(Re.src,Zr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history.gif")||f(Re,"src",Zr),f(Re,"alt","https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history.gif"),f(Q,"id","renaming-or-transferring-a-repo"),f(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Q,"href","#renaming-or-transferring-a-repo"),f(M,"class","relative group")},m(e,l){o(document.head,A),h(e,Ft,l),h(e,N,l),o(N,R),o(R,je),_(ie,je,null),o(N,Xo),o(N,Ue),o(Ue,Jo),h(e,Ot,l),h(e,Ee,l),o(Ee,Ko),h(e,Yt,l),h(e,I,l),o(I,F),o(F,Ve),_(re,Ve,null),o(I,Qo),o(I,We),o(We,Zo),h(e,Dt,l),h(e,d,l),o(d,ei),o(d,Xe),o(Xe,ti),o(d,oi),o(d,ae),o(ae,ii),o(d,ri),o(d,se),o(se,ai),o(d,si),h(e,qt,l),h(e,O,l),o(O,ni),o(O,Y),o(Y,Je),o(Je,li),o(Y,hi),o(O,fi),h(e,Bt,l),_(ne,e,l),h(e,jt,l),h(e,D,l),o(D,ui),o(D,Ke),o(Ke,ci),o(D,pi),h(e,Ut,l),h(e,g,l),h(e,Vt,l),h(e,x,l),o(x,q),o(q,Qe),_(le,Qe,null),o(x,mi),o(x,Ze),o(Ze,gi),h(e,Wt,l),h(e,B,l),o(B,di),o(B,et),o(et,vi),o(B,yi),h(e,Xt,l),h(e,$e,l),o($e,he),o(he,wi),o(he,fe),o(fe,_i),o(he,bi),h(e,Jt,l),h(e,ke,l),o(ke,Te),h(e,Kt,l),h(e,C,l),o(C,tt),o(tt,ot),o(ot,Ei),o(C,$i),o(C,it),o(it,rt),o(rt,ki),h(e,Qt,l),h(e,k,l),o(k,Ti),o(k,at),o(at,Pi),o(k,zi),o(k,Pe),o(Pe,st),o(st,Si),o(k,Ai),h(e,Zt,l),h(e,ze,l),o(ze,Ni),h(e,eo,l),h(e,Se,l),o(Se,Ae),h(e,to,l),h(e,T,l),o(T,Ii),o(T,nt),o(nt,xi),o(T,Ci),o(T,Ne),o(Ne,lt),o(lt,Gi),o(T,Hi),h(e,oo,l),h(e,G,l),o(G,j),o(j,ht),_(ue,ht,null),o(G,Li),o(G,ft),o(ft,Mi),h(e,io,l),h(e,U,l),o(U,Ri),o(U,ut),o(ut,Fi),o(U,Oi),h(e,ro,l),_(ce,e,l),h(e,ao,l),h(e,H,l),o(H,V),o(V,ct),_(pe,ct,null),o(H,Yi),o(H,pt),o(pt,Di),h(e,so,l),h(e,Ie,l),o(Ie,qi),h(e,no,l),h(e,W,l),o(W,Bi),o(W,mt),o(mt,ji),o(W,Ui),h(e,lo,l),_(me,e,l),h(e,ho,l),h(e,X,l),o(X,Vi),o(X,gt),o(gt,Wi),o(X,Xi),h(e,fo,l),_(ge,e,l),h(e,uo,l),h(e,v,l),o(v,Ji),o(v,dt),o(dt,Ki),o(v,Qi),o(v,vt),o(vt,Zi),o(v,er),o(v,yt),o(yt,tr),o(v,or),h(e,co,l),h(e,p,l),o(p,ir),o(p,wt),o(wt,rr),o(p,ar),o(p,_t),o(_t,sr),o(p,nr),o(p,bt),o(bt,lr),o(p,hr),o(p,Et),o(Et,fr),o(p,ur),h(e,po,l),_(de,e,l),h(e,mo,l),h(e,J,l),o(J,cr),o(J,$t),o($t,pr),o(J,mr),h(e,go,l),h(e,xe,l),o(xe,Ce),h(e,vo,l),h(e,L,l),o(L,K),o(K,kt),_(ve,kt,null),o(L,gr),o(L,Tt),o(Tt,dr),h(e,yo,l),h(e,Ge,l),o(Ge,He),h(e,wo,l),h(e,Le,l),o(Le,vr),h(e,_o,l),h(e,Me,l),o(Me,Re),h(e,bo,l),h(e,M,l),o(M,Q),o(Q,Pt),_(ye,Pt,null),o(M,yr),o(M,zt),o(zt,wr),h(e,Eo,l),h(e,Z,l),o(Z,_r),o(Z,St),o(St,br),o(Z,Er),h(e,$o,l),h(e,Fe,l),o(Fe,$r),h(e,ko,l),h(e,m,l),o(m,At),o(At,kr),o(m,Tr),o(m,Nt),o(Nt,Pr),o(m,zr),o(m,It),o(It,Sr),o(m,Ar),o(m,xt),o(xt,Nr),o(m,Ir),o(m,we),o(we,xr),o(we,Ct),o(Ct,Cr),o(we,Gr),h(e,To,l),h(e,Oe,l),o(Oe,Hr),h(e,Po,l),h(e,P,l),o(P,Gt),o(Gt,Lr),o(P,Mr),o(P,_e),o(_e,Rr),o(_e,Ht),o(Ht,Fr),o(_e,Or),o(P,Yr),o(P,Lt),o(Lt,Dr),h(e,zo,l),h(e,ee,l),o(ee,qr),o(ee,Mt),o(Mt,Br),o(ee,jr),So=!0},p:bs,i(e){So||(b(ie.$$.fragment,e),b(re.$$.fragment,e),b(ne.$$.fragment,e),b(le.$$.fragment,e),b(ue.$$.fragment,e),b(ce.$$.fragment,e),b(pe.$$.fragment,e),b(me.$$.fragment,e),b(ge.$$.fragment,e),b(de.$$.fragment,e),b(ve.$$.fragment,e),b(ye.$$.fragment,e),So=!0)},o(e){E(ie.$$.fragment,e),E(re.$$.fragment,e),E(ne.$$.fragment,e),E(le.$$.fragment,e),E(ue.$$.fragment,e),E(ce.$$.fragment,e),E(pe.$$.fragment,e),E(me.$$.fragment,e),E(ge.$$.fragment,e),E(de.$$.fragment,e),E(ve.$$.fragment,e),E(ye.$$.fragment,e),So=!1},d(e){t(A),e&&t(Ft),e&&t(N),$(ie),e&&t(Ot),e&&t(Ee),e&&t(Yt),e&&t(I),$(re),e&&t(Dt),e&&t(d),e&&t(qt),e&&t(O),e&&t(Bt),$(ne,e),e&&t(jt),e&&t(D),e&&t(Ut),e&&t(g),e&&t(Vt),e&&t(x),$(le),e&&t(Wt),e&&t(B),e&&t(Xt),e&&t($e),e&&t(Jt),e&&t(ke),e&&t(Kt),e&&t(C),e&&t(Qt),e&&t(k),e&&t(Zt),e&&t(ze),e&&t(eo),e&&t(Se),e&&t(to),e&&t(T),e&&t(oo),e&&t(G),$(ue),e&&t(io),e&&t(U),e&&t(ro),$(ce,e),e&&t(ao),e&&t(H),$(pe),e&&t(so),e&&t(Ie),e&&t(no),e&&t(W),e&&t(lo),$(me,e),e&&t(ho),e&&t(X),e&&t(fo),$(ge,e),e&&t(uo),e&&t(v),e&&t(co),e&&t(p),e&&t(po),$(de,e),e&&t(mo),e&&t(J),e&&t(go),e&&t(xe),e&&t(vo),e&&t(L),$(ve),e&&t(yo),e&&t(Ge),e&&t(wo),e&&t(Le),e&&t(_o),e&&t(Me),e&&t(bo),e&&t(M),$(ye),e&&t(Eo),e&&t(Z),e&&t($o),e&&t(Fe),e&&t(ko),e&&t(m),e&&t(To),e&&t(Oe),e&&t(Po),e&&t(P),e&&t(zo),e&&t(ee)}}}const ks={local:"getting-started-with-repositories",sections:[{local:"requirements",title:"Requirements"},{local:"creating-a-repository",title:"Creating a repository"},{local:"cloning-repositories",title:"Cloning repositories"},{local:"adding-files-to-a-repository",title:"Adding files to a repository"},{local:"viewing-a-repos-history",title:"Viewing a repo's history"},{local:"renaming-or-transferring-a-repo",title:"Renaming or transferring a repo"}],title:"Getting Started with Repositories"};function Ts(Vr){return Es(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class As extends vs{constructor(A){super();ys(this,A,Ts,$s,ws,{})}}export{As as default,ks as metadata};
