import{S as ti,i as oi,s as ai,e as a,k as u,w as c,t as l,N as ri,c as r,d as t,m as f,a as i,x as g,h as n,b as h,F as o,g as p,y as m,L as ii,q as d,o as y,B as w,v as si}from"../chunks/vendor-e46c3074.js";import{I as X}from"../chunks/IconCopyLink-380c1989.js";import{C as Pe}from"../chunks/CodeBlock-8e2273c8.js";function li(Ja){let G,$t,A,I,qe,Z,yo,Ue,wo,_t,xe,vo,Et,S,C,Ye,ee,bo,Me,ko,Gt,b,$o,te,_o,Eo,oe,Go,Ao,At,L,O,We,ae,So,Je,Lo,St,k,Po,ze,xo,Fo,re,jo,Ho,Lt,D,No,ie,To,Io,Pt,P,B,Ke,se,Co,Qe,Oo,xt,$,Do,Ve,Bo,Ro,le,qo,Uo,Ft,v,Yo,ne,Mo,Wo,Xe,Jo,zo,he,Ko,Qo,jt,x,R,Ze,pe,Vo,et,Xo,Ht,Fe,Zo,Nt,F,q,tt,ue,ea,ot,ta,Tt,_,oa,fe,aa,ra,je,ia,sa,It,j,U,at,ce,la,rt,na,Ct,Y,ha,it,pa,ua,Ot,H,N,fa,ge,ca,ga,M,st,ma,da,ya,wa,me,va,ba,Dt,E,ka,lt,$a,_a,nt,Ea,Ga,Bt,W,ht,J,Aa,pt,Sa,La,de,Pa,xa,ut,ft,Fa,Rt,ye,qt,we,ct,ja,Ut,ve,Yt,be,gt,Ha,Mt,ke,Wt,He,Na,Jt,$e,zt,Ne,Ta,Kt,_e,Qt,Ee,mt,Ia,Vt,Ge,Xt,Ae,dt,Ca,Zt,Se,eo,Te,Oa,to,T,z,yt,Le,Da,wt,Ba,oo,K,Ra,Q,vt,qa,Ua,Ya,ao;return Z=new X({}),ee=new X({}),ae=new X({}),se=new X({}),pe=new X({}),ue=new X({}),ce=new X({}),ye=new Pe({props:{code:"git lfs clone https://huggingface.co/me/myfork.git",highlighted:'git lfs clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/me/my</span>fork.git'}}),ve=new Pe({props:{code:`cd myfork
git lfs install --skip-smudge --local # affects only this clone
git remote add upstream https://huggingface.co/friend/upstream.git
git fetch upstream`,highlighted:`cd myfork
git lfs install --skip-smudge --local <span class="hljs-comment"># affects only this clone</span>
git remote add upstream https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/friend/u</span>pstream.git
git fetch upstream`}}),ke=new Pe({props:{code:"git lfs fetch --all upstream # this can take time depending on your download bandwidth",highlighted:'<span class="hljs-string">git</span> <span class="hljs-string">lfs</span> <span class="hljs-string">fetch</span> <span class="hljs-built_in">--all</span> <span class="hljs-string">upstream</span> <span class="hljs-comment"># this can take time depending on your download bandwidth</span>'}}),$e=new Pe({props:{code:"git reset --hard upstream/main",highlighted:'git reset <span class="hljs-attr">--hard</span> upstream/<span class="hljs-selector-tag">main</span>'}}),_e=new Pe({props:{code:"git rebase upstream/main",highlighted:"git rebase upstream/main"}}),Ge=new Pe({props:{code:`git lfs install --force --local # this reinstalls the LFS hooks
huggingface-cli lfs-enable-largefiles . # needed if some files are bigger than 5Gb`,highlighted:`<span class="hljs-string">git</span> <span class="hljs-string">lfs</span> <span class="hljs-string">install</span> <span class="hljs-built_in">--force</span> <span class="hljs-built_in">--local</span> <span class="hljs-comment"># this reinstalls the LFS hooks</span>
<span class="hljs-string">huggingface-cli</span> <span class="hljs-string">lfs-enable-largefiles</span> . <span class="hljs-comment"># needed if some files are bigger than 5Gb</span>`}}),Se=new Pe({props:{code:"git push --force origin main # this can take time depending on your upload bandwidth",highlighted:'git <span class="hljs-keyword">push</span> --<span class="hljs-literal">force</span> origin main <span class="hljs-comment"># this can take time depending on your upload bandwidth</span>'}}),Le=new X({}),{c(){G=a("meta"),$t=u(),A=a("h1"),I=a("a"),qe=a("span"),c(Z.$$.fragment),yo=u(),Ue=a("span"),wo=l("Next steps"),_t=u(),xe=a("p"),vo=l("These next sections highlight features and additional information that you may find useful to make the most out of the Git repositories on the Hugging Face Hub."),Et=u(),S=a("h2"),C=a("a"),Ye=a("span"),c(ee.$$.fragment),bo=u(),Me=a("span"),ko=l("Learning more about Git"),Gt=u(),b=a("p"),$o=l("A good place to visit if you want to continue learning about Git is "),te=a("a"),_o=l("this Git tutorial"),Eo=l(". For even more background on Git, you can take a look at "),oe=a("a"),Go=l("GitHub\u2019s Git Guides"),Ao=l("."),At=u(),L=a("h2"),O=a("a"),We=a("span"),c(ae.$$.fragment),So=u(),Je=a("span"),Lo=l("How to use branches"),St=u(),k=a("p"),Po=l("To effectively use Git repos collaboratively and to work on features without releasing premature code you can use "),ze=a("strong"),xo=l("branches"),Fo=l(". Branches allow you to separate your \u201Cwork in progress\u201D code from your \u201Cproduction-ready\u201D code, with the additional benefit of letting multiple people work on a project without frequently conflicting with each others\u2019 contributions. You can use branches to isolate experiments in their own branch, and even "),re=a("a"),jo=l("adopt team-wide practices for managing branches"),Ho=l("."),Lt=u(),D=a("p"),No=l("To learn about Git branching, you can try out the "),ie=a("a"),To=l("Learn Git Branching interactive tutorial"),Io=l("."),Pt=u(),P=a("h2"),B=a("a"),Ke=a("span"),c(se.$$.fragment),Co=u(),Qe=a("span"),Oo=l("Using tags"),xt=u(),$=a("p"),Do=l("Git allows you to "),Ve=a("em"),Bo=l("tag"),Ro=l(" commits so that you can easily note milestones in your project. As such, you can use tags to mark commits in your Hub repos! To learn about using tags, you can visit "),le=a("a"),qo=l("this DevConnected post"),Uo=l("."),Ft=u(),v=a("p"),Yo=l("Beyond making it easy to identify important commits in your repo\u2019s history, using Git tags also allows you to "),ne=a("a"),Mo=l("clone a repository at a specific tag"),Wo=l(". The "),Xe=a("code"),Jo=l("huggingface_hub"),zo=l(" library also supports working with tags, such as "),he=a("a"),Ko=l("downloading files from a specific tagged commit"),Qo=l("."),jt=u(),x=a("h2"),R=a("a"),Ze=a("span"),c(pe.$$.fragment),Vo=u(),et=a("span"),Xo=l("How to duplicate or fork a repo (including LFS pointers)"),Ht=u(),Fe=a("p"),Zo=l("If you\u2019d like to copy a repository, depending on whether you want to preserve the Git history there are two options."),Nt=u(),F=a("h3"),q=a("a"),tt=a("span"),c(ue.$$.fragment),ea=u(),ot=a("span"),ta=l("Duplicating without Git history"),Tt=u(),_=a("p"),oa=l("In many scenarios, if you want your own copy of a particular codebase you might not be concerned about the previous Git history. In this case, you can quickly duplicate a repo with the handy "),fe=a("a"),aa=l("Repo Duplicator"),ra=l("! You\u2019ll have to create a User Access Token, which you can read more about in the "),je=a("a"),ia=l("security documentation"),sa=l("."),It=u(),j=a("h3"),U=a("a"),at=a("span"),c(ce.$$.fragment),la=u(),rt=a("span"),na=l("Duplicating with the Git history (Fork)"),Ct=u(),Y=a("p"),ha=l("A duplicate of a repository with the commit history preserved is called a "),it=a("em"),pa=l("fork"),ua=l(". You may choose to fork one of your own repos, but it also common to fork other people\u2019s projects if you would like to tinker with them."),Ot=u(),H=a("p"),N=a("strong"),fa=l("Note that you will need to "),ge=a("a"),ca=l("install Git LFS"),ga=l(" and the "),M=a("a"),st=a("code"),ma=l("huggingface_hub"),da=l(" CLI"),ya=l(" to follow this process"),wa=l(". When you want to fork or "),me=a("a"),va=l("rebase"),ba=l(" a repository with LFS files you cannot use the usual Git approach that you might be familiar with since you need to be careful to not break the LFS pointers. Forking can take time depending on your bandwidth because you will have to fetch and re-upload all the LFS files in your fork."),Dt=u(),E=a("p"),ka=l("For example, say you have an upstream repository, "),lt=a("strong"),$a=l("upstream"),_a=l(", and you just created your own repository on the Hub which is "),nt=a("strong"),Ea=l("myfork"),Ga=l(" in this example."),Bt=u(),W=a("ol"),ht=a("li"),J=a("p"),Aa=l("Create a destination repository (e.g. "),pt=a("strong"),Sa=l("myfork"),La=l(") in "),de=a("a"),Pa=l("https://huggingface.co"),xa=u(),ut=a("li"),ft=a("p"),Fa=l("Clone your fork repository:"),Rt=u(),c(ye.$$.fragment),qt=u(),we=a("ol"),ct=a("li"),ja=l("Fetch non LFS files:"),Ut=u(),c(ve.$$.fragment),Yt=u(),be=a("ol"),gt=a("li"),Ha=l("Fetch large files. This can take some time depending on your download bandwidth:"),Mt=u(),c(ke.$$.fragment),Wt=u(),He=a("p"),Na=l("4.a. If you want to completely override the fork history (which should only have an initial commit), run:"),Jt=u(),c($e.$$.fragment),zt=u(),Ne=a("p"),Ta=l("4.b. If you want to rebase instead of overriding, run the following command and resolve any conflicts:"),Kt=u(),c(_e.$$.fragment),Qt=u(),Ee=a("ol"),mt=a("li"),Ia=l("Prepare your LFS files to push:"),Vt=u(),c(Ge.$$.fragment),Xt=u(),Ae=a("ol"),dt=a("li"),Ca=l("And finally push:"),Zt=u(),c(Se.$$.fragment),eo=u(),Te=a("p"),Oa=l("Now you have your own fork or rebased repo in the Hub!"),to=u(),T=a("h2"),z=a("a"),yt=a("span"),c(Le.$$.fragment),Da=u(),wt=a("span"),Ba=l("How to programmatically manage repositories"),oo=u(),K=a("p"),Ra=l("So far, we\u2019ve looked at using the Git CLI and the Hugging Face Hub to work with our repos. But Hugging Face also supports accessing repos with Python via the "),Q=a("a"),vt=a("code"),qa=l("huggingface_hub"),Ua=l(" library"),Ya=l(". The operations that we\u2019ve explored such as downloading repositories and uploading files are available through the library, as well as other useful functions!"),this.h()},l(e){const s=ri('[data-svelte="svelte-1phssyn"]',document.head);G=r(s,"META",{name:!0,content:!0}),s.forEach(t),$t=f(e),A=r(e,"H1",{class:!0});var ro=i(A);I=r(ro,"A",{id:!0,class:!0,href:!0});var za=i(I);qe=r(za,"SPAN",{});var Ka=i(qe);g(Z.$$.fragment,Ka),Ka.forEach(t),za.forEach(t),yo=f(ro),Ue=r(ro,"SPAN",{});var Qa=i(Ue);wo=n(Qa,"Next steps"),Qa.forEach(t),ro.forEach(t),_t=f(e),xe=r(e,"P",{});var Va=i(xe);vo=n(Va,"These next sections highlight features and additional information that you may find useful to make the most out of the Git repositories on the Hugging Face Hub."),Va.forEach(t),Et=f(e),S=r(e,"H2",{class:!0});var io=i(S);C=r(io,"A",{id:!0,class:!0,href:!0});var Xa=i(C);Ye=r(Xa,"SPAN",{});var Za=i(Ye);g(ee.$$.fragment,Za),Za.forEach(t),Xa.forEach(t),bo=f(io),Me=r(io,"SPAN",{});var er=i(Me);ko=n(er,"Learning more about Git"),er.forEach(t),io.forEach(t),Gt=f(e),b=r(e,"P",{});var Ie=i(b);$o=n(Ie,"A good place to visit if you want to continue learning about Git is "),te=r(Ie,"A",{href:!0,rel:!0});var tr=i(te);_o=n(tr,"this Git tutorial"),tr.forEach(t),Eo=n(Ie,". For even more background on Git, you can take a look at "),oe=r(Ie,"A",{href:!0,rel:!0});var or=i(oe);Go=n(or,"GitHub\u2019s Git Guides"),or.forEach(t),Ao=n(Ie,"."),Ie.forEach(t),At=f(e),L=r(e,"H2",{class:!0});var so=i(L);O=r(so,"A",{id:!0,class:!0,href:!0});var ar=i(O);We=r(ar,"SPAN",{});var rr=i(We);g(ae.$$.fragment,rr),rr.forEach(t),ar.forEach(t),So=f(so),Je=r(so,"SPAN",{});var ir=i(Je);Lo=n(ir,"How to use branches"),ir.forEach(t),so.forEach(t),St=f(e),k=r(e,"P",{});var Ce=i(k);Po=n(Ce,"To effectively use Git repos collaboratively and to work on features without releasing premature code you can use "),ze=r(Ce,"STRONG",{});var sr=i(ze);xo=n(sr,"branches"),sr.forEach(t),Fo=n(Ce,". Branches allow you to separate your \u201Cwork in progress\u201D code from your \u201Cproduction-ready\u201D code, with the additional benefit of letting multiple people work on a project without frequently conflicting with each others\u2019 contributions. You can use branches to isolate experiments in their own branch, and even "),re=r(Ce,"A",{href:!0,rel:!0});var lr=i(re);jo=n(lr,"adopt team-wide practices for managing branches"),lr.forEach(t),Ho=n(Ce,"."),Ce.forEach(t),Lt=f(e),D=r(e,"P",{});var lo=i(D);No=n(lo,"To learn about Git branching, you can try out the "),ie=r(lo,"A",{href:!0,rel:!0});var nr=i(ie);To=n(nr,"Learn Git Branching interactive tutorial"),nr.forEach(t),Io=n(lo,"."),lo.forEach(t),Pt=f(e),P=r(e,"H2",{class:!0});var no=i(P);B=r(no,"A",{id:!0,class:!0,href:!0});var hr=i(B);Ke=r(hr,"SPAN",{});var pr=i(Ke);g(se.$$.fragment,pr),pr.forEach(t),hr.forEach(t),Co=f(no),Qe=r(no,"SPAN",{});var ur=i(Qe);Oo=n(ur,"Using tags"),ur.forEach(t),no.forEach(t),xt=f(e),$=r(e,"P",{});var Oe=i($);Do=n(Oe,"Git allows you to "),Ve=r(Oe,"EM",{});var fr=i(Ve);Bo=n(fr,"tag"),fr.forEach(t),Ro=n(Oe," commits so that you can easily note milestones in your project. As such, you can use tags to mark commits in your Hub repos! To learn about using tags, you can visit "),le=r(Oe,"A",{href:!0,rel:!0});var cr=i(le);qo=n(cr,"this DevConnected post"),cr.forEach(t),Uo=n(Oe,"."),Oe.forEach(t),Ft=f(e),v=r(e,"P",{});var V=i(v);Yo=n(V,"Beyond making it easy to identify important commits in your repo\u2019s history, using Git tags also allows you to "),ne=r(V,"A",{href:!0,rel:!0});var gr=i(ne);Mo=n(gr,"clone a repository at a specific tag"),gr.forEach(t),Wo=n(V,". The "),Xe=r(V,"CODE",{});var mr=i(Xe);Jo=n(mr,"huggingface_hub"),mr.forEach(t),zo=n(V," library also supports working with tags, such as "),he=r(V,"A",{href:!0,rel:!0});var dr=i(he);Ko=n(dr,"downloading files from a specific tagged commit"),dr.forEach(t),Qo=n(V,"."),V.forEach(t),jt=f(e),x=r(e,"H2",{class:!0});var ho=i(x);R=r(ho,"A",{id:!0,class:!0,href:!0});var yr=i(R);Ze=r(yr,"SPAN",{});var wr=i(Ze);g(pe.$$.fragment,wr),wr.forEach(t),yr.forEach(t),Vo=f(ho),et=r(ho,"SPAN",{});var vr=i(et);Xo=n(vr,"How to duplicate or fork a repo (including LFS pointers)"),vr.forEach(t),ho.forEach(t),Ht=f(e),Fe=r(e,"P",{});var br=i(Fe);Zo=n(br,"If you\u2019d like to copy a repository, depending on whether you want to preserve the Git history there are two options."),br.forEach(t),Nt=f(e),F=r(e,"H3",{class:!0});var po=i(F);q=r(po,"A",{id:!0,class:!0,href:!0});var kr=i(q);tt=r(kr,"SPAN",{});var $r=i(tt);g(ue.$$.fragment,$r),$r.forEach(t),kr.forEach(t),ea=f(po),ot=r(po,"SPAN",{});var _r=i(ot);ta=n(_r,"Duplicating without Git history"),_r.forEach(t),po.forEach(t),Tt=f(e),_=r(e,"P",{});var De=i(_);oa=n(De,"In many scenarios, if you want your own copy of a particular codebase you might not be concerned about the previous Git history. In this case, you can quickly duplicate a repo with the handy "),fe=r(De,"A",{href:!0,rel:!0});var Er=i(fe);aa=n(Er,"Repo Duplicator"),Er.forEach(t),ra=n(De,"! You\u2019ll have to create a User Access Token, which you can read more about in the "),je=r(De,"A",{href:!0});var Gr=i(je);ia=n(Gr,"security documentation"),Gr.forEach(t),sa=n(De,"."),De.forEach(t),It=f(e),j=r(e,"H3",{class:!0});var uo=i(j);U=r(uo,"A",{id:!0,class:!0,href:!0});var Ar=i(U);at=r(Ar,"SPAN",{});var Sr=i(at);g(ce.$$.fragment,Sr),Sr.forEach(t),Ar.forEach(t),la=f(uo),rt=r(uo,"SPAN",{});var Lr=i(rt);na=n(Lr,"Duplicating with the Git history (Fork)"),Lr.forEach(t),uo.forEach(t),Ct=f(e),Y=r(e,"P",{});var fo=i(Y);ha=n(fo,"A duplicate of a repository with the commit history preserved is called a "),it=r(fo,"EM",{});var Pr=i(it);pa=n(Pr,"fork"),Pr.forEach(t),ua=n(fo,". You may choose to fork one of your own repos, but it also common to fork other people\u2019s projects if you would like to tinker with them."),fo.forEach(t),Ot=f(e),H=r(e,"P",{});var bt=i(H);N=r(bt,"STRONG",{});var Be=i(N);fa=n(Be,"Note that you will need to "),ge=r(Be,"A",{href:!0,rel:!0});var xr=i(ge);ca=n(xr,"install Git LFS"),xr.forEach(t),ga=n(Be," and the "),M=r(Be,"A",{href:!0,rel:!0});var Ma=i(M);st=r(Ma,"CODE",{});var Fr=i(st);ma=n(Fr,"huggingface_hub"),Fr.forEach(t),da=n(Ma," CLI"),Ma.forEach(t),ya=n(Be," to follow this process"),Be.forEach(t),wa=n(bt,". When you want to fork or "),me=r(bt,"A",{href:!0,rel:!0});var jr=i(me);va=n(jr,"rebase"),jr.forEach(t),ba=n(bt," a repository with LFS files you cannot use the usual Git approach that you might be familiar with since you need to be careful to not break the LFS pointers. Forking can take time depending on your bandwidth because you will have to fetch and re-upload all the LFS files in your fork."),bt.forEach(t),Dt=f(e),E=r(e,"P",{});var Re=i(E);ka=n(Re,"For example, say you have an upstream repository, "),lt=r(Re,"STRONG",{});var Hr=i(lt);$a=n(Hr,"upstream"),Hr.forEach(t),_a=n(Re,", and you just created your own repository on the Hub which is "),nt=r(Re,"STRONG",{});var Nr=i(nt);Ea=n(Nr,"myfork"),Nr.forEach(t),Ga=n(Re," in this example."),Re.forEach(t),Bt=f(e),W=r(e,"OL",{});var co=i(W);ht=r(co,"LI",{});var Tr=i(ht);J=r(Tr,"P",{});var kt=i(J);Aa=n(kt,"Create a destination repository (e.g. "),pt=r(kt,"STRONG",{});var Ir=i(pt);Sa=n(Ir,"myfork"),Ir.forEach(t),La=n(kt,") in "),de=r(kt,"A",{href:!0,rel:!0});var Cr=i(de);Pa=n(Cr,"https://huggingface.co"),Cr.forEach(t),kt.forEach(t),Tr.forEach(t),xa=f(co),ut=r(co,"LI",{});var Or=i(ut);ft=r(Or,"P",{});var Dr=i(ft);Fa=n(Dr,"Clone your fork repository:"),Dr.forEach(t),Or.forEach(t),co.forEach(t),Rt=f(e),g(ye.$$.fragment,e),qt=f(e),we=r(e,"OL",{start:!0});var Br=i(we);ct=r(Br,"LI",{});var Rr=i(ct);ja=n(Rr,"Fetch non LFS files:"),Rr.forEach(t),Br.forEach(t),Ut=f(e),g(ve.$$.fragment,e),Yt=f(e),be=r(e,"OL",{start:!0});var qr=i(be);gt=r(qr,"LI",{});var Ur=i(gt);Ha=n(Ur,"Fetch large files. This can take some time depending on your download bandwidth:"),Ur.forEach(t),qr.forEach(t),Mt=f(e),g(ke.$$.fragment,e),Wt=f(e),He=r(e,"P",{});var Yr=i(He);Na=n(Yr,"4.a. If you want to completely override the fork history (which should only have an initial commit), run:"),Yr.forEach(t),Jt=f(e),g($e.$$.fragment,e),zt=f(e),Ne=r(e,"P",{});var Mr=i(Ne);Ta=n(Mr,"4.b. If you want to rebase instead of overriding, run the following command and resolve any conflicts:"),Mr.forEach(t),Kt=f(e),g(_e.$$.fragment,e),Qt=f(e),Ee=r(e,"OL",{start:!0});var Wr=i(Ee);mt=r(Wr,"LI",{});var Jr=i(mt);Ia=n(Jr,"Prepare your LFS files to push:"),Jr.forEach(t),Wr.forEach(t),Vt=f(e),g(Ge.$$.fragment,e),Xt=f(e),Ae=r(e,"OL",{start:!0});var zr=i(Ae);dt=r(zr,"LI",{});var Kr=i(dt);Ca=n(Kr,"And finally push:"),Kr.forEach(t),zr.forEach(t),Zt=f(e),g(Se.$$.fragment,e),eo=f(e),Te=r(e,"P",{});var Qr=i(Te);Oa=n(Qr,"Now you have your own fork or rebased repo in the Hub!"),Qr.forEach(t),to=f(e),T=r(e,"H2",{class:!0});var go=i(T);z=r(go,"A",{id:!0,class:!0,href:!0});var Vr=i(z);yt=r(Vr,"SPAN",{});var Xr=i(yt);g(Le.$$.fragment,Xr),Xr.forEach(t),Vr.forEach(t),Da=f(go),wt=r(go,"SPAN",{});var Zr=i(wt);Ba=n(Zr,"How to programmatically manage repositories"),Zr.forEach(t),go.forEach(t),oo=f(e),K=r(e,"P",{});var mo=i(K);Ra=n(mo,"So far, we\u2019ve looked at using the Git CLI and the Hugging Face Hub to work with our repos. But Hugging Face also supports accessing repos with Python via the "),Q=r(mo,"A",{href:!0,rel:!0});var Wa=i(Q);vt=r(Wa,"CODE",{});var ei=i(vt);qa=n(ei,"huggingface_hub"),ei.forEach(t),Ua=n(Wa," library"),Wa.forEach(t),Ya=n(mo,". The operations that we\u2019ve explored such as downloading repositories and uploading files are available through the library, as well as other useful functions!"),mo.forEach(t),this.h()},h(){h(G,"name","hf:doc:metadata"),h(G,"content",JSON.stringify(ni)),h(I,"id","next-steps"),h(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(I,"href","#next-steps"),h(A,"class","relative group"),h(C,"id","learning-more-about-git"),h(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(C,"href","#learning-more-about-git"),h(S,"class","relative group"),h(te,"href","https://learngitbranching.js.org/"),h(te,"rel","nofollow"),h(oe,"href","https://github.com/git-guides"),h(oe,"rel","nofollow"),h(O,"id","how-to-use-branches"),h(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(O,"href","#how-to-use-branches"),h(L,"class","relative group"),h(re,"href","https://ericmjl.github.io/essays-on-data-science/workflow/gitflow/"),h(re,"rel","nofollow"),h(ie,"href","https://learngitbranching.js.org/"),h(ie,"rel","nofollow"),h(B,"id","using-tags"),h(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(B,"href","#using-tags"),h(P,"class","relative group"),h(le,"href","https://devconnected.com/how-to-create-git-tags/"),h(le,"rel","nofollow"),h(ne,"href","https://www.techiedelight.com/clone-specific-tag-with-git/"),h(ne,"rel","nofollow"),h(he,"href","https://huggingface.co/docs/huggingface_hub/main/en/how-to-downstream#hfhuburl"),h(he,"rel","nofollow"),h(R,"id","how-to-duplicate-or-fork-a-repo-including-lfs-pointers"),h(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(R,"href","#how-to-duplicate-or-fork-a-repo-including-lfs-pointers"),h(x,"class","relative group"),h(q,"id","duplicating-without-git-history"),h(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(q,"href","#duplicating-without-git-history"),h(F,"class","relative group"),h(fe,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),h(fe,"rel","nofollow"),h(je,"href","TODO"),h(U,"id","duplicating-with-the-git-history-fork"),h(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(U,"href","#duplicating-with-the-git-history-fork"),h(j,"class","relative group"),h(ge,"href","https://git-lfs.github.com/"),h(ge,"rel","nofollow"),h(M,"href","https://huggingface.co/docs/huggingface_hub/index"),h(M,"rel","nofollow"),h(me,"href","https://git-scm.com/docs/git-rebase"),h(me,"rel","nofollow"),h(de,"href","https://huggingface.co"),h(de,"rel","nofollow"),h(we,"start","3"),h(be,"start","4"),h(Ee,"start","5"),h(Ae,"start","6"),h(z,"id","how-to-programmatically-manage-repositories"),h(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(z,"href","#how-to-programmatically-manage-repositories"),h(T,"class","relative group"),h(Q,"href","https://huggingface.co/docs/huggingface_hub/index"),h(Q,"rel","nofollow")},m(e,s){o(document.head,G),p(e,$t,s),p(e,A,s),o(A,I),o(I,qe),m(Z,qe,null),o(A,yo),o(A,Ue),o(Ue,wo),p(e,_t,s),p(e,xe,s),o(xe,vo),p(e,Et,s),p(e,S,s),o(S,C),o(C,Ye),m(ee,Ye,null),o(S,bo),o(S,Me),o(Me,ko),p(e,Gt,s),p(e,b,s),o(b,$o),o(b,te),o(te,_o),o(b,Eo),o(b,oe),o(oe,Go),o(b,Ao),p(e,At,s),p(e,L,s),o(L,O),o(O,We),m(ae,We,null),o(L,So),o(L,Je),o(Je,Lo),p(e,St,s),p(e,k,s),o(k,Po),o(k,ze),o(ze,xo),o(k,Fo),o(k,re),o(re,jo),o(k,Ho),p(e,Lt,s),p(e,D,s),o(D,No),o(D,ie),o(ie,To),o(D,Io),p(e,Pt,s),p(e,P,s),o(P,B),o(B,Ke),m(se,Ke,null),o(P,Co),o(P,Qe),o(Qe,Oo),p(e,xt,s),p(e,$,s),o($,Do),o($,Ve),o(Ve,Bo),o($,Ro),o($,le),o(le,qo),o($,Uo),p(e,Ft,s),p(e,v,s),o(v,Yo),o(v,ne),o(ne,Mo),o(v,Wo),o(v,Xe),o(Xe,Jo),o(v,zo),o(v,he),o(he,Ko),o(v,Qo),p(e,jt,s),p(e,x,s),o(x,R),o(R,Ze),m(pe,Ze,null),o(x,Vo),o(x,et),o(et,Xo),p(e,Ht,s),p(e,Fe,s),o(Fe,Zo),p(e,Nt,s),p(e,F,s),o(F,q),o(q,tt),m(ue,tt,null),o(F,ea),o(F,ot),o(ot,ta),p(e,Tt,s),p(e,_,s),o(_,oa),o(_,fe),o(fe,aa),o(_,ra),o(_,je),o(je,ia),o(_,sa),p(e,It,s),p(e,j,s),o(j,U),o(U,at),m(ce,at,null),o(j,la),o(j,rt),o(rt,na),p(e,Ct,s),p(e,Y,s),o(Y,ha),o(Y,it),o(it,pa),o(Y,ua),p(e,Ot,s),p(e,H,s),o(H,N),o(N,fa),o(N,ge),o(ge,ca),o(N,ga),o(N,M),o(M,st),o(st,ma),o(M,da),o(N,ya),o(H,wa),o(H,me),o(me,va),o(H,ba),p(e,Dt,s),p(e,E,s),o(E,ka),o(E,lt),o(lt,$a),o(E,_a),o(E,nt),o(nt,Ea),o(E,Ga),p(e,Bt,s),p(e,W,s),o(W,ht),o(ht,J),o(J,Aa),o(J,pt),o(pt,Sa),o(J,La),o(J,de),o(de,Pa),o(W,xa),o(W,ut),o(ut,ft),o(ft,Fa),p(e,Rt,s),m(ye,e,s),p(e,qt,s),p(e,we,s),o(we,ct),o(ct,ja),p(e,Ut,s),m(ve,e,s),p(e,Yt,s),p(e,be,s),o(be,gt),o(gt,Ha),p(e,Mt,s),m(ke,e,s),p(e,Wt,s),p(e,He,s),o(He,Na),p(e,Jt,s),m($e,e,s),p(e,zt,s),p(e,Ne,s),o(Ne,Ta),p(e,Kt,s),m(_e,e,s),p(e,Qt,s),p(e,Ee,s),o(Ee,mt),o(mt,Ia),p(e,Vt,s),m(Ge,e,s),p(e,Xt,s),p(e,Ae,s),o(Ae,dt),o(dt,Ca),p(e,Zt,s),m(Se,e,s),p(e,eo,s),p(e,Te,s),o(Te,Oa),p(e,to,s),p(e,T,s),o(T,z),o(z,yt),m(Le,yt,null),o(T,Da),o(T,wt),o(wt,Ba),p(e,oo,s),p(e,K,s),o(K,Ra),o(K,Q),o(Q,vt),o(vt,qa),o(Q,Ua),o(K,Ya),ao=!0},p:ii,i(e){ao||(d(Z.$$.fragment,e),d(ee.$$.fragment,e),d(ae.$$.fragment,e),d(se.$$.fragment,e),d(pe.$$.fragment,e),d(ue.$$.fragment,e),d(ce.$$.fragment,e),d(ye.$$.fragment,e),d(ve.$$.fragment,e),d(ke.$$.fragment,e),d($e.$$.fragment,e),d(_e.$$.fragment,e),d(Ge.$$.fragment,e),d(Se.$$.fragment,e),d(Le.$$.fragment,e),ao=!0)},o(e){y(Z.$$.fragment,e),y(ee.$$.fragment,e),y(ae.$$.fragment,e),y(se.$$.fragment,e),y(pe.$$.fragment,e),y(ue.$$.fragment,e),y(ce.$$.fragment,e),y(ye.$$.fragment,e),y(ve.$$.fragment,e),y(ke.$$.fragment,e),y($e.$$.fragment,e),y(_e.$$.fragment,e),y(Ge.$$.fragment,e),y(Se.$$.fragment,e),y(Le.$$.fragment,e),ao=!1},d(e){t(G),e&&t($t),e&&t(A),w(Z),e&&t(_t),e&&t(xe),e&&t(Et),e&&t(S),w(ee),e&&t(Gt),e&&t(b),e&&t(At),e&&t(L),w(ae),e&&t(St),e&&t(k),e&&t(Lt),e&&t(D),e&&t(Pt),e&&t(P),w(se),e&&t(xt),e&&t($),e&&t(Ft),e&&t(v),e&&t(jt),e&&t(x),w(pe),e&&t(Ht),e&&t(Fe),e&&t(Nt),e&&t(F),w(ue),e&&t(Tt),e&&t(_),e&&t(It),e&&t(j),w(ce),e&&t(Ct),e&&t(Y),e&&t(Ot),e&&t(H),e&&t(Dt),e&&t(E),e&&t(Bt),e&&t(W),e&&t(Rt),w(ye,e),e&&t(qt),e&&t(we),e&&t(Ut),w(ve,e),e&&t(Yt),e&&t(be),e&&t(Mt),w(ke,e),e&&t(Wt),e&&t(He),e&&t(Jt),w($e,e),e&&t(zt),e&&t(Ne),e&&t(Kt),w(_e,e),e&&t(Qt),e&&t(Ee),e&&t(Vt),w(Ge,e),e&&t(Xt),e&&t(Ae),e&&t(Zt),w(Se,e),e&&t(eo),e&&t(Te),e&&t(to),e&&t(T),w(Le),e&&t(oo),e&&t(K)}}}const ni={local:"next-steps",sections:[{local:"learning-more-about-git",title:"Learning more about Git"},{local:"how-to-use-branches",title:"How to use branches"},{local:"using-tags",title:"Using tags"},{local:"how-to-duplicate-or-fork-a-repo-including-lfs-pointers",sections:[{local:"duplicating-without-git-history",title:"Duplicating without Git history"},{local:"duplicating-with-the-git-history-fork",title:"Duplicating with the Git history (Fork)"}],title:"How to duplicate or fork a repo (including LFS pointers)"},{local:"how-to-programmatically-manage-repositories",title:"How to programmatically manage repositories"}],title:"Next steps"};function hi(Ja){return si(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ci extends ti{constructor(G){super();oi(this,G,hi,li,ai,{})}}export{ci as default,ni as metadata};
