import{S as es,i as ts,s as as,e as r,k as c,w as Y,t as o,N as os,c as l,d as a,m as f,a as i,x as F,h as s,b as n,P as ss,F as t,g as h,y as L,L as rs,q as B,o as K,B as z,v as ls}from"../chunks/vendor-e46c3074.js";import{I as Ue}from"../chunks/IconCopyLink-380c1989.js";import{C as ao}from"../chunks/CodeBlock-8e2273c8.js";function is(oo){let E,Je,$,T,we,W,kt,Se,jt,Qe,_,_e,At,Pt,ye,Tt,Nt,U,Dt,Ct,Ve,d,Gt,be,Ot,Rt,J,xt,qt,Ee,Ht,Mt,$e,It,Yt,ke,Ft,Lt,je,Bt,Kt,Xe,v,zt,Ae,Wt,Ut,N,Pe,Jt,Qt,Vt,Te,Xt,Zt,Ze,Q,et,y,ea,Ne,ta,aa,ce,oa,sa,tt,D,ra,V,la,ia,at,k,C,De,X,na,Ce,pa,ot,b,ha,Ge,ca,fa,Z,da,ua,st,G,ma,ee,ga,va,rt,j,O,Oe,te,wa,Re,Sa,lt,w,_a,ae,ya,ba,xe,Ea,$a,fe,ka,ja,it,A,R,qe,oe,Aa,He,Pa,nt,S,Ta,Me,Na,Da,se,Ca,Ga,Ie,Oa,Ra,pt,re,ht,de,xa,ct,P,x,Ye,le,qa,Fe,Ha,ft,q,Ma,Le,Ia,Ya,dt,ie,ut,u,Fa,ne,La,Ba,pe,Ka,za,Be,Wa,Ua,Ke,Ja,Qa,ze,Va,Xa,We,Za,eo,mt,ue,me,so,gt;return W=new Ue({}),Q=new ao({props:{code:`sdk: streamlit
sdk_version: 1.2.0 # The latest supported version`,highlighted:`<span class="hljs-attr">sdk:</span> <span class="hljs-string">streamlit</span>
<span class="hljs-attr">sdk_version:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.0</span> <span class="hljs-comment"># The latest supported version</span>`}}),X=new Ue({}),te=new Ue({}),oe=new Ue({}),re=new ao({props:{code:`transformers
torch`,highlighted:`<span class="hljs-attribute">transformers
torch</span>`}}),le=new Ue({}),ie=new ao({props:{code:`import streamlit as st
from transformers import pipeline
from PIL import Image

pipeline = pipeline(task="image-classification", model="julien-c/hotdog-not-hotdog")

st.title("Hot Dog? Or Not?")

file_name = st.file_uploader("Upload a hot dog candidate image")

if file_name is not None:
  col1, col2 = st.columns(2)

  image = Image.open(file_name)
  col1.image(image, use_column_width=True)
  predictions = pipeline(image)

  col2.header("Probabilities")
  for p in predictions:
    col2.subheader(f"{ p['label'] }: { round(p['score'] * 100, 1)}%")`,highlighted:`<span class="hljs-keyword">import</span> streamlit <span class="hljs-keyword">as</span> st
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image

pipeline = pipeline(task=<span class="hljs-string">&quot;image-classification&quot;</span>, model=<span class="hljs-string">&quot;julien-c/hotdog-not-hotdog&quot;</span>)

st.title(<span class="hljs-string">&quot;Hot Dog? Or Not?&quot;</span>)

file_name = st.file_uploader(<span class="hljs-string">&quot;Upload a hot dog candidate image&quot;</span>)

<span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
  col1, col2 = st.columns(<span class="hljs-number">2</span>)

  image = Image.<span class="hljs-built_in">open</span>(file_name)
  col1.image(image, use_column_width=<span class="hljs-literal">True</span>)
  predictions = pipeline(image)

  col2.header(<span class="hljs-string">&quot;Probabilities&quot;</span>)
  <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> predictions:
    col2.subheader(<span class="hljs-string">f&quot;<span class="hljs-subst">{ p[<span class="hljs-string">&#x27;label&#x27;</span>] }</span>: <span class="hljs-subst">{ <span class="hljs-built_in">round</span>(p[<span class="hljs-string">&#x27;score&#x27;</span>] * <span class="hljs-number">100</span>, <span class="hljs-number">1</span>)}</span>%&quot;</span>)`}}),{c(){E=r("meta"),Je=c(),$=r("h1"),T=r("a"),we=r("span"),Y(W.$$.fragment),kt=c(),Se=r("span"),jt=o("Streamlit Spaces"),Qe=c(),_=r("p"),_e=r("strong"),At=o("Streamlit"),Pt=o(" gives users more freedom to build a full-featured web app with Python in a "),ye=r("em"),Tt=o("reactive"),Nt=o(" way. Your code is rerun each time the state of the app changes. Streamlit is also great for data visualization and supports several charting libraries such as Bokeh, Plotly, and Altair. Read our "),U=r("a"),Dt=o("blog post"),Ct=o(" about building and hosting Streamlit apps in Spaces."),Ve=c(),d=r("p"),Gt=o("Selecting "),be=r("strong"),Ot=o("Gradio"),Rt=o(" as the SDK when "),J=r("a"),xt=o("creating a new Space"),qt=o(" will initialize your Space with the latest version of Gradio by setting the "),Ee=r("code"),Ht=o("sdk"),Mt=o(" property to "),$e=r("code"),It=o("gradio"),Yt=o(" in your "),ke=r("code"),Ft=o("README.md"),Lt=o(" file\u2019s YAML block. If you\u2019d like to change the Gradio version, you can edit the "),je=r("code"),Bt=o("sdk_version"),Kt=o(" property."),Xe=c(),v=r("p"),zt=o("To use Streamlit in a Space, select "),Ae=r("strong"),Wt=o("Streamlit"),Ut=o(" as the SDK when you create a Space through the "),N=r("a"),Pe=r("strong"),Jt=o("New Space"),Qt=o(" form"),Vt=o(". This will create a repository with a "),Te=r("code"),Xt=o("README.md"),Zt=o(" that contains the following properties in the YAML configuration block:"),Ze=c(),Y(Q.$$.fragment),et=c(),y=r("p"),ea=o("You can edit the "),Ne=r("code"),ta=o("sdk_version"),aa=o(", but note that issues may occur when you use an unsupported Streamlit version. Not all Streamlit versions are supported, so please refer to the "),ce=r("a"),oa=o("reference section"),sa=o(" to see which versions are available."),tt=c(),D=r("p"),ra=o("For in-depth information about Streamlit, refer to the "),V=r("a"),la=o("Streamlit documentation"),ia=o("."),at=c(),k=r("h2"),C=r("a"),De=r("span"),Y(X.$$.fragment),na=c(),Ce=r("span"),pa=o("Your First Streamlit Space: Hot Dog Classifier"),ot=c(),b=r("p"),ha=o("In the following sections, you\u2019ll learn the basics of creating a Space, configuring it, and deploying your code to it. We\u2019ll create a "),Ge=r("strong"),ca=o("Hot Dog Classifier"),fa=o(" Space with Streamlit that\u2019ll be used to demo the "),Z=r("a"),da=o("julien-c/hotdog-not-hotdog"),ua=o(" model, which can detect whether a given picture contains a hot dog \u{1F32D}"),st=c(),G=r("p"),ma=o("You can find a completed version of this hosted at "),ee=r("a"),ga=o("NimaBoscarino/hotdog-streamlit"),va=o("."),rt=c(),j=r("h2"),O=r("a"),Oe=r("span"),Y(te.$$.fragment),wa=c(),Re=r("span"),Sa=o("Create a new Streamlit Space"),lt=c(),w=r("p"),_a=o("We\u2019ll start by "),ae=r("a"),ya=o("creating a brand new Space"),ba=o(" and choosing "),xe=r("strong"),Ea=o("Streamlit"),$a=o(" as our SDK. Hugging Face Spaces are Git repositories, meaning that you can work on your Space incrementally (and collaboratively) by pushing commits. Take a look at the "),fe=r("a"),ka=o("Getting Started with Repositories"),ja=o(" guide to learn about how you can create and edit files before continuing."),it=c(),A=r("h2"),R=r("a"),qe=r("span"),Y(oe.$$.fragment),Aa=c(),He=r("span"),Pa=o("Add the dependencies"),nt=c(),S=r("p"),Ta=o("For the "),Me=r("strong"),Na=o("Hot Dog Classifier"),Da=o(" we\u2019ll be using a "),se=r("a"),Ca=o("\u{1F917} Transformers pipeline"),Ga=o(" to use the model, so we need to start by installing a few dependencies. This can be done by creating a "),Ie=r("strong"),Oa=o("requirements.txt"),Ra=o(" file in our repository, and adding the following dependencies to it:"),pt=c(),Y(re.$$.fragment),ht=c(),de=r("p"),xa=o("The Spaces runtime will handle installing the dependencies!"),ct=c(),P=r("h2"),x=r("a"),Ye=r("span"),Y(le.$$.fragment),qa=c(),Fe=r("span"),Ha=o("Create the Streamlit app"),ft=c(),q=r("p"),Ma=o("To create the Streamlit app, make a new file in the repository called "),Le=r("strong"),Ia=o("app.py"),Ya=o(", and add the following code:"),dt=c(),Y(ie.$$.fragment),ut=c(),u=r("p"),Fa=o("This Python script uses a "),ne=r("a"),La=o("\u{1F917} Transformers pipeline"),Ba=o(" to load the "),pe=r("a"),Ka=o("julien-c/hotdog-not-hotdog"),za=o(" model, which is used by the Streamlit interface. The Streamlit app will expect you to upload an image, which it\u2019ll then classify as "),Be=r("em"),Wa=o("hot dog"),Ua=o(" or "),Ke=r("em"),Ja=o("not hot dog"),Qa=o(". Once you\u2019ve saved the code to the "),ze=r("strong"),Va=o("app.py"),Xa=o(" file, visit the "),We=r("strong"),Za=o("App"),eo=o(" tab to see your app in action!"),mt=c(),ue=r("p"),me=r("img"),this.h()},l(e){const p=os('[data-svelte="svelte-1phssyn"]',document.head);E=l(p,"META",{name:!0,content:!0}),p.forEach(a),Je=f(e),$=l(e,"H1",{class:!0});var vt=i($);T=l(vt,"A",{id:!0,class:!0,href:!0});var ro=i(T);we=l(ro,"SPAN",{});var lo=i(we);F(W.$$.fragment,lo),lo.forEach(a),ro.forEach(a),kt=f(vt),Se=l(vt,"SPAN",{});var io=i(Se);jt=s(io,"Streamlit Spaces"),io.forEach(a),vt.forEach(a),Qe=f(e),_=l(e,"P",{});var he=i(_);_e=l(he,"STRONG",{});var no=i(_e);At=s(no,"Streamlit"),no.forEach(a),Pt=s(he," gives users more freedom to build a full-featured web app with Python in a "),ye=l(he,"EM",{});var po=i(ye);Tt=s(po,"reactive"),po.forEach(a),Nt=s(he," way. Your code is rerun each time the state of the app changes. Streamlit is also great for data visualization and supports several charting libraries such as Bokeh, Plotly, and Altair. Read our "),U=l(he,"A",{href:!0,rel:!0});var ho=i(U);Dt=s(ho,"blog post"),ho.forEach(a),Ct=s(he," about building and hosting Streamlit apps in Spaces."),he.forEach(a),Ve=f(e),d=l(e,"P",{});var m=i(d);Gt=s(m,"Selecting "),be=l(m,"STRONG",{});var co=i(be);Ot=s(co,"Gradio"),co.forEach(a),Rt=s(m," as the SDK when "),J=l(m,"A",{href:!0,rel:!0});var fo=i(J);xt=s(fo,"creating a new Space"),fo.forEach(a),qt=s(m," will initialize your Space with the latest version of Gradio by setting the "),Ee=l(m,"CODE",{});var uo=i(Ee);Ht=s(uo,"sdk"),uo.forEach(a),Mt=s(m," property to "),$e=l(m,"CODE",{});var mo=i($e);It=s(mo,"gradio"),mo.forEach(a),Yt=s(m," in your "),ke=l(m,"CODE",{});var go=i(ke);Ft=s(go,"README.md"),go.forEach(a),Lt=s(m," file\u2019s YAML block. If you\u2019d like to change the Gradio version, you can edit the "),je=l(m,"CODE",{});var vo=i(je);Bt=s(vo,"sdk_version"),vo.forEach(a),Kt=s(m," property."),m.forEach(a),Xe=f(e),v=l(e,"P",{});var H=i(v);zt=s(H,"To use Streamlit in a Space, select "),Ae=l(H,"STRONG",{});var wo=i(Ae);Wt=s(wo,"Streamlit"),wo.forEach(a),Ut=s(H," as the SDK when you create a Space through the "),N=l(H,"A",{href:!0,rel:!0});var to=i(N);Pe=l(to,"STRONG",{});var So=i(Pe);Jt=s(So,"New Space"),So.forEach(a),Qt=s(to," form"),to.forEach(a),Vt=s(H,". This will create a repository with a "),Te=l(H,"CODE",{});var _o=i(Te);Xt=s(_o,"README.md"),_o.forEach(a),Zt=s(H," that contains the following properties in the YAML configuration block:"),H.forEach(a),Ze=f(e),F(Q.$$.fragment,e),et=f(e),y=l(e,"P",{});var ge=i(y);ea=s(ge,"You can edit the "),Ne=l(ge,"CODE",{});var yo=i(Ne);ta=s(yo,"sdk_version"),yo.forEach(a),aa=s(ge,", but note that issues may occur when you use an unsupported Streamlit version. Not all Streamlit versions are supported, so please refer to the "),ce=l(ge,"A",{href:!0});var bo=i(ce);oa=s(bo,"reference section"),bo.forEach(a),sa=s(ge," to see which versions are available."),ge.forEach(a),tt=f(e),D=l(e,"P",{});var wt=i(D);ra=s(wt,"For in-depth information about Streamlit, refer to the "),V=l(wt,"A",{href:!0,rel:!0});var Eo=i(V);la=s(Eo,"Streamlit documentation"),Eo.forEach(a),ia=s(wt,"."),wt.forEach(a),at=f(e),k=l(e,"H2",{class:!0});var St=i(k);C=l(St,"A",{id:!0,class:!0,href:!0});var $o=i(C);De=l($o,"SPAN",{});var ko=i(De);F(X.$$.fragment,ko),ko.forEach(a),$o.forEach(a),na=f(St),Ce=l(St,"SPAN",{});var jo=i(Ce);pa=s(jo,"Your First Streamlit Space: Hot Dog Classifier"),jo.forEach(a),St.forEach(a),ot=f(e),b=l(e,"P",{});var ve=i(b);ha=s(ve,"In the following sections, you\u2019ll learn the basics of creating a Space, configuring it, and deploying your code to it. We\u2019ll create a "),Ge=l(ve,"STRONG",{});var Ao=i(Ge);ca=s(Ao,"Hot Dog Classifier"),Ao.forEach(a),fa=s(ve," Space with Streamlit that\u2019ll be used to demo the "),Z=l(ve,"A",{href:!0,rel:!0});var Po=i(Z);da=s(Po,"julien-c/hotdog-not-hotdog"),Po.forEach(a),ua=s(ve," model, which can detect whether a given picture contains a hot dog \u{1F32D}"),ve.forEach(a),st=f(e),G=l(e,"P",{});var _t=i(G);ma=s(_t,"You can find a completed version of this hosted at "),ee=l(_t,"A",{href:!0,rel:!0});var To=i(ee);ga=s(To,"NimaBoscarino/hotdog-streamlit"),To.forEach(a),va=s(_t,"."),_t.forEach(a),rt=f(e),j=l(e,"H2",{class:!0});var yt=i(j);O=l(yt,"A",{id:!0,class:!0,href:!0});var No=i(O);Oe=l(No,"SPAN",{});var Do=i(Oe);F(te.$$.fragment,Do),Do.forEach(a),No.forEach(a),wa=f(yt),Re=l(yt,"SPAN",{});var Co=i(Re);Sa=s(Co,"Create a new Streamlit Space"),Co.forEach(a),yt.forEach(a),lt=f(e),w=l(e,"P",{});var M=i(w);_a=s(M,"We\u2019ll start by "),ae=l(M,"A",{href:!0,rel:!0});var Go=i(ae);ya=s(Go,"creating a brand new Space"),Go.forEach(a),ba=s(M," and choosing "),xe=l(M,"STRONG",{});var Oo=i(xe);Ea=s(Oo,"Streamlit"),Oo.forEach(a),$a=s(M," as our SDK. Hugging Face Spaces are Git repositories, meaning that you can work on your Space incrementally (and collaboratively) by pushing commits. Take a look at the "),fe=l(M,"A",{href:!0});var Ro=i(fe);ka=s(Ro,"Getting Started with Repositories"),Ro.forEach(a),ja=s(M," guide to learn about how you can create and edit files before continuing."),M.forEach(a),it=f(e),A=l(e,"H2",{class:!0});var bt=i(A);R=l(bt,"A",{id:!0,class:!0,href:!0});var xo=i(R);qe=l(xo,"SPAN",{});var qo=i(qe);F(oe.$$.fragment,qo),qo.forEach(a),xo.forEach(a),Aa=f(bt),He=l(bt,"SPAN",{});var Ho=i(He);Pa=s(Ho,"Add the dependencies"),Ho.forEach(a),bt.forEach(a),nt=f(e),S=l(e,"P",{});var I=i(S);Ta=s(I,"For the "),Me=l(I,"STRONG",{});var Mo=i(Me);Na=s(Mo,"Hot Dog Classifier"),Mo.forEach(a),Da=s(I," we\u2019ll be using a "),se=l(I,"A",{href:!0,rel:!0});var Io=i(se);Ca=s(Io,"\u{1F917} Transformers pipeline"),Io.forEach(a),Ga=s(I," to use the model, so we need to start by installing a few dependencies. This can be done by creating a "),Ie=l(I,"STRONG",{});var Yo=i(Ie);Oa=s(Yo,"requirements.txt"),Yo.forEach(a),Ra=s(I," file in our repository, and adding the following dependencies to it:"),I.forEach(a),pt=f(e),F(re.$$.fragment,e),ht=f(e),de=l(e,"P",{});var Fo=i(de);xa=s(Fo,"The Spaces runtime will handle installing the dependencies!"),Fo.forEach(a),ct=f(e),P=l(e,"H2",{class:!0});var Et=i(P);x=l(Et,"A",{id:!0,class:!0,href:!0});var Lo=i(x);Ye=l(Lo,"SPAN",{});var Bo=i(Ye);F(le.$$.fragment,Bo),Bo.forEach(a),Lo.forEach(a),qa=f(Et),Fe=l(Et,"SPAN",{});var Ko=i(Fe);Ha=s(Ko,"Create the Streamlit app"),Ko.forEach(a),Et.forEach(a),ft=f(e),q=l(e,"P",{});var $t=i(q);Ma=s($t,"To create the Streamlit app, make a new file in the repository called "),Le=l($t,"STRONG",{});var zo=i(Le);Ia=s(zo,"app.py"),zo.forEach(a),Ya=s($t,", and add the following code:"),$t.forEach(a),dt=f(e),F(ie.$$.fragment,e),ut=f(e),u=l(e,"P",{});var g=i(u);Fa=s(g,"This Python script uses a "),ne=l(g,"A",{href:!0,rel:!0});var Wo=i(ne);La=s(Wo,"\u{1F917} Transformers pipeline"),Wo.forEach(a),Ba=s(g," to load the "),pe=l(g,"A",{href:!0,rel:!0});var Uo=i(pe);Ka=s(Uo,"julien-c/hotdog-not-hotdog"),Uo.forEach(a),za=s(g," model, which is used by the Streamlit interface. The Streamlit app will expect you to upload an image, which it\u2019ll then classify as "),Be=l(g,"EM",{});var Jo=i(Be);Wa=s(Jo,"hot dog"),Jo.forEach(a),Ua=s(g," or "),Ke=l(g,"EM",{});var Qo=i(Ke);Ja=s(Qo,"not hot dog"),Qo.forEach(a),Qa=s(g,". Once you\u2019ve saved the code to the "),ze=l(g,"STRONG",{});var Vo=i(ze);Va=s(Vo,"app.py"),Vo.forEach(a),Xa=s(g," file, visit the "),We=l(g,"STRONG",{});var Xo=i(We);Za=s(Xo,"App"),Xo.forEach(a),eo=s(g," tab to see your app in action!"),g.forEach(a),mt=f(e),ue=l(e,"P",{});var Zo=i(ue);me=l(Zo,"IMG",{src:!0,alt:!0}),Zo.forEach(a),this.h()},h(){n(E,"name","hf:doc:metadata"),n(E,"content",JSON.stringify(ns)),n(T,"id","streamlit-spaces"),n(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(T,"href","#streamlit-spaces"),n($,"class","relative group"),n(U,"href","https://huggingface.co/blog/streamlit-spaces"),n(U,"rel","nofollow"),n(J,"href","https://huggingface.co/new-space"),n(J,"rel","nofollow"),n(N,"href","https://huggingface.co/new-space"),n(N,"rel","nofollow"),n(ce,"href","./spaces-config-reference"),n(V,"href","https://docs.streamlit.io/"),n(V,"rel","nofollow"),n(C,"id","your-first-streamlit-space-hot-dog-classifier"),n(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(C,"href","#your-first-streamlit-space-hot-dog-classifier"),n(k,"class","relative group"),n(Z,"href","https://huggingface.co/julien-c/hotdog-not-hotdog"),n(Z,"rel","nofollow"),n(ee,"href","https://huggingface.co/spaces/NimaBoscarino/hotdog-streamlit"),n(ee,"rel","nofollow"),n(O,"id","create-a-new-streamlit-space"),n(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(O,"href","#create-a-new-streamlit-space"),n(j,"class","relative group"),n(ae,"href","https://huggingface.co/new-space"),n(ae,"rel","nofollow"),n(fe,"href","./repositories-getting-started"),n(R,"id","add-the-dependencies"),n(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(R,"href","#add-the-dependencies"),n(A,"class","relative group"),n(se,"href","https://huggingface.co/docs/transformers/pipeline_tutorial"),n(se,"rel","nofollow"),n(x,"id","create-the-streamlit-app"),n(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(x,"href","#create-the-streamlit-app"),n(P,"class","relative group"),n(ne,"href","https://huggingface.co/docs/transformers/pipeline_tutorial"),n(ne,"rel","nofollow"),n(pe,"href","https://huggingface.co/julien-c/hotdog-not-hotdog"),n(pe,"rel","nofollow"),ss(me.src,so="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/spaces-hot-dog-streamlit.png")||n(me,"src",so),n(me,"alt","Hot Dog Classifier Space")},m(e,p){t(document.head,E),h(e,Je,p),h(e,$,p),t($,T),t(T,we),L(W,we,null),t($,kt),t($,Se),t(Se,jt),h(e,Qe,p),h(e,_,p),t(_,_e),t(_e,At),t(_,Pt),t(_,ye),t(ye,Tt),t(_,Nt),t(_,U),t(U,Dt),t(_,Ct),h(e,Ve,p),h(e,d,p),t(d,Gt),t(d,be),t(be,Ot),t(d,Rt),t(d,J),t(J,xt),t(d,qt),t(d,Ee),t(Ee,Ht),t(d,Mt),t(d,$e),t($e,It),t(d,Yt),t(d,ke),t(ke,Ft),t(d,Lt),t(d,je),t(je,Bt),t(d,Kt),h(e,Xe,p),h(e,v,p),t(v,zt),t(v,Ae),t(Ae,Wt),t(v,Ut),t(v,N),t(N,Pe),t(Pe,Jt),t(N,Qt),t(v,Vt),t(v,Te),t(Te,Xt),t(v,Zt),h(e,Ze,p),L(Q,e,p),h(e,et,p),h(e,y,p),t(y,ea),t(y,Ne),t(Ne,ta),t(y,aa),t(y,ce),t(ce,oa),t(y,sa),h(e,tt,p),h(e,D,p),t(D,ra),t(D,V),t(V,la),t(D,ia),h(e,at,p),h(e,k,p),t(k,C),t(C,De),L(X,De,null),t(k,na),t(k,Ce),t(Ce,pa),h(e,ot,p),h(e,b,p),t(b,ha),t(b,Ge),t(Ge,ca),t(b,fa),t(b,Z),t(Z,da),t(b,ua),h(e,st,p),h(e,G,p),t(G,ma),t(G,ee),t(ee,ga),t(G,va),h(e,rt,p),h(e,j,p),t(j,O),t(O,Oe),L(te,Oe,null),t(j,wa),t(j,Re),t(Re,Sa),h(e,lt,p),h(e,w,p),t(w,_a),t(w,ae),t(ae,ya),t(w,ba),t(w,xe),t(xe,Ea),t(w,$a),t(w,fe),t(fe,ka),t(w,ja),h(e,it,p),h(e,A,p),t(A,R),t(R,qe),L(oe,qe,null),t(A,Aa),t(A,He),t(He,Pa),h(e,nt,p),h(e,S,p),t(S,Ta),t(S,Me),t(Me,Na),t(S,Da),t(S,se),t(se,Ca),t(S,Ga),t(S,Ie),t(Ie,Oa),t(S,Ra),h(e,pt,p),L(re,e,p),h(e,ht,p),h(e,de,p),t(de,xa),h(e,ct,p),h(e,P,p),t(P,x),t(x,Ye),L(le,Ye,null),t(P,qa),t(P,Fe),t(Fe,Ha),h(e,ft,p),h(e,q,p),t(q,Ma),t(q,Le),t(Le,Ia),t(q,Ya),h(e,dt,p),L(ie,e,p),h(e,ut,p),h(e,u,p),t(u,Fa),t(u,ne),t(ne,La),t(u,Ba),t(u,pe),t(pe,Ka),t(u,za),t(u,Be),t(Be,Wa),t(u,Ua),t(u,Ke),t(Ke,Ja),t(u,Qa),t(u,ze),t(ze,Va),t(u,Xa),t(u,We),t(We,Za),t(u,eo),h(e,mt,p),h(e,ue,p),t(ue,me),gt=!0},p:rs,i(e){gt||(B(W.$$.fragment,e),B(Q.$$.fragment,e),B(X.$$.fragment,e),B(te.$$.fragment,e),B(oe.$$.fragment,e),B(re.$$.fragment,e),B(le.$$.fragment,e),B(ie.$$.fragment,e),gt=!0)},o(e){K(W.$$.fragment,e),K(Q.$$.fragment,e),K(X.$$.fragment,e),K(te.$$.fragment,e),K(oe.$$.fragment,e),K(re.$$.fragment,e),K(le.$$.fragment,e),K(ie.$$.fragment,e),gt=!1},d(e){a(E),e&&a(Je),e&&a($),z(W),e&&a(Qe),e&&a(_),e&&a(Ve),e&&a(d),e&&a(Xe),e&&a(v),e&&a(Ze),z(Q,e),e&&a(et),e&&a(y),e&&a(tt),e&&a(D),e&&a(at),e&&a(k),z(X),e&&a(ot),e&&a(b),e&&a(st),e&&a(G),e&&a(rt),e&&a(j),z(te),e&&a(lt),e&&a(w),e&&a(it),e&&a(A),z(oe),e&&a(nt),e&&a(S),e&&a(pt),z(re,e),e&&a(ht),e&&a(de),e&&a(ct),e&&a(P),z(le),e&&a(ft),e&&a(q),e&&a(dt),z(ie,e),e&&a(ut),e&&a(u),e&&a(mt),e&&a(ue)}}}const ns={local:"streamlit-spaces",sections:[{local:"your-first-streamlit-space-hot-dog-classifier",title:"Your First Streamlit Space: Hot Dog Classifier"},{local:"create-a-new-streamlit-space",title:"Create a new Streamlit Space"},{local:"add-the-dependencies",title:"Add the dependencies"},{local:"create-the-streamlit-app",title:"Create the Streamlit app"}],title:"Streamlit Spaces"};function ps(oo){return ls(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ds extends es{constructor(E){super();ts(this,E,ps,is,as,{})}}export{ds as default,ns as metadata};
