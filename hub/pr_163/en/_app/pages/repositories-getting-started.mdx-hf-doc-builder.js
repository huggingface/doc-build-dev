import{S as Ps,i as As,s as Is,e as i,k as f,w as m,t as s,N as xs,c as r,d as o,m as u,a,x as g,h as l,b as h,P,G as t,g as c,y as v,L as Ts,q as y,o as w,B as _,v as Cs}from"../chunks/vendor-hf-doc-builder.js";import{I as B}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as zt}from"../chunks/CodeBlock-hf-doc-builder.js";function Gs(Kr){let x,Vt,T,z,Ke,fe,oi,Qe,ii,Wt,xe,ri,Xt,C,V,Ze,ue,ai,et,si,Jt,Te,li,Kt,$,ni,tt,hi,ci,pe,fi,ui,de,pi,di,Qt,W,mi,X,ot,gi,vi,yi,Zt,me,eo,Ce,it,wi,to,b,Qr,oo,G,J,rt,ge,_i,at,bi,io,K,Ei,st,$i,ki,ro,Ge,ve,Si,ye,Pi,Ai,ao,H,He,Zr,Ii,Ne,ea,so,E,lt,nt,xi,Ti,ht,ct,Ci,Gi,ft,ut,Hi,Ni,pt,N,Mi,dt,Oi,Di,Me,mt,Li,Fi,lo,Oe,Yi,no,M,De,ta,Ri,Le,oa,ho,A,qi,gt,ji,Ui,Fe,vt,Bi,zi,co,O,Q,yt,we,Vi,wt,Wi,fo,Ye,Xi,uo,D,Z,_t,_e,Ji,bt,Ki,po,L,ee,Et,be,Qi,$t,Zi,mo,te,er,kt,tr,or,go,Ee,vo,F,oe,St,$e,ir,Pt,rr,yo,Re,ar,wo,ie,sr,At,lr,nr,_o,ke,bo,re,hr,It,cr,fr,Eo,Se,$o,k,ur,xt,pr,dr,Tt,mr,gr,Ct,vr,yr,ko,Y,ae,Gt,Pe,wr,Ht,_r,So,d,br,Nt,Er,$r,Mt,kr,Sr,Ot,Pr,Ar,Dt,Ir,xr,Po,Ae,Ao,se,Tr,Lt,Cr,Gr,Io,R,qe,ia,Hr,je,ra,xo,q,le,Ft,Ie,Nr,Yt,Mr,To,p,Or,Rt,Dr,Lr,qt,Fr,Yr,jt,Rr,qr,Ut,jr,Ur,Bt,Br,zr,Co,j,Ue,aa,Vr,Be,sa,Go,ze,Wr,Ho,U,Ve,la,Xr,We,na,No;return fe=new B({}),ue=new B({}),me=new zt({props:{code:`python -m pip install huggingface_hub
huggingface-cli login`,highlighted:`python -m pip install huggingface_hub
huggingface-cli login`}}),ge=new B({}),we=new B({}),_e=new B({}),be=new B({}),Ee=new zt({props:{code:`git clone https://huggingface.co/<your-username>/<your-model-name>
cd <your-model-id>`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/&lt;your-username&gt;/&lt;your-model-name&gt;
<span class="hljs-built_in">cd</span> &lt;your-model-id&gt;`}}),$e=new B({}),ke=new zt({props:{code:"git lfs install",highlighted:"git lfs install"}}),Se=new zt({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),Pe=new B({}),Ae=new zt({props:{code:`# Create any files you like! Then...
git add .
git commit -m "First model version"  # You can choose any descriptive message
git push`,highlighted:`<span class="hljs-comment"># Create any files you like! Then...</span>
git add .
git commit -m <span class="hljs-string">&quot;First model version&quot;</span>  <span class="hljs-comment"># You can choose any descriptive message</span>
git push`}}),Ie=new B({}),{c(){x=i("meta"),Vt=f(),T=i("h1"),z=i("a"),Ke=i("span"),m(fe.$$.fragment),oi=f(),Qe=i("span"),ii=s("Getting Started with Repositories"),Wt=f(),xe=i("p"),ri=s("This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),Xt=f(),C=i("h2"),V=i("a"),Ze=i("span"),m(ue.$$.fragment),ai=f(),et=i("span"),si=s("Requirements"),Jt=f(),Te=i("p"),li=s("This document shows how to handle repositories through the web interface as well as through the terminal. There are no requirements if working with the UI. If you want to work with the terminal, please follow these installation instructions."),Kt=f(),$=i("p"),ni=s("If you do not have "),tt=i("code"),hi=s("git"),ci=s(" available as a CLI command yet, you will need to "),pe=i("a"),fi=s("install Git"),ui=s(" for your platform. You will also need to "),de=i("a"),pi=s("install Git LFS"),di=s(", which will be used to handle large files such as images and model weights."),Qt=f(),W=i("p"),mi=s("To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),X=i("a"),ot=i("code"),gi=s("huggingface_hub"),vi=s(" CLI"),yi=s(" and running the login command:"),Zt=f(),m(me.$$.fragment),eo=f(),Ce=i("p"),it=i("strong"),wi=s("The content in the Getting Started section of this document is also available as a video!"),to=f(),b=i("iframe"),oo=f(),G=i("h2"),J=i("a"),rt=i("span"),m(ge.$$.fragment),_i=f(),at=i("span"),bi=s("Creating a repository"),io=f(),K=i("p"),Ei=s("Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide you\u2019ll be creating a "),st=i("strong"),$i=s("model repository"),ki=s(" for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),ro=f(),Ge=i("ol"),ve=i("li"),Si=s("To create a new repository, visit "),ye=i("a"),Pi=s("huggingface.co/new"),Ai=s(":"),ao=f(),H=i("div"),He=i("img"),Ii=f(),Ne=i("img"),so=f(),E=i("ol"),lt=i("li"),nt=i("p"),xi=s("Specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),Ti=f(),ht=i("li"),ct=i("p"),Ci=s("Enter your model\u2019s name. This will also be the name of the repository."),Gi=f(),ft=i("li"),ut=i("p"),Hi=s("Specify whether you want your model to be public or private."),Ni=f(),pt=i("li"),N=i("p"),Mi=s("Specify the license. You can leave the "),dt=i("em"),Oi=s("License"),Di=s(" field blank for now. To learn about licenses, visit the "),Me=i("a"),mt=i("strong"),Li=s("Licenses"),Fi=s(" documentation."),lo=f(),Oe=i("p"),Yi=s("After creating your model repository, you should see a page like this:"),no=f(),M=i("div"),De=i("img"),Ri=f(),Le=i("img"),ho=f(),A=i("p"),qi=s("Note that the Hub prompts you to create a "),gt=i("em"),ji=s("Model Card"),Ui=s(", which you can learn about in the "),Fe=i("a"),vt=i("strong"),Bi=s("Model Cards documentation"),zi=s(". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),co=f(),O=i("h2"),Q=i("a"),yt=i("span"),m(we.$$.fragment),Vi=f(),wt=i("span"),Wi=s("Adding files to a repository (Web UI)"),fo=f(),Ye=i("p"),Xi=s("TODO"),uo=f(),D=i("h2"),Z=i("a"),_t=i("span"),m(_e.$$.fragment),Ji=f(),bt=i("span"),Ki=s("Adding files to a repository (terminal)"),po=f(),L=i("h3"),ee=i("a"),Et=i("span"),m(be.$$.fragment),Qi=f(),$t=i("span"),Zi=s("Cloning repositories"),mo=f(),te=i("p"),er=s("Downloading repositories to your local machine is called "),kt=i("em"),tr=s("cloning"),or=s(". You can use the following commands to load your repo and navigate to it:"),go=f(),m(Ee.$$.fragment),vo=f(),F=i("h3"),oe=i("a"),St=i("span"),m($e.$$.fragment),ir=f(),Pt=i("span"),rr=s("Set up"),yo=f(),Re=i("p"),ar=s("Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),wo=f(),ie=i("p"),sr=s("Do you have files larger than 10MB? Those files should be tracked with "),At=i("code"),lr=s("git-lfs"),nr=s(", which you can initialize with:"),_o=f(),m(ke.$$.fragment),bo=f(),re=i("p"),hr=s("Note that if your files are larger than "),It=i("strong"),cr=s("5GB"),fr=s(" you\u2019ll also need to run:"),Eo=f(),m(Se.$$.fragment),$o=f(),k=i("p"),ur=s("When you use Hugging Face to create a repository, Hugging Face automatically provides a list of common file extensions for common Machine Learning large files in the "),xt=i("code"),pr=s(".gitattributes"),dr=s(" file, which "),Tt=i("code"),mr=s("git-lfs"),gr=s(" uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),Ct=i("code"),vr=s('git lfs track "*.your_extension"'),yr=s("."),ko=f(),Y=i("h3"),ae=i("a"),Gt=i("span"),m(Pe.$$.fragment),wr=f(),Ht=i("span"),_r=s("Pushing files"),So=f(),d=i("p"),br=s("You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),Nt=i("em"),Er=s("commit"),$r=s(", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, you have to "),Mt=i("code"),kr=s("add"),Sr=s(" the files to let Git know that we\u2019re planning on saving the changes and then "),Ot=i("code"),Pr=s("commit"),Ar=s(" those changes. In order to sync the new commit with the Hugging Face Hub, you then "),Dt=i("code"),Ir=s("push"),xr=s(" the commit to the Hub."),Po=f(),m(Ae.$$.fragment),Ao=f(),se=i("p"),Tr=s("And you\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that some files in this example have a size of "),Lt=i("code"),Cr=s("1.04 GB"),Gr=s(", so the repo uses Git LFS to track it."),Io=f(),R=i("div"),qe=i("img"),Hr=f(),je=i("img"),xo=f(),q=i("h2"),le=i("a"),Ft=i("span"),m(Ie.$$.fragment),Nr=f(),Yt=i("span"),Mr=s("Viewing a repo's history"),To=f(),p=i("p"),Or=s("Every time you go through the "),Rt=i("code"),Dr=s("add"),Lr=s("-"),qt=i("code"),Fr=s("commit"),Yr=s("-"),jt=i("code"),Rr=s("push"),qr=s(" cycle, the repo will keep track of every change you\u2019ve made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as "),Ut=i("em"),jr=s("diff"),Ur=s(") introduced by each commit. To see the history, you can click on the "),Bt=i("strong"),Br=s("History: X commits"),zr=s(" link."),Co=f(),j=i("div"),Ue=i("img"),Vr=f(),Be=i("img"),Go=f(),ze=i("p"),Wr=s("You can click on an individual commit to see what changes that commit introduced:"),Ho=f(),U=i("div"),Ve=i("img"),Xr=f(),We=i("img"),this.h()},l(e){const n=xs('[data-svelte="svelte-1phssyn"]',document.head);x=r(n,"META",{name:!0,content:!0}),n.forEach(o),Vt=u(e),T=r(e,"H1",{class:!0});var Mo=a(T);z=r(Mo,"A",{id:!0,class:!0,href:!0});var ha=a(z);Ke=r(ha,"SPAN",{});var ca=a(Ke);g(fe.$$.fragment,ca),ca.forEach(o),ha.forEach(o),oi=u(Mo),Qe=r(Mo,"SPAN",{});var fa=a(Qe);ii=l(fa,"Getting Started with Repositories"),fa.forEach(o),Mo.forEach(o),Wt=u(e),xe=r(e,"P",{});var ua=a(xe);ri=l(ua,"This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),ua.forEach(o),Xt=u(e),C=r(e,"H2",{class:!0});var Oo=a(C);V=r(Oo,"A",{id:!0,class:!0,href:!0});var pa=a(V);Ze=r(pa,"SPAN",{});var da=a(Ze);g(ue.$$.fragment,da),da.forEach(o),pa.forEach(o),ai=u(Oo),et=r(Oo,"SPAN",{});var ma=a(et);si=l(ma,"Requirements"),ma.forEach(o),Oo.forEach(o),Jt=u(e),Te=r(e,"P",{});var ga=a(Te);li=l(ga,"This document shows how to handle repositories through the web interface as well as through the terminal. There are no requirements if working with the UI. If you want to work with the terminal, please follow these installation instructions."),ga.forEach(o),Kt=u(e),$=r(e,"P",{});var ne=a($);ni=l(ne,"If you do not have "),tt=r(ne,"CODE",{});var va=a(tt);hi=l(va,"git"),va.forEach(o),ci=l(ne," available as a CLI command yet, you will need to "),pe=r(ne,"A",{href:!0,rel:!0});var ya=a(pe);fi=l(ya,"install Git"),ya.forEach(o),ui=l(ne," for your platform. You will also need to "),de=r(ne,"A",{href:!0,rel:!0});var wa=a(de);pi=l(wa,"install Git LFS"),wa.forEach(o),di=l(ne,", which will be used to handle large files such as images and model weights."),ne.forEach(o),Qt=u(e),W=r(e,"P",{});var Do=a(W);mi=l(Do,"To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),X=r(Do,"A",{href:!0,rel:!0});var Jr=a(X);ot=r(Jr,"CODE",{});var _a=a(ot);gi=l(_a,"huggingface_hub"),_a.forEach(o),vi=l(Jr," CLI"),Jr.forEach(o),yi=l(Do," and running the login command:"),Do.forEach(o),Zt=u(e),g(me.$$.fragment,e),eo=u(e),Ce=r(e,"P",{});var ba=a(Ce);it=r(ba,"STRONG",{});var Ea=a(it);wi=l(Ea,"The content in the Getting Started section of this document is also available as a video!"),Ea.forEach(o),ba.forEach(o),to=u(e),b=r(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),a(b).forEach(o),oo=u(e),G=r(e,"H2",{class:!0});var Lo=a(G);J=r(Lo,"A",{id:!0,class:!0,href:!0});var $a=a(J);rt=r($a,"SPAN",{});var ka=a(rt);g(ge.$$.fragment,ka),ka.forEach(o),$a.forEach(o),_i=u(Lo),at=r(Lo,"SPAN",{});var Sa=a(at);bi=l(Sa,"Creating a repository"),Sa.forEach(o),Lo.forEach(o),io=u(e),K=r(e,"P",{});var Fo=a(K);Ei=l(Fo,"Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide you\u2019ll be creating a "),st=r(Fo,"STRONG",{});var Pa=a(st);$i=l(Pa,"model repository"),Pa.forEach(o),ki=l(Fo," for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),Fo.forEach(o),ro=u(e),Ge=r(e,"OL",{});var Aa=a(Ge);ve=r(Aa,"LI",{});var Yo=a(ve);Si=l(Yo,"To create a new repository, visit "),ye=r(Yo,"A",{href:!0,rel:!0});var Ia=a(ye);Pi=l(Ia,"huggingface.co/new"),Ia.forEach(o),Ai=l(Yo,":"),Yo.forEach(o),Aa.forEach(o),ao=u(e),H=r(e,"DIV",{class:!0});var Ro=a(H);He=r(Ro,"IMG",{class:!0,src:!0}),Ii=u(Ro),Ne=r(Ro,"IMG",{class:!0,src:!0}),Ro.forEach(o),so=u(e),E=r(e,"OL",{start:!0});var he=a(E);lt=r(he,"LI",{});var xa=a(lt);nt=r(xa,"P",{});var Ta=a(nt);xi=l(Ta,"Specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),Ta.forEach(o),xa.forEach(o),Ti=u(he),ht=r(he,"LI",{});var Ca=a(ht);ct=r(Ca,"P",{});var Ga=a(ct);Ci=l(Ga,"Enter your model\u2019s name. This will also be the name of the repository."),Ga.forEach(o),Ca.forEach(o),Gi=u(he),ft=r(he,"LI",{});var Ha=a(ft);ut=r(Ha,"P",{});var Na=a(ut);Hi=l(Na,"Specify whether you want your model to be public or private."),Na.forEach(o),Ha.forEach(o),Ni=u(he),pt=r(he,"LI",{});var Ma=a(pt);N=r(Ma,"P",{});var Xe=a(N);Mi=l(Xe,"Specify the license. You can leave the "),dt=r(Xe,"EM",{});var Oa=a(dt);Oi=l(Oa,"License"),Oa.forEach(o),Di=l(Xe," field blank for now. To learn about licenses, visit the "),Me=r(Xe,"A",{href:!0});var Da=a(Me);mt=r(Da,"STRONG",{});var La=a(mt);Li=l(La,"Licenses"),La.forEach(o),Da.forEach(o),Fi=l(Xe," documentation."),Xe.forEach(o),Ma.forEach(o),he.forEach(o),lo=u(e),Oe=r(e,"P",{});var Fa=a(Oe);Yi=l(Fa,"After creating your model repository, you should see a page like this:"),Fa.forEach(o),no=u(e),M=r(e,"DIV",{class:!0});var qo=a(M);De=r(qo,"IMG",{class:!0,src:!0}),Ri=u(qo),Le=r(qo,"IMG",{class:!0,src:!0}),qo.forEach(o),ho=u(e),A=r(e,"P",{});var Je=a(A);qi=l(Je,"Note that the Hub prompts you to create a "),gt=r(Je,"EM",{});var Ya=a(gt);ji=l(Ya,"Model Card"),Ya.forEach(o),Ui=l(Je,", which you can learn about in the "),Fe=r(Je,"A",{href:!0});var Ra=a(Fe);vt=r(Ra,"STRONG",{});var qa=a(vt);Bi=l(qa,"Model Cards documentation"),qa.forEach(o),Ra.forEach(o),zi=l(Je,". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),Je.forEach(o),co=u(e),O=r(e,"H2",{class:!0});var jo=a(O);Q=r(jo,"A",{id:!0,class:!0,href:!0});var ja=a(Q);yt=r(ja,"SPAN",{});var Ua=a(yt);g(we.$$.fragment,Ua),Ua.forEach(o),ja.forEach(o),Vi=u(jo),wt=r(jo,"SPAN",{});var Ba=a(wt);Wi=l(Ba,"Adding files to a repository (Web UI)"),Ba.forEach(o),jo.forEach(o),fo=u(e),Ye=r(e,"P",{});var za=a(Ye);Xi=l(za,"TODO"),za.forEach(o),uo=u(e),D=r(e,"H2",{class:!0});var Uo=a(D);Z=r(Uo,"A",{id:!0,class:!0,href:!0});var Va=a(Z);_t=r(Va,"SPAN",{});var Wa=a(_t);g(_e.$$.fragment,Wa),Wa.forEach(o),Va.forEach(o),Ji=u(Uo),bt=r(Uo,"SPAN",{});var Xa=a(bt);Ki=l(Xa,"Adding files to a repository (terminal)"),Xa.forEach(o),Uo.forEach(o),po=u(e),L=r(e,"H3",{class:!0});var Bo=a(L);ee=r(Bo,"A",{id:!0,class:!0,href:!0});var Ja=a(ee);Et=r(Ja,"SPAN",{});var Ka=a(Et);g(be.$$.fragment,Ka),Ka.forEach(o),Ja.forEach(o),Qi=u(Bo),$t=r(Bo,"SPAN",{});var Qa=a($t);Zi=l(Qa,"Cloning repositories"),Qa.forEach(o),Bo.forEach(o),mo=u(e),te=r(e,"P",{});var zo=a(te);er=l(zo,"Downloading repositories to your local machine is called "),kt=r(zo,"EM",{});var Za=a(kt);tr=l(Za,"cloning"),Za.forEach(o),or=l(zo,". You can use the following commands to load your repo and navigate to it:"),zo.forEach(o),go=u(e),g(Ee.$$.fragment,e),vo=u(e),F=r(e,"H3",{class:!0});var Vo=a(F);oe=r(Vo,"A",{id:!0,class:!0,href:!0});var es=a(oe);St=r(es,"SPAN",{});var ts=a(St);g($e.$$.fragment,ts),ts.forEach(o),es.forEach(o),ir=u(Vo),Pt=r(Vo,"SPAN",{});var os=a(Pt);rr=l(os,"Set up"),os.forEach(o),Vo.forEach(o),yo=u(e),Re=r(e,"P",{});var is=a(Re);ar=l(is,"Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),is.forEach(o),wo=u(e),ie=r(e,"P",{});var Wo=a(ie);sr=l(Wo,"Do you have files larger than 10MB? Those files should be tracked with "),At=r(Wo,"CODE",{});var rs=a(At);lr=l(rs,"git-lfs"),rs.forEach(o),nr=l(Wo,", which you can initialize with:"),Wo.forEach(o),_o=u(e),g(ke.$$.fragment,e),bo=u(e),re=r(e,"P",{});var Xo=a(re);hr=l(Xo,"Note that if your files are larger than "),It=r(Xo,"STRONG",{});var as=a(It);cr=l(as,"5GB"),as.forEach(o),fr=l(Xo," you\u2019ll also need to run:"),Xo.forEach(o),Eo=u(e),g(Se.$$.fragment,e),$o=u(e),k=r(e,"P",{});var ce=a(k);ur=l(ce,"When you use Hugging Face to create a repository, Hugging Face automatically provides a list of common file extensions for common Machine Learning large files in the "),xt=r(ce,"CODE",{});var ss=a(xt);pr=l(ss,".gitattributes"),ss.forEach(o),dr=l(ce," file, which "),Tt=r(ce,"CODE",{});var ls=a(Tt);mr=l(ls,"git-lfs"),ls.forEach(o),gr=l(ce," uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),Ct=r(ce,"CODE",{});var ns=a(Ct);vr=l(ns,'git lfs track "*.your_extension"'),ns.forEach(o),yr=l(ce,"."),ce.forEach(o),ko=u(e),Y=r(e,"H3",{class:!0});var Jo=a(Y);ae=r(Jo,"A",{id:!0,class:!0,href:!0});var hs=a(ae);Gt=r(hs,"SPAN",{});var cs=a(Gt);g(Pe.$$.fragment,cs),cs.forEach(o),hs.forEach(o),wr=u(Jo),Ht=r(Jo,"SPAN",{});var fs=a(Ht);_r=l(fs,"Pushing files"),fs.forEach(o),Jo.forEach(o),So=u(e),d=r(e,"P",{});var I=a(d);br=l(I,"You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),Nt=r(I,"EM",{});var us=a(Nt);Er=l(us,"commit"),us.forEach(o),$r=l(I,", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, you have to "),Mt=r(I,"CODE",{});var ps=a(Mt);kr=l(ps,"add"),ps.forEach(o),Sr=l(I," the files to let Git know that we\u2019re planning on saving the changes and then "),Ot=r(I,"CODE",{});var ds=a(Ot);Pr=l(ds,"commit"),ds.forEach(o),Ar=l(I," those changes. In order to sync the new commit with the Hugging Face Hub, you then "),Dt=r(I,"CODE",{});var ms=a(Dt);Ir=l(ms,"push"),ms.forEach(o),xr=l(I," the commit to the Hub."),I.forEach(o),Po=u(e),g(Ae.$$.fragment,e),Ao=u(e),se=r(e,"P",{});var Ko=a(se);Tr=l(Ko,"And you\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that some files in this example have a size of "),Lt=r(Ko,"CODE",{});var gs=a(Lt);Cr=l(gs,"1.04 GB"),gs.forEach(o),Gr=l(Ko,", so the repo uses Git LFS to track it."),Ko.forEach(o),Io=u(e),R=r(e,"DIV",{class:!0});var Qo=a(R);qe=r(Qo,"IMG",{class:!0,src:!0}),Hr=u(Qo),je=r(Qo,"IMG",{class:!0,src:!0}),Qo.forEach(o),xo=u(e),q=r(e,"H2",{class:!0});var Zo=a(q);le=r(Zo,"A",{id:!0,class:!0,href:!0});var vs=a(le);Ft=r(vs,"SPAN",{});var ys=a(Ft);g(Ie.$$.fragment,ys),ys.forEach(o),vs.forEach(o),Nr=u(Zo),Yt=r(Zo,"SPAN",{});var ws=a(Yt);Mr=l(ws,"Viewing a repo's history"),ws.forEach(o),Zo.forEach(o),To=u(e),p=r(e,"P",{});var S=a(p);Or=l(S,"Every time you go through the "),Rt=r(S,"CODE",{});var _s=a(Rt);Dr=l(_s,"add"),_s.forEach(o),Lr=l(S,"-"),qt=r(S,"CODE",{});var bs=a(qt);Fr=l(bs,"commit"),bs.forEach(o),Yr=l(S,"-"),jt=r(S,"CODE",{});var Es=a(jt);Rr=l(Es,"push"),Es.forEach(o),qr=l(S," cycle, the repo will keep track of every change you\u2019ve made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as "),Ut=r(S,"EM",{});var $s=a(Ut);jr=l($s,"diff"),$s.forEach(o),Ur=l(S,") introduced by each commit. To see the history, you can click on the "),Bt=r(S,"STRONG",{});var ks=a(Bt);Br=l(ks,"History: X commits"),ks.forEach(o),zr=l(S," link."),S.forEach(o),Co=u(e),j=r(e,"DIV",{class:!0});var ei=a(j);Ue=r(ei,"IMG",{class:!0,src:!0}),Vr=u(ei),Be=r(ei,"IMG",{class:!0,src:!0}),ei.forEach(o),Go=u(e),ze=r(e,"P",{});var Ss=a(ze);Wr=l(Ss,"You can click on an individual commit to see what changes that commit introduced:"),Ss.forEach(o),Ho=u(e),U=r(e,"DIV",{class:!0});var ti=a(U);Ve=r(ti,"IMG",{class:!0,src:!0}),Xr=u(ti),We=r(ti,"IMG",{class:!0,src:!0}),ti.forEach(o),this.h()},h(){h(x,"name","hf:doc:metadata"),h(x,"content",JSON.stringify(Hs)),h(z,"id","getting-started-with-repositories"),h(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(z,"href","#getting-started-with-repositories"),h(T,"class","relative group"),h(V,"id","requirements"),h(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(V,"href","#requirements"),h(C,"class","relative group"),h(pe,"href","https://git-scm.com/downloads"),h(pe,"rel","nofollow"),h(de,"href","https://git-lfs.github.com/"),h(de,"rel","nofollow"),h(X,"href","https://huggingface.co/docs/huggingface_hub/index"),h(X,"rel","nofollow"),h(b,"width","560"),h(b,"height","315"),P(b.src,Qr="https://www.youtube-nocookie.com/embed/rkCly_cbMBk")||h(b,"src",Qr),h(b,"title","Managing a repo"),h(b,"frameborder","0"),h(b,"allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"),b.allowFullscreen=!0,h(J,"id","creating-a-repository"),h(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(J,"href","#creating-a-repository"),h(G,"class","relative group"),h(ye,"href","http://huggingface.co/new"),h(ye,"rel","nofollow"),h(He,"class","block dark:hidden"),P(He.src,Zr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo.png")||h(He,"src",Zr),h(Ne,"class","hidden dark:block"),P(Ne.src,ea="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo-dark.png")||h(Ne,"src",ea),h(H,"class","flex justify-center"),h(Me,"href","repositories-licenses"),h(E,"start","2"),h(De,"class","block dark:hidden"),P(De.src,ta="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo.png")||h(De,"src",ta),h(Le,"class","hidden dark:block"),P(Le.src,oa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo-dark.png")||h(Le,"src",oa),h(M,"class","flex justify-center"),h(Fe,"href","./models-cards"),h(Q,"id","adding-files-to-a-repository-web-ui"),h(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Q,"href","#adding-files-to-a-repository-web-ui"),h(O,"class","relative group"),h(Z,"id","adding-files-to-a-repository-terminal"),h(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Z,"href","#adding-files-to-a-repository-terminal"),h(D,"class","relative group"),h(ee,"id","cloning-repositories"),h(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ee,"href","#cloning-repositories"),h(L,"class","relative group"),h(oe,"id","set-up"),h(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oe,"href","#set-up"),h(F,"class","relative group"),h(ae,"id","pushing-files"),h(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ae,"href","#pushing-files"),h(Y,"class","relative group"),h(qe,"class","block dark:hidden"),P(qe.src,ia="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files.png")||h(qe,"src",ia),h(je,"class","hidden dark:block"),P(je.src,ra="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files-dark.png")||h(je,"src",ra),h(R,"class","flex justify-center"),h(le,"id","viewing-a-repos-history"),h(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(le,"href","#viewing-a-repos-history"),h(q,"class","relative group"),h(Ue,"class","block dark:hidden"),P(Ue.src,aa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history.png")||h(Ue,"src",aa),h(Be,"class","hidden dark:block"),P(Be.src,sa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history-dark.png")||h(Be,"src",sa),h(j,"class","flex justify-center"),h(Ve,"class","block dark:hidden"),P(Ve.src,la="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history.gif")||h(Ve,"src",la),h(We,"class","hidden dark:block"),P(We.src,na="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history-dark.gif")||h(We,"src",na),h(U,"class","flex justify-center")},m(e,n){t(document.head,x),c(e,Vt,n),c(e,T,n),t(T,z),t(z,Ke),v(fe,Ke,null),t(T,oi),t(T,Qe),t(Qe,ii),c(e,Wt,n),c(e,xe,n),t(xe,ri),c(e,Xt,n),c(e,C,n),t(C,V),t(V,Ze),v(ue,Ze,null),t(C,ai),t(C,et),t(et,si),c(e,Jt,n),c(e,Te,n),t(Te,li),c(e,Kt,n),c(e,$,n),t($,ni),t($,tt),t(tt,hi),t($,ci),t($,pe),t(pe,fi),t($,ui),t($,de),t(de,pi),t($,di),c(e,Qt,n),c(e,W,n),t(W,mi),t(W,X),t(X,ot),t(ot,gi),t(X,vi),t(W,yi),c(e,Zt,n),v(me,e,n),c(e,eo,n),c(e,Ce,n),t(Ce,it),t(it,wi),c(e,to,n),c(e,b,n),c(e,oo,n),c(e,G,n),t(G,J),t(J,rt),v(ge,rt,null),t(G,_i),t(G,at),t(at,bi),c(e,io,n),c(e,K,n),t(K,Ei),t(K,st),t(st,$i),t(K,ki),c(e,ro,n),c(e,Ge,n),t(Ge,ve),t(ve,Si),t(ve,ye),t(ye,Pi),t(ve,Ai),c(e,ao,n),c(e,H,n),t(H,He),t(H,Ii),t(H,Ne),c(e,so,n),c(e,E,n),t(E,lt),t(lt,nt),t(nt,xi),t(E,Ti),t(E,ht),t(ht,ct),t(ct,Ci),t(E,Gi),t(E,ft),t(ft,ut),t(ut,Hi),t(E,Ni),t(E,pt),t(pt,N),t(N,Mi),t(N,dt),t(dt,Oi),t(N,Di),t(N,Me),t(Me,mt),t(mt,Li),t(N,Fi),c(e,lo,n),c(e,Oe,n),t(Oe,Yi),c(e,no,n),c(e,M,n),t(M,De),t(M,Ri),t(M,Le),c(e,ho,n),c(e,A,n),t(A,qi),t(A,gt),t(gt,ji),t(A,Ui),t(A,Fe),t(Fe,vt),t(vt,Bi),t(A,zi),c(e,co,n),c(e,O,n),t(O,Q),t(Q,yt),v(we,yt,null),t(O,Vi),t(O,wt),t(wt,Wi),c(e,fo,n),c(e,Ye,n),t(Ye,Xi),c(e,uo,n),c(e,D,n),t(D,Z),t(Z,_t),v(_e,_t,null),t(D,Ji),t(D,bt),t(bt,Ki),c(e,po,n),c(e,L,n),t(L,ee),t(ee,Et),v(be,Et,null),t(L,Qi),t(L,$t),t($t,Zi),c(e,mo,n),c(e,te,n),t(te,er),t(te,kt),t(kt,tr),t(te,or),c(e,go,n),v(Ee,e,n),c(e,vo,n),c(e,F,n),t(F,oe),t(oe,St),v($e,St,null),t(F,ir),t(F,Pt),t(Pt,rr),c(e,yo,n),c(e,Re,n),t(Re,ar),c(e,wo,n),c(e,ie,n),t(ie,sr),t(ie,At),t(At,lr),t(ie,nr),c(e,_o,n),v(ke,e,n),c(e,bo,n),c(e,re,n),t(re,hr),t(re,It),t(It,cr),t(re,fr),c(e,Eo,n),v(Se,e,n),c(e,$o,n),c(e,k,n),t(k,ur),t(k,xt),t(xt,pr),t(k,dr),t(k,Tt),t(Tt,mr),t(k,gr),t(k,Ct),t(Ct,vr),t(k,yr),c(e,ko,n),c(e,Y,n),t(Y,ae),t(ae,Gt),v(Pe,Gt,null),t(Y,wr),t(Y,Ht),t(Ht,_r),c(e,So,n),c(e,d,n),t(d,br),t(d,Nt),t(Nt,Er),t(d,$r),t(d,Mt),t(Mt,kr),t(d,Sr),t(d,Ot),t(Ot,Pr),t(d,Ar),t(d,Dt),t(Dt,Ir),t(d,xr),c(e,Po,n),v(Ae,e,n),c(e,Ao,n),c(e,se,n),t(se,Tr),t(se,Lt),t(Lt,Cr),t(se,Gr),c(e,Io,n),c(e,R,n),t(R,qe),t(R,Hr),t(R,je),c(e,xo,n),c(e,q,n),t(q,le),t(le,Ft),v(Ie,Ft,null),t(q,Nr),t(q,Yt),t(Yt,Mr),c(e,To,n),c(e,p,n),t(p,Or),t(p,Rt),t(Rt,Dr),t(p,Lr),t(p,qt),t(qt,Fr),t(p,Yr),t(p,jt),t(jt,Rr),t(p,qr),t(p,Ut),t(Ut,jr),t(p,Ur),t(p,Bt),t(Bt,Br),t(p,zr),c(e,Co,n),c(e,j,n),t(j,Ue),t(j,Vr),t(j,Be),c(e,Go,n),c(e,ze,n),t(ze,Wr),c(e,Ho,n),c(e,U,n),t(U,Ve),t(U,Xr),t(U,We),No=!0},p:Ts,i(e){No||(y(fe.$$.fragment,e),y(ue.$$.fragment,e),y(me.$$.fragment,e),y(ge.$$.fragment,e),y(we.$$.fragment,e),y(_e.$$.fragment,e),y(be.$$.fragment,e),y(Ee.$$.fragment,e),y($e.$$.fragment,e),y(ke.$$.fragment,e),y(Se.$$.fragment,e),y(Pe.$$.fragment,e),y(Ae.$$.fragment,e),y(Ie.$$.fragment,e),No=!0)},o(e){w(fe.$$.fragment,e),w(ue.$$.fragment,e),w(me.$$.fragment,e),w(ge.$$.fragment,e),w(we.$$.fragment,e),w(_e.$$.fragment,e),w(be.$$.fragment,e),w(Ee.$$.fragment,e),w($e.$$.fragment,e),w(ke.$$.fragment,e),w(Se.$$.fragment,e),w(Pe.$$.fragment,e),w(Ae.$$.fragment,e),w(Ie.$$.fragment,e),No=!1},d(e){o(x),e&&o(Vt),e&&o(T),_(fe),e&&o(Wt),e&&o(xe),e&&o(Xt),e&&o(C),_(ue),e&&o(Jt),e&&o(Te),e&&o(Kt),e&&o($),e&&o(Qt),e&&o(W),e&&o(Zt),_(me,e),e&&o(eo),e&&o(Ce),e&&o(to),e&&o(b),e&&o(oo),e&&o(G),_(ge),e&&o(io),e&&o(K),e&&o(ro),e&&o(Ge),e&&o(ao),e&&o(H),e&&o(so),e&&o(E),e&&o(lo),e&&o(Oe),e&&o(no),e&&o(M),e&&o(ho),e&&o(A),e&&o(co),e&&o(O),_(we),e&&o(fo),e&&o(Ye),e&&o(uo),e&&o(D),_(_e),e&&o(po),e&&o(L),_(be),e&&o(mo),e&&o(te),e&&o(go),_(Ee,e),e&&o(vo),e&&o(F),_($e),e&&o(yo),e&&o(Re),e&&o(wo),e&&o(ie),e&&o(_o),_(ke,e),e&&o(bo),e&&o(re),e&&o(Eo),_(Se,e),e&&o($o),e&&o(k),e&&o(ko),e&&o(Y),_(Pe),e&&o(So),e&&o(d),e&&o(Po),_(Ae,e),e&&o(Ao),e&&o(se),e&&o(Io),e&&o(R),e&&o(xo),e&&o(q),_(Ie),e&&o(To),e&&o(p),e&&o(Co),e&&o(j),e&&o(Go),e&&o(ze),e&&o(Ho),e&&o(U)}}}const Hs={local:"getting-started-with-repositories",sections:[{local:"requirements",title:"Requirements"},{local:"creating-a-repository",title:"Creating a repository"},{local:"adding-files-to-a-repository-web-ui",title:"Adding files to a repository (Web UI)"},{local:"adding-files-to-a-repository-terminal",sections:[{local:"cloning-repositories",title:"Cloning repositories"},{local:"set-up",title:"Set up"},{local:"pushing-files",title:"Pushing files"}],title:"Adding files to a repository (terminal)"},{local:"viewing-a-repos-history",title:"Viewing a repo's history"}],title:"Getting Started with Repositories"};function Ns(Kr){return Cs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ls extends Ps{constructor(x){super();As(this,x,Ns,Gs,Is,{})}}export{Ls as default,Hs as metadata};
