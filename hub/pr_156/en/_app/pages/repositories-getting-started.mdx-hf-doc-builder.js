import{S as qr,i as jr,s as Br,e as i,k as f,w as _,t as s,N as zr,c as a,d as o,m as u,a as r,x as b,h as l,b as h,P as E,G as t,g as c,y as k,L as Vr,q as $,o as I,B as S,v as Ur}from"../chunks/vendor-hf-doc-builder.js";import{I as Ye}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Ct}from"../chunks/CodeBlock-hf-doc-builder.js";function Wr($a){let x,Gt,C,q,Re,re,Mo,qe,No,At,_e,Lo,Ht,G,j,je,se,Do,Be,Oo,Mt,be,Fo,Nt,v,Yo,ze,Ro,qo,le,jo,Bo,ne,zo,Vo,Lt,B,Uo,z,Ve,Wo,Xo,Jo,Dt,he,Ot,V,Ko,Ue,Qo,Zo,Ft,m,Ia,Yt,A,U,We,ce,ei,Xe,ti,Rt,W,oi,Je,ii,ai,qt,Ee,fe,ri,ue,si,li,jt,H,ke,Sa,ni,$e,Pa,Bt,g,Ke,Qe,hi,ci,Ze,et,fi,ui,tt,ot,di,pi,it,M,mi,at,gi,vi,Ie,rt,yi,wi,zt,Se,_i,Vt,N,Pe,Ta,bi,Te,xa,Ut,P,Ei,st,ki,$i,xe,lt,Ii,Si,Wt,L,X,nt,de,Pi,ht,Ti,Xt,J,xi,ct,Ci,Gi,Jt,pe,Kt,D,K,ft,me,Ai,ut,Hi,Qt,Ce,Mi,Zt,Q,Ni,dt,Li,Di,eo,ge,to,Z,Oi,pt,Fi,Yi,oo,ve,io,y,Ri,mt,qi,ji,gt,Bi,zi,vt,Vi,Ui,ao,p,Wi,yt,Xi,Ji,wt,Ki,Qi,_t,Zi,ea,bt,ta,oa,ro,ye,so,ee,ia,Et,aa,ra,lo,O,Ge,Ca,sa,Ae,Ga,no,F,te,kt,we,la,$t,na,ho,d,ha,It,ca,fa,St,ua,da,Pt,pa,ma,Tt,ga,va,xt,ya,wa,co,Y,He,Aa,_a,Me,Ha,fo,Ne,ba,uo,R,Le,Ma,Ea,De,Na,po;return re=new Ye({}),se=new Ye({}),he=new Ct({props:{code:`python -m pip install huggingface_hub
huggingface-cli login`,highlighted:`python -m pip install huggingface_hub
huggingface-cli login`}}),ce=new Ye({}),de=new Ye({}),pe=new Ct({props:{code:`git clone https://huggingface.co/<your-username>/<your-model-id>
cd <your-model-id>`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/&lt;your-username&gt;/&lt;your-model-id&gt;
<span class="hljs-built_in">cd</span> &lt;your-model-id&gt;`}}),me=new Ye({}),ge=new Ct({props:{code:"git lfs install",highlighted:"git lfs install"}}),ve=new Ct({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),ye=new Ct({props:{code:`# Create any files you like! Then...
git add .
git commit -m "First model version"  # You can choose any descriptive message
git push`,highlighted:`<span class="hljs-comment"># Create any files you like! Then...</span>
git add .
git commit -m <span class="hljs-string">&quot;First model version&quot;</span>  <span class="hljs-comment"># You can choose any descriptive message</span>
git push`}}),we=new Ye({}),{c(){x=i("meta"),Gt=f(),C=i("h1"),q=i("a"),Re=i("span"),_(re.$$.fragment),Mo=f(),qe=i("span"),No=s("Getting Started with Repositories"),At=f(),_e=i("p"),Lo=s("This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),Ht=f(),G=i("h2"),j=i("a"),je=i("span"),_(se.$$.fragment),Do=f(),Be=i("span"),Oo=s("Requirements"),Mt=f(),be=i("p"),Fo=s("This document shows how to handle repositories through the web interface as well as through the terminal. There are no requirements if working with the UI. If you want to work with the terminal, please follow these instructions."),Nt=f(),v=i("p"),Yo=s("If you do not have "),ze=i("code"),Ro=s("git"),qo=s(" available as a CLI command yet, you will need to "),le=i("a"),jo=s("install Git"),Bo=s(" for your platform. You will also need to "),ne=i("a"),zo=s("install Git LFS"),Vo=s(", which will be used to handle large files such as images and model weights."),Lt=f(),B=i("p"),Uo=s("To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),z=i("a"),Ve=i("code"),Wo=s("huggingface_hub"),Xo=s(" CLI"),Jo=s(" and running the login command:"),Dt=f(),_(he.$$.fragment),Ot=f(),V=i("p"),Ko=s("The content in the "),Ue=i("strong"),Qo=s("Getting Started"),Zo=s(" section of this document is also available as a video!"),Ft=f(),m=i("iframe"),Yt=f(),A=i("h2"),U=i("a"),We=i("span"),_(ce.$$.fragment),ei=f(),Xe=i("span"),ti=s("Creating a repository"),Rt=f(),W=i("p"),oi=s("Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide you\u2019ll be creating a "),Je=i("strong"),ii=s("model repository"),ai=s(" for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),qt=f(),Ee=i("ol"),fe=i("li"),ri=s("To create a new repository, visit "),ue=i("a"),si=s("huggingface.co/new"),li=s(":"),jt=f(),H=i("div"),ke=i("img"),ni=f(),$e=i("img"),Bt=f(),g=i("ol"),Ke=i("li"),Qe=i("p"),hi=s("Specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),ci=f(),Ze=i("li"),et=i("p"),fi=s("Enter your model\u2019s name. This will also be the name of the repository."),ui=f(),tt=i("li"),ot=i("p"),di=s("Specify whether you want your model to be public or private."),pi=f(),it=i("li"),M=i("p"),mi=s("Specify the license. You can leave the "),at=i("em"),gi=s("License"),vi=s(" field blank for now. To learn about licenses, visit the "),Ie=i("a"),rt=i("strong"),yi=s("Licenses"),wi=s(" documentation."),zt=f(),Se=i("p"),_i=s("After creating your model repository, you should see a page like this:"),Vt=f(),N=i("div"),Pe=i("img"),bi=f(),Te=i("img"),Ut=f(),P=i("p"),Ei=s("Note that the Hub prompts you to create a "),st=i("em"),ki=s("Model Card"),$i=s(", which you can learn about in the "),xe=i("a"),lt=i("strong"),Ii=s("Model Cards documentation"),Si=s(". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),Wt=f(),L=i("h2"),X=i("a"),nt=i("span"),_(de.$$.fragment),Pi=f(),ht=i("span"),Ti=s("Cloning repositories"),Xt=f(),J=i("p"),xi=s("Downloading repositories to your local machine is called "),ct=i("em"),Ci=s("cloning"),Gi=s(". You can use the following commands to load the repo that we made and navigate to it:"),Jt=f(),_(pe.$$.fragment),Kt=f(),D=i("h2"),K=i("a"),ft=i("span"),_(me.$$.fragment),Ai=f(),ut=i("span"),Hi=s("Adding files to a repository (terminal)"),Qt=f(),Ce=i("p"),Mi=s("Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),Zt=f(),Q=i("p"),Ni=s("Do you have files larger than 10MB? Those files should be tracked with "),dt=i("code"),Li=s("git-lfs"),Di=s(", which you can initialize with:"),eo=f(),_(ge.$$.fragment),to=f(),Z=i("p"),Oi=s("Note that if your files are larger than "),pt=i("strong"),Fi=s("5GB"),Yi=s(" you\u2019ll also need to run:"),oo=f(),_(ve.$$.fragment),io=f(),y=i("p"),Ri=s("When you use Hugging Face to create a repository, Hugging Face automatically provides a list of common file extensions for common Machine Learning large files in the "),mt=i("code"),qi=s(".gitattributes"),ji=s(" file, which "),gt=i("code"),Bi=s("git-lfs"),zi=s(" uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),vt=i("code"),Vi=s('git lfs track "*.your_extension"'),Ui=s("."),ao=f(),p=i("p"),Wi=s("You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),yt=i("em"),Xi=s("commit"),Ji=s(", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, you have to "),wt=i("code"),Ki=s("add"),Qi=s(" the files to let Git know that we\u2019re planning on saving the changes and then "),_t=i("code"),Zi=s("commit"),ea=s(" those changes. In order to sync the new commit with the Hugging Face Hub, you then "),bt=i("code"),ta=s("push"),oa=s(" the commit to the Hub."),ro=f(),_(ye.$$.fragment),so=f(),ee=i("p"),ia=s("And you\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that some files in this example have a size of "),Et=i("code"),aa=s("1.04 GB"),ra=s(", so the repo uses Git LFS to track it."),lo=f(),O=i("div"),Ge=i("img"),sa=f(),Ae=i("img"),no=f(),F=i("h2"),te=i("a"),kt=i("span"),_(we.$$.fragment),la=f(),$t=i("span"),na=s("Viewing a repo's history"),ho=f(),d=i("p"),ha=s("Every time you go through the "),It=i("code"),ca=s("add"),fa=s("-"),St=i("code"),ua=s("commit"),da=s("-"),Pt=i("code"),pa=s("push"),ma=s(" cycle, the repo will keep track of every change you\u2019ve made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as "),Tt=i("em"),ga=s("diff"),va=s(") introduced by each commit. To see the history, you can click on the "),xt=i("strong"),ya=s("History: X commits"),wa=s(" link."),co=f(),Y=i("div"),He=i("img"),_a=f(),Me=i("img"),fo=f(),Ne=i("p"),ba=s("You can click on an individual commit to see what changes that commit introduced:"),uo=f(),R=i("div"),Le=i("img"),Ea=f(),De=i("img"),this.h()},l(e){const n=zr('[data-svelte="svelte-1phssyn"]',document.head);x=a(n,"META",{name:!0,content:!0}),n.forEach(o),Gt=u(e),C=a(e,"H1",{class:!0});var mo=r(C);q=a(mo,"A",{id:!0,class:!0,href:!0});var La=r(q);Re=a(La,"SPAN",{});var Da=r(Re);b(re.$$.fragment,Da),Da.forEach(o),La.forEach(o),Mo=u(mo),qe=a(mo,"SPAN",{});var Oa=r(qe);No=l(Oa,"Getting Started with Repositories"),Oa.forEach(o),mo.forEach(o),At=u(e),_e=a(e,"P",{});var Fa=r(_e);Lo=l(Fa,"This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),Fa.forEach(o),Ht=u(e),G=a(e,"H2",{class:!0});var go=r(G);j=a(go,"A",{id:!0,class:!0,href:!0});var Ya=r(j);je=a(Ya,"SPAN",{});var Ra=r(je);b(se.$$.fragment,Ra),Ra.forEach(o),Ya.forEach(o),Do=u(go),Be=a(go,"SPAN",{});var qa=r(Be);Oo=l(qa,"Requirements"),qa.forEach(o),go.forEach(o),Mt=u(e),be=a(e,"P",{});var ja=r(be);Fo=l(ja,"This document shows how to handle repositories through the web interface as well as through the terminal. There are no requirements if working with the UI. If you want to work with the terminal, please follow these instructions."),ja.forEach(o),Nt=u(e),v=a(e,"P",{});var oe=r(v);Yo=l(oe,"If you do not have "),ze=a(oe,"CODE",{});var Ba=r(ze);Ro=l(Ba,"git"),Ba.forEach(o),qo=l(oe," available as a CLI command yet, you will need to "),le=a(oe,"A",{href:!0,rel:!0});var za=r(le);jo=l(za,"install Git"),za.forEach(o),Bo=l(oe," for your platform. You will also need to "),ne=a(oe,"A",{href:!0,rel:!0});var Va=r(ne);zo=l(Va,"install Git LFS"),Va.forEach(o),Vo=l(oe,", which will be used to handle large files such as images and model weights."),oe.forEach(o),Lt=u(e),B=a(e,"P",{});var vo=r(B);Uo=l(vo,"To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),z=a(vo,"A",{href:!0,rel:!0});var ka=r(z);Ve=a(ka,"CODE",{});var Ua=r(Ve);Wo=l(Ua,"huggingface_hub"),Ua.forEach(o),Xo=l(ka," CLI"),ka.forEach(o),Jo=l(vo," and running the login command:"),vo.forEach(o),Dt=u(e),b(he.$$.fragment,e),Ot=u(e),V=a(e,"P",{});var yo=r(V);Ko=l(yo,"The content in the "),Ue=a(yo,"STRONG",{});var Wa=r(Ue);Qo=l(Wa,"Getting Started"),Wa.forEach(o),Zo=l(yo," section of this document is also available as a video!"),yo.forEach(o),Ft=u(e),m=a(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),r(m).forEach(o),Yt=u(e),A=a(e,"H2",{class:!0});var wo=r(A);U=a(wo,"A",{id:!0,class:!0,href:!0});var Xa=r(U);We=a(Xa,"SPAN",{});var Ja=r(We);b(ce.$$.fragment,Ja),Ja.forEach(o),Xa.forEach(o),ei=u(wo),Xe=a(wo,"SPAN",{});var Ka=r(Xe);ti=l(Ka,"Creating a repository"),Ka.forEach(o),wo.forEach(o),Rt=u(e),W=a(e,"P",{});var _o=r(W);oi=l(_o,"Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide you\u2019ll be creating a "),Je=a(_o,"STRONG",{});var Qa=r(Je);ii=l(Qa,"model repository"),Qa.forEach(o),ai=l(_o," for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),_o.forEach(o),qt=u(e),Ee=a(e,"OL",{});var Za=r(Ee);fe=a(Za,"LI",{});var bo=r(fe);ri=l(bo,"To create a new repository, visit "),ue=a(bo,"A",{href:!0,rel:!0});var er=r(ue);si=l(er,"huggingface.co/new"),er.forEach(o),li=l(bo,":"),bo.forEach(o),Za.forEach(o),jt=u(e),H=a(e,"DIV",{class:!0});var Eo=r(H);ke=a(Eo,"IMG",{class:!0,src:!0}),ni=u(Eo),$e=a(Eo,"IMG",{class:!0,src:!0}),Eo.forEach(o),Bt=u(e),g=a(e,"OL",{start:!0});var ie=r(g);Ke=a(ie,"LI",{});var tr=r(Ke);Qe=a(tr,"P",{});var or=r(Qe);hi=l(or,"Specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),or.forEach(o),tr.forEach(o),ci=u(ie),Ze=a(ie,"LI",{});var ir=r(Ze);et=a(ir,"P",{});var ar=r(et);fi=l(ar,"Enter your model\u2019s name. This will also be the name of the repository."),ar.forEach(o),ir.forEach(o),ui=u(ie),tt=a(ie,"LI",{});var rr=r(tt);ot=a(rr,"P",{});var sr=r(ot);di=l(sr,"Specify whether you want your model to be public or private."),sr.forEach(o),rr.forEach(o),pi=u(ie),it=a(ie,"LI",{});var lr=r(it);M=a(lr,"P",{});var Oe=r(M);mi=l(Oe,"Specify the license. You can leave the "),at=a(Oe,"EM",{});var nr=r(at);gi=l(nr,"License"),nr.forEach(o),vi=l(Oe," field blank for now. To learn about licenses, visit the "),Ie=a(Oe,"A",{href:!0});var hr=r(Ie);rt=a(hr,"STRONG",{});var cr=r(rt);yi=l(cr,"Licenses"),cr.forEach(o),hr.forEach(o),wi=l(Oe," documentation."),Oe.forEach(o),lr.forEach(o),ie.forEach(o),zt=u(e),Se=a(e,"P",{});var fr=r(Se);_i=l(fr,"After creating your model repository, you should see a page like this:"),fr.forEach(o),Vt=u(e),N=a(e,"DIV",{class:!0});var ko=r(N);Pe=a(ko,"IMG",{class:!0,src:!0}),bi=u(ko),Te=a(ko,"IMG",{class:!0,src:!0}),ko.forEach(o),Ut=u(e),P=a(e,"P",{});var Fe=r(P);Ei=l(Fe,"Note that the Hub prompts you to create a "),st=a(Fe,"EM",{});var ur=r(st);ki=l(ur,"Model Card"),ur.forEach(o),$i=l(Fe,", which you can learn about in the "),xe=a(Fe,"A",{href:!0});var dr=r(xe);lt=a(dr,"STRONG",{});var pr=r(lt);Ii=l(pr,"Model Cards documentation"),pr.forEach(o),dr.forEach(o),Si=l(Fe,". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),Fe.forEach(o),Wt=u(e),L=a(e,"H2",{class:!0});var $o=r(L);X=a($o,"A",{id:!0,class:!0,href:!0});var mr=r(X);nt=a(mr,"SPAN",{});var gr=r(nt);b(de.$$.fragment,gr),gr.forEach(o),mr.forEach(o),Pi=u($o),ht=a($o,"SPAN",{});var vr=r(ht);Ti=l(vr,"Cloning repositories"),vr.forEach(o),$o.forEach(o),Xt=u(e),J=a(e,"P",{});var Io=r(J);xi=l(Io,"Downloading repositories to your local machine is called "),ct=a(Io,"EM",{});var yr=r(ct);Ci=l(yr,"cloning"),yr.forEach(o),Gi=l(Io,". You can use the following commands to load the repo that we made and navigate to it:"),Io.forEach(o),Jt=u(e),b(pe.$$.fragment,e),Kt=u(e),D=a(e,"H2",{class:!0});var So=r(D);K=a(So,"A",{id:!0,class:!0,href:!0});var wr=r(K);ft=a(wr,"SPAN",{});var _r=r(ft);b(me.$$.fragment,_r),_r.forEach(o),wr.forEach(o),Ai=u(So),ut=a(So,"SPAN",{});var br=r(ut);Hi=l(br,"Adding files to a repository (terminal)"),br.forEach(o),So.forEach(o),Qt=u(e),Ce=a(e,"P",{});var Er=r(Ce);Mi=l(Er,"Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),Er.forEach(o),Zt=u(e),Q=a(e,"P",{});var Po=r(Q);Ni=l(Po,"Do you have files larger than 10MB? Those files should be tracked with "),dt=a(Po,"CODE",{});var kr=r(dt);Li=l(kr,"git-lfs"),kr.forEach(o),Di=l(Po,", which you can initialize with:"),Po.forEach(o),eo=u(e),b(ge.$$.fragment,e),to=u(e),Z=a(e,"P",{});var To=r(Z);Oi=l(To,"Note that if your files are larger than "),pt=a(To,"STRONG",{});var $r=r(pt);Fi=l($r,"5GB"),$r.forEach(o),Yi=l(To," you\u2019ll also need to run:"),To.forEach(o),oo=u(e),b(ve.$$.fragment,e),io=u(e),y=a(e,"P",{});var ae=r(y);Ri=l(ae,"When you use Hugging Face to create a repository, Hugging Face automatically provides a list of common file extensions for common Machine Learning large files in the "),mt=a(ae,"CODE",{});var Ir=r(mt);qi=l(Ir,".gitattributes"),Ir.forEach(o),ji=l(ae," file, which "),gt=a(ae,"CODE",{});var Sr=r(gt);Bi=l(Sr,"git-lfs"),Sr.forEach(o),zi=l(ae," uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),vt=a(ae,"CODE",{});var Pr=r(vt);Vi=l(Pr,'git lfs track "*.your_extension"'),Pr.forEach(o),Ui=l(ae,"."),ae.forEach(o),ao=u(e),p=a(e,"P",{});var T=r(p);Wi=l(T,"You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),yt=a(T,"EM",{});var Tr=r(yt);Xi=l(Tr,"commit"),Tr.forEach(o),Ji=l(T,", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, you have to "),wt=a(T,"CODE",{});var xr=r(wt);Ki=l(xr,"add"),xr.forEach(o),Qi=l(T," the files to let Git know that we\u2019re planning on saving the changes and then "),_t=a(T,"CODE",{});var Cr=r(_t);Zi=l(Cr,"commit"),Cr.forEach(o),ea=l(T," those changes. In order to sync the new commit with the Hugging Face Hub, you then "),bt=a(T,"CODE",{});var Gr=r(bt);ta=l(Gr,"push"),Gr.forEach(o),oa=l(T," the commit to the Hub."),T.forEach(o),ro=u(e),b(ye.$$.fragment,e),so=u(e),ee=a(e,"P",{});var xo=r(ee);ia=l(xo,"And you\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that some files in this example have a size of "),Et=a(xo,"CODE",{});var Ar=r(Et);aa=l(Ar,"1.04 GB"),Ar.forEach(o),ra=l(xo,", so the repo uses Git LFS to track it."),xo.forEach(o),lo=u(e),O=a(e,"DIV",{class:!0});var Co=r(O);Ge=a(Co,"IMG",{class:!0,src:!0}),sa=u(Co),Ae=a(Co,"IMG",{class:!0,src:!0}),Co.forEach(o),no=u(e),F=a(e,"H2",{class:!0});var Go=r(F);te=a(Go,"A",{id:!0,class:!0,href:!0});var Hr=r(te);kt=a(Hr,"SPAN",{});var Mr=r(kt);b(we.$$.fragment,Mr),Mr.forEach(o),Hr.forEach(o),la=u(Go),$t=a(Go,"SPAN",{});var Nr=r($t);na=l(Nr,"Viewing a repo's history"),Nr.forEach(o),Go.forEach(o),ho=u(e),d=a(e,"P",{});var w=r(d);ha=l(w,"Every time you go through the "),It=a(w,"CODE",{});var Lr=r(It);ca=l(Lr,"add"),Lr.forEach(o),fa=l(w,"-"),St=a(w,"CODE",{});var Dr=r(St);ua=l(Dr,"commit"),Dr.forEach(o),da=l(w,"-"),Pt=a(w,"CODE",{});var Or=r(Pt);pa=l(Or,"push"),Or.forEach(o),ma=l(w," cycle, the repo will keep track of every change you\u2019ve made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as "),Tt=a(w,"EM",{});var Fr=r(Tt);ga=l(Fr,"diff"),Fr.forEach(o),va=l(w,") introduced by each commit. To see the history, you can click on the "),xt=a(w,"STRONG",{});var Yr=r(xt);ya=l(Yr,"History: X commits"),Yr.forEach(o),wa=l(w," link."),w.forEach(o),co=u(e),Y=a(e,"DIV",{class:!0});var Ao=r(Y);He=a(Ao,"IMG",{class:!0,src:!0}),_a=u(Ao),Me=a(Ao,"IMG",{class:!0,src:!0}),Ao.forEach(o),fo=u(e),Ne=a(e,"P",{});var Rr=r(Ne);ba=l(Rr,"You can click on an individual commit to see what changes that commit introduced:"),Rr.forEach(o),uo=u(e),R=a(e,"DIV",{class:!0});var Ho=r(R);Le=a(Ho,"IMG",{class:!0,src:!0}),Ea=u(Ho),De=a(Ho,"IMG",{class:!0,src:!0}),Ho.forEach(o),this.h()},h(){h(x,"name","hf:doc:metadata"),h(x,"content",JSON.stringify(Xr)),h(q,"id","getting-started-with-repositories"),h(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(q,"href","#getting-started-with-repositories"),h(C,"class","relative group"),h(j,"id","requirements"),h(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(j,"href","#requirements"),h(G,"class","relative group"),h(le,"href","https://git-scm.com/downloads"),h(le,"rel","nofollow"),h(ne,"href","https://git-lfs.github.com/"),h(ne,"rel","nofollow"),h(z,"href","https://huggingface.co/docs/huggingface_hub/index"),h(z,"rel","nofollow"),h(m,"width","560"),h(m,"height","315"),E(m.src,Ia="https://www.youtube-nocookie.com/embed/rkCly_cbMBk")||h(m,"src",Ia),h(m,"title","Managing a repo"),h(m,"frameborder","0"),h(m,"allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"),m.allowFullscreen=!0,h(U,"id","creating-a-repository"),h(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(U,"href","#creating-a-repository"),h(A,"class","relative group"),h(ue,"href","http://huggingface.co/new"),h(ue,"rel","nofollow"),h(ke,"class","block dark:hidden"),E(ke.src,Sa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo.png")||h(ke,"src",Sa),h($e,"class","hidden dark:block"),E($e.src,Pa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo-dark.png")||h($e,"src",Pa),h(H,"class","flex justify-center"),h(Ie,"href","repositories-licenses"),h(g,"start","2"),h(Pe,"class","block dark:hidden"),E(Pe.src,Ta="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo.png")||h(Pe,"src",Ta),h(Te,"class","hidden dark:block"),E(Te.src,xa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo-dark.png")||h(Te,"src",xa),h(N,"class","flex justify-center"),h(xe,"href","./models-cards"),h(X,"id","cloning-repositories"),h(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(X,"href","#cloning-repositories"),h(L,"class","relative group"),h(K,"id","adding-files-to-a-repository-terminal"),h(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(K,"href","#adding-files-to-a-repository-terminal"),h(D,"class","relative group"),h(Ge,"class","block dark:hidden"),E(Ge.src,Ca="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files.png")||h(Ge,"src",Ca),h(Ae,"class","hidden dark:block"),E(Ae.src,Ga="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files-dark.png")||h(Ae,"src",Ga),h(O,"class","flex justify-center"),h(te,"id","viewing-a-repos-history"),h(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(te,"href","#viewing-a-repos-history"),h(F,"class","relative group"),h(He,"class","block dark:hidden"),E(He.src,Aa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history.png")||h(He,"src",Aa),h(Me,"class","hidden dark:block"),E(Me.src,Ha="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history-dark.png")||h(Me,"src",Ha),h(Y,"class","flex justify-center"),h(Le,"class","block dark:hidden"),E(Le.src,Ma="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history.gif")||h(Le,"src",Ma),h(De,"class","hidden dark:block"),E(De.src,Na="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history-dark.gif")||h(De,"src",Na),h(R,"class","flex justify-center")},m(e,n){t(document.head,x),c(e,Gt,n),c(e,C,n),t(C,q),t(q,Re),k(re,Re,null),t(C,Mo),t(C,qe),t(qe,No),c(e,At,n),c(e,_e,n),t(_e,Lo),c(e,Ht,n),c(e,G,n),t(G,j),t(j,je),k(se,je,null),t(G,Do),t(G,Be),t(Be,Oo),c(e,Mt,n),c(e,be,n),t(be,Fo),c(e,Nt,n),c(e,v,n),t(v,Yo),t(v,ze),t(ze,Ro),t(v,qo),t(v,le),t(le,jo),t(v,Bo),t(v,ne),t(ne,zo),t(v,Vo),c(e,Lt,n),c(e,B,n),t(B,Uo),t(B,z),t(z,Ve),t(Ve,Wo),t(z,Xo),t(B,Jo),c(e,Dt,n),k(he,e,n),c(e,Ot,n),c(e,V,n),t(V,Ko),t(V,Ue),t(Ue,Qo),t(V,Zo),c(e,Ft,n),c(e,m,n),c(e,Yt,n),c(e,A,n),t(A,U),t(U,We),k(ce,We,null),t(A,ei),t(A,Xe),t(Xe,ti),c(e,Rt,n),c(e,W,n),t(W,oi),t(W,Je),t(Je,ii),t(W,ai),c(e,qt,n),c(e,Ee,n),t(Ee,fe),t(fe,ri),t(fe,ue),t(ue,si),t(fe,li),c(e,jt,n),c(e,H,n),t(H,ke),t(H,ni),t(H,$e),c(e,Bt,n),c(e,g,n),t(g,Ke),t(Ke,Qe),t(Qe,hi),t(g,ci),t(g,Ze),t(Ze,et),t(et,fi),t(g,ui),t(g,tt),t(tt,ot),t(ot,di),t(g,pi),t(g,it),t(it,M),t(M,mi),t(M,at),t(at,gi),t(M,vi),t(M,Ie),t(Ie,rt),t(rt,yi),t(M,wi),c(e,zt,n),c(e,Se,n),t(Se,_i),c(e,Vt,n),c(e,N,n),t(N,Pe),t(N,bi),t(N,Te),c(e,Ut,n),c(e,P,n),t(P,Ei),t(P,st),t(st,ki),t(P,$i),t(P,xe),t(xe,lt),t(lt,Ii),t(P,Si),c(e,Wt,n),c(e,L,n),t(L,X),t(X,nt),k(de,nt,null),t(L,Pi),t(L,ht),t(ht,Ti),c(e,Xt,n),c(e,J,n),t(J,xi),t(J,ct),t(ct,Ci),t(J,Gi),c(e,Jt,n),k(pe,e,n),c(e,Kt,n),c(e,D,n),t(D,K),t(K,ft),k(me,ft,null),t(D,Ai),t(D,ut),t(ut,Hi),c(e,Qt,n),c(e,Ce,n),t(Ce,Mi),c(e,Zt,n),c(e,Q,n),t(Q,Ni),t(Q,dt),t(dt,Li),t(Q,Di),c(e,eo,n),k(ge,e,n),c(e,to,n),c(e,Z,n),t(Z,Oi),t(Z,pt),t(pt,Fi),t(Z,Yi),c(e,oo,n),k(ve,e,n),c(e,io,n),c(e,y,n),t(y,Ri),t(y,mt),t(mt,qi),t(y,ji),t(y,gt),t(gt,Bi),t(y,zi),t(y,vt),t(vt,Vi),t(y,Ui),c(e,ao,n),c(e,p,n),t(p,Wi),t(p,yt),t(yt,Xi),t(p,Ji),t(p,wt),t(wt,Ki),t(p,Qi),t(p,_t),t(_t,Zi),t(p,ea),t(p,bt),t(bt,ta),t(p,oa),c(e,ro,n),k(ye,e,n),c(e,so,n),c(e,ee,n),t(ee,ia),t(ee,Et),t(Et,aa),t(ee,ra),c(e,lo,n),c(e,O,n),t(O,Ge),t(O,sa),t(O,Ae),c(e,no,n),c(e,F,n),t(F,te),t(te,kt),k(we,kt,null),t(F,la),t(F,$t),t($t,na),c(e,ho,n),c(e,d,n),t(d,ha),t(d,It),t(It,ca),t(d,fa),t(d,St),t(St,ua),t(d,da),t(d,Pt),t(Pt,pa),t(d,ma),t(d,Tt),t(Tt,ga),t(d,va),t(d,xt),t(xt,ya),t(d,wa),c(e,co,n),c(e,Y,n),t(Y,He),t(Y,_a),t(Y,Me),c(e,fo,n),c(e,Ne,n),t(Ne,ba),c(e,uo,n),c(e,R,n),t(R,Le),t(R,Ea),t(R,De),po=!0},p:Vr,i(e){po||($(re.$$.fragment,e),$(se.$$.fragment,e),$(he.$$.fragment,e),$(ce.$$.fragment,e),$(de.$$.fragment,e),$(pe.$$.fragment,e),$(me.$$.fragment,e),$(ge.$$.fragment,e),$(ve.$$.fragment,e),$(ye.$$.fragment,e),$(we.$$.fragment,e),po=!0)},o(e){I(re.$$.fragment,e),I(se.$$.fragment,e),I(he.$$.fragment,e),I(ce.$$.fragment,e),I(de.$$.fragment,e),I(pe.$$.fragment,e),I(me.$$.fragment,e),I(ge.$$.fragment,e),I(ve.$$.fragment,e),I(ye.$$.fragment,e),I(we.$$.fragment,e),po=!1},d(e){o(x),e&&o(Gt),e&&o(C),S(re),e&&o(At),e&&o(_e),e&&o(Ht),e&&o(G),S(se),e&&o(Mt),e&&o(be),e&&o(Nt),e&&o(v),e&&o(Lt),e&&o(B),e&&o(Dt),S(he,e),e&&o(Ot),e&&o(V),e&&o(Ft),e&&o(m),e&&o(Yt),e&&o(A),S(ce),e&&o(Rt),e&&o(W),e&&o(qt),e&&o(Ee),e&&o(jt),e&&o(H),e&&o(Bt),e&&o(g),e&&o(zt),e&&o(Se),e&&o(Vt),e&&o(N),e&&o(Ut),e&&o(P),e&&o(Wt),e&&o(L),S(de),e&&o(Xt),e&&o(J),e&&o(Jt),S(pe,e),e&&o(Kt),e&&o(D),S(me),e&&o(Qt),e&&o(Ce),e&&o(Zt),e&&o(Q),e&&o(eo),S(ge,e),e&&o(to),e&&o(Z),e&&o(oo),S(ve,e),e&&o(io),e&&o(y),e&&o(ao),e&&o(p),e&&o(ro),S(ye,e),e&&o(so),e&&o(ee),e&&o(lo),e&&o(O),e&&o(no),e&&o(F),S(we),e&&o(ho),e&&o(d),e&&o(co),e&&o(Y),e&&o(fo),e&&o(Ne),e&&o(uo),e&&o(R)}}}const Xr={local:"getting-started-with-repositories",sections:[{local:"requirements",title:"Requirements"},{local:"creating-a-repository",title:"Creating a repository"},{local:"cloning-repositories",title:"Cloning repositories"},{local:"adding-files-to-a-repository-terminal",title:"Adding files to a repository (terminal)"},{local:"viewing-a-repos-history",title:"Viewing a repo's history"}],title:"Getting Started with Repositories"};function Jr($a){return Ur(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class es extends qr{constructor(x){super();jr(this,x,Jr,Wr,Br,{})}}export{es as default,Xr as metadata};
