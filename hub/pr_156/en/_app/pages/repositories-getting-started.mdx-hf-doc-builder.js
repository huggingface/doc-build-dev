import{S as is,i as as,s as ss,e as i,k as f,w as y,t as l,N as rs,c as a,d as t,m as u,a as s,x as v,h as n,b as h,P,G as o,g as c,y as w,L as ls,q as _,o as b,B as E,v as ns}from"../chunks/vendor-hf-doc-builder.js";import{I as Ne}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as yt}from"../chunks/CodeBlock-hf-doc-builder.js";function hs(Wi){let A,vt,C,O,Me,te,_o,Fe,bo,wt,ye,Eo,_t,G,Y,Le,oe,$o,De,ko,bt,m,xo,Oe,Po,Ao,ie,Co,Go,ae,Io,So,Et,R,To,j,Ye,Ho,No,Mo,$t,se,kt,q,Fo,Re,Lo,Do,xt,p,Xi,Pt,I,B,je,re,Oo,qe,Yo,At,z,Ro,Be,jo,qo,Ct,ve,le,Bo,ne,zo,Vo,Gt,S,we,Ji,Uo,_e,Ki,It,T,ze,Ve,Wo,Xo,Ue,We,Jo,St,$,Ko,Xe,Qo,Zo,be,Je,ei,ti,Tt,Ee,oi,Ht,H,$e,Qi,ii,ke,Zi,Nt,k,ai,Ke,si,ri,xe,Qe,li,ni,Mt,N,V,Ze,he,hi,et,ci,Ft,U,fi,tt,ui,di,Lt,ce,Dt,M,W,ot,fe,pi,it,mi,Ot,Pe,gi,Yt,X,yi,at,vi,wi,Rt,ue,jt,J,_i,st,bi,Ei,qt,de,Bt,g,$i,rt,ki,xi,lt,Pi,Ai,nt,Ci,Gi,zt,d,Ii,ht,Si,Ti,ct,Hi,Ni,ft,Mi,Fi,ut,Li,Di,Vt,pe,Ut,K,Oi,dt,Yi,Ri,Wt,F,Ae,ea,ji,Ce,ta,Xt,L,Q,pt,me,qi,mt,Bi,Jt,D,Ge,oa,zi,Ie,ia,Kt,Se,Vi,Qt,ge,gt,aa,Zt;return te=new Ne({}),oe=new Ne({}),se=new yt({props:{code:`python -m pip install huggingface_hub
huggingface-cli login`,highlighted:`python -m pip install huggingface_hub
huggingface-cli login`}}),re=new Ne({}),he=new Ne({}),ce=new yt({props:{code:`git clone https://huggingface.co/<your-username>/<your-model-id>
cd <your-model-id>`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/&lt;your-username&gt;/&lt;your-model-id&gt;
<span class="hljs-built_in">cd</span> &lt;your-model-id&gt;`}}),fe=new Ne({}),ue=new yt({props:{code:"git lfs install",highlighted:"git lfs install"}}),de=new yt({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),pe=new yt({props:{code:`# Create any files you like! Then...
git add .
git commit -m "First model version"  # You can choose any descriptive message
git push`,highlighted:`<span class="hljs-comment"># Create any files you like! Then...</span>
git add .
git commit -m <span class="hljs-string">&quot;First model version&quot;</span>  <span class="hljs-comment"># You can choose any descriptive message</span>
git push`}}),me=new Ne({}),{c(){A=i("meta"),vt=f(),C=i("h1"),O=i("a"),Me=i("span"),y(te.$$.fragment),_o=f(),Fe=i("span"),bo=l("Getting Started with Repositories"),wt=f(),ye=i("p"),Eo=l("This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),_t=f(),G=i("h2"),Y=i("a"),Le=i("span"),y(oe.$$.fragment),$o=f(),De=i("span"),ko=l("Requirements"),bt=f(),m=i("p"),xo=l("If you do not have "),Oe=i("code"),Po=l("git"),Ao=l(" available as a CLI command yet, you will need to "),ie=i("a"),Co=l("install Git"),Go=l(" for your platform. You will also need to "),ae=i("a"),Io=l("install Git LFS"),So=l(", which will be used to handle large files such as images and model weights."),Et=f(),R=i("p"),To=l("To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),j=i("a"),Ye=i("code"),Ho=l("huggingface_hub"),No=l(" CLI"),Mo=l(" and running the login command:"),$t=f(),y(se.$$.fragment),kt=f(),q=i("p"),Fo=l("The content in the "),Re=i("strong"),Lo=l("Getting Started"),Do=l(" section of this document is also available as a video!"),xt=f(),p=i("iframe"),Pt=f(),I=i("h2"),B=i("a"),je=i("span"),y(re.$$.fragment),Oo=f(),qe=i("span"),Yo=l("Creating a repository"),At=f(),z=i("p"),Ro=l("Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide we\u2019ll be creating a "),Be=i("strong"),jo=l("model repository"),qo=l(" for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),Ct=f(),ve=i("ol"),le=i("li"),Bo=l("To create a new repository, visit "),ne=i("a"),zo=l("huggingface.co/new"),Vo=l(":"),Gt=f(),S=i("div"),we=i("img"),Uo=f(),_e=i("img"),It=f(),T=i("ol"),ze=i("li"),Ve=i("p"),Wo=l("First, specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),Xo=f(),Ue=i("li"),We=i("p"),Jo=l("Next, enter your model\u2019s name. This will also be the name of the repository. Finally, you can specify whether you want your model to be public or private."),St=f(),$=i("p"),Ko=l("You can leave the "),Xe=i("em"),Qo=l("License"),Zo=l(" field blank for now. To learn about licenses, visit the "),be=i("a"),Je=i("strong"),ei=l("Licenses"),ti=l(" section of this documentation."),Tt=f(),Ee=i("p"),oi=l("After creating your model repository, you should see a page like this:"),Ht=f(),H=i("div"),$e=i("img"),ii=f(),ke=i("img"),Nt=f(),k=i("p"),ai=l("Note that the Hub prompts you to create a "),Ke=i("em"),si=l("Model Card"),ri=l(", which you can learn about in the "),xe=i("a"),Qe=i("strong"),li=l("Model Cards documentation"),ni=l(". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),Mt=f(),N=i("h2"),V=i("a"),Ze=i("span"),y(he.$$.fragment),hi=f(),et=i("span"),ci=l("Cloning repositories"),Ft=f(),U=i("p"),fi=l("Downloading repositories to your local machine is called "),tt=i("em"),ui=l("cloning"),di=l(". You can use the following commands to load the repo that we made and navigate to it:"),Lt=f(),y(ce.$$.fragment),Dt=f(),M=i("h2"),W=i("a"),ot=i("span"),y(fe.$$.fragment),pi=f(),it=i("span"),mi=l("Adding files to a repository"),Ot=f(),Pe=i("p"),gi=l("Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),Yt=f(),X=i("p"),yi=l("Do you have files larger than 10MB? Those files should be tracked with "),at=i("code"),vi=l("git-lfs"),wi=l(", which you can initialize with:"),Rt=f(),y(ue.$$.fragment),jt=f(),J=i("p"),_i=l("Note that if your files are larger than "),st=i("strong"),bi=l("5GB"),Ei=l(" you\u2019ll also need to run:"),qt=f(),y(de.$$.fragment),Bt=f(),g=i("p"),$i=l("When you use Hugging Face to create a repository, we automatically provide a list of common file extensions for these files in the "),rt=i("code"),ki=l(".gitattributes"),xi=l(" file, which "),lt=i("code"),Pi=l("git-lfs"),Ai=l(" uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),nt=i("code"),Ci=l('git lfs track "*.your_extension"'),Gi=l("."),zt=f(),d=i("p"),Ii=l("You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),ht=i("em"),Si=l("commit"),Ti=l(", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, we have to "),ct=i("code"),Hi=l("add"),Ni=l(" the files to let Git know that we\u2019re planning on saving the changes and then "),ft=i("code"),Mi=l("commit"),Fi=l(" those changes. In order to sync the new commit with the Hugging Face Hub, we then "),ut=i("code"),Li=l("push"),Di=l(" the commit to the Hub."),Vt=f(),y(pe.$$.fragment),Ut=f(),K=i("p"),Oi=l("And we\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that one of the files in this example has a size of "),dt=i("code"),Yi=l("413 MB"),Ri=l(", so the repo uses Git LFS to track it."),Wt=f(),F=i("div"),Ae=i("img"),ji=f(),Ce=i("img"),Xt=f(),L=i("h2"),Q=i("a"),pt=i("span"),y(me.$$.fragment),qi=f(),mt=i("span"),Bi=l("Viewing a repo's history"),Jt=l("\n\nEvery time you go through the `add`-`commit`-`push` cycle, the repo will keep track of every change you've made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as *diff*) introduced by each commit. To see the history, you can click on the **History: X commits** link.\n"),D=i("div"),Ge=i("img"),zi=f(),Ie=i("img"),Kt=f(),Se=i("p"),Vi=l("You can click on an individual commit to see what changes that commit introduced:"),Qt=f(),ge=i("div"),gt=i("img"),this.h()},l(e){const r=rs('[data-svelte="svelte-1phssyn"]',document.head);A=a(r,"META",{name:!0,content:!0}),r.forEach(t),vt=u(e),C=a(e,"H1",{class:!0});var eo=s(C);O=a(eo,"A",{id:!0,class:!0,href:!0});var sa=s(O);Me=a(sa,"SPAN",{});var ra=s(Me);v(te.$$.fragment,ra),ra.forEach(t),sa.forEach(t),_o=u(eo),Fe=a(eo,"SPAN",{});var la=s(Fe);bo=n(la,"Getting Started with Repositories"),la.forEach(t),eo.forEach(t),wt=u(e),ye=a(e,"P",{});var na=s(ye);Eo=n(na,"This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),na.forEach(t),_t=u(e),G=a(e,"H2",{class:!0});var to=s(G);Y=a(to,"A",{id:!0,class:!0,href:!0});var ha=s(Y);Le=a(ha,"SPAN",{});var ca=s(Le);v(oe.$$.fragment,ca),ca.forEach(t),ha.forEach(t),$o=u(to),De=a(to,"SPAN",{});var fa=s(De);ko=n(fa,"Requirements"),fa.forEach(t),to.forEach(t),bt=u(e),m=a(e,"P",{});var Z=s(m);xo=n(Z,"If you do not have "),Oe=a(Z,"CODE",{});var ua=s(Oe);Po=n(ua,"git"),ua.forEach(t),Ao=n(Z," available as a CLI command yet, you will need to "),ie=a(Z,"A",{href:!0,rel:!0});var da=s(ie);Co=n(da,"install Git"),da.forEach(t),Go=n(Z," for your platform. You will also need to "),ae=a(Z,"A",{href:!0,rel:!0});var pa=s(ae);Io=n(pa,"install Git LFS"),pa.forEach(t),So=n(Z,", which will be used to handle large files such as images and model weights."),Z.forEach(t),Et=u(e),R=a(e,"P",{});var oo=s(R);To=n(oo,"To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),j=a(oo,"A",{href:!0,rel:!0});var Ui=s(j);Ye=a(Ui,"CODE",{});var ma=s(Ye);Ho=n(ma,"huggingface_hub"),ma.forEach(t),No=n(Ui," CLI"),Ui.forEach(t),Mo=n(oo," and running the login command:"),oo.forEach(t),$t=u(e),v(se.$$.fragment,e),kt=u(e),q=a(e,"P",{});var io=s(q);Fo=n(io,"The content in the "),Re=a(io,"STRONG",{});var ga=s(Re);Lo=n(ga,"Getting Started"),ga.forEach(t),Do=n(io," section of this document is also available as a video!"),io.forEach(t),xt=u(e),p=a(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),s(p).forEach(t),Pt=u(e),I=a(e,"H2",{class:!0});var ao=s(I);B=a(ao,"A",{id:!0,class:!0,href:!0});var ya=s(B);je=a(ya,"SPAN",{});var va=s(je);v(re.$$.fragment,va),va.forEach(t),ya.forEach(t),Oo=u(ao),qe=a(ao,"SPAN",{});var wa=s(qe);Yo=n(wa,"Creating a repository"),wa.forEach(t),ao.forEach(t),At=u(e),z=a(e,"P",{});var so=s(z);Ro=n(so,"Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide we\u2019ll be creating a "),Be=a(so,"STRONG",{});var _a=s(Be);jo=n(_a,"model repository"),_a.forEach(t),qo=n(so," for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),so.forEach(t),Ct=u(e),ve=a(e,"OL",{});var ba=s(ve);le=a(ba,"LI",{});var ro=s(le);Bo=n(ro,"To create a new repository, visit "),ne=a(ro,"A",{href:!0,rel:!0});var Ea=s(ne);zo=n(Ea,"huggingface.co/new"),Ea.forEach(t),Vo=n(ro,":"),ro.forEach(t),ba.forEach(t),Gt=u(e),S=a(e,"DIV",{class:!0});var lo=s(S);we=a(lo,"IMG",{class:!0,src:!0}),Uo=u(lo),_e=a(lo,"IMG",{class:!0,src:!0}),lo.forEach(t),It=u(e),T=a(e,"OL",{start:!0});var no=s(T);ze=a(no,"LI",{});var $a=s(ze);Ve=a($a,"P",{});var ka=s(Ve);Wo=n(ka,"First, specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),ka.forEach(t),$a.forEach(t),Xo=u(no),Ue=a(no,"LI",{});var xa=s(Ue);We=a(xa,"P",{});var Pa=s(We);Jo=n(Pa,"Next, enter your model\u2019s name. This will also be the name of the repository. Finally, you can specify whether you want your model to be public or private."),Pa.forEach(t),xa.forEach(t),no.forEach(t),St=u(e),$=a(e,"P",{});var Te=s($);Ko=n(Te,"You can leave the "),Xe=a(Te,"EM",{});var Aa=s(Xe);Qo=n(Aa,"License"),Aa.forEach(t),Zo=n(Te," field blank for now. To learn about licenses, visit the "),be=a(Te,"A",{href:!0});var Ca=s(be);Je=a(Ca,"STRONG",{});var Ga=s(Je);ei=n(Ga,"Licenses"),Ga.forEach(t),Ca.forEach(t),ti=n(Te," section of this documentation."),Te.forEach(t),Tt=u(e),Ee=a(e,"P",{});var Ia=s(Ee);oi=n(Ia,"After creating your model repository, you should see a page like this:"),Ia.forEach(t),Ht=u(e),H=a(e,"DIV",{class:!0});var ho=s(H);$e=a(ho,"IMG",{class:!0,src:!0}),ii=u(ho),ke=a(ho,"IMG",{class:!0,src:!0}),ho.forEach(t),Nt=u(e),k=a(e,"P",{});var He=s(k);ai=n(He,"Note that the Hub prompts you to create a "),Ke=a(He,"EM",{});var Sa=s(Ke);si=n(Sa,"Model Card"),Sa.forEach(t),ri=n(He,", which you can learn about in the "),xe=a(He,"A",{href:!0});var Ta=s(xe);Qe=a(Ta,"STRONG",{});var Ha=s(Qe);li=n(Ha,"Model Cards documentation"),Ha.forEach(t),Ta.forEach(t),ni=n(He,". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),He.forEach(t),Mt=u(e),N=a(e,"H2",{class:!0});var co=s(N);V=a(co,"A",{id:!0,class:!0,href:!0});var Na=s(V);Ze=a(Na,"SPAN",{});var Ma=s(Ze);v(he.$$.fragment,Ma),Ma.forEach(t),Na.forEach(t),hi=u(co),et=a(co,"SPAN",{});var Fa=s(et);ci=n(Fa,"Cloning repositories"),Fa.forEach(t),co.forEach(t),Ft=u(e),U=a(e,"P",{});var fo=s(U);fi=n(fo,"Downloading repositories to your local machine is called "),tt=a(fo,"EM",{});var La=s(tt);ui=n(La,"cloning"),La.forEach(t),di=n(fo,". You can use the following commands to load the repo that we made and navigate to it:"),fo.forEach(t),Lt=u(e),v(ce.$$.fragment,e),Dt=u(e),M=a(e,"H2",{class:!0});var uo=s(M);W=a(uo,"A",{id:!0,class:!0,href:!0});var Da=s(W);ot=a(Da,"SPAN",{});var Oa=s(ot);v(fe.$$.fragment,Oa),Oa.forEach(t),Da.forEach(t),pi=u(uo),it=a(uo,"SPAN",{});var Ya=s(it);mi=n(Ya,"Adding files to a repository"),Ya.forEach(t),uo.forEach(t),Ot=u(e),Pe=a(e,"P",{});var Ra=s(Pe);gi=n(Ra,"Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),Ra.forEach(t),Yt=u(e),X=a(e,"P",{});var po=s(X);yi=n(po,"Do you have files larger than 10MB? Those files should be tracked with "),at=a(po,"CODE",{});var ja=s(at);vi=n(ja,"git-lfs"),ja.forEach(t),wi=n(po,", which you can initialize with:"),po.forEach(t),Rt=u(e),v(ue.$$.fragment,e),jt=u(e),J=a(e,"P",{});var mo=s(J);_i=n(mo,"Note that if your files are larger than "),st=a(mo,"STRONG",{});var qa=s(st);bi=n(qa,"5GB"),qa.forEach(t),Ei=n(mo," you\u2019ll also need to run:"),mo.forEach(t),qt=u(e),v(de.$$.fragment,e),Bt=u(e),g=a(e,"P",{});var ee=s(g);$i=n(ee,"When you use Hugging Face to create a repository, we automatically provide a list of common file extensions for these files in the "),rt=a(ee,"CODE",{});var Ba=s(rt);ki=n(Ba,".gitattributes"),Ba.forEach(t),xi=n(ee," file, which "),lt=a(ee,"CODE",{});var za=s(lt);Pi=n(za,"git-lfs"),za.forEach(t),Ai=n(ee," uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),nt=a(ee,"CODE",{});var Va=s(nt);Ci=n(Va,'git lfs track "*.your_extension"'),Va.forEach(t),Gi=n(ee,"."),ee.forEach(t),zt=u(e),d=a(e,"P",{});var x=s(d);Ii=n(x,"You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),ht=a(x,"EM",{});var Ua=s(ht);Si=n(Ua,"commit"),Ua.forEach(t),Ti=n(x,", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, we have to "),ct=a(x,"CODE",{});var Wa=s(ct);Hi=n(Wa,"add"),Wa.forEach(t),Ni=n(x," the files to let Git know that we\u2019re planning on saving the changes and then "),ft=a(x,"CODE",{});var Xa=s(ft);Mi=n(Xa,"commit"),Xa.forEach(t),Fi=n(x," those changes. In order to sync the new commit with the Hugging Face Hub, we then "),ut=a(x,"CODE",{});var Ja=s(ut);Li=n(Ja,"push"),Ja.forEach(t),Di=n(x," the commit to the Hub."),x.forEach(t),Vt=u(e),v(pe.$$.fragment,e),Ut=u(e),K=a(e,"P",{});var go=s(K);Oi=n(go,"And we\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that one of the files in this example has a size of "),dt=a(go,"CODE",{});var Ka=s(dt);Yi=n(Ka,"413 MB"),Ka.forEach(t),Ri=n(go,", so the repo uses Git LFS to track it."),go.forEach(t),Wt=u(e),F=a(e,"DIV",{class:!0});var yo=s(F);Ae=a(yo,"IMG",{class:!0,src:!0}),ji=u(yo),Ce=a(yo,"IMG",{class:!0,src:!0}),yo.forEach(t),Xt=u(e),L=a(e,"H2",{class:!0});var vo=s(L);Q=a(vo,"A",{id:!0,class:!0,href:!0});var Qa=s(Q);pt=a(Qa,"SPAN",{});var Za=s(pt);v(me.$$.fragment,Za),Za.forEach(t),Qa.forEach(t),qi=u(vo),mt=a(vo,"SPAN",{});var es=s(mt);Bi=n(es,"Viewing a repo's history"),es.forEach(t),vo.forEach(t),Jt=n(e,"\n\nEvery time you go through the `add`-`commit`-`push` cycle, the repo will keep track of every change you've made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as *diff*) introduced by each commit. To see the history, you can click on the **History: X commits** link.\n"),D=a(e,"DIV",{class:!0});var wo=s(D);Ge=a(wo,"IMG",{class:!0,src:!0}),zi=u(wo),Ie=a(wo,"IMG",{class:!0,src:!0}),wo.forEach(t),Kt=u(e),Se=a(e,"P",{});var ts=s(Se);Vi=n(ts,"You can click on an individual commit to see what changes that commit introduced:"),ts.forEach(t),Qt=u(e),ge=a(e,"DIV",{class:!0});var os=s(ge);gt=a(os,"IMG",{src:!0}),os.forEach(t),this.h()},h(){h(A,"name","hf:doc:metadata"),h(A,"content",JSON.stringify(cs)),h(O,"id","getting-started-with-repositories"),h(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(O,"href","#getting-started-with-repositories"),h(C,"class","relative group"),h(Y,"id","requirements"),h(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Y,"href","#requirements"),h(G,"class","relative group"),h(ie,"href","https://git-scm.com/downloads"),h(ie,"rel","nofollow"),h(ae,"href","https://git-lfs.github.com/"),h(ae,"rel","nofollow"),h(j,"href","https://huggingface.co/docs/huggingface_hub/index"),h(j,"rel","nofollow"),h(p,"width","560"),h(p,"height","315"),P(p.src,Xi="https://www.youtube-nocookie.com/embed/rkCly_cbMBk")||h(p,"src",Xi),h(p,"title","Managing a repo"),h(p,"frameborder","0"),h(p,"allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"),p.allowFullscreen=!0,h(B,"id","creating-a-repository"),h(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(B,"href","#creating-a-repository"),h(I,"class","relative group"),h(ne,"href","http://huggingface.co/new"),h(ne,"rel","nofollow"),h(we,"class","block dark:hidden"),P(we.src,Ji="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo.png")||h(we,"src",Ji),h(_e,"class","hidden dark:block"),P(_e.src,Ki="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo-dark.png")||h(_e,"src",Ki),h(S,"class","flex justify-center"),h(T,"start","2"),h(be,"href","repositories-licenses"),h($e,"class","block dark:hidden"),P($e.src,Qi="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo.png")||h($e,"src",Qi),h(ke,"class","hidden dark:block"),P(ke.src,Zi="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo-dark.png")||h(ke,"src",Zi),h(H,"class","flex justify-center"),h(xe,"href","./models-cards"),h(V,"id","cloning-repositories"),h(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(V,"href","#cloning-repositories"),h(N,"class","relative group"),h(W,"id","adding-files-to-a-repository"),h(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(W,"href","#adding-files-to-a-repository"),h(M,"class","relative group"),h(Ae,"class","block dark:hidden"),P(Ae.src,ea="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files.png")||h(Ae,"src",ea),h(Ce,"class","hidden dark:block"),P(Ce.src,ta="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files-dark.png")||h(Ce,"src",ta),h(F,"class","flex justify-center"),h(Q,"id","viewing-a-repos-history"),h(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Q,"href","#viewing-a-repos-history"),h(L,"class","relative group"),h(Ge,"class","block dark:hidden"),P(Ge.src,oa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history.png")||h(Ge,"src",oa),h(Ie,"class","hidden dark:block"),P(Ie.src,ia="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history-dark.png")||h(Ie,"src",ia),h(D,"class","flex justify-center"),P(gt.src,aa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history.gif")||h(gt,"src",aa),h(ge,"class","flex justify-center")},m(e,r){o(document.head,A),c(e,vt,r),c(e,C,r),o(C,O),o(O,Me),w(te,Me,null),o(C,_o),o(C,Fe),o(Fe,bo),c(e,wt,r),c(e,ye,r),o(ye,Eo),c(e,_t,r),c(e,G,r),o(G,Y),o(Y,Le),w(oe,Le,null),o(G,$o),o(G,De),o(De,ko),c(e,bt,r),c(e,m,r),o(m,xo),o(m,Oe),o(Oe,Po),o(m,Ao),o(m,ie),o(ie,Co),o(m,Go),o(m,ae),o(ae,Io),o(m,So),c(e,Et,r),c(e,R,r),o(R,To),o(R,j),o(j,Ye),o(Ye,Ho),o(j,No),o(R,Mo),c(e,$t,r),w(se,e,r),c(e,kt,r),c(e,q,r),o(q,Fo),o(q,Re),o(Re,Lo),o(q,Do),c(e,xt,r),c(e,p,r),c(e,Pt,r),c(e,I,r),o(I,B),o(B,je),w(re,je,null),o(I,Oo),o(I,qe),o(qe,Yo),c(e,At,r),c(e,z,r),o(z,Ro),o(z,Be),o(Be,jo),o(z,qo),c(e,Ct,r),c(e,ve,r),o(ve,le),o(le,Bo),o(le,ne),o(ne,zo),o(le,Vo),c(e,Gt,r),c(e,S,r),o(S,we),o(S,Uo),o(S,_e),c(e,It,r),c(e,T,r),o(T,ze),o(ze,Ve),o(Ve,Wo),o(T,Xo),o(T,Ue),o(Ue,We),o(We,Jo),c(e,St,r),c(e,$,r),o($,Ko),o($,Xe),o(Xe,Qo),o($,Zo),o($,be),o(be,Je),o(Je,ei),o($,ti),c(e,Tt,r),c(e,Ee,r),o(Ee,oi),c(e,Ht,r),c(e,H,r),o(H,$e),o(H,ii),o(H,ke),c(e,Nt,r),c(e,k,r),o(k,ai),o(k,Ke),o(Ke,si),o(k,ri),o(k,xe),o(xe,Qe),o(Qe,li),o(k,ni),c(e,Mt,r),c(e,N,r),o(N,V),o(V,Ze),w(he,Ze,null),o(N,hi),o(N,et),o(et,ci),c(e,Ft,r),c(e,U,r),o(U,fi),o(U,tt),o(tt,ui),o(U,di),c(e,Lt,r),w(ce,e,r),c(e,Dt,r),c(e,M,r),o(M,W),o(W,ot),w(fe,ot,null),o(M,pi),o(M,it),o(it,mi),c(e,Ot,r),c(e,Pe,r),o(Pe,gi),c(e,Yt,r),c(e,X,r),o(X,yi),o(X,at),o(at,vi),o(X,wi),c(e,Rt,r),w(ue,e,r),c(e,jt,r),c(e,J,r),o(J,_i),o(J,st),o(st,bi),o(J,Ei),c(e,qt,r),w(de,e,r),c(e,Bt,r),c(e,g,r),o(g,$i),o(g,rt),o(rt,ki),o(g,xi),o(g,lt),o(lt,Pi),o(g,Ai),o(g,nt),o(nt,Ci),o(g,Gi),c(e,zt,r),c(e,d,r),o(d,Ii),o(d,ht),o(ht,Si),o(d,Ti),o(d,ct),o(ct,Hi),o(d,Ni),o(d,ft),o(ft,Mi),o(d,Fi),o(d,ut),o(ut,Li),o(d,Di),c(e,Vt,r),w(pe,e,r),c(e,Ut,r),c(e,K,r),o(K,Oi),o(K,dt),o(dt,Yi),o(K,Ri),c(e,Wt,r),c(e,F,r),o(F,Ae),o(F,ji),o(F,Ce),c(e,Xt,r),c(e,L,r),o(L,Q),o(Q,pt),w(me,pt,null),o(L,qi),o(L,mt),o(mt,Bi),c(e,Jt,r),c(e,D,r),o(D,Ge),o(D,zi),o(D,Ie),c(e,Kt,r),c(e,Se,r),o(Se,Vi),c(e,Qt,r),c(e,ge,r),o(ge,gt),Zt=!0},p:ls,i(e){Zt||(_(te.$$.fragment,e),_(oe.$$.fragment,e),_(se.$$.fragment,e),_(re.$$.fragment,e),_(he.$$.fragment,e),_(ce.$$.fragment,e),_(fe.$$.fragment,e),_(ue.$$.fragment,e),_(de.$$.fragment,e),_(pe.$$.fragment,e),_(me.$$.fragment,e),Zt=!0)},o(e){b(te.$$.fragment,e),b(oe.$$.fragment,e),b(se.$$.fragment,e),b(re.$$.fragment,e),b(he.$$.fragment,e),b(ce.$$.fragment,e),b(fe.$$.fragment,e),b(ue.$$.fragment,e),b(de.$$.fragment,e),b(pe.$$.fragment,e),b(me.$$.fragment,e),Zt=!1},d(e){t(A),e&&t(vt),e&&t(C),E(te),e&&t(wt),e&&t(ye),e&&t(_t),e&&t(G),E(oe),e&&t(bt),e&&t(m),e&&t(Et),e&&t(R),e&&t($t),E(se,e),e&&t(kt),e&&t(q),e&&t(xt),e&&t(p),e&&t(Pt),e&&t(I),E(re),e&&t(At),e&&t(z),e&&t(Ct),e&&t(ve),e&&t(Gt),e&&t(S),e&&t(It),e&&t(T),e&&t(St),e&&t($),e&&t(Tt),e&&t(Ee),e&&t(Ht),e&&t(H),e&&t(Nt),e&&t(k),e&&t(Mt),e&&t(N),E(he),e&&t(Ft),e&&t(U),e&&t(Lt),E(ce,e),e&&t(Dt),e&&t(M),E(fe),e&&t(Ot),e&&t(Pe),e&&t(Yt),e&&t(X),e&&t(Rt),E(ue,e),e&&t(jt),e&&t(J),e&&t(qt),E(de,e),e&&t(Bt),e&&t(g),e&&t(zt),e&&t(d),e&&t(Vt),E(pe,e),e&&t(Ut),e&&t(K),e&&t(Wt),e&&t(F),e&&t(Xt),e&&t(L),E(me),e&&t(Jt),e&&t(D),e&&t(Kt),e&&t(Se),e&&t(Qt),e&&t(ge)}}}const cs={local:"getting-started-with-repositories",sections:[{local:"requirements",title:"Requirements"},{local:"creating-a-repository",title:"Creating a repository"},{local:"cloning-repositories",title:"Cloning repositories"},{local:"adding-files-to-a-repository",title:"Adding files to a repository"},{local:"viewing-a-repos-history",title:"Viewing a repo's history"}],title:"Getting Started with Repositories"};function fs(Wi){return ns(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ms extends is{constructor(A){super();as(this,A,fs,hs,ss,{})}}export{ms as default,cs as metadata};
