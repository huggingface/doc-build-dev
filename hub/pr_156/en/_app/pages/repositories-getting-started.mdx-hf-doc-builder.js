import{S as mr,i as gr,s as yr,e as i,k as f,w as v,t as l,N as vr,c as a,d as t,m as u,a as r,x as w,h as n,b as h,P as S,G as o,g as c,y as _,L as wr,q as b,o as E,B as k,v as _r}from"../chunks/vendor-hf-doc-builder.js";import{I as Le}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Et}from"../chunks/CodeBlock-hf-doc-builder.js";function br(oa){let P,kt,T,O,Fe,oe,$o,De,Io,$t,ve,So,It,x,Y,Oe,ie,Po,Ye,To,St,we,xo,Pt,g,Ao,qe,Co,Go,ae,Ho,Mo,re,No,Lo,Tt,q,Fo,R,Re,Do,Oo,Yo,xt,se,At,j,qo,je,Ro,jo,Ct,p,ia,Gt,A,B,Be,le,Bo,ze,zo,Ht,z,Vo,Ve,Uo,Wo,Mt,_e,ne,Xo,he,Jo,Ko,Nt,C,be,aa,Qo,Ee,ra,Lt,m,Ue,We,Zo,ei,Xe,Je,ti,oi,Ke,Qe,ii,ai,Ze,G,ri,et,si,li,ke,tt,ni,hi,Ft,$e,ci,Dt,H,Ie,sa,fi,Se,la,Ot,$,ui,ot,di,pi,Pe,it,mi,gi,Yt,M,V,at,ce,yi,rt,vi,qt,U,wi,st,_i,bi,Rt,fe,jt,N,W,lt,ue,Ei,nt,ki,Bt,Te,$i,zt,X,Ii,ht,Si,Pi,Vt,de,Ut,J,Ti,ct,xi,Ai,Wt,pe,Xt,y,Ci,ft,Gi,Hi,ut,Mi,Ni,dt,Li,Fi,Jt,d,Di,pt,Oi,Yi,mt,qi,Ri,gt,ji,Bi,yt,zi,Vi,Kt,me,Qt,K,Ui,vt,Wi,Xi,Zt,L,xe,na,Ji,Ae,ha,eo,F,Q,wt,ge,Ki,_t,Qi,to,D,Ce,ca,Zi,Ge,fa,oo,He,ea,io,ye,bt,ua,ao;return oe=new Le({}),ie=new Le({}),se=new Et({props:{code:`python -m pip install huggingface_hub
huggingface-cli login`,highlighted:`python -m pip install huggingface_hub
huggingface-cli login`}}),le=new Le({}),ce=new Le({}),fe=new Et({props:{code:`git clone https://huggingface.co/<your-username>/<your-model-id>
cd <your-model-id>`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/&lt;your-username&gt;/&lt;your-model-id&gt;
<span class="hljs-built_in">cd</span> &lt;your-model-id&gt;`}}),ue=new Le({}),de=new Et({props:{code:"git lfs install",highlighted:"git lfs install"}}),pe=new Et({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),me=new Et({props:{code:`# Create any files you like! Then...
git add .
git commit -m "First model version"  # You can choose any descriptive message
git push`,highlighted:`<span class="hljs-comment"># Create any files you like! Then...</span>
git add .
git commit -m <span class="hljs-string">&quot;First model version&quot;</span>  <span class="hljs-comment"># You can choose any descriptive message</span>
git push`}}),ge=new Le({}),{c(){P=i("meta"),kt=f(),T=i("h1"),O=i("a"),Fe=i("span"),v(oe.$$.fragment),$o=f(),De=i("span"),Io=l("Getting Started with Repositories"),$t=f(),ve=i("p"),So=l("This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),It=f(),x=i("h2"),Y=i("a"),Oe=i("span"),v(ie.$$.fragment),Po=f(),Ye=i("span"),To=l("Requirements"),St=f(),we=i("p"),xo=l("This document shows how to handle repositories through the web interface as well as through the terminal. There are no requirements if working with the UI. If you want to work with the terminal, please follow these instructions."),Pt=f(),g=i("p"),Ao=l("If you do not have "),qe=i("code"),Co=l("git"),Go=l(" available as a CLI command yet, you will need to "),ae=i("a"),Ho=l("install Git"),Mo=l(" for your platform. You will also need to "),re=i("a"),No=l("install Git LFS"),Lo=l(", which will be used to handle large files such as images and model weights."),Tt=f(),q=i("p"),Fo=l("To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),R=i("a"),Re=i("code"),Do=l("huggingface_hub"),Oo=l(" CLI"),Yo=l(" and running the login command:"),xt=f(),v(se.$$.fragment),At=f(),j=i("p"),qo=l("The content in the "),je=i("strong"),Ro=l("Getting Started"),jo=l(" section of this document is also available as a video!"),Ct=f(),p=i("iframe"),Gt=f(),A=i("h2"),B=i("a"),Be=i("span"),v(le.$$.fragment),Bo=f(),ze=i("span"),zo=l("Creating a repository"),Ht=f(),z=i("p"),Vo=l("Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide you\u2019ll be creating a "),Ve=i("strong"),Uo=l("model repository"),Wo=l(" for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),Mt=f(),_e=i("ol"),ne=i("li"),Xo=l("To create a new repository, visit "),he=i("a"),Jo=l("huggingface.co/new"),Ko=l(":"),Nt=f(),C=i("div"),be=i("img"),Qo=f(),Ee=i("img"),Lt=f(),m=i("ol"),Ue=i("li"),We=i("p"),Zo=l("Specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),ei=f(),Xe=i("li"),Je=i("p"),ti=l("Enter your model\u2019s name. This will also be the name of the repository."),oi=f(),Ke=i("li"),Qe=i("p"),ii=l("Specify whether you want your model to be public or private."),ai=f(),Ze=i("li"),G=i("p"),ri=l("Specify the license. You can leave the "),et=i("em"),si=l("License"),li=l(" field blank for now. To learn about licenses, visit the "),ke=i("a"),tt=i("strong"),ni=l("Licenses"),hi=l(" documentation."),Ft=f(),$e=i("p"),ci=l("After creating your model repository, you should see a page like this:"),Dt=f(),H=i("div"),Ie=i("img"),fi=f(),Se=i("img"),Ot=f(),$=i("p"),ui=l("Note that the Hub prompts you to create a "),ot=i("em"),di=l("Model Card"),pi=l(", which you can learn about in the "),Pe=i("a"),it=i("strong"),mi=l("Model Cards documentation"),gi=l(". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),Yt=f(),M=i("h2"),V=i("a"),at=i("span"),v(ce.$$.fragment),yi=f(),rt=i("span"),vi=l("Cloning repositories"),qt=f(),U=i("p"),wi=l("Downloading repositories to your local machine is called "),st=i("em"),_i=l("cloning"),bi=l(". You can use the following commands to load the repo that we made and navigate to it:"),Rt=f(),v(fe.$$.fragment),jt=f(),N=i("h2"),W=i("a"),lt=i("span"),v(ue.$$.fragment),Ei=f(),nt=i("span"),ki=l("Adding files to a repository (terminal)"),Bt=f(),Te=i("p"),$i=l("Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),zt=f(),X=i("p"),Ii=l("Do you have files larger than 10MB? Those files should be tracked with "),ht=i("code"),Si=l("git-lfs"),Pi=l(", which you can initialize with:"),Vt=f(),v(de.$$.fragment),Ut=f(),J=i("p"),Ti=l("Note that if your files are larger than "),ct=i("strong"),xi=l("5GB"),Ai=l(" you\u2019ll also need to run:"),Wt=f(),v(pe.$$.fragment),Xt=f(),y=i("p"),Ci=l("When you use Hugging Face to create a repository, Hugging Face automatically provides a list of common file extensions for common Machine Learning large files in the "),ft=i("code"),Gi=l(".gitattributes"),Hi=l(" file, which "),ut=i("code"),Mi=l("git-lfs"),Ni=l(" uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),dt=i("code"),Li=l('git lfs track "*.your_extension"'),Fi=l("."),Jt=f(),d=i("p"),Di=l("You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),pt=i("em"),Oi=l("commit"),Yi=l(", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, you have to "),mt=i("code"),qi=l("add"),Ri=l(" the files to let Git know that we\u2019re planning on saving the changes and then "),gt=i("code"),ji=l("commit"),Bi=l(" those changes. In order to sync the new commit with the Hugging Face Hub, you then "),yt=i("code"),zi=l("push"),Vi=l(" the commit to the Hub."),Kt=f(),v(me.$$.fragment),Qt=f(),K=i("p"),Ui=l("And you\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that one of the files in this example has a size of "),vt=i("code"),Wi=l("413 MB"),Xi=l(", so the repo uses Git LFS to track it."),Zt=f(),L=i("div"),xe=i("img"),Ji=f(),Ae=i("img"),eo=f(),F=i("h2"),Q=i("a"),wt=i("span"),v(ge.$$.fragment),Ki=f(),_t=i("span"),Qi=l("Viewing a repo's history"),to=l("\n\nEvery time you go through the `add`-`commit`-`push` cycle, the repo will keep track of every change you've made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as *diff*) introduced by each commit. To see the history, you can click on the **History: X commits** link.\n"),D=i("div"),Ce=i("img"),Zi=f(),Ge=i("img"),oo=f(),He=i("p"),ea=l("You can click on an individual commit to see what changes that commit introduced:"),io=f(),ye=i("div"),bt=i("img"),this.h()},l(e){const s=vr('[data-svelte="svelte-1phssyn"]',document.head);P=a(s,"META",{name:!0,content:!0}),s.forEach(t),kt=u(e),T=a(e,"H1",{class:!0});var ro=r(T);O=a(ro,"A",{id:!0,class:!0,href:!0});var da=r(O);Fe=a(da,"SPAN",{});var pa=r(Fe);w(oe.$$.fragment,pa),pa.forEach(t),da.forEach(t),$o=u(ro),De=a(ro,"SPAN",{});var ma=r(De);Io=n(ma,"Getting Started with Repositories"),ma.forEach(t),ro.forEach(t),$t=u(e),ve=a(e,"P",{});var ga=r(ve);So=n(ga,"This beginner-friendly guide will help you get the basic skills you need to create and manage your repository on the Hub. Each section builds on the previous one, so feel free to choose where to start!"),ga.forEach(t),It=u(e),x=a(e,"H2",{class:!0});var so=r(x);Y=a(so,"A",{id:!0,class:!0,href:!0});var ya=r(Y);Oe=a(ya,"SPAN",{});var va=r(Oe);w(ie.$$.fragment,va),va.forEach(t),ya.forEach(t),Po=u(so),Ye=a(so,"SPAN",{});var wa=r(Ye);To=n(wa,"Requirements"),wa.forEach(t),so.forEach(t),St=u(e),we=a(e,"P",{});var _a=r(we);xo=n(_a,"This document shows how to handle repositories through the web interface as well as through the terminal. There are no requirements if working with the UI. If you want to work with the terminal, please follow these instructions."),_a.forEach(t),Pt=u(e),g=a(e,"P",{});var Z=r(g);Ao=n(Z,"If you do not have "),qe=a(Z,"CODE",{});var ba=r(qe);Co=n(ba,"git"),ba.forEach(t),Go=n(Z," available as a CLI command yet, you will need to "),ae=a(Z,"A",{href:!0,rel:!0});var Ea=r(ae);Ho=n(Ea,"install Git"),Ea.forEach(t),Mo=n(Z," for your platform. You will also need to "),re=a(Z,"A",{href:!0,rel:!0});var ka=r(re);No=n(ka,"install Git LFS"),ka.forEach(t),Lo=n(Z,", which will be used to handle large files such as images and model weights."),Z.forEach(t),Tt=u(e),q=a(e,"P",{});var lo=r(q);Fo=n(lo,"To be able to push your code to the Hub, you\u2019ll need to authenticate somehow. The easiest way to do this is by installing the "),R=a(lo,"A",{href:!0,rel:!0});var ta=r(R);Re=a(ta,"CODE",{});var $a=r(Re);Do=n($a,"huggingface_hub"),$a.forEach(t),Oo=n(ta," CLI"),ta.forEach(t),Yo=n(lo," and running the login command:"),lo.forEach(t),xt=u(e),w(se.$$.fragment,e),At=u(e),j=a(e,"P",{});var no=r(j);qo=n(no,"The content in the "),je=a(no,"STRONG",{});var Ia=r(je);Ro=n(Ia,"Getting Started"),Ia.forEach(t),jo=n(no," section of this document is also available as a video!"),no.forEach(t),Ct=u(e),p=a(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),r(p).forEach(t),Gt=u(e),A=a(e,"H2",{class:!0});var ho=r(A);B=a(ho,"A",{id:!0,class:!0,href:!0});var Sa=r(B);Be=a(Sa,"SPAN",{});var Pa=r(Be);w(le.$$.fragment,Pa),Pa.forEach(t),Sa.forEach(t),Bo=u(ho),ze=a(ho,"SPAN",{});var Ta=r(ze);zo=n(Ta,"Creating a repository"),Ta.forEach(t),ho.forEach(t),Ht=u(e),z=a(e,"P",{});var co=r(z);Vo=n(co,"Using the Hub\u2019s web interface you can easily create repositories, add files (even large ones!), explore models, visualize diffs, and much more. There are three kinds of repositories on the Hub, and in this guide you\u2019ll be creating a "),Ve=a(co,"STRONG",{});var xa=r(Ve);Uo=n(xa,"model repository"),xa.forEach(t),Wo=n(co," for demonstration purposes. For information on creating and managing models, datasets, and Spaces, refer to their respective documentation."),co.forEach(t),Mt=u(e),_e=a(e,"OL",{});var Aa=r(_e);ne=a(Aa,"LI",{});var fo=r(ne);Xo=n(fo,"To create a new repository, visit "),he=a(fo,"A",{href:!0,rel:!0});var Ca=r(he);Jo=n(Ca,"huggingface.co/new"),Ca.forEach(t),Ko=n(fo,":"),fo.forEach(t),Aa.forEach(t),Nt=u(e),C=a(e,"DIV",{class:!0});var uo=r(C);be=a(uo,"IMG",{class:!0,src:!0}),Qo=u(uo),Ee=a(uo,"IMG",{class:!0,src:!0}),uo.forEach(t),Lt=u(e),m=a(e,"OL",{start:!0});var ee=r(m);Ue=a(ee,"LI",{});var Ga=r(Ue);We=a(Ga,"P",{});var Ha=r(We);Zo=n(Ha,"Specify the owner of the repository: this can be either you or any of the organizations you\u2019re affiliated with."),Ha.forEach(t),Ga.forEach(t),ei=u(ee),Xe=a(ee,"LI",{});var Ma=r(Xe);Je=a(Ma,"P",{});var Na=r(Je);ti=n(Na,"Enter your model\u2019s name. This will also be the name of the repository."),Na.forEach(t),Ma.forEach(t),oi=u(ee),Ke=a(ee,"LI",{});var La=r(Ke);Qe=a(La,"P",{});var Fa=r(Qe);ii=n(Fa,"Specify whether you want your model to be public or private."),Fa.forEach(t),La.forEach(t),ai=u(ee),Ze=a(ee,"LI",{});var Da=r(Ze);G=a(Da,"P",{});var Me=r(G);ri=n(Me,"Specify the license. You can leave the "),et=a(Me,"EM",{});var Oa=r(et);si=n(Oa,"License"),Oa.forEach(t),li=n(Me," field blank for now. To learn about licenses, visit the "),ke=a(Me,"A",{href:!0});var Ya=r(ke);tt=a(Ya,"STRONG",{});var qa=r(tt);ni=n(qa,"Licenses"),qa.forEach(t),Ya.forEach(t),hi=n(Me," documentation."),Me.forEach(t),Da.forEach(t),ee.forEach(t),Ft=u(e),$e=a(e,"P",{});var Ra=r($e);ci=n(Ra,"After creating your model repository, you should see a page like this:"),Ra.forEach(t),Dt=u(e),H=a(e,"DIV",{class:!0});var po=r(H);Ie=a(po,"IMG",{class:!0,src:!0}),fi=u(po),Se=a(po,"IMG",{class:!0,src:!0}),po.forEach(t),Ot=u(e),$=a(e,"P",{});var Ne=r($);ui=n(Ne,"Note that the Hub prompts you to create a "),ot=a(Ne,"EM",{});var ja=r(ot);di=n(ja,"Model Card"),ja.forEach(t),pi=n(Ne,", which you can learn about in the "),Pe=a(Ne,"A",{href:!0});var Ba=r(Pe);it=a(Ba,"STRONG",{});var za=r(it);mi=n(za,"Model Cards documentation"),za.forEach(t),Ba.forEach(t),gi=n(Ne,". Including a Model Card in your model repo is best practice, but since we\u2019re only making a test repo at the moment we can skip this."),Ne.forEach(t),Yt=u(e),M=a(e,"H2",{class:!0});var mo=r(M);V=a(mo,"A",{id:!0,class:!0,href:!0});var Va=r(V);at=a(Va,"SPAN",{});var Ua=r(at);w(ce.$$.fragment,Ua),Ua.forEach(t),Va.forEach(t),yi=u(mo),rt=a(mo,"SPAN",{});var Wa=r(rt);vi=n(Wa,"Cloning repositories"),Wa.forEach(t),mo.forEach(t),qt=u(e),U=a(e,"P",{});var go=r(U);wi=n(go,"Downloading repositories to your local machine is called "),st=a(go,"EM",{});var Xa=r(st);_i=n(Xa,"cloning"),Xa.forEach(t),bi=n(go,". You can use the following commands to load the repo that we made and navigate to it:"),go.forEach(t),Rt=u(e),w(fe.$$.fragment,e),jt=u(e),N=a(e,"H2",{class:!0});var yo=r(N);W=a(yo,"A",{id:!0,class:!0,href:!0});var Ja=r(W);lt=a(Ja,"SPAN",{});var Ka=r(lt);w(ue.$$.fragment,Ka),Ka.forEach(t),Ja.forEach(t),Ei=u(yo),nt=a(yo,"SPAN",{});var Qa=r(nt);ki=n(Qa,"Adding files to a repository (terminal)"),Qa.forEach(t),yo.forEach(t),Bt=u(e),Te=a(e,"P",{});var Za=r(Te);$i=n(Za,"Now\u2019s the time, you can add any files you want to the repository! \u{1F525}"),Za.forEach(t),zt=u(e),X=a(e,"P",{});var vo=r(X);Ii=n(vo,"Do you have files larger than 10MB? Those files should be tracked with "),ht=a(vo,"CODE",{});var er=r(ht);Si=n(er,"git-lfs"),er.forEach(t),Pi=n(vo,", which you can initialize with:"),vo.forEach(t),Vt=u(e),w(de.$$.fragment,e),Ut=u(e),J=a(e,"P",{});var wo=r(J);Ti=n(wo,"Note that if your files are larger than "),ct=a(wo,"STRONG",{});var tr=r(ct);xi=n(tr,"5GB"),tr.forEach(t),Ai=n(wo," you\u2019ll also need to run:"),wo.forEach(t),Wt=u(e),w(pe.$$.fragment,e),Xt=u(e),y=a(e,"P",{});var te=r(y);Ci=n(te,"When you use Hugging Face to create a repository, Hugging Face automatically provides a list of common file extensions for common Machine Learning large files in the "),ft=a(te,"CODE",{});var or=r(ft);Gi=n(or,".gitattributes"),or.forEach(t),Hi=n(te," file, which "),ut=a(te,"CODE",{});var ir=r(ut);Mi=n(ir,"git-lfs"),ir.forEach(t),Ni=n(te," uses to efficiently track changes to your large files. However, you might need to add new extensions if your file types are not already handled. You can do so with "),dt=a(te,"CODE",{});var ar=r(dt);Li=n(ar,'git lfs track "*.your_extension"'),ar.forEach(t),Fi=n(te,"."),te.forEach(t),Jt=u(e),d=a(e,"P",{});var I=r(d);Di=n(I,"You can use Git to save new files and any changes to already existing files as a bundle of changes called a "),pt=a(I,"EM",{});var rr=r(pt);Oi=n(rr,"commit"),rr.forEach(t),Yi=n(I,", which can be thought of as a \u201Crevision\u201D to your project. To create a commit, you have to "),mt=a(I,"CODE",{});var sr=r(mt);qi=n(sr,"add"),sr.forEach(t),Ri=n(I," the files to let Git know that we\u2019re planning on saving the changes and then "),gt=a(I,"CODE",{});var lr=r(gt);ji=n(lr,"commit"),lr.forEach(t),Bi=n(I," those changes. In order to sync the new commit with the Hugging Face Hub, you then "),yt=a(I,"CODE",{});var nr=r(yt);zi=n(nr,"push"),nr.forEach(t),Vi=n(I," the commit to the Hub."),I.forEach(t),Kt=u(e),w(me.$$.fragment,e),Qt=u(e),K=a(e,"P",{});var _o=r(K);Ui=n(_o,"And you\u2019re done! You can check your repository on Hugging Face with all the recently added files. For example, in the screenshot below the user added a number of files. Note that one of the files in this example has a size of "),vt=a(_o,"CODE",{});var hr=r(vt);Wi=n(hr,"413 MB"),hr.forEach(t),Xi=n(_o,", so the repo uses Git LFS to track it."),_o.forEach(t),Zt=u(e),L=a(e,"DIV",{class:!0});var bo=r(L);xe=a(bo,"IMG",{class:!0,src:!0}),Ji=u(bo),Ae=a(bo,"IMG",{class:!0,src:!0}),bo.forEach(t),eo=u(e),F=a(e,"H2",{class:!0});var Eo=r(F);Q=a(Eo,"A",{id:!0,class:!0,href:!0});var cr=r(Q);wt=a(cr,"SPAN",{});var fr=r(wt);w(ge.$$.fragment,fr),fr.forEach(t),cr.forEach(t),Ki=u(Eo),_t=a(Eo,"SPAN",{});var ur=r(_t);Qi=n(ur,"Viewing a repo's history"),ur.forEach(t),Eo.forEach(t),to=n(e,"\n\nEvery time you go through the `add`-`commit`-`push` cycle, the repo will keep track of every change you've made to your files. The UI allows you to explore the model files and commits and to see the difference (also known as *diff*) introduced by each commit. To see the history, you can click on the **History: X commits** link.\n"),D=a(e,"DIV",{class:!0});var ko=r(D);Ce=a(ko,"IMG",{class:!0,src:!0}),Zi=u(ko),Ge=a(ko,"IMG",{class:!0,src:!0}),ko.forEach(t),oo=u(e),He=a(e,"P",{});var dr=r(He);ea=n(dr,"You can click on an individual commit to see what changes that commit introduced:"),dr.forEach(t),io=u(e),ye=a(e,"DIV",{class:!0});var pr=r(ye);bt=a(pr,"IMG",{src:!0}),pr.forEach(t),this.h()},h(){h(P,"name","hf:doc:metadata"),h(P,"content",JSON.stringify(Er)),h(O,"id","getting-started-with-repositories"),h(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(O,"href","#getting-started-with-repositories"),h(T,"class","relative group"),h(Y,"id","requirements"),h(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Y,"href","#requirements"),h(x,"class","relative group"),h(ae,"href","https://git-scm.com/downloads"),h(ae,"rel","nofollow"),h(re,"href","https://git-lfs.github.com/"),h(re,"rel","nofollow"),h(R,"href","https://huggingface.co/docs/huggingface_hub/index"),h(R,"rel","nofollow"),h(p,"width","560"),h(p,"height","315"),S(p.src,ia="https://www.youtube-nocookie.com/embed/rkCly_cbMBk")||h(p,"src",ia),h(p,"title","Managing a repo"),h(p,"frameborder","0"),h(p,"allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"),p.allowFullscreen=!0,h(B,"id","creating-a-repository"),h(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(B,"href","#creating-a-repository"),h(A,"class","relative group"),h(he,"href","http://huggingface.co/new"),h(he,"rel","nofollow"),h(be,"class","block dark:hidden"),S(be.src,aa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo.png")||h(be,"src",aa),h(Ee,"class","hidden dark:block"),S(Ee.src,ra="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/new_repo-dark.png")||h(Ee,"src",ra),h(C,"class","flex justify-center"),h(ke,"href","repositories-licenses"),h(m,"start","2"),h(Ie,"class","block dark:hidden"),S(Ie.src,sa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo.png")||h(Ie,"src",sa),h(Se,"class","hidden dark:block"),S(Se.src,la="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/empty_repo-dark.png")||h(Se,"src",la),h(H,"class","flex justify-center"),h(Pe,"href","./models-cards"),h(V,"id","cloning-repositories"),h(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(V,"href","#cloning-repositories"),h(M,"class","relative group"),h(W,"id","adding-files-to-a-repository-terminal"),h(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(W,"href","#adding-files-to-a-repository-terminal"),h(N,"class","relative group"),h(xe,"class","block dark:hidden"),S(xe.src,na="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files.png")||h(xe,"src",na),h(Ae,"class","hidden dark:block"),S(Ae.src,ha="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_with_files-dark.png")||h(Ae,"src",ha),h(L,"class","flex justify-center"),h(Q,"id","viewing-a-repos-history"),h(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Q,"href","#viewing-a-repos-history"),h(F,"class","relative group"),h(Ce,"class","block dark:hidden"),S(Ce.src,ca="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history.png")||h(Ce,"src",ca),h(Ge,"class","hidden dark:block"),S(Ge.src,fa="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo_history-dark.png")||h(Ge,"src",fa),h(D,"class","flex justify-center"),S(bt.src,ua="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/explore_history.gif")||h(bt,"src",ua),h(ye,"class","flex justify-center")},m(e,s){o(document.head,P),c(e,kt,s),c(e,T,s),o(T,O),o(O,Fe),_(oe,Fe,null),o(T,$o),o(T,De),o(De,Io),c(e,$t,s),c(e,ve,s),o(ve,So),c(e,It,s),c(e,x,s),o(x,Y),o(Y,Oe),_(ie,Oe,null),o(x,Po),o(x,Ye),o(Ye,To),c(e,St,s),c(e,we,s),o(we,xo),c(e,Pt,s),c(e,g,s),o(g,Ao),o(g,qe),o(qe,Co),o(g,Go),o(g,ae),o(ae,Ho),o(g,Mo),o(g,re),o(re,No),o(g,Lo),c(e,Tt,s),c(e,q,s),o(q,Fo),o(q,R),o(R,Re),o(Re,Do),o(R,Oo),o(q,Yo),c(e,xt,s),_(se,e,s),c(e,At,s),c(e,j,s),o(j,qo),o(j,je),o(je,Ro),o(j,jo),c(e,Ct,s),c(e,p,s),c(e,Gt,s),c(e,A,s),o(A,B),o(B,Be),_(le,Be,null),o(A,Bo),o(A,ze),o(ze,zo),c(e,Ht,s),c(e,z,s),o(z,Vo),o(z,Ve),o(Ve,Uo),o(z,Wo),c(e,Mt,s),c(e,_e,s),o(_e,ne),o(ne,Xo),o(ne,he),o(he,Jo),o(ne,Ko),c(e,Nt,s),c(e,C,s),o(C,be),o(C,Qo),o(C,Ee),c(e,Lt,s),c(e,m,s),o(m,Ue),o(Ue,We),o(We,Zo),o(m,ei),o(m,Xe),o(Xe,Je),o(Je,ti),o(m,oi),o(m,Ke),o(Ke,Qe),o(Qe,ii),o(m,ai),o(m,Ze),o(Ze,G),o(G,ri),o(G,et),o(et,si),o(G,li),o(G,ke),o(ke,tt),o(tt,ni),o(G,hi),c(e,Ft,s),c(e,$e,s),o($e,ci),c(e,Dt,s),c(e,H,s),o(H,Ie),o(H,fi),o(H,Se),c(e,Ot,s),c(e,$,s),o($,ui),o($,ot),o(ot,di),o($,pi),o($,Pe),o(Pe,it),o(it,mi),o($,gi),c(e,Yt,s),c(e,M,s),o(M,V),o(V,at),_(ce,at,null),o(M,yi),o(M,rt),o(rt,vi),c(e,qt,s),c(e,U,s),o(U,wi),o(U,st),o(st,_i),o(U,bi),c(e,Rt,s),_(fe,e,s),c(e,jt,s),c(e,N,s),o(N,W),o(W,lt),_(ue,lt,null),o(N,Ei),o(N,nt),o(nt,ki),c(e,Bt,s),c(e,Te,s),o(Te,$i),c(e,zt,s),c(e,X,s),o(X,Ii),o(X,ht),o(ht,Si),o(X,Pi),c(e,Vt,s),_(de,e,s),c(e,Ut,s),c(e,J,s),o(J,Ti),o(J,ct),o(ct,xi),o(J,Ai),c(e,Wt,s),_(pe,e,s),c(e,Xt,s),c(e,y,s),o(y,Ci),o(y,ft),o(ft,Gi),o(y,Hi),o(y,ut),o(ut,Mi),o(y,Ni),o(y,dt),o(dt,Li),o(y,Fi),c(e,Jt,s),c(e,d,s),o(d,Di),o(d,pt),o(pt,Oi),o(d,Yi),o(d,mt),o(mt,qi),o(d,Ri),o(d,gt),o(gt,ji),o(d,Bi),o(d,yt),o(yt,zi),o(d,Vi),c(e,Kt,s),_(me,e,s),c(e,Qt,s),c(e,K,s),o(K,Ui),o(K,vt),o(vt,Wi),o(K,Xi),c(e,Zt,s),c(e,L,s),o(L,xe),o(L,Ji),o(L,Ae),c(e,eo,s),c(e,F,s),o(F,Q),o(Q,wt),_(ge,wt,null),o(F,Ki),o(F,_t),o(_t,Qi),c(e,to,s),c(e,D,s),o(D,Ce),o(D,Zi),o(D,Ge),c(e,oo,s),c(e,He,s),o(He,ea),c(e,io,s),c(e,ye,s),o(ye,bt),ao=!0},p:wr,i(e){ao||(b(oe.$$.fragment,e),b(ie.$$.fragment,e),b(se.$$.fragment,e),b(le.$$.fragment,e),b(ce.$$.fragment,e),b(fe.$$.fragment,e),b(ue.$$.fragment,e),b(de.$$.fragment,e),b(pe.$$.fragment,e),b(me.$$.fragment,e),b(ge.$$.fragment,e),ao=!0)},o(e){E(oe.$$.fragment,e),E(ie.$$.fragment,e),E(se.$$.fragment,e),E(le.$$.fragment,e),E(ce.$$.fragment,e),E(fe.$$.fragment,e),E(ue.$$.fragment,e),E(de.$$.fragment,e),E(pe.$$.fragment,e),E(me.$$.fragment,e),E(ge.$$.fragment,e),ao=!1},d(e){t(P),e&&t(kt),e&&t(T),k(oe),e&&t($t),e&&t(ve),e&&t(It),e&&t(x),k(ie),e&&t(St),e&&t(we),e&&t(Pt),e&&t(g),e&&t(Tt),e&&t(q),e&&t(xt),k(se,e),e&&t(At),e&&t(j),e&&t(Ct),e&&t(p),e&&t(Gt),e&&t(A),k(le),e&&t(Ht),e&&t(z),e&&t(Mt),e&&t(_e),e&&t(Nt),e&&t(C),e&&t(Lt),e&&t(m),e&&t(Ft),e&&t($e),e&&t(Dt),e&&t(H),e&&t(Ot),e&&t($),e&&t(Yt),e&&t(M),k(ce),e&&t(qt),e&&t(U),e&&t(Rt),k(fe,e),e&&t(jt),e&&t(N),k(ue),e&&t(Bt),e&&t(Te),e&&t(zt),e&&t(X),e&&t(Vt),k(de,e),e&&t(Ut),e&&t(J),e&&t(Wt),k(pe,e),e&&t(Xt),e&&t(y),e&&t(Jt),e&&t(d),e&&t(Kt),k(me,e),e&&t(Qt),e&&t(K),e&&t(Zt),e&&t(L),e&&t(eo),e&&t(F),k(ge),e&&t(to),e&&t(D),e&&t(oo),e&&t(He),e&&t(io),e&&t(ye)}}}const Er={local:"getting-started-with-repositories",sections:[{local:"requirements",title:"Requirements"},{local:"creating-a-repository",title:"Creating a repository"},{local:"cloning-repositories",title:"Cloning repositories"},{local:"adding-files-to-a-repository-terminal",title:"Adding files to a repository (terminal)"},{local:"viewing-a-repos-history",title:"Viewing a repo's history"}],title:"Getting Started with Repositories"};function kr(oa){return _r(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Pr extends mr{constructor(P){super();gr(this,P,kr,br,yr,{})}}export{Pr as default,Er as metadata};
