import{S as Le,i as Re,s as Ye,e as r,k as b,w as Me,t as s,N as Ue,c as l,d as a,m as x,a as n,x as Oe,h as o,b as h,P as Se,G as t,g as m,y as Pe,L as He,q as Ge,o as Ne,B as Ie,v as Ve}from"../chunks/vendor-hf-doc-builder.js";import{I as ze}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Be}from"../chunks/CodeBlock-hf-doc-builder.js";function We(_e){let f,I,g,v,j,y,W,T,J,L,u,F,q,K,Q,D,X,Z,R,d,ee,M,te,ae,O,se,oe,S,re,le,P,ne,de,G,ce,ie,Y,E,U,_,w,ve,he,k,be,H,p,me,N,ue,pe,$,fe,ge,V;return y=new ze({}),E=new Be({props:{code:`---
extra_gated_prompt: "You agree to not use the model to conduct experiments that cause harm to human subjects."
extra_gated_fields:
 Company: text
 Country: text
 I agree to use this model for non-commerical use ONLY: checkbox
---`,highlighted:`<span class="hljs-meta">---</span>
<span class="hljs-attr">extra_gated_prompt:</span> <span class="hljs-string">&quot;You agree to not use the model to conduct experiments that cause harm to human subjects.&quot;</span>
<span class="hljs-attr">extra_gated_fields:</span>
 <span class="hljs-attr">Company:</span> <span class="hljs-string">text</span>
 <span class="hljs-attr">Country:</span> <span class="hljs-string">text</span>
 <span class="hljs-attr">I agree to use this model for non-commerical use ONLY:</span> <span class="hljs-string">checkbox</span>
<span class="hljs-meta">---</span>`}}),{c(){f=r("meta"),I=b(),g=r("h1"),v=r("a"),j=r("span"),Me(y.$$.fragment),W=b(),T=r("span"),J=s("Gated models"),L=b(),u=r("p"),F=s("To give model creators more control over how their models are used, the Hub allows users to enable "),q=r("strong"),K=s("User Access requests"),Q=s(" through a model\u2019s "),D=r("strong"),X=s("Settings"),Z=s(" tab. Enabling this setting requires users to agree to share their contact information in order to access the model. The contact information is stored in a database, and model owners are able to download a copy of the user access report."),R=b(),d=r("p"),ee=s("The User Access request dialog can be modified to include additional text and checkbox fields in the prompt. To do this, add a YAML section to the model\u2019s "),M=r("code"),te=s("README.md"),ae=s(" file (create one if it does not already exist) and add an "),O=r("code"),se=s("extra_gated_fields"),oe=s(" property. Within this property, you\u2019ll be able to add as many custom fields as you like and whether they are a "),S=r("code"),re=s("text"),le=s(" or "),P=r("code"),ne=s("checkbox"),de=s(" field. An "),G=r("code"),ce=s("extra_gated_prompt"),ie=s(" property can also be included to add a customized text message."),Y=b(),Me(E.$$.fragment),U=b(),_=r("div"),w=r("img"),he=b(),k=r("img"),H=b(),p=r("p"),me=s("The "),N=r("code"),ue=s("README.md"),pe=s(" file for a model is called a "),$=r("a"),fe=s("model Card"),ge=s(". Visit the documentation to learn more about how to use it and to see the properties that you can configure."),this.h()},l(e){const c=Ue('[data-svelte="svelte-1phssyn"]',document.head);f=l(c,"META",{name:!0,content:!0}),c.forEach(a),I=x(e),g=l(e,"H1",{class:!0});var z=n(g);v=l(z,"A",{id:!0,class:!0,href:!0});var xe=n(v);j=l(xe,"SPAN",{});var ye=n(j);Oe(y.$$.fragment,ye),ye.forEach(a),xe.forEach(a),W=x(z),T=l(z,"SPAN",{});var Ee=n(T);J=o(Ee,"Gated models"),Ee.forEach(a),z.forEach(a),L=x(e),u=l(e,"P",{});var A=n(u);F=o(A,"To give model creators more control over how their models are used, the Hub allows users to enable "),q=l(A,"STRONG",{});var we=n(q);K=o(we,"User Access requests"),we.forEach(a),Q=o(A," through a model\u2019s "),D=l(A,"STRONG",{});var ke=n(D);X=o(ke,"Settings"),ke.forEach(a),Z=o(A," tab. Enabling this setting requires users to agree to share their contact information in order to access the model. The contact information is stored in a database, and model owners are able to download a copy of the user access report."),A.forEach(a),R=x(e),d=l(e,"P",{});var i=n(d);ee=o(i,"The User Access request dialog can be modified to include additional text and checkbox fields in the prompt. To do this, add a YAML section to the model\u2019s "),M=l(i,"CODE",{});var $e=n(M);te=o($e,"README.md"),$e.forEach(a),ae=o(i," file (create one if it does not already exist) and add an "),O=l(i,"CODE",{});var Ae=n(O);se=o(Ae,"extra_gated_fields"),Ae.forEach(a),oe=o(i," property. Within this property, you\u2019ll be able to add as many custom fields as you like and whether they are a "),S=l(i,"CODE",{});var Ce=n(S);re=o(Ce,"text"),Ce.forEach(a),le=o(i," or "),P=l(i,"CODE",{});var je=n(P);ne=o(je,"checkbox"),je.forEach(a),de=o(i," field. An "),G=l(i,"CODE",{});var Te=n(G);ce=o(Te,"extra_gated_prompt"),Te.forEach(a),ie=o(i," property can also be included to add a customized text message."),i.forEach(a),Y=x(e),Oe(E.$$.fragment,e),U=x(e),_=l(e,"DIV",{class:!0});var B=n(_);w=l(B,"IMG",{class:!0,src:!0}),he=x(B),k=l(B,"IMG",{class:!0,src:!0}),B.forEach(a),H=x(e),p=l(e,"P",{});var C=n(p);me=o(C,"The "),N=l(C,"CODE",{});var qe=n(N);ue=o(qe,"README.md"),qe.forEach(a),pe=o(C," file for a model is called a "),$=l(C,"A",{href:!0});var De=n($);fe=o(De,"model Card"),De.forEach(a),ge=o(C,". Visit the documentation to learn more about how to use it and to see the properties that you can configure."),C.forEach(a),this.h()},h(){h(f,"name","hf:doc:metadata"),h(f,"content",JSON.stringify(Je)),h(v,"id","gated-models"),h(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(v,"href","#gated-models"),h(g,"class","relative group"),h(w,"class","block dark:hidden"),Se(w.src,ve="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/models-gated.png")||h(w,"src",ve),h(k,"class","hidden dark:block"),Se(k.src,be="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/models-gated-dark.png")||h(k,"src",be),h(_,"class","flex justify-center"),h($,"href","./models-cards")},m(e,c){t(document.head,f),m(e,I,c),m(e,g,c),t(g,v),t(v,j),Pe(y,j,null),t(g,W),t(g,T),t(T,J),m(e,L,c),m(e,u,c),t(u,F),t(u,q),t(q,K),t(u,Q),t(u,D),t(D,X),t(u,Z),m(e,R,c),m(e,d,c),t(d,ee),t(d,M),t(M,te),t(d,ae),t(d,O),t(O,se),t(d,oe),t(d,S),t(S,re),t(d,le),t(d,P),t(P,ne),t(d,de),t(d,G),t(G,ce),t(d,ie),m(e,Y,c),Pe(E,e,c),m(e,U,c),m(e,_,c),t(_,w),t(_,he),t(_,k),m(e,H,c),m(e,p,c),t(p,me),t(p,N),t(N,ue),t(p,pe),t(p,$),t($,fe),t(p,ge),V=!0},p:He,i(e){V||(Ge(y.$$.fragment,e),Ge(E.$$.fragment,e),V=!0)},o(e){Ne(y.$$.fragment,e),Ne(E.$$.fragment,e),V=!1},d(e){a(f),e&&a(I),e&&a(g),Ie(y),e&&a(L),e&&a(u),e&&a(R),e&&a(d),e&&a(Y),Ie(E,e),e&&a(U),e&&a(_),e&&a(H),e&&a(p)}}}const Je={local:"gated-models",title:"Gated models"};function Fe(_e){return Ve(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ze extends Le{constructor(f){super();Re(this,f,Fe,We,Ye,{})}}export{Ze as default,Je as metadata};
