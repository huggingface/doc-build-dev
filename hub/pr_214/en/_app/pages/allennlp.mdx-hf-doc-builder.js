import{S as Hs,i as zs,s as qs,e as l,k as n,w as E,t as s,N as Ss,c as a,d as o,m as h,a as r,x as y,h as i,b as c,P as Wo,G as e,g as p,y as w,L as js,q as b,o as $,B as P,v as Us}from"../chunks/vendor-hf-doc-builder.js";import{I as Te}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as fr}from"../chunks/CodeBlock-hf-doc-builder.js";function Ms(ur){let A,Kt,D,B,Ge,le,Go,Ve,Vo,Qt,ae,Je,Jo,Ko,Xt,k,F,Ke,re,Qo,Qe,Xo,Zt,g,Zo,Xe,el,tl,se,ol,ll,eo,xe,al,to,u,Ze,rl,sl,et,il,nl,tt,hl,dl,ot,cl,oo,T,Ce,mr,pl,Ie,vr,lo,x,R,lt,ie,fl,at,ul,ao,m,ml,rt,vl,_l,st,gl,El,it,yl,wl,ro,ne,so,Y,bl,nt,$l,Pl,io,C,Le,_r,Al,Ne,gr,no,I,W,ht,he,Dl,dt,kl,ho,v,Tl,de,ct,xl,Cl,pt,Il,Ll,ft,Nl,Ol,co,L,G,ut,ce,Hl,mt,zl,po,V,ql,vt,Sl,jl,fo,pe,uo,J,_t,N,gt,Ul,Ml,Et,Bl,Fl,yt,Rl,Yl,f,O,fe,wt,Wl,Gl,bt,Vl,Jl,Oe,Kl,$t,Ql,Xl,Pt,Zl,ea,H,ue,At,ta,oa,Dt,la,aa,kt,ra,sa,Tt,ia,na,z,me,xt,ha,da,Ct,ca,pa,He,fa,It,ua,ma,Lt,va,_a,q,ve,Nt,ga,Ea,Ot,ya,wa,ze,ba,Ht,$a,Pa,zt,Aa,Da,S,_e,qt,ka,Ta,St,xa,Ca,qe,Ia,jt,La,Na,ge,Oa,Ut,Ha,za,qa,j,Ee,Mt,Sa,ja,Bt,Ua,Ma,Ft,Ba,Fa,ye,Ra,Rt,Ya,Wa,mo,U,K,Yt,we,Ga,Wt,Va,vo,Q,Ja,Gt,Ka,Qa,_o,be,go,Se,Xa,Eo,M,X,Vt,$e,Za,Jt,er,yo,Z,Pe,tr,Ae,or,lr,ar,De,rr,ke,sr,ir,wo;return le=new Te({}),re=new Te({}),ie=new Te({}),ne=new fr({props:{code:`import allennlp_models
from allennlp.predictors.predictor import Predictor

predictor = Predictor.from_path("hf://allenai/bidaf-elmo")
predictor_input = {
    "passage": "My name is Wolfgang and I live in Berlin", 
    "question": "Where do I live?"
}
predictions = predictor.predict_json(predictor_input)`,highlighted:`<span class="hljs-keyword">import</span> allennlp_models
<span class="hljs-keyword">from</span> allennlp.predictors.predictor <span class="hljs-keyword">import</span> Predictor

predictor = Predictor.from_path(<span class="hljs-string">&quot;hf://allenai/bidaf-elmo&quot;</span>)
predictor_input = {
    <span class="hljs-string">&quot;passage&quot;</span>: <span class="hljs-string">&quot;My name is Wolfgang and I live in Berlin&quot;</span>, 
    <span class="hljs-string">&quot;question&quot;</span>: <span class="hljs-string">&quot;Where do I live?&quot;</span>
}
predictions = predictor.predict_json(predictor_input)`}}),he=new Te({}),ce=new Te({}),pe=new fr({props:{code:"allennlp push_to_hf --repo_name test_allennlp --archive_path model ",highlighted:"allennlp push_to_hf --repo_name test_allennlp --archive_path model "}}),we=new Te({}),be=new fr({props:{code:`from allennlp.common.push_to_hf import push_to_hf

serialization_dir = "path/to/serialization/directory"
push_to_hf(
    repo_name="my_repo_name",
    serialization_dir=serialization_dir,
    local_repo_path=self.local_repo_path
)`,highlighted:`<span class="hljs-keyword">from</span> allennlp.common.push_to_hf <span class="hljs-keyword">import</span> push_to_hf

serialization_dir = <span class="hljs-string">&quot;path/to/serialization/directory&quot;</span>
push_to_hf(
    repo_name=<span class="hljs-string">&quot;my_repo_name&quot;</span>,
    serialization_dir=serialization_dir,
    local_repo_path=self.local_repo_path
)`}}),$e=new Te({}),{c(){A=l("meta"),Kt=n(),D=l("h1"),B=l("a"),Ge=l("span"),E(le.$$.fragment),Go=n(),Ve=l("span"),Vo=s("Using AllenNLP at Hugging Face"),Qt=n(),ae=l("p"),Je=l("code"),Jo=s("allennlp"),Ko=s(" is a NLP library for developing state-of-the-art models on different linguistic tasks. It provides high-level abstractions and APIs for common components and models in modern NLP. It also provides an extensible framework that makes it easy to run and manage NLP experiments."),Xt=n(),k=l("h2"),F=l("a"),Ke=l("span"),E(re.$$.fragment),Qo=n(),Qe=l("span"),Xo=s("Exploring allennlp in the Hub"),Zt=n(),g=l("p"),Zo=s("You can find "),Xe=l("code"),el=s("allennlp"),tl=s(" models on the Hub by filtering at the left of the "),se=l("a"),ol=s("models page"),ll=s("."),eo=n(),xe=l("p"),al=s("All models on the Hub come up with useful features"),to=n(),u=l("ol"),Ze=l("li"),rl=s("A training metrics tab with automatically hosted TensorBoard traces."),sl=n(),et=l("li"),il=s("Metadata tags that help for discoverability."),nl=n(),tt=l("li"),hl=s("An interactive widget you can use to play out with the model directly in the browser."),dl=n(),ot=l("li"),cl=s("An Inference API that allows to make inference requests."),oo=n(),T=l("div"),Ce=l("img"),pl=n(),Ie=l("img"),lo=n(),x=l("h2"),R=l("a"),lt=l("span"),E(ie.$$.fragment),fl=n(),at=l("span"),ul=s("Using existing models"),ao=n(),m=l("p"),ml=s("You can use the "),rt=l("code"),vl=s("Predictor"),_l=s(" class to load existing models on the Hub. To achieve this, use the "),st=l("code"),gl=s("from_path"),El=s(" method and use the "),it=l("code"),yl=s('"hf://"'),wl=s(" prefix with the repository id. Here is an end-to-end example."),ro=n(),E(ne.$$.fragment),so=n(),Y=l("p"),bl=s("To get a snippet such as this, you can click "),nt=l("code"),$l=s("Use in AllenNLP"),Pl=s(" at the top right,"),io=n(),C=l("div"),Le=l("img"),Al=n(),Ne=l("img"),no=n(),I=l("h2"),W=l("a"),ht=l("span"),E(he.$$.fragment),Dl=n(),dt=l("span"),kl=s("Sharing your models"),ho=n(),v=l("p"),Tl=s("The first step is to save the model locally. For example, you can use the "),de=l("a"),ct=l("code"),xl=s("archive_model"),Cl=s(" method to save the model as a "),pt=l("code"),Il=s("model.tar.gz"),Ll=s(" file. You can then push the zipped model to the Hub. When you train a model with "),ft=l("code"),Nl=s("allennlp"),Ol=s(", the model is automatically serialized so you can use that as a preferred option."),co=n(),L=l("h3"),G=l("a"),ut=l("span"),E(ce.$$.fragment),Hl=n(),mt=l("span"),zl=s("Using the AllenNLP CLI"),po=n(),V=l("p"),ql=s("To push with the CLI, you can use the "),vt=l("code"),Sl=s("allennlp push_to_hf"),jl=s(" command as seen below."),fo=n(),E(pe.$$.fragment),uo=n(),J=l("table"),_t=l("thead"),N=l("tr"),gt=l("th"),Ul=s("Argument"),Ml=n(),Et=l("th"),Bl=s("Type"),Fl=n(),yt=l("th"),Rl=s("Description"),Yl=n(),f=l("tbody"),O=l("tr"),fe=l("td"),wt=l("code"),Wl=s("--repo_name"),Gl=s(", "),bt=l("code"),Vl=s("-n"),Jl=n(),Oe=l("td"),Kl=s("str / "),$t=l("code"),Ql=s("Path"),Xl=n(),Pt=l("td"),Zl=s("Name of the repository on the Hub."),ea=n(),H=l("tr"),ue=l("td"),At=l("code"),ta=s("--organization"),oa=s(", "),Dt=l("code"),la=s("-o"),aa=n(),kt=l("td"),ra=s("str"),sa=n(),Tt=l("td"),ia=s("Optional name of organization to which the pipeline should be uploaded."),na=n(),z=l("tr"),me=l("td"),xt=l("code"),ha=s("--serialization-dir"),da=s(", "),Ct=l("code"),ca=s("-s"),pa=n(),He=l("td"),fa=s("str / "),It=l("code"),ua=s("Path"),ma=n(),Lt=l("td"),va=s("Path to directory with the serialized model."),_a=n(),q=l("tr"),ve=l("td"),Nt=l("code"),ga=s("--archive-path"),Ea=s(", "),Ot=l("code"),ya=s("-a"),wa=n(),ze=l("td"),ba=s("str / "),Ht=l("code"),$a=s("Path"),Pa=n(),zt=l("td"),Aa=s("If instead of a serialization path you\u2019re using a zipped model (e.g. model/model.tar.gz), you can use this flag."),Da=n(),S=l("tr"),_e=l("td"),qt=l("code"),ka=s("--local-repo-path"),Ta=s(", "),St=l("code"),xa=s("-l"),Ca=n(),qe=l("td"),Ia=s("str / "),jt=l("code"),La=s("Path"),Na=n(),ge=l("td"),Oa=s("Local path to the model repository (will be created if it doesn\u2019t exist). Defaults to "),Ut=l("code"),Ha=s("hub"),za=s(" in the current working directory."),qa=n(),j=l("tr"),Ee=l("td"),Mt=l("code"),Sa=s("--commit-message"),ja=s(", "),Bt=l("code"),Ua=s("-c"),Ma=n(),Ft=l("td"),Ba=s("str"),Fa=n(),ye=l("td"),Ra=s("Commit message to use for update. Defaults to "),Rt=l("code"),Ya=s('"update repository"'),Wa=s("."),mo=n(),U=l("h3"),K=l("a"),Yt=l("span"),E(we.$$.fragment),Ga=n(),Wt=l("span"),Va=s("From a Python script"),vo=n(),Q=l("p"),Ja=s("The "),Gt=l("code"),Ka=s("push_to_hf"),Qa=s(" function has the same parameters as the bash script."),_o=n(),E(be.$$.fragment),go=n(),Se=l("p"),Xa=s("In just a minute, you can get your model in the Hub, try it out directly in the browser, and share it with the rest of the community. All the required metadata will be uploaded for you!"),Eo=n(),M=l("h2"),X=l("a"),Vt=l("span"),E($e.$$.fragment),Za=n(),Jt=l("span"),er=s("Additional resources"),yo=n(),Z=l("ul"),Pe=l("li"),tr=s("AllenNLP "),Ae=l("a"),or=s("website"),lr=s("."),ar=n(),De=l("li"),rr=s("AllenNLP "),ke=l("a"),sr=s("repository"),ir=s("."),this.h()},l(t){const d=Ss('[data-svelte="svelte-1phssyn"]',document.head);A=a(d,"META",{name:!0,content:!0}),d.forEach(o),Kt=h(t),D=a(t,"H1",{class:!0});var bo=r(D);B=a(bo,"A",{id:!0,class:!0,href:!0});var Er=r(B);Ge=a(Er,"SPAN",{});var yr=r(Ge);y(le.$$.fragment,yr),yr.forEach(o),Er.forEach(o),Go=h(bo),Ve=a(bo,"SPAN",{});var wr=r(Ve);Vo=i(wr,"Using AllenNLP at Hugging Face"),wr.forEach(o),bo.forEach(o),Qt=h(t),ae=a(t,"P",{});var nr=r(ae);Je=a(nr,"CODE",{});var br=r(Je);Jo=i(br,"allennlp"),br.forEach(o),Ko=i(nr," is a NLP library for developing state-of-the-art models on different linguistic tasks. It provides high-level abstractions and APIs for common components and models in modern NLP. It also provides an extensible framework that makes it easy to run and manage NLP experiments."),nr.forEach(o),Xt=h(t),k=a(t,"H2",{class:!0});var $o=r(k);F=a($o,"A",{id:!0,class:!0,href:!0});var $r=r(F);Ke=a($r,"SPAN",{});var Pr=r(Ke);y(re.$$.fragment,Pr),Pr.forEach(o),$r.forEach(o),Qo=h($o),Qe=a($o,"SPAN",{});var Ar=r(Qe);Xo=i(Ar,"Exploring allennlp in the Hub"),Ar.forEach(o),$o.forEach(o),Zt=h(t),g=a(t,"P",{});var je=r(g);Zo=i(je,"You can find "),Xe=a(je,"CODE",{});var Dr=r(Xe);el=i(Dr,"allennlp"),Dr.forEach(o),tl=i(je," models on the Hub by filtering at the left of the "),se=a(je,"A",{href:!0,rel:!0});var kr=r(se);ol=i(kr,"models page"),kr.forEach(o),ll=i(je,"."),je.forEach(o),eo=h(t),xe=a(t,"P",{});var Tr=r(xe);al=i(Tr,"All models on the Hub come up with useful features"),Tr.forEach(o),to=h(t),u=a(t,"OL",{});var ee=r(u);Ze=a(ee,"LI",{});var xr=r(Ze);rl=i(xr,"A training metrics tab with automatically hosted TensorBoard traces."),xr.forEach(o),sl=h(ee),et=a(ee,"LI",{});var Cr=r(et);il=i(Cr,"Metadata tags that help for discoverability."),Cr.forEach(o),nl=h(ee),tt=a(ee,"LI",{});var Ir=r(tt);hl=i(Ir,"An interactive widget you can use to play out with the model directly in the browser."),Ir.forEach(o),dl=h(ee),ot=a(ee,"LI",{});var Lr=r(ot);cl=i(Lr,"An Inference API that allows to make inference requests."),Lr.forEach(o),ee.forEach(o),oo=h(t),T=a(t,"DIV",{class:!0});var Po=r(T);Ce=a(Po,"IMG",{class:!0,src:!0}),pl=h(Po),Ie=a(Po,"IMG",{class:!0,src:!0}),Po.forEach(o),lo=h(t),x=a(t,"H2",{class:!0});var Ao=r(x);R=a(Ao,"A",{id:!0,class:!0,href:!0});var Nr=r(R);lt=a(Nr,"SPAN",{});var Or=r(lt);y(ie.$$.fragment,Or),Or.forEach(o),Nr.forEach(o),fl=h(Ao),at=a(Ao,"SPAN",{});var Hr=r(at);ul=i(Hr,"Using existing models"),Hr.forEach(o),Ao.forEach(o),ao=h(t),m=a(t,"P",{});var te=r(m);ml=i(te,"You can use the "),rt=a(te,"CODE",{});var zr=r(rt);vl=i(zr,"Predictor"),zr.forEach(o),_l=i(te," class to load existing models on the Hub. To achieve this, use the "),st=a(te,"CODE",{});var qr=r(st);gl=i(qr,"from_path"),qr.forEach(o),El=i(te," method and use the "),it=a(te,"CODE",{});var Sr=r(it);yl=i(Sr,'"hf://"'),Sr.forEach(o),wl=i(te," prefix with the repository id. Here is an end-to-end example."),te.forEach(o),ro=h(t),y(ne.$$.fragment,t),so=h(t),Y=a(t,"P",{});var Do=r(Y);bl=i(Do,"To get a snippet such as this, you can click "),nt=a(Do,"CODE",{});var jr=r(nt);$l=i(jr,"Use in AllenNLP"),jr.forEach(o),Pl=i(Do," at the top right,"),Do.forEach(o),io=h(t),C=a(t,"DIV",{class:!0});var ko=r(C);Le=a(ko,"IMG",{class:!0,src:!0}),Al=h(ko),Ne=a(ko,"IMG",{class:!0,src:!0}),ko.forEach(o),no=h(t),I=a(t,"H2",{class:!0});var To=r(I);W=a(To,"A",{id:!0,class:!0,href:!0});var Ur=r(W);ht=a(Ur,"SPAN",{});var Mr=r(ht);y(he.$$.fragment,Mr),Mr.forEach(o),Ur.forEach(o),Dl=h(To),dt=a(To,"SPAN",{});var Br=r(dt);kl=i(Br,"Sharing your models"),Br.forEach(o),To.forEach(o),ho=h(t),v=a(t,"P",{});var oe=r(v);Tl=i(oe,"The first step is to save the model locally. For example, you can use the "),de=a(oe,"A",{href:!0,rel:!0});var Fr=r(de);ct=a(Fr,"CODE",{});var Rr=r(ct);xl=i(Rr,"archive_model"),Rr.forEach(o),Fr.forEach(o),Cl=i(oe," method to save the model as a "),pt=a(oe,"CODE",{});var Yr=r(pt);Il=i(Yr,"model.tar.gz"),Yr.forEach(o),Ll=i(oe," file. You can then push the zipped model to the Hub. When you train a model with "),ft=a(oe,"CODE",{});var Wr=r(ft);Nl=i(Wr,"allennlp"),Wr.forEach(o),Ol=i(oe,", the model is automatically serialized so you can use that as a preferred option."),oe.forEach(o),co=h(t),L=a(t,"H3",{class:!0});var xo=r(L);G=a(xo,"A",{id:!0,class:!0,href:!0});var Gr=r(G);ut=a(Gr,"SPAN",{});var Vr=r(ut);y(ce.$$.fragment,Vr),Vr.forEach(o),Gr.forEach(o),Hl=h(xo),mt=a(xo,"SPAN",{});var Jr=r(mt);zl=i(Jr,"Using the AllenNLP CLI"),Jr.forEach(o),xo.forEach(o),po=h(t),V=a(t,"P",{});var Co=r(V);ql=i(Co,"To push with the CLI, you can use the "),vt=a(Co,"CODE",{});var Kr=r(vt);Sl=i(Kr,"allennlp push_to_hf"),Kr.forEach(o),jl=i(Co," command as seen below."),Co.forEach(o),fo=h(t),y(pe.$$.fragment,t),uo=h(t),J=a(t,"TABLE",{});var Io=r(J);_t=a(Io,"THEAD",{});var Qr=r(_t);N=a(Qr,"TR",{});var Ue=r(N);gt=a(Ue,"TH",{});var Xr=r(gt);Ul=i(Xr,"Argument"),Xr.forEach(o),Ml=h(Ue),Et=a(Ue,"TH",{});var Zr=r(Et);Bl=i(Zr,"Type"),Zr.forEach(o),Fl=h(Ue),yt=a(Ue,"TH",{});var es=r(yt);Rl=i(es,"Description"),es.forEach(o),Ue.forEach(o),Qr.forEach(o),Yl=h(Io),f=a(Io,"TBODY",{});var _=r(f);O=a(_,"TR",{});var Me=r(O);fe=a(Me,"TD",{});var Lo=r(fe);wt=a(Lo,"CODE",{});var ts=r(wt);Wl=i(ts,"--repo_name"),ts.forEach(o),Gl=i(Lo,", "),bt=a(Lo,"CODE",{});var os=r(bt);Vl=i(os,"-n"),os.forEach(o),Lo.forEach(o),Jl=h(Me),Oe=a(Me,"TD",{});var hr=r(Oe);Kl=i(hr,"str / "),$t=a(hr,"CODE",{});var ls=r($t);Ql=i(ls,"Path"),ls.forEach(o),hr.forEach(o),Xl=h(Me),Pt=a(Me,"TD",{});var as=r(Pt);Zl=i(as,"Name of the repository on the Hub."),as.forEach(o),Me.forEach(o),ea=h(_),H=a(_,"TR",{});var Be=r(H);ue=a(Be,"TD",{});var No=r(ue);At=a(No,"CODE",{});var rs=r(At);ta=i(rs,"--organization"),rs.forEach(o),oa=i(No,", "),Dt=a(No,"CODE",{});var ss=r(Dt);la=i(ss,"-o"),ss.forEach(o),No.forEach(o),aa=h(Be),kt=a(Be,"TD",{});var is=r(kt);ra=i(is,"str"),is.forEach(o),sa=h(Be),Tt=a(Be,"TD",{});var ns=r(Tt);ia=i(ns,"Optional name of organization to which the pipeline should be uploaded."),ns.forEach(o),Be.forEach(o),na=h(_),z=a(_,"TR",{});var Fe=r(z);me=a(Fe,"TD",{});var Oo=r(me);xt=a(Oo,"CODE",{});var hs=r(xt);ha=i(hs,"--serialization-dir"),hs.forEach(o),da=i(Oo,", "),Ct=a(Oo,"CODE",{});var ds=r(Ct);ca=i(ds,"-s"),ds.forEach(o),Oo.forEach(o),pa=h(Fe),He=a(Fe,"TD",{});var dr=r(He);fa=i(dr,"str / "),It=a(dr,"CODE",{});var cs=r(It);ua=i(cs,"Path"),cs.forEach(o),dr.forEach(o),ma=h(Fe),Lt=a(Fe,"TD",{});var ps=r(Lt);va=i(ps,"Path to directory with the serialized model."),ps.forEach(o),Fe.forEach(o),_a=h(_),q=a(_,"TR",{});var Re=r(q);ve=a(Re,"TD",{});var Ho=r(ve);Nt=a(Ho,"CODE",{});var fs=r(Nt);ga=i(fs,"--archive-path"),fs.forEach(o),Ea=i(Ho,", "),Ot=a(Ho,"CODE",{});var us=r(Ot);ya=i(us,"-a"),us.forEach(o),Ho.forEach(o),wa=h(Re),ze=a(Re,"TD",{});var cr=r(ze);ba=i(cr,"str / "),Ht=a(cr,"CODE",{});var ms=r(Ht);$a=i(ms,"Path"),ms.forEach(o),cr.forEach(o),Pa=h(Re),zt=a(Re,"TD",{});var vs=r(zt);Aa=i(vs,"If instead of a serialization path you\u2019re using a zipped model (e.g. model/model.tar.gz), you can use this flag."),vs.forEach(o),Re.forEach(o),Da=h(_),S=a(_,"TR",{});var Ye=r(S);_e=a(Ye,"TD",{});var zo=r(_e);qt=a(zo,"CODE",{});var _s=r(qt);ka=i(_s,"--local-repo-path"),_s.forEach(o),Ta=i(zo,", "),St=a(zo,"CODE",{});var gs=r(St);xa=i(gs,"-l"),gs.forEach(o),zo.forEach(o),Ca=h(Ye),qe=a(Ye,"TD",{});var pr=r(qe);Ia=i(pr,"str / "),jt=a(pr,"CODE",{});var Es=r(jt);La=i(Es,"Path"),Es.forEach(o),pr.forEach(o),Na=h(Ye),ge=a(Ye,"TD",{});var qo=r(ge);Oa=i(qo,"Local path to the model repository (will be created if it doesn\u2019t exist). Defaults to "),Ut=a(qo,"CODE",{});var ys=r(Ut);Ha=i(ys,"hub"),ys.forEach(o),za=i(qo," in the current working directory."),qo.forEach(o),Ye.forEach(o),qa=h(_),j=a(_,"TR",{});var We=r(j);Ee=a(We,"TD",{});var So=r(Ee);Mt=a(So,"CODE",{});var ws=r(Mt);Sa=i(ws,"--commit-message"),ws.forEach(o),ja=i(So,", "),Bt=a(So,"CODE",{});var bs=r(Bt);Ua=i(bs,"-c"),bs.forEach(o),So.forEach(o),Ma=h(We),Ft=a(We,"TD",{});var $s=r(Ft);Ba=i($s,"str"),$s.forEach(o),Fa=h(We),ye=a(We,"TD",{});var jo=r(ye);Ra=i(jo,"Commit message to use for update. Defaults to "),Rt=a(jo,"CODE",{});var Ps=r(Rt);Ya=i(Ps,'"update repository"'),Ps.forEach(o),Wa=i(jo,"."),jo.forEach(o),We.forEach(o),_.forEach(o),Io.forEach(o),mo=h(t),U=a(t,"H3",{class:!0});var Uo=r(U);K=a(Uo,"A",{id:!0,class:!0,href:!0});var As=r(K);Yt=a(As,"SPAN",{});var Ds=r(Yt);y(we.$$.fragment,Ds),Ds.forEach(o),As.forEach(o),Ga=h(Uo),Wt=a(Uo,"SPAN",{});var ks=r(Wt);Va=i(ks,"From a Python script"),ks.forEach(o),Uo.forEach(o),vo=h(t),Q=a(t,"P",{});var Mo=r(Q);Ja=i(Mo,"The "),Gt=a(Mo,"CODE",{});var Ts=r(Gt);Ka=i(Ts,"push_to_hf"),Ts.forEach(o),Qa=i(Mo," function has the same parameters as the bash script."),Mo.forEach(o),_o=h(t),y(be.$$.fragment,t),go=h(t),Se=a(t,"P",{});var xs=r(Se);Xa=i(xs,"In just a minute, you can get your model in the Hub, try it out directly in the browser, and share it with the rest of the community. All the required metadata will be uploaded for you!"),xs.forEach(o),Eo=h(t),M=a(t,"H2",{class:!0});var Bo=r(M);X=a(Bo,"A",{id:!0,class:!0,href:!0});var Cs=r(X);Vt=a(Cs,"SPAN",{});var Is=r(Vt);y($e.$$.fragment,Is),Is.forEach(o),Cs.forEach(o),Za=h(Bo),Jt=a(Bo,"SPAN",{});var Ls=r(Jt);er=i(Ls,"Additional resources"),Ls.forEach(o),Bo.forEach(o),yo=h(t),Z=a(t,"UL",{});var Fo=r(Z);Pe=a(Fo,"LI",{});var Ro=r(Pe);tr=i(Ro,"AllenNLP "),Ae=a(Ro,"A",{href:!0,rel:!0});var Ns=r(Ae);or=i(Ns,"website"),Ns.forEach(o),lr=i(Ro,"."),Ro.forEach(o),ar=h(Fo),De=a(Fo,"LI",{});var Yo=r(De);rr=i(Yo,"AllenNLP "),ke=a(Yo,"A",{href:!0,rel:!0});var Os=r(ke);sr=i(Os,"repository"),Os.forEach(o),ir=i(Yo,"."),Yo.forEach(o),Fo.forEach(o),this.h()},h(){c(A,"name","hf:doc:metadata"),c(A,"content",JSON.stringify(Bs)),c(B,"id","using-allennlp-at-hugging-face"),c(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B,"href","#using-allennlp-at-hugging-face"),c(D,"class","relative group"),c(F,"id","exploring-allennlp-in-the-hub"),c(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F,"href","#exploring-allennlp-in-the-hub"),c(k,"class","relative group"),c(se,"href","https://huggingface.co/models?library=allennlp"),c(se,"rel","nofollow"),c(Ce,"class","block dark:hidden"),Wo(Ce.src,mr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-allennlp_widget.png")||c(Ce,"src",mr),c(Ie,"class","hidden dark:block"),Wo(Ie.src,vr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-allennlp_widget-dark.png")||c(Ie,"src",vr),c(T,"class","flex justify-center"),c(R,"id","using-existing-models"),c(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R,"href","#using-existing-models"),c(x,"class","relative group"),c(Le,"class","block dark:hidden"),Wo(Le.src,_r="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-allennlp_snippet.png")||c(Le,"src",_r),c(Ne,"class","hidden dark:block"),Wo(Ne.src,gr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-allennlp_snippet-dark.png")||c(Ne,"src",gr),c(C,"class","flex justify-center"),c(W,"id","sharing-your-models"),c(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W,"href","#sharing-your-models"),c(I,"class","relative group"),c(de,"href","https://docs.allennlp.org/main/api/models/archival/#archive_model"),c(de,"rel","nofollow"),c(G,"id","using-the-allennlp-cli"),c(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G,"href","#using-the-allennlp-cli"),c(L,"class","relative group"),c(K,"id","from-a-python-script"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#from-a-python-script"),c(U,"class","relative group"),c(X,"id","additional-resources"),c(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X,"href","#additional-resources"),c(M,"class","relative group"),c(Ae,"href","https://allenai.org/allennlp"),c(Ae,"rel","nofollow"),c(ke,"href","https://github.com/allenai/allennlp"),c(ke,"rel","nofollow")},m(t,d){e(document.head,A),p(t,Kt,d),p(t,D,d),e(D,B),e(B,Ge),w(le,Ge,null),e(D,Go),e(D,Ve),e(Ve,Vo),p(t,Qt,d),p(t,ae,d),e(ae,Je),e(Je,Jo),e(ae,Ko),p(t,Xt,d),p(t,k,d),e(k,F),e(F,Ke),w(re,Ke,null),e(k,Qo),e(k,Qe),e(Qe,Xo),p(t,Zt,d),p(t,g,d),e(g,Zo),e(g,Xe),e(Xe,el),e(g,tl),e(g,se),e(se,ol),e(g,ll),p(t,eo,d),p(t,xe,d),e(xe,al),p(t,to,d),p(t,u,d),e(u,Ze),e(Ze,rl),e(u,sl),e(u,et),e(et,il),e(u,nl),e(u,tt),e(tt,hl),e(u,dl),e(u,ot),e(ot,cl),p(t,oo,d),p(t,T,d),e(T,Ce),e(T,pl),e(T,Ie),p(t,lo,d),p(t,x,d),e(x,R),e(R,lt),w(ie,lt,null),e(x,fl),e(x,at),e(at,ul),p(t,ao,d),p(t,m,d),e(m,ml),e(m,rt),e(rt,vl),e(m,_l),e(m,st),e(st,gl),e(m,El),e(m,it),e(it,yl),e(m,wl),p(t,ro,d),w(ne,t,d),p(t,so,d),p(t,Y,d),e(Y,bl),e(Y,nt),e(nt,$l),e(Y,Pl),p(t,io,d),p(t,C,d),e(C,Le),e(C,Al),e(C,Ne),p(t,no,d),p(t,I,d),e(I,W),e(W,ht),w(he,ht,null),e(I,Dl),e(I,dt),e(dt,kl),p(t,ho,d),p(t,v,d),e(v,Tl),e(v,de),e(de,ct),e(ct,xl),e(v,Cl),e(v,pt),e(pt,Il),e(v,Ll),e(v,ft),e(ft,Nl),e(v,Ol),p(t,co,d),p(t,L,d),e(L,G),e(G,ut),w(ce,ut,null),e(L,Hl),e(L,mt),e(mt,zl),p(t,po,d),p(t,V,d),e(V,ql),e(V,vt),e(vt,Sl),e(V,jl),p(t,fo,d),w(pe,t,d),p(t,uo,d),p(t,J,d),e(J,_t),e(_t,N),e(N,gt),e(gt,Ul),e(N,Ml),e(N,Et),e(Et,Bl),e(N,Fl),e(N,yt),e(yt,Rl),e(J,Yl),e(J,f),e(f,O),e(O,fe),e(fe,wt),e(wt,Wl),e(fe,Gl),e(fe,bt),e(bt,Vl),e(O,Jl),e(O,Oe),e(Oe,Kl),e(Oe,$t),e($t,Ql),e(O,Xl),e(O,Pt),e(Pt,Zl),e(f,ea),e(f,H),e(H,ue),e(ue,At),e(At,ta),e(ue,oa),e(ue,Dt),e(Dt,la),e(H,aa),e(H,kt),e(kt,ra),e(H,sa),e(H,Tt),e(Tt,ia),e(f,na),e(f,z),e(z,me),e(me,xt),e(xt,ha),e(me,da),e(me,Ct),e(Ct,ca),e(z,pa),e(z,He),e(He,fa),e(He,It),e(It,ua),e(z,ma),e(z,Lt),e(Lt,va),e(f,_a),e(f,q),e(q,ve),e(ve,Nt),e(Nt,ga),e(ve,Ea),e(ve,Ot),e(Ot,ya),e(q,wa),e(q,ze),e(ze,ba),e(ze,Ht),e(Ht,$a),e(q,Pa),e(q,zt),e(zt,Aa),e(f,Da),e(f,S),e(S,_e),e(_e,qt),e(qt,ka),e(_e,Ta),e(_e,St),e(St,xa),e(S,Ca),e(S,qe),e(qe,Ia),e(qe,jt),e(jt,La),e(S,Na),e(S,ge),e(ge,Oa),e(ge,Ut),e(Ut,Ha),e(ge,za),e(f,qa),e(f,j),e(j,Ee),e(Ee,Mt),e(Mt,Sa),e(Ee,ja),e(Ee,Bt),e(Bt,Ua),e(j,Ma),e(j,Ft),e(Ft,Ba),e(j,Fa),e(j,ye),e(ye,Ra),e(ye,Rt),e(Rt,Ya),e(ye,Wa),p(t,mo,d),p(t,U,d),e(U,K),e(K,Yt),w(we,Yt,null),e(U,Ga),e(U,Wt),e(Wt,Va),p(t,vo,d),p(t,Q,d),e(Q,Ja),e(Q,Gt),e(Gt,Ka),e(Q,Qa),p(t,_o,d),w(be,t,d),p(t,go,d),p(t,Se,d),e(Se,Xa),p(t,Eo,d),p(t,M,d),e(M,X),e(X,Vt),w($e,Vt,null),e(M,Za),e(M,Jt),e(Jt,er),p(t,yo,d),p(t,Z,d),e(Z,Pe),e(Pe,tr),e(Pe,Ae),e(Ae,or),e(Pe,lr),e(Z,ar),e(Z,De),e(De,rr),e(De,ke),e(ke,sr),e(De,ir),wo=!0},p:js,i(t){wo||(b(le.$$.fragment,t),b(re.$$.fragment,t),b(ie.$$.fragment,t),b(ne.$$.fragment,t),b(he.$$.fragment,t),b(ce.$$.fragment,t),b(pe.$$.fragment,t),b(we.$$.fragment,t),b(be.$$.fragment,t),b($e.$$.fragment,t),wo=!0)},o(t){$(le.$$.fragment,t),$(re.$$.fragment,t),$(ie.$$.fragment,t),$(ne.$$.fragment,t),$(he.$$.fragment,t),$(ce.$$.fragment,t),$(pe.$$.fragment,t),$(we.$$.fragment,t),$(be.$$.fragment,t),$($e.$$.fragment,t),wo=!1},d(t){o(A),t&&o(Kt),t&&o(D),P(le),t&&o(Qt),t&&o(ae),t&&o(Xt),t&&o(k),P(re),t&&o(Zt),t&&o(g),t&&o(eo),t&&o(xe),t&&o(to),t&&o(u),t&&o(oo),t&&o(T),t&&o(lo),t&&o(x),P(ie),t&&o(ao),t&&o(m),t&&o(ro),P(ne,t),t&&o(so),t&&o(Y),t&&o(io),t&&o(C),t&&o(no),t&&o(I),P(he),t&&o(ho),t&&o(v),t&&o(co),t&&o(L),P(ce),t&&o(po),t&&o(V),t&&o(fo),P(pe,t),t&&o(uo),t&&o(J),t&&o(mo),t&&o(U),P(we),t&&o(vo),t&&o(Q),t&&o(_o),P(be,t),t&&o(go),t&&o(Se),t&&o(Eo),t&&o(M),P($e),t&&o(yo),t&&o(Z)}}}const Bs={local:"using-allennlp-at-hugging-face",sections:[{local:"exploring-allennlp-in-the-hub",title:"Exploring allennlp in the Hub"},{local:"using-existing-models",title:"Using existing models"},{local:"sharing-your-models",sections:[{local:"using-the-allennlp-cli",title:"Using the AllenNLP CLI"},{local:"from-a-python-script",title:"From a Python script"}],title:"Sharing your models"},{local:"additional-resources",title:"Additional resources"}],title:"Using AllenNLP at Hugging Face"};function Fs(ur){return Us(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gs extends Hs{constructor(A){super();zs(this,A,Fs,Ms,qs,{})}}export{Gs as default,Bs as metadata};
