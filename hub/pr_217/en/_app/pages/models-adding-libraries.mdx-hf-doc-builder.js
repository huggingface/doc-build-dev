import{S as Eh,i as $h,s as kh,e as r,k as f,w as d,t as s,N as Ah,c as l,d as o,m as p,a,x as c,h as i,b as u,P as gl,G as t,g as h,y as m,L as Ph,q as _,o as y,B as g,v as Ih}from"../chunks/vendor-hf-doc-builder.js";import{I as we}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as v}from"../chunks/CodeBlock-hf-doc-builder.js";function jh(Oi){let T,zo,q,K,Nt,Ee,vl,Ut,bl,Yo,b,wl,$e,El,$l,ke,kl,Al,Ae,Pl,Il,Jo,ct,jl,Ko,w,Bt,Dl,Hl,Pe,Ll,Ie,xl,Cl,Ol,je,Tl,De,ql,Sl,Fl,Wt,Ml,Vo,mt,Nl,Qo,V,Ul,He,Bl,Wl,Xo,Q,Rl,Le,Gl,zl,Zo,S,X,Rt,xe,Yl,Gt,Jl,er,j,Ce,Oe,Kl,zt,Vl,Ql,Xl,Te,Zl,F,qe,ea,Yt,ta,oa,ra,Se,la,Fe,aa,M,Me,sa,Jt,ia,na,ha,Ne,fa,_t,Kt,pa,ua,tr,N,Z,Vt,Ue,da,Qt,ca,or,yt,ma,rr,E,_a,Xt,ya,ga,Zt,va,ba,eo,wa,Ea,lr,D,$a,to,ka,Aa,Be,Pa,Ia,ar,We,sr,H,ja,oo,Da,Ha,ro,La,xa,ir,gt,Ca,nr,Re,hr,ee,Oa,lo,Ta,qa,fr,Ge,pr,U,te,ao,ze,Sa,so,Fa,ur,vt,Ma,dr,B,bt,Ti,Na,wt,qi,cr,L,Ua,Ye,Ba,Wa,Je,Ra,Ga,mr,Ke,_r,Et,za,yr,W,$t,Si,Ya,kt,Fi,gr,R,oe,io,Ve,Ja,no,Ka,vr,re,Va,ho,Qa,Xa,br,le,At,fo,Za,es,ts,Pt,po,os,rs,wr,G,ae,uo,Qe,ls,co,mo,as,Er,x,ss,_o,is,ns,yo,hs,fs,$r,Xe,kr,se,ps,go,us,ds,Ar,z,ie,vo,Ze,cs,bo,wo,ms,Pr,ne,_s,Eo,ys,gs,Ir,C,$o,vs,bs,ko,ws,Es,Ao,$s,jr,It,ks,Dr,et,Hr,he,As,Y,Ps,Po,Is,js,Ds,Lr,jt,Hs,xr,fe,Ls,Dt,xs,Cs,Cr,J,pe,Io,tt,Os,jo,Ts,Or,Ht,qs,Tr,ue,Ss,ot,Fs,Ms,qr,O,Do,k,Ns,Ho,Us,Bs,Lo,Ws,Rs,xo,Gs,zs,Ys,rt,Co,Js,Ks,A,Oo,lt,Vs,To,Qs,Xs,Zs,at,P,ei,qo,ti,oi,st,ri,li,So,ai,si,ii,it,ni,Fo,I,hi,Mo,fi,pi,No,ui,di,nt,ci,mi,_i,ht,ft,yi,Uo,gi,vi,bi,pt,wi,ut,Bo,Ei,$i,dt,Sr,$,ki,Wo,Ai,Pi,Ro,Ii,ji,Go,Di,Hi,Fr;return Ee=new we({}),xe=new we({}),Te=new v({props:{code:"python -m pip install huggingface_hub",highlighted:"python -m pip install huggingface_hub"}}),Se=new v({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Fe=new v({props:{code:"",highlighted:`     _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|
     _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|
     _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|
     _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|
     _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|

     
Username: 
Password:`}}),Ne=new v({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),Ue=new we({}),We=new v({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)`}}),Re=new v({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>)`}}),Ge=new v({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", cache_dir="/home/lysandre/test")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, cache_dir=<span class="hljs-string">&quot;/home/lysandre/test&quot;</span>)`}}),ze=new we({}),Ke=new v({props:{code:'const asteroid = (model: ModelData) =>\n`from asteroid.models import BaseModel\n  \nmodel = BaseModel.from_pretrained("${model.id}")`;',highlighted:'<span class="hljs-keyword">const</span> <span class="hljs-title function_">asteroid</span> = (<span class="hljs-params">model: ModelData</span>) =&gt;\n<span class="hljs-string">`from asteroid.models import BaseModel\n  \nmodel = BaseModel.from_pretrained(&quot;<span class="hljs-subst">${model.id}</span>&quot;)`</span>;'}}),Ve=new we({}),Qe=new we({}),Xe=new v({props:{code:`from huggingface_hub import create_repo
create_repo(repo_id="test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(repo_id=<span class="hljs-string">&quot;test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),Ze=new we({}),et=new v({props:{code:`from huggingface_hub import upload_file
upload_file(
   path_or_fileobj="/home/lysandre/dummy-test/README.md", 
   path_in_repo="README.md", 
   repo_id="lysandre/test-model"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> upload_file
<span class="hljs-meta">&gt;&gt;&gt; </span>upload_file(
<span class="hljs-meta">... </span>   path_or_fileobj=<span class="hljs-string">&quot;/home/lysandre/dummy-test/README.md&quot;</span>, 
<span class="hljs-meta">... </span>   path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>, 
<span class="hljs-meta">... </span>   repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model/blob/main/README.md&#x27;</span>`}}),tt=new we({}),it=new v({props:{code:`ALLOWED_TASKS: Dict[str, Type[Pipeline]] = {
    "token-classification": TokenClassificationPipeline
}`,highlighted:`ALLOWED_TASKS: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Type</span>[Pipeline]] = {
    <span class="hljs-string">&quot;token-classification&quot;</span>: TokenClassificationPipeline
}`}}),pt=new v({props:{code:`TESTABLE_MODELS: Dict[str,str] = {
    "text-generation": "my-gpt2-model"
}`,highlighted:`TESTABLE_MODELS: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>,<span class="hljs-built_in">str</span>] = {
    <span class="hljs-string">&quot;text-generation&quot;</span>: <span class="hljs-string">&quot;my-gpt2-model&quot;</span>
}`}}),dt=new v({props:{code:"pytest -sv --rootdir docker_images/your-awesome-library/docker_images/your-awesome-library/",highlighted:"pytest -sv --rootdir docker_images/your-awesome-library/docker_images/your-awesome-library/"}}),{c(){T=r("meta"),zo=f(),q=r("h1"),K=r("a"),Nt=r("span"),d(Ee.$$.fragment),vl=f(),Ut=r("span"),bl=s("Integrate your library with the Hub"),Yo=f(),b=r("p"),wl=s("The Hugging Face Hub aims to facilitate sharing machine learning models, checkpoints, and artifacts. This endeavor includes integrating the Hub into many of the amazing third-party libraries in the community. Some of the ones already integrated include "),$e=r("a"),El=s("spaCy"),$l=s(", "),ke=r("a"),kl=s("AllenNLP"),Al=s(", and "),Ae=r("a"),Pl=s("timm"),Il=s(", among many others. Integration means users can download and upload files to the Hub directly from your library. We hope you will integrate your library and join us in democratizing artificial intelligence for everyone!"),Jo=f(),ct=r("p"),jl=s("Integrating the Hub with your library provides many benefits, including:"),Ko=f(),w=r("ul"),Bt=r("li"),Dl=s("Free model hosting for you and your users."),Hl=f(),Pe=r("li"),Ll=s("Built-in file versioning - even for huge files - made possible by "),Ie=r("a"),xl=s("Git-LFS"),Cl=s("."),Ol=f(),je=r("li"),Tl=s("All public models are powered by the "),De=r("a"),ql=s("Inference API"),Sl=s("."),Fl=f(),Wt=r("li"),Ml=s("In-browser widgets allow users to interact with your hosted models directly."),Vo=f(),mt=r("p"),Nl=s("This tutorial will help you integrate the Hub into your library so your users can benefit from all the features offered by the Hub."),Qo=f(),V=r("p"),Ul=s("Before you begin, we recommend you create a "),He=r("a"),Bl=s("Hugging Face account"),Wl=s(" from which you can manage your repositories and files."),Xo=f(),Q=r("p"),Rl=s("If you need help with the integration, feel free to open an "),Le=r("a"),Gl=s("issue"),zl=s(", and we would be more than happy to help you!"),Zo=f(),S=r("h2"),X=r("a"),Rt=r("span"),d(xe.$$.fragment),Yl=f(),Gt=r("span"),Jl=s("Installation"),er=f(),j=r("ol"),Ce=r("li"),Oe=r("p"),Kl=s("Install the "),zt=r("code"),Vl=s("huggingface_hub"),Ql=s(" library with pip in your environment:"),Xl=f(),d(Te.$$.fragment),Zl=f(),F=r("li"),qe=r("p"),ea=s("Once you have successfully installed the "),Yt=r("code"),ta=s("huggingface_hub"),oa=s(" library, log in to your Hugging Face account:"),ra=f(),d(Se.$$.fragment),la=f(),d(Fe.$$.fragment),aa=f(),M=r("li"),Me=r("p"),sa=s("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Jt=r("code"),ia=s("notebook_login"),na=s(":"),ha=f(),d(Ne.$$.fragment),fa=f(),_t=r("p"),Kt=r("code"),pa=s("notebook_login"),ua=s(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),tr=f(),N=r("h2"),Z=r("a"),Vt=r("span"),d(Ue.$$.fragment),da=f(),Qt=r("span"),ca=s("Download files from the Hub"),or=f(),yt=r("p"),ma=s("Integration allows users to download your hosted files directly from the Hub using your library."),rr=f(),E=r("p"),_a=s("Use the "),Xt=r("code"),ya=s("hf_hub_download"),ga=s(" function to retrieve a URL and download files from your repository. Downloaded files are stored in your cache: "),Zt=r("code"),va=s("~/.cache/huggingface/hub"),ba=s(". You don\u2019t have to re-download the file the next time you use it, and for larger files, this can save a lot of time. Furthermore, if the repository is updated with a new version of the file, "),eo=r("code"),wa=s("huggingface_hub"),Ea=s(" will automatically download the latest version and store it in the cache for you. Users don\u2019t have to worry about updating their files."),lr=f(),D=r("p"),$a=s("For example, download the "),to=r("code"),ka=s("config.json"),Aa=s(" file from the "),Be=r("a"),Pa=s("lysandre/arxiv-nlp"),Ia=s(" repository:"),ar=f(),d(We.$$.fragment),sr=f(),H=r("p"),ja=s("Download a specific version of the file by specifying the "),oo=r("code"),Da=s("revision"),Ha=s(" parameter. The "),ro=r("code"),La=s("revision"),xa=s(" parameter can be a branch name, tag, or commit hash."),ir=f(),gt=r("p"),Ca=s("The commit hash must be a full-length hash instead of the shorter 7-character commit hash:"),nr=f(),d(Re.$$.fragment),hr=f(),ee=r("p"),Oa=s("Use the "),lo=r("code"),Ta=s("cache_dir"),qa=s(" parameter to change where a file is stored:"),fr=f(),d(Ge.$$.fragment),pr=f(),U=r("h3"),te=r("a"),ao=r("span"),d(ze.$$.fragment),Sa=f(),so=r("span"),Fa=s("Code sample"),ur=f(),vt=r("p"),Ma=s("We recommend adding a code snippet to explain how to use a model in your downstream library."),dr=f(),B=r("div"),bt=r("img"),Na=f(),wt=r("img"),cr=f(),L=r("p"),Ua=s("Add a code snippet by updating the "),Ye=r("a"),Ba=s("Libraries Typescript file"),Wa=s(" with instructions for your model. For example, the "),Je=r("a"),Ra=s("Asteroid"),Ga=s(" integration includes a brief code snippet for how to load and use an Asteroid model:"),mr=f(),d(Ke.$$.fragment),_r=f(),Et=r("p"),za=s("Doing so will also add a tag to your model so users can quickly identify models from your library."),yr=f(),W=r("div"),$t=r("img"),Ya=f(),kt=r("img"),gr=f(),R=r("h2"),oe=r("a"),io=r("span"),d(Ve.$$.fragment),Ja=f(),no=r("span"),Ka=s("Upload files to the Hub"),vr=f(),re=r("p"),Va=s("You might also want to provide a method for creating model repositories and uploading files to the Hub directly from your library. The "),ho=r("code"),Qa=s("huggingface_hub"),Xa=s(" library offers two ways to assist you with creating repositories and uploading files:"),br=f(),le=r("ul"),At=r("li"),fo=r("code"),Za=s("create_repo"),es=s(" creates a repository on the Hub."),ts=f(),Pt=r("li"),po=r("code"),os=s("upload_file"),rs=s(" directly uploads files to a repository on the Hub."),wr=f(),G=r("h3"),ae=r("a"),uo=r("span"),d(Qe.$$.fragment),ls=f(),co=r("span"),mo=r("code"),as=s("create_repo"),Er=f(),x=r("p"),ss=s("The "),_o=r("code"),is=s("create_repo"),ns=s(" method creates a repository on the Hub. Use the "),yo=r("code"),hs=s("name"),fs=s(" parameter to provide a name for your repository:"),$r=f(),d(Xe.$$.fragment),kr=f(),se=r("p"),ps=s("When you check your Hugging Face account, you should now see a "),go=r("code"),us=s("test-model"),ds=s(" repository under your namespace."),Ar=f(),z=r("h3"),ie=r("a"),vo=r("span"),d(Ze.$$.fragment),cs=f(),bo=r("span"),wo=r("code"),ms=s("upload_file"),Pr=f(),ne=r("p"),_s=s("The "),Eo=r("code"),ys=s("upload_file"),gs=s(" method uploads files to the Hub. This method requires the following:"),Ir=f(),C=r("ul"),$o=r("li"),vs=s("A path to the file to upload."),bs=f(),ko=r("li"),ws=s("The final path in the repository."),Es=f(),Ao=r("li"),$s=s("The repository you wish to push the files to."),jr=f(),It=r("p"),ks=s("For example:"),Dr=f(),d(et.$$.fragment),Hr=f(),he=r("p"),As=s("If you need to upload more than one file, look at the "),Y=r("a"),Ps=s("utilities offered by the "),Po=r("code"),Is=s("Repository"),js=s(" class"),Ds=s("."),Lr=f(),jt=r("p"),Hs=s("Once again, if you check your Hugging Face account, you should see the file inside your repository."),xr=f(),fe=r("p"),Ls=s("Lastly, it is important to add a model card so users understand how to use your model. See "),Dt=r("a"),xs=s("here"),Cs=s(" for more details about how to create a model card."),Cr=f(),J=r("h2"),pe=r("a"),Io=r("span"),d(tt.$$.fragment),Os=f(),jo=r("span"),Ts=s("Set up the Inference API"),Or=f(),Ht=r("p"),qs=s("Our Inference API powers models uploaded to the Hub through your library."),Tr=f(),ue=r("p"),Ss=s("All third-party libraries are Dockerized, so you can install the dependencies you\u2019ll need for your library to work correctly. Add your library to the existing Docker images by navigating to the "),ot=r("a"),Fs=s("Docker images folder"),Ms=s("."),qr=f(),O=r("ol"),Do=r("li"),k=r("p"),Ns=s("Copy the "),Ho=r("code"),Us=s("common"),Bs=s(" folder and rename it with the name of your library (e.g. "),Lo=r("code"),Ws=s("docker/common"),Rs=s(" to "),xo=r("code"),Gs=s("docker/your-awesome-library"),zs=s(")."),Ys=f(),rt=r("li"),Co=r("p"),Js=s("There are four files you need to edit:"),Ks=f(),A=r("ul"),Oo=r("li"),lt=r("p"),Vs=s("List the packages required for your library to work in "),To=r("code"),Qs=s("requirements.txt"),Xs=s("."),Zs=f(),at=r("li"),P=r("p"),ei=s("Update "),qo=r("code"),ti=s("app/main.py"),oi=s(" with the tasks supported by your model (see "),st=r("a"),ri=s("here"),li=s(" for a complete list of available tasks). Look out for the "),So=r("code"),ai=s("IMPLEMENT_THIS"),si=s(" flag to add your supported task."),ii=f(),d(it.$$.fragment),ni=f(),Fo=r("li"),I=r("p"),hi=s("For each task your library supports, modify the "),Mo=r("code"),fi=s("app/pipelines/task_name.py"),pi=s(" files accordingly. We have also added an "),No=r("code"),ui=s("IMPLEMENT_THIS"),di=s(" flag in the pipeline files to guide you. If there isn\u2019t a pipeline that supports your task, feel free to add one. Open an "),nt=r("a"),ci=s("issue"),mi=s(" here, and we will be happy to help you."),_i=f(),ht=r("li"),ft=r("p"),yi=s("Add your model and task to the "),Uo=r("code"),gi=s("tests/test_api.py"),vi=s(" file. For example, if you have a text generation model:"),bi=f(),d(pt.$$.fragment),wi=f(),ut=r("li"),Bo=r("p"),Ei=s("Finally, run the following test to ensure everything works as expected:"),$i=f(),d(dt.$$.fragment),Sr=f(),$=r("p"),ki=s("With these simple but powerful methods, you brought the full functionality of the Hub into your library. Users can download files stored on the Hub from your library with "),Wo=r("code"),Ai=s("hf_hub_download"),Pi=s(", create repositories with "),Ro=r("code"),Ii=s("create_repo"),ji=s(", and upload files with "),Go=r("code"),Di=s("upload_file"),Hi=s(". You also set up Inference API with your library, allowing users to interact with your models on the Hub from inside a browser."),this.h()},l(e){const n=Ah('[data-svelte="svelte-1phssyn"]',document.head);T=l(n,"META",{name:!0,content:!0}),n.forEach(o),zo=p(e),q=l(e,"H1",{class:!0});var Mr=a(q);K=l(Mr,"A",{id:!0,class:!0,href:!0});var Mi=a(K);Nt=l(Mi,"SPAN",{});var Ni=a(Nt);c(Ee.$$.fragment,Ni),Ni.forEach(o),Mi.forEach(o),vl=p(Mr),Ut=l(Mr,"SPAN",{});var Ui=a(Ut);bl=i(Ui,"Integrate your library with the Hub"),Ui.forEach(o),Mr.forEach(o),Yo=p(e),b=l(e,"P",{});var de=a(b);wl=i(de,"The Hugging Face Hub aims to facilitate sharing machine learning models, checkpoints, and artifacts. This endeavor includes integrating the Hub into many of the amazing third-party libraries in the community. Some of the ones already integrated include "),$e=l(de,"A",{href:!0,rel:!0});var Bi=a($e);El=i(Bi,"spaCy"),Bi.forEach(o),$l=i(de,", "),ke=l(de,"A",{href:!0,rel:!0});var Wi=a(ke);kl=i(Wi,"AllenNLP"),Wi.forEach(o),Al=i(de,", and "),Ae=l(de,"A",{href:!0,rel:!0});var Ri=a(Ae);Pl=i(Ri,"timm"),Ri.forEach(o),Il=i(de,", among many others. Integration means users can download and upload files to the Hub directly from your library. We hope you will integrate your library and join us in democratizing artificial intelligence for everyone!"),de.forEach(o),Jo=p(e),ct=l(e,"P",{});var Gi=a(ct);jl=i(Gi,"Integrating the Hub with your library provides many benefits, including:"),Gi.forEach(o),Ko=p(e),w=l(e,"UL",{});var ce=a(w);Bt=l(ce,"LI",{});var zi=a(Bt);Dl=i(zi,"Free model hosting for you and your users."),zi.forEach(o),Hl=p(ce),Pe=l(ce,"LI",{});var Nr=a(Pe);Ll=i(Nr,"Built-in file versioning - even for huge files - made possible by "),Ie=l(Nr,"A",{href:!0,rel:!0});var Yi=a(Ie);xl=i(Yi,"Git-LFS"),Yi.forEach(o),Cl=i(Nr,"."),Nr.forEach(o),Ol=p(ce),je=l(ce,"LI",{});var Ur=a(je);Tl=i(Ur,"All public models are powered by the "),De=l(Ur,"A",{href:!0,rel:!0});var Ji=a(De);ql=i(Ji,"Inference API"),Ji.forEach(o),Sl=i(Ur,"."),Ur.forEach(o),Fl=p(ce),Wt=l(ce,"LI",{});var Ki=a(Wt);Ml=i(Ki,"In-browser widgets allow users to interact with your hosted models directly."),Ki.forEach(o),ce.forEach(o),Vo=p(e),mt=l(e,"P",{});var Vi=a(mt);Nl=i(Vi,"This tutorial will help you integrate the Hub into your library so your users can benefit from all the features offered by the Hub."),Vi.forEach(o),Qo=p(e),V=l(e,"P",{});var Br=a(V);Ul=i(Br,"Before you begin, we recommend you create a "),He=l(Br,"A",{href:!0,rel:!0});var Qi=a(He);Bl=i(Qi,"Hugging Face account"),Qi.forEach(o),Wl=i(Br," from which you can manage your repositories and files."),Br.forEach(o),Xo=p(e),Q=l(e,"P",{});var Wr=a(Q);Rl=i(Wr,"If you need help with the integration, feel free to open an "),Le=l(Wr,"A",{href:!0,rel:!0});var Xi=a(Le);Gl=i(Xi,"issue"),Xi.forEach(o),zl=i(Wr,", and we would be more than happy to help you!"),Wr.forEach(o),Zo=p(e),S=l(e,"H2",{class:!0});var Rr=a(S);X=l(Rr,"A",{id:!0,class:!0,href:!0});var Zi=a(X);Rt=l(Zi,"SPAN",{});var en=a(Rt);c(xe.$$.fragment,en),en.forEach(o),Zi.forEach(o),Yl=p(Rr),Gt=l(Rr,"SPAN",{});var tn=a(Gt);Jl=i(tn,"Installation"),tn.forEach(o),Rr.forEach(o),er=p(e),j=l(e,"OL",{});var Lt=a(j);Ce=l(Lt,"LI",{});var Gr=a(Ce);Oe=l(Gr,"P",{});var zr=a(Oe);Kl=i(zr,"Install the "),zt=l(zr,"CODE",{});var on=a(zt);Vl=i(on,"huggingface_hub"),on.forEach(o),Ql=i(zr," library with pip in your environment:"),zr.forEach(o),Xl=p(Gr),c(Te.$$.fragment,Gr),Gr.forEach(o),Zl=p(Lt),F=l(Lt,"LI",{});var xt=a(F);qe=l(xt,"P",{});var Yr=a(qe);ea=i(Yr,"Once you have successfully installed the "),Yt=l(Yr,"CODE",{});var rn=a(Yt);ta=i(rn,"huggingface_hub"),rn.forEach(o),oa=i(Yr," library, log in to your Hugging Face account:"),Yr.forEach(o),ra=p(xt),c(Se.$$.fragment,xt),la=p(xt),c(Fe.$$.fragment,xt),xt.forEach(o),aa=p(Lt),M=l(Lt,"LI",{});var Ct=a(M);Me=l(Ct,"P",{});var Jr=a(Me);sa=i(Jr,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Jt=l(Jr,"CODE",{});var ln=a(Jt);ia=i(ln,"notebook_login"),ln.forEach(o),na=i(Jr,":"),Jr.forEach(o),ha=p(Ct),c(Ne.$$.fragment,Ct),fa=p(Ct),_t=l(Ct,"P",{});var Li=a(_t);Kt=l(Li,"CODE",{});var an=a(Kt);pa=i(an,"notebook_login"),an.forEach(o),ua=i(Li," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Li.forEach(o),Ct.forEach(o),Lt.forEach(o),tr=p(e),N=l(e,"H2",{class:!0});var Kr=a(N);Z=l(Kr,"A",{id:!0,class:!0,href:!0});var sn=a(Z);Vt=l(sn,"SPAN",{});var nn=a(Vt);c(Ue.$$.fragment,nn),nn.forEach(o),sn.forEach(o),da=p(Kr),Qt=l(Kr,"SPAN",{});var hn=a(Qt);ca=i(hn,"Download files from the Hub"),hn.forEach(o),Kr.forEach(o),or=p(e),yt=l(e,"P",{});var fn=a(yt);ma=i(fn,"Integration allows users to download your hosted files directly from the Hub using your library."),fn.forEach(o),rr=p(e),E=l(e,"P",{});var me=a(E);_a=i(me,"Use the "),Xt=l(me,"CODE",{});var pn=a(Xt);ya=i(pn,"hf_hub_download"),pn.forEach(o),ga=i(me," function to retrieve a URL and download files from your repository. Downloaded files are stored in your cache: "),Zt=l(me,"CODE",{});var un=a(Zt);va=i(un,"~/.cache/huggingface/hub"),un.forEach(o),ba=i(me,". You don\u2019t have to re-download the file the next time you use it, and for larger files, this can save a lot of time. Furthermore, if the repository is updated with a new version of the file, "),eo=l(me,"CODE",{});var dn=a(eo);wa=i(dn,"huggingface_hub"),dn.forEach(o),Ea=i(me," will automatically download the latest version and store it in the cache for you. Users don\u2019t have to worry about updating their files."),me.forEach(o),lr=p(e),D=l(e,"P",{});var Ot=a(D);$a=i(Ot,"For example, download the "),to=l(Ot,"CODE",{});var cn=a(to);ka=i(cn,"config.json"),cn.forEach(o),Aa=i(Ot," file from the "),Be=l(Ot,"A",{href:!0,rel:!0});var mn=a(Be);Pa=i(mn,"lysandre/arxiv-nlp"),mn.forEach(o),Ia=i(Ot," repository:"),Ot.forEach(o),ar=p(e),c(We.$$.fragment,e),sr=p(e),H=l(e,"P",{});var Tt=a(H);ja=i(Tt,"Download a specific version of the file by specifying the "),oo=l(Tt,"CODE",{});var _n=a(oo);Da=i(_n,"revision"),_n.forEach(o),Ha=i(Tt," parameter. The "),ro=l(Tt,"CODE",{});var yn=a(ro);La=i(yn,"revision"),yn.forEach(o),xa=i(Tt," parameter can be a branch name, tag, or commit hash."),Tt.forEach(o),ir=p(e),gt=l(e,"P",{});var gn=a(gt);Ca=i(gn,"The commit hash must be a full-length hash instead of the shorter 7-character commit hash:"),gn.forEach(o),nr=p(e),c(Re.$$.fragment,e),hr=p(e),ee=l(e,"P",{});var Vr=a(ee);Oa=i(Vr,"Use the "),lo=l(Vr,"CODE",{});var vn=a(lo);Ta=i(vn,"cache_dir"),vn.forEach(o),qa=i(Vr," parameter to change where a file is stored:"),Vr.forEach(o),fr=p(e),c(Ge.$$.fragment,e),pr=p(e),U=l(e,"H3",{class:!0});var Qr=a(U);te=l(Qr,"A",{id:!0,class:!0,href:!0});var bn=a(te);ao=l(bn,"SPAN",{});var wn=a(ao);c(ze.$$.fragment,wn),wn.forEach(o),bn.forEach(o),Sa=p(Qr),so=l(Qr,"SPAN",{});var En=a(so);Fa=i(En,"Code sample"),En.forEach(o),Qr.forEach(o),ur=p(e),vt=l(e,"P",{});var $n=a(vt);Ma=i($n,"We recommend adding a code snippet to explain how to use a model in your downstream library."),$n.forEach(o),dr=p(e),B=l(e,"DIV",{class:!0});var Xr=a(B);bt=l(Xr,"IMG",{class:!0,src:!0}),Na=p(Xr),wt=l(Xr,"IMG",{class:!0,src:!0}),Xr.forEach(o),cr=p(e),L=l(e,"P",{});var qt=a(L);Ua=i(qt,"Add a code snippet by updating the "),Ye=l(qt,"A",{href:!0,rel:!0});var kn=a(Ye);Ba=i(kn,"Libraries Typescript file"),kn.forEach(o),Wa=i(qt," with instructions for your model. For example, the "),Je=l(qt,"A",{href:!0,rel:!0});var An=a(Je);Ra=i(An,"Asteroid"),An.forEach(o),Ga=i(qt," integration includes a brief code snippet for how to load and use an Asteroid model:"),qt.forEach(o),mr=p(e),c(Ke.$$.fragment,e),_r=p(e),Et=l(e,"P",{});var Pn=a(Et);za=i(Pn,"Doing so will also add a tag to your model so users can quickly identify models from your library."),Pn.forEach(o),yr=p(e),W=l(e,"DIV",{class:!0});var Zr=a(W);$t=l(Zr,"IMG",{class:!0,src:!0}),Ya=p(Zr),kt=l(Zr,"IMG",{class:!0,src:!0}),Zr.forEach(o),gr=p(e),R=l(e,"H2",{class:!0});var el=a(R);oe=l(el,"A",{id:!0,class:!0,href:!0});var In=a(oe);io=l(In,"SPAN",{});var jn=a(io);c(Ve.$$.fragment,jn),jn.forEach(o),In.forEach(o),Ja=p(el),no=l(el,"SPAN",{});var Dn=a(no);Ka=i(Dn,"Upload files to the Hub"),Dn.forEach(o),el.forEach(o),vr=p(e),re=l(e,"P",{});var tl=a(re);Va=i(tl,"You might also want to provide a method for creating model repositories and uploading files to the Hub directly from your library. The "),ho=l(tl,"CODE",{});var Hn=a(ho);Qa=i(Hn,"huggingface_hub"),Hn.forEach(o),Xa=i(tl," library offers two ways to assist you with creating repositories and uploading files:"),tl.forEach(o),br=p(e),le=l(e,"UL",{});var ol=a(le);At=l(ol,"LI",{});var xi=a(At);fo=l(xi,"CODE",{});var Ln=a(fo);Za=i(Ln,"create_repo"),Ln.forEach(o),es=i(xi," creates a repository on the Hub."),xi.forEach(o),ts=p(ol),Pt=l(ol,"LI",{});var Ci=a(Pt);po=l(Ci,"CODE",{});var xn=a(po);os=i(xn,"upload_file"),xn.forEach(o),rs=i(Ci," directly uploads files to a repository on the Hub."),Ci.forEach(o),ol.forEach(o),wr=p(e),G=l(e,"H3",{class:!0});var rl=a(G);ae=l(rl,"A",{id:!0,class:!0,href:!0});var Cn=a(ae);uo=l(Cn,"SPAN",{});var On=a(uo);c(Qe.$$.fragment,On),On.forEach(o),Cn.forEach(o),ls=p(rl),co=l(rl,"SPAN",{});var Tn=a(co);mo=l(Tn,"CODE",{});var qn=a(mo);as=i(qn,"create_repo"),qn.forEach(o),Tn.forEach(o),rl.forEach(o),Er=p(e),x=l(e,"P",{});var St=a(x);ss=i(St,"The "),_o=l(St,"CODE",{});var Sn=a(_o);is=i(Sn,"create_repo"),Sn.forEach(o),ns=i(St," method creates a repository on the Hub. Use the "),yo=l(St,"CODE",{});var Fn=a(yo);hs=i(Fn,"name"),Fn.forEach(o),fs=i(St," parameter to provide a name for your repository:"),St.forEach(o),$r=p(e),c(Xe.$$.fragment,e),kr=p(e),se=l(e,"P",{});var ll=a(se);ps=i(ll,"When you check your Hugging Face account, you should now see a "),go=l(ll,"CODE",{});var Mn=a(go);us=i(Mn,"test-model"),Mn.forEach(o),ds=i(ll," repository under your namespace."),ll.forEach(o),Ar=p(e),z=l(e,"H3",{class:!0});var al=a(z);ie=l(al,"A",{id:!0,class:!0,href:!0});var Nn=a(ie);vo=l(Nn,"SPAN",{});var Un=a(vo);c(Ze.$$.fragment,Un),Un.forEach(o),Nn.forEach(o),cs=p(al),bo=l(al,"SPAN",{});var Bn=a(bo);wo=l(Bn,"CODE",{});var Wn=a(wo);ms=i(Wn,"upload_file"),Wn.forEach(o),Bn.forEach(o),al.forEach(o),Pr=p(e),ne=l(e,"P",{});var sl=a(ne);_s=i(sl,"The "),Eo=l(sl,"CODE",{});var Rn=a(Eo);ys=i(Rn,"upload_file"),Rn.forEach(o),gs=i(sl," method uploads files to the Hub. This method requires the following:"),sl.forEach(o),Ir=p(e),C=l(e,"UL",{});var Ft=a(C);$o=l(Ft,"LI",{});var Gn=a($o);vs=i(Gn,"A path to the file to upload."),Gn.forEach(o),bs=p(Ft),ko=l(Ft,"LI",{});var zn=a(ko);ws=i(zn,"The final path in the repository."),zn.forEach(o),Es=p(Ft),Ao=l(Ft,"LI",{});var Yn=a(Ao);$s=i(Yn,"The repository you wish to push the files to."),Yn.forEach(o),Ft.forEach(o),jr=p(e),It=l(e,"P",{});var Jn=a(It);ks=i(Jn,"For example:"),Jn.forEach(o),Dr=p(e),c(et.$$.fragment,e),Hr=p(e),he=l(e,"P",{});var il=a(he);As=i(il,"If you need to upload more than one file, look at the "),Y=l(il,"A",{href:!0,rel:!0});var nl=a(Y);Ps=i(nl,"utilities offered by the "),Po=l(nl,"CODE",{});var Kn=a(Po);Is=i(Kn,"Repository"),Kn.forEach(o),js=i(nl," class"),nl.forEach(o),Ds=i(il,"."),il.forEach(o),Lr=p(e),jt=l(e,"P",{});var Vn=a(jt);Hs=i(Vn,"Once again, if you check your Hugging Face account, you should see the file inside your repository."),Vn.forEach(o),xr=p(e),fe=l(e,"P",{});var hl=a(fe);Ls=i(hl,"Lastly, it is important to add a model card so users understand how to use your model. See "),Dt=l(hl,"A",{href:!0});var Qn=a(Dt);xs=i(Qn,"here"),Qn.forEach(o),Cs=i(hl," for more details about how to create a model card."),hl.forEach(o),Cr=p(e),J=l(e,"H2",{class:!0});var fl=a(J);pe=l(fl,"A",{id:!0,class:!0,href:!0});var Xn=a(pe);Io=l(Xn,"SPAN",{});var Zn=a(Io);c(tt.$$.fragment,Zn),Zn.forEach(o),Xn.forEach(o),Os=p(fl),jo=l(fl,"SPAN",{});var eh=a(jo);Ts=i(eh,"Set up the Inference API"),eh.forEach(o),fl.forEach(o),Or=p(e),Ht=l(e,"P",{});var th=a(Ht);qs=i(th,"Our Inference API powers models uploaded to the Hub through your library."),th.forEach(o),Tr=p(e),ue=l(e,"P",{});var pl=a(ue);Ss=i(pl,"All third-party libraries are Dockerized, so you can install the dependencies you\u2019ll need for your library to work correctly. Add your library to the existing Docker images by navigating to the "),ot=l(pl,"A",{href:!0,rel:!0});var oh=a(ot);Fs=i(oh,"Docker images folder"),oh.forEach(o),Ms=i(pl,"."),pl.forEach(o),qr=p(e),O=l(e,"OL",{});var Mt=a(O);Do=l(Mt,"LI",{});var rh=a(Do);k=l(rh,"P",{});var _e=a(k);Ns=i(_e,"Copy the "),Ho=l(_e,"CODE",{});var lh=a(Ho);Us=i(lh,"common"),lh.forEach(o),Bs=i(_e," folder and rename it with the name of your library (e.g. "),Lo=l(_e,"CODE",{});var ah=a(Lo);Ws=i(ah,"docker/common"),ah.forEach(o),Rs=i(_e," to "),xo=l(_e,"CODE",{});var sh=a(xo);Gs=i(sh,"docker/your-awesome-library"),sh.forEach(o),zs=i(_e,")."),_e.forEach(o),rh.forEach(o),Ys=p(Mt),rt=l(Mt,"LI",{});var ul=a(rt);Co=l(ul,"P",{});var ih=a(Co);Js=i(ih,"There are four files you need to edit:"),ih.forEach(o),Ks=p(ul),A=l(ul,"UL",{});var ye=a(A);Oo=l(ye,"LI",{});var nh=a(Oo);lt=l(nh,"P",{});var dl=a(lt);Vs=i(dl,"List the packages required for your library to work in "),To=l(dl,"CODE",{});var hh=a(To);Qs=i(hh,"requirements.txt"),hh.forEach(o),Xs=i(dl,"."),dl.forEach(o),nh.forEach(o),Zs=p(ye),at=l(ye,"LI",{});var cl=a(at);P=l(cl,"P",{});var ge=a(P);ei=i(ge,"Update "),qo=l(ge,"CODE",{});var fh=a(qo);ti=i(fh,"app/main.py"),fh.forEach(o),oi=i(ge," with the tasks supported by your model (see "),st=l(ge,"A",{href:!0,rel:!0});var ph=a(st);ri=i(ph,"here"),ph.forEach(o),li=i(ge," for a complete list of available tasks). Look out for the "),So=l(ge,"CODE",{});var uh=a(So);ai=i(uh,"IMPLEMENT_THIS"),uh.forEach(o),si=i(ge," flag to add your supported task."),ge.forEach(o),ii=p(cl),c(it.$$.fragment,cl),cl.forEach(o),ni=p(ye),Fo=l(ye,"LI",{});var dh=a(Fo);I=l(dh,"P",{});var ve=a(I);hi=i(ve,"For each task your library supports, modify the "),Mo=l(ve,"CODE",{});var ch=a(Mo);fi=i(ch,"app/pipelines/task_name.py"),ch.forEach(o),pi=i(ve," files accordingly. We have also added an "),No=l(ve,"CODE",{});var mh=a(No);ui=i(mh,"IMPLEMENT_THIS"),mh.forEach(o),di=i(ve," flag in the pipeline files to guide you. If there isn\u2019t a pipeline that supports your task, feel free to add one. Open an "),nt=l(ve,"A",{href:!0,rel:!0});var _h=a(nt);ci=i(_h,"issue"),_h.forEach(o),mi=i(ve," here, and we will be happy to help you."),ve.forEach(o),dh.forEach(o),_i=p(ye),ht=l(ye,"LI",{});var ml=a(ht);ft=l(ml,"P",{});var _l=a(ft);yi=i(_l,"Add your model and task to the "),Uo=l(_l,"CODE",{});var yh=a(Uo);gi=i(yh,"tests/test_api.py"),yh.forEach(o),vi=i(_l," file. For example, if you have a text generation model:"),_l.forEach(o),bi=p(ml),c(pt.$$.fragment,ml),ml.forEach(o),ye.forEach(o),ul.forEach(o),wi=p(Mt),ut=l(Mt,"LI",{});var yl=a(ut);Bo=l(yl,"P",{});var gh=a(Bo);Ei=i(gh,"Finally, run the following test to ensure everything works as expected:"),gh.forEach(o),$i=p(yl),c(dt.$$.fragment,yl),yl.forEach(o),Mt.forEach(o),Sr=p(e),$=l(e,"P",{});var be=a($);ki=i(be,"With these simple but powerful methods, you brought the full functionality of the Hub into your library. Users can download files stored on the Hub from your library with "),Wo=l(be,"CODE",{});var vh=a(Wo);Ai=i(vh,"hf_hub_download"),vh.forEach(o),Pi=i(be,", create repositories with "),Ro=l(be,"CODE",{});var bh=a(Ro);Ii=i(bh,"create_repo"),bh.forEach(o),ji=i(be,", and upload files with "),Go=l(be,"CODE",{});var wh=a(Go);Di=i(wh,"upload_file"),wh.forEach(o),Hi=i(be,". You also set up Inference API with your library, allowing users to interact with your models on the Hub from inside a browser."),be.forEach(o),this.h()},h(){u(T,"name","hf:doc:metadata"),u(T,"content",JSON.stringify(Dh)),u(K,"id","integrate-your-library-with-the-hub"),u(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(K,"href","#integrate-your-library-with-the-hub"),u(q,"class","relative group"),u($e,"href","https://spacy.io/usage/projects#huggingface_hub"),u($e,"rel","nofollow"),u(ke,"href","https://allennlp.org/"),u(ke,"rel","nofollow"),u(Ae,"href","https://rwightman.github.io/pytorch-image-models/"),u(Ae,"rel","nofollow"),u(Ie,"href","https://git-lfs.github.com/"),u(Ie,"rel","nofollow"),u(De,"href","https://api-inference.huggingface.co/docs/python/html/index.html"),u(De,"rel","nofollow"),u(He,"href","https://huggingface.co/join"),u(He,"rel","nofollow"),u(Le,"href","https://github.com/huggingface/huggingface_hub/issues/new/choose"),u(Le,"rel","nofollow"),u(X,"id","installation"),u(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(X,"href","#installation"),u(S,"class","relative group"),u(Z,"id","download-files-from-the-hub"),u(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Z,"href","#download-files-from-the-hub"),u(N,"class","relative group"),u(Be,"href","https://huggingface.co/lysandre/arxiv-nlp"),u(Be,"rel","nofollow"),u(te,"id","code-sample"),u(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(te,"href","#code-sample"),u(U,"class","relative group"),u(bt,"class","block dark:hidden"),gl(bt.src,Ti="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/code_snippet.png")||u(bt,"src",Ti),u(wt,"class","hidden dark:block"),gl(wt.src,qi="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/code_snippet-dark.png")||u(wt,"src",qi),u(B,"class","flex justify-center"),u(Ye,"href","https://github.com/huggingface/hub-docs/blob/main/js/src/lib/interfaces/Libraries.ts"),u(Ye,"rel","nofollow"),u(Je,"href","https://huggingface.co/asteroid-team"),u(Je,"rel","nofollow"),u($t,"class","block dark:hidden"),gl($t.src,Si="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-tags.png")||u($t,"src",Si),u(kt,"class","hidden dark:block"),gl(kt.src,Fi="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-tags-dark.png")||u(kt,"src",Fi),u(W,"class","flex justify-center"),u(oe,"id","upload-files-to-the-hub"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#upload-files-to-the-hub"),u(R,"class","relative group"),u(ae,"id","createrepo"),u(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ae,"href","#createrepo"),u(G,"class","relative group"),u(ie,"id","uploadfile"),u(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ie,"href","#uploadfile"),u(z,"class","relative group"),u(Y,"href","https://huggingface.co/docs/huggingface_hub/package_reference/repository"),u(Y,"rel","nofollow"),u(Dt,"href","./models-cards"),u(pe,"id","set-up-the-inference-api"),u(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(pe,"href","#set-up-the-inference-api"),u(J,"class","relative group"),u(ot,"href","https://github.com/huggingface/api-inference-community/tree/main/docker_images"),u(ot,"rel","nofollow"),u(st,"href","https://github.com/huggingface/api-inference-community"),u(st,"rel","nofollow"),u(nt,"href","https://github.com/huggingface/hub-docs/issues/new"),u(nt,"rel","nofollow")},m(e,n){t(document.head,T),h(e,zo,n),h(e,q,n),t(q,K),t(K,Nt),m(Ee,Nt,null),t(q,vl),t(q,Ut),t(Ut,bl),h(e,Yo,n),h(e,b,n),t(b,wl),t(b,$e),t($e,El),t(b,$l),t(b,ke),t(ke,kl),t(b,Al),t(b,Ae),t(Ae,Pl),t(b,Il),h(e,Jo,n),h(e,ct,n),t(ct,jl),h(e,Ko,n),h(e,w,n),t(w,Bt),t(Bt,Dl),t(w,Hl),t(w,Pe),t(Pe,Ll),t(Pe,Ie),t(Ie,xl),t(Pe,Cl),t(w,Ol),t(w,je),t(je,Tl),t(je,De),t(De,ql),t(je,Sl),t(w,Fl),t(w,Wt),t(Wt,Ml),h(e,Vo,n),h(e,mt,n),t(mt,Nl),h(e,Qo,n),h(e,V,n),t(V,Ul),t(V,He),t(He,Bl),t(V,Wl),h(e,Xo,n),h(e,Q,n),t(Q,Rl),t(Q,Le),t(Le,Gl),t(Q,zl),h(e,Zo,n),h(e,S,n),t(S,X),t(X,Rt),m(xe,Rt,null),t(S,Yl),t(S,Gt),t(Gt,Jl),h(e,er,n),h(e,j,n),t(j,Ce),t(Ce,Oe),t(Oe,Kl),t(Oe,zt),t(zt,Vl),t(Oe,Ql),t(Ce,Xl),m(Te,Ce,null),t(j,Zl),t(j,F),t(F,qe),t(qe,ea),t(qe,Yt),t(Yt,ta),t(qe,oa),t(F,ra),m(Se,F,null),t(F,la),m(Fe,F,null),t(j,aa),t(j,M),t(M,Me),t(Me,sa),t(Me,Jt),t(Jt,ia),t(Me,na),t(M,ha),m(Ne,M,null),t(M,fa),t(M,_t),t(_t,Kt),t(Kt,pa),t(_t,ua),h(e,tr,n),h(e,N,n),t(N,Z),t(Z,Vt),m(Ue,Vt,null),t(N,da),t(N,Qt),t(Qt,ca),h(e,or,n),h(e,yt,n),t(yt,ma),h(e,rr,n),h(e,E,n),t(E,_a),t(E,Xt),t(Xt,ya),t(E,ga),t(E,Zt),t(Zt,va),t(E,ba),t(E,eo),t(eo,wa),t(E,Ea),h(e,lr,n),h(e,D,n),t(D,$a),t(D,to),t(to,ka),t(D,Aa),t(D,Be),t(Be,Pa),t(D,Ia),h(e,ar,n),m(We,e,n),h(e,sr,n),h(e,H,n),t(H,ja),t(H,oo),t(oo,Da),t(H,Ha),t(H,ro),t(ro,La),t(H,xa),h(e,ir,n),h(e,gt,n),t(gt,Ca),h(e,nr,n),m(Re,e,n),h(e,hr,n),h(e,ee,n),t(ee,Oa),t(ee,lo),t(lo,Ta),t(ee,qa),h(e,fr,n),m(Ge,e,n),h(e,pr,n),h(e,U,n),t(U,te),t(te,ao),m(ze,ao,null),t(U,Sa),t(U,so),t(so,Fa),h(e,ur,n),h(e,vt,n),t(vt,Ma),h(e,dr,n),h(e,B,n),t(B,bt),t(B,Na),t(B,wt),h(e,cr,n),h(e,L,n),t(L,Ua),t(L,Ye),t(Ye,Ba),t(L,Wa),t(L,Je),t(Je,Ra),t(L,Ga),h(e,mr,n),m(Ke,e,n),h(e,_r,n),h(e,Et,n),t(Et,za),h(e,yr,n),h(e,W,n),t(W,$t),t(W,Ya),t(W,kt),h(e,gr,n),h(e,R,n),t(R,oe),t(oe,io),m(Ve,io,null),t(R,Ja),t(R,no),t(no,Ka),h(e,vr,n),h(e,re,n),t(re,Va),t(re,ho),t(ho,Qa),t(re,Xa),h(e,br,n),h(e,le,n),t(le,At),t(At,fo),t(fo,Za),t(At,es),t(le,ts),t(le,Pt),t(Pt,po),t(po,os),t(Pt,rs),h(e,wr,n),h(e,G,n),t(G,ae),t(ae,uo),m(Qe,uo,null),t(G,ls),t(G,co),t(co,mo),t(mo,as),h(e,Er,n),h(e,x,n),t(x,ss),t(x,_o),t(_o,is),t(x,ns),t(x,yo),t(yo,hs),t(x,fs),h(e,$r,n),m(Xe,e,n),h(e,kr,n),h(e,se,n),t(se,ps),t(se,go),t(go,us),t(se,ds),h(e,Ar,n),h(e,z,n),t(z,ie),t(ie,vo),m(Ze,vo,null),t(z,cs),t(z,bo),t(bo,wo),t(wo,ms),h(e,Pr,n),h(e,ne,n),t(ne,_s),t(ne,Eo),t(Eo,ys),t(ne,gs),h(e,Ir,n),h(e,C,n),t(C,$o),t($o,vs),t(C,bs),t(C,ko),t(ko,ws),t(C,Es),t(C,Ao),t(Ao,$s),h(e,jr,n),h(e,It,n),t(It,ks),h(e,Dr,n),m(et,e,n),h(e,Hr,n),h(e,he,n),t(he,As),t(he,Y),t(Y,Ps),t(Y,Po),t(Po,Is),t(Y,js),t(he,Ds),h(e,Lr,n),h(e,jt,n),t(jt,Hs),h(e,xr,n),h(e,fe,n),t(fe,Ls),t(fe,Dt),t(Dt,xs),t(fe,Cs),h(e,Cr,n),h(e,J,n),t(J,pe),t(pe,Io),m(tt,Io,null),t(J,Os),t(J,jo),t(jo,Ts),h(e,Or,n),h(e,Ht,n),t(Ht,qs),h(e,Tr,n),h(e,ue,n),t(ue,Ss),t(ue,ot),t(ot,Fs),t(ue,Ms),h(e,qr,n),h(e,O,n),t(O,Do),t(Do,k),t(k,Ns),t(k,Ho),t(Ho,Us),t(k,Bs),t(k,Lo),t(Lo,Ws),t(k,Rs),t(k,xo),t(xo,Gs),t(k,zs),t(O,Ys),t(O,rt),t(rt,Co),t(Co,Js),t(rt,Ks),t(rt,A),t(A,Oo),t(Oo,lt),t(lt,Vs),t(lt,To),t(To,Qs),t(lt,Xs),t(A,Zs),t(A,at),t(at,P),t(P,ei),t(P,qo),t(qo,ti),t(P,oi),t(P,st),t(st,ri),t(P,li),t(P,So),t(So,ai),t(P,si),t(at,ii),m(it,at,null),t(A,ni),t(A,Fo),t(Fo,I),t(I,hi),t(I,Mo),t(Mo,fi),t(I,pi),t(I,No),t(No,ui),t(I,di),t(I,nt),t(nt,ci),t(I,mi),t(A,_i),t(A,ht),t(ht,ft),t(ft,yi),t(ft,Uo),t(Uo,gi),t(ft,vi),t(ht,bi),m(pt,ht,null),t(O,wi),t(O,ut),t(ut,Bo),t(Bo,Ei),t(ut,$i),m(dt,ut,null),h(e,Sr,n),h(e,$,n),t($,ki),t($,Wo),t(Wo,Ai),t($,Pi),t($,Ro),t(Ro,Ii),t($,ji),t($,Go),t(Go,Di),t($,Hi),Fr=!0},p:Ph,i(e){Fr||(_(Ee.$$.fragment,e),_(xe.$$.fragment,e),_(Te.$$.fragment,e),_(Se.$$.fragment,e),_(Fe.$$.fragment,e),_(Ne.$$.fragment,e),_(Ue.$$.fragment,e),_(We.$$.fragment,e),_(Re.$$.fragment,e),_(Ge.$$.fragment,e),_(ze.$$.fragment,e),_(Ke.$$.fragment,e),_(Ve.$$.fragment,e),_(Qe.$$.fragment,e),_(Xe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(it.$$.fragment,e),_(pt.$$.fragment,e),_(dt.$$.fragment,e),Fr=!0)},o(e){y(Ee.$$.fragment,e),y(xe.$$.fragment,e),y(Te.$$.fragment,e),y(Se.$$.fragment,e),y(Fe.$$.fragment,e),y(Ne.$$.fragment,e),y(Ue.$$.fragment,e),y(We.$$.fragment,e),y(Re.$$.fragment,e),y(Ge.$$.fragment,e),y(ze.$$.fragment,e),y(Ke.$$.fragment,e),y(Ve.$$.fragment,e),y(Qe.$$.fragment,e),y(Xe.$$.fragment,e),y(Ze.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(it.$$.fragment,e),y(pt.$$.fragment,e),y(dt.$$.fragment,e),Fr=!1},d(e){o(T),e&&o(zo),e&&o(q),g(Ee),e&&o(Yo),e&&o(b),e&&o(Jo),e&&o(ct),e&&o(Ko),e&&o(w),e&&o(Vo),e&&o(mt),e&&o(Qo),e&&o(V),e&&o(Xo),e&&o(Q),e&&o(Zo),e&&o(S),g(xe),e&&o(er),e&&o(j),g(Te),g(Se),g(Fe),g(Ne),e&&o(tr),e&&o(N),g(Ue),e&&o(or),e&&o(yt),e&&o(rr),e&&o(E),e&&o(lr),e&&o(D),e&&o(ar),g(We,e),e&&o(sr),e&&o(H),e&&o(ir),e&&o(gt),e&&o(nr),g(Re,e),e&&o(hr),e&&o(ee),e&&o(fr),g(Ge,e),e&&o(pr),e&&o(U),g(ze),e&&o(ur),e&&o(vt),e&&o(dr),e&&o(B),e&&o(cr),e&&o(L),e&&o(mr),g(Ke,e),e&&o(_r),e&&o(Et),e&&o(yr),e&&o(W),e&&o(gr),e&&o(R),g(Ve),e&&o(vr),e&&o(re),e&&o(br),e&&o(le),e&&o(wr),e&&o(G),g(Qe),e&&o(Er),e&&o(x),e&&o($r),g(Xe,e),e&&o(kr),e&&o(se),e&&o(Ar),e&&o(z),g(Ze),e&&o(Pr),e&&o(ne),e&&o(Ir),e&&o(C),e&&o(jr),e&&o(It),e&&o(Dr),g(et,e),e&&o(Hr),e&&o(he),e&&o(Lr),e&&o(jt),e&&o(xr),e&&o(fe),e&&o(Cr),e&&o(J),g(tt),e&&o(Or),e&&o(Ht),e&&o(Tr),e&&o(ue),e&&o(qr),e&&o(O),g(it),g(pt),g(dt),e&&o(Sr),e&&o($)}}}const Dh={local:"integrate-your-library-with-the-hub",sections:[{local:"installation",title:"Installation"},{local:"download-files-from-the-hub",sections:[{local:"code-sample",title:"Code sample"}],title:"Download files from the Hub"},{local:"upload-files-to-the-hub",sections:[{local:"createrepo",title:"`create_repo`"},{local:"uploadfile",title:"`upload_file`"}],title:"Upload files to the Hub"},{local:"set-up-the-inference-api",title:"Set up the Inference API"}],title:"Integrate your library with the Hub"};function Hh(Oi){return Ih(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Oh extends Eh{constructor(T){super();$h(this,T,Hh,jh,kh,{})}}export{Oh as default,Dh as metadata};
