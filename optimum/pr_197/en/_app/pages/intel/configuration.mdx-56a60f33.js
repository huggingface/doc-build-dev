import{S as ie,i as se,s as ce,e as t,k as b,w as H,t as G,M as le,c as r,d as o,m as w,a as i,x as j,h as K,b as a,F as n,g as $,y as q,L as me,q as M,o as T,B as O,v as fe}from"../../chunks/vendor-4918fc3c.js";import{D as re}from"../../chunks/Docstring-02f0cd65.js";import{I as ae}from"../../chunks/IconCopyLink-21d338b1.js";function de(Q){let s,k,c,d,y,g,R,I,V,P,l,p,C,u,W,x,B,A,m,_,J,h,v,U,E,z,S;return g=new ae({}),u=new ae({}),_=new re({props:{name:"class optimum.intel.IncConfig",anchor:"optimum.intel.IncConfig",parameters:[{name:"config_path",val:": str"}],source:"https://github.com/huggingface/optimum/blob/vr_197/src/optimum/intel/neural_compressor/configuration.py#L31"}}),v=new re({props:{name:"from_pretrained",anchor:"optimum.intel.IncConfig.from_pretrained",parameters:[{name:"config_name_or_path",val:": str"},{name:"config_file_name",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.intel.IncConfig.from_pretrained.config_name_or_path",description:`<strong>config_name_or_path</strong> (<code>str</code>) &#x2014;
Repository name in the Hugging Face Hub or path to a local directory containing the configuration file.`,name:"config_name_or_path"},{anchor:"optimum.intel.IncConfig.from_pretrained.config_file_name",description:`<strong>config_file_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Name of the configuration file.`,name:"config_file_name"},{anchor:"optimum.intel.IncConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded configuration should be cached if the standard cache should
not be used.`,name:"cache_dir"},{anchor:"optimum.intel.IncConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the configuration files and override the cached versions if
they exist.`,name:"force_download"},{anchor:"optimum.intel.IncConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"optimum.intel.IncConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"}],source:"https://github.com/huggingface/optimum/blob/vr_197/src/optimum/intel/neural_compressor/configuration.py#L65",returnDescription:`
<p>IncConfig object.</p>
`,returnType:`
<p>config</p>
`}}),{c(){s=t("meta"),k=b(),c=t("h1"),d=t("a"),y=t("span"),H(g.$$.fragment),R=b(),I=t("span"),V=G("Configuration"),P=b(),l=t("h2"),p=t("a"),C=t("span"),H(u.$$.fragment),W=b(),x=t("span"),B=G("IncConfig"),A=b(),m=t("div"),H(_.$$.fragment),J=b(),h=t("div"),H(v.$$.fragment),U=b(),E=t("p"),z=G(`Instantiate an IncConfig object from a configuration file which can either be hosted on
huggingface.co or from a local directory path.`),this.h()},l(e){const f=le('[data-svelte="svelte-1phssyn"]',document.head);s=r(f,"META",{name:!0,content:!0}),f.forEach(o),k=w(e),c=r(e,"H1",{class:!0});var N=i(c);d=r(N,"A",{id:!0,class:!0,href:!0});var X=i(d);y=r(X,"SPAN",{});var Y=i(y);j(g.$$.fragment,Y),Y.forEach(o),X.forEach(o),R=w(N),I=r(N,"SPAN",{});var Z=i(I);V=K(Z,"Configuration"),Z.forEach(o),N.forEach(o),P=w(e),l=r(e,"H2",{class:!0});var D=i(l);p=r(D,"A",{id:!0,class:!0,href:!0});var ee=i(p);C=r(ee,"SPAN",{});var oe=i(C);j(u.$$.fragment,oe),oe.forEach(o),ee.forEach(o),W=w(D),x=r(D,"SPAN",{});var ne=i(x);B=K(ne,"IncConfig"),ne.forEach(o),D.forEach(o),A=w(e),m=r(e,"DIV",{class:!0});var L=i(m);j(_.$$.fragment,L),J=w(L),h=r(L,"DIV",{class:!0});var F=i(h);j(v.$$.fragment,F),U=w(F),E=r(F,"P",{});var te=i(E);z=K(te,`Instantiate an IncConfig object from a configuration file which can either be hosted on
huggingface.co or from a local directory path.`),te.forEach(o),F.forEach(o),L.forEach(o),this.h()},h(){a(s,"name","hf:doc:metadata"),a(s,"content",JSON.stringify(pe)),a(d,"id","configuration"),a(d,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(d,"href","#configuration"),a(c,"class","relative group"),a(p,"id","optimum.intel.IncConfig"),a(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(p,"href","#optimum.intel.IncConfig"),a(l,"class","relative group"),a(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,f){n(document.head,s),$(e,k,f),$(e,c,f),n(c,d),n(d,y),q(g,y,null),n(c,R),n(c,I),n(I,V),$(e,P,f),$(e,l,f),n(l,p),n(p,C),q(u,C,null),n(l,W),n(l,x),n(x,B),$(e,A,f),$(e,m,f),q(_,m,null),n(m,J),n(m,h),q(v,h,null),n(h,U),n(h,E),n(E,z),S=!0},p:me,i(e){S||(M(g.$$.fragment,e),M(u.$$.fragment,e),M(_.$$.fragment,e),M(v.$$.fragment,e),S=!0)},o(e){T(g.$$.fragment,e),T(u.$$.fragment,e),T(_.$$.fragment,e),T(v.$$.fragment,e),S=!1},d(e){o(s),e&&o(k),e&&o(c),O(g),e&&o(P),e&&o(l),O(u),e&&o(A),e&&o(m),O(_),O(v)}}}const pe={local:"configuration",sections:[{local:"optimum.intel.IncConfig",title:"IncConfig"}],title:"Configuration"};function he(Q){return fe(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ve extends ie{constructor(s){super();se(this,s,he,de,ce,{})}}export{ve as default,pe as metadata};
