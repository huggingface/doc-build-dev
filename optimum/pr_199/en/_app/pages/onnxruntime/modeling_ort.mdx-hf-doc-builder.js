import{S as Bi,i as Gi,s as Vi,F as Ji,e as a,w as M,k as h,c as i,a as l,x as q,d as o,m as f,b as v,g as k,G as e,y as O,P as Zi,H as Ki,I as Yi,J as el,q as x,o as b,B as y,v as Ui,Z as tl,_ as ol,t as p,M as nl,h as m,L as U}from"../../chunks/vendor-hf-doc-builder.js";import{T as Yt}from"../../chunks/Tip-hf-doc-builder.js";import{D as B}from"../../chunks/Docstring-hf-doc-builder.js";import{C}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ee}from"../../chunks/IconCopyLink-hf-doc-builder.js";const{window:sl}=tl;function rl(j){let s,_,c,u,g,n,r,T,d;u=new ee({props:{classNames:"text-smd"}});const w=j[4].default,E=Ji(w,j,j[3],null);return{c(){s=a("div"),_=a("a"),c=a("span"),M(u.$$.fragment),n=h(),E&&E.c(),this.h()},l(z){s=i(z,"DIV",{class:!0});var R=l(s);_=i(R,"A",{id:!0,class:!0,href:!0});var Dt=l(_);c=i(Dt,"SPAN",{});var Ht=l(c);q(u.$$.fragment,Ht),Ht.forEach(o),Dt.forEach(o),n=f(R),E&&E.l(R),R.forEach(o),this.h()},h(){v(_,"id",j[0]),v(_,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(_,"href",g=`#${j[0]}`),v(s,"class","relative group rounded-md")},m(z,R){k(z,s,R),e(s,_),e(_,c),O(u,c,null),e(s,n),E&&E.m(s,null),j[5](s),r=!0,T||(d=Zi(sl,"hashchange",j[2]),T=!0)},p(z,[R]){(!r||R&1)&&v(_,"id",z[0]),(!r||R&1&&g!==(g=`#${z[0]}`))&&v(_,"href",g),E&&E.p&&(!r||R&8)&&Ki(E,w,z,z[3],r?el(w,z[3],R,null):Yi(z[3]),null)},i(z){r||(x(u.$$.fragment,z),x(E,z),r=!0)},o(z){b(u.$$.fragment,z),b(E,z),r=!1},d(z){z&&o(s),y(u),E&&E.d(z),j[5](null),T=!1,d()}}}const Wi="bg-yellow-50 dark:bg-[#494a3d]";function al(j,s,_){let{$$slots:c={},$$scope:u}=s,{anchor:g}=s,n;function r(){const{hash:d}=window.location,w=d.substring(1);n&&n.classList.remove(...Wi.split(" ")),w===g&&n.classList.add(...Wi.split(" "))}Ui(()=>{r()});function T(d){ol[d?"unshift":"push"](()=>{n=d,_(1,n)})}return j.$$set=d=>{"anchor"in d&&_(0,g=d.anchor),"$$scope"in d&&_(3,u=d.$$scope)},[g,n,r,u,c,T]}class V extends Bi{constructor(s){super();Gi(this,s,al,rl,Vi,{anchor:0})}}function il(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function ll(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForFeatureExtraction
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=p("Example of feature extraction:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of feature extraction:"),r.forEach(o),c=f(n),q(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),O(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function pl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForFeatureExtraction

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipeline"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipeline"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),q(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),O(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function ml(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function dl(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForQuestionAnswering
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
inputs = tokenizer(question, text, return_tensors="pt")
start_positions = torch.tensor([1])
end_positions = torch.tensor([3])

outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
start_scores = outputs.start_logits
end_scores = outputs.end_logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_positions = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>end_positions = torch.tensor([<span class="hljs-number">3</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_scores = outputs.start_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>end_scores = outputs.end_logits`}}),{c(){s=a("p"),_=p("Example of question answering:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of question answering:"),r.forEach(o),c=f(n),q(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),O(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function cl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForQuestionAnswering

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")
onnx_qa = pipeline("question-answering", model=model, tokenizer=tokenizer)

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
pred = onnx_qa(question, text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_qa = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_qa(question, text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipeline"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipeline"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),q(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),O(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function ul(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function hl(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=p("Example of single-label classification:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of single-label classification:"),r.forEach(o),c=f(n),q(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),O(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function fl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

text = "Hello, my dog is cute"
pred = onnx_classifier(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_classifier(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),q(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),O(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function gl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-mnli")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-mnli")
onnx_z0 = pipeline("zero-shot-classification", model=model, tokenizer=tokenizer)

sequence_to_classify = "Who are you voting for in 2020?"
candidate_labels = ["Europe", "public health", "politics", "elections"]
pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_z0 = pipeline(<span class="hljs-string">&quot;zero-shot-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_to_classify = <span class="hljs-string">&quot;Who are you voting for in 2020?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>candidate_labels = [<span class="hljs-string">&quot;Europe&quot;</span>, <span class="hljs-string">&quot;public health&quot;</span>, <span class="hljs-string">&quot;politics&quot;</span>, <span class="hljs-string">&quot;elections&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=<span class="hljs-literal">True</span>)`}}),{c(){s=a("p"),_=p("Example using zero-shot-classification "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using zero-shot-classification "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),q(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),O(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function _l(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function $l(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForTokenClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=p("Example of token classification:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of token classification:"),r.forEach(o),c=f(n),q(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),O(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function kl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForTokenClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")
onnx_ner = pipeline("token-classification", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_ner(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_ner = pipeline(<span class="hljs-string">&quot;token-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_ner(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),q(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),O(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function wl(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function vl(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

gen_tokens = model.generate(**inputs,do_sample=True,temperature=0.9, min_length=20,max_length=20)
tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs,do_sample=<span class="hljs-literal">True</span>,temperature=<span class="hljs-number">0.9</span>, min_length=<span class="hljs-number">20</span>,max_length=<span class="hljs-number">20</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(gen_tokens)`}}),{c(){s=a("p"),_=p("Example of text generation:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of text generation:"),r.forEach(o),c=f(n),q(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),O(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function Tl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")
onnx_gen = pipeline("text-generation", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
gen = onnx_gen(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_gen = pipeline(<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>gen = onnx_gen(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),q(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),O(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function xl(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function bl(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("optimum/t5-small")
model = ORTModelForSeq2SeqLM.from_pretrained("optimum/t5-small")

inputs = tokenizer("My name is Eustache and I like to", return_tensors="pt")

gen_tokens = model.generate(**inputs)
outputs = tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Eustache and I like to&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = tokenizer.batch_decode(gen_tokens)`}}),{c(){s=a("p"),_=p("Example of text generation:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of text generation:"),r.forEach(o),c=f(n),q(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),O(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function Ml(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("optimum/t5-small")
model = ORTModelForSeq2SeqLM.from_pretrained("optimum/t5-small")
onnx_summarization = pipeline("translation_en_to_de", model=model, tokenizer=tokenizer)

text = "My name is Eustache."
pred = onnx_summarization(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_summarization = pipeline(<span class="hljs-string">&quot;translation_en_to_de&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Eustache.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_summarization(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipeline"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipeline"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),q(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),O(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function ql(j){let s,_,c,u,g,n,r,T,d,w,E,z,R,Dt,Ht,gn,ce,ye,eo,st,Yn,to,es,_n,I,ts,oo,os,ns,no,ss,rs,so,as,is,ro,ls,ps,$n,rt,kn,te,ms,ao,ds,cs,io,us,hs,wn,at,vn,ue,je,lo,it,fs,po,gs,Tn,J,_s,Qt,$s,ks,lt,ws,vs,mo,Ts,xs,xn,pt,bn,he,Ee,co,mt,bs,uo,Ms,Mn,K,dt,qs,ct,Os,ho,ys,js,Es,ze,ut,zs,Xt,Rs,fo,Fs,qn,fe,Re,go,ht,Cs,_o,As,On,A,ft,Ss,$o,Ps,Ns,gt,Ls,ko,Is,Ds,Hs,wo,Qs,Xs,D,_t,Ws,ge,Bs,vo,Gs,Vs,To,Us,Js,Zs,Fe,Ks,Ce,Ys,Ae,yn,_e,Se,xo,$t,er,bo,tr,jn,S,kt,or,Mo,nr,sr,wt,rr,qo,ar,ir,lr,Oo,pr,mr,H,vt,dr,$e,cr,yo,ur,hr,jo,fr,gr,_r,Pe,$r,Ne,kr,Le,En,ke,Ie,Eo,Tt,wr,zo,vr,zn,P,xt,Tr,Ro,xr,br,bt,Mr,Fo,qr,Or,yr,Co,jr,Er,F,Mt,zr,we,Rr,Ao,Fr,Cr,So,Ar,Sr,Pr,De,Nr,He,Lr,Qe,Ir,Xe,Rn,ve,We,Po,qt,Dr,No,Hr,Fn,N,Ot,Qr,Lo,Xr,Wr,yt,Br,Io,Gr,Vr,Ur,Do,Jr,Zr,Q,jt,Kr,Te,Yr,Ho,ea,ta,Qo,oa,na,sa,Be,ra,Ge,aa,Ve,Cn,xe,Ue,Xo,Et,ia,Wo,la,An,L,zt,pa,Bo,ma,da,Rt,ca,Go,ua,ha,fa,Vo,ga,_a,X,Ft,$a,be,ka,Uo,wa,va,Jo,Ta,xa,ba,Je,Ma,Ze,qa,Ke,Sn,Me,Ye,Zo,Ct,Oa,Ko,ya,Pn,Y,At,ja,Yo,Ea,za,W,St,Ra,qe,Fa,en,Ca,Aa,tn,Sa,Pa,Na,et,La,tt,Ia,ot,Nn;return n=new ee({}),st=new ee({}),rt=new C({props:{code:`from transformers import AutoTokenizer, pipeline
-from transformers import AutoModelForQuestionAnswering
+from optimum.onnxruntime import ORTModelForQuestionAnswering

-model = AutoModelForQuestionAnswering.from_pretrained("deepset/roberta-base-squad2") # pytorch checkpoint
+model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2") # onnx checkpoint
tokenizer = AutoTokenizer.from_pretrained("deepset/roberta-base-squad2")

onnx_qa = pipeline("question-answering",model=model,tokenizer=tokenizer)

question = "What's my name?"
context = "My name is Philipp and I live in Nuremberg."
pred = onnx_qa(question, context)`,highlighted:`from transformers import AutoTokenizer, pipeline
<span class="hljs-deletion">-from transformers import AutoModelForQuestionAnswering</span>
<span class="hljs-addition">+from optimum.onnxruntime import ORTModelForQuestionAnswering</span>

<span class="hljs-deletion">-model = AutoModelForQuestionAnswering.from_pretrained(&quot;deepset/roberta-base-squad2&quot;) # pytorch checkpoint</span>
<span class="hljs-addition">+model = ORTModelForQuestionAnswering.from_pretrained(&quot;optimum/roberta-base-squad2&quot;) # onnx checkpoint</span>
tokenizer = AutoTokenizer.from_pretrained(&quot;deepset/roberta-base-squad2&quot;)

onnx_qa = pipeline(&quot;question-answering&quot;,model=model,tokenizer=tokenizer)

question = &quot;What&#x27;s my name?&quot;
context = &quot;My name is Philipp and I live in Nuremberg.&quot;
pred = onnx_qa(question, context)`}}),at=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english", from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

result = onnx_classifier("This is a great model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># Load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>, from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># Create pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>result = onnx_classifier(<span class="hljs-string">&quot;This is a great model&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998838901519775</span>}]`}}),it=new ee({}),pt=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english", from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

model.save_pretrained("a_local_path_for_convert_onnx_model")
tokenizer.save_pretrained("a_local_path_for_convert_onnx_model")

model.push_to_hub("a_local_path_for_convert_onnx_model", repository_id="my-onnx-repo", use_auth_token=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># Load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>, from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># Save converted model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)

<span class="hljs-comment"># Push model onnx model to HF Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.push_to_hub(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>, repository_id=<span class="hljs-string">&quot;my-onnx-repo&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>)`}}),mt=new ee({}),dt=new B({props:{name:"class optimum.onnxruntime.ORTModel",anchor:"optimum.onnxruntime.ORTModel",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L79"}}),ut=new B({props:{name:"load_model",anchor:"optimum.onnxruntime.ORTModel.load_model",parameters:[{name:"path",val:": typing.Union[str, pathlib.Path]"},{name:"provider",val:" = None"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModel.load_model.path",description:`<strong>path</strong> (<code>str</code> or <code>Path</code>) &#x2014;
Directory from which to load`,name:"path"},{anchor:"optimum.onnxruntime.ORTModel.load_model.provider(str,",description:`<strong>provider(<code>str</code>,</strong> <em>optional</em>) &#x2014;
Onnxruntime provider to use for loading the model, defaults to <code>CUDAExecutionProvider</code> if GPU is
available else <code>CPUExecutionProvider</code>`,name:"provider(str,"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L97"}}),ht=new ee({}),ft=new B({props:{name:"class optimum.onnxruntime.ORTModelForFeatureExtraction",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L295"}}),_t=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L309"}}),Fe=new Yt({props:{$$slots:{default:[il]},$$scope:{ctx:j}}}),Ce=new V({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example",$$slots:{default:[ll]},$$scope:{ctx:j}}}),Ae=new V({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example-2",$$slots:{default:[pl]},$$scope:{ctx:j}}}),$t=new ee({}),kt=new B({props:{name:"class optimum.onnxruntime.ORTModelForQuestionAnswering",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L381"}}),vt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L395"}}),Pe=new Yt({props:{$$slots:{default:[ml]},$$scope:{ctx:j}}}),Ne=new V({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example",$$slots:{default:[dl]},$$scope:{ctx:j}}}),Le=new V({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example-2",$$slots:{default:[cl]},$$scope:{ctx:j}}}),Tt=new ee({}),xt=new B({props:{name:"class optimum.onnxruntime.ORTModelForSequenceClassification",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L482"}}),Mt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L497"}}),De=new Yt({props:{$$slots:{default:[ul]},$$scope:{ctx:j}}}),He=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example",$$slots:{default:[hl]},$$scope:{ctx:j}}}),Qe=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-2",$$slots:{default:[fl]},$$scope:{ctx:j}}}),Xe=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-3",$$slots:{default:[gl]},$$scope:{ctx:j}}}),qt=new ee({}),Ot=new B({props:{name:"class optimum.onnxruntime.ORTModelForTokenClassification",anchor:"optimum.onnxruntime.ORTModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L569"}}),jt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L583"}}),Be=new Yt({props:{$$slots:{default:[_l]},$$scope:{ctx:j}}}),Ge=new V({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example",$$slots:{default:[$l]},$$scope:{ctx:j}}}),Ve=new V({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example-2",$$slots:{default:[kl]},$$scope:{ctx:j}}}),Et=new ee({}),zt=new B({props:{name:"class optimum.onnxruntime.ORTModelForCausalLM",anchor:"optimum.onnxruntime.ORTModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L653"}}),Ft=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L685"}}),Je=new Yt({props:{$$slots:{default:[wl]},$$scope:{ctx:j}}}),Ze=new V({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example",$$slots:{default:[vl]},$$scope:{ctx:j}}}),Ke=new V({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example-2",$$slots:{default:[Tl]},$$scope:{ctx:j}}}),Ct=new ee({}),At=new B({props:{name:"class optimum.onnxruntime.ORTModelForSeq2SeqLM",anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_seq2seq.py#L507"}}),St=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"decoder_input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_outputs",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code>) &#x2014;
Indices of input sequence tokens in the vocabulary of shape <code>(batch_size, encoder_sequence_length)</code>.`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.LongTensor</code>) &#x2014;
Mask to avoid performing attention on padding token indices, of shape
<code>(batch_size, encoder_sequence_length)</code>. Mask values selected in <code>[0, 1]</code>.`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.decoder_input_ids",description:`<strong>decoder_input_ids</strong> (<code>torch.LongTensor</code>) &#x2014;
Indices of decoder input sequence tokens in the vocabulary of shape <code>(batch_size, decoder_sequence_length)</code>.`,name:"decoder_input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
The encoder <code>last_hidden_state</code> of shape <code>(batch_size, encoder_sequence_length, hidden_size)</code>.`,name:"encoder_outputs"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor), *optional*)</code> &#x2014;
Contains the precomputed key and value hidden states of the attention blocks used to speed up decoding.
The tuple is of length <code>config.n_layers</code> with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, decoder_sequence_length, embed_size_per_head)</code> and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.`,name:"past_key_values"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_seq2seq.py#L516"}}),et=new Yt({props:{$$slots:{default:[xl]},$$scope:{ctx:j}}}),tt=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.example",$$slots:{default:[bl]},$$scope:{ctx:j}}}),ot=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.example-2",$$slots:{default:[Ml]},$$scope:{ctx:j}}}),{c(){s=a("meta"),_=h(),c=a("h1"),u=a("a"),g=a("span"),M(n.$$.fragment),r=h(),T=a("span"),d=p("Optimum Inference with ONNX Runtime"),w=h(),E=a("p"),z=p(`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),R=a("a"),Dt=p("Hugging Face Hub"),Ht=p(` and create pipelines
to run accelerated inference without rewriting your APIs.`),gn=h(),ce=a("h2"),ye=a("a"),eo=a("span"),M(st.$$.fragment),Yn=h(),to=a("span"),es=p("Switching from Transformers to Optimum Inference"),_n=h(),I=a("p"),ts=p("The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),oo=a("code"),os=p("AutoModelForXxx"),ns=p(" class with the corresponding "),no=a("code"),ss=p("ORTModelForXxx"),rs=p(" class in "),so=a("code"),as=p("optimum"),is=p(". For example, this is how you can use a question answering model in "),ro=a("code"),ls=p("optimum"),ps=p(":"),$n=h(),M(rt.$$.fragment),kn=h(),te=a("p"),ms=p("Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),ao=a("code"),ds=p("from_transformers=True"),cs=p(" to the "),io=a("code"),us=p("from_pretrained()"),hs=p(" method, and your model will be loaded and converted to ONNX on-the-fly:"),wn=h(),M(at.$$.fragment),vn=h(),ue=a("h3"),je=a("a"),lo=a("span"),M(it.$$.fragment),fs=h(),po=a("span"),gs=p("Working with the Hugging Face Model Hub"),Tn=h(),J=a("p"),_s=p("The Optimum model classes like "),Qt=a("a"),$s=p("ORTModelForSequenceClassification"),ks=p(" are integrated with the "),lt=a("a"),ws=p("Hugging Face Model Hub"),vs=p(`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),mo=a("code"),Ts=p("push_to_hub()"),xs=p(` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),xn=h(),M(pt.$$.fragment),bn=h(),he=a("h2"),Ee=a("a"),co=a("span"),M(mt.$$.fragment),bs=h(),uo=a("span"),Ms=p("ORTModel"),Mn=h(),K=a("div"),M(dt.$$.fragment),qs=h(),ct=a("p"),Os=p(`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),ho=a("code"),ys=p("transformers.onnx"),js=p(` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Es=h(),ze=a("div"),M(ut.$$.fragment),zs=h(),Xt=a("p"),Rs=p("loads ONNX Inference session with Provider. Default Provider is if CUDAExecutionProvider GPU available else "),fo=a("code"),Fs=p("CPUExecutionProvider"),qn=h(),fe=a("h2"),Re=a("a"),go=a("span"),M(ht.$$.fragment),Cs=h(),_o=a("span"),As=p("ORTModelForFeatureExtraction"),On=h(),A=a("div"),M(ft.$$.fragment),Ss=h(),$o=a("p"),Ps=p("Onnx Model with a MaskedLMOutput for feature-extraction tasks."),Ns=h(),gt=a("p"),Ls=p("This model inherits from [~"),ko=a("code"),Is=p("onnxruntime.modeling_ort.ORTModel"),Ds=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Hs=h(),wo=a("p"),Qs=p("Feature Extraction model for ONNX."),Xs=h(),D=a("div"),M(_t.$$.fragment),Ws=h(),ge=a("p"),Bs=p("The "),vo=a("code"),Gs=p("ORTModelForFeatureExtraction"),Vs=p(" forward method, overrides the "),To=a("code"),Us=p("__call__"),Js=p(" special method."),Zs=h(),M(Fe.$$.fragment),Ks=h(),M(Ce.$$.fragment),Ys=h(),M(Ae.$$.fragment),yn=h(),_e=a("h2"),Se=a("a"),xo=a("span"),M($t.$$.fragment),er=h(),bo=a("span"),tr=p("ORTModelForQuestionAnswering"),jn=h(),S=a("div"),M(kt.$$.fragment),or=h(),Mo=a("p"),nr=p("Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),sr=h(),wt=a("p"),rr=p("This model inherits from [~"),qo=a("code"),ar=p("onnxruntime.modeling_ort.ORTModel"),ir=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),lr=h(),Oo=a("p"),pr=p("Question Answering model for ONNX."),mr=h(),H=a("div"),M(vt.$$.fragment),dr=h(),$e=a("p"),cr=p("The "),yo=a("code"),ur=p("ORTModelForQuestionAnswering"),hr=p(" forward method, overrides the "),jo=a("code"),fr=p("__call__"),gr=p(" special method."),_r=h(),M(Pe.$$.fragment),$r=h(),M(Ne.$$.fragment),kr=h(),M(Le.$$.fragment),En=h(),ke=a("h2"),Ie=a("a"),Eo=a("span"),M(Tt.$$.fragment),wr=h(),zo=a("span"),vr=p("ORTModelForSequenceClassification"),zn=h(),P=a("div"),M(xt.$$.fragment),Tr=h(),Ro=a("p"),xr=p(`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),br=h(),bt=a("p"),Mr=p("This model inherits from [~"),Fo=a("code"),qr=p("onnxruntime.modeling_ort.ORTModel"),Or=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),yr=h(),Co=a("p"),jr=p("Sequence Classification model for ONNX."),Er=h(),F=a("div"),M(Mt.$$.fragment),zr=h(),we=a("p"),Rr=p("The "),Ao=a("code"),Fr=p("ORTModelForSequenceClassification"),Cr=p(" forward method, overrides the "),So=a("code"),Ar=p("__call__"),Sr=p(" special method."),Pr=h(),M(De.$$.fragment),Nr=h(),M(He.$$.fragment),Lr=h(),M(Qe.$$.fragment),Ir=h(),M(Xe.$$.fragment),Rn=h(),ve=a("h2"),We=a("a"),Po=a("span"),M(qt.$$.fragment),Dr=h(),No=a("span"),Hr=p("ORTModelForTokenClassification"),Fn=h(),N=a("div"),M(Ot.$$.fragment),Qr=h(),Lo=a("p"),Xr=p(`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Wr=h(),yt=a("p"),Br=p("This model inherits from [~"),Io=a("code"),Gr=p("onnxruntime.modeling_ort.ORTModel"),Vr=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Ur=h(),Do=a("p"),Jr=p("Token Classification model for ONNX."),Zr=h(),Q=a("div"),M(jt.$$.fragment),Kr=h(),Te=a("p"),Yr=p("The "),Ho=a("code"),ea=p("ORTModelForTokenClassification"),ta=p(" forward method, overrides the "),Qo=a("code"),oa=p("__call__"),na=p(" special method."),sa=h(),M(Be.$$.fragment),ra=h(),M(Ge.$$.fragment),aa=h(),M(Ve.$$.fragment),Cn=h(),xe=a("h2"),Ue=a("a"),Xo=a("span"),M(Et.$$.fragment),ia=h(),Wo=a("span"),la=p("ORTModelForCausalLM"),An=h(),L=a("div"),M(zt.$$.fragment),pa=h(),Bo=a("p"),ma=p(`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),da=h(),Rt=a("p"),ca=p("This model inherits from [~"),Go=a("code"),ua=p("onnxruntime.modeling_ort.ORTModel"),ha=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),fa=h(),Vo=a("p"),ga=p("Causal LM model for ONNX."),_a=h(),X=a("div"),M(Ft.$$.fragment),$a=h(),be=a("p"),ka=p("The "),Uo=a("code"),wa=p("ORTModelForCausalLM"),va=p(" forward method, overrides the "),Jo=a("code"),Ta=p("__call__"),xa=p(" special method."),ba=h(),M(Je.$$.fragment),Ma=h(),M(Ze.$$.fragment),qa=h(),M(Ke.$$.fragment),Sn=h(),Me=a("h2"),Ye=a("a"),Zo=a("span"),M(Ct.$$.fragment),Oa=h(),Ko=a("span"),ya=p("ORTModelForSeq2SeqLM"),Pn=h(),Y=a("div"),M(At.$$.fragment),ja=h(),Yo=a("p"),Ea=p("Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),za=h(),W=a("div"),M(St.$$.fragment),Ra=h(),qe=a("p"),Fa=p("The "),en=a("code"),Ca=p("ORTModelForSeq2SeqLM"),Aa=p(" forward method, overrides the "),tn=a("code"),Sa=p("__call__"),Pa=p(" special method."),Na=h(),M(et.$$.fragment),La=h(),M(tt.$$.fragment),Ia=h(),M(ot.$$.fragment),this.h()},l(t){const $=nl('[data-svelte="svelte-1phssyn"]',document.head);s=i($,"META",{name:!0,content:!0}),$.forEach(o),_=f(t),c=i(t,"H1",{class:!0});var Pt=l(c);u=i(Pt,"A",{id:!0,class:!0,href:!0});var on=l(u);g=i(on,"SPAN",{});var nn=l(g);q(n.$$.fragment,nn),nn.forEach(o),on.forEach(o),r=f(Pt),T=i(Pt,"SPAN",{});var sn=l(T);d=m(sn,"Optimum Inference with ONNX Runtime"),sn.forEach(o),Pt.forEach(o),w=f(t),E=i(t,"P",{});var Nt=l(E);z=m(Nt,`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),R=i(Nt,"A",{href:!0});var rn=l(R);Dt=m(rn,"Hugging Face Hub"),rn.forEach(o),Ht=m(Nt,` and create pipelines
to run accelerated inference without rewriting your APIs.`),Nt.forEach(o),gn=f(t),ce=i(t,"H2",{class:!0});var Lt=l(ce);ye=i(Lt,"A",{id:!0,class:!0,href:!0});var an=l(ye);eo=i(an,"SPAN",{});var ln=l(eo);q(st.$$.fragment,ln),ln.forEach(o),an.forEach(o),Yn=f(Lt),to=i(Lt,"SPAN",{});var pn=l(to);es=m(pn,"Switching from Transformers to Optimum Inference"),pn.forEach(o),Lt.forEach(o),_n=f(t),I=i(t,"P",{});var G=l(I);ts=m(G,"The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),oo=i(G,"CODE",{});var mn=l(oo);os=m(mn,"AutoModelForXxx"),mn.forEach(o),ns=m(G," class with the corresponding "),no=i(G,"CODE",{});var dn=l(no);ss=m(dn,"ORTModelForXxx"),dn.forEach(o),rs=m(G," class in "),so=i(G,"CODE",{});var cn=l(so);as=m(cn,"optimum"),cn.forEach(o),is=m(G,". For example, this is how you can use a question answering model in "),ro=i(G,"CODE",{});var un=l(ro);ls=m(un,"optimum"),un.forEach(o),ps=m(G,":"),G.forEach(o),$n=f(t),q(rt.$$.fragment,t),kn=f(t),te=i(t,"P",{});var Oe=l(te);ms=m(Oe,"Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),ao=i(Oe,"CODE",{});var hn=l(ao);ds=m(hn,"from_transformers=True"),hn.forEach(o),cs=m(Oe," to the "),io=i(Oe,"CODE",{});var fn=l(io);us=m(fn,"from_pretrained()"),fn.forEach(o),hs=m(Oe," method, and your model will be loaded and converted to ONNX on-the-fly:"),Oe.forEach(o),wn=f(t),q(at.$$.fragment,t),vn=f(t),ue=i(t,"H3",{class:!0});var It=l(ue);je=i(It,"A",{id:!0,class:!0,href:!0});var Ha=l(je);lo=i(Ha,"SPAN",{});var Qa=l(lo);q(it.$$.fragment,Qa),Qa.forEach(o),Ha.forEach(o),fs=f(It),po=i(It,"SPAN",{});var Xa=l(po);gs=m(Xa,"Working with the Hugging Face Model Hub"),Xa.forEach(o),It.forEach(o),Tn=f(t),J=i(t,"P",{});var nt=l(J);_s=m(nt,"The Optimum model classes like "),Qt=i(nt,"A",{href:!0});var Wa=l(Qt);$s=m(Wa,"ORTModelForSequenceClassification"),Wa.forEach(o),ks=m(nt," are integrated with the "),lt=i(nt,"A",{href:!0,rel:!0});var Ba=l(lt);ws=m(Ba,"Hugging Face Model Hub"),Ba.forEach(o),vs=m(nt,`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),mo=i(nt,"CODE",{});var Ga=l(mo);Ts=m(Ga,"push_to_hub()"),Ga.forEach(o),xs=m(nt,` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),nt.forEach(o),xn=f(t),q(pt.$$.fragment,t),bn=f(t),he=i(t,"H2",{class:!0});var Ln=l(he);Ee=i(Ln,"A",{id:!0,class:!0,href:!0});var Va=l(Ee);co=i(Va,"SPAN",{});var Ua=l(co);q(mt.$$.fragment,Ua),Ua.forEach(o),Va.forEach(o),bs=f(Ln),uo=i(Ln,"SPAN",{});var Ja=l(uo);Ms=m(Ja,"ORTModel"),Ja.forEach(o),Ln.forEach(o),Mn=f(t),K=i(t,"DIV",{class:!0});var Wt=l(K);q(dt.$$.fragment,Wt),qs=f(Wt),ct=i(Wt,"P",{});var In=l(ct);Os=m(In,`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),ho=i(In,"CODE",{});var Za=l(ho);ys=m(Za,"transformers.onnx"),Za.forEach(o),js=m(In,` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),In.forEach(o),Es=f(Wt),ze=i(Wt,"DIV",{class:!0});var Dn=l(ze);q(ut.$$.fragment,Dn),zs=f(Dn),Xt=i(Dn,"P",{});var Da=l(Xt);Rs=m(Da,"loads ONNX Inference session with Provider. Default Provider is if CUDAExecutionProvider GPU available else "),fo=i(Da,"CODE",{});var Ka=l(fo);Fs=m(Ka,"CPUExecutionProvider"),Ka.forEach(o),Da.forEach(o),Dn.forEach(o),Wt.forEach(o),qn=f(t),fe=i(t,"H2",{class:!0});var Hn=l(fe);Re=i(Hn,"A",{id:!0,class:!0,href:!0});var Ya=l(Re);go=i(Ya,"SPAN",{});var ei=l(go);q(ht.$$.fragment,ei),ei.forEach(o),Ya.forEach(o),Cs=f(Hn),_o=i(Hn,"SPAN",{});var ti=l(_o);As=m(ti,"ORTModelForFeatureExtraction"),ti.forEach(o),Hn.forEach(o),On=f(t),A=i(t,"DIV",{class:!0});var oe=l(A);q(ft.$$.fragment,oe),Ss=f(oe),$o=i(oe,"P",{});var oi=l($o);Ps=m(oi,"Onnx Model with a MaskedLMOutput for feature-extraction tasks."),oi.forEach(o),Ns=f(oe),gt=i(oe,"P",{});var Qn=l(gt);Ls=m(Qn,"This model inherits from [~"),ko=i(Qn,"CODE",{});var ni=l(ko);Is=m(ni,"onnxruntime.modeling_ort.ORTModel"),ni.forEach(o),Ds=m(Qn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Qn.forEach(o),Hs=f(oe),wo=i(oe,"P",{});var si=l(wo);Qs=m(si,"Feature Extraction model for ONNX."),si.forEach(o),Xs=f(oe),D=i(oe,"DIV",{class:!0});var ne=l(D);q(_t.$$.fragment,ne),Ws=f(ne),ge=i(ne,"P",{});var Bt=l(ge);Bs=m(Bt,"The "),vo=i(Bt,"CODE",{});var ri=l(vo);Gs=m(ri,"ORTModelForFeatureExtraction"),ri.forEach(o),Vs=m(Bt," forward method, overrides the "),To=i(Bt,"CODE",{});var ai=l(To);Us=m(ai,"__call__"),ai.forEach(o),Js=m(Bt," special method."),Bt.forEach(o),Zs=f(ne),q(Fe.$$.fragment,ne),Ks=f(ne),q(Ce.$$.fragment,ne),Ys=f(ne),q(Ae.$$.fragment,ne),ne.forEach(o),oe.forEach(o),yn=f(t),_e=i(t,"H2",{class:!0});var Xn=l(_e);Se=i(Xn,"A",{id:!0,class:!0,href:!0});var ii=l(Se);xo=i(ii,"SPAN",{});var li=l(xo);q($t.$$.fragment,li),li.forEach(o),ii.forEach(o),er=f(Xn),bo=i(Xn,"SPAN",{});var pi=l(bo);tr=m(pi,"ORTModelForQuestionAnswering"),pi.forEach(o),Xn.forEach(o),jn=f(t),S=i(t,"DIV",{class:!0});var se=l(S);q(kt.$$.fragment,se),or=f(se),Mo=i(se,"P",{});var mi=l(Mo);nr=m(mi,"Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),mi.forEach(o),sr=f(se),wt=i(se,"P",{});var Wn=l(wt);rr=m(Wn,"This model inherits from [~"),qo=i(Wn,"CODE",{});var di=l(qo);ar=m(di,"onnxruntime.modeling_ort.ORTModel"),di.forEach(o),ir=m(Wn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Wn.forEach(o),lr=f(se),Oo=i(se,"P",{});var ci=l(Oo);pr=m(ci,"Question Answering model for ONNX."),ci.forEach(o),mr=f(se),H=i(se,"DIV",{class:!0});var re=l(H);q(vt.$$.fragment,re),dr=f(re),$e=i(re,"P",{});var Gt=l($e);cr=m(Gt,"The "),yo=i(Gt,"CODE",{});var ui=l(yo);ur=m(ui,"ORTModelForQuestionAnswering"),ui.forEach(o),hr=m(Gt," forward method, overrides the "),jo=i(Gt,"CODE",{});var hi=l(jo);fr=m(hi,"__call__"),hi.forEach(o),gr=m(Gt," special method."),Gt.forEach(o),_r=f(re),q(Pe.$$.fragment,re),$r=f(re),q(Ne.$$.fragment,re),kr=f(re),q(Le.$$.fragment,re),re.forEach(o),se.forEach(o),En=f(t),ke=i(t,"H2",{class:!0});var Bn=l(ke);Ie=i(Bn,"A",{id:!0,class:!0,href:!0});var fi=l(Ie);Eo=i(fi,"SPAN",{});var gi=l(Eo);q(Tt.$$.fragment,gi),gi.forEach(o),fi.forEach(o),wr=f(Bn),zo=i(Bn,"SPAN",{});var _i=l(zo);vr=m(_i,"ORTModelForSequenceClassification"),_i.forEach(o),Bn.forEach(o),zn=f(t),P=i(t,"DIV",{class:!0});var ae=l(P);q(xt.$$.fragment,ae),Tr=f(ae),Ro=i(ae,"P",{});var $i=l(Ro);xr=m($i,`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),$i.forEach(o),br=f(ae),bt=i(ae,"P",{});var Gn=l(bt);Mr=m(Gn,"This model inherits from [~"),Fo=i(Gn,"CODE",{});var ki=l(Fo);qr=m(ki,"onnxruntime.modeling_ort.ORTModel"),ki.forEach(o),Or=m(Gn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Gn.forEach(o),yr=f(ae),Co=i(ae,"P",{});var wi=l(Co);jr=m(wi,"Sequence Classification model for ONNX."),wi.forEach(o),Er=f(ae),F=i(ae,"DIV",{class:!0});var Z=l(F);q(Mt.$$.fragment,Z),zr=f(Z),we=i(Z,"P",{});var Vt=l(we);Rr=m(Vt,"The "),Ao=i(Vt,"CODE",{});var vi=l(Ao);Fr=m(vi,"ORTModelForSequenceClassification"),vi.forEach(o),Cr=m(Vt," forward method, overrides the "),So=i(Vt,"CODE",{});var Ti=l(So);Ar=m(Ti,"__call__"),Ti.forEach(o),Sr=m(Vt," special method."),Vt.forEach(o),Pr=f(Z),q(De.$$.fragment,Z),Nr=f(Z),q(He.$$.fragment,Z),Lr=f(Z),q(Qe.$$.fragment,Z),Ir=f(Z),q(Xe.$$.fragment,Z),Z.forEach(o),ae.forEach(o),Rn=f(t),ve=i(t,"H2",{class:!0});var Vn=l(ve);We=i(Vn,"A",{id:!0,class:!0,href:!0});var xi=l(We);Po=i(xi,"SPAN",{});var bi=l(Po);q(qt.$$.fragment,bi),bi.forEach(o),xi.forEach(o),Dr=f(Vn),No=i(Vn,"SPAN",{});var Mi=l(No);Hr=m(Mi,"ORTModelForTokenClassification"),Mi.forEach(o),Vn.forEach(o),Fn=f(t),N=i(t,"DIV",{class:!0});var ie=l(N);q(Ot.$$.fragment,ie),Qr=f(ie),Lo=i(ie,"P",{});var qi=l(Lo);Xr=m(qi,`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),qi.forEach(o),Wr=f(ie),yt=i(ie,"P",{});var Un=l(yt);Br=m(Un,"This model inherits from [~"),Io=i(Un,"CODE",{});var Oi=l(Io);Gr=m(Oi,"onnxruntime.modeling_ort.ORTModel"),Oi.forEach(o),Vr=m(Un,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Un.forEach(o),Ur=f(ie),Do=i(ie,"P",{});var yi=l(Do);Jr=m(yi,"Token Classification model for ONNX."),yi.forEach(o),Zr=f(ie),Q=i(ie,"DIV",{class:!0});var le=l(Q);q(jt.$$.fragment,le),Kr=f(le),Te=i(le,"P",{});var Ut=l(Te);Yr=m(Ut,"The "),Ho=i(Ut,"CODE",{});var ji=l(Ho);ea=m(ji,"ORTModelForTokenClassification"),ji.forEach(o),ta=m(Ut," forward method, overrides the "),Qo=i(Ut,"CODE",{});var Ei=l(Qo);oa=m(Ei,"__call__"),Ei.forEach(o),na=m(Ut," special method."),Ut.forEach(o),sa=f(le),q(Be.$$.fragment,le),ra=f(le),q(Ge.$$.fragment,le),aa=f(le),q(Ve.$$.fragment,le),le.forEach(o),ie.forEach(o),Cn=f(t),xe=i(t,"H2",{class:!0});var Jn=l(xe);Ue=i(Jn,"A",{id:!0,class:!0,href:!0});var zi=l(Ue);Xo=i(zi,"SPAN",{});var Ri=l(Xo);q(Et.$$.fragment,Ri),Ri.forEach(o),zi.forEach(o),ia=f(Jn),Wo=i(Jn,"SPAN",{});var Fi=l(Wo);la=m(Fi,"ORTModelForCausalLM"),Fi.forEach(o),Jn.forEach(o),An=f(t),L=i(t,"DIV",{class:!0});var pe=l(L);q(zt.$$.fragment,pe),pa=f(pe),Bo=i(pe,"P",{});var Ci=l(Bo);ma=m(Ci,`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),Ci.forEach(o),da=f(pe),Rt=i(pe,"P",{});var Zn=l(Rt);ca=m(Zn,"This model inherits from [~"),Go=i(Zn,"CODE",{});var Ai=l(Go);ua=m(Ai,"onnxruntime.modeling_ort.ORTModel"),Ai.forEach(o),ha=m(Zn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Zn.forEach(o),fa=f(pe),Vo=i(pe,"P",{});var Si=l(Vo);ga=m(Si,"Causal LM model for ONNX."),Si.forEach(o),_a=f(pe),X=i(pe,"DIV",{class:!0});var me=l(X);q(Ft.$$.fragment,me),$a=f(me),be=i(me,"P",{});var Jt=l(be);ka=m(Jt,"The "),Uo=i(Jt,"CODE",{});var Pi=l(Uo);wa=m(Pi,"ORTModelForCausalLM"),Pi.forEach(o),va=m(Jt," forward method, overrides the "),Jo=i(Jt,"CODE",{});var Ni=l(Jo);Ta=m(Ni,"__call__"),Ni.forEach(o),xa=m(Jt," special method."),Jt.forEach(o),ba=f(me),q(Je.$$.fragment,me),Ma=f(me),q(Ze.$$.fragment,me),qa=f(me),q(Ke.$$.fragment,me),me.forEach(o),pe.forEach(o),Sn=f(t),Me=i(t,"H2",{class:!0});var Kn=l(Me);Ye=i(Kn,"A",{id:!0,class:!0,href:!0});var Li=l(Ye);Zo=i(Li,"SPAN",{});var Ii=l(Zo);q(Ct.$$.fragment,Ii),Ii.forEach(o),Li.forEach(o),Oa=f(Kn),Ko=i(Kn,"SPAN",{});var Di=l(Ko);ya=m(Di,"ORTModelForSeq2SeqLM"),Di.forEach(o),Kn.forEach(o),Pn=f(t),Y=i(t,"DIV",{class:!0});var Zt=l(Y);q(At.$$.fragment,Zt),ja=f(Zt),Yo=i(Zt,"P",{});var Hi=l(Yo);Ea=m(Hi,"Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),Hi.forEach(o),za=f(Zt),W=i(Zt,"DIV",{class:!0});var de=l(W);q(St.$$.fragment,de),Ra=f(de),qe=i(de,"P",{});var Kt=l(qe);Fa=m(Kt,"The "),en=i(Kt,"CODE",{});var Qi=l(en);Ca=m(Qi,"ORTModelForSeq2SeqLM"),Qi.forEach(o),Aa=m(Kt," forward method, overrides the "),tn=i(Kt,"CODE",{});var Xi=l(tn);Sa=m(Xi,"__call__"),Xi.forEach(o),Pa=m(Kt," special method."),Kt.forEach(o),Na=f(de),q(et.$$.fragment,de),La=f(de),q(tt.$$.fragment,de),Ia=f(de),q(ot.$$.fragment,de),de.forEach(o),Zt.forEach(o),this.h()},h(){v(s,"name","hf:doc:metadata"),v(s,"content",JSON.stringify(Ol)),v(u,"id","optimum-inference-with-onnx-runtime"),v(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(u,"href","#optimum-inference-with-onnx-runtime"),v(c,"class","relative group"),v(R,"href","hf.co/models"),v(ye,"id","switching-from-transformers-to-optimum-inference"),v(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ye,"href","#switching-from-transformers-to-optimum-inference"),v(ce,"class","relative group"),v(je,"id","working-with-the-hugging-face-model-hub"),v(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(je,"href","#working-with-the-hugging-face-model-hub"),v(ue,"class","relative group"),v(Qt,"href","/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModelForSequenceClassification"),v(lt,"href","https://hf.co/models"),v(lt,"rel","nofollow"),v(Ee,"id","optimum.onnxruntime.ORTModel"),v(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ee,"href","#optimum.onnxruntime.ORTModel"),v(he,"class","relative group"),v(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Re,"id","optimum.onnxruntime.ORTModelForFeatureExtraction"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#optimum.onnxruntime.ORTModelForFeatureExtraction"),v(fe,"class","relative group"),v(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Se,"id","optimum.onnxruntime.ORTModelForQuestionAnswering"),v(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Se,"href","#optimum.onnxruntime.ORTModelForQuestionAnswering"),v(_e,"class","relative group"),v(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ie,"id","optimum.onnxruntime.ORTModelForSequenceClassification"),v(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ie,"href","#optimum.onnxruntime.ORTModelForSequenceClassification"),v(ke,"class","relative group"),v(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(We,"id","optimum.onnxruntime.ORTModelForTokenClassification"),v(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(We,"href","#optimum.onnxruntime.ORTModelForTokenClassification"),v(ve,"class","relative group"),v(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ue,"id","optimum.onnxruntime.ORTModelForCausalLM"),v(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ue,"href","#optimum.onnxruntime.ORTModelForCausalLM"),v(xe,"class","relative group"),v(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ye,"id","optimum.onnxruntime.ORTModelForSeq2SeqLM"),v(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ye,"href","#optimum.onnxruntime.ORTModelForSeq2SeqLM"),v(Me,"class","relative group"),v(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,$){e(document.head,s),k(t,_,$),k(t,c,$),e(c,u),e(u,g),O(n,g,null),e(c,r),e(c,T),e(T,d),k(t,w,$),k(t,E,$),e(E,z),e(E,R),e(R,Dt),e(E,Ht),k(t,gn,$),k(t,ce,$),e(ce,ye),e(ye,eo),O(st,eo,null),e(ce,Yn),e(ce,to),e(to,es),k(t,_n,$),k(t,I,$),e(I,ts),e(I,oo),e(oo,os),e(I,ns),e(I,no),e(no,ss),e(I,rs),e(I,so),e(so,as),e(I,is),e(I,ro),e(ro,ls),e(I,ps),k(t,$n,$),O(rt,t,$),k(t,kn,$),k(t,te,$),e(te,ms),e(te,ao),e(ao,ds),e(te,cs),e(te,io),e(io,us),e(te,hs),k(t,wn,$),O(at,t,$),k(t,vn,$),k(t,ue,$),e(ue,je),e(je,lo),O(it,lo,null),e(ue,fs),e(ue,po),e(po,gs),k(t,Tn,$),k(t,J,$),e(J,_s),e(J,Qt),e(Qt,$s),e(J,ks),e(J,lt),e(lt,ws),e(J,vs),e(J,mo),e(mo,Ts),e(J,xs),k(t,xn,$),O(pt,t,$),k(t,bn,$),k(t,he,$),e(he,Ee),e(Ee,co),O(mt,co,null),e(he,bs),e(he,uo),e(uo,Ms),k(t,Mn,$),k(t,K,$),O(dt,K,null),e(K,qs),e(K,ct),e(ct,Os),e(ct,ho),e(ho,ys),e(ct,js),e(K,Es),e(K,ze),O(ut,ze,null),e(ze,zs),e(ze,Xt),e(Xt,Rs),e(Xt,fo),e(fo,Fs),k(t,qn,$),k(t,fe,$),e(fe,Re),e(Re,go),O(ht,go,null),e(fe,Cs),e(fe,_o),e(_o,As),k(t,On,$),k(t,A,$),O(ft,A,null),e(A,Ss),e(A,$o),e($o,Ps),e(A,Ns),e(A,gt),e(gt,Ls),e(gt,ko),e(ko,Is),e(gt,Ds),e(A,Hs),e(A,wo),e(wo,Qs),e(A,Xs),e(A,D),O(_t,D,null),e(D,Ws),e(D,ge),e(ge,Bs),e(ge,vo),e(vo,Gs),e(ge,Vs),e(ge,To),e(To,Us),e(ge,Js),e(D,Zs),O(Fe,D,null),e(D,Ks),O(Ce,D,null),e(D,Ys),O(Ae,D,null),k(t,yn,$),k(t,_e,$),e(_e,Se),e(Se,xo),O($t,xo,null),e(_e,er),e(_e,bo),e(bo,tr),k(t,jn,$),k(t,S,$),O(kt,S,null),e(S,or),e(S,Mo),e(Mo,nr),e(S,sr),e(S,wt),e(wt,rr),e(wt,qo),e(qo,ar),e(wt,ir),e(S,lr),e(S,Oo),e(Oo,pr),e(S,mr),e(S,H),O(vt,H,null),e(H,dr),e(H,$e),e($e,cr),e($e,yo),e(yo,ur),e($e,hr),e($e,jo),e(jo,fr),e($e,gr),e(H,_r),O(Pe,H,null),e(H,$r),O(Ne,H,null),e(H,kr),O(Le,H,null),k(t,En,$),k(t,ke,$),e(ke,Ie),e(Ie,Eo),O(Tt,Eo,null),e(ke,wr),e(ke,zo),e(zo,vr),k(t,zn,$),k(t,P,$),O(xt,P,null),e(P,Tr),e(P,Ro),e(Ro,xr),e(P,br),e(P,bt),e(bt,Mr),e(bt,Fo),e(Fo,qr),e(bt,Or),e(P,yr),e(P,Co),e(Co,jr),e(P,Er),e(P,F),O(Mt,F,null),e(F,zr),e(F,we),e(we,Rr),e(we,Ao),e(Ao,Fr),e(we,Cr),e(we,So),e(So,Ar),e(we,Sr),e(F,Pr),O(De,F,null),e(F,Nr),O(He,F,null),e(F,Lr),O(Qe,F,null),e(F,Ir),O(Xe,F,null),k(t,Rn,$),k(t,ve,$),e(ve,We),e(We,Po),O(qt,Po,null),e(ve,Dr),e(ve,No),e(No,Hr),k(t,Fn,$),k(t,N,$),O(Ot,N,null),e(N,Qr),e(N,Lo),e(Lo,Xr),e(N,Wr),e(N,yt),e(yt,Br),e(yt,Io),e(Io,Gr),e(yt,Vr),e(N,Ur),e(N,Do),e(Do,Jr),e(N,Zr),e(N,Q),O(jt,Q,null),e(Q,Kr),e(Q,Te),e(Te,Yr),e(Te,Ho),e(Ho,ea),e(Te,ta),e(Te,Qo),e(Qo,oa),e(Te,na),e(Q,sa),O(Be,Q,null),e(Q,ra),O(Ge,Q,null),e(Q,aa),O(Ve,Q,null),k(t,Cn,$),k(t,xe,$),e(xe,Ue),e(Ue,Xo),O(Et,Xo,null),e(xe,ia),e(xe,Wo),e(Wo,la),k(t,An,$),k(t,L,$),O(zt,L,null),e(L,pa),e(L,Bo),e(Bo,ma),e(L,da),e(L,Rt),e(Rt,ca),e(Rt,Go),e(Go,ua),e(Rt,ha),e(L,fa),e(L,Vo),e(Vo,ga),e(L,_a),e(L,X),O(Ft,X,null),e(X,$a),e(X,be),e(be,ka),e(be,Uo),e(Uo,wa),e(be,va),e(be,Jo),e(Jo,Ta),e(be,xa),e(X,ba),O(Je,X,null),e(X,Ma),O(Ze,X,null),e(X,qa),O(Ke,X,null),k(t,Sn,$),k(t,Me,$),e(Me,Ye),e(Ye,Zo),O(Ct,Zo,null),e(Me,Oa),e(Me,Ko),e(Ko,ya),k(t,Pn,$),k(t,Y,$),O(At,Y,null),e(Y,ja),e(Y,Yo),e(Yo,Ea),e(Y,za),e(Y,W),O(St,W,null),e(W,Ra),e(W,qe),e(qe,Fa),e(qe,en),e(en,Ca),e(qe,Aa),e(qe,tn),e(tn,Sa),e(qe,Pa),e(W,Na),O(et,W,null),e(W,La),O(tt,W,null),e(W,Ia),O(ot,W,null),Nn=!0},p(t,[$]){const Pt={};$&2&&(Pt.$$scope={dirty:$,ctx:t}),Fe.$set(Pt);const on={};$&2&&(on.$$scope={dirty:$,ctx:t}),Ce.$set(on);const nn={};$&2&&(nn.$$scope={dirty:$,ctx:t}),Ae.$set(nn);const sn={};$&2&&(sn.$$scope={dirty:$,ctx:t}),Pe.$set(sn);const Nt={};$&2&&(Nt.$$scope={dirty:$,ctx:t}),Ne.$set(Nt);const rn={};$&2&&(rn.$$scope={dirty:$,ctx:t}),Le.$set(rn);const Lt={};$&2&&(Lt.$$scope={dirty:$,ctx:t}),De.$set(Lt);const an={};$&2&&(an.$$scope={dirty:$,ctx:t}),He.$set(an);const ln={};$&2&&(ln.$$scope={dirty:$,ctx:t}),Qe.$set(ln);const pn={};$&2&&(pn.$$scope={dirty:$,ctx:t}),Xe.$set(pn);const G={};$&2&&(G.$$scope={dirty:$,ctx:t}),Be.$set(G);const mn={};$&2&&(mn.$$scope={dirty:$,ctx:t}),Ge.$set(mn);const dn={};$&2&&(dn.$$scope={dirty:$,ctx:t}),Ve.$set(dn);const cn={};$&2&&(cn.$$scope={dirty:$,ctx:t}),Je.$set(cn);const un={};$&2&&(un.$$scope={dirty:$,ctx:t}),Ze.$set(un);const Oe={};$&2&&(Oe.$$scope={dirty:$,ctx:t}),Ke.$set(Oe);const hn={};$&2&&(hn.$$scope={dirty:$,ctx:t}),et.$set(hn);const fn={};$&2&&(fn.$$scope={dirty:$,ctx:t}),tt.$set(fn);const It={};$&2&&(It.$$scope={dirty:$,ctx:t}),ot.$set(It)},i(t){Nn||(x(n.$$.fragment,t),x(st.$$.fragment,t),x(rt.$$.fragment,t),x(at.$$.fragment,t),x(it.$$.fragment,t),x(pt.$$.fragment,t),x(mt.$$.fragment,t),x(dt.$$.fragment,t),x(ut.$$.fragment,t),x(ht.$$.fragment,t),x(ft.$$.fragment,t),x(_t.$$.fragment,t),x(Fe.$$.fragment,t),x(Ce.$$.fragment,t),x(Ae.$$.fragment,t),x($t.$$.fragment,t),x(kt.$$.fragment,t),x(vt.$$.fragment,t),x(Pe.$$.fragment,t),x(Ne.$$.fragment,t),x(Le.$$.fragment,t),x(Tt.$$.fragment,t),x(xt.$$.fragment,t),x(Mt.$$.fragment,t),x(De.$$.fragment,t),x(He.$$.fragment,t),x(Qe.$$.fragment,t),x(Xe.$$.fragment,t),x(qt.$$.fragment,t),x(Ot.$$.fragment,t),x(jt.$$.fragment,t),x(Be.$$.fragment,t),x(Ge.$$.fragment,t),x(Ve.$$.fragment,t),x(Et.$$.fragment,t),x(zt.$$.fragment,t),x(Ft.$$.fragment,t),x(Je.$$.fragment,t),x(Ze.$$.fragment,t),x(Ke.$$.fragment,t),x(Ct.$$.fragment,t),x(At.$$.fragment,t),x(St.$$.fragment,t),x(et.$$.fragment,t),x(tt.$$.fragment,t),x(ot.$$.fragment,t),Nn=!0)},o(t){b(n.$$.fragment,t),b(st.$$.fragment,t),b(rt.$$.fragment,t),b(at.$$.fragment,t),b(it.$$.fragment,t),b(pt.$$.fragment,t),b(mt.$$.fragment,t),b(dt.$$.fragment,t),b(ut.$$.fragment,t),b(ht.$$.fragment,t),b(ft.$$.fragment,t),b(_t.$$.fragment,t),b(Fe.$$.fragment,t),b(Ce.$$.fragment,t),b(Ae.$$.fragment,t),b($t.$$.fragment,t),b(kt.$$.fragment,t),b(vt.$$.fragment,t),b(Pe.$$.fragment,t),b(Ne.$$.fragment,t),b(Le.$$.fragment,t),b(Tt.$$.fragment,t),b(xt.$$.fragment,t),b(Mt.$$.fragment,t),b(De.$$.fragment,t),b(He.$$.fragment,t),b(Qe.$$.fragment,t),b(Xe.$$.fragment,t),b(qt.$$.fragment,t),b(Ot.$$.fragment,t),b(jt.$$.fragment,t),b(Be.$$.fragment,t),b(Ge.$$.fragment,t),b(Ve.$$.fragment,t),b(Et.$$.fragment,t),b(zt.$$.fragment,t),b(Ft.$$.fragment,t),b(Je.$$.fragment,t),b(Ze.$$.fragment,t),b(Ke.$$.fragment,t),b(Ct.$$.fragment,t),b(At.$$.fragment,t),b(St.$$.fragment,t),b(et.$$.fragment,t),b(tt.$$.fragment,t),b(ot.$$.fragment,t),Nn=!1},d(t){o(s),t&&o(_),t&&o(c),y(n),t&&o(w),t&&o(E),t&&o(gn),t&&o(ce),y(st),t&&o(_n),t&&o(I),t&&o($n),y(rt,t),t&&o(kn),t&&o(te),t&&o(wn),y(at,t),t&&o(vn),t&&o(ue),y(it),t&&o(Tn),t&&o(J),t&&o(xn),y(pt,t),t&&o(bn),t&&o(he),y(mt),t&&o(Mn),t&&o(K),y(dt),y(ut),t&&o(qn),t&&o(fe),y(ht),t&&o(On),t&&o(A),y(ft),y(_t),y(Fe),y(Ce),y(Ae),t&&o(yn),t&&o(_e),y($t),t&&o(jn),t&&o(S),y(kt),y(vt),y(Pe),y(Ne),y(Le),t&&o(En),t&&o(ke),y(Tt),t&&o(zn),t&&o(P),y(xt),y(Mt),y(De),y(He),y(Qe),y(Xe),t&&o(Rn),t&&o(ve),y(qt),t&&o(Fn),t&&o(N),y(Ot),y(jt),y(Be),y(Ge),y(Ve),t&&o(Cn),t&&o(xe),y(Et),t&&o(An),t&&o(L),y(zt),y(Ft),y(Je),y(Ze),y(Ke),t&&o(Sn),t&&o(Me),y(Ct),t&&o(Pn),t&&o(Y),y(At),y(St),y(et),y(tt),y(ot)}}}const Ol={local:"optimum-inference-with-onnx-runtime",sections:[{local:"switching-from-transformers-to-optimum-inference",sections:[{local:"working-with-the-hugging-face-model-hub",title:"Working with the Hugging Face Model Hub"}],title:"Switching from Transformers to Optimum Inference"},{local:"optimum.onnxruntime.ORTModel",title:"ORTModel"},{local:"optimum.onnxruntime.ORTModelForFeatureExtraction",title:"ORTModelForFeatureExtraction"},{local:"optimum.onnxruntime.ORTModelForQuestionAnswering",title:"ORTModelForQuestionAnswering"},{local:"optimum.onnxruntime.ORTModelForSequenceClassification",title:"ORTModelForSequenceClassification"},{local:"optimum.onnxruntime.ORTModelForTokenClassification",title:"ORTModelForTokenClassification"},{local:"optimum.onnxruntime.ORTModelForCausalLM",title:"ORTModelForCausalLM"},{local:"optimum.onnxruntime.ORTModelForSeq2SeqLM",title:"ORTModelForSeq2SeqLM"}],title:"Optimum Inference with ONNX Runtime"};function yl(j){return Ui(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Cl extends Bi{constructor(s){super();Gi(this,s,yl,ql,Vi,{})}}export{Cl as default,Ol as metadata};
