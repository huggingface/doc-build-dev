import{S as tl,i as ol,s as nl,F as rl,e as a,w as M,k as h,c as i,a as l,x as O,d as o,m as f,b as v,g as k,G as e,y as q,P as al,H as il,I as ll,J as pl,q as x,o as b,B as y,v as sl,Z as ml,_ as dl,t as p,M as cl,h as m,L as U}from"../../chunks/vendor-hf-doc-builder.js";import{T as to}from"../../chunks/Tip-hf-doc-builder.js";import{D as I}from"../../chunks/Docstring-hf-doc-builder.js";import{C}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ee}from"../../chunks/IconCopyLink-hf-doc-builder.js";const{window:ul}=ml;function hl(j){let s,_,c,u,g,n,r,T,d;u=new ee({props:{classNames:"text-smd"}});const w=j[4].default,E=rl(w,j,j[3],null);return{c(){s=a("div"),_=a("a"),c=a("span"),M(u.$$.fragment),n=h(),E&&E.c(),this.h()},l(z){s=i(z,"DIV",{class:!0});var R=l(s);_=i(R,"A",{id:!0,class:!0,href:!0});var Wt=l(_);c=i(Wt,"SPAN",{});var Bt=l(c);O(u.$$.fragment,Bt),Bt.forEach(o),Wt.forEach(o),n=f(R),E&&E.l(R),R.forEach(o),this.h()},h(){v(_,"id",j[0]),v(_,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(_,"href",g=`#${j[0]}`),v(s,"class","relative group rounded-md")},m(z,R){k(z,s,R),e(s,_),e(_,c),q(u,c,null),e(s,n),E&&E.m(s,null),j[5](s),r=!0,T||(d=al(ul,"hashchange",j[2]),T=!0)},p(z,[R]){(!r||R&1)&&v(_,"id",z[0]),(!r||R&1&&g!==(g=`#${z[0]}`))&&v(_,"href",g),E&&E.p&&(!r||R&8)&&il(E,w,z,z[3],r?pl(w,z[3],R,null):ll(z[3]),null)},i(z){r||(x(u.$$.fragment,z),x(E,z),r=!0)},o(z){b(u.$$.fragment,z),b(E,z),r=!1},d(z){z&&o(s),y(u),E&&E.d(z),j[5](null),T=!1,d()}}}const el="bg-yellow-50 dark:bg-[#494a3d]";function fl(j,s,_){let{$$slots:c={},$$scope:u}=s,{anchor:g}=s,n;function r(){const{hash:d}=window.location,w=d.substring(1);n&&n.classList.remove(...el.split(" ")),w===g&&n.classList.add(...el.split(" "))}sl(()=>{r()});function T(d){dl[d?"unshift":"push"](()=>{n=d,_(1,n)})}return j.$$set=d=>{"anchor"in d&&_(0,g=d.anchor),"$$scope"in d&&_(3,u=d.$$scope)},[g,n,r,u,c,T]}class J extends tl{constructor(s){super();ol(this,s,fl,hl,nl,{anchor:0})}}function gl(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function _l(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForFeatureExtraction
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=p("Example of feature extraction:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of feature extraction:"),r.forEach(o),c=f(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),q(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function $l(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForFeatureExtraction

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipeline"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipeline"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),O(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),q(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function kl(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function wl(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForQuestionAnswering
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
inputs = tokenizer(question, text, return_tensors="pt")
start_positions = torch.tensor([1])
end_positions = torch.tensor([3])

outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
start_scores = outputs.start_logits
end_scores = outputs.end_logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_positions = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>end_positions = torch.tensor([<span class="hljs-number">3</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_scores = outputs.start_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>end_scores = outputs.end_logits`}}),{c(){s=a("p"),_=p("Example of question answering:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of question answering:"),r.forEach(o),c=f(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),q(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function vl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForQuestionAnswering

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")
onnx_qa = pipeline("question-answering", model=model, tokenizer=tokenizer)

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
pred = onnx_qa(question, text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_qa = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_qa(question, text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipeline"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipeline"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),O(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),q(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function Tl(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function xl(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=p("Example of single-label classification:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of single-label classification:"),r.forEach(o),c=f(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),q(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function bl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

text = "Hello, my dog is cute"
pred = onnx_classifier(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_classifier(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),O(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),q(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function Ml(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-mnli")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-mnli")
onnx_z0 = pipeline("zero-shot-classification", model=model, tokenizer=tokenizer)

sequence_to_classify = "Who are you voting for in 2020?"
candidate_labels = ["Europe", "public health", "politics", "elections"]
pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_z0 = pipeline(<span class="hljs-string">&quot;zero-shot-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_to_classify = <span class="hljs-string">&quot;Who are you voting for in 2020?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>candidate_labels = [<span class="hljs-string">&quot;Europe&quot;</span>, <span class="hljs-string">&quot;public health&quot;</span>, <span class="hljs-string">&quot;politics&quot;</span>, <span class="hljs-string">&quot;elections&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=<span class="hljs-literal">True</span>)`}}),{c(){s=a("p"),_=p("Example using zero-shot-classification "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using zero-shot-classification "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),O(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),q(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function Ol(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function ql(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForTokenClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=p("Example of token classification:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of token classification:"),r.forEach(o),c=f(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),q(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function yl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForTokenClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")
onnx_ner = pipeline("token-classification", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_ner(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_ner = pipeline(<span class="hljs-string">&quot;token-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_ner(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),O(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),q(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function jl(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function El(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

gen_tokens = model.generate(**inputs,do_sample=True,temperature=0.9, min_length=20,max_length=20)
tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs,do_sample=<span class="hljs-literal">True</span>,temperature=<span class="hljs-number">0.9</span>, min_length=<span class="hljs-number">20</span>,max_length=<span class="hljs-number">20</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(gen_tokens)`}}),{c(){s=a("p"),_=p("Example of text generation:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of text generation:"),r.forEach(o),c=f(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),q(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function zl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")
onnx_gen = pipeline("text-generation", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
gen = onnx_gen(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_gen = pipeline(<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>gen = onnx_gen(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipelines"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipelines"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),O(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),q(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function Rl(j){let s,_,c,u,g;return{c(){s=a("p"),_=p("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=p("Module"),g=p(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=i(r,"CODE",{});var T=l(c);u=m(T,"Module"),T.forEach(o),g=m(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,c),e(c,u),e(s,g)},d(n){n&&o(s)}}}function Fl(j){let s,_,c,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("optimum/t5-small")
model = ORTModelForSeq2SeqLM.from_pretrained("optimum/t5-small")

inputs = tokenizer("My name is Eustache and I like to", return_tensors="pt")

gen_tokens = model.generate(**inputs)
outputs = tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Eustache and I like to&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = tokenizer.batch_decode(gen_tokens)`}}),{c(){s=a("p"),_=p("Example of text generation:"),c=h(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=m(r,"Example of text generation:"),r.forEach(o),c=f(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,c,r),q(u,n,r),g=!0},p:U,i(n){g||(x(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function Cl(j){let s,_,c,u,g,n,r,T;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("optimum/t5-small")
model = ORTModelForSeq2SeqLM.from_pretrained("optimum/t5-small")
onnx_summarization = pipeline("translation_en_to_de", model=model, tokenizer=tokenizer)

text = "My name is Eustache."
pred = onnx_summarization(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_summarization = pipeline(<span class="hljs-string">&quot;translation_en_to_de&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Eustache.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_summarization(text)`}}),{c(){s=a("p"),_=p("Example using "),c=a("code"),u=p("transformers.pipeline"),g=p(":"),n=h(),M(r.$$.fragment)},l(d){s=i(d,"P",{});var w=l(s);_=m(w,"Example using "),c=i(w,"CODE",{});var E=l(c);u=m(E,"transformers.pipeline"),E.forEach(o),g=m(w,":"),w.forEach(o),n=f(d),O(r.$$.fragment,d)},m(d,w){k(d,s,w),e(s,_),e(s,c),e(c,u),e(s,g),k(d,n,w),q(r,d,w),T=!0},p:U,i(d){T||(x(r.$$.fragment,d),T=!0)},o(d){b(r.$$.fragment,d),T=!1},d(d){d&&o(s),d&&o(n),y(r,d)}}}function Al(j){let s,_,c,u,g,n,r,T,d,w,E,z,R,Wt,Bt,kn,ce,ye,oo,at,ss,no,rs,wn,D,as,so,is,ls,ro,ps,ms,ao,ds,cs,io,us,hs,vn,it,Tn,te,fs,lo,gs,_s,po,$s,ks,xn,lt,bn,ue,je,mo,pt,ws,co,vs,Mn,Z,Ts,Vt,xs,bs,mt,Ms,Os,uo,qs,ys,On,dt,qn,he,Ee,ho,ct,js,fo,Es,yn,V,ut,zs,ht,Rs,go,Fs,Cs,As,ze,ft,Ss,gt,Ps,_o,Ns,Ls,Is,Re,_t,Ds,$o,Hs,jn,fe,Fe,ko,$t,Qs,wo,Xs,En,A,kt,Ws,vo,Bs,Vs,wt,Gs,To,Js,Us,Zs,xo,Ks,Ys,H,vt,er,ge,tr,bo,or,nr,Mo,sr,rr,ar,Ce,ir,Ae,lr,Se,zn,_e,Pe,Oo,Tt,pr,qo,mr,Rn,S,xt,dr,yo,cr,ur,bt,hr,jo,fr,gr,_r,Eo,$r,kr,Q,Mt,wr,$e,vr,zo,Tr,xr,Ro,br,Mr,Or,Ne,qr,Le,yr,Ie,Fn,ke,De,Fo,Ot,jr,Co,Er,Cn,P,qt,zr,Ao,Rr,Fr,yt,Cr,So,Ar,Sr,Pr,Po,Nr,Lr,F,jt,Ir,we,Dr,No,Hr,Qr,Lo,Xr,Wr,Br,He,Vr,Qe,Gr,Xe,Jr,We,An,ve,Be,Io,Et,Ur,Do,Zr,Sn,N,zt,Kr,Ho,Yr,ea,Rt,ta,Qo,oa,na,sa,Xo,ra,aa,X,Ft,ia,Te,la,Wo,pa,ma,Bo,da,ca,ua,Ve,ha,Ge,fa,Je,Pn,xe,Ue,Vo,Ct,ga,Go,_a,Nn,L,At,$a,Jo,ka,wa,St,va,Uo,Ta,xa,ba,Zo,Ma,Oa,W,Pt,qa,be,ya,Ko,ja,Ea,Yo,za,Ra,Fa,Ze,Ca,Ke,Aa,Ye,Ln,Me,et,en,Nt,Sa,tn,Pa,In,Y,Lt,Na,on,La,Ia,B,It,Da,Oe,Ha,nn,Qa,Xa,sn,Wa,Ba,Va,tt,Ga,ot,Ja,nt,Dn;return n=new ee({}),at=new ee({}),it=new C({props:{code:`

`,highlighted:`from transformers import AutoTokenizer, pipeline
<span class="hljs-deletion">-from transformers import AutoModelForQuestionAnswering</span>
<span class="hljs-addition">+from optimum.onnxruntime import ORTModelForQuestionAnswering</span>

<span class="hljs-deletion">-model = AutoModelForQuestionAnswering.from_pretrained(&quot;deepset/roberta-base-squad2&quot;) # pytorch checkpoint</span>
<span class="hljs-addition">+model = ORTModelForQuestionAnswering.from_pretrained(&quot;optimum/roberta-base-squad2&quot;) # onnx checkpoint</span>
tokenizer = AutoTokenizer.from_pretrained(&quot;deepset/roberta-base-squad2&quot;)

onnx_qa = pipeline(&quot;question-answering&quot;,model=model,tokenizer=tokenizer)

question = &quot;What&#x27;s my name?&quot;
context = &quot;My name is Philipp and I live in Nuremberg.&quot;
pred = onnx_qa(question, context)`}}),lt=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english", from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

result = onnx_classifier("This is a great model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># Load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>, from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># Create pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>result = onnx_classifier(<span class="hljs-string">&quot;This is a great model&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998838901519775</span>}]`}}),pt=new ee({}),dt=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english", from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

model.save_pretrained("a_local_path_for_convert_onnx_model")
tokenizer.save_pretrained("a_local_path_for_convert_onnx_model")

model.push_to_hub("a_local_path_for_convert_onnx_model", repository_id="my-onnx-repo", use_auth_token=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># Load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>, from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># Save converted model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)

<span class="hljs-comment"># Push model onnx model to HF Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.push_to_hub(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>, repository_id=<span class="hljs-string">&quot;my-onnx-repo&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>)`}}),ct=new ee({}),ut=new I({props:{name:"class optimum.onnxruntime.ORTModel",anchor:"optimum.onnxruntime.ORTModel",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L79"}}),ft=new I({props:{name:"load_model",anchor:"optimum.onnxruntime.ORTModel.load_model",parameters:[{name:"path",val:": typing.Union[str, pathlib.Path]"},{name:"provider",val:" = None"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModel.load_model.path",description:`<strong>path</strong> (<code>str</code> or <code>Path</code>) &#x2014;
Directory from which to load the model.`,name:"path"},{anchor:"optimum.onnxruntime.ORTModel.load_model.provider(str,",description:`<strong>provider(<code>str</code>,</strong> <em>optional</em>) &#x2014;
ONNX Runtime provider to use for loading the model. Defaults to <code>CPUExecutionProvider</code>.`,name:"provider(str,"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L119"}}),_t=new I({props:{name:"to",anchor:"optimum.onnxruntime.ORTModel.to",parameters:[{name:"device",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L107"}}),$t=new ee({}),kt=new I({props:{name:"class optimum.onnxruntime.ORTModelForFeatureExtraction",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L317"}}),vt=new I({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L331"}}),Ce=new to({props:{$$slots:{default:[gl]},$$scope:{ctx:j}}}),Ae=new J({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example",$$slots:{default:[_l]},$$scope:{ctx:j}}}),Se=new J({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example-2",$$slots:{default:[$l]},$$scope:{ctx:j}}}),Tt=new ee({}),xt=new I({props:{name:"class optimum.onnxruntime.ORTModelForQuestionAnswering",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L402"}}),Mt=new I({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L416"}}),Ne=new to({props:{$$slots:{default:[kl]},$$scope:{ctx:j}}}),Le=new J({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example",$$slots:{default:[wl]},$$scope:{ctx:j}}}),Ie=new J({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example-2",$$slots:{default:[vl]},$$scope:{ctx:j}}}),Ot=new ee({}),qt=new I({props:{name:"class optimum.onnxruntime.ORTModelForSequenceClassification",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L502"}}),jt=new I({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L517"}}),He=new to({props:{$$slots:{default:[Tl]},$$scope:{ctx:j}}}),Qe=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example",$$slots:{default:[xl]},$$scope:{ctx:j}}}),Xe=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-2",$$slots:{default:[bl]},$$scope:{ctx:j}}}),We=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-3",$$slots:{default:[Ml]},$$scope:{ctx:j}}}),Et=new ee({}),zt=new I({props:{name:"class optimum.onnxruntime.ORTModelForTokenClassification",anchor:"optimum.onnxruntime.ORTModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L588"}}),Ft=new I({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L602"}}),Ve=new to({props:{$$slots:{default:[Ol]},$$scope:{ctx:j}}}),Ge=new J({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example",$$slots:{default:[ql]},$$scope:{ctx:j}}}),Je=new J({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example-2",$$slots:{default:[yl]},$$scope:{ctx:j}}}),Ct=new ee({}),At=new I({props:{name:"class optimum.onnxruntime.ORTModelForCausalLM",anchor:"optimum.onnxruntime.ORTModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L671"}}),Pt=new I({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L695"}}),Ze=new to({props:{$$slots:{default:[jl]},$$scope:{ctx:j}}}),Ke=new J({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example",$$slots:{default:[El]},$$scope:{ctx:j}}}),Ye=new J({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example-2",$$slots:{default:[zl]},$$scope:{ctx:j}}}),Nt=new ee({}),Lt=new I({props:{name:"class optimum.onnxruntime.ORTModelForSeq2SeqLM",anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_seq2seq.py#L535"}}),It=new I({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"decoder_input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_outputs",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code>) &#x2014;
Indices of input sequence tokens in the vocabulary of shape <code>(batch_size, encoder_sequence_length)</code>.`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.LongTensor</code>) &#x2014;
Mask to avoid performing attention on padding token indices, of shape
<code>(batch_size, encoder_sequence_length)</code>. Mask values selected in <code>[0, 1]</code>.`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.decoder_input_ids",description:`<strong>decoder_input_ids</strong> (<code>torch.LongTensor</code>) &#x2014;
Indices of decoder input sequence tokens in the vocabulary of shape <code>(batch_size, decoder_sequence_length)</code>.`,name:"decoder_input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
The encoder <code>last_hidden_state</code> of shape <code>(batch_size, encoder_sequence_length, hidden_size)</code>.`,name:"encoder_outputs"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor), *optional*)</code> &#x2014;
Contains the precomputed key and value hidden states of the attention blocks used to speed up decoding.
The tuple is of length <code>config.n_layers</code> with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, decoder_sequence_length, embed_size_per_head)</code> and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.`,name:"past_key_values"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_seq2seq.py#L544"}}),tt=new to({props:{$$slots:{default:[Rl]},$$scope:{ctx:j}}}),ot=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.example",$$slots:{default:[Fl]},$$scope:{ctx:j}}}),nt=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.example-2",$$slots:{default:[Cl]},$$scope:{ctx:j}}}),{c(){s=a("meta"),_=h(),c=a("h1"),u=a("a"),g=a("span"),M(n.$$.fragment),r=h(),T=a("span"),d=p("Optimum Inference with ONNX Runtime"),w=h(),E=a("p"),z=p(`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),R=a("a"),Wt=p("Hugging Face Hub"),Bt=p(` and create pipelines
to run accelerated inference without rewriting your APIs.`),kn=h(),ce=a("h2"),ye=a("a"),oo=a("span"),M(at.$$.fragment),ss=h(),no=a("span"),rs=p("Switching from Transformers to Optimum Inference"),wn=h(),D=a("p"),as=p("The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),so=a("code"),is=p("AutoModelForXxx"),ls=p(" class with the corresponding "),ro=a("code"),ps=p("ORTModelForXxx"),ms=p(" class in "),ao=a("code"),ds=p("optimum"),cs=p(". For example, this is how you can use a question answering model in "),io=a("code"),us=p("optimum"),hs=p(":"),vn=h(),M(it.$$.fragment),Tn=h(),te=a("p"),fs=p("Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),lo=a("code"),gs=p("from_transformers=True"),_s=p(" to the "),po=a("code"),$s=p("from_pretrained()"),ks=p(" method, and your model will be loaded and converted to ONNX on-the-fly:"),xn=h(),M(lt.$$.fragment),bn=h(),ue=a("h3"),je=a("a"),mo=a("span"),M(pt.$$.fragment),ws=h(),co=a("span"),vs=p("Working with the Hugging Face Model Hub"),Mn=h(),Z=a("p"),Ts=p("The Optimum model classes like "),Vt=a("a"),xs=p("ORTModelForSequenceClassification"),bs=p(" are integrated with the "),mt=a("a"),Ms=p("Hugging Face Model Hub"),Os=p(`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),uo=a("code"),qs=p("push_to_hub()"),ys=p(` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),On=h(),M(dt.$$.fragment),qn=h(),he=a("h2"),Ee=a("a"),ho=a("span"),M(ct.$$.fragment),js=h(),fo=a("span"),Es=p("ORTModel"),yn=h(),V=a("div"),M(ut.$$.fragment),zs=h(),ht=a("p"),Rs=p(`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),go=a("code"),Fs=p("transformers.onnx"),Cs=p(` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),As=h(),ze=a("div"),M(ft.$$.fragment),Ss=h(),gt=a("p"),Ps=p("Loads an ONNX Inference session with a given provider. Default provider is "),_o=a("code"),Ns=p("CPUExecutionProvider"),Ls=p(" to match the default behaviour in PyTorch/TensorFlow/JAX."),Is=h(),Re=a("div"),M(_t.$$.fragment),Ds=h(),$o=a("p"),Hs=p("Changes the ONNX Runtime provider according to the device."),jn=h(),fe=a("h2"),Fe=a("a"),ko=a("span"),M($t.$$.fragment),Qs=h(),wo=a("span"),Xs=p("ORTModelForFeatureExtraction"),En=h(),A=a("div"),M(kt.$$.fragment),Ws=h(),vo=a("p"),Bs=p("Onnx Model with a MaskedLMOutput for feature-extraction tasks."),Vs=h(),wt=a("p"),Gs=p("This model inherits from [~"),To=a("code"),Js=p("onnxruntime.modeling_ort.ORTModel"),Us=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Zs=h(),xo=a("p"),Ks=p("Feature Extraction model for ONNX."),Ys=h(),H=a("div"),M(vt.$$.fragment),er=h(),ge=a("p"),tr=p("The "),bo=a("code"),or=p("ORTModelForFeatureExtraction"),nr=p(" forward method, overrides the "),Mo=a("code"),sr=p("__call__"),rr=p(" special method."),ar=h(),M(Ce.$$.fragment),ir=h(),M(Ae.$$.fragment),lr=h(),M(Se.$$.fragment),zn=h(),_e=a("h2"),Pe=a("a"),Oo=a("span"),M(Tt.$$.fragment),pr=h(),qo=a("span"),mr=p("ORTModelForQuestionAnswering"),Rn=h(),S=a("div"),M(xt.$$.fragment),dr=h(),yo=a("p"),cr=p("Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),ur=h(),bt=a("p"),hr=p("This model inherits from [~"),jo=a("code"),fr=p("onnxruntime.modeling_ort.ORTModel"),gr=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),_r=h(),Eo=a("p"),$r=p("Question Answering model for ONNX."),kr=h(),Q=a("div"),M(Mt.$$.fragment),wr=h(),$e=a("p"),vr=p("The "),zo=a("code"),Tr=p("ORTModelForQuestionAnswering"),xr=p(" forward method, overrides the "),Ro=a("code"),br=p("__call__"),Mr=p(" special method."),Or=h(),M(Ne.$$.fragment),qr=h(),M(Le.$$.fragment),yr=h(),M(Ie.$$.fragment),Fn=h(),ke=a("h2"),De=a("a"),Fo=a("span"),M(Ot.$$.fragment),jr=h(),Co=a("span"),Er=p("ORTModelForSequenceClassification"),Cn=h(),P=a("div"),M(qt.$$.fragment),zr=h(),Ao=a("p"),Rr=p(`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Fr=h(),yt=a("p"),Cr=p("This model inherits from [~"),So=a("code"),Ar=p("onnxruntime.modeling_ort.ORTModel"),Sr=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Pr=h(),Po=a("p"),Nr=p("Sequence Classification model for ONNX."),Lr=h(),F=a("div"),M(jt.$$.fragment),Ir=h(),we=a("p"),Dr=p("The "),No=a("code"),Hr=p("ORTModelForSequenceClassification"),Qr=p(" forward method, overrides the "),Lo=a("code"),Xr=p("__call__"),Wr=p(" special method."),Br=h(),M(He.$$.fragment),Vr=h(),M(Qe.$$.fragment),Gr=h(),M(Xe.$$.fragment),Jr=h(),M(We.$$.fragment),An=h(),ve=a("h2"),Be=a("a"),Io=a("span"),M(Et.$$.fragment),Ur=h(),Do=a("span"),Zr=p("ORTModelForTokenClassification"),Sn=h(),N=a("div"),M(zt.$$.fragment),Kr=h(),Ho=a("p"),Yr=p(`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),ea=h(),Rt=a("p"),ta=p("This model inherits from [~"),Qo=a("code"),oa=p("onnxruntime.modeling_ort.ORTModel"),na=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),sa=h(),Xo=a("p"),ra=p("Token Classification model for ONNX."),aa=h(),X=a("div"),M(Ft.$$.fragment),ia=h(),Te=a("p"),la=p("The "),Wo=a("code"),pa=p("ORTModelForTokenClassification"),ma=p(" forward method, overrides the "),Bo=a("code"),da=p("__call__"),ca=p(" special method."),ua=h(),M(Ve.$$.fragment),ha=h(),M(Ge.$$.fragment),fa=h(),M(Je.$$.fragment),Pn=h(),xe=a("h2"),Ue=a("a"),Vo=a("span"),M(Ct.$$.fragment),ga=h(),Go=a("span"),_a=p("ORTModelForCausalLM"),Nn=h(),L=a("div"),M(At.$$.fragment),$a=h(),Jo=a("p"),ka=p(`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),wa=h(),St=a("p"),va=p("This model inherits from [~"),Uo=a("code"),Ta=p("onnxruntime.modeling_ort.ORTModel"),xa=p(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),ba=h(),Zo=a("p"),Ma=p("Causal LM model for ONNX."),Oa=h(),W=a("div"),M(Pt.$$.fragment),qa=h(),be=a("p"),ya=p("The "),Ko=a("code"),ja=p("ORTModelForCausalLM"),Ea=p(" forward method, overrides the "),Yo=a("code"),za=p("__call__"),Ra=p(" special method."),Fa=h(),M(Ze.$$.fragment),Ca=h(),M(Ke.$$.fragment),Aa=h(),M(Ye.$$.fragment),Ln=h(),Me=a("h2"),et=a("a"),en=a("span"),M(Nt.$$.fragment),Sa=h(),tn=a("span"),Pa=p("ORTModelForSeq2SeqLM"),In=h(),Y=a("div"),M(Lt.$$.fragment),Na=h(),on=a("p"),La=p("Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),Ia=h(),B=a("div"),M(It.$$.fragment),Da=h(),Oe=a("p"),Ha=p("The "),nn=a("code"),Qa=p("ORTModelForSeq2SeqLM"),Xa=p(" forward method, overrides the "),sn=a("code"),Wa=p("__call__"),Ba=p(" special method."),Va=h(),M(tt.$$.fragment),Ga=h(),M(ot.$$.fragment),Ja=h(),M(nt.$$.fragment),this.h()},l(t){const $=cl('[data-svelte="svelte-1phssyn"]',document.head);s=i($,"META",{name:!0,content:!0}),$.forEach(o),_=f(t),c=i(t,"H1",{class:!0});var Dt=l(c);u=i(Dt,"A",{id:!0,class:!0,href:!0});var rn=l(u);g=i(rn,"SPAN",{});var an=l(g);O(n.$$.fragment,an),an.forEach(o),rn.forEach(o),r=f(Dt),T=i(Dt,"SPAN",{});var ln=l(T);d=m(ln,"Optimum Inference with ONNX Runtime"),ln.forEach(o),Dt.forEach(o),w=f(t),E=i(t,"P",{});var Ht=l(E);z=m(Ht,`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),R=i(Ht,"A",{href:!0});var pn=l(R);Wt=m(pn,"Hugging Face Hub"),pn.forEach(o),Bt=m(Ht,` and create pipelines
to run accelerated inference without rewriting your APIs.`),Ht.forEach(o),kn=f(t),ce=i(t,"H2",{class:!0});var Qt=l(ce);ye=i(Qt,"A",{id:!0,class:!0,href:!0});var mn=l(ye);oo=i(mn,"SPAN",{});var dn=l(oo);O(at.$$.fragment,dn),dn.forEach(o),mn.forEach(o),ss=f(Qt),no=i(Qt,"SPAN",{});var cn=l(no);rs=m(cn,"Switching from Transformers to Optimum Inference"),cn.forEach(o),Qt.forEach(o),wn=f(t),D=i(t,"P",{});var G=l(D);as=m(G,"The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),so=i(G,"CODE",{});var un=l(so);is=m(un,"AutoModelForXxx"),un.forEach(o),ls=m(G," class with the corresponding "),ro=i(G,"CODE",{});var hn=l(ro);ps=m(hn,"ORTModelForXxx"),hn.forEach(o),ms=m(G," class in "),ao=i(G,"CODE",{});var fn=l(ao);ds=m(fn,"optimum"),fn.forEach(o),cs=m(G,". For example, this is how you can use a question answering model in "),io=i(G,"CODE",{});var gn=l(io);us=m(gn,"optimum"),gn.forEach(o),hs=m(G,":"),G.forEach(o),vn=f(t),O(it.$$.fragment,t),Tn=f(t),te=i(t,"P",{});var qe=l(te);fs=m(qe,"Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),lo=i(qe,"CODE",{});var _n=l(lo);gs=m(_n,"from_transformers=True"),_n.forEach(o),_s=m(qe," to the "),po=i(qe,"CODE",{});var $n=l(po);$s=m($n,"from_pretrained()"),$n.forEach(o),ks=m(qe," method, and your model will be loaded and converted to ONNX on-the-fly:"),qe.forEach(o),xn=f(t),O(lt.$$.fragment,t),bn=f(t),ue=i(t,"H3",{class:!0});var Xt=l(ue);je=i(Xt,"A",{id:!0,class:!0,href:!0});var Ua=l(je);mo=i(Ua,"SPAN",{});var Za=l(mo);O(pt.$$.fragment,Za),Za.forEach(o),Ua.forEach(o),ws=f(Xt),co=i(Xt,"SPAN",{});var Ka=l(co);vs=m(Ka,"Working with the Hugging Face Model Hub"),Ka.forEach(o),Xt.forEach(o),Mn=f(t),Z=i(t,"P",{});var st=l(Z);Ts=m(st,"The Optimum model classes like "),Vt=i(st,"A",{href:!0});var Ya=l(Vt);xs=m(Ya,"ORTModelForSequenceClassification"),Ya.forEach(o),bs=m(st," are integrated with the "),mt=i(st,"A",{href:!0,rel:!0});var ei=l(mt);Ms=m(ei,"Hugging Face Model Hub"),ei.forEach(o),Os=m(st,`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),uo=i(st,"CODE",{});var ti=l(uo);qs=m(ti,"push_to_hub()"),ti.forEach(o),ys=m(st,` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),st.forEach(o),On=f(t),O(dt.$$.fragment,t),qn=f(t),he=i(t,"H2",{class:!0});var Hn=l(he);Ee=i(Hn,"A",{id:!0,class:!0,href:!0});var oi=l(Ee);ho=i(oi,"SPAN",{});var ni=l(ho);O(ct.$$.fragment,ni),ni.forEach(o),oi.forEach(o),js=f(Hn),fo=i(Hn,"SPAN",{});var si=l(fo);Es=m(si,"ORTModel"),si.forEach(o),Hn.forEach(o),yn=f(t),V=i(t,"DIV",{class:!0});var rt=l(V);O(ut.$$.fragment,rt),zs=f(rt),ht=i(rt,"P",{});var Qn=l(ht);Rs=m(Qn,`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),go=i(Qn,"CODE",{});var ri=l(go);Fs=m(ri,"transformers.onnx"),ri.forEach(o),Cs=m(Qn,` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Qn.forEach(o),As=f(rt),ze=i(rt,"DIV",{class:!0});var Xn=l(ze);O(ft.$$.fragment,Xn),Ss=f(Xn),gt=i(Xn,"P",{});var Wn=l(gt);Ps=m(Wn,"Loads an ONNX Inference session with a given provider. Default provider is "),_o=i(Wn,"CODE",{});var ai=l(_o);Ns=m(ai,"CPUExecutionProvider"),ai.forEach(o),Ls=m(Wn," to match the default behaviour in PyTorch/TensorFlow/JAX."),Wn.forEach(o),Xn.forEach(o),Is=f(rt),Re=i(rt,"DIV",{class:!0});var Bn=l(Re);O(_t.$$.fragment,Bn),Ds=f(Bn),$o=i(Bn,"P",{});var ii=l($o);Hs=m(ii,"Changes the ONNX Runtime provider according to the device."),ii.forEach(o),Bn.forEach(o),rt.forEach(o),jn=f(t),fe=i(t,"H2",{class:!0});var Vn=l(fe);Fe=i(Vn,"A",{id:!0,class:!0,href:!0});var li=l(Fe);ko=i(li,"SPAN",{});var pi=l(ko);O($t.$$.fragment,pi),pi.forEach(o),li.forEach(o),Qs=f(Vn),wo=i(Vn,"SPAN",{});var mi=l(wo);Xs=m(mi,"ORTModelForFeatureExtraction"),mi.forEach(o),Vn.forEach(o),En=f(t),A=i(t,"DIV",{class:!0});var oe=l(A);O(kt.$$.fragment,oe),Ws=f(oe),vo=i(oe,"P",{});var di=l(vo);Bs=m(di,"Onnx Model with a MaskedLMOutput for feature-extraction tasks."),di.forEach(o),Vs=f(oe),wt=i(oe,"P",{});var Gn=l(wt);Gs=m(Gn,"This model inherits from [~"),To=i(Gn,"CODE",{});var ci=l(To);Js=m(ci,"onnxruntime.modeling_ort.ORTModel"),ci.forEach(o),Us=m(Gn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Gn.forEach(o),Zs=f(oe),xo=i(oe,"P",{});var ui=l(xo);Ks=m(ui,"Feature Extraction model for ONNX."),ui.forEach(o),Ys=f(oe),H=i(oe,"DIV",{class:!0});var ne=l(H);O(vt.$$.fragment,ne),er=f(ne),ge=i(ne,"P",{});var Gt=l(ge);tr=m(Gt,"The "),bo=i(Gt,"CODE",{});var hi=l(bo);or=m(hi,"ORTModelForFeatureExtraction"),hi.forEach(o),nr=m(Gt," forward method, overrides the "),Mo=i(Gt,"CODE",{});var fi=l(Mo);sr=m(fi,"__call__"),fi.forEach(o),rr=m(Gt," special method."),Gt.forEach(o),ar=f(ne),O(Ce.$$.fragment,ne),ir=f(ne),O(Ae.$$.fragment,ne),lr=f(ne),O(Se.$$.fragment,ne),ne.forEach(o),oe.forEach(o),zn=f(t),_e=i(t,"H2",{class:!0});var Jn=l(_e);Pe=i(Jn,"A",{id:!0,class:!0,href:!0});var gi=l(Pe);Oo=i(gi,"SPAN",{});var _i=l(Oo);O(Tt.$$.fragment,_i),_i.forEach(o),gi.forEach(o),pr=f(Jn),qo=i(Jn,"SPAN",{});var $i=l(qo);mr=m($i,"ORTModelForQuestionAnswering"),$i.forEach(o),Jn.forEach(o),Rn=f(t),S=i(t,"DIV",{class:!0});var se=l(S);O(xt.$$.fragment,se),dr=f(se),yo=i(se,"P",{});var ki=l(yo);cr=m(ki,"Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),ki.forEach(o),ur=f(se),bt=i(se,"P",{});var Un=l(bt);hr=m(Un,"This model inherits from [~"),jo=i(Un,"CODE",{});var wi=l(jo);fr=m(wi,"onnxruntime.modeling_ort.ORTModel"),wi.forEach(o),gr=m(Un,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Un.forEach(o),_r=f(se),Eo=i(se,"P",{});var vi=l(Eo);$r=m(vi,"Question Answering model for ONNX."),vi.forEach(o),kr=f(se),Q=i(se,"DIV",{class:!0});var re=l(Q);O(Mt.$$.fragment,re),wr=f(re),$e=i(re,"P",{});var Jt=l($e);vr=m(Jt,"The "),zo=i(Jt,"CODE",{});var Ti=l(zo);Tr=m(Ti,"ORTModelForQuestionAnswering"),Ti.forEach(o),xr=m(Jt," forward method, overrides the "),Ro=i(Jt,"CODE",{});var xi=l(Ro);br=m(xi,"__call__"),xi.forEach(o),Mr=m(Jt," special method."),Jt.forEach(o),Or=f(re),O(Ne.$$.fragment,re),qr=f(re),O(Le.$$.fragment,re),yr=f(re),O(Ie.$$.fragment,re),re.forEach(o),se.forEach(o),Fn=f(t),ke=i(t,"H2",{class:!0});var Zn=l(ke);De=i(Zn,"A",{id:!0,class:!0,href:!0});var bi=l(De);Fo=i(bi,"SPAN",{});var Mi=l(Fo);O(Ot.$$.fragment,Mi),Mi.forEach(o),bi.forEach(o),jr=f(Zn),Co=i(Zn,"SPAN",{});var Oi=l(Co);Er=m(Oi,"ORTModelForSequenceClassification"),Oi.forEach(o),Zn.forEach(o),Cn=f(t),P=i(t,"DIV",{class:!0});var ae=l(P);O(qt.$$.fragment,ae),zr=f(ae),Ao=i(ae,"P",{});var qi=l(Ao);Rr=m(qi,`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),qi.forEach(o),Fr=f(ae),yt=i(ae,"P",{});var Kn=l(yt);Cr=m(Kn,"This model inherits from [~"),So=i(Kn,"CODE",{});var yi=l(So);Ar=m(yi,"onnxruntime.modeling_ort.ORTModel"),yi.forEach(o),Sr=m(Kn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Kn.forEach(o),Pr=f(ae),Po=i(ae,"P",{});var ji=l(Po);Nr=m(ji,"Sequence Classification model for ONNX."),ji.forEach(o),Lr=f(ae),F=i(ae,"DIV",{class:!0});var K=l(F);O(jt.$$.fragment,K),Ir=f(K),we=i(K,"P",{});var Ut=l(we);Dr=m(Ut,"The "),No=i(Ut,"CODE",{});var Ei=l(No);Hr=m(Ei,"ORTModelForSequenceClassification"),Ei.forEach(o),Qr=m(Ut," forward method, overrides the "),Lo=i(Ut,"CODE",{});var zi=l(Lo);Xr=m(zi,"__call__"),zi.forEach(o),Wr=m(Ut," special method."),Ut.forEach(o),Br=f(K),O(He.$$.fragment,K),Vr=f(K),O(Qe.$$.fragment,K),Gr=f(K),O(Xe.$$.fragment,K),Jr=f(K),O(We.$$.fragment,K),K.forEach(o),ae.forEach(o),An=f(t),ve=i(t,"H2",{class:!0});var Yn=l(ve);Be=i(Yn,"A",{id:!0,class:!0,href:!0});var Ri=l(Be);Io=i(Ri,"SPAN",{});var Fi=l(Io);O(Et.$$.fragment,Fi),Fi.forEach(o),Ri.forEach(o),Ur=f(Yn),Do=i(Yn,"SPAN",{});var Ci=l(Do);Zr=m(Ci,"ORTModelForTokenClassification"),Ci.forEach(o),Yn.forEach(o),Sn=f(t),N=i(t,"DIV",{class:!0});var ie=l(N);O(zt.$$.fragment,ie),Kr=f(ie),Ho=i(ie,"P",{});var Ai=l(Ho);Yr=m(Ai,`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Ai.forEach(o),ea=f(ie),Rt=i(ie,"P",{});var es=l(Rt);ta=m(es,"This model inherits from [~"),Qo=i(es,"CODE",{});var Si=l(Qo);oa=m(Si,"onnxruntime.modeling_ort.ORTModel"),Si.forEach(o),na=m(es,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),es.forEach(o),sa=f(ie),Xo=i(ie,"P",{});var Pi=l(Xo);ra=m(Pi,"Token Classification model for ONNX."),Pi.forEach(o),aa=f(ie),X=i(ie,"DIV",{class:!0});var le=l(X);O(Ft.$$.fragment,le),ia=f(le),Te=i(le,"P",{});var Zt=l(Te);la=m(Zt,"The "),Wo=i(Zt,"CODE",{});var Ni=l(Wo);pa=m(Ni,"ORTModelForTokenClassification"),Ni.forEach(o),ma=m(Zt," forward method, overrides the "),Bo=i(Zt,"CODE",{});var Li=l(Bo);da=m(Li,"__call__"),Li.forEach(o),ca=m(Zt," special method."),Zt.forEach(o),ua=f(le),O(Ve.$$.fragment,le),ha=f(le),O(Ge.$$.fragment,le),fa=f(le),O(Je.$$.fragment,le),le.forEach(o),ie.forEach(o),Pn=f(t),xe=i(t,"H2",{class:!0});var ts=l(xe);Ue=i(ts,"A",{id:!0,class:!0,href:!0});var Ii=l(Ue);Vo=i(Ii,"SPAN",{});var Di=l(Vo);O(Ct.$$.fragment,Di),Di.forEach(o),Ii.forEach(o),ga=f(ts),Go=i(ts,"SPAN",{});var Hi=l(Go);_a=m(Hi,"ORTModelForCausalLM"),Hi.forEach(o),ts.forEach(o),Nn=f(t),L=i(t,"DIV",{class:!0});var pe=l(L);O(At.$$.fragment,pe),$a=f(pe),Jo=i(pe,"P",{});var Qi=l(Jo);ka=m(Qi,`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),Qi.forEach(o),wa=f(pe),St=i(pe,"P",{});var os=l(St);va=m(os,"This model inherits from [~"),Uo=i(os,"CODE",{});var Xi=l(Uo);Ta=m(Xi,"onnxruntime.modeling_ort.ORTModel"),Xi.forEach(o),xa=m(os,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),os.forEach(o),ba=f(pe),Zo=i(pe,"P",{});var Wi=l(Zo);Ma=m(Wi,"Causal LM model for ONNX."),Wi.forEach(o),Oa=f(pe),W=i(pe,"DIV",{class:!0});var me=l(W);O(Pt.$$.fragment,me),qa=f(me),be=i(me,"P",{});var Kt=l(be);ya=m(Kt,"The "),Ko=i(Kt,"CODE",{});var Bi=l(Ko);ja=m(Bi,"ORTModelForCausalLM"),Bi.forEach(o),Ea=m(Kt," forward method, overrides the "),Yo=i(Kt,"CODE",{});var Vi=l(Yo);za=m(Vi,"__call__"),Vi.forEach(o),Ra=m(Kt," special method."),Kt.forEach(o),Fa=f(me),O(Ze.$$.fragment,me),Ca=f(me),O(Ke.$$.fragment,me),Aa=f(me),O(Ye.$$.fragment,me),me.forEach(o),pe.forEach(o),Ln=f(t),Me=i(t,"H2",{class:!0});var ns=l(Me);et=i(ns,"A",{id:!0,class:!0,href:!0});var Gi=l(et);en=i(Gi,"SPAN",{});var Ji=l(en);O(Nt.$$.fragment,Ji),Ji.forEach(o),Gi.forEach(o),Sa=f(ns),tn=i(ns,"SPAN",{});var Ui=l(tn);Pa=m(Ui,"ORTModelForSeq2SeqLM"),Ui.forEach(o),ns.forEach(o),In=f(t),Y=i(t,"DIV",{class:!0});var Yt=l(Y);O(Lt.$$.fragment,Yt),Na=f(Yt),on=i(Yt,"P",{});var Zi=l(on);La=m(Zi,"Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),Zi.forEach(o),Ia=f(Yt),B=i(Yt,"DIV",{class:!0});var de=l(B);O(It.$$.fragment,de),Da=f(de),Oe=i(de,"P",{});var eo=l(Oe);Ha=m(eo,"The "),nn=i(eo,"CODE",{});var Ki=l(nn);Qa=m(Ki,"ORTModelForSeq2SeqLM"),Ki.forEach(o),Xa=m(eo," forward method, overrides the "),sn=i(eo,"CODE",{});var Yi=l(sn);Wa=m(Yi,"__call__"),Yi.forEach(o),Ba=m(eo," special method."),eo.forEach(o),Va=f(de),O(tt.$$.fragment,de),Ga=f(de),O(ot.$$.fragment,de),Ja=f(de),O(nt.$$.fragment,de),de.forEach(o),Yt.forEach(o),this.h()},h(){v(s,"name","hf:doc:metadata"),v(s,"content",JSON.stringify(Sl)),v(u,"id","optimum-inference-with-onnx-runtime"),v(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(u,"href","#optimum-inference-with-onnx-runtime"),v(c,"class","relative group"),v(R,"href","hf.co/models"),v(ye,"id","switching-from-transformers-to-optimum-inference"),v(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ye,"href","#switching-from-transformers-to-optimum-inference"),v(ce,"class","relative group"),v(je,"id","working-with-the-hugging-face-model-hub"),v(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(je,"href","#working-with-the-hugging-face-model-hub"),v(ue,"class","relative group"),v(Vt,"href","/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModelForSequenceClassification"),v(mt,"href","https://hf.co/models"),v(mt,"rel","nofollow"),v(Ee,"id","optimum.onnxruntime.ORTModel"),v(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ee,"href","#optimum.onnxruntime.ORTModel"),v(he,"class","relative group"),v(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Fe,"id","optimum.onnxruntime.ORTModelForFeatureExtraction"),v(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Fe,"href","#optimum.onnxruntime.ORTModelForFeatureExtraction"),v(fe,"class","relative group"),v(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Pe,"id","optimum.onnxruntime.ORTModelForQuestionAnswering"),v(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Pe,"href","#optimum.onnxruntime.ORTModelForQuestionAnswering"),v(_e,"class","relative group"),v(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(De,"id","optimum.onnxruntime.ORTModelForSequenceClassification"),v(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(De,"href","#optimum.onnxruntime.ORTModelForSequenceClassification"),v(ke,"class","relative group"),v(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Be,"id","optimum.onnxruntime.ORTModelForTokenClassification"),v(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Be,"href","#optimum.onnxruntime.ORTModelForTokenClassification"),v(ve,"class","relative group"),v(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ue,"id","optimum.onnxruntime.ORTModelForCausalLM"),v(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ue,"href","#optimum.onnxruntime.ORTModelForCausalLM"),v(xe,"class","relative group"),v(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(et,"id","optimum.onnxruntime.ORTModelForSeq2SeqLM"),v(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(et,"href","#optimum.onnxruntime.ORTModelForSeq2SeqLM"),v(Me,"class","relative group"),v(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,$){e(document.head,s),k(t,_,$),k(t,c,$),e(c,u),e(u,g),q(n,g,null),e(c,r),e(c,T),e(T,d),k(t,w,$),k(t,E,$),e(E,z),e(E,R),e(R,Wt),e(E,Bt),k(t,kn,$),k(t,ce,$),e(ce,ye),e(ye,oo),q(at,oo,null),e(ce,ss),e(ce,no),e(no,rs),k(t,wn,$),k(t,D,$),e(D,as),e(D,so),e(so,is),e(D,ls),e(D,ro),e(ro,ps),e(D,ms),e(D,ao),e(ao,ds),e(D,cs),e(D,io),e(io,us),e(D,hs),k(t,vn,$),q(it,t,$),k(t,Tn,$),k(t,te,$),e(te,fs),e(te,lo),e(lo,gs),e(te,_s),e(te,po),e(po,$s),e(te,ks),k(t,xn,$),q(lt,t,$),k(t,bn,$),k(t,ue,$),e(ue,je),e(je,mo),q(pt,mo,null),e(ue,ws),e(ue,co),e(co,vs),k(t,Mn,$),k(t,Z,$),e(Z,Ts),e(Z,Vt),e(Vt,xs),e(Z,bs),e(Z,mt),e(mt,Ms),e(Z,Os),e(Z,uo),e(uo,qs),e(Z,ys),k(t,On,$),q(dt,t,$),k(t,qn,$),k(t,he,$),e(he,Ee),e(Ee,ho),q(ct,ho,null),e(he,js),e(he,fo),e(fo,Es),k(t,yn,$),k(t,V,$),q(ut,V,null),e(V,zs),e(V,ht),e(ht,Rs),e(ht,go),e(go,Fs),e(ht,Cs),e(V,As),e(V,ze),q(ft,ze,null),e(ze,Ss),e(ze,gt),e(gt,Ps),e(gt,_o),e(_o,Ns),e(gt,Ls),e(V,Is),e(V,Re),q(_t,Re,null),e(Re,Ds),e(Re,$o),e($o,Hs),k(t,jn,$),k(t,fe,$),e(fe,Fe),e(Fe,ko),q($t,ko,null),e(fe,Qs),e(fe,wo),e(wo,Xs),k(t,En,$),k(t,A,$),q(kt,A,null),e(A,Ws),e(A,vo),e(vo,Bs),e(A,Vs),e(A,wt),e(wt,Gs),e(wt,To),e(To,Js),e(wt,Us),e(A,Zs),e(A,xo),e(xo,Ks),e(A,Ys),e(A,H),q(vt,H,null),e(H,er),e(H,ge),e(ge,tr),e(ge,bo),e(bo,or),e(ge,nr),e(ge,Mo),e(Mo,sr),e(ge,rr),e(H,ar),q(Ce,H,null),e(H,ir),q(Ae,H,null),e(H,lr),q(Se,H,null),k(t,zn,$),k(t,_e,$),e(_e,Pe),e(Pe,Oo),q(Tt,Oo,null),e(_e,pr),e(_e,qo),e(qo,mr),k(t,Rn,$),k(t,S,$),q(xt,S,null),e(S,dr),e(S,yo),e(yo,cr),e(S,ur),e(S,bt),e(bt,hr),e(bt,jo),e(jo,fr),e(bt,gr),e(S,_r),e(S,Eo),e(Eo,$r),e(S,kr),e(S,Q),q(Mt,Q,null),e(Q,wr),e(Q,$e),e($e,vr),e($e,zo),e(zo,Tr),e($e,xr),e($e,Ro),e(Ro,br),e($e,Mr),e(Q,Or),q(Ne,Q,null),e(Q,qr),q(Le,Q,null),e(Q,yr),q(Ie,Q,null),k(t,Fn,$),k(t,ke,$),e(ke,De),e(De,Fo),q(Ot,Fo,null),e(ke,jr),e(ke,Co),e(Co,Er),k(t,Cn,$),k(t,P,$),q(qt,P,null),e(P,zr),e(P,Ao),e(Ao,Rr),e(P,Fr),e(P,yt),e(yt,Cr),e(yt,So),e(So,Ar),e(yt,Sr),e(P,Pr),e(P,Po),e(Po,Nr),e(P,Lr),e(P,F),q(jt,F,null),e(F,Ir),e(F,we),e(we,Dr),e(we,No),e(No,Hr),e(we,Qr),e(we,Lo),e(Lo,Xr),e(we,Wr),e(F,Br),q(He,F,null),e(F,Vr),q(Qe,F,null),e(F,Gr),q(Xe,F,null),e(F,Jr),q(We,F,null),k(t,An,$),k(t,ve,$),e(ve,Be),e(Be,Io),q(Et,Io,null),e(ve,Ur),e(ve,Do),e(Do,Zr),k(t,Sn,$),k(t,N,$),q(zt,N,null),e(N,Kr),e(N,Ho),e(Ho,Yr),e(N,ea),e(N,Rt),e(Rt,ta),e(Rt,Qo),e(Qo,oa),e(Rt,na),e(N,sa),e(N,Xo),e(Xo,ra),e(N,aa),e(N,X),q(Ft,X,null),e(X,ia),e(X,Te),e(Te,la),e(Te,Wo),e(Wo,pa),e(Te,ma),e(Te,Bo),e(Bo,da),e(Te,ca),e(X,ua),q(Ve,X,null),e(X,ha),q(Ge,X,null),e(X,fa),q(Je,X,null),k(t,Pn,$),k(t,xe,$),e(xe,Ue),e(Ue,Vo),q(Ct,Vo,null),e(xe,ga),e(xe,Go),e(Go,_a),k(t,Nn,$),k(t,L,$),q(At,L,null),e(L,$a),e(L,Jo),e(Jo,ka),e(L,wa),e(L,St),e(St,va),e(St,Uo),e(Uo,Ta),e(St,xa),e(L,ba),e(L,Zo),e(Zo,Ma),e(L,Oa),e(L,W),q(Pt,W,null),e(W,qa),e(W,be),e(be,ya),e(be,Ko),e(Ko,ja),e(be,Ea),e(be,Yo),e(Yo,za),e(be,Ra),e(W,Fa),q(Ze,W,null),e(W,Ca),q(Ke,W,null),e(W,Aa),q(Ye,W,null),k(t,Ln,$),k(t,Me,$),e(Me,et),e(et,en),q(Nt,en,null),e(Me,Sa),e(Me,tn),e(tn,Pa),k(t,In,$),k(t,Y,$),q(Lt,Y,null),e(Y,Na),e(Y,on),e(on,La),e(Y,Ia),e(Y,B),q(It,B,null),e(B,Da),e(B,Oe),e(Oe,Ha),e(Oe,nn),e(nn,Qa),e(Oe,Xa),e(Oe,sn),e(sn,Wa),e(Oe,Ba),e(B,Va),q(tt,B,null),e(B,Ga),q(ot,B,null),e(B,Ja),q(nt,B,null),Dn=!0},p(t,[$]){const Dt={};$&2&&(Dt.$$scope={dirty:$,ctx:t}),Ce.$set(Dt);const rn={};$&2&&(rn.$$scope={dirty:$,ctx:t}),Ae.$set(rn);const an={};$&2&&(an.$$scope={dirty:$,ctx:t}),Se.$set(an);const ln={};$&2&&(ln.$$scope={dirty:$,ctx:t}),Ne.$set(ln);const Ht={};$&2&&(Ht.$$scope={dirty:$,ctx:t}),Le.$set(Ht);const pn={};$&2&&(pn.$$scope={dirty:$,ctx:t}),Ie.$set(pn);const Qt={};$&2&&(Qt.$$scope={dirty:$,ctx:t}),He.$set(Qt);const mn={};$&2&&(mn.$$scope={dirty:$,ctx:t}),Qe.$set(mn);const dn={};$&2&&(dn.$$scope={dirty:$,ctx:t}),Xe.$set(dn);const cn={};$&2&&(cn.$$scope={dirty:$,ctx:t}),We.$set(cn);const G={};$&2&&(G.$$scope={dirty:$,ctx:t}),Ve.$set(G);const un={};$&2&&(un.$$scope={dirty:$,ctx:t}),Ge.$set(un);const hn={};$&2&&(hn.$$scope={dirty:$,ctx:t}),Je.$set(hn);const fn={};$&2&&(fn.$$scope={dirty:$,ctx:t}),Ze.$set(fn);const gn={};$&2&&(gn.$$scope={dirty:$,ctx:t}),Ke.$set(gn);const qe={};$&2&&(qe.$$scope={dirty:$,ctx:t}),Ye.$set(qe);const _n={};$&2&&(_n.$$scope={dirty:$,ctx:t}),tt.$set(_n);const $n={};$&2&&($n.$$scope={dirty:$,ctx:t}),ot.$set($n);const Xt={};$&2&&(Xt.$$scope={dirty:$,ctx:t}),nt.$set(Xt)},i(t){Dn||(x(n.$$.fragment,t),x(at.$$.fragment,t),x(it.$$.fragment,t),x(lt.$$.fragment,t),x(pt.$$.fragment,t),x(dt.$$.fragment,t),x(ct.$$.fragment,t),x(ut.$$.fragment,t),x(ft.$$.fragment,t),x(_t.$$.fragment,t),x($t.$$.fragment,t),x(kt.$$.fragment,t),x(vt.$$.fragment,t),x(Ce.$$.fragment,t),x(Ae.$$.fragment,t),x(Se.$$.fragment,t),x(Tt.$$.fragment,t),x(xt.$$.fragment,t),x(Mt.$$.fragment,t),x(Ne.$$.fragment,t),x(Le.$$.fragment,t),x(Ie.$$.fragment,t),x(Ot.$$.fragment,t),x(qt.$$.fragment,t),x(jt.$$.fragment,t),x(He.$$.fragment,t),x(Qe.$$.fragment,t),x(Xe.$$.fragment,t),x(We.$$.fragment,t),x(Et.$$.fragment,t),x(zt.$$.fragment,t),x(Ft.$$.fragment,t),x(Ve.$$.fragment,t),x(Ge.$$.fragment,t),x(Je.$$.fragment,t),x(Ct.$$.fragment,t),x(At.$$.fragment,t),x(Pt.$$.fragment,t),x(Ze.$$.fragment,t),x(Ke.$$.fragment,t),x(Ye.$$.fragment,t),x(Nt.$$.fragment,t),x(Lt.$$.fragment,t),x(It.$$.fragment,t),x(tt.$$.fragment,t),x(ot.$$.fragment,t),x(nt.$$.fragment,t),Dn=!0)},o(t){b(n.$$.fragment,t),b(at.$$.fragment,t),b(it.$$.fragment,t),b(lt.$$.fragment,t),b(pt.$$.fragment,t),b(dt.$$.fragment,t),b(ct.$$.fragment,t),b(ut.$$.fragment,t),b(ft.$$.fragment,t),b(_t.$$.fragment,t),b($t.$$.fragment,t),b(kt.$$.fragment,t),b(vt.$$.fragment,t),b(Ce.$$.fragment,t),b(Ae.$$.fragment,t),b(Se.$$.fragment,t),b(Tt.$$.fragment,t),b(xt.$$.fragment,t),b(Mt.$$.fragment,t),b(Ne.$$.fragment,t),b(Le.$$.fragment,t),b(Ie.$$.fragment,t),b(Ot.$$.fragment,t),b(qt.$$.fragment,t),b(jt.$$.fragment,t),b(He.$$.fragment,t),b(Qe.$$.fragment,t),b(Xe.$$.fragment,t),b(We.$$.fragment,t),b(Et.$$.fragment,t),b(zt.$$.fragment,t),b(Ft.$$.fragment,t),b(Ve.$$.fragment,t),b(Ge.$$.fragment,t),b(Je.$$.fragment,t),b(Ct.$$.fragment,t),b(At.$$.fragment,t),b(Pt.$$.fragment,t),b(Ze.$$.fragment,t),b(Ke.$$.fragment,t),b(Ye.$$.fragment,t),b(Nt.$$.fragment,t),b(Lt.$$.fragment,t),b(It.$$.fragment,t),b(tt.$$.fragment,t),b(ot.$$.fragment,t),b(nt.$$.fragment,t),Dn=!1},d(t){o(s),t&&o(_),t&&o(c),y(n),t&&o(w),t&&o(E),t&&o(kn),t&&o(ce),y(at),t&&o(wn),t&&o(D),t&&o(vn),y(it,t),t&&o(Tn),t&&o(te),t&&o(xn),y(lt,t),t&&o(bn),t&&o(ue),y(pt),t&&o(Mn),t&&o(Z),t&&o(On),y(dt,t),t&&o(qn),t&&o(he),y(ct),t&&o(yn),t&&o(V),y(ut),y(ft),y(_t),t&&o(jn),t&&o(fe),y($t),t&&o(En),t&&o(A),y(kt),y(vt),y(Ce),y(Ae),y(Se),t&&o(zn),t&&o(_e),y(Tt),t&&o(Rn),t&&o(S),y(xt),y(Mt),y(Ne),y(Le),y(Ie),t&&o(Fn),t&&o(ke),y(Ot),t&&o(Cn),t&&o(P),y(qt),y(jt),y(He),y(Qe),y(Xe),y(We),t&&o(An),t&&o(ve),y(Et),t&&o(Sn),t&&o(N),y(zt),y(Ft),y(Ve),y(Ge),y(Je),t&&o(Pn),t&&o(xe),y(Ct),t&&o(Nn),t&&o(L),y(At),y(Pt),y(Ze),y(Ke),y(Ye),t&&o(Ln),t&&o(Me),y(Nt),t&&o(In),t&&o(Y),y(Lt),y(It),y(tt),y(ot),y(nt)}}}const Sl={local:"optimum-inference-with-onnx-runtime",sections:[{local:"switching-from-transformers-to-optimum-inference",sections:[{local:"working-with-the-hugging-face-model-hub",title:"Working with the Hugging Face Model Hub"}],title:"Switching from Transformers to Optimum Inference"},{local:"optimum.onnxruntime.ORTModel",title:"ORTModel"},{local:"optimum.onnxruntime.ORTModelForFeatureExtraction",title:"ORTModelForFeatureExtraction"},{local:"optimum.onnxruntime.ORTModelForQuestionAnswering",title:"ORTModelForQuestionAnswering"},{local:"optimum.onnxruntime.ORTModelForSequenceClassification",title:"ORTModelForSequenceClassification"},{local:"optimum.onnxruntime.ORTModelForTokenClassification",title:"ORTModelForTokenClassification"},{local:"optimum.onnxruntime.ORTModelForCausalLM",title:"ORTModelForCausalLM"},{local:"optimum.onnxruntime.ORTModelForSeq2SeqLM",title:"ORTModelForSeq2SeqLM"}],title:"Optimum Inference with ONNX Runtime"};function Pl(j){return sl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ql extends tl{constructor(s){super();ol(this,s,Pl,Al,nl,{})}}export{Ql as default,Sl as metadata};
