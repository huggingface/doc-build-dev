import{S as Fi,i as zi,s as Ci,F as Pi,e as r,w as M,k as f,c as a,a as i,x as O,d as o,m as h,b as w,g as k,G as e,y as q,P as Si,H as Ni,I as Ii,J as Di,q as T,o as b,B as y,v as Ai,Z as Li,_ as Hi,t as m,M as Qi,h as p,L as Z}from"../../chunks/vendor-hf-doc-builder.js";import{T as on}from"../../chunks/Tip-hf-doc-builder.js";import{D as B}from"../../chunks/Docstring-hf-doc-builder.js";import{C as X}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Y}from"../../chunks/IconCopyLink-hf-doc-builder.js";const{window:Xi}=Li;function Wi(E){let n,_,d,u,$,s,l,x,c;u=new Y({props:{classNames:"text-smd"}});const v=E[4].default,j=Pi(v,E,E[3],null);return{c(){n=r("div"),_=r("a"),d=r("span"),M(u.$$.fragment),s=f(),j&&j.c(),this.h()},l(R){n=a(R,"DIV",{class:!0});var F=i(n);_=a(F,"A",{id:!0,class:!0,href:!0});var Ct=i(_);d=a(Ct,"SPAN",{});var At=i(d);O(u.$$.fragment,At),At.forEach(o),Ct.forEach(o),s=h(F),j&&j.l(F),F.forEach(o),this.h()},h(){w(_,"id",E[0]),w(_,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(_,"href",$=`#${E[0]}`),w(n,"class","relative group rounded-md")},m(R,F){k(R,n,F),e(n,_),e(_,d),q(u,d,null),e(n,s),j&&j.m(n,null),E[5](n),l=!0,x||(c=Si(Xi,"hashchange",E[2]),x=!0)},p(R,[F]){(!l||F&1)&&w(_,"id",R[0]),(!l||F&1&&$!==($=`#${R[0]}`))&&w(_,"href",$),j&&j.p&&(!l||F&8)&&Ni(j,v,R,R[3],l?Di(v,R[3],F,null):Ii(R[3]),null)},i(R){l||(T(u.$$.fragment,R),T(j,R),l=!0)},o(R){b(u.$$.fragment,R),b(j,R),l=!1},d(R){R&&o(n),y(u),j&&j.d(R),E[5](null),x=!1,c()}}}const Ri="bg-yellow-50 dark:bg-[#494a3d]";function Bi(E,n,_){let{$$slots:d={},$$scope:u}=n,{anchor:$}=n,s;function l(){const{hash:c}=window.location,v=c.substring(1);s&&s.classList.remove(...Ri.split(" ")),v===$&&s.classList.add(...Ri.split(" "))}Ai(()=>{l()});function x(c){Hi[c?"unshift":"push"](()=>{s=c,_(1,s)})}return E.$$set=c=>{"anchor"in c&&_(0,$=c.anchor),"$$scope"in c&&_(3,u=c.$$scope)},[$,s,l,u,d,x]}class J extends Fi{constructor(n){super();zi(this,n,Bi,Wi,Ci,{anchor:0})}}function Gi(E){let n,_,d,u,$;return{c(){n=r("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=r("code"),u=m("Module"),$=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a(l,"CODE",{});var x=i(d);u=p(x,"Module"),x.forEach(o),$=p(l,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),l.forEach(o)},m(s,l){k(s,n,l),e(n,_),e(n,d),e(d,u),e(n,$)},d(s){s&&o(n)}}}function Vi(E){let n,_,d,u,$;return u=new X({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForFeatureExtraction
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){n=r("p"),_=m("Example of feature extraction:"),d=f(),M(u.$$.fragment)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Example of feature extraction:"),l.forEach(o),d=h(s),O(u.$$.fragment,s)},m(s,l){k(s,n,l),e(n,_),k(s,d,l),q(u,s,l),$=!0},p:Z,i(s){$||(T(u.$$.fragment,s),$=!0)},o(s){b(u.$$.fragment,s),$=!1},d(s){s&&o(n),s&&o(d),y(u,s)}}}function Ui(E){let n,_,d,u,$,s,l,x;return l=new X({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForFeatureExtraction

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){n=r("p"),_=m("Example using "),d=r("code"),u=m("transformers.pipeline"),$=m(":"),s=f(),M(l.$$.fragment)},l(c){n=a(c,"P",{});var v=i(n);_=p(v,"Example using "),d=a(v,"CODE",{});var j=i(d);u=p(j,"transformers.pipeline"),j.forEach(o),$=p(v,":"),v.forEach(o),s=h(c),O(l.$$.fragment,c)},m(c,v){k(c,n,v),e(n,_),e(n,d),e(d,u),e(n,$),k(c,s,v),q(l,c,v),x=!0},p:Z,i(c){x||(T(l.$$.fragment,c),x=!0)},o(c){b(l.$$.fragment,c),x=!1},d(c){c&&o(n),c&&o(s),y(l,c)}}}function Ji(E){let n,_,d,u,$;return{c(){n=r("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=r("code"),u=m("Module"),$=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a(l,"CODE",{});var x=i(d);u=p(x,"Module"),x.forEach(o),$=p(l,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),l.forEach(o)},m(s,l){k(s,n,l),e(n,_),e(n,d),e(d,u),e(n,$)},d(s){s&&o(n)}}}function Yi(E){let n,_,d,u,$;return u=new X({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForQuestionAnswering
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
inputs = tokenizer(question, text, return_tensors="pt")
start_positions = torch.tensor([1])
end_positions = torch.tensor([3])

outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
start_scores = outputs.start_logits
end_scores = outputs.end_logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_positions = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>end_positions = torch.tensor([<span class="hljs-number">3</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_scores = outputs.start_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>end_scores = outputs.end_logits`}}),{c(){n=r("p"),_=m("Example of question answering:"),d=f(),M(u.$$.fragment)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Example of question answering:"),l.forEach(o),d=h(s),O(u.$$.fragment,s)},m(s,l){k(s,n,l),e(n,_),k(s,d,l),q(u,s,l),$=!0},p:Z,i(s){$||(T(u.$$.fragment,s),$=!0)},o(s){b(u.$$.fragment,s),$=!1},d(s){s&&o(n),s&&o(d),y(u,s)}}}function Zi(E){let n,_,d,u,$,s,l,x;return l=new X({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForQuestionAnswering

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")
onnx_qa = pipeline("question-answering", model=model, tokenizer=tokenizer)

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
pred = onnx_qa(question, text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_qa = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_qa(question, text)`}}),{c(){n=r("p"),_=m("Example using "),d=r("code"),u=m("transformers.pipeline"),$=m(":"),s=f(),M(l.$$.fragment)},l(c){n=a(c,"P",{});var v=i(n);_=p(v,"Example using "),d=a(v,"CODE",{});var j=i(d);u=p(j,"transformers.pipeline"),j.forEach(o),$=p(v,":"),v.forEach(o),s=h(c),O(l.$$.fragment,c)},m(c,v){k(c,n,v),e(n,_),e(n,d),e(d,u),e(n,$),k(c,s,v),q(l,c,v),x=!0},p:Z,i(c){x||(T(l.$$.fragment,c),x=!0)},o(c){b(l.$$.fragment,c),x=!1},d(c){c&&o(n),c&&o(s),y(l,c)}}}function Ki(E){let n,_,d,u,$;return{c(){n=r("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=r("code"),u=m("Module"),$=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a(l,"CODE",{});var x=i(d);u=p(x,"Module"),x.forEach(o),$=p(l,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),l.forEach(o)},m(s,l){k(s,n,l),e(n,_),e(n,d),e(d,u),e(n,$)},d(s){s&&o(n)}}}function el(E){let n,_,d,u,$;return u=new X({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){n=r("p"),_=m("Example of single-label classification:"),d=f(),M(u.$$.fragment)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Example of single-label classification:"),l.forEach(o),d=h(s),O(u.$$.fragment,s)},m(s,l){k(s,n,l),e(n,_),k(s,d,l),q(u,s,l),$=!0},p:Z,i(s){$||(T(u.$$.fragment,s),$=!0)},o(s){b(u.$$.fragment,s),$=!1},d(s){s&&o(n),s&&o(d),y(u,s)}}}function tl(E){let n,_,d,u,$,s,l,x;return l=new X({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

text = "Hello, my dog is cute"
pred = onnx_classifier(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_classifier(text)`}}),{c(){n=r("p"),_=m("Example using "),d=r("code"),u=m("transformers.pipelines"),$=m(":"),s=f(),M(l.$$.fragment)},l(c){n=a(c,"P",{});var v=i(n);_=p(v,"Example using "),d=a(v,"CODE",{});var j=i(d);u=p(j,"transformers.pipelines"),j.forEach(o),$=p(v,":"),v.forEach(o),s=h(c),O(l.$$.fragment,c)},m(c,v){k(c,n,v),e(n,_),e(n,d),e(d,u),e(n,$),k(c,s,v),q(l,c,v),x=!0},p:Z,i(c){x||(T(l.$$.fragment,c),x=!0)},o(c){b(l.$$.fragment,c),x=!1},d(c){c&&o(n),c&&o(s),y(l,c)}}}function ol(E){let n,_,d,u,$,s,l,x;return l=new X({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-mnli")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-mnli")
onnx_z0 = pipeline("zero-shot-classification", model=model, tokenizer=tokenizer)

sequence_to_classify = "Who are you voting for in 2020?"
candidate_labels = ["Europe", "public health", "politics", "elections"]
pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_z0 = pipeline(<span class="hljs-string">&quot;zero-shot-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_to_classify = <span class="hljs-string">&quot;Who are you voting for in 2020?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>candidate_labels = [<span class="hljs-string">&quot;Europe&quot;</span>, <span class="hljs-string">&quot;public health&quot;</span>, <span class="hljs-string">&quot;politics&quot;</span>, <span class="hljs-string">&quot;elections&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=<span class="hljs-literal">True</span>)`}}),{c(){n=r("p"),_=m("Example using zero-shot-classification "),d=r("code"),u=m("transformers.pipelines"),$=m(":"),s=f(),M(l.$$.fragment)},l(c){n=a(c,"P",{});var v=i(n);_=p(v,"Example using zero-shot-classification "),d=a(v,"CODE",{});var j=i(d);u=p(j,"transformers.pipelines"),j.forEach(o),$=p(v,":"),v.forEach(o),s=h(c),O(l.$$.fragment,c)},m(c,v){k(c,n,v),e(n,_),e(n,d),e(d,u),e(n,$),k(c,s,v),q(l,c,v),x=!0},p:Z,i(c){x||(T(l.$$.fragment,c),x=!0)},o(c){b(l.$$.fragment,c),x=!1},d(c){c&&o(n),c&&o(s),y(l,c)}}}function nl(E){let n,_,d,u,$;return{c(){n=r("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=r("code"),u=m("Module"),$=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a(l,"CODE",{});var x=i(d);u=p(x,"Module"),x.forEach(o),$=p(l,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),l.forEach(o)},m(s,l){k(s,n,l),e(n,_),e(n,d),e(d,u),e(n,$)},d(s){s&&o(n)}}}function sl(E){let n,_,d,u,$;return u=new X({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForTokenClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){n=r("p"),_=m("Example of token classification:"),d=f(),M(u.$$.fragment)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Example of token classification:"),l.forEach(o),d=h(s),O(u.$$.fragment,s)},m(s,l){k(s,n,l),e(n,_),k(s,d,l),q(u,s,l),$=!0},p:Z,i(s){$||(T(u.$$.fragment,s),$=!0)},o(s){b(u.$$.fragment,s),$=!1},d(s){s&&o(n),s&&o(d),y(u,s)}}}function rl(E){let n,_,d,u,$,s,l,x;return l=new X({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForTokenClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")
onnx_ner = pipeline("token-classification", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_ner(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_ner = pipeline(<span class="hljs-string">&quot;token-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_ner(text)`}}),{c(){n=r("p"),_=m("Example using "),d=r("code"),u=m("transformers.pipelines"),$=m(":"),s=f(),M(l.$$.fragment)},l(c){n=a(c,"P",{});var v=i(n);_=p(v,"Example using "),d=a(v,"CODE",{});var j=i(d);u=p(j,"transformers.pipelines"),j.forEach(o),$=p(v,":"),v.forEach(o),s=h(c),O(l.$$.fragment,c)},m(c,v){k(c,n,v),e(n,_),e(n,d),e(d,u),e(n,$),k(c,s,v),q(l,c,v),x=!0},p:Z,i(c){x||(T(l.$$.fragment,c),x=!0)},o(c){b(l.$$.fragment,c),x=!1},d(c){c&&o(n),c&&o(s),y(l,c)}}}function al(E){let n,_,d,u,$;return{c(){n=r("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=r("code"),u=m("Module"),$=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a(l,"CODE",{});var x=i(d);u=p(x,"Module"),x.forEach(o),$=p(l,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),l.forEach(o)},m(s,l){k(s,n,l),e(n,_),e(n,d),e(d,u),e(n,$)},d(s){s&&o(n)}}}function il(E){let n,_,d,u,$;return u=new X({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

gen_tokens = model.generate(**inputs,do_sample=True,temperature=0.9, min_length=20,max_length=20)
tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs,do_sample=<span class="hljs-literal">True</span>,temperature=<span class="hljs-number">0.9</span>, min_length=<span class="hljs-number">20</span>,max_length=<span class="hljs-number">20</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(gen_tokens)`}}),{c(){n=r("p"),_=m("Example of text generation:"),d=f(),M(u.$$.fragment)},l(s){n=a(s,"P",{});var l=i(n);_=p(l,"Example of text generation:"),l.forEach(o),d=h(s),O(u.$$.fragment,s)},m(s,l){k(s,n,l),e(n,_),k(s,d,l),q(u,s,l),$=!0},p:Z,i(s){$||(T(u.$$.fragment,s),$=!0)},o(s){b(u.$$.fragment,s),$=!1},d(s){s&&o(n),s&&o(d),y(u,s)}}}function ll(E){let n,_,d,u,$,s,l,x;return l=new X({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")
onnx_gen = pipeline("text-generation", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
gen = onnx_gen(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_gen = pipeline(<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>gen = onnx_gen(text)`}}),{c(){n=r("p"),_=m("Example using "),d=r("code"),u=m("transformers.pipelines"),$=m(":"),s=f(),M(l.$$.fragment)},l(c){n=a(c,"P",{});var v=i(n);_=p(v,"Example using "),d=a(v,"CODE",{});var j=i(d);u=p(j,"transformers.pipelines"),j.forEach(o),$=p(v,":"),v.forEach(o),s=h(c),O(l.$$.fragment,c)},m(c,v){k(c,n,v),e(n,_),e(n,d),e(d,u),e(n,$),k(c,s,v),q(l,c,v),x=!0},p:Z,i(c){x||(T(l.$$.fragment,c),x=!0)},o(c){b(l.$$.fragment,c),x=!1},d(c){c&&o(n),c&&o(s),y(l,c)}}}function ml(E){let n,_,d,u,$,s,l,x,c,v,j,R,F,Ct,At,nn,me,Me,Wt,Ke,Wn,Bt,Bn,sn,I,Gn,Gt,Vn,Un,Vt,Jn,Yn,Ut,Zn,Kn,Jt,es,ts,rn,et,an,K,os,Yt,ns,ss,Zt,rs,as,ln,tt,mn,Oe,is,Pt,ls,ms,pn,pe,qe,Kt,ot,ps,eo,cs,cn,G,ds,St,us,fs,nt,hs,gs,to,_s,$s,dn,st,un,ce,ye,oo,rt,ks,no,ws,fn,U,at,vs,it,xs,so,Ts,bs,Ms,Ee,lt,Os,Nt,qs,ro,ys,hn,de,je,ao,mt,Es,io,js,gn,C,pt,Rs,lo,Fs,zs,ct,Cs,mo,As,Ps,Ss,po,Ns,Is,D,dt,Ds,ue,Ls,co,Hs,Qs,uo,Xs,Ws,Bs,Re,Gs,Fe,Vs,ze,_n,fe,Ce,fo,ut,Us,ho,Js,$n,A,ft,Ys,go,Zs,Ks,ht,er,_o,tr,or,nr,$o,sr,rr,L,gt,ar,he,ir,ko,lr,mr,wo,pr,cr,dr,Ae,ur,Pe,fr,Se,kn,ge,Ne,vo,_t,hr,xo,gr,wn,P,$t,_r,To,$r,kr,kt,wr,bo,vr,xr,Tr,Mo,br,Mr,z,wt,Or,_e,qr,Oo,yr,Er,qo,jr,Rr,Fr,Ie,zr,De,Cr,Le,Ar,He,vn,$e,Qe,yo,vt,Pr,Eo,Sr,xn,S,xt,Nr,jo,Ir,Dr,Tt,Lr,Ro,Hr,Qr,Xr,Fo,Wr,Br,H,bt,Gr,ke,Vr,zo,Ur,Jr,Co,Yr,Zr,Kr,Xe,ea,We,ta,Be,Tn,we,Ge,Ao,Mt,oa,Po,na,bn,N,Ot,sa,So,ra,aa,qt,ia,No,la,ma,pa,Io,ca,da,Q,yt,ua,ve,fa,Do,ha,ga,Lo,_a,$a,ka,Ve,wa,Ue,va,Je,Mn,xe,Ye,Ho,Et,xa,Qo,Ta,On,Te,jt,ba,Xo,Ma,qn;return s=new Y({}),Ke=new Y({}),et=new X({props:{code:`from transformers import AutoTokenizer, pipeline
-from transformers import AutoModelForQuestionAnswering
+from optimum.onnxruntime import ORTModelForQuestionAnswering

-model = AutoModelForQuestionAnswering.from_pretrained("deepset/roberta-base-squad2") # pytorch checkpoint
+model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2") # onnx checkpoint
tokenizer = AutoTokenizer.from_pretrained("deepset/roberta-base-squad2")

onnx_qa = pipeline("question-answering",model=model,tokenizer=tokenizer)

question = "What's my name?"
context = "My name is Philipp and I live in Nuremberg."
pred = onnx_qa(question, context)`,highlighted:`from transformers import AutoTokenizer, pipeline
<span class="hljs-deletion">-from transformers import AutoModelForQuestionAnswering</span>
<span class="hljs-addition">+from optimum.onnxruntime import ORTModelForQuestionAnswering</span>

<span class="hljs-deletion">-model = AutoModelForQuestionAnswering.from_pretrained(&quot;deepset/roberta-base-squad2&quot;) # pytorch checkpoint</span>
<span class="hljs-addition">+model = ORTModelForQuestionAnswering.from_pretrained(&quot;optimum/roberta-base-squad2&quot;) # onnx checkpoint</span>
tokenizer = AutoTokenizer.from_pretrained(&quot;deepset/roberta-base-squad2&quot;)

onnx_qa = pipeline(&quot;question-answering&quot;,model=model,tokenizer=tokenizer)

question = &quot;What&#x27;s my name?&quot;
context = &quot;My name is Philipp and I live in Nuremberg.&quot;
pred = onnx_qa(question, context)`}}),tt=new X({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english",from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

onnx_classifier = pipeline("text-classification",model=model,tokenizer=tokenizer)

result = onnx_classifier(text="This is a great model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># create pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=model,tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>result = onnx_classifier(text=<span class="hljs-string">&quot;This is a great model&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998838901519775</span>}]`}}),ot=new Y({}),st=new X({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english",from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

model.save_pretrained("a_local_path_for_convert_onnx_model")
tokenizer.save_pretrained("a_local_path_for_convert_onnx_model")

model.push_to_hub("a_local_path_for_convert_onnx_model",`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># save converted model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)

<span class="hljs-comment"># push model onnx model to HF Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.push_to_hub(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>,
                  repository_id=<span class="hljs-string">&quot;my-onnx-repo&quot;</span>,
                  use_auth_token=<span class="hljs-literal">True</span>
                  )`}}),rt=new Y({}),at=new B({props:{name:"class optimum.onnxruntime.ORTModel",anchor:"optimum.onnxruntime.ORTModel",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L79"}}),lt=new B({props:{name:"load_model",anchor:"optimum.onnxruntime.ORTModel.load_model",parameters:[{name:"path",val:": typing.Union[str, pathlib.Path]"},{name:"provider",val:" = None"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModel.load_model.path",description:`<strong>path</strong> (<code>str</code> or <code>Path</code>) &#x2014;
Directory from which to load`,name:"path"},{anchor:"optimum.onnxruntime.ORTModel.load_model.provider(str,",description:`<strong>provider(<code>str</code>,</strong> <em>optional</em>) &#x2014;
Onnxruntime provider to use for loading the model, defaults to <code>CUDAExecutionProvider</code> if GPU is
available else <code>CPUExecutionProvider</code>`,name:"provider(str,"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L97"}}),mt=new Y({}),pt=new B({props:{name:"class optimum.onnxruntime.ORTModelForFeatureExtraction",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L294"}}),dt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L308"}}),Re=new on({props:{$$slots:{default:[Gi]},$$scope:{ctx:E}}}),Fe=new J({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example",$$slots:{default:[Vi]},$$scope:{ctx:E}}}),ze=new J({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example-2",$$slots:{default:[Ui]},$$scope:{ctx:E}}}),ut=new Y({}),ft=new B({props:{name:"class optimum.onnxruntime.ORTModelForQuestionAnswering",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L380"}}),gt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L394"}}),Ae=new on({props:{$$slots:{default:[Ji]},$$scope:{ctx:E}}}),Pe=new J({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example",$$slots:{default:[Yi]},$$scope:{ctx:E}}}),Se=new J({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example-2",$$slots:{default:[Zi]},$$scope:{ctx:E}}}),_t=new Y({}),$t=new B({props:{name:"class optimum.onnxruntime.ORTModelForSequenceClassification",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L481"}}),wt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L496"}}),Ie=new on({props:{$$slots:{default:[Ki]},$$scope:{ctx:E}}}),De=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example",$$slots:{default:[el]},$$scope:{ctx:E}}}),Le=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-2",$$slots:{default:[tl]},$$scope:{ctx:E}}}),He=new J({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-3",$$slots:{default:[ol]},$$scope:{ctx:E}}}),vt=new Y({}),xt=new B({props:{name:"class optimum.onnxruntime.ORTModelForTokenClassification",anchor:"optimum.onnxruntime.ORTModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L568"}}),bt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L582"}}),Xe=new on({props:{$$slots:{default:[nl]},$$scope:{ctx:E}}}),We=new J({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example",$$slots:{default:[sl]},$$scope:{ctx:E}}}),Be=new J({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example-2",$$slots:{default:[rl]},$$scope:{ctx:E}}}),Mt=new Y({}),Ot=new B({props:{name:"class optimum.onnxruntime.ORTModelForCausalLM",anchor:"optimum.onnxruntime.ORTModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L652"}}),yt=new B({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L684"}}),Ve=new on({props:{$$slots:{default:[al]},$$scope:{ctx:E}}}),Ue=new J({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example",$$slots:{default:[il]},$$scope:{ctx:E}}}),Je=new J({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example-2",$$slots:{default:[ll]},$$scope:{ctx:E}}}),Et=new Y({}),jt=new B({props:{name:"class optimum.onnxruntime.ORTModelForSeq2SeqLM",anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_seq2seq.py#L458"}}),{c(){n=r("meta"),_=f(),d=r("h1"),u=r("a"),$=r("span"),M(s.$$.fragment),l=f(),x=r("span"),c=m("Optimum Inference with ONNX Runtime"),v=f(),j=r("p"),R=m(`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),F=r("a"),Ct=m("Hugging Face Hub"),At=m(` and create pipelines
to run accelerated inference without rewriting your APIs.`),nn=f(),me=r("h2"),Me=r("a"),Wt=r("span"),M(Ke.$$.fragment),Wn=f(),Bt=r("span"),Bn=m("Switching from Transformers to Optimum Inference"),sn=f(),I=r("p"),Gn=m("The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),Gt=r("code"),Vn=m("AutoModelForXxx"),Un=m(" class with the corresponding "),Vt=r("code"),Jn=m("ORTModelForXxx"),Yn=m(" class in "),Ut=r("code"),Zn=m("optimum"),Kn=m(". For example, this is how you can use a question answering model in "),Jt=r("code"),es=m("optimum"),ts=m(":"),rn=f(),M(et.$$.fragment),an=f(),K=r("p"),os=m("Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),Yt=r("code"),ns=m("from_transformers=True"),ss=m(" to the "),Zt=r("code"),rs=m("from_pretrained()"),as=m(" method, and your model will be loaded and converted to ONNX on-the-fly:"),ln=f(),M(tt.$$.fragment),mn=f(),Oe=r("p"),is=m("You can find a complete walkhrough Optimum Inference for ONNX Runtime in this "),Pt=r("a"),ls=m("notebook"),ms=m("."),pn=f(),pe=r("h3"),qe=r("a"),Kt=r("span"),M(ot.$$.fragment),ps=f(),eo=r("span"),cs=m("Working with the Hugging Face Model Hub"),cn=f(),G=r("p"),ds=m("The Optimum model classes like "),St=r("a"),us=m("ORTModelForSequenceClassification"),fs=m(" are integrated with the "),nt=r("a"),hs=m("Hugging Face Model Hub"),gs=m(`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),to=r("code"),_s=m("push_to_hub()"),$s=m(` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),dn=f(),M(st.$$.fragment),un=f(),ce=r("h2"),ye=r("a"),oo=r("span"),M(rt.$$.fragment),ks=f(),no=r("span"),ws=m("ORTModel"),fn=f(),U=r("div"),M(at.$$.fragment),vs=f(),it=r("p"),xs=m(`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),so=r("code"),Ts=m("transformers.onnx"),bs=m(` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Ms=f(),Ee=r("div"),M(lt.$$.fragment),Os=f(),Nt=r("p"),qs=m("loads ONNX Inference session with Provider. Default Provider is if CUDAExecutionProvider GPU available else "),ro=r("code"),ys=m("CPUExecutionProvider"),hn=f(),de=r("h2"),je=r("a"),ao=r("span"),M(mt.$$.fragment),Es=f(),io=r("span"),js=m("ORTModelForFeatureExtraction"),gn=f(),C=r("div"),M(pt.$$.fragment),Rs=f(),lo=r("p"),Fs=m("Onnx Model with a MaskedLMOutput for feature-extraction tasks."),zs=f(),ct=r("p"),Cs=m("This model inherits from [~"),mo=r("code"),As=m("onnxruntime.modeling_ort.ORTModel"),Ps=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Ss=f(),po=r("p"),Ns=m("Feature Extraction model for ONNX."),Is=f(),D=r("div"),M(dt.$$.fragment),Ds=f(),ue=r("p"),Ls=m("The "),co=r("code"),Hs=m("ORTModelForFeatureExtraction"),Qs=m(" forward method, overrides the "),uo=r("code"),Xs=m("__call__"),Ws=m(" special method."),Bs=f(),M(Re.$$.fragment),Gs=f(),M(Fe.$$.fragment),Vs=f(),M(ze.$$.fragment),_n=f(),fe=r("h2"),Ce=r("a"),fo=r("span"),M(ut.$$.fragment),Us=f(),ho=r("span"),Js=m("ORTModelForQuestionAnswering"),$n=f(),A=r("div"),M(ft.$$.fragment),Ys=f(),go=r("p"),Zs=m("Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),Ks=f(),ht=r("p"),er=m("This model inherits from [~"),_o=r("code"),tr=m("onnxruntime.modeling_ort.ORTModel"),or=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),nr=f(),$o=r("p"),sr=m("Question Answering model for ONNX."),rr=f(),L=r("div"),M(gt.$$.fragment),ar=f(),he=r("p"),ir=m("The "),ko=r("code"),lr=m("ORTModelForQuestionAnswering"),mr=m(" forward method, overrides the "),wo=r("code"),pr=m("__call__"),cr=m(" special method."),dr=f(),M(Ae.$$.fragment),ur=f(),M(Pe.$$.fragment),fr=f(),M(Se.$$.fragment),kn=f(),ge=r("h2"),Ne=r("a"),vo=r("span"),M(_t.$$.fragment),hr=f(),xo=r("span"),gr=m("ORTModelForSequenceClassification"),wn=f(),P=r("div"),M($t.$$.fragment),_r=f(),To=r("p"),$r=m(`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),kr=f(),kt=r("p"),wr=m("This model inherits from [~"),bo=r("code"),vr=m("onnxruntime.modeling_ort.ORTModel"),xr=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Tr=f(),Mo=r("p"),br=m("Sequence Classification model for ONNX."),Mr=f(),z=r("div"),M(wt.$$.fragment),Or=f(),_e=r("p"),qr=m("The "),Oo=r("code"),yr=m("ORTModelForSequenceClassification"),Er=m(" forward method, overrides the "),qo=r("code"),jr=m("__call__"),Rr=m(" special method."),Fr=f(),M(Ie.$$.fragment),zr=f(),M(De.$$.fragment),Cr=f(),M(Le.$$.fragment),Ar=f(),M(He.$$.fragment),vn=f(),$e=r("h2"),Qe=r("a"),yo=r("span"),M(vt.$$.fragment),Pr=f(),Eo=r("span"),Sr=m("ORTModelForTokenClassification"),xn=f(),S=r("div"),M(xt.$$.fragment),Nr=f(),jo=r("p"),Ir=m(`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Dr=f(),Tt=r("p"),Lr=m("This model inherits from [~"),Ro=r("code"),Hr=m("onnxruntime.modeling_ort.ORTModel"),Qr=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Xr=f(),Fo=r("p"),Wr=m("Token Classification model for ONNX."),Br=f(),H=r("div"),M(bt.$$.fragment),Gr=f(),ke=r("p"),Vr=m("The "),zo=r("code"),Ur=m("ORTModelForTokenClassification"),Jr=m(" forward method, overrides the "),Co=r("code"),Yr=m("__call__"),Zr=m(" special method."),Kr=f(),M(Xe.$$.fragment),ea=f(),M(We.$$.fragment),ta=f(),M(Be.$$.fragment),Tn=f(),we=r("h2"),Ge=r("a"),Ao=r("span"),M(Mt.$$.fragment),oa=f(),Po=r("span"),na=m("ORTModelForCausalLM"),bn=f(),N=r("div"),M(Ot.$$.fragment),sa=f(),So=r("p"),ra=m(`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),aa=f(),qt=r("p"),ia=m("This model inherits from [~"),No=r("code"),la=m("onnxruntime.modeling_ort.ORTModel"),ma=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),pa=f(),Io=r("p"),ca=m("Causal LM model for ONNX."),da=f(),Q=r("div"),M(yt.$$.fragment),ua=f(),ve=r("p"),fa=m("The "),Do=r("code"),ha=m("ORTModelForCausalLM"),ga=m(" forward method, overrides the "),Lo=r("code"),_a=m("__call__"),$a=m(" special method."),ka=f(),M(Ve.$$.fragment),wa=f(),M(Ue.$$.fragment),va=f(),M(Je.$$.fragment),Mn=f(),xe=r("h2"),Ye=r("a"),Ho=r("span"),M(Et.$$.fragment),xa=f(),Qo=r("span"),Ta=m("ORTModelForSeq2SeqLM"),On=f(),Te=r("div"),M(jt.$$.fragment),ba=f(),Xo=r("p"),Ma=m("Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),this.h()},l(t){const g=Qi('[data-svelte="svelte-1phssyn"]',document.head);n=a(g,"META",{name:!0,content:!0}),g.forEach(o),_=h(t),d=a(t,"H1",{class:!0});var Rt=i(d);u=a(Rt,"A",{id:!0,class:!0,href:!0});var Wo=i(u);$=a(Wo,"SPAN",{});var Bo=i($);O(s.$$.fragment,Bo),Bo.forEach(o),Wo.forEach(o),l=h(Rt),x=a(Rt,"SPAN",{});var Go=i(x);c=p(Go,"Optimum Inference with ONNX Runtime"),Go.forEach(o),Rt.forEach(o),v=h(t),j=a(t,"P",{});var Ft=i(j);R=p(Ft,`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),F=a(Ft,"A",{href:!0});var Vo=i(F);Ct=p(Vo,"Hugging Face Hub"),Vo.forEach(o),At=p(Ft,` and create pipelines
to run accelerated inference without rewriting your APIs.`),Ft.forEach(o),nn=h(t),me=a(t,"H2",{class:!0});var zt=i(me);Me=a(zt,"A",{id:!0,class:!0,href:!0});var Uo=i(Me);Wt=a(Uo,"SPAN",{});var Jo=i(Wt);O(Ke.$$.fragment,Jo),Jo.forEach(o),Uo.forEach(o),Wn=h(zt),Bt=a(zt,"SPAN",{});var Yo=i(Bt);Bn=p(Yo,"Switching from Transformers to Optimum Inference"),Yo.forEach(o),zt.forEach(o),sn=h(t),I=a(t,"P",{});var W=i(I);Gn=p(W,"The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),Gt=a(W,"CODE",{});var Zo=i(Gt);Vn=p(Zo,"AutoModelForXxx"),Zo.forEach(o),Un=p(W," class with the corresponding "),Vt=a(W,"CODE",{});var Ko=i(Vt);Jn=p(Ko,"ORTModelForXxx"),Ko.forEach(o),Yn=p(W," class in "),Ut=a(W,"CODE",{});var en=i(Ut);Zn=p(en,"optimum"),en.forEach(o),Kn=p(W,". For example, this is how you can use a question answering model in "),Jt=a(W,"CODE",{});var tn=i(Jt);es=p(tn,"optimum"),tn.forEach(o),ts=p(W,":"),W.forEach(o),rn=h(t),O(et.$$.fragment,t),an=h(t),K=a(t,"P",{});var be=i(K);os=p(be,"Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),Yt=a(be,"CODE",{});var qa=i(Yt);ns=p(qa,"from_transformers=True"),qa.forEach(o),ss=p(be," to the "),Zt=a(be,"CODE",{});var ya=i(Zt);rs=p(ya,"from_pretrained()"),ya.forEach(o),as=p(be," method, and your model will be loaded and converted to ONNX on-the-fly:"),be.forEach(o),ln=h(t),O(tt.$$.fragment,t),mn=h(t),Oe=a(t,"P",{});var yn=i(Oe);is=p(yn,"You can find a complete walkhrough Optimum Inference for ONNX Runtime in this "),Pt=a(yn,"A",{href:!0});var Ea=i(Pt);ls=p(Ea,"notebook"),Ea.forEach(o),ms=p(yn,"."),yn.forEach(o),pn=h(t),pe=a(t,"H3",{class:!0});var En=i(pe);qe=a(En,"A",{id:!0,class:!0,href:!0});var ja=i(qe);Kt=a(ja,"SPAN",{});var Ra=i(Kt);O(ot.$$.fragment,Ra),Ra.forEach(o),ja.forEach(o),ps=h(En),eo=a(En,"SPAN",{});var Fa=i(eo);cs=p(Fa,"Working with the Hugging Face Model Hub"),Fa.forEach(o),En.forEach(o),cn=h(t),G=a(t,"P",{});var Ze=i(G);ds=p(Ze,"The Optimum model classes like "),St=a(Ze,"A",{href:!0});var za=i(St);us=p(za,"ORTModelForSequenceClassification"),za.forEach(o),fs=p(Ze," are integrated with the "),nt=a(Ze,"A",{href:!0,rel:!0});var Ca=i(nt);hs=p(Ca,"Hugging Face Model Hub"),Ca.forEach(o),gs=p(Ze,`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),to=a(Ze,"CODE",{});var Aa=i(to);_s=p(Aa,"push_to_hub()"),Aa.forEach(o),$s=p(Ze,` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),Ze.forEach(o),dn=h(t),O(st.$$.fragment,t),un=h(t),ce=a(t,"H2",{class:!0});var jn=i(ce);ye=a(jn,"A",{id:!0,class:!0,href:!0});var Pa=i(ye);oo=a(Pa,"SPAN",{});var Sa=i(oo);O(rt.$$.fragment,Sa),Sa.forEach(o),Pa.forEach(o),ks=h(jn),no=a(jn,"SPAN",{});var Na=i(no);ws=p(Na,"ORTModel"),Na.forEach(o),jn.forEach(o),fn=h(t),U=a(t,"DIV",{class:!0});var It=i(U);O(at.$$.fragment,It),vs=h(It),it=a(It,"P",{});var Rn=i(it);xs=p(Rn,`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),so=a(Rn,"CODE",{});var Ia=i(so);Ts=p(Ia,"transformers.onnx"),Ia.forEach(o),bs=p(Rn,` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Rn.forEach(o),Ms=h(It),Ee=a(It,"DIV",{class:!0});var Fn=i(Ee);O(lt.$$.fragment,Fn),Os=h(Fn),Nt=a(Fn,"P",{});var Oa=i(Nt);qs=p(Oa,"loads ONNX Inference session with Provider. Default Provider is if CUDAExecutionProvider GPU available else "),ro=a(Oa,"CODE",{});var Da=i(ro);ys=p(Da,"CPUExecutionProvider"),Da.forEach(o),Oa.forEach(o),Fn.forEach(o),It.forEach(o),hn=h(t),de=a(t,"H2",{class:!0});var zn=i(de);je=a(zn,"A",{id:!0,class:!0,href:!0});var La=i(je);ao=a(La,"SPAN",{});var Ha=i(ao);O(mt.$$.fragment,Ha),Ha.forEach(o),La.forEach(o),Es=h(zn),io=a(zn,"SPAN",{});var Qa=i(io);js=p(Qa,"ORTModelForFeatureExtraction"),Qa.forEach(o),zn.forEach(o),gn=h(t),C=a(t,"DIV",{class:!0});var ee=i(C);O(pt.$$.fragment,ee),Rs=h(ee),lo=a(ee,"P",{});var Xa=i(lo);Fs=p(Xa,"Onnx Model with a MaskedLMOutput for feature-extraction tasks."),Xa.forEach(o),zs=h(ee),ct=a(ee,"P",{});var Cn=i(ct);Cs=p(Cn,"This model inherits from [~"),mo=a(Cn,"CODE",{});var Wa=i(mo);As=p(Wa,"onnxruntime.modeling_ort.ORTModel"),Wa.forEach(o),Ps=p(Cn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Cn.forEach(o),Ss=h(ee),po=a(ee,"P",{});var Ba=i(po);Ns=p(Ba,"Feature Extraction model for ONNX."),Ba.forEach(o),Is=h(ee),D=a(ee,"DIV",{class:!0});var te=i(D);O(dt.$$.fragment,te),Ds=h(te),ue=a(te,"P",{});var Dt=i(ue);Ls=p(Dt,"The "),co=a(Dt,"CODE",{});var Ga=i(co);Hs=p(Ga,"ORTModelForFeatureExtraction"),Ga.forEach(o),Qs=p(Dt," forward method, overrides the "),uo=a(Dt,"CODE",{});var Va=i(uo);Xs=p(Va,"__call__"),Va.forEach(o),Ws=p(Dt," special method."),Dt.forEach(o),Bs=h(te),O(Re.$$.fragment,te),Gs=h(te),O(Fe.$$.fragment,te),Vs=h(te),O(ze.$$.fragment,te),te.forEach(o),ee.forEach(o),_n=h(t),fe=a(t,"H2",{class:!0});var An=i(fe);Ce=a(An,"A",{id:!0,class:!0,href:!0});var Ua=i(Ce);fo=a(Ua,"SPAN",{});var Ja=i(fo);O(ut.$$.fragment,Ja),Ja.forEach(o),Ua.forEach(o),Us=h(An),ho=a(An,"SPAN",{});var Ya=i(ho);Js=p(Ya,"ORTModelForQuestionAnswering"),Ya.forEach(o),An.forEach(o),$n=h(t),A=a(t,"DIV",{class:!0});var oe=i(A);O(ft.$$.fragment,oe),Ys=h(oe),go=a(oe,"P",{});var Za=i(go);Zs=p(Za,"Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),Za.forEach(o),Ks=h(oe),ht=a(oe,"P",{});var Pn=i(ht);er=p(Pn,"This model inherits from [~"),_o=a(Pn,"CODE",{});var Ka=i(_o);tr=p(Ka,"onnxruntime.modeling_ort.ORTModel"),Ka.forEach(o),or=p(Pn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Pn.forEach(o),nr=h(oe),$o=a(oe,"P",{});var ei=i($o);sr=p(ei,"Question Answering model for ONNX."),ei.forEach(o),rr=h(oe),L=a(oe,"DIV",{class:!0});var ne=i(L);O(gt.$$.fragment,ne),ar=h(ne),he=a(ne,"P",{});var Lt=i(he);ir=p(Lt,"The "),ko=a(Lt,"CODE",{});var ti=i(ko);lr=p(ti,"ORTModelForQuestionAnswering"),ti.forEach(o),mr=p(Lt," forward method, overrides the "),wo=a(Lt,"CODE",{});var oi=i(wo);pr=p(oi,"__call__"),oi.forEach(o),cr=p(Lt," special method."),Lt.forEach(o),dr=h(ne),O(Ae.$$.fragment,ne),ur=h(ne),O(Pe.$$.fragment,ne),fr=h(ne),O(Se.$$.fragment,ne),ne.forEach(o),oe.forEach(o),kn=h(t),ge=a(t,"H2",{class:!0});var Sn=i(ge);Ne=a(Sn,"A",{id:!0,class:!0,href:!0});var ni=i(Ne);vo=a(ni,"SPAN",{});var si=i(vo);O(_t.$$.fragment,si),si.forEach(o),ni.forEach(o),hr=h(Sn),xo=a(Sn,"SPAN",{});var ri=i(xo);gr=p(ri,"ORTModelForSequenceClassification"),ri.forEach(o),Sn.forEach(o),wn=h(t),P=a(t,"DIV",{class:!0});var se=i(P);O($t.$$.fragment,se),_r=h(se),To=a(se,"P",{});var ai=i(To);$r=p(ai,`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),ai.forEach(o),kr=h(se),kt=a(se,"P",{});var Nn=i(kt);wr=p(Nn,"This model inherits from [~"),bo=a(Nn,"CODE",{});var ii=i(bo);vr=p(ii,"onnxruntime.modeling_ort.ORTModel"),ii.forEach(o),xr=p(Nn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Nn.forEach(o),Tr=h(se),Mo=a(se,"P",{});var li=i(Mo);br=p(li,"Sequence Classification model for ONNX."),li.forEach(o),Mr=h(se),z=a(se,"DIV",{class:!0});var V=i(z);O(wt.$$.fragment,V),Or=h(V),_e=a(V,"P",{});var Ht=i(_e);qr=p(Ht,"The "),Oo=a(Ht,"CODE",{});var mi=i(Oo);yr=p(mi,"ORTModelForSequenceClassification"),mi.forEach(o),Er=p(Ht," forward method, overrides the "),qo=a(Ht,"CODE",{});var pi=i(qo);jr=p(pi,"__call__"),pi.forEach(o),Rr=p(Ht," special method."),Ht.forEach(o),Fr=h(V),O(Ie.$$.fragment,V),zr=h(V),O(De.$$.fragment,V),Cr=h(V),O(Le.$$.fragment,V),Ar=h(V),O(He.$$.fragment,V),V.forEach(o),se.forEach(o),vn=h(t),$e=a(t,"H2",{class:!0});var In=i($e);Qe=a(In,"A",{id:!0,class:!0,href:!0});var ci=i(Qe);yo=a(ci,"SPAN",{});var di=i(yo);O(vt.$$.fragment,di),di.forEach(o),ci.forEach(o),Pr=h(In),Eo=a(In,"SPAN",{});var ui=i(Eo);Sr=p(ui,"ORTModelForTokenClassification"),ui.forEach(o),In.forEach(o),xn=h(t),S=a(t,"DIV",{class:!0});var re=i(S);O(xt.$$.fragment,re),Nr=h(re),jo=a(re,"P",{});var fi=i(jo);Ir=p(fi,`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),fi.forEach(o),Dr=h(re),Tt=a(re,"P",{});var Dn=i(Tt);Lr=p(Dn,"This model inherits from [~"),Ro=a(Dn,"CODE",{});var hi=i(Ro);Hr=p(hi,"onnxruntime.modeling_ort.ORTModel"),hi.forEach(o),Qr=p(Dn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Dn.forEach(o),Xr=h(re),Fo=a(re,"P",{});var gi=i(Fo);Wr=p(gi,"Token Classification model for ONNX."),gi.forEach(o),Br=h(re),H=a(re,"DIV",{class:!0});var ae=i(H);O(bt.$$.fragment,ae),Gr=h(ae),ke=a(ae,"P",{});var Qt=i(ke);Vr=p(Qt,"The "),zo=a(Qt,"CODE",{});var _i=i(zo);Ur=p(_i,"ORTModelForTokenClassification"),_i.forEach(o),Jr=p(Qt," forward method, overrides the "),Co=a(Qt,"CODE",{});var $i=i(Co);Yr=p($i,"__call__"),$i.forEach(o),Zr=p(Qt," special method."),Qt.forEach(o),Kr=h(ae),O(Xe.$$.fragment,ae),ea=h(ae),O(We.$$.fragment,ae),ta=h(ae),O(Be.$$.fragment,ae),ae.forEach(o),re.forEach(o),Tn=h(t),we=a(t,"H2",{class:!0});var Ln=i(we);Ge=a(Ln,"A",{id:!0,class:!0,href:!0});var ki=i(Ge);Ao=a(ki,"SPAN",{});var wi=i(Ao);O(Mt.$$.fragment,wi),wi.forEach(o),ki.forEach(o),oa=h(Ln),Po=a(Ln,"SPAN",{});var vi=i(Po);na=p(vi,"ORTModelForCausalLM"),vi.forEach(o),Ln.forEach(o),bn=h(t),N=a(t,"DIV",{class:!0});var ie=i(N);O(Ot.$$.fragment,ie),sa=h(ie),So=a(ie,"P",{});var xi=i(So);ra=p(xi,`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),xi.forEach(o),aa=h(ie),qt=a(ie,"P",{});var Hn=i(qt);ia=p(Hn,"This model inherits from [~"),No=a(Hn,"CODE",{});var Ti=i(No);la=p(Ti,"onnxruntime.modeling_ort.ORTModel"),Ti.forEach(o),ma=p(Hn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Hn.forEach(o),pa=h(ie),Io=a(ie,"P",{});var bi=i(Io);ca=p(bi,"Causal LM model for ONNX."),bi.forEach(o),da=h(ie),Q=a(ie,"DIV",{class:!0});var le=i(Q);O(yt.$$.fragment,le),ua=h(le),ve=a(le,"P",{});var Xt=i(ve);fa=p(Xt,"The "),Do=a(Xt,"CODE",{});var Mi=i(Do);ha=p(Mi,"ORTModelForCausalLM"),Mi.forEach(o),ga=p(Xt," forward method, overrides the "),Lo=a(Xt,"CODE",{});var Oi=i(Lo);_a=p(Oi,"__call__"),Oi.forEach(o),$a=p(Xt," special method."),Xt.forEach(o),ka=h(le),O(Ve.$$.fragment,le),wa=h(le),O(Ue.$$.fragment,le),va=h(le),O(Je.$$.fragment,le),le.forEach(o),ie.forEach(o),Mn=h(t),xe=a(t,"H2",{class:!0});var Qn=i(xe);Ye=a(Qn,"A",{id:!0,class:!0,href:!0});var qi=i(Ye);Ho=a(qi,"SPAN",{});var yi=i(Ho);O(Et.$$.fragment,yi),yi.forEach(o),qi.forEach(o),xa=h(Qn),Qo=a(Qn,"SPAN",{});var Ei=i(Qo);Ta=p(Ei,"ORTModelForSeq2SeqLM"),Ei.forEach(o),Qn.forEach(o),On=h(t),Te=a(t,"DIV",{class:!0});var Xn=i(Te);O(jt.$$.fragment,Xn),ba=h(Xn),Xo=a(Xn,"P",{});var ji=i(Xo);Ma=p(ji,"Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),ji.forEach(o),Xn.forEach(o),this.h()},h(){w(n,"name","hf:doc:metadata"),w(n,"content",JSON.stringify(pl)),w(u,"id","optimum-inference-with-onnx-runtime"),w(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(u,"href","#optimum-inference-with-onnx-runtime"),w(d,"class","relative group"),w(F,"href","hf.co/models"),w(Me,"id","switching-from-transformers-to-optimum-inference"),w(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Me,"href","#switching-from-transformers-to-optimum-inference"),w(me,"class","relative group"),w(Pt,"href","todo:add-link"),w(qe,"id","working-with-the-hugging-face-model-hub"),w(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(qe,"href","#working-with-the-hugging-face-model-hub"),w(pe,"class","relative group"),w(St,"href","/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModelForSequenceClassification"),w(nt,"href","https://hf.co/models"),w(nt,"rel","nofollow"),w(ye,"id","optimum.onnxruntime.ORTModel"),w(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ye,"href","#optimum.onnxruntime.ORTModel"),w(ce,"class","relative group"),w(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(je,"id","optimum.onnxruntime.ORTModelForFeatureExtraction"),w(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(je,"href","#optimum.onnxruntime.ORTModelForFeatureExtraction"),w(de,"class","relative group"),w(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ce,"id","optimum.onnxruntime.ORTModelForQuestionAnswering"),w(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ce,"href","#optimum.onnxruntime.ORTModelForQuestionAnswering"),w(fe,"class","relative group"),w(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ne,"id","optimum.onnxruntime.ORTModelForSequenceClassification"),w(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ne,"href","#optimum.onnxruntime.ORTModelForSequenceClassification"),w(ge,"class","relative group"),w(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qe,"id","optimum.onnxruntime.ORTModelForTokenClassification"),w(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Qe,"href","#optimum.onnxruntime.ORTModelForTokenClassification"),w($e,"class","relative group"),w(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ge,"id","optimum.onnxruntime.ORTModelForCausalLM"),w(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ge,"href","#optimum.onnxruntime.ORTModelForCausalLM"),w(we,"class","relative group"),w(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ye,"id","optimum.onnxruntime.ORTModelForSeq2SeqLM"),w(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ye,"href","#optimum.onnxruntime.ORTModelForSeq2SeqLM"),w(xe,"class","relative group"),w(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,g){e(document.head,n),k(t,_,g),k(t,d,g),e(d,u),e(u,$),q(s,$,null),e(d,l),e(d,x),e(x,c),k(t,v,g),k(t,j,g),e(j,R),e(j,F),e(F,Ct),e(j,At),k(t,nn,g),k(t,me,g),e(me,Me),e(Me,Wt),q(Ke,Wt,null),e(me,Wn),e(me,Bt),e(Bt,Bn),k(t,sn,g),k(t,I,g),e(I,Gn),e(I,Gt),e(Gt,Vn),e(I,Un),e(I,Vt),e(Vt,Jn),e(I,Yn),e(I,Ut),e(Ut,Zn),e(I,Kn),e(I,Jt),e(Jt,es),e(I,ts),k(t,rn,g),q(et,t,g),k(t,an,g),k(t,K,g),e(K,os),e(K,Yt),e(Yt,ns),e(K,ss),e(K,Zt),e(Zt,rs),e(K,as),k(t,ln,g),q(tt,t,g),k(t,mn,g),k(t,Oe,g),e(Oe,is),e(Oe,Pt),e(Pt,ls),e(Oe,ms),k(t,pn,g),k(t,pe,g),e(pe,qe),e(qe,Kt),q(ot,Kt,null),e(pe,ps),e(pe,eo),e(eo,cs),k(t,cn,g),k(t,G,g),e(G,ds),e(G,St),e(St,us),e(G,fs),e(G,nt),e(nt,hs),e(G,gs),e(G,to),e(to,_s),e(G,$s),k(t,dn,g),q(st,t,g),k(t,un,g),k(t,ce,g),e(ce,ye),e(ye,oo),q(rt,oo,null),e(ce,ks),e(ce,no),e(no,ws),k(t,fn,g),k(t,U,g),q(at,U,null),e(U,vs),e(U,it),e(it,xs),e(it,so),e(so,Ts),e(it,bs),e(U,Ms),e(U,Ee),q(lt,Ee,null),e(Ee,Os),e(Ee,Nt),e(Nt,qs),e(Nt,ro),e(ro,ys),k(t,hn,g),k(t,de,g),e(de,je),e(je,ao),q(mt,ao,null),e(de,Es),e(de,io),e(io,js),k(t,gn,g),k(t,C,g),q(pt,C,null),e(C,Rs),e(C,lo),e(lo,Fs),e(C,zs),e(C,ct),e(ct,Cs),e(ct,mo),e(mo,As),e(ct,Ps),e(C,Ss),e(C,po),e(po,Ns),e(C,Is),e(C,D),q(dt,D,null),e(D,Ds),e(D,ue),e(ue,Ls),e(ue,co),e(co,Hs),e(ue,Qs),e(ue,uo),e(uo,Xs),e(ue,Ws),e(D,Bs),q(Re,D,null),e(D,Gs),q(Fe,D,null),e(D,Vs),q(ze,D,null),k(t,_n,g),k(t,fe,g),e(fe,Ce),e(Ce,fo),q(ut,fo,null),e(fe,Us),e(fe,ho),e(ho,Js),k(t,$n,g),k(t,A,g),q(ft,A,null),e(A,Ys),e(A,go),e(go,Zs),e(A,Ks),e(A,ht),e(ht,er),e(ht,_o),e(_o,tr),e(ht,or),e(A,nr),e(A,$o),e($o,sr),e(A,rr),e(A,L),q(gt,L,null),e(L,ar),e(L,he),e(he,ir),e(he,ko),e(ko,lr),e(he,mr),e(he,wo),e(wo,pr),e(he,cr),e(L,dr),q(Ae,L,null),e(L,ur),q(Pe,L,null),e(L,fr),q(Se,L,null),k(t,kn,g),k(t,ge,g),e(ge,Ne),e(Ne,vo),q(_t,vo,null),e(ge,hr),e(ge,xo),e(xo,gr),k(t,wn,g),k(t,P,g),q($t,P,null),e(P,_r),e(P,To),e(To,$r),e(P,kr),e(P,kt),e(kt,wr),e(kt,bo),e(bo,vr),e(kt,xr),e(P,Tr),e(P,Mo),e(Mo,br),e(P,Mr),e(P,z),q(wt,z,null),e(z,Or),e(z,_e),e(_e,qr),e(_e,Oo),e(Oo,yr),e(_e,Er),e(_e,qo),e(qo,jr),e(_e,Rr),e(z,Fr),q(Ie,z,null),e(z,zr),q(De,z,null),e(z,Cr),q(Le,z,null),e(z,Ar),q(He,z,null),k(t,vn,g),k(t,$e,g),e($e,Qe),e(Qe,yo),q(vt,yo,null),e($e,Pr),e($e,Eo),e(Eo,Sr),k(t,xn,g),k(t,S,g),q(xt,S,null),e(S,Nr),e(S,jo),e(jo,Ir),e(S,Dr),e(S,Tt),e(Tt,Lr),e(Tt,Ro),e(Ro,Hr),e(Tt,Qr),e(S,Xr),e(S,Fo),e(Fo,Wr),e(S,Br),e(S,H),q(bt,H,null),e(H,Gr),e(H,ke),e(ke,Vr),e(ke,zo),e(zo,Ur),e(ke,Jr),e(ke,Co),e(Co,Yr),e(ke,Zr),e(H,Kr),q(Xe,H,null),e(H,ea),q(We,H,null),e(H,ta),q(Be,H,null),k(t,Tn,g),k(t,we,g),e(we,Ge),e(Ge,Ao),q(Mt,Ao,null),e(we,oa),e(we,Po),e(Po,na),k(t,bn,g),k(t,N,g),q(Ot,N,null),e(N,sa),e(N,So),e(So,ra),e(N,aa),e(N,qt),e(qt,ia),e(qt,No),e(No,la),e(qt,ma),e(N,pa),e(N,Io),e(Io,ca),e(N,da),e(N,Q),q(yt,Q,null),e(Q,ua),e(Q,ve),e(ve,fa),e(ve,Do),e(Do,ha),e(ve,ga),e(ve,Lo),e(Lo,_a),e(ve,$a),e(Q,ka),q(Ve,Q,null),e(Q,wa),q(Ue,Q,null),e(Q,va),q(Je,Q,null),k(t,Mn,g),k(t,xe,g),e(xe,Ye),e(Ye,Ho),q(Et,Ho,null),e(xe,xa),e(xe,Qo),e(Qo,Ta),k(t,On,g),k(t,Te,g),q(jt,Te,null),e(Te,ba),e(Te,Xo),e(Xo,Ma),qn=!0},p(t,[g]){const Rt={};g&2&&(Rt.$$scope={dirty:g,ctx:t}),Re.$set(Rt);const Wo={};g&2&&(Wo.$$scope={dirty:g,ctx:t}),Fe.$set(Wo);const Bo={};g&2&&(Bo.$$scope={dirty:g,ctx:t}),ze.$set(Bo);const Go={};g&2&&(Go.$$scope={dirty:g,ctx:t}),Ae.$set(Go);const Ft={};g&2&&(Ft.$$scope={dirty:g,ctx:t}),Pe.$set(Ft);const Vo={};g&2&&(Vo.$$scope={dirty:g,ctx:t}),Se.$set(Vo);const zt={};g&2&&(zt.$$scope={dirty:g,ctx:t}),Ie.$set(zt);const Uo={};g&2&&(Uo.$$scope={dirty:g,ctx:t}),De.$set(Uo);const Jo={};g&2&&(Jo.$$scope={dirty:g,ctx:t}),Le.$set(Jo);const Yo={};g&2&&(Yo.$$scope={dirty:g,ctx:t}),He.$set(Yo);const W={};g&2&&(W.$$scope={dirty:g,ctx:t}),Xe.$set(W);const Zo={};g&2&&(Zo.$$scope={dirty:g,ctx:t}),We.$set(Zo);const Ko={};g&2&&(Ko.$$scope={dirty:g,ctx:t}),Be.$set(Ko);const en={};g&2&&(en.$$scope={dirty:g,ctx:t}),Ve.$set(en);const tn={};g&2&&(tn.$$scope={dirty:g,ctx:t}),Ue.$set(tn);const be={};g&2&&(be.$$scope={dirty:g,ctx:t}),Je.$set(be)},i(t){qn||(T(s.$$.fragment,t),T(Ke.$$.fragment,t),T(et.$$.fragment,t),T(tt.$$.fragment,t),T(ot.$$.fragment,t),T(st.$$.fragment,t),T(rt.$$.fragment,t),T(at.$$.fragment,t),T(lt.$$.fragment,t),T(mt.$$.fragment,t),T(pt.$$.fragment,t),T(dt.$$.fragment,t),T(Re.$$.fragment,t),T(Fe.$$.fragment,t),T(ze.$$.fragment,t),T(ut.$$.fragment,t),T(ft.$$.fragment,t),T(gt.$$.fragment,t),T(Ae.$$.fragment,t),T(Pe.$$.fragment,t),T(Se.$$.fragment,t),T(_t.$$.fragment,t),T($t.$$.fragment,t),T(wt.$$.fragment,t),T(Ie.$$.fragment,t),T(De.$$.fragment,t),T(Le.$$.fragment,t),T(He.$$.fragment,t),T(vt.$$.fragment,t),T(xt.$$.fragment,t),T(bt.$$.fragment,t),T(Xe.$$.fragment,t),T(We.$$.fragment,t),T(Be.$$.fragment,t),T(Mt.$$.fragment,t),T(Ot.$$.fragment,t),T(yt.$$.fragment,t),T(Ve.$$.fragment,t),T(Ue.$$.fragment,t),T(Je.$$.fragment,t),T(Et.$$.fragment,t),T(jt.$$.fragment,t),qn=!0)},o(t){b(s.$$.fragment,t),b(Ke.$$.fragment,t),b(et.$$.fragment,t),b(tt.$$.fragment,t),b(ot.$$.fragment,t),b(st.$$.fragment,t),b(rt.$$.fragment,t),b(at.$$.fragment,t),b(lt.$$.fragment,t),b(mt.$$.fragment,t),b(pt.$$.fragment,t),b(dt.$$.fragment,t),b(Re.$$.fragment,t),b(Fe.$$.fragment,t),b(ze.$$.fragment,t),b(ut.$$.fragment,t),b(ft.$$.fragment,t),b(gt.$$.fragment,t),b(Ae.$$.fragment,t),b(Pe.$$.fragment,t),b(Se.$$.fragment,t),b(_t.$$.fragment,t),b($t.$$.fragment,t),b(wt.$$.fragment,t),b(Ie.$$.fragment,t),b(De.$$.fragment,t),b(Le.$$.fragment,t),b(He.$$.fragment,t),b(vt.$$.fragment,t),b(xt.$$.fragment,t),b(bt.$$.fragment,t),b(Xe.$$.fragment,t),b(We.$$.fragment,t),b(Be.$$.fragment,t),b(Mt.$$.fragment,t),b(Ot.$$.fragment,t),b(yt.$$.fragment,t),b(Ve.$$.fragment,t),b(Ue.$$.fragment,t),b(Je.$$.fragment,t),b(Et.$$.fragment,t),b(jt.$$.fragment,t),qn=!1},d(t){o(n),t&&o(_),t&&o(d),y(s),t&&o(v),t&&o(j),t&&o(nn),t&&o(me),y(Ke),t&&o(sn),t&&o(I),t&&o(rn),y(et,t),t&&o(an),t&&o(K),t&&o(ln),y(tt,t),t&&o(mn),t&&o(Oe),t&&o(pn),t&&o(pe),y(ot),t&&o(cn),t&&o(G),t&&o(dn),y(st,t),t&&o(un),t&&o(ce),y(rt),t&&o(fn),t&&o(U),y(at),y(lt),t&&o(hn),t&&o(de),y(mt),t&&o(gn),t&&o(C),y(pt),y(dt),y(Re),y(Fe),y(ze),t&&o(_n),t&&o(fe),y(ut),t&&o($n),t&&o(A),y(ft),y(gt),y(Ae),y(Pe),y(Se),t&&o(kn),t&&o(ge),y(_t),t&&o(wn),t&&o(P),y($t),y(wt),y(Ie),y(De),y(Le),y(He),t&&o(vn),t&&o($e),y(vt),t&&o(xn),t&&o(S),y(xt),y(bt),y(Xe),y(We),y(Be),t&&o(Tn),t&&o(we),y(Mt),t&&o(bn),t&&o(N),y(Ot),y(yt),y(Ve),y(Ue),y(Je),t&&o(Mn),t&&o(xe),y(Et),t&&o(On),t&&o(Te),y(jt)}}}const pl={local:"optimum-inference-with-onnx-runtime",sections:[{local:"switching-from-transformers-to-optimum-inference",sections:[{local:"working-with-the-hugging-face-model-hub",title:"Working with the Hugging Face Model Hub"}],title:"Switching from Transformers to Optimum Inference"},{local:"optimum.onnxruntime.ORTModel",title:"ORTModel"},{local:"optimum.onnxruntime.ORTModelForFeatureExtraction",title:"ORTModelForFeatureExtraction"},{local:"optimum.onnxruntime.ORTModelForQuestionAnswering",title:"ORTModelForQuestionAnswering"},{local:"optimum.onnxruntime.ORTModelForSequenceClassification",title:"ORTModelForSequenceClassification"},{local:"optimum.onnxruntime.ORTModelForTokenClassification",title:"ORTModelForTokenClassification"},{local:"optimum.onnxruntime.ORTModelForCausalLM",title:"ORTModelForCausalLM"},{local:"optimum.onnxruntime.ORTModelForSeq2SeqLM",title:"ORTModelForSeq2SeqLM"}],title:"Optimum Inference with ONNX Runtime"};function cl(E){return Ai(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _l extends Fi{constructor(n){super();zi(this,n,cl,ml,Ci,{})}}export{_l as default,pl as metadata};
