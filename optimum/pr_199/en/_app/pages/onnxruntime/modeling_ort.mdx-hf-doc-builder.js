import{S as tm,i as om,s as nm,F as rm,e as a,w as M,k as f,c as i,a as l,x as O,d as o,m as h,b as v,g as k,G as e,y as q,P as am,H as im,I as lm,J as mm,q as T,o as b,B as y,v as sm,Z as pm,_ as cm,t as m,M as dm,h as p,L as Q}from"../../chunks/vendor-hf-doc-builder.js";import{T as ro}from"../../chunks/Tip-hf-doc-builder.js";import{D as C}from"../../chunks/Docstring-hf-doc-builder.js";import{C as z}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";const{window:um}=pm;function fm(j){let s,_,d,u,g,n,r,x,c;u=new te({props:{classNames:"text-smd"}});const w=j[4].default,E=rm(w,j,j[3],null);return{c(){s=a("div"),_=a("a"),d=a("span"),M(u.$$.fragment),n=f(),E&&E.c(),this.h()},l(R){s=i(R,"DIV",{class:!0});var F=l(s);_=i(F,"A",{id:!0,class:!0,href:!0});var ao=l(_);d=i(ao,"SPAN",{});var io=l(d);O(u.$$.fragment,io),io.forEach(o),ao.forEach(o),n=h(F),E&&E.l(F),F.forEach(o),this.h()},h(){v(_,"id",j[0]),v(_,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(_,"href",g=`#${j[0]}`),v(s,"class","relative group rounded-md")},m(R,F){k(R,s,F),e(s,_),e(_,d),q(u,d,null),e(s,n),E&&E.m(s,null),j[5](s),r=!0,x||(c=am(um,"hashchange",j[2]),x=!0)},p(R,[F]){(!r||F&1)&&v(_,"id",R[0]),(!r||F&1&&g!==(g=`#${R[0]}`))&&v(_,"href",g),E&&E.p&&(!r||F&8)&&im(E,w,R,R[3],r?mm(w,R[3],F,null):lm(R[3]),null)},i(R){r||(T(u.$$.fragment,R),T(E,R),r=!0)},o(R){b(u.$$.fragment,R),b(E,R),r=!1},d(R){R&&o(s),y(u),E&&E.d(R),j[5](null),x=!1,c()}}}const em="bg-yellow-50 dark:bg-[#494a3d]";function hm(j,s,_){let{$$slots:d={},$$scope:u}=s,{anchor:g}=s,n;function r(){const{hash:c}=window.location,w=c.substring(1);n&&n.classList.remove(...em.split(" ")),w===g&&n.classList.add(...em.split(" "))}sm(()=>{r()});function x(c){cm[c?"unshift":"push"](()=>{n=c,_(1,n)})}return j.$$set=c=>{"anchor"in c&&_(0,g=c.anchor),"$$scope"in c&&_(3,u=c.$$scope)},[g,n,r,u,d,x]}class H extends tm{constructor(s){super();om(this,s,hm,fm,nm,{anchor:0})}}function gm(j){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function _m(j){let s,_,d,u,g;return u=new z({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForFeatureExtraction
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of feature extraction:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of feature extraction:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),q(u,n,r),g=!0},p:Q,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),y(u,n)}}}function $m(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForFeatureExtraction

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipeline"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipeline"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function km(j){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function wm(j){let s,_,d,u,g;return u=new z({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForQuestionAnswering
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
inputs = tokenizer(question, text, return_tensors="pt")
start_positions = torch.tensor([1])
end_positions = torch.tensor([3])

outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
start_scores = outputs.start_logits
end_scores = outputs.end_logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_positions = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>end_positions = torch.tensor([<span class="hljs-number">3</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_scores = outputs.start_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>end_scores = outputs.end_logits`}}),{c(){s=a("p"),_=m("Example of question answering:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of question answering:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),q(u,n,r),g=!0},p:Q,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),y(u,n)}}}function vm(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForQuestionAnswering

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")
onnx_qa = pipeline("question-answering", model=model, tokenizer=tokenizer)

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
pred = onnx_qa(question, text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_qa = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_qa(question, text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipeline"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipeline"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function xm(j){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Tm(j){let s,_,d,u,g;return u=new z({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of single-label classification:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of single-label classification:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),q(u,n,r),g=!0},p:Q,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),y(u,n)}}}function bm(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

text = "Hello, my dog is cute"
pred = onnx_classifier(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_classifier(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipelines"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function Mm(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-mnli")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-mnli")
onnx_z0 = pipeline("zero-shot-classification", model=model, tokenizer=tokenizer)

sequence_to_classify = "Who are you voting for in 2020?"
candidate_labels = ["Europe", "public health", "politics", "elections"]
pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_z0 = pipeline(<span class="hljs-string">&quot;zero-shot-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_to_classify = <span class="hljs-string">&quot;Who are you voting for in 2020?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>candidate_labels = [<span class="hljs-string">&quot;Europe&quot;</span>, <span class="hljs-string">&quot;public health&quot;</span>, <span class="hljs-string">&quot;politics&quot;</span>, <span class="hljs-string">&quot;elections&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=<span class="hljs-literal">True</span>)`}}),{c(){s=a("p"),_=m("Example using zero-shot-classification "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using zero-shot-classification "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipelines"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function Om(j){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function qm(j){let s,_,d,u,g;return u=new z({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForTokenClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of token classification:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of token classification:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),q(u,n,r),g=!0},p:Q,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),y(u,n)}}}function ym(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForTokenClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")
onnx_ner = pipeline("token-classification", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_ner(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_ner = pipeline(<span class="hljs-string">&quot;token-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_ner(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipelines"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function jm(j){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Em(j){let s,_,d,u,g;return u=new z({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

gen_tokens = model.generate(**inputs,do_sample=True,temperature=0.9, min_length=20,max_length=20)
tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs,do_sample=<span class="hljs-literal">True</span>,temperature=<span class="hljs-number">0.9</span>, min_length=<span class="hljs-number">20</span>,max_length=<span class="hljs-number">20</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(gen_tokens)`}}),{c(){s=a("p"),_=m("Example of text generation:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of text generation:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),q(u,n,r),g=!0},p:Q,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),y(u,n)}}}function Rm(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")
onnx_gen = pipeline("text-generation", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
gen = onnx_gen(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_gen = pipeline(<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>gen = onnx_gen(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipelines"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function Fm(j){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function zm(j){let s,_,d,u,g;return u=new z({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("optimum/t5-small")
model = ORTModelForSeq2SeqLM.from_pretrained("optimum/t5-small")

inputs = tokenizer("My name is Eustache and I like to", return_tensors="pt")

gen_tokens = model.generate(**inputs)
outputs = tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Eustache and I like to&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = tokenizer.batch_decode(gen_tokens)`}}),{c(){s=a("p"),_=m("Example of text generation:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of text generation:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),q(u,n,r),g=!0},p:Q,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),y(u,n)}}}function Cm(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("optimum/t5-small")
model = ORTModelForSeq2SeqLM.from_pretrained("optimum/t5-small")
onnx_summarization = pipeline("translation_en_to_de", model=model, tokenizer=tokenizer)

text = "My name is Eustache."
pred = onnx_summarization(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;optimum/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_summarization = pipeline(<span class="hljs-string">&quot;translation_en_to_de&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Eustache.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_summarization(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipeline"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipeline"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function Am(j){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Sm(j){let s,_,d,u,g;return u=new z({props:{code:`from transformers import AutoFeatureExtractor
from optimum.onnxruntime import ORTModelForImageClassification
import torch

tokenizer = AutoFeatureExtractor.from_pretrained("optimum/vit-base-patch16-224")
model = ORTModelForImageClassification.from_pretrained("optimum/vit-base-patch16-224")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of feature extraction:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of feature extraction:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),q(u,n,r),g=!0},p:Q,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),y(u,n)}}}function Pm(j){let s,_,d,u,g,n,r,x;return r=new z({props:{code:`from transformers import AutoFeatureExtractor, pipeline
from optimum.onnxruntime import ORTModelForImageClassification

tokenizer = AutoFeatureExtractor.from_pretrained("optimum/vit-base-patch16-224")
model = ORTModelForImageClassification.from_pretrained("optimum/vit-base-patch16-224")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipeline"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var E=l(d);u=p(E,"transformers.pipeline"),E.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),q(r,c,w),x=!0},p:Q,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),y(r,c)}}}function Im(j){let s,_,d,u,g,n,r,x,c,w,E,R,F,ao,io,Xn,ge,Ce,$o,gt,zs,ko,Cs,Wn,X,As,wo,Ss,Ps,vo,Is,Ns,xo,Ls,Ds,To,Hs,Qs,Bn,_t,Gn,ne,Xs,bo,Ws,Bs,Mo,Gs,Vs,Vn,$t,Jn,_e,Ae,Oo,kt,Js,qo,Us,Un,Y,Zs,lo,Ks,Ys,wt,er,tr,yo,or,nr,Zn,vt,Kn,$e,Se,jo,xt,sr,Eo,rr,Yn,Z,Tt,ar,bt,ir,Ro,lr,mr,pr,Pe,Mt,cr,Ot,dr,Fo,ur,fr,hr,Ie,qt,gr,zo,_r,es,ke,Ne,Co,yt,$r,Ao,kr,ts,S,jt,wr,So,vr,xr,Et,Tr,Po,br,Mr,Or,Io,qr,yr,W,Rt,jr,we,Er,No,Rr,Fr,Lo,zr,Cr,Ar,Le,Sr,De,Pr,He,os,ve,Qe,Do,Ft,Ir,Ho,Nr,ns,P,zt,Lr,Qo,Dr,Hr,Ct,Qr,Xo,Xr,Wr,Br,Wo,Gr,Vr,B,At,Jr,xe,Ur,Bo,Zr,Kr,Go,Yr,ea,ta,Xe,oa,We,na,Be,ss,Te,Ge,Vo,St,sa,Jo,ra,rs,I,Pt,aa,Uo,ia,la,It,ma,Zo,pa,ca,da,Ko,ua,fa,A,Nt,ha,be,ga,Yo,_a,$a,en,ka,wa,va,Ve,xa,Je,Ta,Ue,ba,Ze,as,Me,Ke,tn,Lt,Ma,on,Oa,is,N,Dt,qa,nn,ya,ja,Ht,Ea,sn,Ra,Fa,za,rn,Ca,Aa,G,Qt,Sa,Oe,Pa,an,Ia,Na,ln,La,Da,Ha,Ye,Qa,et,Xa,tt,ls,qe,ot,mn,Xt,Wa,pn,Ba,ms,L,Wt,Ga,cn,Va,Ja,Bt,Ua,dn,Za,Ka,Ya,un,ei,ti,V,Gt,oi,ye,ni,fn,si,ri,hn,ai,ii,li,nt,mi,st,pi,rt,ps,je,at,gn,Vt,ci,_n,di,cs,oe,Jt,ui,$n,fi,hi,J,Ut,gi,Ee,_i,kn,$i,ki,wn,wi,vi,xi,it,Ti,lt,bi,mt,ds,Re,pt,vn,Zt,Mi,xn,Oi,us,D,Kt,qi,Tn,yi,ji,Yt,Ei,bn,Ri,Fi,zi,Mn,Ci,Ai,U,eo,Si,Fe,Pi,On,Ii,Ni,qn,Li,Di,Hi,ct,Qi,dt,Xi,ut,fs;return n=new te({}),gt=new te({}),_t=new z({props:{code:`

`,highlighted:`from transformers import AutoTokenizer, pipeline
<span class="hljs-deletion">-from transformers import AutoModelForQuestionAnswering</span>
<span class="hljs-addition">+from optimum.onnxruntime import ORTModelForQuestionAnswering</span>

<span class="hljs-deletion">-model = AutoModelForQuestionAnswering.from_pretrained(&quot;deepset/roberta-base-squad2&quot;) # pytorch checkpoint</span>
<span class="hljs-addition">+model = ORTModelForQuestionAnswering.from_pretrained(&quot;optimum/roberta-base-squad2&quot;) # onnx checkpoint</span>
tokenizer = AutoTokenizer.from_pretrained(&quot;deepset/roberta-base-squad2&quot;)

onnx_qa = pipeline(&quot;question-answering&quot;,model=model,tokenizer=tokenizer)

question = &quot;What&#x27;s my name?&quot;
context = &quot;My name is Philipp and I live in Nuremberg.&quot;
pred = onnx_qa(question, context)`}}),$t=new z({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english", from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

result = onnx_classifier("This is a great model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># Load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>, from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># Create pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>result = onnx_classifier(<span class="hljs-string">&quot;This is a great model&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998838901519775</span>}]`}}),kt=new te({}),vt=new z({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english", from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

model.save_pretrained("a_local_path_for_convert_onnx_model")
tokenizer.save_pretrained("a_local_path_for_convert_onnx_model")

model.push_to_hub("a_local_path_for_convert_onnx_model", repository_id="my-onnx-repo", use_auth_token=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># Load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>, from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># Save converted model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)

<span class="hljs-comment"># Push model onnx model to HF Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.push_to_hub(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>, repository_id=<span class="hljs-string">&quot;my-onnx-repo&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>)`}}),xt=new te({}),Tt=new C({props:{name:"class optimum.onnxruntime.ORTModel",anchor:"optimum.onnxruntime.ORTModel",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L82"}}),Mt=new C({props:{name:"load_model",anchor:"optimum.onnxruntime.ORTModel.load_model",parameters:[{name:"path",val:": typing.Union[str, pathlib.Path]"},{name:"provider",val:" = None"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModel.load_model.path",description:`<strong>path</strong> (<code>str</code> or <code>Path</code>) &#x2014;
Directory from which to load the model.`,name:"path"},{anchor:"optimum.onnxruntime.ORTModel.load_model.provider(str,",description:`<strong>provider(<code>str</code>,</strong> <em>optional</em>) &#x2014;
ONNX Runtime provider to use for loading the model. Defaults to <code>CPUExecutionProvider</code>.`,name:"provider(str,"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L122"}}),qt=new C({props:{name:"to",anchor:"optimum.onnxruntime.ORTModel.to",parameters:[{name:"device",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L110"}}),yt=new te({}),jt=new C({props:{name:"class optimum.onnxruntime.ORTModelForFeatureExtraction",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L320"}}),Rt=new C({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L334"}}),Le=new ro({props:{$$slots:{default:[gm]},$$scope:{ctx:j}}}),De=new H({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example",$$slots:{default:[_m]},$$scope:{ctx:j}}}),He=new H({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example-2",$$slots:{default:[$m]},$$scope:{ctx:j}}}),Ft=new te({}),zt=new C({props:{name:"class optimum.onnxruntime.ORTModelForQuestionAnswering",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L405"}}),At=new C({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L419"}}),Xe=new ro({props:{$$slots:{default:[km]},$$scope:{ctx:j}}}),We=new H({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example",$$slots:{default:[wm]},$$scope:{ctx:j}}}),Be=new H({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example-2",$$slots:{default:[vm]},$$scope:{ctx:j}}}),St=new te({}),Pt=new C({props:{name:"class optimum.onnxruntime.ORTModelForSequenceClassification",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L505"}}),Nt=new C({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L520"}}),Ve=new ro({props:{$$slots:{default:[xm]},$$scope:{ctx:j}}}),Je=new H({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example",$$slots:{default:[Tm]},$$scope:{ctx:j}}}),Ue=new H({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-2",$$slots:{default:[bm]},$$scope:{ctx:j}}}),Ze=new H({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-3",$$slots:{default:[Mm]},$$scope:{ctx:j}}}),Lt=new te({}),Dt=new C({props:{name:"class optimum.onnxruntime.ORTModelForTokenClassification",anchor:"optimum.onnxruntime.ORTModelForTokenClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L591"}}),Qt=new C({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L605"}}),Ye=new ro({props:{$$slots:{default:[Om]},$$scope:{ctx:j}}}),et=new H({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example",$$slots:{default:[qm]},$$scope:{ctx:j}}}),tt=new H({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example-2",$$slots:{default:[ym]},$$scope:{ctx:j}}}),Xt=new te({}),Wt=new C({props:{name:"class optimum.onnxruntime.ORTModelForCausalLM",anchor:"optimum.onnxruntime.ORTModelForCausalLM",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L674"}}),Gt=new C({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L698"}}),nt=new ro({props:{$$slots:{default:[jm]},$$scope:{ctx:j}}}),st=new H({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example",$$slots:{default:[Em]},$$scope:{ctx:j}}}),rt=new H({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example-2",$$slots:{default:[Rm]},$$scope:{ctx:j}}}),Vt=new te({}),Jt=new C({props:{name:"class optimum.onnxruntime.ORTModelForSeq2SeqLM",anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_seq2seq.py#L535"}}),Ut=new C({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"decoder_input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_outputs",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code>) &#x2014;
Indices of input sequence tokens in the vocabulary of shape <code>(batch_size, encoder_sequence_length)</code>.`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.LongTensor</code>) &#x2014;
Mask to avoid performing attention on padding token indices, of shape
<code>(batch_size, encoder_sequence_length)</code>. Mask values selected in <code>[0, 1]</code>.`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.decoder_input_ids",description:`<strong>decoder_input_ids</strong> (<code>torch.LongTensor</code>) &#x2014;
Indices of decoder input sequence tokens in the vocabulary of shape <code>(batch_size, decoder_sequence_length)</code>.`,name:"decoder_input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
The encoder <code>last_hidden_state</code> of shape <code>(batch_size, encoder_sequence_length, hidden_size)</code>.`,name:"encoder_outputs"},{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor), *optional*)</code> &#x2014;
Contains the precomputed key and value hidden states of the attention blocks used to speed up decoding.
The tuple is of length <code>config.n_layers</code> with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, decoder_sequence_length, embed_size_per_head)</code> and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.`,name:"past_key_values"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_seq2seq.py#L544"}}),it=new ro({props:{$$slots:{default:[Fm]},$$scope:{ctx:j}}}),lt=new H({props:{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.example",$$slots:{default:[zm]},$$scope:{ctx:j}}}),mt=new H({props:{anchor:"optimum.onnxruntime.ORTModelForSeq2SeqLM.forward.example-2",$$slots:{default:[Cm]},$$scope:{ctx:j}}}),Zt=new te({}),Kt=new C({props:{name:"class optimum.onnxruntime.ORTModelForImageClassification",anchor:"optimum.onnxruntime.ORTModelForImageClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForImageClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L792"}}),eo=new C({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_199/src/optimum/onnxruntime/modeling_ort.py#L806"}}),ct=new ro({props:{$$slots:{default:[Am]},$$scope:{ctx:j}}}),dt=new H({props:{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.example",$$slots:{default:[Sm]},$$scope:{ctx:j}}}),ut=new H({props:{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.example-2",$$slots:{default:[Pm]},$$scope:{ctx:j}}}),{c(){s=a("meta"),_=f(),d=a("h1"),u=a("a"),g=a("span"),M(n.$$.fragment),r=f(),x=a("span"),c=m("Optimum Inference with ONNX Runtime"),w=f(),E=a("p"),R=m(`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),F=a("a"),ao=m("Hugging Face Hub"),io=m(` and create pipelines
to run accelerated inference without rewriting your APIs.`),Xn=f(),ge=a("h2"),Ce=a("a"),$o=a("span"),M(gt.$$.fragment),zs=f(),ko=a("span"),Cs=m("Switching from Transformers to Optimum Inference"),Wn=f(),X=a("p"),As=m("The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),wo=a("code"),Ss=m("AutoModelForXxx"),Ps=m(" class with the corresponding "),vo=a("code"),Is=m("ORTModelForXxx"),Ns=m(" class in "),xo=a("code"),Ls=m("optimum"),Ds=m(". For example, this is how you can use a question answering model in "),To=a("code"),Hs=m("optimum"),Qs=m(":"),Bn=f(),M(_t.$$.fragment),Gn=f(),ne=a("p"),Xs=m("Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),bo=a("code"),Ws=m("from_transformers=True"),Bs=m(" to the "),Mo=a("code"),Gs=m("from_pretrained()"),Vs=m(" method, and your model will be loaded and converted to ONNX on-the-fly:"),Vn=f(),M($t.$$.fragment),Jn=f(),_e=a("h3"),Ae=a("a"),Oo=a("span"),M(kt.$$.fragment),Js=f(),qo=a("span"),Us=m("Working with the Hugging Face Model Hub"),Un=f(),Y=a("p"),Zs=m("The Optimum model classes like "),lo=a("a"),Ks=m("ORTModelForSequenceClassification"),Ys=m(" are integrated with the "),wt=a("a"),er=m("Hugging Face Model Hub"),tr=m(`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),yo=a("code"),or=m("push_to_hub()"),nr=m(` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),Zn=f(),M(vt.$$.fragment),Kn=f(),$e=a("h2"),Se=a("a"),jo=a("span"),M(xt.$$.fragment),sr=f(),Eo=a("span"),rr=m("ORTModel"),Yn=f(),Z=a("div"),M(Tt.$$.fragment),ar=f(),bt=a("p"),ir=m(`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),Ro=a("code"),lr=m("transformers.onnx"),mr=m(` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),pr=f(),Pe=a("div"),M(Mt.$$.fragment),cr=f(),Ot=a("p"),dr=m("Loads an ONNX Inference session with a given provider. Default provider is "),Fo=a("code"),ur=m("CPUExecutionProvider"),fr=m(" to match the default behaviour in PyTorch/TensorFlow/JAX."),hr=f(),Ie=a("div"),M(qt.$$.fragment),gr=f(),zo=a("p"),_r=m("Changes the ONNX Runtime provider according to the device."),es=f(),ke=a("h2"),Ne=a("a"),Co=a("span"),M(yt.$$.fragment),$r=f(),Ao=a("span"),kr=m("ORTModelForFeatureExtraction"),ts=f(),S=a("div"),M(jt.$$.fragment),wr=f(),So=a("p"),vr=m("Onnx Model with a MaskedLMOutput for feature-extraction tasks."),xr=f(),Et=a("p"),Tr=m("This model inherits from [~"),Po=a("code"),br=m("onnxruntime.modeling_ort.ORTModel"),Mr=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Or=f(),Io=a("p"),qr=m("Feature Extraction model for ONNX."),yr=f(),W=a("div"),M(Rt.$$.fragment),jr=f(),we=a("p"),Er=m("The "),No=a("code"),Rr=m("ORTModelForFeatureExtraction"),Fr=m(" forward method, overrides the "),Lo=a("code"),zr=m("__call__"),Cr=m(" special method."),Ar=f(),M(Le.$$.fragment),Sr=f(),M(De.$$.fragment),Pr=f(),M(He.$$.fragment),os=f(),ve=a("h2"),Qe=a("a"),Do=a("span"),M(Ft.$$.fragment),Ir=f(),Ho=a("span"),Nr=m("ORTModelForQuestionAnswering"),ns=f(),P=a("div"),M(zt.$$.fragment),Lr=f(),Qo=a("p"),Dr=m("Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),Hr=f(),Ct=a("p"),Qr=m("This model inherits from [~"),Xo=a("code"),Xr=m("onnxruntime.modeling_ort.ORTModel"),Wr=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Br=f(),Wo=a("p"),Gr=m("Question Answering model for ONNX."),Vr=f(),B=a("div"),M(At.$$.fragment),Jr=f(),xe=a("p"),Ur=m("The "),Bo=a("code"),Zr=m("ORTModelForQuestionAnswering"),Kr=m(" forward method, overrides the "),Go=a("code"),Yr=m("__call__"),ea=m(" special method."),ta=f(),M(Xe.$$.fragment),oa=f(),M(We.$$.fragment),na=f(),M(Be.$$.fragment),ss=f(),Te=a("h2"),Ge=a("a"),Vo=a("span"),M(St.$$.fragment),sa=f(),Jo=a("span"),ra=m("ORTModelForSequenceClassification"),rs=f(),I=a("div"),M(Pt.$$.fragment),aa=f(),Uo=a("p"),ia=m(`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),la=f(),It=a("p"),ma=m("This model inherits from [~"),Zo=a("code"),pa=m("onnxruntime.modeling_ort.ORTModel"),ca=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),da=f(),Ko=a("p"),ua=m("Sequence Classification model for ONNX."),fa=f(),A=a("div"),M(Nt.$$.fragment),ha=f(),be=a("p"),ga=m("The "),Yo=a("code"),_a=m("ORTModelForSequenceClassification"),$a=m(" forward method, overrides the "),en=a("code"),ka=m("__call__"),wa=m(" special method."),va=f(),M(Ve.$$.fragment),xa=f(),M(Je.$$.fragment),Ta=f(),M(Ue.$$.fragment),ba=f(),M(Ze.$$.fragment),as=f(),Me=a("h2"),Ke=a("a"),tn=a("span"),M(Lt.$$.fragment),Ma=f(),on=a("span"),Oa=m("ORTModelForTokenClassification"),is=f(),N=a("div"),M(Dt.$$.fragment),qa=f(),nn=a("p"),ya=m(`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),ja=f(),Ht=a("p"),Ea=m("This model inherits from [~"),sn=a("code"),Ra=m("onnxruntime.modeling_ort.ORTModel"),Fa=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),za=f(),rn=a("p"),Ca=m("Token Classification model for ONNX."),Aa=f(),G=a("div"),M(Qt.$$.fragment),Sa=f(),Oe=a("p"),Pa=m("The "),an=a("code"),Ia=m("ORTModelForTokenClassification"),Na=m(" forward method, overrides the "),ln=a("code"),La=m("__call__"),Da=m(" special method."),Ha=f(),M(Ye.$$.fragment),Qa=f(),M(et.$$.fragment),Xa=f(),M(tt.$$.fragment),ls=f(),qe=a("h2"),ot=a("a"),mn=a("span"),M(Xt.$$.fragment),Wa=f(),pn=a("span"),Ba=m("ORTModelForCausalLM"),ms=f(),L=a("div"),M(Wt.$$.fragment),Ga=f(),cn=a("p"),Va=m(`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),Ja=f(),Bt=a("p"),Ua=m("This model inherits from [~"),dn=a("code"),Za=m("onnxruntime.modeling_ort.ORTModel"),Ka=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Ya=f(),un=a("p"),ei=m("Causal LM model for ONNX."),ti=f(),V=a("div"),M(Gt.$$.fragment),oi=f(),ye=a("p"),ni=m("The "),fn=a("code"),si=m("ORTModelForCausalLM"),ri=m(" forward method, overrides the "),hn=a("code"),ai=m("__call__"),ii=m(" special method."),li=f(),M(nt.$$.fragment),mi=f(),M(st.$$.fragment),pi=f(),M(rt.$$.fragment),ps=f(),je=a("h2"),at=a("a"),gn=a("span"),M(Vt.$$.fragment),ci=f(),_n=a("span"),di=m("ORTModelForSeq2SeqLM"),cs=f(),oe=a("div"),M(Jt.$$.fragment),ui=f(),$n=a("p"),fi=m("Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),hi=f(),J=a("div"),M(Ut.$$.fragment),gi=f(),Ee=a("p"),_i=m("The "),kn=a("code"),$i=m("ORTModelForSeq2SeqLM"),ki=m(" forward method, overrides the "),wn=a("code"),wi=m("__call__"),vi=m(" special method."),xi=f(),M(it.$$.fragment),Ti=f(),M(lt.$$.fragment),bi=f(),M(mt.$$.fragment),ds=f(),Re=a("h2"),pt=a("a"),vn=a("span"),M(Zt.$$.fragment),Mi=f(),xn=a("span"),Oi=m("ORTModelForImageClassification"),us=f(),D=a("div"),M(Kt.$$.fragment),qi=f(),Tn=a("p"),yi=m("Onnx Model for image-classification tasks."),ji=f(),Yt=a("p"),Ei=m("This model inherits from [~"),bn=a("code"),Ri=m("onnxruntime.modeling_ort.ORTModel"),Fi=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),zi=f(),Mn=a("p"),Ci=m("Image Classification model for ONNX."),Ai=f(),U=a("div"),M(eo.$$.fragment),Si=f(),Fe=a("p"),Pi=m("The "),On=a("code"),Ii=m("ORTModelForImageClassification"),Ni=m(" forward method, overrides the "),qn=a("code"),Li=m("__call__"),Di=m(" special method."),Hi=f(),M(ct.$$.fragment),Qi=f(),M(dt.$$.fragment),Xi=f(),M(ut.$$.fragment),this.h()},l(t){const $=dm('[data-svelte="svelte-1phssyn"]',document.head);s=i($,"META",{name:!0,content:!0}),$.forEach(o),_=h(t),d=i(t,"H1",{class:!0});var to=l(d);u=i(to,"A",{id:!0,class:!0,href:!0});var yn=l(u);g=i(yn,"SPAN",{});var jn=l(g);O(n.$$.fragment,jn),jn.forEach(o),yn.forEach(o),r=h(to),x=i(to,"SPAN",{});var En=l(x);c=p(En,"Optimum Inference with ONNX Runtime"),En.forEach(o),to.forEach(o),w=h(t),E=i(t,"P",{});var oo=l(E);R=p(oo,`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),F=i(oo,"A",{href:!0});var Rn=l(F);ao=p(Rn,"Hugging Face Hub"),Rn.forEach(o),io=p(oo,` and create pipelines
to run accelerated inference without rewriting your APIs.`),oo.forEach(o),Xn=h(t),ge=i(t,"H2",{class:!0});var no=l(ge);Ce=i(no,"A",{id:!0,class:!0,href:!0});var Fn=l(Ce);$o=i(Fn,"SPAN",{});var zn=l($o);O(gt.$$.fragment,zn),zn.forEach(o),Fn.forEach(o),zs=h(no),ko=i(no,"SPAN",{});var Cn=l(ko);Cs=p(Cn,"Switching from Transformers to Optimum Inference"),Cn.forEach(o),no.forEach(o),Wn=h(t),X=i(t,"P",{});var K=l(X);As=p(K,"The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),wo=i(K,"CODE",{});var An=l(wo);Ss=p(An,"AutoModelForXxx"),An.forEach(o),Ps=p(K," class with the corresponding "),vo=i(K,"CODE",{});var Sn=l(vo);Is=p(Sn,"ORTModelForXxx"),Sn.forEach(o),Ns=p(K," class in "),xo=i(K,"CODE",{});var Pn=l(xo);Ls=p(Pn,"optimum"),Pn.forEach(o),Ds=p(K,". For example, this is how you can use a question answering model in "),To=i(K,"CODE",{});var In=l(To);Hs=p(In,"optimum"),In.forEach(o),Qs=p(K,":"),K.forEach(o),Bn=h(t),O(_t.$$.fragment,t),Gn=h(t),ne=i(t,"P",{});var ze=l(ne);Xs=p(ze,"Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),bo=i(ze,"CODE",{});var Nn=l(bo);Ws=p(Nn,"from_transformers=True"),Nn.forEach(o),Bs=p(ze," to the "),Mo=i(ze,"CODE",{});var Ln=l(Mo);Gs=p(Ln,"from_pretrained()"),Ln.forEach(o),Vs=p(ze," method, and your model will be loaded and converted to ONNX on-the-fly:"),ze.forEach(o),Vn=h(t),O($t.$$.fragment,t),Jn=h(t),_e=i(t,"H3",{class:!0});var so=l(_e);Ae=i(so,"A",{id:!0,class:!0,href:!0});var Dn=l(Ae);Oo=i(Dn,"SPAN",{});var Hn=l(Oo);O(kt.$$.fragment,Hn),Hn.forEach(o),Dn.forEach(o),Js=h(so),qo=i(so,"SPAN",{});var Qn=l(qo);Us=p(Qn,"Working with the Hugging Face Model Hub"),Qn.forEach(o),so.forEach(o),Un=h(t),Y=i(t,"P",{});var ft=l(Y);Zs=p(ft,"The Optimum model classes like "),lo=i(ft,"A",{href:!0});var Wi=l(lo);Ks=p(Wi,"ORTModelForSequenceClassification"),Wi.forEach(o),Ys=p(ft," are integrated with the "),wt=i(ft,"A",{href:!0,rel:!0});var Bi=l(wt);er=p(Bi,"Hugging Face Model Hub"),Bi.forEach(o),tr=p(ft,`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),yo=i(ft,"CODE",{});var Gi=l(yo);or=p(Gi,"push_to_hub()"),Gi.forEach(o),nr=p(ft,` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),ft.forEach(o),Zn=h(t),O(vt.$$.fragment,t),Kn=h(t),$e=i(t,"H2",{class:!0});var hs=l($e);Se=i(hs,"A",{id:!0,class:!0,href:!0});var Vi=l(Se);jo=i(Vi,"SPAN",{});var Ji=l(jo);O(xt.$$.fragment,Ji),Ji.forEach(o),Vi.forEach(o),sr=h(hs),Eo=i(hs,"SPAN",{});var Ui=l(Eo);rr=p(Ui,"ORTModel"),Ui.forEach(o),hs.forEach(o),Yn=h(t),Z=i(t,"DIV",{class:!0});var ht=l(Z);O(Tt.$$.fragment,ht),ar=h(ht),bt=i(ht,"P",{});var gs=l(bt);ir=p(gs,`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),Ro=i(gs,"CODE",{});var Zi=l(Ro);lr=p(Zi,"transformers.onnx"),Zi.forEach(o),mr=p(gs,` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),gs.forEach(o),pr=h(ht),Pe=i(ht,"DIV",{class:!0});var _s=l(Pe);O(Mt.$$.fragment,_s),cr=h(_s),Ot=i(_s,"P",{});var $s=l(Ot);dr=p($s,"Loads an ONNX Inference session with a given provider. Default provider is "),Fo=i($s,"CODE",{});var Ki=l(Fo);ur=p(Ki,"CPUExecutionProvider"),Ki.forEach(o),fr=p($s," to match the default behaviour in PyTorch/TensorFlow/JAX."),$s.forEach(o),_s.forEach(o),hr=h(ht),Ie=i(ht,"DIV",{class:!0});var ks=l(Ie);O(qt.$$.fragment,ks),gr=h(ks),zo=i(ks,"P",{});var Yi=l(zo);_r=p(Yi,"Changes the ONNX Runtime provider according to the device."),Yi.forEach(o),ks.forEach(o),ht.forEach(o),es=h(t),ke=i(t,"H2",{class:!0});var ws=l(ke);Ne=i(ws,"A",{id:!0,class:!0,href:!0});var el=l(Ne);Co=i(el,"SPAN",{});var tl=l(Co);O(yt.$$.fragment,tl),tl.forEach(o),el.forEach(o),$r=h(ws),Ao=i(ws,"SPAN",{});var ol=l(Ao);kr=p(ol,"ORTModelForFeatureExtraction"),ol.forEach(o),ws.forEach(o),ts=h(t),S=i(t,"DIV",{class:!0});var se=l(S);O(jt.$$.fragment,se),wr=h(se),So=i(se,"P",{});var nl=l(So);vr=p(nl,"Onnx Model with a MaskedLMOutput for feature-extraction tasks."),nl.forEach(o),xr=h(se),Et=i(se,"P",{});var vs=l(Et);Tr=p(vs,"This model inherits from [~"),Po=i(vs,"CODE",{});var sl=l(Po);br=p(sl,"onnxruntime.modeling_ort.ORTModel"),sl.forEach(o),Mr=p(vs,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),vs.forEach(o),Or=h(se),Io=i(se,"P",{});var rl=l(Io);qr=p(rl,"Feature Extraction model for ONNX."),rl.forEach(o),yr=h(se),W=i(se,"DIV",{class:!0});var re=l(W);O(Rt.$$.fragment,re),jr=h(re),we=i(re,"P",{});var mo=l(we);Er=p(mo,"The "),No=i(mo,"CODE",{});var al=l(No);Rr=p(al,"ORTModelForFeatureExtraction"),al.forEach(o),Fr=p(mo," forward method, overrides the "),Lo=i(mo,"CODE",{});var il=l(Lo);zr=p(il,"__call__"),il.forEach(o),Cr=p(mo," special method."),mo.forEach(o),Ar=h(re),O(Le.$$.fragment,re),Sr=h(re),O(De.$$.fragment,re),Pr=h(re),O(He.$$.fragment,re),re.forEach(o),se.forEach(o),os=h(t),ve=i(t,"H2",{class:!0});var xs=l(ve);Qe=i(xs,"A",{id:!0,class:!0,href:!0});var ll=l(Qe);Do=i(ll,"SPAN",{});var ml=l(Do);O(Ft.$$.fragment,ml),ml.forEach(o),ll.forEach(o),Ir=h(xs),Ho=i(xs,"SPAN",{});var pl=l(Ho);Nr=p(pl,"ORTModelForQuestionAnswering"),pl.forEach(o),xs.forEach(o),ns=h(t),P=i(t,"DIV",{class:!0});var ae=l(P);O(zt.$$.fragment,ae),Lr=h(ae),Qo=i(ae,"P",{});var cl=l(Qo);Dr=p(cl,"Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),cl.forEach(o),Hr=h(ae),Ct=i(ae,"P",{});var Ts=l(Ct);Qr=p(Ts,"This model inherits from [~"),Xo=i(Ts,"CODE",{});var dl=l(Xo);Xr=p(dl,"onnxruntime.modeling_ort.ORTModel"),dl.forEach(o),Wr=p(Ts,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Ts.forEach(o),Br=h(ae),Wo=i(ae,"P",{});var ul=l(Wo);Gr=p(ul,"Question Answering model for ONNX."),ul.forEach(o),Vr=h(ae),B=i(ae,"DIV",{class:!0});var ie=l(B);O(At.$$.fragment,ie),Jr=h(ie),xe=i(ie,"P",{});var po=l(xe);Ur=p(po,"The "),Bo=i(po,"CODE",{});var fl=l(Bo);Zr=p(fl,"ORTModelForQuestionAnswering"),fl.forEach(o),Kr=p(po," forward method, overrides the "),Go=i(po,"CODE",{});var hl=l(Go);Yr=p(hl,"__call__"),hl.forEach(o),ea=p(po," special method."),po.forEach(o),ta=h(ie),O(Xe.$$.fragment,ie),oa=h(ie),O(We.$$.fragment,ie),na=h(ie),O(Be.$$.fragment,ie),ie.forEach(o),ae.forEach(o),ss=h(t),Te=i(t,"H2",{class:!0});var bs=l(Te);Ge=i(bs,"A",{id:!0,class:!0,href:!0});var gl=l(Ge);Vo=i(gl,"SPAN",{});var _l=l(Vo);O(St.$$.fragment,_l),_l.forEach(o),gl.forEach(o),sa=h(bs),Jo=i(bs,"SPAN",{});var $l=l(Jo);ra=p($l,"ORTModelForSequenceClassification"),$l.forEach(o),bs.forEach(o),rs=h(t),I=i(t,"DIV",{class:!0});var le=l(I);O(Pt.$$.fragment,le),aa=h(le),Uo=i(le,"P",{});var kl=l(Uo);ia=p(kl,`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),kl.forEach(o),la=h(le),It=i(le,"P",{});var Ms=l(It);ma=p(Ms,"This model inherits from [~"),Zo=i(Ms,"CODE",{});var wl=l(Zo);pa=p(wl,"onnxruntime.modeling_ort.ORTModel"),wl.forEach(o),ca=p(Ms,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Ms.forEach(o),da=h(le),Ko=i(le,"P",{});var vl=l(Ko);ua=p(vl,"Sequence Classification model for ONNX."),vl.forEach(o),fa=h(le),A=i(le,"DIV",{class:!0});var ee=l(A);O(Nt.$$.fragment,ee),ha=h(ee),be=i(ee,"P",{});var co=l(be);ga=p(co,"The "),Yo=i(co,"CODE",{});var xl=l(Yo);_a=p(xl,"ORTModelForSequenceClassification"),xl.forEach(o),$a=p(co," forward method, overrides the "),en=i(co,"CODE",{});var Tl=l(en);ka=p(Tl,"__call__"),Tl.forEach(o),wa=p(co," special method."),co.forEach(o),va=h(ee),O(Ve.$$.fragment,ee),xa=h(ee),O(Je.$$.fragment,ee),Ta=h(ee),O(Ue.$$.fragment,ee),ba=h(ee),O(Ze.$$.fragment,ee),ee.forEach(o),le.forEach(o),as=h(t),Me=i(t,"H2",{class:!0});var Os=l(Me);Ke=i(Os,"A",{id:!0,class:!0,href:!0});var bl=l(Ke);tn=i(bl,"SPAN",{});var Ml=l(tn);O(Lt.$$.fragment,Ml),Ml.forEach(o),bl.forEach(o),Ma=h(Os),on=i(Os,"SPAN",{});var Ol=l(on);Oa=p(Ol,"ORTModelForTokenClassification"),Ol.forEach(o),Os.forEach(o),is=h(t),N=i(t,"DIV",{class:!0});var me=l(N);O(Dt.$$.fragment,me),qa=h(me),nn=i(me,"P",{});var ql=l(nn);ya=p(ql,`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),ql.forEach(o),ja=h(me),Ht=i(me,"P",{});var qs=l(Ht);Ea=p(qs,"This model inherits from [~"),sn=i(qs,"CODE",{});var yl=l(sn);Ra=p(yl,"onnxruntime.modeling_ort.ORTModel"),yl.forEach(o),Fa=p(qs,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),qs.forEach(o),za=h(me),rn=i(me,"P",{});var jl=l(rn);Ca=p(jl,"Token Classification model for ONNX."),jl.forEach(o),Aa=h(me),G=i(me,"DIV",{class:!0});var pe=l(G);O(Qt.$$.fragment,pe),Sa=h(pe),Oe=i(pe,"P",{});var uo=l(Oe);Pa=p(uo,"The "),an=i(uo,"CODE",{});var El=l(an);Ia=p(El,"ORTModelForTokenClassification"),El.forEach(o),Na=p(uo," forward method, overrides the "),ln=i(uo,"CODE",{});var Rl=l(ln);La=p(Rl,"__call__"),Rl.forEach(o),Da=p(uo," special method."),uo.forEach(o),Ha=h(pe),O(Ye.$$.fragment,pe),Qa=h(pe),O(et.$$.fragment,pe),Xa=h(pe),O(tt.$$.fragment,pe),pe.forEach(o),me.forEach(o),ls=h(t),qe=i(t,"H2",{class:!0});var ys=l(qe);ot=i(ys,"A",{id:!0,class:!0,href:!0});var Fl=l(ot);mn=i(Fl,"SPAN",{});var zl=l(mn);O(Xt.$$.fragment,zl),zl.forEach(o),Fl.forEach(o),Wa=h(ys),pn=i(ys,"SPAN",{});var Cl=l(pn);Ba=p(Cl,"ORTModelForCausalLM"),Cl.forEach(o),ys.forEach(o),ms=h(t),L=i(t,"DIV",{class:!0});var ce=l(L);O(Wt.$$.fragment,ce),Ga=h(ce),cn=i(ce,"P",{});var Al=l(cn);Va=p(Al,`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),Al.forEach(o),Ja=h(ce),Bt=i(ce,"P",{});var js=l(Bt);Ua=p(js,"This model inherits from [~"),dn=i(js,"CODE",{});var Sl=l(dn);Za=p(Sl,"onnxruntime.modeling_ort.ORTModel"),Sl.forEach(o),Ka=p(js,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),js.forEach(o),Ya=h(ce),un=i(ce,"P",{});var Pl=l(un);ei=p(Pl,"Causal LM model for ONNX."),Pl.forEach(o),ti=h(ce),V=i(ce,"DIV",{class:!0});var de=l(V);O(Gt.$$.fragment,de),oi=h(de),ye=i(de,"P",{});var fo=l(ye);ni=p(fo,"The "),fn=i(fo,"CODE",{});var Il=l(fn);si=p(Il,"ORTModelForCausalLM"),Il.forEach(o),ri=p(fo," forward method, overrides the "),hn=i(fo,"CODE",{});var Nl=l(hn);ai=p(Nl,"__call__"),Nl.forEach(o),ii=p(fo," special method."),fo.forEach(o),li=h(de),O(nt.$$.fragment,de),mi=h(de),O(st.$$.fragment,de),pi=h(de),O(rt.$$.fragment,de),de.forEach(o),ce.forEach(o),ps=h(t),je=i(t,"H2",{class:!0});var Es=l(je);at=i(Es,"A",{id:!0,class:!0,href:!0});var Ll=l(at);gn=i(Ll,"SPAN",{});var Dl=l(gn);O(Vt.$$.fragment,Dl),Dl.forEach(o),Ll.forEach(o),ci=h(Es),_n=i(Es,"SPAN",{});var Hl=l(_n);di=p(Hl,"ORTModelForSeq2SeqLM"),Hl.forEach(o),Es.forEach(o),cs=h(t),oe=i(t,"DIV",{class:!0});var ho=l(oe);O(Jt.$$.fragment,ho),ui=h(ho),$n=i(ho,"P",{});var Ql=l($n);fi=p(Ql,"Sequence-to-sequence model with a language modeling head for ONNX Runtime inference."),Ql.forEach(o),hi=h(ho),J=i(ho,"DIV",{class:!0});var ue=l(J);O(Ut.$$.fragment,ue),gi=h(ue),Ee=i(ue,"P",{});var go=l(Ee);_i=p(go,"The "),kn=i(go,"CODE",{});var Xl=l(kn);$i=p(Xl,"ORTModelForSeq2SeqLM"),Xl.forEach(o),ki=p(go," forward method, overrides the "),wn=i(go,"CODE",{});var Wl=l(wn);wi=p(Wl,"__call__"),Wl.forEach(o),vi=p(go," special method."),go.forEach(o),xi=h(ue),O(it.$$.fragment,ue),Ti=h(ue),O(lt.$$.fragment,ue),bi=h(ue),O(mt.$$.fragment,ue),ue.forEach(o),ho.forEach(o),ds=h(t),Re=i(t,"H2",{class:!0});var Rs=l(Re);pt=i(Rs,"A",{id:!0,class:!0,href:!0});var Bl=l(pt);vn=i(Bl,"SPAN",{});var Gl=l(vn);O(Zt.$$.fragment,Gl),Gl.forEach(o),Bl.forEach(o),Mi=h(Rs),xn=i(Rs,"SPAN",{});var Vl=l(xn);Oi=p(Vl,"ORTModelForImageClassification"),Vl.forEach(o),Rs.forEach(o),us=h(t),D=i(t,"DIV",{class:!0});var fe=l(D);O(Kt.$$.fragment,fe),qi=h(fe),Tn=i(fe,"P",{});var Jl=l(Tn);yi=p(Jl,"Onnx Model for image-classification tasks."),Jl.forEach(o),ji=h(fe),Yt=i(fe,"P",{});var Fs=l(Yt);Ei=p(Fs,"This model inherits from [~"),bn=i(Fs,"CODE",{});var Ul=l(bn);Ri=p(Ul,"onnxruntime.modeling_ort.ORTModel"),Ul.forEach(o),Fi=p(Fs,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Fs.forEach(o),zi=h(fe),Mn=i(fe,"P",{});var Zl=l(Mn);Ci=p(Zl,"Image Classification model for ONNX."),Zl.forEach(o),Ai=h(fe),U=i(fe,"DIV",{class:!0});var he=l(U);O(eo.$$.fragment,he),Si=h(he),Fe=i(he,"P",{});var _o=l(Fe);Pi=p(_o,"The "),On=i(_o,"CODE",{});var Kl=l(On);Ii=p(Kl,"ORTModelForImageClassification"),Kl.forEach(o),Ni=p(_o," forward method, overrides the "),qn=i(_o,"CODE",{});var Yl=l(qn);Li=p(Yl,"__call__"),Yl.forEach(o),Di=p(_o," special method."),_o.forEach(o),Hi=h(he),O(ct.$$.fragment,he),Qi=h(he),O(dt.$$.fragment,he),Xi=h(he),O(ut.$$.fragment,he),he.forEach(o),fe.forEach(o),this.h()},h(){v(s,"name","hf:doc:metadata"),v(s,"content",JSON.stringify(Nm)),v(u,"id","optimum-inference-with-onnx-runtime"),v(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(u,"href","#optimum-inference-with-onnx-runtime"),v(d,"class","relative group"),v(F,"href","hf.co/models"),v(Ce,"id","switching-from-transformers-to-optimum-inference"),v(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ce,"href","#switching-from-transformers-to-optimum-inference"),v(ge,"class","relative group"),v(Ae,"id","working-with-the-hugging-face-model-hub"),v(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ae,"href","#working-with-the-hugging-face-model-hub"),v(_e,"class","relative group"),v(lo,"href","/docs/optimum/pr_199/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModelForSequenceClassification"),v(wt,"href","https://hf.co/models"),v(wt,"rel","nofollow"),v(Se,"id","optimum.onnxruntime.ORTModel"),v(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Se,"href","#optimum.onnxruntime.ORTModel"),v($e,"class","relative group"),v(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ne,"id","optimum.onnxruntime.ORTModelForFeatureExtraction"),v(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ne,"href","#optimum.onnxruntime.ORTModelForFeatureExtraction"),v(ke,"class","relative group"),v(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Qe,"id","optimum.onnxruntime.ORTModelForQuestionAnswering"),v(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Qe,"href","#optimum.onnxruntime.ORTModelForQuestionAnswering"),v(ve,"class","relative group"),v(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ge,"id","optimum.onnxruntime.ORTModelForSequenceClassification"),v(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ge,"href","#optimum.onnxruntime.ORTModelForSequenceClassification"),v(Te,"class","relative group"),v(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ke,"id","optimum.onnxruntime.ORTModelForTokenClassification"),v(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ke,"href","#optimum.onnxruntime.ORTModelForTokenClassification"),v(Me,"class","relative group"),v(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(ot,"id","optimum.onnxruntime.ORTModelForCausalLM"),v(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ot,"href","#optimum.onnxruntime.ORTModelForCausalLM"),v(qe,"class","relative group"),v(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(at,"id","optimum.onnxruntime.ORTModelForSeq2SeqLM"),v(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(at,"href","#optimum.onnxruntime.ORTModelForSeq2SeqLM"),v(je,"class","relative group"),v(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(pt,"id","optimum.onnxruntime.ORTModelForImageClassification"),v(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(pt,"href","#optimum.onnxruntime.ORTModelForImageClassification"),v(Re,"class","relative group"),v(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,$){e(document.head,s),k(t,_,$),k(t,d,$),e(d,u),e(u,g),q(n,g,null),e(d,r),e(d,x),e(x,c),k(t,w,$),k(t,E,$),e(E,R),e(E,F),e(F,ao),e(E,io),k(t,Xn,$),k(t,ge,$),e(ge,Ce),e(Ce,$o),q(gt,$o,null),e(ge,zs),e(ge,ko),e(ko,Cs),k(t,Wn,$),k(t,X,$),e(X,As),e(X,wo),e(wo,Ss),e(X,Ps),e(X,vo),e(vo,Is),e(X,Ns),e(X,xo),e(xo,Ls),e(X,Ds),e(X,To),e(To,Hs),e(X,Qs),k(t,Bn,$),q(_t,t,$),k(t,Gn,$),k(t,ne,$),e(ne,Xs),e(ne,bo),e(bo,Ws),e(ne,Bs),e(ne,Mo),e(Mo,Gs),e(ne,Vs),k(t,Vn,$),q($t,t,$),k(t,Jn,$),k(t,_e,$),e(_e,Ae),e(Ae,Oo),q(kt,Oo,null),e(_e,Js),e(_e,qo),e(qo,Us),k(t,Un,$),k(t,Y,$),e(Y,Zs),e(Y,lo),e(lo,Ks),e(Y,Ys),e(Y,wt),e(wt,er),e(Y,tr),e(Y,yo),e(yo,or),e(Y,nr),k(t,Zn,$),q(vt,t,$),k(t,Kn,$),k(t,$e,$),e($e,Se),e(Se,jo),q(xt,jo,null),e($e,sr),e($e,Eo),e(Eo,rr),k(t,Yn,$),k(t,Z,$),q(Tt,Z,null),e(Z,ar),e(Z,bt),e(bt,ir),e(bt,Ro),e(Ro,lr),e(bt,mr),e(Z,pr),e(Z,Pe),q(Mt,Pe,null),e(Pe,cr),e(Pe,Ot),e(Ot,dr),e(Ot,Fo),e(Fo,ur),e(Ot,fr),e(Z,hr),e(Z,Ie),q(qt,Ie,null),e(Ie,gr),e(Ie,zo),e(zo,_r),k(t,es,$),k(t,ke,$),e(ke,Ne),e(Ne,Co),q(yt,Co,null),e(ke,$r),e(ke,Ao),e(Ao,kr),k(t,ts,$),k(t,S,$),q(jt,S,null),e(S,wr),e(S,So),e(So,vr),e(S,xr),e(S,Et),e(Et,Tr),e(Et,Po),e(Po,br),e(Et,Mr),e(S,Or),e(S,Io),e(Io,qr),e(S,yr),e(S,W),q(Rt,W,null),e(W,jr),e(W,we),e(we,Er),e(we,No),e(No,Rr),e(we,Fr),e(we,Lo),e(Lo,zr),e(we,Cr),e(W,Ar),q(Le,W,null),e(W,Sr),q(De,W,null),e(W,Pr),q(He,W,null),k(t,os,$),k(t,ve,$),e(ve,Qe),e(Qe,Do),q(Ft,Do,null),e(ve,Ir),e(ve,Ho),e(Ho,Nr),k(t,ns,$),k(t,P,$),q(zt,P,null),e(P,Lr),e(P,Qo),e(Qo,Dr),e(P,Hr),e(P,Ct),e(Ct,Qr),e(Ct,Xo),e(Xo,Xr),e(Ct,Wr),e(P,Br),e(P,Wo),e(Wo,Gr),e(P,Vr),e(P,B),q(At,B,null),e(B,Jr),e(B,xe),e(xe,Ur),e(xe,Bo),e(Bo,Zr),e(xe,Kr),e(xe,Go),e(Go,Yr),e(xe,ea),e(B,ta),q(Xe,B,null),e(B,oa),q(We,B,null),e(B,na),q(Be,B,null),k(t,ss,$),k(t,Te,$),e(Te,Ge),e(Ge,Vo),q(St,Vo,null),e(Te,sa),e(Te,Jo),e(Jo,ra),k(t,rs,$),k(t,I,$),q(Pt,I,null),e(I,aa),e(I,Uo),e(Uo,ia),e(I,la),e(I,It),e(It,ma),e(It,Zo),e(Zo,pa),e(It,ca),e(I,da),e(I,Ko),e(Ko,ua),e(I,fa),e(I,A),q(Nt,A,null),e(A,ha),e(A,be),e(be,ga),e(be,Yo),e(Yo,_a),e(be,$a),e(be,en),e(en,ka),e(be,wa),e(A,va),q(Ve,A,null),e(A,xa),q(Je,A,null),e(A,Ta),q(Ue,A,null),e(A,ba),q(Ze,A,null),k(t,as,$),k(t,Me,$),e(Me,Ke),e(Ke,tn),q(Lt,tn,null),e(Me,Ma),e(Me,on),e(on,Oa),k(t,is,$),k(t,N,$),q(Dt,N,null),e(N,qa),e(N,nn),e(nn,ya),e(N,ja),e(N,Ht),e(Ht,Ea),e(Ht,sn),e(sn,Ra),e(Ht,Fa),e(N,za),e(N,rn),e(rn,Ca),e(N,Aa),e(N,G),q(Qt,G,null),e(G,Sa),e(G,Oe),e(Oe,Pa),e(Oe,an),e(an,Ia),e(Oe,Na),e(Oe,ln),e(ln,La),e(Oe,Da),e(G,Ha),q(Ye,G,null),e(G,Qa),q(et,G,null),e(G,Xa),q(tt,G,null),k(t,ls,$),k(t,qe,$),e(qe,ot),e(ot,mn),q(Xt,mn,null),e(qe,Wa),e(qe,pn),e(pn,Ba),k(t,ms,$),k(t,L,$),q(Wt,L,null),e(L,Ga),e(L,cn),e(cn,Va),e(L,Ja),e(L,Bt),e(Bt,Ua),e(Bt,dn),e(dn,Za),e(Bt,Ka),e(L,Ya),e(L,un),e(un,ei),e(L,ti),e(L,V),q(Gt,V,null),e(V,oi),e(V,ye),e(ye,ni),e(ye,fn),e(fn,si),e(ye,ri),e(ye,hn),e(hn,ai),e(ye,ii),e(V,li),q(nt,V,null),e(V,mi),q(st,V,null),e(V,pi),q(rt,V,null),k(t,ps,$),k(t,je,$),e(je,at),e(at,gn),q(Vt,gn,null),e(je,ci),e(je,_n),e(_n,di),k(t,cs,$),k(t,oe,$),q(Jt,oe,null),e(oe,ui),e(oe,$n),e($n,fi),e(oe,hi),e(oe,J),q(Ut,J,null),e(J,gi),e(J,Ee),e(Ee,_i),e(Ee,kn),e(kn,$i),e(Ee,ki),e(Ee,wn),e(wn,wi),e(Ee,vi),e(J,xi),q(it,J,null),e(J,Ti),q(lt,J,null),e(J,bi),q(mt,J,null),k(t,ds,$),k(t,Re,$),e(Re,pt),e(pt,vn),q(Zt,vn,null),e(Re,Mi),e(Re,xn),e(xn,Oi),k(t,us,$),k(t,D,$),q(Kt,D,null),e(D,qi),e(D,Tn),e(Tn,yi),e(D,ji),e(D,Yt),e(Yt,Ei),e(Yt,bn),e(bn,Ri),e(Yt,Fi),e(D,zi),e(D,Mn),e(Mn,Ci),e(D,Ai),e(D,U),q(eo,U,null),e(U,Si),e(U,Fe),e(Fe,Pi),e(Fe,On),e(On,Ii),e(Fe,Ni),e(Fe,qn),e(qn,Li),e(Fe,Di),e(U,Hi),q(ct,U,null),e(U,Qi),q(dt,U,null),e(U,Xi),q(ut,U,null),fs=!0},p(t,[$]){const to={};$&2&&(to.$$scope={dirty:$,ctx:t}),Le.$set(to);const yn={};$&2&&(yn.$$scope={dirty:$,ctx:t}),De.$set(yn);const jn={};$&2&&(jn.$$scope={dirty:$,ctx:t}),He.$set(jn);const En={};$&2&&(En.$$scope={dirty:$,ctx:t}),Xe.$set(En);const oo={};$&2&&(oo.$$scope={dirty:$,ctx:t}),We.$set(oo);const Rn={};$&2&&(Rn.$$scope={dirty:$,ctx:t}),Be.$set(Rn);const no={};$&2&&(no.$$scope={dirty:$,ctx:t}),Ve.$set(no);const Fn={};$&2&&(Fn.$$scope={dirty:$,ctx:t}),Je.$set(Fn);const zn={};$&2&&(zn.$$scope={dirty:$,ctx:t}),Ue.$set(zn);const Cn={};$&2&&(Cn.$$scope={dirty:$,ctx:t}),Ze.$set(Cn);const K={};$&2&&(K.$$scope={dirty:$,ctx:t}),Ye.$set(K);const An={};$&2&&(An.$$scope={dirty:$,ctx:t}),et.$set(An);const Sn={};$&2&&(Sn.$$scope={dirty:$,ctx:t}),tt.$set(Sn);const Pn={};$&2&&(Pn.$$scope={dirty:$,ctx:t}),nt.$set(Pn);const In={};$&2&&(In.$$scope={dirty:$,ctx:t}),st.$set(In);const ze={};$&2&&(ze.$$scope={dirty:$,ctx:t}),rt.$set(ze);const Nn={};$&2&&(Nn.$$scope={dirty:$,ctx:t}),it.$set(Nn);const Ln={};$&2&&(Ln.$$scope={dirty:$,ctx:t}),lt.$set(Ln);const so={};$&2&&(so.$$scope={dirty:$,ctx:t}),mt.$set(so);const Dn={};$&2&&(Dn.$$scope={dirty:$,ctx:t}),ct.$set(Dn);const Hn={};$&2&&(Hn.$$scope={dirty:$,ctx:t}),dt.$set(Hn);const Qn={};$&2&&(Qn.$$scope={dirty:$,ctx:t}),ut.$set(Qn)},i(t){fs||(T(n.$$.fragment,t),T(gt.$$.fragment,t),T(_t.$$.fragment,t),T($t.$$.fragment,t),T(kt.$$.fragment,t),T(vt.$$.fragment,t),T(xt.$$.fragment,t),T(Tt.$$.fragment,t),T(Mt.$$.fragment,t),T(qt.$$.fragment,t),T(yt.$$.fragment,t),T(jt.$$.fragment,t),T(Rt.$$.fragment,t),T(Le.$$.fragment,t),T(De.$$.fragment,t),T(He.$$.fragment,t),T(Ft.$$.fragment,t),T(zt.$$.fragment,t),T(At.$$.fragment,t),T(Xe.$$.fragment,t),T(We.$$.fragment,t),T(Be.$$.fragment,t),T(St.$$.fragment,t),T(Pt.$$.fragment,t),T(Nt.$$.fragment,t),T(Ve.$$.fragment,t),T(Je.$$.fragment,t),T(Ue.$$.fragment,t),T(Ze.$$.fragment,t),T(Lt.$$.fragment,t),T(Dt.$$.fragment,t),T(Qt.$$.fragment,t),T(Ye.$$.fragment,t),T(et.$$.fragment,t),T(tt.$$.fragment,t),T(Xt.$$.fragment,t),T(Wt.$$.fragment,t),T(Gt.$$.fragment,t),T(nt.$$.fragment,t),T(st.$$.fragment,t),T(rt.$$.fragment,t),T(Vt.$$.fragment,t),T(Jt.$$.fragment,t),T(Ut.$$.fragment,t),T(it.$$.fragment,t),T(lt.$$.fragment,t),T(mt.$$.fragment,t),T(Zt.$$.fragment,t),T(Kt.$$.fragment,t),T(eo.$$.fragment,t),T(ct.$$.fragment,t),T(dt.$$.fragment,t),T(ut.$$.fragment,t),fs=!0)},o(t){b(n.$$.fragment,t),b(gt.$$.fragment,t),b(_t.$$.fragment,t),b($t.$$.fragment,t),b(kt.$$.fragment,t),b(vt.$$.fragment,t),b(xt.$$.fragment,t),b(Tt.$$.fragment,t),b(Mt.$$.fragment,t),b(qt.$$.fragment,t),b(yt.$$.fragment,t),b(jt.$$.fragment,t),b(Rt.$$.fragment,t),b(Le.$$.fragment,t),b(De.$$.fragment,t),b(He.$$.fragment,t),b(Ft.$$.fragment,t),b(zt.$$.fragment,t),b(At.$$.fragment,t),b(Xe.$$.fragment,t),b(We.$$.fragment,t),b(Be.$$.fragment,t),b(St.$$.fragment,t),b(Pt.$$.fragment,t),b(Nt.$$.fragment,t),b(Ve.$$.fragment,t),b(Je.$$.fragment,t),b(Ue.$$.fragment,t),b(Ze.$$.fragment,t),b(Lt.$$.fragment,t),b(Dt.$$.fragment,t),b(Qt.$$.fragment,t),b(Ye.$$.fragment,t),b(et.$$.fragment,t),b(tt.$$.fragment,t),b(Xt.$$.fragment,t),b(Wt.$$.fragment,t),b(Gt.$$.fragment,t),b(nt.$$.fragment,t),b(st.$$.fragment,t),b(rt.$$.fragment,t),b(Vt.$$.fragment,t),b(Jt.$$.fragment,t),b(Ut.$$.fragment,t),b(it.$$.fragment,t),b(lt.$$.fragment,t),b(mt.$$.fragment,t),b(Zt.$$.fragment,t),b(Kt.$$.fragment,t),b(eo.$$.fragment,t),b(ct.$$.fragment,t),b(dt.$$.fragment,t),b(ut.$$.fragment,t),fs=!1},d(t){o(s),t&&o(_),t&&o(d),y(n),t&&o(w),t&&o(E),t&&o(Xn),t&&o(ge),y(gt),t&&o(Wn),t&&o(X),t&&o(Bn),y(_t,t),t&&o(Gn),t&&o(ne),t&&o(Vn),y($t,t),t&&o(Jn),t&&o(_e),y(kt),t&&o(Un),t&&o(Y),t&&o(Zn),y(vt,t),t&&o(Kn),t&&o($e),y(xt),t&&o(Yn),t&&o(Z),y(Tt),y(Mt),y(qt),t&&o(es),t&&o(ke),y(yt),t&&o(ts),t&&o(S),y(jt),y(Rt),y(Le),y(De),y(He),t&&o(os),t&&o(ve),y(Ft),t&&o(ns),t&&o(P),y(zt),y(At),y(Xe),y(We),y(Be),t&&o(ss),t&&o(Te),y(St),t&&o(rs),t&&o(I),y(Pt),y(Nt),y(Ve),y(Je),y(Ue),y(Ze),t&&o(as),t&&o(Me),y(Lt),t&&o(is),t&&o(N),y(Dt),y(Qt),y(Ye),y(et),y(tt),t&&o(ls),t&&o(qe),y(Xt),t&&o(ms),t&&o(L),y(Wt),y(Gt),y(nt),y(st),y(rt),t&&o(ps),t&&o(je),y(Vt),t&&o(cs),t&&o(oe),y(Jt),y(Ut),y(it),y(lt),y(mt),t&&o(ds),t&&o(Re),y(Zt),t&&o(us),t&&o(D),y(Kt),y(eo),y(ct),y(dt),y(ut)}}}const Nm={local:"optimum-inference-with-onnx-runtime",sections:[{local:"switching-from-transformers-to-optimum-inference",sections:[{local:"working-with-the-hugging-face-model-hub",title:"Working with the Hugging Face Model Hub"}],title:"Switching from Transformers to Optimum Inference"},{local:"optimum.onnxruntime.ORTModel",title:"ORTModel"},{local:"optimum.onnxruntime.ORTModelForFeatureExtraction",title:"ORTModelForFeatureExtraction"},{local:"optimum.onnxruntime.ORTModelForQuestionAnswering",title:"ORTModelForQuestionAnswering"},{local:"optimum.onnxruntime.ORTModelForSequenceClassification",title:"ORTModelForSequenceClassification"},{local:"optimum.onnxruntime.ORTModelForTokenClassification",title:"ORTModelForTokenClassification"},{local:"optimum.onnxruntime.ORTModelForCausalLM",title:"ORTModelForCausalLM"},{local:"optimum.onnxruntime.ORTModelForSeq2SeqLM",title:"ORTModelForSeq2SeqLM"},{local:"optimum.onnxruntime.ORTModelForImageClassification",title:"ORTModelForImageClassification"}],title:"Optimum Inference with ONNX Runtime"};function Lm(j){return sm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Bm extends tm{constructor(s){super();om(this,s,Lm,Im,nm,{})}}export{Bm as default,Nm as metadata};
