import{S as dl,i as ul,s as fl,F as gl,e as a,w as M,k as f,c as i,a as l,x as O,d as o,m as h,b as v,g as k,G as e,y,P as _l,H as $l,I as kl,J as wl,q as T,o as b,B as j,v as hl,Z as vl,_ as xl,t as m,M as Tl,h as p,L as J}from"../../chunks/vendor-hf-doc-builder.js";import{T as oo}from"../../chunks/Tip-hf-doc-builder.js";import{D as G}from"../../chunks/Docstring-hf-doc-builder.js";import{C}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ee}from"../../chunks/IconCopyLink-hf-doc-builder.js";const{window:bl}=vl;function Ml(E){let s,_,d,u,g,n,r,x,c;u=new ee({props:{classNames:"text-smd"}});const w=E[4].default,q=gl(w,E,E[3],null);return{c(){s=a("div"),_=a("a"),d=a("span"),M(u.$$.fragment),n=f(),q&&q.c(),this.h()},l(R){s=i(R,"DIV",{class:!0});var F=l(s);_=i(F,"A",{id:!0,class:!0,href:!0});var Xt=l(_);d=i(Xt,"SPAN",{});var Wt=l(d);O(u.$$.fragment,Wt),Wt.forEach(o),Xt.forEach(o),n=h(F),q&&q.l(F),F.forEach(o),this.h()},h(){v(_,"id",E[0]),v(_,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(_,"href",g=`#${E[0]}`),v(s,"class","relative group rounded-md")},m(R,F){k(R,s,F),e(s,_),e(_,d),y(u,d,null),e(s,n),q&&q.m(s,null),E[5](s),r=!0,x||(c=_l(bl,"hashchange",E[2]),x=!0)},p(R,[F]){(!r||F&1)&&v(_,"id",R[0]),(!r||F&1&&g!==(g=`#${R[0]}`))&&v(_,"href",g),q&&q.p&&(!r||F&8)&&$l(q,w,R,R[3],r?wl(w,R[3],F,null):kl(R[3]),null)},i(R){r||(T(u.$$.fragment,R),T(q,R),r=!0)},o(R){b(u.$$.fragment,R),b(q,R),r=!1},d(R){R&&o(s),j(u),q&&q.d(R),E[5](null),x=!1,c()}}}const cl="bg-yellow-50 dark:bg-[#494a3d]";function Ol(E,s,_){let{$$slots:d={},$$scope:u}=s,{anchor:g}=s,n;function r(){const{hash:c}=window.location,w=c.substring(1);n&&n.classList.remove(...cl.split(" ")),w===g&&n.classList.add(...cl.split(" "))}hl(()=>{r()});function x(c){xl[c?"unshift":"push"](()=>{n=c,_(1,n)})}return E.$$set=c=>{"anchor"in c&&_(0,g=c.anchor),"$$scope"in c&&_(3,u=c.$$scope)},[g,n,r,u,d,x]}class U extends dl{constructor(s){super();ul(this,s,Ol,Ml,fl,{anchor:0})}}function yl(E){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function jl(E){let s,_,d,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForFeatureExtraction
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of feature extraction:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of feature extraction:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),y(u,n,r),g=!0},p:J,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),j(u,n)}}}function El(E){let s,_,d,u,g,n,r,x;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForFeatureExtraction

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipeline"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var q=l(d);u=p(q,"transformers.pipeline"),q.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),y(r,c,w),x=!0},p:J,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),j(r,c)}}}function ql(E){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Rl(E){let s,_,d,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForQuestionAnswering
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
inputs = tokenizer(question, text, return_tensors="pt")
start_positions = torch.tensor([1])
end_positions = torch.tensor([3])

outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
start_scores = outputs.start_logits
end_scores = outputs.end_logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_positions = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>end_positions = torch.tensor([<span class="hljs-number">3</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_scores = outputs.start_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>end_scores = outputs.end_logits`}}),{c(){s=a("p"),_=m("Example of question answering:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of question answering:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),y(u,n,r),g=!0},p:J,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),j(u,n)}}}function Fl(E){let s,_,d,u,g,n,r,x;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForQuestionAnswering

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")
onnx_qa = pipeline("question-answering", model=model, tokenizer=tokenizer)

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
pred = onnx_qa(question, text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_qa = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_qa(question, text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipeline"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var q=l(d);u=p(q,"transformers.pipeline"),q.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),y(r,c,w),x=!0},p:J,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),j(r,c)}}}function zl(E){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Cl(E){let s,_,d,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of single-label classification:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of single-label classification:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),y(u,n,r),g=!0},p:J,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),j(u,n)}}}function Al(E){let s,_,d,u,g,n,r,x;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

text = "Hello, my dog is cute"
pred = onnx_classifier(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_classifier(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var q=l(d);u=p(q,"transformers.pipelines"),q.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),y(r,c,w),x=!0},p:J,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),j(r,c)}}}function Pl(E){let s,_,d,u,g,n,r,x;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-mnli")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-mnli")
onnx_z0 = pipeline("zero-shot-classification", model=model, tokenizer=tokenizer)

sequence_to_classify = "Who are you voting for in 2020?"
candidate_labels = ["Europe", "public health", "politics", "elections"]
pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_z0 = pipeline(<span class="hljs-string">&quot;zero-shot-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_to_classify = <span class="hljs-string">&quot;Who are you voting for in 2020?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>candidate_labels = [<span class="hljs-string">&quot;Europe&quot;</span>, <span class="hljs-string">&quot;public health&quot;</span>, <span class="hljs-string">&quot;politics&quot;</span>, <span class="hljs-string">&quot;elections&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=<span class="hljs-literal">True</span>)`}}),{c(){s=a("p"),_=m("Example using zero-shot-classification "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using zero-shot-classification "),d=i(w,"CODE",{});var q=l(d);u=p(q,"transformers.pipelines"),q.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),y(r,c,w),x=!0},p:J,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),j(r,c)}}}function Il(E){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Nl(E){let s,_,d,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForTokenClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of token classification:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of token classification:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),y(u,n,r),g=!0},p:J,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),j(u,n)}}}function Sl(E){let s,_,d,u,g,n,r,x;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForTokenClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")
onnx_ner = pipeline("token-classification", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_ner(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_ner = pipeline(<span class="hljs-string">&quot;token-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_ner(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var q=l(d);u=p(q,"transformers.pipelines"),q.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),y(r,c,w),x=!0},p:J,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),j(r,c)}}}function Dl(E){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Ll(E){let s,_,d,u,g;return u=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

gen_tokens = model.generate(**inputs,do_sample=True,temperature=0.9, min_length=20,max_length=20)
tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs,do_sample=<span class="hljs-literal">True</span>,temperature=<span class="hljs-number">0.9</span>, min_length=<span class="hljs-number">20</span>,max_length=<span class="hljs-number">20</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(gen_tokens)`}}),{c(){s=a("p"),_=m("Example of text generation:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of text generation:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),y(u,n,r),g=!0},p:J,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),j(u,n)}}}function Hl(E){let s,_,d,u,g,n,r,x;return r=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")
onnx_gen = pipeline("text-generation", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
gen = onnx_gen(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_gen = pipeline(<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>gen = onnx_gen(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipelines"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var q=l(d);u=p(q,"transformers.pipelines"),q.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),y(r,c,w),x=!0},p:J,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),j(r,c)}}}function Ql(E){let s,_,d,u,g;return{c(){s=a("p"),_=m("Although the recipe for forward pass needs to be defined within this function, one should call the "),d=a("code"),u=m("Module"),g=m(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Although the recipe for forward pass needs to be defined within this function, one should call the "),d=i(r,"CODE",{});var x=l(d);u=p(x,"Module"),x.forEach(o),g=p(r,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),r.forEach(o)},m(n,r){k(n,s,r),e(s,_),e(s,d),e(d,u),e(s,g)},d(n){n&&o(s)}}}function Xl(E){let s,_,d,u,g;return u=new C({props:{code:`from transformers import AutoFeatureExtractor
from optimum.onnxruntime import ORTModelForImageClassification
import torch

tokenizer = AutoFeatureExtractor.from_pretrained("optimum/vit-base-patch16-224")
model = ORTModelForImageClassification.from_pretrained("optimum/vit-base-patch16-224")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=a("p"),_=m("Example of feature extraction:"),d=f(),M(u.$$.fragment)},l(n){s=i(n,"P",{});var r=l(s);_=p(r,"Example of feature extraction:"),r.forEach(o),d=h(n),O(u.$$.fragment,n)},m(n,r){k(n,s,r),e(s,_),k(n,d,r),y(u,n,r),g=!0},p:J,i(n){g||(T(u.$$.fragment,n),g=!0)},o(n){b(u.$$.fragment,n),g=!1},d(n){n&&o(s),n&&o(d),j(u,n)}}}function Wl(E){let s,_,d,u,g,n,r,x;return r=new C({props:{code:`from transformers import AutoFeatureExtractor, pipeline
from optimum.onnxruntime import ORTModelForImageClassification

tokenizer = AutoFeatureExtractor.from_pretrained("optimum/vit-base-patch16-224")
model = ORTModelForImageClassification.from_pretrained("optimum/vit-base-patch16-224")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=a("p"),_=m("Example using "),d=a("code"),u=m("transformers.pipeline"),g=m(":"),n=f(),M(r.$$.fragment)},l(c){s=i(c,"P",{});var w=l(s);_=p(w,"Example using "),d=i(w,"CODE",{});var q=l(d);u=p(q,"transformers.pipeline"),q.forEach(o),g=p(w,":"),w.forEach(o),n=h(c),O(r.$$.fragment,c)},m(c,w){k(c,s,w),e(s,_),e(s,d),e(d,u),e(s,g),k(c,n,w),y(r,c,w),x=!0},p:J,i(c){x||(T(r.$$.fragment,c),x=!0)},o(c){b(r.$$.fragment,c),x=!1},d(c){c&&o(s),c&&o(n),j(r,c)}}}function Bl(E){let s,_,d,u,g,n,r,x,c,w,q,R,F,Xt,Wt,vn,ue,Ee,no,at,is,so,ls,xn,L,ms,ro,ps,cs,ao,ds,us,io,fs,hs,lo,gs,_s,Tn,it,bn,te,$s,mo,ks,ws,po,vs,xs,Mn,lt,On,qe,Ts,Bt,bs,Ms,yn,fe,Re,co,mt,Os,uo,ys,jn,Y,js,Gt,Es,qs,pt,Rs,Fs,fo,zs,Cs,En,ct,qn,he,Fe,ho,dt,As,go,Ps,Rn,K,ut,Is,ft,Ns,_o,Ss,Ds,Ls,ze,ht,Hs,Vt,Qs,$o,Xs,Fn,ge,Ce,ko,gt,Ws,wo,Bs,zn,A,_t,Gs,vo,Vs,Us,$t,Js,xo,Ys,Zs,Ks,To,er,tr,H,kt,or,_e,nr,bo,sr,rr,Mo,ar,ir,lr,Ae,mr,Pe,pr,Ie,Cn,$e,Ne,Oo,wt,cr,yo,dr,An,P,vt,ur,jo,fr,hr,xt,gr,Eo,_r,$r,kr,qo,wr,vr,Q,Tt,xr,ke,Tr,Ro,br,Mr,Fo,Or,yr,jr,Se,Er,De,qr,Le,Pn,we,He,zo,bt,Rr,Co,Fr,In,I,Mt,zr,Ao,Cr,Ar,Ot,Pr,Po,Ir,Nr,Sr,Io,Dr,Lr,z,yt,Hr,ve,Qr,No,Xr,Wr,So,Br,Gr,Vr,Qe,Ur,Xe,Jr,We,Yr,Be,Nn,xe,Ge,Do,jt,Zr,Lo,Kr,Sn,N,Et,ea,Ho,ta,oa,qt,na,Qo,sa,ra,aa,Xo,ia,la,X,Rt,ma,Te,pa,Wo,ca,da,Bo,ua,fa,ha,Ve,ga,Ue,_a,Je,Dn,be,Ye,Go,Ft,$a,Vo,ka,Ln,S,zt,wa,Uo,va,xa,Ct,Ta,Jo,ba,Ma,Oa,Yo,ya,ja,W,At,Ea,Me,qa,Zo,Ra,Fa,Ko,za,Ca,Aa,Ze,Pa,Ke,Ia,et,Hn,Oe,tt,en,Pt,Na,tn,Sa,Qn,D,It,Da,on,La,Ha,Nt,Qa,nn,Xa,Wa,Ba,sn,Ga,Va,B,St,Ua,ye,Ja,rn,Ya,Za,an,Ka,ei,ti,ot,oi,nt,ni,st,Xn;return n=new ee({}),at=new ee({}),it=new C({props:{code:`

`,highlighted:`from transformers import AutoTokenizer, pipeline
<span class="hljs-deletion">-from transformers import AutoModelForQuestionAnswering</span>
<span class="hljs-addition">+from optimum.onnxruntime import ORTModelForQuestionAnswering</span>

<span class="hljs-deletion">-model = AutoModelForQuestionAnswering.from_pretrained(&quot;deepset/roberta-base-squad2&quot;) # pytorch checkpoint</span>
<span class="hljs-addition">+model = ORTModelForQuestionAnswering.from_pretrained(&quot;optimum/roberta-base-squad2&quot;) # onnx checkpoint</span>
tokenizer = AutoTokenizer.from_pretrained(&quot;deepset/roberta-base-squad2&quot;)

onnx_qa = pipeline(&quot;question-answering&quot;,model=model,tokenizer=tokenizer)

question = &quot;What&#x27;s my name?&quot;
context = &quot;My name is Philipp and I live in Nuremberg.&quot;
pred = onnx_qa(question, context)`}}),lt=new C({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english",from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

onnx_classifier = pipeline("text-classification",model=model,tokenizer=tokenizer)

result = onnx_classifier(text="This is a great model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># create pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=model,tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>result = onnx_classifier(text=<span class="hljs-string">&quot;This is a great model&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998838901519775</span>}]`}}),mt=new ee({}),ct=new C({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english",from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

model.save_pretrained("a_local_path_for_convert_onnx_model")
tokenizer.save_pretrained("a_local_path_for_convert_onnx_model")

model.push_to_hub("a_local_path_for_convert_onnx_model",`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># save converted model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)

<span class="hljs-comment"># push model onnx model to HF Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.push_to_hub(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>,
                  repository_id=<span class="hljs-string">&quot;my-onnx-repo&quot;</span>,
                  use_auth_token=<span class="hljs-literal">True</span>
                  )`}}),dt=new ee({}),ut=new G({props:{name:"class optimum.onnxruntime.ORTModel",anchor:"optimum.onnxruntime.ORTModel",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L82"}}),ht=new G({props:{name:"load_model",anchor:"optimum.onnxruntime.ORTModel.load_model",parameters:[{name:"path",val:": typing.Union[str, pathlib.Path]"},{name:"provider",val:" = None"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModel.load_model.path",description:`<strong>path</strong> (<code>str</code> or <code>Path</code>) &#x2014;
Directory from which to load`,name:"path"},{anchor:"optimum.onnxruntime.ORTModel.load_model.provider(str,",description:`<strong>provider(<code>str</code>,</strong> <em>optional</em>) &#x2014;
Onnxruntime provider to use for loading the model, defaults to <code>CUDAExecutionProvider</code> if GPU is
available else <code>CPUExecutionProvider</code>`,name:"provider(str,"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L100"}}),gt=new ee({}),_t=new G({props:{name:"class optimum.onnxruntime.ORTModelForFeatureExtraction",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_226/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L298"}}),kt=new G({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L312"}}),Ae=new oo({props:{$$slots:{default:[yl]},$$scope:{ctx:E}}}),Pe=new U({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example",$$slots:{default:[jl]},$$scope:{ctx:E}}}),Ie=new U({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example-2",$$slots:{default:[El]},$$scope:{ctx:E}}}),wt=new ee({}),vt=new G({props:{name:"class optimum.onnxruntime.ORTModelForQuestionAnswering",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_226/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L384"}}),Tt=new G({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L398"}}),Se=new oo({props:{$$slots:{default:[ql]},$$scope:{ctx:E}}}),De=new U({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example",$$slots:{default:[Rl]},$$scope:{ctx:E}}}),Le=new U({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example-2",$$slots:{default:[Fl]},$$scope:{ctx:E}}}),bt=new ee({}),Mt=new G({props:{name:"class optimum.onnxruntime.ORTModelForSequenceClassification",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_226/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L485"}}),yt=new G({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L500"}}),Qe=new oo({props:{$$slots:{default:[zl]},$$scope:{ctx:E}}}),Xe=new U({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example",$$slots:{default:[Cl]},$$scope:{ctx:E}}}),We=new U({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-2",$$slots:{default:[Al]},$$scope:{ctx:E}}}),Be=new U({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-3",$$slots:{default:[Pl]},$$scope:{ctx:E}}}),jt=new ee({}),Et=new G({props:{name:"class optimum.onnxruntime.ORTModelForTokenClassification",anchor:"optimum.onnxruntime.ORTModelForTokenClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_226/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L572"}}),Rt=new G({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L586"}}),Ve=new oo({props:{$$slots:{default:[Il]},$$scope:{ctx:E}}}),Ue=new U({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example",$$slots:{default:[Nl]},$$scope:{ctx:E}}}),Je=new U({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example-2",$$slots:{default:[Sl]},$$scope:{ctx:E}}}),Ft=new ee({}),zt=new G({props:{name:"class optimum.onnxruntime.ORTModelForCausalLM",anchor:"optimum.onnxruntime.ORTModelForCausalLM",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_226/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L656"}}),At=new G({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L688"}}),Ze=new oo({props:{$$slots:{default:[Dl]},$$scope:{ctx:E}}}),Ke=new U({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example",$$slots:{default:[Ll]},$$scope:{ctx:E}}}),et=new U({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example-2",$$slots:{default:[Hl]},$$scope:{ctx:E}}}),Pt=new ee({}),It=new G({props:{name:"class optimum.onnxruntime.ORTModelForImageClassification",anchor:"optimum.onnxruntime.ORTModelForImageClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForImageClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_226/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L783"}}),St=new G({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_226/src/optimum/onnxruntime/modeling_ort.py#L797"}}),ot=new oo({props:{$$slots:{default:[Ql]},$$scope:{ctx:E}}}),nt=new U({props:{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.example",$$slots:{default:[Xl]},$$scope:{ctx:E}}}),st=new U({props:{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.example-2",$$slots:{default:[Wl]},$$scope:{ctx:E}}}),{c(){s=a("meta"),_=f(),d=a("h1"),u=a("a"),g=a("span"),M(n.$$.fragment),r=f(),x=a("span"),c=m("Optimum Inference with ONNX Runtime"),w=f(),q=a("p"),R=m(`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),F=a("a"),Xt=m("Hugging Face Hub"),Wt=m(` and create pipelines
to run accelerated inference without rewriting your APIs.`),vn=f(),ue=a("h2"),Ee=a("a"),no=a("span"),M(at.$$.fragment),is=f(),so=a("span"),ls=m("Switching from Transformers to Optimum Inference"),xn=f(),L=a("p"),ms=m("The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),ro=a("code"),ps=m("AutoModelForXxx"),cs=m(" class with the corresponding "),ao=a("code"),ds=m("ORTModelForXxx"),us=m(" class in "),io=a("code"),fs=m("optimum"),hs=m(". For example, this is how you can use a question answering model in "),lo=a("code"),gs=m("optimum"),_s=m(":"),Tn=f(),M(it.$$.fragment),bn=f(),te=a("p"),$s=m("Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),mo=a("code"),ks=m("from_transformers=True"),ws=m(" to the "),po=a("code"),vs=m("from_pretrained()"),xs=m(" method, and your model will be loaded and converted to ONNX on-the-fly:"),Mn=f(),M(lt.$$.fragment),On=f(),qe=a("p"),Ts=m("You can find a complete walkhrough Optimum Inference for ONNX Runtime in this "),Bt=a("a"),bs=m("notebook"),Ms=m("."),yn=f(),fe=a("h3"),Re=a("a"),co=a("span"),M(mt.$$.fragment),Os=f(),uo=a("span"),ys=m("Working with the Hugging Face Model Hub"),jn=f(),Y=a("p"),js=m("The Optimum model classes like "),Gt=a("a"),Es=m("ORTModelForSequenceClassification"),qs=m(" are integrated with the "),pt=a("a"),Rs=m("Hugging Face Model Hub"),Fs=m(`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),fo=a("code"),zs=m("push_to_hub()"),Cs=m(` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),En=f(),M(ct.$$.fragment),qn=f(),he=a("h2"),Fe=a("a"),ho=a("span"),M(dt.$$.fragment),As=f(),go=a("span"),Ps=m("ORTModel"),Rn=f(),K=a("div"),M(ut.$$.fragment),Is=f(),ft=a("p"),Ns=m(`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),_o=a("code"),Ss=m("transformers.onnx"),Ds=m(` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Ls=f(),ze=a("div"),M(ht.$$.fragment),Hs=f(),Vt=a("p"),Qs=m("loads ONNX Inference session with Provider. Default Provider is if CUDAExecutionProvider GPU available else "),$o=a("code"),Xs=m("CPUExecutionProvider"),Fn=f(),ge=a("h2"),Ce=a("a"),ko=a("span"),M(gt.$$.fragment),Ws=f(),wo=a("span"),Bs=m("ORTModelForFeatureExtraction"),zn=f(),A=a("div"),M(_t.$$.fragment),Gs=f(),vo=a("p"),Vs=m("Onnx Model with a MaskedLMOutput for feature-extraction tasks."),Us=f(),$t=a("p"),Js=m("This model inherits from [~"),xo=a("code"),Ys=m("onnxruntime.modeling_ort.ORTModel"),Zs=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Ks=f(),To=a("p"),er=m("Feature Extraction model for ONNX."),tr=f(),H=a("div"),M(kt.$$.fragment),or=f(),_e=a("p"),nr=m("The "),bo=a("code"),sr=m("ORTModelForFeatureExtraction"),rr=m(" forward method, overrides the "),Mo=a("code"),ar=m("__call__"),ir=m(" special method."),lr=f(),M(Ae.$$.fragment),mr=f(),M(Pe.$$.fragment),pr=f(),M(Ie.$$.fragment),Cn=f(),$e=a("h2"),Ne=a("a"),Oo=a("span"),M(wt.$$.fragment),cr=f(),yo=a("span"),dr=m("ORTModelForQuestionAnswering"),An=f(),P=a("div"),M(vt.$$.fragment),ur=f(),jo=a("p"),fr=m("Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),hr=f(),xt=a("p"),gr=m("This model inherits from [~"),Eo=a("code"),_r=m("onnxruntime.modeling_ort.ORTModel"),$r=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),kr=f(),qo=a("p"),wr=m("Question Answering model for ONNX."),vr=f(),Q=a("div"),M(Tt.$$.fragment),xr=f(),ke=a("p"),Tr=m("The "),Ro=a("code"),br=m("ORTModelForQuestionAnswering"),Mr=m(" forward method, overrides the "),Fo=a("code"),Or=m("__call__"),yr=m(" special method."),jr=f(),M(Se.$$.fragment),Er=f(),M(De.$$.fragment),qr=f(),M(Le.$$.fragment),Pn=f(),we=a("h2"),He=a("a"),zo=a("span"),M(bt.$$.fragment),Rr=f(),Co=a("span"),Fr=m("ORTModelForSequenceClassification"),In=f(),I=a("div"),M(Mt.$$.fragment),zr=f(),Ao=a("p"),Cr=m(`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Ar=f(),Ot=a("p"),Pr=m("This model inherits from [~"),Po=a("code"),Ir=m("onnxruntime.modeling_ort.ORTModel"),Nr=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Sr=f(),Io=a("p"),Dr=m("Sequence Classification model for ONNX."),Lr=f(),z=a("div"),M(yt.$$.fragment),Hr=f(),ve=a("p"),Qr=m("The "),No=a("code"),Xr=m("ORTModelForSequenceClassification"),Wr=m(" forward method, overrides the "),So=a("code"),Br=m("__call__"),Gr=m(" special method."),Vr=f(),M(Qe.$$.fragment),Ur=f(),M(Xe.$$.fragment),Jr=f(),M(We.$$.fragment),Yr=f(),M(Be.$$.fragment),Nn=f(),xe=a("h2"),Ge=a("a"),Do=a("span"),M(jt.$$.fragment),Zr=f(),Lo=a("span"),Kr=m("ORTModelForTokenClassification"),Sn=f(),N=a("div"),M(Et.$$.fragment),ea=f(),Ho=a("p"),ta=m(`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),oa=f(),qt=a("p"),na=m("This model inherits from [~"),Qo=a("code"),sa=m("onnxruntime.modeling_ort.ORTModel"),ra=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),aa=f(),Xo=a("p"),ia=m("Token Classification model for ONNX."),la=f(),X=a("div"),M(Rt.$$.fragment),ma=f(),Te=a("p"),pa=m("The "),Wo=a("code"),ca=m("ORTModelForTokenClassification"),da=m(" forward method, overrides the "),Bo=a("code"),ua=m("__call__"),fa=m(" special method."),ha=f(),M(Ve.$$.fragment),ga=f(),M(Ue.$$.fragment),_a=f(),M(Je.$$.fragment),Dn=f(),be=a("h2"),Ye=a("a"),Go=a("span"),M(Ft.$$.fragment),$a=f(),Vo=a("span"),ka=m("ORTModelForCausalLM"),Ln=f(),S=a("div"),M(zt.$$.fragment),wa=f(),Uo=a("p"),va=m(`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),xa=f(),Ct=a("p"),Ta=m("This model inherits from [~"),Jo=a("code"),ba=m("onnxruntime.modeling_ort.ORTModel"),Ma=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Oa=f(),Yo=a("p"),ya=m("Causal LM model for ONNX."),ja=f(),W=a("div"),M(At.$$.fragment),Ea=f(),Me=a("p"),qa=m("The "),Zo=a("code"),Ra=m("ORTModelForCausalLM"),Fa=m(" forward method, overrides the "),Ko=a("code"),za=m("__call__"),Ca=m(" special method."),Aa=f(),M(Ze.$$.fragment),Pa=f(),M(Ke.$$.fragment),Ia=f(),M(et.$$.fragment),Hn=f(),Oe=a("h2"),tt=a("a"),en=a("span"),M(Pt.$$.fragment),Na=f(),tn=a("span"),Sa=m("ORTModelForImageClassification"),Qn=f(),D=a("div"),M(It.$$.fragment),Da=f(),on=a("p"),La=m("Onnx Model for image-classification tasks."),Ha=f(),Nt=a("p"),Qa=m("This model inherits from [~"),nn=a("code"),Xa=m("onnxruntime.modeling_ort.ORTModel"),Wa=m(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Ba=f(),sn=a("p"),Ga=m("Image Classification model for ONNX."),Va=f(),B=a("div"),M(St.$$.fragment),Ua=f(),ye=a("p"),Ja=m("The "),rn=a("code"),Ya=m("ORTModelForImageClassification"),Za=m(" forward method, overrides the "),an=a("code"),Ka=m("__call__"),ei=m(" special method."),ti=f(),M(ot.$$.fragment),oi=f(),M(nt.$$.fragment),ni=f(),M(st.$$.fragment),this.h()},l(t){const $=Tl('[data-svelte="svelte-1phssyn"]',document.head);s=i($,"META",{name:!0,content:!0}),$.forEach(o),_=h(t),d=i(t,"H1",{class:!0});var Dt=l(d);u=i(Dt,"A",{id:!0,class:!0,href:!0});var ln=l(u);g=i(ln,"SPAN",{});var mn=l(g);O(n.$$.fragment,mn),mn.forEach(o),ln.forEach(o),r=h(Dt),x=i(Dt,"SPAN",{});var pn=l(x);c=p(pn,"Optimum Inference with ONNX Runtime"),pn.forEach(o),Dt.forEach(o),w=h(t),q=i(t,"P",{});var Lt=l(q);R=p(Lt,`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),F=i(Lt,"A",{href:!0});var cn=l(F);Xt=p(cn,"Hugging Face Hub"),cn.forEach(o),Wt=p(Lt,` and create pipelines
to run accelerated inference without rewriting your APIs.`),Lt.forEach(o),vn=h(t),ue=i(t,"H2",{class:!0});var Ht=l(ue);Ee=i(Ht,"A",{id:!0,class:!0,href:!0});var dn=l(Ee);no=i(dn,"SPAN",{});var un=l(no);O(at.$$.fragment,un),un.forEach(o),dn.forEach(o),is=h(Ht),so=i(Ht,"SPAN",{});var fn=l(so);ls=p(fn,"Switching from Transformers to Optimum Inference"),fn.forEach(o),Ht.forEach(o),xn=h(t),L=i(t,"P",{});var V=l(L);ms=p(V,"The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),ro=i(V,"CODE",{});var hn=l(ro);ps=p(hn,"AutoModelForXxx"),hn.forEach(o),cs=p(V," class with the corresponding "),ao=i(V,"CODE",{});var gn=l(ao);ds=p(gn,"ORTModelForXxx"),gn.forEach(o),us=p(V," class in "),io=i(V,"CODE",{});var _n=l(io);fs=p(_n,"optimum"),_n.forEach(o),hs=p(V,". For example, this is how you can use a question answering model in "),lo=i(V,"CODE",{});var $n=l(lo);gs=p($n,"optimum"),$n.forEach(o),_s=p(V,":"),V.forEach(o),Tn=h(t),O(it.$$.fragment,t),bn=h(t),te=i(t,"P",{});var je=l(te);$s=p(je,"Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),mo=i(je,"CODE",{});var kn=l(mo);ks=p(kn,"from_transformers=True"),kn.forEach(o),ws=p(je," to the "),po=i(je,"CODE",{});var wn=l(po);vs=p(wn,"from_pretrained()"),wn.forEach(o),xs=p(je," method, and your model will be loaded and converted to ONNX on-the-fly:"),je.forEach(o),Mn=h(t),O(lt.$$.fragment,t),On=h(t),qe=i(t,"P",{});var Qt=l(qe);Ts=p(Qt,"You can find a complete walkhrough Optimum Inference for ONNX Runtime in this "),Bt=i(Qt,"A",{href:!0});var ri=l(Bt);bs=p(ri,"notebook"),ri.forEach(o),Ms=p(Qt,"."),Qt.forEach(o),yn=h(t),fe=i(t,"H3",{class:!0});var Wn=l(fe);Re=i(Wn,"A",{id:!0,class:!0,href:!0});var ai=l(Re);co=i(ai,"SPAN",{});var ii=l(co);O(mt.$$.fragment,ii),ii.forEach(o),ai.forEach(o),Os=h(Wn),uo=i(Wn,"SPAN",{});var li=l(uo);ys=p(li,"Working with the Hugging Face Model Hub"),li.forEach(o),Wn.forEach(o),jn=h(t),Y=i(t,"P",{});var rt=l(Y);js=p(rt,"The Optimum model classes like "),Gt=i(rt,"A",{href:!0});var mi=l(Gt);Es=p(mi,"ORTModelForSequenceClassification"),mi.forEach(o),qs=p(rt," are integrated with the "),pt=i(rt,"A",{href:!0,rel:!0});var pi=l(pt);Rs=p(pi,"Hugging Face Model Hub"),pi.forEach(o),Fs=p(rt,`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),fo=i(rt,"CODE",{});var ci=l(fo);zs=p(ci,"push_to_hub()"),ci.forEach(o),Cs=p(rt,` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),rt.forEach(o),En=h(t),O(ct.$$.fragment,t),qn=h(t),he=i(t,"H2",{class:!0});var Bn=l(he);Fe=i(Bn,"A",{id:!0,class:!0,href:!0});var di=l(Fe);ho=i(di,"SPAN",{});var ui=l(ho);O(dt.$$.fragment,ui),ui.forEach(o),di.forEach(o),As=h(Bn),go=i(Bn,"SPAN",{});var fi=l(go);Ps=p(fi,"ORTModel"),fi.forEach(o),Bn.forEach(o),Rn=h(t),K=i(t,"DIV",{class:!0});var Ut=l(K);O(ut.$$.fragment,Ut),Is=h(Ut),ft=i(Ut,"P",{});var Gn=l(ft);Ns=p(Gn,`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),_o=i(Gn,"CODE",{});var hi=l(_o);Ss=p(hi,"transformers.onnx"),hi.forEach(o),Ds=p(Gn,` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Gn.forEach(o),Ls=h(Ut),ze=i(Ut,"DIV",{class:!0});var Vn=l(ze);O(ht.$$.fragment,Vn),Hs=h(Vn),Vt=i(Vn,"P",{});var si=l(Vt);Qs=p(si,"loads ONNX Inference session with Provider. Default Provider is if CUDAExecutionProvider GPU available else "),$o=i(si,"CODE",{});var gi=l($o);Xs=p(gi,"CPUExecutionProvider"),gi.forEach(o),si.forEach(o),Vn.forEach(o),Ut.forEach(o),Fn=h(t),ge=i(t,"H2",{class:!0});var Un=l(ge);Ce=i(Un,"A",{id:!0,class:!0,href:!0});var _i=l(Ce);ko=i(_i,"SPAN",{});var $i=l(ko);O(gt.$$.fragment,$i),$i.forEach(o),_i.forEach(o),Ws=h(Un),wo=i(Un,"SPAN",{});var ki=l(wo);Bs=p(ki,"ORTModelForFeatureExtraction"),ki.forEach(o),Un.forEach(o),zn=h(t),A=i(t,"DIV",{class:!0});var oe=l(A);O(_t.$$.fragment,oe),Gs=h(oe),vo=i(oe,"P",{});var wi=l(vo);Vs=p(wi,"Onnx Model with a MaskedLMOutput for feature-extraction tasks."),wi.forEach(o),Us=h(oe),$t=i(oe,"P",{});var Jn=l($t);Js=p(Jn,"This model inherits from [~"),xo=i(Jn,"CODE",{});var vi=l(xo);Ys=p(vi,"onnxruntime.modeling_ort.ORTModel"),vi.forEach(o),Zs=p(Jn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Jn.forEach(o),Ks=h(oe),To=i(oe,"P",{});var xi=l(To);er=p(xi,"Feature Extraction model for ONNX."),xi.forEach(o),tr=h(oe),H=i(oe,"DIV",{class:!0});var ne=l(H);O(kt.$$.fragment,ne),or=h(ne),_e=i(ne,"P",{});var Jt=l(_e);nr=p(Jt,"The "),bo=i(Jt,"CODE",{});var Ti=l(bo);sr=p(Ti,"ORTModelForFeatureExtraction"),Ti.forEach(o),rr=p(Jt," forward method, overrides the "),Mo=i(Jt,"CODE",{});var bi=l(Mo);ar=p(bi,"__call__"),bi.forEach(o),ir=p(Jt," special method."),Jt.forEach(o),lr=h(ne),O(Ae.$$.fragment,ne),mr=h(ne),O(Pe.$$.fragment,ne),pr=h(ne),O(Ie.$$.fragment,ne),ne.forEach(o),oe.forEach(o),Cn=h(t),$e=i(t,"H2",{class:!0});var Yn=l($e);Ne=i(Yn,"A",{id:!0,class:!0,href:!0});var Mi=l(Ne);Oo=i(Mi,"SPAN",{});var Oi=l(Oo);O(wt.$$.fragment,Oi),Oi.forEach(o),Mi.forEach(o),cr=h(Yn),yo=i(Yn,"SPAN",{});var yi=l(yo);dr=p(yi,"ORTModelForQuestionAnswering"),yi.forEach(o),Yn.forEach(o),An=h(t),P=i(t,"DIV",{class:!0});var se=l(P);O(vt.$$.fragment,se),ur=h(se),jo=i(se,"P",{});var ji=l(jo);fr=p(ji,"Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),ji.forEach(o),hr=h(se),xt=i(se,"P",{});var Zn=l(xt);gr=p(Zn,"This model inherits from [~"),Eo=i(Zn,"CODE",{});var Ei=l(Eo);_r=p(Ei,"onnxruntime.modeling_ort.ORTModel"),Ei.forEach(o),$r=p(Zn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Zn.forEach(o),kr=h(se),qo=i(se,"P",{});var qi=l(qo);wr=p(qi,"Question Answering model for ONNX."),qi.forEach(o),vr=h(se),Q=i(se,"DIV",{class:!0});var re=l(Q);O(Tt.$$.fragment,re),xr=h(re),ke=i(re,"P",{});var Yt=l(ke);Tr=p(Yt,"The "),Ro=i(Yt,"CODE",{});var Ri=l(Ro);br=p(Ri,"ORTModelForQuestionAnswering"),Ri.forEach(o),Mr=p(Yt," forward method, overrides the "),Fo=i(Yt,"CODE",{});var Fi=l(Fo);Or=p(Fi,"__call__"),Fi.forEach(o),yr=p(Yt," special method."),Yt.forEach(o),jr=h(re),O(Se.$$.fragment,re),Er=h(re),O(De.$$.fragment,re),qr=h(re),O(Le.$$.fragment,re),re.forEach(o),se.forEach(o),Pn=h(t),we=i(t,"H2",{class:!0});var Kn=l(we);He=i(Kn,"A",{id:!0,class:!0,href:!0});var zi=l(He);zo=i(zi,"SPAN",{});var Ci=l(zo);O(bt.$$.fragment,Ci),Ci.forEach(o),zi.forEach(o),Rr=h(Kn),Co=i(Kn,"SPAN",{});var Ai=l(Co);Fr=p(Ai,"ORTModelForSequenceClassification"),Ai.forEach(o),Kn.forEach(o),In=h(t),I=i(t,"DIV",{class:!0});var ae=l(I);O(Mt.$$.fragment,ae),zr=h(ae),Ao=i(ae,"P",{});var Pi=l(Ao);Cr=p(Pi,`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Pi.forEach(o),Ar=h(ae),Ot=i(ae,"P",{});var es=l(Ot);Pr=p(es,"This model inherits from [~"),Po=i(es,"CODE",{});var Ii=l(Po);Ir=p(Ii,"onnxruntime.modeling_ort.ORTModel"),Ii.forEach(o),Nr=p(es,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),es.forEach(o),Sr=h(ae),Io=i(ae,"P",{});var Ni=l(Io);Dr=p(Ni,"Sequence Classification model for ONNX."),Ni.forEach(o),Lr=h(ae),z=i(ae,"DIV",{class:!0});var Z=l(z);O(yt.$$.fragment,Z),Hr=h(Z),ve=i(Z,"P",{});var Zt=l(ve);Qr=p(Zt,"The "),No=i(Zt,"CODE",{});var Si=l(No);Xr=p(Si,"ORTModelForSequenceClassification"),Si.forEach(o),Wr=p(Zt," forward method, overrides the "),So=i(Zt,"CODE",{});var Di=l(So);Br=p(Di,"__call__"),Di.forEach(o),Gr=p(Zt," special method."),Zt.forEach(o),Vr=h(Z),O(Qe.$$.fragment,Z),Ur=h(Z),O(Xe.$$.fragment,Z),Jr=h(Z),O(We.$$.fragment,Z),Yr=h(Z),O(Be.$$.fragment,Z),Z.forEach(o),ae.forEach(o),Nn=h(t),xe=i(t,"H2",{class:!0});var ts=l(xe);Ge=i(ts,"A",{id:!0,class:!0,href:!0});var Li=l(Ge);Do=i(Li,"SPAN",{});var Hi=l(Do);O(jt.$$.fragment,Hi),Hi.forEach(o),Li.forEach(o),Zr=h(ts),Lo=i(ts,"SPAN",{});var Qi=l(Lo);Kr=p(Qi,"ORTModelForTokenClassification"),Qi.forEach(o),ts.forEach(o),Sn=h(t),N=i(t,"DIV",{class:!0});var ie=l(N);O(Et.$$.fragment,ie),ea=h(ie),Ho=i(ie,"P",{});var Xi=l(Ho);ta=p(Xi,`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Xi.forEach(o),oa=h(ie),qt=i(ie,"P",{});var os=l(qt);na=p(os,"This model inherits from [~"),Qo=i(os,"CODE",{});var Wi=l(Qo);sa=p(Wi,"onnxruntime.modeling_ort.ORTModel"),Wi.forEach(o),ra=p(os,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),os.forEach(o),aa=h(ie),Xo=i(ie,"P",{});var Bi=l(Xo);ia=p(Bi,"Token Classification model for ONNX."),Bi.forEach(o),la=h(ie),X=i(ie,"DIV",{class:!0});var le=l(X);O(Rt.$$.fragment,le),ma=h(le),Te=i(le,"P",{});var Kt=l(Te);pa=p(Kt,"The "),Wo=i(Kt,"CODE",{});var Gi=l(Wo);ca=p(Gi,"ORTModelForTokenClassification"),Gi.forEach(o),da=p(Kt," forward method, overrides the "),Bo=i(Kt,"CODE",{});var Vi=l(Bo);ua=p(Vi,"__call__"),Vi.forEach(o),fa=p(Kt," special method."),Kt.forEach(o),ha=h(le),O(Ve.$$.fragment,le),ga=h(le),O(Ue.$$.fragment,le),_a=h(le),O(Je.$$.fragment,le),le.forEach(o),ie.forEach(o),Dn=h(t),be=i(t,"H2",{class:!0});var ns=l(be);Ye=i(ns,"A",{id:!0,class:!0,href:!0});var Ui=l(Ye);Go=i(Ui,"SPAN",{});var Ji=l(Go);O(Ft.$$.fragment,Ji),Ji.forEach(o),Ui.forEach(o),$a=h(ns),Vo=i(ns,"SPAN",{});var Yi=l(Vo);ka=p(Yi,"ORTModelForCausalLM"),Yi.forEach(o),ns.forEach(o),Ln=h(t),S=i(t,"DIV",{class:!0});var me=l(S);O(zt.$$.fragment,me),wa=h(me),Uo=i(me,"P",{});var Zi=l(Uo);va=p(Zi,`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),Zi.forEach(o),xa=h(me),Ct=i(me,"P",{});var ss=l(Ct);Ta=p(ss,"This model inherits from [~"),Jo=i(ss,"CODE",{});var Ki=l(Jo);ba=p(Ki,"onnxruntime.modeling_ort.ORTModel"),Ki.forEach(o),Ma=p(ss,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),ss.forEach(o),Oa=h(me),Yo=i(me,"P",{});var el=l(Yo);ya=p(el,"Causal LM model for ONNX."),el.forEach(o),ja=h(me),W=i(me,"DIV",{class:!0});var pe=l(W);O(At.$$.fragment,pe),Ea=h(pe),Me=i(pe,"P",{});var eo=l(Me);qa=p(eo,"The "),Zo=i(eo,"CODE",{});var tl=l(Zo);Ra=p(tl,"ORTModelForCausalLM"),tl.forEach(o),Fa=p(eo," forward method, overrides the "),Ko=i(eo,"CODE",{});var ol=l(Ko);za=p(ol,"__call__"),ol.forEach(o),Ca=p(eo," special method."),eo.forEach(o),Aa=h(pe),O(Ze.$$.fragment,pe),Pa=h(pe),O(Ke.$$.fragment,pe),Ia=h(pe),O(et.$$.fragment,pe),pe.forEach(o),me.forEach(o),Hn=h(t),Oe=i(t,"H2",{class:!0});var rs=l(Oe);tt=i(rs,"A",{id:!0,class:!0,href:!0});var nl=l(tt);en=i(nl,"SPAN",{});var sl=l(en);O(Pt.$$.fragment,sl),sl.forEach(o),nl.forEach(o),Na=h(rs),tn=i(rs,"SPAN",{});var rl=l(tn);Sa=p(rl,"ORTModelForImageClassification"),rl.forEach(o),rs.forEach(o),Qn=h(t),D=i(t,"DIV",{class:!0});var ce=l(D);O(It.$$.fragment,ce),Da=h(ce),on=i(ce,"P",{});var al=l(on);La=p(al,"Onnx Model for image-classification tasks."),al.forEach(o),Ha=h(ce),Nt=i(ce,"P",{});var as=l(Nt);Qa=p(as,"This model inherits from [~"),nn=i(as,"CODE",{});var il=l(nn);Xa=p(il,"onnxruntime.modeling_ort.ORTModel"),il.forEach(o),Wa=p(as,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),as.forEach(o),Ba=h(ce),sn=i(ce,"P",{});var ll=l(sn);Ga=p(ll,"Image Classification model for ONNX."),ll.forEach(o),Va=h(ce),B=i(ce,"DIV",{class:!0});var de=l(B);O(St.$$.fragment,de),Ua=h(de),ye=i(de,"P",{});var to=l(ye);Ja=p(to,"The "),rn=i(to,"CODE",{});var ml=l(rn);Ya=p(ml,"ORTModelForImageClassification"),ml.forEach(o),Za=p(to," forward method, overrides the "),an=i(to,"CODE",{});var pl=l(an);Ka=p(pl,"__call__"),pl.forEach(o),ei=p(to," special method."),to.forEach(o),ti=h(de),O(ot.$$.fragment,de),oi=h(de),O(nt.$$.fragment,de),ni=h(de),O(st.$$.fragment,de),de.forEach(o),ce.forEach(o),this.h()},h(){v(s,"name","hf:doc:metadata"),v(s,"content",JSON.stringify(Gl)),v(u,"id","optimum-inference-with-onnx-runtime"),v(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(u,"href","#optimum-inference-with-onnx-runtime"),v(d,"class","relative group"),v(F,"href","hf.co/models"),v(Ee,"id","switching-from-transformers-to-optimum-inference"),v(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ee,"href","#switching-from-transformers-to-optimum-inference"),v(ue,"class","relative group"),v(Bt,"href","todo:add-link"),v(Re,"id","working-with-the-hugging-face-model-hub"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#working-with-the-hugging-face-model-hub"),v(fe,"class","relative group"),v(Gt,"href","/docs/optimum/pr_226/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModelForSequenceClassification"),v(pt,"href","https://hf.co/models"),v(pt,"rel","nofollow"),v(Fe,"id","optimum.onnxruntime.ORTModel"),v(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Fe,"href","#optimum.onnxruntime.ORTModel"),v(he,"class","relative group"),v(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ce,"id","optimum.onnxruntime.ORTModelForFeatureExtraction"),v(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ce,"href","#optimum.onnxruntime.ORTModelForFeatureExtraction"),v(ge,"class","relative group"),v(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ne,"id","optimum.onnxruntime.ORTModelForQuestionAnswering"),v(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ne,"href","#optimum.onnxruntime.ORTModelForQuestionAnswering"),v($e,"class","relative group"),v(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(He,"id","optimum.onnxruntime.ORTModelForSequenceClassification"),v(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(He,"href","#optimum.onnxruntime.ORTModelForSequenceClassification"),v(we,"class","relative group"),v(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ge,"id","optimum.onnxruntime.ORTModelForTokenClassification"),v(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ge,"href","#optimum.onnxruntime.ORTModelForTokenClassification"),v(xe,"class","relative group"),v(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ye,"id","optimum.onnxruntime.ORTModelForCausalLM"),v(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ye,"href","#optimum.onnxruntime.ORTModelForCausalLM"),v(be,"class","relative group"),v(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(tt,"id","optimum.onnxruntime.ORTModelForImageClassification"),v(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(tt,"href","#optimum.onnxruntime.ORTModelForImageClassification"),v(Oe,"class","relative group"),v(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,$){e(document.head,s),k(t,_,$),k(t,d,$),e(d,u),e(u,g),y(n,g,null),e(d,r),e(d,x),e(x,c),k(t,w,$),k(t,q,$),e(q,R),e(q,F),e(F,Xt),e(q,Wt),k(t,vn,$),k(t,ue,$),e(ue,Ee),e(Ee,no),y(at,no,null),e(ue,is),e(ue,so),e(so,ls),k(t,xn,$),k(t,L,$),e(L,ms),e(L,ro),e(ro,ps),e(L,cs),e(L,ao),e(ao,ds),e(L,us),e(L,io),e(io,fs),e(L,hs),e(L,lo),e(lo,gs),e(L,_s),k(t,Tn,$),y(it,t,$),k(t,bn,$),k(t,te,$),e(te,$s),e(te,mo),e(mo,ks),e(te,ws),e(te,po),e(po,vs),e(te,xs),k(t,Mn,$),y(lt,t,$),k(t,On,$),k(t,qe,$),e(qe,Ts),e(qe,Bt),e(Bt,bs),e(qe,Ms),k(t,yn,$),k(t,fe,$),e(fe,Re),e(Re,co),y(mt,co,null),e(fe,Os),e(fe,uo),e(uo,ys),k(t,jn,$),k(t,Y,$),e(Y,js),e(Y,Gt),e(Gt,Es),e(Y,qs),e(Y,pt),e(pt,Rs),e(Y,Fs),e(Y,fo),e(fo,zs),e(Y,Cs),k(t,En,$),y(ct,t,$),k(t,qn,$),k(t,he,$),e(he,Fe),e(Fe,ho),y(dt,ho,null),e(he,As),e(he,go),e(go,Ps),k(t,Rn,$),k(t,K,$),y(ut,K,null),e(K,Is),e(K,ft),e(ft,Ns),e(ft,_o),e(_o,Ss),e(ft,Ds),e(K,Ls),e(K,ze),y(ht,ze,null),e(ze,Hs),e(ze,Vt),e(Vt,Qs),e(Vt,$o),e($o,Xs),k(t,Fn,$),k(t,ge,$),e(ge,Ce),e(Ce,ko),y(gt,ko,null),e(ge,Ws),e(ge,wo),e(wo,Bs),k(t,zn,$),k(t,A,$),y(_t,A,null),e(A,Gs),e(A,vo),e(vo,Vs),e(A,Us),e(A,$t),e($t,Js),e($t,xo),e(xo,Ys),e($t,Zs),e(A,Ks),e(A,To),e(To,er),e(A,tr),e(A,H),y(kt,H,null),e(H,or),e(H,_e),e(_e,nr),e(_e,bo),e(bo,sr),e(_e,rr),e(_e,Mo),e(Mo,ar),e(_e,ir),e(H,lr),y(Ae,H,null),e(H,mr),y(Pe,H,null),e(H,pr),y(Ie,H,null),k(t,Cn,$),k(t,$e,$),e($e,Ne),e(Ne,Oo),y(wt,Oo,null),e($e,cr),e($e,yo),e(yo,dr),k(t,An,$),k(t,P,$),y(vt,P,null),e(P,ur),e(P,jo),e(jo,fr),e(P,hr),e(P,xt),e(xt,gr),e(xt,Eo),e(Eo,_r),e(xt,$r),e(P,kr),e(P,qo),e(qo,wr),e(P,vr),e(P,Q),y(Tt,Q,null),e(Q,xr),e(Q,ke),e(ke,Tr),e(ke,Ro),e(Ro,br),e(ke,Mr),e(ke,Fo),e(Fo,Or),e(ke,yr),e(Q,jr),y(Se,Q,null),e(Q,Er),y(De,Q,null),e(Q,qr),y(Le,Q,null),k(t,Pn,$),k(t,we,$),e(we,He),e(He,zo),y(bt,zo,null),e(we,Rr),e(we,Co),e(Co,Fr),k(t,In,$),k(t,I,$),y(Mt,I,null),e(I,zr),e(I,Ao),e(Ao,Cr),e(I,Ar),e(I,Ot),e(Ot,Pr),e(Ot,Po),e(Po,Ir),e(Ot,Nr),e(I,Sr),e(I,Io),e(Io,Dr),e(I,Lr),e(I,z),y(yt,z,null),e(z,Hr),e(z,ve),e(ve,Qr),e(ve,No),e(No,Xr),e(ve,Wr),e(ve,So),e(So,Br),e(ve,Gr),e(z,Vr),y(Qe,z,null),e(z,Ur),y(Xe,z,null),e(z,Jr),y(We,z,null),e(z,Yr),y(Be,z,null),k(t,Nn,$),k(t,xe,$),e(xe,Ge),e(Ge,Do),y(jt,Do,null),e(xe,Zr),e(xe,Lo),e(Lo,Kr),k(t,Sn,$),k(t,N,$),y(Et,N,null),e(N,ea),e(N,Ho),e(Ho,ta),e(N,oa),e(N,qt),e(qt,na),e(qt,Qo),e(Qo,sa),e(qt,ra),e(N,aa),e(N,Xo),e(Xo,ia),e(N,la),e(N,X),y(Rt,X,null),e(X,ma),e(X,Te),e(Te,pa),e(Te,Wo),e(Wo,ca),e(Te,da),e(Te,Bo),e(Bo,ua),e(Te,fa),e(X,ha),y(Ve,X,null),e(X,ga),y(Ue,X,null),e(X,_a),y(Je,X,null),k(t,Dn,$),k(t,be,$),e(be,Ye),e(Ye,Go),y(Ft,Go,null),e(be,$a),e(be,Vo),e(Vo,ka),k(t,Ln,$),k(t,S,$),y(zt,S,null),e(S,wa),e(S,Uo),e(Uo,va),e(S,xa),e(S,Ct),e(Ct,Ta),e(Ct,Jo),e(Jo,ba),e(Ct,Ma),e(S,Oa),e(S,Yo),e(Yo,ya),e(S,ja),e(S,W),y(At,W,null),e(W,Ea),e(W,Me),e(Me,qa),e(Me,Zo),e(Zo,Ra),e(Me,Fa),e(Me,Ko),e(Ko,za),e(Me,Ca),e(W,Aa),y(Ze,W,null),e(W,Pa),y(Ke,W,null),e(W,Ia),y(et,W,null),k(t,Hn,$),k(t,Oe,$),e(Oe,tt),e(tt,en),y(Pt,en,null),e(Oe,Na),e(Oe,tn),e(tn,Sa),k(t,Qn,$),k(t,D,$),y(It,D,null),e(D,Da),e(D,on),e(on,La),e(D,Ha),e(D,Nt),e(Nt,Qa),e(Nt,nn),e(nn,Xa),e(Nt,Wa),e(D,Ba),e(D,sn),e(sn,Ga),e(D,Va),e(D,B),y(St,B,null),e(B,Ua),e(B,ye),e(ye,Ja),e(ye,rn),e(rn,Ya),e(ye,Za),e(ye,an),e(an,Ka),e(ye,ei),e(B,ti),y(ot,B,null),e(B,oi),y(nt,B,null),e(B,ni),y(st,B,null),Xn=!0},p(t,[$]){const Dt={};$&2&&(Dt.$$scope={dirty:$,ctx:t}),Ae.$set(Dt);const ln={};$&2&&(ln.$$scope={dirty:$,ctx:t}),Pe.$set(ln);const mn={};$&2&&(mn.$$scope={dirty:$,ctx:t}),Ie.$set(mn);const pn={};$&2&&(pn.$$scope={dirty:$,ctx:t}),Se.$set(pn);const Lt={};$&2&&(Lt.$$scope={dirty:$,ctx:t}),De.$set(Lt);const cn={};$&2&&(cn.$$scope={dirty:$,ctx:t}),Le.$set(cn);const Ht={};$&2&&(Ht.$$scope={dirty:$,ctx:t}),Qe.$set(Ht);const dn={};$&2&&(dn.$$scope={dirty:$,ctx:t}),Xe.$set(dn);const un={};$&2&&(un.$$scope={dirty:$,ctx:t}),We.$set(un);const fn={};$&2&&(fn.$$scope={dirty:$,ctx:t}),Be.$set(fn);const V={};$&2&&(V.$$scope={dirty:$,ctx:t}),Ve.$set(V);const hn={};$&2&&(hn.$$scope={dirty:$,ctx:t}),Ue.$set(hn);const gn={};$&2&&(gn.$$scope={dirty:$,ctx:t}),Je.$set(gn);const _n={};$&2&&(_n.$$scope={dirty:$,ctx:t}),Ze.$set(_n);const $n={};$&2&&($n.$$scope={dirty:$,ctx:t}),Ke.$set($n);const je={};$&2&&(je.$$scope={dirty:$,ctx:t}),et.$set(je);const kn={};$&2&&(kn.$$scope={dirty:$,ctx:t}),ot.$set(kn);const wn={};$&2&&(wn.$$scope={dirty:$,ctx:t}),nt.$set(wn);const Qt={};$&2&&(Qt.$$scope={dirty:$,ctx:t}),st.$set(Qt)},i(t){Xn||(T(n.$$.fragment,t),T(at.$$.fragment,t),T(it.$$.fragment,t),T(lt.$$.fragment,t),T(mt.$$.fragment,t),T(ct.$$.fragment,t),T(dt.$$.fragment,t),T(ut.$$.fragment,t),T(ht.$$.fragment,t),T(gt.$$.fragment,t),T(_t.$$.fragment,t),T(kt.$$.fragment,t),T(Ae.$$.fragment,t),T(Pe.$$.fragment,t),T(Ie.$$.fragment,t),T(wt.$$.fragment,t),T(vt.$$.fragment,t),T(Tt.$$.fragment,t),T(Se.$$.fragment,t),T(De.$$.fragment,t),T(Le.$$.fragment,t),T(bt.$$.fragment,t),T(Mt.$$.fragment,t),T(yt.$$.fragment,t),T(Qe.$$.fragment,t),T(Xe.$$.fragment,t),T(We.$$.fragment,t),T(Be.$$.fragment,t),T(jt.$$.fragment,t),T(Et.$$.fragment,t),T(Rt.$$.fragment,t),T(Ve.$$.fragment,t),T(Ue.$$.fragment,t),T(Je.$$.fragment,t),T(Ft.$$.fragment,t),T(zt.$$.fragment,t),T(At.$$.fragment,t),T(Ze.$$.fragment,t),T(Ke.$$.fragment,t),T(et.$$.fragment,t),T(Pt.$$.fragment,t),T(It.$$.fragment,t),T(St.$$.fragment,t),T(ot.$$.fragment,t),T(nt.$$.fragment,t),T(st.$$.fragment,t),Xn=!0)},o(t){b(n.$$.fragment,t),b(at.$$.fragment,t),b(it.$$.fragment,t),b(lt.$$.fragment,t),b(mt.$$.fragment,t),b(ct.$$.fragment,t),b(dt.$$.fragment,t),b(ut.$$.fragment,t),b(ht.$$.fragment,t),b(gt.$$.fragment,t),b(_t.$$.fragment,t),b(kt.$$.fragment,t),b(Ae.$$.fragment,t),b(Pe.$$.fragment,t),b(Ie.$$.fragment,t),b(wt.$$.fragment,t),b(vt.$$.fragment,t),b(Tt.$$.fragment,t),b(Se.$$.fragment,t),b(De.$$.fragment,t),b(Le.$$.fragment,t),b(bt.$$.fragment,t),b(Mt.$$.fragment,t),b(yt.$$.fragment,t),b(Qe.$$.fragment,t),b(Xe.$$.fragment,t),b(We.$$.fragment,t),b(Be.$$.fragment,t),b(jt.$$.fragment,t),b(Et.$$.fragment,t),b(Rt.$$.fragment,t),b(Ve.$$.fragment,t),b(Ue.$$.fragment,t),b(Je.$$.fragment,t),b(Ft.$$.fragment,t),b(zt.$$.fragment,t),b(At.$$.fragment,t),b(Ze.$$.fragment,t),b(Ke.$$.fragment,t),b(et.$$.fragment,t),b(Pt.$$.fragment,t),b(It.$$.fragment,t),b(St.$$.fragment,t),b(ot.$$.fragment,t),b(nt.$$.fragment,t),b(st.$$.fragment,t),Xn=!1},d(t){o(s),t&&o(_),t&&o(d),j(n),t&&o(w),t&&o(q),t&&o(vn),t&&o(ue),j(at),t&&o(xn),t&&o(L),t&&o(Tn),j(it,t),t&&o(bn),t&&o(te),t&&o(Mn),j(lt,t),t&&o(On),t&&o(qe),t&&o(yn),t&&o(fe),j(mt),t&&o(jn),t&&o(Y),t&&o(En),j(ct,t),t&&o(qn),t&&o(he),j(dt),t&&o(Rn),t&&o(K),j(ut),j(ht),t&&o(Fn),t&&o(ge),j(gt),t&&o(zn),t&&o(A),j(_t),j(kt),j(Ae),j(Pe),j(Ie),t&&o(Cn),t&&o($e),j(wt),t&&o(An),t&&o(P),j(vt),j(Tt),j(Se),j(De),j(Le),t&&o(Pn),t&&o(we),j(bt),t&&o(In),t&&o(I),j(Mt),j(yt),j(Qe),j(Xe),j(We),j(Be),t&&o(Nn),t&&o(xe),j(jt),t&&o(Sn),t&&o(N),j(Et),j(Rt),j(Ve),j(Ue),j(Je),t&&o(Dn),t&&o(be),j(Ft),t&&o(Ln),t&&o(S),j(zt),j(At),j(Ze),j(Ke),j(et),t&&o(Hn),t&&o(Oe),j(Pt),t&&o(Qn),t&&o(D),j(It),j(St),j(ot),j(nt),j(st)}}}const Gl={local:"optimum-inference-with-onnx-runtime",sections:[{local:"switching-from-transformers-to-optimum-inference",sections:[{local:"working-with-the-hugging-face-model-hub",title:"Working with the Hugging Face Model Hub"}],title:"Switching from Transformers to Optimum Inference"},{local:"optimum.onnxruntime.ORTModel",title:"ORTModel"},{local:"optimum.onnxruntime.ORTModelForFeatureExtraction",title:"ORTModelForFeatureExtraction"},{local:"optimum.onnxruntime.ORTModelForQuestionAnswering",title:"ORTModelForQuestionAnswering"},{local:"optimum.onnxruntime.ORTModelForSequenceClassification",title:"ORTModelForSequenceClassification"},{local:"optimum.onnxruntime.ORTModelForTokenClassification",title:"ORTModelForTokenClassification"},{local:"optimum.onnxruntime.ORTModelForCausalLM",title:"ORTModelForCausalLM"},{local:"optimum.onnxruntime.ORTModelForImageClassification",title:"ORTModelForImageClassification"}],title:"Optimum Inference with ONNX Runtime"};function Vl(E){return hl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class em extends dl{constructor(s){super();ul(this,s,Vl,Bl,fl,{})}}export{em as default,Gl as metadata};
