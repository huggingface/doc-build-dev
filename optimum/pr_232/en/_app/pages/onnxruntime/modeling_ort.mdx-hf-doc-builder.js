import{S as wl,i as xl,s as vl,e as r,k as f,w as v,t as l,M as Tl,c as a,d as o,m as h,a as i,x as T,h as m,b as x,G as e,g as k,y as b,q as M,o as O,B as y,v as bl,L as J}from"../../chunks/vendor-hf-doc-builder.js";import{T as to}from"../../chunks/Tip-hf-doc-builder.js";import{D as S}from"../../chunks/Docstring-hf-doc-builder.js";import{C as F}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as pe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as V}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ml(E){let s,$,c,u,_;return{c(){s=r("p"),$=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r("code"),u=l("Module"),_=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a(p,"CODE",{});var j=i(c);u=m(j,"Module"),j.forEach(o),_=m(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(n,p){k(n,s,p),e(s,$),e(s,c),e(c,u),e(s,_)},d(n){n&&o(s)}}}function Ol(E){let s,$,c,u,_;return u=new F({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForFeatureExtraction
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=r("p"),$=l("Example of feature extraction:"),c=f(),v(u.$$.fragment)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Example of feature extraction:"),p.forEach(o),c=h(n),T(u.$$.fragment,n)},m(n,p){k(n,s,p),e(s,$),k(n,c,p),b(u,n,p),_=!0},p:J,i(n){_||(M(u.$$.fragment,n),_=!0)},o(n){O(u.$$.fragment,n),_=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function yl(E){let s,$,c,u,_,n,p,j;return p=new F({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForFeatureExtraction

tokenizer = AutoTokenizer.from_pretrained("optimum/all-MiniLM-L6-v2")
model = ORTModelForFeatureExtraction.from_pretrained("optimum/all-MiniLM-L6-v2")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForFeatureExtraction

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForFeatureExtraction.from_pretrained(<span class="hljs-string">&quot;optimum/all-MiniLM-L6-v2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=r("p"),$=l("Example using "),c=r("code"),u=l("transformers.pipeline"),_=l(":"),n=f(),v(p.$$.fragment)},l(d){s=a(d,"P",{});var w=i(s);$=m(w,"Example using "),c=a(w,"CODE",{});var q=i(c);u=m(q,"transformers.pipeline"),q.forEach(o),_=m(w,":"),w.forEach(o),n=h(d),T(p.$$.fragment,d)},m(d,w){k(d,s,w),e(s,$),e(s,c),e(c,u),e(s,_),k(d,n,w),b(p,d,w),j=!0},p:J,i(d){j||(M(p.$$.fragment,d),j=!0)},o(d){O(p.$$.fragment,d),j=!1},d(d){d&&o(s),d&&o(n),y(p,d)}}}function jl(E){let s,$,c,u,_;return{c(){s=r("p"),$=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r("code"),u=l("Module"),_=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a(p,"CODE",{});var j=i(c);u=m(j,"Module"),j.forEach(o),_=m(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(n,p){k(n,s,p),e(s,$),e(s,c),e(c,u),e(s,_)},d(n){n&&o(s)}}}function El(E){let s,$,c,u,_;return u=new F({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForQuestionAnswering
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
inputs = tokenizer(question, text, return_tensors="pt")
start_positions = torch.tensor([1])
end_positions = torch.tensor([3])

outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
start_scores = outputs.start_logits
end_scores = outputs.end_logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_positions = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>end_positions = torch.tensor([<span class="hljs-number">3</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_scores = outputs.start_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>end_scores = outputs.end_logits`}}),{c(){s=r("p"),$=l("Example of question answering:"),c=f(),v(u.$$.fragment)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Example of question answering:"),p.forEach(o),c=h(n),T(u.$$.fragment,n)},m(n,p){k(n,s,p),e(s,$),k(n,c,p),b(u,n,p),_=!0},p:J,i(n){_||(M(u.$$.fragment,n),_=!0)},o(n){O(u.$$.fragment,n),_=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function ql(E){let s,$,c,u,_,n,p,j;return p=new F({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForQuestionAnswering

tokenizer = AutoTokenizer.from_pretrained("optimum/roberta-base-squad2")
model = ORTModelForQuestionAnswering.from_pretrained("optimum/roberta-base-squad2")
onnx_qa = pipeline("question-answering", model=model, tokenizer=tokenizer)

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
pred = onnx_qa(question, text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;optimum/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_qa = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_qa(question, text)`}}),{c(){s=r("p"),$=l("Example using "),c=r("code"),u=l("transformers.pipeline"),_=l(":"),n=f(),v(p.$$.fragment)},l(d){s=a(d,"P",{});var w=i(s);$=m(w,"Example using "),c=a(w,"CODE",{});var q=i(c);u=m(q,"transformers.pipeline"),q.forEach(o),_=m(w,":"),w.forEach(o),n=h(d),T(p.$$.fragment,d)},m(d,w){k(d,s,w),e(s,$),e(s,c),e(c,u),e(s,_),k(d,n,w),b(p,d,w),j=!0},p:J,i(d){j||(M(p.$$.fragment,d),j=!0)},o(d){O(p.$$.fragment,d),j=!1},d(d){d&&o(s),d&&o(n),y(p,d)}}}function Rl(E){let s,$,c,u,_;return{c(){s=r("p"),$=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r("code"),u=l("Module"),_=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a(p,"CODE",{});var j=i(c);u=m(j,"Module"),j.forEach(o),_=m(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(n,p){k(n,s,p),e(s,$),e(s,c),e(c,u),e(s,_)},d(n){n&&o(s)}}}function Fl(E){let s,$,c,u,_;return u=new F({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=r("p"),$=l("Example of single-label classification:"),c=f(),v(u.$$.fragment)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Example of single-label classification:"),p.forEach(o),c=h(n),T(u.$$.fragment,n)},m(n,p){k(n,s,p),e(s,$),k(n,c,p),b(u,n,p),_=!0},p:J,i(n){_||(M(u.$$.fragment,n),_=!0)},o(n){O(u.$$.fragment,n),_=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function zl(E){let s,$,c,u,_,n,p,j;return p=new F({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-finetuned-sst-2-english")
onnx_classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

text = "Hello, my dog is cute"
pred = onnx_classifier(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_classifier(text)`}}),{c(){s=r("p"),$=l("Example using "),c=r("code"),u=l("transformers.pipelines"),_=l(":"),n=f(),v(p.$$.fragment)},l(d){s=a(d,"P",{});var w=i(s);$=m(w,"Example using "),c=a(w,"CODE",{});var q=i(c);u=m(q,"transformers.pipelines"),q.forEach(o),_=m(w,":"),w.forEach(o),n=h(d),T(p.$$.fragment,d)},m(d,w){k(d,s,w),e(s,$),e(s,c),e(c,u),e(s,_),k(d,n,w),b(p,d,w),j=!0},p:J,i(d){j||(M(p.$$.fragment,d),j=!0)},o(d){O(p.$$.fragment,d),j=!1},d(d){d&&o(s),d&&o(n),y(p,d)}}}function Cl(E){let s,$,c,u,_,n,p,j;return p=new F({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/distilbert-base-uncased-mnli")
model = ORTModelForSequenceClassification.from_pretrained("optimum/distilbert-base-uncased-mnli")
onnx_z0 = pipeline("zero-shot-classification", model=model, tokenizer=tokenizer)

sequence_to_classify = "Who are you voting for in 2020?"
candidate_labels = ["Europe", "public health", "politics", "elections"]
pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;optimum/distilbert-base-uncased-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_z0 = pipeline(<span class="hljs-string">&quot;zero-shot-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_to_classify = <span class="hljs-string">&quot;Who are you voting for in 2020?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>candidate_labels = [<span class="hljs-string">&quot;Europe&quot;</span>, <span class="hljs-string">&quot;public health&quot;</span>, <span class="hljs-string">&quot;politics&quot;</span>, <span class="hljs-string">&quot;elections&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_z0(sequence_to_classify, candidate_labels, multi_class=<span class="hljs-literal">True</span>)`}}),{c(){s=r("p"),$=l("Example using zero-shot-classification "),c=r("code"),u=l("transformers.pipelines"),_=l(":"),n=f(),v(p.$$.fragment)},l(d){s=a(d,"P",{});var w=i(s);$=m(w,"Example using zero-shot-classification "),c=a(w,"CODE",{});var q=i(c);u=m(q,"transformers.pipelines"),q.forEach(o),_=m(w,":"),w.forEach(o),n=h(d),T(p.$$.fragment,d)},m(d,w){k(d,s,w),e(s,$),e(s,c),e(c,u),e(s,_),k(d,n,w),b(p,d,w),j=!0},p:J,i(d){j||(M(p.$$.fragment,d),j=!0)},o(d){O(p.$$.fragment,d),j=!1},d(d){d&&o(s),d&&o(n),y(p,d)}}}function Al(E){let s,$,c,u,_;return{c(){s=r("p"),$=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r("code"),u=l("Module"),_=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a(p,"CODE",{});var j=i(c);u=m(j,"Module"),j.forEach(o),_=m(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(n,p){k(n,s,p),e(s,$),e(s,c),e(c,u),e(s,_)},d(n){n&&o(s)}}}function Pl(E){let s,$,c,u,_;return u=new F({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForTokenClassification
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=r("p"),$=l("Example of token classification:"),c=f(),v(u.$$.fragment)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Example of token classification:"),p.forEach(o),c=h(n),T(u.$$.fragment,n)},m(n,p){k(n,s,p),e(s,$),k(n,c,p),b(u,n,p),_=!0},p:J,i(n){_||(M(u.$$.fragment,n),_=!0)},o(n){O(u.$$.fragment,n),_=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function Il(E){let s,$,c,u,_,n,p,j;return p=new F({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForTokenClassification

tokenizer = AutoTokenizer.from_pretrained("optimum/bert-base-NER")
model = ORTModelForTokenClassification.from_pretrained("optimum/bert-base-NER")
onnx_ner = pipeline("token-classification", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_ner(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;optimum/bert-base-NER&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_ner = pipeline(<span class="hljs-string">&quot;token-classification&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_ner(text)`}}),{c(){s=r("p"),$=l("Example using "),c=r("code"),u=l("transformers.pipelines"),_=l(":"),n=f(),v(p.$$.fragment)},l(d){s=a(d,"P",{});var w=i(s);$=m(w,"Example using "),c=a(w,"CODE",{});var q=i(c);u=m(q,"transformers.pipelines"),q.forEach(o),_=m(w,":"),w.forEach(o),n=h(d),T(p.$$.fragment,d)},m(d,w){k(d,s,w),e(s,$),e(s,c),e(c,u),e(s,_),k(d,n,w),b(p,d,w),j=!0},p:J,i(d){j||(M(p.$$.fragment,d),j=!0)},o(d){O(p.$$.fragment,d),j=!1},d(d){d&&o(s),d&&o(n),y(p,d)}}}function Nl(E){let s,$,c,u,_;return{c(){s=r("p"),$=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r("code"),u=l("Module"),_=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a(p,"CODE",{});var j=i(c);u=m(j,"Module"),j.forEach(o),_=m(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(n,p){k(n,s,p),e(s,$),e(s,c),e(c,u),e(s,_)},d(n){n&&o(s)}}}function Sl(E){let s,$,c,u,_;return u=new F({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

gen_tokens = model.generate(**inputs,do_sample=True,temperature=0.9, min_length=20,max_length=20)
tokenizer.batch_decode(gen_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>gen_tokens = model.generate(**inputs,do_sample=<span class="hljs-literal">True</span>,temperature=<span class="hljs-number">0.9</span>, min_length=<span class="hljs-number">20</span>,max_length=<span class="hljs-number">20</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(gen_tokens)`}}),{c(){s=r("p"),$=l("Example of text generation:"),c=f(),v(u.$$.fragment)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Example of text generation:"),p.forEach(o),c=h(n),T(u.$$.fragment,n)},m(n,p){k(n,s,p),e(s,$),k(n,c,p),b(u,n,p),_=!0},p:J,i(n){_||(M(u.$$.fragment,n),_=!0)},o(n){O(u.$$.fragment,n),_=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function Dl(E){let s,$,c,u,_,n,p,j;return p=new F({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("optimum/gpt2")
model = ORTModelForCausalLM.from_pretrained("optimum/gpt2")
onnx_gen = pipeline("text-generation", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
gen = onnx_gen(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;optimum/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_gen = pipeline(<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>gen = onnx_gen(text)`}}),{c(){s=r("p"),$=l("Example using "),c=r("code"),u=l("transformers.pipelines"),_=l(":"),n=f(),v(p.$$.fragment)},l(d){s=a(d,"P",{});var w=i(s);$=m(w,"Example using "),c=a(w,"CODE",{});var q=i(c);u=m(q,"transformers.pipelines"),q.forEach(o),_=m(w,":"),w.forEach(o),n=h(d),T(p.$$.fragment,d)},m(d,w){k(d,s,w),e(s,$),e(s,c),e(c,u),e(s,_),k(d,n,w),b(p,d,w),j=!0},p:J,i(d){j||(M(p.$$.fragment,d),j=!0)},o(d){O(p.$$.fragment,d),j=!1},d(d){d&&o(s),d&&o(n),y(p,d)}}}function Ll(E){let s,$,c,u,_;return{c(){s=r("p"),$=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r("code"),u=l("Module"),_=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a(p,"CODE",{});var j=i(c);u=m(j,"Module"),j.forEach(o),_=m(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(n,p){k(n,s,p),e(s,$),e(s,c),e(c,u),e(s,_)},d(n){n&&o(s)}}}function Hl(E){let s,$,c,u,_;return u=new F({props:{code:`from transformers import AutoFeatureExtractor
from optimum.onnxruntime import ORTModelForImageClassification
import torch

tokenizer = AutoFeatureExtractor.from_pretrained("optimum/vit-base-patch16-224")
model = ORTModelForImageClassification.from_pretrained("optimum/vit-base-patch16-224")

inputs = tokenizer("My name is Philipp and I live in Germany.", return_tensors="pt")

outputs = model(**inputs)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)`}}),{c(){s=r("p"),$=l("Example of feature extraction:"),c=f(),v(u.$$.fragment)},l(n){s=a(n,"P",{});var p=i(s);$=m(p,"Example of feature extraction:"),p.forEach(o),c=h(n),T(u.$$.fragment,n)},m(n,p){k(n,s,p),e(s,$),k(n,c,p),b(u,n,p),_=!0},p:J,i(n){_||(M(u.$$.fragment,n),_=!0)},o(n){O(u.$$.fragment,n),_=!1},d(n){n&&o(s),n&&o(c),y(u,n)}}}function Ql(E){let s,$,c,u,_,n,p,j;return p=new F({props:{code:`from transformers import AutoFeatureExtractor, pipeline
from optimum.onnxruntime import ORTModelForImageClassification

tokenizer = AutoFeatureExtractor.from_pretrained("optimum/vit-base-patch16-224")
model = ORTModelForImageClassification.from_pretrained("optimum/vit-base-patch16-224")
onnx_extractor = pipeline("feature-extraction", model=model, tokenizer=tokenizer)

text = "My name is Philipp and I live in Germany."
pred = onnx_extractor(text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;optimum/vit-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_extractor = pipeline(<span class="hljs-string">&quot;feature-extraction&quot;</span>, model=model, tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;My name is Philipp and I live in Germany.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pred = onnx_extractor(text)`}}),{c(){s=r("p"),$=l("Example using "),c=r("code"),u=l("transformers.pipeline"),_=l(":"),n=f(),v(p.$$.fragment)},l(d){s=a(d,"P",{});var w=i(s);$=m(w,"Example using "),c=a(w,"CODE",{});var q=i(c);u=m(q,"transformers.pipeline"),q.forEach(o),_=m(w,":"),w.forEach(o),n=h(d),T(p.$$.fragment,d)},m(d,w){k(d,s,w),e(s,$),e(s,c),e(c,u),e(s,_),k(d,n,w),b(p,d,w),j=!0},p:J,i(d){j||(M(p.$$.fragment,d),j=!0)},o(d){O(p.$$.fragment,d),j=!1},d(d){d&&o(s),d&&o(n),y(p,d)}}}function Xl(E){let s,$,c,u,_,n,p,j,d,w,q,ms,Bt,ps,cs,xn,ce,ye,oo,at,ds,no,us,vn,D,fs,so,hs,gs,ro,_s,$s,ao,ks,ws,io,xs,vs,Tn,it,bn,K,Ts,lo,bs,Ms,mo,Os,ys,Mn,lt,On,je,js,Gt,Es,qs,yn,de,Ee,po,mt,Rs,co,Fs,jn,U,zs,Vt,Cs,As,pt,Ps,Is,uo,Ns,Ss,En,ct,qn,ue,qe,fo,dt,Ds,ho,Ls,Rn,B,ut,Hs,ft,Qs,go,Xs,Ws,Bs,Re,ht,Gs,gt,Vs,_o,Js,Us,Ys,Fe,_t,Ks,$o,Zs,Fn,fe,ze,ko,$t,er,wo,tr,zn,z,kt,or,xo,nr,sr,wt,rr,vo,ar,ir,lr,To,mr,pr,L,xt,cr,he,dr,bo,ur,fr,Mo,hr,gr,_r,Ce,$r,Ae,kr,Pe,Cn,ge,Ie,Oo,vt,wr,yo,xr,An,C,Tt,vr,jo,Tr,br,bt,Mr,Eo,Or,yr,jr,qo,Er,qr,H,Mt,Rr,_e,Fr,Ro,zr,Cr,Fo,Ar,Pr,Ir,Ne,Nr,Se,Sr,De,Pn,$e,Le,zo,Ot,Dr,Co,Lr,In,A,yt,Hr,Ao,Qr,Xr,jt,Wr,Po,Br,Gr,Vr,Io,Jr,Ur,R,Et,Yr,ke,Kr,No,Zr,ea,So,ta,oa,na,He,sa,Qe,ra,Xe,aa,We,Nn,we,Be,Do,qt,ia,Lo,la,Sn,P,Rt,ma,Ho,pa,ca,Ft,da,Qo,ua,fa,ha,Xo,ga,_a,Q,zt,$a,xe,ka,Wo,wa,xa,Bo,va,Ta,ba,Ge,Ma,Ve,Oa,Je,Dn,ve,Ue,Go,Ct,ya,Vo,ja,Ln,I,At,Ea,Jo,qa,Ra,Pt,Fa,Uo,za,Ca,Aa,Yo,Pa,Ia,X,It,Na,Te,Sa,Ko,Da,La,Zo,Ha,Qa,Xa,Ye,Wa,Ke,Ba,Ze,Hn,be,et,en,Nt,Ga,tn,Va,Qn,N,St,Ja,on,Ua,Ya,Dt,Ka,nn,Za,ei,ti,sn,oi,ni,W,Lt,si,Me,ri,rn,ai,ii,an,li,mi,pi,tt,ci,ot,di,nt,Xn;return n=new pe({}),at=new pe({}),it=new F({props:{code:`

`,highlighted:`from transformers import AutoTokenizer, pipeline
<span class="hljs-deletion">-from transformers import AutoModelForQuestionAnswering</span>
<span class="hljs-addition">+from optimum.onnxruntime import ORTModelForQuestionAnswering</span>

<span class="hljs-deletion">-model = AutoModelForQuestionAnswering.from_pretrained(&quot;deepset/roberta-base-squad2&quot;) # pytorch checkpoint</span>
<span class="hljs-addition">+model = ORTModelForQuestionAnswering.from_pretrained(&quot;optimum/roberta-base-squad2&quot;) # onnx checkpoint</span>
tokenizer = AutoTokenizer.from_pretrained(&quot;deepset/roberta-base-squad2&quot;)

onnx_qa = pipeline(&quot;question-answering&quot;,model=model,tokenizer=tokenizer)

question = &quot;What&#x27;s my name?&quot;
context = &quot;My name is Philipp and I live in Nuremberg.&quot;
pred = onnx_qa(question, context)`}}),lt=new F({props:{code:`from transformers import AutoTokenizer, pipeline
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english",from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

onnx_classifier = pipeline("text-classification",model=model,tokenizer=tokenizer)

result = onnx_classifier(text="This is a great model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># create pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=model,tokenizer=tokenizer)

<span class="hljs-meta">&gt;&gt;&gt; </span>result = onnx_classifier(text=<span class="hljs-string">&quot;This is a great model&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998838901519775</span>}]`}}),mt=new pe({}),ct=new F({props:{code:`from transformers import AutoTokenizer
from optimum.onnxruntime import ORTModelForSequenceClassification

model = ORTModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english",from_transformers=True)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

model.save_pretrained("a_local_path_for_convert_onnx_model")
tokenizer.save_pretrained("a_local_path_for_convert_onnx_model")

model.push_to_hub("a_local_path_for_convert_onnx_model",`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> optimum.onnxruntime <span class="hljs-keyword">import</span> ORTModelForSequenceClassification

<span class="hljs-comment"># load model from hub and convert</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ORTModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,from_transformers=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)

<span class="hljs-comment"># save converted model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>)

<span class="hljs-comment"># push model onnx model to HF Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.push_to_hub(<span class="hljs-string">&quot;a_local_path_for_convert_onnx_model&quot;</span>,
                  repository_id=<span class="hljs-string">&quot;my-onnx-repo&quot;</span>,
                  use_auth_token=<span class="hljs-literal">True</span>
                  )`}}),dt=new pe({}),ut=new S({props:{name:"class optimum.onnxruntime.ORTModel",anchor:"optimum.onnxruntime.ORTModel",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L82"}}),ht=new S({props:{name:"load_model",anchor:"optimum.onnxruntime.ORTModel.load_model",parameters:[{name:"path",val:": typing.Union[str, pathlib.Path]"},{name:"provider",val:" = None"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModel.load_model.path",description:`<strong>path</strong> (<code>str</code> or <code>Path</code>) &#x2014;
Directory from which to load the model.`,name:"path"},{anchor:"optimum.onnxruntime.ORTModel.load_model.provider(str,",description:`<strong>provider(<code>str</code>,</strong> <em>optional</em>) &#x2014;
ONNX Runtime provider to use for loading the model. Defaults to <code>CPUExecutionProvider</code>.`,name:"provider(str,"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L122"}}),_t=new S({props:{name:"to",anchor:"optimum.onnxruntime.ORTModel.to",parameters:[{name:"device",val:""}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L110"}}),$t=new pe({}),kt=new S({props:{name:"class optimum.onnxruntime.ORTModelForFeatureExtraction",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_232/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L320"}}),xt=new S({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L334"}}),Ce=new to({props:{$$slots:{default:[Ml]},$$scope:{ctx:E}}}),Ae=new V({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example",$$slots:{default:[Ol]},$$scope:{ctx:E}}}),Pe=new V({props:{anchor:"optimum.onnxruntime.ORTModelForFeatureExtraction.forward.example-2",$$slots:{default:[yl]},$$scope:{ctx:E}}}),vt=new pe({}),Tt=new S({props:{name:"class optimum.onnxruntime.ORTModelForQuestionAnswering",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_232/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L405"}}),Mt=new S({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L419"}}),Ne=new to({props:{$$slots:{default:[jl]},$$scope:{ctx:E}}}),Se=new V({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example",$$slots:{default:[El]},$$scope:{ctx:E}}}),De=new V({props:{anchor:"optimum.onnxruntime.ORTModelForQuestionAnswering.forward.example-2",$$slots:{default:[ql]},$$scope:{ctx:E}}}),Ot=new pe({}),yt=new S({props:{name:"class optimum.onnxruntime.ORTModelForSequenceClassification",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_232/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L508"}}),Et=new S({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L523"}}),He=new to({props:{$$slots:{default:[Rl]},$$scope:{ctx:E}}}),Qe=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example",$$slots:{default:[Fl]},$$scope:{ctx:E}}}),Xe=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-2",$$slots:{default:[zl]},$$scope:{ctx:E}}}),We=new V({props:{anchor:"optimum.onnxruntime.ORTModelForSequenceClassification.forward.example-3",$$slots:{default:[Cl]},$$scope:{ctx:E}}}),qt=new pe({}),Rt=new S({props:{name:"class optimum.onnxruntime.ORTModelForTokenClassification",anchor:"optimum.onnxruntime.ORTModelForTokenClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_232/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L596"}}),zt=new S({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L610"}}),Ge=new to({props:{$$slots:{default:[Al]},$$scope:{ctx:E}}}),Ve=new V({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example",$$slots:{default:[Pl]},$$scope:{ctx:E}}}),Je=new V({props:{anchor:"optimum.onnxruntime.ORTModelForTokenClassification.forward.example-2",$$slots:{default:[Il]},$$scope:{ctx:E}}}),Ct=new pe({}),At=new S({props:{name:"class optimum.onnxruntime.ORTModelForCausalLM",anchor:"optimum.onnxruntime.ORTModelForCausalLM",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_232/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L681"}}),It=new S({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L705"}}),Ye=new to({props:{$$slots:{default:[Nl]},$$scope:{ctx:E}}}),Ke=new V({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example",$$slots:{default:[Sl]},$$scope:{ctx:E}}}),Ze=new V({props:{anchor:"optimum.onnxruntime.ORTModelForCausalLM.forward.example-2",$$slots:{default:[Dl]},$$scope:{ctx:E}}}),Nt=new pe({}),St=new S({props:{name:"class optimum.onnxruntime.ORTModelForImageClassification",anchor:"optimum.onnxruntime.ORTModelForImageClassification",parameters:[{name:"model",val:" = None"},{name:"config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForImageClassification.config",description:`<strong>config</strong> (<code>transformers.PretrainedConfig</code>) &#x2014; <a href="https://huggingface.co/docs/transformers/main_classes/configuration#transformers.PretrainedConfig" rel="nofollow">PretrainedConfig</a> is the Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <code>from_pretrained()</code> method to load the model weights.`,name:"config"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.model",description:'<strong>model</strong> (<code>onnxruntime.InferenceSession</code>) &#x2014; <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#inferencesession" rel="nofollow">onnxruntime.InferenceSession</a> is the main class used to run a model. Check out the <a href="/docs/optimum/pr_232/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModel.load_model">load_model()</a> method for more information.',name:"model"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L801"}}),Lt=new S({props:{name:"forward",anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.
Indices can be obtained using <a href="https://huggingface.co/docs/transformers/autoclass_tutorial#autotokenizer" rel="nofollow"><code>AutoTokenizer</code></a>.
See <a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.encode" rel="nofollow"><code>PreTrainedTokenizer.encode</code></a> and
<a href="https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.PreTrainedTokenizerBase.__call__" rel="nofollow"><code>PreTrainedTokenizer.__call__</code></a> for details.
<a href="https://huggingface.co/docs/transformers/glossary#input-ids" rel="nofollow">What are input IDs?</a>`,name:"input_ids"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#attention-mask" rel="nofollow">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>sentence A</strong>,</li>
<li>0 for tokens that are <strong>sentence B</strong>.
<a href="https://huggingface.co/docs/transformers/glossary#token-type-ids" rel="nofollow">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"}],source:"https://github.com/huggingface/optimum/blob/vr_232/src/optimum/onnxruntime/modeling_ort.py#L815"}}),tt=new to({props:{$$slots:{default:[Ll]},$$scope:{ctx:E}}}),ot=new V({props:{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.example",$$slots:{default:[Hl]},$$scope:{ctx:E}}}),nt=new V({props:{anchor:"optimum.onnxruntime.ORTModelForImageClassification.forward.example-2",$$slots:{default:[Ql]},$$scope:{ctx:E}}}),{c(){s=r("meta"),$=f(),c=r("h1"),u=r("a"),_=r("span"),v(n.$$.fragment),p=f(),j=r("span"),d=l("Optimum Inference with ONNX Runtime"),w=f(),q=r("p"),ms=l(`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),Bt=r("a"),ps=l("Hugging Face Hub"),cs=l(` and create pipelines
to run accelerated inference without rewriting your APIs.`),xn=f(),ce=r("h2"),ye=r("a"),oo=r("span"),v(at.$$.fragment),ds=f(),no=r("span"),us=l("Switching from Transformers to Optimum Inference"),vn=f(),D=r("p"),fs=l("The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),so=r("code"),hs=l("AutoModelForXxx"),gs=l(" class with the corresponding "),ro=r("code"),_s=l("ORTModelForXxx"),$s=l(" class in "),ao=r("code"),ks=l("optimum"),ws=l(". For example, this is how you can use a question answering model in "),io=r("code"),xs=l("optimum"),vs=l(":"),Tn=f(),v(it.$$.fragment),bn=f(),K=r("p"),Ts=l("Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),lo=r("code"),bs=l("from_transformers=True"),Ms=l(" to the "),mo=r("code"),Os=l("from_pretrained()"),ys=l(" method, and your model will be loaded and converted to ONNX on-the-fly:"),Mn=f(),v(lt.$$.fragment),On=f(),je=r("p"),js=l("You can find a complete walkhrough Optimum Inference for ONNX Runtime in this "),Gt=r("a"),Es=l("notebook"),qs=l("."),yn=f(),de=r("h3"),Ee=r("a"),po=r("span"),v(mt.$$.fragment),Rs=f(),co=r("span"),Fs=l("Working with the Hugging Face Model Hub"),jn=f(),U=r("p"),zs=l("The Optimum model classes like "),Vt=r("a"),Cs=l("ORTModelForSequenceClassification"),As=l(" are integrated with the "),pt=r("a"),Ps=l("Hugging Face Model Hub"),Is=l(`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),uo=r("code"),Ns=l("push_to_hub()"),Ss=l(` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),En=f(),v(ct.$$.fragment),qn=f(),ue=r("h2"),qe=r("a"),fo=r("span"),v(dt.$$.fragment),Ds=f(),ho=r("span"),Ls=l("ORTModel"),Rn=f(),B=r("div"),v(ut.$$.fragment),Hs=f(),ft=r("p"),Qs=l(`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),go=r("code"),Xs=l("transformers.onnx"),Ws=l(` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Bs=f(),Re=r("div"),v(ht.$$.fragment),Gs=f(),gt=r("p"),Vs=l("Loads an ONNX Inference session with a given provider. Default provider is "),_o=r("code"),Js=l("CPUExecutionProvider"),Us=l(" to match the default behaviour in PyTorch/TensorFlow/JAX."),Ys=f(),Fe=r("div"),v(_t.$$.fragment),Ks=f(),$o=r("p"),Zs=l("Changes the ONNX Runtime provider according to the device."),Fn=f(),fe=r("h2"),ze=r("a"),ko=r("span"),v($t.$$.fragment),er=f(),wo=r("span"),tr=l("ORTModelForFeatureExtraction"),zn=f(),z=r("div"),v(kt.$$.fragment),or=f(),xo=r("p"),nr=l("Onnx Model with a MaskedLMOutput for feature-extraction tasks."),sr=f(),wt=r("p"),rr=l("This model inherits from [~"),vo=r("code"),ar=l("onnxruntime.modeling_ort.ORTModel"),ir=l(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),lr=f(),To=r("p"),mr=l("Feature Extraction model for ONNX."),pr=f(),L=r("div"),v(xt.$$.fragment),cr=f(),he=r("p"),dr=l("The "),bo=r("code"),ur=l("ORTModelForFeatureExtraction"),fr=l(" forward method, overrides the "),Mo=r("code"),hr=l("__call__"),gr=l(" special method."),_r=f(),v(Ce.$$.fragment),$r=f(),v(Ae.$$.fragment),kr=f(),v(Pe.$$.fragment),Cn=f(),ge=r("h2"),Ie=r("a"),Oo=r("span"),v(vt.$$.fragment),wr=f(),yo=r("span"),xr=l("ORTModelForQuestionAnswering"),An=f(),C=r("div"),v(Tt.$$.fragment),vr=f(),jo=r("p"),Tr=l("Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),br=f(),bt=r("p"),Mr=l("This model inherits from [~"),Eo=r("code"),Or=l("onnxruntime.modeling_ort.ORTModel"),yr=l(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),jr=f(),qo=r("p"),Er=l("Question Answering model for ONNX."),qr=f(),H=r("div"),v(Mt.$$.fragment),Rr=f(),_e=r("p"),Fr=l("The "),Ro=r("code"),zr=l("ORTModelForQuestionAnswering"),Cr=l(" forward method, overrides the "),Fo=r("code"),Ar=l("__call__"),Pr=l(" special method."),Ir=f(),v(Ne.$$.fragment),Nr=f(),v(Se.$$.fragment),Sr=f(),v(De.$$.fragment),Pn=f(),$e=r("h2"),Le=r("a"),zo=r("span"),v(Ot.$$.fragment),Dr=f(),Co=r("span"),Lr=l("ORTModelForSequenceClassification"),In=f(),A=r("div"),v(yt.$$.fragment),Hr=f(),Ao=r("p"),Qr=l(`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Xr=f(),jt=r("p"),Wr=l("This model inherits from [~"),Po=r("code"),Br=l("onnxruntime.modeling_ort.ORTModel"),Gr=l(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Vr=f(),Io=r("p"),Jr=l("Sequence Classification model for ONNX."),Ur=f(),R=r("div"),v(Et.$$.fragment),Yr=f(),ke=r("p"),Kr=l("The "),No=r("code"),Zr=l("ORTModelForSequenceClassification"),ea=l(" forward method, overrides the "),So=r("code"),ta=l("__call__"),oa=l(" special method."),na=f(),v(He.$$.fragment),sa=f(),v(Qe.$$.fragment),ra=f(),v(Xe.$$.fragment),aa=f(),v(We.$$.fragment),Nn=f(),we=r("h2"),Be=r("a"),Do=r("span"),v(qt.$$.fragment),ia=f(),Lo=r("span"),la=l("ORTModelForTokenClassification"),Sn=f(),P=r("div"),v(Rt.$$.fragment),ma=f(),Ho=r("p"),pa=l(`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),ca=f(),Ft=r("p"),da=l("This model inherits from [~"),Qo=r("code"),ua=l("onnxruntime.modeling_ort.ORTModel"),fa=l(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),ha=f(),Xo=r("p"),ga=l("Token Classification model for ONNX."),_a=f(),Q=r("div"),v(zt.$$.fragment),$a=f(),xe=r("p"),ka=l("The "),Wo=r("code"),wa=l("ORTModelForTokenClassification"),xa=l(" forward method, overrides the "),Bo=r("code"),va=l("__call__"),Ta=l(" special method."),ba=f(),v(Ge.$$.fragment),Ma=f(),v(Ve.$$.fragment),Oa=f(),v(Je.$$.fragment),Dn=f(),ve=r("h2"),Ue=r("a"),Go=r("span"),v(Ct.$$.fragment),ya=f(),Vo=r("span"),ja=l("ORTModelForCausalLM"),Ln=f(),I=r("div"),v(At.$$.fragment),Ea=f(),Jo=r("p"),qa=l(`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),Ra=f(),Pt=r("p"),Fa=l("This model inherits from [~"),Uo=r("code"),za=l("onnxruntime.modeling_ort.ORTModel"),Ca=l(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Aa=f(),Yo=r("p"),Pa=l("Causal LM model for ONNX."),Ia=f(),X=r("div"),v(It.$$.fragment),Na=f(),Te=r("p"),Sa=l("The "),Ko=r("code"),Da=l("ORTModelForCausalLM"),La=l(" forward method, overrides the "),Zo=r("code"),Ha=l("__call__"),Qa=l(" special method."),Xa=f(),v(Ye.$$.fragment),Wa=f(),v(Ke.$$.fragment),Ba=f(),v(Ze.$$.fragment),Hn=f(),be=r("h2"),et=r("a"),en=r("span"),v(Nt.$$.fragment),Ga=f(),tn=r("span"),Va=l("ORTModelForImageClassification"),Qn=f(),N=r("div"),v(St.$$.fragment),Ja=f(),on=r("p"),Ua=l("Onnx Model for image-classification tasks."),Ya=f(),Dt=r("p"),Ka=l("This model inherits from [~"),nn=r("code"),Za=l("onnxruntime.modeling_ort.ORTModel"),ei=l(`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),ti=f(),sn=r("p"),oi=l("Image Classification model for ONNX."),ni=f(),W=r("div"),v(Lt.$$.fragment),si=f(),Me=r("p"),ri=l("The "),rn=r("code"),ai=l("ORTModelForImageClassification"),ii=l(" forward method, overrides the "),an=r("code"),li=l("__call__"),mi=l(" special method."),pi=f(),v(tt.$$.fragment),ci=f(),v(ot.$$.fragment),di=f(),v(nt.$$.fragment),this.h()},l(t){const g=Tl('[data-svelte="svelte-1phssyn"]',document.head);s=a(g,"META",{name:!0,content:!0}),g.forEach(o),$=h(t),c=a(t,"H1",{class:!0});var Ht=i(c);u=a(Ht,"A",{id:!0,class:!0,href:!0});var ln=i(u);_=a(ln,"SPAN",{});var mn=i(_);T(n.$$.fragment,mn),mn.forEach(o),ln.forEach(o),p=h(Ht),j=a(Ht,"SPAN",{});var pn=i(j);d=m(pn,"Optimum Inference with ONNX Runtime"),pn.forEach(o),Ht.forEach(o),w=h(t),q=a(t,"P",{});var Qt=i(q);ms=m(Qt,`Optimum is a utility package for building and running inference with accelerated runtime like ONNX Runtime.
Optimum can be used to load optimized models from the `),Bt=a(Qt,"A",{href:!0});var cn=i(Bt);ps=m(cn,"Hugging Face Hub"),cn.forEach(o),cs=m(Qt,` and create pipelines
to run accelerated inference without rewriting your APIs.`),Qt.forEach(o),xn=h(t),ce=a(t,"H2",{class:!0});var Xt=i(ce);ye=a(Xt,"A",{id:!0,class:!0,href:!0});var dn=i(ye);oo=a(dn,"SPAN",{});var un=i(oo);T(at.$$.fragment,un),un.forEach(o),dn.forEach(o),ds=h(Xt),no=a(Xt,"SPAN",{});var fn=i(no);us=m(fn,"Switching from Transformers to Optimum Inference"),fn.forEach(o),Xt.forEach(o),vn=h(t),D=a(t,"P",{});var G=i(D);fs=m(G,"The Optimum Inference models are API compatible with Hugging Face Transformers models. This means you can just replace your "),so=a(G,"CODE",{});var hn=i(so);hs=m(hn,"AutoModelForXxx"),hn.forEach(o),gs=m(G," class with the corresponding "),ro=a(G,"CODE",{});var gn=i(ro);_s=m(gn,"ORTModelForXxx"),gn.forEach(o),$s=m(G," class in "),ao=a(G,"CODE",{});var _n=i(ao);ks=m(_n,"optimum"),_n.forEach(o),ws=m(G,". For example, this is how you can use a question answering model in "),io=a(G,"CODE",{});var $n=i(io);xs=m($n,"optimum"),$n.forEach(o),vs=m(G,":"),G.forEach(o),Tn=h(t),T(it.$$.fragment,t),bn=h(t),K=a(t,"P",{});var Oe=i(K);Ts=m(Oe,"Optimum Inference also includes methods to convert vanilla Transformers models to optimized ones. Simply pass "),lo=a(Oe,"CODE",{});var kn=i(lo);bs=m(kn,"from_transformers=True"),kn.forEach(o),Ms=m(Oe," to the "),mo=a(Oe,"CODE",{});var wn=i(mo);Os=m(wn,"from_pretrained()"),wn.forEach(o),ys=m(Oe," method, and your model will be loaded and converted to ONNX on-the-fly:"),Oe.forEach(o),Mn=h(t),T(lt.$$.fragment,t),On=h(t),je=a(t,"P",{});var Wt=i(je);js=m(Wt,"You can find a complete walkhrough Optimum Inference for ONNX Runtime in this "),Gt=a(Wt,"A",{href:!0});var ui=i(Gt);Es=m(ui,"notebook"),ui.forEach(o),qs=m(Wt,"."),Wt.forEach(o),yn=h(t),de=a(t,"H3",{class:!0});var Wn=i(de);Ee=a(Wn,"A",{id:!0,class:!0,href:!0});var fi=i(Ee);po=a(fi,"SPAN",{});var hi=i(po);T(mt.$$.fragment,hi),hi.forEach(o),fi.forEach(o),Rs=h(Wn),co=a(Wn,"SPAN",{});var gi=i(co);Fs=m(gi,"Working with the Hugging Face Model Hub"),gi.forEach(o),Wn.forEach(o),jn=h(t),U=a(t,"P",{});var st=i(U);zs=m(st,"The Optimum model classes like "),Vt=a(st,"A",{href:!0});var _i=i(Vt);Cs=m(_i,"ORTModelForSequenceClassification"),_i.forEach(o),As=m(st," are integrated with the "),pt=a(st,"A",{href:!0,rel:!0});var $i=i(pt);Ps=m($i,"Hugging Face Model Hub"),$i.forEach(o),Is=m(st,`, which means you can not only
load model from the Hub, but also push your models to the Hub with `),uo=a(st,"CODE",{});var ki=i(uo);Ns=m(ki,"push_to_hub()"),ki.forEach(o),Ss=m(st,` method. Below is an example which downloads a vanilla Transformers model
from the Hub and converts it to an optimum onnxruntime model and pushes it back into a new repository.`),st.forEach(o),En=h(t),T(ct.$$.fragment,t),qn=h(t),ue=a(t,"H2",{class:!0});var Bn=i(ue);qe=a(Bn,"A",{id:!0,class:!0,href:!0});var wi=i(qe);fo=a(wi,"SPAN",{});var xi=i(fo);T(dt.$$.fragment,xi),xi.forEach(o),wi.forEach(o),Ds=h(Bn),ho=a(Bn,"SPAN",{});var vi=i(ho);Ls=m(vi,"ORTModel"),vi.forEach(o),Bn.forEach(o),Rn=h(t),B=a(t,"DIV",{class:!0});var rt=i(B);T(ut.$$.fragment,rt),Hs=h(rt),ft=a(rt,"P",{});var Gn=i(ft);Qs=m(Gn,`Base ORTModel class for implementing models using ONNX Runtime. The ORTModel implements generic methods for interacting
with the Hugging Face Hub as well as exporting vanilla transformers models to ONNX using `),go=a(Gn,"CODE",{});var Ti=i(go);Xs=m(Ti,"transformers.onnx"),Ti.forEach(o),Ws=m(Gn,` toolchain.
The ORTModel implements additionally generic methods for optimizing and quantizing Onnx models.`),Gn.forEach(o),Bs=h(rt),Re=a(rt,"DIV",{class:!0});var Vn=i(Re);T(ht.$$.fragment,Vn),Gs=h(Vn),gt=a(Vn,"P",{});var Jn=i(gt);Vs=m(Jn,"Loads an ONNX Inference session with a given provider. Default provider is "),_o=a(Jn,"CODE",{});var bi=i(_o);Js=m(bi,"CPUExecutionProvider"),bi.forEach(o),Us=m(Jn," to match the default behaviour in PyTorch/TensorFlow/JAX."),Jn.forEach(o),Vn.forEach(o),Ys=h(rt),Fe=a(rt,"DIV",{class:!0});var Un=i(Fe);T(_t.$$.fragment,Un),Ks=h(Un),$o=a(Un,"P",{});var Mi=i($o);Zs=m(Mi,"Changes the ONNX Runtime provider according to the device."),Mi.forEach(o),Un.forEach(o),rt.forEach(o),Fn=h(t),fe=a(t,"H2",{class:!0});var Yn=i(fe);ze=a(Yn,"A",{id:!0,class:!0,href:!0});var Oi=i(ze);ko=a(Oi,"SPAN",{});var yi=i(ko);T($t.$$.fragment,yi),yi.forEach(o),Oi.forEach(o),er=h(Yn),wo=a(Yn,"SPAN",{});var ji=i(wo);tr=m(ji,"ORTModelForFeatureExtraction"),ji.forEach(o),Yn.forEach(o),zn=h(t),z=a(t,"DIV",{class:!0});var Z=i(z);T(kt.$$.fragment,Z),or=h(Z),xo=a(Z,"P",{});var Ei=i(xo);nr=m(Ei,"Onnx Model with a MaskedLMOutput for feature-extraction tasks."),Ei.forEach(o),sr=h(Z),wt=a(Z,"P",{});var Kn=i(wt);rr=m(Kn,"This model inherits from [~"),vo=a(Kn,"CODE",{});var qi=i(vo);ar=m(qi,"onnxruntime.modeling_ort.ORTModel"),qi.forEach(o),ir=m(Kn,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),Kn.forEach(o),lr=h(Z),To=a(Z,"P",{});var Ri=i(To);mr=m(Ri,"Feature Extraction model for ONNX."),Ri.forEach(o),pr=h(Z),L=a(Z,"DIV",{class:!0});var ee=i(L);T(xt.$$.fragment,ee),cr=h(ee),he=a(ee,"P",{});var Jt=i(he);dr=m(Jt,"The "),bo=a(Jt,"CODE",{});var Fi=i(bo);ur=m(Fi,"ORTModelForFeatureExtraction"),Fi.forEach(o),fr=m(Jt," forward method, overrides the "),Mo=a(Jt,"CODE",{});var zi=i(Mo);hr=m(zi,"__call__"),zi.forEach(o),gr=m(Jt," special method."),Jt.forEach(o),_r=h(ee),T(Ce.$$.fragment,ee),$r=h(ee),T(Ae.$$.fragment,ee),kr=h(ee),T(Pe.$$.fragment,ee),ee.forEach(o),Z.forEach(o),Cn=h(t),ge=a(t,"H2",{class:!0});var Zn=i(ge);Ie=a(Zn,"A",{id:!0,class:!0,href:!0});var Ci=i(Ie);Oo=a(Ci,"SPAN",{});var Ai=i(Oo);T(vt.$$.fragment,Ai),Ai.forEach(o),Ci.forEach(o),wr=h(Zn),yo=a(Zn,"SPAN",{});var Pi=i(yo);xr=m(Pi,"ORTModelForQuestionAnswering"),Pi.forEach(o),Zn.forEach(o),An=h(t),C=a(t,"DIV",{class:!0});var te=i(C);T(Tt.$$.fragment,te),vr=h(te),jo=a(te,"P",{});var Ii=i(jo);Tr=m(Ii,"Onnx Model with a QuestionAnsweringModelOutput for extractive question-answering tasks like SQuAD."),Ii.forEach(o),br=h(te),bt=a(te,"P",{});var es=i(bt);Mr=m(es,"This model inherits from [~"),Eo=a(es,"CODE",{});var Ni=i(Eo);Or=m(Ni,"onnxruntime.modeling_ort.ORTModel"),Ni.forEach(o),yr=m(es,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),es.forEach(o),jr=h(te),qo=a(te,"P",{});var Si=i(qo);Er=m(Si,"Question Answering model for ONNX."),Si.forEach(o),qr=h(te),H=a(te,"DIV",{class:!0});var oe=i(H);T(Mt.$$.fragment,oe),Rr=h(oe),_e=a(oe,"P",{});var Ut=i(_e);Fr=m(Ut,"The "),Ro=a(Ut,"CODE",{});var Di=i(Ro);zr=m(Di,"ORTModelForQuestionAnswering"),Di.forEach(o),Cr=m(Ut," forward method, overrides the "),Fo=a(Ut,"CODE",{});var Li=i(Fo);Ar=m(Li,"__call__"),Li.forEach(o),Pr=m(Ut," special method."),Ut.forEach(o),Ir=h(oe),T(Ne.$$.fragment,oe),Nr=h(oe),T(Se.$$.fragment,oe),Sr=h(oe),T(De.$$.fragment,oe),oe.forEach(o),te.forEach(o),Pn=h(t),$e=a(t,"H2",{class:!0});var ts=i($e);Le=a(ts,"A",{id:!0,class:!0,href:!0});var Hi=i(Le);zo=a(Hi,"SPAN",{});var Qi=i(zo);T(Ot.$$.fragment,Qi),Qi.forEach(o),Hi.forEach(o),Dr=h(ts),Co=a(ts,"SPAN",{});var Xi=i(Co);Lr=m(Xi,"ORTModelForSequenceClassification"),Xi.forEach(o),ts.forEach(o),In=h(t),A=a(t,"DIV",{class:!0});var ne=i(A);T(yt.$$.fragment,ne),Hr=h(ne),Ao=a(ne,"P",{});var Wi=i(Ao);Qr=m(Wi,`Onnx Model with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Wi.forEach(o),Xr=h(ne),jt=a(ne,"P",{});var os=i(jt);Wr=m(os,"This model inherits from [~"),Po=a(os,"CODE",{});var Bi=i(Po);Br=m(Bi,"onnxruntime.modeling_ort.ORTModel"),Bi.forEach(o),Gr=m(os,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),os.forEach(o),Vr=h(ne),Io=a(ne,"P",{});var Gi=i(Io);Jr=m(Gi,"Sequence Classification model for ONNX."),Gi.forEach(o),Ur=h(ne),R=a(ne,"DIV",{class:!0});var Y=i(R);T(Et.$$.fragment,Y),Yr=h(Y),ke=a(Y,"P",{});var Yt=i(ke);Kr=m(Yt,"The "),No=a(Yt,"CODE",{});var Vi=i(No);Zr=m(Vi,"ORTModelForSequenceClassification"),Vi.forEach(o),ea=m(Yt," forward method, overrides the "),So=a(Yt,"CODE",{});var Ji=i(So);ta=m(Ji,"__call__"),Ji.forEach(o),oa=m(Yt," special method."),Yt.forEach(o),na=h(Y),T(He.$$.fragment,Y),sa=h(Y),T(Qe.$$.fragment,Y),ra=h(Y),T(Xe.$$.fragment,Y),aa=h(Y),T(We.$$.fragment,Y),Y.forEach(o),ne.forEach(o),Nn=h(t),we=a(t,"H2",{class:!0});var ns=i(we);Be=a(ns,"A",{id:!0,class:!0,href:!0});var Ui=i(Be);Do=a(Ui,"SPAN",{});var Yi=i(Do);T(qt.$$.fragment,Yi),Yi.forEach(o),Ui.forEach(o),ia=h(ns),Lo=a(ns,"SPAN",{});var Ki=i(Lo);la=m(Ki,"ORTModelForTokenClassification"),Ki.forEach(o),ns.forEach(o),Sn=h(t),P=a(t,"DIV",{class:!0});var se=i(P);T(Rt.$$.fragment,se),ma=h(se),Ho=a(se,"P",{});var Zi=i(Ho);pa=m(Zi,`Onnx Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Zi.forEach(o),ca=h(se),Ft=a(se,"P",{});var ss=i(Ft);da=m(ss,"This model inherits from [~"),Qo=a(ss,"CODE",{});var el=i(Qo);ua=m(el,"onnxruntime.modeling_ort.ORTModel"),el.forEach(o),fa=m(ss,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),ss.forEach(o),ha=h(se),Xo=a(se,"P",{});var tl=i(Xo);ga=m(tl,"Token Classification model for ONNX."),tl.forEach(o),_a=h(se),Q=a(se,"DIV",{class:!0});var re=i(Q);T(zt.$$.fragment,re),$a=h(re),xe=a(re,"P",{});var Kt=i(xe);ka=m(Kt,"The "),Wo=a(Kt,"CODE",{});var ol=i(Wo);wa=m(ol,"ORTModelForTokenClassification"),ol.forEach(o),xa=m(Kt," forward method, overrides the "),Bo=a(Kt,"CODE",{});var nl=i(Bo);va=m(nl,"__call__"),nl.forEach(o),Ta=m(Kt," special method."),Kt.forEach(o),ba=h(re),T(Ge.$$.fragment,re),Ma=h(re),T(Ve.$$.fragment,re),Oa=h(re),T(Je.$$.fragment,re),re.forEach(o),se.forEach(o),Dn=h(t),ve=a(t,"H2",{class:!0});var rs=i(ve);Ue=a(rs,"A",{id:!0,class:!0,href:!0});var sl=i(Ue);Go=a(sl,"SPAN",{});var rl=i(Go);T(Ct.$$.fragment,rl),rl.forEach(o),sl.forEach(o),ya=h(rs),Vo=a(rs,"SPAN",{});var al=i(Vo);ja=m(al,"ORTModelForCausalLM"),al.forEach(o),rs.forEach(o),Ln=h(t),I=a(t,"DIV",{class:!0});var ae=i(I);T(At.$$.fragment,ae),Ea=h(ae),Jo=a(ae,"P",{});var il=i(Jo);qa=m(il,`Onnx Model with a causal language modeling head on top (linear layer with weights tied to the input
embeddings).`),il.forEach(o),Ra=h(ae),Pt=a(ae,"P",{});var as=i(Pt);Fa=m(as,"This model inherits from [~"),Uo=a(as,"CODE",{});var ll=i(Uo);za=m(ll,"onnxruntime.modeling_ort.ORTModel"),ll.forEach(o),Ca=m(as,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),as.forEach(o),Aa=h(ae),Yo=a(ae,"P",{});var ml=i(Yo);Pa=m(ml,"Causal LM model for ONNX."),ml.forEach(o),Ia=h(ae),X=a(ae,"DIV",{class:!0});var ie=i(X);T(It.$$.fragment,ie),Na=h(ie),Te=a(ie,"P",{});var Zt=i(Te);Sa=m(Zt,"The "),Ko=a(Zt,"CODE",{});var pl=i(Ko);Da=m(pl,"ORTModelForCausalLM"),pl.forEach(o),La=m(Zt," forward method, overrides the "),Zo=a(Zt,"CODE",{});var cl=i(Zo);Ha=m(cl,"__call__"),cl.forEach(o),Qa=m(Zt," special method."),Zt.forEach(o),Xa=h(ie),T(Ye.$$.fragment,ie),Wa=h(ie),T(Ke.$$.fragment,ie),Ba=h(ie),T(Ze.$$.fragment,ie),ie.forEach(o),ae.forEach(o),Hn=h(t),be=a(t,"H2",{class:!0});var is=i(be);et=a(is,"A",{id:!0,class:!0,href:!0});var dl=i(et);en=a(dl,"SPAN",{});var ul=i(en);T(Nt.$$.fragment,ul),ul.forEach(o),dl.forEach(o),Ga=h(is),tn=a(is,"SPAN",{});var fl=i(tn);Va=m(fl,"ORTModelForImageClassification"),fl.forEach(o),is.forEach(o),Qn=h(t),N=a(t,"DIV",{class:!0});var le=i(N);T(St.$$.fragment,le),Ja=h(le),on=a(le,"P",{});var hl=i(on);Ua=m(hl,"Onnx Model for image-classification tasks."),hl.forEach(o),Ya=h(le),Dt=a(le,"P",{});var ls=i(Dt);Ka=m(ls,"This model inherits from [~"),nn=a(ls,"CODE",{});var gl=i(nn);Za=m(gl,"onnxruntime.modeling_ort.ORTModel"),gl.forEach(o),ei=m(ls,`]. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving)`),ls.forEach(o),ti=h(le),sn=a(le,"P",{});var _l=i(sn);oi=m(_l,"Image Classification model for ONNX."),_l.forEach(o),ni=h(le),W=a(le,"DIV",{class:!0});var me=i(W);T(Lt.$$.fragment,me),si=h(me),Me=a(me,"P",{});var eo=i(Me);ri=m(eo,"The "),rn=a(eo,"CODE",{});var $l=i(rn);ai=m($l,"ORTModelForImageClassification"),$l.forEach(o),ii=m(eo," forward method, overrides the "),an=a(eo,"CODE",{});var kl=i(an);li=m(kl,"__call__"),kl.forEach(o),mi=m(eo," special method."),eo.forEach(o),pi=h(me),T(tt.$$.fragment,me),ci=h(me),T(ot.$$.fragment,me),di=h(me),T(nt.$$.fragment,me),me.forEach(o),le.forEach(o),this.h()},h(){x(s,"name","hf:doc:metadata"),x(s,"content",JSON.stringify(Wl)),x(u,"id","optimum-inference-with-onnx-runtime"),x(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(u,"href","#optimum-inference-with-onnx-runtime"),x(c,"class","relative group"),x(Bt,"href","hf.co/models"),x(ye,"id","switching-from-transformers-to-optimum-inference"),x(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(ye,"href","#switching-from-transformers-to-optimum-inference"),x(ce,"class","relative group"),x(Gt,"href","todo:add-link"),x(Ee,"id","working-with-the-hugging-face-model-hub"),x(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(Ee,"href","#working-with-the-hugging-face-model-hub"),x(de,"class","relative group"),x(Vt,"href","/docs/optimum/pr_232/en/onnxruntime/modeling_ort#optimum.onnxruntime.ORTModelForSequenceClassification"),x(pt,"href","https://hf.co/models"),x(pt,"rel","nofollow"),x(qe,"id","optimum.onnxruntime.ORTModel"),x(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(qe,"href","#optimum.onnxruntime.ORTModel"),x(ue,"class","relative group"),x(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ze,"id","optimum.onnxruntime.ORTModelForFeatureExtraction"),x(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(ze,"href","#optimum.onnxruntime.ORTModelForFeatureExtraction"),x(fe,"class","relative group"),x(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ie,"id","optimum.onnxruntime.ORTModelForQuestionAnswering"),x(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(Ie,"href","#optimum.onnxruntime.ORTModelForQuestionAnswering"),x(ge,"class","relative group"),x(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Le,"id","optimum.onnxruntime.ORTModelForSequenceClassification"),x(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(Le,"href","#optimum.onnxruntime.ORTModelForSequenceClassification"),x($e,"class","relative group"),x(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Be,"id","optimum.onnxruntime.ORTModelForTokenClassification"),x(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(Be,"href","#optimum.onnxruntime.ORTModelForTokenClassification"),x(we,"class","relative group"),x(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ue,"id","optimum.onnxruntime.ORTModelForCausalLM"),x(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(Ue,"href","#optimum.onnxruntime.ORTModelForCausalLM"),x(ve,"class","relative group"),x(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(et,"id","optimum.onnxruntime.ORTModelForImageClassification"),x(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(et,"href","#optimum.onnxruntime.ORTModelForImageClassification"),x(be,"class","relative group"),x(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,g){e(document.head,s),k(t,$,g),k(t,c,g),e(c,u),e(u,_),b(n,_,null),e(c,p),e(c,j),e(j,d),k(t,w,g),k(t,q,g),e(q,ms),e(q,Bt),e(Bt,ps),e(q,cs),k(t,xn,g),k(t,ce,g),e(ce,ye),e(ye,oo),b(at,oo,null),e(ce,ds),e(ce,no),e(no,us),k(t,vn,g),k(t,D,g),e(D,fs),e(D,so),e(so,hs),e(D,gs),e(D,ro),e(ro,_s),e(D,$s),e(D,ao),e(ao,ks),e(D,ws),e(D,io),e(io,xs),e(D,vs),k(t,Tn,g),b(it,t,g),k(t,bn,g),k(t,K,g),e(K,Ts),e(K,lo),e(lo,bs),e(K,Ms),e(K,mo),e(mo,Os),e(K,ys),k(t,Mn,g),b(lt,t,g),k(t,On,g),k(t,je,g),e(je,js),e(je,Gt),e(Gt,Es),e(je,qs),k(t,yn,g),k(t,de,g),e(de,Ee),e(Ee,po),b(mt,po,null),e(de,Rs),e(de,co),e(co,Fs),k(t,jn,g),k(t,U,g),e(U,zs),e(U,Vt),e(Vt,Cs),e(U,As),e(U,pt),e(pt,Ps),e(U,Is),e(U,uo),e(uo,Ns),e(U,Ss),k(t,En,g),b(ct,t,g),k(t,qn,g),k(t,ue,g),e(ue,qe),e(qe,fo),b(dt,fo,null),e(ue,Ds),e(ue,ho),e(ho,Ls),k(t,Rn,g),k(t,B,g),b(ut,B,null),e(B,Hs),e(B,ft),e(ft,Qs),e(ft,go),e(go,Xs),e(ft,Ws),e(B,Bs),e(B,Re),b(ht,Re,null),e(Re,Gs),e(Re,gt),e(gt,Vs),e(gt,_o),e(_o,Js),e(gt,Us),e(B,Ys),e(B,Fe),b(_t,Fe,null),e(Fe,Ks),e(Fe,$o),e($o,Zs),k(t,Fn,g),k(t,fe,g),e(fe,ze),e(ze,ko),b($t,ko,null),e(fe,er),e(fe,wo),e(wo,tr),k(t,zn,g),k(t,z,g),b(kt,z,null),e(z,or),e(z,xo),e(xo,nr),e(z,sr),e(z,wt),e(wt,rr),e(wt,vo),e(vo,ar),e(wt,ir),e(z,lr),e(z,To),e(To,mr),e(z,pr),e(z,L),b(xt,L,null),e(L,cr),e(L,he),e(he,dr),e(he,bo),e(bo,ur),e(he,fr),e(he,Mo),e(Mo,hr),e(he,gr),e(L,_r),b(Ce,L,null),e(L,$r),b(Ae,L,null),e(L,kr),b(Pe,L,null),k(t,Cn,g),k(t,ge,g),e(ge,Ie),e(Ie,Oo),b(vt,Oo,null),e(ge,wr),e(ge,yo),e(yo,xr),k(t,An,g),k(t,C,g),b(Tt,C,null),e(C,vr),e(C,jo),e(jo,Tr),e(C,br),e(C,bt),e(bt,Mr),e(bt,Eo),e(Eo,Or),e(bt,yr),e(C,jr),e(C,qo),e(qo,Er),e(C,qr),e(C,H),b(Mt,H,null),e(H,Rr),e(H,_e),e(_e,Fr),e(_e,Ro),e(Ro,zr),e(_e,Cr),e(_e,Fo),e(Fo,Ar),e(_e,Pr),e(H,Ir),b(Ne,H,null),e(H,Nr),b(Se,H,null),e(H,Sr),b(De,H,null),k(t,Pn,g),k(t,$e,g),e($e,Le),e(Le,zo),b(Ot,zo,null),e($e,Dr),e($e,Co),e(Co,Lr),k(t,In,g),k(t,A,g),b(yt,A,null),e(A,Hr),e(A,Ao),e(Ao,Qr),e(A,Xr),e(A,jt),e(jt,Wr),e(jt,Po),e(Po,Br),e(jt,Gr),e(A,Vr),e(A,Io),e(Io,Jr),e(A,Ur),e(A,R),b(Et,R,null),e(R,Yr),e(R,ke),e(ke,Kr),e(ke,No),e(No,Zr),e(ke,ea),e(ke,So),e(So,ta),e(ke,oa),e(R,na),b(He,R,null),e(R,sa),b(Qe,R,null),e(R,ra),b(Xe,R,null),e(R,aa),b(We,R,null),k(t,Nn,g),k(t,we,g),e(we,Be),e(Be,Do),b(qt,Do,null),e(we,ia),e(we,Lo),e(Lo,la),k(t,Sn,g),k(t,P,g),b(Rt,P,null),e(P,ma),e(P,Ho),e(Ho,pa),e(P,ca),e(P,Ft),e(Ft,da),e(Ft,Qo),e(Qo,ua),e(Ft,fa),e(P,ha),e(P,Xo),e(Xo,ga),e(P,_a),e(P,Q),b(zt,Q,null),e(Q,$a),e(Q,xe),e(xe,ka),e(xe,Wo),e(Wo,wa),e(xe,xa),e(xe,Bo),e(Bo,va),e(xe,Ta),e(Q,ba),b(Ge,Q,null),e(Q,Ma),b(Ve,Q,null),e(Q,Oa),b(Je,Q,null),k(t,Dn,g),k(t,ve,g),e(ve,Ue),e(Ue,Go),b(Ct,Go,null),e(ve,ya),e(ve,Vo),e(Vo,ja),k(t,Ln,g),k(t,I,g),b(At,I,null),e(I,Ea),e(I,Jo),e(Jo,qa),e(I,Ra),e(I,Pt),e(Pt,Fa),e(Pt,Uo),e(Uo,za),e(Pt,Ca),e(I,Aa),e(I,Yo),e(Yo,Pa),e(I,Ia),e(I,X),b(It,X,null),e(X,Na),e(X,Te),e(Te,Sa),e(Te,Ko),e(Ko,Da),e(Te,La),e(Te,Zo),e(Zo,Ha),e(Te,Qa),e(X,Xa),b(Ye,X,null),e(X,Wa),b(Ke,X,null),e(X,Ba),b(Ze,X,null),k(t,Hn,g),k(t,be,g),e(be,et),e(et,en),b(Nt,en,null),e(be,Ga),e(be,tn),e(tn,Va),k(t,Qn,g),k(t,N,g),b(St,N,null),e(N,Ja),e(N,on),e(on,Ua),e(N,Ya),e(N,Dt),e(Dt,Ka),e(Dt,nn),e(nn,Za),e(Dt,ei),e(N,ti),e(N,sn),e(sn,oi),e(N,ni),e(N,W),b(Lt,W,null),e(W,si),e(W,Me),e(Me,ri),e(Me,rn),e(rn,ai),e(Me,ii),e(Me,an),e(an,li),e(Me,mi),e(W,pi),b(tt,W,null),e(W,ci),b(ot,W,null),e(W,di),b(nt,W,null),Xn=!0},p(t,[g]){const Ht={};g&2&&(Ht.$$scope={dirty:g,ctx:t}),Ce.$set(Ht);const ln={};g&2&&(ln.$$scope={dirty:g,ctx:t}),Ae.$set(ln);const mn={};g&2&&(mn.$$scope={dirty:g,ctx:t}),Pe.$set(mn);const pn={};g&2&&(pn.$$scope={dirty:g,ctx:t}),Ne.$set(pn);const Qt={};g&2&&(Qt.$$scope={dirty:g,ctx:t}),Se.$set(Qt);const cn={};g&2&&(cn.$$scope={dirty:g,ctx:t}),De.$set(cn);const Xt={};g&2&&(Xt.$$scope={dirty:g,ctx:t}),He.$set(Xt);const dn={};g&2&&(dn.$$scope={dirty:g,ctx:t}),Qe.$set(dn);const un={};g&2&&(un.$$scope={dirty:g,ctx:t}),Xe.$set(un);const fn={};g&2&&(fn.$$scope={dirty:g,ctx:t}),We.$set(fn);const G={};g&2&&(G.$$scope={dirty:g,ctx:t}),Ge.$set(G);const hn={};g&2&&(hn.$$scope={dirty:g,ctx:t}),Ve.$set(hn);const gn={};g&2&&(gn.$$scope={dirty:g,ctx:t}),Je.$set(gn);const _n={};g&2&&(_n.$$scope={dirty:g,ctx:t}),Ye.$set(_n);const $n={};g&2&&($n.$$scope={dirty:g,ctx:t}),Ke.$set($n);const Oe={};g&2&&(Oe.$$scope={dirty:g,ctx:t}),Ze.$set(Oe);const kn={};g&2&&(kn.$$scope={dirty:g,ctx:t}),tt.$set(kn);const wn={};g&2&&(wn.$$scope={dirty:g,ctx:t}),ot.$set(wn);const Wt={};g&2&&(Wt.$$scope={dirty:g,ctx:t}),nt.$set(Wt)},i(t){Xn||(M(n.$$.fragment,t),M(at.$$.fragment,t),M(it.$$.fragment,t),M(lt.$$.fragment,t),M(mt.$$.fragment,t),M(ct.$$.fragment,t),M(dt.$$.fragment,t),M(ut.$$.fragment,t),M(ht.$$.fragment,t),M(_t.$$.fragment,t),M($t.$$.fragment,t),M(kt.$$.fragment,t),M(xt.$$.fragment,t),M(Ce.$$.fragment,t),M(Ae.$$.fragment,t),M(Pe.$$.fragment,t),M(vt.$$.fragment,t),M(Tt.$$.fragment,t),M(Mt.$$.fragment,t),M(Ne.$$.fragment,t),M(Se.$$.fragment,t),M(De.$$.fragment,t),M(Ot.$$.fragment,t),M(yt.$$.fragment,t),M(Et.$$.fragment,t),M(He.$$.fragment,t),M(Qe.$$.fragment,t),M(Xe.$$.fragment,t),M(We.$$.fragment,t),M(qt.$$.fragment,t),M(Rt.$$.fragment,t),M(zt.$$.fragment,t),M(Ge.$$.fragment,t),M(Ve.$$.fragment,t),M(Je.$$.fragment,t),M(Ct.$$.fragment,t),M(At.$$.fragment,t),M(It.$$.fragment,t),M(Ye.$$.fragment,t),M(Ke.$$.fragment,t),M(Ze.$$.fragment,t),M(Nt.$$.fragment,t),M(St.$$.fragment,t),M(Lt.$$.fragment,t),M(tt.$$.fragment,t),M(ot.$$.fragment,t),M(nt.$$.fragment,t),Xn=!0)},o(t){O(n.$$.fragment,t),O(at.$$.fragment,t),O(it.$$.fragment,t),O(lt.$$.fragment,t),O(mt.$$.fragment,t),O(ct.$$.fragment,t),O(dt.$$.fragment,t),O(ut.$$.fragment,t),O(ht.$$.fragment,t),O(_t.$$.fragment,t),O($t.$$.fragment,t),O(kt.$$.fragment,t),O(xt.$$.fragment,t),O(Ce.$$.fragment,t),O(Ae.$$.fragment,t),O(Pe.$$.fragment,t),O(vt.$$.fragment,t),O(Tt.$$.fragment,t),O(Mt.$$.fragment,t),O(Ne.$$.fragment,t),O(Se.$$.fragment,t),O(De.$$.fragment,t),O(Ot.$$.fragment,t),O(yt.$$.fragment,t),O(Et.$$.fragment,t),O(He.$$.fragment,t),O(Qe.$$.fragment,t),O(Xe.$$.fragment,t),O(We.$$.fragment,t),O(qt.$$.fragment,t),O(Rt.$$.fragment,t),O(zt.$$.fragment,t),O(Ge.$$.fragment,t),O(Ve.$$.fragment,t),O(Je.$$.fragment,t),O(Ct.$$.fragment,t),O(At.$$.fragment,t),O(It.$$.fragment,t),O(Ye.$$.fragment,t),O(Ke.$$.fragment,t),O(Ze.$$.fragment,t),O(Nt.$$.fragment,t),O(St.$$.fragment,t),O(Lt.$$.fragment,t),O(tt.$$.fragment,t),O(ot.$$.fragment,t),O(nt.$$.fragment,t),Xn=!1},d(t){o(s),t&&o($),t&&o(c),y(n),t&&o(w),t&&o(q),t&&o(xn),t&&o(ce),y(at),t&&o(vn),t&&o(D),t&&o(Tn),y(it,t),t&&o(bn),t&&o(K),t&&o(Mn),y(lt,t),t&&o(On),t&&o(je),t&&o(yn),t&&o(de),y(mt),t&&o(jn),t&&o(U),t&&o(En),y(ct,t),t&&o(qn),t&&o(ue),y(dt),t&&o(Rn),t&&o(B),y(ut),y(ht),y(_t),t&&o(Fn),t&&o(fe),y($t),t&&o(zn),t&&o(z),y(kt),y(xt),y(Ce),y(Ae),y(Pe),t&&o(Cn),t&&o(ge),y(vt),t&&o(An),t&&o(C),y(Tt),y(Mt),y(Ne),y(Se),y(De),t&&o(Pn),t&&o($e),y(Ot),t&&o(In),t&&o(A),y(yt),y(Et),y(He),y(Qe),y(Xe),y(We),t&&o(Nn),t&&o(we),y(qt),t&&o(Sn),t&&o(P),y(Rt),y(zt),y(Ge),y(Ve),y(Je),t&&o(Dn),t&&o(ve),y(Ct),t&&o(Ln),t&&o(I),y(At),y(It),y(Ye),y(Ke),y(Ze),t&&o(Hn),t&&o(be),y(Nt),t&&o(Qn),t&&o(N),y(St),y(Lt),y(tt),y(ot),y(nt)}}}const Wl={local:"optimum-inference-with-onnx-runtime",sections:[{local:"switching-from-transformers-to-optimum-inference",sections:[{local:"working-with-the-hugging-face-model-hub",title:"Working with the Hugging Face Model Hub"}],title:"Switching from Transformers to Optimum Inference"},{local:"optimum.onnxruntime.ORTModel",title:"ORTModel"},{local:"optimum.onnxruntime.ORTModelForFeatureExtraction",title:"ORTModelForFeatureExtraction"},{local:"optimum.onnxruntime.ORTModelForQuestionAnswering",title:"ORTModelForQuestionAnswering"},{local:"optimum.onnxruntime.ORTModelForSequenceClassification",title:"ORTModelForSequenceClassification"},{local:"optimum.onnxruntime.ORTModelForTokenClassification",title:"ORTModelForTokenClassification"},{local:"optimum.onnxruntime.ORTModelForCausalLM",title:"ORTModelForCausalLM"},{local:"optimum.onnxruntime.ORTModelForImageClassification",title:"ORTModelForImageClassification"}],title:"Optimum Inference with ONNX Runtime"};function Bl(E){return bl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Zl extends wl{constructor(s){super();xl(this,s,Bl,Xl,vl,{})}}export{Zl as default,Wl as metadata};
