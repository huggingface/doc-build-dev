import{S as et,i as tt,s as ot,e as n,k as s,w as y,t as l,M as nt,c as i,d as o,m as p,a as r,x as T,h,b as m,G as e,g as P,y as R,L as it,q as w,o as L,B as E,v as rt}from"../../chunks/vendor-hf-doc-builder.js";import{D as H}from"../../chunks/Docstring-hf-doc-builder.js";import{I as Ze}from"../../chunks/IconCopyLink-hf-doc-builder.js";function at(Ie){let f,ee,g,v,F,k,he,G,ce,te,u,ue,B,fe,ge,N,_e,ve,oe,_,x,J,D,xe,W,ze,ne,a,U,be,j,Oe,$e,z,C,ye,A,Te,K,Pe,Re,we,V,X,Le,b,I,Ee,Q,ke,Ne,O,S,De,Y,Ue,Ce,$,M,Ae,Z,Xe,ie;return k=new Ze({}),D=new Ze({}),U=new H({props:{name:"class optimum.onnxruntime.ORTOptimizer",anchor:"optimum.onnxruntime.ORTOptimizer",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"config",val:": PretrainedConfig"}],source:"https://github.com/huggingface/optimum/blob/vr_294/src/optimum/onnxruntime/optimization.py#L36"}}),C=new H({props:{name:"fit",anchor:"optimum.onnxruntime.ORTOptimizer.fit",parameters:[{name:"optimization_config",val:": OptimizationConfig"},{name:"save_dir",val:": typing.Union[str, os.PathLike]"},{name:"use_external_data_format",val:": bool = False"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.fit.optimization_config",description:`<strong>optimization_config</strong> (<code>OptimizationConfig</code>) &#x2014;
The configuration containing the parameters related to optimization.`,name:"optimization_config"},{anchor:"optimum.onnxruntime.ORTOptimizer.fit.save_dir",description:`<strong>save_dir</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
The path used to save the optimized model.`,name:"save_dir"},{anchor:"optimum.onnxruntime.ORTOptimizer.fit.use_external_data_format",description:`<strong>use_external_data_format</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether uto se external data format to store model which size is &gt;= 2Gb.`,name:"use_external_data_format"}],source:"https://github.com/huggingface/optimum/blob/vr_294/src/optimum/onnxruntime/optimization.py#L88"}}),X=new H({props:{name:"from_pretrained",anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained",parameters:[{name:"model_id",val:": typing.Union[str, os.PathLike, optimum.onnxruntime.modeling_ort.ORTModel]"},{name:"file_names",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.model_id",description:`<strong>model_id</strong> (<code>Union[str, os.PathLike, ORTModel]</code>) &#x2014;
The path to a local directory hosting the model to optimize or an instance of an <code>ORTModel</code> to quantize.
Can be either:<ul>
<li>A path to a local <em>directory</em> containing the model to optimize.</li>
<li>An instance of ORTModel.</li>
</ul>`,name:"model_id"},{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.file_names(List[str],",description:`<strong>file_names(<code>List[str]</code>,</strong> <em>optional</em>) &#x2014;
The list of file names of the models to optimize.`,name:"file_names(List[str],"}],source:"https://github.com/huggingface/optimum/blob/vr_294/src/optimum/onnxruntime/optimization.py#L41"}}),I=new H({props:{name:"get_fused_operators",anchor:"optimum.onnxruntime.ORTOptimizer.get_fused_operators",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_fused_operators.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"}],source:"https://github.com/huggingface/optimum/blob/vr_294/src/optimum/onnxruntime/optimization.py#L142",returnDescription:`
<p>The dictionary mapping the name of the fused operators to their number of apparition in the model.</p>
`}}),S=new H({props:{name:"get_nodes_number_difference",anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_number_difference",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_path",val:": typing.Union[str, os.PathLike]"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_number_difference.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_number_difference.onnx_optimized_model_path",description:`<strong>onnx_optimized_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the optimized ONNX model.`,name:"onnx_optimized_model_path"}],source:"https://github.com/huggingface/optimum/blob/vr_294/src/optimum/onnxruntime/optimization.py#L161",returnDescription:`
<p>The difference in the number of nodes between the original and the optimized model.</p>
`}}),M=new H({props:{name:"get_operators_difference",anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_path",val:": typing.Union[str, os.PathLike]"}],parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference.onnx_optimized_model_path",description:`<strong>onnx_optimized_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the optimized ONNX model.`,name:"onnx_optimized_model_path"}],source:"https://github.com/huggingface/optimum/blob/vr_294/src/optimum/onnxruntime/optimization.py#L190",returnDescription:`
<p>The dictionary mapping the operators name to the difference in the number of corresponding nodes between the
original and the optimized model.</p>
`}}),{c(){f=n("meta"),ee=s(),g=n("h1"),v=n("a"),F=n("span"),y(k.$$.fragment),he=s(),G=n("span"),ce=l("Optimization"),te=s(),u=n("p"),ue=l("\u{1F917} Optimum provides an "),B=n("code"),fe=l("optimum.onnxruntime"),ge=l(" package that enables you to apply graph optimization on many model hosted on the \u{1F917} hub using the "),N=n("a"),_e=l("ONNX Runtime"),ve=l(" model optimization tool."),oe=s(),_=n("h2"),x=n("a"),J=n("span"),y(D.$$.fragment),xe=s(),W=n("span"),ze=l("ORTOptimizer"),ne=s(),a=n("div"),y(U.$$.fragment),be=s(),j=n("p"),Oe=l("Handles the ONNX Runtime optimization process for models shared on huggingface.co/models."),$e=s(),z=n("div"),y(C.$$.fragment),ye=s(),A=n("p"),Te=l("Optimize a model given the optimization specifications defined in "),K=n("code"),Pe=l("optimization_config"),Re=l("."),we=s(),V=n("div"),y(X.$$.fragment),Le=s(),b=n("div"),y(I.$$.fragment),Ee=s(),Q=n("p"),ke=l("Compute the dictionary mapping the name of the fused operators to their number of apparition in the model."),Ne=s(),O=n("div"),y(S.$$.fragment),De=s(),Y=n("p"),Ue=l("Compute the difference in the number of nodes between the original and the optimized model."),Ce=s(),$=n("div"),y(M.$$.fragment),Ae=s(),Z=n("p"),Xe=l(`Compute the dictionary mapping the operators name to the difference in the number of corresponding nodes between
the original and the optimized model.`),this.h()},l(t){const c=nt('[data-svelte="svelte-1phssyn"]',document.head);f=i(c,"META",{name:!0,content:!0}),c.forEach(o),ee=p(t),g=i(t,"H1",{class:!0});var re=r(g);v=i(re,"A",{id:!0,class:!0,href:!0});var Se=r(v);F=i(Se,"SPAN",{});var Me=r(F);T(k.$$.fragment,Me),Me.forEach(o),Se.forEach(o),he=p(re),G=i(re,"SPAN",{});var Ve=r(G);ce=h(Ve,"Optimization"),Ve.forEach(o),re.forEach(o),te=p(t),u=i(t,"P",{});var q=r(u);ue=h(q,"\u{1F917} Optimum provides an "),B=i(q,"CODE",{});var qe=r(B);fe=h(qe,"optimum.onnxruntime"),qe.forEach(o),ge=h(q," package that enables you to apply graph optimization on many model hosted on the \u{1F917} hub using the "),N=i(q,"A",{href:!0,rel:!0});var He=r(N);_e=h(He,"ONNX Runtime"),He.forEach(o),ve=h(q," model optimization tool."),q.forEach(o),oe=p(t),_=i(t,"H2",{class:!0});var ae=r(_);x=i(ae,"A",{id:!0,class:!0,href:!0});var Fe=r(x);J=i(Fe,"SPAN",{});var Ge=r(J);T(D.$$.fragment,Ge),Ge.forEach(o),Fe.forEach(o),xe=p(ae),W=i(ae,"SPAN",{});var Be=r(W);ze=h(Be,"ORTOptimizer"),Be.forEach(o),ae.forEach(o),ne=p(t),a=i(t,"DIV",{class:!0});var d=r(a);T(U.$$.fragment,d),be=p(d),j=i(d,"P",{});var Je=r(j);Oe=h(Je,"Handles the ONNX Runtime optimization process for models shared on huggingface.co/models."),Je.forEach(o),$e=p(d),z=i(d,"DIV",{class:!0});var me=r(z);T(C.$$.fragment,me),ye=p(me),A=i(me,"P",{});var se=r(A);Te=h(se,"Optimize a model given the optimization specifications defined in "),K=i(se,"CODE",{});var We=r(K);Pe=h(We,"optimization_config"),We.forEach(o),Re=h(se,"."),se.forEach(o),me.forEach(o),we=p(d),V=i(d,"DIV",{class:!0});var je=r(V);T(X.$$.fragment,je),je.forEach(o),Le=p(d),b=i(d,"DIV",{class:!0});var pe=r(b);T(I.$$.fragment,pe),Ee=p(pe),Q=i(pe,"P",{});var Ke=r(Q);ke=h(Ke,"Compute the dictionary mapping the name of the fused operators to their number of apparition in the model."),Ke.forEach(o),pe.forEach(o),Ne=p(d),O=i(d,"DIV",{class:!0});var de=r(O);T(S.$$.fragment,de),De=p(de),Y=i(de,"P",{});var Qe=r(Y);Ue=h(Qe,"Compute the difference in the number of nodes between the original and the optimized model."),Qe.forEach(o),de.forEach(o),Ce=p(d),$=i(d,"DIV",{class:!0});var le=r($);T(M.$$.fragment,le),Ae=p(le),Z=i(le,"P",{});var Ye=r(Z);Xe=h(Ye,`Compute the dictionary mapping the operators name to the difference in the number of corresponding nodes between
the original and the optimized model.`),Ye.forEach(o),le.forEach(o),d.forEach(o),this.h()},h(){m(f,"name","hf:doc:metadata"),m(f,"content",JSON.stringify(mt)),m(v,"id","optimization"),m(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(v,"href","#optimization"),m(g,"class","relative group"),m(N,"href","https://github.com/microsoft/onnxruntime/tree/master/onnxruntime/python/tools/transformers"),m(N,"rel","nofollow"),m(x,"id","optimum.onnxruntime.ORTOptimizer"),m(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(x,"href","#optimum.onnxruntime.ORTOptimizer"),m(_,"class","relative group"),m(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,c){e(document.head,f),P(t,ee,c),P(t,g,c),e(g,v),e(v,F),R(k,F,null),e(g,he),e(g,G),e(G,ce),P(t,te,c),P(t,u,c),e(u,ue),e(u,B),e(B,fe),e(u,ge),e(u,N),e(N,_e),e(u,ve),P(t,oe,c),P(t,_,c),e(_,x),e(x,J),R(D,J,null),e(_,xe),e(_,W),e(W,ze),P(t,ne,c),P(t,a,c),R(U,a,null),e(a,be),e(a,j),e(j,Oe),e(a,$e),e(a,z),R(C,z,null),e(z,ye),e(z,A),e(A,Te),e(A,K),e(K,Pe),e(A,Re),e(a,we),e(a,V),R(X,V,null),e(a,Le),e(a,b),R(I,b,null),e(b,Ee),e(b,Q),e(Q,ke),e(a,Ne),e(a,O),R(S,O,null),e(O,De),e(O,Y),e(Y,Ue),e(a,Ce),e(a,$),R(M,$,null),e($,Ae),e($,Z),e(Z,Xe),ie=!0},p:it,i(t){ie||(w(k.$$.fragment,t),w(D.$$.fragment,t),w(U.$$.fragment,t),w(C.$$.fragment,t),w(X.$$.fragment,t),w(I.$$.fragment,t),w(S.$$.fragment,t),w(M.$$.fragment,t),ie=!0)},o(t){L(k.$$.fragment,t),L(D.$$.fragment,t),L(U.$$.fragment,t),L(C.$$.fragment,t),L(X.$$.fragment,t),L(I.$$.fragment,t),L(S.$$.fragment,t),L(M.$$.fragment,t),ie=!1},d(t){o(f),t&&o(ee),t&&o(g),E(k),t&&o(te),t&&o(u),t&&o(oe),t&&o(_),E(D),t&&o(ne),t&&o(a),E(U),E(C),E(X),E(I),E(S),E(M)}}}const mt={local:"optimization",sections:[{local:"optimum.onnxruntime.ORTOptimizer",title:"ORTOptimizer"}],title:"Optimization"};function st(Ie){return rt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ht extends et{constructor(f){super();tt(this,f,st,at,ot,{})}}export{ht as default,mt as metadata};
