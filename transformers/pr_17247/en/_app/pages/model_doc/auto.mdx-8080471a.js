import{S as j0t,i as D0t,s as G0t,e as a,k as l,w as F,t as o,M as O0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as V0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function X0t(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,z0,gf,qe,Xe,ci,An,Q0,yn,Ln,W0,fi,xn,H0,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),z0=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),Q0=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),W0=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),H0=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var m$=s(p);m=r(m$,"NewModelConfig"),m$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var g$=s(li);mf=r(g$,"model_type"),g$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var h$=s(ii);di=r(h$,'"new-model"'),h$.forEach(t),z0=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),Q0=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var p$=s(yn);Ln=r(p$,"PreTrainedModel"),p$.forEach(t),W0=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),H0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var u$=s(mi);hf=r(u$,"NewModelConfig"),u$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,z0),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,Q0),e(qe,yn),e(yn,Ln),e(qe,W0),e(qe,fi),e(fi,xn),e(qe,H0),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function z0t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function H0t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function J0t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,z0,gf,qe,Xe,ci,An,Q0,yn,Ln,W0,fi,xn,H0,mi,hf,Ma,ze,Ae,m$,gi,g$,h$,Eo,Ea,p$,pf,u$,Qje,BBe,hi,uf,JZ,U0,Wje,YZ,Hje,IBe,$n,Uje,KZ,Jje,Yje,ZZ,Kje,Zje,qBe,J0,NBe,_$,eDe,jBe,_f,DBe,pi,bf,eee,Y0,oDe,oee,rDe,GBe,Co,K0,tDe,Z0,aDe,b$,nDe,sDe,lDe,e6,iDe,ree,dDe,cDe,fDe,Er,o6,mDe,tee,gDe,hDe,ui,pDe,aee,uDe,_De,nee,bDe,vDe,FDe,y,vf,see,TDe,MDe,v$,EDe,CDe,wDe,Ff,lee,ADe,yDe,F$,LDe,xDe,$De,Tf,iee,kDe,SDe,T$,RDe,PDe,BDe,Mf,dee,IDe,qDe,M$,NDe,jDe,DDe,Ef,cee,GDe,ODe,E$,VDe,XDe,zDe,Cf,fee,QDe,WDe,C$,HDe,UDe,JDe,wf,mee,YDe,KDe,w$,ZDe,eGe,oGe,Af,gee,rGe,tGe,A$,aGe,nGe,sGe,yf,hee,lGe,iGe,y$,dGe,cGe,fGe,Lf,pee,mGe,gGe,L$,hGe,pGe,uGe,xf,uee,_Ge,bGe,x$,vGe,FGe,TGe,$f,_ee,MGe,EGe,$$,CGe,wGe,AGe,kf,bee,yGe,LGe,k$,xGe,$Ge,kGe,Sf,vee,SGe,RGe,S$,PGe,BGe,IGe,Rf,Fee,qGe,NGe,R$,jGe,DGe,GGe,Pf,Tee,OGe,VGe,P$,XGe,zGe,QGe,Bf,Mee,WGe,HGe,B$,UGe,JGe,YGe,If,Eee,KGe,ZGe,I$,eOe,oOe,rOe,qf,Cee,tOe,aOe,q$,nOe,sOe,lOe,Nf,wee,iOe,dOe,N$,cOe,fOe,mOe,jf,Aee,gOe,hOe,j$,pOe,uOe,_Oe,Df,yee,bOe,vOe,D$,FOe,TOe,MOe,Gf,Lee,EOe,COe,G$,wOe,AOe,yOe,Of,xee,LOe,xOe,O$,$Oe,kOe,SOe,Vf,$ee,ROe,POe,V$,BOe,IOe,qOe,Xf,kee,NOe,jOe,X$,DOe,GOe,OOe,zf,See,VOe,XOe,z$,zOe,QOe,WOe,Qf,Ree,HOe,UOe,Q$,JOe,YOe,KOe,Wf,Pee,ZOe,eVe,W$,oVe,rVe,tVe,Hf,Bee,aVe,nVe,H$,sVe,lVe,iVe,Uf,Iee,dVe,cVe,U$,fVe,mVe,gVe,Jf,qee,hVe,pVe,J$,uVe,_Ve,bVe,Yf,Nee,vVe,FVe,Y$,TVe,MVe,EVe,Kf,jee,CVe,wVe,K$,AVe,yVe,LVe,Zf,Dee,xVe,$Ve,Z$,kVe,SVe,RVe,em,Gee,PVe,BVe,ek,IVe,qVe,NVe,om,Oee,jVe,DVe,ok,GVe,OVe,VVe,rm,Vee,XVe,zVe,rk,QVe,WVe,HVe,tm,Xee,UVe,JVe,tk,YVe,KVe,ZVe,am,zee,eXe,oXe,ak,rXe,tXe,aXe,nm,Qee,nXe,sXe,nk,lXe,iXe,dXe,sm,Wee,cXe,fXe,sk,mXe,gXe,hXe,lm,Hee,pXe,uXe,lk,_Xe,bXe,vXe,im,Uee,FXe,TXe,ik,MXe,EXe,CXe,dm,Jee,wXe,AXe,dk,yXe,LXe,xXe,cm,Yee,$Xe,kXe,ck,SXe,RXe,PXe,fm,Kee,BXe,IXe,fk,qXe,NXe,jXe,mm,Zee,DXe,GXe,mk,OXe,VXe,XXe,gm,eoe,zXe,QXe,gk,WXe,HXe,UXe,hm,ooe,JXe,YXe,hk,KXe,ZXe,eze,pm,roe,oze,rze,pk,tze,aze,nze,um,toe,sze,lze,uk,ize,dze,cze,_m,aoe,fze,mze,_k,gze,hze,pze,bm,noe,uze,_ze,bk,bze,vze,Fze,vm,soe,Tze,Mze,vk,Eze,Cze,wze,Fm,loe,Aze,yze,Fk,Lze,xze,$ze,Tm,ioe,kze,Sze,Tk,Rze,Pze,Bze,Mm,doe,Ize,qze,Mk,Nze,jze,Dze,Em,coe,Gze,Oze,Ek,Vze,Xze,zze,Cm,foe,Qze,Wze,Ck,Hze,Uze,Jze,wm,moe,Yze,Kze,wk,Zze,eQe,oQe,Am,goe,rQe,tQe,Ak,aQe,nQe,sQe,ym,hoe,lQe,iQe,yk,dQe,cQe,fQe,Lm,poe,mQe,gQe,Lk,hQe,pQe,uQe,xm,uoe,_Qe,bQe,xk,vQe,FQe,TQe,$m,_oe,MQe,EQe,$k,CQe,wQe,AQe,km,boe,yQe,LQe,kk,xQe,$Qe,kQe,Sm,voe,SQe,RQe,Sk,PQe,BQe,IQe,Rm,Foe,qQe,NQe,Rk,jQe,DQe,GQe,Pm,Toe,OQe,VQe,Pk,XQe,zQe,QQe,Bm,Moe,WQe,HQe,Bk,UQe,JQe,YQe,Im,Eoe,KQe,ZQe,Ik,eWe,oWe,rWe,qm,Coe,tWe,aWe,qk,nWe,sWe,lWe,Nm,woe,iWe,dWe,Nk,cWe,fWe,mWe,jm,Aoe,gWe,hWe,jk,pWe,uWe,_We,Dm,yoe,bWe,vWe,Dk,FWe,TWe,MWe,Gm,Loe,EWe,CWe,Gk,wWe,AWe,yWe,Om,xoe,LWe,xWe,Ok,$We,kWe,SWe,Vm,$oe,RWe,PWe,Vk,BWe,IWe,qWe,Xm,koe,NWe,jWe,Xk,DWe,GWe,OWe,zm,Soe,VWe,XWe,zk,zWe,QWe,WWe,Qm,Roe,HWe,UWe,Qk,JWe,YWe,KWe,Wm,Poe,ZWe,eHe,Wk,oHe,rHe,tHe,Hm,Boe,aHe,nHe,Hk,sHe,lHe,iHe,Um,Ioe,dHe,cHe,Uk,fHe,mHe,gHe,Jm,qoe,hHe,pHe,Jk,uHe,_He,bHe,Ym,Noe,vHe,FHe,Yk,THe,MHe,EHe,Km,joe,CHe,wHe,Kk,AHe,yHe,LHe,Zm,Doe,xHe,$He,Zk,kHe,SHe,RHe,eg,Goe,PHe,BHe,eS,IHe,qHe,NHe,og,Ooe,jHe,DHe,oS,GHe,OHe,VHe,rg,Voe,XHe,zHe,rS,QHe,WHe,HHe,tg,Xoe,UHe,JHe,tS,YHe,KHe,ZHe,ag,zoe,eUe,oUe,aS,rUe,tUe,aUe,ng,Qoe,nUe,sUe,nS,lUe,iUe,dUe,sg,Woe,cUe,fUe,sS,mUe,gUe,hUe,lg,Hoe,pUe,uUe,lS,_Ue,bUe,vUe,ig,Uoe,FUe,TUe,iS,MUe,EUe,CUe,dg,Joe,wUe,AUe,dS,yUe,LUe,xUe,cg,Yoe,$Ue,kUe,cS,SUe,RUe,PUe,fg,Koe,BUe,IUe,fS,qUe,NUe,jUe,mg,Zoe,DUe,GUe,mS,OUe,VUe,XUe,gg,ere,zUe,QUe,gS,WUe,HUe,UUe,hg,ore,JUe,YUe,hS,KUe,ZUe,eJe,pg,oJe,ug,r6,rJe,rre,tJe,OBe,_i,_g,tre,t6,aJe,are,nJe,VBe,wo,a6,sJe,n6,lJe,pS,iJe,dJe,cJe,s6,fJe,nre,mJe,gJe,hJe,Cr,l6,pJe,sre,uJe,_Je,Ca,bJe,lre,vJe,FJe,ire,TJe,MJe,dre,EJe,CJe,wJe,k,kn,cre,AJe,yJe,uS,LJe,xJe,_S,$Je,kJe,SJe,Sn,fre,RJe,PJe,bS,BJe,IJe,vS,qJe,NJe,jJe,Rn,mre,DJe,GJe,FS,OJe,VJe,TS,XJe,zJe,QJe,bg,gre,WJe,HJe,MS,UJe,JJe,YJe,Pn,hre,KJe,ZJe,ES,eYe,oYe,CS,rYe,tYe,aYe,vg,pre,nYe,sYe,wS,lYe,iYe,dYe,Fg,ure,cYe,fYe,AS,mYe,gYe,hYe,Tg,_re,pYe,uYe,yS,_Ye,bYe,vYe,Bn,bre,FYe,TYe,LS,MYe,EYe,xS,CYe,wYe,AYe,In,vre,yYe,LYe,$S,xYe,$Ye,kS,kYe,SYe,RYe,qn,Fre,PYe,BYe,SS,IYe,qYe,RS,NYe,jYe,DYe,Mg,Tre,GYe,OYe,PS,VYe,XYe,zYe,Eg,Mre,QYe,WYe,BS,HYe,UYe,JYe,Nn,Ere,YYe,KYe,IS,ZYe,eKe,qS,oKe,rKe,tKe,Cg,Cre,aKe,nKe,NS,sKe,lKe,iKe,jn,wre,dKe,cKe,jS,fKe,mKe,DS,gKe,hKe,pKe,Dn,Are,uKe,_Ke,GS,bKe,vKe,OS,FKe,TKe,MKe,Gn,yre,EKe,CKe,VS,wKe,AKe,XS,yKe,LKe,xKe,wg,Lre,$Ke,kKe,zS,SKe,RKe,PKe,On,xre,BKe,IKe,QS,qKe,NKe,WS,jKe,DKe,GKe,Vn,$re,OKe,VKe,HS,XKe,zKe,US,QKe,WKe,HKe,Xn,kre,UKe,JKe,JS,YKe,KKe,YS,ZKe,eZe,oZe,zn,Sre,rZe,tZe,KS,aZe,nZe,ZS,sZe,lZe,iZe,Qn,Rre,dZe,cZe,eR,fZe,mZe,oR,gZe,hZe,pZe,Wn,Pre,uZe,_Ze,rR,bZe,vZe,tR,FZe,TZe,MZe,Ag,Bre,EZe,CZe,aR,wZe,AZe,yZe,Hn,Ire,LZe,xZe,nR,$Ze,kZe,sR,SZe,RZe,PZe,yg,qre,BZe,IZe,lR,qZe,NZe,jZe,Un,Nre,DZe,GZe,iR,OZe,VZe,dR,XZe,zZe,QZe,Jn,jre,WZe,HZe,cR,UZe,JZe,fR,YZe,KZe,ZZe,Yn,Dre,eeo,oeo,mR,reo,teo,gR,aeo,neo,seo,Kn,Gre,leo,ieo,hR,deo,ceo,pR,feo,meo,geo,Zn,Ore,heo,peo,uR,ueo,_eo,_R,beo,veo,Feo,Lg,Vre,Teo,Meo,bR,Eeo,Ceo,weo,es,Xre,Aeo,yeo,vR,Leo,xeo,FR,$eo,keo,Seo,os,zre,Reo,Peo,TR,Beo,Ieo,MR,qeo,Neo,jeo,rs,Qre,Deo,Geo,ER,Oeo,Veo,CR,Xeo,zeo,Qeo,ts,Wre,Weo,Heo,wR,Ueo,Jeo,AR,Yeo,Keo,Zeo,as,Hre,eoo,ooo,yR,roo,too,LR,aoo,noo,soo,ns,Ure,loo,ioo,xR,doo,coo,$R,foo,moo,goo,xg,Jre,hoo,poo,kR,uoo,_oo,boo,ss,Yre,voo,Foo,SR,Too,Moo,RR,Eoo,Coo,woo,$g,Kre,Aoo,yoo,PR,Loo,xoo,$oo,kg,Zre,koo,Soo,BR,Roo,Poo,Boo,ls,ete,Ioo,qoo,IR,Noo,joo,qR,Doo,Goo,Ooo,is,ote,Voo,Xoo,NR,zoo,Qoo,jR,Woo,Hoo,Uoo,ds,rte,Joo,Yoo,DR,Koo,Zoo,GR,ero,oro,rro,Sg,tte,tro,aro,OR,nro,sro,lro,cs,ate,iro,dro,VR,cro,fro,XR,mro,gro,hro,fs,nte,pro,uro,zR,_ro,bro,QR,vro,Fro,Tro,ms,ste,Mro,Ero,WR,Cro,wro,HR,Aro,yro,Lro,gs,lte,xro,$ro,UR,kro,Sro,JR,Rro,Pro,Bro,hs,ite,Iro,qro,YR,Nro,jro,KR,Dro,Gro,Oro,Rg,dte,Vro,Xro,ZR,zro,Qro,Wro,ps,cte,Hro,Uro,eP,Jro,Yro,oP,Kro,Zro,eto,Pg,fte,oto,rto,rP,tto,ato,nto,Bg,mte,sto,lto,tP,ito,dto,cto,Ig,gte,fto,mto,aP,gto,hto,pto,qg,hte,uto,_to,nP,bto,vto,Fto,us,pte,Tto,Mto,sP,Eto,Cto,lP,wto,Ato,yto,Ng,ute,Lto,xto,iP,$to,kto,Sto,_s,_te,Rto,Pto,dP,Bto,Ito,cP,qto,Nto,jto,bs,bte,Dto,Gto,fP,Oto,Vto,mP,Xto,zto,Qto,vs,vte,Wto,Hto,gP,Uto,Jto,hP,Yto,Kto,Zto,Fs,Fte,eao,oao,pP,rao,tao,uP,aao,nao,sao,Ts,Tte,lao,iao,_P,dao,cao,bP,fao,mao,gao,Ms,Mte,hao,pao,vP,uao,_ao,FP,bao,vao,Fao,jg,Ete,Tao,Mao,TP,Eao,Cao,wao,Dg,Cte,Aao,yao,MP,Lao,xao,$ao,Es,wte,kao,Sao,EP,Rao,Pao,CP,Bao,Iao,qao,Cs,Ate,Nao,jao,wP,Dao,Gao,AP,Oao,Vao,Xao,ws,yte,zao,Qao,yP,Wao,Hao,LP,Uao,Jao,Yao,Gg,Lte,Kao,Zao,xP,eno,ono,rno,Og,xte,tno,ano,$P,nno,sno,lno,Vg,$te,ino,dno,kP,cno,fno,mno,As,kte,gno,hno,SP,pno,uno,RP,_no,bno,vno,Xg,Ste,Fno,Tno,PP,Mno,Eno,Cno,zg,Rte,wno,Ano,BP,yno,Lno,xno,ys,Pte,$no,kno,IP,Sno,Rno,qP,Pno,Bno,Ino,Qg,Bte,qno,Nno,NP,jno,Dno,Gno,Wg,Ite,Ono,Vno,jP,Xno,zno,Qno,Ls,qte,Wno,Hno,DP,Uno,Jno,GP,Yno,Kno,Zno,xs,Nte,eso,oso,OP,rso,tso,VP,aso,nso,sso,$s,jte,lso,iso,XP,dso,cso,zP,fso,mso,gso,ks,Dte,hso,pso,QP,uso,_so,WP,bso,vso,Fso,Hg,Tso,Ug,i6,Mso,Gte,Eso,XBe,bi,Jg,Ote,d6,Cso,Vte,wso,zBe,Ao,c6,Aso,f6,yso,HP,Lso,xso,$so,m6,kso,Xte,Sso,Rso,Pso,Qe,g6,Bso,zte,Iso,qso,wa,Nso,Qte,jso,Dso,Wte,Gso,Oso,Hte,Vso,Xso,zso,oe,Yg,Ute,Qso,Wso,UP,Hso,Uso,Jso,Kg,Jte,Yso,Kso,JP,Zso,elo,olo,Zg,Yte,rlo,tlo,YP,alo,nlo,slo,eh,Kte,llo,ilo,KP,dlo,clo,flo,oh,Zte,mlo,glo,ZP,hlo,plo,ulo,rh,eae,_lo,blo,eB,vlo,Flo,Tlo,th,oae,Mlo,Elo,oB,Clo,wlo,Alo,ah,rae,ylo,Llo,rB,xlo,$lo,klo,nh,tae,Slo,Rlo,tB,Plo,Blo,Ilo,sh,aae,qlo,Nlo,aB,jlo,Dlo,Glo,lh,nae,Olo,Vlo,nB,Xlo,zlo,Qlo,ih,sae,Wlo,Hlo,sB,Ulo,Jlo,Ylo,dh,lae,Klo,Zlo,lB,eio,oio,rio,ch,iae,tio,aio,iB,nio,sio,lio,fh,dae,iio,dio,dB,cio,fio,mio,mh,cae,gio,hio,cB,pio,uio,_io,gh,fae,bio,vio,fB,Fio,Tio,Mio,hh,mae,Eio,Cio,mB,wio,Aio,yio,ph,gae,Lio,xio,gB,$io,kio,Sio,uh,hae,Rio,Pio,hB,Bio,Iio,qio,_h,pae,Nio,jio,pB,Dio,Gio,Oio,bh,uae,Vio,Xio,uB,zio,Qio,Wio,vh,_ae,Hio,Uio,_B,Jio,Yio,Kio,Fh,bae,Zio,edo,bB,odo,rdo,tdo,Th,vae,ado,ndo,vB,sdo,ldo,ido,Mh,ddo,Eh,cdo,Ch,h6,fdo,Fae,mdo,QBe,vi,wh,Tae,p6,gdo,Mae,hdo,WBe,yo,u6,pdo,_6,udo,FB,_do,bdo,vdo,b6,Fdo,Eae,Tdo,Mdo,Edo,We,v6,Cdo,Cae,wdo,Ado,Fi,ydo,wae,Ldo,xdo,Aae,$do,kdo,Sdo,_e,Ah,yae,Rdo,Pdo,TB,Bdo,Ido,qdo,yh,Lae,Ndo,jdo,xae,Ddo,Gdo,Odo,Lh,$ae,Vdo,Xdo,MB,zdo,Qdo,Wdo,xh,kae,Hdo,Udo,EB,Jdo,Ydo,Kdo,$h,Sae,Zdo,eco,CB,oco,rco,tco,kh,Rae,aco,nco,wB,sco,lco,ico,Sh,Pae,dco,cco,AB,fco,mco,gco,Rh,Bae,hco,pco,yB,uco,_co,bco,Ph,Iae,vco,Fco,LB,Tco,Mco,Eco,Bh,qae,Cco,wco,xB,Aco,yco,Lco,Ih,Nae,xco,$co,$B,kco,Sco,Rco,qh,jae,Pco,Bco,kB,Ico,qco,Nco,Nh,Dae,jco,Dco,SB,Gco,Oco,Vco,jh,Gae,Xco,zco,RB,Qco,Wco,Hco,Dh,Oae,Uco,Jco,PB,Yco,Kco,Zco,Gh,efo,Oh,ofo,Vh,F6,rfo,Vae,tfo,HBe,Ti,Xh,Xae,T6,afo,zae,nfo,UBe,Lo,M6,sfo,Mi,lfo,BB,ifo,dfo,IB,cfo,ffo,mfo,E6,gfo,Qae,hfo,pfo,ufo,ot,C6,_fo,Wae,bfo,vfo,Ei,Ffo,Hae,Tfo,Mfo,qB,Efo,Cfo,wfo,zh,Afo,He,w6,yfo,Uae,Lfo,xfo,Aa,$fo,Jae,kfo,Sfo,Yae,Rfo,Pfo,Kae,Bfo,Ifo,qfo,x,Qh,Zae,Nfo,jfo,NB,Dfo,Gfo,Ofo,Wh,ene,Vfo,Xfo,jB,zfo,Qfo,Wfo,Hh,one,Hfo,Ufo,DB,Jfo,Yfo,Kfo,Uh,rne,Zfo,emo,GB,omo,rmo,tmo,Jh,tne,amo,nmo,OB,smo,lmo,imo,Yh,ane,dmo,cmo,VB,fmo,mmo,gmo,Kh,nne,hmo,pmo,XB,umo,_mo,bmo,Zh,sne,vmo,Fmo,zB,Tmo,Mmo,Emo,ep,lne,Cmo,wmo,QB,Amo,ymo,Lmo,op,ine,xmo,$mo,WB,kmo,Smo,Rmo,rp,dne,Pmo,Bmo,HB,Imo,qmo,Nmo,tp,cne,jmo,Dmo,UB,Gmo,Omo,Vmo,ap,fne,Xmo,zmo,JB,Qmo,Wmo,Hmo,np,mne,Umo,Jmo,YB,Ymo,Kmo,Zmo,sp,gne,ego,ogo,KB,rgo,tgo,ago,lp,hne,ngo,sgo,ZB,lgo,igo,dgo,ip,pne,cgo,fgo,eI,mgo,ggo,hgo,dp,une,pgo,ugo,oI,_go,bgo,vgo,cp,_ne,Fgo,Tgo,rI,Mgo,Ego,Cgo,fp,bne,wgo,Ago,tI,ygo,Lgo,xgo,mp,vne,$go,kgo,aI,Sgo,Rgo,Pgo,gp,Fne,Bgo,Igo,nI,qgo,Ngo,jgo,hp,Tne,Dgo,Ggo,sI,Ogo,Vgo,Xgo,pp,Mne,zgo,Qgo,lI,Wgo,Hgo,Ugo,up,Ene,Jgo,Ygo,iI,Kgo,Zgo,eho,_p,Cne,oho,rho,dI,tho,aho,nho,bp,wne,sho,lho,cI,iho,dho,cho,vp,Ane,fho,mho,fI,gho,hho,pho,Fp,yne,uho,_ho,mI,bho,vho,Fho,Tp,Lne,Tho,Mho,gI,Eho,Cho,who,Mp,xne,Aho,yho,hI,Lho,xho,$ho,Ss,$ne,kho,Sho,pI,Rho,Pho,uI,Bho,Iho,qho,Ep,kne,Nho,jho,_I,Dho,Gho,Oho,Cp,Sne,Vho,Xho,bI,zho,Qho,Who,wp,Rne,Hho,Uho,vI,Jho,Yho,Kho,Ap,Pne,Zho,epo,FI,opo,rpo,tpo,yp,Bne,apo,npo,TI,spo,lpo,ipo,Lp,Ine,dpo,cpo,MI,fpo,mpo,gpo,xp,qne,hpo,ppo,EI,upo,_po,bpo,$p,Nne,vpo,Fpo,CI,Tpo,Mpo,Epo,kp,jne,Cpo,wpo,wI,Apo,ypo,Lpo,Sp,Dne,xpo,$po,AI,kpo,Spo,Rpo,Rp,Gne,Ppo,Bpo,yI,Ipo,qpo,Npo,Pp,One,jpo,Dpo,LI,Gpo,Opo,Vpo,Bp,Vne,Xpo,zpo,xI,Qpo,Wpo,Hpo,Ip,Xne,Upo,Jpo,$I,Ypo,Kpo,Zpo,qp,zne,euo,ouo,kI,ruo,tuo,auo,Np,Qne,nuo,suo,SI,luo,iuo,duo,jp,Wne,cuo,fuo,RI,muo,guo,huo,Dp,Hne,puo,uuo,PI,_uo,buo,vuo,Gp,Une,Fuo,Tuo,BI,Muo,Euo,Cuo,Op,Jne,wuo,Auo,II,yuo,Luo,xuo,Vp,Yne,$uo,kuo,qI,Suo,Ruo,Puo,Xp,Kne,Buo,Iuo,NI,quo,Nuo,juo,zp,Zne,Duo,Guo,jI,Ouo,Vuo,Xuo,Qp,ese,zuo,Quo,DI,Wuo,Huo,Uuo,Wp,ose,Juo,Yuo,GI,Kuo,Zuo,e_o,Hp,rse,o_o,r_o,OI,t_o,a_o,n_o,Up,tse,s_o,l_o,VI,i_o,d_o,c_o,Jp,ase,f_o,m_o,XI,g_o,h_o,p_o,Yp,nse,u_o,__o,zI,b_o,v_o,F_o,Kp,sse,T_o,M_o,QI,E_o,C_o,w_o,Zp,lse,A_o,y_o,WI,L_o,x_o,$_o,eu,ise,k_o,S_o,HI,R_o,P_o,B_o,ou,dse,I_o,q_o,UI,N_o,j_o,D_o,ru,cse,G_o,O_o,JI,V_o,X_o,z_o,tu,fse,Q_o,W_o,YI,H_o,U_o,J_o,au,mse,Y_o,K_o,KI,Z_o,e2o,o2o,nu,gse,r2o,t2o,ZI,a2o,n2o,s2o,su,hse,l2o,i2o,eq,d2o,c2o,f2o,lu,pse,m2o,g2o,oq,h2o,p2o,u2o,iu,use,_2o,b2o,rq,v2o,F2o,T2o,du,_se,M2o,E2o,tq,C2o,w2o,A2o,cu,bse,y2o,L2o,aq,x2o,$2o,k2o,fu,vse,S2o,R2o,nq,P2o,B2o,I2o,mu,Fse,q2o,N2o,sq,j2o,D2o,G2o,gu,Tse,O2o,V2o,lq,X2o,z2o,Q2o,hu,Mse,W2o,H2o,iq,U2o,J2o,Y2o,pu,Ese,K2o,Z2o,dq,e1o,o1o,r1o,uu,Cse,t1o,a1o,cq,n1o,s1o,l1o,_u,wse,i1o,d1o,fq,c1o,f1o,m1o,bu,Ase,g1o,h1o,mq,p1o,u1o,_1o,vu,yse,b1o,v1o,gq,F1o,T1o,M1o,Fu,Lse,E1o,C1o,hq,w1o,A1o,y1o,Tu,xse,L1o,x1o,pq,$1o,k1o,S1o,Mu,$se,R1o,P1o,uq,B1o,I1o,q1o,Eu,kse,N1o,j1o,_q,D1o,G1o,O1o,Cu,Sse,V1o,X1o,bq,z1o,Q1o,W1o,wu,Rse,H1o,U1o,vq,J1o,Y1o,K1o,Au,Pse,Z1o,e7o,Fq,o7o,r7o,t7o,yu,Bse,a7o,n7o,Tq,s7o,l7o,i7o,Lu,Ise,d7o,c7o,Mq,f7o,m7o,g7o,xu,qse,h7o,p7o,Eq,u7o,_7o,b7o,$u,Nse,v7o,F7o,Cq,T7o,M7o,E7o,ku,jse,C7o,w7o,wq,A7o,y7o,L7o,Su,Dse,x7o,$7o,Aq,k7o,S7o,R7o,Ru,Gse,P7o,B7o,yq,I7o,q7o,N7o,Pu,j7o,Ose,D7o,G7o,Vse,O7o,V7o,Bu,JBe,Ci,Iu,Xse,A6,X7o,zse,z7o,YBe,xo,y6,Q7o,wi,W7o,Lq,H7o,U7o,xq,J7o,Y7o,K7o,L6,Z7o,Qse,ebo,obo,rbo,rt,x6,tbo,Wse,abo,nbo,Ai,sbo,Hse,lbo,ibo,$q,dbo,cbo,fbo,qu,mbo,Ue,$6,gbo,Use,hbo,pbo,ya,ubo,Jse,_bo,bbo,Yse,vbo,Fbo,Kse,Tbo,Mbo,Ebo,G,Nu,Zse,Cbo,wbo,kq,Abo,ybo,Lbo,ju,ele,xbo,$bo,Sq,kbo,Sbo,Rbo,Du,ole,Pbo,Bbo,Rq,Ibo,qbo,Nbo,Gu,rle,jbo,Dbo,Pq,Gbo,Obo,Vbo,Ou,tle,Xbo,zbo,Bq,Qbo,Wbo,Hbo,Vu,ale,Ubo,Jbo,Iq,Ybo,Kbo,Zbo,Xu,nle,e4o,o4o,qq,r4o,t4o,a4o,zu,sle,n4o,s4o,Nq,l4o,i4o,d4o,Qu,lle,c4o,f4o,jq,m4o,g4o,h4o,Wu,ile,p4o,u4o,Dq,_4o,b4o,v4o,Hu,dle,F4o,T4o,Gq,M4o,E4o,C4o,Uu,cle,w4o,A4o,Oq,y4o,L4o,x4o,Ju,fle,$4o,k4o,Vq,S4o,R4o,P4o,Yu,mle,B4o,I4o,Xq,q4o,N4o,j4o,Ku,gle,D4o,G4o,zq,O4o,V4o,X4o,Zu,hle,z4o,Q4o,Qq,W4o,H4o,U4o,e_,ple,J4o,Y4o,Wq,K4o,Z4o,evo,o_,ule,ovo,rvo,Hq,tvo,avo,nvo,r_,_le,svo,lvo,Uq,ivo,dvo,cvo,t_,ble,fvo,mvo,Jq,gvo,hvo,pvo,a_,vle,uvo,_vo,Yq,bvo,vvo,Fvo,n_,Fle,Tvo,Mvo,Kq,Evo,Cvo,wvo,s_,Tle,Avo,yvo,Zq,Lvo,xvo,$vo,l_,Mle,kvo,Svo,eN,Rvo,Pvo,Bvo,i_,Ele,Ivo,qvo,oN,Nvo,jvo,Dvo,d_,Cle,Gvo,Ovo,rN,Vvo,Xvo,zvo,c_,wle,Qvo,Wvo,tN,Hvo,Uvo,Jvo,f_,Ale,Yvo,Kvo,aN,Zvo,eFo,oFo,m_,yle,rFo,tFo,nN,aFo,nFo,sFo,g_,Lle,lFo,iFo,sN,dFo,cFo,fFo,h_,xle,mFo,gFo,lN,hFo,pFo,uFo,p_,$le,_Fo,bFo,iN,vFo,FFo,TFo,u_,kle,MFo,EFo,dN,CFo,wFo,AFo,__,Sle,yFo,LFo,cN,xFo,$Fo,kFo,b_,Rle,SFo,RFo,fN,PFo,BFo,IFo,v_,Ple,qFo,NFo,mN,jFo,DFo,GFo,F_,Ble,OFo,VFo,gN,XFo,zFo,QFo,T_,Ile,WFo,HFo,hN,UFo,JFo,YFo,M_,qle,KFo,ZFo,pN,eTo,oTo,rTo,E_,Nle,tTo,aTo,uN,nTo,sTo,lTo,C_,jle,iTo,dTo,_N,cTo,fTo,mTo,w_,gTo,Dle,hTo,pTo,Gle,uTo,_To,A_,KBe,yi,y_,Ole,k6,bTo,Vle,vTo,ZBe,$o,S6,FTo,Li,TTo,bN,MTo,ETo,vN,CTo,wTo,ATo,R6,yTo,Xle,LTo,xTo,$To,tt,P6,kTo,zle,STo,RTo,xi,PTo,Qle,BTo,ITo,FN,qTo,NTo,jTo,L_,DTo,Je,B6,GTo,Wle,OTo,VTo,La,XTo,Hle,zTo,QTo,Ule,WTo,HTo,Jle,UTo,JTo,YTo,z,x_,Yle,KTo,ZTo,TN,eMo,oMo,rMo,$_,Kle,tMo,aMo,MN,nMo,sMo,lMo,k_,Zle,iMo,dMo,EN,cMo,fMo,mMo,S_,eie,gMo,hMo,CN,pMo,uMo,_Mo,R_,oie,bMo,vMo,wN,FMo,TMo,MMo,P_,rie,EMo,CMo,AN,wMo,AMo,yMo,B_,tie,LMo,xMo,yN,$Mo,kMo,SMo,I_,aie,RMo,PMo,LN,BMo,IMo,qMo,q_,nie,NMo,jMo,xN,DMo,GMo,OMo,N_,sie,VMo,XMo,$N,zMo,QMo,WMo,j_,lie,HMo,UMo,kN,JMo,YMo,KMo,D_,iie,ZMo,eEo,SN,oEo,rEo,tEo,G_,die,aEo,nEo,RN,sEo,lEo,iEo,O_,cie,dEo,cEo,PN,fEo,mEo,gEo,V_,fie,hEo,pEo,BN,uEo,_Eo,bEo,X_,mie,vEo,FEo,IN,TEo,MEo,EEo,z_,gie,CEo,wEo,qN,AEo,yEo,LEo,Q_,hie,xEo,$Eo,NN,kEo,SEo,REo,W_,pie,PEo,BEo,jN,IEo,qEo,NEo,H_,uie,jEo,DEo,DN,GEo,OEo,VEo,U_,_ie,XEo,zEo,GN,QEo,WEo,HEo,J_,bie,UEo,JEo,ON,YEo,KEo,ZEo,Y_,vie,e5o,o5o,VN,r5o,t5o,a5o,K_,Fie,n5o,s5o,XN,l5o,i5o,d5o,Z_,Tie,c5o,f5o,zN,m5o,g5o,h5o,e2,Mie,p5o,u5o,QN,_5o,b5o,v5o,o2,Eie,F5o,T5o,WN,M5o,E5o,C5o,r2,Cie,w5o,A5o,HN,y5o,L5o,x5o,t2,wie,$5o,k5o,UN,S5o,R5o,P5o,a2,Aie,B5o,I5o,JN,q5o,N5o,j5o,n2,yie,D5o,G5o,YN,O5o,V5o,X5o,s2,Lie,z5o,Q5o,KN,W5o,H5o,U5o,l2,xie,J5o,Y5o,ZN,K5o,Z5o,eCo,i2,$ie,oCo,rCo,ej,tCo,aCo,nCo,d2,kie,sCo,lCo,oj,iCo,dCo,cCo,c2,Sie,fCo,mCo,rj,gCo,hCo,pCo,f2,uCo,Rie,_Co,bCo,Pie,vCo,FCo,m2,eIe,$i,g2,Bie,I6,TCo,Iie,MCo,oIe,ko,q6,ECo,ki,CCo,tj,wCo,ACo,aj,yCo,LCo,xCo,N6,$Co,qie,kCo,SCo,RCo,at,j6,PCo,Nie,BCo,ICo,Si,qCo,jie,NCo,jCo,nj,DCo,GCo,OCo,h2,VCo,Ye,D6,XCo,Die,zCo,QCo,xa,WCo,Gie,HCo,UCo,Oie,JCo,YCo,Vie,KCo,ZCo,e3o,Q,p2,Xie,o3o,r3o,sj,t3o,a3o,n3o,u2,zie,s3o,l3o,lj,i3o,d3o,c3o,_2,Qie,f3o,m3o,ij,g3o,h3o,p3o,b2,Wie,u3o,_3o,dj,b3o,v3o,F3o,v2,Hie,T3o,M3o,cj,E3o,C3o,w3o,F2,Uie,A3o,y3o,fj,L3o,x3o,$3o,T2,Jie,k3o,S3o,mj,R3o,P3o,B3o,M2,Yie,I3o,q3o,gj,N3o,j3o,D3o,E2,Kie,G3o,O3o,hj,V3o,X3o,z3o,C2,Zie,Q3o,W3o,pj,H3o,U3o,J3o,w2,ede,Y3o,K3o,uj,Z3o,ewo,owo,A2,ode,rwo,two,_j,awo,nwo,swo,y2,rde,lwo,iwo,bj,dwo,cwo,fwo,L2,tde,mwo,gwo,vj,hwo,pwo,uwo,x2,ade,_wo,bwo,Fj,vwo,Fwo,Two,$2,nde,Mwo,Ewo,Tj,Cwo,wwo,Awo,k2,sde,ywo,Lwo,Mj,xwo,$wo,kwo,S2,lde,Swo,Rwo,Ej,Pwo,Bwo,Iwo,R2,ide,qwo,Nwo,Cj,jwo,Dwo,Gwo,P2,dde,Owo,Vwo,wj,Xwo,zwo,Qwo,B2,cde,Wwo,Hwo,Aj,Uwo,Jwo,Ywo,I2,fde,Kwo,Zwo,yj,eAo,oAo,rAo,q2,mde,tAo,aAo,Lj,nAo,sAo,lAo,N2,gde,iAo,dAo,xj,cAo,fAo,mAo,j2,hde,gAo,hAo,$j,pAo,uAo,_Ao,D2,pde,bAo,vAo,kj,FAo,TAo,MAo,G2,ude,EAo,CAo,Sj,wAo,AAo,yAo,O2,_de,LAo,xAo,Rj,$Ao,kAo,SAo,V2,bde,RAo,PAo,Pj,BAo,IAo,qAo,X2,vde,NAo,jAo,Bj,DAo,GAo,OAo,z2,Fde,VAo,XAo,Tde,zAo,QAo,WAo,Q2,Mde,HAo,UAo,Ij,JAo,YAo,KAo,W2,Ede,ZAo,e0o,qj,o0o,r0o,t0o,H2,Cde,a0o,n0o,Nj,s0o,l0o,i0o,U2,wde,d0o,c0o,jj,f0o,m0o,g0o,J2,h0o,Ade,p0o,u0o,yde,_0o,b0o,Y2,rIe,Ri,K2,Lde,G6,v0o,xde,F0o,tIe,So,O6,T0o,Pi,M0o,Dj,E0o,C0o,Gj,w0o,A0o,y0o,V6,L0o,$de,x0o,$0o,k0o,nt,X6,S0o,kde,R0o,P0o,Bi,B0o,Sde,I0o,q0o,Oj,N0o,j0o,D0o,Z2,G0o,Ke,z6,O0o,Rde,V0o,X0o,$a,z0o,Pde,Q0o,W0o,Bde,H0o,U0o,Ide,J0o,Y0o,K0o,pe,e1,qde,Z0o,e6o,Vj,o6o,r6o,t6o,o1,Nde,a6o,n6o,Xj,s6o,l6o,i6o,r1,jde,d6o,c6o,zj,f6o,m6o,g6o,t1,Dde,h6o,p6o,Qj,u6o,_6o,b6o,a1,Gde,v6o,F6o,Wj,T6o,M6o,E6o,n1,Ode,C6o,w6o,Hj,A6o,y6o,L6o,s1,Vde,x6o,$6o,Uj,k6o,S6o,R6o,l1,Xde,P6o,B6o,Jj,I6o,q6o,N6o,i1,zde,j6o,D6o,Yj,G6o,O6o,V6o,d1,Qde,X6o,z6o,Kj,Q6o,W6o,H6o,c1,Wde,U6o,J6o,Zj,Y6o,K6o,Z6o,f1,Hde,eyo,oyo,eD,ryo,tyo,ayo,m1,Ude,nyo,syo,oD,lyo,iyo,dyo,g1,Jde,cyo,fyo,rD,myo,gyo,hyo,h1,Yde,pyo,uyo,tD,_yo,byo,vyo,p1,Kde,Fyo,Tyo,aD,Myo,Eyo,Cyo,u1,wyo,Zde,Ayo,yyo,ece,Lyo,xyo,_1,aIe,Ii,b1,oce,Q6,$yo,rce,kyo,nIe,Ro,W6,Syo,qi,Ryo,nD,Pyo,Byo,sD,Iyo,qyo,Nyo,H6,jyo,tce,Dyo,Gyo,Oyo,st,U6,Vyo,ace,Xyo,zyo,Ni,Qyo,nce,Wyo,Hyo,lD,Uyo,Jyo,Yyo,v1,Kyo,Ze,J6,Zyo,sce,eLo,oLo,ka,rLo,lce,tLo,aLo,ice,nLo,sLo,dce,lLo,iLo,dLo,q,F1,cce,cLo,fLo,iD,mLo,gLo,hLo,T1,fce,pLo,uLo,dD,_Lo,bLo,vLo,M1,mce,FLo,TLo,cD,MLo,ELo,CLo,E1,gce,wLo,ALo,fD,yLo,LLo,xLo,C1,hce,$Lo,kLo,mD,SLo,RLo,PLo,w1,pce,BLo,ILo,gD,qLo,NLo,jLo,A1,uce,DLo,GLo,hD,OLo,VLo,XLo,y1,_ce,zLo,QLo,pD,WLo,HLo,ULo,L1,bce,JLo,YLo,uD,KLo,ZLo,e8o,x1,vce,o8o,r8o,_D,t8o,a8o,n8o,$1,Fce,s8o,l8o,bD,i8o,d8o,c8o,k1,Tce,f8o,m8o,vD,g8o,h8o,p8o,S1,Mce,u8o,_8o,FD,b8o,v8o,F8o,R1,Ece,T8o,M8o,TD,E8o,C8o,w8o,P1,Cce,A8o,y8o,MD,L8o,x8o,$8o,B1,wce,k8o,S8o,ED,R8o,P8o,B8o,I1,Ace,I8o,q8o,CD,N8o,j8o,D8o,q1,yce,G8o,O8o,wD,V8o,X8o,z8o,N1,Lce,Q8o,W8o,AD,H8o,U8o,J8o,j1,xce,Y8o,K8o,yD,Z8o,exo,oxo,D1,$ce,rxo,txo,LD,axo,nxo,sxo,G1,kce,lxo,ixo,xD,dxo,cxo,fxo,O1,Sce,mxo,gxo,$D,hxo,pxo,uxo,V1,Rce,_xo,bxo,kD,vxo,Fxo,Txo,X1,Pce,Mxo,Exo,SD,Cxo,wxo,Axo,z1,Bce,yxo,Lxo,RD,xxo,$xo,kxo,Q1,Ice,Sxo,Rxo,PD,Pxo,Bxo,Ixo,W1,qce,qxo,Nxo,BD,jxo,Dxo,Gxo,H1,Nce,Oxo,Vxo,ID,Xxo,zxo,Qxo,U1,jce,Wxo,Hxo,qD,Uxo,Jxo,Yxo,J1,Dce,Kxo,Zxo,ND,e9o,o9o,r9o,Y1,Gce,t9o,a9o,jD,n9o,s9o,l9o,K1,Oce,i9o,d9o,DD,c9o,f9o,m9o,Z1,Vce,g9o,h9o,GD,p9o,u9o,_9o,e7,Xce,b9o,v9o,OD,F9o,T9o,M9o,o7,zce,E9o,C9o,VD,w9o,A9o,y9o,r7,Qce,L9o,x9o,XD,$9o,k9o,S9o,t7,Wce,R9o,P9o,zD,B9o,I9o,q9o,a7,Hce,N9o,j9o,QD,D9o,G9o,O9o,n7,Uce,V9o,X9o,WD,z9o,Q9o,W9o,s7,Jce,H9o,U9o,HD,J9o,Y9o,K9o,l7,Yce,Z9o,e$o,UD,o$o,r$o,t$o,i7,Kce,a$o,n$o,JD,s$o,l$o,i$o,d7,Zce,d$o,c$o,YD,f$o,m$o,g$o,c7,efe,h$o,p$o,KD,u$o,_$o,b$o,f7,ofe,v$o,F$o,ZD,T$o,M$o,E$o,m7,C$o,rfe,w$o,A$o,tfe,y$o,L$o,g7,sIe,ji,h7,afe,Y6,x$o,nfe,$$o,lIe,Po,K6,k$o,Di,S$o,eG,R$o,P$o,oG,B$o,I$o,q$o,Z6,N$o,sfe,j$o,D$o,G$o,lt,ey,O$o,lfe,V$o,X$o,Gi,z$o,ife,Q$o,W$o,rG,H$o,U$o,J$o,p7,Y$o,eo,oy,K$o,dfe,Z$o,eko,Sa,oko,cfe,rko,tko,ffe,ako,nko,mfe,sko,lko,iko,Y,u7,gfe,dko,cko,tG,fko,mko,gko,_7,hfe,hko,pko,aG,uko,_ko,bko,b7,pfe,vko,Fko,nG,Tko,Mko,Eko,v7,ufe,Cko,wko,sG,Ako,yko,Lko,F7,_fe,xko,$ko,lG,kko,Sko,Rko,T7,bfe,Pko,Bko,iG,Iko,qko,Nko,M7,vfe,jko,Dko,dG,Gko,Oko,Vko,E7,Ffe,Xko,zko,cG,Qko,Wko,Hko,C7,Tfe,Uko,Jko,fG,Yko,Kko,Zko,w7,Mfe,eSo,oSo,mG,rSo,tSo,aSo,A7,Efe,nSo,sSo,gG,lSo,iSo,dSo,y7,Cfe,cSo,fSo,hG,mSo,gSo,hSo,L7,wfe,pSo,uSo,pG,_So,bSo,vSo,x7,Afe,FSo,TSo,uG,MSo,ESo,CSo,$7,yfe,wSo,ASo,_G,ySo,LSo,xSo,k7,Lfe,$So,kSo,bG,SSo,RSo,PSo,S7,xfe,BSo,ISo,vG,qSo,NSo,jSo,R7,$fe,DSo,GSo,FG,OSo,VSo,XSo,P7,kfe,zSo,QSo,TG,WSo,HSo,USo,B7,Sfe,JSo,YSo,MG,KSo,ZSo,eRo,I7,Rfe,oRo,rRo,EG,tRo,aRo,nRo,q7,Pfe,sRo,lRo,CG,iRo,dRo,cRo,N7,Bfe,fRo,mRo,wG,gRo,hRo,pRo,j7,Ife,uRo,_Ro,AG,bRo,vRo,FRo,D7,qfe,TRo,MRo,yG,ERo,CRo,wRo,G7,Nfe,ARo,yRo,LG,LRo,xRo,$Ro,O7,jfe,kRo,SRo,xG,RRo,PRo,BRo,V7,Dfe,IRo,qRo,$G,NRo,jRo,DRo,X7,Gfe,GRo,ORo,kG,VRo,XRo,zRo,z7,QRo,Ofe,WRo,HRo,Vfe,URo,JRo,Q7,iIe,Oi,W7,Xfe,ry,YRo,zfe,KRo,dIe,Bo,ty,ZRo,Vi,ePo,SG,oPo,rPo,RG,tPo,aPo,nPo,ay,sPo,Qfe,lPo,iPo,dPo,it,ny,cPo,Wfe,fPo,mPo,Xi,gPo,Hfe,hPo,pPo,PG,uPo,_Po,bPo,H7,vPo,oo,sy,FPo,Ufe,TPo,MPo,Ra,EPo,Jfe,CPo,wPo,Yfe,APo,yPo,Kfe,LPo,xPo,$Po,Yr,U7,Zfe,kPo,SPo,BG,RPo,PPo,BPo,J7,eme,IPo,qPo,IG,NPo,jPo,DPo,Y7,ome,GPo,OPo,qG,VPo,XPo,zPo,K7,rme,QPo,WPo,NG,HPo,UPo,JPo,Z7,tme,YPo,KPo,jG,ZPo,eBo,oBo,eb,rBo,ame,tBo,aBo,nme,nBo,sBo,ob,cIe,zi,rb,sme,ly,lBo,lme,iBo,fIe,Io,iy,dBo,Qi,cBo,DG,fBo,mBo,GG,gBo,hBo,pBo,dy,uBo,ime,_Bo,bBo,vBo,dt,cy,FBo,dme,TBo,MBo,Wi,EBo,cme,CBo,wBo,OG,ABo,yBo,LBo,tb,xBo,ro,fy,$Bo,fme,kBo,SBo,Pa,RBo,mme,PBo,BBo,gme,IBo,qBo,hme,NBo,jBo,DBo,U,ab,pme,GBo,OBo,VG,VBo,XBo,zBo,nb,ume,QBo,WBo,XG,HBo,UBo,JBo,sb,_me,YBo,KBo,zG,ZBo,eIo,oIo,lb,bme,rIo,tIo,QG,aIo,nIo,sIo,ib,vme,lIo,iIo,WG,dIo,cIo,fIo,db,Fme,mIo,gIo,HG,hIo,pIo,uIo,cb,Tme,_Io,bIo,UG,vIo,FIo,TIo,fb,Mme,MIo,EIo,JG,CIo,wIo,AIo,mb,Eme,yIo,LIo,YG,xIo,$Io,kIo,gb,Cme,SIo,RIo,KG,PIo,BIo,IIo,hb,wme,qIo,NIo,ZG,jIo,DIo,GIo,pb,Ame,OIo,VIo,eO,XIo,zIo,QIo,ub,yme,WIo,HIo,oO,UIo,JIo,YIo,_b,Lme,KIo,ZIo,rO,eqo,oqo,rqo,bb,xme,tqo,aqo,tO,nqo,sqo,lqo,vb,$me,iqo,dqo,aO,cqo,fqo,mqo,Fb,kme,gqo,hqo,nO,pqo,uqo,_qo,Tb,Sme,bqo,vqo,sO,Fqo,Tqo,Mqo,Mb,Rme,Eqo,Cqo,lO,wqo,Aqo,yqo,Eb,Pme,Lqo,xqo,iO,$qo,kqo,Sqo,Cb,Bme,Rqo,Pqo,dO,Bqo,Iqo,qqo,wb,Ime,Nqo,jqo,cO,Dqo,Gqo,Oqo,Ab,qme,Vqo,Xqo,fO,zqo,Qqo,Wqo,yb,Nme,Hqo,Uqo,mO,Jqo,Yqo,Kqo,Lb,jme,Zqo,eNo,gO,oNo,rNo,tNo,xb,Dme,aNo,nNo,hO,sNo,lNo,iNo,$b,Gme,dNo,cNo,pO,fNo,mNo,gNo,kb,Ome,hNo,pNo,uO,uNo,_No,bNo,Sb,Vme,vNo,FNo,_O,TNo,MNo,ENo,Rb,Xme,CNo,wNo,bO,ANo,yNo,LNo,Pb,zme,xNo,$No,vO,kNo,SNo,RNo,Bb,Qme,PNo,BNo,FO,INo,qNo,NNo,Ib,Wme,jNo,DNo,TO,GNo,ONo,VNo,qb,XNo,Hme,zNo,QNo,Ume,WNo,HNo,Nb,mIe,Hi,jb,Jme,my,UNo,Yme,JNo,gIe,qo,gy,YNo,Ui,KNo,MO,ZNo,ejo,EO,ojo,rjo,tjo,hy,ajo,Kme,njo,sjo,ljo,ct,py,ijo,Zme,djo,cjo,Ji,fjo,ege,mjo,gjo,CO,hjo,pjo,ujo,Db,_jo,to,uy,bjo,oge,vjo,Fjo,Ba,Tjo,rge,Mjo,Ejo,tge,Cjo,wjo,age,Ajo,yjo,Ljo,V,Gb,nge,xjo,$jo,wO,kjo,Sjo,Rjo,Ob,sge,Pjo,Bjo,AO,Ijo,qjo,Njo,Vb,lge,jjo,Djo,yO,Gjo,Ojo,Vjo,Xb,ige,Xjo,zjo,LO,Qjo,Wjo,Hjo,zb,dge,Ujo,Jjo,xO,Yjo,Kjo,Zjo,Qb,cge,eDo,oDo,$O,rDo,tDo,aDo,Wb,fge,nDo,sDo,kO,lDo,iDo,dDo,Hb,mge,cDo,fDo,SO,mDo,gDo,hDo,Ub,gge,pDo,uDo,RO,_Do,bDo,vDo,Jb,hge,FDo,TDo,PO,MDo,EDo,CDo,Yb,pge,wDo,ADo,BO,yDo,LDo,xDo,Kb,uge,$Do,kDo,IO,SDo,RDo,PDo,Zb,_ge,BDo,IDo,qO,qDo,NDo,jDo,e4,bge,DDo,GDo,NO,ODo,VDo,XDo,o4,vge,zDo,QDo,jO,WDo,HDo,UDo,r4,Fge,JDo,YDo,DO,KDo,ZDo,eGo,t4,Tge,oGo,rGo,GO,tGo,aGo,nGo,a4,Mge,sGo,lGo,OO,iGo,dGo,cGo,n4,Ege,fGo,mGo,VO,gGo,hGo,pGo,s4,Cge,uGo,_Go,XO,bGo,vGo,FGo,l4,wge,TGo,MGo,zO,EGo,CGo,wGo,i4,Age,AGo,yGo,QO,LGo,xGo,$Go,d4,yge,kGo,SGo,WO,RGo,PGo,BGo,c4,Lge,IGo,qGo,HO,NGo,jGo,DGo,f4,xge,GGo,OGo,UO,VGo,XGo,zGo,m4,$ge,QGo,WGo,JO,HGo,UGo,JGo,g4,kge,YGo,KGo,YO,ZGo,eOo,oOo,h4,Sge,rOo,tOo,KO,aOo,nOo,sOo,p4,Rge,lOo,iOo,ZO,dOo,cOo,fOo,u4,Pge,mOo,gOo,eV,hOo,pOo,uOo,_4,Bge,_Oo,bOo,oV,vOo,FOo,TOo,b4,Ige,MOo,EOo,rV,COo,wOo,AOo,v4,qge,yOo,LOo,tV,xOo,$Oo,kOo,F4,Nge,SOo,ROo,aV,POo,BOo,IOo,T4,jge,qOo,NOo,nV,jOo,DOo,GOo,M4,Dge,OOo,VOo,sV,XOo,zOo,QOo,E4,Gge,WOo,HOo,lV,UOo,JOo,YOo,C4,Oge,KOo,ZOo,iV,eVo,oVo,rVo,w4,Vge,tVo,aVo,dV,nVo,sVo,lVo,A4,iVo,Xge,dVo,cVo,zge,fVo,mVo,y4,hIe,Yi,L4,Qge,_y,gVo,Wge,hVo,pIe,No,by,pVo,Ki,uVo,cV,_Vo,bVo,fV,vVo,FVo,TVo,vy,MVo,Hge,EVo,CVo,wVo,ft,Fy,AVo,Uge,yVo,LVo,Zi,xVo,Jge,$Vo,kVo,mV,SVo,RVo,PVo,x4,BVo,ao,Ty,IVo,Yge,qVo,NVo,Ia,jVo,Kge,DVo,GVo,Zge,OVo,VVo,ehe,XVo,zVo,QVo,ohe,$4,rhe,WVo,HVo,gV,UVo,JVo,YVo,k4,KVo,the,ZVo,eXo,ahe,oXo,rXo,S4,uIe,ed,R4,nhe,My,tXo,she,aXo,_Ie,jo,Ey,nXo,od,sXo,hV,lXo,iXo,pV,dXo,cXo,fXo,Cy,mXo,lhe,gXo,hXo,pXo,mt,wy,uXo,ihe,_Xo,bXo,rd,vXo,dhe,FXo,TXo,uV,MXo,EXo,CXo,P4,wXo,no,Ay,AXo,che,yXo,LXo,qa,xXo,fhe,$Xo,kXo,mhe,SXo,RXo,ghe,PXo,BXo,IXo,Fe,B4,hhe,qXo,NXo,_V,jXo,DXo,GXo,I4,phe,OXo,VXo,bV,XXo,zXo,QXo,q4,uhe,WXo,HXo,vV,UXo,JXo,YXo,Rs,_he,KXo,ZXo,FV,ezo,ozo,TV,rzo,tzo,azo,N4,bhe,nzo,szo,MV,lzo,izo,dzo,gt,vhe,czo,fzo,EV,mzo,gzo,CV,hzo,pzo,wV,uzo,_zo,bzo,j4,Fhe,vzo,Fzo,AV,Tzo,Mzo,Ezo,D4,The,Czo,wzo,yV,Azo,yzo,Lzo,G4,Mhe,xzo,$zo,LV,kzo,Szo,Rzo,O4,Ehe,Pzo,Bzo,xV,Izo,qzo,Nzo,V4,Che,jzo,Dzo,$V,Gzo,Ozo,Vzo,X4,whe,Xzo,zzo,kV,Qzo,Wzo,Hzo,z4,Ahe,Uzo,Jzo,SV,Yzo,Kzo,Zzo,Q4,eQo,yhe,oQo,rQo,Lhe,tQo,aQo,W4,bIe,td,H4,xhe,yy,nQo,$he,sQo,vIe,Do,Ly,lQo,ad,iQo,RV,dQo,cQo,PV,fQo,mQo,gQo,xy,hQo,khe,pQo,uQo,_Qo,ht,$y,bQo,She,vQo,FQo,nd,TQo,Rhe,MQo,EQo,BV,CQo,wQo,AQo,U4,yQo,so,ky,LQo,Phe,xQo,$Qo,Na,kQo,Bhe,SQo,RQo,Ihe,PQo,BQo,qhe,IQo,qQo,NQo,Nhe,J4,jhe,jQo,DQo,IV,GQo,OQo,VQo,Y4,XQo,Dhe,zQo,QQo,Ghe,WQo,HQo,K4,FIe,sd,Z4,Ohe,Sy,UQo,Vhe,JQo,TIe,Go,Ry,YQo,ld,KQo,qV,ZQo,eWo,NV,oWo,rWo,tWo,Py,aWo,Xhe,nWo,sWo,lWo,pt,By,iWo,zhe,dWo,cWo,id,fWo,Qhe,mWo,gWo,jV,hWo,pWo,uWo,ev,_Wo,lo,Iy,bWo,Whe,vWo,FWo,ja,TWo,Hhe,MWo,EWo,Uhe,CWo,wWo,Jhe,AWo,yWo,LWo,Ne,ov,Yhe,xWo,$Wo,DV,kWo,SWo,RWo,rv,Khe,PWo,BWo,GV,IWo,qWo,NWo,tv,Zhe,jWo,DWo,OV,GWo,OWo,VWo,av,epe,XWo,zWo,VV,QWo,WWo,HWo,nv,ope,UWo,JWo,XV,YWo,KWo,ZWo,sv,rpe,eHo,oHo,zV,rHo,tHo,aHo,lv,tpe,nHo,sHo,QV,lHo,iHo,dHo,iv,ape,cHo,fHo,WV,mHo,gHo,hHo,dv,pHo,npe,uHo,_Ho,spe,bHo,vHo,cv,MIe,dd,fv,lpe,qy,FHo,ipe,THo,EIe,Oo,Ny,MHo,cd,EHo,HV,CHo,wHo,UV,AHo,yHo,LHo,jy,xHo,dpe,$Ho,kHo,SHo,ut,Dy,RHo,cpe,PHo,BHo,fd,IHo,fpe,qHo,NHo,JV,jHo,DHo,GHo,mv,OHo,io,Gy,VHo,mpe,XHo,zHo,Da,QHo,gpe,WHo,HHo,hpe,UHo,JHo,ppe,YHo,KHo,ZHo,Ga,gv,upe,eUo,oUo,YV,rUo,tUo,aUo,hv,_pe,nUo,sUo,KV,lUo,iUo,dUo,pv,bpe,cUo,fUo,ZV,mUo,gUo,hUo,uv,vpe,pUo,uUo,eX,_Uo,bUo,vUo,_v,FUo,Fpe,TUo,MUo,Tpe,EUo,CUo,bv,CIe,md,vv,Mpe,Oy,wUo,Epe,AUo,wIe,Vo,Vy,yUo,gd,LUo,oX,xUo,$Uo,rX,kUo,SUo,RUo,Xy,PUo,Cpe,BUo,IUo,qUo,_t,zy,NUo,wpe,jUo,DUo,hd,GUo,Ape,OUo,VUo,tX,XUo,zUo,QUo,Fv,WUo,co,Qy,HUo,ype,UUo,JUo,Oa,YUo,Lpe,KUo,ZUo,xpe,eJo,oJo,$pe,rJo,tJo,aJo,je,Tv,kpe,nJo,sJo,aX,lJo,iJo,dJo,Mv,Spe,cJo,fJo,nX,mJo,gJo,hJo,Ev,Rpe,pJo,uJo,sX,_Jo,bJo,vJo,Cv,Ppe,FJo,TJo,lX,MJo,EJo,CJo,wv,Bpe,wJo,AJo,iX,yJo,LJo,xJo,Av,Ipe,$Jo,kJo,dX,SJo,RJo,PJo,yv,qpe,BJo,IJo,cX,qJo,NJo,jJo,Lv,Npe,DJo,GJo,fX,OJo,VJo,XJo,xv,zJo,jpe,QJo,WJo,Dpe,HJo,UJo,$v,AIe,pd,kv,Gpe,Wy,JJo,Ope,YJo,yIe,Xo,Hy,KJo,ud,ZJo,mX,eYo,oYo,gX,rYo,tYo,aYo,Uy,nYo,Vpe,sYo,lYo,iYo,bt,Jy,dYo,Xpe,cYo,fYo,_d,mYo,zpe,gYo,hYo,hX,pYo,uYo,_Yo,Sv,bYo,fo,Yy,vYo,Qpe,FYo,TYo,Va,MYo,Wpe,EYo,CYo,Hpe,wYo,AYo,Upe,yYo,LYo,xYo,Ky,Rv,Jpe,$Yo,kYo,pX,SYo,RYo,PYo,Pv,Ype,BYo,IYo,uX,qYo,NYo,jYo,Bv,DYo,Kpe,GYo,OYo,Zpe,VYo,XYo,Iv,LIe,bd,qv,eue,Zy,zYo,oue,QYo,xIe,zo,eL,WYo,vd,HYo,_X,UYo,JYo,bX,YYo,KYo,ZYo,oL,eKo,rue,oKo,rKo,tKo,vt,rL,aKo,tue,nKo,sKo,Fd,lKo,aue,iKo,dKo,vX,cKo,fKo,mKo,Nv,gKo,mo,tL,hKo,nue,pKo,uKo,Xa,_Ko,sue,bKo,vKo,lue,FKo,TKo,iue,MKo,EKo,CKo,za,jv,due,wKo,AKo,FX,yKo,LKo,xKo,Dv,cue,$Ko,kKo,TX,SKo,RKo,PKo,Gv,fue,BKo,IKo,MX,qKo,NKo,jKo,Ov,mue,DKo,GKo,EX,OKo,VKo,XKo,Vv,zKo,gue,QKo,WKo,hue,HKo,UKo,Xv,$Ie,Td,zv,pue,aL,JKo,uue,YKo,kIe,Qo,nL,KKo,Md,ZKo,CX,eZo,oZo,wX,rZo,tZo,aZo,sL,nZo,_ue,sZo,lZo,iZo,Ft,lL,dZo,bue,cZo,fZo,Ed,mZo,vue,gZo,hZo,AX,pZo,uZo,_Zo,Qv,bZo,go,iL,vZo,Fue,FZo,TZo,Qa,MZo,Tue,EZo,CZo,Mue,wZo,AZo,Eue,yZo,LZo,xZo,Cd,Wv,Cue,$Zo,kZo,yX,SZo,RZo,PZo,Hv,wue,BZo,IZo,LX,qZo,NZo,jZo,Uv,Aue,DZo,GZo,xX,OZo,VZo,XZo,Jv,zZo,yue,QZo,WZo,Lue,HZo,UZo,Yv,SIe,wd,Kv,xue,dL,JZo,$ue,YZo,RIe,Wo,cL,KZo,Ad,ZZo,$X,eer,oer,kX,rer,ter,aer,fL,ner,kue,ser,ler,ier,Tt,mL,der,Sue,cer,fer,yd,mer,Rue,ger,her,SX,per,uer,_er,Zv,ber,ho,gL,ver,Pue,Fer,Ter,Wa,Mer,Bue,Eer,Cer,Iue,wer,Aer,que,yer,Ler,xer,hL,eF,Nue,$er,ker,RX,Ser,Rer,Per,oF,jue,Ber,Ier,PX,qer,Ner,jer,rF,Der,Due,Ger,Oer,Gue,Ver,Xer,tF,PIe,Ld,aF,Oue,pL,zer,Vue,Qer,BIe,Ho,uL,Wer,xd,Her,BX,Uer,Jer,IX,Yer,Ker,Zer,_L,eor,Xue,oor,ror,tor,Mt,bL,aor,zue,nor,sor,$d,lor,Que,ior,dor,qX,cor,mor,gor,nF,hor,po,vL,por,Wue,uor,_or,Ha,bor,Hue,vor,For,Uue,Tor,Mor,Jue,Eor,Cor,wor,Yue,sF,Kue,Aor,yor,NX,Lor,xor,$or,lF,kor,Zue,Sor,Ror,e_e,Por,Bor,iF,IIe,kd,dF,o_e,FL,Ior,r_e,qor,qIe,Uo,TL,Nor,Sd,jor,jX,Dor,Gor,DX,Oor,Vor,Xor,ML,zor,t_e,Qor,Wor,Hor,Et,EL,Uor,a_e,Jor,Yor,Rd,Kor,n_e,Zor,err,GX,orr,rrr,trr,cF,arr,uo,CL,nrr,s_e,srr,lrr,Ua,irr,l_e,drr,crr,i_e,frr,mrr,d_e,grr,hrr,prr,Ja,fF,c_e,urr,_rr,OX,brr,vrr,Frr,mF,f_e,Trr,Mrr,VX,Err,Crr,wrr,gF,m_e,Arr,yrr,XX,Lrr,xrr,$rr,hF,g_e,krr,Srr,zX,Rrr,Prr,Brr,pF,Irr,h_e,qrr,Nrr,p_e,jrr,Drr,uF,NIe,Pd,_F,u_e,wL,Grr,__e,Orr,jIe,Jo,AL,Vrr,Bd,Xrr,QX,zrr,Qrr,WX,Wrr,Hrr,Urr,yL,Jrr,b_e,Yrr,Krr,Zrr,Ct,LL,etr,v_e,otr,rtr,Id,ttr,F_e,atr,ntr,HX,str,ltr,itr,bF,dtr,_o,xL,ctr,T_e,ftr,mtr,Ya,gtr,M_e,htr,ptr,E_e,utr,_tr,C_e,btr,vtr,Ftr,w_e,vF,A_e,Ttr,Mtr,UX,Etr,Ctr,wtr,FF,Atr,y_e,ytr,Ltr,L_e,xtr,$tr,TF,DIe,qd,MF,x_e,$L,ktr,$_e,Str,GIe,Yo,kL,Rtr,Nd,Ptr,JX,Btr,Itr,YX,qtr,Ntr,jtr,SL,Dtr,k_e,Gtr,Otr,Vtr,wt,RL,Xtr,S_e,ztr,Qtr,jd,Wtr,R_e,Htr,Utr,KX,Jtr,Ytr,Ktr,EF,Ztr,wr,PL,ear,P_e,oar,rar,Ka,tar,B_e,aar,nar,I_e,sar,lar,q_e,iar,dar,car,N,CF,N_e,far,mar,ZX,gar,har,par,wF,j_e,uar,_ar,ez,bar,Far,Tar,AF,D_e,Mar,Ear,oz,Car,war,Aar,yF,G_e,yar,Lar,rz,xar,$ar,kar,LF,O_e,Sar,Rar,tz,Par,Bar,Iar,xF,V_e,qar,Nar,az,jar,Dar,Gar,$F,X_e,Oar,Var,nz,Xar,zar,Qar,kF,z_e,War,Har,sz,Uar,Jar,Yar,SF,Q_e,Kar,Zar,lz,enr,onr,rnr,RF,W_e,tnr,anr,iz,nnr,snr,lnr,PF,H_e,inr,dnr,dz,cnr,fnr,mnr,BF,U_e,gnr,hnr,cz,pnr,unr,_nr,IF,J_e,bnr,vnr,fz,Fnr,Tnr,Mnr,qF,Y_e,Enr,Cnr,mz,wnr,Anr,ynr,NF,K_e,Lnr,xnr,gz,$nr,knr,Snr,jF,Z_e,Rnr,Pnr,hz,Bnr,Inr,qnr,DF,e2e,Nnr,jnr,pz,Dnr,Gnr,Onr,Ps,o2e,Vnr,Xnr,uz,znr,Qnr,_z,Wnr,Hnr,Unr,GF,r2e,Jnr,Ynr,bz,Knr,Znr,esr,OF,t2e,osr,rsr,vz,tsr,asr,nsr,VF,a2e,ssr,lsr,Fz,isr,dsr,csr,XF,n2e,fsr,msr,Tz,gsr,hsr,psr,zF,s2e,usr,_sr,Mz,bsr,vsr,Fsr,QF,l2e,Tsr,Msr,Ez,Esr,Csr,wsr,WF,i2e,Asr,ysr,Cz,Lsr,xsr,$sr,HF,d2e,ksr,Ssr,wz,Rsr,Psr,Bsr,UF,c2e,Isr,qsr,Az,Nsr,jsr,Dsr,JF,f2e,Gsr,Osr,yz,Vsr,Xsr,zsr,YF,m2e,Qsr,Wsr,Lz,Hsr,Usr,Jsr,KF,g2e,Ysr,Ksr,xz,Zsr,elr,olr,ZF,h2e,rlr,tlr,$z,alr,nlr,slr,eT,p2e,llr,ilr,kz,dlr,clr,flr,oT,u2e,mlr,glr,Sz,hlr,plr,ulr,rT,_2e,_lr,blr,Rz,vlr,Flr,Tlr,tT,b2e,Mlr,Elr,Pz,Clr,wlr,Alr,aT,v2e,ylr,Llr,Bz,xlr,$lr,klr,nT,F2e,Slr,Rlr,Iz,Plr,Blr,Ilr,sT,T2e,qlr,Nlr,qz,jlr,Dlr,Glr,lT,M2e,Olr,Vlr,Nz,Xlr,zlr,Qlr,iT,E2e,Wlr,Hlr,jz,Ulr,Jlr,Ylr,dT,C2e,Klr,Zlr,Dz,eir,oir,rir,cT,w2e,tir,air,Gz,nir,sir,lir,fT,A2e,iir,dir,Oz,cir,fir,mir,mT,y2e,gir,hir,Vz,pir,uir,_ir,gT,L2e,bir,vir,Xz,Fir,Tir,Mir,hT,OIe,Dd,pT,x2e,BL,Eir,$2e,Cir,VIe,Ko,IL,wir,Gd,Air,zz,yir,Lir,Qz,xir,$ir,kir,qL,Sir,k2e,Rir,Pir,Bir,At,NL,Iir,S2e,qir,Nir,Od,jir,R2e,Dir,Gir,Wz,Oir,Vir,Xir,uT,zir,Ar,jL,Qir,P2e,Wir,Hir,Za,Uir,B2e,Jir,Yir,I2e,Kir,Zir,q2e,edr,odr,rdr,se,_T,N2e,tdr,adr,Hz,ndr,sdr,ldr,bT,j2e,idr,ddr,Uz,cdr,fdr,mdr,vT,D2e,gdr,hdr,Jz,pdr,udr,_dr,FT,G2e,bdr,vdr,Yz,Fdr,Tdr,Mdr,TT,O2e,Edr,Cdr,Kz,wdr,Adr,ydr,MT,V2e,Ldr,xdr,Zz,$dr,kdr,Sdr,ET,X2e,Rdr,Pdr,eQ,Bdr,Idr,qdr,CT,z2e,Ndr,jdr,oQ,Ddr,Gdr,Odr,wT,Q2e,Vdr,Xdr,rQ,zdr,Qdr,Wdr,AT,W2e,Hdr,Udr,tQ,Jdr,Ydr,Kdr,yT,H2e,Zdr,ecr,aQ,ocr,rcr,tcr,LT,U2e,acr,ncr,nQ,scr,lcr,icr,xT,J2e,dcr,ccr,sQ,fcr,mcr,gcr,$T,Y2e,hcr,pcr,lQ,ucr,_cr,bcr,kT,K2e,vcr,Fcr,iQ,Tcr,Mcr,Ecr,ST,Z2e,Ccr,wcr,dQ,Acr,ycr,Lcr,RT,e1e,xcr,$cr,cQ,kcr,Scr,Rcr,PT,o1e,Pcr,Bcr,fQ,Icr,qcr,Ncr,BT,r1e,jcr,Dcr,mQ,Gcr,Ocr,Vcr,IT,t1e,Xcr,zcr,gQ,Qcr,Wcr,Hcr,qT,a1e,Ucr,Jcr,hQ,Ycr,Kcr,Zcr,NT,n1e,efr,ofr,pQ,rfr,tfr,afr,jT,s1e,nfr,sfr,uQ,lfr,ifr,dfr,DT,XIe,Vd,GT,l1e,DL,cfr,i1e,ffr,zIe,Zo,GL,mfr,Xd,gfr,_Q,hfr,pfr,bQ,ufr,_fr,bfr,OL,vfr,d1e,Ffr,Tfr,Mfr,yt,VL,Efr,c1e,Cfr,wfr,zd,Afr,f1e,yfr,Lfr,vQ,xfr,$fr,kfr,OT,Sfr,yr,XL,Rfr,m1e,Pfr,Bfr,en,Ifr,g1e,qfr,Nfr,h1e,jfr,Dfr,p1e,Gfr,Ofr,Vfr,Te,VT,u1e,Xfr,zfr,FQ,Qfr,Wfr,Hfr,XT,_1e,Ufr,Jfr,TQ,Yfr,Kfr,Zfr,zT,b1e,emr,omr,MQ,rmr,tmr,amr,QT,v1e,nmr,smr,EQ,lmr,imr,dmr,WT,F1e,cmr,fmr,CQ,mmr,gmr,hmr,HT,T1e,pmr,umr,wQ,_mr,bmr,vmr,UT,M1e,Fmr,Tmr,AQ,Mmr,Emr,Cmr,JT,E1e,wmr,Amr,yQ,ymr,Lmr,xmr,YT,C1e,$mr,kmr,LQ,Smr,Rmr,Pmr,KT,w1e,Bmr,Imr,xQ,qmr,Nmr,jmr,ZT,A1e,Dmr,Gmr,$Q,Omr,Vmr,Xmr,eM,y1e,zmr,Qmr,kQ,Wmr,Hmr,Umr,oM,QIe,Qd,rM,L1e,zL,Jmr,x1e,Ymr,WIe,er,QL,Kmr,Wd,Zmr,SQ,egr,ogr,RQ,rgr,tgr,agr,WL,ngr,$1e,sgr,lgr,igr,Lt,HL,dgr,k1e,cgr,fgr,Hd,mgr,S1e,ggr,hgr,PQ,pgr,ugr,_gr,tM,bgr,Lr,UL,vgr,R1e,Fgr,Tgr,on,Mgr,P1e,Egr,Cgr,B1e,wgr,Agr,I1e,ygr,Lgr,xgr,Ud,aM,q1e,$gr,kgr,BQ,Sgr,Rgr,Pgr,nM,N1e,Bgr,Igr,IQ,qgr,Ngr,jgr,sM,j1e,Dgr,Ggr,qQ,Ogr,Vgr,Xgr,lM,HIe,Jd,iM,D1e,JL,zgr,G1e,Qgr,UIe,or,YL,Wgr,Yd,Hgr,NQ,Ugr,Jgr,jQ,Ygr,Kgr,Zgr,KL,ehr,O1e,ohr,rhr,thr,xt,ZL,ahr,V1e,nhr,shr,Kd,lhr,X1e,ihr,dhr,DQ,chr,fhr,mhr,dM,ghr,xr,e8,hhr,z1e,phr,uhr,rn,_hr,Q1e,bhr,vhr,W1e,Fhr,Thr,H1e,Mhr,Ehr,Chr,ie,cM,U1e,whr,Ahr,GQ,yhr,Lhr,xhr,fM,J1e,$hr,khr,OQ,Shr,Rhr,Phr,mM,Y1e,Bhr,Ihr,VQ,qhr,Nhr,jhr,gM,K1e,Dhr,Ghr,XQ,Ohr,Vhr,Xhr,hM,Z1e,zhr,Qhr,zQ,Whr,Hhr,Uhr,pM,e7e,Jhr,Yhr,QQ,Khr,Zhr,epr,uM,o7e,opr,rpr,WQ,tpr,apr,npr,_M,r7e,spr,lpr,HQ,ipr,dpr,cpr,bM,t7e,fpr,mpr,UQ,gpr,hpr,ppr,vM,a7e,upr,_pr,JQ,bpr,vpr,Fpr,FM,n7e,Tpr,Mpr,YQ,Epr,Cpr,wpr,TM,s7e,Apr,ypr,KQ,Lpr,xpr,$pr,MM,l7e,kpr,Spr,ZQ,Rpr,Ppr,Bpr,EM,i7e,Ipr,qpr,eW,Npr,jpr,Dpr,CM,d7e,Gpr,Opr,oW,Vpr,Xpr,zpr,wM,c7e,Qpr,Wpr,rW,Hpr,Upr,Jpr,AM,f7e,Ypr,Kpr,tW,Zpr,eur,our,yM,m7e,rur,tur,aW,aur,nur,sur,LM,g7e,lur,iur,nW,dur,cur,fur,xM,h7e,mur,gur,sW,hur,pur,uur,$M,JIe,Zd,kM,p7e,o8,_ur,u7e,bur,YIe,rr,r8,vur,ec,Fur,lW,Tur,Mur,iW,Eur,Cur,wur,t8,Aur,_7e,yur,Lur,xur,$t,a8,$ur,b7e,kur,Sur,oc,Rur,v7e,Pur,Bur,dW,Iur,qur,Nur,SM,jur,$r,n8,Dur,F7e,Gur,Our,tn,Vur,T7e,Xur,zur,M7e,Qur,Wur,E7e,Hur,Uur,Jur,ye,RM,C7e,Yur,Kur,cW,Zur,e_r,o_r,PM,w7e,r_r,t_r,fW,a_r,n_r,s_r,BM,A7e,l_r,i_r,mW,d_r,c_r,f_r,IM,y7e,m_r,g_r,gW,h_r,p_r,u_r,qM,L7e,__r,b_r,hW,v_r,F_r,T_r,NM,x7e,M_r,E_r,pW,C_r,w_r,A_r,jM,$7e,y_r,L_r,uW,x_r,$_r,k_r,DM,k7e,S_r,R_r,_W,P_r,B_r,I_r,GM,S7e,q_r,N_r,bW,j_r,D_r,G_r,OM,R7e,O_r,V_r,vW,X_r,z_r,Q_r,VM,KIe,rc,XM,P7e,s8,W_r,B7e,H_r,ZIe,tr,l8,U_r,tc,J_r,FW,Y_r,K_r,TW,Z_r,e2r,o2r,i8,r2r,I7e,t2r,a2r,n2r,kt,d8,s2r,q7e,l2r,i2r,ac,d2r,N7e,c2r,f2r,MW,m2r,g2r,h2r,zM,p2r,kr,c8,u2r,j7e,_2r,b2r,an,v2r,D7e,F2r,T2r,G7e,M2r,E2r,O7e,C2r,w2r,A2r,Z,QM,V7e,y2r,L2r,EW,x2r,$2r,k2r,WM,X7e,S2r,R2r,CW,P2r,B2r,I2r,HM,z7e,q2r,N2r,wW,j2r,D2r,G2r,UM,Q7e,O2r,V2r,AW,X2r,z2r,Q2r,JM,W7e,W2r,H2r,yW,U2r,J2r,Y2r,YM,H7e,K2r,Z2r,LW,e1r,o1r,r1r,KM,U7e,t1r,a1r,xW,n1r,s1r,l1r,ZM,J7e,i1r,d1r,$W,c1r,f1r,m1r,eE,Y7e,g1r,h1r,kW,p1r,u1r,_1r,oE,K7e,b1r,v1r,SW,F1r,T1r,M1r,rE,Z7e,E1r,C1r,RW,w1r,A1r,y1r,tE,ebe,L1r,x1r,PW,$1r,k1r,S1r,aE,obe,R1r,P1r,BW,B1r,I1r,q1r,nE,rbe,N1r,j1r,IW,D1r,G1r,O1r,sE,tbe,V1r,X1r,qW,z1r,Q1r,W1r,lE,abe,H1r,U1r,NW,J1r,Y1r,K1r,iE,nbe,Z1r,e7r,jW,o7r,r7r,t7r,dE,sbe,a7r,n7r,DW,s7r,l7r,i7r,cE,lbe,d7r,c7r,GW,f7r,m7r,g7r,fE,ibe,h7r,p7r,OW,u7r,_7r,b7r,mE,dbe,v7r,F7r,VW,T7r,M7r,E7r,gE,cbe,C7r,w7r,XW,A7r,y7r,L7r,hE,fbe,x7r,$7r,zW,k7r,S7r,R7r,pE,mbe,P7r,B7r,QW,I7r,q7r,N7r,uE,gbe,j7r,D7r,WW,G7r,O7r,V7r,_E,hbe,X7r,z7r,HW,Q7r,W7r,H7r,bE,eqe,nc,vE,pbe,f8,U7r,ube,J7r,oqe,ar,m8,Y7r,sc,K7r,UW,Z7r,ebr,JW,obr,rbr,tbr,g8,abr,_be,nbr,sbr,lbr,St,h8,ibr,bbe,dbr,cbr,lc,fbr,vbe,mbr,gbr,YW,hbr,pbr,ubr,FE,_br,Sr,p8,bbr,Fbe,vbr,Fbr,nn,Tbr,Tbe,Mbr,Ebr,Mbe,Cbr,wbr,Ebe,Abr,ybr,Lbr,he,TE,Cbe,xbr,$br,KW,kbr,Sbr,Rbr,ME,wbe,Pbr,Bbr,ZW,Ibr,qbr,Nbr,EE,Abe,jbr,Dbr,eH,Gbr,Obr,Vbr,CE,ybe,Xbr,zbr,oH,Qbr,Wbr,Hbr,wE,Lbe,Ubr,Jbr,rH,Ybr,Kbr,Zbr,AE,xbe,e4r,o4r,tH,r4r,t4r,a4r,yE,$be,n4r,s4r,aH,l4r,i4r,d4r,LE,kbe,c4r,f4r,nH,m4r,g4r,h4r,xE,Sbe,p4r,u4r,sH,_4r,b4r,v4r,$E,Rbe,F4r,T4r,lH,M4r,E4r,C4r,kE,Pbe,w4r,A4r,iH,y4r,L4r,x4r,SE,Bbe,$4r,k4r,dH,S4r,R4r,P4r,RE,Ibe,B4r,I4r,cH,q4r,N4r,j4r,PE,qbe,D4r,G4r,fH,O4r,V4r,X4r,BE,Nbe,z4r,Q4r,mH,W4r,H4r,U4r,IE,jbe,J4r,Y4r,gH,K4r,Z4r,evr,qE,Dbe,ovr,rvr,hH,tvr,avr,nvr,NE,rqe,ic,jE,Gbe,u8,svr,Obe,lvr,tqe,nr,_8,ivr,dc,dvr,pH,cvr,fvr,uH,mvr,gvr,hvr,b8,pvr,Vbe,uvr,_vr,bvr,Rt,v8,vvr,Xbe,Fvr,Tvr,cc,Mvr,zbe,Evr,Cvr,_H,wvr,Avr,yvr,DE,Lvr,Rr,F8,xvr,Qbe,$vr,kvr,sn,Svr,Wbe,Rvr,Pvr,Hbe,Bvr,Ivr,Ube,qvr,Nvr,jvr,T8,GE,Jbe,Dvr,Gvr,bH,Ovr,Vvr,Xvr,OE,Ybe,zvr,Qvr,vH,Wvr,Hvr,Uvr,VE,aqe,fc,XE,Kbe,M8,Jvr,Zbe,Yvr,nqe,sr,E8,Kvr,mc,Zvr,FH,eFr,oFr,TH,rFr,tFr,aFr,C8,nFr,e4e,sFr,lFr,iFr,Pt,w8,dFr,o4e,cFr,fFr,gc,mFr,r4e,gFr,hFr,MH,pFr,uFr,_Fr,zE,bFr,Pr,A8,vFr,t4e,FFr,TFr,ln,MFr,a4e,EFr,CFr,n4e,wFr,AFr,s4e,yFr,LFr,xFr,l4e,QE,i4e,$Fr,kFr,EH,SFr,RFr,PFr,WE,sqe,hc,HE,d4e,y8,BFr,c4e,IFr,lqe,lr,L8,qFr,pc,NFr,CH,jFr,DFr,wH,GFr,OFr,VFr,x8,XFr,f4e,zFr,QFr,WFr,Bt,$8,HFr,m4e,UFr,JFr,uc,YFr,g4e,KFr,ZFr,AH,eTr,oTr,rTr,UE,tTr,Br,k8,aTr,h4e,nTr,sTr,dn,lTr,p4e,iTr,dTr,u4e,cTr,fTr,_4e,mTr,gTr,hTr,de,JE,b4e,pTr,uTr,yH,_Tr,bTr,vTr,YE,v4e,FTr,TTr,LH,MTr,ETr,CTr,KE,F4e,wTr,ATr,xH,yTr,LTr,xTr,ZE,T4e,$Tr,kTr,$H,STr,RTr,PTr,e5,M4e,BTr,ITr,kH,qTr,NTr,jTr,o5,E4e,DTr,GTr,SH,OTr,VTr,XTr,r5,C4e,zTr,QTr,RH,WTr,HTr,UTr,t5,w4e,JTr,YTr,PH,KTr,ZTr,eMr,a5,A4e,oMr,rMr,BH,tMr,aMr,nMr,n5,y4e,sMr,lMr,IH,iMr,dMr,cMr,s5,L4e,fMr,mMr,qH,gMr,hMr,pMr,l5,x4e,uMr,_Mr,NH,bMr,vMr,FMr,i5,$4e,TMr,MMr,jH,EMr,CMr,wMr,d5,k4e,AMr,yMr,DH,LMr,xMr,$Mr,c5,S4e,kMr,SMr,GH,RMr,PMr,BMr,f5,R4e,IMr,qMr,OH,NMr,jMr,DMr,m5,P4e,GMr,OMr,VH,VMr,XMr,zMr,g5,B4e,QMr,WMr,XH,HMr,UMr,JMr,h5,I4e,YMr,KMr,zH,ZMr,eEr,oEr,p5,q4e,rEr,tEr,QH,aEr,nEr,sEr,u5,iqe,_c,_5,N4e,S8,lEr,j4e,iEr,dqe,ir,R8,dEr,bc,cEr,WH,fEr,mEr,HH,gEr,hEr,pEr,P8,uEr,D4e,_Er,bEr,vEr,It,B8,FEr,G4e,TEr,MEr,vc,EEr,O4e,CEr,wEr,UH,AEr,yEr,LEr,b5,xEr,Ir,I8,$Er,V4e,kEr,SEr,cn,REr,X4e,PEr,BEr,z4e,IEr,qEr,Q4e,NEr,jEr,DEr,ce,v5,W4e,GEr,OEr,JH,VEr,XEr,zEr,F5,H4e,QEr,WEr,YH,HEr,UEr,JEr,T5,U4e,YEr,KEr,KH,ZEr,e5r,o5r,M5,J4e,r5r,t5r,ZH,a5r,n5r,s5r,E5,Y4e,l5r,i5r,eU,d5r,c5r,f5r,C5,K4e,m5r,g5r,oU,h5r,p5r,u5r,w5,Z4e,_5r,b5r,rU,v5r,F5r,T5r,A5,eve,M5r,E5r,tU,C5r,w5r,A5r,y5,ove,y5r,L5r,aU,x5r,$5r,k5r,L5,rve,S5r,R5r,nU,P5r,B5r,I5r,x5,tve,q5r,N5r,sU,j5r,D5r,G5r,$5,ave,O5r,V5r,lU,X5r,z5r,Q5r,k5,nve,W5r,H5r,iU,U5r,J5r,Y5r,S5,sve,K5r,Z5r,dU,eCr,oCr,rCr,R5,lve,tCr,aCr,cU,nCr,sCr,lCr,P5,ive,iCr,dCr,fU,cCr,fCr,mCr,B5,dve,gCr,hCr,mU,pCr,uCr,_Cr,I5,cve,bCr,vCr,gU,FCr,TCr,MCr,q5,fve,ECr,CCr,hU,wCr,ACr,yCr,N5,mve,LCr,xCr,pU,$Cr,kCr,SCr,j5,cqe,Fc,D5,gve,q8,RCr,hve,PCr,fqe,dr,N8,BCr,Tc,ICr,uU,qCr,NCr,_U,jCr,DCr,GCr,j8,OCr,pve,VCr,XCr,zCr,qt,D8,QCr,uve,WCr,HCr,Mc,UCr,_ve,JCr,YCr,bU,KCr,ZCr,e3r,G5,o3r,qr,G8,r3r,bve,t3r,a3r,fn,n3r,vve,s3r,l3r,Fve,i3r,d3r,Tve,c3r,f3r,m3r,Mve,O5,Eve,g3r,h3r,vU,p3r,u3r,_3r,V5,mqe,Ec,X5,Cve,O8,b3r,wve,v3r,gqe,cr,V8,F3r,Cc,T3r,FU,M3r,E3r,TU,C3r,w3r,A3r,X8,y3r,Ave,L3r,x3r,$3r,Nt,z8,k3r,yve,S3r,R3r,wc,P3r,Lve,B3r,I3r,MU,q3r,N3r,j3r,z5,D3r,Nr,Q8,G3r,xve,O3r,V3r,mn,X3r,$ve,z3r,Q3r,kve,W3r,H3r,Sve,U3r,J3r,Y3r,Rve,Q5,Pve,K3r,Z3r,EU,ewr,owr,rwr,W5,hqe,Ac,H5,Bve,W8,twr,Ive,awr,pqe,fr,H8,nwr,yc,swr,CU,lwr,iwr,wU,dwr,cwr,fwr,U8,mwr,qve,gwr,hwr,pwr,jt,J8,uwr,Nve,_wr,bwr,Lc,vwr,jve,Fwr,Twr,AU,Mwr,Ewr,Cwr,U5,wwr,jr,Y8,Awr,Dve,ywr,Lwr,gn,xwr,Gve,$wr,kwr,Ove,Swr,Rwr,Vve,Pwr,Bwr,Iwr,re,J5,Xve,qwr,Nwr,yU,jwr,Dwr,Gwr,Y5,zve,Owr,Vwr,LU,Xwr,zwr,Qwr,K5,Qve,Wwr,Hwr,xU,Uwr,Jwr,Ywr,Z5,Wve,Kwr,Zwr,$U,eAr,oAr,rAr,eC,Hve,tAr,aAr,kU,nAr,sAr,lAr,oC,Uve,iAr,dAr,SU,cAr,fAr,mAr,rC,Jve,gAr,hAr,RU,pAr,uAr,_Ar,tC,Yve,bAr,vAr,PU,FAr,TAr,MAr,aC,Kve,EAr,CAr,BU,wAr,AAr,yAr,nC,Zve,LAr,xAr,IU,$Ar,kAr,SAr,sC,eFe,RAr,PAr,qU,BAr,IAr,qAr,lC,oFe,NAr,jAr,NU,DAr,GAr,OAr,iC,rFe,VAr,XAr,jU,zAr,QAr,WAr,dC,tFe,HAr,UAr,DU,JAr,YAr,KAr,cC,aFe,ZAr,e0r,GU,o0r,r0r,t0r,fC,nFe,a0r,n0r,OU,s0r,l0r,i0r,mC,sFe,d0r,c0r,VU,f0r,m0r,g0r,gC,lFe,h0r,p0r,XU,u0r,_0r,b0r,hC,iFe,v0r,F0r,zU,T0r,M0r,E0r,pC,dFe,C0r,w0r,QU,A0r,y0r,L0r,uC,cFe,x0r,$0r,WU,k0r,S0r,R0r,_C,fFe,P0r,B0r,HU,I0r,q0r,N0r,bC,mFe,j0r,D0r,UU,G0r,O0r,V0r,vC,gFe,X0r,z0r,JU,Q0r,W0r,H0r,FC,hFe,U0r,J0r,YU,Y0r,K0r,Z0r,TC,uqe,xc,MC,pFe,K8,e6r,uFe,o6r,_qe,mr,Z8,r6r,$c,t6r,KU,a6r,n6r,ZU,s6r,l6r,i6r,ex,d6r,_Fe,c6r,f6r,m6r,Dt,ox,g6r,bFe,h6r,p6r,kc,u6r,vFe,_6r,b6r,eJ,v6r,F6r,T6r,EC,M6r,Dr,rx,E6r,FFe,C6r,w6r,hn,A6r,TFe,y6r,L6r,MFe,x6r,$6r,EFe,k6r,S6r,R6r,ke,CC,CFe,P6r,B6r,oJ,I6r,q6r,N6r,wC,wFe,j6r,D6r,rJ,G6r,O6r,V6r,AC,AFe,X6r,z6r,tJ,Q6r,W6r,H6r,yC,yFe,U6r,J6r,aJ,Y6r,K6r,Z6r,LC,LFe,eyr,oyr,nJ,ryr,tyr,ayr,xC,xFe,nyr,syr,sJ,lyr,iyr,dyr,$C,$Fe,cyr,fyr,lJ,myr,gyr,hyr,kC,kFe,pyr,uyr,iJ,_yr,byr,vyr,SC,SFe,Fyr,Tyr,dJ,Myr,Eyr,Cyr,RC,bqe,Sc,PC,RFe,tx,wyr,PFe,Ayr,vqe,gr,ax,yyr,Rc,Lyr,cJ,xyr,$yr,fJ,kyr,Syr,Ryr,nx,Pyr,BFe,Byr,Iyr,qyr,Gt,sx,Nyr,IFe,jyr,Dyr,Pc,Gyr,qFe,Oyr,Vyr,mJ,Xyr,zyr,Qyr,BC,Wyr,Gr,lx,Hyr,NFe,Uyr,Jyr,pn,Yyr,jFe,Kyr,Zyr,DFe,eLr,oLr,GFe,rLr,tLr,aLr,Me,IC,OFe,nLr,sLr,gJ,lLr,iLr,dLr,qC,VFe,cLr,fLr,hJ,mLr,gLr,hLr,NC,XFe,pLr,uLr,pJ,_Lr,bLr,vLr,jC,zFe,FLr,TLr,uJ,MLr,ELr,CLr,DC,QFe,wLr,ALr,_J,yLr,LLr,xLr,GC,WFe,$Lr,kLr,bJ,SLr,RLr,PLr,OC,HFe,BLr,ILr,vJ,qLr,NLr,jLr,VC,UFe,DLr,GLr,FJ,OLr,VLr,XLr,XC,JFe,zLr,QLr,TJ,WLr,HLr,ULr,zC,YFe,JLr,YLr,MJ,KLr,ZLr,e8r,QC,KFe,o8r,r8r,EJ,t8r,a8r,n8r,WC,ZFe,s8r,l8r,CJ,i8r,d8r,c8r,HC,Fqe,Bc,UC,eTe,ix,f8r,oTe,m8r,Tqe,hr,dx,g8r,Ic,h8r,wJ,p8r,u8r,AJ,_8r,b8r,v8r,cx,F8r,rTe,T8r,M8r,E8r,Ot,fx,C8r,tTe,w8r,A8r,qc,y8r,aTe,L8r,x8r,yJ,$8r,k8r,S8r,JC,R8r,Or,mx,P8r,nTe,B8r,I8r,un,q8r,sTe,N8r,j8r,lTe,D8r,G8r,iTe,O8r,V8r,X8r,Le,YC,dTe,z8r,Q8r,LJ,W8r,H8r,U8r,KC,cTe,J8r,Y8r,xJ,K8r,Z8r,exr,ZC,fTe,oxr,rxr,$J,txr,axr,nxr,e3,mTe,sxr,lxr,kJ,ixr,dxr,cxr,o3,gTe,fxr,mxr,SJ,gxr,hxr,pxr,r3,hTe,uxr,_xr,RJ,bxr,vxr,Fxr,t3,pTe,Txr,Mxr,PJ,Exr,Cxr,wxr,a3,uTe,Axr,yxr,BJ,Lxr,xxr,$xr,n3,_Te,kxr,Sxr,IJ,Rxr,Pxr,Bxr,s3,bTe,Ixr,qxr,qJ,Nxr,jxr,Dxr,l3,Mqe,Nc,i3,vTe,gx,Gxr,FTe,Oxr,Eqe,pr,hx,Vxr,jc,Xxr,NJ,zxr,Qxr,jJ,Wxr,Hxr,Uxr,px,Jxr,TTe,Yxr,Kxr,Zxr,Vt,ux,e9r,MTe,o9r,r9r,Dc,t9r,ETe,a9r,n9r,DJ,s9r,l9r,i9r,d3,d9r,Vr,_x,c9r,CTe,f9r,m9r,_n,g9r,wTe,h9r,p9r,ATe,u9r,_9r,yTe,b9r,v9r,F9r,Se,c3,LTe,T9r,M9r,GJ,E9r,C9r,w9r,f3,xTe,A9r,y9r,OJ,L9r,x9r,$9r,m3,$Te,k9r,S9r,VJ,R9r,P9r,B9r,g3,kTe,I9r,q9r,XJ,N9r,j9r,D9r,h3,STe,G9r,O9r,zJ,V9r,X9r,z9r,p3,RTe,Q9r,W9r,QJ,H9r,U9r,J9r,u3,PTe,Y9r,K9r,WJ,Z9r,e$r,o$r,_3,BTe,r$r,t$r,HJ,a$r,n$r,s$r,b3,ITe,l$r,i$r,UJ,d$r,c$r,f$r,v3,Cqe,Gc,F3,qTe,bx,m$r,NTe,g$r,wqe,ur,vx,h$r,Oc,p$r,JJ,u$r,_$r,YJ,b$r,v$r,F$r,Fx,T$r,jTe,M$r,E$r,C$r,Xt,Tx,w$r,DTe,A$r,y$r,Vc,L$r,GTe,x$r,$$r,KJ,k$r,S$r,R$r,T3,P$r,Xr,Mx,B$r,OTe,I$r,q$r,bn,N$r,VTe,j$r,D$r,XTe,G$r,O$r,zTe,V$r,X$r,z$r,xe,M3,QTe,Q$r,W$r,ZJ,H$r,U$r,J$r,E3,WTe,Y$r,K$r,eY,Z$r,ekr,okr,C3,HTe,rkr,tkr,oY,akr,nkr,skr,w3,UTe,lkr,ikr,rY,dkr,ckr,fkr,A3,JTe,mkr,gkr,tY,hkr,pkr,ukr,y3,YTe,_kr,bkr,aY,vkr,Fkr,Tkr,L3,KTe,Mkr,Ekr,nY,Ckr,wkr,Akr,x3,ZTe,ykr,Lkr,sY,xkr,$kr,kkr,$3,eMe,Skr,Rkr,lY,Pkr,Bkr,Ikr,k3,oMe,qkr,Nkr,iY,jkr,Dkr,Gkr,S3,Aqe,Xc,R3,rMe,Ex,Okr,tMe,Vkr,yqe,_r,Cx,Xkr,zc,zkr,dY,Qkr,Wkr,cY,Hkr,Ukr,Jkr,wx,Ykr,aMe,Kkr,Zkr,eSr,zt,Ax,oSr,nMe,rSr,tSr,Qc,aSr,sMe,nSr,sSr,fY,lSr,iSr,dSr,P3,cSr,zr,yx,fSr,lMe,mSr,gSr,vn,hSr,iMe,pSr,uSr,dMe,_Sr,bSr,cMe,vSr,FSr,TSr,$e,B3,fMe,MSr,ESr,mY,CSr,wSr,ASr,I3,mMe,ySr,LSr,gY,xSr,$Sr,kSr,q3,gMe,SSr,RSr,hY,PSr,BSr,ISr,N3,hMe,qSr,NSr,pY,jSr,DSr,GSr,j3,pMe,OSr,VSr,uY,XSr,zSr,QSr,D3,uMe,WSr,HSr,_Y,USr,JSr,YSr,G3,_Me,KSr,ZSr,bY,eRr,oRr,rRr,O3,bMe,tRr,aRr,vY,nRr,sRr,lRr,V3,vMe,iRr,dRr,FY,cRr,fRr,mRr,X3,FMe,gRr,hRr,TY,pRr,uRr,_Rr,z3,Lqe,Wc,Q3,TMe,Lx,bRr,MMe,vRr,xqe,br,xx,FRr,Hc,TRr,MY,MRr,ERr,EY,CRr,wRr,ARr,$x,yRr,EMe,LRr,xRr,$Rr,Qt,kx,kRr,CMe,SRr,RRr,Uc,PRr,wMe,BRr,IRr,CY,qRr,NRr,jRr,W3,DRr,Qr,Sx,GRr,AMe,ORr,VRr,Fn,XRr,yMe,zRr,QRr,LMe,WRr,HRr,xMe,URr,JRr,YRr,De,H3,$Me,KRr,ZRr,wY,ePr,oPr,rPr,U3,kMe,tPr,aPr,AY,nPr,sPr,lPr,J3,SMe,iPr,dPr,yY,cPr,fPr,mPr,Y3,RMe,gPr,hPr,LY,pPr,uPr,_Pr,K3,PMe,bPr,vPr,xY,FPr,TPr,MPr,Z3,BMe,EPr,CPr,$Y,wPr,APr,yPr,ew,IMe,LPr,xPr,kY,$Pr,kPr,SPr,ow,qMe,RPr,PPr,SY,BPr,IPr,qPr,rw,$qe,Jc,tw,NMe,Rx,NPr,jMe,jPr,kqe,vr,Px,DPr,Yc,GPr,RY,OPr,VPr,PY,XPr,zPr,QPr,Bx,WPr,DMe,HPr,UPr,JPr,Wt,Ix,YPr,GMe,KPr,ZPr,Kc,eBr,OMe,oBr,rBr,BY,tBr,aBr,nBr,aw,sBr,Wr,qx,lBr,VMe,iBr,dBr,Tn,cBr,XMe,fBr,mBr,zMe,gBr,hBr,QMe,pBr,uBr,_Br,Ge,nw,WMe,bBr,vBr,IY,FBr,TBr,MBr,sw,HMe,EBr,CBr,qY,wBr,ABr,yBr,lw,UMe,LBr,xBr,NY,$Br,kBr,SBr,iw,JMe,RBr,PBr,jY,BBr,IBr,qBr,dw,YMe,NBr,jBr,DY,DBr,GBr,OBr,cw,KMe,VBr,XBr,GY,zBr,QBr,WBr,fw,ZMe,HBr,UBr,OY,JBr,YBr,KBr,mw,eEe,ZBr,eIr,VY,oIr,rIr,tIr,gw,Sqe,Zc,hw,oEe,Nx,aIr,rEe,nIr,Rqe,Fr,jx,sIr,ef,lIr,XY,iIr,dIr,zY,cIr,fIr,mIr,Dx,gIr,tEe,hIr,pIr,uIr,Ht,Gx,_Ir,aEe,bIr,vIr,of,FIr,nEe,TIr,MIr,QY,EIr,CIr,wIr,pw,AIr,Hr,Ox,yIr,sEe,LIr,xIr,Mn,$Ir,lEe,kIr,SIr,iEe,RIr,PIr,dEe,BIr,IIr,qIr,cEe,uw,fEe,NIr,jIr,WY,DIr,GIr,OIr,_w,Pqe,rf,bw,mEe,Vx,VIr,gEe,XIr,Bqe,Tr,Xx,zIr,tf,QIr,HY,WIr,HIr,UY,UIr,JIr,YIr,zx,KIr,hEe,ZIr,eqr,oqr,Ut,Qx,rqr,pEe,tqr,aqr,af,nqr,uEe,sqr,lqr,JY,iqr,dqr,cqr,vw,fqr,Ur,Wx,mqr,_Ee,gqr,hqr,En,pqr,bEe,uqr,_qr,vEe,bqr,vqr,FEe,Fqr,Tqr,Mqr,Hx,Fw,TEe,Eqr,Cqr,YY,wqr,Aqr,yqr,Tw,MEe,Lqr,xqr,KY,$qr,kqr,Sqr,Mw,Iqe,nf,Ew,EEe,Ux,Rqr,CEe,Pqr,qqe,Mr,Jx,Bqr,sf,Iqr,ZY,qqr,Nqr,eK,jqr,Dqr,Gqr,Yx,Oqr,wEe,Vqr,Xqr,zqr,Jt,Kx,Qqr,AEe,Wqr,Hqr,lf,Uqr,yEe,Jqr,Yqr,oK,Kqr,Zqr,eNr,Cw,oNr,Jr,Zx,rNr,LEe,tNr,aNr,Cn,nNr,xEe,sNr,lNr,$Ee,iNr,dNr,kEe,cNr,fNr,mNr,SEe,ww,REe,gNr,hNr,rK,pNr,uNr,_Nr,Aw,Nqe;return d=new ee({}),Ma=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),U0=new ee({}),J0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new bNr({props:{warning:!0,$$slots:{default:[X0t]},$$scope:{ctx:A}}}),Y0=new ee({}),K0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/configuration_auto.py#L570"}}),o6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/configuration_auto.py#L593"}}),pg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[z0t]},$$scope:{ctx:A}}}),r6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/configuration_auto.py#L716"}}),t6=new ee({}),a6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/tokenization_auto.py#L381"}}),l6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17247/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/tokenization_auto.py#L395"}}),Hg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Q0t]},$$scope:{ctx:A}}}),i6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/tokenization_auto.py#L591"}}),d6=new ee({}),c6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/feature_extraction_auto.py#L180"}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17247/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),Mh=new bNr({props:{$$slots:{default:[W0t]},$$scope:{ctx:A}}}),Eh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[H0t]},$$scope:{ctx:A}}}),h6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/feature_extraction_auto.py#L321"}}),p6=new ee({}),u6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/processing_auto.py#L80"}}),v6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/processing_auto.py#L94"}}),Gh=new bNr({props:{$$slots:{default:[U0t]},$$scope:{ctx:A}}}),Oh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[J0t]},$$scope:{ctx:A}}}),F6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/processing_auto.py#L247"}}),T6=new ee({}),M6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L720"}}),C6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Y0t]},$$scope:{ctx:A}}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Bu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[K0t]},$$scope:{ctx:A}}}),A6=new ee({}),y6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L727"}}),x6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),qu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Z0t]},$$scope:{ctx:A}}}),$6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),k6=new ee({}),S6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L742"}}),P6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),L_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),B6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),m2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),I6=new ee({}),q6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L749"}}),j6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),h2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),G6=new ee({}),O6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L756"}}),X6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),_1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),Q6=new ee({}),W6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L765"}}),U6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),v1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),J6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),Y6=new ee({}),K6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L799"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L806"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),ob=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),ly=new ee({}),iy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L792"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),tb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L774"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L781"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[b6t]},$$scope:{ctx:A}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L815"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[v6t]},$$scope:{ctx:A}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[F6t]},$$scope:{ctx:A}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L854"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[T6t]},$$scope:{ctx:A}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[M6t]},$$scope:{ctx:A}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L861"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),ev=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[E6t]},$$scope:{ctx:A}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[C6t]},$$scope:{ctx:A}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L884"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[w6t]},$$scope:{ctx:A}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[A6t]},$$scope:{ctx:A}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L868"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[y6t]},$$scope:{ctx:A}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[L6t]},$$scope:{ctx:A}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L875"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[x6t]},$$scope:{ctx:A}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$6t]},$$scope:{ctx:A}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L893"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[k6t]},$$scope:{ctx:A}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[S6t]},$$scope:{ctx:A}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L900"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[R6t]},$$scope:{ctx:A}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[P6t]},$$scope:{ctx:A}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L847"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[B6t]},$$scope:{ctx:A}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[I6t]},$$scope:{ctx:A}}}),pL=new ee({}),uL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L822"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[q6t]},$$scope:{ctx:A}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[N6t]},$$scope:{ctx:A}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L829"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[j6t]},$$scope:{ctx:A}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[D6t]},$$scope:{ctx:A}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_auto.py#L838"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[G6t]},$$scope:{ctx:A}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[O6t]},$$scope:{ctx:A}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),RL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[V6t]},$$scope:{ctx:A}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[X6t]},$$scope:{ctx:A}}}),BL=new ee({}),IL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),NL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[z6t]},$$scope:{ctx:A}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Q6t]},$$scope:{ctx:A}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),VL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[W6t]},$$scope:{ctx:A}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[H6t]},$$scope:{ctx:A}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),HL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[U6t]},$$scope:{ctx:A}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[J6t]},$$scope:{ctx:A}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Y6t]},$$scope:{ctx:A}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[K6t]},$$scope:{ctx:A}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Z6t]},$$scope:{ctx:A}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),f8=new ee({}),m8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),u8=new ee({}),_8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),J8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:A}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:A}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:A}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:A}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),bx=new ee({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),Ex=new ee({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:A}}}),Lx=new ee({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:A}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:A}}}),Rx=new ee({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:A}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:A}}}),Nx=new ee({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:A}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:A}}}),Vx=new ee({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:A}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:A}}}),Ux=new ee({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:A}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17247/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17247/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17247/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),z0=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),Q0=o("AutoConfig"),yn=o(", "),Ln=a("a"),W0=o("AutoModel"),fi=o(`, and
`),xn=a("a"),H0=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),m$=o("will create a model that is an instance of "),gi=a("a"),g$=o("BertModel"),h$=o("."),Eo=l(),Ea=a("p"),p$=o("There is one class of "),pf=a("code"),u$=o("AutoModel"),Qje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BBe=l(),hi=a("h2"),uf=a("a"),JZ=a("span"),F(U0.$$.fragment),Wje=l(),YZ=a("span"),Hje=o("Extending the Auto Classes"),IBe=l(),$n=a("p"),Uje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),KZ=a("code"),Jje=o("NewModel"),Yje=o(", make sure you have a "),ZZ=a("code"),Kje=o("NewModelConfig"),Zje=o(` then you can add those to the auto
classes like this:`),qBe=l(),F(J0.$$.fragment),NBe=l(),_$=a("p"),eDe=o("You will then be able to use the auto classes like you would usually do!"),jBe=l(),F(_f.$$.fragment),DBe=l(),pi=a("h2"),bf=a("a"),eee=a("span"),F(Y0.$$.fragment),oDe=l(),oee=a("span"),rDe=o("AutoConfig"),GBe=l(),Co=a("div"),F(K0.$$.fragment),tDe=l(),Z0=a("p"),aDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),b$=a("a"),nDe=o("from_pretrained()"),sDe=o(" class method."),lDe=l(),e6=a("p"),iDe=o("This class cannot be instantiated directly using "),ree=a("code"),dDe=o("__init__()"),cDe=o(" (throws an error)."),fDe=l(),Er=a("div"),F(o6.$$.fragment),mDe=l(),tee=a("p"),gDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hDe=l(),ui=a("p"),pDe=o("The configuration class to instantiate is selected based on the "),aee=a("code"),uDe=o("model_type"),_De=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nee=a("code"),bDe=o("pretrained_model_name_or_path"),vDe=o(":"),FDe=l(),y=a("ul"),vf=a("li"),see=a("strong"),TDe=o("albert"),MDe=o(" \u2014 "),v$=a("a"),EDe=o("AlbertConfig"),CDe=o(" (ALBERT model)"),wDe=l(),Ff=a("li"),lee=a("strong"),ADe=o("bart"),yDe=o(" \u2014 "),F$=a("a"),LDe=o("BartConfig"),xDe=o(" (BART model)"),$De=l(),Tf=a("li"),iee=a("strong"),kDe=o("beit"),SDe=o(" \u2014 "),T$=a("a"),RDe=o("BeitConfig"),PDe=o(" (BEiT model)"),BDe=l(),Mf=a("li"),dee=a("strong"),IDe=o("bert"),qDe=o(" \u2014 "),M$=a("a"),NDe=o("BertConfig"),jDe=o(" (BERT model)"),DDe=l(),Ef=a("li"),cee=a("strong"),GDe=o("bert-generation"),ODe=o(" \u2014 "),E$=a("a"),VDe=o("BertGenerationConfig"),XDe=o(" (Bert Generation model)"),zDe=l(),Cf=a("li"),fee=a("strong"),QDe=o("big_bird"),WDe=o(" \u2014 "),C$=a("a"),HDe=o("BigBirdConfig"),UDe=o(" (BigBird model)"),JDe=l(),wf=a("li"),mee=a("strong"),YDe=o("bigbird_pegasus"),KDe=o(" \u2014 "),w$=a("a"),ZDe=o("BigBirdPegasusConfig"),eGe=o(" (BigBirdPegasus model)"),oGe=l(),Af=a("li"),gee=a("strong"),rGe=o("blenderbot"),tGe=o(" \u2014 "),A$=a("a"),aGe=o("BlenderbotConfig"),nGe=o(" (Blenderbot model)"),sGe=l(),yf=a("li"),hee=a("strong"),lGe=o("blenderbot-small"),iGe=o(" \u2014 "),y$=a("a"),dGe=o("BlenderbotSmallConfig"),cGe=o(" (BlenderbotSmall model)"),fGe=l(),Lf=a("li"),pee=a("strong"),mGe=o("camembert"),gGe=o(" \u2014 "),L$=a("a"),hGe=o("CamembertConfig"),pGe=o(" (CamemBERT model)"),uGe=l(),xf=a("li"),uee=a("strong"),_Ge=o("canine"),bGe=o(" \u2014 "),x$=a("a"),vGe=o("CanineConfig"),FGe=o(" (Canine model)"),TGe=l(),$f=a("li"),_ee=a("strong"),MGe=o("clip"),EGe=o(" \u2014 "),$$=a("a"),CGe=o("CLIPConfig"),wGe=o(" (CLIP model)"),AGe=l(),kf=a("li"),bee=a("strong"),yGe=o("convbert"),LGe=o(" \u2014 "),k$=a("a"),xGe=o("ConvBertConfig"),$Ge=o(" (ConvBERT model)"),kGe=l(),Sf=a("li"),vee=a("strong"),SGe=o("convnext"),RGe=o(" \u2014 "),S$=a("a"),PGe=o("ConvNextConfig"),BGe=o(" (ConvNext model)"),IGe=l(),Rf=a("li"),Fee=a("strong"),qGe=o("ctrl"),NGe=o(" \u2014 "),R$=a("a"),jGe=o("CTRLConfig"),DGe=o(" (CTRL model)"),GGe=l(),Pf=a("li"),Tee=a("strong"),OGe=o("data2vec-audio"),VGe=o(" \u2014 "),P$=a("a"),XGe=o("Data2VecAudioConfig"),zGe=o(" (Data2VecAudio model)"),QGe=l(),Bf=a("li"),Mee=a("strong"),WGe=o("data2vec-text"),HGe=o(" \u2014 "),B$=a("a"),UGe=o("Data2VecTextConfig"),JGe=o(" (Data2VecText model)"),YGe=l(),If=a("li"),Eee=a("strong"),KGe=o("data2vec-vision"),ZGe=o(" \u2014 "),I$=a("a"),eOe=o("Data2VecVisionConfig"),oOe=o(" (Data2VecVision model)"),rOe=l(),qf=a("li"),Cee=a("strong"),tOe=o("deberta"),aOe=o(" \u2014 "),q$=a("a"),nOe=o("DebertaConfig"),sOe=o(" (DeBERTa model)"),lOe=l(),Nf=a("li"),wee=a("strong"),iOe=o("deberta-v2"),dOe=o(" \u2014 "),N$=a("a"),cOe=o("DebertaV2Config"),fOe=o(" (DeBERTa-v2 model)"),mOe=l(),jf=a("li"),Aee=a("strong"),gOe=o("decision_transformer"),hOe=o(" \u2014 "),j$=a("a"),pOe=o("DecisionTransformerConfig"),uOe=o(" (Decision Transformer model)"),_Oe=l(),Df=a("li"),yee=a("strong"),bOe=o("deit"),vOe=o(" \u2014 "),D$=a("a"),FOe=o("DeiTConfig"),TOe=o(" (DeiT model)"),MOe=l(),Gf=a("li"),Lee=a("strong"),EOe=o("detr"),COe=o(" \u2014 "),G$=a("a"),wOe=o("DetrConfig"),AOe=o(" (DETR model)"),yOe=l(),Of=a("li"),xee=a("strong"),LOe=o("distilbert"),xOe=o(" \u2014 "),O$=a("a"),$Oe=o("DistilBertConfig"),kOe=o(" (DistilBERT model)"),SOe=l(),Vf=a("li"),$ee=a("strong"),ROe=o("dpr"),POe=o(" \u2014 "),V$=a("a"),BOe=o("DPRConfig"),IOe=o(" (DPR model)"),qOe=l(),Xf=a("li"),kee=a("strong"),NOe=o("dpt"),jOe=o(" \u2014 "),X$=a("a"),DOe=o("DPTConfig"),GOe=o(" (DPT model)"),OOe=l(),zf=a("li"),See=a("strong"),VOe=o("electra"),XOe=o(" \u2014 "),z$=a("a"),zOe=o("ElectraConfig"),QOe=o(" (ELECTRA model)"),WOe=l(),Qf=a("li"),Ree=a("strong"),HOe=o("encoder-decoder"),UOe=o(" \u2014 "),Q$=a("a"),JOe=o("EncoderDecoderConfig"),YOe=o(" (Encoder decoder model)"),KOe=l(),Wf=a("li"),Pee=a("strong"),ZOe=o("flaubert"),eVe=o(" \u2014 "),W$=a("a"),oVe=o("FlaubertConfig"),rVe=o(" (FlauBERT model)"),tVe=l(),Hf=a("li"),Bee=a("strong"),aVe=o("flava"),nVe=o(" \u2014 "),H$=a("a"),sVe=o("FlavaConfig"),lVe=o(" (Flava model)"),iVe=l(),Uf=a("li"),Iee=a("strong"),dVe=o("fnet"),cVe=o(" \u2014 "),U$=a("a"),fVe=o("FNetConfig"),mVe=o(" (FNet model)"),gVe=l(),Jf=a("li"),qee=a("strong"),hVe=o("fsmt"),pVe=o(" \u2014 "),J$=a("a"),uVe=o("FSMTConfig"),_Ve=o(" (FairSeq Machine-Translation model)"),bVe=l(),Yf=a("li"),Nee=a("strong"),vVe=o("funnel"),FVe=o(" \u2014 "),Y$=a("a"),TVe=o("FunnelConfig"),MVe=o(" (Funnel Transformer model)"),EVe=l(),Kf=a("li"),jee=a("strong"),CVe=o("glpn"),wVe=o(" \u2014 "),K$=a("a"),AVe=o("GLPNConfig"),yVe=o(" (GLPN model)"),LVe=l(),Zf=a("li"),Dee=a("strong"),xVe=o("gpt2"),$Ve=o(" \u2014 "),Z$=a("a"),kVe=o("GPT2Config"),SVe=o(" (OpenAI GPT-2 model)"),RVe=l(),em=a("li"),Gee=a("strong"),PVe=o("gpt_neo"),BVe=o(" \u2014 "),ek=a("a"),IVe=o("GPTNeoConfig"),qVe=o(" (GPT Neo model)"),NVe=l(),om=a("li"),Oee=a("strong"),jVe=o("gptj"),DVe=o(" \u2014 "),ok=a("a"),GVe=o("GPTJConfig"),OVe=o(" (GPT-J model)"),VVe=l(),rm=a("li"),Vee=a("strong"),XVe=o("hubert"),zVe=o(" \u2014 "),rk=a("a"),QVe=o("HubertConfig"),WVe=o(" (Hubert model)"),HVe=l(),tm=a("li"),Xee=a("strong"),UVe=o("ibert"),JVe=o(" \u2014 "),tk=a("a"),YVe=o("IBertConfig"),KVe=o(" (I-BERT model)"),ZVe=l(),am=a("li"),zee=a("strong"),eXe=o("imagegpt"),oXe=o(" \u2014 "),ak=a("a"),rXe=o("ImageGPTConfig"),tXe=o(" (ImageGPT model)"),aXe=l(),nm=a("li"),Qee=a("strong"),nXe=o("layoutlm"),sXe=o(" \u2014 "),nk=a("a"),lXe=o("LayoutLMConfig"),iXe=o(" (LayoutLM model)"),dXe=l(),sm=a("li"),Wee=a("strong"),cXe=o("layoutlmv2"),fXe=o(" \u2014 "),sk=a("a"),mXe=o("LayoutLMv2Config"),gXe=o(" (LayoutLMv2 model)"),hXe=l(),lm=a("li"),Hee=a("strong"),pXe=o("led"),uXe=o(" \u2014 "),lk=a("a"),_Xe=o("LEDConfig"),bXe=o(" (LED model)"),vXe=l(),im=a("li"),Uee=a("strong"),FXe=o("longformer"),TXe=o(" \u2014 "),ik=a("a"),MXe=o("LongformerConfig"),EXe=o(" (Longformer model)"),CXe=l(),dm=a("li"),Jee=a("strong"),wXe=o("luke"),AXe=o(" \u2014 "),dk=a("a"),yXe=o("LukeConfig"),LXe=o(" (LUKE model)"),xXe=l(),cm=a("li"),Yee=a("strong"),$Xe=o("lxmert"),kXe=o(" \u2014 "),ck=a("a"),SXe=o("LxmertConfig"),RXe=o(" (LXMERT model)"),PXe=l(),fm=a("li"),Kee=a("strong"),BXe=o("m2m_100"),IXe=o(" \u2014 "),fk=a("a"),qXe=o("M2M100Config"),NXe=o(" (M2M100 model)"),jXe=l(),mm=a("li"),Zee=a("strong"),DXe=o("marian"),GXe=o(" \u2014 "),mk=a("a"),OXe=o("MarianConfig"),VXe=o(" (Marian model)"),XXe=l(),gm=a("li"),eoe=a("strong"),zXe=o("maskformer"),QXe=o(" \u2014 "),gk=a("a"),WXe=o("MaskFormerConfig"),HXe=o(" (MaskFormer model)"),UXe=l(),hm=a("li"),ooe=a("strong"),JXe=o("mbart"),YXe=o(" \u2014 "),hk=a("a"),KXe=o("MBartConfig"),ZXe=o(" (mBART model)"),eze=l(),pm=a("li"),roe=a("strong"),oze=o("megatron-bert"),rze=o(" \u2014 "),pk=a("a"),tze=o("MegatronBertConfig"),aze=o(" (MegatronBert model)"),nze=l(),um=a("li"),toe=a("strong"),sze=o("mobilebert"),lze=o(" \u2014 "),uk=a("a"),ize=o("MobileBertConfig"),dze=o(" (MobileBERT model)"),cze=l(),_m=a("li"),aoe=a("strong"),fze=o("mpnet"),mze=o(" \u2014 "),_k=a("a"),gze=o("MPNetConfig"),hze=o(" (MPNet model)"),pze=l(),bm=a("li"),noe=a("strong"),uze=o("mt5"),_ze=o(" \u2014 "),bk=a("a"),bze=o("MT5Config"),vze=o(" (mT5 model)"),Fze=l(),vm=a("li"),soe=a("strong"),Tze=o("nystromformer"),Mze=o(" \u2014 "),vk=a("a"),Eze=o("NystromformerConfig"),Cze=o(" (Nystromformer model)"),wze=l(),Fm=a("li"),loe=a("strong"),Aze=o("openai-gpt"),yze=o(" \u2014 "),Fk=a("a"),Lze=o("OpenAIGPTConfig"),xze=o(" (OpenAI GPT model)"),$ze=l(),Tm=a("li"),ioe=a("strong"),kze=o("opt"),Sze=o(" \u2014 "),Tk=a("a"),Rze=o("OPTConfig"),Pze=o(" (OPT model)"),Bze=l(),Mm=a("li"),doe=a("strong"),Ize=o("pegasus"),qze=o(" \u2014 "),Mk=a("a"),Nze=o("PegasusConfig"),jze=o(" (Pegasus model)"),Dze=l(),Em=a("li"),coe=a("strong"),Gze=o("perceiver"),Oze=o(" \u2014 "),Ek=a("a"),Vze=o("PerceiverConfig"),Xze=o(" (Perceiver model)"),zze=l(),Cm=a("li"),foe=a("strong"),Qze=o("plbart"),Wze=o(" \u2014 "),Ck=a("a"),Hze=o("PLBartConfig"),Uze=o(" (PLBart model)"),Jze=l(),wm=a("li"),moe=a("strong"),Yze=o("poolformer"),Kze=o(" \u2014 "),wk=a("a"),Zze=o("PoolFormerConfig"),eQe=o(" (PoolFormer model)"),oQe=l(),Am=a("li"),goe=a("strong"),rQe=o("prophetnet"),tQe=o(" \u2014 "),Ak=a("a"),aQe=o("ProphetNetConfig"),nQe=o(" (ProphetNet model)"),sQe=l(),ym=a("li"),hoe=a("strong"),lQe=o("qdqbert"),iQe=o(" \u2014 "),yk=a("a"),dQe=o("QDQBertConfig"),cQe=o(" (QDQBert model)"),fQe=l(),Lm=a("li"),poe=a("strong"),mQe=o("rag"),gQe=o(" \u2014 "),Lk=a("a"),hQe=o("RagConfig"),pQe=o(" (RAG model)"),uQe=l(),xm=a("li"),uoe=a("strong"),_Qe=o("realm"),bQe=o(" \u2014 "),xk=a("a"),vQe=o("RealmConfig"),FQe=o(" (Realm model)"),TQe=l(),$m=a("li"),_oe=a("strong"),MQe=o("reformer"),EQe=o(" \u2014 "),$k=a("a"),CQe=o("ReformerConfig"),wQe=o(" (Reformer model)"),AQe=l(),km=a("li"),boe=a("strong"),yQe=o("regnet"),LQe=o(" \u2014 "),kk=a("a"),xQe=o("RegNetConfig"),$Qe=o(" (RegNet model)"),kQe=l(),Sm=a("li"),voe=a("strong"),SQe=o("rembert"),RQe=o(" \u2014 "),Sk=a("a"),PQe=o("RemBertConfig"),BQe=o(" (RemBERT model)"),IQe=l(),Rm=a("li"),Foe=a("strong"),qQe=o("resnet"),NQe=o(" \u2014 "),Rk=a("a"),jQe=o("ResNetConfig"),DQe=o(" (ResNet model)"),GQe=l(),Pm=a("li"),Toe=a("strong"),OQe=o("retribert"),VQe=o(" \u2014 "),Pk=a("a"),XQe=o("RetriBertConfig"),zQe=o(" (RetriBERT model)"),QQe=l(),Bm=a("li"),Moe=a("strong"),WQe=o("roberta"),HQe=o(" \u2014 "),Bk=a("a"),UQe=o("RobertaConfig"),JQe=o(" (RoBERTa model)"),YQe=l(),Im=a("li"),Eoe=a("strong"),KQe=o("roformer"),ZQe=o(" \u2014 "),Ik=a("a"),eWe=o("RoFormerConfig"),oWe=o(" (RoFormer model)"),rWe=l(),qm=a("li"),Coe=a("strong"),tWe=o("segformer"),aWe=o(" \u2014 "),qk=a("a"),nWe=o("SegformerConfig"),sWe=o(" (SegFormer model)"),lWe=l(),Nm=a("li"),woe=a("strong"),iWe=o("sew"),dWe=o(" \u2014 "),Nk=a("a"),cWe=o("SEWConfig"),fWe=o(" (SEW model)"),mWe=l(),jm=a("li"),Aoe=a("strong"),gWe=o("sew-d"),hWe=o(" \u2014 "),jk=a("a"),pWe=o("SEWDConfig"),uWe=o(" (SEW-D model)"),_We=l(),Dm=a("li"),yoe=a("strong"),bWe=o("speech-encoder-decoder"),vWe=o(" \u2014 "),Dk=a("a"),FWe=o("SpeechEncoderDecoderConfig"),TWe=o(" (Speech Encoder decoder model)"),MWe=l(),Gm=a("li"),Loe=a("strong"),EWe=o("speech_to_text"),CWe=o(" \u2014 "),Gk=a("a"),wWe=o("Speech2TextConfig"),AWe=o(" (Speech2Text model)"),yWe=l(),Om=a("li"),xoe=a("strong"),LWe=o("speech_to_text_2"),xWe=o(" \u2014 "),Ok=a("a"),$We=o("Speech2Text2Config"),kWe=o(" (Speech2Text2 model)"),SWe=l(),Vm=a("li"),$oe=a("strong"),RWe=o("splinter"),PWe=o(" \u2014 "),Vk=a("a"),BWe=o("SplinterConfig"),IWe=o(" (Splinter model)"),qWe=l(),Xm=a("li"),koe=a("strong"),NWe=o("squeezebert"),jWe=o(" \u2014 "),Xk=a("a"),DWe=o("SqueezeBertConfig"),GWe=o(" (SqueezeBERT model)"),OWe=l(),zm=a("li"),Soe=a("strong"),VWe=o("swin"),XWe=o(" \u2014 "),zk=a("a"),zWe=o("SwinConfig"),QWe=o(" (Swin model)"),WWe=l(),Qm=a("li"),Roe=a("strong"),HWe=o("t5"),UWe=o(" \u2014 "),Qk=a("a"),JWe=o("T5Config"),YWe=o(" (T5 model)"),KWe=l(),Wm=a("li"),Poe=a("strong"),ZWe=o("tapas"),eHe=o(" \u2014 "),Wk=a("a"),oHe=o("TapasConfig"),rHe=o(" (TAPAS model)"),tHe=l(),Hm=a("li"),Boe=a("strong"),aHe=o("transfo-xl"),nHe=o(" \u2014 "),Hk=a("a"),sHe=o("TransfoXLConfig"),lHe=o(" (Transformer-XL model)"),iHe=l(),Um=a("li"),Ioe=a("strong"),dHe=o("trocr"),cHe=o(" \u2014 "),Uk=a("a"),fHe=o("TrOCRConfig"),mHe=o(" (TrOCR model)"),gHe=l(),Jm=a("li"),qoe=a("strong"),hHe=o("unispeech"),pHe=o(" \u2014 "),Jk=a("a"),uHe=o("UniSpeechConfig"),_He=o(" (UniSpeech model)"),bHe=l(),Ym=a("li"),Noe=a("strong"),vHe=o("unispeech-sat"),FHe=o(" \u2014 "),Yk=a("a"),THe=o("UniSpeechSatConfig"),MHe=o(" (UniSpeechSat model)"),EHe=l(),Km=a("li"),joe=a("strong"),CHe=o("van"),wHe=o(" \u2014 "),Kk=a("a"),AHe=o("VanConfig"),yHe=o(" (VAN model)"),LHe=l(),Zm=a("li"),Doe=a("strong"),xHe=o("vilt"),$He=o(" \u2014 "),Zk=a("a"),kHe=o("ViltConfig"),SHe=o(" (ViLT model)"),RHe=l(),eg=a("li"),Goe=a("strong"),PHe=o("vision-encoder-decoder"),BHe=o(" \u2014 "),eS=a("a"),IHe=o("VisionEncoderDecoderConfig"),qHe=o(" (Vision Encoder decoder model)"),NHe=l(),og=a("li"),Ooe=a("strong"),jHe=o("vision-text-dual-encoder"),DHe=o(" \u2014 "),oS=a("a"),GHe=o("VisionTextDualEncoderConfig"),OHe=o(" (VisionTextDualEncoder model)"),VHe=l(),rg=a("li"),Voe=a("strong"),XHe=o("visual_bert"),zHe=o(" \u2014 "),rS=a("a"),QHe=o("VisualBertConfig"),WHe=o(" (VisualBert model)"),HHe=l(),tg=a("li"),Xoe=a("strong"),UHe=o("vit"),JHe=o(" \u2014 "),tS=a("a"),YHe=o("ViTConfig"),KHe=o(" (ViT model)"),ZHe=l(),ag=a("li"),zoe=a("strong"),eUe=o("vit_mae"),oUe=o(" \u2014 "),aS=a("a"),rUe=o("ViTMAEConfig"),tUe=o(" (ViTMAE model)"),aUe=l(),ng=a("li"),Qoe=a("strong"),nUe=o("wav2vec2"),sUe=o(" \u2014 "),nS=a("a"),lUe=o("Wav2Vec2Config"),iUe=o(" (Wav2Vec2 model)"),dUe=l(),sg=a("li"),Woe=a("strong"),cUe=o("wavlm"),fUe=o(" \u2014 "),sS=a("a"),mUe=o("WavLMConfig"),gUe=o(" (WavLM model)"),hUe=l(),lg=a("li"),Hoe=a("strong"),pUe=o("xglm"),uUe=o(" \u2014 "),lS=a("a"),_Ue=o("XGLMConfig"),bUe=o(" (XGLM model)"),vUe=l(),ig=a("li"),Uoe=a("strong"),FUe=o("xlm"),TUe=o(" \u2014 "),iS=a("a"),MUe=o("XLMConfig"),EUe=o(" (XLM model)"),CUe=l(),dg=a("li"),Joe=a("strong"),wUe=o("xlm-prophetnet"),AUe=o(" \u2014 "),dS=a("a"),yUe=o("XLMProphetNetConfig"),LUe=o(" (XLMProphetNet model)"),xUe=l(),cg=a("li"),Yoe=a("strong"),$Ue=o("xlm-roberta"),kUe=o(" \u2014 "),cS=a("a"),SUe=o("XLMRobertaConfig"),RUe=o(" (XLM-RoBERTa model)"),PUe=l(),fg=a("li"),Koe=a("strong"),BUe=o("xlm-roberta-xl"),IUe=o(" \u2014 "),fS=a("a"),qUe=o("XLMRobertaXLConfig"),NUe=o(" (XLM-RoBERTa-XL model)"),jUe=l(),mg=a("li"),Zoe=a("strong"),DUe=o("xlnet"),GUe=o(" \u2014 "),mS=a("a"),OUe=o("XLNetConfig"),VUe=o(" (XLNet model)"),XUe=l(),gg=a("li"),ere=a("strong"),zUe=o("yolos"),QUe=o(" \u2014 "),gS=a("a"),WUe=o("YolosConfig"),HUe=o(" (YOLOS model)"),UUe=l(),hg=a("li"),ore=a("strong"),JUe=o("yoso"),YUe=o(" \u2014 "),hS=a("a"),KUe=o("YosoConfig"),ZUe=o(" (YOSO model)"),eJe=l(),F(pg.$$.fragment),oJe=l(),ug=a("div"),F(r6.$$.fragment),rJe=l(),rre=a("p"),tJe=o("Register a new configuration for this class."),OBe=l(),_i=a("h2"),_g=a("a"),tre=a("span"),F(t6.$$.fragment),aJe=l(),are=a("span"),nJe=o("AutoTokenizer"),VBe=l(),wo=a("div"),F(a6.$$.fragment),sJe=l(),n6=a("p"),lJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pS=a("a"),iJe=o("AutoTokenizer.from_pretrained()"),dJe=o(" class method."),cJe=l(),s6=a("p"),fJe=o("This class cannot be instantiated directly using "),nre=a("code"),mJe=o("__init__()"),gJe=o(" (throws an error)."),hJe=l(),Cr=a("div"),F(l6.$$.fragment),pJe=l(),sre=a("p"),uJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_Je=l(),Ca=a("p"),bJe=o("The tokenizer class to instantiate is selected based on the "),lre=a("code"),vJe=o("model_type"),FJe=o(` property of the config object (either
passed as an argument or loaded from `),ire=a("code"),TJe=o("pretrained_model_name_or_path"),MJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dre=a("code"),EJe=o("pretrained_model_name_or_path"),CJe=o(":"),wJe=l(),k=a("ul"),kn=a("li"),cre=a("strong"),AJe=o("albert"),yJe=o(" \u2014 "),uS=a("a"),LJe=o("AlbertTokenizer"),xJe=o(" or "),_S=a("a"),$Je=o("AlbertTokenizerFast"),kJe=o(" (ALBERT model)"),SJe=l(),Sn=a("li"),fre=a("strong"),RJe=o("bart"),PJe=o(" \u2014 "),bS=a("a"),BJe=o("BartTokenizer"),IJe=o(" or "),vS=a("a"),qJe=o("BartTokenizerFast"),NJe=o(" (BART model)"),jJe=l(),Rn=a("li"),mre=a("strong"),DJe=o("barthez"),GJe=o(" \u2014 "),FS=a("a"),OJe=o("BarthezTokenizer"),VJe=o(" or "),TS=a("a"),XJe=o("BarthezTokenizerFast"),zJe=o(" (BARThez model)"),QJe=l(),bg=a("li"),gre=a("strong"),WJe=o("bartpho"),HJe=o(" \u2014 "),MS=a("a"),UJe=o("BartphoTokenizer"),JJe=o(" (BARTpho model)"),YJe=l(),Pn=a("li"),hre=a("strong"),KJe=o("bert"),ZJe=o(" \u2014 "),ES=a("a"),eYe=o("BertTokenizer"),oYe=o(" or "),CS=a("a"),rYe=o("BertTokenizerFast"),tYe=o(" (BERT model)"),aYe=l(),vg=a("li"),pre=a("strong"),nYe=o("bert-generation"),sYe=o(" \u2014 "),wS=a("a"),lYe=o("BertGenerationTokenizer"),iYe=o(" (Bert Generation model)"),dYe=l(),Fg=a("li"),ure=a("strong"),cYe=o("bert-japanese"),fYe=o(" \u2014 "),AS=a("a"),mYe=o("BertJapaneseTokenizer"),gYe=o(" (BertJapanese model)"),hYe=l(),Tg=a("li"),_re=a("strong"),pYe=o("bertweet"),uYe=o(" \u2014 "),yS=a("a"),_Ye=o("BertweetTokenizer"),bYe=o(" (Bertweet model)"),vYe=l(),Bn=a("li"),bre=a("strong"),FYe=o("big_bird"),TYe=o(" \u2014 "),LS=a("a"),MYe=o("BigBirdTokenizer"),EYe=o(" or "),xS=a("a"),CYe=o("BigBirdTokenizerFast"),wYe=o(" (BigBird model)"),AYe=l(),In=a("li"),vre=a("strong"),yYe=o("bigbird_pegasus"),LYe=o(" \u2014 "),$S=a("a"),xYe=o("PegasusTokenizer"),$Ye=o(" or "),kS=a("a"),kYe=o("PegasusTokenizerFast"),SYe=o(" (BigBirdPegasus model)"),RYe=l(),qn=a("li"),Fre=a("strong"),PYe=o("blenderbot"),BYe=o(" \u2014 "),SS=a("a"),IYe=o("BlenderbotTokenizer"),qYe=o(" or "),RS=a("a"),NYe=o("BlenderbotTokenizerFast"),jYe=o(" (Blenderbot model)"),DYe=l(),Mg=a("li"),Tre=a("strong"),GYe=o("blenderbot-small"),OYe=o(" \u2014 "),PS=a("a"),VYe=o("BlenderbotSmallTokenizer"),XYe=o(" (BlenderbotSmall model)"),zYe=l(),Eg=a("li"),Mre=a("strong"),QYe=o("byt5"),WYe=o(" \u2014 "),BS=a("a"),HYe=o("ByT5Tokenizer"),UYe=o(" (ByT5 model)"),JYe=l(),Nn=a("li"),Ere=a("strong"),YYe=o("camembert"),KYe=o(" \u2014 "),IS=a("a"),ZYe=o("CamembertTokenizer"),eKe=o(" or "),qS=a("a"),oKe=o("CamembertTokenizerFast"),rKe=o(" (CamemBERT model)"),tKe=l(),Cg=a("li"),Cre=a("strong"),aKe=o("canine"),nKe=o(" \u2014 "),NS=a("a"),sKe=o("CanineTokenizer"),lKe=o(" (Canine model)"),iKe=l(),jn=a("li"),wre=a("strong"),dKe=o("clip"),cKe=o(" \u2014 "),jS=a("a"),fKe=o("CLIPTokenizer"),mKe=o(" or "),DS=a("a"),gKe=o("CLIPTokenizerFast"),hKe=o(" (CLIP model)"),pKe=l(),Dn=a("li"),Are=a("strong"),uKe=o("convbert"),_Ke=o(" \u2014 "),GS=a("a"),bKe=o("ConvBertTokenizer"),vKe=o(" or "),OS=a("a"),FKe=o("ConvBertTokenizerFast"),TKe=o(" (ConvBERT model)"),MKe=l(),Gn=a("li"),yre=a("strong"),EKe=o("cpm"),CKe=o(" \u2014 "),VS=a("a"),wKe=o("CpmTokenizer"),AKe=o(" or "),XS=a("a"),yKe=o("CpmTokenizerFast"),LKe=o(" (CPM model)"),xKe=l(),wg=a("li"),Lre=a("strong"),$Ke=o("ctrl"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("CTRLTokenizer"),RKe=o(" (CTRL model)"),PKe=l(),On=a("li"),xre=a("strong"),BKe=o("data2vec-text"),IKe=o(" \u2014 "),QS=a("a"),qKe=o("RobertaTokenizer"),NKe=o(" or "),WS=a("a"),jKe=o("RobertaTokenizerFast"),DKe=o(" (Data2VecText model)"),GKe=l(),Vn=a("li"),$re=a("strong"),OKe=o("deberta"),VKe=o(" \u2014 "),HS=a("a"),XKe=o("DebertaTokenizer"),zKe=o(" or "),US=a("a"),QKe=o("DebertaTokenizerFast"),WKe=o(" (DeBERTa model)"),HKe=l(),Xn=a("li"),kre=a("strong"),UKe=o("deberta-v2"),JKe=o(" \u2014 "),JS=a("a"),YKe=o("DebertaV2Tokenizer"),KKe=o(" or "),YS=a("a"),ZKe=o("DebertaV2TokenizerFast"),eZe=o(" (DeBERTa-v2 model)"),oZe=l(),zn=a("li"),Sre=a("strong"),rZe=o("distilbert"),tZe=o(" \u2014 "),KS=a("a"),aZe=o("DistilBertTokenizer"),nZe=o(" or "),ZS=a("a"),sZe=o("DistilBertTokenizerFast"),lZe=o(" (DistilBERT model)"),iZe=l(),Qn=a("li"),Rre=a("strong"),dZe=o("dpr"),cZe=o(" \u2014 "),eR=a("a"),fZe=o("DPRQuestionEncoderTokenizer"),mZe=o(" or "),oR=a("a"),gZe=o("DPRQuestionEncoderTokenizerFast"),hZe=o(" (DPR model)"),pZe=l(),Wn=a("li"),Pre=a("strong"),uZe=o("electra"),_Ze=o(" \u2014 "),rR=a("a"),bZe=o("ElectraTokenizer"),vZe=o(" or "),tR=a("a"),FZe=o("ElectraTokenizerFast"),TZe=o(" (ELECTRA model)"),MZe=l(),Ag=a("li"),Bre=a("strong"),EZe=o("flaubert"),CZe=o(" \u2014 "),aR=a("a"),wZe=o("FlaubertTokenizer"),AZe=o(" (FlauBERT model)"),yZe=l(),Hn=a("li"),Ire=a("strong"),LZe=o("fnet"),xZe=o(" \u2014 "),nR=a("a"),$Ze=o("FNetTokenizer"),kZe=o(" or "),sR=a("a"),SZe=o("FNetTokenizerFast"),RZe=o(" (FNet model)"),PZe=l(),yg=a("li"),qre=a("strong"),BZe=o("fsmt"),IZe=o(" \u2014 "),lR=a("a"),qZe=o("FSMTTokenizer"),NZe=o(" (FairSeq Machine-Translation model)"),jZe=l(),Un=a("li"),Nre=a("strong"),DZe=o("funnel"),GZe=o(" \u2014 "),iR=a("a"),OZe=o("FunnelTokenizer"),VZe=o(" or "),dR=a("a"),XZe=o("FunnelTokenizerFast"),zZe=o(" (Funnel Transformer model)"),QZe=l(),Jn=a("li"),jre=a("strong"),WZe=o("gpt2"),HZe=o(" \u2014 "),cR=a("a"),UZe=o("GPT2Tokenizer"),JZe=o(" or "),fR=a("a"),YZe=o("GPT2TokenizerFast"),KZe=o(" (OpenAI GPT-2 model)"),ZZe=l(),Yn=a("li"),Dre=a("strong"),eeo=o("gpt_neo"),oeo=o(" \u2014 "),mR=a("a"),reo=o("GPT2Tokenizer"),teo=o(" or "),gR=a("a"),aeo=o("GPT2TokenizerFast"),neo=o(" (GPT Neo model)"),seo=l(),Kn=a("li"),Gre=a("strong"),leo=o("gptj"),ieo=o(" \u2014 "),hR=a("a"),deo=o("GPT2Tokenizer"),ceo=o(" or "),pR=a("a"),feo=o("GPT2TokenizerFast"),meo=o(" (GPT-J model)"),geo=l(),Zn=a("li"),Ore=a("strong"),heo=o("herbert"),peo=o(" \u2014 "),uR=a("a"),ueo=o("HerbertTokenizer"),_eo=o(" or "),_R=a("a"),beo=o("HerbertTokenizerFast"),veo=o(" (HerBERT model)"),Feo=l(),Lg=a("li"),Vre=a("strong"),Teo=o("hubert"),Meo=o(" \u2014 "),bR=a("a"),Eeo=o("Wav2Vec2CTCTokenizer"),Ceo=o(" (Hubert model)"),weo=l(),es=a("li"),Xre=a("strong"),Aeo=o("ibert"),yeo=o(" \u2014 "),vR=a("a"),Leo=o("RobertaTokenizer"),xeo=o(" or "),FR=a("a"),$eo=o("RobertaTokenizerFast"),keo=o(" (I-BERT model)"),Seo=l(),os=a("li"),zre=a("strong"),Reo=o("layoutlm"),Peo=o(" \u2014 "),TR=a("a"),Beo=o("LayoutLMTokenizer"),Ieo=o(" or "),MR=a("a"),qeo=o("LayoutLMTokenizerFast"),Neo=o(" (LayoutLM model)"),jeo=l(),rs=a("li"),Qre=a("strong"),Deo=o("layoutlmv2"),Geo=o(" \u2014 "),ER=a("a"),Oeo=o("LayoutLMv2Tokenizer"),Veo=o(" or "),CR=a("a"),Xeo=o("LayoutLMv2TokenizerFast"),zeo=o(" (LayoutLMv2 model)"),Qeo=l(),ts=a("li"),Wre=a("strong"),Weo=o("layoutxlm"),Heo=o(" \u2014 "),wR=a("a"),Ueo=o("LayoutXLMTokenizer"),Jeo=o(" or "),AR=a("a"),Yeo=o("LayoutXLMTokenizerFast"),Keo=o(" (LayoutXLM model)"),Zeo=l(),as=a("li"),Hre=a("strong"),eoo=o("led"),ooo=o(" \u2014 "),yR=a("a"),roo=o("LEDTokenizer"),too=o(" or "),LR=a("a"),aoo=o("LEDTokenizerFast"),noo=o(" (LED model)"),soo=l(),ns=a("li"),Ure=a("strong"),loo=o("longformer"),ioo=o(" \u2014 "),xR=a("a"),doo=o("LongformerTokenizer"),coo=o(" or "),$R=a("a"),foo=o("LongformerTokenizerFast"),moo=o(" (Longformer model)"),goo=l(),xg=a("li"),Jre=a("strong"),hoo=o("luke"),poo=o(" \u2014 "),kR=a("a"),uoo=o("LukeTokenizer"),_oo=o(" (LUKE model)"),boo=l(),ss=a("li"),Yre=a("strong"),voo=o("lxmert"),Foo=o(" \u2014 "),SR=a("a"),Too=o("LxmertTokenizer"),Moo=o(" or "),RR=a("a"),Eoo=o("LxmertTokenizerFast"),Coo=o(" (LXMERT model)"),woo=l(),$g=a("li"),Kre=a("strong"),Aoo=o("m2m_100"),yoo=o(" \u2014 "),PR=a("a"),Loo=o("M2M100Tokenizer"),xoo=o(" (M2M100 model)"),$oo=l(),kg=a("li"),Zre=a("strong"),koo=o("marian"),Soo=o(" \u2014 "),BR=a("a"),Roo=o("MarianTokenizer"),Poo=o(" (Marian model)"),Boo=l(),ls=a("li"),ete=a("strong"),Ioo=o("mbart"),qoo=o(" \u2014 "),IR=a("a"),Noo=o("MBartTokenizer"),joo=o(" or "),qR=a("a"),Doo=o("MBartTokenizerFast"),Goo=o(" (mBART model)"),Ooo=l(),is=a("li"),ote=a("strong"),Voo=o("mbart50"),Xoo=o(" \u2014 "),NR=a("a"),zoo=o("MBart50Tokenizer"),Qoo=o(" or "),jR=a("a"),Woo=o("MBart50TokenizerFast"),Hoo=o(" (mBART-50 model)"),Uoo=l(),ds=a("li"),rte=a("strong"),Joo=o("megatron-bert"),Yoo=o(" \u2014 "),DR=a("a"),Koo=o("BertTokenizer"),Zoo=o(" or "),GR=a("a"),ero=o("BertTokenizerFast"),oro=o(" (MegatronBert model)"),rro=l(),Sg=a("li"),tte=a("strong"),tro=o("mluke"),aro=o(" \u2014 "),OR=a("a"),nro=o("MLukeTokenizer"),sro=o(" (mLUKE model)"),lro=l(),cs=a("li"),ate=a("strong"),iro=o("mobilebert"),dro=o(" \u2014 "),VR=a("a"),cro=o("MobileBertTokenizer"),fro=o(" or "),XR=a("a"),mro=o("MobileBertTokenizerFast"),gro=o(" (MobileBERT model)"),hro=l(),fs=a("li"),nte=a("strong"),pro=o("mpnet"),uro=o(" \u2014 "),zR=a("a"),_ro=o("MPNetTokenizer"),bro=o(" or "),QR=a("a"),vro=o("MPNetTokenizerFast"),Fro=o(" (MPNet model)"),Tro=l(),ms=a("li"),ste=a("strong"),Mro=o("mt5"),Ero=o(" \u2014 "),WR=a("a"),Cro=o("MT5Tokenizer"),wro=o(" or "),HR=a("a"),Aro=o("MT5TokenizerFast"),yro=o(" (mT5 model)"),Lro=l(),gs=a("li"),lte=a("strong"),xro=o("nystromformer"),$ro=o(" \u2014 "),UR=a("a"),kro=o("AlbertTokenizer"),Sro=o(" or "),JR=a("a"),Rro=o("AlbertTokenizerFast"),Pro=o(" (Nystromformer model)"),Bro=l(),hs=a("li"),ite=a("strong"),Iro=o("openai-gpt"),qro=o(" \u2014 "),YR=a("a"),Nro=o("OpenAIGPTTokenizer"),jro=o(" or "),KR=a("a"),Dro=o("OpenAIGPTTokenizerFast"),Gro=o(" (OpenAI GPT model)"),Oro=l(),Rg=a("li"),dte=a("strong"),Vro=o("opt"),Xro=o(" \u2014 "),ZR=a("a"),zro=o("GPT2Tokenizer"),Qro=o(" (OPT model)"),Wro=l(),ps=a("li"),cte=a("strong"),Hro=o("pegasus"),Uro=o(" \u2014 "),eP=a("a"),Jro=o("PegasusTokenizer"),Yro=o(" or "),oP=a("a"),Kro=o("PegasusTokenizerFast"),Zro=o(" (Pegasus model)"),eto=l(),Pg=a("li"),fte=a("strong"),oto=o("perceiver"),rto=o(" \u2014 "),rP=a("a"),tto=o("PerceiverTokenizer"),ato=o(" (Perceiver model)"),nto=l(),Bg=a("li"),mte=a("strong"),sto=o("phobert"),lto=o(" \u2014 "),tP=a("a"),ito=o("PhobertTokenizer"),dto=o(" (PhoBERT model)"),cto=l(),Ig=a("li"),gte=a("strong"),fto=o("plbart"),mto=o(" \u2014 "),aP=a("a"),gto=o("PLBartTokenizer"),hto=o(" (PLBart model)"),pto=l(),qg=a("li"),hte=a("strong"),uto=o("prophetnet"),_to=o(" \u2014 "),nP=a("a"),bto=o("ProphetNetTokenizer"),vto=o(" (ProphetNet model)"),Fto=l(),us=a("li"),pte=a("strong"),Tto=o("qdqbert"),Mto=o(" \u2014 "),sP=a("a"),Eto=o("BertTokenizer"),Cto=o(" or "),lP=a("a"),wto=o("BertTokenizerFast"),Ato=o(" (QDQBert model)"),yto=l(),Ng=a("li"),ute=a("strong"),Lto=o("rag"),xto=o(" \u2014 "),iP=a("a"),$to=o("RagTokenizer"),kto=o(" (RAG model)"),Sto=l(),_s=a("li"),_te=a("strong"),Rto=o("realm"),Pto=o(" \u2014 "),dP=a("a"),Bto=o("RealmTokenizer"),Ito=o(" or "),cP=a("a"),qto=o("RealmTokenizerFast"),Nto=o(" (Realm model)"),jto=l(),bs=a("li"),bte=a("strong"),Dto=o("reformer"),Gto=o(" \u2014 "),fP=a("a"),Oto=o("ReformerTokenizer"),Vto=o(" or "),mP=a("a"),Xto=o("ReformerTokenizerFast"),zto=o(" (Reformer model)"),Qto=l(),vs=a("li"),vte=a("strong"),Wto=o("rembert"),Hto=o(" \u2014 "),gP=a("a"),Uto=o("RemBertTokenizer"),Jto=o(" or "),hP=a("a"),Yto=o("RemBertTokenizerFast"),Kto=o(" (RemBERT model)"),Zto=l(),Fs=a("li"),Fte=a("strong"),eao=o("retribert"),oao=o(" \u2014 "),pP=a("a"),rao=o("RetriBertTokenizer"),tao=o(" or "),uP=a("a"),aao=o("RetriBertTokenizerFast"),nao=o(" (RetriBERT model)"),sao=l(),Ts=a("li"),Tte=a("strong"),lao=o("roberta"),iao=o(" \u2014 "),_P=a("a"),dao=o("RobertaTokenizer"),cao=o(" or "),bP=a("a"),fao=o("RobertaTokenizerFast"),mao=o(" (RoBERTa model)"),gao=l(),Ms=a("li"),Mte=a("strong"),hao=o("roformer"),pao=o(" \u2014 "),vP=a("a"),uao=o("RoFormerTokenizer"),_ao=o(" or "),FP=a("a"),bao=o("RoFormerTokenizerFast"),vao=o(" (RoFormer model)"),Fao=l(),jg=a("li"),Ete=a("strong"),Tao=o("speech_to_text"),Mao=o(" \u2014 "),TP=a("a"),Eao=o("Speech2TextTokenizer"),Cao=o(" (Speech2Text model)"),wao=l(),Dg=a("li"),Cte=a("strong"),Aao=o("speech_to_text_2"),yao=o(" \u2014 "),MP=a("a"),Lao=o("Speech2Text2Tokenizer"),xao=o(" (Speech2Text2 model)"),$ao=l(),Es=a("li"),wte=a("strong"),kao=o("splinter"),Sao=o(" \u2014 "),EP=a("a"),Rao=o("SplinterTokenizer"),Pao=o(" or "),CP=a("a"),Bao=o("SplinterTokenizerFast"),Iao=o(" (Splinter model)"),qao=l(),Cs=a("li"),Ate=a("strong"),Nao=o("squeezebert"),jao=o(" \u2014 "),wP=a("a"),Dao=o("SqueezeBertTokenizer"),Gao=o(" or "),AP=a("a"),Oao=o("SqueezeBertTokenizerFast"),Vao=o(" (SqueezeBERT model)"),Xao=l(),ws=a("li"),yte=a("strong"),zao=o("t5"),Qao=o(" \u2014 "),yP=a("a"),Wao=o("T5Tokenizer"),Hao=o(" or "),LP=a("a"),Uao=o("T5TokenizerFast"),Jao=o(" (T5 model)"),Yao=l(),Gg=a("li"),Lte=a("strong"),Kao=o("tapas"),Zao=o(" \u2014 "),xP=a("a"),eno=o("TapasTokenizer"),ono=o(" (TAPAS model)"),rno=l(),Og=a("li"),xte=a("strong"),tno=o("tapex"),ano=o(" \u2014 "),$P=a("a"),nno=o("TapexTokenizer"),sno=o(" (TAPEX model)"),lno=l(),Vg=a("li"),$te=a("strong"),ino=o("transfo-xl"),dno=o(" \u2014 "),kP=a("a"),cno=o("TransfoXLTokenizer"),fno=o(" (Transformer-XL model)"),mno=l(),As=a("li"),kte=a("strong"),gno=o("visual_bert"),hno=o(" \u2014 "),SP=a("a"),pno=o("BertTokenizer"),uno=o(" or "),RP=a("a"),_no=o("BertTokenizerFast"),bno=o(" (VisualBert model)"),vno=l(),Xg=a("li"),Ste=a("strong"),Fno=o("wav2vec2"),Tno=o(" \u2014 "),PP=a("a"),Mno=o("Wav2Vec2CTCTokenizer"),Eno=o(" (Wav2Vec2 model)"),Cno=l(),zg=a("li"),Rte=a("strong"),wno=o("wav2vec2_phoneme"),Ano=o(" \u2014 "),BP=a("a"),yno=o("Wav2Vec2PhonemeCTCTokenizer"),Lno=o(" (Wav2Vec2Phoneme model)"),xno=l(),ys=a("li"),Pte=a("strong"),$no=o("xglm"),kno=o(" \u2014 "),IP=a("a"),Sno=o("XGLMTokenizer"),Rno=o(" or "),qP=a("a"),Pno=o("XGLMTokenizerFast"),Bno=o(" (XGLM model)"),Ino=l(),Qg=a("li"),Bte=a("strong"),qno=o("xlm"),Nno=o(" \u2014 "),NP=a("a"),jno=o("XLMTokenizer"),Dno=o(" (XLM model)"),Gno=l(),Wg=a("li"),Ite=a("strong"),Ono=o("xlm-prophetnet"),Vno=o(" \u2014 "),jP=a("a"),Xno=o("XLMProphetNetTokenizer"),zno=o(" (XLMProphetNet model)"),Qno=l(),Ls=a("li"),qte=a("strong"),Wno=o("xlm-roberta"),Hno=o(" \u2014 "),DP=a("a"),Uno=o("XLMRobertaTokenizer"),Jno=o(" or "),GP=a("a"),Yno=o("XLMRobertaTokenizerFast"),Kno=o(" (XLM-RoBERTa model)"),Zno=l(),xs=a("li"),Nte=a("strong"),eso=o("xlm-roberta-xl"),oso=o(" \u2014 "),OP=a("a"),rso=o("RobertaTokenizer"),tso=o(" or "),VP=a("a"),aso=o("RobertaTokenizerFast"),nso=o(" (XLM-RoBERTa-XL model)"),sso=l(),$s=a("li"),jte=a("strong"),lso=o("xlnet"),iso=o(" \u2014 "),XP=a("a"),dso=o("XLNetTokenizer"),cso=o(" or "),zP=a("a"),fso=o("XLNetTokenizerFast"),mso=o(" (XLNet model)"),gso=l(),ks=a("li"),Dte=a("strong"),hso=o("yoso"),pso=o(" \u2014 "),QP=a("a"),uso=o("AlbertTokenizer"),_so=o(" or "),WP=a("a"),bso=o("AlbertTokenizerFast"),vso=o(" (YOSO model)"),Fso=l(),F(Hg.$$.fragment),Tso=l(),Ug=a("div"),F(i6.$$.fragment),Mso=l(),Gte=a("p"),Eso=o("Register a new tokenizer in this mapping."),XBe=l(),bi=a("h2"),Jg=a("a"),Ote=a("span"),F(d6.$$.fragment),Cso=l(),Vte=a("span"),wso=o("AutoFeatureExtractor"),zBe=l(),Ao=a("div"),F(c6.$$.fragment),Aso=l(),f6=a("p"),yso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HP=a("a"),Lso=o("AutoFeatureExtractor.from_pretrained()"),xso=o(" class method."),$so=l(),m6=a("p"),kso=o("This class cannot be instantiated directly using "),Xte=a("code"),Sso=o("__init__()"),Rso=o(" (throws an error)."),Pso=l(),Qe=a("div"),F(g6.$$.fragment),Bso=l(),zte=a("p"),Iso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qso=l(),wa=a("p"),Nso=o("The feature extractor class to instantiate is selected based on the "),Qte=a("code"),jso=o("model_type"),Dso=o(` property of the config object
(either passed as an argument or loaded from `),Wte=a("code"),Gso=o("pretrained_model_name_or_path"),Oso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hte=a("code"),Vso=o("pretrained_model_name_or_path"),Xso=o(":"),zso=l(),oe=a("ul"),Yg=a("li"),Ute=a("strong"),Qso=o("beit"),Wso=o(" \u2014 "),UP=a("a"),Hso=o("BeitFeatureExtractor"),Uso=o(" (BEiT model)"),Jso=l(),Kg=a("li"),Jte=a("strong"),Yso=o("clip"),Kso=o(" \u2014 "),JP=a("a"),Zso=o("CLIPFeatureExtractor"),elo=o(" (CLIP model)"),olo=l(),Zg=a("li"),Yte=a("strong"),rlo=o("convnext"),tlo=o(" \u2014 "),YP=a("a"),alo=o("ConvNextFeatureExtractor"),nlo=o(" (ConvNext model)"),slo=l(),eh=a("li"),Kte=a("strong"),llo=o("data2vec-audio"),ilo=o(" \u2014 "),KP=a("a"),dlo=o("Wav2Vec2FeatureExtractor"),clo=o(" (Data2VecAudio model)"),flo=l(),oh=a("li"),Zte=a("strong"),mlo=o("data2vec-vision"),glo=o(" \u2014 "),ZP=a("a"),hlo=o("BeitFeatureExtractor"),plo=o(" (Data2VecVision model)"),ulo=l(),rh=a("li"),eae=a("strong"),_lo=o("deit"),blo=o(" \u2014 "),eB=a("a"),vlo=o("DeiTFeatureExtractor"),Flo=o(" (DeiT model)"),Tlo=l(),th=a("li"),oae=a("strong"),Mlo=o("detr"),Elo=o(" \u2014 "),oB=a("a"),Clo=o("DetrFeatureExtractor"),wlo=o(" (DETR model)"),Alo=l(),ah=a("li"),rae=a("strong"),ylo=o("dpt"),Llo=o(" \u2014 "),rB=a("a"),xlo=o("DPTFeatureExtractor"),$lo=o(" (DPT model)"),klo=l(),nh=a("li"),tae=a("strong"),Slo=o("flava"),Rlo=o(" \u2014 "),tB=a("a"),Plo=o("FlavaFeatureExtractor"),Blo=o(" (Flava model)"),Ilo=l(),sh=a("li"),aae=a("strong"),qlo=o("glpn"),Nlo=o(" \u2014 "),aB=a("a"),jlo=o("GLPNFeatureExtractor"),Dlo=o(" (GLPN model)"),Glo=l(),lh=a("li"),nae=a("strong"),Olo=o("hubert"),Vlo=o(" \u2014 "),nB=a("a"),Xlo=o("Wav2Vec2FeatureExtractor"),zlo=o(" (Hubert model)"),Qlo=l(),ih=a("li"),sae=a("strong"),Wlo=o("layoutlmv2"),Hlo=o(" \u2014 "),sB=a("a"),Ulo=o("LayoutLMv2FeatureExtractor"),Jlo=o(" (LayoutLMv2 model)"),Ylo=l(),dh=a("li"),lae=a("strong"),Klo=o("maskformer"),Zlo=o(" \u2014 "),lB=a("a"),eio=o("MaskFormerFeatureExtractor"),oio=o(" (MaskFormer model)"),rio=l(),ch=a("li"),iae=a("strong"),tio=o("perceiver"),aio=o(" \u2014 "),iB=a("a"),nio=o("PerceiverFeatureExtractor"),sio=o(" (Perceiver model)"),lio=l(),fh=a("li"),dae=a("strong"),iio=o("poolformer"),dio=o(" \u2014 "),dB=a("a"),cio=o("PoolFormerFeatureExtractor"),fio=o(" (PoolFormer model)"),mio=l(),mh=a("li"),cae=a("strong"),gio=o("regnet"),hio=o(" \u2014 "),cB=a("a"),pio=o("ConvNextFeatureExtractor"),uio=o(" (RegNet model)"),_io=l(),gh=a("li"),fae=a("strong"),bio=o("resnet"),vio=o(" \u2014 "),fB=a("a"),Fio=o("ConvNextFeatureExtractor"),Tio=o(" (ResNet model)"),Mio=l(),hh=a("li"),mae=a("strong"),Eio=o("segformer"),Cio=o(" \u2014 "),mB=a("a"),wio=o("SegformerFeatureExtractor"),Aio=o(" (SegFormer model)"),yio=l(),ph=a("li"),gae=a("strong"),Lio=o("speech_to_text"),xio=o(" \u2014 "),gB=a("a"),$io=o("Speech2TextFeatureExtractor"),kio=o(" (Speech2Text model)"),Sio=l(),uh=a("li"),hae=a("strong"),Rio=o("swin"),Pio=o(" \u2014 "),hB=a("a"),Bio=o("ViTFeatureExtractor"),Iio=o(" (Swin model)"),qio=l(),_h=a("li"),pae=a("strong"),Nio=o("van"),jio=o(" \u2014 "),pB=a("a"),Dio=o("ConvNextFeatureExtractor"),Gio=o(" (VAN model)"),Oio=l(),bh=a("li"),uae=a("strong"),Vio=o("vit"),Xio=o(" \u2014 "),uB=a("a"),zio=o("ViTFeatureExtractor"),Qio=o(" (ViT model)"),Wio=l(),vh=a("li"),_ae=a("strong"),Hio=o("vit_mae"),Uio=o(" \u2014 "),_B=a("a"),Jio=o("ViTFeatureExtractor"),Yio=o(" (ViTMAE model)"),Kio=l(),Fh=a("li"),bae=a("strong"),Zio=o("wav2vec2"),edo=o(" \u2014 "),bB=a("a"),odo=o("Wav2Vec2FeatureExtractor"),rdo=o(" (Wav2Vec2 model)"),tdo=l(),Th=a("li"),vae=a("strong"),ado=o("yolos"),ndo=o(" \u2014 "),vB=a("a"),sdo=o("YolosFeatureExtractor"),ldo=o(" (YOLOS model)"),ido=l(),F(Mh.$$.fragment),ddo=l(),F(Eh.$$.fragment),cdo=l(),Ch=a("div"),F(h6.$$.fragment),fdo=l(),Fae=a("p"),mdo=o("Register a new feature extractor for this class."),QBe=l(),vi=a("h2"),wh=a("a"),Tae=a("span"),F(p6.$$.fragment),gdo=l(),Mae=a("span"),hdo=o("AutoProcessor"),WBe=l(),yo=a("div"),F(u6.$$.fragment),pdo=l(),_6=a("p"),udo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FB=a("a"),_do=o("AutoProcessor.from_pretrained()"),bdo=o(" class method."),vdo=l(),b6=a("p"),Fdo=o("This class cannot be instantiated directly using "),Eae=a("code"),Tdo=o("__init__()"),Mdo=o(" (throws an error)."),Edo=l(),We=a("div"),F(v6.$$.fragment),Cdo=l(),Cae=a("p"),wdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ado=l(),Fi=a("p"),ydo=o("The processor class to instantiate is selected based on the "),wae=a("code"),Ldo=o("model_type"),xdo=o(` property of the config object (either
passed as an argument or loaded from `),Aae=a("code"),$do=o("pretrained_model_name_or_path"),kdo=o(" if possible):"),Sdo=l(),_e=a("ul"),Ah=a("li"),yae=a("strong"),Rdo=o("clip"),Pdo=o(" \u2014 "),TB=a("a"),Bdo=o("CLIPProcessor"),Ido=o(" (CLIP model)"),qdo=l(),yh=a("li"),Lae=a("strong"),Ndo=o("flava"),jdo=o(" \u2014 "),xae=a("code"),Ddo=o("FLAVAProcessor"),Gdo=o(" (Flava model)"),Odo=l(),Lh=a("li"),$ae=a("strong"),Vdo=o("layoutlmv2"),Xdo=o(" \u2014 "),MB=a("a"),zdo=o("LayoutLMv2Processor"),Qdo=o(" (LayoutLMv2 model)"),Wdo=l(),xh=a("li"),kae=a("strong"),Hdo=o("layoutxlm"),Udo=o(" \u2014 "),EB=a("a"),Jdo=o("LayoutXLMProcessor"),Ydo=o(" (LayoutXLM model)"),Kdo=l(),$h=a("li"),Sae=a("strong"),Zdo=o("sew"),eco=o(" \u2014 "),CB=a("a"),oco=o("Wav2Vec2Processor"),rco=o(" (SEW model)"),tco=l(),kh=a("li"),Rae=a("strong"),aco=o("sew-d"),nco=o(" \u2014 "),wB=a("a"),sco=o("Wav2Vec2Processor"),lco=o(" (SEW-D model)"),ico=l(),Sh=a("li"),Pae=a("strong"),dco=o("speech_to_text"),cco=o(" \u2014 "),AB=a("a"),fco=o("Speech2TextProcessor"),mco=o(" (Speech2Text model)"),gco=l(),Rh=a("li"),Bae=a("strong"),hco=o("speech_to_text_2"),pco=o(" \u2014 "),yB=a("a"),uco=o("Speech2Text2Processor"),_co=o(" (Speech2Text2 model)"),bco=l(),Ph=a("li"),Iae=a("strong"),vco=o("trocr"),Fco=o(" \u2014 "),LB=a("a"),Tco=o("TrOCRProcessor"),Mco=o(" (TrOCR model)"),Eco=l(),Bh=a("li"),qae=a("strong"),Cco=o("unispeech"),wco=o(" \u2014 "),xB=a("a"),Aco=o("Wav2Vec2Processor"),yco=o(" (UniSpeech model)"),Lco=l(),Ih=a("li"),Nae=a("strong"),xco=o("unispeech-sat"),$co=o(" \u2014 "),$B=a("a"),kco=o("Wav2Vec2Processor"),Sco=o(" (UniSpeechSat model)"),Rco=l(),qh=a("li"),jae=a("strong"),Pco=o("vilt"),Bco=o(" \u2014 "),kB=a("a"),Ico=o("ViltProcessor"),qco=o(" (ViLT model)"),Nco=l(),Nh=a("li"),Dae=a("strong"),jco=o("vision-text-dual-encoder"),Dco=o(" \u2014 "),SB=a("a"),Gco=o("VisionTextDualEncoderProcessor"),Oco=o(" (VisionTextDualEncoder model)"),Vco=l(),jh=a("li"),Gae=a("strong"),Xco=o("wav2vec2"),zco=o(" \u2014 "),RB=a("a"),Qco=o("Wav2Vec2Processor"),Wco=o(" (Wav2Vec2 model)"),Hco=l(),Dh=a("li"),Oae=a("strong"),Uco=o("wavlm"),Jco=o(" \u2014 "),PB=a("a"),Yco=o("Wav2Vec2Processor"),Kco=o(" (WavLM model)"),Zco=l(),F(Gh.$$.fragment),efo=l(),F(Oh.$$.fragment),ofo=l(),Vh=a("div"),F(F6.$$.fragment),rfo=l(),Vae=a("p"),tfo=o("Register a new processor for this class."),HBe=l(),Ti=a("h2"),Xh=a("a"),Xae=a("span"),F(T6.$$.fragment),afo=l(),zae=a("span"),nfo=o("AutoModel"),UBe=l(),Lo=a("div"),F(M6.$$.fragment),sfo=l(),Mi=a("p"),lfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BB=a("a"),ifo=o("from_pretrained()"),dfo=o(" class method or the "),IB=a("a"),cfo=o("from_config()"),ffo=o(` class
method.`),mfo=l(),E6=a("p"),gfo=o("This class cannot be instantiated directly using "),Qae=a("code"),hfo=o("__init__()"),pfo=o(" (throws an error)."),ufo=l(),ot=a("div"),F(C6.$$.fragment),_fo=l(),Wae=a("p"),bfo=o("Instantiates one of the base model classes of the library from a configuration."),vfo=l(),Ei=a("p"),Ffo=o(`Note:
Loading a model from its configuration file does `),Hae=a("strong"),Tfo=o("not"),Mfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qB=a("a"),Efo=o("from_pretrained()"),Cfo=o(" to load the model weights."),wfo=l(),F(zh.$$.fragment),Afo=l(),He=a("div"),F(w6.$$.fragment),yfo=l(),Uae=a("p"),Lfo=o("Instantiate one of the base model classes of the library from a pretrained model."),xfo=l(),Aa=a("p"),$fo=o("The model class to instantiate is selected based on the "),Jae=a("code"),kfo=o("model_type"),Sfo=o(` property of the config object (either
passed as an argument or loaded from `),Yae=a("code"),Rfo=o("pretrained_model_name_or_path"),Pfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=a("code"),Bfo=o("pretrained_model_name_or_path"),Ifo=o(":"),qfo=l(),x=a("ul"),Qh=a("li"),Zae=a("strong"),Nfo=o("albert"),jfo=o(" \u2014 "),NB=a("a"),Dfo=o("AlbertModel"),Gfo=o(" (ALBERT model)"),Ofo=l(),Wh=a("li"),ene=a("strong"),Vfo=o("bart"),Xfo=o(" \u2014 "),jB=a("a"),zfo=o("BartModel"),Qfo=o(" (BART model)"),Wfo=l(),Hh=a("li"),one=a("strong"),Hfo=o("beit"),Ufo=o(" \u2014 "),DB=a("a"),Jfo=o("BeitModel"),Yfo=o(" (BEiT model)"),Kfo=l(),Uh=a("li"),rne=a("strong"),Zfo=o("bert"),emo=o(" \u2014 "),GB=a("a"),omo=o("BertModel"),rmo=o(" (BERT model)"),tmo=l(),Jh=a("li"),tne=a("strong"),amo=o("bert-generation"),nmo=o(" \u2014 "),OB=a("a"),smo=o("BertGenerationEncoder"),lmo=o(" (Bert Generation model)"),imo=l(),Yh=a("li"),ane=a("strong"),dmo=o("big_bird"),cmo=o(" \u2014 "),VB=a("a"),fmo=o("BigBirdModel"),mmo=o(" (BigBird model)"),gmo=l(),Kh=a("li"),nne=a("strong"),hmo=o("bigbird_pegasus"),pmo=o(" \u2014 "),XB=a("a"),umo=o("BigBirdPegasusModel"),_mo=o(" (BigBirdPegasus model)"),bmo=l(),Zh=a("li"),sne=a("strong"),vmo=o("blenderbot"),Fmo=o(" \u2014 "),zB=a("a"),Tmo=o("BlenderbotModel"),Mmo=o(" (Blenderbot model)"),Emo=l(),ep=a("li"),lne=a("strong"),Cmo=o("blenderbot-small"),wmo=o(" \u2014 "),QB=a("a"),Amo=o("BlenderbotSmallModel"),ymo=o(" (BlenderbotSmall model)"),Lmo=l(),op=a("li"),ine=a("strong"),xmo=o("camembert"),$mo=o(" \u2014 "),WB=a("a"),kmo=o("CamembertModel"),Smo=o(" (CamemBERT model)"),Rmo=l(),rp=a("li"),dne=a("strong"),Pmo=o("canine"),Bmo=o(" \u2014 "),HB=a("a"),Imo=o("CanineModel"),qmo=o(" (Canine model)"),Nmo=l(),tp=a("li"),cne=a("strong"),jmo=o("clip"),Dmo=o(" \u2014 "),UB=a("a"),Gmo=o("CLIPModel"),Omo=o(" (CLIP model)"),Vmo=l(),ap=a("li"),fne=a("strong"),Xmo=o("convbert"),zmo=o(" \u2014 "),JB=a("a"),Qmo=o("ConvBertModel"),Wmo=o(" (ConvBERT model)"),Hmo=l(),np=a("li"),mne=a("strong"),Umo=o("convnext"),Jmo=o(" \u2014 "),YB=a("a"),Ymo=o("ConvNextModel"),Kmo=o(" (ConvNext model)"),Zmo=l(),sp=a("li"),gne=a("strong"),ego=o("ctrl"),ogo=o(" \u2014 "),KB=a("a"),rgo=o("CTRLModel"),tgo=o(" (CTRL model)"),ago=l(),lp=a("li"),hne=a("strong"),ngo=o("data2vec-audio"),sgo=o(" \u2014 "),ZB=a("a"),lgo=o("Data2VecAudioModel"),igo=o(" (Data2VecAudio model)"),dgo=l(),ip=a("li"),pne=a("strong"),cgo=o("data2vec-text"),fgo=o(" \u2014 "),eI=a("a"),mgo=o("Data2VecTextModel"),ggo=o(" (Data2VecText model)"),hgo=l(),dp=a("li"),une=a("strong"),pgo=o("data2vec-vision"),ugo=o(" \u2014 "),oI=a("a"),_go=o("Data2VecVisionModel"),bgo=o(" (Data2VecVision model)"),vgo=l(),cp=a("li"),_ne=a("strong"),Fgo=o("deberta"),Tgo=o(" \u2014 "),rI=a("a"),Mgo=o("DebertaModel"),Ego=o(" (DeBERTa model)"),Cgo=l(),fp=a("li"),bne=a("strong"),wgo=o("deberta-v2"),Ago=o(" \u2014 "),tI=a("a"),ygo=o("DebertaV2Model"),Lgo=o(" (DeBERTa-v2 model)"),xgo=l(),mp=a("li"),vne=a("strong"),$go=o("decision_transformer"),kgo=o(" \u2014 "),aI=a("a"),Sgo=o("DecisionTransformerModel"),Rgo=o(" (Decision Transformer model)"),Pgo=l(),gp=a("li"),Fne=a("strong"),Bgo=o("deit"),Igo=o(" \u2014 "),nI=a("a"),qgo=o("DeiTModel"),Ngo=o(" (DeiT model)"),jgo=l(),hp=a("li"),Tne=a("strong"),Dgo=o("detr"),Ggo=o(" \u2014 "),sI=a("a"),Ogo=o("DetrModel"),Vgo=o(" (DETR model)"),Xgo=l(),pp=a("li"),Mne=a("strong"),zgo=o("distilbert"),Qgo=o(" \u2014 "),lI=a("a"),Wgo=o("DistilBertModel"),Hgo=o(" (DistilBERT model)"),Ugo=l(),up=a("li"),Ene=a("strong"),Jgo=o("dpr"),Ygo=o(" \u2014 "),iI=a("a"),Kgo=o("DPRQuestionEncoder"),Zgo=o(" (DPR model)"),eho=l(),_p=a("li"),Cne=a("strong"),oho=o("dpt"),rho=o(" \u2014 "),dI=a("a"),tho=o("DPTModel"),aho=o(" (DPT model)"),nho=l(),bp=a("li"),wne=a("strong"),sho=o("electra"),lho=o(" \u2014 "),cI=a("a"),iho=o("ElectraModel"),dho=o(" (ELECTRA model)"),cho=l(),vp=a("li"),Ane=a("strong"),fho=o("flaubert"),mho=o(" \u2014 "),fI=a("a"),gho=o("FlaubertModel"),hho=o(" (FlauBERT model)"),pho=l(),Fp=a("li"),yne=a("strong"),uho=o("flava"),_ho=o(" \u2014 "),mI=a("a"),bho=o("FlavaModel"),vho=o(" (Flava model)"),Fho=l(),Tp=a("li"),Lne=a("strong"),Tho=o("fnet"),Mho=o(" \u2014 "),gI=a("a"),Eho=o("FNetModel"),Cho=o(" (FNet model)"),who=l(),Mp=a("li"),xne=a("strong"),Aho=o("fsmt"),yho=o(" \u2014 "),hI=a("a"),Lho=o("FSMTModel"),xho=o(" (FairSeq Machine-Translation model)"),$ho=l(),Ss=a("li"),$ne=a("strong"),kho=o("funnel"),Sho=o(" \u2014 "),pI=a("a"),Rho=o("FunnelModel"),Pho=o(" or "),uI=a("a"),Bho=o("FunnelBaseModel"),Iho=o(" (Funnel Transformer model)"),qho=l(),Ep=a("li"),kne=a("strong"),Nho=o("glpn"),jho=o(" \u2014 "),_I=a("a"),Dho=o("GLPNModel"),Gho=o(" (GLPN model)"),Oho=l(),Cp=a("li"),Sne=a("strong"),Vho=o("gpt2"),Xho=o(" \u2014 "),bI=a("a"),zho=o("GPT2Model"),Qho=o(" (OpenAI GPT-2 model)"),Who=l(),wp=a("li"),Rne=a("strong"),Hho=o("gpt_neo"),Uho=o(" \u2014 "),vI=a("a"),Jho=o("GPTNeoModel"),Yho=o(" (GPT Neo model)"),Kho=l(),Ap=a("li"),Pne=a("strong"),Zho=o("gptj"),epo=o(" \u2014 "),FI=a("a"),opo=o("GPTJModel"),rpo=o(" (GPT-J model)"),tpo=l(),yp=a("li"),Bne=a("strong"),apo=o("hubert"),npo=o(" \u2014 "),TI=a("a"),spo=o("HubertModel"),lpo=o(" (Hubert model)"),ipo=l(),Lp=a("li"),Ine=a("strong"),dpo=o("ibert"),cpo=o(" \u2014 "),MI=a("a"),fpo=o("IBertModel"),mpo=o(" (I-BERT model)"),gpo=l(),xp=a("li"),qne=a("strong"),hpo=o("imagegpt"),ppo=o(" \u2014 "),EI=a("a"),upo=o("ImageGPTModel"),_po=o(" (ImageGPT model)"),bpo=l(),$p=a("li"),Nne=a("strong"),vpo=o("layoutlm"),Fpo=o(" \u2014 "),CI=a("a"),Tpo=o("LayoutLMModel"),Mpo=o(" (LayoutLM model)"),Epo=l(),kp=a("li"),jne=a("strong"),Cpo=o("layoutlmv2"),wpo=o(" \u2014 "),wI=a("a"),Apo=o("LayoutLMv2Model"),ypo=o(" (LayoutLMv2 model)"),Lpo=l(),Sp=a("li"),Dne=a("strong"),xpo=o("led"),$po=o(" \u2014 "),AI=a("a"),kpo=o("LEDModel"),Spo=o(" (LED model)"),Rpo=l(),Rp=a("li"),Gne=a("strong"),Ppo=o("longformer"),Bpo=o(" \u2014 "),yI=a("a"),Ipo=o("LongformerModel"),qpo=o(" (Longformer model)"),Npo=l(),Pp=a("li"),One=a("strong"),jpo=o("luke"),Dpo=o(" \u2014 "),LI=a("a"),Gpo=o("LukeModel"),Opo=o(" (LUKE model)"),Vpo=l(),Bp=a("li"),Vne=a("strong"),Xpo=o("lxmert"),zpo=o(" \u2014 "),xI=a("a"),Qpo=o("LxmertModel"),Wpo=o(" (LXMERT model)"),Hpo=l(),Ip=a("li"),Xne=a("strong"),Upo=o("m2m_100"),Jpo=o(" \u2014 "),$I=a("a"),Ypo=o("M2M100Model"),Kpo=o(" (M2M100 model)"),Zpo=l(),qp=a("li"),zne=a("strong"),euo=o("marian"),ouo=o(" \u2014 "),kI=a("a"),ruo=o("MarianModel"),tuo=o(" (Marian model)"),auo=l(),Np=a("li"),Qne=a("strong"),nuo=o("maskformer"),suo=o(" \u2014 "),SI=a("a"),luo=o("MaskFormerModel"),iuo=o(" (MaskFormer model)"),duo=l(),jp=a("li"),Wne=a("strong"),cuo=o("mbart"),fuo=o(" \u2014 "),RI=a("a"),muo=o("MBartModel"),guo=o(" (mBART model)"),huo=l(),Dp=a("li"),Hne=a("strong"),puo=o("megatron-bert"),uuo=o(" \u2014 "),PI=a("a"),_uo=o("MegatronBertModel"),buo=o(" (MegatronBert model)"),vuo=l(),Gp=a("li"),Une=a("strong"),Fuo=o("mobilebert"),Tuo=o(" \u2014 "),BI=a("a"),Muo=o("MobileBertModel"),Euo=o(" (MobileBERT model)"),Cuo=l(),Op=a("li"),Jne=a("strong"),wuo=o("mpnet"),Auo=o(" \u2014 "),II=a("a"),yuo=o("MPNetModel"),Luo=o(" (MPNet model)"),xuo=l(),Vp=a("li"),Yne=a("strong"),$uo=o("mt5"),kuo=o(" \u2014 "),qI=a("a"),Suo=o("MT5Model"),Ruo=o(" (mT5 model)"),Puo=l(),Xp=a("li"),Kne=a("strong"),Buo=o("nystromformer"),Iuo=o(" \u2014 "),NI=a("a"),quo=o("NystromformerModel"),Nuo=o(" (Nystromformer model)"),juo=l(),zp=a("li"),Zne=a("strong"),Duo=o("openai-gpt"),Guo=o(" \u2014 "),jI=a("a"),Ouo=o("OpenAIGPTModel"),Vuo=o(" (OpenAI GPT model)"),Xuo=l(),Qp=a("li"),ese=a("strong"),zuo=o("opt"),Quo=o(" \u2014 "),DI=a("a"),Wuo=o("OPTModel"),Huo=o(" (OPT model)"),Uuo=l(),Wp=a("li"),ose=a("strong"),Juo=o("pegasus"),Yuo=o(" \u2014 "),GI=a("a"),Kuo=o("PegasusModel"),Zuo=o(" (Pegasus model)"),e_o=l(),Hp=a("li"),rse=a("strong"),o_o=o("perceiver"),r_o=o(" \u2014 "),OI=a("a"),t_o=o("PerceiverModel"),a_o=o(" (Perceiver model)"),n_o=l(),Up=a("li"),tse=a("strong"),s_o=o("plbart"),l_o=o(" \u2014 "),VI=a("a"),i_o=o("PLBartModel"),d_o=o(" (PLBart model)"),c_o=l(),Jp=a("li"),ase=a("strong"),f_o=o("poolformer"),m_o=o(" \u2014 "),XI=a("a"),g_o=o("PoolFormerModel"),h_o=o(" (PoolFormer model)"),p_o=l(),Yp=a("li"),nse=a("strong"),u_o=o("prophetnet"),__o=o(" \u2014 "),zI=a("a"),b_o=o("ProphetNetModel"),v_o=o(" (ProphetNet model)"),F_o=l(),Kp=a("li"),sse=a("strong"),T_o=o("qdqbert"),M_o=o(" \u2014 "),QI=a("a"),E_o=o("QDQBertModel"),C_o=o(" (QDQBert model)"),w_o=l(),Zp=a("li"),lse=a("strong"),A_o=o("reformer"),y_o=o(" \u2014 "),WI=a("a"),L_o=o("ReformerModel"),x_o=o(" (Reformer model)"),$_o=l(),eu=a("li"),ise=a("strong"),k_o=o("regnet"),S_o=o(" \u2014 "),HI=a("a"),R_o=o("RegNetModel"),P_o=o(" (RegNet model)"),B_o=l(),ou=a("li"),dse=a("strong"),I_o=o("rembert"),q_o=o(" \u2014 "),UI=a("a"),N_o=o("RemBertModel"),j_o=o(" (RemBERT model)"),D_o=l(),ru=a("li"),cse=a("strong"),G_o=o("resnet"),O_o=o(" \u2014 "),JI=a("a"),V_o=o("ResNetModel"),X_o=o(" (ResNet model)"),z_o=l(),tu=a("li"),fse=a("strong"),Q_o=o("retribert"),W_o=o(" \u2014 "),YI=a("a"),H_o=o("RetriBertModel"),U_o=o(" (RetriBERT model)"),J_o=l(),au=a("li"),mse=a("strong"),Y_o=o("roberta"),K_o=o(" \u2014 "),KI=a("a"),Z_o=o("RobertaModel"),e2o=o(" (RoBERTa model)"),o2o=l(),nu=a("li"),gse=a("strong"),r2o=o("roformer"),t2o=o(" \u2014 "),ZI=a("a"),a2o=o("RoFormerModel"),n2o=o(" (RoFormer model)"),s2o=l(),su=a("li"),hse=a("strong"),l2o=o("segformer"),i2o=o(" \u2014 "),eq=a("a"),d2o=o("SegformerModel"),c2o=o(" (SegFormer model)"),f2o=l(),lu=a("li"),pse=a("strong"),m2o=o("sew"),g2o=o(" \u2014 "),oq=a("a"),h2o=o("SEWModel"),p2o=o(" (SEW model)"),u2o=l(),iu=a("li"),use=a("strong"),_2o=o("sew-d"),b2o=o(" \u2014 "),rq=a("a"),v2o=o("SEWDModel"),F2o=o(" (SEW-D model)"),T2o=l(),du=a("li"),_se=a("strong"),M2o=o("speech_to_text"),E2o=o(" \u2014 "),tq=a("a"),C2o=o("Speech2TextModel"),w2o=o(" (Speech2Text model)"),A2o=l(),cu=a("li"),bse=a("strong"),y2o=o("splinter"),L2o=o(" \u2014 "),aq=a("a"),x2o=o("SplinterModel"),$2o=o(" (Splinter model)"),k2o=l(),fu=a("li"),vse=a("strong"),S2o=o("squeezebert"),R2o=o(" \u2014 "),nq=a("a"),P2o=o("SqueezeBertModel"),B2o=o(" (SqueezeBERT model)"),I2o=l(),mu=a("li"),Fse=a("strong"),q2o=o("swin"),N2o=o(" \u2014 "),sq=a("a"),j2o=o("SwinModel"),D2o=o(" (Swin model)"),G2o=l(),gu=a("li"),Tse=a("strong"),O2o=o("t5"),V2o=o(" \u2014 "),lq=a("a"),X2o=o("T5Model"),z2o=o(" (T5 model)"),Q2o=l(),hu=a("li"),Mse=a("strong"),W2o=o("tapas"),H2o=o(" \u2014 "),iq=a("a"),U2o=o("TapasModel"),J2o=o(" (TAPAS model)"),Y2o=l(),pu=a("li"),Ese=a("strong"),K2o=o("transfo-xl"),Z2o=o(" \u2014 "),dq=a("a"),e1o=o("TransfoXLModel"),o1o=o(" (Transformer-XL model)"),r1o=l(),uu=a("li"),Cse=a("strong"),t1o=o("unispeech"),a1o=o(" \u2014 "),cq=a("a"),n1o=o("UniSpeechModel"),s1o=o(" (UniSpeech model)"),l1o=l(),_u=a("li"),wse=a("strong"),i1o=o("unispeech-sat"),d1o=o(" \u2014 "),fq=a("a"),c1o=o("UniSpeechSatModel"),f1o=o(" (UniSpeechSat model)"),m1o=l(),bu=a("li"),Ase=a("strong"),g1o=o("van"),h1o=o(" \u2014 "),mq=a("a"),p1o=o("VanModel"),u1o=o(" (VAN model)"),_1o=l(),vu=a("li"),yse=a("strong"),b1o=o("vilt"),v1o=o(" \u2014 "),gq=a("a"),F1o=o("ViltModel"),T1o=o(" (ViLT model)"),M1o=l(),Fu=a("li"),Lse=a("strong"),E1o=o("vision-text-dual-encoder"),C1o=o(" \u2014 "),hq=a("a"),w1o=o("VisionTextDualEncoderModel"),A1o=o(" (VisionTextDualEncoder model)"),y1o=l(),Tu=a("li"),xse=a("strong"),L1o=o("visual_bert"),x1o=o(" \u2014 "),pq=a("a"),$1o=o("VisualBertModel"),k1o=o(" (VisualBert model)"),S1o=l(),Mu=a("li"),$se=a("strong"),R1o=o("vit"),P1o=o(" \u2014 "),uq=a("a"),B1o=o("ViTModel"),I1o=o(" (ViT model)"),q1o=l(),Eu=a("li"),kse=a("strong"),N1o=o("vit_mae"),j1o=o(" \u2014 "),_q=a("a"),D1o=o("ViTMAEModel"),G1o=o(" (ViTMAE model)"),O1o=l(),Cu=a("li"),Sse=a("strong"),V1o=o("wav2vec2"),X1o=o(" \u2014 "),bq=a("a"),z1o=o("Wav2Vec2Model"),Q1o=o(" (Wav2Vec2 model)"),W1o=l(),wu=a("li"),Rse=a("strong"),H1o=o("wavlm"),U1o=o(" \u2014 "),vq=a("a"),J1o=o("WavLMModel"),Y1o=o(" (WavLM model)"),K1o=l(),Au=a("li"),Pse=a("strong"),Z1o=o("xglm"),e7o=o(" \u2014 "),Fq=a("a"),o7o=o("XGLMModel"),r7o=o(" (XGLM model)"),t7o=l(),yu=a("li"),Bse=a("strong"),a7o=o("xlm"),n7o=o(" \u2014 "),Tq=a("a"),s7o=o("XLMModel"),l7o=o(" (XLM model)"),i7o=l(),Lu=a("li"),Ise=a("strong"),d7o=o("xlm-prophetnet"),c7o=o(" \u2014 "),Mq=a("a"),f7o=o("XLMProphetNetModel"),m7o=o(" (XLMProphetNet model)"),g7o=l(),xu=a("li"),qse=a("strong"),h7o=o("xlm-roberta"),p7o=o(" \u2014 "),Eq=a("a"),u7o=o("XLMRobertaModel"),_7o=o(" (XLM-RoBERTa model)"),b7o=l(),$u=a("li"),Nse=a("strong"),v7o=o("xlm-roberta-xl"),F7o=o(" \u2014 "),Cq=a("a"),T7o=o("XLMRobertaXLModel"),M7o=o(" (XLM-RoBERTa-XL model)"),E7o=l(),ku=a("li"),jse=a("strong"),C7o=o("xlnet"),w7o=o(" \u2014 "),wq=a("a"),A7o=o("XLNetModel"),y7o=o(" (XLNet model)"),L7o=l(),Su=a("li"),Dse=a("strong"),x7o=o("yolos"),$7o=o(" \u2014 "),Aq=a("a"),k7o=o("YolosModel"),S7o=o(" (YOLOS model)"),R7o=l(),Ru=a("li"),Gse=a("strong"),P7o=o("yoso"),B7o=o(" \u2014 "),yq=a("a"),I7o=o("YosoModel"),q7o=o(" (YOSO model)"),N7o=l(),Pu=a("p"),j7o=o("The model is set in evaluation mode by default using "),Ose=a("code"),D7o=o("model.eval()"),G7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=a("code"),O7o=o("model.train()"),V7o=l(),F(Bu.$$.fragment),JBe=l(),Ci=a("h2"),Iu=a("a"),Xse=a("span"),F(A6.$$.fragment),X7o=l(),zse=a("span"),z7o=o("AutoModelForPreTraining"),YBe=l(),xo=a("div"),F(y6.$$.fragment),Q7o=l(),wi=a("p"),W7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lq=a("a"),H7o=o("from_pretrained()"),U7o=o(" class method or the "),xq=a("a"),J7o=o("from_config()"),Y7o=o(` class
method.`),K7o=l(),L6=a("p"),Z7o=o("This class cannot be instantiated directly using "),Qse=a("code"),ebo=o("__init__()"),obo=o(" (throws an error)."),rbo=l(),rt=a("div"),F(x6.$$.fragment),tbo=l(),Wse=a("p"),abo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nbo=l(),Ai=a("p"),sbo=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),lbo=o("not"),ibo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=a("a"),dbo=o("from_pretrained()"),cbo=o(" to load the model weights."),fbo=l(),F(qu.$$.fragment),mbo=l(),Ue=a("div"),F($6.$$.fragment),gbo=l(),Use=a("p"),hbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pbo=l(),ya=a("p"),ubo=o("The model class to instantiate is selected based on the "),Jse=a("code"),_bo=o("model_type"),bbo=o(` property of the config object (either
passed as an argument or loaded from `),Yse=a("code"),vbo=o("pretrained_model_name_or_path"),Fbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=a("code"),Tbo=o("pretrained_model_name_or_path"),Mbo=o(":"),Ebo=l(),G=a("ul"),Nu=a("li"),Zse=a("strong"),Cbo=o("albert"),wbo=o(" \u2014 "),kq=a("a"),Abo=o("AlbertForPreTraining"),ybo=o(" (ALBERT model)"),Lbo=l(),ju=a("li"),ele=a("strong"),xbo=o("bart"),$bo=o(" \u2014 "),Sq=a("a"),kbo=o("BartForConditionalGeneration"),Sbo=o(" (BART model)"),Rbo=l(),Du=a("li"),ole=a("strong"),Pbo=o("bert"),Bbo=o(" \u2014 "),Rq=a("a"),Ibo=o("BertForPreTraining"),qbo=o(" (BERT model)"),Nbo=l(),Gu=a("li"),rle=a("strong"),jbo=o("big_bird"),Dbo=o(" \u2014 "),Pq=a("a"),Gbo=o("BigBirdForPreTraining"),Obo=o(" (BigBird model)"),Vbo=l(),Ou=a("li"),tle=a("strong"),Xbo=o("camembert"),zbo=o(" \u2014 "),Bq=a("a"),Qbo=o("CamembertForMaskedLM"),Wbo=o(" (CamemBERT model)"),Hbo=l(),Vu=a("li"),ale=a("strong"),Ubo=o("ctrl"),Jbo=o(" \u2014 "),Iq=a("a"),Ybo=o("CTRLLMHeadModel"),Kbo=o(" (CTRL model)"),Zbo=l(),Xu=a("li"),nle=a("strong"),e4o=o("data2vec-text"),o4o=o(" \u2014 "),qq=a("a"),r4o=o("Data2VecTextForMaskedLM"),t4o=o(" (Data2VecText model)"),a4o=l(),zu=a("li"),sle=a("strong"),n4o=o("deberta"),s4o=o(" \u2014 "),Nq=a("a"),l4o=o("DebertaForMaskedLM"),i4o=o(" (DeBERTa model)"),d4o=l(),Qu=a("li"),lle=a("strong"),c4o=o("deberta-v2"),f4o=o(" \u2014 "),jq=a("a"),m4o=o("DebertaV2ForMaskedLM"),g4o=o(" (DeBERTa-v2 model)"),h4o=l(),Wu=a("li"),ile=a("strong"),p4o=o("distilbert"),u4o=o(" \u2014 "),Dq=a("a"),_4o=o("DistilBertForMaskedLM"),b4o=o(" (DistilBERT model)"),v4o=l(),Hu=a("li"),dle=a("strong"),F4o=o("electra"),T4o=o(" \u2014 "),Gq=a("a"),M4o=o("ElectraForPreTraining"),E4o=o(" (ELECTRA model)"),C4o=l(),Uu=a("li"),cle=a("strong"),w4o=o("flaubert"),A4o=o(" \u2014 "),Oq=a("a"),y4o=o("FlaubertWithLMHeadModel"),L4o=o(" (FlauBERT model)"),x4o=l(),Ju=a("li"),fle=a("strong"),$4o=o("flava"),k4o=o(" \u2014 "),Vq=a("a"),S4o=o("FlavaForPreTraining"),R4o=o(" (Flava model)"),P4o=l(),Yu=a("li"),mle=a("strong"),B4o=o("fnet"),I4o=o(" \u2014 "),Xq=a("a"),q4o=o("FNetForPreTraining"),N4o=o(" (FNet model)"),j4o=l(),Ku=a("li"),gle=a("strong"),D4o=o("fsmt"),G4o=o(" \u2014 "),zq=a("a"),O4o=o("FSMTForConditionalGeneration"),V4o=o(" (FairSeq Machine-Translation model)"),X4o=l(),Zu=a("li"),hle=a("strong"),z4o=o("funnel"),Q4o=o(" \u2014 "),Qq=a("a"),W4o=o("FunnelForPreTraining"),H4o=o(" (Funnel Transformer model)"),U4o=l(),e_=a("li"),ple=a("strong"),J4o=o("gpt2"),Y4o=o(" \u2014 "),Wq=a("a"),K4o=o("GPT2LMHeadModel"),Z4o=o(" (OpenAI GPT-2 model)"),evo=l(),o_=a("li"),ule=a("strong"),ovo=o("ibert"),rvo=o(" \u2014 "),Hq=a("a"),tvo=o("IBertForMaskedLM"),avo=o(" (I-BERT model)"),nvo=l(),r_=a("li"),_le=a("strong"),svo=o("layoutlm"),lvo=o(" \u2014 "),Uq=a("a"),ivo=o("LayoutLMForMaskedLM"),dvo=o(" (LayoutLM model)"),cvo=l(),t_=a("li"),ble=a("strong"),fvo=o("longformer"),mvo=o(" \u2014 "),Jq=a("a"),gvo=o("LongformerForMaskedLM"),hvo=o(" (Longformer model)"),pvo=l(),a_=a("li"),vle=a("strong"),uvo=o("lxmert"),_vo=o(" \u2014 "),Yq=a("a"),bvo=o("LxmertForPreTraining"),vvo=o(" (LXMERT model)"),Fvo=l(),n_=a("li"),Fle=a("strong"),Tvo=o("megatron-bert"),Mvo=o(" \u2014 "),Kq=a("a"),Evo=o("MegatronBertForPreTraining"),Cvo=o(" (MegatronBert model)"),wvo=l(),s_=a("li"),Tle=a("strong"),Avo=o("mobilebert"),yvo=o(" \u2014 "),Zq=a("a"),Lvo=o("MobileBertForPreTraining"),xvo=o(" (MobileBERT model)"),$vo=l(),l_=a("li"),Mle=a("strong"),kvo=o("mpnet"),Svo=o(" \u2014 "),eN=a("a"),Rvo=o("MPNetForMaskedLM"),Pvo=o(" (MPNet model)"),Bvo=l(),i_=a("li"),Ele=a("strong"),Ivo=o("openai-gpt"),qvo=o(" \u2014 "),oN=a("a"),Nvo=o("OpenAIGPTLMHeadModel"),jvo=o(" (OpenAI GPT model)"),Dvo=l(),d_=a("li"),Cle=a("strong"),Gvo=o("retribert"),Ovo=o(" \u2014 "),rN=a("a"),Vvo=o("RetriBertModel"),Xvo=o(" (RetriBERT model)"),zvo=l(),c_=a("li"),wle=a("strong"),Qvo=o("roberta"),Wvo=o(" \u2014 "),tN=a("a"),Hvo=o("RobertaForMaskedLM"),Uvo=o(" (RoBERTa model)"),Jvo=l(),f_=a("li"),Ale=a("strong"),Yvo=o("splinter"),Kvo=o(" \u2014 "),aN=a("a"),Zvo=o("SplinterForPreTraining"),eFo=o(" (Splinter model)"),oFo=l(),m_=a("li"),yle=a("strong"),rFo=o("squeezebert"),tFo=o(" \u2014 "),nN=a("a"),aFo=o("SqueezeBertForMaskedLM"),nFo=o(" (SqueezeBERT model)"),sFo=l(),g_=a("li"),Lle=a("strong"),lFo=o("t5"),iFo=o(" \u2014 "),sN=a("a"),dFo=o("T5ForConditionalGeneration"),cFo=o(" (T5 model)"),fFo=l(),h_=a("li"),xle=a("strong"),mFo=o("tapas"),gFo=o(" \u2014 "),lN=a("a"),hFo=o("TapasForMaskedLM"),pFo=o(" (TAPAS model)"),uFo=l(),p_=a("li"),$le=a("strong"),_Fo=o("transfo-xl"),bFo=o(" \u2014 "),iN=a("a"),vFo=o("TransfoXLLMHeadModel"),FFo=o(" (Transformer-XL model)"),TFo=l(),u_=a("li"),kle=a("strong"),MFo=o("unispeech"),EFo=o(" \u2014 "),dN=a("a"),CFo=o("UniSpeechForPreTraining"),wFo=o(" (UniSpeech model)"),AFo=l(),__=a("li"),Sle=a("strong"),yFo=o("unispeech-sat"),LFo=o(" \u2014 "),cN=a("a"),xFo=o("UniSpeechSatForPreTraining"),$Fo=o(" (UniSpeechSat model)"),kFo=l(),b_=a("li"),Rle=a("strong"),SFo=o("visual_bert"),RFo=o(" \u2014 "),fN=a("a"),PFo=o("VisualBertForPreTraining"),BFo=o(" (VisualBert model)"),IFo=l(),v_=a("li"),Ple=a("strong"),qFo=o("vit_mae"),NFo=o(" \u2014 "),mN=a("a"),jFo=o("ViTMAEForPreTraining"),DFo=o(" (ViTMAE model)"),GFo=l(),F_=a("li"),Ble=a("strong"),OFo=o("wav2vec2"),VFo=o(" \u2014 "),gN=a("a"),XFo=o("Wav2Vec2ForPreTraining"),zFo=o(" (Wav2Vec2 model)"),QFo=l(),T_=a("li"),Ile=a("strong"),WFo=o("xlm"),HFo=o(" \u2014 "),hN=a("a"),UFo=o("XLMWithLMHeadModel"),JFo=o(" (XLM model)"),YFo=l(),M_=a("li"),qle=a("strong"),KFo=o("xlm-roberta"),ZFo=o(" \u2014 "),pN=a("a"),eTo=o("XLMRobertaForMaskedLM"),oTo=o(" (XLM-RoBERTa model)"),rTo=l(),E_=a("li"),Nle=a("strong"),tTo=o("xlm-roberta-xl"),aTo=o(" \u2014 "),uN=a("a"),nTo=o("XLMRobertaXLForMaskedLM"),sTo=o(" (XLM-RoBERTa-XL model)"),lTo=l(),C_=a("li"),jle=a("strong"),iTo=o("xlnet"),dTo=o(" \u2014 "),_N=a("a"),cTo=o("XLNetLMHeadModel"),fTo=o(" (XLNet model)"),mTo=l(),w_=a("p"),gTo=o("The model is set in evaluation mode by default using "),Dle=a("code"),hTo=o("model.eval()"),pTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=a("code"),uTo=o("model.train()"),_To=l(),F(A_.$$.fragment),KBe=l(),yi=a("h2"),y_=a("a"),Ole=a("span"),F(k6.$$.fragment),bTo=l(),Vle=a("span"),vTo=o("AutoModelForCausalLM"),ZBe=l(),$o=a("div"),F(S6.$$.fragment),FTo=l(),Li=a("p"),TTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bN=a("a"),MTo=o("from_pretrained()"),ETo=o(" class method or the "),vN=a("a"),CTo=o("from_config()"),wTo=o(` class
method.`),ATo=l(),R6=a("p"),yTo=o("This class cannot be instantiated directly using "),Xle=a("code"),LTo=o("__init__()"),xTo=o(" (throws an error)."),$To=l(),tt=a("div"),F(P6.$$.fragment),kTo=l(),zle=a("p"),STo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RTo=l(),xi=a("p"),PTo=o(`Note:
Loading a model from its configuration file does `),Qle=a("strong"),BTo=o("not"),ITo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=a("a"),qTo=o("from_pretrained()"),NTo=o(" to load the model weights."),jTo=l(),F(L_.$$.fragment),DTo=l(),Je=a("div"),F(B6.$$.fragment),GTo=l(),Wle=a("p"),OTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VTo=l(),La=a("p"),XTo=o("The model class to instantiate is selected based on the "),Hle=a("code"),zTo=o("model_type"),QTo=o(` property of the config object (either
passed as an argument or loaded from `),Ule=a("code"),WTo=o("pretrained_model_name_or_path"),HTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=a("code"),UTo=o("pretrained_model_name_or_path"),JTo=o(":"),YTo=l(),z=a("ul"),x_=a("li"),Yle=a("strong"),KTo=o("bart"),ZTo=o(" \u2014 "),TN=a("a"),eMo=o("BartForCausalLM"),oMo=o(" (BART model)"),rMo=l(),$_=a("li"),Kle=a("strong"),tMo=o("bert"),aMo=o(" \u2014 "),MN=a("a"),nMo=o("BertLMHeadModel"),sMo=o(" (BERT model)"),lMo=l(),k_=a("li"),Zle=a("strong"),iMo=o("bert-generation"),dMo=o(" \u2014 "),EN=a("a"),cMo=o("BertGenerationDecoder"),fMo=o(" (Bert Generation model)"),mMo=l(),S_=a("li"),eie=a("strong"),gMo=o("big_bird"),hMo=o(" \u2014 "),CN=a("a"),pMo=o("BigBirdForCausalLM"),uMo=o(" (BigBird model)"),_Mo=l(),R_=a("li"),oie=a("strong"),bMo=o("bigbird_pegasus"),vMo=o(" \u2014 "),wN=a("a"),FMo=o("BigBirdPegasusForCausalLM"),TMo=o(" (BigBirdPegasus model)"),MMo=l(),P_=a("li"),rie=a("strong"),EMo=o("blenderbot"),CMo=o(" \u2014 "),AN=a("a"),wMo=o("BlenderbotForCausalLM"),AMo=o(" (Blenderbot model)"),yMo=l(),B_=a("li"),tie=a("strong"),LMo=o("blenderbot-small"),xMo=o(" \u2014 "),yN=a("a"),$Mo=o("BlenderbotSmallForCausalLM"),kMo=o(" (BlenderbotSmall model)"),SMo=l(),I_=a("li"),aie=a("strong"),RMo=o("camembert"),PMo=o(" \u2014 "),LN=a("a"),BMo=o("CamembertForCausalLM"),IMo=o(" (CamemBERT model)"),qMo=l(),q_=a("li"),nie=a("strong"),NMo=o("ctrl"),jMo=o(" \u2014 "),xN=a("a"),DMo=o("CTRLLMHeadModel"),GMo=o(" (CTRL model)"),OMo=l(),N_=a("li"),sie=a("strong"),VMo=o("data2vec-text"),XMo=o(" \u2014 "),$N=a("a"),zMo=o("Data2VecTextForCausalLM"),QMo=o(" (Data2VecText model)"),WMo=l(),j_=a("li"),lie=a("strong"),HMo=o("electra"),UMo=o(" \u2014 "),kN=a("a"),JMo=o("ElectraForCausalLM"),YMo=o(" (ELECTRA model)"),KMo=l(),D_=a("li"),iie=a("strong"),ZMo=o("gpt2"),eEo=o(" \u2014 "),SN=a("a"),oEo=o("GPT2LMHeadModel"),rEo=o(" (OpenAI GPT-2 model)"),tEo=l(),G_=a("li"),die=a("strong"),aEo=o("gpt_neo"),nEo=o(" \u2014 "),RN=a("a"),sEo=o("GPTNeoForCausalLM"),lEo=o(" (GPT Neo model)"),iEo=l(),O_=a("li"),cie=a("strong"),dEo=o("gptj"),cEo=o(" \u2014 "),PN=a("a"),fEo=o("GPTJForCausalLM"),mEo=o(" (GPT-J model)"),gEo=l(),V_=a("li"),fie=a("strong"),hEo=o("marian"),pEo=o(" \u2014 "),BN=a("a"),uEo=o("MarianForCausalLM"),_Eo=o(" (Marian model)"),bEo=l(),X_=a("li"),mie=a("strong"),vEo=o("mbart"),FEo=o(" \u2014 "),IN=a("a"),TEo=o("MBartForCausalLM"),MEo=o(" (mBART model)"),EEo=l(),z_=a("li"),gie=a("strong"),CEo=o("megatron-bert"),wEo=o(" \u2014 "),qN=a("a"),AEo=o("MegatronBertForCausalLM"),yEo=o(" (MegatronBert model)"),LEo=l(),Q_=a("li"),hie=a("strong"),xEo=o("openai-gpt"),$Eo=o(" \u2014 "),NN=a("a"),kEo=o("OpenAIGPTLMHeadModel"),SEo=o(" (OpenAI GPT model)"),REo=l(),W_=a("li"),pie=a("strong"),PEo=o("opt"),BEo=o(" \u2014 "),jN=a("a"),IEo=o("OPTForCausalLM"),qEo=o(" (OPT model)"),NEo=l(),H_=a("li"),uie=a("strong"),jEo=o("pegasus"),DEo=o(" \u2014 "),DN=a("a"),GEo=o("PegasusForCausalLM"),OEo=o(" (Pegasus model)"),VEo=l(),U_=a("li"),_ie=a("strong"),XEo=o("plbart"),zEo=o(" \u2014 "),GN=a("a"),QEo=o("PLBartForCausalLM"),WEo=o(" (PLBart model)"),HEo=l(),J_=a("li"),bie=a("strong"),UEo=o("prophetnet"),JEo=o(" \u2014 "),ON=a("a"),YEo=o("ProphetNetForCausalLM"),KEo=o(" (ProphetNet model)"),ZEo=l(),Y_=a("li"),vie=a("strong"),e5o=o("qdqbert"),o5o=o(" \u2014 "),VN=a("a"),r5o=o("QDQBertLMHeadModel"),t5o=o(" (QDQBert model)"),a5o=l(),K_=a("li"),Fie=a("strong"),n5o=o("reformer"),s5o=o(" \u2014 "),XN=a("a"),l5o=o("ReformerModelWithLMHead"),i5o=o(" (Reformer model)"),d5o=l(),Z_=a("li"),Tie=a("strong"),c5o=o("rembert"),f5o=o(" \u2014 "),zN=a("a"),m5o=o("RemBertForCausalLM"),g5o=o(" (RemBERT model)"),h5o=l(),e2=a("li"),Mie=a("strong"),p5o=o("roberta"),u5o=o(" \u2014 "),QN=a("a"),_5o=o("RobertaForCausalLM"),b5o=o(" (RoBERTa model)"),v5o=l(),o2=a("li"),Eie=a("strong"),F5o=o("roformer"),T5o=o(" \u2014 "),WN=a("a"),M5o=o("RoFormerForCausalLM"),E5o=o(" (RoFormer model)"),C5o=l(),r2=a("li"),Cie=a("strong"),w5o=o("speech_to_text_2"),A5o=o(" \u2014 "),HN=a("a"),y5o=o("Speech2Text2ForCausalLM"),L5o=o(" (Speech2Text2 model)"),x5o=l(),t2=a("li"),wie=a("strong"),$5o=o("transfo-xl"),k5o=o(" \u2014 "),UN=a("a"),S5o=o("TransfoXLLMHeadModel"),R5o=o(" (Transformer-XL model)"),P5o=l(),a2=a("li"),Aie=a("strong"),B5o=o("trocr"),I5o=o(" \u2014 "),JN=a("a"),q5o=o("TrOCRForCausalLM"),N5o=o(" (TrOCR model)"),j5o=l(),n2=a("li"),yie=a("strong"),D5o=o("xglm"),G5o=o(" \u2014 "),YN=a("a"),O5o=o("XGLMForCausalLM"),V5o=o(" (XGLM model)"),X5o=l(),s2=a("li"),Lie=a("strong"),z5o=o("xlm"),Q5o=o(" \u2014 "),KN=a("a"),W5o=o("XLMWithLMHeadModel"),H5o=o(" (XLM model)"),U5o=l(),l2=a("li"),xie=a("strong"),J5o=o("xlm-prophetnet"),Y5o=o(" \u2014 "),ZN=a("a"),K5o=o("XLMProphetNetForCausalLM"),Z5o=o(" (XLMProphetNet model)"),eCo=l(),i2=a("li"),$ie=a("strong"),oCo=o("xlm-roberta"),rCo=o(" \u2014 "),ej=a("a"),tCo=o("XLMRobertaForCausalLM"),aCo=o(" (XLM-RoBERTa model)"),nCo=l(),d2=a("li"),kie=a("strong"),sCo=o("xlm-roberta-xl"),lCo=o(" \u2014 "),oj=a("a"),iCo=o("XLMRobertaXLForCausalLM"),dCo=o(" (XLM-RoBERTa-XL model)"),cCo=l(),c2=a("li"),Sie=a("strong"),fCo=o("xlnet"),mCo=o(" \u2014 "),rj=a("a"),gCo=o("XLNetLMHeadModel"),hCo=o(" (XLNet model)"),pCo=l(),f2=a("p"),uCo=o("The model is set in evaluation mode by default using "),Rie=a("code"),_Co=o("model.eval()"),bCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),vCo=o("model.train()"),FCo=l(),F(m2.$$.fragment),eIe=l(),$i=a("h2"),g2=a("a"),Bie=a("span"),F(I6.$$.fragment),TCo=l(),Iie=a("span"),MCo=o("AutoModelForMaskedLM"),oIe=l(),ko=a("div"),F(q6.$$.fragment),ECo=l(),ki=a("p"),CCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tj=a("a"),wCo=o("from_pretrained()"),ACo=o(" class method or the "),aj=a("a"),yCo=o("from_config()"),LCo=o(` class
method.`),xCo=l(),N6=a("p"),$Co=o("This class cannot be instantiated directly using "),qie=a("code"),kCo=o("__init__()"),SCo=o(" (throws an error)."),RCo=l(),at=a("div"),F(j6.$$.fragment),PCo=l(),Nie=a("p"),BCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ICo=l(),Si=a("p"),qCo=o(`Note:
Loading a model from its configuration file does `),jie=a("strong"),NCo=o("not"),jCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),DCo=o("from_pretrained()"),GCo=o(" to load the model weights."),OCo=l(),F(h2.$$.fragment),VCo=l(),Ye=a("div"),F(D6.$$.fragment),XCo=l(),Die=a("p"),zCo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QCo=l(),xa=a("p"),WCo=o("The model class to instantiate is selected based on the "),Gie=a("code"),HCo=o("model_type"),UCo=o(` property of the config object (either
passed as an argument or loaded from `),Oie=a("code"),JCo=o("pretrained_model_name_or_path"),YCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=a("code"),KCo=o("pretrained_model_name_or_path"),ZCo=o(":"),e3o=l(),Q=a("ul"),p2=a("li"),Xie=a("strong"),o3o=o("albert"),r3o=o(" \u2014 "),sj=a("a"),t3o=o("AlbertForMaskedLM"),a3o=o(" (ALBERT model)"),n3o=l(),u2=a("li"),zie=a("strong"),s3o=o("bart"),l3o=o(" \u2014 "),lj=a("a"),i3o=o("BartForConditionalGeneration"),d3o=o(" (BART model)"),c3o=l(),_2=a("li"),Qie=a("strong"),f3o=o("bert"),m3o=o(" \u2014 "),ij=a("a"),g3o=o("BertForMaskedLM"),h3o=o(" (BERT model)"),p3o=l(),b2=a("li"),Wie=a("strong"),u3o=o("big_bird"),_3o=o(" \u2014 "),dj=a("a"),b3o=o("BigBirdForMaskedLM"),v3o=o(" (BigBird model)"),F3o=l(),v2=a("li"),Hie=a("strong"),T3o=o("camembert"),M3o=o(" \u2014 "),cj=a("a"),E3o=o("CamembertForMaskedLM"),C3o=o(" (CamemBERT model)"),w3o=l(),F2=a("li"),Uie=a("strong"),A3o=o("convbert"),y3o=o(" \u2014 "),fj=a("a"),L3o=o("ConvBertForMaskedLM"),x3o=o(" (ConvBERT model)"),$3o=l(),T2=a("li"),Jie=a("strong"),k3o=o("data2vec-text"),S3o=o(" \u2014 "),mj=a("a"),R3o=o("Data2VecTextForMaskedLM"),P3o=o(" (Data2VecText model)"),B3o=l(),M2=a("li"),Yie=a("strong"),I3o=o("deberta"),q3o=o(" \u2014 "),gj=a("a"),N3o=o("DebertaForMaskedLM"),j3o=o(" (DeBERTa model)"),D3o=l(),E2=a("li"),Kie=a("strong"),G3o=o("deberta-v2"),O3o=o(" \u2014 "),hj=a("a"),V3o=o("DebertaV2ForMaskedLM"),X3o=o(" (DeBERTa-v2 model)"),z3o=l(),C2=a("li"),Zie=a("strong"),Q3o=o("distilbert"),W3o=o(" \u2014 "),pj=a("a"),H3o=o("DistilBertForMaskedLM"),U3o=o(" (DistilBERT model)"),J3o=l(),w2=a("li"),ede=a("strong"),Y3o=o("electra"),K3o=o(" \u2014 "),uj=a("a"),Z3o=o("ElectraForMaskedLM"),ewo=o(" (ELECTRA model)"),owo=l(),A2=a("li"),ode=a("strong"),rwo=o("flaubert"),two=o(" \u2014 "),_j=a("a"),awo=o("FlaubertWithLMHeadModel"),nwo=o(" (FlauBERT model)"),swo=l(),y2=a("li"),rde=a("strong"),lwo=o("fnet"),iwo=o(" \u2014 "),bj=a("a"),dwo=o("FNetForMaskedLM"),cwo=o(" (FNet model)"),fwo=l(),L2=a("li"),tde=a("strong"),mwo=o("funnel"),gwo=o(" \u2014 "),vj=a("a"),hwo=o("FunnelForMaskedLM"),pwo=o(" (Funnel Transformer model)"),uwo=l(),x2=a("li"),ade=a("strong"),_wo=o("ibert"),bwo=o(" \u2014 "),Fj=a("a"),vwo=o("IBertForMaskedLM"),Fwo=o(" (I-BERT model)"),Two=l(),$2=a("li"),nde=a("strong"),Mwo=o("layoutlm"),Ewo=o(" \u2014 "),Tj=a("a"),Cwo=o("LayoutLMForMaskedLM"),wwo=o(" (LayoutLM model)"),Awo=l(),k2=a("li"),sde=a("strong"),ywo=o("longformer"),Lwo=o(" \u2014 "),Mj=a("a"),xwo=o("LongformerForMaskedLM"),$wo=o(" (Longformer model)"),kwo=l(),S2=a("li"),lde=a("strong"),Swo=o("mbart"),Rwo=o(" \u2014 "),Ej=a("a"),Pwo=o("MBartForConditionalGeneration"),Bwo=o(" (mBART model)"),Iwo=l(),R2=a("li"),ide=a("strong"),qwo=o("megatron-bert"),Nwo=o(" \u2014 "),Cj=a("a"),jwo=o("MegatronBertForMaskedLM"),Dwo=o(" (MegatronBert model)"),Gwo=l(),P2=a("li"),dde=a("strong"),Owo=o("mobilebert"),Vwo=o(" \u2014 "),wj=a("a"),Xwo=o("MobileBertForMaskedLM"),zwo=o(" (MobileBERT model)"),Qwo=l(),B2=a("li"),cde=a("strong"),Wwo=o("mpnet"),Hwo=o(" \u2014 "),Aj=a("a"),Uwo=o("MPNetForMaskedLM"),Jwo=o(" (MPNet model)"),Ywo=l(),I2=a("li"),fde=a("strong"),Kwo=o("nystromformer"),Zwo=o(" \u2014 "),yj=a("a"),eAo=o("NystromformerForMaskedLM"),oAo=o(" (Nystromformer model)"),rAo=l(),q2=a("li"),mde=a("strong"),tAo=o("perceiver"),aAo=o(" \u2014 "),Lj=a("a"),nAo=o("PerceiverForMaskedLM"),sAo=o(" (Perceiver model)"),lAo=l(),N2=a("li"),gde=a("strong"),iAo=o("qdqbert"),dAo=o(" \u2014 "),xj=a("a"),cAo=o("QDQBertForMaskedLM"),fAo=o(" (QDQBert model)"),mAo=l(),j2=a("li"),hde=a("strong"),gAo=o("reformer"),hAo=o(" \u2014 "),$j=a("a"),pAo=o("ReformerForMaskedLM"),uAo=o(" (Reformer model)"),_Ao=l(),D2=a("li"),pde=a("strong"),bAo=o("rembert"),vAo=o(" \u2014 "),kj=a("a"),FAo=o("RemBertForMaskedLM"),TAo=o(" (RemBERT model)"),MAo=l(),G2=a("li"),ude=a("strong"),EAo=o("roberta"),CAo=o(" \u2014 "),Sj=a("a"),wAo=o("RobertaForMaskedLM"),AAo=o(" (RoBERTa model)"),yAo=l(),O2=a("li"),_de=a("strong"),LAo=o("roformer"),xAo=o(" \u2014 "),Rj=a("a"),$Ao=o("RoFormerForMaskedLM"),kAo=o(" (RoFormer model)"),SAo=l(),V2=a("li"),bde=a("strong"),RAo=o("squeezebert"),PAo=o(" \u2014 "),Pj=a("a"),BAo=o("SqueezeBertForMaskedLM"),IAo=o(" (SqueezeBERT model)"),qAo=l(),X2=a("li"),vde=a("strong"),NAo=o("tapas"),jAo=o(" \u2014 "),Bj=a("a"),DAo=o("TapasForMaskedLM"),GAo=o(" (TAPAS model)"),OAo=l(),z2=a("li"),Fde=a("strong"),VAo=o("wav2vec2"),XAo=o(" \u2014 "),Tde=a("code"),zAo=o("Wav2Vec2ForMaskedLM"),QAo=o(" (Wav2Vec2 model)"),WAo=l(),Q2=a("li"),Mde=a("strong"),HAo=o("xlm"),UAo=o(" \u2014 "),Ij=a("a"),JAo=o("XLMWithLMHeadModel"),YAo=o(" (XLM model)"),KAo=l(),W2=a("li"),Ede=a("strong"),ZAo=o("xlm-roberta"),e0o=o(" \u2014 "),qj=a("a"),o0o=o("XLMRobertaForMaskedLM"),r0o=o(" (XLM-RoBERTa model)"),t0o=l(),H2=a("li"),Cde=a("strong"),a0o=o("xlm-roberta-xl"),n0o=o(" \u2014 "),Nj=a("a"),s0o=o("XLMRobertaXLForMaskedLM"),l0o=o(" (XLM-RoBERTa-XL model)"),i0o=l(),U2=a("li"),wde=a("strong"),d0o=o("yoso"),c0o=o(" \u2014 "),jj=a("a"),f0o=o("YosoForMaskedLM"),m0o=o(" (YOSO model)"),g0o=l(),J2=a("p"),h0o=o("The model is set in evaluation mode by default using "),Ade=a("code"),p0o=o("model.eval()"),u0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),_0o=o("model.train()"),b0o=l(),F(Y2.$$.fragment),rIe=l(),Ri=a("h2"),K2=a("a"),Lde=a("span"),F(G6.$$.fragment),v0o=l(),xde=a("span"),F0o=o("AutoModelForSeq2SeqLM"),tIe=l(),So=a("div"),F(O6.$$.fragment),T0o=l(),Pi=a("p"),M0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dj=a("a"),E0o=o("from_pretrained()"),C0o=o(" class method or the "),Gj=a("a"),w0o=o("from_config()"),A0o=o(` class
method.`),y0o=l(),V6=a("p"),L0o=o("This class cannot be instantiated directly using "),$de=a("code"),x0o=o("__init__()"),$0o=o(" (throws an error)."),k0o=l(),nt=a("div"),F(X6.$$.fragment),S0o=l(),kde=a("p"),R0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P0o=l(),Bi=a("p"),B0o=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),I0o=o("not"),q0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=a("a"),N0o=o("from_pretrained()"),j0o=o(" to load the model weights."),D0o=l(),F(Z2.$$.fragment),G0o=l(),Ke=a("div"),F(z6.$$.fragment),O0o=l(),Rde=a("p"),V0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X0o=l(),$a=a("p"),z0o=o("The model class to instantiate is selected based on the "),Pde=a("code"),Q0o=o("model_type"),W0o=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),H0o=o("pretrained_model_name_or_path"),U0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),J0o=o("pretrained_model_name_or_path"),Y0o=o(":"),K0o=l(),pe=a("ul"),e1=a("li"),qde=a("strong"),Z0o=o("bart"),e6o=o(" \u2014 "),Vj=a("a"),o6o=o("BartForConditionalGeneration"),r6o=o(" (BART model)"),t6o=l(),o1=a("li"),Nde=a("strong"),a6o=o("bigbird_pegasus"),n6o=o(" \u2014 "),Xj=a("a"),s6o=o("BigBirdPegasusForConditionalGeneration"),l6o=o(" (BigBirdPegasus model)"),i6o=l(),r1=a("li"),jde=a("strong"),d6o=o("blenderbot"),c6o=o(" \u2014 "),zj=a("a"),f6o=o("BlenderbotForConditionalGeneration"),m6o=o(" (Blenderbot model)"),g6o=l(),t1=a("li"),Dde=a("strong"),h6o=o("blenderbot-small"),p6o=o(" \u2014 "),Qj=a("a"),u6o=o("BlenderbotSmallForConditionalGeneration"),_6o=o(" (BlenderbotSmall model)"),b6o=l(),a1=a("li"),Gde=a("strong"),v6o=o("encoder-decoder"),F6o=o(" \u2014 "),Wj=a("a"),T6o=o("EncoderDecoderModel"),M6o=o(" (Encoder decoder model)"),E6o=l(),n1=a("li"),Ode=a("strong"),C6o=o("fsmt"),w6o=o(" \u2014 "),Hj=a("a"),A6o=o("FSMTForConditionalGeneration"),y6o=o(" (FairSeq Machine-Translation model)"),L6o=l(),s1=a("li"),Vde=a("strong"),x6o=o("led"),$6o=o(" \u2014 "),Uj=a("a"),k6o=o("LEDForConditionalGeneration"),S6o=o(" (LED model)"),R6o=l(),l1=a("li"),Xde=a("strong"),P6o=o("m2m_100"),B6o=o(" \u2014 "),Jj=a("a"),I6o=o("M2M100ForConditionalGeneration"),q6o=o(" (M2M100 model)"),N6o=l(),i1=a("li"),zde=a("strong"),j6o=o("marian"),D6o=o(" \u2014 "),Yj=a("a"),G6o=o("MarianMTModel"),O6o=o(" (Marian model)"),V6o=l(),d1=a("li"),Qde=a("strong"),X6o=o("mbart"),z6o=o(" \u2014 "),Kj=a("a"),Q6o=o("MBartForConditionalGeneration"),W6o=o(" (mBART model)"),H6o=l(),c1=a("li"),Wde=a("strong"),U6o=o("mt5"),J6o=o(" \u2014 "),Zj=a("a"),Y6o=o("MT5ForConditionalGeneration"),K6o=o(" (mT5 model)"),Z6o=l(),f1=a("li"),Hde=a("strong"),eyo=o("pegasus"),oyo=o(" \u2014 "),eD=a("a"),ryo=o("PegasusForConditionalGeneration"),tyo=o(" (Pegasus model)"),ayo=l(),m1=a("li"),Ude=a("strong"),nyo=o("plbart"),syo=o(" \u2014 "),oD=a("a"),lyo=o("PLBartForConditionalGeneration"),iyo=o(" (PLBart model)"),dyo=l(),g1=a("li"),Jde=a("strong"),cyo=o("prophetnet"),fyo=o(" \u2014 "),rD=a("a"),myo=o("ProphetNetForConditionalGeneration"),gyo=o(" (ProphetNet model)"),hyo=l(),h1=a("li"),Yde=a("strong"),pyo=o("t5"),uyo=o(" \u2014 "),tD=a("a"),_yo=o("T5ForConditionalGeneration"),byo=o(" (T5 model)"),vyo=l(),p1=a("li"),Kde=a("strong"),Fyo=o("xlm-prophetnet"),Tyo=o(" \u2014 "),aD=a("a"),Myo=o("XLMProphetNetForConditionalGeneration"),Eyo=o(" (XLMProphetNet model)"),Cyo=l(),u1=a("p"),wyo=o("The model is set in evaluation mode by default using "),Zde=a("code"),Ayo=o("model.eval()"),yyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),Lyo=o("model.train()"),xyo=l(),F(_1.$$.fragment),aIe=l(),Ii=a("h2"),b1=a("a"),oce=a("span"),F(Q6.$$.fragment),$yo=l(),rce=a("span"),kyo=o("AutoModelForSequenceClassification"),nIe=l(),Ro=a("div"),F(W6.$$.fragment),Syo=l(),qi=a("p"),Ryo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nD=a("a"),Pyo=o("from_pretrained()"),Byo=o(" class method or the "),sD=a("a"),Iyo=o("from_config()"),qyo=o(` class
method.`),Nyo=l(),H6=a("p"),jyo=o("This class cannot be instantiated directly using "),tce=a("code"),Dyo=o("__init__()"),Gyo=o(" (throws an error)."),Oyo=l(),st=a("div"),F(U6.$$.fragment),Vyo=l(),ace=a("p"),Xyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zyo=l(),Ni=a("p"),Qyo=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),Wyo=o("not"),Hyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),Uyo=o("from_pretrained()"),Jyo=o(" to load the model weights."),Yyo=l(),F(v1.$$.fragment),Kyo=l(),Ze=a("div"),F(J6.$$.fragment),Zyo=l(),sce=a("p"),eLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oLo=l(),ka=a("p"),rLo=o("The model class to instantiate is selected based on the "),lce=a("code"),tLo=o("model_type"),aLo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),nLo=o("pretrained_model_name_or_path"),sLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),lLo=o("pretrained_model_name_or_path"),iLo=o(":"),dLo=l(),q=a("ul"),F1=a("li"),cce=a("strong"),cLo=o("albert"),fLo=o(" \u2014 "),iD=a("a"),mLo=o("AlbertForSequenceClassification"),gLo=o(" (ALBERT model)"),hLo=l(),T1=a("li"),fce=a("strong"),pLo=o("bart"),uLo=o(" \u2014 "),dD=a("a"),_Lo=o("BartForSequenceClassification"),bLo=o(" (BART model)"),vLo=l(),M1=a("li"),mce=a("strong"),FLo=o("bert"),TLo=o(" \u2014 "),cD=a("a"),MLo=o("BertForSequenceClassification"),ELo=o(" (BERT model)"),CLo=l(),E1=a("li"),gce=a("strong"),wLo=o("big_bird"),ALo=o(" \u2014 "),fD=a("a"),yLo=o("BigBirdForSequenceClassification"),LLo=o(" (BigBird model)"),xLo=l(),C1=a("li"),hce=a("strong"),$Lo=o("bigbird_pegasus"),kLo=o(" \u2014 "),mD=a("a"),SLo=o("BigBirdPegasusForSequenceClassification"),RLo=o(" (BigBirdPegasus model)"),PLo=l(),w1=a("li"),pce=a("strong"),BLo=o("camembert"),ILo=o(" \u2014 "),gD=a("a"),qLo=o("CamembertForSequenceClassification"),NLo=o(" (CamemBERT model)"),jLo=l(),A1=a("li"),uce=a("strong"),DLo=o("canine"),GLo=o(" \u2014 "),hD=a("a"),OLo=o("CanineForSequenceClassification"),VLo=o(" (Canine model)"),XLo=l(),y1=a("li"),_ce=a("strong"),zLo=o("convbert"),QLo=o(" \u2014 "),pD=a("a"),WLo=o("ConvBertForSequenceClassification"),HLo=o(" (ConvBERT model)"),ULo=l(),L1=a("li"),bce=a("strong"),JLo=o("ctrl"),YLo=o(" \u2014 "),uD=a("a"),KLo=o("CTRLForSequenceClassification"),ZLo=o(" (CTRL model)"),e8o=l(),x1=a("li"),vce=a("strong"),o8o=o("data2vec-text"),r8o=o(" \u2014 "),_D=a("a"),t8o=o("Data2VecTextForSequenceClassification"),a8o=o(" (Data2VecText model)"),n8o=l(),$1=a("li"),Fce=a("strong"),s8o=o("deberta"),l8o=o(" \u2014 "),bD=a("a"),i8o=o("DebertaForSequenceClassification"),d8o=o(" (DeBERTa model)"),c8o=l(),k1=a("li"),Tce=a("strong"),f8o=o("deberta-v2"),m8o=o(" \u2014 "),vD=a("a"),g8o=o("DebertaV2ForSequenceClassification"),h8o=o(" (DeBERTa-v2 model)"),p8o=l(),S1=a("li"),Mce=a("strong"),u8o=o("distilbert"),_8o=o(" \u2014 "),FD=a("a"),b8o=o("DistilBertForSequenceClassification"),v8o=o(" (DistilBERT model)"),F8o=l(),R1=a("li"),Ece=a("strong"),T8o=o("electra"),M8o=o(" \u2014 "),TD=a("a"),E8o=o("ElectraForSequenceClassification"),C8o=o(" (ELECTRA model)"),w8o=l(),P1=a("li"),Cce=a("strong"),A8o=o("flaubert"),y8o=o(" \u2014 "),MD=a("a"),L8o=o("FlaubertForSequenceClassification"),x8o=o(" (FlauBERT model)"),$8o=l(),B1=a("li"),wce=a("strong"),k8o=o("fnet"),S8o=o(" \u2014 "),ED=a("a"),R8o=o("FNetForSequenceClassification"),P8o=o(" (FNet model)"),B8o=l(),I1=a("li"),Ace=a("strong"),I8o=o("funnel"),q8o=o(" \u2014 "),CD=a("a"),N8o=o("FunnelForSequenceClassification"),j8o=o(" (Funnel Transformer model)"),D8o=l(),q1=a("li"),yce=a("strong"),G8o=o("gpt2"),O8o=o(" \u2014 "),wD=a("a"),V8o=o("GPT2ForSequenceClassification"),X8o=o(" (OpenAI GPT-2 model)"),z8o=l(),N1=a("li"),Lce=a("strong"),Q8o=o("gpt_neo"),W8o=o(" \u2014 "),AD=a("a"),H8o=o("GPTNeoForSequenceClassification"),U8o=o(" (GPT Neo model)"),J8o=l(),j1=a("li"),xce=a("strong"),Y8o=o("gptj"),K8o=o(" \u2014 "),yD=a("a"),Z8o=o("GPTJForSequenceClassification"),exo=o(" (GPT-J model)"),oxo=l(),D1=a("li"),$ce=a("strong"),rxo=o("ibert"),txo=o(" \u2014 "),LD=a("a"),axo=o("IBertForSequenceClassification"),nxo=o(" (I-BERT model)"),sxo=l(),G1=a("li"),kce=a("strong"),lxo=o("layoutlm"),ixo=o(" \u2014 "),xD=a("a"),dxo=o("LayoutLMForSequenceClassification"),cxo=o(" (LayoutLM model)"),fxo=l(),O1=a("li"),Sce=a("strong"),mxo=o("layoutlmv2"),gxo=o(" \u2014 "),$D=a("a"),hxo=o("LayoutLMv2ForSequenceClassification"),pxo=o(" (LayoutLMv2 model)"),uxo=l(),V1=a("li"),Rce=a("strong"),_xo=o("led"),bxo=o(" \u2014 "),kD=a("a"),vxo=o("LEDForSequenceClassification"),Fxo=o(" (LED model)"),Txo=l(),X1=a("li"),Pce=a("strong"),Mxo=o("longformer"),Exo=o(" \u2014 "),SD=a("a"),Cxo=o("LongformerForSequenceClassification"),wxo=o(" (Longformer model)"),Axo=l(),z1=a("li"),Bce=a("strong"),yxo=o("mbart"),Lxo=o(" \u2014 "),RD=a("a"),xxo=o("MBartForSequenceClassification"),$xo=o(" (mBART model)"),kxo=l(),Q1=a("li"),Ice=a("strong"),Sxo=o("megatron-bert"),Rxo=o(" \u2014 "),PD=a("a"),Pxo=o("MegatronBertForSequenceClassification"),Bxo=o(" (MegatronBert model)"),Ixo=l(),W1=a("li"),qce=a("strong"),qxo=o("mobilebert"),Nxo=o(" \u2014 "),BD=a("a"),jxo=o("MobileBertForSequenceClassification"),Dxo=o(" (MobileBERT model)"),Gxo=l(),H1=a("li"),Nce=a("strong"),Oxo=o("mpnet"),Vxo=o(" \u2014 "),ID=a("a"),Xxo=o("MPNetForSequenceClassification"),zxo=o(" (MPNet model)"),Qxo=l(),U1=a("li"),jce=a("strong"),Wxo=o("nystromformer"),Hxo=o(" \u2014 "),qD=a("a"),Uxo=o("NystromformerForSequenceClassification"),Jxo=o(" (Nystromformer model)"),Yxo=l(),J1=a("li"),Dce=a("strong"),Kxo=o("openai-gpt"),Zxo=o(" \u2014 "),ND=a("a"),e9o=o("OpenAIGPTForSequenceClassification"),o9o=o(" (OpenAI GPT model)"),r9o=l(),Y1=a("li"),Gce=a("strong"),t9o=o("perceiver"),a9o=o(" \u2014 "),jD=a("a"),n9o=o("PerceiverForSequenceClassification"),s9o=o(" (Perceiver model)"),l9o=l(),K1=a("li"),Oce=a("strong"),i9o=o("plbart"),d9o=o(" \u2014 "),DD=a("a"),c9o=o("PLBartForSequenceClassification"),f9o=o(" (PLBart model)"),m9o=l(),Z1=a("li"),Vce=a("strong"),g9o=o("qdqbert"),h9o=o(" \u2014 "),GD=a("a"),p9o=o("QDQBertForSequenceClassification"),u9o=o(" (QDQBert model)"),_9o=l(),e7=a("li"),Xce=a("strong"),b9o=o("reformer"),v9o=o(" \u2014 "),OD=a("a"),F9o=o("ReformerForSequenceClassification"),T9o=o(" (Reformer model)"),M9o=l(),o7=a("li"),zce=a("strong"),E9o=o("rembert"),C9o=o(" \u2014 "),VD=a("a"),w9o=o("RemBertForSequenceClassification"),A9o=o(" (RemBERT model)"),y9o=l(),r7=a("li"),Qce=a("strong"),L9o=o("roberta"),x9o=o(" \u2014 "),XD=a("a"),$9o=o("RobertaForSequenceClassification"),k9o=o(" (RoBERTa model)"),S9o=l(),t7=a("li"),Wce=a("strong"),R9o=o("roformer"),P9o=o(" \u2014 "),zD=a("a"),B9o=o("RoFormerForSequenceClassification"),I9o=o(" (RoFormer model)"),q9o=l(),a7=a("li"),Hce=a("strong"),N9o=o("squeezebert"),j9o=o(" \u2014 "),QD=a("a"),D9o=o("SqueezeBertForSequenceClassification"),G9o=o(" (SqueezeBERT model)"),O9o=l(),n7=a("li"),Uce=a("strong"),V9o=o("tapas"),X9o=o(" \u2014 "),WD=a("a"),z9o=o("TapasForSequenceClassification"),Q9o=o(" (TAPAS model)"),W9o=l(),s7=a("li"),Jce=a("strong"),H9o=o("transfo-xl"),U9o=o(" \u2014 "),HD=a("a"),J9o=o("TransfoXLForSequenceClassification"),Y9o=o(" (Transformer-XL model)"),K9o=l(),l7=a("li"),Yce=a("strong"),Z9o=o("xlm"),e$o=o(" \u2014 "),UD=a("a"),o$o=o("XLMForSequenceClassification"),r$o=o(" (XLM model)"),t$o=l(),i7=a("li"),Kce=a("strong"),a$o=o("xlm-roberta"),n$o=o(" \u2014 "),JD=a("a"),s$o=o("XLMRobertaForSequenceClassification"),l$o=o(" (XLM-RoBERTa model)"),i$o=l(),d7=a("li"),Zce=a("strong"),d$o=o("xlm-roberta-xl"),c$o=o(" \u2014 "),YD=a("a"),f$o=o("XLMRobertaXLForSequenceClassification"),m$o=o(" (XLM-RoBERTa-XL model)"),g$o=l(),c7=a("li"),efe=a("strong"),h$o=o("xlnet"),p$o=o(" \u2014 "),KD=a("a"),u$o=o("XLNetForSequenceClassification"),_$o=o(" (XLNet model)"),b$o=l(),f7=a("li"),ofe=a("strong"),v$o=o("yoso"),F$o=o(" \u2014 "),ZD=a("a"),T$o=o("YosoForSequenceClassification"),M$o=o(" (YOSO model)"),E$o=l(),m7=a("p"),C$o=o("The model is set in evaluation mode by default using "),rfe=a("code"),w$o=o("model.eval()"),A$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=a("code"),y$o=o("model.train()"),L$o=l(),F(g7.$$.fragment),sIe=l(),ji=a("h2"),h7=a("a"),afe=a("span"),F(Y6.$$.fragment),x$o=l(),nfe=a("span"),$$o=o("AutoModelForMultipleChoice"),lIe=l(),Po=a("div"),F(K6.$$.fragment),k$o=l(),Di=a("p"),S$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eG=a("a"),R$o=o("from_pretrained()"),P$o=o(" class method or the "),oG=a("a"),B$o=o("from_config()"),I$o=o(` class
method.`),q$o=l(),Z6=a("p"),N$o=o("This class cannot be instantiated directly using "),sfe=a("code"),j$o=o("__init__()"),D$o=o(" (throws an error)."),G$o=l(),lt=a("div"),F(ey.$$.fragment),O$o=l(),lfe=a("p"),V$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),X$o=l(),Gi=a("p"),z$o=o(`Note:
Loading a model from its configuration file does `),ife=a("strong"),Q$o=o("not"),W$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),H$o=o("from_pretrained()"),U$o=o(" to load the model weights."),J$o=l(),F(p7.$$.fragment),Y$o=l(),eo=a("div"),F(oy.$$.fragment),K$o=l(),dfe=a("p"),Z$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eko=l(),Sa=a("p"),oko=o("The model class to instantiate is selected based on the "),cfe=a("code"),rko=o("model_type"),tko=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),ako=o("pretrained_model_name_or_path"),nko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),sko=o("pretrained_model_name_or_path"),lko=o(":"),iko=l(),Y=a("ul"),u7=a("li"),gfe=a("strong"),dko=o("albert"),cko=o(" \u2014 "),tG=a("a"),fko=o("AlbertForMultipleChoice"),mko=o(" (ALBERT model)"),gko=l(),_7=a("li"),hfe=a("strong"),hko=o("bert"),pko=o(" \u2014 "),aG=a("a"),uko=o("BertForMultipleChoice"),_ko=o(" (BERT model)"),bko=l(),b7=a("li"),pfe=a("strong"),vko=o("big_bird"),Fko=o(" \u2014 "),nG=a("a"),Tko=o("BigBirdForMultipleChoice"),Mko=o(" (BigBird model)"),Eko=l(),v7=a("li"),ufe=a("strong"),Cko=o("camembert"),wko=o(" \u2014 "),sG=a("a"),Ako=o("CamembertForMultipleChoice"),yko=o(" (CamemBERT model)"),Lko=l(),F7=a("li"),_fe=a("strong"),xko=o("canine"),$ko=o(" \u2014 "),lG=a("a"),kko=o("CanineForMultipleChoice"),Sko=o(" (Canine model)"),Rko=l(),T7=a("li"),bfe=a("strong"),Pko=o("convbert"),Bko=o(" \u2014 "),iG=a("a"),Iko=o("ConvBertForMultipleChoice"),qko=o(" (ConvBERT model)"),Nko=l(),M7=a("li"),vfe=a("strong"),jko=o("data2vec-text"),Dko=o(" \u2014 "),dG=a("a"),Gko=o("Data2VecTextForMultipleChoice"),Oko=o(" (Data2VecText model)"),Vko=l(),E7=a("li"),Ffe=a("strong"),Xko=o("deberta-v2"),zko=o(" \u2014 "),cG=a("a"),Qko=o("DebertaV2ForMultipleChoice"),Wko=o(" (DeBERTa-v2 model)"),Hko=l(),C7=a("li"),Tfe=a("strong"),Uko=o("distilbert"),Jko=o(" \u2014 "),fG=a("a"),Yko=o("DistilBertForMultipleChoice"),Kko=o(" (DistilBERT model)"),Zko=l(),w7=a("li"),Mfe=a("strong"),eSo=o("electra"),oSo=o(" \u2014 "),mG=a("a"),rSo=o("ElectraForMultipleChoice"),tSo=o(" (ELECTRA model)"),aSo=l(),A7=a("li"),Efe=a("strong"),nSo=o("flaubert"),sSo=o(" \u2014 "),gG=a("a"),lSo=o("FlaubertForMultipleChoice"),iSo=o(" (FlauBERT model)"),dSo=l(),y7=a("li"),Cfe=a("strong"),cSo=o("fnet"),fSo=o(" \u2014 "),hG=a("a"),mSo=o("FNetForMultipleChoice"),gSo=o(" (FNet model)"),hSo=l(),L7=a("li"),wfe=a("strong"),pSo=o("funnel"),uSo=o(" \u2014 "),pG=a("a"),_So=o("FunnelForMultipleChoice"),bSo=o(" (Funnel Transformer model)"),vSo=l(),x7=a("li"),Afe=a("strong"),FSo=o("ibert"),TSo=o(" \u2014 "),uG=a("a"),MSo=o("IBertForMultipleChoice"),ESo=o(" (I-BERT model)"),CSo=l(),$7=a("li"),yfe=a("strong"),wSo=o("longformer"),ASo=o(" \u2014 "),_G=a("a"),ySo=o("LongformerForMultipleChoice"),LSo=o(" (Longformer model)"),xSo=l(),k7=a("li"),Lfe=a("strong"),$So=o("megatron-bert"),kSo=o(" \u2014 "),bG=a("a"),SSo=o("MegatronBertForMultipleChoice"),RSo=o(" (MegatronBert model)"),PSo=l(),S7=a("li"),xfe=a("strong"),BSo=o("mobilebert"),ISo=o(" \u2014 "),vG=a("a"),qSo=o("MobileBertForMultipleChoice"),NSo=o(" (MobileBERT model)"),jSo=l(),R7=a("li"),$fe=a("strong"),DSo=o("mpnet"),GSo=o(" \u2014 "),FG=a("a"),OSo=o("MPNetForMultipleChoice"),VSo=o(" (MPNet model)"),XSo=l(),P7=a("li"),kfe=a("strong"),zSo=o("nystromformer"),QSo=o(" \u2014 "),TG=a("a"),WSo=o("NystromformerForMultipleChoice"),HSo=o(" (Nystromformer model)"),USo=l(),B7=a("li"),Sfe=a("strong"),JSo=o("qdqbert"),YSo=o(" \u2014 "),MG=a("a"),KSo=o("QDQBertForMultipleChoice"),ZSo=o(" (QDQBert model)"),eRo=l(),I7=a("li"),Rfe=a("strong"),oRo=o("rembert"),rRo=o(" \u2014 "),EG=a("a"),tRo=o("RemBertForMultipleChoice"),aRo=o(" (RemBERT model)"),nRo=l(),q7=a("li"),Pfe=a("strong"),sRo=o("roberta"),lRo=o(" \u2014 "),CG=a("a"),iRo=o("RobertaForMultipleChoice"),dRo=o(" (RoBERTa model)"),cRo=l(),N7=a("li"),Bfe=a("strong"),fRo=o("roformer"),mRo=o(" \u2014 "),wG=a("a"),gRo=o("RoFormerForMultipleChoice"),hRo=o(" (RoFormer model)"),pRo=l(),j7=a("li"),Ife=a("strong"),uRo=o("squeezebert"),_Ro=o(" \u2014 "),AG=a("a"),bRo=o("SqueezeBertForMultipleChoice"),vRo=o(" (SqueezeBERT model)"),FRo=l(),D7=a("li"),qfe=a("strong"),TRo=o("xlm"),MRo=o(" \u2014 "),yG=a("a"),ERo=o("XLMForMultipleChoice"),CRo=o(" (XLM model)"),wRo=l(),G7=a("li"),Nfe=a("strong"),ARo=o("xlm-roberta"),yRo=o(" \u2014 "),LG=a("a"),LRo=o("XLMRobertaForMultipleChoice"),xRo=o(" (XLM-RoBERTa model)"),$Ro=l(),O7=a("li"),jfe=a("strong"),kRo=o("xlm-roberta-xl"),SRo=o(" \u2014 "),xG=a("a"),RRo=o("XLMRobertaXLForMultipleChoice"),PRo=o(" (XLM-RoBERTa-XL model)"),BRo=l(),V7=a("li"),Dfe=a("strong"),IRo=o("xlnet"),qRo=o(" \u2014 "),$G=a("a"),NRo=o("XLNetForMultipleChoice"),jRo=o(" (XLNet model)"),DRo=l(),X7=a("li"),Gfe=a("strong"),GRo=o("yoso"),ORo=o(" \u2014 "),kG=a("a"),VRo=o("YosoForMultipleChoice"),XRo=o(" (YOSO model)"),zRo=l(),z7=a("p"),QRo=o("The model is set in evaluation mode by default using "),Ofe=a("code"),WRo=o("model.eval()"),HRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=a("code"),URo=o("model.train()"),JRo=l(),F(Q7.$$.fragment),iIe=l(),Oi=a("h2"),W7=a("a"),Xfe=a("span"),F(ry.$$.fragment),YRo=l(),zfe=a("span"),KRo=o("AutoModelForNextSentencePrediction"),dIe=l(),Bo=a("div"),F(ty.$$.fragment),ZRo=l(),Vi=a("p"),ePo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SG=a("a"),oPo=o("from_pretrained()"),rPo=o(" class method or the "),RG=a("a"),tPo=o("from_config()"),aPo=o(` class
method.`),nPo=l(),ay=a("p"),sPo=o("This class cannot be instantiated directly using "),Qfe=a("code"),lPo=o("__init__()"),iPo=o(" (throws an error)."),dPo=l(),it=a("div"),F(ny.$$.fragment),cPo=l(),Wfe=a("p"),fPo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mPo=l(),Xi=a("p"),gPo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),hPo=o("not"),pPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),uPo=o("from_pretrained()"),_Po=o(" to load the model weights."),bPo=l(),F(H7.$$.fragment),vPo=l(),oo=a("div"),F(sy.$$.fragment),FPo=l(),Ufe=a("p"),TPo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MPo=l(),Ra=a("p"),EPo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),CPo=o("model_type"),wPo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),APo=o("pretrained_model_name_or_path"),yPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),LPo=o("pretrained_model_name_or_path"),xPo=o(":"),$Po=l(),Yr=a("ul"),U7=a("li"),Zfe=a("strong"),kPo=o("bert"),SPo=o(" \u2014 "),BG=a("a"),RPo=o("BertForNextSentencePrediction"),PPo=o(" (BERT model)"),BPo=l(),J7=a("li"),eme=a("strong"),IPo=o("fnet"),qPo=o(" \u2014 "),IG=a("a"),NPo=o("FNetForNextSentencePrediction"),jPo=o(" (FNet model)"),DPo=l(),Y7=a("li"),ome=a("strong"),GPo=o("megatron-bert"),OPo=o(" \u2014 "),qG=a("a"),VPo=o("MegatronBertForNextSentencePrediction"),XPo=o(" (MegatronBert model)"),zPo=l(),K7=a("li"),rme=a("strong"),QPo=o("mobilebert"),WPo=o(" \u2014 "),NG=a("a"),HPo=o("MobileBertForNextSentencePrediction"),UPo=o(" (MobileBERT model)"),JPo=l(),Z7=a("li"),tme=a("strong"),YPo=o("qdqbert"),KPo=o(" \u2014 "),jG=a("a"),ZPo=o("QDQBertForNextSentencePrediction"),eBo=o(" (QDQBert model)"),oBo=l(),eb=a("p"),rBo=o("The model is set in evaluation mode by default using "),ame=a("code"),tBo=o("model.eval()"),aBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=a("code"),nBo=o("model.train()"),sBo=l(),F(ob.$$.fragment),cIe=l(),zi=a("h2"),rb=a("a"),sme=a("span"),F(ly.$$.fragment),lBo=l(),lme=a("span"),iBo=o("AutoModelForTokenClassification"),fIe=l(),Io=a("div"),F(iy.$$.fragment),dBo=l(),Qi=a("p"),cBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DG=a("a"),fBo=o("from_pretrained()"),mBo=o(" class method or the "),GG=a("a"),gBo=o("from_config()"),hBo=o(` class
method.`),pBo=l(),dy=a("p"),uBo=o("This class cannot be instantiated directly using "),ime=a("code"),_Bo=o("__init__()"),bBo=o(" (throws an error)."),vBo=l(),dt=a("div"),F(cy.$$.fragment),FBo=l(),dme=a("p"),TBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MBo=l(),Wi=a("p"),EBo=o(`Note:
Loading a model from its configuration file does `),cme=a("strong"),CBo=o("not"),wBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),ABo=o("from_pretrained()"),yBo=o(" to load the model weights."),LBo=l(),F(tb.$$.fragment),xBo=l(),ro=a("div"),F(fy.$$.fragment),$Bo=l(),fme=a("p"),kBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SBo=l(),Pa=a("p"),RBo=o("The model class to instantiate is selected based on the "),mme=a("code"),PBo=o("model_type"),BBo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),IBo=o("pretrained_model_name_or_path"),qBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),NBo=o("pretrained_model_name_or_path"),jBo=o(":"),DBo=l(),U=a("ul"),ab=a("li"),pme=a("strong"),GBo=o("albert"),OBo=o(" \u2014 "),VG=a("a"),VBo=o("AlbertForTokenClassification"),XBo=o(" (ALBERT model)"),zBo=l(),nb=a("li"),ume=a("strong"),QBo=o("bert"),WBo=o(" \u2014 "),XG=a("a"),HBo=o("BertForTokenClassification"),UBo=o(" (BERT model)"),JBo=l(),sb=a("li"),_me=a("strong"),YBo=o("big_bird"),KBo=o(" \u2014 "),zG=a("a"),ZBo=o("BigBirdForTokenClassification"),eIo=o(" (BigBird model)"),oIo=l(),lb=a("li"),bme=a("strong"),rIo=o("camembert"),tIo=o(" \u2014 "),QG=a("a"),aIo=o("CamembertForTokenClassification"),nIo=o(" (CamemBERT model)"),sIo=l(),ib=a("li"),vme=a("strong"),lIo=o("canine"),iIo=o(" \u2014 "),WG=a("a"),dIo=o("CanineForTokenClassification"),cIo=o(" (Canine model)"),fIo=l(),db=a("li"),Fme=a("strong"),mIo=o("convbert"),gIo=o(" \u2014 "),HG=a("a"),hIo=o("ConvBertForTokenClassification"),pIo=o(" (ConvBERT model)"),uIo=l(),cb=a("li"),Tme=a("strong"),_Io=o("data2vec-text"),bIo=o(" \u2014 "),UG=a("a"),vIo=o("Data2VecTextForTokenClassification"),FIo=o(" (Data2VecText model)"),TIo=l(),fb=a("li"),Mme=a("strong"),MIo=o("deberta"),EIo=o(" \u2014 "),JG=a("a"),CIo=o("DebertaForTokenClassification"),wIo=o(" (DeBERTa model)"),AIo=l(),mb=a("li"),Eme=a("strong"),yIo=o("deberta-v2"),LIo=o(" \u2014 "),YG=a("a"),xIo=o("DebertaV2ForTokenClassification"),$Io=o(" (DeBERTa-v2 model)"),kIo=l(),gb=a("li"),Cme=a("strong"),SIo=o("distilbert"),RIo=o(" \u2014 "),KG=a("a"),PIo=o("DistilBertForTokenClassification"),BIo=o(" (DistilBERT model)"),IIo=l(),hb=a("li"),wme=a("strong"),qIo=o("electra"),NIo=o(" \u2014 "),ZG=a("a"),jIo=o("ElectraForTokenClassification"),DIo=o(" (ELECTRA model)"),GIo=l(),pb=a("li"),Ame=a("strong"),OIo=o("flaubert"),VIo=o(" \u2014 "),eO=a("a"),XIo=o("FlaubertForTokenClassification"),zIo=o(" (FlauBERT model)"),QIo=l(),ub=a("li"),yme=a("strong"),WIo=o("fnet"),HIo=o(" \u2014 "),oO=a("a"),UIo=o("FNetForTokenClassification"),JIo=o(" (FNet model)"),YIo=l(),_b=a("li"),Lme=a("strong"),KIo=o("funnel"),ZIo=o(" \u2014 "),rO=a("a"),eqo=o("FunnelForTokenClassification"),oqo=o(" (Funnel Transformer model)"),rqo=l(),bb=a("li"),xme=a("strong"),tqo=o("gpt2"),aqo=o(" \u2014 "),tO=a("a"),nqo=o("GPT2ForTokenClassification"),sqo=o(" (OpenAI GPT-2 model)"),lqo=l(),vb=a("li"),$me=a("strong"),iqo=o("ibert"),dqo=o(" \u2014 "),aO=a("a"),cqo=o("IBertForTokenClassification"),fqo=o(" (I-BERT model)"),mqo=l(),Fb=a("li"),kme=a("strong"),gqo=o("layoutlm"),hqo=o(" \u2014 "),nO=a("a"),pqo=o("LayoutLMForTokenClassification"),uqo=o(" (LayoutLM model)"),_qo=l(),Tb=a("li"),Sme=a("strong"),bqo=o("layoutlmv2"),vqo=o(" \u2014 "),sO=a("a"),Fqo=o("LayoutLMv2ForTokenClassification"),Tqo=o(" (LayoutLMv2 model)"),Mqo=l(),Mb=a("li"),Rme=a("strong"),Eqo=o("longformer"),Cqo=o(" \u2014 "),lO=a("a"),wqo=o("LongformerForTokenClassification"),Aqo=o(" (Longformer model)"),yqo=l(),Eb=a("li"),Pme=a("strong"),Lqo=o("megatron-bert"),xqo=o(" \u2014 "),iO=a("a"),$qo=o("MegatronBertForTokenClassification"),kqo=o(" (MegatronBert model)"),Sqo=l(),Cb=a("li"),Bme=a("strong"),Rqo=o("mobilebert"),Pqo=o(" \u2014 "),dO=a("a"),Bqo=o("MobileBertForTokenClassification"),Iqo=o(" (MobileBERT model)"),qqo=l(),wb=a("li"),Ime=a("strong"),Nqo=o("mpnet"),jqo=o(" \u2014 "),cO=a("a"),Dqo=o("MPNetForTokenClassification"),Gqo=o(" (MPNet model)"),Oqo=l(),Ab=a("li"),qme=a("strong"),Vqo=o("nystromformer"),Xqo=o(" \u2014 "),fO=a("a"),zqo=o("NystromformerForTokenClassification"),Qqo=o(" (Nystromformer model)"),Wqo=l(),yb=a("li"),Nme=a("strong"),Hqo=o("qdqbert"),Uqo=o(" \u2014 "),mO=a("a"),Jqo=o("QDQBertForTokenClassification"),Yqo=o(" (QDQBert model)"),Kqo=l(),Lb=a("li"),jme=a("strong"),Zqo=o("rembert"),eNo=o(" \u2014 "),gO=a("a"),oNo=o("RemBertForTokenClassification"),rNo=o(" (RemBERT model)"),tNo=l(),xb=a("li"),Dme=a("strong"),aNo=o("roberta"),nNo=o(" \u2014 "),hO=a("a"),sNo=o("RobertaForTokenClassification"),lNo=o(" (RoBERTa model)"),iNo=l(),$b=a("li"),Gme=a("strong"),dNo=o("roformer"),cNo=o(" \u2014 "),pO=a("a"),fNo=o("RoFormerForTokenClassification"),mNo=o(" (RoFormer model)"),gNo=l(),kb=a("li"),Ome=a("strong"),hNo=o("squeezebert"),pNo=o(" \u2014 "),uO=a("a"),uNo=o("SqueezeBertForTokenClassification"),_No=o(" (SqueezeBERT model)"),bNo=l(),Sb=a("li"),Vme=a("strong"),vNo=o("xlm"),FNo=o(" \u2014 "),_O=a("a"),TNo=o("XLMForTokenClassification"),MNo=o(" (XLM model)"),ENo=l(),Rb=a("li"),Xme=a("strong"),CNo=o("xlm-roberta"),wNo=o(" \u2014 "),bO=a("a"),ANo=o("XLMRobertaForTokenClassification"),yNo=o(" (XLM-RoBERTa model)"),LNo=l(),Pb=a("li"),zme=a("strong"),xNo=o("xlm-roberta-xl"),$No=o(" \u2014 "),vO=a("a"),kNo=o("XLMRobertaXLForTokenClassification"),SNo=o(" (XLM-RoBERTa-XL model)"),RNo=l(),Bb=a("li"),Qme=a("strong"),PNo=o("xlnet"),BNo=o(" \u2014 "),FO=a("a"),INo=o("XLNetForTokenClassification"),qNo=o(" (XLNet model)"),NNo=l(),Ib=a("li"),Wme=a("strong"),jNo=o("yoso"),DNo=o(" \u2014 "),TO=a("a"),GNo=o("YosoForTokenClassification"),ONo=o(" (YOSO model)"),VNo=l(),qb=a("p"),XNo=o("The model is set in evaluation mode by default using "),Hme=a("code"),zNo=o("model.eval()"),QNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),WNo=o("model.train()"),HNo=l(),F(Nb.$$.fragment),mIe=l(),Hi=a("h2"),jb=a("a"),Jme=a("span"),F(my.$$.fragment),UNo=l(),Yme=a("span"),JNo=o("AutoModelForQuestionAnswering"),gIe=l(),qo=a("div"),F(gy.$$.fragment),YNo=l(),Ui=a("p"),KNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MO=a("a"),ZNo=o("from_pretrained()"),ejo=o(" class method or the "),EO=a("a"),ojo=o("from_config()"),rjo=o(` class
method.`),tjo=l(),hy=a("p"),ajo=o("This class cannot be instantiated directly using "),Kme=a("code"),njo=o("__init__()"),sjo=o(" (throws an error)."),ljo=l(),ct=a("div"),F(py.$$.fragment),ijo=l(),Zme=a("p"),djo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cjo=l(),Ji=a("p"),fjo=o(`Note:
Loading a model from its configuration file does `),ege=a("strong"),mjo=o("not"),gjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=a("a"),hjo=o("from_pretrained()"),pjo=o(" to load the model weights."),ujo=l(),F(Db.$$.fragment),_jo=l(),to=a("div"),F(uy.$$.fragment),bjo=l(),oge=a("p"),vjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fjo=l(),Ba=a("p"),Tjo=o("The model class to instantiate is selected based on the "),rge=a("code"),Mjo=o("model_type"),Ejo=o(` property of the config object (either
passed as an argument or loaded from `),tge=a("code"),Cjo=o("pretrained_model_name_or_path"),wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=a("code"),Ajo=o("pretrained_model_name_or_path"),yjo=o(":"),Ljo=l(),V=a("ul"),Gb=a("li"),nge=a("strong"),xjo=o("albert"),$jo=o(" \u2014 "),wO=a("a"),kjo=o("AlbertForQuestionAnswering"),Sjo=o(" (ALBERT model)"),Rjo=l(),Ob=a("li"),sge=a("strong"),Pjo=o("bart"),Bjo=o(" \u2014 "),AO=a("a"),Ijo=o("BartForQuestionAnswering"),qjo=o(" (BART model)"),Njo=l(),Vb=a("li"),lge=a("strong"),jjo=o("bert"),Djo=o(" \u2014 "),yO=a("a"),Gjo=o("BertForQuestionAnswering"),Ojo=o(" (BERT model)"),Vjo=l(),Xb=a("li"),ige=a("strong"),Xjo=o("big_bird"),zjo=o(" \u2014 "),LO=a("a"),Qjo=o("BigBirdForQuestionAnswering"),Wjo=o(" (BigBird model)"),Hjo=l(),zb=a("li"),dge=a("strong"),Ujo=o("bigbird_pegasus"),Jjo=o(" \u2014 "),xO=a("a"),Yjo=o("BigBirdPegasusForQuestionAnswering"),Kjo=o(" (BigBirdPegasus model)"),Zjo=l(),Qb=a("li"),cge=a("strong"),eDo=o("camembert"),oDo=o(" \u2014 "),$O=a("a"),rDo=o("CamembertForQuestionAnswering"),tDo=o(" (CamemBERT model)"),aDo=l(),Wb=a("li"),fge=a("strong"),nDo=o("canine"),sDo=o(" \u2014 "),kO=a("a"),lDo=o("CanineForQuestionAnswering"),iDo=o(" (Canine model)"),dDo=l(),Hb=a("li"),mge=a("strong"),cDo=o("convbert"),fDo=o(" \u2014 "),SO=a("a"),mDo=o("ConvBertForQuestionAnswering"),gDo=o(" (ConvBERT model)"),hDo=l(),Ub=a("li"),gge=a("strong"),pDo=o("data2vec-text"),uDo=o(" \u2014 "),RO=a("a"),_Do=o("Data2VecTextForQuestionAnswering"),bDo=o(" (Data2VecText model)"),vDo=l(),Jb=a("li"),hge=a("strong"),FDo=o("deberta"),TDo=o(" \u2014 "),PO=a("a"),MDo=o("DebertaForQuestionAnswering"),EDo=o(" (DeBERTa model)"),CDo=l(),Yb=a("li"),pge=a("strong"),wDo=o("deberta-v2"),ADo=o(" \u2014 "),BO=a("a"),yDo=o("DebertaV2ForQuestionAnswering"),LDo=o(" (DeBERTa-v2 model)"),xDo=l(),Kb=a("li"),uge=a("strong"),$Do=o("distilbert"),kDo=o(" \u2014 "),IO=a("a"),SDo=o("DistilBertForQuestionAnswering"),RDo=o(" (DistilBERT model)"),PDo=l(),Zb=a("li"),_ge=a("strong"),BDo=o("electra"),IDo=o(" \u2014 "),qO=a("a"),qDo=o("ElectraForQuestionAnswering"),NDo=o(" (ELECTRA model)"),jDo=l(),e4=a("li"),bge=a("strong"),DDo=o("flaubert"),GDo=o(" \u2014 "),NO=a("a"),ODo=o("FlaubertForQuestionAnsweringSimple"),VDo=o(" (FlauBERT model)"),XDo=l(),o4=a("li"),vge=a("strong"),zDo=o("fnet"),QDo=o(" \u2014 "),jO=a("a"),WDo=o("FNetForQuestionAnswering"),HDo=o(" (FNet model)"),UDo=l(),r4=a("li"),Fge=a("strong"),JDo=o("funnel"),YDo=o(" \u2014 "),DO=a("a"),KDo=o("FunnelForQuestionAnswering"),ZDo=o(" (Funnel Transformer model)"),eGo=l(),t4=a("li"),Tge=a("strong"),oGo=o("gptj"),rGo=o(" \u2014 "),GO=a("a"),tGo=o("GPTJForQuestionAnswering"),aGo=o(" (GPT-J model)"),nGo=l(),a4=a("li"),Mge=a("strong"),sGo=o("ibert"),lGo=o(" \u2014 "),OO=a("a"),iGo=o("IBertForQuestionAnswering"),dGo=o(" (I-BERT model)"),cGo=l(),n4=a("li"),Ege=a("strong"),fGo=o("layoutlmv2"),mGo=o(" \u2014 "),VO=a("a"),gGo=o("LayoutLMv2ForQuestionAnswering"),hGo=o(" (LayoutLMv2 model)"),pGo=l(),s4=a("li"),Cge=a("strong"),uGo=o("led"),_Go=o(" \u2014 "),XO=a("a"),bGo=o("LEDForQuestionAnswering"),vGo=o(" (LED model)"),FGo=l(),l4=a("li"),wge=a("strong"),TGo=o("longformer"),MGo=o(" \u2014 "),zO=a("a"),EGo=o("LongformerForQuestionAnswering"),CGo=o(" (Longformer model)"),wGo=l(),i4=a("li"),Age=a("strong"),AGo=o("lxmert"),yGo=o(" \u2014 "),QO=a("a"),LGo=o("LxmertForQuestionAnswering"),xGo=o(" (LXMERT model)"),$Go=l(),d4=a("li"),yge=a("strong"),kGo=o("mbart"),SGo=o(" \u2014 "),WO=a("a"),RGo=o("MBartForQuestionAnswering"),PGo=o(" (mBART model)"),BGo=l(),c4=a("li"),Lge=a("strong"),IGo=o("megatron-bert"),qGo=o(" \u2014 "),HO=a("a"),NGo=o("MegatronBertForQuestionAnswering"),jGo=o(" (MegatronBert model)"),DGo=l(),f4=a("li"),xge=a("strong"),GGo=o("mobilebert"),OGo=o(" \u2014 "),UO=a("a"),VGo=o("MobileBertForQuestionAnswering"),XGo=o(" (MobileBERT model)"),zGo=l(),m4=a("li"),$ge=a("strong"),QGo=o("mpnet"),WGo=o(" \u2014 "),JO=a("a"),HGo=o("MPNetForQuestionAnswering"),UGo=o(" (MPNet model)"),JGo=l(),g4=a("li"),kge=a("strong"),YGo=o("nystromformer"),KGo=o(" \u2014 "),YO=a("a"),ZGo=o("NystromformerForQuestionAnswering"),eOo=o(" (Nystromformer model)"),oOo=l(),h4=a("li"),Sge=a("strong"),rOo=o("qdqbert"),tOo=o(" \u2014 "),KO=a("a"),aOo=o("QDQBertForQuestionAnswering"),nOo=o(" (QDQBert model)"),sOo=l(),p4=a("li"),Rge=a("strong"),lOo=o("reformer"),iOo=o(" \u2014 "),ZO=a("a"),dOo=o("ReformerForQuestionAnswering"),cOo=o(" (Reformer model)"),fOo=l(),u4=a("li"),Pge=a("strong"),mOo=o("rembert"),gOo=o(" \u2014 "),eV=a("a"),hOo=o("RemBertForQuestionAnswering"),pOo=o(" (RemBERT model)"),uOo=l(),_4=a("li"),Bge=a("strong"),_Oo=o("roberta"),bOo=o(" \u2014 "),oV=a("a"),vOo=o("RobertaForQuestionAnswering"),FOo=o(" (RoBERTa model)"),TOo=l(),b4=a("li"),Ige=a("strong"),MOo=o("roformer"),EOo=o(" \u2014 "),rV=a("a"),COo=o("RoFormerForQuestionAnswering"),wOo=o(" (RoFormer model)"),AOo=l(),v4=a("li"),qge=a("strong"),yOo=o("splinter"),LOo=o(" \u2014 "),tV=a("a"),xOo=o("SplinterForQuestionAnswering"),$Oo=o(" (Splinter model)"),kOo=l(),F4=a("li"),Nge=a("strong"),SOo=o("squeezebert"),ROo=o(" \u2014 "),aV=a("a"),POo=o("SqueezeBertForQuestionAnswering"),BOo=o(" (SqueezeBERT model)"),IOo=l(),T4=a("li"),jge=a("strong"),qOo=o("xlm"),NOo=o(" \u2014 "),nV=a("a"),jOo=o("XLMForQuestionAnsweringSimple"),DOo=o(" (XLM model)"),GOo=l(),M4=a("li"),Dge=a("strong"),OOo=o("xlm-roberta"),VOo=o(" \u2014 "),sV=a("a"),XOo=o("XLMRobertaForQuestionAnswering"),zOo=o(" (XLM-RoBERTa model)"),QOo=l(),E4=a("li"),Gge=a("strong"),WOo=o("xlm-roberta-xl"),HOo=o(" \u2014 "),lV=a("a"),UOo=o("XLMRobertaXLForQuestionAnswering"),JOo=o(" (XLM-RoBERTa-XL model)"),YOo=l(),C4=a("li"),Oge=a("strong"),KOo=o("xlnet"),ZOo=o(" \u2014 "),iV=a("a"),eVo=o("XLNetForQuestionAnsweringSimple"),oVo=o(" (XLNet model)"),rVo=l(),w4=a("li"),Vge=a("strong"),tVo=o("yoso"),aVo=o(" \u2014 "),dV=a("a"),nVo=o("YosoForQuestionAnswering"),sVo=o(" (YOSO model)"),lVo=l(),A4=a("p"),iVo=o("The model is set in evaluation mode by default using "),Xge=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),fVo=o("model.train()"),mVo=l(),F(y4.$$.fragment),hIe=l(),Yi=a("h2"),L4=a("a"),Qge=a("span"),F(_y.$$.fragment),gVo=l(),Wge=a("span"),hVo=o("AutoModelForTableQuestionAnswering"),pIe=l(),No=a("div"),F(by.$$.fragment),pVo=l(),Ki=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cV=a("a"),_Vo=o("from_pretrained()"),bVo=o(" class method or the "),fV=a("a"),vVo=o("from_config()"),FVo=o(` class
method.`),TVo=l(),vy=a("p"),MVo=o("This class cannot be instantiated directly using "),Hge=a("code"),EVo=o("__init__()"),CVo=o(" (throws an error)."),wVo=l(),ft=a("div"),F(Fy.$$.fragment),AVo=l(),Uge=a("p"),yVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LVo=l(),Zi=a("p"),xVo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),$Vo=o("not"),kVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),SVo=o("from_pretrained()"),RVo=o(" to load the model weights."),PVo=l(),F(x4.$$.fragment),BVo=l(),ao=a("div"),F(Ty.$$.fragment),IVo=l(),Yge=a("p"),qVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NVo=l(),Ia=a("p"),jVo=o("The model class to instantiate is selected based on the "),Kge=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),QVo=l(),ohe=a("ul"),$4=a("li"),rhe=a("strong"),WVo=o("tapas"),HVo=o(" \u2014 "),gV=a("a"),UVo=o("TapasForQuestionAnswering"),JVo=o(" (TAPAS model)"),YVo=l(),k4=a("p"),KVo=o("The model is set in evaluation mode by default using "),the=a("code"),ZVo=o("model.eval()"),eXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),oXo=o("model.train()"),rXo=l(),F(S4.$$.fragment),uIe=l(),ed=a("h2"),R4=a("a"),nhe=a("span"),F(My.$$.fragment),tXo=l(),she=a("span"),aXo=o("AutoModelForImageClassification"),_Ie=l(),jo=a("div"),F(Ey.$$.fragment),nXo=l(),od=a("p"),sXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hV=a("a"),lXo=o("from_pretrained()"),iXo=o(" class method or the "),pV=a("a"),dXo=o("from_config()"),cXo=o(` class
method.`),fXo=l(),Cy=a("p"),mXo=o("This class cannot be instantiated directly using "),lhe=a("code"),gXo=o("__init__()"),hXo=o(" (throws an error)."),pXo=l(),mt=a("div"),F(wy.$$.fragment),uXo=l(),ihe=a("p"),_Xo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bXo=l(),rd=a("p"),vXo=o(`Note:
Loading a model from its configuration file does `),dhe=a("strong"),FXo=o("not"),TXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),MXo=o("from_pretrained()"),EXo=o(" to load the model weights."),CXo=l(),F(P4.$$.fragment),wXo=l(),no=a("div"),F(Ay.$$.fragment),AXo=l(),che=a("p"),yXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LXo=l(),qa=a("p"),xXo=o("The model class to instantiate is selected based on the "),fhe=a("code"),$Xo=o("model_type"),kXo=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),SXo=o("pretrained_model_name_or_path"),RXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),PXo=o("pretrained_model_name_or_path"),BXo=o(":"),IXo=l(),Fe=a("ul"),B4=a("li"),hhe=a("strong"),qXo=o("beit"),NXo=o(" \u2014 "),_V=a("a"),jXo=o("BeitForImageClassification"),DXo=o(" (BEiT model)"),GXo=l(),I4=a("li"),phe=a("strong"),OXo=o("convnext"),VXo=o(" \u2014 "),bV=a("a"),XXo=o("ConvNextForImageClassification"),zXo=o(" (ConvNext model)"),QXo=l(),q4=a("li"),uhe=a("strong"),WXo=o("data2vec-vision"),HXo=o(" \u2014 "),vV=a("a"),UXo=o("Data2VecVisionForImageClassification"),JXo=o(" (Data2VecVision model)"),YXo=l(),Rs=a("li"),_he=a("strong"),KXo=o("deit"),ZXo=o(" \u2014 "),FV=a("a"),ezo=o("DeiTForImageClassification"),ozo=o(" or "),TV=a("a"),rzo=o("DeiTForImageClassificationWithTeacher"),tzo=o(" (DeiT model)"),azo=l(),N4=a("li"),bhe=a("strong"),nzo=o("imagegpt"),szo=o(" \u2014 "),MV=a("a"),lzo=o("ImageGPTForImageClassification"),izo=o(" (ImageGPT model)"),dzo=l(),gt=a("li"),vhe=a("strong"),czo=o("perceiver"),fzo=o(" \u2014 "),EV=a("a"),mzo=o("PerceiverForImageClassificationLearned"),gzo=o(" or "),CV=a("a"),hzo=o("PerceiverForImageClassificationFourier"),pzo=o(" or "),wV=a("a"),uzo=o("PerceiverForImageClassificationConvProcessing"),_zo=o(" (Perceiver model)"),bzo=l(),j4=a("li"),Fhe=a("strong"),vzo=o("poolformer"),Fzo=o(" \u2014 "),AV=a("a"),Tzo=o("PoolFormerForImageClassification"),Mzo=o(" (PoolFormer model)"),Ezo=l(),D4=a("li"),The=a("strong"),Czo=o("regnet"),wzo=o(" \u2014 "),yV=a("a"),Azo=o("RegNetForImageClassification"),yzo=o(" (RegNet model)"),Lzo=l(),G4=a("li"),Mhe=a("strong"),xzo=o("resnet"),$zo=o(" \u2014 "),LV=a("a"),kzo=o("ResNetForImageClassification"),Szo=o(" (ResNet model)"),Rzo=l(),O4=a("li"),Ehe=a("strong"),Pzo=o("segformer"),Bzo=o(" \u2014 "),xV=a("a"),Izo=o("SegformerForImageClassification"),qzo=o(" (SegFormer model)"),Nzo=l(),V4=a("li"),Che=a("strong"),jzo=o("swin"),Dzo=o(" \u2014 "),$V=a("a"),Gzo=o("SwinForImageClassification"),Ozo=o(" (Swin model)"),Vzo=l(),X4=a("li"),whe=a("strong"),Xzo=o("van"),zzo=o(" \u2014 "),kV=a("a"),Qzo=o("VanForImageClassification"),Wzo=o(" (VAN model)"),Hzo=l(),z4=a("li"),Ahe=a("strong"),Uzo=o("vit"),Jzo=o(" \u2014 "),SV=a("a"),Yzo=o("ViTForImageClassification"),Kzo=o(" (ViT model)"),Zzo=l(),Q4=a("p"),eQo=o("The model is set in evaluation mode by default using "),yhe=a("code"),oQo=o("model.eval()"),rQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),tQo=o("model.train()"),aQo=l(),F(W4.$$.fragment),bIe=l(),td=a("h2"),H4=a("a"),xhe=a("span"),F(yy.$$.fragment),nQo=l(),$he=a("span"),sQo=o("AutoModelForVision2Seq"),vIe=l(),Do=a("div"),F(Ly.$$.fragment),lQo=l(),ad=a("p"),iQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RV=a("a"),dQo=o("from_pretrained()"),cQo=o(" class method or the "),PV=a("a"),fQo=o("from_config()"),mQo=o(` class
method.`),gQo=l(),xy=a("p"),hQo=o("This class cannot be instantiated directly using "),khe=a("code"),pQo=o("__init__()"),uQo=o(" (throws an error)."),_Qo=l(),ht=a("div"),F($y.$$.fragment),bQo=l(),She=a("p"),vQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FQo=l(),nd=a("p"),TQo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),MQo=o("not"),EQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),CQo=o("from_pretrained()"),wQo=o(" to load the model weights."),AQo=l(),F(U4.$$.fragment),yQo=l(),so=a("div"),F(ky.$$.fragment),LQo=l(),Phe=a("p"),xQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Qo=l(),Na=a("p"),kQo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),SQo=o("model_type"),RQo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),PQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),IQo=o("pretrained_model_name_or_path"),qQo=o(":"),NQo=l(),Nhe=a("ul"),J4=a("li"),jhe=a("strong"),jQo=o("vision-encoder-decoder"),DQo=o(" \u2014 "),IV=a("a"),GQo=o("VisionEncoderDecoderModel"),OQo=o(" (Vision Encoder decoder model)"),VQo=l(),Y4=a("p"),XQo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),zQo=o("model.eval()"),QQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),WQo=o("model.train()"),HQo=l(),F(K4.$$.fragment),FIe=l(),sd=a("h2"),Z4=a("a"),Ohe=a("span"),F(Sy.$$.fragment),UQo=l(),Vhe=a("span"),JQo=o("AutoModelForAudioClassification"),TIe=l(),Go=a("div"),F(Ry.$$.fragment),YQo=l(),ld=a("p"),KQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qV=a("a"),ZQo=o("from_pretrained()"),eWo=o(" class method or the "),NV=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),Py=a("p"),aWo=o("This class cannot be instantiated directly using "),Xhe=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),pt=a("div"),F(By.$$.fragment),iWo=l(),zhe=a("p"),dWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cWo=l(),id=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),uWo=l(),F(ev.$$.fragment),_Wo=l(),lo=a("div"),F(Iy.$$.fragment),bWo=l(),Whe=a("p"),vWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FWo=l(),ja=a("p"),TWo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(":"),LWo=l(),Ne=a("ul"),ov=a("li"),Yhe=a("strong"),xWo=o("data2vec-audio"),$Wo=o(" \u2014 "),DV=a("a"),kWo=o("Data2VecAudioForSequenceClassification"),SWo=o(" (Data2VecAudio model)"),RWo=l(),rv=a("li"),Khe=a("strong"),PWo=o("hubert"),BWo=o(" \u2014 "),GV=a("a"),IWo=o("HubertForSequenceClassification"),qWo=o(" (Hubert model)"),NWo=l(),tv=a("li"),Zhe=a("strong"),jWo=o("sew"),DWo=o(" \u2014 "),OV=a("a"),GWo=o("SEWForSequenceClassification"),OWo=o(" (SEW model)"),VWo=l(),av=a("li"),epe=a("strong"),XWo=o("sew-d"),zWo=o(" \u2014 "),VV=a("a"),QWo=o("SEWDForSequenceClassification"),WWo=o(" (SEW-D model)"),HWo=l(),nv=a("li"),ope=a("strong"),UWo=o("unispeech"),JWo=o(" \u2014 "),XV=a("a"),YWo=o("UniSpeechForSequenceClassification"),KWo=o(" (UniSpeech model)"),ZWo=l(),sv=a("li"),rpe=a("strong"),eHo=o("unispeech-sat"),oHo=o(" \u2014 "),zV=a("a"),rHo=o("UniSpeechSatForSequenceClassification"),tHo=o(" (UniSpeechSat model)"),aHo=l(),lv=a("li"),tpe=a("strong"),nHo=o("wav2vec2"),sHo=o(" \u2014 "),QV=a("a"),lHo=o("Wav2Vec2ForSequenceClassification"),iHo=o(" (Wav2Vec2 model)"),dHo=l(),iv=a("li"),ape=a("strong"),cHo=o("wavlm"),fHo=o(" \u2014 "),WV=a("a"),mHo=o("WavLMForSequenceClassification"),gHo=o(" (WavLM model)"),hHo=l(),dv=a("p"),pHo=o("The model is set in evaluation mode by default using "),npe=a("code"),uHo=o("model.eval()"),_Ho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=a("code"),bHo=o("model.train()"),vHo=l(),F(cv.$$.fragment),MIe=l(),dd=a("h2"),fv=a("a"),lpe=a("span"),F(qy.$$.fragment),FHo=l(),ipe=a("span"),THo=o("AutoModelForAudioFrameClassification"),EIe=l(),Oo=a("div"),F(Ny.$$.fragment),MHo=l(),cd=a("p"),EHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HV=a("a"),CHo=o("from_pretrained()"),wHo=o(" class method or the "),UV=a("a"),AHo=o("from_config()"),yHo=o(` class
method.`),LHo=l(),jy=a("p"),xHo=o("This class cannot be instantiated directly using "),dpe=a("code"),$Ho=o("__init__()"),kHo=o(" (throws an error)."),SHo=l(),ut=a("div"),F(Dy.$$.fragment),RHo=l(),cpe=a("p"),PHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BHo=l(),fd=a("p"),IHo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),qHo=o("not"),NHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),jHo=o("from_pretrained()"),DHo=o(" to load the model weights."),GHo=l(),F(mv.$$.fragment),OHo=l(),io=a("div"),F(Gy.$$.fragment),VHo=l(),mpe=a("p"),XHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),zHo=l(),Da=a("p"),QHo=o("The model class to instantiate is selected based on the "),gpe=a("code"),WHo=o("model_type"),HHo=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),YHo=o("pretrained_model_name_or_path"),KHo=o(":"),ZHo=l(),Ga=a("ul"),gv=a("li"),upe=a("strong"),eUo=o("data2vec-audio"),oUo=o(" \u2014 "),YV=a("a"),rUo=o("Data2VecAudioForAudioFrameClassification"),tUo=o(" (Data2VecAudio model)"),aUo=l(),hv=a("li"),_pe=a("strong"),nUo=o("unispeech-sat"),sUo=o(" \u2014 "),KV=a("a"),lUo=o("UniSpeechSatForAudioFrameClassification"),iUo=o(" (UniSpeechSat model)"),dUo=l(),pv=a("li"),bpe=a("strong"),cUo=o("wav2vec2"),fUo=o(" \u2014 "),ZV=a("a"),mUo=o("Wav2Vec2ForAudioFrameClassification"),gUo=o(" (Wav2Vec2 model)"),hUo=l(),uv=a("li"),vpe=a("strong"),pUo=o("wavlm"),uUo=o(" \u2014 "),eX=a("a"),_Uo=o("WavLMForAudioFrameClassification"),bUo=o(" (WavLM model)"),vUo=l(),_v=a("p"),FUo=o("The model is set in evaluation mode by default using "),Fpe=a("code"),TUo=o("model.eval()"),MUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=a("code"),EUo=o("model.train()"),CUo=l(),F(bv.$$.fragment),CIe=l(),md=a("h2"),vv=a("a"),Mpe=a("span"),F(Oy.$$.fragment),wUo=l(),Epe=a("span"),AUo=o("AutoModelForCTC"),wIe=l(),Vo=a("div"),F(Vy.$$.fragment),yUo=l(),gd=a("p"),LUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oX=a("a"),xUo=o("from_pretrained()"),$Uo=o(" class method or the "),rX=a("a"),kUo=o("from_config()"),SUo=o(` class
method.`),RUo=l(),Xy=a("p"),PUo=o("This class cannot be instantiated directly using "),Cpe=a("code"),BUo=o("__init__()"),IUo=o(" (throws an error)."),qUo=l(),_t=a("div"),F(zy.$$.fragment),NUo=l(),wpe=a("p"),jUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),DUo=l(),hd=a("p"),GUo=o(`Note:
Loading a model from its configuration file does `),Ape=a("strong"),OUo=o("not"),VUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),XUo=o("from_pretrained()"),zUo=o(" to load the model weights."),QUo=l(),F(Fv.$$.fragment),WUo=l(),co=a("div"),F(Qy.$$.fragment),HUo=l(),ype=a("p"),UUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),JUo=l(),Oa=a("p"),YUo=o("The model class to instantiate is selected based on the "),Lpe=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),xpe=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),je=a("ul"),Tv=a("li"),kpe=a("strong"),nJo=o("data2vec-audio"),sJo=o(" \u2014 "),aX=a("a"),lJo=o("Data2VecAudioForCTC"),iJo=o(" (Data2VecAudio model)"),dJo=l(),Mv=a("li"),Spe=a("strong"),cJo=o("hubert"),fJo=o(" \u2014 "),nX=a("a"),mJo=o("HubertForCTC"),gJo=o(" (Hubert model)"),hJo=l(),Ev=a("li"),Rpe=a("strong"),pJo=o("sew"),uJo=o(" \u2014 "),sX=a("a"),_Jo=o("SEWForCTC"),bJo=o(" (SEW model)"),vJo=l(),Cv=a("li"),Ppe=a("strong"),FJo=o("sew-d"),TJo=o(" \u2014 "),lX=a("a"),MJo=o("SEWDForCTC"),EJo=o(" (SEW-D model)"),CJo=l(),wv=a("li"),Bpe=a("strong"),wJo=o("unispeech"),AJo=o(" \u2014 "),iX=a("a"),yJo=o("UniSpeechForCTC"),LJo=o(" (UniSpeech model)"),xJo=l(),Av=a("li"),Ipe=a("strong"),$Jo=o("unispeech-sat"),kJo=o(" \u2014 "),dX=a("a"),SJo=o("UniSpeechSatForCTC"),RJo=o(" (UniSpeechSat model)"),PJo=l(),yv=a("li"),qpe=a("strong"),BJo=o("wav2vec2"),IJo=o(" \u2014 "),cX=a("a"),qJo=o("Wav2Vec2ForCTC"),NJo=o(" (Wav2Vec2 model)"),jJo=l(),Lv=a("li"),Npe=a("strong"),DJo=o("wavlm"),GJo=o(" \u2014 "),fX=a("a"),OJo=o("WavLMForCTC"),VJo=o(" (WavLM model)"),XJo=l(),xv=a("p"),zJo=o("The model is set in evaluation mode by default using "),jpe=a("code"),QJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),HJo=o("model.train()"),UJo=l(),F($v.$$.fragment),AIe=l(),pd=a("h2"),kv=a("a"),Gpe=a("span"),F(Wy.$$.fragment),JJo=l(),Ope=a("span"),YJo=o("AutoModelForSpeechSeq2Seq"),yIe=l(),Xo=a("div"),F(Hy.$$.fragment),KJo=l(),ud=a("p"),ZJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mX=a("a"),eYo=o("from_pretrained()"),oYo=o(" class method or the "),gX=a("a"),rYo=o("from_config()"),tYo=o(` class
method.`),aYo=l(),Uy=a("p"),nYo=o("This class cannot be instantiated directly using "),Vpe=a("code"),sYo=o("__init__()"),lYo=o(" (throws an error)."),iYo=l(),bt=a("div"),F(Jy.$$.fragment),dYo=l(),Xpe=a("p"),cYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fYo=l(),_d=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),gYo=o("not"),hYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),pYo=o("from_pretrained()"),uYo=o(" to load the model weights."),_Yo=l(),F(Sv.$$.fragment),bYo=l(),fo=a("div"),F(Yy.$$.fragment),vYo=l(),Qpe=a("p"),FYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TYo=l(),Va=a("p"),MYo=o("The model class to instantiate is selected based on the "),Wpe=a("code"),EYo=o("model_type"),CYo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(":"),xYo=l(),Ky=a("ul"),Rv=a("li"),Jpe=a("strong"),$Yo=o("speech-encoder-decoder"),kYo=o(" \u2014 "),pX=a("a"),SYo=o("SpeechEncoderDecoderModel"),RYo=o(" (Speech Encoder decoder model)"),PYo=l(),Pv=a("li"),Ype=a("strong"),BYo=o("speech_to_text"),IYo=o(" \u2014 "),uX=a("a"),qYo=o("Speech2TextForConditionalGeneration"),NYo=o(" (Speech2Text model)"),jYo=l(),Bv=a("p"),DYo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),GYo=o("model.eval()"),OYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),VYo=o("model.train()"),XYo=l(),F(Iv.$$.fragment),LIe=l(),bd=a("h2"),qv=a("a"),eue=a("span"),F(Zy.$$.fragment),zYo=l(),oue=a("span"),QYo=o("AutoModelForAudioXVector"),xIe=l(),zo=a("div"),F(eL.$$.fragment),WYo=l(),vd=a("p"),HYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_X=a("a"),UYo=o("from_pretrained()"),JYo=o(" class method or the "),bX=a("a"),YYo=o("from_config()"),KYo=o(` class
method.`),ZYo=l(),oL=a("p"),eKo=o("This class cannot be instantiated directly using "),rue=a("code"),oKo=o("__init__()"),rKo=o(" (throws an error)."),tKo=l(),vt=a("div"),F(rL.$$.fragment),aKo=l(),tue=a("p"),nKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),sKo=l(),Fd=a("p"),lKo=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),iKo=o("not"),dKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),cKo=o("from_pretrained()"),fKo=o(" to load the model weights."),mKo=l(),F(Nv.$$.fragment),gKo=l(),mo=a("div"),F(tL.$$.fragment),hKo=l(),nue=a("p"),pKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uKo=l(),Xa=a("p"),_Ko=o("The model class to instantiate is selected based on the "),sue=a("code"),bKo=o("model_type"),vKo=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),FKo=o("pretrained_model_name_or_path"),TKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(":"),CKo=l(),za=a("ul"),jv=a("li"),due=a("strong"),wKo=o("data2vec-audio"),AKo=o(" \u2014 "),FX=a("a"),yKo=o("Data2VecAudioForXVector"),LKo=o(" (Data2VecAudio model)"),xKo=l(),Dv=a("li"),cue=a("strong"),$Ko=o("unispeech-sat"),kKo=o(" \u2014 "),TX=a("a"),SKo=o("UniSpeechSatForXVector"),RKo=o(" (UniSpeechSat model)"),PKo=l(),Gv=a("li"),fue=a("strong"),BKo=o("wav2vec2"),IKo=o(" \u2014 "),MX=a("a"),qKo=o("Wav2Vec2ForXVector"),NKo=o(" (Wav2Vec2 model)"),jKo=l(),Ov=a("li"),mue=a("strong"),DKo=o("wavlm"),GKo=o(" \u2014 "),EX=a("a"),OKo=o("WavLMForXVector"),VKo=o(" (WavLM model)"),XKo=l(),Vv=a("p"),zKo=o("The model is set in evaluation mode by default using "),gue=a("code"),QKo=o("model.eval()"),WKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=a("code"),HKo=o("model.train()"),UKo=l(),F(Xv.$$.fragment),$Ie=l(),Td=a("h2"),zv=a("a"),pue=a("span"),F(aL.$$.fragment),JKo=l(),uue=a("span"),YKo=o("AutoModelForMaskedImageModeling"),kIe=l(),Qo=a("div"),F(nL.$$.fragment),KKo=l(),Md=a("p"),ZKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CX=a("a"),eZo=o("from_pretrained()"),oZo=o(" class method or the "),wX=a("a"),rZo=o("from_config()"),tZo=o(` class
method.`),aZo=l(),sL=a("p"),nZo=o("This class cannot be instantiated directly using "),_ue=a("code"),sZo=o("__init__()"),lZo=o(" (throws an error)."),iZo=l(),Ft=a("div"),F(lL.$$.fragment),dZo=l(),bue=a("p"),cZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fZo=l(),Ed=a("p"),mZo=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),gZo=o("not"),hZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),pZo=o("from_pretrained()"),uZo=o(" to load the model weights."),_Zo=l(),F(Qv.$$.fragment),bZo=l(),go=a("div"),F(iL.$$.fragment),vZo=l(),Fue=a("p"),FZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),TZo=l(),Qa=a("p"),MZo=o("The model class to instantiate is selected based on the "),Tue=a("code"),EZo=o("model_type"),CZo=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),wZo=o("pretrained_model_name_or_path"),AZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),yZo=o("pretrained_model_name_or_path"),LZo=o(":"),xZo=l(),Cd=a("ul"),Wv=a("li"),Cue=a("strong"),$Zo=o("deit"),kZo=o(" \u2014 "),yX=a("a"),SZo=o("DeiTForMaskedImageModeling"),RZo=o(" (DeiT model)"),PZo=l(),Hv=a("li"),wue=a("strong"),BZo=o("swin"),IZo=o(" \u2014 "),LX=a("a"),qZo=o("SwinForMaskedImageModeling"),NZo=o(" (Swin model)"),jZo=l(),Uv=a("li"),Aue=a("strong"),DZo=o("vit"),GZo=o(" \u2014 "),xX=a("a"),OZo=o("ViTForMaskedImageModeling"),VZo=o(" (ViT model)"),XZo=l(),Jv=a("p"),zZo=o("The model is set in evaluation mode by default using "),yue=a("code"),QZo=o("model.eval()"),WZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),HZo=o("model.train()"),UZo=l(),F(Yv.$$.fragment),SIe=l(),wd=a("h2"),Kv=a("a"),xue=a("span"),F(dL.$$.fragment),JZo=l(),$ue=a("span"),YZo=o("AutoModelForObjectDetection"),RIe=l(),Wo=a("div"),F(cL.$$.fragment),KZo=l(),Ad=a("p"),ZZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$X=a("a"),eer=o("from_pretrained()"),oer=o(" class method or the "),kX=a("a"),rer=o("from_config()"),ter=o(` class
method.`),aer=l(),fL=a("p"),ner=o("This class cannot be instantiated directly using "),kue=a("code"),ser=o("__init__()"),ler=o(" (throws an error)."),ier=l(),Tt=a("div"),F(mL.$$.fragment),der=l(),Sue=a("p"),cer=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fer=l(),yd=a("p"),mer=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),ger=o("not"),her=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),per=o("from_pretrained()"),uer=o(" to load the model weights."),_er=l(),F(Zv.$$.fragment),ber=l(),ho=a("div"),F(gL.$$.fragment),ver=l(),Pue=a("p"),Fer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ter=l(),Wa=a("p"),Mer=o("The model class to instantiate is selected based on the "),Bue=a("code"),Eer=o("model_type"),Cer=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),yer=o("pretrained_model_name_or_path"),Ler=o(":"),xer=l(),hL=a("ul"),eF=a("li"),Nue=a("strong"),$er=o("detr"),ker=o(" \u2014 "),RX=a("a"),Ser=o("DetrForObjectDetection"),Rer=o(" (DETR model)"),Per=l(),oF=a("li"),jue=a("strong"),Ber=o("yolos"),Ier=o(" \u2014 "),PX=a("a"),qer=o("YolosForObjectDetection"),Ner=o(" (YOLOS model)"),jer=l(),rF=a("p"),Der=o("The model is set in evaluation mode by default using "),Due=a("code"),Ger=o("model.eval()"),Oer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),Ver=o("model.train()"),Xer=l(),F(tF.$$.fragment),PIe=l(),Ld=a("h2"),aF=a("a"),Oue=a("span"),F(pL.$$.fragment),zer=l(),Vue=a("span"),Qer=o("AutoModelForImageSegmentation"),BIe=l(),Ho=a("div"),F(uL.$$.fragment),Wer=l(),xd=a("p"),Her=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),BX=a("a"),Uer=o("from_pretrained()"),Jer=o(" class method or the "),IX=a("a"),Yer=o("from_config()"),Ker=o(` class
method.`),Zer=l(),_L=a("p"),eor=o("This class cannot be instantiated directly using "),Xue=a("code"),oor=o("__init__()"),ror=o(" (throws an error)."),tor=l(),Mt=a("div"),F(bL.$$.fragment),aor=l(),zue=a("p"),nor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sor=l(),$d=a("p"),lor=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),ior=o("not"),dor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),cor=o("from_pretrained()"),mor=o(" to load the model weights."),gor=l(),F(nF.$$.fragment),hor=l(),po=a("div"),F(vL.$$.fragment),por=l(),Wue=a("p"),uor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_or=l(),Ha=a("p"),bor=o("The model class to instantiate is selected based on the "),Hue=a("code"),vor=o("model_type"),For=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),Tor=o("pretrained_model_name_or_path"),Mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),Eor=o("pretrained_model_name_or_path"),Cor=o(":"),wor=l(),Yue=a("ul"),sF=a("li"),Kue=a("strong"),Aor=o("detr"),yor=o(" \u2014 "),NX=a("a"),Lor=o("DetrForSegmentation"),xor=o(" (DETR model)"),$or=l(),lF=a("p"),kor=o("The model is set in evaluation mode by default using "),Zue=a("code"),Sor=o("model.eval()"),Ror=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),Por=o("model.train()"),Bor=l(),F(iF.$$.fragment),IIe=l(),kd=a("h2"),dF=a("a"),o_e=a("span"),F(FL.$$.fragment),Ior=l(),r_e=a("span"),qor=o("AutoModelForSemanticSegmentation"),qIe=l(),Uo=a("div"),F(TL.$$.fragment),Nor=l(),Sd=a("p"),jor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jX=a("a"),Dor=o("from_pretrained()"),Gor=o(" class method or the "),DX=a("a"),Oor=o("from_config()"),Vor=o(` class
method.`),Xor=l(),ML=a("p"),zor=o("This class cannot be instantiated directly using "),t_e=a("code"),Qor=o("__init__()"),Wor=o(" (throws an error)."),Hor=l(),Et=a("div"),F(EL.$$.fragment),Uor=l(),a_e=a("p"),Jor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Yor=l(),Rd=a("p"),Kor=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),Zor=o("not"),err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),orr=o("from_pretrained()"),rrr=o(" to load the model weights."),trr=l(),F(cF.$$.fragment),arr=l(),uo=a("div"),F(CL.$$.fragment),nrr=l(),s_e=a("p"),srr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lrr=l(),Ua=a("p"),irr=o("The model class to instantiate is selected based on the "),l_e=a("code"),drr=o("model_type"),crr=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),frr=o("pretrained_model_name_or_path"),mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),grr=o("pretrained_model_name_or_path"),hrr=o(":"),prr=l(),Ja=a("ul"),fF=a("li"),c_e=a("strong"),urr=o("beit"),_rr=o(" \u2014 "),OX=a("a"),brr=o("BeitForSemanticSegmentation"),vrr=o(" (BEiT model)"),Frr=l(),mF=a("li"),f_e=a("strong"),Trr=o("data2vec-vision"),Mrr=o(" \u2014 "),VX=a("a"),Err=o("Data2VecVisionForSemanticSegmentation"),Crr=o(" (Data2VecVision model)"),wrr=l(),gF=a("li"),m_e=a("strong"),Arr=o("dpt"),yrr=o(" \u2014 "),XX=a("a"),Lrr=o("DPTForSemanticSegmentation"),xrr=o(" (DPT model)"),$rr=l(),hF=a("li"),g_e=a("strong"),krr=o("segformer"),Srr=o(" \u2014 "),zX=a("a"),Rrr=o("SegformerForSemanticSegmentation"),Prr=o(" (SegFormer model)"),Brr=l(),pF=a("p"),Irr=o("The model is set in evaluation mode by default using "),h_e=a("code"),qrr=o("model.eval()"),Nrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),jrr=o("model.train()"),Drr=l(),F(uF.$$.fragment),NIe=l(),Pd=a("h2"),_F=a("a"),u_e=a("span"),F(wL.$$.fragment),Grr=l(),__e=a("span"),Orr=o("AutoModelForInstanceSegmentation"),jIe=l(),Jo=a("div"),F(AL.$$.fragment),Vrr=l(),Bd=a("p"),Xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QX=a("a"),zrr=o("from_pretrained()"),Qrr=o(" class method or the "),WX=a("a"),Wrr=o("from_config()"),Hrr=o(` class
method.`),Urr=l(),yL=a("p"),Jrr=o("This class cannot be instantiated directly using "),b_e=a("code"),Yrr=o("__init__()"),Krr=o(" (throws an error)."),Zrr=l(),Ct=a("div"),F(LL.$$.fragment),etr=l(),v_e=a("p"),otr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rtr=l(),Id=a("p"),ttr=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),atr=o("not"),ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),str=o("from_pretrained()"),ltr=o(" to load the model weights."),itr=l(),F(bF.$$.fragment),dtr=l(),_o=a("div"),F(xL.$$.fragment),ctr=l(),T_e=a("p"),ftr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mtr=l(),Ya=a("p"),gtr=o("The model class to instantiate is selected based on the "),M_e=a("code"),htr=o("model_type"),ptr=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),utr=o("pretrained_model_name_or_path"),_tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(":"),Ftr=l(),w_e=a("ul"),vF=a("li"),A_e=a("strong"),Ttr=o("maskformer"),Mtr=o(" \u2014 "),UX=a("a"),Etr=o("MaskFormerForInstanceSegmentation"),Ctr=o(" (MaskFormer model)"),wtr=l(),FF=a("p"),Atr=o("The model is set in evaluation mode by default using "),y_e=a("code"),ytr=o("model.eval()"),Ltr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=a("code"),xtr=o("model.train()"),$tr=l(),F(TF.$$.fragment),DIe=l(),qd=a("h2"),MF=a("a"),x_e=a("span"),F($L.$$.fragment),ktr=l(),$_e=a("span"),Str=o("TFAutoModel"),GIe=l(),Yo=a("div"),F(kL.$$.fragment),Rtr=l(),Nd=a("p"),Ptr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JX=a("a"),Btr=o("from_pretrained()"),Itr=o(" class method or the "),YX=a("a"),qtr=o("from_config()"),Ntr=o(` class
method.`),jtr=l(),SL=a("p"),Dtr=o("This class cannot be instantiated directly using "),k_e=a("code"),Gtr=o("__init__()"),Otr=o(" (throws an error)."),Vtr=l(),wt=a("div"),F(RL.$$.fragment),Xtr=l(),S_e=a("p"),ztr=o("Instantiates one of the base model classes of the library from a configuration."),Qtr=l(),jd=a("p"),Wtr=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),Htr=o("not"),Utr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),Jtr=o("from_pretrained()"),Ytr=o(" to load the model weights."),Ktr=l(),F(EF.$$.fragment),Ztr=l(),wr=a("div"),F(PL.$$.fragment),ear=l(),P_e=a("p"),oar=o("Instantiate one of the base model classes of the library from a pretrained model."),rar=l(),Ka=a("p"),tar=o("The model class to instantiate is selected based on the "),B_e=a("code"),aar=o("model_type"),nar=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),sar=o("pretrained_model_name_or_path"),lar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),iar=o("pretrained_model_name_or_path"),dar=o(":"),car=l(),N=a("ul"),CF=a("li"),N_e=a("strong"),far=o("albert"),mar=o(" \u2014 "),ZX=a("a"),gar=o("TFAlbertModel"),har=o(" (ALBERT model)"),par=l(),wF=a("li"),j_e=a("strong"),uar=o("bart"),_ar=o(" \u2014 "),ez=a("a"),bar=o("TFBartModel"),Far=o(" (BART model)"),Tar=l(),AF=a("li"),D_e=a("strong"),Mar=o("bert"),Ear=o(" \u2014 "),oz=a("a"),Car=o("TFBertModel"),war=o(" (BERT model)"),Aar=l(),yF=a("li"),G_e=a("strong"),yar=o("blenderbot"),Lar=o(" \u2014 "),rz=a("a"),xar=o("TFBlenderbotModel"),$ar=o(" (Blenderbot model)"),kar=l(),LF=a("li"),O_e=a("strong"),Sar=o("blenderbot-small"),Rar=o(" \u2014 "),tz=a("a"),Par=o("TFBlenderbotSmallModel"),Bar=o(" (BlenderbotSmall model)"),Iar=l(),xF=a("li"),V_e=a("strong"),qar=o("camembert"),Nar=o(" \u2014 "),az=a("a"),jar=o("TFCamembertModel"),Dar=o(" (CamemBERT model)"),Gar=l(),$F=a("li"),X_e=a("strong"),Oar=o("clip"),Var=o(" \u2014 "),nz=a("a"),Xar=o("TFCLIPModel"),zar=o(" (CLIP model)"),Qar=l(),kF=a("li"),z_e=a("strong"),War=o("convbert"),Har=o(" \u2014 "),sz=a("a"),Uar=o("TFConvBertModel"),Jar=o(" (ConvBERT model)"),Yar=l(),SF=a("li"),Q_e=a("strong"),Kar=o("convnext"),Zar=o(" \u2014 "),lz=a("a"),enr=o("TFConvNextModel"),onr=o(" (ConvNext model)"),rnr=l(),RF=a("li"),W_e=a("strong"),tnr=o("ctrl"),anr=o(" \u2014 "),iz=a("a"),nnr=o("TFCTRLModel"),snr=o(" (CTRL model)"),lnr=l(),PF=a("li"),H_e=a("strong"),inr=o("data2vec-vision"),dnr=o(" \u2014 "),dz=a("a"),cnr=o("TFData2VecVisionModel"),fnr=o(" (Data2VecVision model)"),mnr=l(),BF=a("li"),U_e=a("strong"),gnr=o("deberta"),hnr=o(" \u2014 "),cz=a("a"),pnr=o("TFDebertaModel"),unr=o(" (DeBERTa model)"),_nr=l(),IF=a("li"),J_e=a("strong"),bnr=o("deberta-v2"),vnr=o(" \u2014 "),fz=a("a"),Fnr=o("TFDebertaV2Model"),Tnr=o(" (DeBERTa-v2 model)"),Mnr=l(),qF=a("li"),Y_e=a("strong"),Enr=o("distilbert"),Cnr=o(" \u2014 "),mz=a("a"),wnr=o("TFDistilBertModel"),Anr=o(" (DistilBERT model)"),ynr=l(),NF=a("li"),K_e=a("strong"),Lnr=o("dpr"),xnr=o(" \u2014 "),gz=a("a"),$nr=o("TFDPRQuestionEncoder"),knr=o(" (DPR model)"),Snr=l(),jF=a("li"),Z_e=a("strong"),Rnr=o("electra"),Pnr=o(" \u2014 "),hz=a("a"),Bnr=o("TFElectraModel"),Inr=o(" (ELECTRA model)"),qnr=l(),DF=a("li"),e2e=a("strong"),Nnr=o("flaubert"),jnr=o(" \u2014 "),pz=a("a"),Dnr=o("TFFlaubertModel"),Gnr=o(" (FlauBERT model)"),Onr=l(),Ps=a("li"),o2e=a("strong"),Vnr=o("funnel"),Xnr=o(" \u2014 "),uz=a("a"),znr=o("TFFunnelModel"),Qnr=o(" or "),_z=a("a"),Wnr=o("TFFunnelBaseModel"),Hnr=o(" (Funnel Transformer model)"),Unr=l(),GF=a("li"),r2e=a("strong"),Jnr=o("gpt2"),Ynr=o(" \u2014 "),bz=a("a"),Knr=o("TFGPT2Model"),Znr=o(" (OpenAI GPT-2 model)"),esr=l(),OF=a("li"),t2e=a("strong"),osr=o("gptj"),rsr=o(" \u2014 "),vz=a("a"),tsr=o("TFGPTJModel"),asr=o(" (GPT-J model)"),nsr=l(),VF=a("li"),a2e=a("strong"),ssr=o("hubert"),lsr=o(" \u2014 "),Fz=a("a"),isr=o("TFHubertModel"),dsr=o(" (Hubert model)"),csr=l(),XF=a("li"),n2e=a("strong"),fsr=o("layoutlm"),msr=o(" \u2014 "),Tz=a("a"),gsr=o("TFLayoutLMModel"),hsr=o(" (LayoutLM model)"),psr=l(),zF=a("li"),s2e=a("strong"),usr=o("led"),_sr=o(" \u2014 "),Mz=a("a"),bsr=o("TFLEDModel"),vsr=o(" (LED model)"),Fsr=l(),QF=a("li"),l2e=a("strong"),Tsr=o("longformer"),Msr=o(" \u2014 "),Ez=a("a"),Esr=o("TFLongformerModel"),Csr=o(" (Longformer model)"),wsr=l(),WF=a("li"),i2e=a("strong"),Asr=o("lxmert"),ysr=o(" \u2014 "),Cz=a("a"),Lsr=o("TFLxmertModel"),xsr=o(" (LXMERT model)"),$sr=l(),HF=a("li"),d2e=a("strong"),ksr=o("marian"),Ssr=o(" \u2014 "),wz=a("a"),Rsr=o("TFMarianModel"),Psr=o(" (Marian model)"),Bsr=l(),UF=a("li"),c2e=a("strong"),Isr=o("mbart"),qsr=o(" \u2014 "),Az=a("a"),Nsr=o("TFMBartModel"),jsr=o(" (mBART model)"),Dsr=l(),JF=a("li"),f2e=a("strong"),Gsr=o("mobilebert"),Osr=o(" \u2014 "),yz=a("a"),Vsr=o("TFMobileBertModel"),Xsr=o(" (MobileBERT model)"),zsr=l(),YF=a("li"),m2e=a("strong"),Qsr=o("mpnet"),Wsr=o(" \u2014 "),Lz=a("a"),Hsr=o("TFMPNetModel"),Usr=o(" (MPNet model)"),Jsr=l(),KF=a("li"),g2e=a("strong"),Ysr=o("mt5"),Ksr=o(" \u2014 "),xz=a("a"),Zsr=o("TFMT5Model"),elr=o(" (mT5 model)"),olr=l(),ZF=a("li"),h2e=a("strong"),rlr=o("openai-gpt"),tlr=o(" \u2014 "),$z=a("a"),alr=o("TFOpenAIGPTModel"),nlr=o(" (OpenAI GPT model)"),slr=l(),eT=a("li"),p2e=a("strong"),llr=o("pegasus"),ilr=o(" \u2014 "),kz=a("a"),dlr=o("TFPegasusModel"),clr=o(" (Pegasus model)"),flr=l(),oT=a("li"),u2e=a("strong"),mlr=o("rembert"),glr=o(" \u2014 "),Sz=a("a"),hlr=o("TFRemBertModel"),plr=o(" (RemBERT model)"),ulr=l(),rT=a("li"),_2e=a("strong"),_lr=o("roberta"),blr=o(" \u2014 "),Rz=a("a"),vlr=o("TFRobertaModel"),Flr=o(" (RoBERTa model)"),Tlr=l(),tT=a("li"),b2e=a("strong"),Mlr=o("roformer"),Elr=o(" \u2014 "),Pz=a("a"),Clr=o("TFRoFormerModel"),wlr=o(" (RoFormer model)"),Alr=l(),aT=a("li"),v2e=a("strong"),ylr=o("speech_to_text"),Llr=o(" \u2014 "),Bz=a("a"),xlr=o("TFSpeech2TextModel"),$lr=o(" (Speech2Text model)"),klr=l(),nT=a("li"),F2e=a("strong"),Slr=o("t5"),Rlr=o(" \u2014 "),Iz=a("a"),Plr=o("TFT5Model"),Blr=o(" (T5 model)"),Ilr=l(),sT=a("li"),T2e=a("strong"),qlr=o("tapas"),Nlr=o(" \u2014 "),qz=a("a"),jlr=o("TFTapasModel"),Dlr=o(" (TAPAS model)"),Glr=l(),lT=a("li"),M2e=a("strong"),Olr=o("transfo-xl"),Vlr=o(" \u2014 "),Nz=a("a"),Xlr=o("TFTransfoXLModel"),zlr=o(" (Transformer-XL model)"),Qlr=l(),iT=a("li"),E2e=a("strong"),Wlr=o("vit"),Hlr=o(" \u2014 "),jz=a("a"),Ulr=o("TFViTModel"),Jlr=o(" (ViT model)"),Ylr=l(),dT=a("li"),C2e=a("strong"),Klr=o("vit_mae"),Zlr=o(" \u2014 "),Dz=a("a"),eir=o("TFViTMAEModel"),oir=o(" (ViTMAE model)"),rir=l(),cT=a("li"),w2e=a("strong"),tir=o("wav2vec2"),air=o(" \u2014 "),Gz=a("a"),nir=o("TFWav2Vec2Model"),sir=o(" (Wav2Vec2 model)"),lir=l(),fT=a("li"),A2e=a("strong"),iir=o("xlm"),dir=o(" \u2014 "),Oz=a("a"),cir=o("TFXLMModel"),fir=o(" (XLM model)"),mir=l(),mT=a("li"),y2e=a("strong"),gir=o("xlm-roberta"),hir=o(" \u2014 "),Vz=a("a"),pir=o("TFXLMRobertaModel"),uir=o(" (XLM-RoBERTa model)"),_ir=l(),gT=a("li"),L2e=a("strong"),bir=o("xlnet"),vir=o(" \u2014 "),Xz=a("a"),Fir=o("TFXLNetModel"),Tir=o(" (XLNet model)"),Mir=l(),F(hT.$$.fragment),OIe=l(),Dd=a("h2"),pT=a("a"),x2e=a("span"),F(BL.$$.fragment),Eir=l(),$2e=a("span"),Cir=o("TFAutoModelForPreTraining"),VIe=l(),Ko=a("div"),F(IL.$$.fragment),wir=l(),Gd=a("p"),Air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zz=a("a"),yir=o("from_pretrained()"),Lir=o(" class method or the "),Qz=a("a"),xir=o("from_config()"),$ir=o(` class
method.`),kir=l(),qL=a("p"),Sir=o("This class cannot be instantiated directly using "),k2e=a("code"),Rir=o("__init__()"),Pir=o(" (throws an error)."),Bir=l(),At=a("div"),F(NL.$$.fragment),Iir=l(),S2e=a("p"),qir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nir=l(),Od=a("p"),jir=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),Dir=o("not"),Gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),Oir=o("from_pretrained()"),Vir=o(" to load the model weights."),Xir=l(),F(uT.$$.fragment),zir=l(),Ar=a("div"),F(jL.$$.fragment),Qir=l(),P2e=a("p"),Wir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hir=l(),Za=a("p"),Uir=o("The model class to instantiate is selected based on the "),B2e=a("code"),Jir=o("model_type"),Yir=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Kir=o("pretrained_model_name_or_path"),Zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),edr=o("pretrained_model_name_or_path"),odr=o(":"),rdr=l(),se=a("ul"),_T=a("li"),N2e=a("strong"),tdr=o("albert"),adr=o(" \u2014 "),Hz=a("a"),ndr=o("TFAlbertForPreTraining"),sdr=o(" (ALBERT model)"),ldr=l(),bT=a("li"),j2e=a("strong"),idr=o("bart"),ddr=o(" \u2014 "),Uz=a("a"),cdr=o("TFBartForConditionalGeneration"),fdr=o(" (BART model)"),mdr=l(),vT=a("li"),D2e=a("strong"),gdr=o("bert"),hdr=o(" \u2014 "),Jz=a("a"),pdr=o("TFBertForPreTraining"),udr=o(" (BERT model)"),_dr=l(),FT=a("li"),G2e=a("strong"),bdr=o("camembert"),vdr=o(" \u2014 "),Yz=a("a"),Fdr=o("TFCamembertForMaskedLM"),Tdr=o(" (CamemBERT model)"),Mdr=l(),TT=a("li"),O2e=a("strong"),Edr=o("ctrl"),Cdr=o(" \u2014 "),Kz=a("a"),wdr=o("TFCTRLLMHeadModel"),Adr=o(" (CTRL model)"),ydr=l(),MT=a("li"),V2e=a("strong"),Ldr=o("distilbert"),xdr=o(" \u2014 "),Zz=a("a"),$dr=o("TFDistilBertForMaskedLM"),kdr=o(" (DistilBERT model)"),Sdr=l(),ET=a("li"),X2e=a("strong"),Rdr=o("electra"),Pdr=o(" \u2014 "),eQ=a("a"),Bdr=o("TFElectraForPreTraining"),Idr=o(" (ELECTRA model)"),qdr=l(),CT=a("li"),z2e=a("strong"),Ndr=o("flaubert"),jdr=o(" \u2014 "),oQ=a("a"),Ddr=o("TFFlaubertWithLMHeadModel"),Gdr=o(" (FlauBERT model)"),Odr=l(),wT=a("li"),Q2e=a("strong"),Vdr=o("funnel"),Xdr=o(" \u2014 "),rQ=a("a"),zdr=o("TFFunnelForPreTraining"),Qdr=o(" (Funnel Transformer model)"),Wdr=l(),AT=a("li"),W2e=a("strong"),Hdr=o("gpt2"),Udr=o(" \u2014 "),tQ=a("a"),Jdr=o("TFGPT2LMHeadModel"),Ydr=o(" (OpenAI GPT-2 model)"),Kdr=l(),yT=a("li"),H2e=a("strong"),Zdr=o("layoutlm"),ecr=o(" \u2014 "),aQ=a("a"),ocr=o("TFLayoutLMForMaskedLM"),rcr=o(" (LayoutLM model)"),tcr=l(),LT=a("li"),U2e=a("strong"),acr=o("lxmert"),ncr=o(" \u2014 "),nQ=a("a"),scr=o("TFLxmertForPreTraining"),lcr=o(" (LXMERT model)"),icr=l(),xT=a("li"),J2e=a("strong"),dcr=o("mobilebert"),ccr=o(" \u2014 "),sQ=a("a"),fcr=o("TFMobileBertForPreTraining"),mcr=o(" (MobileBERT model)"),gcr=l(),$T=a("li"),Y2e=a("strong"),hcr=o("mpnet"),pcr=o(" \u2014 "),lQ=a("a"),ucr=o("TFMPNetForMaskedLM"),_cr=o(" (MPNet model)"),bcr=l(),kT=a("li"),K2e=a("strong"),vcr=o("openai-gpt"),Fcr=o(" \u2014 "),iQ=a("a"),Tcr=o("TFOpenAIGPTLMHeadModel"),Mcr=o(" (OpenAI GPT model)"),Ecr=l(),ST=a("li"),Z2e=a("strong"),Ccr=o("roberta"),wcr=o(" \u2014 "),dQ=a("a"),Acr=o("TFRobertaForMaskedLM"),ycr=o(" (RoBERTa model)"),Lcr=l(),RT=a("li"),e1e=a("strong"),xcr=o("t5"),$cr=o(" \u2014 "),cQ=a("a"),kcr=o("TFT5ForConditionalGeneration"),Scr=o(" (T5 model)"),Rcr=l(),PT=a("li"),o1e=a("strong"),Pcr=o("tapas"),Bcr=o(" \u2014 "),fQ=a("a"),Icr=o("TFTapasForMaskedLM"),qcr=o(" (TAPAS model)"),Ncr=l(),BT=a("li"),r1e=a("strong"),jcr=o("transfo-xl"),Dcr=o(" \u2014 "),mQ=a("a"),Gcr=o("TFTransfoXLLMHeadModel"),Ocr=o(" (Transformer-XL model)"),Vcr=l(),IT=a("li"),t1e=a("strong"),Xcr=o("vit_mae"),zcr=o(" \u2014 "),gQ=a("a"),Qcr=o("TFViTMAEForPreTraining"),Wcr=o(" (ViTMAE model)"),Hcr=l(),qT=a("li"),a1e=a("strong"),Ucr=o("xlm"),Jcr=o(" \u2014 "),hQ=a("a"),Ycr=o("TFXLMWithLMHeadModel"),Kcr=o(" (XLM model)"),Zcr=l(),NT=a("li"),n1e=a("strong"),efr=o("xlm-roberta"),ofr=o(" \u2014 "),pQ=a("a"),rfr=o("TFXLMRobertaForMaskedLM"),tfr=o(" (XLM-RoBERTa model)"),afr=l(),jT=a("li"),s1e=a("strong"),nfr=o("xlnet"),sfr=o(" \u2014 "),uQ=a("a"),lfr=o("TFXLNetLMHeadModel"),ifr=o(" (XLNet model)"),dfr=l(),F(DT.$$.fragment),XIe=l(),Vd=a("h2"),GT=a("a"),l1e=a("span"),F(DL.$$.fragment),cfr=l(),i1e=a("span"),ffr=o("TFAutoModelForCausalLM"),zIe=l(),Zo=a("div"),F(GL.$$.fragment),mfr=l(),Xd=a("p"),gfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=a("a"),hfr=o("from_pretrained()"),pfr=o(" class method or the "),bQ=a("a"),ufr=o("from_config()"),_fr=o(` class
method.`),bfr=l(),OL=a("p"),vfr=o("This class cannot be instantiated directly using "),d1e=a("code"),Ffr=o("__init__()"),Tfr=o(" (throws an error)."),Mfr=l(),yt=a("div"),F(VL.$$.fragment),Efr=l(),c1e=a("p"),Cfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wfr=l(),zd=a("p"),Afr=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),yfr=o("not"),Lfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),xfr=o("from_pretrained()"),$fr=o(" to load the model weights."),kfr=l(),F(OT.$$.fragment),Sfr=l(),yr=a("div"),F(XL.$$.fragment),Rfr=l(),m1e=a("p"),Pfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bfr=l(),en=a("p"),Ifr=o("The model class to instantiate is selected based on the "),g1e=a("code"),qfr=o("model_type"),Nfr=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),jfr=o("pretrained_model_name_or_path"),Dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(":"),Vfr=l(),Te=a("ul"),VT=a("li"),u1e=a("strong"),Xfr=o("bert"),zfr=o(" \u2014 "),FQ=a("a"),Qfr=o("TFBertLMHeadModel"),Wfr=o(" (BERT model)"),Hfr=l(),XT=a("li"),_1e=a("strong"),Ufr=o("camembert"),Jfr=o(" \u2014 "),TQ=a("a"),Yfr=o("TFCamembertForCausalLM"),Kfr=o(" (CamemBERT model)"),Zfr=l(),zT=a("li"),b1e=a("strong"),emr=o("ctrl"),omr=o(" \u2014 "),MQ=a("a"),rmr=o("TFCTRLLMHeadModel"),tmr=o(" (CTRL model)"),amr=l(),QT=a("li"),v1e=a("strong"),nmr=o("gpt2"),smr=o(" \u2014 "),EQ=a("a"),lmr=o("TFGPT2LMHeadModel"),imr=o(" (OpenAI GPT-2 model)"),dmr=l(),WT=a("li"),F1e=a("strong"),cmr=o("gptj"),fmr=o(" \u2014 "),CQ=a("a"),mmr=o("TFGPTJForCausalLM"),gmr=o(" (GPT-J model)"),hmr=l(),HT=a("li"),T1e=a("strong"),pmr=o("openai-gpt"),umr=o(" \u2014 "),wQ=a("a"),_mr=o("TFOpenAIGPTLMHeadModel"),bmr=o(" (OpenAI GPT model)"),vmr=l(),UT=a("li"),M1e=a("strong"),Fmr=o("rembert"),Tmr=o(" \u2014 "),AQ=a("a"),Mmr=o("TFRemBertForCausalLM"),Emr=o(" (RemBERT model)"),Cmr=l(),JT=a("li"),E1e=a("strong"),wmr=o("roberta"),Amr=o(" \u2014 "),yQ=a("a"),ymr=o("TFRobertaForCausalLM"),Lmr=o(" (RoBERTa model)"),xmr=l(),YT=a("li"),C1e=a("strong"),$mr=o("roformer"),kmr=o(" \u2014 "),LQ=a("a"),Smr=o("TFRoFormerForCausalLM"),Rmr=o(" (RoFormer model)"),Pmr=l(),KT=a("li"),w1e=a("strong"),Bmr=o("transfo-xl"),Imr=o(" \u2014 "),xQ=a("a"),qmr=o("TFTransfoXLLMHeadModel"),Nmr=o(" (Transformer-XL model)"),jmr=l(),ZT=a("li"),A1e=a("strong"),Dmr=o("xlm"),Gmr=o(" \u2014 "),$Q=a("a"),Omr=o("TFXLMWithLMHeadModel"),Vmr=o(" (XLM model)"),Xmr=l(),eM=a("li"),y1e=a("strong"),zmr=o("xlnet"),Qmr=o(" \u2014 "),kQ=a("a"),Wmr=o("TFXLNetLMHeadModel"),Hmr=o(" (XLNet model)"),Umr=l(),F(oM.$$.fragment),QIe=l(),Qd=a("h2"),rM=a("a"),L1e=a("span"),F(zL.$$.fragment),Jmr=l(),x1e=a("span"),Ymr=o("TFAutoModelForImageClassification"),WIe=l(),er=a("div"),F(QL.$$.fragment),Kmr=l(),Wd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),RQ=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),WL=a("p"),ngr=o("This class cannot be instantiated directly using "),$1e=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),Lt=a("div"),F(HL.$$.fragment),dgr=l(),k1e=a("p"),cgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fgr=l(),Hd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),pgr=o("from_pretrained()"),ugr=o(" to load the model weights."),_gr=l(),F(tM.$$.fragment),bgr=l(),Lr=a("div"),F(UL.$$.fragment),vgr=l(),R1e=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tgr=l(),on=a("p"),Mgr=o("The model class to instantiate is selected based on the "),P1e=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),ygr=o("pretrained_model_name_or_path"),Lgr=o(":"),xgr=l(),Ud=a("ul"),aM=a("li"),q1e=a("strong"),$gr=o("convnext"),kgr=o(" \u2014 "),BQ=a("a"),Sgr=o("TFConvNextForImageClassification"),Rgr=o(" (ConvNext model)"),Pgr=l(),nM=a("li"),N1e=a("strong"),Bgr=o("data2vec-vision"),Igr=o(" \u2014 "),IQ=a("a"),qgr=o("TFData2VecVisionForImageClassification"),Ngr=o(" (Data2VecVision model)"),jgr=l(),sM=a("li"),j1e=a("strong"),Dgr=o("vit"),Ggr=o(" \u2014 "),qQ=a("a"),Ogr=o("TFViTForImageClassification"),Vgr=o(" (ViT model)"),Xgr=l(),F(lM.$$.fragment),HIe=l(),Jd=a("h2"),iM=a("a"),D1e=a("span"),F(JL.$$.fragment),zgr=l(),G1e=a("span"),Qgr=o("TFAutoModelForMaskedLM"),UIe=l(),or=a("div"),F(YL.$$.fragment),Wgr=l(),Yd=a("p"),Hgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NQ=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" class method or the "),jQ=a("a"),Ygr=o("from_config()"),Kgr=o(` class
method.`),Zgr=l(),KL=a("p"),ehr=o("This class cannot be instantiated directly using "),O1e=a("code"),ohr=o("__init__()"),rhr=o(" (throws an error)."),thr=l(),xt=a("div"),F(ZL.$$.fragment),ahr=l(),V1e=a("p"),nhr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),shr=l(),Kd=a("p"),lhr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),ihr=o("not"),dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),chr=o("from_pretrained()"),fhr=o(" to load the model weights."),mhr=l(),F(dM.$$.fragment),ghr=l(),xr=a("div"),F(e8.$$.fragment),hhr=l(),z1e=a("p"),phr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uhr=l(),rn=a("p"),_hr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),bhr=o("model_type"),vhr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),Fhr=o("pretrained_model_name_or_path"),Thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(":"),Chr=l(),ie=a("ul"),cM=a("li"),U1e=a("strong"),whr=o("albert"),Ahr=o(" \u2014 "),GQ=a("a"),yhr=o("TFAlbertForMaskedLM"),Lhr=o(" (ALBERT model)"),xhr=l(),fM=a("li"),J1e=a("strong"),$hr=o("bert"),khr=o(" \u2014 "),OQ=a("a"),Shr=o("TFBertForMaskedLM"),Rhr=o(" (BERT model)"),Phr=l(),mM=a("li"),Y1e=a("strong"),Bhr=o("camembert"),Ihr=o(" \u2014 "),VQ=a("a"),qhr=o("TFCamembertForMaskedLM"),Nhr=o(" (CamemBERT model)"),jhr=l(),gM=a("li"),K1e=a("strong"),Dhr=o("convbert"),Ghr=o(" \u2014 "),XQ=a("a"),Ohr=o("TFConvBertForMaskedLM"),Vhr=o(" (ConvBERT model)"),Xhr=l(),hM=a("li"),Z1e=a("strong"),zhr=o("deberta"),Qhr=o(" \u2014 "),zQ=a("a"),Whr=o("TFDebertaForMaskedLM"),Hhr=o(" (DeBERTa model)"),Uhr=l(),pM=a("li"),e7e=a("strong"),Jhr=o("deberta-v2"),Yhr=o(" \u2014 "),QQ=a("a"),Khr=o("TFDebertaV2ForMaskedLM"),Zhr=o(" (DeBERTa-v2 model)"),epr=l(),uM=a("li"),o7e=a("strong"),opr=o("distilbert"),rpr=o(" \u2014 "),WQ=a("a"),tpr=o("TFDistilBertForMaskedLM"),apr=o(" (DistilBERT model)"),npr=l(),_M=a("li"),r7e=a("strong"),spr=o("electra"),lpr=o(" \u2014 "),HQ=a("a"),ipr=o("TFElectraForMaskedLM"),dpr=o(" (ELECTRA model)"),cpr=l(),bM=a("li"),t7e=a("strong"),fpr=o("flaubert"),mpr=o(" \u2014 "),UQ=a("a"),gpr=o("TFFlaubertWithLMHeadModel"),hpr=o(" (FlauBERT model)"),ppr=l(),vM=a("li"),a7e=a("strong"),upr=o("funnel"),_pr=o(" \u2014 "),JQ=a("a"),bpr=o("TFFunnelForMaskedLM"),vpr=o(" (Funnel Transformer model)"),Fpr=l(),FM=a("li"),n7e=a("strong"),Tpr=o("layoutlm"),Mpr=o(" \u2014 "),YQ=a("a"),Epr=o("TFLayoutLMForMaskedLM"),Cpr=o(" (LayoutLM model)"),wpr=l(),TM=a("li"),s7e=a("strong"),Apr=o("longformer"),ypr=o(" \u2014 "),KQ=a("a"),Lpr=o("TFLongformerForMaskedLM"),xpr=o(" (Longformer model)"),$pr=l(),MM=a("li"),l7e=a("strong"),kpr=o("mobilebert"),Spr=o(" \u2014 "),ZQ=a("a"),Rpr=o("TFMobileBertForMaskedLM"),Ppr=o(" (MobileBERT model)"),Bpr=l(),EM=a("li"),i7e=a("strong"),Ipr=o("mpnet"),qpr=o(" \u2014 "),eW=a("a"),Npr=o("TFMPNetForMaskedLM"),jpr=o(" (MPNet model)"),Dpr=l(),CM=a("li"),d7e=a("strong"),Gpr=o("rembert"),Opr=o(" \u2014 "),oW=a("a"),Vpr=o("TFRemBertForMaskedLM"),Xpr=o(" (RemBERT model)"),zpr=l(),wM=a("li"),c7e=a("strong"),Qpr=o("roberta"),Wpr=o(" \u2014 "),rW=a("a"),Hpr=o("TFRobertaForMaskedLM"),Upr=o(" (RoBERTa model)"),Jpr=l(),AM=a("li"),f7e=a("strong"),Ypr=o("roformer"),Kpr=o(" \u2014 "),tW=a("a"),Zpr=o("TFRoFormerForMaskedLM"),eur=o(" (RoFormer model)"),our=l(),yM=a("li"),m7e=a("strong"),rur=o("tapas"),tur=o(" \u2014 "),aW=a("a"),aur=o("TFTapasForMaskedLM"),nur=o(" (TAPAS model)"),sur=l(),LM=a("li"),g7e=a("strong"),lur=o("xlm"),iur=o(" \u2014 "),nW=a("a"),dur=o("TFXLMWithLMHeadModel"),cur=o(" (XLM model)"),fur=l(),xM=a("li"),h7e=a("strong"),mur=o("xlm-roberta"),gur=o(" \u2014 "),sW=a("a"),hur=o("TFXLMRobertaForMaskedLM"),pur=o(" (XLM-RoBERTa model)"),uur=l(),F($M.$$.fragment),JIe=l(),Zd=a("h2"),kM=a("a"),p7e=a("span"),F(o8.$$.fragment),_ur=l(),u7e=a("span"),bur=o("TFAutoModelForSeq2SeqLM"),YIe=l(),rr=a("div"),F(r8.$$.fragment),vur=l(),ec=a("p"),Fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lW=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),iW=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),t8=a("p"),Aur=o("This class cannot be instantiated directly using "),_7e=a("code"),yur=o("__init__()"),Lur=o(" (throws an error)."),xur=l(),$t=a("div"),F(a8.$$.fragment),$ur=l(),b7e=a("p"),kur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sur=l(),oc=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),Pur=o("not"),Bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),Iur=o("from_pretrained()"),qur=o(" to load the model weights."),Nur=l(),F(SM.$$.fragment),jur=l(),$r=a("div"),F(n8.$$.fragment),Dur=l(),F7e=a("p"),Gur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Our=l(),tn=a("p"),Vur=o("The model class to instantiate is selected based on the "),T7e=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),ye=a("ul"),RM=a("li"),C7e=a("strong"),Yur=o("bart"),Kur=o(" \u2014 "),cW=a("a"),Zur=o("TFBartForConditionalGeneration"),e_r=o(" (BART model)"),o_r=l(),PM=a("li"),w7e=a("strong"),r_r=o("blenderbot"),t_r=o(" \u2014 "),fW=a("a"),a_r=o("TFBlenderbotForConditionalGeneration"),n_r=o(" (Blenderbot model)"),s_r=l(),BM=a("li"),A7e=a("strong"),l_r=o("blenderbot-small"),i_r=o(" \u2014 "),mW=a("a"),d_r=o("TFBlenderbotSmallForConditionalGeneration"),c_r=o(" (BlenderbotSmall model)"),f_r=l(),IM=a("li"),y7e=a("strong"),m_r=o("encoder-decoder"),g_r=o(" \u2014 "),gW=a("a"),h_r=o("TFEncoderDecoderModel"),p_r=o(" (Encoder decoder model)"),u_r=l(),qM=a("li"),L7e=a("strong"),__r=o("led"),b_r=o(" \u2014 "),hW=a("a"),v_r=o("TFLEDForConditionalGeneration"),F_r=o(" (LED model)"),T_r=l(),NM=a("li"),x7e=a("strong"),M_r=o("marian"),E_r=o(" \u2014 "),pW=a("a"),C_r=o("TFMarianMTModel"),w_r=o(" (Marian model)"),A_r=l(),jM=a("li"),$7e=a("strong"),y_r=o("mbart"),L_r=o(" \u2014 "),uW=a("a"),x_r=o("TFMBartForConditionalGeneration"),$_r=o(" (mBART model)"),k_r=l(),DM=a("li"),k7e=a("strong"),S_r=o("mt5"),R_r=o(" \u2014 "),_W=a("a"),P_r=o("TFMT5ForConditionalGeneration"),B_r=o(" (mT5 model)"),I_r=l(),GM=a("li"),S7e=a("strong"),q_r=o("pegasus"),N_r=o(" \u2014 "),bW=a("a"),j_r=o("TFPegasusForConditionalGeneration"),D_r=o(" (Pegasus model)"),G_r=l(),OM=a("li"),R7e=a("strong"),O_r=o("t5"),V_r=o(" \u2014 "),vW=a("a"),X_r=o("TFT5ForConditionalGeneration"),z_r=o(" (T5 model)"),Q_r=l(),F(VM.$$.fragment),KIe=l(),rc=a("h2"),XM=a("a"),P7e=a("span"),F(s8.$$.fragment),W_r=l(),B7e=a("span"),H_r=o("TFAutoModelForSequenceClassification"),ZIe=l(),tr=a("div"),F(l8.$$.fragment),U_r=l(),tc=a("p"),J_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FW=a("a"),Y_r=o("from_pretrained()"),K_r=o(" class method or the "),TW=a("a"),Z_r=o("from_config()"),e2r=o(` class
method.`),o2r=l(),i8=a("p"),r2r=o("This class cannot be instantiated directly using "),I7e=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),kt=a("div"),F(d8.$$.fragment),s2r=l(),q7e=a("p"),l2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i2r=l(),ac=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),c2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),m2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(zM.$$.fragment),p2r=l(),kr=a("div"),F(c8.$$.fragment),u2r=l(),j7e=a("p"),_2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b2r=l(),an=a("p"),v2r=o("The model class to instantiate is selected based on the "),D7e=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),Z=a("ul"),QM=a("li"),V7e=a("strong"),y2r=o("albert"),L2r=o(" \u2014 "),EW=a("a"),x2r=o("TFAlbertForSequenceClassification"),$2r=o(" (ALBERT model)"),k2r=l(),WM=a("li"),X7e=a("strong"),S2r=o("bert"),R2r=o(" \u2014 "),CW=a("a"),P2r=o("TFBertForSequenceClassification"),B2r=o(" (BERT model)"),I2r=l(),HM=a("li"),z7e=a("strong"),q2r=o("camembert"),N2r=o(" \u2014 "),wW=a("a"),j2r=o("TFCamembertForSequenceClassification"),D2r=o(" (CamemBERT model)"),G2r=l(),UM=a("li"),Q7e=a("strong"),O2r=o("convbert"),V2r=o(" \u2014 "),AW=a("a"),X2r=o("TFConvBertForSequenceClassification"),z2r=o(" (ConvBERT model)"),Q2r=l(),JM=a("li"),W7e=a("strong"),W2r=o("ctrl"),H2r=o(" \u2014 "),yW=a("a"),U2r=o("TFCTRLForSequenceClassification"),J2r=o(" (CTRL model)"),Y2r=l(),YM=a("li"),H7e=a("strong"),K2r=o("deberta"),Z2r=o(" \u2014 "),LW=a("a"),e1r=o("TFDebertaForSequenceClassification"),o1r=o(" (DeBERTa model)"),r1r=l(),KM=a("li"),U7e=a("strong"),t1r=o("deberta-v2"),a1r=o(" \u2014 "),xW=a("a"),n1r=o("TFDebertaV2ForSequenceClassification"),s1r=o(" (DeBERTa-v2 model)"),l1r=l(),ZM=a("li"),J7e=a("strong"),i1r=o("distilbert"),d1r=o(" \u2014 "),$W=a("a"),c1r=o("TFDistilBertForSequenceClassification"),f1r=o(" (DistilBERT model)"),m1r=l(),eE=a("li"),Y7e=a("strong"),g1r=o("electra"),h1r=o(" \u2014 "),kW=a("a"),p1r=o("TFElectraForSequenceClassification"),u1r=o(" (ELECTRA model)"),_1r=l(),oE=a("li"),K7e=a("strong"),b1r=o("flaubert"),v1r=o(" \u2014 "),SW=a("a"),F1r=o("TFFlaubertForSequenceClassification"),T1r=o(" (FlauBERT model)"),M1r=l(),rE=a("li"),Z7e=a("strong"),E1r=o("funnel"),C1r=o(" \u2014 "),RW=a("a"),w1r=o("TFFunnelForSequenceClassification"),A1r=o(" (Funnel Transformer model)"),y1r=l(),tE=a("li"),ebe=a("strong"),L1r=o("gpt2"),x1r=o(" \u2014 "),PW=a("a"),$1r=o("TFGPT2ForSequenceClassification"),k1r=o(" (OpenAI GPT-2 model)"),S1r=l(),aE=a("li"),obe=a("strong"),R1r=o("gptj"),P1r=o(" \u2014 "),BW=a("a"),B1r=o("TFGPTJForSequenceClassification"),I1r=o(" (GPT-J model)"),q1r=l(),nE=a("li"),rbe=a("strong"),N1r=o("layoutlm"),j1r=o(" \u2014 "),IW=a("a"),D1r=o("TFLayoutLMForSequenceClassification"),G1r=o(" (LayoutLM model)"),O1r=l(),sE=a("li"),tbe=a("strong"),V1r=o("longformer"),X1r=o(" \u2014 "),qW=a("a"),z1r=o("TFLongformerForSequenceClassification"),Q1r=o(" (Longformer model)"),W1r=l(),lE=a("li"),abe=a("strong"),H1r=o("mobilebert"),U1r=o(" \u2014 "),NW=a("a"),J1r=o("TFMobileBertForSequenceClassification"),Y1r=o(" (MobileBERT model)"),K1r=l(),iE=a("li"),nbe=a("strong"),Z1r=o("mpnet"),e7r=o(" \u2014 "),jW=a("a"),o7r=o("TFMPNetForSequenceClassification"),r7r=o(" (MPNet model)"),t7r=l(),dE=a("li"),sbe=a("strong"),a7r=o("openai-gpt"),n7r=o(" \u2014 "),DW=a("a"),s7r=o("TFOpenAIGPTForSequenceClassification"),l7r=o(" (OpenAI GPT model)"),i7r=l(),cE=a("li"),lbe=a("strong"),d7r=o("rembert"),c7r=o(" \u2014 "),GW=a("a"),f7r=o("TFRemBertForSequenceClassification"),m7r=o(" (RemBERT model)"),g7r=l(),fE=a("li"),ibe=a("strong"),h7r=o("roberta"),p7r=o(" \u2014 "),OW=a("a"),u7r=o("TFRobertaForSequenceClassification"),_7r=o(" (RoBERTa model)"),b7r=l(),mE=a("li"),dbe=a("strong"),v7r=o("roformer"),F7r=o(" \u2014 "),VW=a("a"),T7r=o("TFRoFormerForSequenceClassification"),M7r=o(" (RoFormer model)"),E7r=l(),gE=a("li"),cbe=a("strong"),C7r=o("tapas"),w7r=o(" \u2014 "),XW=a("a"),A7r=o("TFTapasForSequenceClassification"),y7r=o(" (TAPAS model)"),L7r=l(),hE=a("li"),fbe=a("strong"),x7r=o("transfo-xl"),$7r=o(" \u2014 "),zW=a("a"),k7r=o("TFTransfoXLForSequenceClassification"),S7r=o(" (Transformer-XL model)"),R7r=l(),pE=a("li"),mbe=a("strong"),P7r=o("xlm"),B7r=o(" \u2014 "),QW=a("a"),I7r=o("TFXLMForSequenceClassification"),q7r=o(" (XLM model)"),N7r=l(),uE=a("li"),gbe=a("strong"),j7r=o("xlm-roberta"),D7r=o(" \u2014 "),WW=a("a"),G7r=o("TFXLMRobertaForSequenceClassification"),O7r=o(" (XLM-RoBERTa model)"),V7r=l(),_E=a("li"),hbe=a("strong"),X7r=o("xlnet"),z7r=o(" \u2014 "),HW=a("a"),Q7r=o("TFXLNetForSequenceClassification"),W7r=o(" (XLNet model)"),H7r=l(),F(bE.$$.fragment),eqe=l(),nc=a("h2"),vE=a("a"),pbe=a("span"),F(f8.$$.fragment),U7r=l(),ube=a("span"),J7r=o("TFAutoModelForMultipleChoice"),oqe=l(),ar=a("div"),F(m8.$$.fragment),Y7r=l(),sc=a("p"),K7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UW=a("a"),Z7r=o("from_pretrained()"),ebr=o(" class method or the "),JW=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),g8=a("p"),abr=o("This class cannot be instantiated directly using "),_be=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),St=a("div"),F(h8.$$.fragment),ibr=l(),bbe=a("p"),dbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cbr=l(),lc=a("p"),fbr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),mbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),hbr=o("from_pretrained()"),pbr=o(" to load the model weights."),ubr=l(),F(FE.$$.fragment),_br=l(),Sr=a("div"),F(p8.$$.fragment),bbr=l(),Fbe=a("p"),vbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fbr=l(),nn=a("p"),Tbr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),Mbr=o("model_type"),Ebr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),Abr=o("pretrained_model_name_or_path"),ybr=o(":"),Lbr=l(),he=a("ul"),TE=a("li"),Cbe=a("strong"),xbr=o("albert"),$br=o(" \u2014 "),KW=a("a"),kbr=o("TFAlbertForMultipleChoice"),Sbr=o(" (ALBERT model)"),Rbr=l(),ME=a("li"),wbe=a("strong"),Pbr=o("bert"),Bbr=o(" \u2014 "),ZW=a("a"),Ibr=o("TFBertForMultipleChoice"),qbr=o(" (BERT model)"),Nbr=l(),EE=a("li"),Abe=a("strong"),jbr=o("camembert"),Dbr=o(" \u2014 "),eH=a("a"),Gbr=o("TFCamembertForMultipleChoice"),Obr=o(" (CamemBERT model)"),Vbr=l(),CE=a("li"),ybe=a("strong"),Xbr=o("convbert"),zbr=o(" \u2014 "),oH=a("a"),Qbr=o("TFConvBertForMultipleChoice"),Wbr=o(" (ConvBERT model)"),Hbr=l(),wE=a("li"),Lbe=a("strong"),Ubr=o("distilbert"),Jbr=o(" \u2014 "),rH=a("a"),Ybr=o("TFDistilBertForMultipleChoice"),Kbr=o(" (DistilBERT model)"),Zbr=l(),AE=a("li"),xbe=a("strong"),e4r=o("electra"),o4r=o(" \u2014 "),tH=a("a"),r4r=o("TFElectraForMultipleChoice"),t4r=o(" (ELECTRA model)"),a4r=l(),yE=a("li"),$be=a("strong"),n4r=o("flaubert"),s4r=o(" \u2014 "),aH=a("a"),l4r=o("TFFlaubertForMultipleChoice"),i4r=o(" (FlauBERT model)"),d4r=l(),LE=a("li"),kbe=a("strong"),c4r=o("funnel"),f4r=o(" \u2014 "),nH=a("a"),m4r=o("TFFunnelForMultipleChoice"),g4r=o(" (Funnel Transformer model)"),h4r=l(),xE=a("li"),Sbe=a("strong"),p4r=o("longformer"),u4r=o(" \u2014 "),sH=a("a"),_4r=o("TFLongformerForMultipleChoice"),b4r=o(" (Longformer model)"),v4r=l(),$E=a("li"),Rbe=a("strong"),F4r=o("mobilebert"),T4r=o(" \u2014 "),lH=a("a"),M4r=o("TFMobileBertForMultipleChoice"),E4r=o(" (MobileBERT model)"),C4r=l(),kE=a("li"),Pbe=a("strong"),w4r=o("mpnet"),A4r=o(" \u2014 "),iH=a("a"),y4r=o("TFMPNetForMultipleChoice"),L4r=o(" (MPNet model)"),x4r=l(),SE=a("li"),Bbe=a("strong"),$4r=o("rembert"),k4r=o(" \u2014 "),dH=a("a"),S4r=o("TFRemBertForMultipleChoice"),R4r=o(" (RemBERT model)"),P4r=l(),RE=a("li"),Ibe=a("strong"),B4r=o("roberta"),I4r=o(" \u2014 "),cH=a("a"),q4r=o("TFRobertaForMultipleChoice"),N4r=o(" (RoBERTa model)"),j4r=l(),PE=a("li"),qbe=a("strong"),D4r=o("roformer"),G4r=o(" \u2014 "),fH=a("a"),O4r=o("TFRoFormerForMultipleChoice"),V4r=o(" (RoFormer model)"),X4r=l(),BE=a("li"),Nbe=a("strong"),z4r=o("xlm"),Q4r=o(" \u2014 "),mH=a("a"),W4r=o("TFXLMForMultipleChoice"),H4r=o(" (XLM model)"),U4r=l(),IE=a("li"),jbe=a("strong"),J4r=o("xlm-roberta"),Y4r=o(" \u2014 "),gH=a("a"),K4r=o("TFXLMRobertaForMultipleChoice"),Z4r=o(" (XLM-RoBERTa model)"),evr=l(),qE=a("li"),Dbe=a("strong"),ovr=o("xlnet"),rvr=o(" \u2014 "),hH=a("a"),tvr=o("TFXLNetForMultipleChoice"),avr=o(" (XLNet model)"),nvr=l(),F(NE.$$.fragment),rqe=l(),ic=a("h2"),jE=a("a"),Gbe=a("span"),F(u8.$$.fragment),svr=l(),Obe=a("span"),lvr=o("TFAutoModelForNextSentencePrediction"),tqe=l(),nr=a("div"),F(_8.$$.fragment),ivr=l(),dc=a("p"),dvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pH=a("a"),cvr=o("from_pretrained()"),fvr=o(" class method or the "),uH=a("a"),mvr=o("from_config()"),gvr=o(` class
method.`),hvr=l(),b8=a("p"),pvr=o("This class cannot be instantiated directly using "),Vbe=a("code"),uvr=o("__init__()"),_vr=o(" (throws an error)."),bvr=l(),Rt=a("div"),F(v8.$$.fragment),vvr=l(),Xbe=a("p"),Fvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tvr=l(),cc=a("p"),Mvr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),Evr=o("not"),Cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),wvr=o("from_pretrained()"),Avr=o(" to load the model weights."),yvr=l(),F(DE.$$.fragment),Lvr=l(),Rr=a("div"),F(F8.$$.fragment),xvr=l(),Qbe=a("p"),$vr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kvr=l(),sn=a("p"),Svr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),Rvr=o("model_type"),Pvr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Bvr=o("pretrained_model_name_or_path"),Ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),qvr=o("pretrained_model_name_or_path"),Nvr=o(":"),jvr=l(),T8=a("ul"),GE=a("li"),Jbe=a("strong"),Dvr=o("bert"),Gvr=o(" \u2014 "),bH=a("a"),Ovr=o("TFBertForNextSentencePrediction"),Vvr=o(" (BERT model)"),Xvr=l(),OE=a("li"),Ybe=a("strong"),zvr=o("mobilebert"),Qvr=o(" \u2014 "),vH=a("a"),Wvr=o("TFMobileBertForNextSentencePrediction"),Hvr=o(" (MobileBERT model)"),Uvr=l(),F(VE.$$.fragment),aqe=l(),fc=a("h2"),XE=a("a"),Kbe=a("span"),F(M8.$$.fragment),Jvr=l(),Zbe=a("span"),Yvr=o("TFAutoModelForTableQuestionAnswering"),nqe=l(),sr=a("div"),F(E8.$$.fragment),Kvr=l(),mc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FH=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),TH=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),C8=a("p"),nFr=o("This class cannot be instantiated directly using "),e4e=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),Pt=a("div"),F(w8.$$.fragment),dFr=l(),o4e=a("p"),cFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fFr=l(),gc=a("p"),mFr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),gFr=o("not"),hFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),pFr=o("from_pretrained()"),uFr=o(" to load the model weights."),_Fr=l(),F(zE.$$.fragment),bFr=l(),Pr=a("div"),F(A8.$$.fragment),vFr=l(),t4e=a("p"),FFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TFr=l(),ln=a("p"),MFr=o("The model class to instantiate is selected based on the "),a4e=a("code"),EFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),wFr=o("pretrained_model_name_or_path"),AFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(":"),xFr=l(),l4e=a("ul"),QE=a("li"),i4e=a("strong"),$Fr=o("tapas"),kFr=o(" \u2014 "),EH=a("a"),SFr=o("TFTapasForQuestionAnswering"),RFr=o(" (TAPAS model)"),PFr=l(),F(WE.$$.fragment),sqe=l(),hc=a("h2"),HE=a("a"),d4e=a("span"),F(y8.$$.fragment),BFr=l(),c4e=a("span"),IFr=o("TFAutoModelForTokenClassification"),lqe=l(),lr=a("div"),F(L8.$$.fragment),qFr=l(),pc=a("p"),NFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),CH=a("a"),jFr=o("from_pretrained()"),DFr=o(" class method or the "),wH=a("a"),GFr=o("from_config()"),OFr=o(` class
method.`),VFr=l(),x8=a("p"),XFr=o("This class cannot be instantiated directly using "),f4e=a("code"),zFr=o("__init__()"),QFr=o(" (throws an error)."),WFr=l(),Bt=a("div"),F($8.$$.fragment),HFr=l(),m4e=a("p"),UFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JFr=l(),uc=a("p"),YFr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),KFr=o("not"),ZFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),eTr=o("from_pretrained()"),oTr=o(" to load the model weights."),rTr=l(),F(UE.$$.fragment),tTr=l(),Br=a("div"),F(k8.$$.fragment),aTr=l(),h4e=a("p"),nTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sTr=l(),dn=a("p"),lTr=o("The model class to instantiate is selected based on the "),p4e=a("code"),iTr=o("model_type"),dTr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),cTr=o("pretrained_model_name_or_path"),fTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),mTr=o("pretrained_model_name_or_path"),gTr=o(":"),hTr=l(),de=a("ul"),JE=a("li"),b4e=a("strong"),pTr=o("albert"),uTr=o(" \u2014 "),yH=a("a"),_Tr=o("TFAlbertForTokenClassification"),bTr=o(" (ALBERT model)"),vTr=l(),YE=a("li"),v4e=a("strong"),FTr=o("bert"),TTr=o(" \u2014 "),LH=a("a"),MTr=o("TFBertForTokenClassification"),ETr=o(" (BERT model)"),CTr=l(),KE=a("li"),F4e=a("strong"),wTr=o("camembert"),ATr=o(" \u2014 "),xH=a("a"),yTr=o("TFCamembertForTokenClassification"),LTr=o(" (CamemBERT model)"),xTr=l(),ZE=a("li"),T4e=a("strong"),$Tr=o("convbert"),kTr=o(" \u2014 "),$H=a("a"),STr=o("TFConvBertForTokenClassification"),RTr=o(" (ConvBERT model)"),PTr=l(),e5=a("li"),M4e=a("strong"),BTr=o("deberta"),ITr=o(" \u2014 "),kH=a("a"),qTr=o("TFDebertaForTokenClassification"),NTr=o(" (DeBERTa model)"),jTr=l(),o5=a("li"),E4e=a("strong"),DTr=o("deberta-v2"),GTr=o(" \u2014 "),SH=a("a"),OTr=o("TFDebertaV2ForTokenClassification"),VTr=o(" (DeBERTa-v2 model)"),XTr=l(),r5=a("li"),C4e=a("strong"),zTr=o("distilbert"),QTr=o(" \u2014 "),RH=a("a"),WTr=o("TFDistilBertForTokenClassification"),HTr=o(" (DistilBERT model)"),UTr=l(),t5=a("li"),w4e=a("strong"),JTr=o("electra"),YTr=o(" \u2014 "),PH=a("a"),KTr=o("TFElectraForTokenClassification"),ZTr=o(" (ELECTRA model)"),eMr=l(),a5=a("li"),A4e=a("strong"),oMr=o("flaubert"),rMr=o(" \u2014 "),BH=a("a"),tMr=o("TFFlaubertForTokenClassification"),aMr=o(" (FlauBERT model)"),nMr=l(),n5=a("li"),y4e=a("strong"),sMr=o("funnel"),lMr=o(" \u2014 "),IH=a("a"),iMr=o("TFFunnelForTokenClassification"),dMr=o(" (Funnel Transformer model)"),cMr=l(),s5=a("li"),L4e=a("strong"),fMr=o("layoutlm"),mMr=o(" \u2014 "),qH=a("a"),gMr=o("TFLayoutLMForTokenClassification"),hMr=o(" (LayoutLM model)"),pMr=l(),l5=a("li"),x4e=a("strong"),uMr=o("longformer"),_Mr=o(" \u2014 "),NH=a("a"),bMr=o("TFLongformerForTokenClassification"),vMr=o(" (Longformer model)"),FMr=l(),i5=a("li"),$4e=a("strong"),TMr=o("mobilebert"),MMr=o(" \u2014 "),jH=a("a"),EMr=o("TFMobileBertForTokenClassification"),CMr=o(" (MobileBERT model)"),wMr=l(),d5=a("li"),k4e=a("strong"),AMr=o("mpnet"),yMr=o(" \u2014 "),DH=a("a"),LMr=o("TFMPNetForTokenClassification"),xMr=o(" (MPNet model)"),$Mr=l(),c5=a("li"),S4e=a("strong"),kMr=o("rembert"),SMr=o(" \u2014 "),GH=a("a"),RMr=o("TFRemBertForTokenClassification"),PMr=o(" (RemBERT model)"),BMr=l(),f5=a("li"),R4e=a("strong"),IMr=o("roberta"),qMr=o(" \u2014 "),OH=a("a"),NMr=o("TFRobertaForTokenClassification"),jMr=o(" (RoBERTa model)"),DMr=l(),m5=a("li"),P4e=a("strong"),GMr=o("roformer"),OMr=o(" \u2014 "),VH=a("a"),VMr=o("TFRoFormerForTokenClassification"),XMr=o(" (RoFormer model)"),zMr=l(),g5=a("li"),B4e=a("strong"),QMr=o("xlm"),WMr=o(" \u2014 "),XH=a("a"),HMr=o("TFXLMForTokenClassification"),UMr=o(" (XLM model)"),JMr=l(),h5=a("li"),I4e=a("strong"),YMr=o("xlm-roberta"),KMr=o(" \u2014 "),zH=a("a"),ZMr=o("TFXLMRobertaForTokenClassification"),eEr=o(" (XLM-RoBERTa model)"),oEr=l(),p5=a("li"),q4e=a("strong"),rEr=o("xlnet"),tEr=o(" \u2014 "),QH=a("a"),aEr=o("TFXLNetForTokenClassification"),nEr=o(" (XLNet model)"),sEr=l(),F(u5.$$.fragment),iqe=l(),_c=a("h2"),_5=a("a"),N4e=a("span"),F(S8.$$.fragment),lEr=l(),j4e=a("span"),iEr=o("TFAutoModelForQuestionAnswering"),dqe=l(),ir=a("div"),F(R8.$$.fragment),dEr=l(),bc=a("p"),cEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WH=a("a"),fEr=o("from_pretrained()"),mEr=o(" class method or the "),HH=a("a"),gEr=o("from_config()"),hEr=o(` class
method.`),pEr=l(),P8=a("p"),uEr=o("This class cannot be instantiated directly using "),D4e=a("code"),_Er=o("__init__()"),bEr=o(" (throws an error)."),vEr=l(),It=a("div"),F(B8.$$.fragment),FEr=l(),G4e=a("p"),TEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MEr=l(),vc=a("p"),EEr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),CEr=o("not"),wEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),AEr=o("from_pretrained()"),yEr=o(" to load the model weights."),LEr=l(),F(b5.$$.fragment),xEr=l(),Ir=a("div"),F(I8.$$.fragment),$Er=l(),V4e=a("p"),kEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SEr=l(),cn=a("p"),REr=o("The model class to instantiate is selected based on the "),X4e=a("code"),PEr=o("model_type"),BEr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),IEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),NEr=o("pretrained_model_name_or_path"),jEr=o(":"),DEr=l(),ce=a("ul"),v5=a("li"),W4e=a("strong"),GEr=o("albert"),OEr=o(" \u2014 "),JH=a("a"),VEr=o("TFAlbertForQuestionAnswering"),XEr=o(" (ALBERT model)"),zEr=l(),F5=a("li"),H4e=a("strong"),QEr=o("bert"),WEr=o(" \u2014 "),YH=a("a"),HEr=o("TFBertForQuestionAnswering"),UEr=o(" (BERT model)"),JEr=l(),T5=a("li"),U4e=a("strong"),YEr=o("camembert"),KEr=o(" \u2014 "),KH=a("a"),ZEr=o("TFCamembertForQuestionAnswering"),e5r=o(" (CamemBERT model)"),o5r=l(),M5=a("li"),J4e=a("strong"),r5r=o("convbert"),t5r=o(" \u2014 "),ZH=a("a"),a5r=o("TFConvBertForQuestionAnswering"),n5r=o(" (ConvBERT model)"),s5r=l(),E5=a("li"),Y4e=a("strong"),l5r=o("deberta"),i5r=o(" \u2014 "),eU=a("a"),d5r=o("TFDebertaForQuestionAnswering"),c5r=o(" (DeBERTa model)"),f5r=l(),C5=a("li"),K4e=a("strong"),m5r=o("deberta-v2"),g5r=o(" \u2014 "),oU=a("a"),h5r=o("TFDebertaV2ForQuestionAnswering"),p5r=o(" (DeBERTa-v2 model)"),u5r=l(),w5=a("li"),Z4e=a("strong"),_5r=o("distilbert"),b5r=o(" \u2014 "),rU=a("a"),v5r=o("TFDistilBertForQuestionAnswering"),F5r=o(" (DistilBERT model)"),T5r=l(),A5=a("li"),eve=a("strong"),M5r=o("electra"),E5r=o(" \u2014 "),tU=a("a"),C5r=o("TFElectraForQuestionAnswering"),w5r=o(" (ELECTRA model)"),A5r=l(),y5=a("li"),ove=a("strong"),y5r=o("flaubert"),L5r=o(" \u2014 "),aU=a("a"),x5r=o("TFFlaubertForQuestionAnsweringSimple"),$5r=o(" (FlauBERT model)"),k5r=l(),L5=a("li"),rve=a("strong"),S5r=o("funnel"),R5r=o(" \u2014 "),nU=a("a"),P5r=o("TFFunnelForQuestionAnswering"),B5r=o(" (Funnel Transformer model)"),I5r=l(),x5=a("li"),tve=a("strong"),q5r=o("gptj"),N5r=o(" \u2014 "),sU=a("a"),j5r=o("TFGPTJForQuestionAnswering"),D5r=o(" (GPT-J model)"),G5r=l(),$5=a("li"),ave=a("strong"),O5r=o("longformer"),V5r=o(" \u2014 "),lU=a("a"),X5r=o("TFLongformerForQuestionAnswering"),z5r=o(" (Longformer model)"),Q5r=l(),k5=a("li"),nve=a("strong"),W5r=o("mobilebert"),H5r=o(" \u2014 "),iU=a("a"),U5r=o("TFMobileBertForQuestionAnswering"),J5r=o(" (MobileBERT model)"),Y5r=l(),S5=a("li"),sve=a("strong"),K5r=o("mpnet"),Z5r=o(" \u2014 "),dU=a("a"),eCr=o("TFMPNetForQuestionAnswering"),oCr=o(" (MPNet model)"),rCr=l(),R5=a("li"),lve=a("strong"),tCr=o("rembert"),aCr=o(" \u2014 "),cU=a("a"),nCr=o("TFRemBertForQuestionAnswering"),sCr=o(" (RemBERT model)"),lCr=l(),P5=a("li"),ive=a("strong"),iCr=o("roberta"),dCr=o(" \u2014 "),fU=a("a"),cCr=o("TFRobertaForQuestionAnswering"),fCr=o(" (RoBERTa model)"),mCr=l(),B5=a("li"),dve=a("strong"),gCr=o("roformer"),hCr=o(" \u2014 "),mU=a("a"),pCr=o("TFRoFormerForQuestionAnswering"),uCr=o(" (RoFormer model)"),_Cr=l(),I5=a("li"),cve=a("strong"),bCr=o("xlm"),vCr=o(" \u2014 "),gU=a("a"),FCr=o("TFXLMForQuestionAnsweringSimple"),TCr=o(" (XLM model)"),MCr=l(),q5=a("li"),fve=a("strong"),ECr=o("xlm-roberta"),CCr=o(" \u2014 "),hU=a("a"),wCr=o("TFXLMRobertaForQuestionAnswering"),ACr=o(" (XLM-RoBERTa model)"),yCr=l(),N5=a("li"),mve=a("strong"),LCr=o("xlnet"),xCr=o(" \u2014 "),pU=a("a"),$Cr=o("TFXLNetForQuestionAnsweringSimple"),kCr=o(" (XLNet model)"),SCr=l(),F(j5.$$.fragment),cqe=l(),Fc=a("h2"),D5=a("a"),gve=a("span"),F(q8.$$.fragment),RCr=l(),hve=a("span"),PCr=o("TFAutoModelForVision2Seq"),fqe=l(),dr=a("div"),F(N8.$$.fragment),BCr=l(),Tc=a("p"),ICr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uU=a("a"),qCr=o("from_pretrained()"),NCr=o(" class method or the "),_U=a("a"),jCr=o("from_config()"),DCr=o(` class
method.`),GCr=l(),j8=a("p"),OCr=o("This class cannot be instantiated directly using "),pve=a("code"),VCr=o("__init__()"),XCr=o(" (throws an error)."),zCr=l(),qt=a("div"),F(D8.$$.fragment),QCr=l(),uve=a("p"),WCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HCr=l(),Mc=a("p"),UCr=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),JCr=o("not"),YCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),KCr=o("from_pretrained()"),ZCr=o(" to load the model weights."),e3r=l(),F(G5.$$.fragment),o3r=l(),qr=a("div"),F(G8.$$.fragment),r3r=l(),bve=a("p"),t3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a3r=l(),fn=a("p"),n3r=o("The model class to instantiate is selected based on the "),vve=a("code"),s3r=o("model_type"),l3r=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(":"),m3r=l(),Mve=a("ul"),O5=a("li"),Eve=a("strong"),g3r=o("vision-encoder-decoder"),h3r=o(" \u2014 "),vU=a("a"),p3r=o("TFVisionEncoderDecoderModel"),u3r=o(" (Vision Encoder decoder model)"),_3r=l(),F(V5.$$.fragment),mqe=l(),Ec=a("h2"),X5=a("a"),Cve=a("span"),F(O8.$$.fragment),b3r=l(),wve=a("span"),v3r=o("TFAutoModelForSpeechSeq2Seq"),gqe=l(),cr=a("div"),F(V8.$$.fragment),F3r=l(),Cc=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FU=a("a"),M3r=o("from_pretrained()"),E3r=o(" class method or the "),TU=a("a"),C3r=o("from_config()"),w3r=o(` class
method.`),A3r=l(),X8=a("p"),y3r=o("This class cannot be instantiated directly using "),Ave=a("code"),L3r=o("__init__()"),x3r=o(" (throws an error)."),$3r=l(),Nt=a("div"),F(z8.$$.fragment),k3r=l(),yve=a("p"),S3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R3r=l(),wc=a("p"),P3r=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),B3r=o("not"),I3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),q3r=o("from_pretrained()"),N3r=o(" to load the model weights."),j3r=l(),F(z5.$$.fragment),D3r=l(),Nr=a("div"),F(Q8.$$.fragment),G3r=l(),xve=a("p"),O3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V3r=l(),mn=a("p"),X3r=o("The model class to instantiate is selected based on the "),$ve=a("code"),z3r=o("model_type"),Q3r=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),W3r=o("pretrained_model_name_or_path"),H3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),U3r=o("pretrained_model_name_or_path"),J3r=o(":"),Y3r=l(),Rve=a("ul"),Q5=a("li"),Pve=a("strong"),K3r=o("speech_to_text"),Z3r=o(" \u2014 "),EU=a("a"),ewr=o("TFSpeech2TextForConditionalGeneration"),owr=o(" (Speech2Text model)"),rwr=l(),F(W5.$$.fragment),hqe=l(),Ac=a("h2"),H5=a("a"),Bve=a("span"),F(W8.$$.fragment),twr=l(),Ive=a("span"),awr=o("FlaxAutoModel"),pqe=l(),fr=a("div"),F(H8.$$.fragment),nwr=l(),yc=a("p"),swr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CU=a("a"),lwr=o("from_pretrained()"),iwr=o(" class method or the "),wU=a("a"),dwr=o("from_config()"),cwr=o(` class
method.`),fwr=l(),U8=a("p"),mwr=o("This class cannot be instantiated directly using "),qve=a("code"),gwr=o("__init__()"),hwr=o(" (throws an error)."),pwr=l(),jt=a("div"),F(J8.$$.fragment),uwr=l(),Nve=a("p"),_wr=o("Instantiates one of the base model classes of the library from a configuration."),bwr=l(),Lc=a("p"),vwr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),Fwr=o("not"),Twr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),Mwr=o("from_pretrained()"),Ewr=o(" to load the model weights."),Cwr=l(),F(U5.$$.fragment),wwr=l(),jr=a("div"),F(Y8.$$.fragment),Awr=l(),Dve=a("p"),ywr=o("Instantiate one of the base model classes of the library from a pretrained model."),Lwr=l(),gn=a("p"),xwr=o("The model class to instantiate is selected based on the "),Gve=a("code"),$wr=o("model_type"),kwr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),Swr=o("pretrained_model_name_or_path"),Rwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),Pwr=o("pretrained_model_name_or_path"),Bwr=o(":"),Iwr=l(),re=a("ul"),J5=a("li"),Xve=a("strong"),qwr=o("albert"),Nwr=o(" \u2014 "),yU=a("a"),jwr=o("FlaxAlbertModel"),Dwr=o(" (ALBERT model)"),Gwr=l(),Y5=a("li"),zve=a("strong"),Owr=o("bart"),Vwr=o(" \u2014 "),LU=a("a"),Xwr=o("FlaxBartModel"),zwr=o(" (BART model)"),Qwr=l(),K5=a("li"),Qve=a("strong"),Wwr=o("beit"),Hwr=o(" \u2014 "),xU=a("a"),Uwr=o("FlaxBeitModel"),Jwr=o(" (BEiT model)"),Ywr=l(),Z5=a("li"),Wve=a("strong"),Kwr=o("bert"),Zwr=o(" \u2014 "),$U=a("a"),eAr=o("FlaxBertModel"),oAr=o(" (BERT model)"),rAr=l(),eC=a("li"),Hve=a("strong"),tAr=o("big_bird"),aAr=o(" \u2014 "),kU=a("a"),nAr=o("FlaxBigBirdModel"),sAr=o(" (BigBird model)"),lAr=l(),oC=a("li"),Uve=a("strong"),iAr=o("blenderbot"),dAr=o(" \u2014 "),SU=a("a"),cAr=o("FlaxBlenderbotModel"),fAr=o(" (Blenderbot model)"),mAr=l(),rC=a("li"),Jve=a("strong"),gAr=o("blenderbot-small"),hAr=o(" \u2014 "),RU=a("a"),pAr=o("FlaxBlenderbotSmallModel"),uAr=o(" (BlenderbotSmall model)"),_Ar=l(),tC=a("li"),Yve=a("strong"),bAr=o("clip"),vAr=o(" \u2014 "),PU=a("a"),FAr=o("FlaxCLIPModel"),TAr=o(" (CLIP model)"),MAr=l(),aC=a("li"),Kve=a("strong"),EAr=o("distilbert"),CAr=o(" \u2014 "),BU=a("a"),wAr=o("FlaxDistilBertModel"),AAr=o(" (DistilBERT model)"),yAr=l(),nC=a("li"),Zve=a("strong"),LAr=o("electra"),xAr=o(" \u2014 "),IU=a("a"),$Ar=o("FlaxElectraModel"),kAr=o(" (ELECTRA model)"),SAr=l(),sC=a("li"),eFe=a("strong"),RAr=o("gpt2"),PAr=o(" \u2014 "),qU=a("a"),BAr=o("FlaxGPT2Model"),IAr=o(" (OpenAI GPT-2 model)"),qAr=l(),lC=a("li"),oFe=a("strong"),NAr=o("gpt_neo"),jAr=o(" \u2014 "),NU=a("a"),DAr=o("FlaxGPTNeoModel"),GAr=o(" (GPT Neo model)"),OAr=l(),iC=a("li"),rFe=a("strong"),VAr=o("gptj"),XAr=o(" \u2014 "),jU=a("a"),zAr=o("FlaxGPTJModel"),QAr=o(" (GPT-J model)"),WAr=l(),dC=a("li"),tFe=a("strong"),HAr=o("marian"),UAr=o(" \u2014 "),DU=a("a"),JAr=o("FlaxMarianModel"),YAr=o(" (Marian model)"),KAr=l(),cC=a("li"),aFe=a("strong"),ZAr=o("mbart"),e0r=o(" \u2014 "),GU=a("a"),o0r=o("FlaxMBartModel"),r0r=o(" (mBART model)"),t0r=l(),fC=a("li"),nFe=a("strong"),a0r=o("mt5"),n0r=o(" \u2014 "),OU=a("a"),s0r=o("FlaxMT5Model"),l0r=o(" (mT5 model)"),i0r=l(),mC=a("li"),sFe=a("strong"),d0r=o("pegasus"),c0r=o(" \u2014 "),VU=a("a"),f0r=o("FlaxPegasusModel"),m0r=o(" (Pegasus model)"),g0r=l(),gC=a("li"),lFe=a("strong"),h0r=o("roberta"),p0r=o(" \u2014 "),XU=a("a"),u0r=o("FlaxRobertaModel"),_0r=o(" (RoBERTa model)"),b0r=l(),hC=a("li"),iFe=a("strong"),v0r=o("roformer"),F0r=o(" \u2014 "),zU=a("a"),T0r=o("FlaxRoFormerModel"),M0r=o(" (RoFormer model)"),E0r=l(),pC=a("li"),dFe=a("strong"),C0r=o("t5"),w0r=o(" \u2014 "),QU=a("a"),A0r=o("FlaxT5Model"),y0r=o(" (T5 model)"),L0r=l(),uC=a("li"),cFe=a("strong"),x0r=o("vision-text-dual-encoder"),$0r=o(" \u2014 "),WU=a("a"),k0r=o("FlaxVisionTextDualEncoderModel"),S0r=o(" (VisionTextDualEncoder model)"),R0r=l(),_C=a("li"),fFe=a("strong"),P0r=o("vit"),B0r=o(" \u2014 "),HU=a("a"),I0r=o("FlaxViTModel"),q0r=o(" (ViT model)"),N0r=l(),bC=a("li"),mFe=a("strong"),j0r=o("wav2vec2"),D0r=o(" \u2014 "),UU=a("a"),G0r=o("FlaxWav2Vec2Model"),O0r=o(" (Wav2Vec2 model)"),V0r=l(),vC=a("li"),gFe=a("strong"),X0r=o("xglm"),z0r=o(" \u2014 "),JU=a("a"),Q0r=o("FlaxXGLMModel"),W0r=o(" (XGLM model)"),H0r=l(),FC=a("li"),hFe=a("strong"),U0r=o("xlm-roberta"),J0r=o(" \u2014 "),YU=a("a"),Y0r=o("FlaxXLMRobertaModel"),K0r=o(" (XLM-RoBERTa model)"),Z0r=l(),F(TC.$$.fragment),uqe=l(),xc=a("h2"),MC=a("a"),pFe=a("span"),F(K8.$$.fragment),e6r=l(),uFe=a("span"),o6r=o("FlaxAutoModelForCausalLM"),_qe=l(),mr=a("div"),F(Z8.$$.fragment),r6r=l(),$c=a("p"),t6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KU=a("a"),a6r=o("from_pretrained()"),n6r=o(" class method or the "),ZU=a("a"),s6r=o("from_config()"),l6r=o(` class
method.`),i6r=l(),ex=a("p"),d6r=o("This class cannot be instantiated directly using "),_Fe=a("code"),c6r=o("__init__()"),f6r=o(" (throws an error)."),m6r=l(),Dt=a("div"),F(ox.$$.fragment),g6r=l(),bFe=a("p"),h6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p6r=l(),kc=a("p"),u6r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),_6r=o("not"),b6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),v6r=o("from_pretrained()"),F6r=o(" to load the model weights."),T6r=l(),F(EC.$$.fragment),M6r=l(),Dr=a("div"),F(rx.$$.fragment),E6r=l(),FFe=a("p"),C6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w6r=l(),hn=a("p"),A6r=o("The model class to instantiate is selected based on the "),TFe=a("code"),y6r=o("model_type"),L6r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),x6r=o("pretrained_model_name_or_path"),$6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),k6r=o("pretrained_model_name_or_path"),S6r=o(":"),R6r=l(),ke=a("ul"),CC=a("li"),CFe=a("strong"),P6r=o("bart"),B6r=o(" \u2014 "),oJ=a("a"),I6r=o("FlaxBartForCausalLM"),q6r=o(" (BART model)"),N6r=l(),wC=a("li"),wFe=a("strong"),j6r=o("bert"),D6r=o(" \u2014 "),rJ=a("a"),G6r=o("FlaxBertForCausalLM"),O6r=o(" (BERT model)"),V6r=l(),AC=a("li"),AFe=a("strong"),X6r=o("big_bird"),z6r=o(" \u2014 "),tJ=a("a"),Q6r=o("FlaxBigBirdForCausalLM"),W6r=o(" (BigBird model)"),H6r=l(),yC=a("li"),yFe=a("strong"),U6r=o("electra"),J6r=o(" \u2014 "),aJ=a("a"),Y6r=o("FlaxElectraForCausalLM"),K6r=o(" (ELECTRA model)"),Z6r=l(),LC=a("li"),LFe=a("strong"),eyr=o("gpt2"),oyr=o(" \u2014 "),nJ=a("a"),ryr=o("FlaxGPT2LMHeadModel"),tyr=o(" (OpenAI GPT-2 model)"),ayr=l(),xC=a("li"),xFe=a("strong"),nyr=o("gpt_neo"),syr=o(" \u2014 "),sJ=a("a"),lyr=o("FlaxGPTNeoForCausalLM"),iyr=o(" (GPT Neo model)"),dyr=l(),$C=a("li"),$Fe=a("strong"),cyr=o("gptj"),fyr=o(" \u2014 "),lJ=a("a"),myr=o("FlaxGPTJForCausalLM"),gyr=o(" (GPT-J model)"),hyr=l(),kC=a("li"),kFe=a("strong"),pyr=o("roberta"),uyr=o(" \u2014 "),iJ=a("a"),_yr=o("FlaxRobertaForCausalLM"),byr=o(" (RoBERTa model)"),vyr=l(),SC=a("li"),SFe=a("strong"),Fyr=o("xglm"),Tyr=o(" \u2014 "),dJ=a("a"),Myr=o("FlaxXGLMForCausalLM"),Eyr=o(" (XGLM model)"),Cyr=l(),F(RC.$$.fragment),bqe=l(),Sc=a("h2"),PC=a("a"),RFe=a("span"),F(tx.$$.fragment),wyr=l(),PFe=a("span"),Ayr=o("FlaxAutoModelForPreTraining"),vqe=l(),gr=a("div"),F(ax.$$.fragment),yyr=l(),Rc=a("p"),Lyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cJ=a("a"),xyr=o("from_pretrained()"),$yr=o(" class method or the "),fJ=a("a"),kyr=o("from_config()"),Syr=o(` class
method.`),Ryr=l(),nx=a("p"),Pyr=o("This class cannot be instantiated directly using "),BFe=a("code"),Byr=o("__init__()"),Iyr=o(" (throws an error)."),qyr=l(),Gt=a("div"),F(sx.$$.fragment),Nyr=l(),IFe=a("p"),jyr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dyr=l(),Pc=a("p"),Gyr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),Oyr=o("not"),Vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),Xyr=o("from_pretrained()"),zyr=o(" to load the model weights."),Qyr=l(),F(BC.$$.fragment),Wyr=l(),Gr=a("div"),F(lx.$$.fragment),Hyr=l(),NFe=a("p"),Uyr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jyr=l(),pn=a("p"),Yyr=o("The model class to instantiate is selected based on the "),jFe=a("code"),Kyr=o("model_type"),Zyr=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),eLr=o("pretrained_model_name_or_path"),oLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(":"),aLr=l(),Me=a("ul"),IC=a("li"),OFe=a("strong"),nLr=o("albert"),sLr=o(" \u2014 "),gJ=a("a"),lLr=o("FlaxAlbertForPreTraining"),iLr=o(" (ALBERT model)"),dLr=l(),qC=a("li"),VFe=a("strong"),cLr=o("bart"),fLr=o(" \u2014 "),hJ=a("a"),mLr=o("FlaxBartForConditionalGeneration"),gLr=o(" (BART model)"),hLr=l(),NC=a("li"),XFe=a("strong"),pLr=o("bert"),uLr=o(" \u2014 "),pJ=a("a"),_Lr=o("FlaxBertForPreTraining"),bLr=o(" (BERT model)"),vLr=l(),jC=a("li"),zFe=a("strong"),FLr=o("big_bird"),TLr=o(" \u2014 "),uJ=a("a"),MLr=o("FlaxBigBirdForPreTraining"),ELr=o(" (BigBird model)"),CLr=l(),DC=a("li"),QFe=a("strong"),wLr=o("electra"),ALr=o(" \u2014 "),_J=a("a"),yLr=o("FlaxElectraForPreTraining"),LLr=o(" (ELECTRA model)"),xLr=l(),GC=a("li"),WFe=a("strong"),$Lr=o("mbart"),kLr=o(" \u2014 "),bJ=a("a"),SLr=o("FlaxMBartForConditionalGeneration"),RLr=o(" (mBART model)"),PLr=l(),OC=a("li"),HFe=a("strong"),BLr=o("mt5"),ILr=o(" \u2014 "),vJ=a("a"),qLr=o("FlaxMT5ForConditionalGeneration"),NLr=o(" (mT5 model)"),jLr=l(),VC=a("li"),UFe=a("strong"),DLr=o("roberta"),GLr=o(" \u2014 "),FJ=a("a"),OLr=o("FlaxRobertaForMaskedLM"),VLr=o(" (RoBERTa model)"),XLr=l(),XC=a("li"),JFe=a("strong"),zLr=o("roformer"),QLr=o(" \u2014 "),TJ=a("a"),WLr=o("FlaxRoFormerForMaskedLM"),HLr=o(" (RoFormer model)"),ULr=l(),zC=a("li"),YFe=a("strong"),JLr=o("t5"),YLr=o(" \u2014 "),MJ=a("a"),KLr=o("FlaxT5ForConditionalGeneration"),ZLr=o(" (T5 model)"),e8r=l(),QC=a("li"),KFe=a("strong"),o8r=o("wav2vec2"),r8r=o(" \u2014 "),EJ=a("a"),t8r=o("FlaxWav2Vec2ForPreTraining"),a8r=o(" (Wav2Vec2 model)"),n8r=l(),WC=a("li"),ZFe=a("strong"),s8r=o("xlm-roberta"),l8r=o(" \u2014 "),CJ=a("a"),i8r=o("FlaxXLMRobertaForMaskedLM"),d8r=o(" (XLM-RoBERTa model)"),c8r=l(),F(HC.$$.fragment),Fqe=l(),Bc=a("h2"),UC=a("a"),eTe=a("span"),F(ix.$$.fragment),f8r=l(),oTe=a("span"),m8r=o("FlaxAutoModelForMaskedLM"),Tqe=l(),hr=a("div"),F(dx.$$.fragment),g8r=l(),Ic=a("p"),h8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wJ=a("a"),p8r=o("from_pretrained()"),u8r=o(" class method or the "),AJ=a("a"),_8r=o("from_config()"),b8r=o(` class
method.`),v8r=l(),cx=a("p"),F8r=o("This class cannot be instantiated directly using "),rTe=a("code"),T8r=o("__init__()"),M8r=o(" (throws an error)."),E8r=l(),Ot=a("div"),F(fx.$$.fragment),C8r=l(),tTe=a("p"),w8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A8r=l(),qc=a("p"),y8r=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),L8r=o("not"),x8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),$8r=o("from_pretrained()"),k8r=o(" to load the model weights."),S8r=l(),F(JC.$$.fragment),R8r=l(),Or=a("div"),F(mx.$$.fragment),P8r=l(),nTe=a("p"),B8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I8r=l(),un=a("p"),q8r=o("The model class to instantiate is selected based on the "),sTe=a("code"),N8r=o("model_type"),j8r=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),O8r=o("pretrained_model_name_or_path"),V8r=o(":"),X8r=l(),Le=a("ul"),YC=a("li"),dTe=a("strong"),z8r=o("albert"),Q8r=o(" \u2014 "),LJ=a("a"),W8r=o("FlaxAlbertForMaskedLM"),H8r=o(" (ALBERT model)"),U8r=l(),KC=a("li"),cTe=a("strong"),J8r=o("bart"),Y8r=o(" \u2014 "),xJ=a("a"),K8r=o("FlaxBartForConditionalGeneration"),Z8r=o(" (BART model)"),exr=l(),ZC=a("li"),fTe=a("strong"),oxr=o("bert"),rxr=o(" \u2014 "),$J=a("a"),txr=o("FlaxBertForMaskedLM"),axr=o(" (BERT model)"),nxr=l(),e3=a("li"),mTe=a("strong"),sxr=o("big_bird"),lxr=o(" \u2014 "),kJ=a("a"),ixr=o("FlaxBigBirdForMaskedLM"),dxr=o(" (BigBird model)"),cxr=l(),o3=a("li"),gTe=a("strong"),fxr=o("distilbert"),mxr=o(" \u2014 "),SJ=a("a"),gxr=o("FlaxDistilBertForMaskedLM"),hxr=o(" (DistilBERT model)"),pxr=l(),r3=a("li"),hTe=a("strong"),uxr=o("electra"),_xr=o(" \u2014 "),RJ=a("a"),bxr=o("FlaxElectraForMaskedLM"),vxr=o(" (ELECTRA model)"),Fxr=l(),t3=a("li"),pTe=a("strong"),Txr=o("mbart"),Mxr=o(" \u2014 "),PJ=a("a"),Exr=o("FlaxMBartForConditionalGeneration"),Cxr=o(" (mBART model)"),wxr=l(),a3=a("li"),uTe=a("strong"),Axr=o("roberta"),yxr=o(" \u2014 "),BJ=a("a"),Lxr=o("FlaxRobertaForMaskedLM"),xxr=o(" (RoBERTa model)"),$xr=l(),n3=a("li"),_Te=a("strong"),kxr=o("roformer"),Sxr=o(" \u2014 "),IJ=a("a"),Rxr=o("FlaxRoFormerForMaskedLM"),Pxr=o(" (RoFormer model)"),Bxr=l(),s3=a("li"),bTe=a("strong"),Ixr=o("xlm-roberta"),qxr=o(" \u2014 "),qJ=a("a"),Nxr=o("FlaxXLMRobertaForMaskedLM"),jxr=o(" (XLM-RoBERTa model)"),Dxr=l(),F(l3.$$.fragment),Mqe=l(),Nc=a("h2"),i3=a("a"),vTe=a("span"),F(gx.$$.fragment),Gxr=l(),FTe=a("span"),Oxr=o("FlaxAutoModelForSeq2SeqLM"),Eqe=l(),pr=a("div"),F(hx.$$.fragment),Vxr=l(),jc=a("p"),Xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NJ=a("a"),zxr=o("from_pretrained()"),Qxr=o(" class method or the "),jJ=a("a"),Wxr=o("from_config()"),Hxr=o(` class
method.`),Uxr=l(),px=a("p"),Jxr=o("This class cannot be instantiated directly using "),TTe=a("code"),Yxr=o("__init__()"),Kxr=o(" (throws an error)."),Zxr=l(),Vt=a("div"),F(ux.$$.fragment),e9r=l(),MTe=a("p"),o9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r9r=l(),Dc=a("p"),t9r=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),a9r=o("not"),n9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),s9r=o("from_pretrained()"),l9r=o(" to load the model weights."),i9r=l(),F(d3.$$.fragment),d9r=l(),Vr=a("div"),F(_x.$$.fragment),c9r=l(),CTe=a("p"),f9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m9r=l(),_n=a("p"),g9r=o("The model class to instantiate is selected based on the "),wTe=a("code"),h9r=o("model_type"),p9r=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),u9r=o("pretrained_model_name_or_path"),_9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(":"),F9r=l(),Se=a("ul"),c3=a("li"),LTe=a("strong"),T9r=o("bart"),M9r=o(" \u2014 "),GJ=a("a"),E9r=o("FlaxBartForConditionalGeneration"),C9r=o(" (BART model)"),w9r=l(),f3=a("li"),xTe=a("strong"),A9r=o("blenderbot"),y9r=o(" \u2014 "),OJ=a("a"),L9r=o("FlaxBlenderbotForConditionalGeneration"),x9r=o(" (Blenderbot model)"),$9r=l(),m3=a("li"),$Te=a("strong"),k9r=o("blenderbot-small"),S9r=o(" \u2014 "),VJ=a("a"),R9r=o("FlaxBlenderbotSmallForConditionalGeneration"),P9r=o(" (BlenderbotSmall model)"),B9r=l(),g3=a("li"),kTe=a("strong"),I9r=o("encoder-decoder"),q9r=o(" \u2014 "),XJ=a("a"),N9r=o("FlaxEncoderDecoderModel"),j9r=o(" (Encoder decoder model)"),D9r=l(),h3=a("li"),STe=a("strong"),G9r=o("marian"),O9r=o(" \u2014 "),zJ=a("a"),V9r=o("FlaxMarianMTModel"),X9r=o(" (Marian model)"),z9r=l(),p3=a("li"),RTe=a("strong"),Q9r=o("mbart"),W9r=o(" \u2014 "),QJ=a("a"),H9r=o("FlaxMBartForConditionalGeneration"),U9r=o(" (mBART model)"),J9r=l(),u3=a("li"),PTe=a("strong"),Y9r=o("mt5"),K9r=o(" \u2014 "),WJ=a("a"),Z9r=o("FlaxMT5ForConditionalGeneration"),e$r=o(" (mT5 model)"),o$r=l(),_3=a("li"),BTe=a("strong"),r$r=o("pegasus"),t$r=o(" \u2014 "),HJ=a("a"),a$r=o("FlaxPegasusForConditionalGeneration"),n$r=o(" (Pegasus model)"),s$r=l(),b3=a("li"),ITe=a("strong"),l$r=o("t5"),i$r=o(" \u2014 "),UJ=a("a"),d$r=o("FlaxT5ForConditionalGeneration"),c$r=o(" (T5 model)"),f$r=l(),F(v3.$$.fragment),Cqe=l(),Gc=a("h2"),F3=a("a"),qTe=a("span"),F(bx.$$.fragment),m$r=l(),NTe=a("span"),g$r=o("FlaxAutoModelForSequenceClassification"),wqe=l(),ur=a("div"),F(vx.$$.fragment),h$r=l(),Oc=a("p"),p$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JJ=a("a"),u$r=o("from_pretrained()"),_$r=o(" class method or the "),YJ=a("a"),b$r=o("from_config()"),v$r=o(` class
method.`),F$r=l(),Fx=a("p"),T$r=o("This class cannot be instantiated directly using "),jTe=a("code"),M$r=o("__init__()"),E$r=o(" (throws an error)."),C$r=l(),Xt=a("div"),F(Tx.$$.fragment),w$r=l(),DTe=a("p"),A$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y$r=l(),Vc=a("p"),L$r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),x$r=o("not"),$$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),k$r=o("from_pretrained()"),S$r=o(" to load the model weights."),R$r=l(),F(T3.$$.fragment),P$r=l(),Xr=a("div"),F(Mx.$$.fragment),B$r=l(),OTe=a("p"),I$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q$r=l(),bn=a("p"),N$r=o("The model class to instantiate is selected based on the "),VTe=a("code"),j$r=o("model_type"),D$r=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),G$r=o("pretrained_model_name_or_path"),O$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),V$r=o("pretrained_model_name_or_path"),X$r=o(":"),z$r=l(),xe=a("ul"),M3=a("li"),QTe=a("strong"),Q$r=o("albert"),W$r=o(" \u2014 "),ZJ=a("a"),H$r=o("FlaxAlbertForSequenceClassification"),U$r=o(" (ALBERT model)"),J$r=l(),E3=a("li"),WTe=a("strong"),Y$r=o("bart"),K$r=o(" \u2014 "),eY=a("a"),Z$r=o("FlaxBartForSequenceClassification"),ekr=o(" (BART model)"),okr=l(),C3=a("li"),HTe=a("strong"),rkr=o("bert"),tkr=o(" \u2014 "),oY=a("a"),akr=o("FlaxBertForSequenceClassification"),nkr=o(" (BERT model)"),skr=l(),w3=a("li"),UTe=a("strong"),lkr=o("big_bird"),ikr=o(" \u2014 "),rY=a("a"),dkr=o("FlaxBigBirdForSequenceClassification"),ckr=o(" (BigBird model)"),fkr=l(),A3=a("li"),JTe=a("strong"),mkr=o("distilbert"),gkr=o(" \u2014 "),tY=a("a"),hkr=o("FlaxDistilBertForSequenceClassification"),pkr=o(" (DistilBERT model)"),ukr=l(),y3=a("li"),YTe=a("strong"),_kr=o("electra"),bkr=o(" \u2014 "),aY=a("a"),vkr=o("FlaxElectraForSequenceClassification"),Fkr=o(" (ELECTRA model)"),Tkr=l(),L3=a("li"),KTe=a("strong"),Mkr=o("mbart"),Ekr=o(" \u2014 "),nY=a("a"),Ckr=o("FlaxMBartForSequenceClassification"),wkr=o(" (mBART model)"),Akr=l(),x3=a("li"),ZTe=a("strong"),ykr=o("roberta"),Lkr=o(" \u2014 "),sY=a("a"),xkr=o("FlaxRobertaForSequenceClassification"),$kr=o(" (RoBERTa model)"),kkr=l(),$3=a("li"),eMe=a("strong"),Skr=o("roformer"),Rkr=o(" \u2014 "),lY=a("a"),Pkr=o("FlaxRoFormerForSequenceClassification"),Bkr=o(" (RoFormer model)"),Ikr=l(),k3=a("li"),oMe=a("strong"),qkr=o("xlm-roberta"),Nkr=o(" \u2014 "),iY=a("a"),jkr=o("FlaxXLMRobertaForSequenceClassification"),Dkr=o(" (XLM-RoBERTa model)"),Gkr=l(),F(S3.$$.fragment),Aqe=l(),Xc=a("h2"),R3=a("a"),rMe=a("span"),F(Ex.$$.fragment),Okr=l(),tMe=a("span"),Vkr=o("FlaxAutoModelForQuestionAnswering"),yqe=l(),_r=a("div"),F(Cx.$$.fragment),Xkr=l(),zc=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dY=a("a"),Qkr=o("from_pretrained()"),Wkr=o(" class method or the "),cY=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),wx=a("p"),Ykr=o("This class cannot be instantiated directly using "),aMe=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),zt=a("div"),F(Ax.$$.fragment),oSr=l(),nMe=a("p"),rSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tSr=l(),Qc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F(P3.$$.fragment),cSr=l(),zr=a("div"),F(yx.$$.fragment),fSr=l(),lMe=a("p"),mSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gSr=l(),vn=a("p"),hSr=o("The model class to instantiate is selected based on the "),iMe=a("code"),pSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),_Sr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),$e=a("ul"),B3=a("li"),fMe=a("strong"),MSr=o("albert"),ESr=o(" \u2014 "),mY=a("a"),CSr=o("FlaxAlbertForQuestionAnswering"),wSr=o(" (ALBERT model)"),ASr=l(),I3=a("li"),mMe=a("strong"),ySr=o("bart"),LSr=o(" \u2014 "),gY=a("a"),xSr=o("FlaxBartForQuestionAnswering"),$Sr=o(" (BART model)"),kSr=l(),q3=a("li"),gMe=a("strong"),SSr=o("bert"),RSr=o(" \u2014 "),hY=a("a"),PSr=o("FlaxBertForQuestionAnswering"),BSr=o(" (BERT model)"),ISr=l(),N3=a("li"),hMe=a("strong"),qSr=o("big_bird"),NSr=o(" \u2014 "),pY=a("a"),jSr=o("FlaxBigBirdForQuestionAnswering"),DSr=o(" (BigBird model)"),GSr=l(),j3=a("li"),pMe=a("strong"),OSr=o("distilbert"),VSr=o(" \u2014 "),uY=a("a"),XSr=o("FlaxDistilBertForQuestionAnswering"),zSr=o(" (DistilBERT model)"),QSr=l(),D3=a("li"),uMe=a("strong"),WSr=o("electra"),HSr=o(" \u2014 "),_Y=a("a"),USr=o("FlaxElectraForQuestionAnswering"),JSr=o(" (ELECTRA model)"),YSr=l(),G3=a("li"),_Me=a("strong"),KSr=o("mbart"),ZSr=o(" \u2014 "),bY=a("a"),eRr=o("FlaxMBartForQuestionAnswering"),oRr=o(" (mBART model)"),rRr=l(),O3=a("li"),bMe=a("strong"),tRr=o("roberta"),aRr=o(" \u2014 "),vY=a("a"),nRr=o("FlaxRobertaForQuestionAnswering"),sRr=o(" (RoBERTa model)"),lRr=l(),V3=a("li"),vMe=a("strong"),iRr=o("roformer"),dRr=o(" \u2014 "),FY=a("a"),cRr=o("FlaxRoFormerForQuestionAnswering"),fRr=o(" (RoFormer model)"),mRr=l(),X3=a("li"),FMe=a("strong"),gRr=o("xlm-roberta"),hRr=o(" \u2014 "),TY=a("a"),pRr=o("FlaxXLMRobertaForQuestionAnswering"),uRr=o(" (XLM-RoBERTa model)"),_Rr=l(),F(z3.$$.fragment),Lqe=l(),Wc=a("h2"),Q3=a("a"),TMe=a("span"),F(Lx.$$.fragment),bRr=l(),MMe=a("span"),vRr=o("FlaxAutoModelForTokenClassification"),xqe=l(),br=a("div"),F(xx.$$.fragment),FRr=l(),Hc=a("p"),TRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MY=a("a"),MRr=o("from_pretrained()"),ERr=o(" class method or the "),EY=a("a"),CRr=o("from_config()"),wRr=o(` class
method.`),ARr=l(),$x=a("p"),yRr=o("This class cannot be instantiated directly using "),EMe=a("code"),LRr=o("__init__()"),xRr=o(" (throws an error)."),$Rr=l(),Qt=a("div"),F(kx.$$.fragment),kRr=l(),CMe=a("p"),SRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RRr=l(),Uc=a("p"),PRr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),BRr=o("not"),IRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),qRr=o("from_pretrained()"),NRr=o(" to load the model weights."),jRr=l(),F(W3.$$.fragment),DRr=l(),Qr=a("div"),F(Sx.$$.fragment),GRr=l(),AMe=a("p"),ORr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VRr=l(),Fn=a("p"),XRr=o("The model class to instantiate is selected based on the "),yMe=a("code"),zRr=o("model_type"),QRr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),WRr=o("pretrained_model_name_or_path"),HRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(":"),YRr=l(),De=a("ul"),H3=a("li"),$Me=a("strong"),KRr=o("albert"),ZRr=o(" \u2014 "),wY=a("a"),ePr=o("FlaxAlbertForTokenClassification"),oPr=o(" (ALBERT model)"),rPr=l(),U3=a("li"),kMe=a("strong"),tPr=o("bert"),aPr=o(" \u2014 "),AY=a("a"),nPr=o("FlaxBertForTokenClassification"),sPr=o(" (BERT model)"),lPr=l(),J3=a("li"),SMe=a("strong"),iPr=o("big_bird"),dPr=o(" \u2014 "),yY=a("a"),cPr=o("FlaxBigBirdForTokenClassification"),fPr=o(" (BigBird model)"),mPr=l(),Y3=a("li"),RMe=a("strong"),gPr=o("distilbert"),hPr=o(" \u2014 "),LY=a("a"),pPr=o("FlaxDistilBertForTokenClassification"),uPr=o(" (DistilBERT model)"),_Pr=l(),K3=a("li"),PMe=a("strong"),bPr=o("electra"),vPr=o(" \u2014 "),xY=a("a"),FPr=o("FlaxElectraForTokenClassification"),TPr=o(" (ELECTRA model)"),MPr=l(),Z3=a("li"),BMe=a("strong"),EPr=o("roberta"),CPr=o(" \u2014 "),$Y=a("a"),wPr=o("FlaxRobertaForTokenClassification"),APr=o(" (RoBERTa model)"),yPr=l(),ew=a("li"),IMe=a("strong"),LPr=o("roformer"),xPr=o(" \u2014 "),kY=a("a"),$Pr=o("FlaxRoFormerForTokenClassification"),kPr=o(" (RoFormer model)"),SPr=l(),ow=a("li"),qMe=a("strong"),RPr=o("xlm-roberta"),PPr=o(" \u2014 "),SY=a("a"),BPr=o("FlaxXLMRobertaForTokenClassification"),IPr=o(" (XLM-RoBERTa model)"),qPr=l(),F(rw.$$.fragment),$qe=l(),Jc=a("h2"),tw=a("a"),NMe=a("span"),F(Rx.$$.fragment),NPr=l(),jMe=a("span"),jPr=o("FlaxAutoModelForMultipleChoice"),kqe=l(),vr=a("div"),F(Px.$$.fragment),DPr=l(),Yc=a("p"),GPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RY=a("a"),OPr=o("from_pretrained()"),VPr=o(" class method or the "),PY=a("a"),XPr=o("from_config()"),zPr=o(` class
method.`),QPr=l(),Bx=a("p"),WPr=o("This class cannot be instantiated directly using "),DMe=a("code"),HPr=o("__init__()"),UPr=o(" (throws an error)."),JPr=l(),Wt=a("div"),F(Ix.$$.fragment),YPr=l(),GMe=a("p"),KPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZPr=l(),Kc=a("p"),eBr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),oBr=o("not"),rBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),tBr=o("from_pretrained()"),aBr=o(" to load the model weights."),nBr=l(),F(aw.$$.fragment),sBr=l(),Wr=a("div"),F(qx.$$.fragment),lBr=l(),VMe=a("p"),iBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dBr=l(),Tn=a("p"),cBr=o("The model class to instantiate is selected based on the "),XMe=a("code"),fBr=o("model_type"),mBr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),pBr=o("pretrained_model_name_or_path"),uBr=o(":"),_Br=l(),Ge=a("ul"),nw=a("li"),WMe=a("strong"),bBr=o("albert"),vBr=o(" \u2014 "),IY=a("a"),FBr=o("FlaxAlbertForMultipleChoice"),TBr=o(" (ALBERT model)"),MBr=l(),sw=a("li"),HMe=a("strong"),EBr=o("bert"),CBr=o(" \u2014 "),qY=a("a"),wBr=o("FlaxBertForMultipleChoice"),ABr=o(" (BERT model)"),yBr=l(),lw=a("li"),UMe=a("strong"),LBr=o("big_bird"),xBr=o(" \u2014 "),NY=a("a"),$Br=o("FlaxBigBirdForMultipleChoice"),kBr=o(" (BigBird model)"),SBr=l(),iw=a("li"),JMe=a("strong"),RBr=o("distilbert"),PBr=o(" \u2014 "),jY=a("a"),BBr=o("FlaxDistilBertForMultipleChoice"),IBr=o(" (DistilBERT model)"),qBr=l(),dw=a("li"),YMe=a("strong"),NBr=o("electra"),jBr=o(" \u2014 "),DY=a("a"),DBr=o("FlaxElectraForMultipleChoice"),GBr=o(" (ELECTRA model)"),OBr=l(),cw=a("li"),KMe=a("strong"),VBr=o("roberta"),XBr=o(" \u2014 "),GY=a("a"),zBr=o("FlaxRobertaForMultipleChoice"),QBr=o(" (RoBERTa model)"),WBr=l(),fw=a("li"),ZMe=a("strong"),HBr=o("roformer"),UBr=o(" \u2014 "),OY=a("a"),JBr=o("FlaxRoFormerForMultipleChoice"),YBr=o(" (RoFormer model)"),KBr=l(),mw=a("li"),eEe=a("strong"),ZBr=o("xlm-roberta"),eIr=o(" \u2014 "),VY=a("a"),oIr=o("FlaxXLMRobertaForMultipleChoice"),rIr=o(" (XLM-RoBERTa model)"),tIr=l(),F(gw.$$.fragment),Sqe=l(),Zc=a("h2"),hw=a("a"),oEe=a("span"),F(Nx.$$.fragment),aIr=l(),rEe=a("span"),nIr=o("FlaxAutoModelForNextSentencePrediction"),Rqe=l(),Fr=a("div"),F(jx.$$.fragment),sIr=l(),ef=a("p"),lIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XY=a("a"),iIr=o("from_pretrained()"),dIr=o(" class method or the "),zY=a("a"),cIr=o("from_config()"),fIr=o(` class
method.`),mIr=l(),Dx=a("p"),gIr=o("This class cannot be instantiated directly using "),tEe=a("code"),hIr=o("__init__()"),pIr=o(" (throws an error)."),uIr=l(),Ht=a("div"),F(Gx.$$.fragment),_Ir=l(),aEe=a("p"),bIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vIr=l(),of=a("p"),FIr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),TIr=o("not"),MIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),EIr=o("from_pretrained()"),CIr=o(" to load the model weights."),wIr=l(),F(pw.$$.fragment),AIr=l(),Hr=a("div"),F(Ox.$$.fragment),yIr=l(),sEe=a("p"),LIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xIr=l(),Mn=a("p"),$Ir=o("The model class to instantiate is selected based on the "),lEe=a("code"),kIr=o("model_type"),SIr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),RIr=o("pretrained_model_name_or_path"),PIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),BIr=o("pretrained_model_name_or_path"),IIr=o(":"),qIr=l(),cEe=a("ul"),uw=a("li"),fEe=a("strong"),NIr=o("bert"),jIr=o(" \u2014 "),WY=a("a"),DIr=o("FlaxBertForNextSentencePrediction"),GIr=o(" (BERT model)"),OIr=l(),F(_w.$$.fragment),Pqe=l(),rf=a("h2"),bw=a("a"),mEe=a("span"),F(Vx.$$.fragment),VIr=l(),gEe=a("span"),XIr=o("FlaxAutoModelForImageClassification"),Bqe=l(),Tr=a("div"),F(Xx.$$.fragment),zIr=l(),tf=a("p"),QIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HY=a("a"),WIr=o("from_pretrained()"),HIr=o(" class method or the "),UY=a("a"),UIr=o("from_config()"),JIr=o(` class
method.`),YIr=l(),zx=a("p"),KIr=o("This class cannot be instantiated directly using "),hEe=a("code"),ZIr=o("__init__()"),eqr=o(" (throws an error)."),oqr=l(),Ut=a("div"),F(Qx.$$.fragment),rqr=l(),pEe=a("p"),tqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aqr=l(),af=a("p"),nqr=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),sqr=o("not"),lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),iqr=o("from_pretrained()"),dqr=o(" to load the model weights."),cqr=l(),F(vw.$$.fragment),fqr=l(),Ur=a("div"),F(Wx.$$.fragment),mqr=l(),_Ee=a("p"),gqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hqr=l(),En=a("p"),pqr=o("The model class to instantiate is selected based on the "),bEe=a("code"),uqr=o("model_type"),_qr=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),bqr=o("pretrained_model_name_or_path"),vqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(":"),Mqr=l(),Hx=a("ul"),Fw=a("li"),TEe=a("strong"),Eqr=o("beit"),Cqr=o(" \u2014 "),YY=a("a"),wqr=o("FlaxBeitForImageClassification"),Aqr=o(" (BEiT model)"),yqr=l(),Tw=a("li"),MEe=a("strong"),Lqr=o("vit"),xqr=o(" \u2014 "),KY=a("a"),$qr=o("FlaxViTForImageClassification"),kqr=o(" (ViT model)"),Sqr=l(),F(Mw.$$.fragment),Iqe=l(),nf=a("h2"),Ew=a("a"),EEe=a("span"),F(Ux.$$.fragment),Rqr=l(),CEe=a("span"),Pqr=o("FlaxAutoModelForVision2Seq"),qqe=l(),Mr=a("div"),F(Jx.$$.fragment),Bqr=l(),sf=a("p"),Iqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZY=a("a"),qqr=o("from_pretrained()"),Nqr=o(" class method or the "),eK=a("a"),jqr=o("from_config()"),Dqr=o(` class
method.`),Gqr=l(),Yx=a("p"),Oqr=o("This class cannot be instantiated directly using "),wEe=a("code"),Vqr=o("__init__()"),Xqr=o(" (throws an error)."),zqr=l(),Jt=a("div"),F(Kx.$$.fragment),Qqr=l(),AEe=a("p"),Wqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hqr=l(),lf=a("p"),Uqr=o(`Note:
Loading a model from its configuration file does `),yEe=a("strong"),Jqr=o("not"),Yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" to load the model weights."),eNr=l(),F(Cw.$$.fragment),oNr=l(),Jr=a("div"),F(Zx.$$.fragment),rNr=l(),LEe=a("p"),tNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aNr=l(),Cn=a("p"),nNr=o("The model class to instantiate is selected based on the "),xEe=a("code"),sNr=o("model_type"),lNr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),iNr=o("pretrained_model_name_or_path"),dNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),cNr=o("pretrained_model_name_or_path"),fNr=o(":"),mNr=l(),SEe=a("ul"),ww=a("li"),REe=a("strong"),gNr=o("vision-encoder-decoder"),hNr=o(" \u2014 "),rK=a("a"),pNr=o("FlaxVisionEncoderDecoderModel"),uNr=o(" (Vision Encoder decoder model)"),_Nr=l(),F(Aw.$$.fragment),this.h()},l(f){const _=O0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var e9=s(p);m=n(e9,"A",{id:!0,class:!0,href:!0});var PEe=s(m);u=n(PEe,"SPAN",{});var BEe=s(u);T(d.$$.fragment,BEe),BEe.forEach(t),PEe.forEach(t),h=i(e9),Mo=n(e9,"SPAN",{});var IEe=s(Mo);li=r(IEe,"Auto Classes"),IEe.forEach(t),e9.forEach(t),mf=i(f),et=n(f,"P",{});var o9=s(et);ii=r(o9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(o9,"CODE",{});var qEe=s(di);z0=r(qEe,"from_pretrained()"),qEe.forEach(t),gf=r(o9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),o9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var NEe=s(An);Q0=r(NEe,"AutoConfig"),NEe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var jEe=s(Ln);W0=r(jEe,"AutoModel"),jEe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var DEe=s(xn);H0=r(DEe,"AutoTokenizer"),DEe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var r9=s(Ae);m$=r(r9,"will create a model that is an instance of "),gi=n(r9,"A",{href:!0});var GEe=s(gi);g$=r(GEe,"BertModel"),GEe.forEach(t),h$=r(r9,"."),r9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var t9=s(Ea);p$=r(t9,"There is one class of "),pf=n(t9,"CODE",{});var OEe=s(pf);u$=r(OEe,"AutoModel"),OEe.forEach(t),Qje=r(t9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),t9.forEach(t),BBe=i(f),hi=n(f,"H2",{class:!0});var a9=s(hi);uf=n(a9,"A",{id:!0,class:!0,href:!0});var VEe=s(uf);JZ=n(VEe,"SPAN",{});var XEe=s(JZ);T(U0.$$.fragment,XEe),XEe.forEach(t),VEe.forEach(t),Wje=i(a9),YZ=n(a9,"SPAN",{});var zEe=s(YZ);Hje=r(zEe,"Extending the Auto Classes"),zEe.forEach(t),a9.forEach(t),IBe=i(f),$n=n(f,"P",{});var df=s($n);Uje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),KZ=n(df,"CODE",{});var QEe=s(KZ);Jje=r(QEe,"NewModel"),QEe.forEach(t),Yje=r(df,", make sure you have a "),ZZ=n(df,"CODE",{});var WEe=s(ZZ);Kje=r(WEe,"NewModelConfig"),WEe.forEach(t),Zje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),qBe=i(f),T(J0.$$.fragment,f),NBe=i(f),_$=n(f,"P",{});var HEe=s(_$);eDe=r(HEe,"You will then be able to use the auto classes like you would usually do!"),HEe.forEach(t),jBe=i(f),T(_f.$$.fragment,f),DBe=i(f),pi=n(f,"H2",{class:!0});var n9=s(pi);bf=n(n9,"A",{id:!0,class:!0,href:!0});var UEe=s(bf);eee=n(UEe,"SPAN",{});var JEe=s(eee);T(Y0.$$.fragment,JEe),JEe.forEach(t),UEe.forEach(t),oDe=i(n9),oee=n(n9,"SPAN",{});var YEe=s(oee);rDe=r(YEe,"AutoConfig"),YEe.forEach(t),n9.forEach(t),GBe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(K0.$$.fragment,Kr),tDe=i(Kr),Z0=n(Kr,"P",{});var s9=s(Z0);aDe=r(s9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),b$=n(s9,"A",{href:!0});var KEe=s(b$);nDe=r(KEe,"from_pretrained()"),KEe.forEach(t),sDe=r(s9," class method."),s9.forEach(t),lDe=i(Kr),e6=n(Kr,"P",{});var l9=s(e6);iDe=r(l9,"This class cannot be instantiated directly using "),ree=n(l9,"CODE",{});var ZEe=s(ree);dDe=r(ZEe,"__init__()"),ZEe.forEach(t),cDe=r(l9," (throws an error)."),l9.forEach(t),fDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(o6.$$.fragment,Zr),mDe=i(Zr),tee=n(Zr,"P",{});var e5e=s(tee);gDe=r(e5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e5e.forEach(t),hDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);pDe=r(cf,"The configuration class to instantiate is selected based on the "),aee=n(cf,"CODE",{});var o5e=s(aee);uDe=r(o5e,"model_type"),o5e.forEach(t),_De=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nee=n(cf,"CODE",{});var r5e=s(nee);bDe=r(r5e,"pretrained_model_name_or_path"),r5e.forEach(t),vDe=r(cf,":"),cf.forEach(t),FDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var yw=s(vf);see=n(yw,"STRONG",{});var t5e=s(see);TDe=r(t5e,"albert"),t5e.forEach(t),MDe=r(yw," \u2014 "),v$=n(yw,"A",{href:!0});var a5e=s(v$);EDe=r(a5e,"AlbertConfig"),a5e.forEach(t),CDe=r(yw," (ALBERT model)"),yw.forEach(t),wDe=i(L),Ff=n(L,"LI",{});var Lw=s(Ff);lee=n(Lw,"STRONG",{});var n5e=s(lee);ADe=r(n5e,"bart"),n5e.forEach(t),yDe=r(Lw," \u2014 "),F$=n(Lw,"A",{href:!0});var s5e=s(F$);LDe=r(s5e,"BartConfig"),s5e.forEach(t),xDe=r(Lw," (BART model)"),Lw.forEach(t),$De=i(L),Tf=n(L,"LI",{});var xw=s(Tf);iee=n(xw,"STRONG",{});var l5e=s(iee);kDe=r(l5e,"beit"),l5e.forEach(t),SDe=r(xw," \u2014 "),T$=n(xw,"A",{href:!0});var i5e=s(T$);RDe=r(i5e,"BeitConfig"),i5e.forEach(t),PDe=r(xw," (BEiT model)"),xw.forEach(t),BDe=i(L),Mf=n(L,"LI",{});var $w=s(Mf);dee=n($w,"STRONG",{});var d5e=s(dee);IDe=r(d5e,"bert"),d5e.forEach(t),qDe=r($w," \u2014 "),M$=n($w,"A",{href:!0});var c5e=s(M$);NDe=r(c5e,"BertConfig"),c5e.forEach(t),jDe=r($w," (BERT model)"),$w.forEach(t),DDe=i(L),Ef=n(L,"LI",{});var kw=s(Ef);cee=n(kw,"STRONG",{});var f5e=s(cee);GDe=r(f5e,"bert-generation"),f5e.forEach(t),ODe=r(kw," \u2014 "),E$=n(kw,"A",{href:!0});var m5e=s(E$);VDe=r(m5e,"BertGenerationConfig"),m5e.forEach(t),XDe=r(kw," (Bert Generation model)"),kw.forEach(t),zDe=i(L),Cf=n(L,"LI",{});var Sw=s(Cf);fee=n(Sw,"STRONG",{});var g5e=s(fee);QDe=r(g5e,"big_bird"),g5e.forEach(t),WDe=r(Sw," \u2014 "),C$=n(Sw,"A",{href:!0});var h5e=s(C$);HDe=r(h5e,"BigBirdConfig"),h5e.forEach(t),UDe=r(Sw," (BigBird model)"),Sw.forEach(t),JDe=i(L),wf=n(L,"LI",{});var Rw=s(wf);mee=n(Rw,"STRONG",{});var p5e=s(mee);YDe=r(p5e,"bigbird_pegasus"),p5e.forEach(t),KDe=r(Rw," \u2014 "),w$=n(Rw,"A",{href:!0});var u5e=s(w$);ZDe=r(u5e,"BigBirdPegasusConfig"),u5e.forEach(t),eGe=r(Rw," (BigBirdPegasus model)"),Rw.forEach(t),oGe=i(L),Af=n(L,"LI",{});var Pw=s(Af);gee=n(Pw,"STRONG",{});var _5e=s(gee);rGe=r(_5e,"blenderbot"),_5e.forEach(t),tGe=r(Pw," \u2014 "),A$=n(Pw,"A",{href:!0});var b5e=s(A$);aGe=r(b5e,"BlenderbotConfig"),b5e.forEach(t),nGe=r(Pw," (Blenderbot model)"),Pw.forEach(t),sGe=i(L),yf=n(L,"LI",{});var Bw=s(yf);hee=n(Bw,"STRONG",{});var v5e=s(hee);lGe=r(v5e,"blenderbot-small"),v5e.forEach(t),iGe=r(Bw," \u2014 "),y$=n(Bw,"A",{href:!0});var F5e=s(y$);dGe=r(F5e,"BlenderbotSmallConfig"),F5e.forEach(t),cGe=r(Bw," (BlenderbotSmall model)"),Bw.forEach(t),fGe=i(L),Lf=n(L,"LI",{});var Iw=s(Lf);pee=n(Iw,"STRONG",{});var T5e=s(pee);mGe=r(T5e,"camembert"),T5e.forEach(t),gGe=r(Iw," \u2014 "),L$=n(Iw,"A",{href:!0});var M5e=s(L$);hGe=r(M5e,"CamembertConfig"),M5e.forEach(t),pGe=r(Iw," (CamemBERT model)"),Iw.forEach(t),uGe=i(L),xf=n(L,"LI",{});var qw=s(xf);uee=n(qw,"STRONG",{});var E5e=s(uee);_Ge=r(E5e,"canine"),E5e.forEach(t),bGe=r(qw," \u2014 "),x$=n(qw,"A",{href:!0});var C5e=s(x$);vGe=r(C5e,"CanineConfig"),C5e.forEach(t),FGe=r(qw," (Canine model)"),qw.forEach(t),TGe=i(L),$f=n(L,"LI",{});var Nw=s($f);_ee=n(Nw,"STRONG",{});var w5e=s(_ee);MGe=r(w5e,"clip"),w5e.forEach(t),EGe=r(Nw," \u2014 "),$$=n(Nw,"A",{href:!0});var A5e=s($$);CGe=r(A5e,"CLIPConfig"),A5e.forEach(t),wGe=r(Nw," (CLIP model)"),Nw.forEach(t),AGe=i(L),kf=n(L,"LI",{});var jw=s(kf);bee=n(jw,"STRONG",{});var y5e=s(bee);yGe=r(y5e,"convbert"),y5e.forEach(t),LGe=r(jw," \u2014 "),k$=n(jw,"A",{href:!0});var L5e=s(k$);xGe=r(L5e,"ConvBertConfig"),L5e.forEach(t),$Ge=r(jw," (ConvBERT model)"),jw.forEach(t),kGe=i(L),Sf=n(L,"LI",{});var Dw=s(Sf);vee=n(Dw,"STRONG",{});var x5e=s(vee);SGe=r(x5e,"convnext"),x5e.forEach(t),RGe=r(Dw," \u2014 "),S$=n(Dw,"A",{href:!0});var $5e=s(S$);PGe=r($5e,"ConvNextConfig"),$5e.forEach(t),BGe=r(Dw," (ConvNext model)"),Dw.forEach(t),IGe=i(L),Rf=n(L,"LI",{});var Gw=s(Rf);Fee=n(Gw,"STRONG",{});var k5e=s(Fee);qGe=r(k5e,"ctrl"),k5e.forEach(t),NGe=r(Gw," \u2014 "),R$=n(Gw,"A",{href:!0});var S5e=s(R$);jGe=r(S5e,"CTRLConfig"),S5e.forEach(t),DGe=r(Gw," (CTRL model)"),Gw.forEach(t),GGe=i(L),Pf=n(L,"LI",{});var Ow=s(Pf);Tee=n(Ow,"STRONG",{});var R5e=s(Tee);OGe=r(R5e,"data2vec-audio"),R5e.forEach(t),VGe=r(Ow," \u2014 "),P$=n(Ow,"A",{href:!0});var P5e=s(P$);XGe=r(P5e,"Data2VecAudioConfig"),P5e.forEach(t),zGe=r(Ow," (Data2VecAudio model)"),Ow.forEach(t),QGe=i(L),Bf=n(L,"LI",{});var Vw=s(Bf);Mee=n(Vw,"STRONG",{});var B5e=s(Mee);WGe=r(B5e,"data2vec-text"),B5e.forEach(t),HGe=r(Vw," \u2014 "),B$=n(Vw,"A",{href:!0});var I5e=s(B$);UGe=r(I5e,"Data2VecTextConfig"),I5e.forEach(t),JGe=r(Vw," (Data2VecText model)"),Vw.forEach(t),YGe=i(L),If=n(L,"LI",{});var Xw=s(If);Eee=n(Xw,"STRONG",{});var q5e=s(Eee);KGe=r(q5e,"data2vec-vision"),q5e.forEach(t),ZGe=r(Xw," \u2014 "),I$=n(Xw,"A",{href:!0});var N5e=s(I$);eOe=r(N5e,"Data2VecVisionConfig"),N5e.forEach(t),oOe=r(Xw," (Data2VecVision model)"),Xw.forEach(t),rOe=i(L),qf=n(L,"LI",{});var zw=s(qf);Cee=n(zw,"STRONG",{});var j5e=s(Cee);tOe=r(j5e,"deberta"),j5e.forEach(t),aOe=r(zw," \u2014 "),q$=n(zw,"A",{href:!0});var D5e=s(q$);nOe=r(D5e,"DebertaConfig"),D5e.forEach(t),sOe=r(zw," (DeBERTa model)"),zw.forEach(t),lOe=i(L),Nf=n(L,"LI",{});var Qw=s(Nf);wee=n(Qw,"STRONG",{});var G5e=s(wee);iOe=r(G5e,"deberta-v2"),G5e.forEach(t),dOe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var O5e=s(N$);cOe=r(O5e,"DebertaV2Config"),O5e.forEach(t),fOe=r(Qw," (DeBERTa-v2 model)"),Qw.forEach(t),mOe=i(L),jf=n(L,"LI",{});var Ww=s(jf);Aee=n(Ww,"STRONG",{});var V5e=s(Aee);gOe=r(V5e,"decision_transformer"),V5e.forEach(t),hOe=r(Ww," \u2014 "),j$=n(Ww,"A",{href:!0});var X5e=s(j$);pOe=r(X5e,"DecisionTransformerConfig"),X5e.forEach(t),uOe=r(Ww," (Decision Transformer model)"),Ww.forEach(t),_Oe=i(L),Df=n(L,"LI",{});var Hw=s(Df);yee=n(Hw,"STRONG",{});var z5e=s(yee);bOe=r(z5e,"deit"),z5e.forEach(t),vOe=r(Hw," \u2014 "),D$=n(Hw,"A",{href:!0});var Q5e=s(D$);FOe=r(Q5e,"DeiTConfig"),Q5e.forEach(t),TOe=r(Hw," (DeiT model)"),Hw.forEach(t),MOe=i(L),Gf=n(L,"LI",{});var Uw=s(Gf);Lee=n(Uw,"STRONG",{});var W5e=s(Lee);EOe=r(W5e,"detr"),W5e.forEach(t),COe=r(Uw," \u2014 "),G$=n(Uw,"A",{href:!0});var vNr=s(G$);wOe=r(vNr,"DetrConfig"),vNr.forEach(t),AOe=r(Uw," (DETR model)"),Uw.forEach(t),yOe=i(L),Of=n(L,"LI",{});var H5e=s(Of);xee=n(H5e,"STRONG",{});var FNr=s(xee);LOe=r(FNr,"distilbert"),FNr.forEach(t),xOe=r(H5e," \u2014 "),O$=n(H5e,"A",{href:!0});var TNr=s(O$);$Oe=r(TNr,"DistilBertConfig"),TNr.forEach(t),kOe=r(H5e," (DistilBERT model)"),H5e.forEach(t),SOe=i(L),Vf=n(L,"LI",{});var U5e=s(Vf);$ee=n(U5e,"STRONG",{});var MNr=s($ee);ROe=r(MNr,"dpr"),MNr.forEach(t),POe=r(U5e," \u2014 "),V$=n(U5e,"A",{href:!0});var ENr=s(V$);BOe=r(ENr,"DPRConfig"),ENr.forEach(t),IOe=r(U5e," (DPR model)"),U5e.forEach(t),qOe=i(L),Xf=n(L,"LI",{});var J5e=s(Xf);kee=n(J5e,"STRONG",{});var CNr=s(kee);NOe=r(CNr,"dpt"),CNr.forEach(t),jOe=r(J5e," \u2014 "),X$=n(J5e,"A",{href:!0});var wNr=s(X$);DOe=r(wNr,"DPTConfig"),wNr.forEach(t),GOe=r(J5e," (DPT model)"),J5e.forEach(t),OOe=i(L),zf=n(L,"LI",{});var Y5e=s(zf);See=n(Y5e,"STRONG",{});var ANr=s(See);VOe=r(ANr,"electra"),ANr.forEach(t),XOe=r(Y5e," \u2014 "),z$=n(Y5e,"A",{href:!0});var yNr=s(z$);zOe=r(yNr,"ElectraConfig"),yNr.forEach(t),QOe=r(Y5e," (ELECTRA model)"),Y5e.forEach(t),WOe=i(L),Qf=n(L,"LI",{});var K5e=s(Qf);Ree=n(K5e,"STRONG",{});var LNr=s(Ree);HOe=r(LNr,"encoder-decoder"),LNr.forEach(t),UOe=r(K5e," \u2014 "),Q$=n(K5e,"A",{href:!0});var xNr=s(Q$);JOe=r(xNr,"EncoderDecoderConfig"),xNr.forEach(t),YOe=r(K5e," (Encoder decoder model)"),K5e.forEach(t),KOe=i(L),Wf=n(L,"LI",{});var Z5e=s(Wf);Pee=n(Z5e,"STRONG",{});var $Nr=s(Pee);ZOe=r($Nr,"flaubert"),$Nr.forEach(t),eVe=r(Z5e," \u2014 "),W$=n(Z5e,"A",{href:!0});var kNr=s(W$);oVe=r(kNr,"FlaubertConfig"),kNr.forEach(t),rVe=r(Z5e," (FlauBERT model)"),Z5e.forEach(t),tVe=i(L),Hf=n(L,"LI",{});var eCe=s(Hf);Bee=n(eCe,"STRONG",{});var SNr=s(Bee);aVe=r(SNr,"flava"),SNr.forEach(t),nVe=r(eCe," \u2014 "),H$=n(eCe,"A",{href:!0});var RNr=s(H$);sVe=r(RNr,"FlavaConfig"),RNr.forEach(t),lVe=r(eCe," (Flava model)"),eCe.forEach(t),iVe=i(L),Uf=n(L,"LI",{});var oCe=s(Uf);Iee=n(oCe,"STRONG",{});var PNr=s(Iee);dVe=r(PNr,"fnet"),PNr.forEach(t),cVe=r(oCe," \u2014 "),U$=n(oCe,"A",{href:!0});var BNr=s(U$);fVe=r(BNr,"FNetConfig"),BNr.forEach(t),mVe=r(oCe," (FNet model)"),oCe.forEach(t),gVe=i(L),Jf=n(L,"LI",{});var rCe=s(Jf);qee=n(rCe,"STRONG",{});var INr=s(qee);hVe=r(INr,"fsmt"),INr.forEach(t),pVe=r(rCe," \u2014 "),J$=n(rCe,"A",{href:!0});var qNr=s(J$);uVe=r(qNr,"FSMTConfig"),qNr.forEach(t),_Ve=r(rCe," (FairSeq Machine-Translation model)"),rCe.forEach(t),bVe=i(L),Yf=n(L,"LI",{});var tCe=s(Yf);Nee=n(tCe,"STRONG",{});var NNr=s(Nee);vVe=r(NNr,"funnel"),NNr.forEach(t),FVe=r(tCe," \u2014 "),Y$=n(tCe,"A",{href:!0});var jNr=s(Y$);TVe=r(jNr,"FunnelConfig"),jNr.forEach(t),MVe=r(tCe," (Funnel Transformer model)"),tCe.forEach(t),EVe=i(L),Kf=n(L,"LI",{});var aCe=s(Kf);jee=n(aCe,"STRONG",{});var DNr=s(jee);CVe=r(DNr,"glpn"),DNr.forEach(t),wVe=r(aCe," \u2014 "),K$=n(aCe,"A",{href:!0});var GNr=s(K$);AVe=r(GNr,"GLPNConfig"),GNr.forEach(t),yVe=r(aCe," (GLPN model)"),aCe.forEach(t),LVe=i(L),Zf=n(L,"LI",{});var nCe=s(Zf);Dee=n(nCe,"STRONG",{});var ONr=s(Dee);xVe=r(ONr,"gpt2"),ONr.forEach(t),$Ve=r(nCe," \u2014 "),Z$=n(nCe,"A",{href:!0});var VNr=s(Z$);kVe=r(VNr,"GPT2Config"),VNr.forEach(t),SVe=r(nCe," (OpenAI GPT-2 model)"),nCe.forEach(t),RVe=i(L),em=n(L,"LI",{});var sCe=s(em);Gee=n(sCe,"STRONG",{});var XNr=s(Gee);PVe=r(XNr,"gpt_neo"),XNr.forEach(t),BVe=r(sCe," \u2014 "),ek=n(sCe,"A",{href:!0});var zNr=s(ek);IVe=r(zNr,"GPTNeoConfig"),zNr.forEach(t),qVe=r(sCe," (GPT Neo model)"),sCe.forEach(t),NVe=i(L),om=n(L,"LI",{});var lCe=s(om);Oee=n(lCe,"STRONG",{});var QNr=s(Oee);jVe=r(QNr,"gptj"),QNr.forEach(t),DVe=r(lCe," \u2014 "),ok=n(lCe,"A",{href:!0});var WNr=s(ok);GVe=r(WNr,"GPTJConfig"),WNr.forEach(t),OVe=r(lCe," (GPT-J model)"),lCe.forEach(t),VVe=i(L),rm=n(L,"LI",{});var iCe=s(rm);Vee=n(iCe,"STRONG",{});var HNr=s(Vee);XVe=r(HNr,"hubert"),HNr.forEach(t),zVe=r(iCe," \u2014 "),rk=n(iCe,"A",{href:!0});var UNr=s(rk);QVe=r(UNr,"HubertConfig"),UNr.forEach(t),WVe=r(iCe," (Hubert model)"),iCe.forEach(t),HVe=i(L),tm=n(L,"LI",{});var dCe=s(tm);Xee=n(dCe,"STRONG",{});var JNr=s(Xee);UVe=r(JNr,"ibert"),JNr.forEach(t),JVe=r(dCe," \u2014 "),tk=n(dCe,"A",{href:!0});var YNr=s(tk);YVe=r(YNr,"IBertConfig"),YNr.forEach(t),KVe=r(dCe," (I-BERT model)"),dCe.forEach(t),ZVe=i(L),am=n(L,"LI",{});var cCe=s(am);zee=n(cCe,"STRONG",{});var KNr=s(zee);eXe=r(KNr,"imagegpt"),KNr.forEach(t),oXe=r(cCe," \u2014 "),ak=n(cCe,"A",{href:!0});var ZNr=s(ak);rXe=r(ZNr,"ImageGPTConfig"),ZNr.forEach(t),tXe=r(cCe," (ImageGPT model)"),cCe.forEach(t),aXe=i(L),nm=n(L,"LI",{});var fCe=s(nm);Qee=n(fCe,"STRONG",{});var ejr=s(Qee);nXe=r(ejr,"layoutlm"),ejr.forEach(t),sXe=r(fCe," \u2014 "),nk=n(fCe,"A",{href:!0});var ojr=s(nk);lXe=r(ojr,"LayoutLMConfig"),ojr.forEach(t),iXe=r(fCe," (LayoutLM model)"),fCe.forEach(t),dXe=i(L),sm=n(L,"LI",{});var mCe=s(sm);Wee=n(mCe,"STRONG",{});var rjr=s(Wee);cXe=r(rjr,"layoutlmv2"),rjr.forEach(t),fXe=r(mCe," \u2014 "),sk=n(mCe,"A",{href:!0});var tjr=s(sk);mXe=r(tjr,"LayoutLMv2Config"),tjr.forEach(t),gXe=r(mCe," (LayoutLMv2 model)"),mCe.forEach(t),hXe=i(L),lm=n(L,"LI",{});var gCe=s(lm);Hee=n(gCe,"STRONG",{});var ajr=s(Hee);pXe=r(ajr,"led"),ajr.forEach(t),uXe=r(gCe," \u2014 "),lk=n(gCe,"A",{href:!0});var njr=s(lk);_Xe=r(njr,"LEDConfig"),njr.forEach(t),bXe=r(gCe," (LED model)"),gCe.forEach(t),vXe=i(L),im=n(L,"LI",{});var hCe=s(im);Uee=n(hCe,"STRONG",{});var sjr=s(Uee);FXe=r(sjr,"longformer"),sjr.forEach(t),TXe=r(hCe," \u2014 "),ik=n(hCe,"A",{href:!0});var ljr=s(ik);MXe=r(ljr,"LongformerConfig"),ljr.forEach(t),EXe=r(hCe," (Longformer model)"),hCe.forEach(t),CXe=i(L),dm=n(L,"LI",{});var pCe=s(dm);Jee=n(pCe,"STRONG",{});var ijr=s(Jee);wXe=r(ijr,"luke"),ijr.forEach(t),AXe=r(pCe," \u2014 "),dk=n(pCe,"A",{href:!0});var djr=s(dk);yXe=r(djr,"LukeConfig"),djr.forEach(t),LXe=r(pCe," (LUKE model)"),pCe.forEach(t),xXe=i(L),cm=n(L,"LI",{});var uCe=s(cm);Yee=n(uCe,"STRONG",{});var cjr=s(Yee);$Xe=r(cjr,"lxmert"),cjr.forEach(t),kXe=r(uCe," \u2014 "),ck=n(uCe,"A",{href:!0});var fjr=s(ck);SXe=r(fjr,"LxmertConfig"),fjr.forEach(t),RXe=r(uCe," (LXMERT model)"),uCe.forEach(t),PXe=i(L),fm=n(L,"LI",{});var _Ce=s(fm);Kee=n(_Ce,"STRONG",{});var mjr=s(Kee);BXe=r(mjr,"m2m_100"),mjr.forEach(t),IXe=r(_Ce," \u2014 "),fk=n(_Ce,"A",{href:!0});var gjr=s(fk);qXe=r(gjr,"M2M100Config"),gjr.forEach(t),NXe=r(_Ce," (M2M100 model)"),_Ce.forEach(t),jXe=i(L),mm=n(L,"LI",{});var bCe=s(mm);Zee=n(bCe,"STRONG",{});var hjr=s(Zee);DXe=r(hjr,"marian"),hjr.forEach(t),GXe=r(bCe," \u2014 "),mk=n(bCe,"A",{href:!0});var pjr=s(mk);OXe=r(pjr,"MarianConfig"),pjr.forEach(t),VXe=r(bCe," (Marian model)"),bCe.forEach(t),XXe=i(L),gm=n(L,"LI",{});var vCe=s(gm);eoe=n(vCe,"STRONG",{});var ujr=s(eoe);zXe=r(ujr,"maskformer"),ujr.forEach(t),QXe=r(vCe," \u2014 "),gk=n(vCe,"A",{href:!0});var _jr=s(gk);WXe=r(_jr,"MaskFormerConfig"),_jr.forEach(t),HXe=r(vCe," (MaskFormer model)"),vCe.forEach(t),UXe=i(L),hm=n(L,"LI",{});var FCe=s(hm);ooe=n(FCe,"STRONG",{});var bjr=s(ooe);JXe=r(bjr,"mbart"),bjr.forEach(t),YXe=r(FCe," \u2014 "),hk=n(FCe,"A",{href:!0});var vjr=s(hk);KXe=r(vjr,"MBartConfig"),vjr.forEach(t),ZXe=r(FCe," (mBART model)"),FCe.forEach(t),eze=i(L),pm=n(L,"LI",{});var TCe=s(pm);roe=n(TCe,"STRONG",{});var Fjr=s(roe);oze=r(Fjr,"megatron-bert"),Fjr.forEach(t),rze=r(TCe," \u2014 "),pk=n(TCe,"A",{href:!0});var Tjr=s(pk);tze=r(Tjr,"MegatronBertConfig"),Tjr.forEach(t),aze=r(TCe," (MegatronBert model)"),TCe.forEach(t),nze=i(L),um=n(L,"LI",{});var MCe=s(um);toe=n(MCe,"STRONG",{});var Mjr=s(toe);sze=r(Mjr,"mobilebert"),Mjr.forEach(t),lze=r(MCe," \u2014 "),uk=n(MCe,"A",{href:!0});var Ejr=s(uk);ize=r(Ejr,"MobileBertConfig"),Ejr.forEach(t),dze=r(MCe," (MobileBERT model)"),MCe.forEach(t),cze=i(L),_m=n(L,"LI",{});var ECe=s(_m);aoe=n(ECe,"STRONG",{});var Cjr=s(aoe);fze=r(Cjr,"mpnet"),Cjr.forEach(t),mze=r(ECe," \u2014 "),_k=n(ECe,"A",{href:!0});var wjr=s(_k);gze=r(wjr,"MPNetConfig"),wjr.forEach(t),hze=r(ECe," (MPNet model)"),ECe.forEach(t),pze=i(L),bm=n(L,"LI",{});var CCe=s(bm);noe=n(CCe,"STRONG",{});var Ajr=s(noe);uze=r(Ajr,"mt5"),Ajr.forEach(t),_ze=r(CCe," \u2014 "),bk=n(CCe,"A",{href:!0});var yjr=s(bk);bze=r(yjr,"MT5Config"),yjr.forEach(t),vze=r(CCe," (mT5 model)"),CCe.forEach(t),Fze=i(L),vm=n(L,"LI",{});var wCe=s(vm);soe=n(wCe,"STRONG",{});var Ljr=s(soe);Tze=r(Ljr,"nystromformer"),Ljr.forEach(t),Mze=r(wCe," \u2014 "),vk=n(wCe,"A",{href:!0});var xjr=s(vk);Eze=r(xjr,"NystromformerConfig"),xjr.forEach(t),Cze=r(wCe," (Nystromformer model)"),wCe.forEach(t),wze=i(L),Fm=n(L,"LI",{});var ACe=s(Fm);loe=n(ACe,"STRONG",{});var $jr=s(loe);Aze=r($jr,"openai-gpt"),$jr.forEach(t),yze=r(ACe," \u2014 "),Fk=n(ACe,"A",{href:!0});var kjr=s(Fk);Lze=r(kjr,"OpenAIGPTConfig"),kjr.forEach(t),xze=r(ACe," (OpenAI GPT model)"),ACe.forEach(t),$ze=i(L),Tm=n(L,"LI",{});var yCe=s(Tm);ioe=n(yCe,"STRONG",{});var Sjr=s(ioe);kze=r(Sjr,"opt"),Sjr.forEach(t),Sze=r(yCe," \u2014 "),Tk=n(yCe,"A",{href:!0});var Rjr=s(Tk);Rze=r(Rjr,"OPTConfig"),Rjr.forEach(t),Pze=r(yCe," (OPT model)"),yCe.forEach(t),Bze=i(L),Mm=n(L,"LI",{});var LCe=s(Mm);doe=n(LCe,"STRONG",{});var Pjr=s(doe);Ize=r(Pjr,"pegasus"),Pjr.forEach(t),qze=r(LCe," \u2014 "),Mk=n(LCe,"A",{href:!0});var Bjr=s(Mk);Nze=r(Bjr,"PegasusConfig"),Bjr.forEach(t),jze=r(LCe," (Pegasus model)"),LCe.forEach(t),Dze=i(L),Em=n(L,"LI",{});var xCe=s(Em);coe=n(xCe,"STRONG",{});var Ijr=s(coe);Gze=r(Ijr,"perceiver"),Ijr.forEach(t),Oze=r(xCe," \u2014 "),Ek=n(xCe,"A",{href:!0});var qjr=s(Ek);Vze=r(qjr,"PerceiverConfig"),qjr.forEach(t),Xze=r(xCe," (Perceiver model)"),xCe.forEach(t),zze=i(L),Cm=n(L,"LI",{});var $Ce=s(Cm);foe=n($Ce,"STRONG",{});var Njr=s(foe);Qze=r(Njr,"plbart"),Njr.forEach(t),Wze=r($Ce," \u2014 "),Ck=n($Ce,"A",{href:!0});var jjr=s(Ck);Hze=r(jjr,"PLBartConfig"),jjr.forEach(t),Uze=r($Ce," (PLBart model)"),$Ce.forEach(t),Jze=i(L),wm=n(L,"LI",{});var kCe=s(wm);moe=n(kCe,"STRONG",{});var Djr=s(moe);Yze=r(Djr,"poolformer"),Djr.forEach(t),Kze=r(kCe," \u2014 "),wk=n(kCe,"A",{href:!0});var Gjr=s(wk);Zze=r(Gjr,"PoolFormerConfig"),Gjr.forEach(t),eQe=r(kCe," (PoolFormer model)"),kCe.forEach(t),oQe=i(L),Am=n(L,"LI",{});var SCe=s(Am);goe=n(SCe,"STRONG",{});var Ojr=s(goe);rQe=r(Ojr,"prophetnet"),Ojr.forEach(t),tQe=r(SCe," \u2014 "),Ak=n(SCe,"A",{href:!0});var Vjr=s(Ak);aQe=r(Vjr,"ProphetNetConfig"),Vjr.forEach(t),nQe=r(SCe," (ProphetNet model)"),SCe.forEach(t),sQe=i(L),ym=n(L,"LI",{});var RCe=s(ym);hoe=n(RCe,"STRONG",{});var Xjr=s(hoe);lQe=r(Xjr,"qdqbert"),Xjr.forEach(t),iQe=r(RCe," \u2014 "),yk=n(RCe,"A",{href:!0});var zjr=s(yk);dQe=r(zjr,"QDQBertConfig"),zjr.forEach(t),cQe=r(RCe," (QDQBert model)"),RCe.forEach(t),fQe=i(L),Lm=n(L,"LI",{});var PCe=s(Lm);poe=n(PCe,"STRONG",{});var Qjr=s(poe);mQe=r(Qjr,"rag"),Qjr.forEach(t),gQe=r(PCe," \u2014 "),Lk=n(PCe,"A",{href:!0});var Wjr=s(Lk);hQe=r(Wjr,"RagConfig"),Wjr.forEach(t),pQe=r(PCe," (RAG model)"),PCe.forEach(t),uQe=i(L),xm=n(L,"LI",{});var BCe=s(xm);uoe=n(BCe,"STRONG",{});var Hjr=s(uoe);_Qe=r(Hjr,"realm"),Hjr.forEach(t),bQe=r(BCe," \u2014 "),xk=n(BCe,"A",{href:!0});var Ujr=s(xk);vQe=r(Ujr,"RealmConfig"),Ujr.forEach(t),FQe=r(BCe," (Realm model)"),BCe.forEach(t),TQe=i(L),$m=n(L,"LI",{});var ICe=s($m);_oe=n(ICe,"STRONG",{});var Jjr=s(_oe);MQe=r(Jjr,"reformer"),Jjr.forEach(t),EQe=r(ICe," \u2014 "),$k=n(ICe,"A",{href:!0});var Yjr=s($k);CQe=r(Yjr,"ReformerConfig"),Yjr.forEach(t),wQe=r(ICe," (Reformer model)"),ICe.forEach(t),AQe=i(L),km=n(L,"LI",{});var qCe=s(km);boe=n(qCe,"STRONG",{});var Kjr=s(boe);yQe=r(Kjr,"regnet"),Kjr.forEach(t),LQe=r(qCe," \u2014 "),kk=n(qCe,"A",{href:!0});var Zjr=s(kk);xQe=r(Zjr,"RegNetConfig"),Zjr.forEach(t),$Qe=r(qCe," (RegNet model)"),qCe.forEach(t),kQe=i(L),Sm=n(L,"LI",{});var NCe=s(Sm);voe=n(NCe,"STRONG",{});var eDr=s(voe);SQe=r(eDr,"rembert"),eDr.forEach(t),RQe=r(NCe," \u2014 "),Sk=n(NCe,"A",{href:!0});var oDr=s(Sk);PQe=r(oDr,"RemBertConfig"),oDr.forEach(t),BQe=r(NCe," (RemBERT model)"),NCe.forEach(t),IQe=i(L),Rm=n(L,"LI",{});var jCe=s(Rm);Foe=n(jCe,"STRONG",{});var rDr=s(Foe);qQe=r(rDr,"resnet"),rDr.forEach(t),NQe=r(jCe," \u2014 "),Rk=n(jCe,"A",{href:!0});var tDr=s(Rk);jQe=r(tDr,"ResNetConfig"),tDr.forEach(t),DQe=r(jCe," (ResNet model)"),jCe.forEach(t),GQe=i(L),Pm=n(L,"LI",{});var DCe=s(Pm);Toe=n(DCe,"STRONG",{});var aDr=s(Toe);OQe=r(aDr,"retribert"),aDr.forEach(t),VQe=r(DCe," \u2014 "),Pk=n(DCe,"A",{href:!0});var nDr=s(Pk);XQe=r(nDr,"RetriBertConfig"),nDr.forEach(t),zQe=r(DCe," (RetriBERT model)"),DCe.forEach(t),QQe=i(L),Bm=n(L,"LI",{});var GCe=s(Bm);Moe=n(GCe,"STRONG",{});var sDr=s(Moe);WQe=r(sDr,"roberta"),sDr.forEach(t),HQe=r(GCe," \u2014 "),Bk=n(GCe,"A",{href:!0});var lDr=s(Bk);UQe=r(lDr,"RobertaConfig"),lDr.forEach(t),JQe=r(GCe," (RoBERTa model)"),GCe.forEach(t),YQe=i(L),Im=n(L,"LI",{});var OCe=s(Im);Eoe=n(OCe,"STRONG",{});var iDr=s(Eoe);KQe=r(iDr,"roformer"),iDr.forEach(t),ZQe=r(OCe," \u2014 "),Ik=n(OCe,"A",{href:!0});var dDr=s(Ik);eWe=r(dDr,"RoFormerConfig"),dDr.forEach(t),oWe=r(OCe," (RoFormer model)"),OCe.forEach(t),rWe=i(L),qm=n(L,"LI",{});var VCe=s(qm);Coe=n(VCe,"STRONG",{});var cDr=s(Coe);tWe=r(cDr,"segformer"),cDr.forEach(t),aWe=r(VCe," \u2014 "),qk=n(VCe,"A",{href:!0});var fDr=s(qk);nWe=r(fDr,"SegformerConfig"),fDr.forEach(t),sWe=r(VCe," (SegFormer model)"),VCe.forEach(t),lWe=i(L),Nm=n(L,"LI",{});var XCe=s(Nm);woe=n(XCe,"STRONG",{});var mDr=s(woe);iWe=r(mDr,"sew"),mDr.forEach(t),dWe=r(XCe," \u2014 "),Nk=n(XCe,"A",{href:!0});var gDr=s(Nk);cWe=r(gDr,"SEWConfig"),gDr.forEach(t),fWe=r(XCe," (SEW model)"),XCe.forEach(t),mWe=i(L),jm=n(L,"LI",{});var zCe=s(jm);Aoe=n(zCe,"STRONG",{});var hDr=s(Aoe);gWe=r(hDr,"sew-d"),hDr.forEach(t),hWe=r(zCe," \u2014 "),jk=n(zCe,"A",{href:!0});var pDr=s(jk);pWe=r(pDr,"SEWDConfig"),pDr.forEach(t),uWe=r(zCe," (SEW-D model)"),zCe.forEach(t),_We=i(L),Dm=n(L,"LI",{});var QCe=s(Dm);yoe=n(QCe,"STRONG",{});var uDr=s(yoe);bWe=r(uDr,"speech-encoder-decoder"),uDr.forEach(t),vWe=r(QCe," \u2014 "),Dk=n(QCe,"A",{href:!0});var _Dr=s(Dk);FWe=r(_Dr,"SpeechEncoderDecoderConfig"),_Dr.forEach(t),TWe=r(QCe," (Speech Encoder decoder model)"),QCe.forEach(t),MWe=i(L),Gm=n(L,"LI",{});var WCe=s(Gm);Loe=n(WCe,"STRONG",{});var bDr=s(Loe);EWe=r(bDr,"speech_to_text"),bDr.forEach(t),CWe=r(WCe," \u2014 "),Gk=n(WCe,"A",{href:!0});var vDr=s(Gk);wWe=r(vDr,"Speech2TextConfig"),vDr.forEach(t),AWe=r(WCe," (Speech2Text model)"),WCe.forEach(t),yWe=i(L),Om=n(L,"LI",{});var HCe=s(Om);xoe=n(HCe,"STRONG",{});var FDr=s(xoe);LWe=r(FDr,"speech_to_text_2"),FDr.forEach(t),xWe=r(HCe," \u2014 "),Ok=n(HCe,"A",{href:!0});var TDr=s(Ok);$We=r(TDr,"Speech2Text2Config"),TDr.forEach(t),kWe=r(HCe," (Speech2Text2 model)"),HCe.forEach(t),SWe=i(L),Vm=n(L,"LI",{});var UCe=s(Vm);$oe=n(UCe,"STRONG",{});var MDr=s($oe);RWe=r(MDr,"splinter"),MDr.forEach(t),PWe=r(UCe," \u2014 "),Vk=n(UCe,"A",{href:!0});var EDr=s(Vk);BWe=r(EDr,"SplinterConfig"),EDr.forEach(t),IWe=r(UCe," (Splinter model)"),UCe.forEach(t),qWe=i(L),Xm=n(L,"LI",{});var JCe=s(Xm);koe=n(JCe,"STRONG",{});var CDr=s(koe);NWe=r(CDr,"squeezebert"),CDr.forEach(t),jWe=r(JCe," \u2014 "),Xk=n(JCe,"A",{href:!0});var wDr=s(Xk);DWe=r(wDr,"SqueezeBertConfig"),wDr.forEach(t),GWe=r(JCe," (SqueezeBERT model)"),JCe.forEach(t),OWe=i(L),zm=n(L,"LI",{});var YCe=s(zm);Soe=n(YCe,"STRONG",{});var ADr=s(Soe);VWe=r(ADr,"swin"),ADr.forEach(t),XWe=r(YCe," \u2014 "),zk=n(YCe,"A",{href:!0});var yDr=s(zk);zWe=r(yDr,"SwinConfig"),yDr.forEach(t),QWe=r(YCe," (Swin model)"),YCe.forEach(t),WWe=i(L),Qm=n(L,"LI",{});var KCe=s(Qm);Roe=n(KCe,"STRONG",{});var LDr=s(Roe);HWe=r(LDr,"t5"),LDr.forEach(t),UWe=r(KCe," \u2014 "),Qk=n(KCe,"A",{href:!0});var xDr=s(Qk);JWe=r(xDr,"T5Config"),xDr.forEach(t),YWe=r(KCe," (T5 model)"),KCe.forEach(t),KWe=i(L),Wm=n(L,"LI",{});var ZCe=s(Wm);Poe=n(ZCe,"STRONG",{});var $Dr=s(Poe);ZWe=r($Dr,"tapas"),$Dr.forEach(t),eHe=r(ZCe," \u2014 "),Wk=n(ZCe,"A",{href:!0});var kDr=s(Wk);oHe=r(kDr,"TapasConfig"),kDr.forEach(t),rHe=r(ZCe," (TAPAS model)"),ZCe.forEach(t),tHe=i(L),Hm=n(L,"LI",{});var e3e=s(Hm);Boe=n(e3e,"STRONG",{});var SDr=s(Boe);aHe=r(SDr,"transfo-xl"),SDr.forEach(t),nHe=r(e3e," \u2014 "),Hk=n(e3e,"A",{href:!0});var RDr=s(Hk);sHe=r(RDr,"TransfoXLConfig"),RDr.forEach(t),lHe=r(e3e," (Transformer-XL model)"),e3e.forEach(t),iHe=i(L),Um=n(L,"LI",{});var o3e=s(Um);Ioe=n(o3e,"STRONG",{});var PDr=s(Ioe);dHe=r(PDr,"trocr"),PDr.forEach(t),cHe=r(o3e," \u2014 "),Uk=n(o3e,"A",{href:!0});var BDr=s(Uk);fHe=r(BDr,"TrOCRConfig"),BDr.forEach(t),mHe=r(o3e," (TrOCR model)"),o3e.forEach(t),gHe=i(L),Jm=n(L,"LI",{});var r3e=s(Jm);qoe=n(r3e,"STRONG",{});var IDr=s(qoe);hHe=r(IDr,"unispeech"),IDr.forEach(t),pHe=r(r3e," \u2014 "),Jk=n(r3e,"A",{href:!0});var qDr=s(Jk);uHe=r(qDr,"UniSpeechConfig"),qDr.forEach(t),_He=r(r3e," (UniSpeech model)"),r3e.forEach(t),bHe=i(L),Ym=n(L,"LI",{});var t3e=s(Ym);Noe=n(t3e,"STRONG",{});var NDr=s(Noe);vHe=r(NDr,"unispeech-sat"),NDr.forEach(t),FHe=r(t3e," \u2014 "),Yk=n(t3e,"A",{href:!0});var jDr=s(Yk);THe=r(jDr,"UniSpeechSatConfig"),jDr.forEach(t),MHe=r(t3e," (UniSpeechSat model)"),t3e.forEach(t),EHe=i(L),Km=n(L,"LI",{});var a3e=s(Km);joe=n(a3e,"STRONG",{});var DDr=s(joe);CHe=r(DDr,"van"),DDr.forEach(t),wHe=r(a3e," \u2014 "),Kk=n(a3e,"A",{href:!0});var GDr=s(Kk);AHe=r(GDr,"VanConfig"),GDr.forEach(t),yHe=r(a3e," (VAN model)"),a3e.forEach(t),LHe=i(L),Zm=n(L,"LI",{});var n3e=s(Zm);Doe=n(n3e,"STRONG",{});var ODr=s(Doe);xHe=r(ODr,"vilt"),ODr.forEach(t),$He=r(n3e," \u2014 "),Zk=n(n3e,"A",{href:!0});var VDr=s(Zk);kHe=r(VDr,"ViltConfig"),VDr.forEach(t),SHe=r(n3e," (ViLT model)"),n3e.forEach(t),RHe=i(L),eg=n(L,"LI",{});var s3e=s(eg);Goe=n(s3e,"STRONG",{});var XDr=s(Goe);PHe=r(XDr,"vision-encoder-decoder"),XDr.forEach(t),BHe=r(s3e," \u2014 "),eS=n(s3e,"A",{href:!0});var zDr=s(eS);IHe=r(zDr,"VisionEncoderDecoderConfig"),zDr.forEach(t),qHe=r(s3e," (Vision Encoder decoder model)"),s3e.forEach(t),NHe=i(L),og=n(L,"LI",{});var l3e=s(og);Ooe=n(l3e,"STRONG",{});var QDr=s(Ooe);jHe=r(QDr,"vision-text-dual-encoder"),QDr.forEach(t),DHe=r(l3e," \u2014 "),oS=n(l3e,"A",{href:!0});var WDr=s(oS);GHe=r(WDr,"VisionTextDualEncoderConfig"),WDr.forEach(t),OHe=r(l3e," (VisionTextDualEncoder model)"),l3e.forEach(t),VHe=i(L),rg=n(L,"LI",{});var i3e=s(rg);Voe=n(i3e,"STRONG",{});var HDr=s(Voe);XHe=r(HDr,"visual_bert"),HDr.forEach(t),zHe=r(i3e," \u2014 "),rS=n(i3e,"A",{href:!0});var UDr=s(rS);QHe=r(UDr,"VisualBertConfig"),UDr.forEach(t),WHe=r(i3e," (VisualBert model)"),i3e.forEach(t),HHe=i(L),tg=n(L,"LI",{});var d3e=s(tg);Xoe=n(d3e,"STRONG",{});var JDr=s(Xoe);UHe=r(JDr,"vit"),JDr.forEach(t),JHe=r(d3e," \u2014 "),tS=n(d3e,"A",{href:!0});var YDr=s(tS);YHe=r(YDr,"ViTConfig"),YDr.forEach(t),KHe=r(d3e," (ViT model)"),d3e.forEach(t),ZHe=i(L),ag=n(L,"LI",{});var c3e=s(ag);zoe=n(c3e,"STRONG",{});var KDr=s(zoe);eUe=r(KDr,"vit_mae"),KDr.forEach(t),oUe=r(c3e," \u2014 "),aS=n(c3e,"A",{href:!0});var ZDr=s(aS);rUe=r(ZDr,"ViTMAEConfig"),ZDr.forEach(t),tUe=r(c3e," (ViTMAE model)"),c3e.forEach(t),aUe=i(L),ng=n(L,"LI",{});var f3e=s(ng);Qoe=n(f3e,"STRONG",{});var eGr=s(Qoe);nUe=r(eGr,"wav2vec2"),eGr.forEach(t),sUe=r(f3e," \u2014 "),nS=n(f3e,"A",{href:!0});var oGr=s(nS);lUe=r(oGr,"Wav2Vec2Config"),oGr.forEach(t),iUe=r(f3e," (Wav2Vec2 model)"),f3e.forEach(t),dUe=i(L),sg=n(L,"LI",{});var m3e=s(sg);Woe=n(m3e,"STRONG",{});var rGr=s(Woe);cUe=r(rGr,"wavlm"),rGr.forEach(t),fUe=r(m3e," \u2014 "),sS=n(m3e,"A",{href:!0});var tGr=s(sS);mUe=r(tGr,"WavLMConfig"),tGr.forEach(t),gUe=r(m3e," (WavLM model)"),m3e.forEach(t),hUe=i(L),lg=n(L,"LI",{});var g3e=s(lg);Hoe=n(g3e,"STRONG",{});var aGr=s(Hoe);pUe=r(aGr,"xglm"),aGr.forEach(t),uUe=r(g3e," \u2014 "),lS=n(g3e,"A",{href:!0});var nGr=s(lS);_Ue=r(nGr,"XGLMConfig"),nGr.forEach(t),bUe=r(g3e," (XGLM model)"),g3e.forEach(t),vUe=i(L),ig=n(L,"LI",{});var h3e=s(ig);Uoe=n(h3e,"STRONG",{});var sGr=s(Uoe);FUe=r(sGr,"xlm"),sGr.forEach(t),TUe=r(h3e," \u2014 "),iS=n(h3e,"A",{href:!0});var lGr=s(iS);MUe=r(lGr,"XLMConfig"),lGr.forEach(t),EUe=r(h3e," (XLM model)"),h3e.forEach(t),CUe=i(L),dg=n(L,"LI",{});var p3e=s(dg);Joe=n(p3e,"STRONG",{});var iGr=s(Joe);wUe=r(iGr,"xlm-prophetnet"),iGr.forEach(t),AUe=r(p3e," \u2014 "),dS=n(p3e,"A",{href:!0});var dGr=s(dS);yUe=r(dGr,"XLMProphetNetConfig"),dGr.forEach(t),LUe=r(p3e," (XLMProphetNet model)"),p3e.forEach(t),xUe=i(L),cg=n(L,"LI",{});var u3e=s(cg);Yoe=n(u3e,"STRONG",{});var cGr=s(Yoe);$Ue=r(cGr,"xlm-roberta"),cGr.forEach(t),kUe=r(u3e," \u2014 "),cS=n(u3e,"A",{href:!0});var fGr=s(cS);SUe=r(fGr,"XLMRobertaConfig"),fGr.forEach(t),RUe=r(u3e," (XLM-RoBERTa model)"),u3e.forEach(t),PUe=i(L),fg=n(L,"LI",{});var _3e=s(fg);Koe=n(_3e,"STRONG",{});var mGr=s(Koe);BUe=r(mGr,"xlm-roberta-xl"),mGr.forEach(t),IUe=r(_3e," \u2014 "),fS=n(_3e,"A",{href:!0});var gGr=s(fS);qUe=r(gGr,"XLMRobertaXLConfig"),gGr.forEach(t),NUe=r(_3e," (XLM-RoBERTa-XL model)"),_3e.forEach(t),jUe=i(L),mg=n(L,"LI",{});var b3e=s(mg);Zoe=n(b3e,"STRONG",{});var hGr=s(Zoe);DUe=r(hGr,"xlnet"),hGr.forEach(t),GUe=r(b3e," \u2014 "),mS=n(b3e,"A",{href:!0});var pGr=s(mS);OUe=r(pGr,"XLNetConfig"),pGr.forEach(t),VUe=r(b3e," (XLNet model)"),b3e.forEach(t),XUe=i(L),gg=n(L,"LI",{});var v3e=s(gg);ere=n(v3e,"STRONG",{});var uGr=s(ere);zUe=r(uGr,"yolos"),uGr.forEach(t),QUe=r(v3e," \u2014 "),gS=n(v3e,"A",{href:!0});var _Gr=s(gS);WUe=r(_Gr,"YolosConfig"),_Gr.forEach(t),HUe=r(v3e," (YOLOS model)"),v3e.forEach(t),UUe=i(L),hg=n(L,"LI",{});var F3e=s(hg);ore=n(F3e,"STRONG",{});var bGr=s(ore);JUe=r(bGr,"yoso"),bGr.forEach(t),YUe=r(F3e," \u2014 "),hS=n(F3e,"A",{href:!0});var vGr=s(hS);KUe=r(vGr,"YosoConfig"),vGr.forEach(t),ZUe=r(F3e," (YOSO model)"),F3e.forEach(t),L.forEach(t),eJe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),oJe=i(Kr),ug=n(Kr,"DIV",{class:!0});var jqe=s(ug);T(r6.$$.fragment,jqe),rJe=i(jqe),rre=n(jqe,"P",{});var FGr=s(rre);tJe=r(FGr,"Register a new configuration for this class."),FGr.forEach(t),jqe.forEach(t),Kr.forEach(t),OBe=i(f),_i=n(f,"H2",{class:!0});var Dqe=s(_i);_g=n(Dqe,"A",{id:!0,class:!0,href:!0});var TGr=s(_g);tre=n(TGr,"SPAN",{});var MGr=s(tre);T(t6.$$.fragment,MGr),MGr.forEach(t),TGr.forEach(t),aJe=i(Dqe),are=n(Dqe,"SPAN",{});var EGr=s(are);nJe=r(EGr,"AutoTokenizer"),EGr.forEach(t),Dqe.forEach(t),VBe=i(f),wo=n(f,"DIV",{class:!0});var Bs=s(wo);T(a6.$$.fragment,Bs),sJe=i(Bs),n6=n(Bs,"P",{});var Gqe=s(n6);lJe=r(Gqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pS=n(Gqe,"A",{href:!0});var CGr=s(pS);iJe=r(CGr,"AutoTokenizer.from_pretrained()"),CGr.forEach(t),dJe=r(Gqe," class method."),Gqe.forEach(t),cJe=i(Bs),s6=n(Bs,"P",{});var Oqe=s(s6);fJe=r(Oqe,"This class cannot be instantiated directly using "),nre=n(Oqe,"CODE",{});var wGr=s(nre);mJe=r(wGr,"__init__()"),wGr.forEach(t),gJe=r(Oqe," (throws an error)."),Oqe.forEach(t),hJe=i(Bs),Cr=n(Bs,"DIV",{class:!0});var Is=s(Cr);T(l6.$$.fragment,Is),pJe=i(Is),sre=n(Is,"P",{});var AGr=s(sre);uJe=r(AGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),AGr.forEach(t),_Je=i(Is),Ca=n(Is,"P",{});var Jw=s(Ca);bJe=r(Jw,"The tokenizer class to instantiate is selected based on the "),lre=n(Jw,"CODE",{});var yGr=s(lre);vJe=r(yGr,"model_type"),yGr.forEach(t),FJe=r(Jw,` property of the config object (either
passed as an argument or loaded from `),ire=n(Jw,"CODE",{});var LGr=s(ire);TJe=r(LGr,"pretrained_model_name_or_path"),LGr.forEach(t),MJe=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dre=n(Jw,"CODE",{});var xGr=s(dre);EJe=r(xGr,"pretrained_model_name_or_path"),xGr.forEach(t),CJe=r(Jw,":"),Jw.forEach(t),wJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var i9=s(kn);cre=n(i9,"STRONG",{});var $Gr=s(cre);AJe=r($Gr,"albert"),$Gr.forEach(t),yJe=r(i9," \u2014 "),uS=n(i9,"A",{href:!0});var kGr=s(uS);LJe=r(kGr,"AlbertTokenizer"),kGr.forEach(t),xJe=r(i9," or "),_S=n(i9,"A",{href:!0});var SGr=s(_S);$Je=r(SGr,"AlbertTokenizerFast"),SGr.forEach(t),kJe=r(i9," (ALBERT model)"),i9.forEach(t),SJe=i(S),Sn=n(S,"LI",{});var d9=s(Sn);fre=n(d9,"STRONG",{});var RGr=s(fre);RJe=r(RGr,"bart"),RGr.forEach(t),PJe=r(d9," \u2014 "),bS=n(d9,"A",{href:!0});var PGr=s(bS);BJe=r(PGr,"BartTokenizer"),PGr.forEach(t),IJe=r(d9," or "),vS=n(d9,"A",{href:!0});var BGr=s(vS);qJe=r(BGr,"BartTokenizerFast"),BGr.forEach(t),NJe=r(d9," (BART model)"),d9.forEach(t),jJe=i(S),Rn=n(S,"LI",{});var c9=s(Rn);mre=n(c9,"STRONG",{});var IGr=s(mre);DJe=r(IGr,"barthez"),IGr.forEach(t),GJe=r(c9," \u2014 "),FS=n(c9,"A",{href:!0});var qGr=s(FS);OJe=r(qGr,"BarthezTokenizer"),qGr.forEach(t),VJe=r(c9," or "),TS=n(c9,"A",{href:!0});var NGr=s(TS);XJe=r(NGr,"BarthezTokenizerFast"),NGr.forEach(t),zJe=r(c9," (BARThez model)"),c9.forEach(t),QJe=i(S),bg=n(S,"LI",{});var T3e=s(bg);gre=n(T3e,"STRONG",{});var jGr=s(gre);WJe=r(jGr,"bartpho"),jGr.forEach(t),HJe=r(T3e," \u2014 "),MS=n(T3e,"A",{href:!0});var DGr=s(MS);UJe=r(DGr,"BartphoTokenizer"),DGr.forEach(t),JJe=r(T3e," (BARTpho model)"),T3e.forEach(t),YJe=i(S),Pn=n(S,"LI",{});var f9=s(Pn);hre=n(f9,"STRONG",{});var GGr=s(hre);KJe=r(GGr,"bert"),GGr.forEach(t),ZJe=r(f9," \u2014 "),ES=n(f9,"A",{href:!0});var OGr=s(ES);eYe=r(OGr,"BertTokenizer"),OGr.forEach(t),oYe=r(f9," or "),CS=n(f9,"A",{href:!0});var VGr=s(CS);rYe=r(VGr,"BertTokenizerFast"),VGr.forEach(t),tYe=r(f9," (BERT model)"),f9.forEach(t),aYe=i(S),vg=n(S,"LI",{});var M3e=s(vg);pre=n(M3e,"STRONG",{});var XGr=s(pre);nYe=r(XGr,"bert-generation"),XGr.forEach(t),sYe=r(M3e," \u2014 "),wS=n(M3e,"A",{href:!0});var zGr=s(wS);lYe=r(zGr,"BertGenerationTokenizer"),zGr.forEach(t),iYe=r(M3e," (Bert Generation model)"),M3e.forEach(t),dYe=i(S),Fg=n(S,"LI",{});var E3e=s(Fg);ure=n(E3e,"STRONG",{});var QGr=s(ure);cYe=r(QGr,"bert-japanese"),QGr.forEach(t),fYe=r(E3e," \u2014 "),AS=n(E3e,"A",{href:!0});var WGr=s(AS);mYe=r(WGr,"BertJapaneseTokenizer"),WGr.forEach(t),gYe=r(E3e," (BertJapanese model)"),E3e.forEach(t),hYe=i(S),Tg=n(S,"LI",{});var C3e=s(Tg);_re=n(C3e,"STRONG",{});var HGr=s(_re);pYe=r(HGr,"bertweet"),HGr.forEach(t),uYe=r(C3e," \u2014 "),yS=n(C3e,"A",{href:!0});var UGr=s(yS);_Ye=r(UGr,"BertweetTokenizer"),UGr.forEach(t),bYe=r(C3e," (Bertweet model)"),C3e.forEach(t),vYe=i(S),Bn=n(S,"LI",{});var m9=s(Bn);bre=n(m9,"STRONG",{});var JGr=s(bre);FYe=r(JGr,"big_bird"),JGr.forEach(t),TYe=r(m9," \u2014 "),LS=n(m9,"A",{href:!0});var YGr=s(LS);MYe=r(YGr,"BigBirdTokenizer"),YGr.forEach(t),EYe=r(m9," or "),xS=n(m9,"A",{href:!0});var KGr=s(xS);CYe=r(KGr,"BigBirdTokenizerFast"),KGr.forEach(t),wYe=r(m9," (BigBird model)"),m9.forEach(t),AYe=i(S),In=n(S,"LI",{});var g9=s(In);vre=n(g9,"STRONG",{});var ZGr=s(vre);yYe=r(ZGr,"bigbird_pegasus"),ZGr.forEach(t),LYe=r(g9," \u2014 "),$S=n(g9,"A",{href:!0});var eOr=s($S);xYe=r(eOr,"PegasusTokenizer"),eOr.forEach(t),$Ye=r(g9," or "),kS=n(g9,"A",{href:!0});var oOr=s(kS);kYe=r(oOr,"PegasusTokenizerFast"),oOr.forEach(t),SYe=r(g9," (BigBirdPegasus model)"),g9.forEach(t),RYe=i(S),qn=n(S,"LI",{});var h9=s(qn);Fre=n(h9,"STRONG",{});var rOr=s(Fre);PYe=r(rOr,"blenderbot"),rOr.forEach(t),BYe=r(h9," \u2014 "),SS=n(h9,"A",{href:!0});var tOr=s(SS);IYe=r(tOr,"BlenderbotTokenizer"),tOr.forEach(t),qYe=r(h9," or "),RS=n(h9,"A",{href:!0});var aOr=s(RS);NYe=r(aOr,"BlenderbotTokenizerFast"),aOr.forEach(t),jYe=r(h9," (Blenderbot model)"),h9.forEach(t),DYe=i(S),Mg=n(S,"LI",{});var w3e=s(Mg);Tre=n(w3e,"STRONG",{});var nOr=s(Tre);GYe=r(nOr,"blenderbot-small"),nOr.forEach(t),OYe=r(w3e," \u2014 "),PS=n(w3e,"A",{href:!0});var sOr=s(PS);VYe=r(sOr,"BlenderbotSmallTokenizer"),sOr.forEach(t),XYe=r(w3e," (BlenderbotSmall model)"),w3e.forEach(t),zYe=i(S),Eg=n(S,"LI",{});var A3e=s(Eg);Mre=n(A3e,"STRONG",{});var lOr=s(Mre);QYe=r(lOr,"byt5"),lOr.forEach(t),WYe=r(A3e," \u2014 "),BS=n(A3e,"A",{href:!0});var iOr=s(BS);HYe=r(iOr,"ByT5Tokenizer"),iOr.forEach(t),UYe=r(A3e," (ByT5 model)"),A3e.forEach(t),JYe=i(S),Nn=n(S,"LI",{});var p9=s(Nn);Ere=n(p9,"STRONG",{});var dOr=s(Ere);YYe=r(dOr,"camembert"),dOr.forEach(t),KYe=r(p9," \u2014 "),IS=n(p9,"A",{href:!0});var cOr=s(IS);ZYe=r(cOr,"CamembertTokenizer"),cOr.forEach(t),eKe=r(p9," or "),qS=n(p9,"A",{href:!0});var fOr=s(qS);oKe=r(fOr,"CamembertTokenizerFast"),fOr.forEach(t),rKe=r(p9," (CamemBERT model)"),p9.forEach(t),tKe=i(S),Cg=n(S,"LI",{});var y3e=s(Cg);Cre=n(y3e,"STRONG",{});var mOr=s(Cre);aKe=r(mOr,"canine"),mOr.forEach(t),nKe=r(y3e," \u2014 "),NS=n(y3e,"A",{href:!0});var gOr=s(NS);sKe=r(gOr,"CanineTokenizer"),gOr.forEach(t),lKe=r(y3e," (Canine model)"),y3e.forEach(t),iKe=i(S),jn=n(S,"LI",{});var u9=s(jn);wre=n(u9,"STRONG",{});var hOr=s(wre);dKe=r(hOr,"clip"),hOr.forEach(t),cKe=r(u9," \u2014 "),jS=n(u9,"A",{href:!0});var pOr=s(jS);fKe=r(pOr,"CLIPTokenizer"),pOr.forEach(t),mKe=r(u9," or "),DS=n(u9,"A",{href:!0});var uOr=s(DS);gKe=r(uOr,"CLIPTokenizerFast"),uOr.forEach(t),hKe=r(u9," (CLIP model)"),u9.forEach(t),pKe=i(S),Dn=n(S,"LI",{});var _9=s(Dn);Are=n(_9,"STRONG",{});var _Or=s(Are);uKe=r(_Or,"convbert"),_Or.forEach(t),_Ke=r(_9," \u2014 "),GS=n(_9,"A",{href:!0});var bOr=s(GS);bKe=r(bOr,"ConvBertTokenizer"),bOr.forEach(t),vKe=r(_9," or "),OS=n(_9,"A",{href:!0});var vOr=s(OS);FKe=r(vOr,"ConvBertTokenizerFast"),vOr.forEach(t),TKe=r(_9," (ConvBERT model)"),_9.forEach(t),MKe=i(S),Gn=n(S,"LI",{});var b9=s(Gn);yre=n(b9,"STRONG",{});var FOr=s(yre);EKe=r(FOr,"cpm"),FOr.forEach(t),CKe=r(b9," \u2014 "),VS=n(b9,"A",{href:!0});var TOr=s(VS);wKe=r(TOr,"CpmTokenizer"),TOr.forEach(t),AKe=r(b9," or "),XS=n(b9,"A",{href:!0});var MOr=s(XS);yKe=r(MOr,"CpmTokenizerFast"),MOr.forEach(t),LKe=r(b9," (CPM model)"),b9.forEach(t),xKe=i(S),wg=n(S,"LI",{});var L3e=s(wg);Lre=n(L3e,"STRONG",{});var EOr=s(Lre);$Ke=r(EOr,"ctrl"),EOr.forEach(t),kKe=r(L3e," \u2014 "),zS=n(L3e,"A",{href:!0});var COr=s(zS);SKe=r(COr,"CTRLTokenizer"),COr.forEach(t),RKe=r(L3e," (CTRL model)"),L3e.forEach(t),PKe=i(S),On=n(S,"LI",{});var v9=s(On);xre=n(v9,"STRONG",{});var wOr=s(xre);BKe=r(wOr,"data2vec-text"),wOr.forEach(t),IKe=r(v9," \u2014 "),QS=n(v9,"A",{href:!0});var AOr=s(QS);qKe=r(AOr,"RobertaTokenizer"),AOr.forEach(t),NKe=r(v9," or "),WS=n(v9,"A",{href:!0});var yOr=s(WS);jKe=r(yOr,"RobertaTokenizerFast"),yOr.forEach(t),DKe=r(v9," (Data2VecText model)"),v9.forEach(t),GKe=i(S),Vn=n(S,"LI",{});var F9=s(Vn);$re=n(F9,"STRONG",{});var LOr=s($re);OKe=r(LOr,"deberta"),LOr.forEach(t),VKe=r(F9," \u2014 "),HS=n(F9,"A",{href:!0});var xOr=s(HS);XKe=r(xOr,"DebertaTokenizer"),xOr.forEach(t),zKe=r(F9," or "),US=n(F9,"A",{href:!0});var $Or=s(US);QKe=r($Or,"DebertaTokenizerFast"),$Or.forEach(t),WKe=r(F9," (DeBERTa model)"),F9.forEach(t),HKe=i(S),Xn=n(S,"LI",{});var T9=s(Xn);kre=n(T9,"STRONG",{});var kOr=s(kre);UKe=r(kOr,"deberta-v2"),kOr.forEach(t),JKe=r(T9," \u2014 "),JS=n(T9,"A",{href:!0});var SOr=s(JS);YKe=r(SOr,"DebertaV2Tokenizer"),SOr.forEach(t),KKe=r(T9," or "),YS=n(T9,"A",{href:!0});var ROr=s(YS);ZKe=r(ROr,"DebertaV2TokenizerFast"),ROr.forEach(t),eZe=r(T9," (DeBERTa-v2 model)"),T9.forEach(t),oZe=i(S),zn=n(S,"LI",{});var M9=s(zn);Sre=n(M9,"STRONG",{});var POr=s(Sre);rZe=r(POr,"distilbert"),POr.forEach(t),tZe=r(M9," \u2014 "),KS=n(M9,"A",{href:!0});var BOr=s(KS);aZe=r(BOr,"DistilBertTokenizer"),BOr.forEach(t),nZe=r(M9," or "),ZS=n(M9,"A",{href:!0});var IOr=s(ZS);sZe=r(IOr,"DistilBertTokenizerFast"),IOr.forEach(t),lZe=r(M9," (DistilBERT model)"),M9.forEach(t),iZe=i(S),Qn=n(S,"LI",{});var E9=s(Qn);Rre=n(E9,"STRONG",{});var qOr=s(Rre);dZe=r(qOr,"dpr"),qOr.forEach(t),cZe=r(E9," \u2014 "),eR=n(E9,"A",{href:!0});var NOr=s(eR);fZe=r(NOr,"DPRQuestionEncoderTokenizer"),NOr.forEach(t),mZe=r(E9," or "),oR=n(E9,"A",{href:!0});var jOr=s(oR);gZe=r(jOr,"DPRQuestionEncoderTokenizerFast"),jOr.forEach(t),hZe=r(E9," (DPR model)"),E9.forEach(t),pZe=i(S),Wn=n(S,"LI",{});var C9=s(Wn);Pre=n(C9,"STRONG",{});var DOr=s(Pre);uZe=r(DOr,"electra"),DOr.forEach(t),_Ze=r(C9," \u2014 "),rR=n(C9,"A",{href:!0});var GOr=s(rR);bZe=r(GOr,"ElectraTokenizer"),GOr.forEach(t),vZe=r(C9," or "),tR=n(C9,"A",{href:!0});var OOr=s(tR);FZe=r(OOr,"ElectraTokenizerFast"),OOr.forEach(t),TZe=r(C9," (ELECTRA model)"),C9.forEach(t),MZe=i(S),Ag=n(S,"LI",{});var x3e=s(Ag);Bre=n(x3e,"STRONG",{});var VOr=s(Bre);EZe=r(VOr,"flaubert"),VOr.forEach(t),CZe=r(x3e," \u2014 "),aR=n(x3e,"A",{href:!0});var XOr=s(aR);wZe=r(XOr,"FlaubertTokenizer"),XOr.forEach(t),AZe=r(x3e," (FlauBERT model)"),x3e.forEach(t),yZe=i(S),Hn=n(S,"LI",{});var w9=s(Hn);Ire=n(w9,"STRONG",{});var zOr=s(Ire);LZe=r(zOr,"fnet"),zOr.forEach(t),xZe=r(w9," \u2014 "),nR=n(w9,"A",{href:!0});var QOr=s(nR);$Ze=r(QOr,"FNetTokenizer"),QOr.forEach(t),kZe=r(w9," or "),sR=n(w9,"A",{href:!0});var WOr=s(sR);SZe=r(WOr,"FNetTokenizerFast"),WOr.forEach(t),RZe=r(w9," (FNet model)"),w9.forEach(t),PZe=i(S),yg=n(S,"LI",{});var $3e=s(yg);qre=n($3e,"STRONG",{});var HOr=s(qre);BZe=r(HOr,"fsmt"),HOr.forEach(t),IZe=r($3e," \u2014 "),lR=n($3e,"A",{href:!0});var UOr=s(lR);qZe=r(UOr,"FSMTTokenizer"),UOr.forEach(t),NZe=r($3e," (FairSeq Machine-Translation model)"),$3e.forEach(t),jZe=i(S),Un=n(S,"LI",{});var A9=s(Un);Nre=n(A9,"STRONG",{});var JOr=s(Nre);DZe=r(JOr,"funnel"),JOr.forEach(t),GZe=r(A9," \u2014 "),iR=n(A9,"A",{href:!0});var YOr=s(iR);OZe=r(YOr,"FunnelTokenizer"),YOr.forEach(t),VZe=r(A9," or "),dR=n(A9,"A",{href:!0});var KOr=s(dR);XZe=r(KOr,"FunnelTokenizerFast"),KOr.forEach(t),zZe=r(A9," (Funnel Transformer model)"),A9.forEach(t),QZe=i(S),Jn=n(S,"LI",{});var y9=s(Jn);jre=n(y9,"STRONG",{});var ZOr=s(jre);WZe=r(ZOr,"gpt2"),ZOr.forEach(t),HZe=r(y9," \u2014 "),cR=n(y9,"A",{href:!0});var eVr=s(cR);UZe=r(eVr,"GPT2Tokenizer"),eVr.forEach(t),JZe=r(y9," or "),fR=n(y9,"A",{href:!0});var oVr=s(fR);YZe=r(oVr,"GPT2TokenizerFast"),oVr.forEach(t),KZe=r(y9," (OpenAI GPT-2 model)"),y9.forEach(t),ZZe=i(S),Yn=n(S,"LI",{});var L9=s(Yn);Dre=n(L9,"STRONG",{});var rVr=s(Dre);eeo=r(rVr,"gpt_neo"),rVr.forEach(t),oeo=r(L9," \u2014 "),mR=n(L9,"A",{href:!0});var tVr=s(mR);reo=r(tVr,"GPT2Tokenizer"),tVr.forEach(t),teo=r(L9," or "),gR=n(L9,"A",{href:!0});var aVr=s(gR);aeo=r(aVr,"GPT2TokenizerFast"),aVr.forEach(t),neo=r(L9," (GPT Neo model)"),L9.forEach(t),seo=i(S),Kn=n(S,"LI",{});var x9=s(Kn);Gre=n(x9,"STRONG",{});var nVr=s(Gre);leo=r(nVr,"gptj"),nVr.forEach(t),ieo=r(x9," \u2014 "),hR=n(x9,"A",{href:!0});var sVr=s(hR);deo=r(sVr,"GPT2Tokenizer"),sVr.forEach(t),ceo=r(x9," or "),pR=n(x9,"A",{href:!0});var lVr=s(pR);feo=r(lVr,"GPT2TokenizerFast"),lVr.forEach(t),meo=r(x9," (GPT-J model)"),x9.forEach(t),geo=i(S),Zn=n(S,"LI",{});var $9=s(Zn);Ore=n($9,"STRONG",{});var iVr=s(Ore);heo=r(iVr,"herbert"),iVr.forEach(t),peo=r($9," \u2014 "),uR=n($9,"A",{href:!0});var dVr=s(uR);ueo=r(dVr,"HerbertTokenizer"),dVr.forEach(t),_eo=r($9," or "),_R=n($9,"A",{href:!0});var cVr=s(_R);beo=r(cVr,"HerbertTokenizerFast"),cVr.forEach(t),veo=r($9," (HerBERT model)"),$9.forEach(t),Feo=i(S),Lg=n(S,"LI",{});var k3e=s(Lg);Vre=n(k3e,"STRONG",{});var fVr=s(Vre);Teo=r(fVr,"hubert"),fVr.forEach(t),Meo=r(k3e," \u2014 "),bR=n(k3e,"A",{href:!0});var mVr=s(bR);Eeo=r(mVr,"Wav2Vec2CTCTokenizer"),mVr.forEach(t),Ceo=r(k3e," (Hubert model)"),k3e.forEach(t),weo=i(S),es=n(S,"LI",{});var k9=s(es);Xre=n(k9,"STRONG",{});var gVr=s(Xre);Aeo=r(gVr,"ibert"),gVr.forEach(t),yeo=r(k9," \u2014 "),vR=n(k9,"A",{href:!0});var hVr=s(vR);Leo=r(hVr,"RobertaTokenizer"),hVr.forEach(t),xeo=r(k9," or "),FR=n(k9,"A",{href:!0});var pVr=s(FR);$eo=r(pVr,"RobertaTokenizerFast"),pVr.forEach(t),keo=r(k9," (I-BERT model)"),k9.forEach(t),Seo=i(S),os=n(S,"LI",{});var S9=s(os);zre=n(S9,"STRONG",{});var uVr=s(zre);Reo=r(uVr,"layoutlm"),uVr.forEach(t),Peo=r(S9," \u2014 "),TR=n(S9,"A",{href:!0});var _Vr=s(TR);Beo=r(_Vr,"LayoutLMTokenizer"),_Vr.forEach(t),Ieo=r(S9," or "),MR=n(S9,"A",{href:!0});var bVr=s(MR);qeo=r(bVr,"LayoutLMTokenizerFast"),bVr.forEach(t),Neo=r(S9," (LayoutLM model)"),S9.forEach(t),jeo=i(S),rs=n(S,"LI",{});var R9=s(rs);Qre=n(R9,"STRONG",{});var vVr=s(Qre);Deo=r(vVr,"layoutlmv2"),vVr.forEach(t),Geo=r(R9," \u2014 "),ER=n(R9,"A",{href:!0});var FVr=s(ER);Oeo=r(FVr,"LayoutLMv2Tokenizer"),FVr.forEach(t),Veo=r(R9," or "),CR=n(R9,"A",{href:!0});var TVr=s(CR);Xeo=r(TVr,"LayoutLMv2TokenizerFast"),TVr.forEach(t),zeo=r(R9," (LayoutLMv2 model)"),R9.forEach(t),Qeo=i(S),ts=n(S,"LI",{});var P9=s(ts);Wre=n(P9,"STRONG",{});var MVr=s(Wre);Weo=r(MVr,"layoutxlm"),MVr.forEach(t),Heo=r(P9," \u2014 "),wR=n(P9,"A",{href:!0});var EVr=s(wR);Ueo=r(EVr,"LayoutXLMTokenizer"),EVr.forEach(t),Jeo=r(P9," or "),AR=n(P9,"A",{href:!0});var CVr=s(AR);Yeo=r(CVr,"LayoutXLMTokenizerFast"),CVr.forEach(t),Keo=r(P9," (LayoutXLM model)"),P9.forEach(t),Zeo=i(S),as=n(S,"LI",{});var B9=s(as);Hre=n(B9,"STRONG",{});var wVr=s(Hre);eoo=r(wVr,"led"),wVr.forEach(t),ooo=r(B9," \u2014 "),yR=n(B9,"A",{href:!0});var AVr=s(yR);roo=r(AVr,"LEDTokenizer"),AVr.forEach(t),too=r(B9," or "),LR=n(B9,"A",{href:!0});var yVr=s(LR);aoo=r(yVr,"LEDTokenizerFast"),yVr.forEach(t),noo=r(B9," (LED model)"),B9.forEach(t),soo=i(S),ns=n(S,"LI",{});var I9=s(ns);Ure=n(I9,"STRONG",{});var LVr=s(Ure);loo=r(LVr,"longformer"),LVr.forEach(t),ioo=r(I9," \u2014 "),xR=n(I9,"A",{href:!0});var xVr=s(xR);doo=r(xVr,"LongformerTokenizer"),xVr.forEach(t),coo=r(I9," or "),$R=n(I9,"A",{href:!0});var $Vr=s($R);foo=r($Vr,"LongformerTokenizerFast"),$Vr.forEach(t),moo=r(I9," (Longformer model)"),I9.forEach(t),goo=i(S),xg=n(S,"LI",{});var S3e=s(xg);Jre=n(S3e,"STRONG",{});var kVr=s(Jre);hoo=r(kVr,"luke"),kVr.forEach(t),poo=r(S3e," \u2014 "),kR=n(S3e,"A",{href:!0});var SVr=s(kR);uoo=r(SVr,"LukeTokenizer"),SVr.forEach(t),_oo=r(S3e," (LUKE model)"),S3e.forEach(t),boo=i(S),ss=n(S,"LI",{});var q9=s(ss);Yre=n(q9,"STRONG",{});var RVr=s(Yre);voo=r(RVr,"lxmert"),RVr.forEach(t),Foo=r(q9," \u2014 "),SR=n(q9,"A",{href:!0});var PVr=s(SR);Too=r(PVr,"LxmertTokenizer"),PVr.forEach(t),Moo=r(q9," or "),RR=n(q9,"A",{href:!0});var BVr=s(RR);Eoo=r(BVr,"LxmertTokenizerFast"),BVr.forEach(t),Coo=r(q9," (LXMERT model)"),q9.forEach(t),woo=i(S),$g=n(S,"LI",{});var R3e=s($g);Kre=n(R3e,"STRONG",{});var IVr=s(Kre);Aoo=r(IVr,"m2m_100"),IVr.forEach(t),yoo=r(R3e," \u2014 "),PR=n(R3e,"A",{href:!0});var qVr=s(PR);Loo=r(qVr,"M2M100Tokenizer"),qVr.forEach(t),xoo=r(R3e," (M2M100 model)"),R3e.forEach(t),$oo=i(S),kg=n(S,"LI",{});var P3e=s(kg);Zre=n(P3e,"STRONG",{});var NVr=s(Zre);koo=r(NVr,"marian"),NVr.forEach(t),Soo=r(P3e," \u2014 "),BR=n(P3e,"A",{href:!0});var jVr=s(BR);Roo=r(jVr,"MarianTokenizer"),jVr.forEach(t),Poo=r(P3e," (Marian model)"),P3e.forEach(t),Boo=i(S),ls=n(S,"LI",{});var N9=s(ls);ete=n(N9,"STRONG",{});var DVr=s(ete);Ioo=r(DVr,"mbart"),DVr.forEach(t),qoo=r(N9," \u2014 "),IR=n(N9,"A",{href:!0});var GVr=s(IR);Noo=r(GVr,"MBartTokenizer"),GVr.forEach(t),joo=r(N9," or "),qR=n(N9,"A",{href:!0});var OVr=s(qR);Doo=r(OVr,"MBartTokenizerFast"),OVr.forEach(t),Goo=r(N9," (mBART model)"),N9.forEach(t),Ooo=i(S),is=n(S,"LI",{});var j9=s(is);ote=n(j9,"STRONG",{});var VVr=s(ote);Voo=r(VVr,"mbart50"),VVr.forEach(t),Xoo=r(j9," \u2014 "),NR=n(j9,"A",{href:!0});var XVr=s(NR);zoo=r(XVr,"MBart50Tokenizer"),XVr.forEach(t),Qoo=r(j9," or "),jR=n(j9,"A",{href:!0});var zVr=s(jR);Woo=r(zVr,"MBart50TokenizerFast"),zVr.forEach(t),Hoo=r(j9," (mBART-50 model)"),j9.forEach(t),Uoo=i(S),ds=n(S,"LI",{});var D9=s(ds);rte=n(D9,"STRONG",{});var QVr=s(rte);Joo=r(QVr,"megatron-bert"),QVr.forEach(t),Yoo=r(D9," \u2014 "),DR=n(D9,"A",{href:!0});var WVr=s(DR);Koo=r(WVr,"BertTokenizer"),WVr.forEach(t),Zoo=r(D9," or "),GR=n(D9,"A",{href:!0});var HVr=s(GR);ero=r(HVr,"BertTokenizerFast"),HVr.forEach(t),oro=r(D9," (MegatronBert model)"),D9.forEach(t),rro=i(S),Sg=n(S,"LI",{});var B3e=s(Sg);tte=n(B3e,"STRONG",{});var UVr=s(tte);tro=r(UVr,"mluke"),UVr.forEach(t),aro=r(B3e," \u2014 "),OR=n(B3e,"A",{href:!0});var JVr=s(OR);nro=r(JVr,"MLukeTokenizer"),JVr.forEach(t),sro=r(B3e," (mLUKE model)"),B3e.forEach(t),lro=i(S),cs=n(S,"LI",{});var G9=s(cs);ate=n(G9,"STRONG",{});var YVr=s(ate);iro=r(YVr,"mobilebert"),YVr.forEach(t),dro=r(G9," \u2014 "),VR=n(G9,"A",{href:!0});var KVr=s(VR);cro=r(KVr,"MobileBertTokenizer"),KVr.forEach(t),fro=r(G9," or "),XR=n(G9,"A",{href:!0});var ZVr=s(XR);mro=r(ZVr,"MobileBertTokenizerFast"),ZVr.forEach(t),gro=r(G9," (MobileBERT model)"),G9.forEach(t),hro=i(S),fs=n(S,"LI",{});var O9=s(fs);nte=n(O9,"STRONG",{});var eXr=s(nte);pro=r(eXr,"mpnet"),eXr.forEach(t),uro=r(O9," \u2014 "),zR=n(O9,"A",{href:!0});var oXr=s(zR);_ro=r(oXr,"MPNetTokenizer"),oXr.forEach(t),bro=r(O9," or "),QR=n(O9,"A",{href:!0});var rXr=s(QR);vro=r(rXr,"MPNetTokenizerFast"),rXr.forEach(t),Fro=r(O9," (MPNet model)"),O9.forEach(t),Tro=i(S),ms=n(S,"LI",{});var V9=s(ms);ste=n(V9,"STRONG",{});var tXr=s(ste);Mro=r(tXr,"mt5"),tXr.forEach(t),Ero=r(V9," \u2014 "),WR=n(V9,"A",{href:!0});var aXr=s(WR);Cro=r(aXr,"MT5Tokenizer"),aXr.forEach(t),wro=r(V9," or "),HR=n(V9,"A",{href:!0});var nXr=s(HR);Aro=r(nXr,"MT5TokenizerFast"),nXr.forEach(t),yro=r(V9," (mT5 model)"),V9.forEach(t),Lro=i(S),gs=n(S,"LI",{});var X9=s(gs);lte=n(X9,"STRONG",{});var sXr=s(lte);xro=r(sXr,"nystromformer"),sXr.forEach(t),$ro=r(X9," \u2014 "),UR=n(X9,"A",{href:!0});var lXr=s(UR);kro=r(lXr,"AlbertTokenizer"),lXr.forEach(t),Sro=r(X9," or "),JR=n(X9,"A",{href:!0});var iXr=s(JR);Rro=r(iXr,"AlbertTokenizerFast"),iXr.forEach(t),Pro=r(X9," (Nystromformer model)"),X9.forEach(t),Bro=i(S),hs=n(S,"LI",{});var z9=s(hs);ite=n(z9,"STRONG",{});var dXr=s(ite);Iro=r(dXr,"openai-gpt"),dXr.forEach(t),qro=r(z9," \u2014 "),YR=n(z9,"A",{href:!0});var cXr=s(YR);Nro=r(cXr,"OpenAIGPTTokenizer"),cXr.forEach(t),jro=r(z9," or "),KR=n(z9,"A",{href:!0});var fXr=s(KR);Dro=r(fXr,"OpenAIGPTTokenizerFast"),fXr.forEach(t),Gro=r(z9," (OpenAI GPT model)"),z9.forEach(t),Oro=i(S),Rg=n(S,"LI",{});var I3e=s(Rg);dte=n(I3e,"STRONG",{});var mXr=s(dte);Vro=r(mXr,"opt"),mXr.forEach(t),Xro=r(I3e," \u2014 "),ZR=n(I3e,"A",{href:!0});var gXr=s(ZR);zro=r(gXr,"GPT2Tokenizer"),gXr.forEach(t),Qro=r(I3e," (OPT model)"),I3e.forEach(t),Wro=i(S),ps=n(S,"LI",{});var Q9=s(ps);cte=n(Q9,"STRONG",{});var hXr=s(cte);Hro=r(hXr,"pegasus"),hXr.forEach(t),Uro=r(Q9," \u2014 "),eP=n(Q9,"A",{href:!0});var pXr=s(eP);Jro=r(pXr,"PegasusTokenizer"),pXr.forEach(t),Yro=r(Q9," or "),oP=n(Q9,"A",{href:!0});var uXr=s(oP);Kro=r(uXr,"PegasusTokenizerFast"),uXr.forEach(t),Zro=r(Q9," (Pegasus model)"),Q9.forEach(t),eto=i(S),Pg=n(S,"LI",{});var q3e=s(Pg);fte=n(q3e,"STRONG",{});var _Xr=s(fte);oto=r(_Xr,"perceiver"),_Xr.forEach(t),rto=r(q3e," \u2014 "),rP=n(q3e,"A",{href:!0});var bXr=s(rP);tto=r(bXr,"PerceiverTokenizer"),bXr.forEach(t),ato=r(q3e," (Perceiver model)"),q3e.forEach(t),nto=i(S),Bg=n(S,"LI",{});var N3e=s(Bg);mte=n(N3e,"STRONG",{});var vXr=s(mte);sto=r(vXr,"phobert"),vXr.forEach(t),lto=r(N3e," \u2014 "),tP=n(N3e,"A",{href:!0});var FXr=s(tP);ito=r(FXr,"PhobertTokenizer"),FXr.forEach(t),dto=r(N3e," (PhoBERT model)"),N3e.forEach(t),cto=i(S),Ig=n(S,"LI",{});var j3e=s(Ig);gte=n(j3e,"STRONG",{});var TXr=s(gte);fto=r(TXr,"plbart"),TXr.forEach(t),mto=r(j3e," \u2014 "),aP=n(j3e,"A",{href:!0});var MXr=s(aP);gto=r(MXr,"PLBartTokenizer"),MXr.forEach(t),hto=r(j3e," (PLBart model)"),j3e.forEach(t),pto=i(S),qg=n(S,"LI",{});var D3e=s(qg);hte=n(D3e,"STRONG",{});var EXr=s(hte);uto=r(EXr,"prophetnet"),EXr.forEach(t),_to=r(D3e," \u2014 "),nP=n(D3e,"A",{href:!0});var CXr=s(nP);bto=r(CXr,"ProphetNetTokenizer"),CXr.forEach(t),vto=r(D3e," (ProphetNet model)"),D3e.forEach(t),Fto=i(S),us=n(S,"LI",{});var W9=s(us);pte=n(W9,"STRONG",{});var wXr=s(pte);Tto=r(wXr,"qdqbert"),wXr.forEach(t),Mto=r(W9," \u2014 "),sP=n(W9,"A",{href:!0});var AXr=s(sP);Eto=r(AXr,"BertTokenizer"),AXr.forEach(t),Cto=r(W9," or "),lP=n(W9,"A",{href:!0});var yXr=s(lP);wto=r(yXr,"BertTokenizerFast"),yXr.forEach(t),Ato=r(W9," (QDQBert model)"),W9.forEach(t),yto=i(S),Ng=n(S,"LI",{});var G3e=s(Ng);ute=n(G3e,"STRONG",{});var LXr=s(ute);Lto=r(LXr,"rag"),LXr.forEach(t),xto=r(G3e," \u2014 "),iP=n(G3e,"A",{href:!0});var xXr=s(iP);$to=r(xXr,"RagTokenizer"),xXr.forEach(t),kto=r(G3e," (RAG model)"),G3e.forEach(t),Sto=i(S),_s=n(S,"LI",{});var H9=s(_s);_te=n(H9,"STRONG",{});var $Xr=s(_te);Rto=r($Xr,"realm"),$Xr.forEach(t),Pto=r(H9," \u2014 "),dP=n(H9,"A",{href:!0});var kXr=s(dP);Bto=r(kXr,"RealmTokenizer"),kXr.forEach(t),Ito=r(H9," or "),cP=n(H9,"A",{href:!0});var SXr=s(cP);qto=r(SXr,"RealmTokenizerFast"),SXr.forEach(t),Nto=r(H9," (Realm model)"),H9.forEach(t),jto=i(S),bs=n(S,"LI",{});var U9=s(bs);bte=n(U9,"STRONG",{});var RXr=s(bte);Dto=r(RXr,"reformer"),RXr.forEach(t),Gto=r(U9," \u2014 "),fP=n(U9,"A",{href:!0});var PXr=s(fP);Oto=r(PXr,"ReformerTokenizer"),PXr.forEach(t),Vto=r(U9," or "),mP=n(U9,"A",{href:!0});var BXr=s(mP);Xto=r(BXr,"ReformerTokenizerFast"),BXr.forEach(t),zto=r(U9," (Reformer model)"),U9.forEach(t),Qto=i(S),vs=n(S,"LI",{});var J9=s(vs);vte=n(J9,"STRONG",{});var IXr=s(vte);Wto=r(IXr,"rembert"),IXr.forEach(t),Hto=r(J9," \u2014 "),gP=n(J9,"A",{href:!0});var qXr=s(gP);Uto=r(qXr,"RemBertTokenizer"),qXr.forEach(t),Jto=r(J9," or "),hP=n(J9,"A",{href:!0});var NXr=s(hP);Yto=r(NXr,"RemBertTokenizerFast"),NXr.forEach(t),Kto=r(J9," (RemBERT model)"),J9.forEach(t),Zto=i(S),Fs=n(S,"LI",{});var Y9=s(Fs);Fte=n(Y9,"STRONG",{});var jXr=s(Fte);eao=r(jXr,"retribert"),jXr.forEach(t),oao=r(Y9," \u2014 "),pP=n(Y9,"A",{href:!0});var DXr=s(pP);rao=r(DXr,"RetriBertTokenizer"),DXr.forEach(t),tao=r(Y9," or "),uP=n(Y9,"A",{href:!0});var GXr=s(uP);aao=r(GXr,"RetriBertTokenizerFast"),GXr.forEach(t),nao=r(Y9," (RetriBERT model)"),Y9.forEach(t),sao=i(S),Ts=n(S,"LI",{});var K9=s(Ts);Tte=n(K9,"STRONG",{});var OXr=s(Tte);lao=r(OXr,"roberta"),OXr.forEach(t),iao=r(K9," \u2014 "),_P=n(K9,"A",{href:!0});var VXr=s(_P);dao=r(VXr,"RobertaTokenizer"),VXr.forEach(t),cao=r(K9," or "),bP=n(K9,"A",{href:!0});var XXr=s(bP);fao=r(XXr,"RobertaTokenizerFast"),XXr.forEach(t),mao=r(K9," (RoBERTa model)"),K9.forEach(t),gao=i(S),Ms=n(S,"LI",{});var Z9=s(Ms);Mte=n(Z9,"STRONG",{});var zXr=s(Mte);hao=r(zXr,"roformer"),zXr.forEach(t),pao=r(Z9," \u2014 "),vP=n(Z9,"A",{href:!0});var QXr=s(vP);uao=r(QXr,"RoFormerTokenizer"),QXr.forEach(t),_ao=r(Z9," or "),FP=n(Z9,"A",{href:!0});var WXr=s(FP);bao=r(WXr,"RoFormerTokenizerFast"),WXr.forEach(t),vao=r(Z9," (RoFormer model)"),Z9.forEach(t),Fao=i(S),jg=n(S,"LI",{});var O3e=s(jg);Ete=n(O3e,"STRONG",{});var HXr=s(Ete);Tao=r(HXr,"speech_to_text"),HXr.forEach(t),Mao=r(O3e," \u2014 "),TP=n(O3e,"A",{href:!0});var UXr=s(TP);Eao=r(UXr,"Speech2TextTokenizer"),UXr.forEach(t),Cao=r(O3e," (Speech2Text model)"),O3e.forEach(t),wao=i(S),Dg=n(S,"LI",{});var V3e=s(Dg);Cte=n(V3e,"STRONG",{});var JXr=s(Cte);Aao=r(JXr,"speech_to_text_2"),JXr.forEach(t),yao=r(V3e," \u2014 "),MP=n(V3e,"A",{href:!0});var YXr=s(MP);Lao=r(YXr,"Speech2Text2Tokenizer"),YXr.forEach(t),xao=r(V3e," (Speech2Text2 model)"),V3e.forEach(t),$ao=i(S),Es=n(S,"LI",{});var e$=s(Es);wte=n(e$,"STRONG",{});var KXr=s(wte);kao=r(KXr,"splinter"),KXr.forEach(t),Sao=r(e$," \u2014 "),EP=n(e$,"A",{href:!0});var ZXr=s(EP);Rao=r(ZXr,"SplinterTokenizer"),ZXr.forEach(t),Pao=r(e$," or "),CP=n(e$,"A",{href:!0});var ezr=s(CP);Bao=r(ezr,"SplinterTokenizerFast"),ezr.forEach(t),Iao=r(e$," (Splinter model)"),e$.forEach(t),qao=i(S),Cs=n(S,"LI",{});var o$=s(Cs);Ate=n(o$,"STRONG",{});var ozr=s(Ate);Nao=r(ozr,"squeezebert"),ozr.forEach(t),jao=r(o$," \u2014 "),wP=n(o$,"A",{href:!0});var rzr=s(wP);Dao=r(rzr,"SqueezeBertTokenizer"),rzr.forEach(t),Gao=r(o$," or "),AP=n(o$,"A",{href:!0});var tzr=s(AP);Oao=r(tzr,"SqueezeBertTokenizerFast"),tzr.forEach(t),Vao=r(o$," (SqueezeBERT model)"),o$.forEach(t),Xao=i(S),ws=n(S,"LI",{});var r$=s(ws);yte=n(r$,"STRONG",{});var azr=s(yte);zao=r(azr,"t5"),azr.forEach(t),Qao=r(r$," \u2014 "),yP=n(r$,"A",{href:!0});var nzr=s(yP);Wao=r(nzr,"T5Tokenizer"),nzr.forEach(t),Hao=r(r$," or "),LP=n(r$,"A",{href:!0});var szr=s(LP);Uao=r(szr,"T5TokenizerFast"),szr.forEach(t),Jao=r(r$," (T5 model)"),r$.forEach(t),Yao=i(S),Gg=n(S,"LI",{});var X3e=s(Gg);Lte=n(X3e,"STRONG",{});var lzr=s(Lte);Kao=r(lzr,"tapas"),lzr.forEach(t),Zao=r(X3e," \u2014 "),xP=n(X3e,"A",{href:!0});var izr=s(xP);eno=r(izr,"TapasTokenizer"),izr.forEach(t),ono=r(X3e," (TAPAS model)"),X3e.forEach(t),rno=i(S),Og=n(S,"LI",{});var z3e=s(Og);xte=n(z3e,"STRONG",{});var dzr=s(xte);tno=r(dzr,"tapex"),dzr.forEach(t),ano=r(z3e," \u2014 "),$P=n(z3e,"A",{href:!0});var czr=s($P);nno=r(czr,"TapexTokenizer"),czr.forEach(t),sno=r(z3e," (TAPEX model)"),z3e.forEach(t),lno=i(S),Vg=n(S,"LI",{});var Q3e=s(Vg);$te=n(Q3e,"STRONG",{});var fzr=s($te);ino=r(fzr,"transfo-xl"),fzr.forEach(t),dno=r(Q3e," \u2014 "),kP=n(Q3e,"A",{href:!0});var mzr=s(kP);cno=r(mzr,"TransfoXLTokenizer"),mzr.forEach(t),fno=r(Q3e," (Transformer-XL model)"),Q3e.forEach(t),mno=i(S),As=n(S,"LI",{});var t$=s(As);kte=n(t$,"STRONG",{});var gzr=s(kte);gno=r(gzr,"visual_bert"),gzr.forEach(t),hno=r(t$," \u2014 "),SP=n(t$,"A",{href:!0});var hzr=s(SP);pno=r(hzr,"BertTokenizer"),hzr.forEach(t),uno=r(t$," or "),RP=n(t$,"A",{href:!0});var pzr=s(RP);_no=r(pzr,"BertTokenizerFast"),pzr.forEach(t),bno=r(t$," (VisualBert model)"),t$.forEach(t),vno=i(S),Xg=n(S,"LI",{});var W3e=s(Xg);Ste=n(W3e,"STRONG",{});var uzr=s(Ste);Fno=r(uzr,"wav2vec2"),uzr.forEach(t),Tno=r(W3e," \u2014 "),PP=n(W3e,"A",{href:!0});var _zr=s(PP);Mno=r(_zr,"Wav2Vec2CTCTokenizer"),_zr.forEach(t),Eno=r(W3e," (Wav2Vec2 model)"),W3e.forEach(t),Cno=i(S),zg=n(S,"LI",{});var H3e=s(zg);Rte=n(H3e,"STRONG",{});var bzr=s(Rte);wno=r(bzr,"wav2vec2_phoneme"),bzr.forEach(t),Ano=r(H3e," \u2014 "),BP=n(H3e,"A",{href:!0});var vzr=s(BP);yno=r(vzr,"Wav2Vec2PhonemeCTCTokenizer"),vzr.forEach(t),Lno=r(H3e," (Wav2Vec2Phoneme model)"),H3e.forEach(t),xno=i(S),ys=n(S,"LI",{});var a$=s(ys);Pte=n(a$,"STRONG",{});var Fzr=s(Pte);$no=r(Fzr,"xglm"),Fzr.forEach(t),kno=r(a$," \u2014 "),IP=n(a$,"A",{href:!0});var Tzr=s(IP);Sno=r(Tzr,"XGLMTokenizer"),Tzr.forEach(t),Rno=r(a$," or "),qP=n(a$,"A",{href:!0});var Mzr=s(qP);Pno=r(Mzr,"XGLMTokenizerFast"),Mzr.forEach(t),Bno=r(a$," (XGLM model)"),a$.forEach(t),Ino=i(S),Qg=n(S,"LI",{});var U3e=s(Qg);Bte=n(U3e,"STRONG",{});var Ezr=s(Bte);qno=r(Ezr,"xlm"),Ezr.forEach(t),Nno=r(U3e," \u2014 "),NP=n(U3e,"A",{href:!0});var Czr=s(NP);jno=r(Czr,"XLMTokenizer"),Czr.forEach(t),Dno=r(U3e," (XLM model)"),U3e.forEach(t),Gno=i(S),Wg=n(S,"LI",{});var J3e=s(Wg);Ite=n(J3e,"STRONG",{});var wzr=s(Ite);Ono=r(wzr,"xlm-prophetnet"),wzr.forEach(t),Vno=r(J3e," \u2014 "),jP=n(J3e,"A",{href:!0});var Azr=s(jP);Xno=r(Azr,"XLMProphetNetTokenizer"),Azr.forEach(t),zno=r(J3e," (XLMProphetNet model)"),J3e.forEach(t),Qno=i(S),Ls=n(S,"LI",{});var n$=s(Ls);qte=n(n$,"STRONG",{});var yzr=s(qte);Wno=r(yzr,"xlm-roberta"),yzr.forEach(t),Hno=r(n$," \u2014 "),DP=n(n$,"A",{href:!0});var Lzr=s(DP);Uno=r(Lzr,"XLMRobertaTokenizer"),Lzr.forEach(t),Jno=r(n$," or "),GP=n(n$,"A",{href:!0});var xzr=s(GP);Yno=r(xzr,"XLMRobertaTokenizerFast"),xzr.forEach(t),Kno=r(n$," (XLM-RoBERTa model)"),n$.forEach(t),Zno=i(S),xs=n(S,"LI",{});var s$=s(xs);Nte=n(s$,"STRONG",{});var $zr=s(Nte);eso=r($zr,"xlm-roberta-xl"),$zr.forEach(t),oso=r(s$," \u2014 "),OP=n(s$,"A",{href:!0});var kzr=s(OP);rso=r(kzr,"RobertaTokenizer"),kzr.forEach(t),tso=r(s$," or "),VP=n(s$,"A",{href:!0});var Szr=s(VP);aso=r(Szr,"RobertaTokenizerFast"),Szr.forEach(t),nso=r(s$," (XLM-RoBERTa-XL model)"),s$.forEach(t),sso=i(S),$s=n(S,"LI",{});var l$=s($s);jte=n(l$,"STRONG",{});var Rzr=s(jte);lso=r(Rzr,"xlnet"),Rzr.forEach(t),iso=r(l$," \u2014 "),XP=n(l$,"A",{href:!0});var Pzr=s(XP);dso=r(Pzr,"XLNetTokenizer"),Pzr.forEach(t),cso=r(l$," or "),zP=n(l$,"A",{href:!0});var Bzr=s(zP);fso=r(Bzr,"XLNetTokenizerFast"),Bzr.forEach(t),mso=r(l$," (XLNet model)"),l$.forEach(t),gso=i(S),ks=n(S,"LI",{});var i$=s(ks);Dte=n(i$,"STRONG",{});var Izr=s(Dte);hso=r(Izr,"yoso"),Izr.forEach(t),pso=r(i$," \u2014 "),QP=n(i$,"A",{href:!0});var qzr=s(QP);uso=r(qzr,"AlbertTokenizer"),qzr.forEach(t),_so=r(i$," or "),WP=n(i$,"A",{href:!0});var Nzr=s(WP);bso=r(Nzr,"AlbertTokenizerFast"),Nzr.forEach(t),vso=r(i$," (YOSO model)"),i$.forEach(t),S.forEach(t),Fso=i(Is),T(Hg.$$.fragment,Is),Is.forEach(t),Tso=i(Bs),Ug=n(Bs,"DIV",{class:!0});var Vqe=s(Ug);T(i6.$$.fragment,Vqe),Mso=i(Vqe),Gte=n(Vqe,"P",{});var jzr=s(Gte);Eso=r(jzr,"Register a new tokenizer in this mapping."),jzr.forEach(t),Vqe.forEach(t),Bs.forEach(t),XBe=i(f),bi=n(f,"H2",{class:!0});var Xqe=s(bi);Jg=n(Xqe,"A",{id:!0,class:!0,href:!0});var Dzr=s(Jg);Ote=n(Dzr,"SPAN",{});var Gzr=s(Ote);T(d6.$$.fragment,Gzr),Gzr.forEach(t),Dzr.forEach(t),Cso=i(Xqe),Vte=n(Xqe,"SPAN",{});var Ozr=s(Vte);wso=r(Ozr,"AutoFeatureExtractor"),Ozr.forEach(t),Xqe.forEach(t),zBe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(c6.$$.fragment,qs),Aso=i(qs),f6=n(qs,"P",{});var zqe=s(f6);yso=r(zqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HP=n(zqe,"A",{href:!0});var Vzr=s(HP);Lso=r(Vzr,"AutoFeatureExtractor.from_pretrained()"),Vzr.forEach(t),xso=r(zqe," class method."),zqe.forEach(t),$so=i(qs),m6=n(qs,"P",{});var Qqe=s(m6);kso=r(Qqe,"This class cannot be instantiated directly using "),Xte=n(Qqe,"CODE",{});var Xzr=s(Xte);Sso=r(Xzr,"__init__()"),Xzr.forEach(t),Rso=r(Qqe," (throws an error)."),Qqe.forEach(t),Pso=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(g6.$$.fragment,Yt),Bso=i(Yt),zte=n(Yt,"P",{});var zzr=s(zte);Iso=r(zzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zzr.forEach(t),qso=i(Yt),wa=n(Yt,"P",{});var Yw=s(wa);Nso=r(Yw,"The feature extractor class to instantiate is selected based on the "),Qte=n(Yw,"CODE",{});var Qzr=s(Qte);jso=r(Qzr,"model_type"),Qzr.forEach(t),Dso=r(Yw,` property of the config object
(either passed as an argument or loaded from `),Wte=n(Yw,"CODE",{});var Wzr=s(Wte);Gso=r(Wzr,"pretrained_model_name_or_path"),Wzr.forEach(t),Oso=r(Yw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hte=n(Yw,"CODE",{});var Hzr=s(Hte);Vso=r(Hzr,"pretrained_model_name_or_path"),Hzr.forEach(t),Xso=r(Yw,":"),Yw.forEach(t),zso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var Y3e=s(Yg);Ute=n(Y3e,"STRONG",{});var Uzr=s(Ute);Qso=r(Uzr,"beit"),Uzr.forEach(t),Wso=r(Y3e," \u2014 "),UP=n(Y3e,"A",{href:!0});var Jzr=s(UP);Hso=r(Jzr,"BeitFeatureExtractor"),Jzr.forEach(t),Uso=r(Y3e," (BEiT model)"),Y3e.forEach(t),Jso=i(ae),Kg=n(ae,"LI",{});var K3e=s(Kg);Jte=n(K3e,"STRONG",{});var Yzr=s(Jte);Yso=r(Yzr,"clip"),Yzr.forEach(t),Kso=r(K3e," \u2014 "),JP=n(K3e,"A",{href:!0});var Kzr=s(JP);Zso=r(Kzr,"CLIPFeatureExtractor"),Kzr.forEach(t),elo=r(K3e," (CLIP model)"),K3e.forEach(t),olo=i(ae),Zg=n(ae,"LI",{});var Z3e=s(Zg);Yte=n(Z3e,"STRONG",{});var Zzr=s(Yte);rlo=r(Zzr,"convnext"),Zzr.forEach(t),tlo=r(Z3e," \u2014 "),YP=n(Z3e,"A",{href:!0});var eQr=s(YP);alo=r(eQr,"ConvNextFeatureExtractor"),eQr.forEach(t),nlo=r(Z3e," (ConvNext model)"),Z3e.forEach(t),slo=i(ae),eh=n(ae,"LI",{});var ewe=s(eh);Kte=n(ewe,"STRONG",{});var oQr=s(Kte);llo=r(oQr,"data2vec-audio"),oQr.forEach(t),ilo=r(ewe," \u2014 "),KP=n(ewe,"A",{href:!0});var rQr=s(KP);dlo=r(rQr,"Wav2Vec2FeatureExtractor"),rQr.forEach(t),clo=r(ewe," (Data2VecAudio model)"),ewe.forEach(t),flo=i(ae),oh=n(ae,"LI",{});var owe=s(oh);Zte=n(owe,"STRONG",{});var tQr=s(Zte);mlo=r(tQr,"data2vec-vision"),tQr.forEach(t),glo=r(owe," \u2014 "),ZP=n(owe,"A",{href:!0});var aQr=s(ZP);hlo=r(aQr,"BeitFeatureExtractor"),aQr.forEach(t),plo=r(owe," (Data2VecVision model)"),owe.forEach(t),ulo=i(ae),rh=n(ae,"LI",{});var rwe=s(rh);eae=n(rwe,"STRONG",{});var nQr=s(eae);_lo=r(nQr,"deit"),nQr.forEach(t),blo=r(rwe," \u2014 "),eB=n(rwe,"A",{href:!0});var sQr=s(eB);vlo=r(sQr,"DeiTFeatureExtractor"),sQr.forEach(t),Flo=r(rwe," (DeiT model)"),rwe.forEach(t),Tlo=i(ae),th=n(ae,"LI",{});var twe=s(th);oae=n(twe,"STRONG",{});var lQr=s(oae);Mlo=r(lQr,"detr"),lQr.forEach(t),Elo=r(twe," \u2014 "),oB=n(twe,"A",{href:!0});var iQr=s(oB);Clo=r(iQr,"DetrFeatureExtractor"),iQr.forEach(t),wlo=r(twe," (DETR model)"),twe.forEach(t),Alo=i(ae),ah=n(ae,"LI",{});var awe=s(ah);rae=n(awe,"STRONG",{});var dQr=s(rae);ylo=r(dQr,"dpt"),dQr.forEach(t),Llo=r(awe," \u2014 "),rB=n(awe,"A",{href:!0});var cQr=s(rB);xlo=r(cQr,"DPTFeatureExtractor"),cQr.forEach(t),$lo=r(awe," (DPT model)"),awe.forEach(t),klo=i(ae),nh=n(ae,"LI",{});var nwe=s(nh);tae=n(nwe,"STRONG",{});var fQr=s(tae);Slo=r(fQr,"flava"),fQr.forEach(t),Rlo=r(nwe," \u2014 "),tB=n(nwe,"A",{href:!0});var mQr=s(tB);Plo=r(mQr,"FlavaFeatureExtractor"),mQr.forEach(t),Blo=r(nwe," (Flava model)"),nwe.forEach(t),Ilo=i(ae),sh=n(ae,"LI",{});var swe=s(sh);aae=n(swe,"STRONG",{});var gQr=s(aae);qlo=r(gQr,"glpn"),gQr.forEach(t),Nlo=r(swe," \u2014 "),aB=n(swe,"A",{href:!0});var hQr=s(aB);jlo=r(hQr,"GLPNFeatureExtractor"),hQr.forEach(t),Dlo=r(swe," (GLPN model)"),swe.forEach(t),Glo=i(ae),lh=n(ae,"LI",{});var lwe=s(lh);nae=n(lwe,"STRONG",{});var pQr=s(nae);Olo=r(pQr,"hubert"),pQr.forEach(t),Vlo=r(lwe," \u2014 "),nB=n(lwe,"A",{href:!0});var uQr=s(nB);Xlo=r(uQr,"Wav2Vec2FeatureExtractor"),uQr.forEach(t),zlo=r(lwe," (Hubert model)"),lwe.forEach(t),Qlo=i(ae),ih=n(ae,"LI",{});var iwe=s(ih);sae=n(iwe,"STRONG",{});var _Qr=s(sae);Wlo=r(_Qr,"layoutlmv2"),_Qr.forEach(t),Hlo=r(iwe," \u2014 "),sB=n(iwe,"A",{href:!0});var bQr=s(sB);Ulo=r(bQr,"LayoutLMv2FeatureExtractor"),bQr.forEach(t),Jlo=r(iwe," (LayoutLMv2 model)"),iwe.forEach(t),Ylo=i(ae),dh=n(ae,"LI",{});var dwe=s(dh);lae=n(dwe,"STRONG",{});var vQr=s(lae);Klo=r(vQr,"maskformer"),vQr.forEach(t),Zlo=r(dwe," \u2014 "),lB=n(dwe,"A",{href:!0});var FQr=s(lB);eio=r(FQr,"MaskFormerFeatureExtractor"),FQr.forEach(t),oio=r(dwe," (MaskFormer model)"),dwe.forEach(t),rio=i(ae),ch=n(ae,"LI",{});var cwe=s(ch);iae=n(cwe,"STRONG",{});var TQr=s(iae);tio=r(TQr,"perceiver"),TQr.forEach(t),aio=r(cwe," \u2014 "),iB=n(cwe,"A",{href:!0});var MQr=s(iB);nio=r(MQr,"PerceiverFeatureExtractor"),MQr.forEach(t),sio=r(cwe," (Perceiver model)"),cwe.forEach(t),lio=i(ae),fh=n(ae,"LI",{});var fwe=s(fh);dae=n(fwe,"STRONG",{});var EQr=s(dae);iio=r(EQr,"poolformer"),EQr.forEach(t),dio=r(fwe," \u2014 "),dB=n(fwe,"A",{href:!0});var CQr=s(dB);cio=r(CQr,"PoolFormerFeatureExtractor"),CQr.forEach(t),fio=r(fwe," (PoolFormer model)"),fwe.forEach(t),mio=i(ae),mh=n(ae,"LI",{});var mwe=s(mh);cae=n(mwe,"STRONG",{});var wQr=s(cae);gio=r(wQr,"regnet"),wQr.forEach(t),hio=r(mwe," \u2014 "),cB=n(mwe,"A",{href:!0});var AQr=s(cB);pio=r(AQr,"ConvNextFeatureExtractor"),AQr.forEach(t),uio=r(mwe," (RegNet model)"),mwe.forEach(t),_io=i(ae),gh=n(ae,"LI",{});var gwe=s(gh);fae=n(gwe,"STRONG",{});var yQr=s(fae);bio=r(yQr,"resnet"),yQr.forEach(t),vio=r(gwe," \u2014 "),fB=n(gwe,"A",{href:!0});var LQr=s(fB);Fio=r(LQr,"ConvNextFeatureExtractor"),LQr.forEach(t),Tio=r(gwe," (ResNet model)"),gwe.forEach(t),Mio=i(ae),hh=n(ae,"LI",{});var hwe=s(hh);mae=n(hwe,"STRONG",{});var xQr=s(mae);Eio=r(xQr,"segformer"),xQr.forEach(t),Cio=r(hwe," \u2014 "),mB=n(hwe,"A",{href:!0});var $Qr=s(mB);wio=r($Qr,"SegformerFeatureExtractor"),$Qr.forEach(t),Aio=r(hwe," (SegFormer model)"),hwe.forEach(t),yio=i(ae),ph=n(ae,"LI",{});var pwe=s(ph);gae=n(pwe,"STRONG",{});var kQr=s(gae);Lio=r(kQr,"speech_to_text"),kQr.forEach(t),xio=r(pwe," \u2014 "),gB=n(pwe,"A",{href:!0});var SQr=s(gB);$io=r(SQr,"Speech2TextFeatureExtractor"),SQr.forEach(t),kio=r(pwe," (Speech2Text model)"),pwe.forEach(t),Sio=i(ae),uh=n(ae,"LI",{});var uwe=s(uh);hae=n(uwe,"STRONG",{});var RQr=s(hae);Rio=r(RQr,"swin"),RQr.forEach(t),Pio=r(uwe," \u2014 "),hB=n(uwe,"A",{href:!0});var PQr=s(hB);Bio=r(PQr,"ViTFeatureExtractor"),PQr.forEach(t),Iio=r(uwe," (Swin model)"),uwe.forEach(t),qio=i(ae),_h=n(ae,"LI",{});var _we=s(_h);pae=n(_we,"STRONG",{});var BQr=s(pae);Nio=r(BQr,"van"),BQr.forEach(t),jio=r(_we," \u2014 "),pB=n(_we,"A",{href:!0});var IQr=s(pB);Dio=r(IQr,"ConvNextFeatureExtractor"),IQr.forEach(t),Gio=r(_we," (VAN model)"),_we.forEach(t),Oio=i(ae),bh=n(ae,"LI",{});var bwe=s(bh);uae=n(bwe,"STRONG",{});var qQr=s(uae);Vio=r(qQr,"vit"),qQr.forEach(t),Xio=r(bwe," \u2014 "),uB=n(bwe,"A",{href:!0});var NQr=s(uB);zio=r(NQr,"ViTFeatureExtractor"),NQr.forEach(t),Qio=r(bwe," (ViT model)"),bwe.forEach(t),Wio=i(ae),vh=n(ae,"LI",{});var vwe=s(vh);_ae=n(vwe,"STRONG",{});var jQr=s(_ae);Hio=r(jQr,"vit_mae"),jQr.forEach(t),Uio=r(vwe," \u2014 "),_B=n(vwe,"A",{href:!0});var DQr=s(_B);Jio=r(DQr,"ViTFeatureExtractor"),DQr.forEach(t),Yio=r(vwe," (ViTMAE model)"),vwe.forEach(t),Kio=i(ae),Fh=n(ae,"LI",{});var Fwe=s(Fh);bae=n(Fwe,"STRONG",{});var GQr=s(bae);Zio=r(GQr,"wav2vec2"),GQr.forEach(t),edo=r(Fwe," \u2014 "),bB=n(Fwe,"A",{href:!0});var OQr=s(bB);odo=r(OQr,"Wav2Vec2FeatureExtractor"),OQr.forEach(t),rdo=r(Fwe," (Wav2Vec2 model)"),Fwe.forEach(t),tdo=i(ae),Th=n(ae,"LI",{});var Twe=s(Th);vae=n(Twe,"STRONG",{});var VQr=s(vae);ado=r(VQr,"yolos"),VQr.forEach(t),ndo=r(Twe," \u2014 "),vB=n(Twe,"A",{href:!0});var XQr=s(vB);sdo=r(XQr,"YolosFeatureExtractor"),XQr.forEach(t),ldo=r(Twe," (YOLOS model)"),Twe.forEach(t),ae.forEach(t),ido=i(Yt),T(Mh.$$.fragment,Yt),ddo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),cdo=i(qs),Ch=n(qs,"DIV",{class:!0});var Wqe=s(Ch);T(h6.$$.fragment,Wqe),fdo=i(Wqe),Fae=n(Wqe,"P",{});var zQr=s(Fae);mdo=r(zQr,"Register a new feature extractor for this class."),zQr.forEach(t),Wqe.forEach(t),qs.forEach(t),QBe=i(f),vi=n(f,"H2",{class:!0});var Hqe=s(vi);wh=n(Hqe,"A",{id:!0,class:!0,href:!0});var QQr=s(wh);Tae=n(QQr,"SPAN",{});var WQr=s(Tae);T(p6.$$.fragment,WQr),WQr.forEach(t),QQr.forEach(t),gdo=i(Hqe),Mae=n(Hqe,"SPAN",{});var HQr=s(Mae);hdo=r(HQr,"AutoProcessor"),HQr.forEach(t),Hqe.forEach(t),WBe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(u6.$$.fragment,Ns),pdo=i(Ns),_6=n(Ns,"P",{});var Uqe=s(_6);udo=r(Uqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FB=n(Uqe,"A",{href:!0});var UQr=s(FB);_do=r(UQr,"AutoProcessor.from_pretrained()"),UQr.forEach(t),bdo=r(Uqe," class method."),Uqe.forEach(t),vdo=i(Ns),b6=n(Ns,"P",{});var Jqe=s(b6);Fdo=r(Jqe,"This class cannot be instantiated directly using "),Eae=n(Jqe,"CODE",{});var JQr=s(Eae);Tdo=r(JQr,"__init__()"),JQr.forEach(t),Mdo=r(Jqe," (throws an error)."),Jqe.forEach(t),Edo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(v6.$$.fragment,Kt),Cdo=i(Kt),Cae=n(Kt,"P",{});var YQr=s(Cae);wdo=r(YQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),YQr.forEach(t),Ado=i(Kt),Fi=n(Kt,"P",{});var tK=s(Fi);ydo=r(tK,"The processor class to instantiate is selected based on the "),wae=n(tK,"CODE",{});var KQr=s(wae);Ldo=r(KQr,"model_type"),KQr.forEach(t),xdo=r(tK,` property of the config object (either
passed as an argument or loaded from `),Aae=n(tK,"CODE",{});var ZQr=s(Aae);$do=r(ZQr,"pretrained_model_name_or_path"),ZQr.forEach(t),kdo=r(tK," if possible):"),tK.forEach(t),Sdo=i(Kt),_e=n(Kt,"UL",{});var ve=s(_e);Ah=n(ve,"LI",{});var Mwe=s(Ah);yae=n(Mwe,"STRONG",{});var eWr=s(yae);Rdo=r(eWr,"clip"),eWr.forEach(t),Pdo=r(Mwe," \u2014 "),TB=n(Mwe,"A",{href:!0});var oWr=s(TB);Bdo=r(oWr,"CLIPProcessor"),oWr.forEach(t),Ido=r(Mwe," (CLIP model)"),Mwe.forEach(t),qdo=i(ve),yh=n(ve,"LI",{});var Ewe=s(yh);Lae=n(Ewe,"STRONG",{});var rWr=s(Lae);Ndo=r(rWr,"flava"),rWr.forEach(t),jdo=r(Ewe," \u2014 "),xae=n(Ewe,"CODE",{});var tWr=s(xae);Ddo=r(tWr,"FLAVAProcessor"),tWr.forEach(t),Gdo=r(Ewe," (Flava model)"),Ewe.forEach(t),Odo=i(ve),Lh=n(ve,"LI",{});var Cwe=s(Lh);$ae=n(Cwe,"STRONG",{});var aWr=s($ae);Vdo=r(aWr,"layoutlmv2"),aWr.forEach(t),Xdo=r(Cwe," \u2014 "),MB=n(Cwe,"A",{href:!0});var nWr=s(MB);zdo=r(nWr,"LayoutLMv2Processor"),nWr.forEach(t),Qdo=r(Cwe," (LayoutLMv2 model)"),Cwe.forEach(t),Wdo=i(ve),xh=n(ve,"LI",{});var wwe=s(xh);kae=n(wwe,"STRONG",{});var sWr=s(kae);Hdo=r(sWr,"layoutxlm"),sWr.forEach(t),Udo=r(wwe," \u2014 "),EB=n(wwe,"A",{href:!0});var lWr=s(EB);Jdo=r(lWr,"LayoutXLMProcessor"),lWr.forEach(t),Ydo=r(wwe," (LayoutXLM model)"),wwe.forEach(t),Kdo=i(ve),$h=n(ve,"LI",{});var Awe=s($h);Sae=n(Awe,"STRONG",{});var iWr=s(Sae);Zdo=r(iWr,"sew"),iWr.forEach(t),eco=r(Awe," \u2014 "),CB=n(Awe,"A",{href:!0});var dWr=s(CB);oco=r(dWr,"Wav2Vec2Processor"),dWr.forEach(t),rco=r(Awe," (SEW model)"),Awe.forEach(t),tco=i(ve),kh=n(ve,"LI",{});var ywe=s(kh);Rae=n(ywe,"STRONG",{});var cWr=s(Rae);aco=r(cWr,"sew-d"),cWr.forEach(t),nco=r(ywe," \u2014 "),wB=n(ywe,"A",{href:!0});var fWr=s(wB);sco=r(fWr,"Wav2Vec2Processor"),fWr.forEach(t),lco=r(ywe," (SEW-D model)"),ywe.forEach(t),ico=i(ve),Sh=n(ve,"LI",{});var Lwe=s(Sh);Pae=n(Lwe,"STRONG",{});var mWr=s(Pae);dco=r(mWr,"speech_to_text"),mWr.forEach(t),cco=r(Lwe," \u2014 "),AB=n(Lwe,"A",{href:!0});var gWr=s(AB);fco=r(gWr,"Speech2TextProcessor"),gWr.forEach(t),mco=r(Lwe," (Speech2Text model)"),Lwe.forEach(t),gco=i(ve),Rh=n(ve,"LI",{});var xwe=s(Rh);Bae=n(xwe,"STRONG",{});var hWr=s(Bae);hco=r(hWr,"speech_to_text_2"),hWr.forEach(t),pco=r(xwe," \u2014 "),yB=n(xwe,"A",{href:!0});var pWr=s(yB);uco=r(pWr,"Speech2Text2Processor"),pWr.forEach(t),_co=r(xwe," (Speech2Text2 model)"),xwe.forEach(t),bco=i(ve),Ph=n(ve,"LI",{});var $we=s(Ph);Iae=n($we,"STRONG",{});var uWr=s(Iae);vco=r(uWr,"trocr"),uWr.forEach(t),Fco=r($we," \u2014 "),LB=n($we,"A",{href:!0});var _Wr=s(LB);Tco=r(_Wr,"TrOCRProcessor"),_Wr.forEach(t),Mco=r($we," (TrOCR model)"),$we.forEach(t),Eco=i(ve),Bh=n(ve,"LI",{});var kwe=s(Bh);qae=n(kwe,"STRONG",{});var bWr=s(qae);Cco=r(bWr,"unispeech"),bWr.forEach(t),wco=r(kwe," \u2014 "),xB=n(kwe,"A",{href:!0});var vWr=s(xB);Aco=r(vWr,"Wav2Vec2Processor"),vWr.forEach(t),yco=r(kwe," (UniSpeech model)"),kwe.forEach(t),Lco=i(ve),Ih=n(ve,"LI",{});var Swe=s(Ih);Nae=n(Swe,"STRONG",{});var FWr=s(Nae);xco=r(FWr,"unispeech-sat"),FWr.forEach(t),$co=r(Swe," \u2014 "),$B=n(Swe,"A",{href:!0});var TWr=s($B);kco=r(TWr,"Wav2Vec2Processor"),TWr.forEach(t),Sco=r(Swe," (UniSpeechSat model)"),Swe.forEach(t),Rco=i(ve),qh=n(ve,"LI",{});var Rwe=s(qh);jae=n(Rwe,"STRONG",{});var MWr=s(jae);Pco=r(MWr,"vilt"),MWr.forEach(t),Bco=r(Rwe," \u2014 "),kB=n(Rwe,"A",{href:!0});var EWr=s(kB);Ico=r(EWr,"ViltProcessor"),EWr.forEach(t),qco=r(Rwe," (ViLT model)"),Rwe.forEach(t),Nco=i(ve),Nh=n(ve,"LI",{});var Pwe=s(Nh);Dae=n(Pwe,"STRONG",{});var CWr=s(Dae);jco=r(CWr,"vision-text-dual-encoder"),CWr.forEach(t),Dco=r(Pwe," \u2014 "),SB=n(Pwe,"A",{href:!0});var wWr=s(SB);Gco=r(wWr,"VisionTextDualEncoderProcessor"),wWr.forEach(t),Oco=r(Pwe," (VisionTextDualEncoder model)"),Pwe.forEach(t),Vco=i(ve),jh=n(ve,"LI",{});var Bwe=s(jh);Gae=n(Bwe,"STRONG",{});var AWr=s(Gae);Xco=r(AWr,"wav2vec2"),AWr.forEach(t),zco=r(Bwe," \u2014 "),RB=n(Bwe,"A",{href:!0});var yWr=s(RB);Qco=r(yWr,"Wav2Vec2Processor"),yWr.forEach(t),Wco=r(Bwe," (Wav2Vec2 model)"),Bwe.forEach(t),Hco=i(ve),Dh=n(ve,"LI",{});var Iwe=s(Dh);Oae=n(Iwe,"STRONG",{});var LWr=s(Oae);Uco=r(LWr,"wavlm"),LWr.forEach(t),Jco=r(Iwe," \u2014 "),PB=n(Iwe,"A",{href:!0});var xWr=s(PB);Yco=r(xWr,"Wav2Vec2Processor"),xWr.forEach(t),Kco=r(Iwe," (WavLM model)"),Iwe.forEach(t),ve.forEach(t),Zco=i(Kt),T(Gh.$$.fragment,Kt),efo=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),ofo=i(Ns),Vh=n(Ns,"DIV",{class:!0});var Yqe=s(Vh);T(F6.$$.fragment,Yqe),rfo=i(Yqe),Vae=n(Yqe,"P",{});var $Wr=s(Vae);tfo=r($Wr,"Register a new processor for this class."),$Wr.forEach(t),Yqe.forEach(t),Ns.forEach(t),HBe=i(f),Ti=n(f,"H2",{class:!0});var Kqe=s(Ti);Xh=n(Kqe,"A",{id:!0,class:!0,href:!0});var kWr=s(Xh);Xae=n(kWr,"SPAN",{});var SWr=s(Xae);T(T6.$$.fragment,SWr),SWr.forEach(t),kWr.forEach(t),afo=i(Kqe),zae=n(Kqe,"SPAN",{});var RWr=s(zae);nfo=r(RWr,"AutoModel"),RWr.forEach(t),Kqe.forEach(t),UBe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(M6.$$.fragment,js),sfo=i(js),Mi=n(js,"P",{});var aK=s(Mi);lfo=r(aK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BB=n(aK,"A",{href:!0});var PWr=s(BB);ifo=r(PWr,"from_pretrained()"),PWr.forEach(t),dfo=r(aK," class method or the "),IB=n(aK,"A",{href:!0});var BWr=s(IB);cfo=r(BWr,"from_config()"),BWr.forEach(t),ffo=r(aK,` class
method.`),aK.forEach(t),mfo=i(js),E6=n(js,"P",{});var Zqe=s(E6);gfo=r(Zqe,"This class cannot be instantiated directly using "),Qae=n(Zqe,"CODE",{});var IWr=s(Qae);hfo=r(IWr,"__init__()"),IWr.forEach(t),pfo=r(Zqe," (throws an error)."),Zqe.forEach(t),ufo=i(js),ot=n(js,"DIV",{class:!0});var Kw=s(ot);T(C6.$$.fragment,Kw),_fo=i(Kw),Wae=n(Kw,"P",{});var qWr=s(Wae);bfo=r(qWr,"Instantiates one of the base model classes of the library from a configuration."),qWr.forEach(t),vfo=i(Kw),Ei=n(Kw,"P",{});var nK=s(Ei);Ffo=r(nK,`Note:
Loading a model from its configuration file does `),Hae=n(nK,"STRONG",{});var NWr=s(Hae);Tfo=r(NWr,"not"),NWr.forEach(t),Mfo=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qB=n(nK,"A",{href:!0});var jWr=s(qB);Efo=r(jWr,"from_pretrained()"),jWr.forEach(t),Cfo=r(nK," to load the model weights."),nK.forEach(t),wfo=i(Kw),T(zh.$$.fragment,Kw),Kw.forEach(t),Afo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(w6.$$.fragment,Zt),yfo=i(Zt),Uae=n(Zt,"P",{});var DWr=s(Uae);Lfo=r(DWr,"Instantiate one of the base model classes of the library from a pretrained model."),DWr.forEach(t),xfo=i(Zt),Aa=n(Zt,"P",{});var Zw=s(Aa);$fo=r(Zw,"The model class to instantiate is selected based on the "),Jae=n(Zw,"CODE",{});var GWr=s(Jae);kfo=r(GWr,"model_type"),GWr.forEach(t),Sfo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Yae=n(Zw,"CODE",{});var OWr=s(Yae);Rfo=r(OWr,"pretrained_model_name_or_path"),OWr.forEach(t),Pfo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=n(Zw,"CODE",{});var VWr=s(Kae);Bfo=r(VWr,"pretrained_model_name_or_path"),VWr.forEach(t),Ifo=r(Zw,":"),Zw.forEach(t),qfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var qwe=s(Qh);Zae=n(qwe,"STRONG",{});var XWr=s(Zae);Nfo=r(XWr,"albert"),XWr.forEach(t),jfo=r(qwe," \u2014 "),NB=n(qwe,"A",{href:!0});var zWr=s(NB);Dfo=r(zWr,"AlbertModel"),zWr.forEach(t),Gfo=r(qwe," (ALBERT model)"),qwe.forEach(t),Ofo=i($),Wh=n($,"LI",{});var Nwe=s(Wh);ene=n(Nwe,"STRONG",{});var QWr=s(ene);Vfo=r(QWr,"bart"),QWr.forEach(t),Xfo=r(Nwe," \u2014 "),jB=n(Nwe,"A",{href:!0});var WWr=s(jB);zfo=r(WWr,"BartModel"),WWr.forEach(t),Qfo=r(Nwe," (BART model)"),Nwe.forEach(t),Wfo=i($),Hh=n($,"LI",{});var jwe=s(Hh);one=n(jwe,"STRONG",{});var HWr=s(one);Hfo=r(HWr,"beit"),HWr.forEach(t),Ufo=r(jwe," \u2014 "),DB=n(jwe,"A",{href:!0});var UWr=s(DB);Jfo=r(UWr,"BeitModel"),UWr.forEach(t),Yfo=r(jwe," (BEiT model)"),jwe.forEach(t),Kfo=i($),Uh=n($,"LI",{});var Dwe=s(Uh);rne=n(Dwe,"STRONG",{});var JWr=s(rne);Zfo=r(JWr,"bert"),JWr.forEach(t),emo=r(Dwe," \u2014 "),GB=n(Dwe,"A",{href:!0});var YWr=s(GB);omo=r(YWr,"BertModel"),YWr.forEach(t),rmo=r(Dwe," (BERT model)"),Dwe.forEach(t),tmo=i($),Jh=n($,"LI",{});var Gwe=s(Jh);tne=n(Gwe,"STRONG",{});var KWr=s(tne);amo=r(KWr,"bert-generation"),KWr.forEach(t),nmo=r(Gwe," \u2014 "),OB=n(Gwe,"A",{href:!0});var ZWr=s(OB);smo=r(ZWr,"BertGenerationEncoder"),ZWr.forEach(t),lmo=r(Gwe," (Bert Generation model)"),Gwe.forEach(t),imo=i($),Yh=n($,"LI",{});var Owe=s(Yh);ane=n(Owe,"STRONG",{});var eHr=s(ane);dmo=r(eHr,"big_bird"),eHr.forEach(t),cmo=r(Owe," \u2014 "),VB=n(Owe,"A",{href:!0});var oHr=s(VB);fmo=r(oHr,"BigBirdModel"),oHr.forEach(t),mmo=r(Owe," (BigBird model)"),Owe.forEach(t),gmo=i($),Kh=n($,"LI",{});var Vwe=s(Kh);nne=n(Vwe,"STRONG",{});var rHr=s(nne);hmo=r(rHr,"bigbird_pegasus"),rHr.forEach(t),pmo=r(Vwe," \u2014 "),XB=n(Vwe,"A",{href:!0});var tHr=s(XB);umo=r(tHr,"BigBirdPegasusModel"),tHr.forEach(t),_mo=r(Vwe," (BigBirdPegasus model)"),Vwe.forEach(t),bmo=i($),Zh=n($,"LI",{});var Xwe=s(Zh);sne=n(Xwe,"STRONG",{});var aHr=s(sne);vmo=r(aHr,"blenderbot"),aHr.forEach(t),Fmo=r(Xwe," \u2014 "),zB=n(Xwe,"A",{href:!0});var nHr=s(zB);Tmo=r(nHr,"BlenderbotModel"),nHr.forEach(t),Mmo=r(Xwe," (Blenderbot model)"),Xwe.forEach(t),Emo=i($),ep=n($,"LI",{});var zwe=s(ep);lne=n(zwe,"STRONG",{});var sHr=s(lne);Cmo=r(sHr,"blenderbot-small"),sHr.forEach(t),wmo=r(zwe," \u2014 "),QB=n(zwe,"A",{href:!0});var lHr=s(QB);Amo=r(lHr,"BlenderbotSmallModel"),lHr.forEach(t),ymo=r(zwe," (BlenderbotSmall model)"),zwe.forEach(t),Lmo=i($),op=n($,"LI",{});var Qwe=s(op);ine=n(Qwe,"STRONG",{});var iHr=s(ine);xmo=r(iHr,"camembert"),iHr.forEach(t),$mo=r(Qwe," \u2014 "),WB=n(Qwe,"A",{href:!0});var dHr=s(WB);kmo=r(dHr,"CamembertModel"),dHr.forEach(t),Smo=r(Qwe," (CamemBERT model)"),Qwe.forEach(t),Rmo=i($),rp=n($,"LI",{});var Wwe=s(rp);dne=n(Wwe,"STRONG",{});var cHr=s(dne);Pmo=r(cHr,"canine"),cHr.forEach(t),Bmo=r(Wwe," \u2014 "),HB=n(Wwe,"A",{href:!0});var fHr=s(HB);Imo=r(fHr,"CanineModel"),fHr.forEach(t),qmo=r(Wwe," (Canine model)"),Wwe.forEach(t),Nmo=i($),tp=n($,"LI",{});var Hwe=s(tp);cne=n(Hwe,"STRONG",{});var mHr=s(cne);jmo=r(mHr,"clip"),mHr.forEach(t),Dmo=r(Hwe," \u2014 "),UB=n(Hwe,"A",{href:!0});var gHr=s(UB);Gmo=r(gHr,"CLIPModel"),gHr.forEach(t),Omo=r(Hwe," (CLIP model)"),Hwe.forEach(t),Vmo=i($),ap=n($,"LI",{});var Uwe=s(ap);fne=n(Uwe,"STRONG",{});var hHr=s(fne);Xmo=r(hHr,"convbert"),hHr.forEach(t),zmo=r(Uwe," \u2014 "),JB=n(Uwe,"A",{href:!0});var pHr=s(JB);Qmo=r(pHr,"ConvBertModel"),pHr.forEach(t),Wmo=r(Uwe," (ConvBERT model)"),Uwe.forEach(t),Hmo=i($),np=n($,"LI",{});var Jwe=s(np);mne=n(Jwe,"STRONG",{});var uHr=s(mne);Umo=r(uHr,"convnext"),uHr.forEach(t),Jmo=r(Jwe," \u2014 "),YB=n(Jwe,"A",{href:!0});var _Hr=s(YB);Ymo=r(_Hr,"ConvNextModel"),_Hr.forEach(t),Kmo=r(Jwe," (ConvNext model)"),Jwe.forEach(t),Zmo=i($),sp=n($,"LI",{});var Ywe=s(sp);gne=n(Ywe,"STRONG",{});var bHr=s(gne);ego=r(bHr,"ctrl"),bHr.forEach(t),ogo=r(Ywe," \u2014 "),KB=n(Ywe,"A",{href:!0});var vHr=s(KB);rgo=r(vHr,"CTRLModel"),vHr.forEach(t),tgo=r(Ywe," (CTRL model)"),Ywe.forEach(t),ago=i($),lp=n($,"LI",{});var Kwe=s(lp);hne=n(Kwe,"STRONG",{});var FHr=s(hne);ngo=r(FHr,"data2vec-audio"),FHr.forEach(t),sgo=r(Kwe," \u2014 "),ZB=n(Kwe,"A",{href:!0});var THr=s(ZB);lgo=r(THr,"Data2VecAudioModel"),THr.forEach(t),igo=r(Kwe," (Data2VecAudio model)"),Kwe.forEach(t),dgo=i($),ip=n($,"LI",{});var Zwe=s(ip);pne=n(Zwe,"STRONG",{});var MHr=s(pne);cgo=r(MHr,"data2vec-text"),MHr.forEach(t),fgo=r(Zwe," \u2014 "),eI=n(Zwe,"A",{href:!0});var EHr=s(eI);mgo=r(EHr,"Data2VecTextModel"),EHr.forEach(t),ggo=r(Zwe," (Data2VecText model)"),Zwe.forEach(t),hgo=i($),dp=n($,"LI",{});var eAe=s(dp);une=n(eAe,"STRONG",{});var CHr=s(une);pgo=r(CHr,"data2vec-vision"),CHr.forEach(t),ugo=r(eAe," \u2014 "),oI=n(eAe,"A",{href:!0});var wHr=s(oI);_go=r(wHr,"Data2VecVisionModel"),wHr.forEach(t),bgo=r(eAe," (Data2VecVision model)"),eAe.forEach(t),vgo=i($),cp=n($,"LI",{});var oAe=s(cp);_ne=n(oAe,"STRONG",{});var AHr=s(_ne);Fgo=r(AHr,"deberta"),AHr.forEach(t),Tgo=r(oAe," \u2014 "),rI=n(oAe,"A",{href:!0});var yHr=s(rI);Mgo=r(yHr,"DebertaModel"),yHr.forEach(t),Ego=r(oAe," (DeBERTa model)"),oAe.forEach(t),Cgo=i($),fp=n($,"LI",{});var rAe=s(fp);bne=n(rAe,"STRONG",{});var LHr=s(bne);wgo=r(LHr,"deberta-v2"),LHr.forEach(t),Ago=r(rAe," \u2014 "),tI=n(rAe,"A",{href:!0});var xHr=s(tI);ygo=r(xHr,"DebertaV2Model"),xHr.forEach(t),Lgo=r(rAe," (DeBERTa-v2 model)"),rAe.forEach(t),xgo=i($),mp=n($,"LI",{});var tAe=s(mp);vne=n(tAe,"STRONG",{});var $Hr=s(vne);$go=r($Hr,"decision_transformer"),$Hr.forEach(t),kgo=r(tAe," \u2014 "),aI=n(tAe,"A",{href:!0});var kHr=s(aI);Sgo=r(kHr,"DecisionTransformerModel"),kHr.forEach(t),Rgo=r(tAe," (Decision Transformer model)"),tAe.forEach(t),Pgo=i($),gp=n($,"LI",{});var aAe=s(gp);Fne=n(aAe,"STRONG",{});var SHr=s(Fne);Bgo=r(SHr,"deit"),SHr.forEach(t),Igo=r(aAe," \u2014 "),nI=n(aAe,"A",{href:!0});var RHr=s(nI);qgo=r(RHr,"DeiTModel"),RHr.forEach(t),Ngo=r(aAe," (DeiT model)"),aAe.forEach(t),jgo=i($),hp=n($,"LI",{});var nAe=s(hp);Tne=n(nAe,"STRONG",{});var PHr=s(Tne);Dgo=r(PHr,"detr"),PHr.forEach(t),Ggo=r(nAe," \u2014 "),sI=n(nAe,"A",{href:!0});var BHr=s(sI);Ogo=r(BHr,"DetrModel"),BHr.forEach(t),Vgo=r(nAe," (DETR model)"),nAe.forEach(t),Xgo=i($),pp=n($,"LI",{});var sAe=s(pp);Mne=n(sAe,"STRONG",{});var IHr=s(Mne);zgo=r(IHr,"distilbert"),IHr.forEach(t),Qgo=r(sAe," \u2014 "),lI=n(sAe,"A",{href:!0});var qHr=s(lI);Wgo=r(qHr,"DistilBertModel"),qHr.forEach(t),Hgo=r(sAe," (DistilBERT model)"),sAe.forEach(t),Ugo=i($),up=n($,"LI",{});var lAe=s(up);Ene=n(lAe,"STRONG",{});var NHr=s(Ene);Jgo=r(NHr,"dpr"),NHr.forEach(t),Ygo=r(lAe," \u2014 "),iI=n(lAe,"A",{href:!0});var jHr=s(iI);Kgo=r(jHr,"DPRQuestionEncoder"),jHr.forEach(t),Zgo=r(lAe," (DPR model)"),lAe.forEach(t),eho=i($),_p=n($,"LI",{});var iAe=s(_p);Cne=n(iAe,"STRONG",{});var DHr=s(Cne);oho=r(DHr,"dpt"),DHr.forEach(t),rho=r(iAe," \u2014 "),dI=n(iAe,"A",{href:!0});var GHr=s(dI);tho=r(GHr,"DPTModel"),GHr.forEach(t),aho=r(iAe," (DPT model)"),iAe.forEach(t),nho=i($),bp=n($,"LI",{});var dAe=s(bp);wne=n(dAe,"STRONG",{});var OHr=s(wne);sho=r(OHr,"electra"),OHr.forEach(t),lho=r(dAe," \u2014 "),cI=n(dAe,"A",{href:!0});var VHr=s(cI);iho=r(VHr,"ElectraModel"),VHr.forEach(t),dho=r(dAe," (ELECTRA model)"),dAe.forEach(t),cho=i($),vp=n($,"LI",{});var cAe=s(vp);Ane=n(cAe,"STRONG",{});var XHr=s(Ane);fho=r(XHr,"flaubert"),XHr.forEach(t),mho=r(cAe," \u2014 "),fI=n(cAe,"A",{href:!0});var zHr=s(fI);gho=r(zHr,"FlaubertModel"),zHr.forEach(t),hho=r(cAe," (FlauBERT model)"),cAe.forEach(t),pho=i($),Fp=n($,"LI",{});var fAe=s(Fp);yne=n(fAe,"STRONG",{});var QHr=s(yne);uho=r(QHr,"flava"),QHr.forEach(t),_ho=r(fAe," \u2014 "),mI=n(fAe,"A",{href:!0});var WHr=s(mI);bho=r(WHr,"FlavaModel"),WHr.forEach(t),vho=r(fAe," (Flava model)"),fAe.forEach(t),Fho=i($),Tp=n($,"LI",{});var mAe=s(Tp);Lne=n(mAe,"STRONG",{});var HHr=s(Lne);Tho=r(HHr,"fnet"),HHr.forEach(t),Mho=r(mAe," \u2014 "),gI=n(mAe,"A",{href:!0});var UHr=s(gI);Eho=r(UHr,"FNetModel"),UHr.forEach(t),Cho=r(mAe," (FNet model)"),mAe.forEach(t),who=i($),Mp=n($,"LI",{});var gAe=s(Mp);xne=n(gAe,"STRONG",{});var JHr=s(xne);Aho=r(JHr,"fsmt"),JHr.forEach(t),yho=r(gAe," \u2014 "),hI=n(gAe,"A",{href:!0});var YHr=s(hI);Lho=r(YHr,"FSMTModel"),YHr.forEach(t),xho=r(gAe," (FairSeq Machine-Translation model)"),gAe.forEach(t),$ho=i($),Ss=n($,"LI",{});var d$=s(Ss);$ne=n(d$,"STRONG",{});var KHr=s($ne);kho=r(KHr,"funnel"),KHr.forEach(t),Sho=r(d$," \u2014 "),pI=n(d$,"A",{href:!0});var ZHr=s(pI);Rho=r(ZHr,"FunnelModel"),ZHr.forEach(t),Pho=r(d$," or "),uI=n(d$,"A",{href:!0});var eUr=s(uI);Bho=r(eUr,"FunnelBaseModel"),eUr.forEach(t),Iho=r(d$," (Funnel Transformer model)"),d$.forEach(t),qho=i($),Ep=n($,"LI",{});var hAe=s(Ep);kne=n(hAe,"STRONG",{});var oUr=s(kne);Nho=r(oUr,"glpn"),oUr.forEach(t),jho=r(hAe," \u2014 "),_I=n(hAe,"A",{href:!0});var rUr=s(_I);Dho=r(rUr,"GLPNModel"),rUr.forEach(t),Gho=r(hAe," (GLPN model)"),hAe.forEach(t),Oho=i($),Cp=n($,"LI",{});var pAe=s(Cp);Sne=n(pAe,"STRONG",{});var tUr=s(Sne);Vho=r(tUr,"gpt2"),tUr.forEach(t),Xho=r(pAe," \u2014 "),bI=n(pAe,"A",{href:!0});var aUr=s(bI);zho=r(aUr,"GPT2Model"),aUr.forEach(t),Qho=r(pAe," (OpenAI GPT-2 model)"),pAe.forEach(t),Who=i($),wp=n($,"LI",{});var uAe=s(wp);Rne=n(uAe,"STRONG",{});var nUr=s(Rne);Hho=r(nUr,"gpt_neo"),nUr.forEach(t),Uho=r(uAe," \u2014 "),vI=n(uAe,"A",{href:!0});var sUr=s(vI);Jho=r(sUr,"GPTNeoModel"),sUr.forEach(t),Yho=r(uAe," (GPT Neo model)"),uAe.forEach(t),Kho=i($),Ap=n($,"LI",{});var _Ae=s(Ap);Pne=n(_Ae,"STRONG",{});var lUr=s(Pne);Zho=r(lUr,"gptj"),lUr.forEach(t),epo=r(_Ae," \u2014 "),FI=n(_Ae,"A",{href:!0});var iUr=s(FI);opo=r(iUr,"GPTJModel"),iUr.forEach(t),rpo=r(_Ae," (GPT-J model)"),_Ae.forEach(t),tpo=i($),yp=n($,"LI",{});var bAe=s(yp);Bne=n(bAe,"STRONG",{});var dUr=s(Bne);apo=r(dUr,"hubert"),dUr.forEach(t),npo=r(bAe," \u2014 "),TI=n(bAe,"A",{href:!0});var cUr=s(TI);spo=r(cUr,"HubertModel"),cUr.forEach(t),lpo=r(bAe," (Hubert model)"),bAe.forEach(t),ipo=i($),Lp=n($,"LI",{});var vAe=s(Lp);Ine=n(vAe,"STRONG",{});var fUr=s(Ine);dpo=r(fUr,"ibert"),fUr.forEach(t),cpo=r(vAe," \u2014 "),MI=n(vAe,"A",{href:!0});var mUr=s(MI);fpo=r(mUr,"IBertModel"),mUr.forEach(t),mpo=r(vAe," (I-BERT model)"),vAe.forEach(t),gpo=i($),xp=n($,"LI",{});var FAe=s(xp);qne=n(FAe,"STRONG",{});var gUr=s(qne);hpo=r(gUr,"imagegpt"),gUr.forEach(t),ppo=r(FAe," \u2014 "),EI=n(FAe,"A",{href:!0});var hUr=s(EI);upo=r(hUr,"ImageGPTModel"),hUr.forEach(t),_po=r(FAe," (ImageGPT model)"),FAe.forEach(t),bpo=i($),$p=n($,"LI",{});var TAe=s($p);Nne=n(TAe,"STRONG",{});var pUr=s(Nne);vpo=r(pUr,"layoutlm"),pUr.forEach(t),Fpo=r(TAe," \u2014 "),CI=n(TAe,"A",{href:!0});var uUr=s(CI);Tpo=r(uUr,"LayoutLMModel"),uUr.forEach(t),Mpo=r(TAe," (LayoutLM model)"),TAe.forEach(t),Epo=i($),kp=n($,"LI",{});var MAe=s(kp);jne=n(MAe,"STRONG",{});var _Ur=s(jne);Cpo=r(_Ur,"layoutlmv2"),_Ur.forEach(t),wpo=r(MAe," \u2014 "),wI=n(MAe,"A",{href:!0});var bUr=s(wI);Apo=r(bUr,"LayoutLMv2Model"),bUr.forEach(t),ypo=r(MAe," (LayoutLMv2 model)"),MAe.forEach(t),Lpo=i($),Sp=n($,"LI",{});var EAe=s(Sp);Dne=n(EAe,"STRONG",{});var vUr=s(Dne);xpo=r(vUr,"led"),vUr.forEach(t),$po=r(EAe," \u2014 "),AI=n(EAe,"A",{href:!0});var FUr=s(AI);kpo=r(FUr,"LEDModel"),FUr.forEach(t),Spo=r(EAe," (LED model)"),EAe.forEach(t),Rpo=i($),Rp=n($,"LI",{});var CAe=s(Rp);Gne=n(CAe,"STRONG",{});var TUr=s(Gne);Ppo=r(TUr,"longformer"),TUr.forEach(t),Bpo=r(CAe," \u2014 "),yI=n(CAe,"A",{href:!0});var MUr=s(yI);Ipo=r(MUr,"LongformerModel"),MUr.forEach(t),qpo=r(CAe," (Longformer model)"),CAe.forEach(t),Npo=i($),Pp=n($,"LI",{});var wAe=s(Pp);One=n(wAe,"STRONG",{});var EUr=s(One);jpo=r(EUr,"luke"),EUr.forEach(t),Dpo=r(wAe," \u2014 "),LI=n(wAe,"A",{href:!0});var CUr=s(LI);Gpo=r(CUr,"LukeModel"),CUr.forEach(t),Opo=r(wAe," (LUKE model)"),wAe.forEach(t),Vpo=i($),Bp=n($,"LI",{});var AAe=s(Bp);Vne=n(AAe,"STRONG",{});var wUr=s(Vne);Xpo=r(wUr,"lxmert"),wUr.forEach(t),zpo=r(AAe," \u2014 "),xI=n(AAe,"A",{href:!0});var AUr=s(xI);Qpo=r(AUr,"LxmertModel"),AUr.forEach(t),Wpo=r(AAe," (LXMERT model)"),AAe.forEach(t),Hpo=i($),Ip=n($,"LI",{});var yAe=s(Ip);Xne=n(yAe,"STRONG",{});var yUr=s(Xne);Upo=r(yUr,"m2m_100"),yUr.forEach(t),Jpo=r(yAe," \u2014 "),$I=n(yAe,"A",{href:!0});var LUr=s($I);Ypo=r(LUr,"M2M100Model"),LUr.forEach(t),Kpo=r(yAe," (M2M100 model)"),yAe.forEach(t),Zpo=i($),qp=n($,"LI",{});var LAe=s(qp);zne=n(LAe,"STRONG",{});var xUr=s(zne);euo=r(xUr,"marian"),xUr.forEach(t),ouo=r(LAe," \u2014 "),kI=n(LAe,"A",{href:!0});var $Ur=s(kI);ruo=r($Ur,"MarianModel"),$Ur.forEach(t),tuo=r(LAe," (Marian model)"),LAe.forEach(t),auo=i($),Np=n($,"LI",{});var xAe=s(Np);Qne=n(xAe,"STRONG",{});var kUr=s(Qne);nuo=r(kUr,"maskformer"),kUr.forEach(t),suo=r(xAe," \u2014 "),SI=n(xAe,"A",{href:!0});var SUr=s(SI);luo=r(SUr,"MaskFormerModel"),SUr.forEach(t),iuo=r(xAe," (MaskFormer model)"),xAe.forEach(t),duo=i($),jp=n($,"LI",{});var $Ae=s(jp);Wne=n($Ae,"STRONG",{});var RUr=s(Wne);cuo=r(RUr,"mbart"),RUr.forEach(t),fuo=r($Ae," \u2014 "),RI=n($Ae,"A",{href:!0});var PUr=s(RI);muo=r(PUr,"MBartModel"),PUr.forEach(t),guo=r($Ae," (mBART model)"),$Ae.forEach(t),huo=i($),Dp=n($,"LI",{});var kAe=s(Dp);Hne=n(kAe,"STRONG",{});var BUr=s(Hne);puo=r(BUr,"megatron-bert"),BUr.forEach(t),uuo=r(kAe," \u2014 "),PI=n(kAe,"A",{href:!0});var IUr=s(PI);_uo=r(IUr,"MegatronBertModel"),IUr.forEach(t),buo=r(kAe," (MegatronBert model)"),kAe.forEach(t),vuo=i($),Gp=n($,"LI",{});var SAe=s(Gp);Une=n(SAe,"STRONG",{});var qUr=s(Une);Fuo=r(qUr,"mobilebert"),qUr.forEach(t),Tuo=r(SAe," \u2014 "),BI=n(SAe,"A",{href:!0});var NUr=s(BI);Muo=r(NUr,"MobileBertModel"),NUr.forEach(t),Euo=r(SAe," (MobileBERT model)"),SAe.forEach(t),Cuo=i($),Op=n($,"LI",{});var RAe=s(Op);Jne=n(RAe,"STRONG",{});var jUr=s(Jne);wuo=r(jUr,"mpnet"),jUr.forEach(t),Auo=r(RAe," \u2014 "),II=n(RAe,"A",{href:!0});var DUr=s(II);yuo=r(DUr,"MPNetModel"),DUr.forEach(t),Luo=r(RAe," (MPNet model)"),RAe.forEach(t),xuo=i($),Vp=n($,"LI",{});var PAe=s(Vp);Yne=n(PAe,"STRONG",{});var GUr=s(Yne);$uo=r(GUr,"mt5"),GUr.forEach(t),kuo=r(PAe," \u2014 "),qI=n(PAe,"A",{href:!0});var OUr=s(qI);Suo=r(OUr,"MT5Model"),OUr.forEach(t),Ruo=r(PAe," (mT5 model)"),PAe.forEach(t),Puo=i($),Xp=n($,"LI",{});var BAe=s(Xp);Kne=n(BAe,"STRONG",{});var VUr=s(Kne);Buo=r(VUr,"nystromformer"),VUr.forEach(t),Iuo=r(BAe," \u2014 "),NI=n(BAe,"A",{href:!0});var XUr=s(NI);quo=r(XUr,"NystromformerModel"),XUr.forEach(t),Nuo=r(BAe," (Nystromformer model)"),BAe.forEach(t),juo=i($),zp=n($,"LI",{});var IAe=s(zp);Zne=n(IAe,"STRONG",{});var zUr=s(Zne);Duo=r(zUr,"openai-gpt"),zUr.forEach(t),Guo=r(IAe," \u2014 "),jI=n(IAe,"A",{href:!0});var QUr=s(jI);Ouo=r(QUr,"OpenAIGPTModel"),QUr.forEach(t),Vuo=r(IAe," (OpenAI GPT model)"),IAe.forEach(t),Xuo=i($),Qp=n($,"LI",{});var qAe=s(Qp);ese=n(qAe,"STRONG",{});var WUr=s(ese);zuo=r(WUr,"opt"),WUr.forEach(t),Quo=r(qAe," \u2014 "),DI=n(qAe,"A",{href:!0});var HUr=s(DI);Wuo=r(HUr,"OPTModel"),HUr.forEach(t),Huo=r(qAe," (OPT model)"),qAe.forEach(t),Uuo=i($),Wp=n($,"LI",{});var NAe=s(Wp);ose=n(NAe,"STRONG",{});var UUr=s(ose);Juo=r(UUr,"pegasus"),UUr.forEach(t),Yuo=r(NAe," \u2014 "),GI=n(NAe,"A",{href:!0});var JUr=s(GI);Kuo=r(JUr,"PegasusModel"),JUr.forEach(t),Zuo=r(NAe," (Pegasus model)"),NAe.forEach(t),e_o=i($),Hp=n($,"LI",{});var jAe=s(Hp);rse=n(jAe,"STRONG",{});var YUr=s(rse);o_o=r(YUr,"perceiver"),YUr.forEach(t),r_o=r(jAe," \u2014 "),OI=n(jAe,"A",{href:!0});var KUr=s(OI);t_o=r(KUr,"PerceiverModel"),KUr.forEach(t),a_o=r(jAe," (Perceiver model)"),jAe.forEach(t),n_o=i($),Up=n($,"LI",{});var DAe=s(Up);tse=n(DAe,"STRONG",{});var ZUr=s(tse);s_o=r(ZUr,"plbart"),ZUr.forEach(t),l_o=r(DAe," \u2014 "),VI=n(DAe,"A",{href:!0});var eJr=s(VI);i_o=r(eJr,"PLBartModel"),eJr.forEach(t),d_o=r(DAe," (PLBart model)"),DAe.forEach(t),c_o=i($),Jp=n($,"LI",{});var GAe=s(Jp);ase=n(GAe,"STRONG",{});var oJr=s(ase);f_o=r(oJr,"poolformer"),oJr.forEach(t),m_o=r(GAe," \u2014 "),XI=n(GAe,"A",{href:!0});var rJr=s(XI);g_o=r(rJr,"PoolFormerModel"),rJr.forEach(t),h_o=r(GAe," (PoolFormer model)"),GAe.forEach(t),p_o=i($),Yp=n($,"LI",{});var OAe=s(Yp);nse=n(OAe,"STRONG",{});var tJr=s(nse);u_o=r(tJr,"prophetnet"),tJr.forEach(t),__o=r(OAe," \u2014 "),zI=n(OAe,"A",{href:!0});var aJr=s(zI);b_o=r(aJr,"ProphetNetModel"),aJr.forEach(t),v_o=r(OAe," (ProphetNet model)"),OAe.forEach(t),F_o=i($),Kp=n($,"LI",{});var VAe=s(Kp);sse=n(VAe,"STRONG",{});var nJr=s(sse);T_o=r(nJr,"qdqbert"),nJr.forEach(t),M_o=r(VAe," \u2014 "),QI=n(VAe,"A",{href:!0});var sJr=s(QI);E_o=r(sJr,"QDQBertModel"),sJr.forEach(t),C_o=r(VAe," (QDQBert model)"),VAe.forEach(t),w_o=i($),Zp=n($,"LI",{});var XAe=s(Zp);lse=n(XAe,"STRONG",{});var lJr=s(lse);A_o=r(lJr,"reformer"),lJr.forEach(t),y_o=r(XAe," \u2014 "),WI=n(XAe,"A",{href:!0});var iJr=s(WI);L_o=r(iJr,"ReformerModel"),iJr.forEach(t),x_o=r(XAe," (Reformer model)"),XAe.forEach(t),$_o=i($),eu=n($,"LI",{});var zAe=s(eu);ise=n(zAe,"STRONG",{});var dJr=s(ise);k_o=r(dJr,"regnet"),dJr.forEach(t),S_o=r(zAe," \u2014 "),HI=n(zAe,"A",{href:!0});var cJr=s(HI);R_o=r(cJr,"RegNetModel"),cJr.forEach(t),P_o=r(zAe," (RegNet model)"),zAe.forEach(t),B_o=i($),ou=n($,"LI",{});var QAe=s(ou);dse=n(QAe,"STRONG",{});var fJr=s(dse);I_o=r(fJr,"rembert"),fJr.forEach(t),q_o=r(QAe," \u2014 "),UI=n(QAe,"A",{href:!0});var mJr=s(UI);N_o=r(mJr,"RemBertModel"),mJr.forEach(t),j_o=r(QAe," (RemBERT model)"),QAe.forEach(t),D_o=i($),ru=n($,"LI",{});var WAe=s(ru);cse=n(WAe,"STRONG",{});var gJr=s(cse);G_o=r(gJr,"resnet"),gJr.forEach(t),O_o=r(WAe," \u2014 "),JI=n(WAe,"A",{href:!0});var hJr=s(JI);V_o=r(hJr,"ResNetModel"),hJr.forEach(t),X_o=r(WAe," (ResNet model)"),WAe.forEach(t),z_o=i($),tu=n($,"LI",{});var HAe=s(tu);fse=n(HAe,"STRONG",{});var pJr=s(fse);Q_o=r(pJr,"retribert"),pJr.forEach(t),W_o=r(HAe," \u2014 "),YI=n(HAe,"A",{href:!0});var uJr=s(YI);H_o=r(uJr,"RetriBertModel"),uJr.forEach(t),U_o=r(HAe," (RetriBERT model)"),HAe.forEach(t),J_o=i($),au=n($,"LI",{});var UAe=s(au);mse=n(UAe,"STRONG",{});var _Jr=s(mse);Y_o=r(_Jr,"roberta"),_Jr.forEach(t),K_o=r(UAe," \u2014 "),KI=n(UAe,"A",{href:!0});var bJr=s(KI);Z_o=r(bJr,"RobertaModel"),bJr.forEach(t),e2o=r(UAe," (RoBERTa model)"),UAe.forEach(t),o2o=i($),nu=n($,"LI",{});var JAe=s(nu);gse=n(JAe,"STRONG",{});var vJr=s(gse);r2o=r(vJr,"roformer"),vJr.forEach(t),t2o=r(JAe," \u2014 "),ZI=n(JAe,"A",{href:!0});var FJr=s(ZI);a2o=r(FJr,"RoFormerModel"),FJr.forEach(t),n2o=r(JAe," (RoFormer model)"),JAe.forEach(t),s2o=i($),su=n($,"LI",{});var YAe=s(su);hse=n(YAe,"STRONG",{});var TJr=s(hse);l2o=r(TJr,"segformer"),TJr.forEach(t),i2o=r(YAe," \u2014 "),eq=n(YAe,"A",{href:!0});var MJr=s(eq);d2o=r(MJr,"SegformerModel"),MJr.forEach(t),c2o=r(YAe," (SegFormer model)"),YAe.forEach(t),f2o=i($),lu=n($,"LI",{});var KAe=s(lu);pse=n(KAe,"STRONG",{});var EJr=s(pse);m2o=r(EJr,"sew"),EJr.forEach(t),g2o=r(KAe," \u2014 "),oq=n(KAe,"A",{href:!0});var CJr=s(oq);h2o=r(CJr,"SEWModel"),CJr.forEach(t),p2o=r(KAe," (SEW model)"),KAe.forEach(t),u2o=i($),iu=n($,"LI",{});var ZAe=s(iu);use=n(ZAe,"STRONG",{});var wJr=s(use);_2o=r(wJr,"sew-d"),wJr.forEach(t),b2o=r(ZAe," \u2014 "),rq=n(ZAe,"A",{href:!0});var AJr=s(rq);v2o=r(AJr,"SEWDModel"),AJr.forEach(t),F2o=r(ZAe," (SEW-D model)"),ZAe.forEach(t),T2o=i($),du=n($,"LI",{});var e0e=s(du);_se=n(e0e,"STRONG",{});var yJr=s(_se);M2o=r(yJr,"speech_to_text"),yJr.forEach(t),E2o=r(e0e," \u2014 "),tq=n(e0e,"A",{href:!0});var LJr=s(tq);C2o=r(LJr,"Speech2TextModel"),LJr.forEach(t),w2o=r(e0e," (Speech2Text model)"),e0e.forEach(t),A2o=i($),cu=n($,"LI",{});var o0e=s(cu);bse=n(o0e,"STRONG",{});var xJr=s(bse);y2o=r(xJr,"splinter"),xJr.forEach(t),L2o=r(o0e," \u2014 "),aq=n(o0e,"A",{href:!0});var $Jr=s(aq);x2o=r($Jr,"SplinterModel"),$Jr.forEach(t),$2o=r(o0e," (Splinter model)"),o0e.forEach(t),k2o=i($),fu=n($,"LI",{});var r0e=s(fu);vse=n(r0e,"STRONG",{});var kJr=s(vse);S2o=r(kJr,"squeezebert"),kJr.forEach(t),R2o=r(r0e," \u2014 "),nq=n(r0e,"A",{href:!0});var SJr=s(nq);P2o=r(SJr,"SqueezeBertModel"),SJr.forEach(t),B2o=r(r0e," (SqueezeBERT model)"),r0e.forEach(t),I2o=i($),mu=n($,"LI",{});var t0e=s(mu);Fse=n(t0e,"STRONG",{});var RJr=s(Fse);q2o=r(RJr,"swin"),RJr.forEach(t),N2o=r(t0e," \u2014 "),sq=n(t0e,"A",{href:!0});var PJr=s(sq);j2o=r(PJr,"SwinModel"),PJr.forEach(t),D2o=r(t0e," (Swin model)"),t0e.forEach(t),G2o=i($),gu=n($,"LI",{});var a0e=s(gu);Tse=n(a0e,"STRONG",{});var BJr=s(Tse);O2o=r(BJr,"t5"),BJr.forEach(t),V2o=r(a0e," \u2014 "),lq=n(a0e,"A",{href:!0});var IJr=s(lq);X2o=r(IJr,"T5Model"),IJr.forEach(t),z2o=r(a0e," (T5 model)"),a0e.forEach(t),Q2o=i($),hu=n($,"LI",{});var n0e=s(hu);Mse=n(n0e,"STRONG",{});var qJr=s(Mse);W2o=r(qJr,"tapas"),qJr.forEach(t),H2o=r(n0e," \u2014 "),iq=n(n0e,"A",{href:!0});var NJr=s(iq);U2o=r(NJr,"TapasModel"),NJr.forEach(t),J2o=r(n0e," (TAPAS model)"),n0e.forEach(t),Y2o=i($),pu=n($,"LI",{});var s0e=s(pu);Ese=n(s0e,"STRONG",{});var jJr=s(Ese);K2o=r(jJr,"transfo-xl"),jJr.forEach(t),Z2o=r(s0e," \u2014 "),dq=n(s0e,"A",{href:!0});var DJr=s(dq);e1o=r(DJr,"TransfoXLModel"),DJr.forEach(t),o1o=r(s0e," (Transformer-XL model)"),s0e.forEach(t),r1o=i($),uu=n($,"LI",{});var l0e=s(uu);Cse=n(l0e,"STRONG",{});var GJr=s(Cse);t1o=r(GJr,"unispeech"),GJr.forEach(t),a1o=r(l0e," \u2014 "),cq=n(l0e,"A",{href:!0});var OJr=s(cq);n1o=r(OJr,"UniSpeechModel"),OJr.forEach(t),s1o=r(l0e," (UniSpeech model)"),l0e.forEach(t),l1o=i($),_u=n($,"LI",{});var i0e=s(_u);wse=n(i0e,"STRONG",{});var VJr=s(wse);i1o=r(VJr,"unispeech-sat"),VJr.forEach(t),d1o=r(i0e," \u2014 "),fq=n(i0e,"A",{href:!0});var XJr=s(fq);c1o=r(XJr,"UniSpeechSatModel"),XJr.forEach(t),f1o=r(i0e," (UniSpeechSat model)"),i0e.forEach(t),m1o=i($),bu=n($,"LI",{});var d0e=s(bu);Ase=n(d0e,"STRONG",{});var zJr=s(Ase);g1o=r(zJr,"van"),zJr.forEach(t),h1o=r(d0e," \u2014 "),mq=n(d0e,"A",{href:!0});var QJr=s(mq);p1o=r(QJr,"VanModel"),QJr.forEach(t),u1o=r(d0e," (VAN model)"),d0e.forEach(t),_1o=i($),vu=n($,"LI",{});var c0e=s(vu);yse=n(c0e,"STRONG",{});var WJr=s(yse);b1o=r(WJr,"vilt"),WJr.forEach(t),v1o=r(c0e," \u2014 "),gq=n(c0e,"A",{href:!0});var HJr=s(gq);F1o=r(HJr,"ViltModel"),HJr.forEach(t),T1o=r(c0e," (ViLT model)"),c0e.forEach(t),M1o=i($),Fu=n($,"LI",{});var f0e=s(Fu);Lse=n(f0e,"STRONG",{});var UJr=s(Lse);E1o=r(UJr,"vision-text-dual-encoder"),UJr.forEach(t),C1o=r(f0e," \u2014 "),hq=n(f0e,"A",{href:!0});var JJr=s(hq);w1o=r(JJr,"VisionTextDualEncoderModel"),JJr.forEach(t),A1o=r(f0e," (VisionTextDualEncoder model)"),f0e.forEach(t),y1o=i($),Tu=n($,"LI",{});var m0e=s(Tu);xse=n(m0e,"STRONG",{});var YJr=s(xse);L1o=r(YJr,"visual_bert"),YJr.forEach(t),x1o=r(m0e," \u2014 "),pq=n(m0e,"A",{href:!0});var KJr=s(pq);$1o=r(KJr,"VisualBertModel"),KJr.forEach(t),k1o=r(m0e," (VisualBert model)"),m0e.forEach(t),S1o=i($),Mu=n($,"LI",{});var g0e=s(Mu);$se=n(g0e,"STRONG",{});var ZJr=s($se);R1o=r(ZJr,"vit"),ZJr.forEach(t),P1o=r(g0e," \u2014 "),uq=n(g0e,"A",{href:!0});var eYr=s(uq);B1o=r(eYr,"ViTModel"),eYr.forEach(t),I1o=r(g0e," (ViT model)"),g0e.forEach(t),q1o=i($),Eu=n($,"LI",{});var h0e=s(Eu);kse=n(h0e,"STRONG",{});var oYr=s(kse);N1o=r(oYr,"vit_mae"),oYr.forEach(t),j1o=r(h0e," \u2014 "),_q=n(h0e,"A",{href:!0});var rYr=s(_q);D1o=r(rYr,"ViTMAEModel"),rYr.forEach(t),G1o=r(h0e," (ViTMAE model)"),h0e.forEach(t),O1o=i($),Cu=n($,"LI",{});var p0e=s(Cu);Sse=n(p0e,"STRONG",{});var tYr=s(Sse);V1o=r(tYr,"wav2vec2"),tYr.forEach(t),X1o=r(p0e," \u2014 "),bq=n(p0e,"A",{href:!0});var aYr=s(bq);z1o=r(aYr,"Wav2Vec2Model"),aYr.forEach(t),Q1o=r(p0e," (Wav2Vec2 model)"),p0e.forEach(t),W1o=i($),wu=n($,"LI",{});var u0e=s(wu);Rse=n(u0e,"STRONG",{});var nYr=s(Rse);H1o=r(nYr,"wavlm"),nYr.forEach(t),U1o=r(u0e," \u2014 "),vq=n(u0e,"A",{href:!0});var sYr=s(vq);J1o=r(sYr,"WavLMModel"),sYr.forEach(t),Y1o=r(u0e," (WavLM model)"),u0e.forEach(t),K1o=i($),Au=n($,"LI",{});var _0e=s(Au);Pse=n(_0e,"STRONG",{});var lYr=s(Pse);Z1o=r(lYr,"xglm"),lYr.forEach(t),e7o=r(_0e," \u2014 "),Fq=n(_0e,"A",{href:!0});var iYr=s(Fq);o7o=r(iYr,"XGLMModel"),iYr.forEach(t),r7o=r(_0e," (XGLM model)"),_0e.forEach(t),t7o=i($),yu=n($,"LI",{});var b0e=s(yu);Bse=n(b0e,"STRONG",{});var dYr=s(Bse);a7o=r(dYr,"xlm"),dYr.forEach(t),n7o=r(b0e," \u2014 "),Tq=n(b0e,"A",{href:!0});var cYr=s(Tq);s7o=r(cYr,"XLMModel"),cYr.forEach(t),l7o=r(b0e," (XLM model)"),b0e.forEach(t),i7o=i($),Lu=n($,"LI",{});var v0e=s(Lu);Ise=n(v0e,"STRONG",{});var fYr=s(Ise);d7o=r(fYr,"xlm-prophetnet"),fYr.forEach(t),c7o=r(v0e," \u2014 "),Mq=n(v0e,"A",{href:!0});var mYr=s(Mq);f7o=r(mYr,"XLMProphetNetModel"),mYr.forEach(t),m7o=r(v0e," (XLMProphetNet model)"),v0e.forEach(t),g7o=i($),xu=n($,"LI",{});var F0e=s(xu);qse=n(F0e,"STRONG",{});var gYr=s(qse);h7o=r(gYr,"xlm-roberta"),gYr.forEach(t),p7o=r(F0e," \u2014 "),Eq=n(F0e,"A",{href:!0});var hYr=s(Eq);u7o=r(hYr,"XLMRobertaModel"),hYr.forEach(t),_7o=r(F0e," (XLM-RoBERTa model)"),F0e.forEach(t),b7o=i($),$u=n($,"LI",{});var T0e=s($u);Nse=n(T0e,"STRONG",{});var pYr=s(Nse);v7o=r(pYr,"xlm-roberta-xl"),pYr.forEach(t),F7o=r(T0e," \u2014 "),Cq=n(T0e,"A",{href:!0});var uYr=s(Cq);T7o=r(uYr,"XLMRobertaXLModel"),uYr.forEach(t),M7o=r(T0e," (XLM-RoBERTa-XL model)"),T0e.forEach(t),E7o=i($),ku=n($,"LI",{});var M0e=s(ku);jse=n(M0e,"STRONG",{});var _Yr=s(jse);C7o=r(_Yr,"xlnet"),_Yr.forEach(t),w7o=r(M0e," \u2014 "),wq=n(M0e,"A",{href:!0});var bYr=s(wq);A7o=r(bYr,"XLNetModel"),bYr.forEach(t),y7o=r(M0e," (XLNet model)"),M0e.forEach(t),L7o=i($),Su=n($,"LI",{});var E0e=s(Su);Dse=n(E0e,"STRONG",{});var vYr=s(Dse);x7o=r(vYr,"yolos"),vYr.forEach(t),$7o=r(E0e," \u2014 "),Aq=n(E0e,"A",{href:!0});var FYr=s(Aq);k7o=r(FYr,"YolosModel"),FYr.forEach(t),S7o=r(E0e," (YOLOS model)"),E0e.forEach(t),R7o=i($),Ru=n($,"LI",{});var C0e=s(Ru);Gse=n(C0e,"STRONG",{});var TYr=s(Gse);P7o=r(TYr,"yoso"),TYr.forEach(t),B7o=r(C0e," \u2014 "),yq=n(C0e,"A",{href:!0});var MYr=s(yq);I7o=r(MYr,"YosoModel"),MYr.forEach(t),q7o=r(C0e," (YOSO model)"),C0e.forEach(t),$.forEach(t),N7o=i(Zt),Pu=n(Zt,"P",{});var w0e=s(Pu);j7o=r(w0e,"The model is set in evaluation mode by default using "),Ose=n(w0e,"CODE",{});var EYr=s(Ose);D7o=r(EYr,"model.eval()"),EYr.forEach(t),G7o=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=n(w0e,"CODE",{});var CYr=s(Vse);O7o=r(CYr,"model.train()"),CYr.forEach(t),w0e.forEach(t),V7o=i(Zt),T(Bu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),JBe=i(f),Ci=n(f,"H2",{class:!0});var eNe=s(Ci);Iu=n(eNe,"A",{id:!0,class:!0,href:!0});var wYr=s(Iu);Xse=n(wYr,"SPAN",{});var AYr=s(Xse);T(A6.$$.fragment,AYr),AYr.forEach(t),wYr.forEach(t),X7o=i(eNe),zse=n(eNe,"SPAN",{});var yYr=s(zse);z7o=r(yYr,"AutoModelForPreTraining"),yYr.forEach(t),eNe.forEach(t),YBe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(y6.$$.fragment,Ds),Q7o=i(Ds),wi=n(Ds,"P",{});var sK=s(wi);W7o=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lq=n(sK,"A",{href:!0});var LYr=s(Lq);H7o=r(LYr,"from_pretrained()"),LYr.forEach(t),U7o=r(sK," class method or the "),xq=n(sK,"A",{href:!0});var xYr=s(xq);J7o=r(xYr,"from_config()"),xYr.forEach(t),Y7o=r(sK,` class
method.`),sK.forEach(t),K7o=i(Ds),L6=n(Ds,"P",{});var oNe=s(L6);Z7o=r(oNe,"This class cannot be instantiated directly using "),Qse=n(oNe,"CODE",{});var $Yr=s(Qse);ebo=r($Yr,"__init__()"),$Yr.forEach(t),obo=r(oNe," (throws an error)."),oNe.forEach(t),rbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var eA=s(rt);T(x6.$$.fragment,eA),tbo=i(eA),Wse=n(eA,"P",{});var kYr=s(Wse);abo=r(kYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kYr.forEach(t),nbo=i(eA),Ai=n(eA,"P",{});var lK=s(Ai);sbo=r(lK,`Note:
Loading a model from its configuration file does `),Hse=n(lK,"STRONG",{});var SYr=s(Hse);lbo=r(SYr,"not"),SYr.forEach(t),ibo=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=n(lK,"A",{href:!0});var RYr=s($q);dbo=r(RYr,"from_pretrained()"),RYr.forEach(t),cbo=r(lK," to load the model weights."),lK.forEach(t),fbo=i(eA),T(qu.$$.fragment,eA),eA.forEach(t),mbo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T($6.$$.fragment,ea),gbo=i(ea),Use=n(ea,"P",{});var PYr=s(Use);hbo=r(PYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PYr.forEach(t),pbo=i(ea),ya=n(ea,"P",{});var oA=s(ya);ubo=r(oA,"The model class to instantiate is selected based on the "),Jse=n(oA,"CODE",{});var BYr=s(Jse);_bo=r(BYr,"model_type"),BYr.forEach(t),bbo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Yse=n(oA,"CODE",{});var IYr=s(Yse);vbo=r(IYr,"pretrained_model_name_or_path"),IYr.forEach(t),Fbo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=n(oA,"CODE",{});var qYr=s(Kse);Tbo=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),Mbo=r(oA,":"),oA.forEach(t),Ebo=i(ea),G=n(ea,"UL",{});var O=s(G);Nu=n(O,"LI",{});var A0e=s(Nu);Zse=n(A0e,"STRONG",{});var NYr=s(Zse);Cbo=r(NYr,"albert"),NYr.forEach(t),wbo=r(A0e," \u2014 "),kq=n(A0e,"A",{href:!0});var jYr=s(kq);Abo=r(jYr,"AlbertForPreTraining"),jYr.forEach(t),ybo=r(A0e," (ALBERT model)"),A0e.forEach(t),Lbo=i(O),ju=n(O,"LI",{});var y0e=s(ju);ele=n(y0e,"STRONG",{});var DYr=s(ele);xbo=r(DYr,"bart"),DYr.forEach(t),$bo=r(y0e," \u2014 "),Sq=n(y0e,"A",{href:!0});var GYr=s(Sq);kbo=r(GYr,"BartForConditionalGeneration"),GYr.forEach(t),Sbo=r(y0e," (BART model)"),y0e.forEach(t),Rbo=i(O),Du=n(O,"LI",{});var L0e=s(Du);ole=n(L0e,"STRONG",{});var OYr=s(ole);Pbo=r(OYr,"bert"),OYr.forEach(t),Bbo=r(L0e," \u2014 "),Rq=n(L0e,"A",{href:!0});var VYr=s(Rq);Ibo=r(VYr,"BertForPreTraining"),VYr.forEach(t),qbo=r(L0e," (BERT model)"),L0e.forEach(t),Nbo=i(O),Gu=n(O,"LI",{});var x0e=s(Gu);rle=n(x0e,"STRONG",{});var XYr=s(rle);jbo=r(XYr,"big_bird"),XYr.forEach(t),Dbo=r(x0e," \u2014 "),Pq=n(x0e,"A",{href:!0});var zYr=s(Pq);Gbo=r(zYr,"BigBirdForPreTraining"),zYr.forEach(t),Obo=r(x0e," (BigBird model)"),x0e.forEach(t),Vbo=i(O),Ou=n(O,"LI",{});var $0e=s(Ou);tle=n($0e,"STRONG",{});var QYr=s(tle);Xbo=r(QYr,"camembert"),QYr.forEach(t),zbo=r($0e," \u2014 "),Bq=n($0e,"A",{href:!0});var WYr=s(Bq);Qbo=r(WYr,"CamembertForMaskedLM"),WYr.forEach(t),Wbo=r($0e," (CamemBERT model)"),$0e.forEach(t),Hbo=i(O),Vu=n(O,"LI",{});var k0e=s(Vu);ale=n(k0e,"STRONG",{});var HYr=s(ale);Ubo=r(HYr,"ctrl"),HYr.forEach(t),Jbo=r(k0e," \u2014 "),Iq=n(k0e,"A",{href:!0});var UYr=s(Iq);Ybo=r(UYr,"CTRLLMHeadModel"),UYr.forEach(t),Kbo=r(k0e," (CTRL model)"),k0e.forEach(t),Zbo=i(O),Xu=n(O,"LI",{});var S0e=s(Xu);nle=n(S0e,"STRONG",{});var JYr=s(nle);e4o=r(JYr,"data2vec-text"),JYr.forEach(t),o4o=r(S0e," \u2014 "),qq=n(S0e,"A",{href:!0});var YYr=s(qq);r4o=r(YYr,"Data2VecTextForMaskedLM"),YYr.forEach(t),t4o=r(S0e," (Data2VecText model)"),S0e.forEach(t),a4o=i(O),zu=n(O,"LI",{});var R0e=s(zu);sle=n(R0e,"STRONG",{});var KYr=s(sle);n4o=r(KYr,"deberta"),KYr.forEach(t),s4o=r(R0e," \u2014 "),Nq=n(R0e,"A",{href:!0});var ZYr=s(Nq);l4o=r(ZYr,"DebertaForMaskedLM"),ZYr.forEach(t),i4o=r(R0e," (DeBERTa model)"),R0e.forEach(t),d4o=i(O),Qu=n(O,"LI",{});var P0e=s(Qu);lle=n(P0e,"STRONG",{});var eKr=s(lle);c4o=r(eKr,"deberta-v2"),eKr.forEach(t),f4o=r(P0e," \u2014 "),jq=n(P0e,"A",{href:!0});var oKr=s(jq);m4o=r(oKr,"DebertaV2ForMaskedLM"),oKr.forEach(t),g4o=r(P0e," (DeBERTa-v2 model)"),P0e.forEach(t),h4o=i(O),Wu=n(O,"LI",{});var B0e=s(Wu);ile=n(B0e,"STRONG",{});var rKr=s(ile);p4o=r(rKr,"distilbert"),rKr.forEach(t),u4o=r(B0e," \u2014 "),Dq=n(B0e,"A",{href:!0});var tKr=s(Dq);_4o=r(tKr,"DistilBertForMaskedLM"),tKr.forEach(t),b4o=r(B0e," (DistilBERT model)"),B0e.forEach(t),v4o=i(O),Hu=n(O,"LI",{});var I0e=s(Hu);dle=n(I0e,"STRONG",{});var aKr=s(dle);F4o=r(aKr,"electra"),aKr.forEach(t),T4o=r(I0e," \u2014 "),Gq=n(I0e,"A",{href:!0});var nKr=s(Gq);M4o=r(nKr,"ElectraForPreTraining"),nKr.forEach(t),E4o=r(I0e," (ELECTRA model)"),I0e.forEach(t),C4o=i(O),Uu=n(O,"LI",{});var q0e=s(Uu);cle=n(q0e,"STRONG",{});var sKr=s(cle);w4o=r(sKr,"flaubert"),sKr.forEach(t),A4o=r(q0e," \u2014 "),Oq=n(q0e,"A",{href:!0});var lKr=s(Oq);y4o=r(lKr,"FlaubertWithLMHeadModel"),lKr.forEach(t),L4o=r(q0e," (FlauBERT model)"),q0e.forEach(t),x4o=i(O),Ju=n(O,"LI",{});var N0e=s(Ju);fle=n(N0e,"STRONG",{});var iKr=s(fle);$4o=r(iKr,"flava"),iKr.forEach(t),k4o=r(N0e," \u2014 "),Vq=n(N0e,"A",{href:!0});var dKr=s(Vq);S4o=r(dKr,"FlavaForPreTraining"),dKr.forEach(t),R4o=r(N0e," (Flava model)"),N0e.forEach(t),P4o=i(O),Yu=n(O,"LI",{});var j0e=s(Yu);mle=n(j0e,"STRONG",{});var cKr=s(mle);B4o=r(cKr,"fnet"),cKr.forEach(t),I4o=r(j0e," \u2014 "),Xq=n(j0e,"A",{href:!0});var fKr=s(Xq);q4o=r(fKr,"FNetForPreTraining"),fKr.forEach(t),N4o=r(j0e," (FNet model)"),j0e.forEach(t),j4o=i(O),Ku=n(O,"LI",{});var D0e=s(Ku);gle=n(D0e,"STRONG",{});var mKr=s(gle);D4o=r(mKr,"fsmt"),mKr.forEach(t),G4o=r(D0e," \u2014 "),zq=n(D0e,"A",{href:!0});var gKr=s(zq);O4o=r(gKr,"FSMTForConditionalGeneration"),gKr.forEach(t),V4o=r(D0e," (FairSeq Machine-Translation model)"),D0e.forEach(t),X4o=i(O),Zu=n(O,"LI",{});var G0e=s(Zu);hle=n(G0e,"STRONG",{});var hKr=s(hle);z4o=r(hKr,"funnel"),hKr.forEach(t),Q4o=r(G0e," \u2014 "),Qq=n(G0e,"A",{href:!0});var pKr=s(Qq);W4o=r(pKr,"FunnelForPreTraining"),pKr.forEach(t),H4o=r(G0e," (Funnel Transformer model)"),G0e.forEach(t),U4o=i(O),e_=n(O,"LI",{});var O0e=s(e_);ple=n(O0e,"STRONG",{});var uKr=s(ple);J4o=r(uKr,"gpt2"),uKr.forEach(t),Y4o=r(O0e," \u2014 "),Wq=n(O0e,"A",{href:!0});var _Kr=s(Wq);K4o=r(_Kr,"GPT2LMHeadModel"),_Kr.forEach(t),Z4o=r(O0e," (OpenAI GPT-2 model)"),O0e.forEach(t),evo=i(O),o_=n(O,"LI",{});var V0e=s(o_);ule=n(V0e,"STRONG",{});var bKr=s(ule);ovo=r(bKr,"ibert"),bKr.forEach(t),rvo=r(V0e," \u2014 "),Hq=n(V0e,"A",{href:!0});var vKr=s(Hq);tvo=r(vKr,"IBertForMaskedLM"),vKr.forEach(t),avo=r(V0e," (I-BERT model)"),V0e.forEach(t),nvo=i(O),r_=n(O,"LI",{});var X0e=s(r_);_le=n(X0e,"STRONG",{});var FKr=s(_le);svo=r(FKr,"layoutlm"),FKr.forEach(t),lvo=r(X0e," \u2014 "),Uq=n(X0e,"A",{href:!0});var TKr=s(Uq);ivo=r(TKr,"LayoutLMForMaskedLM"),TKr.forEach(t),dvo=r(X0e," (LayoutLM model)"),X0e.forEach(t),cvo=i(O),t_=n(O,"LI",{});var z0e=s(t_);ble=n(z0e,"STRONG",{});var MKr=s(ble);fvo=r(MKr,"longformer"),MKr.forEach(t),mvo=r(z0e," \u2014 "),Jq=n(z0e,"A",{href:!0});var EKr=s(Jq);gvo=r(EKr,"LongformerForMaskedLM"),EKr.forEach(t),hvo=r(z0e," (Longformer model)"),z0e.forEach(t),pvo=i(O),a_=n(O,"LI",{});var Q0e=s(a_);vle=n(Q0e,"STRONG",{});var CKr=s(vle);uvo=r(CKr,"lxmert"),CKr.forEach(t),_vo=r(Q0e," \u2014 "),Yq=n(Q0e,"A",{href:!0});var wKr=s(Yq);bvo=r(wKr,"LxmertForPreTraining"),wKr.forEach(t),vvo=r(Q0e," (LXMERT model)"),Q0e.forEach(t),Fvo=i(O),n_=n(O,"LI",{});var W0e=s(n_);Fle=n(W0e,"STRONG",{});var AKr=s(Fle);Tvo=r(AKr,"megatron-bert"),AKr.forEach(t),Mvo=r(W0e," \u2014 "),Kq=n(W0e,"A",{href:!0});var yKr=s(Kq);Evo=r(yKr,"MegatronBertForPreTraining"),yKr.forEach(t),Cvo=r(W0e," (MegatronBert model)"),W0e.forEach(t),wvo=i(O),s_=n(O,"LI",{});var H0e=s(s_);Tle=n(H0e,"STRONG",{});var LKr=s(Tle);Avo=r(LKr,"mobilebert"),LKr.forEach(t),yvo=r(H0e," \u2014 "),Zq=n(H0e,"A",{href:!0});var xKr=s(Zq);Lvo=r(xKr,"MobileBertForPreTraining"),xKr.forEach(t),xvo=r(H0e," (MobileBERT model)"),H0e.forEach(t),$vo=i(O),l_=n(O,"LI",{});var U0e=s(l_);Mle=n(U0e,"STRONG",{});var $Kr=s(Mle);kvo=r($Kr,"mpnet"),$Kr.forEach(t),Svo=r(U0e," \u2014 "),eN=n(U0e,"A",{href:!0});var kKr=s(eN);Rvo=r(kKr,"MPNetForMaskedLM"),kKr.forEach(t),Pvo=r(U0e," (MPNet model)"),U0e.forEach(t),Bvo=i(O),i_=n(O,"LI",{});var J0e=s(i_);Ele=n(J0e,"STRONG",{});var SKr=s(Ele);Ivo=r(SKr,"openai-gpt"),SKr.forEach(t),qvo=r(J0e," \u2014 "),oN=n(J0e,"A",{href:!0});var RKr=s(oN);Nvo=r(RKr,"OpenAIGPTLMHeadModel"),RKr.forEach(t),jvo=r(J0e," (OpenAI GPT model)"),J0e.forEach(t),Dvo=i(O),d_=n(O,"LI",{});var Y0e=s(d_);Cle=n(Y0e,"STRONG",{});var PKr=s(Cle);Gvo=r(PKr,"retribert"),PKr.forEach(t),Ovo=r(Y0e," \u2014 "),rN=n(Y0e,"A",{href:!0});var BKr=s(rN);Vvo=r(BKr,"RetriBertModel"),BKr.forEach(t),Xvo=r(Y0e," (RetriBERT model)"),Y0e.forEach(t),zvo=i(O),c_=n(O,"LI",{});var K0e=s(c_);wle=n(K0e,"STRONG",{});var IKr=s(wle);Qvo=r(IKr,"roberta"),IKr.forEach(t),Wvo=r(K0e," \u2014 "),tN=n(K0e,"A",{href:!0});var qKr=s(tN);Hvo=r(qKr,"RobertaForMaskedLM"),qKr.forEach(t),Uvo=r(K0e," (RoBERTa model)"),K0e.forEach(t),Jvo=i(O),f_=n(O,"LI",{});var Z0e=s(f_);Ale=n(Z0e,"STRONG",{});var NKr=s(Ale);Yvo=r(NKr,"splinter"),NKr.forEach(t),Kvo=r(Z0e," \u2014 "),aN=n(Z0e,"A",{href:!0});var jKr=s(aN);Zvo=r(jKr,"SplinterForPreTraining"),jKr.forEach(t),eFo=r(Z0e," (Splinter model)"),Z0e.forEach(t),oFo=i(O),m_=n(O,"LI",{});var e6e=s(m_);yle=n(e6e,"STRONG",{});var DKr=s(yle);rFo=r(DKr,"squeezebert"),DKr.forEach(t),tFo=r(e6e," \u2014 "),nN=n(e6e,"A",{href:!0});var GKr=s(nN);aFo=r(GKr,"SqueezeBertForMaskedLM"),GKr.forEach(t),nFo=r(e6e," (SqueezeBERT model)"),e6e.forEach(t),sFo=i(O),g_=n(O,"LI",{});var o6e=s(g_);Lle=n(o6e,"STRONG",{});var OKr=s(Lle);lFo=r(OKr,"t5"),OKr.forEach(t),iFo=r(o6e," \u2014 "),sN=n(o6e,"A",{href:!0});var VKr=s(sN);dFo=r(VKr,"T5ForConditionalGeneration"),VKr.forEach(t),cFo=r(o6e," (T5 model)"),o6e.forEach(t),fFo=i(O),h_=n(O,"LI",{});var r6e=s(h_);xle=n(r6e,"STRONG",{});var XKr=s(xle);mFo=r(XKr,"tapas"),XKr.forEach(t),gFo=r(r6e," \u2014 "),lN=n(r6e,"A",{href:!0});var zKr=s(lN);hFo=r(zKr,"TapasForMaskedLM"),zKr.forEach(t),pFo=r(r6e," (TAPAS model)"),r6e.forEach(t),uFo=i(O),p_=n(O,"LI",{});var t6e=s(p_);$le=n(t6e,"STRONG",{});var QKr=s($le);_Fo=r(QKr,"transfo-xl"),QKr.forEach(t),bFo=r(t6e," \u2014 "),iN=n(t6e,"A",{href:!0});var WKr=s(iN);vFo=r(WKr,"TransfoXLLMHeadModel"),WKr.forEach(t),FFo=r(t6e," (Transformer-XL model)"),t6e.forEach(t),TFo=i(O),u_=n(O,"LI",{});var a6e=s(u_);kle=n(a6e,"STRONG",{});var HKr=s(kle);MFo=r(HKr,"unispeech"),HKr.forEach(t),EFo=r(a6e," \u2014 "),dN=n(a6e,"A",{href:!0});var UKr=s(dN);CFo=r(UKr,"UniSpeechForPreTraining"),UKr.forEach(t),wFo=r(a6e," (UniSpeech model)"),a6e.forEach(t),AFo=i(O),__=n(O,"LI",{});var n6e=s(__);Sle=n(n6e,"STRONG",{});var JKr=s(Sle);yFo=r(JKr,"unispeech-sat"),JKr.forEach(t),LFo=r(n6e," \u2014 "),cN=n(n6e,"A",{href:!0});var YKr=s(cN);xFo=r(YKr,"UniSpeechSatForPreTraining"),YKr.forEach(t),$Fo=r(n6e," (UniSpeechSat model)"),n6e.forEach(t),kFo=i(O),b_=n(O,"LI",{});var s6e=s(b_);Rle=n(s6e,"STRONG",{});var KKr=s(Rle);SFo=r(KKr,"visual_bert"),KKr.forEach(t),RFo=r(s6e," \u2014 "),fN=n(s6e,"A",{href:!0});var ZKr=s(fN);PFo=r(ZKr,"VisualBertForPreTraining"),ZKr.forEach(t),BFo=r(s6e," (VisualBert model)"),s6e.forEach(t),IFo=i(O),v_=n(O,"LI",{});var l6e=s(v_);Ple=n(l6e,"STRONG",{});var eZr=s(Ple);qFo=r(eZr,"vit_mae"),eZr.forEach(t),NFo=r(l6e," \u2014 "),mN=n(l6e,"A",{href:!0});var oZr=s(mN);jFo=r(oZr,"ViTMAEForPreTraining"),oZr.forEach(t),DFo=r(l6e," (ViTMAE model)"),l6e.forEach(t),GFo=i(O),F_=n(O,"LI",{});var i6e=s(F_);Ble=n(i6e,"STRONG",{});var rZr=s(Ble);OFo=r(rZr,"wav2vec2"),rZr.forEach(t),VFo=r(i6e," \u2014 "),gN=n(i6e,"A",{href:!0});var tZr=s(gN);XFo=r(tZr,"Wav2Vec2ForPreTraining"),tZr.forEach(t),zFo=r(i6e," (Wav2Vec2 model)"),i6e.forEach(t),QFo=i(O),T_=n(O,"LI",{});var d6e=s(T_);Ile=n(d6e,"STRONG",{});var aZr=s(Ile);WFo=r(aZr,"xlm"),aZr.forEach(t),HFo=r(d6e," \u2014 "),hN=n(d6e,"A",{href:!0});var nZr=s(hN);UFo=r(nZr,"XLMWithLMHeadModel"),nZr.forEach(t),JFo=r(d6e," (XLM model)"),d6e.forEach(t),YFo=i(O),M_=n(O,"LI",{});var c6e=s(M_);qle=n(c6e,"STRONG",{});var sZr=s(qle);KFo=r(sZr,"xlm-roberta"),sZr.forEach(t),ZFo=r(c6e," \u2014 "),pN=n(c6e,"A",{href:!0});var lZr=s(pN);eTo=r(lZr,"XLMRobertaForMaskedLM"),lZr.forEach(t),oTo=r(c6e," (XLM-RoBERTa model)"),c6e.forEach(t),rTo=i(O),E_=n(O,"LI",{});var f6e=s(E_);Nle=n(f6e,"STRONG",{});var iZr=s(Nle);tTo=r(iZr,"xlm-roberta-xl"),iZr.forEach(t),aTo=r(f6e," \u2014 "),uN=n(f6e,"A",{href:!0});var dZr=s(uN);nTo=r(dZr,"XLMRobertaXLForMaskedLM"),dZr.forEach(t),sTo=r(f6e," (XLM-RoBERTa-XL model)"),f6e.forEach(t),lTo=i(O),C_=n(O,"LI",{});var m6e=s(C_);jle=n(m6e,"STRONG",{});var cZr=s(jle);iTo=r(cZr,"xlnet"),cZr.forEach(t),dTo=r(m6e," \u2014 "),_N=n(m6e,"A",{href:!0});var fZr=s(_N);cTo=r(fZr,"XLNetLMHeadModel"),fZr.forEach(t),fTo=r(m6e," (XLNet model)"),m6e.forEach(t),O.forEach(t),mTo=i(ea),w_=n(ea,"P",{});var g6e=s(w_);gTo=r(g6e,"The model is set in evaluation mode by default using "),Dle=n(g6e,"CODE",{});var mZr=s(Dle);hTo=r(mZr,"model.eval()"),mZr.forEach(t),pTo=r(g6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=n(g6e,"CODE",{});var gZr=s(Gle);uTo=r(gZr,"model.train()"),gZr.forEach(t),g6e.forEach(t),_To=i(ea),T(A_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),KBe=i(f),yi=n(f,"H2",{class:!0});var rNe=s(yi);y_=n(rNe,"A",{id:!0,class:!0,href:!0});var hZr=s(y_);Ole=n(hZr,"SPAN",{});var pZr=s(Ole);T(k6.$$.fragment,pZr),pZr.forEach(t),hZr.forEach(t),bTo=i(rNe),Vle=n(rNe,"SPAN",{});var uZr=s(Vle);vTo=r(uZr,"AutoModelForCausalLM"),uZr.forEach(t),rNe.forEach(t),ZBe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(S6.$$.fragment,Gs),FTo=i(Gs),Li=n(Gs,"P",{});var iK=s(Li);TTo=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bN=n(iK,"A",{href:!0});var _Zr=s(bN);MTo=r(_Zr,"from_pretrained()"),_Zr.forEach(t),ETo=r(iK," class method or the "),vN=n(iK,"A",{href:!0});var bZr=s(vN);CTo=r(bZr,"from_config()"),bZr.forEach(t),wTo=r(iK,` class
method.`),iK.forEach(t),ATo=i(Gs),R6=n(Gs,"P",{});var tNe=s(R6);yTo=r(tNe,"This class cannot be instantiated directly using "),Xle=n(tNe,"CODE",{});var vZr=s(Xle);LTo=r(vZr,"__init__()"),vZr.forEach(t),xTo=r(tNe," (throws an error)."),tNe.forEach(t),$To=i(Gs),tt=n(Gs,"DIV",{class:!0});var rA=s(tt);T(P6.$$.fragment,rA),kTo=i(rA),zle=n(rA,"P",{});var FZr=s(zle);STo=r(FZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FZr.forEach(t),RTo=i(rA),xi=n(rA,"P",{});var dK=s(xi);PTo=r(dK,`Note:
Loading a model from its configuration file does `),Qle=n(dK,"STRONG",{});var TZr=s(Qle);BTo=r(TZr,"not"),TZr.forEach(t),ITo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=n(dK,"A",{href:!0});var MZr=s(FN);qTo=r(MZr,"from_pretrained()"),MZr.forEach(t),NTo=r(dK," to load the model weights."),dK.forEach(t),jTo=i(rA),T(L_.$$.fragment,rA),rA.forEach(t),DTo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(B6.$$.fragment,oa),GTo=i(oa),Wle=n(oa,"P",{});var EZr=s(Wle);OTo=r(EZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EZr.forEach(t),VTo=i(oa),La=n(oa,"P",{});var tA=s(La);XTo=r(tA,"The model class to instantiate is selected based on the "),Hle=n(tA,"CODE",{});var CZr=s(Hle);zTo=r(CZr,"model_type"),CZr.forEach(t),QTo=r(tA,` property of the config object (either
passed as an argument or loaded from `),Ule=n(tA,"CODE",{});var wZr=s(Ule);WTo=r(wZr,"pretrained_model_name_or_path"),wZr.forEach(t),HTo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=n(tA,"CODE",{});var AZr=s(Jle);UTo=r(AZr,"pretrained_model_name_or_path"),AZr.forEach(t),JTo=r(tA,":"),tA.forEach(t),YTo=i(oa),z=n(oa,"UL",{});var W=s(z);x_=n(W,"LI",{});var h6e=s(x_);Yle=n(h6e,"STRONG",{});var yZr=s(Yle);KTo=r(yZr,"bart"),yZr.forEach(t),ZTo=r(h6e," \u2014 "),TN=n(h6e,"A",{href:!0});var LZr=s(TN);eMo=r(LZr,"BartForCausalLM"),LZr.forEach(t),oMo=r(h6e," (BART model)"),h6e.forEach(t),rMo=i(W),$_=n(W,"LI",{});var p6e=s($_);Kle=n(p6e,"STRONG",{});var xZr=s(Kle);tMo=r(xZr,"bert"),xZr.forEach(t),aMo=r(p6e," \u2014 "),MN=n(p6e,"A",{href:!0});var $Zr=s(MN);nMo=r($Zr,"BertLMHeadModel"),$Zr.forEach(t),sMo=r(p6e," (BERT model)"),p6e.forEach(t),lMo=i(W),k_=n(W,"LI",{});var u6e=s(k_);Zle=n(u6e,"STRONG",{});var kZr=s(Zle);iMo=r(kZr,"bert-generation"),kZr.forEach(t),dMo=r(u6e," \u2014 "),EN=n(u6e,"A",{href:!0});var SZr=s(EN);cMo=r(SZr,"BertGenerationDecoder"),SZr.forEach(t),fMo=r(u6e," (Bert Generation model)"),u6e.forEach(t),mMo=i(W),S_=n(W,"LI",{});var _6e=s(S_);eie=n(_6e,"STRONG",{});var RZr=s(eie);gMo=r(RZr,"big_bird"),RZr.forEach(t),hMo=r(_6e," \u2014 "),CN=n(_6e,"A",{href:!0});var PZr=s(CN);pMo=r(PZr,"BigBirdForCausalLM"),PZr.forEach(t),uMo=r(_6e," (BigBird model)"),_6e.forEach(t),_Mo=i(W),R_=n(W,"LI",{});var b6e=s(R_);oie=n(b6e,"STRONG",{});var BZr=s(oie);bMo=r(BZr,"bigbird_pegasus"),BZr.forEach(t),vMo=r(b6e," \u2014 "),wN=n(b6e,"A",{href:!0});var IZr=s(wN);FMo=r(IZr,"BigBirdPegasusForCausalLM"),IZr.forEach(t),TMo=r(b6e," (BigBirdPegasus model)"),b6e.forEach(t),MMo=i(W),P_=n(W,"LI",{});var v6e=s(P_);rie=n(v6e,"STRONG",{});var qZr=s(rie);EMo=r(qZr,"blenderbot"),qZr.forEach(t),CMo=r(v6e," \u2014 "),AN=n(v6e,"A",{href:!0});var NZr=s(AN);wMo=r(NZr,"BlenderbotForCausalLM"),NZr.forEach(t),AMo=r(v6e," (Blenderbot model)"),v6e.forEach(t),yMo=i(W),B_=n(W,"LI",{});var F6e=s(B_);tie=n(F6e,"STRONG",{});var jZr=s(tie);LMo=r(jZr,"blenderbot-small"),jZr.forEach(t),xMo=r(F6e," \u2014 "),yN=n(F6e,"A",{href:!0});var DZr=s(yN);$Mo=r(DZr,"BlenderbotSmallForCausalLM"),DZr.forEach(t),kMo=r(F6e," (BlenderbotSmall model)"),F6e.forEach(t),SMo=i(W),I_=n(W,"LI",{});var T6e=s(I_);aie=n(T6e,"STRONG",{});var GZr=s(aie);RMo=r(GZr,"camembert"),GZr.forEach(t),PMo=r(T6e," \u2014 "),LN=n(T6e,"A",{href:!0});var OZr=s(LN);BMo=r(OZr,"CamembertForCausalLM"),OZr.forEach(t),IMo=r(T6e," (CamemBERT model)"),T6e.forEach(t),qMo=i(W),q_=n(W,"LI",{});var M6e=s(q_);nie=n(M6e,"STRONG",{});var VZr=s(nie);NMo=r(VZr,"ctrl"),VZr.forEach(t),jMo=r(M6e," \u2014 "),xN=n(M6e,"A",{href:!0});var XZr=s(xN);DMo=r(XZr,"CTRLLMHeadModel"),XZr.forEach(t),GMo=r(M6e," (CTRL model)"),M6e.forEach(t),OMo=i(W),N_=n(W,"LI",{});var E6e=s(N_);sie=n(E6e,"STRONG",{});var zZr=s(sie);VMo=r(zZr,"data2vec-text"),zZr.forEach(t),XMo=r(E6e," \u2014 "),$N=n(E6e,"A",{href:!0});var QZr=s($N);zMo=r(QZr,"Data2VecTextForCausalLM"),QZr.forEach(t),QMo=r(E6e," (Data2VecText model)"),E6e.forEach(t),WMo=i(W),j_=n(W,"LI",{});var C6e=s(j_);lie=n(C6e,"STRONG",{});var WZr=s(lie);HMo=r(WZr,"electra"),WZr.forEach(t),UMo=r(C6e," \u2014 "),kN=n(C6e,"A",{href:!0});var HZr=s(kN);JMo=r(HZr,"ElectraForCausalLM"),HZr.forEach(t),YMo=r(C6e," (ELECTRA model)"),C6e.forEach(t),KMo=i(W),D_=n(W,"LI",{});var w6e=s(D_);iie=n(w6e,"STRONG",{});var UZr=s(iie);ZMo=r(UZr,"gpt2"),UZr.forEach(t),eEo=r(w6e," \u2014 "),SN=n(w6e,"A",{href:!0});var JZr=s(SN);oEo=r(JZr,"GPT2LMHeadModel"),JZr.forEach(t),rEo=r(w6e," (OpenAI GPT-2 model)"),w6e.forEach(t),tEo=i(W),G_=n(W,"LI",{});var A6e=s(G_);die=n(A6e,"STRONG",{});var YZr=s(die);aEo=r(YZr,"gpt_neo"),YZr.forEach(t),nEo=r(A6e," \u2014 "),RN=n(A6e,"A",{href:!0});var KZr=s(RN);sEo=r(KZr,"GPTNeoForCausalLM"),KZr.forEach(t),lEo=r(A6e," (GPT Neo model)"),A6e.forEach(t),iEo=i(W),O_=n(W,"LI",{});var y6e=s(O_);cie=n(y6e,"STRONG",{});var ZZr=s(cie);dEo=r(ZZr,"gptj"),ZZr.forEach(t),cEo=r(y6e," \u2014 "),PN=n(y6e,"A",{href:!0});var eet=s(PN);fEo=r(eet,"GPTJForCausalLM"),eet.forEach(t),mEo=r(y6e," (GPT-J model)"),y6e.forEach(t),gEo=i(W),V_=n(W,"LI",{});var L6e=s(V_);fie=n(L6e,"STRONG",{});var oet=s(fie);hEo=r(oet,"marian"),oet.forEach(t),pEo=r(L6e," \u2014 "),BN=n(L6e,"A",{href:!0});var ret=s(BN);uEo=r(ret,"MarianForCausalLM"),ret.forEach(t),_Eo=r(L6e," (Marian model)"),L6e.forEach(t),bEo=i(W),X_=n(W,"LI",{});var x6e=s(X_);mie=n(x6e,"STRONG",{});var tet=s(mie);vEo=r(tet,"mbart"),tet.forEach(t),FEo=r(x6e," \u2014 "),IN=n(x6e,"A",{href:!0});var aet=s(IN);TEo=r(aet,"MBartForCausalLM"),aet.forEach(t),MEo=r(x6e," (mBART model)"),x6e.forEach(t),EEo=i(W),z_=n(W,"LI",{});var $6e=s(z_);gie=n($6e,"STRONG",{});var net=s(gie);CEo=r(net,"megatron-bert"),net.forEach(t),wEo=r($6e," \u2014 "),qN=n($6e,"A",{href:!0});var set=s(qN);AEo=r(set,"MegatronBertForCausalLM"),set.forEach(t),yEo=r($6e," (MegatronBert model)"),$6e.forEach(t),LEo=i(W),Q_=n(W,"LI",{});var k6e=s(Q_);hie=n(k6e,"STRONG",{});var iet=s(hie);xEo=r(iet,"openai-gpt"),iet.forEach(t),$Eo=r(k6e," \u2014 "),NN=n(k6e,"A",{href:!0});var det=s(NN);kEo=r(det,"OpenAIGPTLMHeadModel"),det.forEach(t),SEo=r(k6e," (OpenAI GPT model)"),k6e.forEach(t),REo=i(W),W_=n(W,"LI",{});var S6e=s(W_);pie=n(S6e,"STRONG",{});var cet=s(pie);PEo=r(cet,"opt"),cet.forEach(t),BEo=r(S6e," \u2014 "),jN=n(S6e,"A",{href:!0});var fet=s(jN);IEo=r(fet,"OPTForCausalLM"),fet.forEach(t),qEo=r(S6e," (OPT model)"),S6e.forEach(t),NEo=i(W),H_=n(W,"LI",{});var R6e=s(H_);uie=n(R6e,"STRONG",{});var met=s(uie);jEo=r(met,"pegasus"),met.forEach(t),DEo=r(R6e," \u2014 "),DN=n(R6e,"A",{href:!0});var get=s(DN);GEo=r(get,"PegasusForCausalLM"),get.forEach(t),OEo=r(R6e," (Pegasus model)"),R6e.forEach(t),VEo=i(W),U_=n(W,"LI",{});var P6e=s(U_);_ie=n(P6e,"STRONG",{});var het=s(_ie);XEo=r(het,"plbart"),het.forEach(t),zEo=r(P6e," \u2014 "),GN=n(P6e,"A",{href:!0});var pet=s(GN);QEo=r(pet,"PLBartForCausalLM"),pet.forEach(t),WEo=r(P6e," (PLBart model)"),P6e.forEach(t),HEo=i(W),J_=n(W,"LI",{});var B6e=s(J_);bie=n(B6e,"STRONG",{});var uet=s(bie);UEo=r(uet,"prophetnet"),uet.forEach(t),JEo=r(B6e," \u2014 "),ON=n(B6e,"A",{href:!0});var _et=s(ON);YEo=r(_et,"ProphetNetForCausalLM"),_et.forEach(t),KEo=r(B6e," (ProphetNet model)"),B6e.forEach(t),ZEo=i(W),Y_=n(W,"LI",{});var I6e=s(Y_);vie=n(I6e,"STRONG",{});var bet=s(vie);e5o=r(bet,"qdqbert"),bet.forEach(t),o5o=r(I6e," \u2014 "),VN=n(I6e,"A",{href:!0});var vet=s(VN);r5o=r(vet,"QDQBertLMHeadModel"),vet.forEach(t),t5o=r(I6e," (QDQBert model)"),I6e.forEach(t),a5o=i(W),K_=n(W,"LI",{});var q6e=s(K_);Fie=n(q6e,"STRONG",{});var Fet=s(Fie);n5o=r(Fet,"reformer"),Fet.forEach(t),s5o=r(q6e," \u2014 "),XN=n(q6e,"A",{href:!0});var Tet=s(XN);l5o=r(Tet,"ReformerModelWithLMHead"),Tet.forEach(t),i5o=r(q6e," (Reformer model)"),q6e.forEach(t),d5o=i(W),Z_=n(W,"LI",{});var N6e=s(Z_);Tie=n(N6e,"STRONG",{});var Met=s(Tie);c5o=r(Met,"rembert"),Met.forEach(t),f5o=r(N6e," \u2014 "),zN=n(N6e,"A",{href:!0});var Eet=s(zN);m5o=r(Eet,"RemBertForCausalLM"),Eet.forEach(t),g5o=r(N6e," (RemBERT model)"),N6e.forEach(t),h5o=i(W),e2=n(W,"LI",{});var j6e=s(e2);Mie=n(j6e,"STRONG",{});var Cet=s(Mie);p5o=r(Cet,"roberta"),Cet.forEach(t),u5o=r(j6e," \u2014 "),QN=n(j6e,"A",{href:!0});var wet=s(QN);_5o=r(wet,"RobertaForCausalLM"),wet.forEach(t),b5o=r(j6e," (RoBERTa model)"),j6e.forEach(t),v5o=i(W),o2=n(W,"LI",{});var D6e=s(o2);Eie=n(D6e,"STRONG",{});var Aet=s(Eie);F5o=r(Aet,"roformer"),Aet.forEach(t),T5o=r(D6e," \u2014 "),WN=n(D6e,"A",{href:!0});var yet=s(WN);M5o=r(yet,"RoFormerForCausalLM"),yet.forEach(t),E5o=r(D6e," (RoFormer model)"),D6e.forEach(t),C5o=i(W),r2=n(W,"LI",{});var G6e=s(r2);Cie=n(G6e,"STRONG",{});var Let=s(Cie);w5o=r(Let,"speech_to_text_2"),Let.forEach(t),A5o=r(G6e," \u2014 "),HN=n(G6e,"A",{href:!0});var xet=s(HN);y5o=r(xet,"Speech2Text2ForCausalLM"),xet.forEach(t),L5o=r(G6e," (Speech2Text2 model)"),G6e.forEach(t),x5o=i(W),t2=n(W,"LI",{});var O6e=s(t2);wie=n(O6e,"STRONG",{});var $et=s(wie);$5o=r($et,"transfo-xl"),$et.forEach(t),k5o=r(O6e," \u2014 "),UN=n(O6e,"A",{href:!0});var ket=s(UN);S5o=r(ket,"TransfoXLLMHeadModel"),ket.forEach(t),R5o=r(O6e," (Transformer-XL model)"),O6e.forEach(t),P5o=i(W),a2=n(W,"LI",{});var V6e=s(a2);Aie=n(V6e,"STRONG",{});var Set=s(Aie);B5o=r(Set,"trocr"),Set.forEach(t),I5o=r(V6e," \u2014 "),JN=n(V6e,"A",{href:!0});var Ret=s(JN);q5o=r(Ret,"TrOCRForCausalLM"),Ret.forEach(t),N5o=r(V6e," (TrOCR model)"),V6e.forEach(t),j5o=i(W),n2=n(W,"LI",{});var X6e=s(n2);yie=n(X6e,"STRONG",{});var Pet=s(yie);D5o=r(Pet,"xglm"),Pet.forEach(t),G5o=r(X6e," \u2014 "),YN=n(X6e,"A",{href:!0});var Bet=s(YN);O5o=r(Bet,"XGLMForCausalLM"),Bet.forEach(t),V5o=r(X6e," (XGLM model)"),X6e.forEach(t),X5o=i(W),s2=n(W,"LI",{});var z6e=s(s2);Lie=n(z6e,"STRONG",{});var Iet=s(Lie);z5o=r(Iet,"xlm"),Iet.forEach(t),Q5o=r(z6e," \u2014 "),KN=n(z6e,"A",{href:!0});var qet=s(KN);W5o=r(qet,"XLMWithLMHeadModel"),qet.forEach(t),H5o=r(z6e," (XLM model)"),z6e.forEach(t),U5o=i(W),l2=n(W,"LI",{});var Q6e=s(l2);xie=n(Q6e,"STRONG",{});var Net=s(xie);J5o=r(Net,"xlm-prophetnet"),Net.forEach(t),Y5o=r(Q6e," \u2014 "),ZN=n(Q6e,"A",{href:!0});var jet=s(ZN);K5o=r(jet,"XLMProphetNetForCausalLM"),jet.forEach(t),Z5o=r(Q6e," (XLMProphetNet model)"),Q6e.forEach(t),eCo=i(W),i2=n(W,"LI",{});var W6e=s(i2);$ie=n(W6e,"STRONG",{});var Det=s($ie);oCo=r(Det,"xlm-roberta"),Det.forEach(t),rCo=r(W6e," \u2014 "),ej=n(W6e,"A",{href:!0});var Get=s(ej);tCo=r(Get,"XLMRobertaForCausalLM"),Get.forEach(t),aCo=r(W6e," (XLM-RoBERTa model)"),W6e.forEach(t),nCo=i(W),d2=n(W,"LI",{});var H6e=s(d2);kie=n(H6e,"STRONG",{});var Oet=s(kie);sCo=r(Oet,"xlm-roberta-xl"),Oet.forEach(t),lCo=r(H6e," \u2014 "),oj=n(H6e,"A",{href:!0});var Vet=s(oj);iCo=r(Vet,"XLMRobertaXLForCausalLM"),Vet.forEach(t),dCo=r(H6e," (XLM-RoBERTa-XL model)"),H6e.forEach(t),cCo=i(W),c2=n(W,"LI",{});var U6e=s(c2);Sie=n(U6e,"STRONG",{});var Xet=s(Sie);fCo=r(Xet,"xlnet"),Xet.forEach(t),mCo=r(U6e," \u2014 "),rj=n(U6e,"A",{href:!0});var zet=s(rj);gCo=r(zet,"XLNetLMHeadModel"),zet.forEach(t),hCo=r(U6e," (XLNet model)"),U6e.forEach(t),W.forEach(t),pCo=i(oa),f2=n(oa,"P",{});var J6e=s(f2);uCo=r(J6e,"The model is set in evaluation mode by default using "),Rie=n(J6e,"CODE",{});var Qet=s(Rie);_Co=r(Qet,"model.eval()"),Qet.forEach(t),bCo=r(J6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(J6e,"CODE",{});var Wet=s(Pie);vCo=r(Wet,"model.train()"),Wet.forEach(t),J6e.forEach(t),FCo=i(oa),T(m2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),eIe=i(f),$i=n(f,"H2",{class:!0});var aNe=s($i);g2=n(aNe,"A",{id:!0,class:!0,href:!0});var Het=s(g2);Bie=n(Het,"SPAN",{});var Uet=s(Bie);T(I6.$$.fragment,Uet),Uet.forEach(t),Het.forEach(t),TCo=i(aNe),Iie=n(aNe,"SPAN",{});var Jet=s(Iie);MCo=r(Jet,"AutoModelForMaskedLM"),Jet.forEach(t),aNe.forEach(t),oIe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(q6.$$.fragment,Os),ECo=i(Os),ki=n(Os,"P",{});var cK=s(ki);CCo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tj=n(cK,"A",{href:!0});var Yet=s(tj);wCo=r(Yet,"from_pretrained()"),Yet.forEach(t),ACo=r(cK," class method or the "),aj=n(cK,"A",{href:!0});var Ket=s(aj);yCo=r(Ket,"from_config()"),Ket.forEach(t),LCo=r(cK,` class
method.`),cK.forEach(t),xCo=i(Os),N6=n(Os,"P",{});var nNe=s(N6);$Co=r(nNe,"This class cannot be instantiated directly using "),qie=n(nNe,"CODE",{});var Zet=s(qie);kCo=r(Zet,"__init__()"),Zet.forEach(t),SCo=r(nNe," (throws an error)."),nNe.forEach(t),RCo=i(Os),at=n(Os,"DIV",{class:!0});var aA=s(at);T(j6.$$.fragment,aA),PCo=i(aA),Nie=n(aA,"P",{});var eot=s(Nie);BCo=r(eot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eot.forEach(t),ICo=i(aA),Si=n(aA,"P",{});var fK=s(Si);qCo=r(fK,`Note:
Loading a model from its configuration file does `),jie=n(fK,"STRONG",{});var oot=s(jie);NCo=r(oot,"not"),oot.forEach(t),jCo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(fK,"A",{href:!0});var rot=s(nj);DCo=r(rot,"from_pretrained()"),rot.forEach(t),GCo=r(fK," to load the model weights."),fK.forEach(t),OCo=i(aA),T(h2.$$.fragment,aA),aA.forEach(t),VCo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(D6.$$.fragment,ra),XCo=i(ra),Die=n(ra,"P",{});var tot=s(Die);zCo=r(tot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tot.forEach(t),QCo=i(ra),xa=n(ra,"P",{});var nA=s(xa);WCo=r(nA,"The model class to instantiate is selected based on the "),Gie=n(nA,"CODE",{});var aot=s(Gie);HCo=r(aot,"model_type"),aot.forEach(t),UCo=r(nA,` property of the config object (either
passed as an argument or loaded from `),Oie=n(nA,"CODE",{});var not=s(Oie);JCo=r(not,"pretrained_model_name_or_path"),not.forEach(t),YCo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=n(nA,"CODE",{});var sot=s(Vie);KCo=r(sot,"pretrained_model_name_or_path"),sot.forEach(t),ZCo=r(nA,":"),nA.forEach(t),e3o=i(ra),Q=n(ra,"UL",{});var H=s(Q);p2=n(H,"LI",{});var Y6e=s(p2);Xie=n(Y6e,"STRONG",{});var lot=s(Xie);o3o=r(lot,"albert"),lot.forEach(t),r3o=r(Y6e," \u2014 "),sj=n(Y6e,"A",{href:!0});var iot=s(sj);t3o=r(iot,"AlbertForMaskedLM"),iot.forEach(t),a3o=r(Y6e," (ALBERT model)"),Y6e.forEach(t),n3o=i(H),u2=n(H,"LI",{});var K6e=s(u2);zie=n(K6e,"STRONG",{});var dot=s(zie);s3o=r(dot,"bart"),dot.forEach(t),l3o=r(K6e," \u2014 "),lj=n(K6e,"A",{href:!0});var cot=s(lj);i3o=r(cot,"BartForConditionalGeneration"),cot.forEach(t),d3o=r(K6e," (BART model)"),K6e.forEach(t),c3o=i(H),_2=n(H,"LI",{});var Z6e=s(_2);Qie=n(Z6e,"STRONG",{});var fot=s(Qie);f3o=r(fot,"bert"),fot.forEach(t),m3o=r(Z6e," \u2014 "),ij=n(Z6e,"A",{href:!0});var mot=s(ij);g3o=r(mot,"BertForMaskedLM"),mot.forEach(t),h3o=r(Z6e," (BERT model)"),Z6e.forEach(t),p3o=i(H),b2=n(H,"LI",{});var eye=s(b2);Wie=n(eye,"STRONG",{});var got=s(Wie);u3o=r(got,"big_bird"),got.forEach(t),_3o=r(eye," \u2014 "),dj=n(eye,"A",{href:!0});var hot=s(dj);b3o=r(hot,"BigBirdForMaskedLM"),hot.forEach(t),v3o=r(eye," (BigBird model)"),eye.forEach(t),F3o=i(H),v2=n(H,"LI",{});var oye=s(v2);Hie=n(oye,"STRONG",{});var pot=s(Hie);T3o=r(pot,"camembert"),pot.forEach(t),M3o=r(oye," \u2014 "),cj=n(oye,"A",{href:!0});var uot=s(cj);E3o=r(uot,"CamembertForMaskedLM"),uot.forEach(t),C3o=r(oye," (CamemBERT model)"),oye.forEach(t),w3o=i(H),F2=n(H,"LI",{});var rye=s(F2);Uie=n(rye,"STRONG",{});var _ot=s(Uie);A3o=r(_ot,"convbert"),_ot.forEach(t),y3o=r(rye," \u2014 "),fj=n(rye,"A",{href:!0});var bot=s(fj);L3o=r(bot,"ConvBertForMaskedLM"),bot.forEach(t),x3o=r(rye," (ConvBERT model)"),rye.forEach(t),$3o=i(H),T2=n(H,"LI",{});var tye=s(T2);Jie=n(tye,"STRONG",{});var vot=s(Jie);k3o=r(vot,"data2vec-text"),vot.forEach(t),S3o=r(tye," \u2014 "),mj=n(tye,"A",{href:!0});var Fot=s(mj);R3o=r(Fot,"Data2VecTextForMaskedLM"),Fot.forEach(t),P3o=r(tye," (Data2VecText model)"),tye.forEach(t),B3o=i(H),M2=n(H,"LI",{});var aye=s(M2);Yie=n(aye,"STRONG",{});var Tot=s(Yie);I3o=r(Tot,"deberta"),Tot.forEach(t),q3o=r(aye," \u2014 "),gj=n(aye,"A",{href:!0});var Mot=s(gj);N3o=r(Mot,"DebertaForMaskedLM"),Mot.forEach(t),j3o=r(aye," (DeBERTa model)"),aye.forEach(t),D3o=i(H),E2=n(H,"LI",{});var nye=s(E2);Kie=n(nye,"STRONG",{});var Eot=s(Kie);G3o=r(Eot,"deberta-v2"),Eot.forEach(t),O3o=r(nye," \u2014 "),hj=n(nye,"A",{href:!0});var Cot=s(hj);V3o=r(Cot,"DebertaV2ForMaskedLM"),Cot.forEach(t),X3o=r(nye," (DeBERTa-v2 model)"),nye.forEach(t),z3o=i(H),C2=n(H,"LI",{});var sye=s(C2);Zie=n(sye,"STRONG",{});var wot=s(Zie);Q3o=r(wot,"distilbert"),wot.forEach(t),W3o=r(sye," \u2014 "),pj=n(sye,"A",{href:!0});var Aot=s(pj);H3o=r(Aot,"DistilBertForMaskedLM"),Aot.forEach(t),U3o=r(sye," (DistilBERT model)"),sye.forEach(t),J3o=i(H),w2=n(H,"LI",{});var lye=s(w2);ede=n(lye,"STRONG",{});var yot=s(ede);Y3o=r(yot,"electra"),yot.forEach(t),K3o=r(lye," \u2014 "),uj=n(lye,"A",{href:!0});var Lot=s(uj);Z3o=r(Lot,"ElectraForMaskedLM"),Lot.forEach(t),ewo=r(lye," (ELECTRA model)"),lye.forEach(t),owo=i(H),A2=n(H,"LI",{});var iye=s(A2);ode=n(iye,"STRONG",{});var xot=s(ode);rwo=r(xot,"flaubert"),xot.forEach(t),two=r(iye," \u2014 "),_j=n(iye,"A",{href:!0});var $ot=s(_j);awo=r($ot,"FlaubertWithLMHeadModel"),$ot.forEach(t),nwo=r(iye," (FlauBERT model)"),iye.forEach(t),swo=i(H),y2=n(H,"LI",{});var dye=s(y2);rde=n(dye,"STRONG",{});var kot=s(rde);lwo=r(kot,"fnet"),kot.forEach(t),iwo=r(dye," \u2014 "),bj=n(dye,"A",{href:!0});var Sot=s(bj);dwo=r(Sot,"FNetForMaskedLM"),Sot.forEach(t),cwo=r(dye," (FNet model)"),dye.forEach(t),fwo=i(H),L2=n(H,"LI",{});var cye=s(L2);tde=n(cye,"STRONG",{});var Rot=s(tde);mwo=r(Rot,"funnel"),Rot.forEach(t),gwo=r(cye," \u2014 "),vj=n(cye,"A",{href:!0});var Pot=s(vj);hwo=r(Pot,"FunnelForMaskedLM"),Pot.forEach(t),pwo=r(cye," (Funnel Transformer model)"),cye.forEach(t),uwo=i(H),x2=n(H,"LI",{});var fye=s(x2);ade=n(fye,"STRONG",{});var Bot=s(ade);_wo=r(Bot,"ibert"),Bot.forEach(t),bwo=r(fye," \u2014 "),Fj=n(fye,"A",{href:!0});var Iot=s(Fj);vwo=r(Iot,"IBertForMaskedLM"),Iot.forEach(t),Fwo=r(fye," (I-BERT model)"),fye.forEach(t),Two=i(H),$2=n(H,"LI",{});var mye=s($2);nde=n(mye,"STRONG",{});var qot=s(nde);Mwo=r(qot,"layoutlm"),qot.forEach(t),Ewo=r(mye," \u2014 "),Tj=n(mye,"A",{href:!0});var Not=s(Tj);Cwo=r(Not,"LayoutLMForMaskedLM"),Not.forEach(t),wwo=r(mye," (LayoutLM model)"),mye.forEach(t),Awo=i(H),k2=n(H,"LI",{});var gye=s(k2);sde=n(gye,"STRONG",{});var jot=s(sde);ywo=r(jot,"longformer"),jot.forEach(t),Lwo=r(gye," \u2014 "),Mj=n(gye,"A",{href:!0});var Dot=s(Mj);xwo=r(Dot,"LongformerForMaskedLM"),Dot.forEach(t),$wo=r(gye," (Longformer model)"),gye.forEach(t),kwo=i(H),S2=n(H,"LI",{});var hye=s(S2);lde=n(hye,"STRONG",{});var Got=s(lde);Swo=r(Got,"mbart"),Got.forEach(t),Rwo=r(hye," \u2014 "),Ej=n(hye,"A",{href:!0});var Oot=s(Ej);Pwo=r(Oot,"MBartForConditionalGeneration"),Oot.forEach(t),Bwo=r(hye," (mBART model)"),hye.forEach(t),Iwo=i(H),R2=n(H,"LI",{});var pye=s(R2);ide=n(pye,"STRONG",{});var Vot=s(ide);qwo=r(Vot,"megatron-bert"),Vot.forEach(t),Nwo=r(pye," \u2014 "),Cj=n(pye,"A",{href:!0});var Xot=s(Cj);jwo=r(Xot,"MegatronBertForMaskedLM"),Xot.forEach(t),Dwo=r(pye," (MegatronBert model)"),pye.forEach(t),Gwo=i(H),P2=n(H,"LI",{});var uye=s(P2);dde=n(uye,"STRONG",{});var zot=s(dde);Owo=r(zot,"mobilebert"),zot.forEach(t),Vwo=r(uye," \u2014 "),wj=n(uye,"A",{href:!0});var Qot=s(wj);Xwo=r(Qot,"MobileBertForMaskedLM"),Qot.forEach(t),zwo=r(uye," (MobileBERT model)"),uye.forEach(t),Qwo=i(H),B2=n(H,"LI",{});var _ye=s(B2);cde=n(_ye,"STRONG",{});var Wot=s(cde);Wwo=r(Wot,"mpnet"),Wot.forEach(t),Hwo=r(_ye," \u2014 "),Aj=n(_ye,"A",{href:!0});var Hot=s(Aj);Uwo=r(Hot,"MPNetForMaskedLM"),Hot.forEach(t),Jwo=r(_ye," (MPNet model)"),_ye.forEach(t),Ywo=i(H),I2=n(H,"LI",{});var bye=s(I2);fde=n(bye,"STRONG",{});var Uot=s(fde);Kwo=r(Uot,"nystromformer"),Uot.forEach(t),Zwo=r(bye," \u2014 "),yj=n(bye,"A",{href:!0});var Jot=s(yj);eAo=r(Jot,"NystromformerForMaskedLM"),Jot.forEach(t),oAo=r(bye," (Nystromformer model)"),bye.forEach(t),rAo=i(H),q2=n(H,"LI",{});var vye=s(q2);mde=n(vye,"STRONG",{});var Yot=s(mde);tAo=r(Yot,"perceiver"),Yot.forEach(t),aAo=r(vye," \u2014 "),Lj=n(vye,"A",{href:!0});var Kot=s(Lj);nAo=r(Kot,"PerceiverForMaskedLM"),Kot.forEach(t),sAo=r(vye," (Perceiver model)"),vye.forEach(t),lAo=i(H),N2=n(H,"LI",{});var Fye=s(N2);gde=n(Fye,"STRONG",{});var Zot=s(gde);iAo=r(Zot,"qdqbert"),Zot.forEach(t),dAo=r(Fye," \u2014 "),xj=n(Fye,"A",{href:!0});var ert=s(xj);cAo=r(ert,"QDQBertForMaskedLM"),ert.forEach(t),fAo=r(Fye," (QDQBert model)"),Fye.forEach(t),mAo=i(H),j2=n(H,"LI",{});var Tye=s(j2);hde=n(Tye,"STRONG",{});var ort=s(hde);gAo=r(ort,"reformer"),ort.forEach(t),hAo=r(Tye," \u2014 "),$j=n(Tye,"A",{href:!0});var rrt=s($j);pAo=r(rrt,"ReformerForMaskedLM"),rrt.forEach(t),uAo=r(Tye," (Reformer model)"),Tye.forEach(t),_Ao=i(H),D2=n(H,"LI",{});var Mye=s(D2);pde=n(Mye,"STRONG",{});var trt=s(pde);bAo=r(trt,"rembert"),trt.forEach(t),vAo=r(Mye," \u2014 "),kj=n(Mye,"A",{href:!0});var art=s(kj);FAo=r(art,"RemBertForMaskedLM"),art.forEach(t),TAo=r(Mye," (RemBERT model)"),Mye.forEach(t),MAo=i(H),G2=n(H,"LI",{});var Eye=s(G2);ude=n(Eye,"STRONG",{});var nrt=s(ude);EAo=r(nrt,"roberta"),nrt.forEach(t),CAo=r(Eye," \u2014 "),Sj=n(Eye,"A",{href:!0});var srt=s(Sj);wAo=r(srt,"RobertaForMaskedLM"),srt.forEach(t),AAo=r(Eye," (RoBERTa model)"),Eye.forEach(t),yAo=i(H),O2=n(H,"LI",{});var Cye=s(O2);_de=n(Cye,"STRONG",{});var lrt=s(_de);LAo=r(lrt,"roformer"),lrt.forEach(t),xAo=r(Cye," \u2014 "),Rj=n(Cye,"A",{href:!0});var irt=s(Rj);$Ao=r(irt,"RoFormerForMaskedLM"),irt.forEach(t),kAo=r(Cye," (RoFormer model)"),Cye.forEach(t),SAo=i(H),V2=n(H,"LI",{});var wye=s(V2);bde=n(wye,"STRONG",{});var drt=s(bde);RAo=r(drt,"squeezebert"),drt.forEach(t),PAo=r(wye," \u2014 "),Pj=n(wye,"A",{href:!0});var crt=s(Pj);BAo=r(crt,"SqueezeBertForMaskedLM"),crt.forEach(t),IAo=r(wye," (SqueezeBERT model)"),wye.forEach(t),qAo=i(H),X2=n(H,"LI",{});var Aye=s(X2);vde=n(Aye,"STRONG",{});var frt=s(vde);NAo=r(frt,"tapas"),frt.forEach(t),jAo=r(Aye," \u2014 "),Bj=n(Aye,"A",{href:!0});var mrt=s(Bj);DAo=r(mrt,"TapasForMaskedLM"),mrt.forEach(t),GAo=r(Aye," (TAPAS model)"),Aye.forEach(t),OAo=i(H),z2=n(H,"LI",{});var yye=s(z2);Fde=n(yye,"STRONG",{});var grt=s(Fde);VAo=r(grt,"wav2vec2"),grt.forEach(t),XAo=r(yye," \u2014 "),Tde=n(yye,"CODE",{});var hrt=s(Tde);zAo=r(hrt,"Wav2Vec2ForMaskedLM"),hrt.forEach(t),QAo=r(yye," (Wav2Vec2 model)"),yye.forEach(t),WAo=i(H),Q2=n(H,"LI",{});var Lye=s(Q2);Mde=n(Lye,"STRONG",{});var prt=s(Mde);HAo=r(prt,"xlm"),prt.forEach(t),UAo=r(Lye," \u2014 "),Ij=n(Lye,"A",{href:!0});var urt=s(Ij);JAo=r(urt,"XLMWithLMHeadModel"),urt.forEach(t),YAo=r(Lye," (XLM model)"),Lye.forEach(t),KAo=i(H),W2=n(H,"LI",{});var xye=s(W2);Ede=n(xye,"STRONG",{});var _rt=s(Ede);ZAo=r(_rt,"xlm-roberta"),_rt.forEach(t),e0o=r(xye," \u2014 "),qj=n(xye,"A",{href:!0});var brt=s(qj);o0o=r(brt,"XLMRobertaForMaskedLM"),brt.forEach(t),r0o=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),t0o=i(H),H2=n(H,"LI",{});var $ye=s(H2);Cde=n($ye,"STRONG",{});var vrt=s(Cde);a0o=r(vrt,"xlm-roberta-xl"),vrt.forEach(t),n0o=r($ye," \u2014 "),Nj=n($ye,"A",{href:!0});var Frt=s(Nj);s0o=r(Frt,"XLMRobertaXLForMaskedLM"),Frt.forEach(t),l0o=r($ye," (XLM-RoBERTa-XL model)"),$ye.forEach(t),i0o=i(H),U2=n(H,"LI",{});var kye=s(U2);wde=n(kye,"STRONG",{});var Trt=s(wde);d0o=r(Trt,"yoso"),Trt.forEach(t),c0o=r(kye," \u2014 "),jj=n(kye,"A",{href:!0});var Mrt=s(jj);f0o=r(Mrt,"YosoForMaskedLM"),Mrt.forEach(t),m0o=r(kye," (YOSO model)"),kye.forEach(t),H.forEach(t),g0o=i(ra),J2=n(ra,"P",{});var Sye=s(J2);h0o=r(Sye,"The model is set in evaluation mode by default using "),Ade=n(Sye,"CODE",{});var Ert=s(Ade);p0o=r(Ert,"model.eval()"),Ert.forEach(t),u0o=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(Sye,"CODE",{});var Crt=s(yde);_0o=r(Crt,"model.train()"),Crt.forEach(t),Sye.forEach(t),b0o=i(ra),T(Y2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),rIe=i(f),Ri=n(f,"H2",{class:!0});var sNe=s(Ri);K2=n(sNe,"A",{id:!0,class:!0,href:!0});var wrt=s(K2);Lde=n(wrt,"SPAN",{});var Art=s(Lde);T(G6.$$.fragment,Art),Art.forEach(t),wrt.forEach(t),v0o=i(sNe),xde=n(sNe,"SPAN",{});var yrt=s(xde);F0o=r(yrt,"AutoModelForSeq2SeqLM"),yrt.forEach(t),sNe.forEach(t),tIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(O6.$$.fragment,Vs),T0o=i(Vs),Pi=n(Vs,"P",{});var mK=s(Pi);M0o=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dj=n(mK,"A",{href:!0});var Lrt=s(Dj);E0o=r(Lrt,"from_pretrained()"),Lrt.forEach(t),C0o=r(mK," class method or the "),Gj=n(mK,"A",{href:!0});var xrt=s(Gj);w0o=r(xrt,"from_config()"),xrt.forEach(t),A0o=r(mK,` class
method.`),mK.forEach(t),y0o=i(Vs),V6=n(Vs,"P",{});var lNe=s(V6);L0o=r(lNe,"This class cannot be instantiated directly using "),$de=n(lNe,"CODE",{});var $rt=s($de);x0o=r($rt,"__init__()"),$rt.forEach(t),$0o=r(lNe," (throws an error)."),lNe.forEach(t),k0o=i(Vs),nt=n(Vs,"DIV",{class:!0});var sA=s(nt);T(X6.$$.fragment,sA),S0o=i(sA),kde=n(sA,"P",{});var krt=s(kde);R0o=r(krt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),krt.forEach(t),P0o=i(sA),Bi=n(sA,"P",{});var gK=s(Bi);B0o=r(gK,`Note:
Loading a model from its configuration file does `),Sde=n(gK,"STRONG",{});var Srt=s(Sde);I0o=r(Srt,"not"),Srt.forEach(t),q0o=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=n(gK,"A",{href:!0});var Rrt=s(Oj);N0o=r(Rrt,"from_pretrained()"),Rrt.forEach(t),j0o=r(gK," to load the model weights."),gK.forEach(t),D0o=i(sA),T(Z2.$$.fragment,sA),sA.forEach(t),G0o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(z6.$$.fragment,ta),O0o=i(ta),Rde=n(ta,"P",{});var Prt=s(Rde);V0o=r(Prt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Prt.forEach(t),X0o=i(ta),$a=n(ta,"P",{});var lA=s($a);z0o=r(lA,"The model class to instantiate is selected based on the "),Pde=n(lA,"CODE",{});var Brt=s(Pde);Q0o=r(Brt,"model_type"),Brt.forEach(t),W0o=r(lA,` property of the config object (either
passed as an argument or loaded from `),Bde=n(lA,"CODE",{});var Irt=s(Bde);H0o=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),U0o=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(lA,"CODE",{});var qrt=s(Ide);J0o=r(qrt,"pretrained_model_name_or_path"),qrt.forEach(t),Y0o=r(lA,":"),lA.forEach(t),K0o=i(ta),pe=n(ta,"UL",{});var be=s(pe);e1=n(be,"LI",{});var Rye=s(e1);qde=n(Rye,"STRONG",{});var Nrt=s(qde);Z0o=r(Nrt,"bart"),Nrt.forEach(t),e6o=r(Rye," \u2014 "),Vj=n(Rye,"A",{href:!0});var jrt=s(Vj);o6o=r(jrt,"BartForConditionalGeneration"),jrt.forEach(t),r6o=r(Rye," (BART model)"),Rye.forEach(t),t6o=i(be),o1=n(be,"LI",{});var Pye=s(o1);Nde=n(Pye,"STRONG",{});var Drt=s(Nde);a6o=r(Drt,"bigbird_pegasus"),Drt.forEach(t),n6o=r(Pye," \u2014 "),Xj=n(Pye,"A",{href:!0});var Grt=s(Xj);s6o=r(Grt,"BigBirdPegasusForConditionalGeneration"),Grt.forEach(t),l6o=r(Pye," (BigBirdPegasus model)"),Pye.forEach(t),i6o=i(be),r1=n(be,"LI",{});var Bye=s(r1);jde=n(Bye,"STRONG",{});var Ort=s(jde);d6o=r(Ort,"blenderbot"),Ort.forEach(t),c6o=r(Bye," \u2014 "),zj=n(Bye,"A",{href:!0});var Vrt=s(zj);f6o=r(Vrt,"BlenderbotForConditionalGeneration"),Vrt.forEach(t),m6o=r(Bye," (Blenderbot model)"),Bye.forEach(t),g6o=i(be),t1=n(be,"LI",{});var Iye=s(t1);Dde=n(Iye,"STRONG",{});var Xrt=s(Dde);h6o=r(Xrt,"blenderbot-small"),Xrt.forEach(t),p6o=r(Iye," \u2014 "),Qj=n(Iye,"A",{href:!0});var zrt=s(Qj);u6o=r(zrt,"BlenderbotSmallForConditionalGeneration"),zrt.forEach(t),_6o=r(Iye," (BlenderbotSmall model)"),Iye.forEach(t),b6o=i(be),a1=n(be,"LI",{});var qye=s(a1);Gde=n(qye,"STRONG",{});var Qrt=s(Gde);v6o=r(Qrt,"encoder-decoder"),Qrt.forEach(t),F6o=r(qye," \u2014 "),Wj=n(qye,"A",{href:!0});var Wrt=s(Wj);T6o=r(Wrt,"EncoderDecoderModel"),Wrt.forEach(t),M6o=r(qye," (Encoder decoder model)"),qye.forEach(t),E6o=i(be),n1=n(be,"LI",{});var Nye=s(n1);Ode=n(Nye,"STRONG",{});var Hrt=s(Ode);C6o=r(Hrt,"fsmt"),Hrt.forEach(t),w6o=r(Nye," \u2014 "),Hj=n(Nye,"A",{href:!0});var Urt=s(Hj);A6o=r(Urt,"FSMTForConditionalGeneration"),Urt.forEach(t),y6o=r(Nye," (FairSeq Machine-Translation model)"),Nye.forEach(t),L6o=i(be),s1=n(be,"LI",{});var jye=s(s1);Vde=n(jye,"STRONG",{});var Jrt=s(Vde);x6o=r(Jrt,"led"),Jrt.forEach(t),$6o=r(jye," \u2014 "),Uj=n(jye,"A",{href:!0});var Yrt=s(Uj);k6o=r(Yrt,"LEDForConditionalGeneration"),Yrt.forEach(t),S6o=r(jye," (LED model)"),jye.forEach(t),R6o=i(be),l1=n(be,"LI",{});var Dye=s(l1);Xde=n(Dye,"STRONG",{});var Krt=s(Xde);P6o=r(Krt,"m2m_100"),Krt.forEach(t),B6o=r(Dye," \u2014 "),Jj=n(Dye,"A",{href:!0});var Zrt=s(Jj);I6o=r(Zrt,"M2M100ForConditionalGeneration"),Zrt.forEach(t),q6o=r(Dye," (M2M100 model)"),Dye.forEach(t),N6o=i(be),i1=n(be,"LI",{});var Gye=s(i1);zde=n(Gye,"STRONG",{});var ett=s(zde);j6o=r(ett,"marian"),ett.forEach(t),D6o=r(Gye," \u2014 "),Yj=n(Gye,"A",{href:!0});var ott=s(Yj);G6o=r(ott,"MarianMTModel"),ott.forEach(t),O6o=r(Gye," (Marian model)"),Gye.forEach(t),V6o=i(be),d1=n(be,"LI",{});var Oye=s(d1);Qde=n(Oye,"STRONG",{});var rtt=s(Qde);X6o=r(rtt,"mbart"),rtt.forEach(t),z6o=r(Oye," \u2014 "),Kj=n(Oye,"A",{href:!0});var ttt=s(Kj);Q6o=r(ttt,"MBartForConditionalGeneration"),ttt.forEach(t),W6o=r(Oye," (mBART model)"),Oye.forEach(t),H6o=i(be),c1=n(be,"LI",{});var Vye=s(c1);Wde=n(Vye,"STRONG",{});var att=s(Wde);U6o=r(att,"mt5"),att.forEach(t),J6o=r(Vye," \u2014 "),Zj=n(Vye,"A",{href:!0});var ntt=s(Zj);Y6o=r(ntt,"MT5ForConditionalGeneration"),ntt.forEach(t),K6o=r(Vye," (mT5 model)"),Vye.forEach(t),Z6o=i(be),f1=n(be,"LI",{});var Xye=s(f1);Hde=n(Xye,"STRONG",{});var stt=s(Hde);eyo=r(stt,"pegasus"),stt.forEach(t),oyo=r(Xye," \u2014 "),eD=n(Xye,"A",{href:!0});var ltt=s(eD);ryo=r(ltt,"PegasusForConditionalGeneration"),ltt.forEach(t),tyo=r(Xye," (Pegasus model)"),Xye.forEach(t),ayo=i(be),m1=n(be,"LI",{});var zye=s(m1);Ude=n(zye,"STRONG",{});var itt=s(Ude);nyo=r(itt,"plbart"),itt.forEach(t),syo=r(zye," \u2014 "),oD=n(zye,"A",{href:!0});var dtt=s(oD);lyo=r(dtt,"PLBartForConditionalGeneration"),dtt.forEach(t),iyo=r(zye," (PLBart model)"),zye.forEach(t),dyo=i(be),g1=n(be,"LI",{});var Qye=s(g1);Jde=n(Qye,"STRONG",{});var ctt=s(Jde);cyo=r(ctt,"prophetnet"),ctt.forEach(t),fyo=r(Qye," \u2014 "),rD=n(Qye,"A",{href:!0});var ftt=s(rD);myo=r(ftt,"ProphetNetForConditionalGeneration"),ftt.forEach(t),gyo=r(Qye," (ProphetNet model)"),Qye.forEach(t),hyo=i(be),h1=n(be,"LI",{});var Wye=s(h1);Yde=n(Wye,"STRONG",{});var mtt=s(Yde);pyo=r(mtt,"t5"),mtt.forEach(t),uyo=r(Wye," \u2014 "),tD=n(Wye,"A",{href:!0});var gtt=s(tD);_yo=r(gtt,"T5ForConditionalGeneration"),gtt.forEach(t),byo=r(Wye," (T5 model)"),Wye.forEach(t),vyo=i(be),p1=n(be,"LI",{});var Hye=s(p1);Kde=n(Hye,"STRONG",{});var htt=s(Kde);Fyo=r(htt,"xlm-prophetnet"),htt.forEach(t),Tyo=r(Hye," \u2014 "),aD=n(Hye,"A",{href:!0});var ptt=s(aD);Myo=r(ptt,"XLMProphetNetForConditionalGeneration"),ptt.forEach(t),Eyo=r(Hye," (XLMProphetNet model)"),Hye.forEach(t),be.forEach(t),Cyo=i(ta),u1=n(ta,"P",{});var Uye=s(u1);wyo=r(Uye,"The model is set in evaluation mode by default using "),Zde=n(Uye,"CODE",{});var utt=s(Zde);Ayo=r(utt,"model.eval()"),utt.forEach(t),yyo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(Uye,"CODE",{});var _tt=s(ece);Lyo=r(_tt,"model.train()"),_tt.forEach(t),Uye.forEach(t),xyo=i(ta),T(_1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),aIe=i(f),Ii=n(f,"H2",{class:!0});var iNe=s(Ii);b1=n(iNe,"A",{id:!0,class:!0,href:!0});var btt=s(b1);oce=n(btt,"SPAN",{});var vtt=s(oce);T(Q6.$$.fragment,vtt),vtt.forEach(t),btt.forEach(t),$yo=i(iNe),rce=n(iNe,"SPAN",{});var Ftt=s(rce);kyo=r(Ftt,"AutoModelForSequenceClassification"),Ftt.forEach(t),iNe.forEach(t),nIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(W6.$$.fragment,Xs),Syo=i(Xs),qi=n(Xs,"P",{});var hK=s(qi);Ryo=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nD=n(hK,"A",{href:!0});var Ttt=s(nD);Pyo=r(Ttt,"from_pretrained()"),Ttt.forEach(t),Byo=r(hK," class method or the "),sD=n(hK,"A",{href:!0});var Mtt=s(sD);Iyo=r(Mtt,"from_config()"),Mtt.forEach(t),qyo=r(hK,` class
method.`),hK.forEach(t),Nyo=i(Xs),H6=n(Xs,"P",{});var dNe=s(H6);jyo=r(dNe,"This class cannot be instantiated directly using "),tce=n(dNe,"CODE",{});var Ett=s(tce);Dyo=r(Ett,"__init__()"),Ett.forEach(t),Gyo=r(dNe," (throws an error)."),dNe.forEach(t),Oyo=i(Xs),st=n(Xs,"DIV",{class:!0});var iA=s(st);T(U6.$$.fragment,iA),Vyo=i(iA),ace=n(iA,"P",{});var Ctt=s(ace);Xyo=r(Ctt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ctt.forEach(t),zyo=i(iA),Ni=n(iA,"P",{});var pK=s(Ni);Qyo=r(pK,`Note:
Loading a model from its configuration file does `),nce=n(pK,"STRONG",{});var wtt=s(nce);Wyo=r(wtt,"not"),wtt.forEach(t),Hyo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(pK,"A",{href:!0});var Att=s(lD);Uyo=r(Att,"from_pretrained()"),Att.forEach(t),Jyo=r(pK," to load the model weights."),pK.forEach(t),Yyo=i(iA),T(v1.$$.fragment,iA),iA.forEach(t),Kyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(J6.$$.fragment,aa),Zyo=i(aa),sce=n(aa,"P",{});var ytt=s(sce);eLo=r(ytt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ytt.forEach(t),oLo=i(aa),ka=n(aa,"P",{});var dA=s(ka);rLo=r(dA,"The model class to instantiate is selected based on the "),lce=n(dA,"CODE",{});var Ltt=s(lce);tLo=r(Ltt,"model_type"),Ltt.forEach(t),aLo=r(dA,` property of the config object (either
passed as an argument or loaded from `),ice=n(dA,"CODE",{});var xtt=s(ice);nLo=r(xtt,"pretrained_model_name_or_path"),xtt.forEach(t),sLo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(dA,"CODE",{});var $tt=s(dce);lLo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),iLo=r(dA,":"),dA.forEach(t),dLo=i(aa),q=n(aa,"UL",{});var j=s(q);F1=n(j,"LI",{});var Jye=s(F1);cce=n(Jye,"STRONG",{});var ktt=s(cce);cLo=r(ktt,"albert"),ktt.forEach(t),fLo=r(Jye," \u2014 "),iD=n(Jye,"A",{href:!0});var Stt=s(iD);mLo=r(Stt,"AlbertForSequenceClassification"),Stt.forEach(t),gLo=r(Jye," (ALBERT model)"),Jye.forEach(t),hLo=i(j),T1=n(j,"LI",{});var Yye=s(T1);fce=n(Yye,"STRONG",{});var Rtt=s(fce);pLo=r(Rtt,"bart"),Rtt.forEach(t),uLo=r(Yye," \u2014 "),dD=n(Yye,"A",{href:!0});var Ptt=s(dD);_Lo=r(Ptt,"BartForSequenceClassification"),Ptt.forEach(t),bLo=r(Yye," (BART model)"),Yye.forEach(t),vLo=i(j),M1=n(j,"LI",{});var Kye=s(M1);mce=n(Kye,"STRONG",{});var Btt=s(mce);FLo=r(Btt,"bert"),Btt.forEach(t),TLo=r(Kye," \u2014 "),cD=n(Kye,"A",{href:!0});var Itt=s(cD);MLo=r(Itt,"BertForSequenceClassification"),Itt.forEach(t),ELo=r(Kye," (BERT model)"),Kye.forEach(t),CLo=i(j),E1=n(j,"LI",{});var Zye=s(E1);gce=n(Zye,"STRONG",{});var qtt=s(gce);wLo=r(qtt,"big_bird"),qtt.forEach(t),ALo=r(Zye," \u2014 "),fD=n(Zye,"A",{href:!0});var Ntt=s(fD);yLo=r(Ntt,"BigBirdForSequenceClassification"),Ntt.forEach(t),LLo=r(Zye," (BigBird model)"),Zye.forEach(t),xLo=i(j),C1=n(j,"LI",{});var eLe=s(C1);hce=n(eLe,"STRONG",{});var jtt=s(hce);$Lo=r(jtt,"bigbird_pegasus"),jtt.forEach(t),kLo=r(eLe," \u2014 "),mD=n(eLe,"A",{href:!0});var Dtt=s(mD);SLo=r(Dtt,"BigBirdPegasusForSequenceClassification"),Dtt.forEach(t),RLo=r(eLe," (BigBirdPegasus model)"),eLe.forEach(t),PLo=i(j),w1=n(j,"LI",{});var oLe=s(w1);pce=n(oLe,"STRONG",{});var Gtt=s(pce);BLo=r(Gtt,"camembert"),Gtt.forEach(t),ILo=r(oLe," \u2014 "),gD=n(oLe,"A",{href:!0});var Ott=s(gD);qLo=r(Ott,"CamembertForSequenceClassification"),Ott.forEach(t),NLo=r(oLe," (CamemBERT model)"),oLe.forEach(t),jLo=i(j),A1=n(j,"LI",{});var rLe=s(A1);uce=n(rLe,"STRONG",{});var Vtt=s(uce);DLo=r(Vtt,"canine"),Vtt.forEach(t),GLo=r(rLe," \u2014 "),hD=n(rLe,"A",{href:!0});var Xtt=s(hD);OLo=r(Xtt,"CanineForSequenceClassification"),Xtt.forEach(t),VLo=r(rLe," (Canine model)"),rLe.forEach(t),XLo=i(j),y1=n(j,"LI",{});var tLe=s(y1);_ce=n(tLe,"STRONG",{});var ztt=s(_ce);zLo=r(ztt,"convbert"),ztt.forEach(t),QLo=r(tLe," \u2014 "),pD=n(tLe,"A",{href:!0});var Qtt=s(pD);WLo=r(Qtt,"ConvBertForSequenceClassification"),Qtt.forEach(t),HLo=r(tLe," (ConvBERT model)"),tLe.forEach(t),ULo=i(j),L1=n(j,"LI",{});var aLe=s(L1);bce=n(aLe,"STRONG",{});var Wtt=s(bce);JLo=r(Wtt,"ctrl"),Wtt.forEach(t),YLo=r(aLe," \u2014 "),uD=n(aLe,"A",{href:!0});var Htt=s(uD);KLo=r(Htt,"CTRLForSequenceClassification"),Htt.forEach(t),ZLo=r(aLe," (CTRL model)"),aLe.forEach(t),e8o=i(j),x1=n(j,"LI",{});var nLe=s(x1);vce=n(nLe,"STRONG",{});var Utt=s(vce);o8o=r(Utt,"data2vec-text"),Utt.forEach(t),r8o=r(nLe," \u2014 "),_D=n(nLe,"A",{href:!0});var Jtt=s(_D);t8o=r(Jtt,"Data2VecTextForSequenceClassification"),Jtt.forEach(t),a8o=r(nLe," (Data2VecText model)"),nLe.forEach(t),n8o=i(j),$1=n(j,"LI",{});var sLe=s($1);Fce=n(sLe,"STRONG",{});var Ytt=s(Fce);s8o=r(Ytt,"deberta"),Ytt.forEach(t),l8o=r(sLe," \u2014 "),bD=n(sLe,"A",{href:!0});var Ktt=s(bD);i8o=r(Ktt,"DebertaForSequenceClassification"),Ktt.forEach(t),d8o=r(sLe," (DeBERTa model)"),sLe.forEach(t),c8o=i(j),k1=n(j,"LI",{});var lLe=s(k1);Tce=n(lLe,"STRONG",{});var Ztt=s(Tce);f8o=r(Ztt,"deberta-v2"),Ztt.forEach(t),m8o=r(lLe," \u2014 "),vD=n(lLe,"A",{href:!0});var eat=s(vD);g8o=r(eat,"DebertaV2ForSequenceClassification"),eat.forEach(t),h8o=r(lLe," (DeBERTa-v2 model)"),lLe.forEach(t),p8o=i(j),S1=n(j,"LI",{});var iLe=s(S1);Mce=n(iLe,"STRONG",{});var oat=s(Mce);u8o=r(oat,"distilbert"),oat.forEach(t),_8o=r(iLe," \u2014 "),FD=n(iLe,"A",{href:!0});var rat=s(FD);b8o=r(rat,"DistilBertForSequenceClassification"),rat.forEach(t),v8o=r(iLe," (DistilBERT model)"),iLe.forEach(t),F8o=i(j),R1=n(j,"LI",{});var dLe=s(R1);Ece=n(dLe,"STRONG",{});var tat=s(Ece);T8o=r(tat,"electra"),tat.forEach(t),M8o=r(dLe," \u2014 "),TD=n(dLe,"A",{href:!0});var aat=s(TD);E8o=r(aat,"ElectraForSequenceClassification"),aat.forEach(t),C8o=r(dLe," (ELECTRA model)"),dLe.forEach(t),w8o=i(j),P1=n(j,"LI",{});var cLe=s(P1);Cce=n(cLe,"STRONG",{});var nat=s(Cce);A8o=r(nat,"flaubert"),nat.forEach(t),y8o=r(cLe," \u2014 "),MD=n(cLe,"A",{href:!0});var sat=s(MD);L8o=r(sat,"FlaubertForSequenceClassification"),sat.forEach(t),x8o=r(cLe," (FlauBERT model)"),cLe.forEach(t),$8o=i(j),B1=n(j,"LI",{});var fLe=s(B1);wce=n(fLe,"STRONG",{});var lat=s(wce);k8o=r(lat,"fnet"),lat.forEach(t),S8o=r(fLe," \u2014 "),ED=n(fLe,"A",{href:!0});var iat=s(ED);R8o=r(iat,"FNetForSequenceClassification"),iat.forEach(t),P8o=r(fLe," (FNet model)"),fLe.forEach(t),B8o=i(j),I1=n(j,"LI",{});var mLe=s(I1);Ace=n(mLe,"STRONG",{});var dat=s(Ace);I8o=r(dat,"funnel"),dat.forEach(t),q8o=r(mLe," \u2014 "),CD=n(mLe,"A",{href:!0});var cat=s(CD);N8o=r(cat,"FunnelForSequenceClassification"),cat.forEach(t),j8o=r(mLe," (Funnel Transformer model)"),mLe.forEach(t),D8o=i(j),q1=n(j,"LI",{});var gLe=s(q1);yce=n(gLe,"STRONG",{});var fat=s(yce);G8o=r(fat,"gpt2"),fat.forEach(t),O8o=r(gLe," \u2014 "),wD=n(gLe,"A",{href:!0});var mat=s(wD);V8o=r(mat,"GPT2ForSequenceClassification"),mat.forEach(t),X8o=r(gLe," (OpenAI GPT-2 model)"),gLe.forEach(t),z8o=i(j),N1=n(j,"LI",{});var hLe=s(N1);Lce=n(hLe,"STRONG",{});var gat=s(Lce);Q8o=r(gat,"gpt_neo"),gat.forEach(t),W8o=r(hLe," \u2014 "),AD=n(hLe,"A",{href:!0});var hat=s(AD);H8o=r(hat,"GPTNeoForSequenceClassification"),hat.forEach(t),U8o=r(hLe," (GPT Neo model)"),hLe.forEach(t),J8o=i(j),j1=n(j,"LI",{});var pLe=s(j1);xce=n(pLe,"STRONG",{});var pat=s(xce);Y8o=r(pat,"gptj"),pat.forEach(t),K8o=r(pLe," \u2014 "),yD=n(pLe,"A",{href:!0});var uat=s(yD);Z8o=r(uat,"GPTJForSequenceClassification"),uat.forEach(t),exo=r(pLe," (GPT-J model)"),pLe.forEach(t),oxo=i(j),D1=n(j,"LI",{});var uLe=s(D1);$ce=n(uLe,"STRONG",{});var _at=s($ce);rxo=r(_at,"ibert"),_at.forEach(t),txo=r(uLe," \u2014 "),LD=n(uLe,"A",{href:!0});var bat=s(LD);axo=r(bat,"IBertForSequenceClassification"),bat.forEach(t),nxo=r(uLe," (I-BERT model)"),uLe.forEach(t),sxo=i(j),G1=n(j,"LI",{});var _Le=s(G1);kce=n(_Le,"STRONG",{});var vat=s(kce);lxo=r(vat,"layoutlm"),vat.forEach(t),ixo=r(_Le," \u2014 "),xD=n(_Le,"A",{href:!0});var Fat=s(xD);dxo=r(Fat,"LayoutLMForSequenceClassification"),Fat.forEach(t),cxo=r(_Le," (LayoutLM model)"),_Le.forEach(t),fxo=i(j),O1=n(j,"LI",{});var bLe=s(O1);Sce=n(bLe,"STRONG",{});var Tat=s(Sce);mxo=r(Tat,"layoutlmv2"),Tat.forEach(t),gxo=r(bLe," \u2014 "),$D=n(bLe,"A",{href:!0});var Mat=s($D);hxo=r(Mat,"LayoutLMv2ForSequenceClassification"),Mat.forEach(t),pxo=r(bLe," (LayoutLMv2 model)"),bLe.forEach(t),uxo=i(j),V1=n(j,"LI",{});var vLe=s(V1);Rce=n(vLe,"STRONG",{});var Eat=s(Rce);_xo=r(Eat,"led"),Eat.forEach(t),bxo=r(vLe," \u2014 "),kD=n(vLe,"A",{href:!0});var Cat=s(kD);vxo=r(Cat,"LEDForSequenceClassification"),Cat.forEach(t),Fxo=r(vLe," (LED model)"),vLe.forEach(t),Txo=i(j),X1=n(j,"LI",{});var FLe=s(X1);Pce=n(FLe,"STRONG",{});var wat=s(Pce);Mxo=r(wat,"longformer"),wat.forEach(t),Exo=r(FLe," \u2014 "),SD=n(FLe,"A",{href:!0});var Aat=s(SD);Cxo=r(Aat,"LongformerForSequenceClassification"),Aat.forEach(t),wxo=r(FLe," (Longformer model)"),FLe.forEach(t),Axo=i(j),z1=n(j,"LI",{});var TLe=s(z1);Bce=n(TLe,"STRONG",{});var yat=s(Bce);yxo=r(yat,"mbart"),yat.forEach(t),Lxo=r(TLe," \u2014 "),RD=n(TLe,"A",{href:!0});var Lat=s(RD);xxo=r(Lat,"MBartForSequenceClassification"),Lat.forEach(t),$xo=r(TLe," (mBART model)"),TLe.forEach(t),kxo=i(j),Q1=n(j,"LI",{});var MLe=s(Q1);Ice=n(MLe,"STRONG",{});var xat=s(Ice);Sxo=r(xat,"megatron-bert"),xat.forEach(t),Rxo=r(MLe," \u2014 "),PD=n(MLe,"A",{href:!0});var $at=s(PD);Pxo=r($at,"MegatronBertForSequenceClassification"),$at.forEach(t),Bxo=r(MLe," (MegatronBert model)"),MLe.forEach(t),Ixo=i(j),W1=n(j,"LI",{});var ELe=s(W1);qce=n(ELe,"STRONG",{});var kat=s(qce);qxo=r(kat,"mobilebert"),kat.forEach(t),Nxo=r(ELe," \u2014 "),BD=n(ELe,"A",{href:!0});var Sat=s(BD);jxo=r(Sat,"MobileBertForSequenceClassification"),Sat.forEach(t),Dxo=r(ELe," (MobileBERT model)"),ELe.forEach(t),Gxo=i(j),H1=n(j,"LI",{});var CLe=s(H1);Nce=n(CLe,"STRONG",{});var Rat=s(Nce);Oxo=r(Rat,"mpnet"),Rat.forEach(t),Vxo=r(CLe," \u2014 "),ID=n(CLe,"A",{href:!0});var Pat=s(ID);Xxo=r(Pat,"MPNetForSequenceClassification"),Pat.forEach(t),zxo=r(CLe," (MPNet model)"),CLe.forEach(t),Qxo=i(j),U1=n(j,"LI",{});var wLe=s(U1);jce=n(wLe,"STRONG",{});var Bat=s(jce);Wxo=r(Bat,"nystromformer"),Bat.forEach(t),Hxo=r(wLe," \u2014 "),qD=n(wLe,"A",{href:!0});var Iat=s(qD);Uxo=r(Iat,"NystromformerForSequenceClassification"),Iat.forEach(t),Jxo=r(wLe," (Nystromformer model)"),wLe.forEach(t),Yxo=i(j),J1=n(j,"LI",{});var ALe=s(J1);Dce=n(ALe,"STRONG",{});var qat=s(Dce);Kxo=r(qat,"openai-gpt"),qat.forEach(t),Zxo=r(ALe," \u2014 "),ND=n(ALe,"A",{href:!0});var Nat=s(ND);e9o=r(Nat,"OpenAIGPTForSequenceClassification"),Nat.forEach(t),o9o=r(ALe," (OpenAI GPT model)"),ALe.forEach(t),r9o=i(j),Y1=n(j,"LI",{});var yLe=s(Y1);Gce=n(yLe,"STRONG",{});var jat=s(Gce);t9o=r(jat,"perceiver"),jat.forEach(t),a9o=r(yLe," \u2014 "),jD=n(yLe,"A",{href:!0});var Dat=s(jD);n9o=r(Dat,"PerceiverForSequenceClassification"),Dat.forEach(t),s9o=r(yLe," (Perceiver model)"),yLe.forEach(t),l9o=i(j),K1=n(j,"LI",{});var LLe=s(K1);Oce=n(LLe,"STRONG",{});var Gat=s(Oce);i9o=r(Gat,"plbart"),Gat.forEach(t),d9o=r(LLe," \u2014 "),DD=n(LLe,"A",{href:!0});var Oat=s(DD);c9o=r(Oat,"PLBartForSequenceClassification"),Oat.forEach(t),f9o=r(LLe," (PLBart model)"),LLe.forEach(t),m9o=i(j),Z1=n(j,"LI",{});var xLe=s(Z1);Vce=n(xLe,"STRONG",{});var Vat=s(Vce);g9o=r(Vat,"qdqbert"),Vat.forEach(t),h9o=r(xLe," \u2014 "),GD=n(xLe,"A",{href:!0});var Xat=s(GD);p9o=r(Xat,"QDQBertForSequenceClassification"),Xat.forEach(t),u9o=r(xLe," (QDQBert model)"),xLe.forEach(t),_9o=i(j),e7=n(j,"LI",{});var $Le=s(e7);Xce=n($Le,"STRONG",{});var zat=s(Xce);b9o=r(zat,"reformer"),zat.forEach(t),v9o=r($Le," \u2014 "),OD=n($Le,"A",{href:!0});var Qat=s(OD);F9o=r(Qat,"ReformerForSequenceClassification"),Qat.forEach(t),T9o=r($Le," (Reformer model)"),$Le.forEach(t),M9o=i(j),o7=n(j,"LI",{});var kLe=s(o7);zce=n(kLe,"STRONG",{});var Wat=s(zce);E9o=r(Wat,"rembert"),Wat.forEach(t),C9o=r(kLe," \u2014 "),VD=n(kLe,"A",{href:!0});var Hat=s(VD);w9o=r(Hat,"RemBertForSequenceClassification"),Hat.forEach(t),A9o=r(kLe," (RemBERT model)"),kLe.forEach(t),y9o=i(j),r7=n(j,"LI",{});var SLe=s(r7);Qce=n(SLe,"STRONG",{});var Uat=s(Qce);L9o=r(Uat,"roberta"),Uat.forEach(t),x9o=r(SLe," \u2014 "),XD=n(SLe,"A",{href:!0});var Jat=s(XD);$9o=r(Jat,"RobertaForSequenceClassification"),Jat.forEach(t),k9o=r(SLe," (RoBERTa model)"),SLe.forEach(t),S9o=i(j),t7=n(j,"LI",{});var RLe=s(t7);Wce=n(RLe,"STRONG",{});var Yat=s(Wce);R9o=r(Yat,"roformer"),Yat.forEach(t),P9o=r(RLe," \u2014 "),zD=n(RLe,"A",{href:!0});var Kat=s(zD);B9o=r(Kat,"RoFormerForSequenceClassification"),Kat.forEach(t),I9o=r(RLe," (RoFormer model)"),RLe.forEach(t),q9o=i(j),a7=n(j,"LI",{});var PLe=s(a7);Hce=n(PLe,"STRONG",{});var Zat=s(Hce);N9o=r(Zat,"squeezebert"),Zat.forEach(t),j9o=r(PLe," \u2014 "),QD=n(PLe,"A",{href:!0});var ent=s(QD);D9o=r(ent,"SqueezeBertForSequenceClassification"),ent.forEach(t),G9o=r(PLe," (SqueezeBERT model)"),PLe.forEach(t),O9o=i(j),n7=n(j,"LI",{});var BLe=s(n7);Uce=n(BLe,"STRONG",{});var ont=s(Uce);V9o=r(ont,"tapas"),ont.forEach(t),X9o=r(BLe," \u2014 "),WD=n(BLe,"A",{href:!0});var rnt=s(WD);z9o=r(rnt,"TapasForSequenceClassification"),rnt.forEach(t),Q9o=r(BLe," (TAPAS model)"),BLe.forEach(t),W9o=i(j),s7=n(j,"LI",{});var ILe=s(s7);Jce=n(ILe,"STRONG",{});var tnt=s(Jce);H9o=r(tnt,"transfo-xl"),tnt.forEach(t),U9o=r(ILe," \u2014 "),HD=n(ILe,"A",{href:!0});var ant=s(HD);J9o=r(ant,"TransfoXLForSequenceClassification"),ant.forEach(t),Y9o=r(ILe," (Transformer-XL model)"),ILe.forEach(t),K9o=i(j),l7=n(j,"LI",{});var qLe=s(l7);Yce=n(qLe,"STRONG",{});var nnt=s(Yce);Z9o=r(nnt,"xlm"),nnt.forEach(t),e$o=r(qLe," \u2014 "),UD=n(qLe,"A",{href:!0});var snt=s(UD);o$o=r(snt,"XLMForSequenceClassification"),snt.forEach(t),r$o=r(qLe," (XLM model)"),qLe.forEach(t),t$o=i(j),i7=n(j,"LI",{});var NLe=s(i7);Kce=n(NLe,"STRONG",{});var lnt=s(Kce);a$o=r(lnt,"xlm-roberta"),lnt.forEach(t),n$o=r(NLe," \u2014 "),JD=n(NLe,"A",{href:!0});var int=s(JD);s$o=r(int,"XLMRobertaForSequenceClassification"),int.forEach(t),l$o=r(NLe," (XLM-RoBERTa model)"),NLe.forEach(t),i$o=i(j),d7=n(j,"LI",{});var jLe=s(d7);Zce=n(jLe,"STRONG",{});var dnt=s(Zce);d$o=r(dnt,"xlm-roberta-xl"),dnt.forEach(t),c$o=r(jLe," \u2014 "),YD=n(jLe,"A",{href:!0});var cnt=s(YD);f$o=r(cnt,"XLMRobertaXLForSequenceClassification"),cnt.forEach(t),m$o=r(jLe," (XLM-RoBERTa-XL model)"),jLe.forEach(t),g$o=i(j),c7=n(j,"LI",{});var DLe=s(c7);efe=n(DLe,"STRONG",{});var fnt=s(efe);h$o=r(fnt,"xlnet"),fnt.forEach(t),p$o=r(DLe," \u2014 "),KD=n(DLe,"A",{href:!0});var mnt=s(KD);u$o=r(mnt,"XLNetForSequenceClassification"),mnt.forEach(t),_$o=r(DLe," (XLNet model)"),DLe.forEach(t),b$o=i(j),f7=n(j,"LI",{});var GLe=s(f7);ofe=n(GLe,"STRONG",{});var gnt=s(ofe);v$o=r(gnt,"yoso"),gnt.forEach(t),F$o=r(GLe," \u2014 "),ZD=n(GLe,"A",{href:!0});var hnt=s(ZD);T$o=r(hnt,"YosoForSequenceClassification"),hnt.forEach(t),M$o=r(GLe," (YOSO model)"),GLe.forEach(t),j.forEach(t),E$o=i(aa),m7=n(aa,"P",{});var OLe=s(m7);C$o=r(OLe,"The model is set in evaluation mode by default using "),rfe=n(OLe,"CODE",{});var pnt=s(rfe);w$o=r(pnt,"model.eval()"),pnt.forEach(t),A$o=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=n(OLe,"CODE",{});var unt=s(tfe);y$o=r(unt,"model.train()"),unt.forEach(t),OLe.forEach(t),L$o=i(aa),T(g7.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),sIe=i(f),ji=n(f,"H2",{class:!0});var cNe=s(ji);h7=n(cNe,"A",{id:!0,class:!0,href:!0});var _nt=s(h7);afe=n(_nt,"SPAN",{});var bnt=s(afe);T(Y6.$$.fragment,bnt),bnt.forEach(t),_nt.forEach(t),x$o=i(cNe),nfe=n(cNe,"SPAN",{});var vnt=s(nfe);$$o=r(vnt,"AutoModelForMultipleChoice"),vnt.forEach(t),cNe.forEach(t),lIe=i(f),Po=n(f,"DIV",{class:!0});var zs=s(Po);T(K6.$$.fragment,zs),k$o=i(zs),Di=n(zs,"P",{});var uK=s(Di);S$o=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eG=n(uK,"A",{href:!0});var Fnt=s(eG);R$o=r(Fnt,"from_pretrained()"),Fnt.forEach(t),P$o=r(uK," class method or the "),oG=n(uK,"A",{href:!0});var Tnt=s(oG);B$o=r(Tnt,"from_config()"),Tnt.forEach(t),I$o=r(uK,` class
method.`),uK.forEach(t),q$o=i(zs),Z6=n(zs,"P",{});var fNe=s(Z6);N$o=r(fNe,"This class cannot be instantiated directly using "),sfe=n(fNe,"CODE",{});var Mnt=s(sfe);j$o=r(Mnt,"__init__()"),Mnt.forEach(t),D$o=r(fNe," (throws an error)."),fNe.forEach(t),G$o=i(zs),lt=n(zs,"DIV",{class:!0});var cA=s(lt);T(ey.$$.fragment,cA),O$o=i(cA),lfe=n(cA,"P",{});var Ent=s(lfe);V$o=r(Ent,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ent.forEach(t),X$o=i(cA),Gi=n(cA,"P",{});var _K=s(Gi);z$o=r(_K,`Note:
Loading a model from its configuration file does `),ife=n(_K,"STRONG",{});var Cnt=s(ife);Q$o=r(Cnt,"not"),Cnt.forEach(t),W$o=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(_K,"A",{href:!0});var wnt=s(rG);H$o=r(wnt,"from_pretrained()"),wnt.forEach(t),U$o=r(_K," to load the model weights."),_K.forEach(t),J$o=i(cA),T(p7.$$.fragment,cA),cA.forEach(t),Y$o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(oy.$$.fragment,na),K$o=i(na),dfe=n(na,"P",{});var Ant=s(dfe);Z$o=r(Ant,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ant.forEach(t),eko=i(na),Sa=n(na,"P",{});var fA=s(Sa);oko=r(fA,"The model class to instantiate is selected based on the "),cfe=n(fA,"CODE",{});var ynt=s(cfe);rko=r(ynt,"model_type"),ynt.forEach(t),tko=r(fA,` property of the config object (either
passed as an argument or loaded from `),ffe=n(fA,"CODE",{});var Lnt=s(ffe);ako=r(Lnt,"pretrained_model_name_or_path"),Lnt.forEach(t),nko=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(fA,"CODE",{});var xnt=s(mfe);sko=r(xnt,"pretrained_model_name_or_path"),xnt.forEach(t),lko=r(fA,":"),fA.forEach(t),iko=i(na),Y=n(na,"UL",{});var K=s(Y);u7=n(K,"LI",{});var VLe=s(u7);gfe=n(VLe,"STRONG",{});var $nt=s(gfe);dko=r($nt,"albert"),$nt.forEach(t),cko=r(VLe," \u2014 "),tG=n(VLe,"A",{href:!0});var knt=s(tG);fko=r(knt,"AlbertForMultipleChoice"),knt.forEach(t),mko=r(VLe," (ALBERT model)"),VLe.forEach(t),gko=i(K),_7=n(K,"LI",{});var XLe=s(_7);hfe=n(XLe,"STRONG",{});var Snt=s(hfe);hko=r(Snt,"bert"),Snt.forEach(t),pko=r(XLe," \u2014 "),aG=n(XLe,"A",{href:!0});var Rnt=s(aG);uko=r(Rnt,"BertForMultipleChoice"),Rnt.forEach(t),_ko=r(XLe," (BERT model)"),XLe.forEach(t),bko=i(K),b7=n(K,"LI",{});var zLe=s(b7);pfe=n(zLe,"STRONG",{});var Pnt=s(pfe);vko=r(Pnt,"big_bird"),Pnt.forEach(t),Fko=r(zLe," \u2014 "),nG=n(zLe,"A",{href:!0});var Bnt=s(nG);Tko=r(Bnt,"BigBirdForMultipleChoice"),Bnt.forEach(t),Mko=r(zLe," (BigBird model)"),zLe.forEach(t),Eko=i(K),v7=n(K,"LI",{});var QLe=s(v7);ufe=n(QLe,"STRONG",{});var Int=s(ufe);Cko=r(Int,"camembert"),Int.forEach(t),wko=r(QLe," \u2014 "),sG=n(QLe,"A",{href:!0});var qnt=s(sG);Ako=r(qnt,"CamembertForMultipleChoice"),qnt.forEach(t),yko=r(QLe," (CamemBERT model)"),QLe.forEach(t),Lko=i(K),F7=n(K,"LI",{});var WLe=s(F7);_fe=n(WLe,"STRONG",{});var Nnt=s(_fe);xko=r(Nnt,"canine"),Nnt.forEach(t),$ko=r(WLe," \u2014 "),lG=n(WLe,"A",{href:!0});var jnt=s(lG);kko=r(jnt,"CanineForMultipleChoice"),jnt.forEach(t),Sko=r(WLe," (Canine model)"),WLe.forEach(t),Rko=i(K),T7=n(K,"LI",{});var HLe=s(T7);bfe=n(HLe,"STRONG",{});var Dnt=s(bfe);Pko=r(Dnt,"convbert"),Dnt.forEach(t),Bko=r(HLe," \u2014 "),iG=n(HLe,"A",{href:!0});var Gnt=s(iG);Iko=r(Gnt,"ConvBertForMultipleChoice"),Gnt.forEach(t),qko=r(HLe," (ConvBERT model)"),HLe.forEach(t),Nko=i(K),M7=n(K,"LI",{});var ULe=s(M7);vfe=n(ULe,"STRONG",{});var Ont=s(vfe);jko=r(Ont,"data2vec-text"),Ont.forEach(t),Dko=r(ULe," \u2014 "),dG=n(ULe,"A",{href:!0});var Vnt=s(dG);Gko=r(Vnt,"Data2VecTextForMultipleChoice"),Vnt.forEach(t),Oko=r(ULe," (Data2VecText model)"),ULe.forEach(t),Vko=i(K),E7=n(K,"LI",{});var JLe=s(E7);Ffe=n(JLe,"STRONG",{});var Xnt=s(Ffe);Xko=r(Xnt,"deberta-v2"),Xnt.forEach(t),zko=r(JLe," \u2014 "),cG=n(JLe,"A",{href:!0});var znt=s(cG);Qko=r(znt,"DebertaV2ForMultipleChoice"),znt.forEach(t),Wko=r(JLe," (DeBERTa-v2 model)"),JLe.forEach(t),Hko=i(K),C7=n(K,"LI",{});var YLe=s(C7);Tfe=n(YLe,"STRONG",{});var Qnt=s(Tfe);Uko=r(Qnt,"distilbert"),Qnt.forEach(t),Jko=r(YLe," \u2014 "),fG=n(YLe,"A",{href:!0});var Wnt=s(fG);Yko=r(Wnt,"DistilBertForMultipleChoice"),Wnt.forEach(t),Kko=r(YLe," (DistilBERT model)"),YLe.forEach(t),Zko=i(K),w7=n(K,"LI",{});var KLe=s(w7);Mfe=n(KLe,"STRONG",{});var Hnt=s(Mfe);eSo=r(Hnt,"electra"),Hnt.forEach(t),oSo=r(KLe," \u2014 "),mG=n(KLe,"A",{href:!0});var Unt=s(mG);rSo=r(Unt,"ElectraForMultipleChoice"),Unt.forEach(t),tSo=r(KLe," (ELECTRA model)"),KLe.forEach(t),aSo=i(K),A7=n(K,"LI",{});var ZLe=s(A7);Efe=n(ZLe,"STRONG",{});var Jnt=s(Efe);nSo=r(Jnt,"flaubert"),Jnt.forEach(t),sSo=r(ZLe," \u2014 "),gG=n(ZLe,"A",{href:!0});var Ynt=s(gG);lSo=r(Ynt,"FlaubertForMultipleChoice"),Ynt.forEach(t),iSo=r(ZLe," (FlauBERT model)"),ZLe.forEach(t),dSo=i(K),y7=n(K,"LI",{});var e8e=s(y7);Cfe=n(e8e,"STRONG",{});var Knt=s(Cfe);cSo=r(Knt,"fnet"),Knt.forEach(t),fSo=r(e8e," \u2014 "),hG=n(e8e,"A",{href:!0});var Znt=s(hG);mSo=r(Znt,"FNetForMultipleChoice"),Znt.forEach(t),gSo=r(e8e," (FNet model)"),e8e.forEach(t),hSo=i(K),L7=n(K,"LI",{});var o8e=s(L7);wfe=n(o8e,"STRONG",{});var est=s(wfe);pSo=r(est,"funnel"),est.forEach(t),uSo=r(o8e," \u2014 "),pG=n(o8e,"A",{href:!0});var ost=s(pG);_So=r(ost,"FunnelForMultipleChoice"),ost.forEach(t),bSo=r(o8e," (Funnel Transformer model)"),o8e.forEach(t),vSo=i(K),x7=n(K,"LI",{});var r8e=s(x7);Afe=n(r8e,"STRONG",{});var rst=s(Afe);FSo=r(rst,"ibert"),rst.forEach(t),TSo=r(r8e," \u2014 "),uG=n(r8e,"A",{href:!0});var tst=s(uG);MSo=r(tst,"IBertForMultipleChoice"),tst.forEach(t),ESo=r(r8e," (I-BERT model)"),r8e.forEach(t),CSo=i(K),$7=n(K,"LI",{});var t8e=s($7);yfe=n(t8e,"STRONG",{});var ast=s(yfe);wSo=r(ast,"longformer"),ast.forEach(t),ASo=r(t8e," \u2014 "),_G=n(t8e,"A",{href:!0});var nst=s(_G);ySo=r(nst,"LongformerForMultipleChoice"),nst.forEach(t),LSo=r(t8e," (Longformer model)"),t8e.forEach(t),xSo=i(K),k7=n(K,"LI",{});var a8e=s(k7);Lfe=n(a8e,"STRONG",{});var sst=s(Lfe);$So=r(sst,"megatron-bert"),sst.forEach(t),kSo=r(a8e," \u2014 "),bG=n(a8e,"A",{href:!0});var lst=s(bG);SSo=r(lst,"MegatronBertForMultipleChoice"),lst.forEach(t),RSo=r(a8e," (MegatronBert model)"),a8e.forEach(t),PSo=i(K),S7=n(K,"LI",{});var n8e=s(S7);xfe=n(n8e,"STRONG",{});var ist=s(xfe);BSo=r(ist,"mobilebert"),ist.forEach(t),ISo=r(n8e," \u2014 "),vG=n(n8e,"A",{href:!0});var dst=s(vG);qSo=r(dst,"MobileBertForMultipleChoice"),dst.forEach(t),NSo=r(n8e," (MobileBERT model)"),n8e.forEach(t),jSo=i(K),R7=n(K,"LI",{});var s8e=s(R7);$fe=n(s8e,"STRONG",{});var cst=s($fe);DSo=r(cst,"mpnet"),cst.forEach(t),GSo=r(s8e," \u2014 "),FG=n(s8e,"A",{href:!0});var fst=s(FG);OSo=r(fst,"MPNetForMultipleChoice"),fst.forEach(t),VSo=r(s8e," (MPNet model)"),s8e.forEach(t),XSo=i(K),P7=n(K,"LI",{});var l8e=s(P7);kfe=n(l8e,"STRONG",{});var mst=s(kfe);zSo=r(mst,"nystromformer"),mst.forEach(t),QSo=r(l8e," \u2014 "),TG=n(l8e,"A",{href:!0});var gst=s(TG);WSo=r(gst,"NystromformerForMultipleChoice"),gst.forEach(t),HSo=r(l8e," (Nystromformer model)"),l8e.forEach(t),USo=i(K),B7=n(K,"LI",{});var i8e=s(B7);Sfe=n(i8e,"STRONG",{});var hst=s(Sfe);JSo=r(hst,"qdqbert"),hst.forEach(t),YSo=r(i8e," \u2014 "),MG=n(i8e,"A",{href:!0});var pst=s(MG);KSo=r(pst,"QDQBertForMultipleChoice"),pst.forEach(t),ZSo=r(i8e," (QDQBert model)"),i8e.forEach(t),eRo=i(K),I7=n(K,"LI",{});var d8e=s(I7);Rfe=n(d8e,"STRONG",{});var ust=s(Rfe);oRo=r(ust,"rembert"),ust.forEach(t),rRo=r(d8e," \u2014 "),EG=n(d8e,"A",{href:!0});var _st=s(EG);tRo=r(_st,"RemBertForMultipleChoice"),_st.forEach(t),aRo=r(d8e," (RemBERT model)"),d8e.forEach(t),nRo=i(K),q7=n(K,"LI",{});var c8e=s(q7);Pfe=n(c8e,"STRONG",{});var bst=s(Pfe);sRo=r(bst,"roberta"),bst.forEach(t),lRo=r(c8e," \u2014 "),CG=n(c8e,"A",{href:!0});var vst=s(CG);iRo=r(vst,"RobertaForMultipleChoice"),vst.forEach(t),dRo=r(c8e," (RoBERTa model)"),c8e.forEach(t),cRo=i(K),N7=n(K,"LI",{});var f8e=s(N7);Bfe=n(f8e,"STRONG",{});var Fst=s(Bfe);fRo=r(Fst,"roformer"),Fst.forEach(t),mRo=r(f8e," \u2014 "),wG=n(f8e,"A",{href:!0});var Tst=s(wG);gRo=r(Tst,"RoFormerForMultipleChoice"),Tst.forEach(t),hRo=r(f8e," (RoFormer model)"),f8e.forEach(t),pRo=i(K),j7=n(K,"LI",{});var m8e=s(j7);Ife=n(m8e,"STRONG",{});var Mst=s(Ife);uRo=r(Mst,"squeezebert"),Mst.forEach(t),_Ro=r(m8e," \u2014 "),AG=n(m8e,"A",{href:!0});var Est=s(AG);bRo=r(Est,"SqueezeBertForMultipleChoice"),Est.forEach(t),vRo=r(m8e," (SqueezeBERT model)"),m8e.forEach(t),FRo=i(K),D7=n(K,"LI",{});var g8e=s(D7);qfe=n(g8e,"STRONG",{});var Cst=s(qfe);TRo=r(Cst,"xlm"),Cst.forEach(t),MRo=r(g8e," \u2014 "),yG=n(g8e,"A",{href:!0});var wst=s(yG);ERo=r(wst,"XLMForMultipleChoice"),wst.forEach(t),CRo=r(g8e," (XLM model)"),g8e.forEach(t),wRo=i(K),G7=n(K,"LI",{});var h8e=s(G7);Nfe=n(h8e,"STRONG",{});var Ast=s(Nfe);ARo=r(Ast,"xlm-roberta"),Ast.forEach(t),yRo=r(h8e," \u2014 "),LG=n(h8e,"A",{href:!0});var yst=s(LG);LRo=r(yst,"XLMRobertaForMultipleChoice"),yst.forEach(t),xRo=r(h8e," (XLM-RoBERTa model)"),h8e.forEach(t),$Ro=i(K),O7=n(K,"LI",{});var p8e=s(O7);jfe=n(p8e,"STRONG",{});var Lst=s(jfe);kRo=r(Lst,"xlm-roberta-xl"),Lst.forEach(t),SRo=r(p8e," \u2014 "),xG=n(p8e,"A",{href:!0});var xst=s(xG);RRo=r(xst,"XLMRobertaXLForMultipleChoice"),xst.forEach(t),PRo=r(p8e," (XLM-RoBERTa-XL model)"),p8e.forEach(t),BRo=i(K),V7=n(K,"LI",{});var u8e=s(V7);Dfe=n(u8e,"STRONG",{});var $st=s(Dfe);IRo=r($st,"xlnet"),$st.forEach(t),qRo=r(u8e," \u2014 "),$G=n(u8e,"A",{href:!0});var kst=s($G);NRo=r(kst,"XLNetForMultipleChoice"),kst.forEach(t),jRo=r(u8e," (XLNet model)"),u8e.forEach(t),DRo=i(K),X7=n(K,"LI",{});var _8e=s(X7);Gfe=n(_8e,"STRONG",{});var Sst=s(Gfe);GRo=r(Sst,"yoso"),Sst.forEach(t),ORo=r(_8e," \u2014 "),kG=n(_8e,"A",{href:!0});var Rst=s(kG);VRo=r(Rst,"YosoForMultipleChoice"),Rst.forEach(t),XRo=r(_8e," (YOSO model)"),_8e.forEach(t),K.forEach(t),zRo=i(na),z7=n(na,"P",{});var b8e=s(z7);QRo=r(b8e,"The model is set in evaluation mode by default using "),Ofe=n(b8e,"CODE",{});var Pst=s(Ofe);WRo=r(Pst,"model.eval()"),Pst.forEach(t),HRo=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=n(b8e,"CODE",{});var Bst=s(Vfe);URo=r(Bst,"model.train()"),Bst.forEach(t),b8e.forEach(t),JRo=i(na),T(Q7.$$.fragment,na),na.forEach(t),zs.forEach(t),iIe=i(f),Oi=n(f,"H2",{class:!0});var mNe=s(Oi);W7=n(mNe,"A",{id:!0,class:!0,href:!0});var Ist=s(W7);Xfe=n(Ist,"SPAN",{});var qst=s(Xfe);T(ry.$$.fragment,qst),qst.forEach(t),Ist.forEach(t),YRo=i(mNe),zfe=n(mNe,"SPAN",{});var Nst=s(zfe);KRo=r(Nst,"AutoModelForNextSentencePrediction"),Nst.forEach(t),mNe.forEach(t),dIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(ty.$$.fragment,Qs),ZRo=i(Qs),Vi=n(Qs,"P",{});var bK=s(Vi);ePo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SG=n(bK,"A",{href:!0});var jst=s(SG);oPo=r(jst,"from_pretrained()"),jst.forEach(t),rPo=r(bK," class method or the "),RG=n(bK,"A",{href:!0});var Dst=s(RG);tPo=r(Dst,"from_config()"),Dst.forEach(t),aPo=r(bK,` class
method.`),bK.forEach(t),nPo=i(Qs),ay=n(Qs,"P",{});var gNe=s(ay);sPo=r(gNe,"This class cannot be instantiated directly using "),Qfe=n(gNe,"CODE",{});var Gst=s(Qfe);lPo=r(Gst,"__init__()"),Gst.forEach(t),iPo=r(gNe," (throws an error)."),gNe.forEach(t),dPo=i(Qs),it=n(Qs,"DIV",{class:!0});var mA=s(it);T(ny.$$.fragment,mA),cPo=i(mA),Wfe=n(mA,"P",{});var Ost=s(Wfe);fPo=r(Ost,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ost.forEach(t),mPo=i(mA),Xi=n(mA,"P",{});var vK=s(Xi);gPo=r(vK,`Note:
Loading a model from its configuration file does `),Hfe=n(vK,"STRONG",{});var Vst=s(Hfe);hPo=r(Vst,"not"),Vst.forEach(t),pPo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(vK,"A",{href:!0});var Xst=s(PG);uPo=r(Xst,"from_pretrained()"),Xst.forEach(t),_Po=r(vK," to load the model weights."),vK.forEach(t),bPo=i(mA),T(H7.$$.fragment,mA),mA.forEach(t),vPo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(sy.$$.fragment,sa),FPo=i(sa),Ufe=n(sa,"P",{});var zst=s(Ufe);TPo=r(zst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zst.forEach(t),MPo=i(sa),Ra=n(sa,"P",{});var gA=s(Ra);EPo=r(gA,"The model class to instantiate is selected based on the "),Jfe=n(gA,"CODE",{});var Qst=s(Jfe);CPo=r(Qst,"model_type"),Qst.forEach(t),wPo=r(gA,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(gA,"CODE",{});var Wst=s(Yfe);APo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),yPo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(gA,"CODE",{});var Hst=s(Kfe);LPo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),xPo=r(gA,":"),gA.forEach(t),$Po=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);U7=n(Ws,"LI",{});var v8e=s(U7);Zfe=n(v8e,"STRONG",{});var Ust=s(Zfe);kPo=r(Ust,"bert"),Ust.forEach(t),SPo=r(v8e," \u2014 "),BG=n(v8e,"A",{href:!0});var Jst=s(BG);RPo=r(Jst,"BertForNextSentencePrediction"),Jst.forEach(t),PPo=r(v8e," (BERT model)"),v8e.forEach(t),BPo=i(Ws),J7=n(Ws,"LI",{});var F8e=s(J7);eme=n(F8e,"STRONG",{});var Yst=s(eme);IPo=r(Yst,"fnet"),Yst.forEach(t),qPo=r(F8e," \u2014 "),IG=n(F8e,"A",{href:!0});var Kst=s(IG);NPo=r(Kst,"FNetForNextSentencePrediction"),Kst.forEach(t),jPo=r(F8e," (FNet model)"),F8e.forEach(t),DPo=i(Ws),Y7=n(Ws,"LI",{});var T8e=s(Y7);ome=n(T8e,"STRONG",{});var Zst=s(ome);GPo=r(Zst,"megatron-bert"),Zst.forEach(t),OPo=r(T8e," \u2014 "),qG=n(T8e,"A",{href:!0});var elt=s(qG);VPo=r(elt,"MegatronBertForNextSentencePrediction"),elt.forEach(t),XPo=r(T8e," (MegatronBert model)"),T8e.forEach(t),zPo=i(Ws),K7=n(Ws,"LI",{});var M8e=s(K7);rme=n(M8e,"STRONG",{});var olt=s(rme);QPo=r(olt,"mobilebert"),olt.forEach(t),WPo=r(M8e," \u2014 "),NG=n(M8e,"A",{href:!0});var rlt=s(NG);HPo=r(rlt,"MobileBertForNextSentencePrediction"),rlt.forEach(t),UPo=r(M8e," (MobileBERT model)"),M8e.forEach(t),JPo=i(Ws),Z7=n(Ws,"LI",{});var E8e=s(Z7);tme=n(E8e,"STRONG",{});var tlt=s(tme);YPo=r(tlt,"qdqbert"),tlt.forEach(t),KPo=r(E8e," \u2014 "),jG=n(E8e,"A",{href:!0});var alt=s(jG);ZPo=r(alt,"QDQBertForNextSentencePrediction"),alt.forEach(t),eBo=r(E8e," (QDQBert model)"),E8e.forEach(t),Ws.forEach(t),oBo=i(sa),eb=n(sa,"P",{});var C8e=s(eb);rBo=r(C8e,"The model is set in evaluation mode by default using "),ame=n(C8e,"CODE",{});var nlt=s(ame);tBo=r(nlt,"model.eval()"),nlt.forEach(t),aBo=r(C8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=n(C8e,"CODE",{});var slt=s(nme);nBo=r(slt,"model.train()"),slt.forEach(t),C8e.forEach(t),sBo=i(sa),T(ob.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),cIe=i(f),zi=n(f,"H2",{class:!0});var hNe=s(zi);rb=n(hNe,"A",{id:!0,class:!0,href:!0});var llt=s(rb);sme=n(llt,"SPAN",{});var ilt=s(sme);T(ly.$$.fragment,ilt),ilt.forEach(t),llt.forEach(t),lBo=i(hNe),lme=n(hNe,"SPAN",{});var dlt=s(lme);iBo=r(dlt,"AutoModelForTokenClassification"),dlt.forEach(t),hNe.forEach(t),fIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(iy.$$.fragment,Hs),dBo=i(Hs),Qi=n(Hs,"P",{});var FK=s(Qi);cBo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DG=n(FK,"A",{href:!0});var clt=s(DG);fBo=r(clt,"from_pretrained()"),clt.forEach(t),mBo=r(FK," class method or the "),GG=n(FK,"A",{href:!0});var flt=s(GG);gBo=r(flt,"from_config()"),flt.forEach(t),hBo=r(FK,` class
method.`),FK.forEach(t),pBo=i(Hs),dy=n(Hs,"P",{});var pNe=s(dy);uBo=r(pNe,"This class cannot be instantiated directly using "),ime=n(pNe,"CODE",{});var mlt=s(ime);_Bo=r(mlt,"__init__()"),mlt.forEach(t),bBo=r(pNe," (throws an error)."),pNe.forEach(t),vBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var hA=s(dt);T(cy.$$.fragment,hA),FBo=i(hA),dme=n(hA,"P",{});var glt=s(dme);TBo=r(glt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),glt.forEach(t),MBo=i(hA),Wi=n(hA,"P",{});var TK=s(Wi);EBo=r(TK,`Note:
Loading a model from its configuration file does `),cme=n(TK,"STRONG",{});var hlt=s(cme);CBo=r(hlt,"not"),hlt.forEach(t),wBo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(TK,"A",{href:!0});var plt=s(OG);ABo=r(plt,"from_pretrained()"),plt.forEach(t),yBo=r(TK," to load the model weights."),TK.forEach(t),LBo=i(hA),T(tb.$$.fragment,hA),hA.forEach(t),xBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(fy.$$.fragment,la),$Bo=i(la),fme=n(la,"P",{});var ult=s(fme);kBo=r(ult,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ult.forEach(t),SBo=i(la),Pa=n(la,"P",{});var pA=s(Pa);RBo=r(pA,"The model class to instantiate is selected based on the "),mme=n(pA,"CODE",{});var _lt=s(mme);PBo=r(_lt,"model_type"),_lt.forEach(t),BBo=r(pA,` property of the config object (either
passed as an argument or loaded from `),gme=n(pA,"CODE",{});var blt=s(gme);IBo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),qBo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(pA,"CODE",{});var vlt=s(hme);NBo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),jBo=r(pA,":"),pA.forEach(t),DBo=i(la),U=n(la,"UL",{});var J=s(U);ab=n(J,"LI",{});var w8e=s(ab);pme=n(w8e,"STRONG",{});var Flt=s(pme);GBo=r(Flt,"albert"),Flt.forEach(t),OBo=r(w8e," \u2014 "),VG=n(w8e,"A",{href:!0});var Tlt=s(VG);VBo=r(Tlt,"AlbertForTokenClassification"),Tlt.forEach(t),XBo=r(w8e," (ALBERT model)"),w8e.forEach(t),zBo=i(J),nb=n(J,"LI",{});var A8e=s(nb);ume=n(A8e,"STRONG",{});var Mlt=s(ume);QBo=r(Mlt,"bert"),Mlt.forEach(t),WBo=r(A8e," \u2014 "),XG=n(A8e,"A",{href:!0});var Elt=s(XG);HBo=r(Elt,"BertForTokenClassification"),Elt.forEach(t),UBo=r(A8e," (BERT model)"),A8e.forEach(t),JBo=i(J),sb=n(J,"LI",{});var y8e=s(sb);_me=n(y8e,"STRONG",{});var Clt=s(_me);YBo=r(Clt,"big_bird"),Clt.forEach(t),KBo=r(y8e," \u2014 "),zG=n(y8e,"A",{href:!0});var wlt=s(zG);ZBo=r(wlt,"BigBirdForTokenClassification"),wlt.forEach(t),eIo=r(y8e," (BigBird model)"),y8e.forEach(t),oIo=i(J),lb=n(J,"LI",{});var L8e=s(lb);bme=n(L8e,"STRONG",{});var Alt=s(bme);rIo=r(Alt,"camembert"),Alt.forEach(t),tIo=r(L8e," \u2014 "),QG=n(L8e,"A",{href:!0});var ylt=s(QG);aIo=r(ylt,"CamembertForTokenClassification"),ylt.forEach(t),nIo=r(L8e," (CamemBERT model)"),L8e.forEach(t),sIo=i(J),ib=n(J,"LI",{});var x8e=s(ib);vme=n(x8e,"STRONG",{});var Llt=s(vme);lIo=r(Llt,"canine"),Llt.forEach(t),iIo=r(x8e," \u2014 "),WG=n(x8e,"A",{href:!0});var xlt=s(WG);dIo=r(xlt,"CanineForTokenClassification"),xlt.forEach(t),cIo=r(x8e," (Canine model)"),x8e.forEach(t),fIo=i(J),db=n(J,"LI",{});var $8e=s(db);Fme=n($8e,"STRONG",{});var $lt=s(Fme);mIo=r($lt,"convbert"),$lt.forEach(t),gIo=r($8e," \u2014 "),HG=n($8e,"A",{href:!0});var klt=s(HG);hIo=r(klt,"ConvBertForTokenClassification"),klt.forEach(t),pIo=r($8e," (ConvBERT model)"),$8e.forEach(t),uIo=i(J),cb=n(J,"LI",{});var k8e=s(cb);Tme=n(k8e,"STRONG",{});var Slt=s(Tme);_Io=r(Slt,"data2vec-text"),Slt.forEach(t),bIo=r(k8e," \u2014 "),UG=n(k8e,"A",{href:!0});var Rlt=s(UG);vIo=r(Rlt,"Data2VecTextForTokenClassification"),Rlt.forEach(t),FIo=r(k8e," (Data2VecText model)"),k8e.forEach(t),TIo=i(J),fb=n(J,"LI",{});var S8e=s(fb);Mme=n(S8e,"STRONG",{});var Plt=s(Mme);MIo=r(Plt,"deberta"),Plt.forEach(t),EIo=r(S8e," \u2014 "),JG=n(S8e,"A",{href:!0});var Blt=s(JG);CIo=r(Blt,"DebertaForTokenClassification"),Blt.forEach(t),wIo=r(S8e," (DeBERTa model)"),S8e.forEach(t),AIo=i(J),mb=n(J,"LI",{});var R8e=s(mb);Eme=n(R8e,"STRONG",{});var Ilt=s(Eme);yIo=r(Ilt,"deberta-v2"),Ilt.forEach(t),LIo=r(R8e," \u2014 "),YG=n(R8e,"A",{href:!0});var qlt=s(YG);xIo=r(qlt,"DebertaV2ForTokenClassification"),qlt.forEach(t),$Io=r(R8e," (DeBERTa-v2 model)"),R8e.forEach(t),kIo=i(J),gb=n(J,"LI",{});var P8e=s(gb);Cme=n(P8e,"STRONG",{});var Nlt=s(Cme);SIo=r(Nlt,"distilbert"),Nlt.forEach(t),RIo=r(P8e," \u2014 "),KG=n(P8e,"A",{href:!0});var jlt=s(KG);PIo=r(jlt,"DistilBertForTokenClassification"),jlt.forEach(t),BIo=r(P8e," (DistilBERT model)"),P8e.forEach(t),IIo=i(J),hb=n(J,"LI",{});var B8e=s(hb);wme=n(B8e,"STRONG",{});var Dlt=s(wme);qIo=r(Dlt,"electra"),Dlt.forEach(t),NIo=r(B8e," \u2014 "),ZG=n(B8e,"A",{href:!0});var Glt=s(ZG);jIo=r(Glt,"ElectraForTokenClassification"),Glt.forEach(t),DIo=r(B8e," (ELECTRA model)"),B8e.forEach(t),GIo=i(J),pb=n(J,"LI",{});var I8e=s(pb);Ame=n(I8e,"STRONG",{});var Olt=s(Ame);OIo=r(Olt,"flaubert"),Olt.forEach(t),VIo=r(I8e," \u2014 "),eO=n(I8e,"A",{href:!0});var Vlt=s(eO);XIo=r(Vlt,"FlaubertForTokenClassification"),Vlt.forEach(t),zIo=r(I8e," (FlauBERT model)"),I8e.forEach(t),QIo=i(J),ub=n(J,"LI",{});var q8e=s(ub);yme=n(q8e,"STRONG",{});var Xlt=s(yme);WIo=r(Xlt,"fnet"),Xlt.forEach(t),HIo=r(q8e," \u2014 "),oO=n(q8e,"A",{href:!0});var zlt=s(oO);UIo=r(zlt,"FNetForTokenClassification"),zlt.forEach(t),JIo=r(q8e," (FNet model)"),q8e.forEach(t),YIo=i(J),_b=n(J,"LI",{});var N8e=s(_b);Lme=n(N8e,"STRONG",{});var Qlt=s(Lme);KIo=r(Qlt,"funnel"),Qlt.forEach(t),ZIo=r(N8e," \u2014 "),rO=n(N8e,"A",{href:!0});var Wlt=s(rO);eqo=r(Wlt,"FunnelForTokenClassification"),Wlt.forEach(t),oqo=r(N8e," (Funnel Transformer model)"),N8e.forEach(t),rqo=i(J),bb=n(J,"LI",{});var j8e=s(bb);xme=n(j8e,"STRONG",{});var Hlt=s(xme);tqo=r(Hlt,"gpt2"),Hlt.forEach(t),aqo=r(j8e," \u2014 "),tO=n(j8e,"A",{href:!0});var Ult=s(tO);nqo=r(Ult,"GPT2ForTokenClassification"),Ult.forEach(t),sqo=r(j8e," (OpenAI GPT-2 model)"),j8e.forEach(t),lqo=i(J),vb=n(J,"LI",{});var D8e=s(vb);$me=n(D8e,"STRONG",{});var Jlt=s($me);iqo=r(Jlt,"ibert"),Jlt.forEach(t),dqo=r(D8e," \u2014 "),aO=n(D8e,"A",{href:!0});var Ylt=s(aO);cqo=r(Ylt,"IBertForTokenClassification"),Ylt.forEach(t),fqo=r(D8e," (I-BERT model)"),D8e.forEach(t),mqo=i(J),Fb=n(J,"LI",{});var G8e=s(Fb);kme=n(G8e,"STRONG",{});var Klt=s(kme);gqo=r(Klt,"layoutlm"),Klt.forEach(t),hqo=r(G8e," \u2014 "),nO=n(G8e,"A",{href:!0});var Zlt=s(nO);pqo=r(Zlt,"LayoutLMForTokenClassification"),Zlt.forEach(t),uqo=r(G8e," (LayoutLM model)"),G8e.forEach(t),_qo=i(J),Tb=n(J,"LI",{});var O8e=s(Tb);Sme=n(O8e,"STRONG",{});var eit=s(Sme);bqo=r(eit,"layoutlmv2"),eit.forEach(t),vqo=r(O8e," \u2014 "),sO=n(O8e,"A",{href:!0});var oit=s(sO);Fqo=r(oit,"LayoutLMv2ForTokenClassification"),oit.forEach(t),Tqo=r(O8e," (LayoutLMv2 model)"),O8e.forEach(t),Mqo=i(J),Mb=n(J,"LI",{});var V8e=s(Mb);Rme=n(V8e,"STRONG",{});var rit=s(Rme);Eqo=r(rit,"longformer"),rit.forEach(t),Cqo=r(V8e," \u2014 "),lO=n(V8e,"A",{href:!0});var tit=s(lO);wqo=r(tit,"LongformerForTokenClassification"),tit.forEach(t),Aqo=r(V8e," (Longformer model)"),V8e.forEach(t),yqo=i(J),Eb=n(J,"LI",{});var X8e=s(Eb);Pme=n(X8e,"STRONG",{});var ait=s(Pme);Lqo=r(ait,"megatron-bert"),ait.forEach(t),xqo=r(X8e," \u2014 "),iO=n(X8e,"A",{href:!0});var nit=s(iO);$qo=r(nit,"MegatronBertForTokenClassification"),nit.forEach(t),kqo=r(X8e," (MegatronBert model)"),X8e.forEach(t),Sqo=i(J),Cb=n(J,"LI",{});var z8e=s(Cb);Bme=n(z8e,"STRONG",{});var sit=s(Bme);Rqo=r(sit,"mobilebert"),sit.forEach(t),Pqo=r(z8e," \u2014 "),dO=n(z8e,"A",{href:!0});var lit=s(dO);Bqo=r(lit,"MobileBertForTokenClassification"),lit.forEach(t),Iqo=r(z8e," (MobileBERT model)"),z8e.forEach(t),qqo=i(J),wb=n(J,"LI",{});var Q8e=s(wb);Ime=n(Q8e,"STRONG",{});var iit=s(Ime);Nqo=r(iit,"mpnet"),iit.forEach(t),jqo=r(Q8e," \u2014 "),cO=n(Q8e,"A",{href:!0});var dit=s(cO);Dqo=r(dit,"MPNetForTokenClassification"),dit.forEach(t),Gqo=r(Q8e," (MPNet model)"),Q8e.forEach(t),Oqo=i(J),Ab=n(J,"LI",{});var W8e=s(Ab);qme=n(W8e,"STRONG",{});var cit=s(qme);Vqo=r(cit,"nystromformer"),cit.forEach(t),Xqo=r(W8e," \u2014 "),fO=n(W8e,"A",{href:!0});var fit=s(fO);zqo=r(fit,"NystromformerForTokenClassification"),fit.forEach(t),Qqo=r(W8e," (Nystromformer model)"),W8e.forEach(t),Wqo=i(J),yb=n(J,"LI",{});var H8e=s(yb);Nme=n(H8e,"STRONG",{});var mit=s(Nme);Hqo=r(mit,"qdqbert"),mit.forEach(t),Uqo=r(H8e," \u2014 "),mO=n(H8e,"A",{href:!0});var git=s(mO);Jqo=r(git,"QDQBertForTokenClassification"),git.forEach(t),Yqo=r(H8e," (QDQBert model)"),H8e.forEach(t),Kqo=i(J),Lb=n(J,"LI",{});var U8e=s(Lb);jme=n(U8e,"STRONG",{});var hit=s(jme);Zqo=r(hit,"rembert"),hit.forEach(t),eNo=r(U8e," \u2014 "),gO=n(U8e,"A",{href:!0});var pit=s(gO);oNo=r(pit,"RemBertForTokenClassification"),pit.forEach(t),rNo=r(U8e," (RemBERT model)"),U8e.forEach(t),tNo=i(J),xb=n(J,"LI",{});var J8e=s(xb);Dme=n(J8e,"STRONG",{});var uit=s(Dme);aNo=r(uit,"roberta"),uit.forEach(t),nNo=r(J8e," \u2014 "),hO=n(J8e,"A",{href:!0});var _it=s(hO);sNo=r(_it,"RobertaForTokenClassification"),_it.forEach(t),lNo=r(J8e," (RoBERTa model)"),J8e.forEach(t),iNo=i(J),$b=n(J,"LI",{});var Y8e=s($b);Gme=n(Y8e,"STRONG",{});var bit=s(Gme);dNo=r(bit,"roformer"),bit.forEach(t),cNo=r(Y8e," \u2014 "),pO=n(Y8e,"A",{href:!0});var vit=s(pO);fNo=r(vit,"RoFormerForTokenClassification"),vit.forEach(t),mNo=r(Y8e," (RoFormer model)"),Y8e.forEach(t),gNo=i(J),kb=n(J,"LI",{});var K8e=s(kb);Ome=n(K8e,"STRONG",{});var Fit=s(Ome);hNo=r(Fit,"squeezebert"),Fit.forEach(t),pNo=r(K8e," \u2014 "),uO=n(K8e,"A",{href:!0});var Tit=s(uO);uNo=r(Tit,"SqueezeBertForTokenClassification"),Tit.forEach(t),_No=r(K8e," (SqueezeBERT model)"),K8e.forEach(t),bNo=i(J),Sb=n(J,"LI",{});var Z8e=s(Sb);Vme=n(Z8e,"STRONG",{});var Mit=s(Vme);vNo=r(Mit,"xlm"),Mit.forEach(t),FNo=r(Z8e," \u2014 "),_O=n(Z8e,"A",{href:!0});var Eit=s(_O);TNo=r(Eit,"XLMForTokenClassification"),Eit.forEach(t),MNo=r(Z8e," (XLM model)"),Z8e.forEach(t),ENo=i(J),Rb=n(J,"LI",{});var exe=s(Rb);Xme=n(exe,"STRONG",{});var Cit=s(Xme);CNo=r(Cit,"xlm-roberta"),Cit.forEach(t),wNo=r(exe," \u2014 "),bO=n(exe,"A",{href:!0});var wit=s(bO);ANo=r(wit,"XLMRobertaForTokenClassification"),wit.forEach(t),yNo=r(exe," (XLM-RoBERTa model)"),exe.forEach(t),LNo=i(J),Pb=n(J,"LI",{});var oxe=s(Pb);zme=n(oxe,"STRONG",{});var Ait=s(zme);xNo=r(Ait,"xlm-roberta-xl"),Ait.forEach(t),$No=r(oxe," \u2014 "),vO=n(oxe,"A",{href:!0});var yit=s(vO);kNo=r(yit,"XLMRobertaXLForTokenClassification"),yit.forEach(t),SNo=r(oxe," (XLM-RoBERTa-XL model)"),oxe.forEach(t),RNo=i(J),Bb=n(J,"LI",{});var rxe=s(Bb);Qme=n(rxe,"STRONG",{});var Lit=s(Qme);PNo=r(Lit,"xlnet"),Lit.forEach(t),BNo=r(rxe," \u2014 "),FO=n(rxe,"A",{href:!0});var xit=s(FO);INo=r(xit,"XLNetForTokenClassification"),xit.forEach(t),qNo=r(rxe," (XLNet model)"),rxe.forEach(t),NNo=i(J),Ib=n(J,"LI",{});var txe=s(Ib);Wme=n(txe,"STRONG",{});var $it=s(Wme);jNo=r($it,"yoso"),$it.forEach(t),DNo=r(txe," \u2014 "),TO=n(txe,"A",{href:!0});var kit=s(TO);GNo=r(kit,"YosoForTokenClassification"),kit.forEach(t),ONo=r(txe," (YOSO model)"),txe.forEach(t),J.forEach(t),VNo=i(la),qb=n(la,"P",{});var axe=s(qb);XNo=r(axe,"The model is set in evaluation mode by default using "),Hme=n(axe,"CODE",{});var Sit=s(Hme);zNo=r(Sit,"model.eval()"),Sit.forEach(t),QNo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(axe,"CODE",{});var Rit=s(Ume);WNo=r(Rit,"model.train()"),Rit.forEach(t),axe.forEach(t),HNo=i(la),T(Nb.$$.fragment,la),la.forEach(t),Hs.forEach(t),mIe=i(f),Hi=n(f,"H2",{class:!0});var uNe=s(Hi);jb=n(uNe,"A",{id:!0,class:!0,href:!0});var Pit=s(jb);Jme=n(Pit,"SPAN",{});var Bit=s(Jme);T(my.$$.fragment,Bit),Bit.forEach(t),Pit.forEach(t),UNo=i(uNe),Yme=n(uNe,"SPAN",{});var Iit=s(Yme);JNo=r(Iit,"AutoModelForQuestionAnswering"),Iit.forEach(t),uNe.forEach(t),gIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(gy.$$.fragment,Us),YNo=i(Us),Ui=n(Us,"P",{});var MK=s(Ui);KNo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MO=n(MK,"A",{href:!0});var qit=s(MO);ZNo=r(qit,"from_pretrained()"),qit.forEach(t),ejo=r(MK," class method or the "),EO=n(MK,"A",{href:!0});var Nit=s(EO);ojo=r(Nit,"from_config()"),Nit.forEach(t),rjo=r(MK,` class
method.`),MK.forEach(t),tjo=i(Us),hy=n(Us,"P",{});var _Ne=s(hy);ajo=r(_Ne,"This class cannot be instantiated directly using "),Kme=n(_Ne,"CODE",{});var jit=s(Kme);njo=r(jit,"__init__()"),jit.forEach(t),sjo=r(_Ne," (throws an error)."),_Ne.forEach(t),ljo=i(Us),ct=n(Us,"DIV",{class:!0});var uA=s(ct);T(py.$$.fragment,uA),ijo=i(uA),Zme=n(uA,"P",{});var Dit=s(Zme);djo=r(Dit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dit.forEach(t),cjo=i(uA),Ji=n(uA,"P",{});var EK=s(Ji);fjo=r(EK,`Note:
Loading a model from its configuration file does `),ege=n(EK,"STRONG",{});var Git=s(ege);mjo=r(Git,"not"),Git.forEach(t),gjo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=n(EK,"A",{href:!0});var Oit=s(CO);hjo=r(Oit,"from_pretrained()"),Oit.forEach(t),pjo=r(EK," to load the model weights."),EK.forEach(t),ujo=i(uA),T(Db.$$.fragment,uA),uA.forEach(t),_jo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(uy.$$.fragment,ia),bjo=i(ia),oge=n(ia,"P",{});var Vit=s(oge);vjo=r(Vit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vit.forEach(t),Fjo=i(ia),Ba=n(ia,"P",{});var _A=s(Ba);Tjo=r(_A,"The model class to instantiate is selected based on the "),rge=n(_A,"CODE",{});var Xit=s(rge);Mjo=r(Xit,"model_type"),Xit.forEach(t),Ejo=r(_A,` property of the config object (either
passed as an argument or loaded from `),tge=n(_A,"CODE",{});var zit=s(tge);Cjo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),wjo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=n(_A,"CODE",{});var Qit=s(age);Ajo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),yjo=r(_A,":"),_A.forEach(t),Ljo=i(ia),V=n(ia,"UL",{});var X=s(V);Gb=n(X,"LI",{});var nxe=s(Gb);nge=n(nxe,"STRONG",{});var Wit=s(nge);xjo=r(Wit,"albert"),Wit.forEach(t),$jo=r(nxe," \u2014 "),wO=n(nxe,"A",{href:!0});var Hit=s(wO);kjo=r(Hit,"AlbertForQuestionAnswering"),Hit.forEach(t),Sjo=r(nxe," (ALBERT model)"),nxe.forEach(t),Rjo=i(X),Ob=n(X,"LI",{});var sxe=s(Ob);sge=n(sxe,"STRONG",{});var Uit=s(sge);Pjo=r(Uit,"bart"),Uit.forEach(t),Bjo=r(sxe," \u2014 "),AO=n(sxe,"A",{href:!0});var Jit=s(AO);Ijo=r(Jit,"BartForQuestionAnswering"),Jit.forEach(t),qjo=r(sxe," (BART model)"),sxe.forEach(t),Njo=i(X),Vb=n(X,"LI",{});var lxe=s(Vb);lge=n(lxe,"STRONG",{});var Yit=s(lge);jjo=r(Yit,"bert"),Yit.forEach(t),Djo=r(lxe," \u2014 "),yO=n(lxe,"A",{href:!0});var Kit=s(yO);Gjo=r(Kit,"BertForQuestionAnswering"),Kit.forEach(t),Ojo=r(lxe," (BERT model)"),lxe.forEach(t),Vjo=i(X),Xb=n(X,"LI",{});var ixe=s(Xb);ige=n(ixe,"STRONG",{});var Zit=s(ige);Xjo=r(Zit,"big_bird"),Zit.forEach(t),zjo=r(ixe," \u2014 "),LO=n(ixe,"A",{href:!0});var edt=s(LO);Qjo=r(edt,"BigBirdForQuestionAnswering"),edt.forEach(t),Wjo=r(ixe," (BigBird model)"),ixe.forEach(t),Hjo=i(X),zb=n(X,"LI",{});var dxe=s(zb);dge=n(dxe,"STRONG",{});var odt=s(dge);Ujo=r(odt,"bigbird_pegasus"),odt.forEach(t),Jjo=r(dxe," \u2014 "),xO=n(dxe,"A",{href:!0});var rdt=s(xO);Yjo=r(rdt,"BigBirdPegasusForQuestionAnswering"),rdt.forEach(t),Kjo=r(dxe," (BigBirdPegasus model)"),dxe.forEach(t),Zjo=i(X),Qb=n(X,"LI",{});var cxe=s(Qb);cge=n(cxe,"STRONG",{});var tdt=s(cge);eDo=r(tdt,"camembert"),tdt.forEach(t),oDo=r(cxe," \u2014 "),$O=n(cxe,"A",{href:!0});var adt=s($O);rDo=r(adt,"CamembertForQuestionAnswering"),adt.forEach(t),tDo=r(cxe," (CamemBERT model)"),cxe.forEach(t),aDo=i(X),Wb=n(X,"LI",{});var fxe=s(Wb);fge=n(fxe,"STRONG",{});var ndt=s(fge);nDo=r(ndt,"canine"),ndt.forEach(t),sDo=r(fxe," \u2014 "),kO=n(fxe,"A",{href:!0});var sdt=s(kO);lDo=r(sdt,"CanineForQuestionAnswering"),sdt.forEach(t),iDo=r(fxe," (Canine model)"),fxe.forEach(t),dDo=i(X),Hb=n(X,"LI",{});var mxe=s(Hb);mge=n(mxe,"STRONG",{});var ldt=s(mge);cDo=r(ldt,"convbert"),ldt.forEach(t),fDo=r(mxe," \u2014 "),SO=n(mxe,"A",{href:!0});var idt=s(SO);mDo=r(idt,"ConvBertForQuestionAnswering"),idt.forEach(t),gDo=r(mxe," (ConvBERT model)"),mxe.forEach(t),hDo=i(X),Ub=n(X,"LI",{});var gxe=s(Ub);gge=n(gxe,"STRONG",{});var ddt=s(gge);pDo=r(ddt,"data2vec-text"),ddt.forEach(t),uDo=r(gxe," \u2014 "),RO=n(gxe,"A",{href:!0});var cdt=s(RO);_Do=r(cdt,"Data2VecTextForQuestionAnswering"),cdt.forEach(t),bDo=r(gxe," (Data2VecText model)"),gxe.forEach(t),vDo=i(X),Jb=n(X,"LI",{});var hxe=s(Jb);hge=n(hxe,"STRONG",{});var fdt=s(hge);FDo=r(fdt,"deberta"),fdt.forEach(t),TDo=r(hxe," \u2014 "),PO=n(hxe,"A",{href:!0});var mdt=s(PO);MDo=r(mdt,"DebertaForQuestionAnswering"),mdt.forEach(t),EDo=r(hxe," (DeBERTa model)"),hxe.forEach(t),CDo=i(X),Yb=n(X,"LI",{});var pxe=s(Yb);pge=n(pxe,"STRONG",{});var gdt=s(pge);wDo=r(gdt,"deberta-v2"),gdt.forEach(t),ADo=r(pxe," \u2014 "),BO=n(pxe,"A",{href:!0});var hdt=s(BO);yDo=r(hdt,"DebertaV2ForQuestionAnswering"),hdt.forEach(t),LDo=r(pxe," (DeBERTa-v2 model)"),pxe.forEach(t),xDo=i(X),Kb=n(X,"LI",{});var uxe=s(Kb);uge=n(uxe,"STRONG",{});var pdt=s(uge);$Do=r(pdt,"distilbert"),pdt.forEach(t),kDo=r(uxe," \u2014 "),IO=n(uxe,"A",{href:!0});var udt=s(IO);SDo=r(udt,"DistilBertForQuestionAnswering"),udt.forEach(t),RDo=r(uxe," (DistilBERT model)"),uxe.forEach(t),PDo=i(X),Zb=n(X,"LI",{});var _xe=s(Zb);_ge=n(_xe,"STRONG",{});var _dt=s(_ge);BDo=r(_dt,"electra"),_dt.forEach(t),IDo=r(_xe," \u2014 "),qO=n(_xe,"A",{href:!0});var bdt=s(qO);qDo=r(bdt,"ElectraForQuestionAnswering"),bdt.forEach(t),NDo=r(_xe," (ELECTRA model)"),_xe.forEach(t),jDo=i(X),e4=n(X,"LI",{});var bxe=s(e4);bge=n(bxe,"STRONG",{});var vdt=s(bge);DDo=r(vdt,"flaubert"),vdt.forEach(t),GDo=r(bxe," \u2014 "),NO=n(bxe,"A",{href:!0});var Fdt=s(NO);ODo=r(Fdt,"FlaubertForQuestionAnsweringSimple"),Fdt.forEach(t),VDo=r(bxe," (FlauBERT model)"),bxe.forEach(t),XDo=i(X),o4=n(X,"LI",{});var vxe=s(o4);vge=n(vxe,"STRONG",{});var Tdt=s(vge);zDo=r(Tdt,"fnet"),Tdt.forEach(t),QDo=r(vxe," \u2014 "),jO=n(vxe,"A",{href:!0});var Mdt=s(jO);WDo=r(Mdt,"FNetForQuestionAnswering"),Mdt.forEach(t),HDo=r(vxe," (FNet model)"),vxe.forEach(t),UDo=i(X),r4=n(X,"LI",{});var Fxe=s(r4);Fge=n(Fxe,"STRONG",{});var Edt=s(Fge);JDo=r(Edt,"funnel"),Edt.forEach(t),YDo=r(Fxe," \u2014 "),DO=n(Fxe,"A",{href:!0});var Cdt=s(DO);KDo=r(Cdt,"FunnelForQuestionAnswering"),Cdt.forEach(t),ZDo=r(Fxe," (Funnel Transformer model)"),Fxe.forEach(t),eGo=i(X),t4=n(X,"LI",{});var Txe=s(t4);Tge=n(Txe,"STRONG",{});var wdt=s(Tge);oGo=r(wdt,"gptj"),wdt.forEach(t),rGo=r(Txe," \u2014 "),GO=n(Txe,"A",{href:!0});var Adt=s(GO);tGo=r(Adt,"GPTJForQuestionAnswering"),Adt.forEach(t),aGo=r(Txe," (GPT-J model)"),Txe.forEach(t),nGo=i(X),a4=n(X,"LI",{});var Mxe=s(a4);Mge=n(Mxe,"STRONG",{});var ydt=s(Mge);sGo=r(ydt,"ibert"),ydt.forEach(t),lGo=r(Mxe," \u2014 "),OO=n(Mxe,"A",{href:!0});var Ldt=s(OO);iGo=r(Ldt,"IBertForQuestionAnswering"),Ldt.forEach(t),dGo=r(Mxe," (I-BERT model)"),Mxe.forEach(t),cGo=i(X),n4=n(X,"LI",{});var Exe=s(n4);Ege=n(Exe,"STRONG",{});var xdt=s(Ege);fGo=r(xdt,"layoutlmv2"),xdt.forEach(t),mGo=r(Exe," \u2014 "),VO=n(Exe,"A",{href:!0});var $dt=s(VO);gGo=r($dt,"LayoutLMv2ForQuestionAnswering"),$dt.forEach(t),hGo=r(Exe," (LayoutLMv2 model)"),Exe.forEach(t),pGo=i(X),s4=n(X,"LI",{});var Cxe=s(s4);Cge=n(Cxe,"STRONG",{});var kdt=s(Cge);uGo=r(kdt,"led"),kdt.forEach(t),_Go=r(Cxe," \u2014 "),XO=n(Cxe,"A",{href:!0});var Sdt=s(XO);bGo=r(Sdt,"LEDForQuestionAnswering"),Sdt.forEach(t),vGo=r(Cxe," (LED model)"),Cxe.forEach(t),FGo=i(X),l4=n(X,"LI",{});var wxe=s(l4);wge=n(wxe,"STRONG",{});var Rdt=s(wge);TGo=r(Rdt,"longformer"),Rdt.forEach(t),MGo=r(wxe," \u2014 "),zO=n(wxe,"A",{href:!0});var Pdt=s(zO);EGo=r(Pdt,"LongformerForQuestionAnswering"),Pdt.forEach(t),CGo=r(wxe," (Longformer model)"),wxe.forEach(t),wGo=i(X),i4=n(X,"LI",{});var Axe=s(i4);Age=n(Axe,"STRONG",{});var Bdt=s(Age);AGo=r(Bdt,"lxmert"),Bdt.forEach(t),yGo=r(Axe," \u2014 "),QO=n(Axe,"A",{href:!0});var Idt=s(QO);LGo=r(Idt,"LxmertForQuestionAnswering"),Idt.forEach(t),xGo=r(Axe," (LXMERT model)"),Axe.forEach(t),$Go=i(X),d4=n(X,"LI",{});var yxe=s(d4);yge=n(yxe,"STRONG",{});var qdt=s(yge);kGo=r(qdt,"mbart"),qdt.forEach(t),SGo=r(yxe," \u2014 "),WO=n(yxe,"A",{href:!0});var Ndt=s(WO);RGo=r(Ndt,"MBartForQuestionAnswering"),Ndt.forEach(t),PGo=r(yxe," (mBART model)"),yxe.forEach(t),BGo=i(X),c4=n(X,"LI",{});var Lxe=s(c4);Lge=n(Lxe,"STRONG",{});var jdt=s(Lge);IGo=r(jdt,"megatron-bert"),jdt.forEach(t),qGo=r(Lxe," \u2014 "),HO=n(Lxe,"A",{href:!0});var Ddt=s(HO);NGo=r(Ddt,"MegatronBertForQuestionAnswering"),Ddt.forEach(t),jGo=r(Lxe," (MegatronBert model)"),Lxe.forEach(t),DGo=i(X),f4=n(X,"LI",{});var xxe=s(f4);xge=n(xxe,"STRONG",{});var Gdt=s(xge);GGo=r(Gdt,"mobilebert"),Gdt.forEach(t),OGo=r(xxe," \u2014 "),UO=n(xxe,"A",{href:!0});var Odt=s(UO);VGo=r(Odt,"MobileBertForQuestionAnswering"),Odt.forEach(t),XGo=r(xxe," (MobileBERT model)"),xxe.forEach(t),zGo=i(X),m4=n(X,"LI",{});var $xe=s(m4);$ge=n($xe,"STRONG",{});var Vdt=s($ge);QGo=r(Vdt,"mpnet"),Vdt.forEach(t),WGo=r($xe," \u2014 "),JO=n($xe,"A",{href:!0});var Xdt=s(JO);HGo=r(Xdt,"MPNetForQuestionAnswering"),Xdt.forEach(t),UGo=r($xe," (MPNet model)"),$xe.forEach(t),JGo=i(X),g4=n(X,"LI",{});var kxe=s(g4);kge=n(kxe,"STRONG",{});var zdt=s(kge);YGo=r(zdt,"nystromformer"),zdt.forEach(t),KGo=r(kxe," \u2014 "),YO=n(kxe,"A",{href:!0});var Qdt=s(YO);ZGo=r(Qdt,"NystromformerForQuestionAnswering"),Qdt.forEach(t),eOo=r(kxe," (Nystromformer model)"),kxe.forEach(t),oOo=i(X),h4=n(X,"LI",{});var Sxe=s(h4);Sge=n(Sxe,"STRONG",{});var Wdt=s(Sge);rOo=r(Wdt,"qdqbert"),Wdt.forEach(t),tOo=r(Sxe," \u2014 "),KO=n(Sxe,"A",{href:!0});var Hdt=s(KO);aOo=r(Hdt,"QDQBertForQuestionAnswering"),Hdt.forEach(t),nOo=r(Sxe," (QDQBert model)"),Sxe.forEach(t),sOo=i(X),p4=n(X,"LI",{});var Rxe=s(p4);Rge=n(Rxe,"STRONG",{});var Udt=s(Rge);lOo=r(Udt,"reformer"),Udt.forEach(t),iOo=r(Rxe," \u2014 "),ZO=n(Rxe,"A",{href:!0});var Jdt=s(ZO);dOo=r(Jdt,"ReformerForQuestionAnswering"),Jdt.forEach(t),cOo=r(Rxe," (Reformer model)"),Rxe.forEach(t),fOo=i(X),u4=n(X,"LI",{});var Pxe=s(u4);Pge=n(Pxe,"STRONG",{});var Ydt=s(Pge);mOo=r(Ydt,"rembert"),Ydt.forEach(t),gOo=r(Pxe," \u2014 "),eV=n(Pxe,"A",{href:!0});var Kdt=s(eV);hOo=r(Kdt,"RemBertForQuestionAnswering"),Kdt.forEach(t),pOo=r(Pxe," (RemBERT model)"),Pxe.forEach(t),uOo=i(X),_4=n(X,"LI",{});var Bxe=s(_4);Bge=n(Bxe,"STRONG",{});var Zdt=s(Bge);_Oo=r(Zdt,"roberta"),Zdt.forEach(t),bOo=r(Bxe," \u2014 "),oV=n(Bxe,"A",{href:!0});var ect=s(oV);vOo=r(ect,"RobertaForQuestionAnswering"),ect.forEach(t),FOo=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),TOo=i(X),b4=n(X,"LI",{});var Ixe=s(b4);Ige=n(Ixe,"STRONG",{});var oct=s(Ige);MOo=r(oct,"roformer"),oct.forEach(t),EOo=r(Ixe," \u2014 "),rV=n(Ixe,"A",{href:!0});var rct=s(rV);COo=r(rct,"RoFormerForQuestionAnswering"),rct.forEach(t),wOo=r(Ixe," (RoFormer model)"),Ixe.forEach(t),AOo=i(X),v4=n(X,"LI",{});var qxe=s(v4);qge=n(qxe,"STRONG",{});var tct=s(qge);yOo=r(tct,"splinter"),tct.forEach(t),LOo=r(qxe," \u2014 "),tV=n(qxe,"A",{href:!0});var act=s(tV);xOo=r(act,"SplinterForQuestionAnswering"),act.forEach(t),$Oo=r(qxe," (Splinter model)"),qxe.forEach(t),kOo=i(X),F4=n(X,"LI",{});var Nxe=s(F4);Nge=n(Nxe,"STRONG",{});var nct=s(Nge);SOo=r(nct,"squeezebert"),nct.forEach(t),ROo=r(Nxe," \u2014 "),aV=n(Nxe,"A",{href:!0});var sct=s(aV);POo=r(sct,"SqueezeBertForQuestionAnswering"),sct.forEach(t),BOo=r(Nxe," (SqueezeBERT model)"),Nxe.forEach(t),IOo=i(X),T4=n(X,"LI",{});var jxe=s(T4);jge=n(jxe,"STRONG",{});var lct=s(jge);qOo=r(lct,"xlm"),lct.forEach(t),NOo=r(jxe," \u2014 "),nV=n(jxe,"A",{href:!0});var ict=s(nV);jOo=r(ict,"XLMForQuestionAnsweringSimple"),ict.forEach(t),DOo=r(jxe," (XLM model)"),jxe.forEach(t),GOo=i(X),M4=n(X,"LI",{});var Dxe=s(M4);Dge=n(Dxe,"STRONG",{});var dct=s(Dge);OOo=r(dct,"xlm-roberta"),dct.forEach(t),VOo=r(Dxe," \u2014 "),sV=n(Dxe,"A",{href:!0});var cct=s(sV);XOo=r(cct,"XLMRobertaForQuestionAnswering"),cct.forEach(t),zOo=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),QOo=i(X),E4=n(X,"LI",{});var Gxe=s(E4);Gge=n(Gxe,"STRONG",{});var fct=s(Gge);WOo=r(fct,"xlm-roberta-xl"),fct.forEach(t),HOo=r(Gxe," \u2014 "),lV=n(Gxe,"A",{href:!0});var mct=s(lV);UOo=r(mct,"XLMRobertaXLForQuestionAnswering"),mct.forEach(t),JOo=r(Gxe," (XLM-RoBERTa-XL model)"),Gxe.forEach(t),YOo=i(X),C4=n(X,"LI",{});var Oxe=s(C4);Oge=n(Oxe,"STRONG",{});var gct=s(Oge);KOo=r(gct,"xlnet"),gct.forEach(t),ZOo=r(Oxe," \u2014 "),iV=n(Oxe,"A",{href:!0});var hct=s(iV);eVo=r(hct,"XLNetForQuestionAnsweringSimple"),hct.forEach(t),oVo=r(Oxe," (XLNet model)"),Oxe.forEach(t),rVo=i(X),w4=n(X,"LI",{});var Vxe=s(w4);Vge=n(Vxe,"STRONG",{});var pct=s(Vge);tVo=r(pct,"yoso"),pct.forEach(t),aVo=r(Vxe," \u2014 "),dV=n(Vxe,"A",{href:!0});var uct=s(dV);nVo=r(uct,"YosoForQuestionAnswering"),uct.forEach(t),sVo=r(Vxe," (YOSO model)"),Vxe.forEach(t),X.forEach(t),lVo=i(ia),A4=n(ia,"P",{});var Xxe=s(A4);iVo=r(Xxe,"The model is set in evaluation mode by default using "),Xge=n(Xxe,"CODE",{});var _ct=s(Xge);dVo=r(_ct,"model.eval()"),_ct.forEach(t),cVo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(Xxe,"CODE",{});var bct=s(zge);fVo=r(bct,"model.train()"),bct.forEach(t),Xxe.forEach(t),mVo=i(ia),T(y4.$$.fragment,ia),ia.forEach(t),Us.forEach(t),hIe=i(f),Yi=n(f,"H2",{class:!0});var bNe=s(Yi);L4=n(bNe,"A",{id:!0,class:!0,href:!0});var vct=s(L4);Qge=n(vct,"SPAN",{});var Fct=s(Qge);T(_y.$$.fragment,Fct),Fct.forEach(t),vct.forEach(t),gVo=i(bNe),Wge=n(bNe,"SPAN",{});var Tct=s(Wge);hVo=r(Tct,"AutoModelForTableQuestionAnswering"),Tct.forEach(t),bNe.forEach(t),pIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(by.$$.fragment,Js),pVo=i(Js),Ki=n(Js,"P",{});var CK=s(Ki);uVo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cV=n(CK,"A",{href:!0});var Mct=s(cV);_Vo=r(Mct,"from_pretrained()"),Mct.forEach(t),bVo=r(CK," class method or the "),fV=n(CK,"A",{href:!0});var Ect=s(fV);vVo=r(Ect,"from_config()"),Ect.forEach(t),FVo=r(CK,` class
method.`),CK.forEach(t),TVo=i(Js),vy=n(Js,"P",{});var vNe=s(vy);MVo=r(vNe,"This class cannot be instantiated directly using "),Hge=n(vNe,"CODE",{});var Cct=s(Hge);EVo=r(Cct,"__init__()"),Cct.forEach(t),CVo=r(vNe," (throws an error)."),vNe.forEach(t),wVo=i(Js),ft=n(Js,"DIV",{class:!0});var bA=s(ft);T(Fy.$$.fragment,bA),AVo=i(bA),Uge=n(bA,"P",{});var wct=s(Uge);yVo=r(wct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wct.forEach(t),LVo=i(bA),Zi=n(bA,"P",{});var wK=s(Zi);xVo=r(wK,`Note:
Loading a model from its configuration file does `),Jge=n(wK,"STRONG",{});var Act=s(Jge);$Vo=r(Act,"not"),Act.forEach(t),kVo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(wK,"A",{href:!0});var yct=s(mV);SVo=r(yct,"from_pretrained()"),yct.forEach(t),RVo=r(wK," to load the model weights."),wK.forEach(t),PVo=i(bA),T(x4.$$.fragment,bA),bA.forEach(t),BVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Ty.$$.fragment,da),IVo=i(da),Yge=n(da,"P",{});var Lct=s(Yge);qVo=r(Lct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lct.forEach(t),NVo=i(da),Ia=n(da,"P",{});var vA=s(Ia);jVo=r(vA,"The model class to instantiate is selected based on the "),Kge=n(vA,"CODE",{});var xct=s(Kge);DVo=r(xct,"model_type"),xct.forEach(t),GVo=r(vA,` property of the config object (either
passed as an argument or loaded from `),Zge=n(vA,"CODE",{});var $ct=s(Zge);OVo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),VVo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(vA,"CODE",{});var kct=s(ehe);XVo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),zVo=r(vA,":"),vA.forEach(t),QVo=i(da),ohe=n(da,"UL",{});var Sct=s(ohe);$4=n(Sct,"LI",{});var zxe=s($4);rhe=n(zxe,"STRONG",{});var Rct=s(rhe);WVo=r(Rct,"tapas"),Rct.forEach(t),HVo=r(zxe," \u2014 "),gV=n(zxe,"A",{href:!0});var Pct=s(gV);UVo=r(Pct,"TapasForQuestionAnswering"),Pct.forEach(t),JVo=r(zxe," (TAPAS model)"),zxe.forEach(t),Sct.forEach(t),YVo=i(da),k4=n(da,"P",{});var Qxe=s(k4);KVo=r(Qxe,"The model is set in evaluation mode by default using "),the=n(Qxe,"CODE",{});var Bct=s(the);ZVo=r(Bct,"model.eval()"),Bct.forEach(t),eXo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(Qxe,"CODE",{});var Ict=s(ahe);oXo=r(Ict,"model.train()"),Ict.forEach(t),Qxe.forEach(t),rXo=i(da),T(S4.$$.fragment,da),da.forEach(t),Js.forEach(t),uIe=i(f),ed=n(f,"H2",{class:!0});var FNe=s(ed);R4=n(FNe,"A",{id:!0,class:!0,href:!0});var qct=s(R4);nhe=n(qct,"SPAN",{});var Nct=s(nhe);T(My.$$.fragment,Nct),Nct.forEach(t),qct.forEach(t),tXo=i(FNe),she=n(FNe,"SPAN",{});var jct=s(she);aXo=r(jct,"AutoModelForImageClassification"),jct.forEach(t),FNe.forEach(t),_Ie=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(Ey.$$.fragment,Ys),nXo=i(Ys),od=n(Ys,"P",{});var AK=s(od);sXo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hV=n(AK,"A",{href:!0});var Dct=s(hV);lXo=r(Dct,"from_pretrained()"),Dct.forEach(t),iXo=r(AK," class method or the "),pV=n(AK,"A",{href:!0});var Gct=s(pV);dXo=r(Gct,"from_config()"),Gct.forEach(t),cXo=r(AK,` class
method.`),AK.forEach(t),fXo=i(Ys),Cy=n(Ys,"P",{});var TNe=s(Cy);mXo=r(TNe,"This class cannot be instantiated directly using "),lhe=n(TNe,"CODE",{});var Oct=s(lhe);gXo=r(Oct,"__init__()"),Oct.forEach(t),hXo=r(TNe," (throws an error)."),TNe.forEach(t),pXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var FA=s(mt);T(wy.$$.fragment,FA),uXo=i(FA),ihe=n(FA,"P",{});var Vct=s(ihe);_Xo=r(Vct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vct.forEach(t),bXo=i(FA),rd=n(FA,"P",{});var yK=s(rd);vXo=r(yK,`Note:
Loading a model from its configuration file does `),dhe=n(yK,"STRONG",{});var Xct=s(dhe);FXo=r(Xct,"not"),Xct.forEach(t),TXo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(yK,"A",{href:!0});var zct=s(uV);MXo=r(zct,"from_pretrained()"),zct.forEach(t),EXo=r(yK," to load the model weights."),yK.forEach(t),CXo=i(FA),T(P4.$$.fragment,FA),FA.forEach(t),wXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Ay.$$.fragment,ca),AXo=i(ca),che=n(ca,"P",{});var Qct=s(che);yXo=r(Qct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qct.forEach(t),LXo=i(ca),qa=n(ca,"P",{});var TA=s(qa);xXo=r(TA,"The model class to instantiate is selected based on the "),fhe=n(TA,"CODE",{});var Wct=s(fhe);$Xo=r(Wct,"model_type"),Wct.forEach(t),kXo=r(TA,` property of the config object (either
passed as an argument or loaded from `),mhe=n(TA,"CODE",{});var Hct=s(mhe);SXo=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),RXo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(TA,"CODE",{});var Uct=s(ghe);PXo=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),BXo=r(TA,":"),TA.forEach(t),IXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);B4=n(Ee,"LI",{});var Wxe=s(B4);hhe=n(Wxe,"STRONG",{});var Jct=s(hhe);qXo=r(Jct,"beit"),Jct.forEach(t),NXo=r(Wxe," \u2014 "),_V=n(Wxe,"A",{href:!0});var Yct=s(_V);jXo=r(Yct,"BeitForImageClassification"),Yct.forEach(t),DXo=r(Wxe," (BEiT model)"),Wxe.forEach(t),GXo=i(Ee),I4=n(Ee,"LI",{});var Hxe=s(I4);phe=n(Hxe,"STRONG",{});var Kct=s(phe);OXo=r(Kct,"convnext"),Kct.forEach(t),VXo=r(Hxe," \u2014 "),bV=n(Hxe,"A",{href:!0});var Zct=s(bV);XXo=r(Zct,"ConvNextForImageClassification"),Zct.forEach(t),zXo=r(Hxe," (ConvNext model)"),Hxe.forEach(t),QXo=i(Ee),q4=n(Ee,"LI",{});var Uxe=s(q4);uhe=n(Uxe,"STRONG",{});var eft=s(uhe);WXo=r(eft,"data2vec-vision"),eft.forEach(t),HXo=r(Uxe," \u2014 "),vV=n(Uxe,"A",{href:!0});var oft=s(vV);UXo=r(oft,"Data2VecVisionForImageClassification"),oft.forEach(t),JXo=r(Uxe," (Data2VecVision model)"),Uxe.forEach(t),YXo=i(Ee),Rs=n(Ee,"LI",{});var c$=s(Rs);_he=n(c$,"STRONG",{});var rft=s(_he);KXo=r(rft,"deit"),rft.forEach(t),ZXo=r(c$," \u2014 "),FV=n(c$,"A",{href:!0});var tft=s(FV);ezo=r(tft,"DeiTForImageClassification"),tft.forEach(t),ozo=r(c$," or "),TV=n(c$,"A",{href:!0});var aft=s(TV);rzo=r(aft,"DeiTForImageClassificationWithTeacher"),aft.forEach(t),tzo=r(c$," (DeiT model)"),c$.forEach(t),azo=i(Ee),N4=n(Ee,"LI",{});var Jxe=s(N4);bhe=n(Jxe,"STRONG",{});var nft=s(bhe);nzo=r(nft,"imagegpt"),nft.forEach(t),szo=r(Jxe," \u2014 "),MV=n(Jxe,"A",{href:!0});var sft=s(MV);lzo=r(sft,"ImageGPTForImageClassification"),sft.forEach(t),izo=r(Jxe," (ImageGPT model)"),Jxe.forEach(t),dzo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);vhe=n(ff,"STRONG",{});var lft=s(vhe);czo=r(lft,"perceiver"),lft.forEach(t),fzo=r(ff," \u2014 "),EV=n(ff,"A",{href:!0});var ift=s(EV);mzo=r(ift,"PerceiverForImageClassificationLearned"),ift.forEach(t),gzo=r(ff," or "),CV=n(ff,"A",{href:!0});var dft=s(CV);hzo=r(dft,"PerceiverForImageClassificationFourier"),dft.forEach(t),pzo=r(ff," or "),wV=n(ff,"A",{href:!0});var cft=s(wV);uzo=r(cft,"PerceiverForImageClassificationConvProcessing"),cft.forEach(t),_zo=r(ff," (Perceiver model)"),ff.forEach(t),bzo=i(Ee),j4=n(Ee,"LI",{});var Yxe=s(j4);Fhe=n(Yxe,"STRONG",{});var fft=s(Fhe);vzo=r(fft,"poolformer"),fft.forEach(t),Fzo=r(Yxe," \u2014 "),AV=n(Yxe,"A",{href:!0});var mft=s(AV);Tzo=r(mft,"PoolFormerForImageClassification"),mft.forEach(t),Mzo=r(Yxe," (PoolFormer model)"),Yxe.forEach(t),Ezo=i(Ee),D4=n(Ee,"LI",{});var Kxe=s(D4);The=n(Kxe,"STRONG",{});var gft=s(The);Czo=r(gft,"regnet"),gft.forEach(t),wzo=r(Kxe," \u2014 "),yV=n(Kxe,"A",{href:!0});var hft=s(yV);Azo=r(hft,"RegNetForImageClassification"),hft.forEach(t),yzo=r(Kxe," (RegNet model)"),Kxe.forEach(t),Lzo=i(Ee),G4=n(Ee,"LI",{});var Zxe=s(G4);Mhe=n(Zxe,"STRONG",{});var pft=s(Mhe);xzo=r(pft,"resnet"),pft.forEach(t),$zo=r(Zxe," \u2014 "),LV=n(Zxe,"A",{href:!0});var uft=s(LV);kzo=r(uft,"ResNetForImageClassification"),uft.forEach(t),Szo=r(Zxe," (ResNet model)"),Zxe.forEach(t),Rzo=i(Ee),O4=n(Ee,"LI",{});var e9e=s(O4);Ehe=n(e9e,"STRONG",{});var _ft=s(Ehe);Pzo=r(_ft,"segformer"),_ft.forEach(t),Bzo=r(e9e," \u2014 "),xV=n(e9e,"A",{href:!0});var bft=s(xV);Izo=r(bft,"SegformerForImageClassification"),bft.forEach(t),qzo=r(e9e," (SegFormer model)"),e9e.forEach(t),Nzo=i(Ee),V4=n(Ee,"LI",{});var o9e=s(V4);Che=n(o9e,"STRONG",{});var vft=s(Che);jzo=r(vft,"swin"),vft.forEach(t),Dzo=r(o9e," \u2014 "),$V=n(o9e,"A",{href:!0});var Fft=s($V);Gzo=r(Fft,"SwinForImageClassification"),Fft.forEach(t),Ozo=r(o9e," (Swin model)"),o9e.forEach(t),Vzo=i(Ee),X4=n(Ee,"LI",{});var r9e=s(X4);whe=n(r9e,"STRONG",{});var Tft=s(whe);Xzo=r(Tft,"van"),Tft.forEach(t),zzo=r(r9e," \u2014 "),kV=n(r9e,"A",{href:!0});var Mft=s(kV);Qzo=r(Mft,"VanForImageClassification"),Mft.forEach(t),Wzo=r(r9e," (VAN model)"),r9e.forEach(t),Hzo=i(Ee),z4=n(Ee,"LI",{});var t9e=s(z4);Ahe=n(t9e,"STRONG",{});var Eft=s(Ahe);Uzo=r(Eft,"vit"),Eft.forEach(t),Jzo=r(t9e," \u2014 "),SV=n(t9e,"A",{href:!0});var Cft=s(SV);Yzo=r(Cft,"ViTForImageClassification"),Cft.forEach(t),Kzo=r(t9e," (ViT model)"),t9e.forEach(t),Ee.forEach(t),Zzo=i(ca),Q4=n(ca,"P",{});var a9e=s(Q4);eQo=r(a9e,"The model is set in evaluation mode by default using "),yhe=n(a9e,"CODE",{});var wft=s(yhe);oQo=r(wft,"model.eval()"),wft.forEach(t),rQo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(a9e,"CODE",{});var Aft=s(Lhe);tQo=r(Aft,"model.train()"),Aft.forEach(t),a9e.forEach(t),aQo=i(ca),T(W4.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),bIe=i(f),td=n(f,"H2",{class:!0});var MNe=s(td);H4=n(MNe,"A",{id:!0,class:!0,href:!0});var yft=s(H4);xhe=n(yft,"SPAN",{});var Lft=s(xhe);T(yy.$$.fragment,Lft),Lft.forEach(t),yft.forEach(t),nQo=i(MNe),$he=n(MNe,"SPAN",{});var xft=s($he);sQo=r(xft,"AutoModelForVision2Seq"),xft.forEach(t),MNe.forEach(t),vIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(Ly.$$.fragment,Ks),lQo=i(Ks),ad=n(Ks,"P",{});var LK=s(ad);iQo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RV=n(LK,"A",{href:!0});var $ft=s(RV);dQo=r($ft,"from_pretrained()"),$ft.forEach(t),cQo=r(LK," class method or the "),PV=n(LK,"A",{href:!0});var kft=s(PV);fQo=r(kft,"from_config()"),kft.forEach(t),mQo=r(LK,` class
method.`),LK.forEach(t),gQo=i(Ks),xy=n(Ks,"P",{});var ENe=s(xy);hQo=r(ENe,"This class cannot be instantiated directly using "),khe=n(ENe,"CODE",{});var Sft=s(khe);pQo=r(Sft,"__init__()"),Sft.forEach(t),uQo=r(ENe," (throws an error)."),ENe.forEach(t),_Qo=i(Ks),ht=n(Ks,"DIV",{class:!0});var MA=s(ht);T($y.$$.fragment,MA),bQo=i(MA),She=n(MA,"P",{});var Rft=s(She);vQo=r(Rft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rft.forEach(t),FQo=i(MA),nd=n(MA,"P",{});var xK=s(nd);TQo=r(xK,`Note:
Loading a model from its configuration file does `),Rhe=n(xK,"STRONG",{});var Pft=s(Rhe);MQo=r(Pft,"not"),Pft.forEach(t),EQo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(xK,"A",{href:!0});var Bft=s(BV);CQo=r(Bft,"from_pretrained()"),Bft.forEach(t),wQo=r(xK," to load the model weights."),xK.forEach(t),AQo=i(MA),T(U4.$$.fragment,MA),MA.forEach(t),yQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(ky.$$.fragment,fa),LQo=i(fa),Phe=n(fa,"P",{});var Ift=s(Phe);xQo=r(Ift,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ift.forEach(t),$Qo=i(fa),Na=n(fa,"P",{});var EA=s(Na);kQo=r(EA,"The model class to instantiate is selected based on the "),Bhe=n(EA,"CODE",{});var qft=s(Bhe);SQo=r(qft,"model_type"),qft.forEach(t),RQo=r(EA,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(EA,"CODE",{});var Nft=s(Ihe);PQo=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),BQo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(EA,"CODE",{});var jft=s(qhe);IQo=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),qQo=r(EA,":"),EA.forEach(t),NQo=i(fa),Nhe=n(fa,"UL",{});var Dft=s(Nhe);J4=n(Dft,"LI",{});var n9e=s(J4);jhe=n(n9e,"STRONG",{});var Gft=s(jhe);jQo=r(Gft,"vision-encoder-decoder"),Gft.forEach(t),DQo=r(n9e," \u2014 "),IV=n(n9e,"A",{href:!0});var Oft=s(IV);GQo=r(Oft,"VisionEncoderDecoderModel"),Oft.forEach(t),OQo=r(n9e," (Vision Encoder decoder model)"),n9e.forEach(t),Dft.forEach(t),VQo=i(fa),Y4=n(fa,"P",{});var s9e=s(Y4);XQo=r(s9e,"The model is set in evaluation mode by default using "),Dhe=n(s9e,"CODE",{});var Vft=s(Dhe);zQo=r(Vft,"model.eval()"),Vft.forEach(t),QQo=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(s9e,"CODE",{});var Xft=s(Ghe);WQo=r(Xft,"model.train()"),Xft.forEach(t),s9e.forEach(t),HQo=i(fa),T(K4.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),FIe=i(f),sd=n(f,"H2",{class:!0});var CNe=s(sd);Z4=n(CNe,"A",{id:!0,class:!0,href:!0});var zft=s(Z4);Ohe=n(zft,"SPAN",{});var Qft=s(Ohe);T(Sy.$$.fragment,Qft),Qft.forEach(t),zft.forEach(t),UQo=i(CNe),Vhe=n(CNe,"SPAN",{});var Wft=s(Vhe);JQo=r(Wft,"AutoModelForAudioClassification"),Wft.forEach(t),CNe.forEach(t),TIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(Ry.$$.fragment,Zs),YQo=i(Zs),ld=n(Zs,"P",{});var $K=s(ld);KQo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qV=n($K,"A",{href:!0});var Hft=s(qV);ZQo=r(Hft,"from_pretrained()"),Hft.forEach(t),eWo=r($K," class method or the "),NV=n($K,"A",{href:!0});var Uft=s(NV);oWo=r(Uft,"from_config()"),Uft.forEach(t),rWo=r($K,` class
method.`),$K.forEach(t),tWo=i(Zs),Py=n(Zs,"P",{});var wNe=s(Py);aWo=r(wNe,"This class cannot be instantiated directly using "),Xhe=n(wNe,"CODE",{});var Jft=s(Xhe);nWo=r(Jft,"__init__()"),Jft.forEach(t),sWo=r(wNe," (throws an error)."),wNe.forEach(t),lWo=i(Zs),pt=n(Zs,"DIV",{class:!0});var CA=s(pt);T(By.$$.fragment,CA),iWo=i(CA),zhe=n(CA,"P",{});var Yft=s(zhe);dWo=r(Yft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Yft.forEach(t),cWo=i(CA),id=n(CA,"P",{});var kK=s(id);fWo=r(kK,`Note:
Loading a model from its configuration file does `),Qhe=n(kK,"STRONG",{});var Kft=s(Qhe);mWo=r(Kft,"not"),Kft.forEach(t),gWo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(kK,"A",{href:!0});var Zft=s(jV);hWo=r(Zft,"from_pretrained()"),Zft.forEach(t),pWo=r(kK," to load the model weights."),kK.forEach(t),uWo=i(CA),T(ev.$$.fragment,CA),CA.forEach(t),_Wo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Iy.$$.fragment,ma),bWo=i(ma),Whe=n(ma,"P",{});var emt=s(Whe);vWo=r(emt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),emt.forEach(t),FWo=i(ma),ja=n(ma,"P",{});var wA=s(ja);TWo=r(wA,"The model class to instantiate is selected based on the "),Hhe=n(wA,"CODE",{});var omt=s(Hhe);MWo=r(omt,"model_type"),omt.forEach(t),EWo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(wA,"CODE",{});var rmt=s(Uhe);CWo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),wWo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(wA,"CODE",{});var tmt=s(Jhe);AWo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),yWo=r(wA,":"),wA.forEach(t),LWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);ov=n(bo,"LI",{});var l9e=s(ov);Yhe=n(l9e,"STRONG",{});var amt=s(Yhe);xWo=r(amt,"data2vec-audio"),amt.forEach(t),$Wo=r(l9e," \u2014 "),DV=n(l9e,"A",{href:!0});var nmt=s(DV);kWo=r(nmt,"Data2VecAudioForSequenceClassification"),nmt.forEach(t),SWo=r(l9e," (Data2VecAudio model)"),l9e.forEach(t),RWo=i(bo),rv=n(bo,"LI",{});var i9e=s(rv);Khe=n(i9e,"STRONG",{});var smt=s(Khe);PWo=r(smt,"hubert"),smt.forEach(t),BWo=r(i9e," \u2014 "),GV=n(i9e,"A",{href:!0});var lmt=s(GV);IWo=r(lmt,"HubertForSequenceClassification"),lmt.forEach(t),qWo=r(i9e," (Hubert model)"),i9e.forEach(t),NWo=i(bo),tv=n(bo,"LI",{});var d9e=s(tv);Zhe=n(d9e,"STRONG",{});var imt=s(Zhe);jWo=r(imt,"sew"),imt.forEach(t),DWo=r(d9e," \u2014 "),OV=n(d9e,"A",{href:!0});var dmt=s(OV);GWo=r(dmt,"SEWForSequenceClassification"),dmt.forEach(t),OWo=r(d9e," (SEW model)"),d9e.forEach(t),VWo=i(bo),av=n(bo,"LI",{});var c9e=s(av);epe=n(c9e,"STRONG",{});var cmt=s(epe);XWo=r(cmt,"sew-d"),cmt.forEach(t),zWo=r(c9e," \u2014 "),VV=n(c9e,"A",{href:!0});var fmt=s(VV);QWo=r(fmt,"SEWDForSequenceClassification"),fmt.forEach(t),WWo=r(c9e," (SEW-D model)"),c9e.forEach(t),HWo=i(bo),nv=n(bo,"LI",{});var f9e=s(nv);ope=n(f9e,"STRONG",{});var mmt=s(ope);UWo=r(mmt,"unispeech"),mmt.forEach(t),JWo=r(f9e," \u2014 "),XV=n(f9e,"A",{href:!0});var gmt=s(XV);YWo=r(gmt,"UniSpeechForSequenceClassification"),gmt.forEach(t),KWo=r(f9e," (UniSpeech model)"),f9e.forEach(t),ZWo=i(bo),sv=n(bo,"LI",{});var m9e=s(sv);rpe=n(m9e,"STRONG",{});var hmt=s(rpe);eHo=r(hmt,"unispeech-sat"),hmt.forEach(t),oHo=r(m9e," \u2014 "),zV=n(m9e,"A",{href:!0});var pmt=s(zV);rHo=r(pmt,"UniSpeechSatForSequenceClassification"),pmt.forEach(t),tHo=r(m9e," (UniSpeechSat model)"),m9e.forEach(t),aHo=i(bo),lv=n(bo,"LI",{});var g9e=s(lv);tpe=n(g9e,"STRONG",{});var umt=s(tpe);nHo=r(umt,"wav2vec2"),umt.forEach(t),sHo=r(g9e," \u2014 "),QV=n(g9e,"A",{href:!0});var _mt=s(QV);lHo=r(_mt,"Wav2Vec2ForSequenceClassification"),_mt.forEach(t),iHo=r(g9e," (Wav2Vec2 model)"),g9e.forEach(t),dHo=i(bo),iv=n(bo,"LI",{});var h9e=s(iv);ape=n(h9e,"STRONG",{});var bmt=s(ape);cHo=r(bmt,"wavlm"),bmt.forEach(t),fHo=r(h9e," \u2014 "),WV=n(h9e,"A",{href:!0});var vmt=s(WV);mHo=r(vmt,"WavLMForSequenceClassification"),vmt.forEach(t),gHo=r(h9e," (WavLM model)"),h9e.forEach(t),bo.forEach(t),hHo=i(ma),dv=n(ma,"P",{});var p9e=s(dv);pHo=r(p9e,"The model is set in evaluation mode by default using "),npe=n(p9e,"CODE",{});var Fmt=s(npe);uHo=r(Fmt,"model.eval()"),Fmt.forEach(t),_Ho=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=n(p9e,"CODE",{});var Tmt=s(spe);bHo=r(Tmt,"model.train()"),Tmt.forEach(t),p9e.forEach(t),vHo=i(ma),T(cv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),MIe=i(f),dd=n(f,"H2",{class:!0});var ANe=s(dd);fv=n(ANe,"A",{id:!0,class:!0,href:!0});var Mmt=s(fv);lpe=n(Mmt,"SPAN",{});var Emt=s(lpe);T(qy.$$.fragment,Emt),Emt.forEach(t),Mmt.forEach(t),FHo=i(ANe),ipe=n(ANe,"SPAN",{});var Cmt=s(ipe);THo=r(Cmt,"AutoModelForAudioFrameClassification"),Cmt.forEach(t),ANe.forEach(t),EIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(Ny.$$.fragment,el),MHo=i(el),cd=n(el,"P",{});var SK=s(cd);EHo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HV=n(SK,"A",{href:!0});var wmt=s(HV);CHo=r(wmt,"from_pretrained()"),wmt.forEach(t),wHo=r(SK," class method or the "),UV=n(SK,"A",{href:!0});var Amt=s(UV);AHo=r(Amt,"from_config()"),Amt.forEach(t),yHo=r(SK,` class
method.`),SK.forEach(t),LHo=i(el),jy=n(el,"P",{});var yNe=s(jy);xHo=r(yNe,"This class cannot be instantiated directly using "),dpe=n(yNe,"CODE",{});var ymt=s(dpe);$Ho=r(ymt,"__init__()"),ymt.forEach(t),kHo=r(yNe," (throws an error)."),yNe.forEach(t),SHo=i(el),ut=n(el,"DIV",{class:!0});var AA=s(ut);T(Dy.$$.fragment,AA),RHo=i(AA),cpe=n(AA,"P",{});var Lmt=s(cpe);PHo=r(Lmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Lmt.forEach(t),BHo=i(AA),fd=n(AA,"P",{});var RK=s(fd);IHo=r(RK,`Note:
Loading a model from its configuration file does `),fpe=n(RK,"STRONG",{});var xmt=s(fpe);qHo=r(xmt,"not"),xmt.forEach(t),NHo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(RK,"A",{href:!0});var $mt=s(JV);jHo=r($mt,"from_pretrained()"),$mt.forEach(t),DHo=r(RK," to load the model weights."),RK.forEach(t),GHo=i(AA),T(mv.$$.fragment,AA),AA.forEach(t),OHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Gy.$$.fragment,ga),VHo=i(ga),mpe=n(ga,"P",{});var kmt=s(mpe);XHo=r(kmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kmt.forEach(t),zHo=i(ga),Da=n(ga,"P",{});var yA=s(Da);QHo=r(yA,"The model class to instantiate is selected based on the "),gpe=n(yA,"CODE",{});var Smt=s(gpe);WHo=r(Smt,"model_type"),Smt.forEach(t),HHo=r(yA,` property of the config object (either
passed as an argument or loaded from `),hpe=n(yA,"CODE",{});var Rmt=s(hpe);UHo=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),JHo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(yA,"CODE",{});var Pmt=s(ppe);YHo=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),KHo=r(yA,":"),yA.forEach(t),ZHo=i(ga),Ga=n(ga,"UL",{});var LA=s(Ga);gv=n(LA,"LI",{});var u9e=s(gv);upe=n(u9e,"STRONG",{});var Bmt=s(upe);eUo=r(Bmt,"data2vec-audio"),Bmt.forEach(t),oUo=r(u9e," \u2014 "),YV=n(u9e,"A",{href:!0});var Imt=s(YV);rUo=r(Imt,"Data2VecAudioForAudioFrameClassification"),Imt.forEach(t),tUo=r(u9e," (Data2VecAudio model)"),u9e.forEach(t),aUo=i(LA),hv=n(LA,"LI",{});var _9e=s(hv);_pe=n(_9e,"STRONG",{});var qmt=s(_pe);nUo=r(qmt,"unispeech-sat"),qmt.forEach(t),sUo=r(_9e," \u2014 "),KV=n(_9e,"A",{href:!0});var Nmt=s(KV);lUo=r(Nmt,"UniSpeechSatForAudioFrameClassification"),Nmt.forEach(t),iUo=r(_9e," (UniSpeechSat model)"),_9e.forEach(t),dUo=i(LA),pv=n(LA,"LI",{});var b9e=s(pv);bpe=n(b9e,"STRONG",{});var jmt=s(bpe);cUo=r(jmt,"wav2vec2"),jmt.forEach(t),fUo=r(b9e," \u2014 "),ZV=n(b9e,"A",{href:!0});var Dmt=s(ZV);mUo=r(Dmt,"Wav2Vec2ForAudioFrameClassification"),Dmt.forEach(t),gUo=r(b9e," (Wav2Vec2 model)"),b9e.forEach(t),hUo=i(LA),uv=n(LA,"LI",{});var v9e=s(uv);vpe=n(v9e,"STRONG",{});var Gmt=s(vpe);pUo=r(Gmt,"wavlm"),Gmt.forEach(t),uUo=r(v9e," \u2014 "),eX=n(v9e,"A",{href:!0});var Omt=s(eX);_Uo=r(Omt,"WavLMForAudioFrameClassification"),Omt.forEach(t),bUo=r(v9e," (WavLM model)"),v9e.forEach(t),LA.forEach(t),vUo=i(ga),_v=n(ga,"P",{});var F9e=s(_v);FUo=r(F9e,"The model is set in evaluation mode by default using "),Fpe=n(F9e,"CODE",{});var Vmt=s(Fpe);TUo=r(Vmt,"model.eval()"),Vmt.forEach(t),MUo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=n(F9e,"CODE",{});var Xmt=s(Tpe);EUo=r(Xmt,"model.train()"),Xmt.forEach(t),F9e.forEach(t),CUo=i(ga),T(bv.$$.fragment,ga),ga.forEach(t),el.forEach(t),CIe=i(f),md=n(f,"H2",{class:!0});var LNe=s(md);vv=n(LNe,"A",{id:!0,class:!0,href:!0});var zmt=s(vv);Mpe=n(zmt,"SPAN",{});var Qmt=s(Mpe);T(Oy.$$.fragment,Qmt),Qmt.forEach(t),zmt.forEach(t),wUo=i(LNe),Epe=n(LNe,"SPAN",{});var Wmt=s(Epe);AUo=r(Wmt,"AutoModelForCTC"),Wmt.forEach(t),LNe.forEach(t),wIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Vy.$$.fragment,ol),yUo=i(ol),gd=n(ol,"P",{});var PK=s(gd);LUo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oX=n(PK,"A",{href:!0});var Hmt=s(oX);xUo=r(Hmt,"from_pretrained()"),Hmt.forEach(t),$Uo=r(PK," class method or the "),rX=n(PK,"A",{href:!0});var Umt=s(rX);kUo=r(Umt,"from_config()"),Umt.forEach(t),SUo=r(PK,` class
method.`),PK.forEach(t),RUo=i(ol),Xy=n(ol,"P",{});var xNe=s(Xy);PUo=r(xNe,"This class cannot be instantiated directly using "),Cpe=n(xNe,"CODE",{});var Jmt=s(Cpe);BUo=r(Jmt,"__init__()"),Jmt.forEach(t),IUo=r(xNe," (throws an error)."),xNe.forEach(t),qUo=i(ol),_t=n(ol,"DIV",{class:!0});var xA=s(_t);T(zy.$$.fragment,xA),NUo=i(xA),wpe=n(xA,"P",{});var Ymt=s(wpe);jUo=r(Ymt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ymt.forEach(t),DUo=i(xA),hd=n(xA,"P",{});var BK=s(hd);GUo=r(BK,`Note:
Loading a model from its configuration file does `),Ape=n(BK,"STRONG",{});var Kmt=s(Ape);OUo=r(Kmt,"not"),Kmt.forEach(t),VUo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(BK,"A",{href:!0});var Zmt=s(tX);XUo=r(Zmt,"from_pretrained()"),Zmt.forEach(t),zUo=r(BK," to load the model weights."),BK.forEach(t),QUo=i(xA),T(Fv.$$.fragment,xA),xA.forEach(t),WUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Qy.$$.fragment,ha),HUo=i(ha),ype=n(ha,"P",{});var egt=s(ype);UUo=r(egt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),egt.forEach(t),JUo=i(ha),Oa=n(ha,"P",{});var $A=s(Oa);YUo=r($A,"The model class to instantiate is selected based on the "),Lpe=n($A,"CODE",{});var ogt=s(Lpe);KUo=r(ogt,"model_type"),ogt.forEach(t),ZUo=r($A,` property of the config object (either
passed as an argument or loaded from `),xpe=n($A,"CODE",{});var rgt=s(xpe);eJo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),oJo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=n($A,"CODE",{});var tgt=s($pe);rJo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),tJo=r($A,":"),$A.forEach(t),aJo=i(ha),je=n(ha,"UL",{});var vo=s(je);Tv=n(vo,"LI",{});var T9e=s(Tv);kpe=n(T9e,"STRONG",{});var agt=s(kpe);nJo=r(agt,"data2vec-audio"),agt.forEach(t),sJo=r(T9e," \u2014 "),aX=n(T9e,"A",{href:!0});var ngt=s(aX);lJo=r(ngt,"Data2VecAudioForCTC"),ngt.forEach(t),iJo=r(T9e," (Data2VecAudio model)"),T9e.forEach(t),dJo=i(vo),Mv=n(vo,"LI",{});var M9e=s(Mv);Spe=n(M9e,"STRONG",{});var sgt=s(Spe);cJo=r(sgt,"hubert"),sgt.forEach(t),fJo=r(M9e," \u2014 "),nX=n(M9e,"A",{href:!0});var lgt=s(nX);mJo=r(lgt,"HubertForCTC"),lgt.forEach(t),gJo=r(M9e," (Hubert model)"),M9e.forEach(t),hJo=i(vo),Ev=n(vo,"LI",{});var E9e=s(Ev);Rpe=n(E9e,"STRONG",{});var igt=s(Rpe);pJo=r(igt,"sew"),igt.forEach(t),uJo=r(E9e," \u2014 "),sX=n(E9e,"A",{href:!0});var dgt=s(sX);_Jo=r(dgt,"SEWForCTC"),dgt.forEach(t),bJo=r(E9e," (SEW model)"),E9e.forEach(t),vJo=i(vo),Cv=n(vo,"LI",{});var C9e=s(Cv);Ppe=n(C9e,"STRONG",{});var cgt=s(Ppe);FJo=r(cgt,"sew-d"),cgt.forEach(t),TJo=r(C9e," \u2014 "),lX=n(C9e,"A",{href:!0});var fgt=s(lX);MJo=r(fgt,"SEWDForCTC"),fgt.forEach(t),EJo=r(C9e," (SEW-D model)"),C9e.forEach(t),CJo=i(vo),wv=n(vo,"LI",{});var w9e=s(wv);Bpe=n(w9e,"STRONG",{});var mgt=s(Bpe);wJo=r(mgt,"unispeech"),mgt.forEach(t),AJo=r(w9e," \u2014 "),iX=n(w9e,"A",{href:!0});var ggt=s(iX);yJo=r(ggt,"UniSpeechForCTC"),ggt.forEach(t),LJo=r(w9e," (UniSpeech model)"),w9e.forEach(t),xJo=i(vo),Av=n(vo,"LI",{});var A9e=s(Av);Ipe=n(A9e,"STRONG",{});var hgt=s(Ipe);$Jo=r(hgt,"unispeech-sat"),hgt.forEach(t),kJo=r(A9e," \u2014 "),dX=n(A9e,"A",{href:!0});var pgt=s(dX);SJo=r(pgt,"UniSpeechSatForCTC"),pgt.forEach(t),RJo=r(A9e," (UniSpeechSat model)"),A9e.forEach(t),PJo=i(vo),yv=n(vo,"LI",{});var y9e=s(yv);qpe=n(y9e,"STRONG",{});var ugt=s(qpe);BJo=r(ugt,"wav2vec2"),ugt.forEach(t),IJo=r(y9e," \u2014 "),cX=n(y9e,"A",{href:!0});var _gt=s(cX);qJo=r(_gt,"Wav2Vec2ForCTC"),_gt.forEach(t),NJo=r(y9e," (Wav2Vec2 model)"),y9e.forEach(t),jJo=i(vo),Lv=n(vo,"LI",{});var L9e=s(Lv);Npe=n(L9e,"STRONG",{});var bgt=s(Npe);DJo=r(bgt,"wavlm"),bgt.forEach(t),GJo=r(L9e," \u2014 "),fX=n(L9e,"A",{href:!0});var vgt=s(fX);OJo=r(vgt,"WavLMForCTC"),vgt.forEach(t),VJo=r(L9e," (WavLM model)"),L9e.forEach(t),vo.forEach(t),XJo=i(ha),xv=n(ha,"P",{});var x9e=s(xv);zJo=r(x9e,"The model is set in evaluation mode by default using "),jpe=n(x9e,"CODE",{});var Fgt=s(jpe);QJo=r(Fgt,"model.eval()"),Fgt.forEach(t),WJo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(x9e,"CODE",{});var Tgt=s(Dpe);HJo=r(Tgt,"model.train()"),Tgt.forEach(t),x9e.forEach(t),UJo=i(ha),T($v.$$.fragment,ha),ha.forEach(t),ol.forEach(t),AIe=i(f),pd=n(f,"H2",{class:!0});var $Ne=s(pd);kv=n($Ne,"A",{id:!0,class:!0,href:!0});var Mgt=s(kv);Gpe=n(Mgt,"SPAN",{});var Egt=s(Gpe);T(Wy.$$.fragment,Egt),Egt.forEach(t),Mgt.forEach(t),JJo=i($Ne),Ope=n($Ne,"SPAN",{});var Cgt=s(Ope);YJo=r(Cgt,"AutoModelForSpeechSeq2Seq"),Cgt.forEach(t),$Ne.forEach(t),yIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Hy.$$.fragment,rl),KJo=i(rl),ud=n(rl,"P",{});var IK=s(ud);ZJo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mX=n(IK,"A",{href:!0});var wgt=s(mX);eYo=r(wgt,"from_pretrained()"),wgt.forEach(t),oYo=r(IK," class method or the "),gX=n(IK,"A",{href:!0});var Agt=s(gX);rYo=r(Agt,"from_config()"),Agt.forEach(t),tYo=r(IK,` class
method.`),IK.forEach(t),aYo=i(rl),Uy=n(rl,"P",{});var kNe=s(Uy);nYo=r(kNe,"This class cannot be instantiated directly using "),Vpe=n(kNe,"CODE",{});var ygt=s(Vpe);sYo=r(ygt,"__init__()"),ygt.forEach(t),lYo=r(kNe," (throws an error)."),kNe.forEach(t),iYo=i(rl),bt=n(rl,"DIV",{class:!0});var kA=s(bt);T(Jy.$$.fragment,kA),dYo=i(kA),Xpe=n(kA,"P",{});var Lgt=s(Xpe);cYo=r(Lgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Lgt.forEach(t),fYo=i(kA),_d=n(kA,"P",{});var qK=s(_d);mYo=r(qK,`Note:
Loading a model from its configuration file does `),zpe=n(qK,"STRONG",{});var xgt=s(zpe);gYo=r(xgt,"not"),xgt.forEach(t),hYo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(qK,"A",{href:!0});var $gt=s(hX);pYo=r($gt,"from_pretrained()"),$gt.forEach(t),uYo=r(qK," to load the model weights."),qK.forEach(t),_Yo=i(kA),T(Sv.$$.fragment,kA),kA.forEach(t),bYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Yy.$$.fragment,pa),vYo=i(pa),Qpe=n(pa,"P",{});var kgt=s(Qpe);FYo=r(kgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kgt.forEach(t),TYo=i(pa),Va=n(pa,"P",{});var SA=s(Va);MYo=r(SA,"The model class to instantiate is selected based on the "),Wpe=n(SA,"CODE",{});var Sgt=s(Wpe);EYo=r(Sgt,"model_type"),Sgt.forEach(t),CYo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(SA,"CODE",{});var Rgt=s(Hpe);wYo=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),AYo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(SA,"CODE",{});var Pgt=s(Upe);yYo=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),LYo=r(SA,":"),SA.forEach(t),xYo=i(pa),Ky=n(pa,"UL",{});var SNe=s(Ky);Rv=n(SNe,"LI",{});var $9e=s(Rv);Jpe=n($9e,"STRONG",{});var Bgt=s(Jpe);$Yo=r(Bgt,"speech-encoder-decoder"),Bgt.forEach(t),kYo=r($9e," \u2014 "),pX=n($9e,"A",{href:!0});var Igt=s(pX);SYo=r(Igt,"SpeechEncoderDecoderModel"),Igt.forEach(t),RYo=r($9e," (Speech Encoder decoder model)"),$9e.forEach(t),PYo=i(SNe),Pv=n(SNe,"LI",{});var k9e=s(Pv);Ype=n(k9e,"STRONG",{});var qgt=s(Ype);BYo=r(qgt,"speech_to_text"),qgt.forEach(t),IYo=r(k9e," \u2014 "),uX=n(k9e,"A",{href:!0});var Ngt=s(uX);qYo=r(Ngt,"Speech2TextForConditionalGeneration"),Ngt.forEach(t),NYo=r(k9e," (Speech2Text model)"),k9e.forEach(t),SNe.forEach(t),jYo=i(pa),Bv=n(pa,"P",{});var S9e=s(Bv);DYo=r(S9e,"The model is set in evaluation mode by default using "),Kpe=n(S9e,"CODE",{});var jgt=s(Kpe);GYo=r(jgt,"model.eval()"),jgt.forEach(t),OYo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(S9e,"CODE",{});var Dgt=s(Zpe);VYo=r(Dgt,"model.train()"),Dgt.forEach(t),S9e.forEach(t),XYo=i(pa),T(Iv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),LIe=i(f),bd=n(f,"H2",{class:!0});var RNe=s(bd);qv=n(RNe,"A",{id:!0,class:!0,href:!0});var Ggt=s(qv);eue=n(Ggt,"SPAN",{});var Ogt=s(eue);T(Zy.$$.fragment,Ogt),Ogt.forEach(t),Ggt.forEach(t),zYo=i(RNe),oue=n(RNe,"SPAN",{});var Vgt=s(oue);QYo=r(Vgt,"AutoModelForAudioXVector"),Vgt.forEach(t),RNe.forEach(t),xIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(eL.$$.fragment,tl),WYo=i(tl),vd=n(tl,"P",{});var NK=s(vd);HYo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_X=n(NK,"A",{href:!0});var Xgt=s(_X);UYo=r(Xgt,"from_pretrained()"),Xgt.forEach(t),JYo=r(NK," class method or the "),bX=n(NK,"A",{href:!0});var zgt=s(bX);YYo=r(zgt,"from_config()"),zgt.forEach(t),KYo=r(NK,` class
method.`),NK.forEach(t),ZYo=i(tl),oL=n(tl,"P",{});var PNe=s(oL);eKo=r(PNe,"This class cannot be instantiated directly using "),rue=n(PNe,"CODE",{});var Qgt=s(rue);oKo=r(Qgt,"__init__()"),Qgt.forEach(t),rKo=r(PNe," (throws an error)."),PNe.forEach(t),tKo=i(tl),vt=n(tl,"DIV",{class:!0});var RA=s(vt);T(rL.$$.fragment,RA),aKo=i(RA),tue=n(RA,"P",{});var Wgt=s(tue);nKo=r(Wgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Wgt.forEach(t),sKo=i(RA),Fd=n(RA,"P",{});var jK=s(Fd);lKo=r(jK,`Note:
Loading a model from its configuration file does `),aue=n(jK,"STRONG",{});var Hgt=s(aue);iKo=r(Hgt,"not"),Hgt.forEach(t),dKo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(jK,"A",{href:!0});var Ugt=s(vX);cKo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),fKo=r(jK," to load the model weights."),jK.forEach(t),mKo=i(RA),T(Nv.$$.fragment,RA),RA.forEach(t),gKo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(tL.$$.fragment,ua),hKo=i(ua),nue=n(ua,"P",{});var Jgt=s(nue);pKo=r(Jgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jgt.forEach(t),uKo=i(ua),Xa=n(ua,"P",{});var PA=s(Xa);_Ko=r(PA,"The model class to instantiate is selected based on the "),sue=n(PA,"CODE",{});var Ygt=s(sue);bKo=r(Ygt,"model_type"),Ygt.forEach(t),vKo=r(PA,` property of the config object (either
passed as an argument or loaded from `),lue=n(PA,"CODE",{});var Kgt=s(lue);FKo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),TKo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(PA,"CODE",{});var Zgt=s(iue);MKo=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),EKo=r(PA,":"),PA.forEach(t),CKo=i(ua),za=n(ua,"UL",{});var BA=s(za);jv=n(BA,"LI",{});var R9e=s(jv);due=n(R9e,"STRONG",{});var eht=s(due);wKo=r(eht,"data2vec-audio"),eht.forEach(t),AKo=r(R9e," \u2014 "),FX=n(R9e,"A",{href:!0});var oht=s(FX);yKo=r(oht,"Data2VecAudioForXVector"),oht.forEach(t),LKo=r(R9e," (Data2VecAudio model)"),R9e.forEach(t),xKo=i(BA),Dv=n(BA,"LI",{});var P9e=s(Dv);cue=n(P9e,"STRONG",{});var rht=s(cue);$Ko=r(rht,"unispeech-sat"),rht.forEach(t),kKo=r(P9e," \u2014 "),TX=n(P9e,"A",{href:!0});var tht=s(TX);SKo=r(tht,"UniSpeechSatForXVector"),tht.forEach(t),RKo=r(P9e," (UniSpeechSat model)"),P9e.forEach(t),PKo=i(BA),Gv=n(BA,"LI",{});var B9e=s(Gv);fue=n(B9e,"STRONG",{});var aht=s(fue);BKo=r(aht,"wav2vec2"),aht.forEach(t),IKo=r(B9e," \u2014 "),MX=n(B9e,"A",{href:!0});var nht=s(MX);qKo=r(nht,"Wav2Vec2ForXVector"),nht.forEach(t),NKo=r(B9e," (Wav2Vec2 model)"),B9e.forEach(t),jKo=i(BA),Ov=n(BA,"LI",{});var I9e=s(Ov);mue=n(I9e,"STRONG",{});var sht=s(mue);DKo=r(sht,"wavlm"),sht.forEach(t),GKo=r(I9e," \u2014 "),EX=n(I9e,"A",{href:!0});var lht=s(EX);OKo=r(lht,"WavLMForXVector"),lht.forEach(t),VKo=r(I9e," (WavLM model)"),I9e.forEach(t),BA.forEach(t),XKo=i(ua),Vv=n(ua,"P",{});var q9e=s(Vv);zKo=r(q9e,"The model is set in evaluation mode by default using "),gue=n(q9e,"CODE",{});var iht=s(gue);QKo=r(iht,"model.eval()"),iht.forEach(t),WKo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=n(q9e,"CODE",{});var dht=s(hue);HKo=r(dht,"model.train()"),dht.forEach(t),q9e.forEach(t),UKo=i(ua),T(Xv.$$.fragment,ua),ua.forEach(t),tl.forEach(t),$Ie=i(f),Td=n(f,"H2",{class:!0});var BNe=s(Td);zv=n(BNe,"A",{id:!0,class:!0,href:!0});var cht=s(zv);pue=n(cht,"SPAN",{});var fht=s(pue);T(aL.$$.fragment,fht),fht.forEach(t),cht.forEach(t),JKo=i(BNe),uue=n(BNe,"SPAN",{});var mht=s(uue);YKo=r(mht,"AutoModelForMaskedImageModeling"),mht.forEach(t),BNe.forEach(t),kIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(nL.$$.fragment,al),KKo=i(al),Md=n(al,"P",{});var DK=s(Md);ZKo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CX=n(DK,"A",{href:!0});var ght=s(CX);eZo=r(ght,"from_pretrained()"),ght.forEach(t),oZo=r(DK," class method or the "),wX=n(DK,"A",{href:!0});var hht=s(wX);rZo=r(hht,"from_config()"),hht.forEach(t),tZo=r(DK,` class
method.`),DK.forEach(t),aZo=i(al),sL=n(al,"P",{});var INe=s(sL);nZo=r(INe,"This class cannot be instantiated directly using "),_ue=n(INe,"CODE",{});var pht=s(_ue);sZo=r(pht,"__init__()"),pht.forEach(t),lZo=r(INe," (throws an error)."),INe.forEach(t),iZo=i(al),Ft=n(al,"DIV",{class:!0});var IA=s(Ft);T(lL.$$.fragment,IA),dZo=i(IA),bue=n(IA,"P",{});var uht=s(bue);cZo=r(uht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),uht.forEach(t),fZo=i(IA),Ed=n(IA,"P",{});var GK=s(Ed);mZo=r(GK,`Note:
Loading a model from its configuration file does `),vue=n(GK,"STRONG",{});var _ht=s(vue);gZo=r(_ht,"not"),_ht.forEach(t),hZo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(GK,"A",{href:!0});var bht=s(AX);pZo=r(bht,"from_pretrained()"),bht.forEach(t),uZo=r(GK," to load the model weights."),GK.forEach(t),_Zo=i(IA),T(Qv.$$.fragment,IA),IA.forEach(t),bZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(iL.$$.fragment,_a),vZo=i(_a),Fue=n(_a,"P",{});var vht=s(Fue);FZo=r(vht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),vht.forEach(t),TZo=i(_a),Qa=n(_a,"P",{});var qA=s(Qa);MZo=r(qA,"The model class to instantiate is selected based on the "),Tue=n(qA,"CODE",{});var Fht=s(Tue);EZo=r(Fht,"model_type"),Fht.forEach(t),CZo=r(qA,` property of the config object (either
passed as an argument or loaded from `),Mue=n(qA,"CODE",{});var Tht=s(Mue);wZo=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),AZo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(qA,"CODE",{});var Mht=s(Eue);yZo=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),LZo=r(qA,":"),qA.forEach(t),xZo=i(_a),Cd=n(_a,"UL",{});var OK=s(Cd);Wv=n(OK,"LI",{});var N9e=s(Wv);Cue=n(N9e,"STRONG",{});var Eht=s(Cue);$Zo=r(Eht,"deit"),Eht.forEach(t),kZo=r(N9e," \u2014 "),yX=n(N9e,"A",{href:!0});var Cht=s(yX);SZo=r(Cht,"DeiTForMaskedImageModeling"),Cht.forEach(t),RZo=r(N9e," (DeiT model)"),N9e.forEach(t),PZo=i(OK),Hv=n(OK,"LI",{});var j9e=s(Hv);wue=n(j9e,"STRONG",{});var wht=s(wue);BZo=r(wht,"swin"),wht.forEach(t),IZo=r(j9e," \u2014 "),LX=n(j9e,"A",{href:!0});var Aht=s(LX);qZo=r(Aht,"SwinForMaskedImageModeling"),Aht.forEach(t),NZo=r(j9e," (Swin model)"),j9e.forEach(t),jZo=i(OK),Uv=n(OK,"LI",{});var D9e=s(Uv);Aue=n(D9e,"STRONG",{});var yht=s(Aue);DZo=r(yht,"vit"),yht.forEach(t),GZo=r(D9e," \u2014 "),xX=n(D9e,"A",{href:!0});var Lht=s(xX);OZo=r(Lht,"ViTForMaskedImageModeling"),Lht.forEach(t),VZo=r(D9e," (ViT model)"),D9e.forEach(t),OK.forEach(t),XZo=i(_a),Jv=n(_a,"P",{});var G9e=s(Jv);zZo=r(G9e,"The model is set in evaluation mode by default using "),yue=n(G9e,"CODE",{});var xht=s(yue);QZo=r(xht,"model.eval()"),xht.forEach(t),WZo=r(G9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(G9e,"CODE",{});var $ht=s(Lue);HZo=r($ht,"model.train()"),$ht.forEach(t),G9e.forEach(t),UZo=i(_a),T(Yv.$$.fragment,_a),_a.forEach(t),al.forEach(t),SIe=i(f),wd=n(f,"H2",{class:!0});var qNe=s(wd);Kv=n(qNe,"A",{id:!0,class:!0,href:!0});var kht=s(Kv);xue=n(kht,"SPAN",{});var Sht=s(xue);T(dL.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),JZo=i(qNe),$ue=n(qNe,"SPAN",{});var Rht=s($ue);YZo=r(Rht,"AutoModelForObjectDetection"),Rht.forEach(t),qNe.forEach(t),RIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(cL.$$.fragment,nl),KZo=i(nl),Ad=n(nl,"P",{});var VK=s(Ad);ZZo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$X=n(VK,"A",{href:!0});var Pht=s($X);eer=r(Pht,"from_pretrained()"),Pht.forEach(t),oer=r(VK," class method or the "),kX=n(VK,"A",{href:!0});var Bht=s(kX);rer=r(Bht,"from_config()"),Bht.forEach(t),ter=r(VK,` class
method.`),VK.forEach(t),aer=i(nl),fL=n(nl,"P",{});var NNe=s(fL);ner=r(NNe,"This class cannot be instantiated directly using "),kue=n(NNe,"CODE",{});var Iht=s(kue);ser=r(Iht,"__init__()"),Iht.forEach(t),ler=r(NNe," (throws an error)."),NNe.forEach(t),ier=i(nl),Tt=n(nl,"DIV",{class:!0});var NA=s(Tt);T(mL.$$.fragment,NA),der=i(NA),Sue=n(NA,"P",{});var qht=s(Sue);cer=r(qht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qht.forEach(t),fer=i(NA),yd=n(NA,"P",{});var XK=s(yd);mer=r(XK,`Note:
Loading a model from its configuration file does `),Rue=n(XK,"STRONG",{});var Nht=s(Rue);ger=r(Nht,"not"),Nht.forEach(t),her=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(XK,"A",{href:!0});var jht=s(SX);per=r(jht,"from_pretrained()"),jht.forEach(t),uer=r(XK," to load the model weights."),XK.forEach(t),_er=i(NA),T(Zv.$$.fragment,NA),NA.forEach(t),ber=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(gL.$$.fragment,ba),ver=i(ba),Pue=n(ba,"P",{});var Dht=s(Pue);Fer=r(Dht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Dht.forEach(t),Ter=i(ba),Wa=n(ba,"P",{});var jA=s(Wa);Mer=r(jA,"The model class to instantiate is selected based on the "),Bue=n(jA,"CODE",{});var Ght=s(Bue);Eer=r(Ght,"model_type"),Ght.forEach(t),Cer=r(jA,` property of the config object (either
passed as an argument or loaded from `),Iue=n(jA,"CODE",{});var Oht=s(Iue);wer=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),Aer=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(jA,"CODE",{});var Vht=s(que);yer=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),Ler=r(jA,":"),jA.forEach(t),xer=i(ba),hL=n(ba,"UL",{});var jNe=s(hL);eF=n(jNe,"LI",{});var O9e=s(eF);Nue=n(O9e,"STRONG",{});var Xht=s(Nue);$er=r(Xht,"detr"),Xht.forEach(t),ker=r(O9e," \u2014 "),RX=n(O9e,"A",{href:!0});var zht=s(RX);Ser=r(zht,"DetrForObjectDetection"),zht.forEach(t),Rer=r(O9e," (DETR model)"),O9e.forEach(t),Per=i(jNe),oF=n(jNe,"LI",{});var V9e=s(oF);jue=n(V9e,"STRONG",{});var Qht=s(jue);Ber=r(Qht,"yolos"),Qht.forEach(t),Ier=r(V9e," \u2014 "),PX=n(V9e,"A",{href:!0});var Wht=s(PX);qer=r(Wht,"YolosForObjectDetection"),Wht.forEach(t),Ner=r(V9e," (YOLOS model)"),V9e.forEach(t),jNe.forEach(t),jer=i(ba),rF=n(ba,"P",{});var X9e=s(rF);Der=r(X9e,"The model is set in evaluation mode by default using "),Due=n(X9e,"CODE",{});var Hht=s(Due);Ger=r(Hht,"model.eval()"),Hht.forEach(t),Oer=r(X9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(X9e,"CODE",{});var Uht=s(Gue);Ver=r(Uht,"model.train()"),Uht.forEach(t),X9e.forEach(t),Xer=i(ba),T(tF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),PIe=i(f),Ld=n(f,"H2",{class:!0});var DNe=s(Ld);aF=n(DNe,"A",{id:!0,class:!0,href:!0});var Jht=s(aF);Oue=n(Jht,"SPAN",{});var Yht=s(Oue);T(pL.$$.fragment,Yht),Yht.forEach(t),Jht.forEach(t),zer=i(DNe),Vue=n(DNe,"SPAN",{});var Kht=s(Vue);Qer=r(Kht,"AutoModelForImageSegmentation"),Kht.forEach(t),DNe.forEach(t),BIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(uL.$$.fragment,sl),Wer=i(sl),xd=n(sl,"P",{});var zK=s(xd);Her=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),BX=n(zK,"A",{href:!0});var Zht=s(BX);Uer=r(Zht,"from_pretrained()"),Zht.forEach(t),Jer=r(zK," class method or the "),IX=n(zK,"A",{href:!0});var ept=s(IX);Yer=r(ept,"from_config()"),ept.forEach(t),Ker=r(zK,` class
method.`),zK.forEach(t),Zer=i(sl),_L=n(sl,"P",{});var GNe=s(_L);eor=r(GNe,"This class cannot be instantiated directly using "),Xue=n(GNe,"CODE",{});var opt=s(Xue);oor=r(opt,"__init__()"),opt.forEach(t),ror=r(GNe," (throws an error)."),GNe.forEach(t),tor=i(sl),Mt=n(sl,"DIV",{class:!0});var DA=s(Mt);T(bL.$$.fragment,DA),aor=i(DA),zue=n(DA,"P",{});var rpt=s(zue);nor=r(rpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rpt.forEach(t),sor=i(DA),$d=n(DA,"P",{});var QK=s($d);lor=r(QK,`Note:
Loading a model from its configuration file does `),Que=n(QK,"STRONG",{});var tpt=s(Que);ior=r(tpt,"not"),tpt.forEach(t),dor=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(QK,"A",{href:!0});var apt=s(qX);cor=r(apt,"from_pretrained()"),apt.forEach(t),mor=r(QK," to load the model weights."),QK.forEach(t),gor=i(DA),T(nF.$$.fragment,DA),DA.forEach(t),hor=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(vL.$$.fragment,va),por=i(va),Wue=n(va,"P",{});var npt=s(Wue);uor=r(npt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),npt.forEach(t),_or=i(va),Ha=n(va,"P",{});var GA=s(Ha);bor=r(GA,"The model class to instantiate is selected based on the "),Hue=n(GA,"CODE",{});var spt=s(Hue);vor=r(spt,"model_type"),spt.forEach(t),For=r(GA,` property of the config object (either
passed as an argument or loaded from `),Uue=n(GA,"CODE",{});var lpt=s(Uue);Tor=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),Mor=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(GA,"CODE",{});var ipt=s(Jue);Eor=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),Cor=r(GA,":"),GA.forEach(t),wor=i(va),Yue=n(va,"UL",{});var dpt=s(Yue);sF=n(dpt,"LI",{});var z9e=s(sF);Kue=n(z9e,"STRONG",{});var cpt=s(Kue);Aor=r(cpt,"detr"),cpt.forEach(t),yor=r(z9e," \u2014 "),NX=n(z9e,"A",{href:!0});var fpt=s(NX);Lor=r(fpt,"DetrForSegmentation"),fpt.forEach(t),xor=r(z9e," (DETR model)"),z9e.forEach(t),dpt.forEach(t),$or=i(va),lF=n(va,"P",{});var Q9e=s(lF);kor=r(Q9e,"The model is set in evaluation mode by default using "),Zue=n(Q9e,"CODE",{});var mpt=s(Zue);Sor=r(mpt,"model.eval()"),mpt.forEach(t),Ror=r(Q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(Q9e,"CODE",{});var gpt=s(e_e);Por=r(gpt,"model.train()"),gpt.forEach(t),Q9e.forEach(t),Bor=i(va),T(iF.$$.fragment,va),va.forEach(t),sl.forEach(t),IIe=i(f),kd=n(f,"H2",{class:!0});var ONe=s(kd);dF=n(ONe,"A",{id:!0,class:!0,href:!0});var hpt=s(dF);o_e=n(hpt,"SPAN",{});var ppt=s(o_e);T(FL.$$.fragment,ppt),ppt.forEach(t),hpt.forEach(t),Ior=i(ONe),r_e=n(ONe,"SPAN",{});var upt=s(r_e);qor=r(upt,"AutoModelForSemanticSegmentation"),upt.forEach(t),ONe.forEach(t),qIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(TL.$$.fragment,ll),Nor=i(ll),Sd=n(ll,"P",{});var WK=s(Sd);jor=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jX=n(WK,"A",{href:!0});var _pt=s(jX);Dor=r(_pt,"from_pretrained()"),_pt.forEach(t),Gor=r(WK," class method or the "),DX=n(WK,"A",{href:!0});var bpt=s(DX);Oor=r(bpt,"from_config()"),bpt.forEach(t),Vor=r(WK,` class
method.`),WK.forEach(t),Xor=i(ll),ML=n(ll,"P",{});var VNe=s(ML);zor=r(VNe,"This class cannot be instantiated directly using "),t_e=n(VNe,"CODE",{});var vpt=s(t_e);Qor=r(vpt,"__init__()"),vpt.forEach(t),Wor=r(VNe," (throws an error)."),VNe.forEach(t),Hor=i(ll),Et=n(ll,"DIV",{class:!0});var OA=s(Et);T(EL.$$.fragment,OA),Uor=i(OA),a_e=n(OA,"P",{});var Fpt=s(a_e);Jor=r(Fpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fpt.forEach(t),Yor=i(OA),Rd=n(OA,"P",{});var HK=s(Rd);Kor=r(HK,`Note:
Loading a model from its configuration file does `),n_e=n(HK,"STRONG",{});var Tpt=s(n_e);Zor=r(Tpt,"not"),Tpt.forEach(t),err=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(HK,"A",{href:!0});var Mpt=s(GX);orr=r(Mpt,"from_pretrained()"),Mpt.forEach(t),rrr=r(HK," to load the model weights."),HK.forEach(t),trr=i(OA),T(cF.$$.fragment,OA),OA.forEach(t),arr=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(CL.$$.fragment,Fa),nrr=i(Fa),s_e=n(Fa,"P",{});var Ept=s(s_e);srr=r(Ept,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ept.forEach(t),lrr=i(Fa),Ua=n(Fa,"P",{});var VA=s(Ua);irr=r(VA,"The model class to instantiate is selected based on the "),l_e=n(VA,"CODE",{});var Cpt=s(l_e);drr=r(Cpt,"model_type"),Cpt.forEach(t),crr=r(VA,` property of the config object (either
passed as an argument or loaded from `),i_e=n(VA,"CODE",{});var wpt=s(i_e);frr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),mrr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(VA,"CODE",{});var Apt=s(d_e);grr=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),hrr=r(VA,":"),VA.forEach(t),prr=i(Fa),Ja=n(Fa,"UL",{});var XA=s(Ja);fF=n(XA,"LI",{});var W9e=s(fF);c_e=n(W9e,"STRONG",{});var ypt=s(c_e);urr=r(ypt,"beit"),ypt.forEach(t),_rr=r(W9e," \u2014 "),OX=n(W9e,"A",{href:!0});var Lpt=s(OX);brr=r(Lpt,"BeitForSemanticSegmentation"),Lpt.forEach(t),vrr=r(W9e," (BEiT model)"),W9e.forEach(t),Frr=i(XA),mF=n(XA,"LI",{});var H9e=s(mF);f_e=n(H9e,"STRONG",{});var xpt=s(f_e);Trr=r(xpt,"data2vec-vision"),xpt.forEach(t),Mrr=r(H9e," \u2014 "),VX=n(H9e,"A",{href:!0});var $pt=s(VX);Err=r($pt,"Data2VecVisionForSemanticSegmentation"),$pt.forEach(t),Crr=r(H9e," (Data2VecVision model)"),H9e.forEach(t),wrr=i(XA),gF=n(XA,"LI",{});var U9e=s(gF);m_e=n(U9e,"STRONG",{});var kpt=s(m_e);Arr=r(kpt,"dpt"),kpt.forEach(t),yrr=r(U9e," \u2014 "),XX=n(U9e,"A",{href:!0});var Spt=s(XX);Lrr=r(Spt,"DPTForSemanticSegmentation"),Spt.forEach(t),xrr=r(U9e," (DPT model)"),U9e.forEach(t),$rr=i(XA),hF=n(XA,"LI",{});var J9e=s(hF);g_e=n(J9e,"STRONG",{});var Rpt=s(g_e);krr=r(Rpt,"segformer"),Rpt.forEach(t),Srr=r(J9e," \u2014 "),zX=n(J9e,"A",{href:!0});var Ppt=s(zX);Rrr=r(Ppt,"SegformerForSemanticSegmentation"),Ppt.forEach(t),Prr=r(J9e," (SegFormer model)"),J9e.forEach(t),XA.forEach(t),Brr=i(Fa),pF=n(Fa,"P",{});var Y9e=s(pF);Irr=r(Y9e,"The model is set in evaluation mode by default using "),h_e=n(Y9e,"CODE",{});var Bpt=s(h_e);qrr=r(Bpt,"model.eval()"),Bpt.forEach(t),Nrr=r(Y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(Y9e,"CODE",{});var Ipt=s(p_e);jrr=r(Ipt,"model.train()"),Ipt.forEach(t),Y9e.forEach(t),Drr=i(Fa),T(uF.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),NIe=i(f),Pd=n(f,"H2",{class:!0});var XNe=s(Pd);_F=n(XNe,"A",{id:!0,class:!0,href:!0});var qpt=s(_F);u_e=n(qpt,"SPAN",{});var Npt=s(u_e);T(wL.$$.fragment,Npt),Npt.forEach(t),qpt.forEach(t),Grr=i(XNe),__e=n(XNe,"SPAN",{});var jpt=s(__e);Orr=r(jpt,"AutoModelForInstanceSegmentation"),jpt.forEach(t),XNe.forEach(t),jIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(AL.$$.fragment,il),Vrr=i(il),Bd=n(il,"P",{});var UK=s(Bd);Xrr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QX=n(UK,"A",{href:!0});var Dpt=s(QX);zrr=r(Dpt,"from_pretrained()"),Dpt.forEach(t),Qrr=r(UK," class method or the "),WX=n(UK,"A",{href:!0});var Gpt=s(WX);Wrr=r(Gpt,"from_config()"),Gpt.forEach(t),Hrr=r(UK,` class
method.`),UK.forEach(t),Urr=i(il),yL=n(il,"P",{});var zNe=s(yL);Jrr=r(zNe,"This class cannot be instantiated directly using "),b_e=n(zNe,"CODE",{});var Opt=s(b_e);Yrr=r(Opt,"__init__()"),Opt.forEach(t),Krr=r(zNe," (throws an error)."),zNe.forEach(t),Zrr=i(il),Ct=n(il,"DIV",{class:!0});var zA=s(Ct);T(LL.$$.fragment,zA),etr=i(zA),v_e=n(zA,"P",{});var Vpt=s(v_e);otr=r(Vpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vpt.forEach(t),rtr=i(zA),Id=n(zA,"P",{});var JK=s(Id);ttr=r(JK,`Note:
Loading a model from its configuration file does `),F_e=n(JK,"STRONG",{});var Xpt=s(F_e);atr=r(Xpt,"not"),Xpt.forEach(t),ntr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(JK,"A",{href:!0});var zpt=s(HX);str=r(zpt,"from_pretrained()"),zpt.forEach(t),ltr=r(JK," to load the model weights."),JK.forEach(t),itr=i(zA),T(bF.$$.fragment,zA),zA.forEach(t),dtr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(xL.$$.fragment,Ta),ctr=i(Ta),T_e=n(Ta,"P",{});var Qpt=s(T_e);ftr=r(Qpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Qpt.forEach(t),mtr=i(Ta),Ya=n(Ta,"P",{});var QA=s(Ya);gtr=r(QA,"The model class to instantiate is selected based on the "),M_e=n(QA,"CODE",{});var Wpt=s(M_e);htr=r(Wpt,"model_type"),Wpt.forEach(t),ptr=r(QA,` property of the config object (either
passed as an argument or loaded from `),E_e=n(QA,"CODE",{});var Hpt=s(E_e);utr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),_tr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(QA,"CODE",{});var Upt=s(C_e);btr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),vtr=r(QA,":"),QA.forEach(t),Ftr=i(Ta),w_e=n(Ta,"UL",{});var Jpt=s(w_e);vF=n(Jpt,"LI",{});var K9e=s(vF);A_e=n(K9e,"STRONG",{});var Ypt=s(A_e);Ttr=r(Ypt,"maskformer"),Ypt.forEach(t),Mtr=r(K9e," \u2014 "),UX=n(K9e,"A",{href:!0});var Kpt=s(UX);Etr=r(Kpt,"MaskFormerForInstanceSegmentation"),Kpt.forEach(t),Ctr=r(K9e," (MaskFormer model)"),K9e.forEach(t),Jpt.forEach(t),wtr=i(Ta),FF=n(Ta,"P",{});var Z9e=s(FF);Atr=r(Z9e,"The model is set in evaluation mode by default using "),y_e=n(Z9e,"CODE",{});var Zpt=s(y_e);ytr=r(Zpt,"model.eval()"),Zpt.forEach(t),Ltr=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=n(Z9e,"CODE",{});var eut=s(L_e);xtr=r(eut,"model.train()"),eut.forEach(t),Z9e.forEach(t),$tr=i(Ta),T(TF.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),DIe=i(f),qd=n(f,"H2",{class:!0});var QNe=s(qd);MF=n(QNe,"A",{id:!0,class:!0,href:!0});var out=s(MF);x_e=n(out,"SPAN",{});var rut=s(x_e);T($L.$$.fragment,rut),rut.forEach(t),out.forEach(t),ktr=i(QNe),$_e=n(QNe,"SPAN",{});var tut=s($_e);Str=r(tut,"TFAutoModel"),tut.forEach(t),QNe.forEach(t),GIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(kL.$$.fragment,dl),Rtr=i(dl),Nd=n(dl,"P",{});var YK=s(Nd);Ptr=r(YK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JX=n(YK,"A",{href:!0});var aut=s(JX);Btr=r(aut,"from_pretrained()"),aut.forEach(t),Itr=r(YK," class method or the "),YX=n(YK,"A",{href:!0});var nut=s(YX);qtr=r(nut,"from_config()"),nut.forEach(t),Ntr=r(YK,` class
method.`),YK.forEach(t),jtr=i(dl),SL=n(dl,"P",{});var WNe=s(SL);Dtr=r(WNe,"This class cannot be instantiated directly using "),k_e=n(WNe,"CODE",{});var sut=s(k_e);Gtr=r(sut,"__init__()"),sut.forEach(t),Otr=r(WNe," (throws an error)."),WNe.forEach(t),Vtr=i(dl),wt=n(dl,"DIV",{class:!0});var WA=s(wt);T(RL.$$.fragment,WA),Xtr=i(WA),S_e=n(WA,"P",{});var lut=s(S_e);ztr=r(lut,"Instantiates one of the base model classes of the library from a configuration."),lut.forEach(t),Qtr=i(WA),jd=n(WA,"P",{});var KK=s(jd);Wtr=r(KK,`Note:
Loading a model from its configuration file does `),R_e=n(KK,"STRONG",{});var iut=s(R_e);Htr=r(iut,"not"),iut.forEach(t),Utr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(KK,"A",{href:!0});var dut=s(KX);Jtr=r(dut,"from_pretrained()"),dut.forEach(t),Ytr=r(KK," to load the model weights."),KK.forEach(t),Ktr=i(WA),T(EF.$$.fragment,WA),WA.forEach(t),Ztr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(PL.$$.fragment,cl),ear=i(cl),P_e=n(cl,"P",{});var cut=s(P_e);oar=r(cut,"Instantiate one of the base model classes of the library from a pretrained model."),cut.forEach(t),rar=i(cl),Ka=n(cl,"P",{});var HA=s(Ka);tar=r(HA,"The model class to instantiate is selected based on the "),B_e=n(HA,"CODE",{});var fut=s(B_e);aar=r(fut,"model_type"),fut.forEach(t),nar=r(HA,` property of the config object (either
passed as an argument or loaded from `),I_e=n(HA,"CODE",{});var mut=s(I_e);sar=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),lar=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(HA,"CODE",{});var gut=s(q_e);iar=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),dar=r(HA,":"),HA.forEach(t),car=i(cl),N=n(cl,"UL",{});var D=s(N);CF=n(D,"LI",{});var e$e=s(CF);N_e=n(e$e,"STRONG",{});var hut=s(N_e);far=r(hut,"albert"),hut.forEach(t),mar=r(e$e," \u2014 "),ZX=n(e$e,"A",{href:!0});var put=s(ZX);gar=r(put,"TFAlbertModel"),put.forEach(t),har=r(e$e," (ALBERT model)"),e$e.forEach(t),par=i(D),wF=n(D,"LI",{});var o$e=s(wF);j_e=n(o$e,"STRONG",{});var uut=s(j_e);uar=r(uut,"bart"),uut.forEach(t),_ar=r(o$e," \u2014 "),ez=n(o$e,"A",{href:!0});var _ut=s(ez);bar=r(_ut,"TFBartModel"),_ut.forEach(t),Far=r(o$e," (BART model)"),o$e.forEach(t),Tar=i(D),AF=n(D,"LI",{});var r$e=s(AF);D_e=n(r$e,"STRONG",{});var but=s(D_e);Mar=r(but,"bert"),but.forEach(t),Ear=r(r$e," \u2014 "),oz=n(r$e,"A",{href:!0});var vut=s(oz);Car=r(vut,"TFBertModel"),vut.forEach(t),war=r(r$e," (BERT model)"),r$e.forEach(t),Aar=i(D),yF=n(D,"LI",{});var t$e=s(yF);G_e=n(t$e,"STRONG",{});var Fut=s(G_e);yar=r(Fut,"blenderbot"),Fut.forEach(t),Lar=r(t$e," \u2014 "),rz=n(t$e,"A",{href:!0});var Tut=s(rz);xar=r(Tut,"TFBlenderbotModel"),Tut.forEach(t),$ar=r(t$e," (Blenderbot model)"),t$e.forEach(t),kar=i(D),LF=n(D,"LI",{});var a$e=s(LF);O_e=n(a$e,"STRONG",{});var Mut=s(O_e);Sar=r(Mut,"blenderbot-small"),Mut.forEach(t),Rar=r(a$e," \u2014 "),tz=n(a$e,"A",{href:!0});var Eut=s(tz);Par=r(Eut,"TFBlenderbotSmallModel"),Eut.forEach(t),Bar=r(a$e," (BlenderbotSmall model)"),a$e.forEach(t),Iar=i(D),xF=n(D,"LI",{});var n$e=s(xF);V_e=n(n$e,"STRONG",{});var Cut=s(V_e);qar=r(Cut,"camembert"),Cut.forEach(t),Nar=r(n$e," \u2014 "),az=n(n$e,"A",{href:!0});var wut=s(az);jar=r(wut,"TFCamembertModel"),wut.forEach(t),Dar=r(n$e," (CamemBERT model)"),n$e.forEach(t),Gar=i(D),$F=n(D,"LI",{});var s$e=s($F);X_e=n(s$e,"STRONG",{});var Aut=s(X_e);Oar=r(Aut,"clip"),Aut.forEach(t),Var=r(s$e," \u2014 "),nz=n(s$e,"A",{href:!0});var yut=s(nz);Xar=r(yut,"TFCLIPModel"),yut.forEach(t),zar=r(s$e," (CLIP model)"),s$e.forEach(t),Qar=i(D),kF=n(D,"LI",{});var l$e=s(kF);z_e=n(l$e,"STRONG",{});var Lut=s(z_e);War=r(Lut,"convbert"),Lut.forEach(t),Har=r(l$e," \u2014 "),sz=n(l$e,"A",{href:!0});var xut=s(sz);Uar=r(xut,"TFConvBertModel"),xut.forEach(t),Jar=r(l$e," (ConvBERT model)"),l$e.forEach(t),Yar=i(D),SF=n(D,"LI",{});var i$e=s(SF);Q_e=n(i$e,"STRONG",{});var $ut=s(Q_e);Kar=r($ut,"convnext"),$ut.forEach(t),Zar=r(i$e," \u2014 "),lz=n(i$e,"A",{href:!0});var kut=s(lz);enr=r(kut,"TFConvNextModel"),kut.forEach(t),onr=r(i$e," (ConvNext model)"),i$e.forEach(t),rnr=i(D),RF=n(D,"LI",{});var d$e=s(RF);W_e=n(d$e,"STRONG",{});var Sut=s(W_e);tnr=r(Sut,"ctrl"),Sut.forEach(t),anr=r(d$e," \u2014 "),iz=n(d$e,"A",{href:!0});var Rut=s(iz);nnr=r(Rut,"TFCTRLModel"),Rut.forEach(t),snr=r(d$e," (CTRL model)"),d$e.forEach(t),lnr=i(D),PF=n(D,"LI",{});var c$e=s(PF);H_e=n(c$e,"STRONG",{});var Put=s(H_e);inr=r(Put,"data2vec-vision"),Put.forEach(t),dnr=r(c$e," \u2014 "),dz=n(c$e,"A",{href:!0});var But=s(dz);cnr=r(But,"TFData2VecVisionModel"),But.forEach(t),fnr=r(c$e," (Data2VecVision model)"),c$e.forEach(t),mnr=i(D),BF=n(D,"LI",{});var f$e=s(BF);U_e=n(f$e,"STRONG",{});var Iut=s(U_e);gnr=r(Iut,"deberta"),Iut.forEach(t),hnr=r(f$e," \u2014 "),cz=n(f$e,"A",{href:!0});var qut=s(cz);pnr=r(qut,"TFDebertaModel"),qut.forEach(t),unr=r(f$e," (DeBERTa model)"),f$e.forEach(t),_nr=i(D),IF=n(D,"LI",{});var m$e=s(IF);J_e=n(m$e,"STRONG",{});var Nut=s(J_e);bnr=r(Nut,"deberta-v2"),Nut.forEach(t),vnr=r(m$e," \u2014 "),fz=n(m$e,"A",{href:!0});var jut=s(fz);Fnr=r(jut,"TFDebertaV2Model"),jut.forEach(t),Tnr=r(m$e," (DeBERTa-v2 model)"),m$e.forEach(t),Mnr=i(D),qF=n(D,"LI",{});var g$e=s(qF);Y_e=n(g$e,"STRONG",{});var Dut=s(Y_e);Enr=r(Dut,"distilbert"),Dut.forEach(t),Cnr=r(g$e," \u2014 "),mz=n(g$e,"A",{href:!0});var Gut=s(mz);wnr=r(Gut,"TFDistilBertModel"),Gut.forEach(t),Anr=r(g$e," (DistilBERT model)"),g$e.forEach(t),ynr=i(D),NF=n(D,"LI",{});var h$e=s(NF);K_e=n(h$e,"STRONG",{});var Out=s(K_e);Lnr=r(Out,"dpr"),Out.forEach(t),xnr=r(h$e," \u2014 "),gz=n(h$e,"A",{href:!0});var Vut=s(gz);$nr=r(Vut,"TFDPRQuestionEncoder"),Vut.forEach(t),knr=r(h$e," (DPR model)"),h$e.forEach(t),Snr=i(D),jF=n(D,"LI",{});var p$e=s(jF);Z_e=n(p$e,"STRONG",{});var Xut=s(Z_e);Rnr=r(Xut,"electra"),Xut.forEach(t),Pnr=r(p$e," \u2014 "),hz=n(p$e,"A",{href:!0});var zut=s(hz);Bnr=r(zut,"TFElectraModel"),zut.forEach(t),Inr=r(p$e," (ELECTRA model)"),p$e.forEach(t),qnr=i(D),DF=n(D,"LI",{});var u$e=s(DF);e2e=n(u$e,"STRONG",{});var Qut=s(e2e);Nnr=r(Qut,"flaubert"),Qut.forEach(t),jnr=r(u$e," \u2014 "),pz=n(u$e,"A",{href:!0});var Wut=s(pz);Dnr=r(Wut,"TFFlaubertModel"),Wut.forEach(t),Gnr=r(u$e," (FlauBERT model)"),u$e.forEach(t),Onr=i(D),Ps=n(D,"LI",{});var f$=s(Ps);o2e=n(f$,"STRONG",{});var Hut=s(o2e);Vnr=r(Hut,"funnel"),Hut.forEach(t),Xnr=r(f$," \u2014 "),uz=n(f$,"A",{href:!0});var Uut=s(uz);znr=r(Uut,"TFFunnelModel"),Uut.forEach(t),Qnr=r(f$," or "),_z=n(f$,"A",{href:!0});var Jut=s(_z);Wnr=r(Jut,"TFFunnelBaseModel"),Jut.forEach(t),Hnr=r(f$," (Funnel Transformer model)"),f$.forEach(t),Unr=i(D),GF=n(D,"LI",{});var _$e=s(GF);r2e=n(_$e,"STRONG",{});var Yut=s(r2e);Jnr=r(Yut,"gpt2"),Yut.forEach(t),Ynr=r(_$e," \u2014 "),bz=n(_$e,"A",{href:!0});var Kut=s(bz);Knr=r(Kut,"TFGPT2Model"),Kut.forEach(t),Znr=r(_$e," (OpenAI GPT-2 model)"),_$e.forEach(t),esr=i(D),OF=n(D,"LI",{});var b$e=s(OF);t2e=n(b$e,"STRONG",{});var Zut=s(t2e);osr=r(Zut,"gptj"),Zut.forEach(t),rsr=r(b$e," \u2014 "),vz=n(b$e,"A",{href:!0});var e_t=s(vz);tsr=r(e_t,"TFGPTJModel"),e_t.forEach(t),asr=r(b$e," (GPT-J model)"),b$e.forEach(t),nsr=i(D),VF=n(D,"LI",{});var v$e=s(VF);a2e=n(v$e,"STRONG",{});var o_t=s(a2e);ssr=r(o_t,"hubert"),o_t.forEach(t),lsr=r(v$e," \u2014 "),Fz=n(v$e,"A",{href:!0});var r_t=s(Fz);isr=r(r_t,"TFHubertModel"),r_t.forEach(t),dsr=r(v$e," (Hubert model)"),v$e.forEach(t),csr=i(D),XF=n(D,"LI",{});var F$e=s(XF);n2e=n(F$e,"STRONG",{});var t_t=s(n2e);fsr=r(t_t,"layoutlm"),t_t.forEach(t),msr=r(F$e," \u2014 "),Tz=n(F$e,"A",{href:!0});var a_t=s(Tz);gsr=r(a_t,"TFLayoutLMModel"),a_t.forEach(t),hsr=r(F$e," (LayoutLM model)"),F$e.forEach(t),psr=i(D),zF=n(D,"LI",{});var T$e=s(zF);s2e=n(T$e,"STRONG",{});var n_t=s(s2e);usr=r(n_t,"led"),n_t.forEach(t),_sr=r(T$e," \u2014 "),Mz=n(T$e,"A",{href:!0});var s_t=s(Mz);bsr=r(s_t,"TFLEDModel"),s_t.forEach(t),vsr=r(T$e," (LED model)"),T$e.forEach(t),Fsr=i(D),QF=n(D,"LI",{});var M$e=s(QF);l2e=n(M$e,"STRONG",{});var l_t=s(l2e);Tsr=r(l_t,"longformer"),l_t.forEach(t),Msr=r(M$e," \u2014 "),Ez=n(M$e,"A",{href:!0});var i_t=s(Ez);Esr=r(i_t,"TFLongformerModel"),i_t.forEach(t),Csr=r(M$e," (Longformer model)"),M$e.forEach(t),wsr=i(D),WF=n(D,"LI",{});var E$e=s(WF);i2e=n(E$e,"STRONG",{});var d_t=s(i2e);Asr=r(d_t,"lxmert"),d_t.forEach(t),ysr=r(E$e," \u2014 "),Cz=n(E$e,"A",{href:!0});var c_t=s(Cz);Lsr=r(c_t,"TFLxmertModel"),c_t.forEach(t),xsr=r(E$e," (LXMERT model)"),E$e.forEach(t),$sr=i(D),HF=n(D,"LI",{});var C$e=s(HF);d2e=n(C$e,"STRONG",{});var f_t=s(d2e);ksr=r(f_t,"marian"),f_t.forEach(t),Ssr=r(C$e," \u2014 "),wz=n(C$e,"A",{href:!0});var m_t=s(wz);Rsr=r(m_t,"TFMarianModel"),m_t.forEach(t),Psr=r(C$e," (Marian model)"),C$e.forEach(t),Bsr=i(D),UF=n(D,"LI",{});var w$e=s(UF);c2e=n(w$e,"STRONG",{});var g_t=s(c2e);Isr=r(g_t,"mbart"),g_t.forEach(t),qsr=r(w$e," \u2014 "),Az=n(w$e,"A",{href:!0});var h_t=s(Az);Nsr=r(h_t,"TFMBartModel"),h_t.forEach(t),jsr=r(w$e," (mBART model)"),w$e.forEach(t),Dsr=i(D),JF=n(D,"LI",{});var A$e=s(JF);f2e=n(A$e,"STRONG",{});var p_t=s(f2e);Gsr=r(p_t,"mobilebert"),p_t.forEach(t),Osr=r(A$e," \u2014 "),yz=n(A$e,"A",{href:!0});var u_t=s(yz);Vsr=r(u_t,"TFMobileBertModel"),u_t.forEach(t),Xsr=r(A$e," (MobileBERT model)"),A$e.forEach(t),zsr=i(D),YF=n(D,"LI",{});var y$e=s(YF);m2e=n(y$e,"STRONG",{});var __t=s(m2e);Qsr=r(__t,"mpnet"),__t.forEach(t),Wsr=r(y$e," \u2014 "),Lz=n(y$e,"A",{href:!0});var b_t=s(Lz);Hsr=r(b_t,"TFMPNetModel"),b_t.forEach(t),Usr=r(y$e," (MPNet model)"),y$e.forEach(t),Jsr=i(D),KF=n(D,"LI",{});var L$e=s(KF);g2e=n(L$e,"STRONG",{});var v_t=s(g2e);Ysr=r(v_t,"mt5"),v_t.forEach(t),Ksr=r(L$e," \u2014 "),xz=n(L$e,"A",{href:!0});var F_t=s(xz);Zsr=r(F_t,"TFMT5Model"),F_t.forEach(t),elr=r(L$e," (mT5 model)"),L$e.forEach(t),olr=i(D),ZF=n(D,"LI",{});var x$e=s(ZF);h2e=n(x$e,"STRONG",{});var T_t=s(h2e);rlr=r(T_t,"openai-gpt"),T_t.forEach(t),tlr=r(x$e," \u2014 "),$z=n(x$e,"A",{href:!0});var M_t=s($z);alr=r(M_t,"TFOpenAIGPTModel"),M_t.forEach(t),nlr=r(x$e," (OpenAI GPT model)"),x$e.forEach(t),slr=i(D),eT=n(D,"LI",{});var $$e=s(eT);p2e=n($$e,"STRONG",{});var E_t=s(p2e);llr=r(E_t,"pegasus"),E_t.forEach(t),ilr=r($$e," \u2014 "),kz=n($$e,"A",{href:!0});var C_t=s(kz);dlr=r(C_t,"TFPegasusModel"),C_t.forEach(t),clr=r($$e," (Pegasus model)"),$$e.forEach(t),flr=i(D),oT=n(D,"LI",{});var k$e=s(oT);u2e=n(k$e,"STRONG",{});var w_t=s(u2e);mlr=r(w_t,"rembert"),w_t.forEach(t),glr=r(k$e," \u2014 "),Sz=n(k$e,"A",{href:!0});var A_t=s(Sz);hlr=r(A_t,"TFRemBertModel"),A_t.forEach(t),plr=r(k$e," (RemBERT model)"),k$e.forEach(t),ulr=i(D),rT=n(D,"LI",{});var S$e=s(rT);_2e=n(S$e,"STRONG",{});var y_t=s(_2e);_lr=r(y_t,"roberta"),y_t.forEach(t),blr=r(S$e," \u2014 "),Rz=n(S$e,"A",{href:!0});var L_t=s(Rz);vlr=r(L_t,"TFRobertaModel"),L_t.forEach(t),Flr=r(S$e," (RoBERTa model)"),S$e.forEach(t),Tlr=i(D),tT=n(D,"LI",{});var R$e=s(tT);b2e=n(R$e,"STRONG",{});var x_t=s(b2e);Mlr=r(x_t,"roformer"),x_t.forEach(t),Elr=r(R$e," \u2014 "),Pz=n(R$e,"A",{href:!0});var $_t=s(Pz);Clr=r($_t,"TFRoFormerModel"),$_t.forEach(t),wlr=r(R$e," (RoFormer model)"),R$e.forEach(t),Alr=i(D),aT=n(D,"LI",{});var P$e=s(aT);v2e=n(P$e,"STRONG",{});var k_t=s(v2e);ylr=r(k_t,"speech_to_text"),k_t.forEach(t),Llr=r(P$e," \u2014 "),Bz=n(P$e,"A",{href:!0});var S_t=s(Bz);xlr=r(S_t,"TFSpeech2TextModel"),S_t.forEach(t),$lr=r(P$e," (Speech2Text model)"),P$e.forEach(t),klr=i(D),nT=n(D,"LI",{});var B$e=s(nT);F2e=n(B$e,"STRONG",{});var R_t=s(F2e);Slr=r(R_t,"t5"),R_t.forEach(t),Rlr=r(B$e," \u2014 "),Iz=n(B$e,"A",{href:!0});var P_t=s(Iz);Plr=r(P_t,"TFT5Model"),P_t.forEach(t),Blr=r(B$e," (T5 model)"),B$e.forEach(t),Ilr=i(D),sT=n(D,"LI",{});var I$e=s(sT);T2e=n(I$e,"STRONG",{});var B_t=s(T2e);qlr=r(B_t,"tapas"),B_t.forEach(t),Nlr=r(I$e," \u2014 "),qz=n(I$e,"A",{href:!0});var I_t=s(qz);jlr=r(I_t,"TFTapasModel"),I_t.forEach(t),Dlr=r(I$e," (TAPAS model)"),I$e.forEach(t),Glr=i(D),lT=n(D,"LI",{});var q$e=s(lT);M2e=n(q$e,"STRONG",{});var q_t=s(M2e);Olr=r(q_t,"transfo-xl"),q_t.forEach(t),Vlr=r(q$e," \u2014 "),Nz=n(q$e,"A",{href:!0});var N_t=s(Nz);Xlr=r(N_t,"TFTransfoXLModel"),N_t.forEach(t),zlr=r(q$e," (Transformer-XL model)"),q$e.forEach(t),Qlr=i(D),iT=n(D,"LI",{});var N$e=s(iT);E2e=n(N$e,"STRONG",{});var j_t=s(E2e);Wlr=r(j_t,"vit"),j_t.forEach(t),Hlr=r(N$e," \u2014 "),jz=n(N$e,"A",{href:!0});var D_t=s(jz);Ulr=r(D_t,"TFViTModel"),D_t.forEach(t),Jlr=r(N$e," (ViT model)"),N$e.forEach(t),Ylr=i(D),dT=n(D,"LI",{});var j$e=s(dT);C2e=n(j$e,"STRONG",{});var G_t=s(C2e);Klr=r(G_t,"vit_mae"),G_t.forEach(t),Zlr=r(j$e," \u2014 "),Dz=n(j$e,"A",{href:!0});var O_t=s(Dz);eir=r(O_t,"TFViTMAEModel"),O_t.forEach(t),oir=r(j$e," (ViTMAE model)"),j$e.forEach(t),rir=i(D),cT=n(D,"LI",{});var D$e=s(cT);w2e=n(D$e,"STRONG",{});var V_t=s(w2e);tir=r(V_t,"wav2vec2"),V_t.forEach(t),air=r(D$e," \u2014 "),Gz=n(D$e,"A",{href:!0});var X_t=s(Gz);nir=r(X_t,"TFWav2Vec2Model"),X_t.forEach(t),sir=r(D$e," (Wav2Vec2 model)"),D$e.forEach(t),lir=i(D),fT=n(D,"LI",{});var G$e=s(fT);A2e=n(G$e,"STRONG",{});var z_t=s(A2e);iir=r(z_t,"xlm"),z_t.forEach(t),dir=r(G$e," \u2014 "),Oz=n(G$e,"A",{href:!0});var Q_t=s(Oz);cir=r(Q_t,"TFXLMModel"),Q_t.forEach(t),fir=r(G$e," (XLM model)"),G$e.forEach(t),mir=i(D),mT=n(D,"LI",{});var O$e=s(mT);y2e=n(O$e,"STRONG",{});var W_t=s(y2e);gir=r(W_t,"xlm-roberta"),W_t.forEach(t),hir=r(O$e," \u2014 "),Vz=n(O$e,"A",{href:!0});var H_t=s(Vz);pir=r(H_t,"TFXLMRobertaModel"),H_t.forEach(t),uir=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),_ir=i(D),gT=n(D,"LI",{});var V$e=s(gT);L2e=n(V$e,"STRONG",{});var U_t=s(L2e);bir=r(U_t,"xlnet"),U_t.forEach(t),vir=r(V$e," \u2014 "),Xz=n(V$e,"A",{href:!0});var J_t=s(Xz);Fir=r(J_t,"TFXLNetModel"),J_t.forEach(t),Tir=r(V$e," (XLNet model)"),V$e.forEach(t),D.forEach(t),Mir=i(cl),T(hT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),OIe=i(f),Dd=n(f,"H2",{class:!0});var HNe=s(Dd);pT=n(HNe,"A",{id:!0,class:!0,href:!0});var Y_t=s(pT);x2e=n(Y_t,"SPAN",{});var K_t=s(x2e);T(BL.$$.fragment,K_t),K_t.forEach(t),Y_t.forEach(t),Eir=i(HNe),$2e=n(HNe,"SPAN",{});var Z_t=s($2e);Cir=r(Z_t,"TFAutoModelForPreTraining"),Z_t.forEach(t),HNe.forEach(t),VIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(IL.$$.fragment,fl),wir=i(fl),Gd=n(fl,"P",{});var ZK=s(Gd);Air=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zz=n(ZK,"A",{href:!0});var e2t=s(zz);yir=r(e2t,"from_pretrained()"),e2t.forEach(t),Lir=r(ZK," class method or the "),Qz=n(ZK,"A",{href:!0});var o2t=s(Qz);xir=r(o2t,"from_config()"),o2t.forEach(t),$ir=r(ZK,` class
method.`),ZK.forEach(t),kir=i(fl),qL=n(fl,"P",{});var UNe=s(qL);Sir=r(UNe,"This class cannot be instantiated directly using "),k2e=n(UNe,"CODE",{});var r2t=s(k2e);Rir=r(r2t,"__init__()"),r2t.forEach(t),Pir=r(UNe," (throws an error)."),UNe.forEach(t),Bir=i(fl),At=n(fl,"DIV",{class:!0});var UA=s(At);T(NL.$$.fragment,UA),Iir=i(UA),S2e=n(UA,"P",{});var t2t=s(S2e);qir=r(t2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t2t.forEach(t),Nir=i(UA),Od=n(UA,"P",{});var eZ=s(Od);jir=r(eZ,`Note:
Loading a model from its configuration file does `),R2e=n(eZ,"STRONG",{});var a2t=s(R2e);Dir=r(a2t,"not"),a2t.forEach(t),Gir=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(eZ,"A",{href:!0});var n2t=s(Wz);Oir=r(n2t,"from_pretrained()"),n2t.forEach(t),Vir=r(eZ," to load the model weights."),eZ.forEach(t),Xir=i(UA),T(uT.$$.fragment,UA),UA.forEach(t),zir=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(jL.$$.fragment,ml),Qir=i(ml),P2e=n(ml,"P",{});var s2t=s(P2e);Wir=r(s2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s2t.forEach(t),Hir=i(ml),Za=n(ml,"P",{});var JA=s(Za);Uir=r(JA,"The model class to instantiate is selected based on the "),B2e=n(JA,"CODE",{});var l2t=s(B2e);Jir=r(l2t,"model_type"),l2t.forEach(t),Yir=r(JA,` property of the config object (either
passed as an argument or loaded from `),I2e=n(JA,"CODE",{});var i2t=s(I2e);Kir=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),Zir=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(JA,"CODE",{});var d2t=s(q2e);edr=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),odr=r(JA,":"),JA.forEach(t),rdr=i(ml),se=n(ml,"UL",{});var le=s(se);_T=n(le,"LI",{});var X$e=s(_T);N2e=n(X$e,"STRONG",{});var c2t=s(N2e);tdr=r(c2t,"albert"),c2t.forEach(t),adr=r(X$e," \u2014 "),Hz=n(X$e,"A",{href:!0});var f2t=s(Hz);ndr=r(f2t,"TFAlbertForPreTraining"),f2t.forEach(t),sdr=r(X$e," (ALBERT model)"),X$e.forEach(t),ldr=i(le),bT=n(le,"LI",{});var z$e=s(bT);j2e=n(z$e,"STRONG",{});var m2t=s(j2e);idr=r(m2t,"bart"),m2t.forEach(t),ddr=r(z$e," \u2014 "),Uz=n(z$e,"A",{href:!0});var g2t=s(Uz);cdr=r(g2t,"TFBartForConditionalGeneration"),g2t.forEach(t),fdr=r(z$e," (BART model)"),z$e.forEach(t),mdr=i(le),vT=n(le,"LI",{});var Q$e=s(vT);D2e=n(Q$e,"STRONG",{});var h2t=s(D2e);gdr=r(h2t,"bert"),h2t.forEach(t),hdr=r(Q$e," \u2014 "),Jz=n(Q$e,"A",{href:!0});var p2t=s(Jz);pdr=r(p2t,"TFBertForPreTraining"),p2t.forEach(t),udr=r(Q$e," (BERT model)"),Q$e.forEach(t),_dr=i(le),FT=n(le,"LI",{});var W$e=s(FT);G2e=n(W$e,"STRONG",{});var u2t=s(G2e);bdr=r(u2t,"camembert"),u2t.forEach(t),vdr=r(W$e," \u2014 "),Yz=n(W$e,"A",{href:!0});var _2t=s(Yz);Fdr=r(_2t,"TFCamembertForMaskedLM"),_2t.forEach(t),Tdr=r(W$e," (CamemBERT model)"),W$e.forEach(t),Mdr=i(le),TT=n(le,"LI",{});var H$e=s(TT);O2e=n(H$e,"STRONG",{});var b2t=s(O2e);Edr=r(b2t,"ctrl"),b2t.forEach(t),Cdr=r(H$e," \u2014 "),Kz=n(H$e,"A",{href:!0});var v2t=s(Kz);wdr=r(v2t,"TFCTRLLMHeadModel"),v2t.forEach(t),Adr=r(H$e," (CTRL model)"),H$e.forEach(t),ydr=i(le),MT=n(le,"LI",{});var U$e=s(MT);V2e=n(U$e,"STRONG",{});var F2t=s(V2e);Ldr=r(F2t,"distilbert"),F2t.forEach(t),xdr=r(U$e," \u2014 "),Zz=n(U$e,"A",{href:!0});var T2t=s(Zz);$dr=r(T2t,"TFDistilBertForMaskedLM"),T2t.forEach(t),kdr=r(U$e," (DistilBERT model)"),U$e.forEach(t),Sdr=i(le),ET=n(le,"LI",{});var J$e=s(ET);X2e=n(J$e,"STRONG",{});var M2t=s(X2e);Rdr=r(M2t,"electra"),M2t.forEach(t),Pdr=r(J$e," \u2014 "),eQ=n(J$e,"A",{href:!0});var E2t=s(eQ);Bdr=r(E2t,"TFElectraForPreTraining"),E2t.forEach(t),Idr=r(J$e," (ELECTRA model)"),J$e.forEach(t),qdr=i(le),CT=n(le,"LI",{});var Y$e=s(CT);z2e=n(Y$e,"STRONG",{});var C2t=s(z2e);Ndr=r(C2t,"flaubert"),C2t.forEach(t),jdr=r(Y$e," \u2014 "),oQ=n(Y$e,"A",{href:!0});var w2t=s(oQ);Ddr=r(w2t,"TFFlaubertWithLMHeadModel"),w2t.forEach(t),Gdr=r(Y$e," (FlauBERT model)"),Y$e.forEach(t),Odr=i(le),wT=n(le,"LI",{});var K$e=s(wT);Q2e=n(K$e,"STRONG",{});var A2t=s(Q2e);Vdr=r(A2t,"funnel"),A2t.forEach(t),Xdr=r(K$e," \u2014 "),rQ=n(K$e,"A",{href:!0});var y2t=s(rQ);zdr=r(y2t,"TFFunnelForPreTraining"),y2t.forEach(t),Qdr=r(K$e," (Funnel Transformer model)"),K$e.forEach(t),Wdr=i(le),AT=n(le,"LI",{});var Z$e=s(AT);W2e=n(Z$e,"STRONG",{});var L2t=s(W2e);Hdr=r(L2t,"gpt2"),L2t.forEach(t),Udr=r(Z$e," \u2014 "),tQ=n(Z$e,"A",{href:!0});var x2t=s(tQ);Jdr=r(x2t,"TFGPT2LMHeadModel"),x2t.forEach(t),Ydr=r(Z$e," (OpenAI GPT-2 model)"),Z$e.forEach(t),Kdr=i(le),yT=n(le,"LI",{});var eke=s(yT);H2e=n(eke,"STRONG",{});var $2t=s(H2e);Zdr=r($2t,"layoutlm"),$2t.forEach(t),ecr=r(eke," \u2014 "),aQ=n(eke,"A",{href:!0});var k2t=s(aQ);ocr=r(k2t,"TFLayoutLMForMaskedLM"),k2t.forEach(t),rcr=r(eke," (LayoutLM model)"),eke.forEach(t),tcr=i(le),LT=n(le,"LI",{});var oke=s(LT);U2e=n(oke,"STRONG",{});var S2t=s(U2e);acr=r(S2t,"lxmert"),S2t.forEach(t),ncr=r(oke," \u2014 "),nQ=n(oke,"A",{href:!0});var R2t=s(nQ);scr=r(R2t,"TFLxmertForPreTraining"),R2t.forEach(t),lcr=r(oke," (LXMERT model)"),oke.forEach(t),icr=i(le),xT=n(le,"LI",{});var rke=s(xT);J2e=n(rke,"STRONG",{});var P2t=s(J2e);dcr=r(P2t,"mobilebert"),P2t.forEach(t),ccr=r(rke," \u2014 "),sQ=n(rke,"A",{href:!0});var B2t=s(sQ);fcr=r(B2t,"TFMobileBertForPreTraining"),B2t.forEach(t),mcr=r(rke," (MobileBERT model)"),rke.forEach(t),gcr=i(le),$T=n(le,"LI",{});var tke=s($T);Y2e=n(tke,"STRONG",{});var I2t=s(Y2e);hcr=r(I2t,"mpnet"),I2t.forEach(t),pcr=r(tke," \u2014 "),lQ=n(tke,"A",{href:!0});var q2t=s(lQ);ucr=r(q2t,"TFMPNetForMaskedLM"),q2t.forEach(t),_cr=r(tke," (MPNet model)"),tke.forEach(t),bcr=i(le),kT=n(le,"LI",{});var ake=s(kT);K2e=n(ake,"STRONG",{});var N2t=s(K2e);vcr=r(N2t,"openai-gpt"),N2t.forEach(t),Fcr=r(ake," \u2014 "),iQ=n(ake,"A",{href:!0});var j2t=s(iQ);Tcr=r(j2t,"TFOpenAIGPTLMHeadModel"),j2t.forEach(t),Mcr=r(ake," (OpenAI GPT model)"),ake.forEach(t),Ecr=i(le),ST=n(le,"LI",{});var nke=s(ST);Z2e=n(nke,"STRONG",{});var D2t=s(Z2e);Ccr=r(D2t,"roberta"),D2t.forEach(t),wcr=r(nke," \u2014 "),dQ=n(nke,"A",{href:!0});var G2t=s(dQ);Acr=r(G2t,"TFRobertaForMaskedLM"),G2t.forEach(t),ycr=r(nke," (RoBERTa model)"),nke.forEach(t),Lcr=i(le),RT=n(le,"LI",{});var ske=s(RT);e1e=n(ske,"STRONG",{});var O2t=s(e1e);xcr=r(O2t,"t5"),O2t.forEach(t),$cr=r(ske," \u2014 "),cQ=n(ske,"A",{href:!0});var V2t=s(cQ);kcr=r(V2t,"TFT5ForConditionalGeneration"),V2t.forEach(t),Scr=r(ske," (T5 model)"),ske.forEach(t),Rcr=i(le),PT=n(le,"LI",{});var lke=s(PT);o1e=n(lke,"STRONG",{});var X2t=s(o1e);Pcr=r(X2t,"tapas"),X2t.forEach(t),Bcr=r(lke," \u2014 "),fQ=n(lke,"A",{href:!0});var z2t=s(fQ);Icr=r(z2t,"TFTapasForMaskedLM"),z2t.forEach(t),qcr=r(lke," (TAPAS model)"),lke.forEach(t),Ncr=i(le),BT=n(le,"LI",{});var ike=s(BT);r1e=n(ike,"STRONG",{});var Q2t=s(r1e);jcr=r(Q2t,"transfo-xl"),Q2t.forEach(t),Dcr=r(ike," \u2014 "),mQ=n(ike,"A",{href:!0});var W2t=s(mQ);Gcr=r(W2t,"TFTransfoXLLMHeadModel"),W2t.forEach(t),Ocr=r(ike," (Transformer-XL model)"),ike.forEach(t),Vcr=i(le),IT=n(le,"LI",{});var dke=s(IT);t1e=n(dke,"STRONG",{});var H2t=s(t1e);Xcr=r(H2t,"vit_mae"),H2t.forEach(t),zcr=r(dke," \u2014 "),gQ=n(dke,"A",{href:!0});var U2t=s(gQ);Qcr=r(U2t,"TFViTMAEForPreTraining"),U2t.forEach(t),Wcr=r(dke," (ViTMAE model)"),dke.forEach(t),Hcr=i(le),qT=n(le,"LI",{});var cke=s(qT);a1e=n(cke,"STRONG",{});var J2t=s(a1e);Ucr=r(J2t,"xlm"),J2t.forEach(t),Jcr=r(cke," \u2014 "),hQ=n(cke,"A",{href:!0});var Y2t=s(hQ);Ycr=r(Y2t,"TFXLMWithLMHeadModel"),Y2t.forEach(t),Kcr=r(cke," (XLM model)"),cke.forEach(t),Zcr=i(le),NT=n(le,"LI",{});var fke=s(NT);n1e=n(fke,"STRONG",{});var K2t=s(n1e);efr=r(K2t,"xlm-roberta"),K2t.forEach(t),ofr=r(fke," \u2014 "),pQ=n(fke,"A",{href:!0});var Z2t=s(pQ);rfr=r(Z2t,"TFXLMRobertaForMaskedLM"),Z2t.forEach(t),tfr=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),afr=i(le),jT=n(le,"LI",{});var mke=s(jT);s1e=n(mke,"STRONG",{});var e1t=s(s1e);nfr=r(e1t,"xlnet"),e1t.forEach(t),sfr=r(mke," \u2014 "),uQ=n(mke,"A",{href:!0});var o1t=s(uQ);lfr=r(o1t,"TFXLNetLMHeadModel"),o1t.forEach(t),ifr=r(mke," (XLNet model)"),mke.forEach(t),le.forEach(t),dfr=i(ml),T(DT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),XIe=i(f),Vd=n(f,"H2",{class:!0});var JNe=s(Vd);GT=n(JNe,"A",{id:!0,class:!0,href:!0});var r1t=s(GT);l1e=n(r1t,"SPAN",{});var t1t=s(l1e);T(DL.$$.fragment,t1t),t1t.forEach(t),r1t.forEach(t),cfr=i(JNe),i1e=n(JNe,"SPAN",{});var a1t=s(i1e);ffr=r(a1t,"TFAutoModelForCausalLM"),a1t.forEach(t),JNe.forEach(t),zIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(GL.$$.fragment,gl),mfr=i(gl),Xd=n(gl,"P",{});var oZ=s(Xd);gfr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=n(oZ,"A",{href:!0});var n1t=s(_Q);hfr=r(n1t,"from_pretrained()"),n1t.forEach(t),pfr=r(oZ," class method or the "),bQ=n(oZ,"A",{href:!0});var s1t=s(bQ);ufr=r(s1t,"from_config()"),s1t.forEach(t),_fr=r(oZ,` class
method.`),oZ.forEach(t),bfr=i(gl),OL=n(gl,"P",{});var YNe=s(OL);vfr=r(YNe,"This class cannot be instantiated directly using "),d1e=n(YNe,"CODE",{});var l1t=s(d1e);Ffr=r(l1t,"__init__()"),l1t.forEach(t),Tfr=r(YNe," (throws an error)."),YNe.forEach(t),Mfr=i(gl),yt=n(gl,"DIV",{class:!0});var YA=s(yt);T(VL.$$.fragment,YA),Efr=i(YA),c1e=n(YA,"P",{});var i1t=s(c1e);Cfr=r(i1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i1t.forEach(t),wfr=i(YA),zd=n(YA,"P",{});var rZ=s(zd);Afr=r(rZ,`Note:
Loading a model from its configuration file does `),f1e=n(rZ,"STRONG",{});var d1t=s(f1e);yfr=r(d1t,"not"),d1t.forEach(t),Lfr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(rZ,"A",{href:!0});var c1t=s(vQ);xfr=r(c1t,"from_pretrained()"),c1t.forEach(t),$fr=r(rZ," to load the model weights."),rZ.forEach(t),kfr=i(YA),T(OT.$$.fragment,YA),YA.forEach(t),Sfr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(XL.$$.fragment,hl),Rfr=i(hl),m1e=n(hl,"P",{});var f1t=s(m1e);Pfr=r(f1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),f1t.forEach(t),Bfr=i(hl),en=n(hl,"P",{});var KA=s(en);Ifr=r(KA,"The model class to instantiate is selected based on the "),g1e=n(KA,"CODE",{});var m1t=s(g1e);qfr=r(m1t,"model_type"),m1t.forEach(t),Nfr=r(KA,` property of the config object (either
passed as an argument or loaded from `),h1e=n(KA,"CODE",{});var g1t=s(h1e);jfr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Dfr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(KA,"CODE",{});var h1t=s(p1e);Gfr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),Ofr=r(KA,":"),KA.forEach(t),Vfr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);VT=n(Ce,"LI",{});var gke=s(VT);u1e=n(gke,"STRONG",{});var p1t=s(u1e);Xfr=r(p1t,"bert"),p1t.forEach(t),zfr=r(gke," \u2014 "),FQ=n(gke,"A",{href:!0});var u1t=s(FQ);Qfr=r(u1t,"TFBertLMHeadModel"),u1t.forEach(t),Wfr=r(gke," (BERT model)"),gke.forEach(t),Hfr=i(Ce),XT=n(Ce,"LI",{});var hke=s(XT);_1e=n(hke,"STRONG",{});var _1t=s(_1e);Ufr=r(_1t,"camembert"),_1t.forEach(t),Jfr=r(hke," \u2014 "),TQ=n(hke,"A",{href:!0});var b1t=s(TQ);Yfr=r(b1t,"TFCamembertForCausalLM"),b1t.forEach(t),Kfr=r(hke," (CamemBERT model)"),hke.forEach(t),Zfr=i(Ce),zT=n(Ce,"LI",{});var pke=s(zT);b1e=n(pke,"STRONG",{});var v1t=s(b1e);emr=r(v1t,"ctrl"),v1t.forEach(t),omr=r(pke," \u2014 "),MQ=n(pke,"A",{href:!0});var F1t=s(MQ);rmr=r(F1t,"TFCTRLLMHeadModel"),F1t.forEach(t),tmr=r(pke," (CTRL model)"),pke.forEach(t),amr=i(Ce),QT=n(Ce,"LI",{});var uke=s(QT);v1e=n(uke,"STRONG",{});var T1t=s(v1e);nmr=r(T1t,"gpt2"),T1t.forEach(t),smr=r(uke," \u2014 "),EQ=n(uke,"A",{href:!0});var M1t=s(EQ);lmr=r(M1t,"TFGPT2LMHeadModel"),M1t.forEach(t),imr=r(uke," (OpenAI GPT-2 model)"),uke.forEach(t),dmr=i(Ce),WT=n(Ce,"LI",{});var _ke=s(WT);F1e=n(_ke,"STRONG",{});var E1t=s(F1e);cmr=r(E1t,"gptj"),E1t.forEach(t),fmr=r(_ke," \u2014 "),CQ=n(_ke,"A",{href:!0});var C1t=s(CQ);mmr=r(C1t,"TFGPTJForCausalLM"),C1t.forEach(t),gmr=r(_ke," (GPT-J model)"),_ke.forEach(t),hmr=i(Ce),HT=n(Ce,"LI",{});var bke=s(HT);T1e=n(bke,"STRONG",{});var w1t=s(T1e);pmr=r(w1t,"openai-gpt"),w1t.forEach(t),umr=r(bke," \u2014 "),wQ=n(bke,"A",{href:!0});var A1t=s(wQ);_mr=r(A1t,"TFOpenAIGPTLMHeadModel"),A1t.forEach(t),bmr=r(bke," (OpenAI GPT model)"),bke.forEach(t),vmr=i(Ce),UT=n(Ce,"LI",{});var vke=s(UT);M1e=n(vke,"STRONG",{});var y1t=s(M1e);Fmr=r(y1t,"rembert"),y1t.forEach(t),Tmr=r(vke," \u2014 "),AQ=n(vke,"A",{href:!0});var L1t=s(AQ);Mmr=r(L1t,"TFRemBertForCausalLM"),L1t.forEach(t),Emr=r(vke," (RemBERT model)"),vke.forEach(t),Cmr=i(Ce),JT=n(Ce,"LI",{});var Fke=s(JT);E1e=n(Fke,"STRONG",{});var x1t=s(E1e);wmr=r(x1t,"roberta"),x1t.forEach(t),Amr=r(Fke," \u2014 "),yQ=n(Fke,"A",{href:!0});var $1t=s(yQ);ymr=r($1t,"TFRobertaForCausalLM"),$1t.forEach(t),Lmr=r(Fke," (RoBERTa model)"),Fke.forEach(t),xmr=i(Ce),YT=n(Ce,"LI",{});var Tke=s(YT);C1e=n(Tke,"STRONG",{});var k1t=s(C1e);$mr=r(k1t,"roformer"),k1t.forEach(t),kmr=r(Tke," \u2014 "),LQ=n(Tke,"A",{href:!0});var S1t=s(LQ);Smr=r(S1t,"TFRoFormerForCausalLM"),S1t.forEach(t),Rmr=r(Tke," (RoFormer model)"),Tke.forEach(t),Pmr=i(Ce),KT=n(Ce,"LI",{});var Mke=s(KT);w1e=n(Mke,"STRONG",{});var R1t=s(w1e);Bmr=r(R1t,"transfo-xl"),R1t.forEach(t),Imr=r(Mke," \u2014 "),xQ=n(Mke,"A",{href:!0});var P1t=s(xQ);qmr=r(P1t,"TFTransfoXLLMHeadModel"),P1t.forEach(t),Nmr=r(Mke," (Transformer-XL model)"),Mke.forEach(t),jmr=i(Ce),ZT=n(Ce,"LI",{});var Eke=s(ZT);A1e=n(Eke,"STRONG",{});var B1t=s(A1e);Dmr=r(B1t,"xlm"),B1t.forEach(t),Gmr=r(Eke," \u2014 "),$Q=n(Eke,"A",{href:!0});var I1t=s($Q);Omr=r(I1t,"TFXLMWithLMHeadModel"),I1t.forEach(t),Vmr=r(Eke," (XLM model)"),Eke.forEach(t),Xmr=i(Ce),eM=n(Ce,"LI",{});var Cke=s(eM);y1e=n(Cke,"STRONG",{});var q1t=s(y1e);zmr=r(q1t,"xlnet"),q1t.forEach(t),Qmr=r(Cke," \u2014 "),kQ=n(Cke,"A",{href:!0});var N1t=s(kQ);Wmr=r(N1t,"TFXLNetLMHeadModel"),N1t.forEach(t),Hmr=r(Cke," (XLNet model)"),Cke.forEach(t),Ce.forEach(t),Umr=i(hl),T(oM.$$.fragment,hl),hl.forEach(t),gl.forEach(t),QIe=i(f),Qd=n(f,"H2",{class:!0});var KNe=s(Qd);rM=n(KNe,"A",{id:!0,class:!0,href:!0});var j1t=s(rM);L1e=n(j1t,"SPAN",{});var D1t=s(L1e);T(zL.$$.fragment,D1t),D1t.forEach(t),j1t.forEach(t),Jmr=i(KNe),x1e=n(KNe,"SPAN",{});var G1t=s(x1e);Ymr=r(G1t,"TFAutoModelForImageClassification"),G1t.forEach(t),KNe.forEach(t),WIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(QL.$$.fragment,pl),Kmr=i(pl),Wd=n(pl,"P",{});var tZ=s(Wd);Zmr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=n(tZ,"A",{href:!0});var O1t=s(SQ);egr=r(O1t,"from_pretrained()"),O1t.forEach(t),ogr=r(tZ," class method or the "),RQ=n(tZ,"A",{href:!0});var V1t=s(RQ);rgr=r(V1t,"from_config()"),V1t.forEach(t),tgr=r(tZ,` class
method.`),tZ.forEach(t),agr=i(pl),WL=n(pl,"P",{});var ZNe=s(WL);ngr=r(ZNe,"This class cannot be instantiated directly using "),$1e=n(ZNe,"CODE",{});var X1t=s($1e);sgr=r(X1t,"__init__()"),X1t.forEach(t),lgr=r(ZNe," (throws an error)."),ZNe.forEach(t),igr=i(pl),Lt=n(pl,"DIV",{class:!0});var ZA=s(Lt);T(HL.$$.fragment,ZA),dgr=i(ZA),k1e=n(ZA,"P",{});var z1t=s(k1e);cgr=r(z1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z1t.forEach(t),fgr=i(ZA),Hd=n(ZA,"P",{});var aZ=s(Hd);mgr=r(aZ,`Note:
Loading a model from its configuration file does `),S1e=n(aZ,"STRONG",{});var Q1t=s(S1e);ggr=r(Q1t,"not"),Q1t.forEach(t),hgr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(aZ,"A",{href:!0});var W1t=s(PQ);pgr=r(W1t,"from_pretrained()"),W1t.forEach(t),ugr=r(aZ," to load the model weights."),aZ.forEach(t),_gr=i(ZA),T(tM.$$.fragment,ZA),ZA.forEach(t),bgr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(UL.$$.fragment,ul),vgr=i(ul),R1e=n(ul,"P",{});var H1t=s(R1e);Fgr=r(H1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H1t.forEach(t),Tgr=i(ul),on=n(ul,"P",{});var e0=s(on);Mgr=r(e0,"The model class to instantiate is selected based on the "),P1e=n(e0,"CODE",{});var U1t=s(P1e);Egr=r(U1t,"model_type"),U1t.forEach(t),Cgr=r(e0,` property of the config object (either
passed as an argument or loaded from `),B1e=n(e0,"CODE",{});var J1t=s(B1e);wgr=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),Agr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(e0,"CODE",{});var Y1t=s(I1e);ygr=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),Lgr=r(e0,":"),e0.forEach(t),xgr=i(ul),Ud=n(ul,"UL",{});var nZ=s(Ud);aM=n(nZ,"LI",{});var wke=s(aM);q1e=n(wke,"STRONG",{});var K1t=s(q1e);$gr=r(K1t,"convnext"),K1t.forEach(t),kgr=r(wke," \u2014 "),BQ=n(wke,"A",{href:!0});var Z1t=s(BQ);Sgr=r(Z1t,"TFConvNextForImageClassification"),Z1t.forEach(t),Rgr=r(wke," (ConvNext model)"),wke.forEach(t),Pgr=i(nZ),nM=n(nZ,"LI",{});var Ake=s(nM);N1e=n(Ake,"STRONG",{});var e7t=s(N1e);Bgr=r(e7t,"data2vec-vision"),e7t.forEach(t),Igr=r(Ake," \u2014 "),IQ=n(Ake,"A",{href:!0});var o7t=s(IQ);qgr=r(o7t,"TFData2VecVisionForImageClassification"),o7t.forEach(t),Ngr=r(Ake," (Data2VecVision model)"),Ake.forEach(t),jgr=i(nZ),sM=n(nZ,"LI",{});var yke=s(sM);j1e=n(yke,"STRONG",{});var r7t=s(j1e);Dgr=r(r7t,"vit"),r7t.forEach(t),Ggr=r(yke," \u2014 "),qQ=n(yke,"A",{href:!0});var t7t=s(qQ);Ogr=r(t7t,"TFViTForImageClassification"),t7t.forEach(t),Vgr=r(yke," (ViT model)"),yke.forEach(t),nZ.forEach(t),Xgr=i(ul),T(lM.$$.fragment,ul),ul.forEach(t),pl.forEach(t),HIe=i(f),Jd=n(f,"H2",{class:!0});var eje=s(Jd);iM=n(eje,"A",{id:!0,class:!0,href:!0});var a7t=s(iM);D1e=n(a7t,"SPAN",{});var n7t=s(D1e);T(JL.$$.fragment,n7t),n7t.forEach(t),a7t.forEach(t),zgr=i(eje),G1e=n(eje,"SPAN",{});var s7t=s(G1e);Qgr=r(s7t,"TFAutoModelForMaskedLM"),s7t.forEach(t),eje.forEach(t),UIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(YL.$$.fragment,_l),Wgr=i(_l),Yd=n(_l,"P",{});var sZ=s(Yd);Hgr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NQ=n(sZ,"A",{href:!0});var l7t=s(NQ);Ugr=r(l7t,"from_pretrained()"),l7t.forEach(t),Jgr=r(sZ," class method or the "),jQ=n(sZ,"A",{href:!0});var i7t=s(jQ);Ygr=r(i7t,"from_config()"),i7t.forEach(t),Kgr=r(sZ,` class
method.`),sZ.forEach(t),Zgr=i(_l),KL=n(_l,"P",{});var oje=s(KL);ehr=r(oje,"This class cannot be instantiated directly using "),O1e=n(oje,"CODE",{});var d7t=s(O1e);ohr=r(d7t,"__init__()"),d7t.forEach(t),rhr=r(oje," (throws an error)."),oje.forEach(t),thr=i(_l),xt=n(_l,"DIV",{class:!0});var o0=s(xt);T(ZL.$$.fragment,o0),ahr=i(o0),V1e=n(o0,"P",{});var c7t=s(V1e);nhr=r(c7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c7t.forEach(t),shr=i(o0),Kd=n(o0,"P",{});var lZ=s(Kd);lhr=r(lZ,`Note:
Loading a model from its configuration file does `),X1e=n(lZ,"STRONG",{});var f7t=s(X1e);ihr=r(f7t,"not"),f7t.forEach(t),dhr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(lZ,"A",{href:!0});var m7t=s(DQ);chr=r(m7t,"from_pretrained()"),m7t.forEach(t),fhr=r(lZ," to load the model weights."),lZ.forEach(t),mhr=i(o0),T(dM.$$.fragment,o0),o0.forEach(t),ghr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(e8.$$.fragment,bl),hhr=i(bl),z1e=n(bl,"P",{});var g7t=s(z1e);phr=r(g7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g7t.forEach(t),uhr=i(bl),rn=n(bl,"P",{});var r0=s(rn);_hr=r(r0,"The model class to instantiate is selected based on the "),Q1e=n(r0,"CODE",{});var h7t=s(Q1e);bhr=r(h7t,"model_type"),h7t.forEach(t),vhr=r(r0,` property of the config object (either
passed as an argument or loaded from `),W1e=n(r0,"CODE",{});var p7t=s(W1e);Fhr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),Thr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(r0,"CODE",{});var u7t=s(H1e);Mhr=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),Ehr=r(r0,":"),r0.forEach(t),Chr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);cM=n(fe,"LI",{});var Lke=s(cM);U1e=n(Lke,"STRONG",{});var _7t=s(U1e);whr=r(_7t,"albert"),_7t.forEach(t),Ahr=r(Lke," \u2014 "),GQ=n(Lke,"A",{href:!0});var b7t=s(GQ);yhr=r(b7t,"TFAlbertForMaskedLM"),b7t.forEach(t),Lhr=r(Lke," (ALBERT model)"),Lke.forEach(t),xhr=i(fe),fM=n(fe,"LI",{});var xke=s(fM);J1e=n(xke,"STRONG",{});var v7t=s(J1e);$hr=r(v7t,"bert"),v7t.forEach(t),khr=r(xke," \u2014 "),OQ=n(xke,"A",{href:!0});var F7t=s(OQ);Shr=r(F7t,"TFBertForMaskedLM"),F7t.forEach(t),Rhr=r(xke," (BERT model)"),xke.forEach(t),Phr=i(fe),mM=n(fe,"LI",{});var $ke=s(mM);Y1e=n($ke,"STRONG",{});var T7t=s(Y1e);Bhr=r(T7t,"camembert"),T7t.forEach(t),Ihr=r($ke," \u2014 "),VQ=n($ke,"A",{href:!0});var M7t=s(VQ);qhr=r(M7t,"TFCamembertForMaskedLM"),M7t.forEach(t),Nhr=r($ke," (CamemBERT model)"),$ke.forEach(t),jhr=i(fe),gM=n(fe,"LI",{});var kke=s(gM);K1e=n(kke,"STRONG",{});var E7t=s(K1e);Dhr=r(E7t,"convbert"),E7t.forEach(t),Ghr=r(kke," \u2014 "),XQ=n(kke,"A",{href:!0});var C7t=s(XQ);Ohr=r(C7t,"TFConvBertForMaskedLM"),C7t.forEach(t),Vhr=r(kke," (ConvBERT model)"),kke.forEach(t),Xhr=i(fe),hM=n(fe,"LI",{});var Ske=s(hM);Z1e=n(Ske,"STRONG",{});var w7t=s(Z1e);zhr=r(w7t,"deberta"),w7t.forEach(t),Qhr=r(Ske," \u2014 "),zQ=n(Ske,"A",{href:!0});var A7t=s(zQ);Whr=r(A7t,"TFDebertaForMaskedLM"),A7t.forEach(t),Hhr=r(Ske," (DeBERTa model)"),Ske.forEach(t),Uhr=i(fe),pM=n(fe,"LI",{});var Rke=s(pM);e7e=n(Rke,"STRONG",{});var y7t=s(e7e);Jhr=r(y7t,"deberta-v2"),y7t.forEach(t),Yhr=r(Rke," \u2014 "),QQ=n(Rke,"A",{href:!0});var L7t=s(QQ);Khr=r(L7t,"TFDebertaV2ForMaskedLM"),L7t.forEach(t),Zhr=r(Rke," (DeBERTa-v2 model)"),Rke.forEach(t),epr=i(fe),uM=n(fe,"LI",{});var Pke=s(uM);o7e=n(Pke,"STRONG",{});var x7t=s(o7e);opr=r(x7t,"distilbert"),x7t.forEach(t),rpr=r(Pke," \u2014 "),WQ=n(Pke,"A",{href:!0});var $7t=s(WQ);tpr=r($7t,"TFDistilBertForMaskedLM"),$7t.forEach(t),apr=r(Pke," (DistilBERT model)"),Pke.forEach(t),npr=i(fe),_M=n(fe,"LI",{});var Bke=s(_M);r7e=n(Bke,"STRONG",{});var k7t=s(r7e);spr=r(k7t,"electra"),k7t.forEach(t),lpr=r(Bke," \u2014 "),HQ=n(Bke,"A",{href:!0});var S7t=s(HQ);ipr=r(S7t,"TFElectraForMaskedLM"),S7t.forEach(t),dpr=r(Bke," (ELECTRA model)"),Bke.forEach(t),cpr=i(fe),bM=n(fe,"LI",{});var Ike=s(bM);t7e=n(Ike,"STRONG",{});var R7t=s(t7e);fpr=r(R7t,"flaubert"),R7t.forEach(t),mpr=r(Ike," \u2014 "),UQ=n(Ike,"A",{href:!0});var P7t=s(UQ);gpr=r(P7t,"TFFlaubertWithLMHeadModel"),P7t.forEach(t),hpr=r(Ike," (FlauBERT model)"),Ike.forEach(t),ppr=i(fe),vM=n(fe,"LI",{});var qke=s(vM);a7e=n(qke,"STRONG",{});var B7t=s(a7e);upr=r(B7t,"funnel"),B7t.forEach(t),_pr=r(qke," \u2014 "),JQ=n(qke,"A",{href:!0});var I7t=s(JQ);bpr=r(I7t,"TFFunnelForMaskedLM"),I7t.forEach(t),vpr=r(qke," (Funnel Transformer model)"),qke.forEach(t),Fpr=i(fe),FM=n(fe,"LI",{});var Nke=s(FM);n7e=n(Nke,"STRONG",{});var q7t=s(n7e);Tpr=r(q7t,"layoutlm"),q7t.forEach(t),Mpr=r(Nke," \u2014 "),YQ=n(Nke,"A",{href:!0});var N7t=s(YQ);Epr=r(N7t,"TFLayoutLMForMaskedLM"),N7t.forEach(t),Cpr=r(Nke," (LayoutLM model)"),Nke.forEach(t),wpr=i(fe),TM=n(fe,"LI",{});var jke=s(TM);s7e=n(jke,"STRONG",{});var j7t=s(s7e);Apr=r(j7t,"longformer"),j7t.forEach(t),ypr=r(jke," \u2014 "),KQ=n(jke,"A",{href:!0});var D7t=s(KQ);Lpr=r(D7t,"TFLongformerForMaskedLM"),D7t.forEach(t),xpr=r(jke," (Longformer model)"),jke.forEach(t),$pr=i(fe),MM=n(fe,"LI",{});var Dke=s(MM);l7e=n(Dke,"STRONG",{});var G7t=s(l7e);kpr=r(G7t,"mobilebert"),G7t.forEach(t),Spr=r(Dke," \u2014 "),ZQ=n(Dke,"A",{href:!0});var O7t=s(ZQ);Rpr=r(O7t,"TFMobileBertForMaskedLM"),O7t.forEach(t),Ppr=r(Dke," (MobileBERT model)"),Dke.forEach(t),Bpr=i(fe),EM=n(fe,"LI",{});var Gke=s(EM);i7e=n(Gke,"STRONG",{});var V7t=s(i7e);Ipr=r(V7t,"mpnet"),V7t.forEach(t),qpr=r(Gke," \u2014 "),eW=n(Gke,"A",{href:!0});var X7t=s(eW);Npr=r(X7t,"TFMPNetForMaskedLM"),X7t.forEach(t),jpr=r(Gke," (MPNet model)"),Gke.forEach(t),Dpr=i(fe),CM=n(fe,"LI",{});var Oke=s(CM);d7e=n(Oke,"STRONG",{});var z7t=s(d7e);Gpr=r(z7t,"rembert"),z7t.forEach(t),Opr=r(Oke," \u2014 "),oW=n(Oke,"A",{href:!0});var Q7t=s(oW);Vpr=r(Q7t,"TFRemBertForMaskedLM"),Q7t.forEach(t),Xpr=r(Oke," (RemBERT model)"),Oke.forEach(t),zpr=i(fe),wM=n(fe,"LI",{});var Vke=s(wM);c7e=n(Vke,"STRONG",{});var W7t=s(c7e);Qpr=r(W7t,"roberta"),W7t.forEach(t),Wpr=r(Vke," \u2014 "),rW=n(Vke,"A",{href:!0});var H7t=s(rW);Hpr=r(H7t,"TFRobertaForMaskedLM"),H7t.forEach(t),Upr=r(Vke," (RoBERTa model)"),Vke.forEach(t),Jpr=i(fe),AM=n(fe,"LI",{});var Xke=s(AM);f7e=n(Xke,"STRONG",{});var U7t=s(f7e);Ypr=r(U7t,"roformer"),U7t.forEach(t),Kpr=r(Xke," \u2014 "),tW=n(Xke,"A",{href:!0});var J7t=s(tW);Zpr=r(J7t,"TFRoFormerForMaskedLM"),J7t.forEach(t),eur=r(Xke," (RoFormer model)"),Xke.forEach(t),our=i(fe),yM=n(fe,"LI",{});var zke=s(yM);m7e=n(zke,"STRONG",{});var Y7t=s(m7e);rur=r(Y7t,"tapas"),Y7t.forEach(t),tur=r(zke," \u2014 "),aW=n(zke,"A",{href:!0});var K7t=s(aW);aur=r(K7t,"TFTapasForMaskedLM"),K7t.forEach(t),nur=r(zke," (TAPAS model)"),zke.forEach(t),sur=i(fe),LM=n(fe,"LI",{});var Qke=s(LM);g7e=n(Qke,"STRONG",{});var Z7t=s(g7e);lur=r(Z7t,"xlm"),Z7t.forEach(t),iur=r(Qke," \u2014 "),nW=n(Qke,"A",{href:!0});var ebt=s(nW);dur=r(ebt,"TFXLMWithLMHeadModel"),ebt.forEach(t),cur=r(Qke," (XLM model)"),Qke.forEach(t),fur=i(fe),xM=n(fe,"LI",{});var Wke=s(xM);h7e=n(Wke,"STRONG",{});var obt=s(h7e);mur=r(obt,"xlm-roberta"),obt.forEach(t),gur=r(Wke," \u2014 "),sW=n(Wke,"A",{href:!0});var rbt=s(sW);hur=r(rbt,"TFXLMRobertaForMaskedLM"),rbt.forEach(t),pur=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),fe.forEach(t),uur=i(bl),T($M.$$.fragment,bl),bl.forEach(t),_l.forEach(t),JIe=i(f),Zd=n(f,"H2",{class:!0});var rje=s(Zd);kM=n(rje,"A",{id:!0,class:!0,href:!0});var tbt=s(kM);p7e=n(tbt,"SPAN",{});var abt=s(p7e);T(o8.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),_ur=i(rje),u7e=n(rje,"SPAN",{});var nbt=s(u7e);bur=r(nbt,"TFAutoModelForSeq2SeqLM"),nbt.forEach(t),rje.forEach(t),YIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(r8.$$.fragment,vl),vur=i(vl),ec=n(vl,"P",{});var iZ=s(ec);Fur=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lW=n(iZ,"A",{href:!0});var sbt=s(lW);Tur=r(sbt,"from_pretrained()"),sbt.forEach(t),Mur=r(iZ," class method or the "),iW=n(iZ,"A",{href:!0});var lbt=s(iW);Eur=r(lbt,"from_config()"),lbt.forEach(t),Cur=r(iZ,` class
method.`),iZ.forEach(t),wur=i(vl),t8=n(vl,"P",{});var tje=s(t8);Aur=r(tje,"This class cannot be instantiated directly using "),_7e=n(tje,"CODE",{});var ibt=s(_7e);yur=r(ibt,"__init__()"),ibt.forEach(t),Lur=r(tje," (throws an error)."),tje.forEach(t),xur=i(vl),$t=n(vl,"DIV",{class:!0});var t0=s($t);T(a8.$$.fragment,t0),$ur=i(t0),b7e=n(t0,"P",{});var dbt=s(b7e);kur=r(dbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dbt.forEach(t),Sur=i(t0),oc=n(t0,"P",{});var dZ=s(oc);Rur=r(dZ,`Note:
Loading a model from its configuration file does `),v7e=n(dZ,"STRONG",{});var cbt=s(v7e);Pur=r(cbt,"not"),cbt.forEach(t),Bur=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(dZ,"A",{href:!0});var fbt=s(dW);Iur=r(fbt,"from_pretrained()"),fbt.forEach(t),qur=r(dZ," to load the model weights."),dZ.forEach(t),Nur=i(t0),T(SM.$$.fragment,t0),t0.forEach(t),jur=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(n8.$$.fragment,Fl),Dur=i(Fl),F7e=n(Fl,"P",{});var mbt=s(F7e);Gur=r(mbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mbt.forEach(t),Our=i(Fl),tn=n(Fl,"P",{});var a0=s(tn);Vur=r(a0,"The model class to instantiate is selected based on the "),T7e=n(a0,"CODE",{});var gbt=s(T7e);Xur=r(gbt,"model_type"),gbt.forEach(t),zur=r(a0,` property of the config object (either
passed as an argument or loaded from `),M7e=n(a0,"CODE",{});var hbt=s(M7e);Qur=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),Wur=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(a0,"CODE",{});var pbt=s(E7e);Hur=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),Uur=r(a0,":"),a0.forEach(t),Jur=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);RM=n(Re,"LI",{});var Hke=s(RM);C7e=n(Hke,"STRONG",{});var ubt=s(C7e);Yur=r(ubt,"bart"),ubt.forEach(t),Kur=r(Hke," \u2014 "),cW=n(Hke,"A",{href:!0});var _bt=s(cW);Zur=r(_bt,"TFBartForConditionalGeneration"),_bt.forEach(t),e_r=r(Hke," (BART model)"),Hke.forEach(t),o_r=i(Re),PM=n(Re,"LI",{});var Uke=s(PM);w7e=n(Uke,"STRONG",{});var bbt=s(w7e);r_r=r(bbt,"blenderbot"),bbt.forEach(t),t_r=r(Uke," \u2014 "),fW=n(Uke,"A",{href:!0});var vbt=s(fW);a_r=r(vbt,"TFBlenderbotForConditionalGeneration"),vbt.forEach(t),n_r=r(Uke," (Blenderbot model)"),Uke.forEach(t),s_r=i(Re),BM=n(Re,"LI",{});var Jke=s(BM);A7e=n(Jke,"STRONG",{});var Fbt=s(A7e);l_r=r(Fbt,"blenderbot-small"),Fbt.forEach(t),i_r=r(Jke," \u2014 "),mW=n(Jke,"A",{href:!0});var Tbt=s(mW);d_r=r(Tbt,"TFBlenderbotSmallForConditionalGeneration"),Tbt.forEach(t),c_r=r(Jke," (BlenderbotSmall model)"),Jke.forEach(t),f_r=i(Re),IM=n(Re,"LI",{});var Yke=s(IM);y7e=n(Yke,"STRONG",{});var Mbt=s(y7e);m_r=r(Mbt,"encoder-decoder"),Mbt.forEach(t),g_r=r(Yke," \u2014 "),gW=n(Yke,"A",{href:!0});var Ebt=s(gW);h_r=r(Ebt,"TFEncoderDecoderModel"),Ebt.forEach(t),p_r=r(Yke," (Encoder decoder model)"),Yke.forEach(t),u_r=i(Re),qM=n(Re,"LI",{});var Kke=s(qM);L7e=n(Kke,"STRONG",{});var Cbt=s(L7e);__r=r(Cbt,"led"),Cbt.forEach(t),b_r=r(Kke," \u2014 "),hW=n(Kke,"A",{href:!0});var wbt=s(hW);v_r=r(wbt,"TFLEDForConditionalGeneration"),wbt.forEach(t),F_r=r(Kke," (LED model)"),Kke.forEach(t),T_r=i(Re),NM=n(Re,"LI",{});var Zke=s(NM);x7e=n(Zke,"STRONG",{});var Abt=s(x7e);M_r=r(Abt,"marian"),Abt.forEach(t),E_r=r(Zke," \u2014 "),pW=n(Zke,"A",{href:!0});var ybt=s(pW);C_r=r(ybt,"TFMarianMTModel"),ybt.forEach(t),w_r=r(Zke," (Marian model)"),Zke.forEach(t),A_r=i(Re),jM=n(Re,"LI",{});var eSe=s(jM);$7e=n(eSe,"STRONG",{});var Lbt=s($7e);y_r=r(Lbt,"mbart"),Lbt.forEach(t),L_r=r(eSe," \u2014 "),uW=n(eSe,"A",{href:!0});var xbt=s(uW);x_r=r(xbt,"TFMBartForConditionalGeneration"),xbt.forEach(t),$_r=r(eSe," (mBART model)"),eSe.forEach(t),k_r=i(Re),DM=n(Re,"LI",{});var oSe=s(DM);k7e=n(oSe,"STRONG",{});var $bt=s(k7e);S_r=r($bt,"mt5"),$bt.forEach(t),R_r=r(oSe," \u2014 "),_W=n(oSe,"A",{href:!0});var kbt=s(_W);P_r=r(kbt,"TFMT5ForConditionalGeneration"),kbt.forEach(t),B_r=r(oSe," (mT5 model)"),oSe.forEach(t),I_r=i(Re),GM=n(Re,"LI",{});var rSe=s(GM);S7e=n(rSe,"STRONG",{});var Sbt=s(S7e);q_r=r(Sbt,"pegasus"),Sbt.forEach(t),N_r=r(rSe," \u2014 "),bW=n(rSe,"A",{href:!0});var Rbt=s(bW);j_r=r(Rbt,"TFPegasusForConditionalGeneration"),Rbt.forEach(t),D_r=r(rSe," (Pegasus model)"),rSe.forEach(t),G_r=i(Re),OM=n(Re,"LI",{});var tSe=s(OM);R7e=n(tSe,"STRONG",{});var Pbt=s(R7e);O_r=r(Pbt,"t5"),Pbt.forEach(t),V_r=r(tSe," \u2014 "),vW=n(tSe,"A",{href:!0});var Bbt=s(vW);X_r=r(Bbt,"TFT5ForConditionalGeneration"),Bbt.forEach(t),z_r=r(tSe," (T5 model)"),tSe.forEach(t),Re.forEach(t),Q_r=i(Fl),T(VM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),KIe=i(f),rc=n(f,"H2",{class:!0});var aje=s(rc);XM=n(aje,"A",{id:!0,class:!0,href:!0});var Ibt=s(XM);P7e=n(Ibt,"SPAN",{});var qbt=s(P7e);T(s8.$$.fragment,qbt),qbt.forEach(t),Ibt.forEach(t),W_r=i(aje),B7e=n(aje,"SPAN",{});var Nbt=s(B7e);H_r=r(Nbt,"TFAutoModelForSequenceClassification"),Nbt.forEach(t),aje.forEach(t),ZIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(l8.$$.fragment,Tl),U_r=i(Tl),tc=n(Tl,"P",{});var cZ=s(tc);J_r=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FW=n(cZ,"A",{href:!0});var jbt=s(FW);Y_r=r(jbt,"from_pretrained()"),jbt.forEach(t),K_r=r(cZ," class method or the "),TW=n(cZ,"A",{href:!0});var Dbt=s(TW);Z_r=r(Dbt,"from_config()"),Dbt.forEach(t),e2r=r(cZ,` class
method.`),cZ.forEach(t),o2r=i(Tl),i8=n(Tl,"P",{});var nje=s(i8);r2r=r(nje,"This class cannot be instantiated directly using "),I7e=n(nje,"CODE",{});var Gbt=s(I7e);t2r=r(Gbt,"__init__()"),Gbt.forEach(t),a2r=r(nje," (throws an error)."),nje.forEach(t),n2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var n0=s(kt);T(d8.$$.fragment,n0),s2r=i(n0),q7e=n(n0,"P",{});var Obt=s(q7e);l2r=r(Obt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Obt.forEach(t),i2r=i(n0),ac=n(n0,"P",{});var fZ=s(ac);d2r=r(fZ,`Note:
Loading a model from its configuration file does `),N7e=n(fZ,"STRONG",{});var Vbt=s(N7e);c2r=r(Vbt,"not"),Vbt.forEach(t),f2r=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(fZ,"A",{href:!0});var Xbt=s(MW);m2r=r(Xbt,"from_pretrained()"),Xbt.forEach(t),g2r=r(fZ," to load the model weights."),fZ.forEach(t),h2r=i(n0),T(zM.$$.fragment,n0),n0.forEach(t),p2r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(c8.$$.fragment,Ml),u2r=i(Ml),j7e=n(Ml,"P",{});var zbt=s(j7e);_2r=r(zbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zbt.forEach(t),b2r=i(Ml),an=n(Ml,"P",{});var s0=s(an);v2r=r(s0,"The model class to instantiate is selected based on the "),D7e=n(s0,"CODE",{});var Qbt=s(D7e);F2r=r(Qbt,"model_type"),Qbt.forEach(t),T2r=r(s0,` property of the config object (either
passed as an argument or loaded from `),G7e=n(s0,"CODE",{});var Wbt=s(G7e);M2r=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),E2r=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(s0,"CODE",{});var Hbt=s(O7e);C2r=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),w2r=r(s0,":"),s0.forEach(t),A2r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);QM=n(te,"LI",{});var aSe=s(QM);V7e=n(aSe,"STRONG",{});var Ubt=s(V7e);y2r=r(Ubt,"albert"),Ubt.forEach(t),L2r=r(aSe," \u2014 "),EW=n(aSe,"A",{href:!0});var Jbt=s(EW);x2r=r(Jbt,"TFAlbertForSequenceClassification"),Jbt.forEach(t),$2r=r(aSe," (ALBERT model)"),aSe.forEach(t),k2r=i(te),WM=n(te,"LI",{});var nSe=s(WM);X7e=n(nSe,"STRONG",{});var Ybt=s(X7e);S2r=r(Ybt,"bert"),Ybt.forEach(t),R2r=r(nSe," \u2014 "),CW=n(nSe,"A",{href:!0});var Kbt=s(CW);P2r=r(Kbt,"TFBertForSequenceClassification"),Kbt.forEach(t),B2r=r(nSe," (BERT model)"),nSe.forEach(t),I2r=i(te),HM=n(te,"LI",{});var sSe=s(HM);z7e=n(sSe,"STRONG",{});var Zbt=s(z7e);q2r=r(Zbt,"camembert"),Zbt.forEach(t),N2r=r(sSe," \u2014 "),wW=n(sSe,"A",{href:!0});var e4t=s(wW);j2r=r(e4t,"TFCamembertForSequenceClassification"),e4t.forEach(t),D2r=r(sSe," (CamemBERT model)"),sSe.forEach(t),G2r=i(te),UM=n(te,"LI",{});var lSe=s(UM);Q7e=n(lSe,"STRONG",{});var o4t=s(Q7e);O2r=r(o4t,"convbert"),o4t.forEach(t),V2r=r(lSe," \u2014 "),AW=n(lSe,"A",{href:!0});var r4t=s(AW);X2r=r(r4t,"TFConvBertForSequenceClassification"),r4t.forEach(t),z2r=r(lSe," (ConvBERT model)"),lSe.forEach(t),Q2r=i(te),JM=n(te,"LI",{});var iSe=s(JM);W7e=n(iSe,"STRONG",{});var t4t=s(W7e);W2r=r(t4t,"ctrl"),t4t.forEach(t),H2r=r(iSe," \u2014 "),yW=n(iSe,"A",{href:!0});var a4t=s(yW);U2r=r(a4t,"TFCTRLForSequenceClassification"),a4t.forEach(t),J2r=r(iSe," (CTRL model)"),iSe.forEach(t),Y2r=i(te),YM=n(te,"LI",{});var dSe=s(YM);H7e=n(dSe,"STRONG",{});var n4t=s(H7e);K2r=r(n4t,"deberta"),n4t.forEach(t),Z2r=r(dSe," \u2014 "),LW=n(dSe,"A",{href:!0});var s4t=s(LW);e1r=r(s4t,"TFDebertaForSequenceClassification"),s4t.forEach(t),o1r=r(dSe," (DeBERTa model)"),dSe.forEach(t),r1r=i(te),KM=n(te,"LI",{});var cSe=s(KM);U7e=n(cSe,"STRONG",{});var l4t=s(U7e);t1r=r(l4t,"deberta-v2"),l4t.forEach(t),a1r=r(cSe," \u2014 "),xW=n(cSe,"A",{href:!0});var i4t=s(xW);n1r=r(i4t,"TFDebertaV2ForSequenceClassification"),i4t.forEach(t),s1r=r(cSe," (DeBERTa-v2 model)"),cSe.forEach(t),l1r=i(te),ZM=n(te,"LI",{});var fSe=s(ZM);J7e=n(fSe,"STRONG",{});var d4t=s(J7e);i1r=r(d4t,"distilbert"),d4t.forEach(t),d1r=r(fSe," \u2014 "),$W=n(fSe,"A",{href:!0});var c4t=s($W);c1r=r(c4t,"TFDistilBertForSequenceClassification"),c4t.forEach(t),f1r=r(fSe," (DistilBERT model)"),fSe.forEach(t),m1r=i(te),eE=n(te,"LI",{});var mSe=s(eE);Y7e=n(mSe,"STRONG",{});var f4t=s(Y7e);g1r=r(f4t,"electra"),f4t.forEach(t),h1r=r(mSe," \u2014 "),kW=n(mSe,"A",{href:!0});var m4t=s(kW);p1r=r(m4t,"TFElectraForSequenceClassification"),m4t.forEach(t),u1r=r(mSe," (ELECTRA model)"),mSe.forEach(t),_1r=i(te),oE=n(te,"LI",{});var gSe=s(oE);K7e=n(gSe,"STRONG",{});var g4t=s(K7e);b1r=r(g4t,"flaubert"),g4t.forEach(t),v1r=r(gSe," \u2014 "),SW=n(gSe,"A",{href:!0});var h4t=s(SW);F1r=r(h4t,"TFFlaubertForSequenceClassification"),h4t.forEach(t),T1r=r(gSe," (FlauBERT model)"),gSe.forEach(t),M1r=i(te),rE=n(te,"LI",{});var hSe=s(rE);Z7e=n(hSe,"STRONG",{});var p4t=s(Z7e);E1r=r(p4t,"funnel"),p4t.forEach(t),C1r=r(hSe," \u2014 "),RW=n(hSe,"A",{href:!0});var u4t=s(RW);w1r=r(u4t,"TFFunnelForSequenceClassification"),u4t.forEach(t),A1r=r(hSe," (Funnel Transformer model)"),hSe.forEach(t),y1r=i(te),tE=n(te,"LI",{});var pSe=s(tE);ebe=n(pSe,"STRONG",{});var _4t=s(ebe);L1r=r(_4t,"gpt2"),_4t.forEach(t),x1r=r(pSe," \u2014 "),PW=n(pSe,"A",{href:!0});var b4t=s(PW);$1r=r(b4t,"TFGPT2ForSequenceClassification"),b4t.forEach(t),k1r=r(pSe," (OpenAI GPT-2 model)"),pSe.forEach(t),S1r=i(te),aE=n(te,"LI",{});var uSe=s(aE);obe=n(uSe,"STRONG",{});var v4t=s(obe);R1r=r(v4t,"gptj"),v4t.forEach(t),P1r=r(uSe," \u2014 "),BW=n(uSe,"A",{href:!0});var F4t=s(BW);B1r=r(F4t,"TFGPTJForSequenceClassification"),F4t.forEach(t),I1r=r(uSe," (GPT-J model)"),uSe.forEach(t),q1r=i(te),nE=n(te,"LI",{});var _Se=s(nE);rbe=n(_Se,"STRONG",{});var T4t=s(rbe);N1r=r(T4t,"layoutlm"),T4t.forEach(t),j1r=r(_Se," \u2014 "),IW=n(_Se,"A",{href:!0});var M4t=s(IW);D1r=r(M4t,"TFLayoutLMForSequenceClassification"),M4t.forEach(t),G1r=r(_Se," (LayoutLM model)"),_Se.forEach(t),O1r=i(te),sE=n(te,"LI",{});var bSe=s(sE);tbe=n(bSe,"STRONG",{});var E4t=s(tbe);V1r=r(E4t,"longformer"),E4t.forEach(t),X1r=r(bSe," \u2014 "),qW=n(bSe,"A",{href:!0});var C4t=s(qW);z1r=r(C4t,"TFLongformerForSequenceClassification"),C4t.forEach(t),Q1r=r(bSe," (Longformer model)"),bSe.forEach(t),W1r=i(te),lE=n(te,"LI",{});var vSe=s(lE);abe=n(vSe,"STRONG",{});var w4t=s(abe);H1r=r(w4t,"mobilebert"),w4t.forEach(t),U1r=r(vSe," \u2014 "),NW=n(vSe,"A",{href:!0});var A4t=s(NW);J1r=r(A4t,"TFMobileBertForSequenceClassification"),A4t.forEach(t),Y1r=r(vSe," (MobileBERT model)"),vSe.forEach(t),K1r=i(te),iE=n(te,"LI",{});var FSe=s(iE);nbe=n(FSe,"STRONG",{});var y4t=s(nbe);Z1r=r(y4t,"mpnet"),y4t.forEach(t),e7r=r(FSe," \u2014 "),jW=n(FSe,"A",{href:!0});var L4t=s(jW);o7r=r(L4t,"TFMPNetForSequenceClassification"),L4t.forEach(t),r7r=r(FSe," (MPNet model)"),FSe.forEach(t),t7r=i(te),dE=n(te,"LI",{});var TSe=s(dE);sbe=n(TSe,"STRONG",{});var x4t=s(sbe);a7r=r(x4t,"openai-gpt"),x4t.forEach(t),n7r=r(TSe," \u2014 "),DW=n(TSe,"A",{href:!0});var $4t=s(DW);s7r=r($4t,"TFOpenAIGPTForSequenceClassification"),$4t.forEach(t),l7r=r(TSe," (OpenAI GPT model)"),TSe.forEach(t),i7r=i(te),cE=n(te,"LI",{});var MSe=s(cE);lbe=n(MSe,"STRONG",{});var k4t=s(lbe);d7r=r(k4t,"rembert"),k4t.forEach(t),c7r=r(MSe," \u2014 "),GW=n(MSe,"A",{href:!0});var S4t=s(GW);f7r=r(S4t,"TFRemBertForSequenceClassification"),S4t.forEach(t),m7r=r(MSe," (RemBERT model)"),MSe.forEach(t),g7r=i(te),fE=n(te,"LI",{});var ESe=s(fE);ibe=n(ESe,"STRONG",{});var R4t=s(ibe);h7r=r(R4t,"roberta"),R4t.forEach(t),p7r=r(ESe," \u2014 "),OW=n(ESe,"A",{href:!0});var P4t=s(OW);u7r=r(P4t,"TFRobertaForSequenceClassification"),P4t.forEach(t),_7r=r(ESe," (RoBERTa model)"),ESe.forEach(t),b7r=i(te),mE=n(te,"LI",{});var CSe=s(mE);dbe=n(CSe,"STRONG",{});var B4t=s(dbe);v7r=r(B4t,"roformer"),B4t.forEach(t),F7r=r(CSe," \u2014 "),VW=n(CSe,"A",{href:!0});var I4t=s(VW);T7r=r(I4t,"TFRoFormerForSequenceClassification"),I4t.forEach(t),M7r=r(CSe," (RoFormer model)"),CSe.forEach(t),E7r=i(te),gE=n(te,"LI",{});var wSe=s(gE);cbe=n(wSe,"STRONG",{});var q4t=s(cbe);C7r=r(q4t,"tapas"),q4t.forEach(t),w7r=r(wSe," \u2014 "),XW=n(wSe,"A",{href:!0});var N4t=s(XW);A7r=r(N4t,"TFTapasForSequenceClassification"),N4t.forEach(t),y7r=r(wSe," (TAPAS model)"),wSe.forEach(t),L7r=i(te),hE=n(te,"LI",{});var ASe=s(hE);fbe=n(ASe,"STRONG",{});var j4t=s(fbe);x7r=r(j4t,"transfo-xl"),j4t.forEach(t),$7r=r(ASe," \u2014 "),zW=n(ASe,"A",{href:!0});var D4t=s(zW);k7r=r(D4t,"TFTransfoXLForSequenceClassification"),D4t.forEach(t),S7r=r(ASe," (Transformer-XL model)"),ASe.forEach(t),R7r=i(te),pE=n(te,"LI",{});var ySe=s(pE);mbe=n(ySe,"STRONG",{});var G4t=s(mbe);P7r=r(G4t,"xlm"),G4t.forEach(t),B7r=r(ySe," \u2014 "),QW=n(ySe,"A",{href:!0});var O4t=s(QW);I7r=r(O4t,"TFXLMForSequenceClassification"),O4t.forEach(t),q7r=r(ySe," (XLM model)"),ySe.forEach(t),N7r=i(te),uE=n(te,"LI",{});var LSe=s(uE);gbe=n(LSe,"STRONG",{});var V4t=s(gbe);j7r=r(V4t,"xlm-roberta"),V4t.forEach(t),D7r=r(LSe," \u2014 "),WW=n(LSe,"A",{href:!0});var X4t=s(WW);G7r=r(X4t,"TFXLMRobertaForSequenceClassification"),X4t.forEach(t),O7r=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),V7r=i(te),_E=n(te,"LI",{});var xSe=s(_E);hbe=n(xSe,"STRONG",{});var z4t=s(hbe);X7r=r(z4t,"xlnet"),z4t.forEach(t),z7r=r(xSe," \u2014 "),HW=n(xSe,"A",{href:!0});var Q4t=s(HW);Q7r=r(Q4t,"TFXLNetForSequenceClassification"),Q4t.forEach(t),W7r=r(xSe," (XLNet model)"),xSe.forEach(t),te.forEach(t),H7r=i(Ml),T(bE.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),eqe=i(f),nc=n(f,"H2",{class:!0});var sje=s(nc);vE=n(sje,"A",{id:!0,class:!0,href:!0});var W4t=s(vE);pbe=n(W4t,"SPAN",{});var H4t=s(pbe);T(f8.$$.fragment,H4t),H4t.forEach(t),W4t.forEach(t),U7r=i(sje),ube=n(sje,"SPAN",{});var U4t=s(ube);J7r=r(U4t,"TFAutoModelForMultipleChoice"),U4t.forEach(t),sje.forEach(t),oqe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(m8.$$.fragment,El),Y7r=i(El),sc=n(El,"P",{});var mZ=s(sc);K7r=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UW=n(mZ,"A",{href:!0});var J4t=s(UW);Z7r=r(J4t,"from_pretrained()"),J4t.forEach(t),ebr=r(mZ," class method or the "),JW=n(mZ,"A",{href:!0});var Y4t=s(JW);obr=r(Y4t,"from_config()"),Y4t.forEach(t),rbr=r(mZ,` class
method.`),mZ.forEach(t),tbr=i(El),g8=n(El,"P",{});var lje=s(g8);abr=r(lje,"This class cannot be instantiated directly using "),_be=n(lje,"CODE",{});var K4t=s(_be);nbr=r(K4t,"__init__()"),K4t.forEach(t),sbr=r(lje," (throws an error)."),lje.forEach(t),lbr=i(El),St=n(El,"DIV",{class:!0});var l0=s(St);T(h8.$$.fragment,l0),ibr=i(l0),bbe=n(l0,"P",{});var Z4t=s(bbe);dbr=r(Z4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z4t.forEach(t),cbr=i(l0),lc=n(l0,"P",{});var gZ=s(lc);fbr=r(gZ,`Note:
Loading a model from its configuration file does `),vbe=n(gZ,"STRONG",{});var evt=s(vbe);mbr=r(evt,"not"),evt.forEach(t),gbr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(gZ,"A",{href:!0});var ovt=s(YW);hbr=r(ovt,"from_pretrained()"),ovt.forEach(t),pbr=r(gZ," to load the model weights."),gZ.forEach(t),ubr=i(l0),T(FE.$$.fragment,l0),l0.forEach(t),_br=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(p8.$$.fragment,Cl),bbr=i(Cl),Fbe=n(Cl,"P",{});var rvt=s(Fbe);vbr=r(rvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rvt.forEach(t),Fbr=i(Cl),nn=n(Cl,"P",{});var i0=s(nn);Tbr=r(i0,"The model class to instantiate is selected based on the "),Tbe=n(i0,"CODE",{});var tvt=s(Tbe);Mbr=r(tvt,"model_type"),tvt.forEach(t),Ebr=r(i0,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(i0,"CODE",{});var avt=s(Mbe);Cbr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),wbr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(i0,"CODE",{});var nvt=s(Ebe);Abr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),ybr=r(i0,":"),i0.forEach(t),Lbr=i(Cl),he=n(Cl,"UL",{});var ue=s(he);TE=n(ue,"LI",{});var $Se=s(TE);Cbe=n($Se,"STRONG",{});var svt=s(Cbe);xbr=r(svt,"albert"),svt.forEach(t),$br=r($Se," \u2014 "),KW=n($Se,"A",{href:!0});var lvt=s(KW);kbr=r(lvt,"TFAlbertForMultipleChoice"),lvt.forEach(t),Sbr=r($Se," (ALBERT model)"),$Se.forEach(t),Rbr=i(ue),ME=n(ue,"LI",{});var kSe=s(ME);wbe=n(kSe,"STRONG",{});var ivt=s(wbe);Pbr=r(ivt,"bert"),ivt.forEach(t),Bbr=r(kSe," \u2014 "),ZW=n(kSe,"A",{href:!0});var dvt=s(ZW);Ibr=r(dvt,"TFBertForMultipleChoice"),dvt.forEach(t),qbr=r(kSe," (BERT model)"),kSe.forEach(t),Nbr=i(ue),EE=n(ue,"LI",{});var SSe=s(EE);Abe=n(SSe,"STRONG",{});var cvt=s(Abe);jbr=r(cvt,"camembert"),cvt.forEach(t),Dbr=r(SSe," \u2014 "),eH=n(SSe,"A",{href:!0});var fvt=s(eH);Gbr=r(fvt,"TFCamembertForMultipleChoice"),fvt.forEach(t),Obr=r(SSe," (CamemBERT model)"),SSe.forEach(t),Vbr=i(ue),CE=n(ue,"LI",{});var RSe=s(CE);ybe=n(RSe,"STRONG",{});var mvt=s(ybe);Xbr=r(mvt,"convbert"),mvt.forEach(t),zbr=r(RSe," \u2014 "),oH=n(RSe,"A",{href:!0});var gvt=s(oH);Qbr=r(gvt,"TFConvBertForMultipleChoice"),gvt.forEach(t),Wbr=r(RSe," (ConvBERT model)"),RSe.forEach(t),Hbr=i(ue),wE=n(ue,"LI",{});var PSe=s(wE);Lbe=n(PSe,"STRONG",{});var hvt=s(Lbe);Ubr=r(hvt,"distilbert"),hvt.forEach(t),Jbr=r(PSe," \u2014 "),rH=n(PSe,"A",{href:!0});var pvt=s(rH);Ybr=r(pvt,"TFDistilBertForMultipleChoice"),pvt.forEach(t),Kbr=r(PSe," (DistilBERT model)"),PSe.forEach(t),Zbr=i(ue),AE=n(ue,"LI",{});var BSe=s(AE);xbe=n(BSe,"STRONG",{});var uvt=s(xbe);e4r=r(uvt,"electra"),uvt.forEach(t),o4r=r(BSe," \u2014 "),tH=n(BSe,"A",{href:!0});var _vt=s(tH);r4r=r(_vt,"TFElectraForMultipleChoice"),_vt.forEach(t),t4r=r(BSe," (ELECTRA model)"),BSe.forEach(t),a4r=i(ue),yE=n(ue,"LI",{});var ISe=s(yE);$be=n(ISe,"STRONG",{});var bvt=s($be);n4r=r(bvt,"flaubert"),bvt.forEach(t),s4r=r(ISe," \u2014 "),aH=n(ISe,"A",{href:!0});var vvt=s(aH);l4r=r(vvt,"TFFlaubertForMultipleChoice"),vvt.forEach(t),i4r=r(ISe," (FlauBERT model)"),ISe.forEach(t),d4r=i(ue),LE=n(ue,"LI",{});var qSe=s(LE);kbe=n(qSe,"STRONG",{});var Fvt=s(kbe);c4r=r(Fvt,"funnel"),Fvt.forEach(t),f4r=r(qSe," \u2014 "),nH=n(qSe,"A",{href:!0});var Tvt=s(nH);m4r=r(Tvt,"TFFunnelForMultipleChoice"),Tvt.forEach(t),g4r=r(qSe," (Funnel Transformer model)"),qSe.forEach(t),h4r=i(ue),xE=n(ue,"LI",{});var NSe=s(xE);Sbe=n(NSe,"STRONG",{});var Mvt=s(Sbe);p4r=r(Mvt,"longformer"),Mvt.forEach(t),u4r=r(NSe," \u2014 "),sH=n(NSe,"A",{href:!0});var Evt=s(sH);_4r=r(Evt,"TFLongformerForMultipleChoice"),Evt.forEach(t),b4r=r(NSe," (Longformer model)"),NSe.forEach(t),v4r=i(ue),$E=n(ue,"LI",{});var jSe=s($E);Rbe=n(jSe,"STRONG",{});var Cvt=s(Rbe);F4r=r(Cvt,"mobilebert"),Cvt.forEach(t),T4r=r(jSe," \u2014 "),lH=n(jSe,"A",{href:!0});var wvt=s(lH);M4r=r(wvt,"TFMobileBertForMultipleChoice"),wvt.forEach(t),E4r=r(jSe," (MobileBERT model)"),jSe.forEach(t),C4r=i(ue),kE=n(ue,"LI",{});var DSe=s(kE);Pbe=n(DSe,"STRONG",{});var Avt=s(Pbe);w4r=r(Avt,"mpnet"),Avt.forEach(t),A4r=r(DSe," \u2014 "),iH=n(DSe,"A",{href:!0});var yvt=s(iH);y4r=r(yvt,"TFMPNetForMultipleChoice"),yvt.forEach(t),L4r=r(DSe," (MPNet model)"),DSe.forEach(t),x4r=i(ue),SE=n(ue,"LI",{});var GSe=s(SE);Bbe=n(GSe,"STRONG",{});var Lvt=s(Bbe);$4r=r(Lvt,"rembert"),Lvt.forEach(t),k4r=r(GSe," \u2014 "),dH=n(GSe,"A",{href:!0});var xvt=s(dH);S4r=r(xvt,"TFRemBertForMultipleChoice"),xvt.forEach(t),R4r=r(GSe," (RemBERT model)"),GSe.forEach(t),P4r=i(ue),RE=n(ue,"LI",{});var OSe=s(RE);Ibe=n(OSe,"STRONG",{});var $vt=s(Ibe);B4r=r($vt,"roberta"),$vt.forEach(t),I4r=r(OSe," \u2014 "),cH=n(OSe,"A",{href:!0});var kvt=s(cH);q4r=r(kvt,"TFRobertaForMultipleChoice"),kvt.forEach(t),N4r=r(OSe," (RoBERTa model)"),OSe.forEach(t),j4r=i(ue),PE=n(ue,"LI",{});var VSe=s(PE);qbe=n(VSe,"STRONG",{});var Svt=s(qbe);D4r=r(Svt,"roformer"),Svt.forEach(t),G4r=r(VSe," \u2014 "),fH=n(VSe,"A",{href:!0});var Rvt=s(fH);O4r=r(Rvt,"TFRoFormerForMultipleChoice"),Rvt.forEach(t),V4r=r(VSe," (RoFormer model)"),VSe.forEach(t),X4r=i(ue),BE=n(ue,"LI",{});var XSe=s(BE);Nbe=n(XSe,"STRONG",{});var Pvt=s(Nbe);z4r=r(Pvt,"xlm"),Pvt.forEach(t),Q4r=r(XSe," \u2014 "),mH=n(XSe,"A",{href:!0});var Bvt=s(mH);W4r=r(Bvt,"TFXLMForMultipleChoice"),Bvt.forEach(t),H4r=r(XSe," (XLM model)"),XSe.forEach(t),U4r=i(ue),IE=n(ue,"LI",{});var zSe=s(IE);jbe=n(zSe,"STRONG",{});var Ivt=s(jbe);J4r=r(Ivt,"xlm-roberta"),Ivt.forEach(t),Y4r=r(zSe," \u2014 "),gH=n(zSe,"A",{href:!0});var qvt=s(gH);K4r=r(qvt,"TFXLMRobertaForMultipleChoice"),qvt.forEach(t),Z4r=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),evr=i(ue),qE=n(ue,"LI",{});var QSe=s(qE);Dbe=n(QSe,"STRONG",{});var Nvt=s(Dbe);ovr=r(Nvt,"xlnet"),Nvt.forEach(t),rvr=r(QSe," \u2014 "),hH=n(QSe,"A",{href:!0});var jvt=s(hH);tvr=r(jvt,"TFXLNetForMultipleChoice"),jvt.forEach(t),avr=r(QSe," (XLNet model)"),QSe.forEach(t),ue.forEach(t),nvr=i(Cl),T(NE.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),rqe=i(f),ic=n(f,"H2",{class:!0});var ije=s(ic);jE=n(ije,"A",{id:!0,class:!0,href:!0});var Dvt=s(jE);Gbe=n(Dvt,"SPAN",{});var Gvt=s(Gbe);T(u8.$$.fragment,Gvt),Gvt.forEach(t),Dvt.forEach(t),svr=i(ije),Obe=n(ije,"SPAN",{});var Ovt=s(Obe);lvr=r(Ovt,"TFAutoModelForNextSentencePrediction"),Ovt.forEach(t),ije.forEach(t),tqe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(_8.$$.fragment,wl),ivr=i(wl),dc=n(wl,"P",{});var hZ=s(dc);dvr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pH=n(hZ,"A",{href:!0});var Vvt=s(pH);cvr=r(Vvt,"from_pretrained()"),Vvt.forEach(t),fvr=r(hZ," class method or the "),uH=n(hZ,"A",{href:!0});var Xvt=s(uH);mvr=r(Xvt,"from_config()"),Xvt.forEach(t),gvr=r(hZ,` class
method.`),hZ.forEach(t),hvr=i(wl),b8=n(wl,"P",{});var dje=s(b8);pvr=r(dje,"This class cannot be instantiated directly using "),Vbe=n(dje,"CODE",{});var zvt=s(Vbe);uvr=r(zvt,"__init__()"),zvt.forEach(t),_vr=r(dje," (throws an error)."),dje.forEach(t),bvr=i(wl),Rt=n(wl,"DIV",{class:!0});var d0=s(Rt);T(v8.$$.fragment,d0),vvr=i(d0),Xbe=n(d0,"P",{});var Qvt=s(Xbe);Fvr=r(Qvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qvt.forEach(t),Tvr=i(d0),cc=n(d0,"P",{});var pZ=s(cc);Mvr=r(pZ,`Note:
Loading a model from its configuration file does `),zbe=n(pZ,"STRONG",{});var Wvt=s(zbe);Evr=r(Wvt,"not"),Wvt.forEach(t),Cvr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(pZ,"A",{href:!0});var Hvt=s(_H);wvr=r(Hvt,"from_pretrained()"),Hvt.forEach(t),Avr=r(pZ," to load the model weights."),pZ.forEach(t),yvr=i(d0),T(DE.$$.fragment,d0),d0.forEach(t),Lvr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(F8.$$.fragment,Al),xvr=i(Al),Qbe=n(Al,"P",{});var Uvt=s(Qbe);$vr=r(Uvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Uvt.forEach(t),kvr=i(Al),sn=n(Al,"P",{});var c0=s(sn);Svr=r(c0,"The model class to instantiate is selected based on the "),Wbe=n(c0,"CODE",{});var Jvt=s(Wbe);Rvr=r(Jvt,"model_type"),Jvt.forEach(t),Pvr=r(c0,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(c0,"CODE",{});var Yvt=s(Hbe);Bvr=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),Ivr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(c0,"CODE",{});var Kvt=s(Ube);qvr=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),Nvr=r(c0,":"),c0.forEach(t),jvr=i(Al),T8=n(Al,"UL",{});var cje=s(T8);GE=n(cje,"LI",{});var WSe=s(GE);Jbe=n(WSe,"STRONG",{});var Zvt=s(Jbe);Dvr=r(Zvt,"bert"),Zvt.forEach(t),Gvr=r(WSe," \u2014 "),bH=n(WSe,"A",{href:!0});var eFt=s(bH);Ovr=r(eFt,"TFBertForNextSentencePrediction"),eFt.forEach(t),Vvr=r(WSe," (BERT model)"),WSe.forEach(t),Xvr=i(cje),OE=n(cje,"LI",{});var HSe=s(OE);Ybe=n(HSe,"STRONG",{});var oFt=s(Ybe);zvr=r(oFt,"mobilebert"),oFt.forEach(t),Qvr=r(HSe," \u2014 "),vH=n(HSe,"A",{href:!0});var rFt=s(vH);Wvr=r(rFt,"TFMobileBertForNextSentencePrediction"),rFt.forEach(t),Hvr=r(HSe," (MobileBERT model)"),HSe.forEach(t),cje.forEach(t),Uvr=i(Al),T(VE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),aqe=i(f),fc=n(f,"H2",{class:!0});var fje=s(fc);XE=n(fje,"A",{id:!0,class:!0,href:!0});var tFt=s(XE);Kbe=n(tFt,"SPAN",{});var aFt=s(Kbe);T(M8.$$.fragment,aFt),aFt.forEach(t),tFt.forEach(t),Jvr=i(fje),Zbe=n(fje,"SPAN",{});var nFt=s(Zbe);Yvr=r(nFt,"TFAutoModelForTableQuestionAnswering"),nFt.forEach(t),fje.forEach(t),nqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(E8.$$.fragment,yl),Kvr=i(yl),mc=n(yl,"P",{});var uZ=s(mc);Zvr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FH=n(uZ,"A",{href:!0});var sFt=s(FH);eFr=r(sFt,"from_pretrained()"),sFt.forEach(t),oFr=r(uZ," class method or the "),TH=n(uZ,"A",{href:!0});var lFt=s(TH);rFr=r(lFt,"from_config()"),lFt.forEach(t),tFr=r(uZ,` class
method.`),uZ.forEach(t),aFr=i(yl),C8=n(yl,"P",{});var mje=s(C8);nFr=r(mje,"This class cannot be instantiated directly using "),e4e=n(mje,"CODE",{});var iFt=s(e4e);sFr=r(iFt,"__init__()"),iFt.forEach(t),lFr=r(mje," (throws an error)."),mje.forEach(t),iFr=i(yl),Pt=n(yl,"DIV",{class:!0});var f0=s(Pt);T(w8.$$.fragment,f0),dFr=i(f0),o4e=n(f0,"P",{});var dFt=s(o4e);cFr=r(dFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dFt.forEach(t),fFr=i(f0),gc=n(f0,"P",{});var _Z=s(gc);mFr=r(_Z,`Note:
Loading a model from its configuration file does `),r4e=n(_Z,"STRONG",{});var cFt=s(r4e);gFr=r(cFt,"not"),cFt.forEach(t),hFr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(_Z,"A",{href:!0});var fFt=s(MH);pFr=r(fFt,"from_pretrained()"),fFt.forEach(t),uFr=r(_Z," to load the model weights."),_Z.forEach(t),_Fr=i(f0),T(zE.$$.fragment,f0),f0.forEach(t),bFr=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(A8.$$.fragment,Ll),vFr=i(Ll),t4e=n(Ll,"P",{});var mFt=s(t4e);FFr=r(mFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mFt.forEach(t),TFr=i(Ll),ln=n(Ll,"P",{});var m0=s(ln);MFr=r(m0,"The model class to instantiate is selected based on the "),a4e=n(m0,"CODE",{});var gFt=s(a4e);EFr=r(gFt,"model_type"),gFt.forEach(t),CFr=r(m0,` property of the config object (either
passed as an argument or loaded from `),n4e=n(m0,"CODE",{});var hFt=s(n4e);wFr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),AFr=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(m0,"CODE",{});var pFt=s(s4e);yFr=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),LFr=r(m0,":"),m0.forEach(t),xFr=i(Ll),l4e=n(Ll,"UL",{});var uFt=s(l4e);QE=n(uFt,"LI",{});var USe=s(QE);i4e=n(USe,"STRONG",{});var _Ft=s(i4e);$Fr=r(_Ft,"tapas"),_Ft.forEach(t),kFr=r(USe," \u2014 "),EH=n(USe,"A",{href:!0});var bFt=s(EH);SFr=r(bFt,"TFTapasForQuestionAnswering"),bFt.forEach(t),RFr=r(USe," (TAPAS model)"),USe.forEach(t),uFt.forEach(t),PFr=i(Ll),T(WE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),sqe=i(f),hc=n(f,"H2",{class:!0});var gje=s(hc);HE=n(gje,"A",{id:!0,class:!0,href:!0});var vFt=s(HE);d4e=n(vFt,"SPAN",{});var FFt=s(d4e);T(y8.$$.fragment,FFt),FFt.forEach(t),vFt.forEach(t),BFr=i(gje),c4e=n(gje,"SPAN",{});var TFt=s(c4e);IFr=r(TFt,"TFAutoModelForTokenClassification"),TFt.forEach(t),gje.forEach(t),lqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(L8.$$.fragment,xl),qFr=i(xl),pc=n(xl,"P",{});var bZ=s(pc);NFr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),CH=n(bZ,"A",{href:!0});var MFt=s(CH);jFr=r(MFt,"from_pretrained()"),MFt.forEach(t),DFr=r(bZ," class method or the "),wH=n(bZ,"A",{href:!0});var EFt=s(wH);GFr=r(EFt,"from_config()"),EFt.forEach(t),OFr=r(bZ,` class
method.`),bZ.forEach(t),VFr=i(xl),x8=n(xl,"P",{});var hje=s(x8);XFr=r(hje,"This class cannot be instantiated directly using "),f4e=n(hje,"CODE",{});var CFt=s(f4e);zFr=r(CFt,"__init__()"),CFt.forEach(t),QFr=r(hje," (throws an error)."),hje.forEach(t),WFr=i(xl),Bt=n(xl,"DIV",{class:!0});var g0=s(Bt);T($8.$$.fragment,g0),HFr=i(g0),m4e=n(g0,"P",{});var wFt=s(m4e);UFr=r(wFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wFt.forEach(t),JFr=i(g0),uc=n(g0,"P",{});var vZ=s(uc);YFr=r(vZ,`Note:
Loading a model from its configuration file does `),g4e=n(vZ,"STRONG",{});var AFt=s(g4e);KFr=r(AFt,"not"),AFt.forEach(t),ZFr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(vZ,"A",{href:!0});var yFt=s(AH);eTr=r(yFt,"from_pretrained()"),yFt.forEach(t),oTr=r(vZ," to load the model weights."),vZ.forEach(t),rTr=i(g0),T(UE.$$.fragment,g0),g0.forEach(t),tTr=i(xl),Br=n(xl,"DIV",{class:!0});var $l=s(Br);T(k8.$$.fragment,$l),aTr=i($l),h4e=n($l,"P",{});var LFt=s(h4e);nTr=r(LFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LFt.forEach(t),sTr=i($l),dn=n($l,"P",{});var h0=s(dn);lTr=r(h0,"The model class to instantiate is selected based on the "),p4e=n(h0,"CODE",{});var xFt=s(p4e);iTr=r(xFt,"model_type"),xFt.forEach(t),dTr=r(h0,` property of the config object (either
passed as an argument or loaded from `),u4e=n(h0,"CODE",{});var $Ft=s(u4e);cTr=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),fTr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(h0,"CODE",{});var kFt=s(_4e);mTr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),gTr=r(h0,":"),h0.forEach(t),hTr=i($l),de=n($l,"UL",{});var me=s(de);JE=n(me,"LI",{});var JSe=s(JE);b4e=n(JSe,"STRONG",{});var SFt=s(b4e);pTr=r(SFt,"albert"),SFt.forEach(t),uTr=r(JSe," \u2014 "),yH=n(JSe,"A",{href:!0});var RFt=s(yH);_Tr=r(RFt,"TFAlbertForTokenClassification"),RFt.forEach(t),bTr=r(JSe," (ALBERT model)"),JSe.forEach(t),vTr=i(me),YE=n(me,"LI",{});var YSe=s(YE);v4e=n(YSe,"STRONG",{});var PFt=s(v4e);FTr=r(PFt,"bert"),PFt.forEach(t),TTr=r(YSe," \u2014 "),LH=n(YSe,"A",{href:!0});var BFt=s(LH);MTr=r(BFt,"TFBertForTokenClassification"),BFt.forEach(t),ETr=r(YSe," (BERT model)"),YSe.forEach(t),CTr=i(me),KE=n(me,"LI",{});var KSe=s(KE);F4e=n(KSe,"STRONG",{});var IFt=s(F4e);wTr=r(IFt,"camembert"),IFt.forEach(t),ATr=r(KSe," \u2014 "),xH=n(KSe,"A",{href:!0});var qFt=s(xH);yTr=r(qFt,"TFCamembertForTokenClassification"),qFt.forEach(t),LTr=r(KSe," (CamemBERT model)"),KSe.forEach(t),xTr=i(me),ZE=n(me,"LI",{});var ZSe=s(ZE);T4e=n(ZSe,"STRONG",{});var NFt=s(T4e);$Tr=r(NFt,"convbert"),NFt.forEach(t),kTr=r(ZSe," \u2014 "),$H=n(ZSe,"A",{href:!0});var jFt=s($H);STr=r(jFt,"TFConvBertForTokenClassification"),jFt.forEach(t),RTr=r(ZSe," (ConvBERT model)"),ZSe.forEach(t),PTr=i(me),e5=n(me,"LI",{});var eRe=s(e5);M4e=n(eRe,"STRONG",{});var DFt=s(M4e);BTr=r(DFt,"deberta"),DFt.forEach(t),ITr=r(eRe," \u2014 "),kH=n(eRe,"A",{href:!0});var GFt=s(kH);qTr=r(GFt,"TFDebertaForTokenClassification"),GFt.forEach(t),NTr=r(eRe," (DeBERTa model)"),eRe.forEach(t),jTr=i(me),o5=n(me,"LI",{});var oRe=s(o5);E4e=n(oRe,"STRONG",{});var OFt=s(E4e);DTr=r(OFt,"deberta-v2"),OFt.forEach(t),GTr=r(oRe," \u2014 "),SH=n(oRe,"A",{href:!0});var VFt=s(SH);OTr=r(VFt,"TFDebertaV2ForTokenClassification"),VFt.forEach(t),VTr=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),XTr=i(me),r5=n(me,"LI",{});var rRe=s(r5);C4e=n(rRe,"STRONG",{});var XFt=s(C4e);zTr=r(XFt,"distilbert"),XFt.forEach(t),QTr=r(rRe," \u2014 "),RH=n(rRe,"A",{href:!0});var zFt=s(RH);WTr=r(zFt,"TFDistilBertForTokenClassification"),zFt.forEach(t),HTr=r(rRe," (DistilBERT model)"),rRe.forEach(t),UTr=i(me),t5=n(me,"LI",{});var tRe=s(t5);w4e=n(tRe,"STRONG",{});var QFt=s(w4e);JTr=r(QFt,"electra"),QFt.forEach(t),YTr=r(tRe," \u2014 "),PH=n(tRe,"A",{href:!0});var WFt=s(PH);KTr=r(WFt,"TFElectraForTokenClassification"),WFt.forEach(t),ZTr=r(tRe," (ELECTRA model)"),tRe.forEach(t),eMr=i(me),a5=n(me,"LI",{});var aRe=s(a5);A4e=n(aRe,"STRONG",{});var HFt=s(A4e);oMr=r(HFt,"flaubert"),HFt.forEach(t),rMr=r(aRe," \u2014 "),BH=n(aRe,"A",{href:!0});var UFt=s(BH);tMr=r(UFt,"TFFlaubertForTokenClassification"),UFt.forEach(t),aMr=r(aRe," (FlauBERT model)"),aRe.forEach(t),nMr=i(me),n5=n(me,"LI",{});var nRe=s(n5);y4e=n(nRe,"STRONG",{});var JFt=s(y4e);sMr=r(JFt,"funnel"),JFt.forEach(t),lMr=r(nRe," \u2014 "),IH=n(nRe,"A",{href:!0});var YFt=s(IH);iMr=r(YFt,"TFFunnelForTokenClassification"),YFt.forEach(t),dMr=r(nRe," (Funnel Transformer model)"),nRe.forEach(t),cMr=i(me),s5=n(me,"LI",{});var sRe=s(s5);L4e=n(sRe,"STRONG",{});var KFt=s(L4e);fMr=r(KFt,"layoutlm"),KFt.forEach(t),mMr=r(sRe," \u2014 "),qH=n(sRe,"A",{href:!0});var ZFt=s(qH);gMr=r(ZFt,"TFLayoutLMForTokenClassification"),ZFt.forEach(t),hMr=r(sRe," (LayoutLM model)"),sRe.forEach(t),pMr=i(me),l5=n(me,"LI",{});var lRe=s(l5);x4e=n(lRe,"STRONG",{});var eTt=s(x4e);uMr=r(eTt,"longformer"),eTt.forEach(t),_Mr=r(lRe," \u2014 "),NH=n(lRe,"A",{href:!0});var oTt=s(NH);bMr=r(oTt,"TFLongformerForTokenClassification"),oTt.forEach(t),vMr=r(lRe," (Longformer model)"),lRe.forEach(t),FMr=i(me),i5=n(me,"LI",{});var iRe=s(i5);$4e=n(iRe,"STRONG",{});var rTt=s($4e);TMr=r(rTt,"mobilebert"),rTt.forEach(t),MMr=r(iRe," \u2014 "),jH=n(iRe,"A",{href:!0});var tTt=s(jH);EMr=r(tTt,"TFMobileBertForTokenClassification"),tTt.forEach(t),CMr=r(iRe," (MobileBERT model)"),iRe.forEach(t),wMr=i(me),d5=n(me,"LI",{});var dRe=s(d5);k4e=n(dRe,"STRONG",{});var aTt=s(k4e);AMr=r(aTt,"mpnet"),aTt.forEach(t),yMr=r(dRe," \u2014 "),DH=n(dRe,"A",{href:!0});var nTt=s(DH);LMr=r(nTt,"TFMPNetForTokenClassification"),nTt.forEach(t),xMr=r(dRe," (MPNet model)"),dRe.forEach(t),$Mr=i(me),c5=n(me,"LI",{});var cRe=s(c5);S4e=n(cRe,"STRONG",{});var sTt=s(S4e);kMr=r(sTt,"rembert"),sTt.forEach(t),SMr=r(cRe," \u2014 "),GH=n(cRe,"A",{href:!0});var lTt=s(GH);RMr=r(lTt,"TFRemBertForTokenClassification"),lTt.forEach(t),PMr=r(cRe," (RemBERT model)"),cRe.forEach(t),BMr=i(me),f5=n(me,"LI",{});var fRe=s(f5);R4e=n(fRe,"STRONG",{});var iTt=s(R4e);IMr=r(iTt,"roberta"),iTt.forEach(t),qMr=r(fRe," \u2014 "),OH=n(fRe,"A",{href:!0});var dTt=s(OH);NMr=r(dTt,"TFRobertaForTokenClassification"),dTt.forEach(t),jMr=r(fRe," (RoBERTa model)"),fRe.forEach(t),DMr=i(me),m5=n(me,"LI",{});var mRe=s(m5);P4e=n(mRe,"STRONG",{});var cTt=s(P4e);GMr=r(cTt,"roformer"),cTt.forEach(t),OMr=r(mRe," \u2014 "),VH=n(mRe,"A",{href:!0});var fTt=s(VH);VMr=r(fTt,"TFRoFormerForTokenClassification"),fTt.forEach(t),XMr=r(mRe," (RoFormer model)"),mRe.forEach(t),zMr=i(me),g5=n(me,"LI",{});var gRe=s(g5);B4e=n(gRe,"STRONG",{});var mTt=s(B4e);QMr=r(mTt,"xlm"),mTt.forEach(t),WMr=r(gRe," \u2014 "),XH=n(gRe,"A",{href:!0});var gTt=s(XH);HMr=r(gTt,"TFXLMForTokenClassification"),gTt.forEach(t),UMr=r(gRe," (XLM model)"),gRe.forEach(t),JMr=i(me),h5=n(me,"LI",{});var hRe=s(h5);I4e=n(hRe,"STRONG",{});var hTt=s(I4e);YMr=r(hTt,"xlm-roberta"),hTt.forEach(t),KMr=r(hRe," \u2014 "),zH=n(hRe,"A",{href:!0});var pTt=s(zH);ZMr=r(pTt,"TFXLMRobertaForTokenClassification"),pTt.forEach(t),eEr=r(hRe," (XLM-RoBERTa model)"),hRe.forEach(t),oEr=i(me),p5=n(me,"LI",{});var pRe=s(p5);q4e=n(pRe,"STRONG",{});var uTt=s(q4e);rEr=r(uTt,"xlnet"),uTt.forEach(t),tEr=r(pRe," \u2014 "),QH=n(pRe,"A",{href:!0});var _Tt=s(QH);aEr=r(_Tt,"TFXLNetForTokenClassification"),_Tt.forEach(t),nEr=r(pRe," (XLNet model)"),pRe.forEach(t),me.forEach(t),sEr=i($l),T(u5.$$.fragment,$l),$l.forEach(t),xl.forEach(t),iqe=i(f),_c=n(f,"H2",{class:!0});var pje=s(_c);_5=n(pje,"A",{id:!0,class:!0,href:!0});var bTt=s(_5);N4e=n(bTt,"SPAN",{});var vTt=s(N4e);T(S8.$$.fragment,vTt),vTt.forEach(t),bTt.forEach(t),lEr=i(pje),j4e=n(pje,"SPAN",{});var FTt=s(j4e);iEr=r(FTt,"TFAutoModelForQuestionAnswering"),FTt.forEach(t),pje.forEach(t),dqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(R8.$$.fragment,kl),dEr=i(kl),bc=n(kl,"P",{});var FZ=s(bc);cEr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WH=n(FZ,"A",{href:!0});var TTt=s(WH);fEr=r(TTt,"from_pretrained()"),TTt.forEach(t),mEr=r(FZ," class method or the "),HH=n(FZ,"A",{href:!0});var MTt=s(HH);gEr=r(MTt,"from_config()"),MTt.forEach(t),hEr=r(FZ,` class
method.`),FZ.forEach(t),pEr=i(kl),P8=n(kl,"P",{});var uje=s(P8);uEr=r(uje,"This class cannot be instantiated directly using "),D4e=n(uje,"CODE",{});var ETt=s(D4e);_Er=r(ETt,"__init__()"),ETt.forEach(t),bEr=r(uje," (throws an error)."),uje.forEach(t),vEr=i(kl),It=n(kl,"DIV",{class:!0});var p0=s(It);T(B8.$$.fragment,p0),FEr=i(p0),G4e=n(p0,"P",{});var CTt=s(G4e);TEr=r(CTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CTt.forEach(t),MEr=i(p0),vc=n(p0,"P",{});var TZ=s(vc);EEr=r(TZ,`Note:
Loading a model from its configuration file does `),O4e=n(TZ,"STRONG",{});var wTt=s(O4e);CEr=r(wTt,"not"),wTt.forEach(t),wEr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(TZ,"A",{href:!0});var ATt=s(UH);AEr=r(ATt,"from_pretrained()"),ATt.forEach(t),yEr=r(TZ," to load the model weights."),TZ.forEach(t),LEr=i(p0),T(b5.$$.fragment,p0),p0.forEach(t),xEr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(I8.$$.fragment,Sl),$Er=i(Sl),V4e=n(Sl,"P",{});var yTt=s(V4e);kEr=r(yTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yTt.forEach(t),SEr=i(Sl),cn=n(Sl,"P",{});var u0=s(cn);REr=r(u0,"The model class to instantiate is selected based on the "),X4e=n(u0,"CODE",{});var LTt=s(X4e);PEr=r(LTt,"model_type"),LTt.forEach(t),BEr=r(u0,` property of the config object (either
passed as an argument or loaded from `),z4e=n(u0,"CODE",{});var xTt=s(z4e);IEr=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),qEr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(u0,"CODE",{});var $Tt=s(Q4e);NEr=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),jEr=r(u0,":"),u0.forEach(t),DEr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);v5=n(ge,"LI",{});var uRe=s(v5);W4e=n(uRe,"STRONG",{});var kTt=s(W4e);GEr=r(kTt,"albert"),kTt.forEach(t),OEr=r(uRe," \u2014 "),JH=n(uRe,"A",{href:!0});var STt=s(JH);VEr=r(STt,"TFAlbertForQuestionAnswering"),STt.forEach(t),XEr=r(uRe," (ALBERT model)"),uRe.forEach(t),zEr=i(ge),F5=n(ge,"LI",{});var _Re=s(F5);H4e=n(_Re,"STRONG",{});var RTt=s(H4e);QEr=r(RTt,"bert"),RTt.forEach(t),WEr=r(_Re," \u2014 "),YH=n(_Re,"A",{href:!0});var PTt=s(YH);HEr=r(PTt,"TFBertForQuestionAnswering"),PTt.forEach(t),UEr=r(_Re," (BERT model)"),_Re.forEach(t),JEr=i(ge),T5=n(ge,"LI",{});var bRe=s(T5);U4e=n(bRe,"STRONG",{});var BTt=s(U4e);YEr=r(BTt,"camembert"),BTt.forEach(t),KEr=r(bRe," \u2014 "),KH=n(bRe,"A",{href:!0});var ITt=s(KH);ZEr=r(ITt,"TFCamembertForQuestionAnswering"),ITt.forEach(t),e5r=r(bRe," (CamemBERT model)"),bRe.forEach(t),o5r=i(ge),M5=n(ge,"LI",{});var vRe=s(M5);J4e=n(vRe,"STRONG",{});var qTt=s(J4e);r5r=r(qTt,"convbert"),qTt.forEach(t),t5r=r(vRe," \u2014 "),ZH=n(vRe,"A",{href:!0});var NTt=s(ZH);a5r=r(NTt,"TFConvBertForQuestionAnswering"),NTt.forEach(t),n5r=r(vRe," (ConvBERT model)"),vRe.forEach(t),s5r=i(ge),E5=n(ge,"LI",{});var FRe=s(E5);Y4e=n(FRe,"STRONG",{});var jTt=s(Y4e);l5r=r(jTt,"deberta"),jTt.forEach(t),i5r=r(FRe," \u2014 "),eU=n(FRe,"A",{href:!0});var DTt=s(eU);d5r=r(DTt,"TFDebertaForQuestionAnswering"),DTt.forEach(t),c5r=r(FRe," (DeBERTa model)"),FRe.forEach(t),f5r=i(ge),C5=n(ge,"LI",{});var TRe=s(C5);K4e=n(TRe,"STRONG",{});var GTt=s(K4e);m5r=r(GTt,"deberta-v2"),GTt.forEach(t),g5r=r(TRe," \u2014 "),oU=n(TRe,"A",{href:!0});var OTt=s(oU);h5r=r(OTt,"TFDebertaV2ForQuestionAnswering"),OTt.forEach(t),p5r=r(TRe," (DeBERTa-v2 model)"),TRe.forEach(t),u5r=i(ge),w5=n(ge,"LI",{});var MRe=s(w5);Z4e=n(MRe,"STRONG",{});var VTt=s(Z4e);_5r=r(VTt,"distilbert"),VTt.forEach(t),b5r=r(MRe," \u2014 "),rU=n(MRe,"A",{href:!0});var XTt=s(rU);v5r=r(XTt,"TFDistilBertForQuestionAnswering"),XTt.forEach(t),F5r=r(MRe," (DistilBERT model)"),MRe.forEach(t),T5r=i(ge),A5=n(ge,"LI",{});var ERe=s(A5);eve=n(ERe,"STRONG",{});var zTt=s(eve);M5r=r(zTt,"electra"),zTt.forEach(t),E5r=r(ERe," \u2014 "),tU=n(ERe,"A",{href:!0});var QTt=s(tU);C5r=r(QTt,"TFElectraForQuestionAnswering"),QTt.forEach(t),w5r=r(ERe," (ELECTRA model)"),ERe.forEach(t),A5r=i(ge),y5=n(ge,"LI",{});var CRe=s(y5);ove=n(CRe,"STRONG",{});var WTt=s(ove);y5r=r(WTt,"flaubert"),WTt.forEach(t),L5r=r(CRe," \u2014 "),aU=n(CRe,"A",{href:!0});var HTt=s(aU);x5r=r(HTt,"TFFlaubertForQuestionAnsweringSimple"),HTt.forEach(t),$5r=r(CRe," (FlauBERT model)"),CRe.forEach(t),k5r=i(ge),L5=n(ge,"LI",{});var wRe=s(L5);rve=n(wRe,"STRONG",{});var UTt=s(rve);S5r=r(UTt,"funnel"),UTt.forEach(t),R5r=r(wRe," \u2014 "),nU=n(wRe,"A",{href:!0});var JTt=s(nU);P5r=r(JTt,"TFFunnelForQuestionAnswering"),JTt.forEach(t),B5r=r(wRe," (Funnel Transformer model)"),wRe.forEach(t),I5r=i(ge),x5=n(ge,"LI",{});var ARe=s(x5);tve=n(ARe,"STRONG",{});var YTt=s(tve);q5r=r(YTt,"gptj"),YTt.forEach(t),N5r=r(ARe," \u2014 "),sU=n(ARe,"A",{href:!0});var KTt=s(sU);j5r=r(KTt,"TFGPTJForQuestionAnswering"),KTt.forEach(t),D5r=r(ARe," (GPT-J model)"),ARe.forEach(t),G5r=i(ge),$5=n(ge,"LI",{});var yRe=s($5);ave=n(yRe,"STRONG",{});var ZTt=s(ave);O5r=r(ZTt,"longformer"),ZTt.forEach(t),V5r=r(yRe," \u2014 "),lU=n(yRe,"A",{href:!0});var eMt=s(lU);X5r=r(eMt,"TFLongformerForQuestionAnswering"),eMt.forEach(t),z5r=r(yRe," (Longformer model)"),yRe.forEach(t),Q5r=i(ge),k5=n(ge,"LI",{});var LRe=s(k5);nve=n(LRe,"STRONG",{});var oMt=s(nve);W5r=r(oMt,"mobilebert"),oMt.forEach(t),H5r=r(LRe," \u2014 "),iU=n(LRe,"A",{href:!0});var rMt=s(iU);U5r=r(rMt,"TFMobileBertForQuestionAnswering"),rMt.forEach(t),J5r=r(LRe," (MobileBERT model)"),LRe.forEach(t),Y5r=i(ge),S5=n(ge,"LI",{});var xRe=s(S5);sve=n(xRe,"STRONG",{});var tMt=s(sve);K5r=r(tMt,"mpnet"),tMt.forEach(t),Z5r=r(xRe," \u2014 "),dU=n(xRe,"A",{href:!0});var aMt=s(dU);eCr=r(aMt,"TFMPNetForQuestionAnswering"),aMt.forEach(t),oCr=r(xRe," (MPNet model)"),xRe.forEach(t),rCr=i(ge),R5=n(ge,"LI",{});var $Re=s(R5);lve=n($Re,"STRONG",{});var nMt=s(lve);tCr=r(nMt,"rembert"),nMt.forEach(t),aCr=r($Re," \u2014 "),cU=n($Re,"A",{href:!0});var sMt=s(cU);nCr=r(sMt,"TFRemBertForQuestionAnswering"),sMt.forEach(t),sCr=r($Re," (RemBERT model)"),$Re.forEach(t),lCr=i(ge),P5=n(ge,"LI",{});var kRe=s(P5);ive=n(kRe,"STRONG",{});var lMt=s(ive);iCr=r(lMt,"roberta"),lMt.forEach(t),dCr=r(kRe," \u2014 "),fU=n(kRe,"A",{href:!0});var iMt=s(fU);cCr=r(iMt,"TFRobertaForQuestionAnswering"),iMt.forEach(t),fCr=r(kRe," (RoBERTa model)"),kRe.forEach(t),mCr=i(ge),B5=n(ge,"LI",{});var SRe=s(B5);dve=n(SRe,"STRONG",{});var dMt=s(dve);gCr=r(dMt,"roformer"),dMt.forEach(t),hCr=r(SRe," \u2014 "),mU=n(SRe,"A",{href:!0});var cMt=s(mU);pCr=r(cMt,"TFRoFormerForQuestionAnswering"),cMt.forEach(t),uCr=r(SRe," (RoFormer model)"),SRe.forEach(t),_Cr=i(ge),I5=n(ge,"LI",{});var RRe=s(I5);cve=n(RRe,"STRONG",{});var fMt=s(cve);bCr=r(fMt,"xlm"),fMt.forEach(t),vCr=r(RRe," \u2014 "),gU=n(RRe,"A",{href:!0});var mMt=s(gU);FCr=r(mMt,"TFXLMForQuestionAnsweringSimple"),mMt.forEach(t),TCr=r(RRe," (XLM model)"),RRe.forEach(t),MCr=i(ge),q5=n(ge,"LI",{});var PRe=s(q5);fve=n(PRe,"STRONG",{});var gMt=s(fve);ECr=r(gMt,"xlm-roberta"),gMt.forEach(t),CCr=r(PRe," \u2014 "),hU=n(PRe,"A",{href:!0});var hMt=s(hU);wCr=r(hMt,"TFXLMRobertaForQuestionAnswering"),hMt.forEach(t),ACr=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),yCr=i(ge),N5=n(ge,"LI",{});var BRe=s(N5);mve=n(BRe,"STRONG",{});var pMt=s(mve);LCr=r(pMt,"xlnet"),pMt.forEach(t),xCr=r(BRe," \u2014 "),pU=n(BRe,"A",{href:!0});var uMt=s(pU);$Cr=r(uMt,"TFXLNetForQuestionAnsweringSimple"),uMt.forEach(t),kCr=r(BRe," (XLNet model)"),BRe.forEach(t),ge.forEach(t),SCr=i(Sl),T(j5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),cqe=i(f),Fc=n(f,"H2",{class:!0});var _je=s(Fc);D5=n(_je,"A",{id:!0,class:!0,href:!0});var _Mt=s(D5);gve=n(_Mt,"SPAN",{});var bMt=s(gve);T(q8.$$.fragment,bMt),bMt.forEach(t),_Mt.forEach(t),RCr=i(_je),hve=n(_je,"SPAN",{});var vMt=s(hve);PCr=r(vMt,"TFAutoModelForVision2Seq"),vMt.forEach(t),_je.forEach(t),fqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(N8.$$.fragment,Rl),BCr=i(Rl),Tc=n(Rl,"P",{});var MZ=s(Tc);ICr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uU=n(MZ,"A",{href:!0});var FMt=s(uU);qCr=r(FMt,"from_pretrained()"),FMt.forEach(t),NCr=r(MZ," class method or the "),_U=n(MZ,"A",{href:!0});var TMt=s(_U);jCr=r(TMt,"from_config()"),TMt.forEach(t),DCr=r(MZ,` class
method.`),MZ.forEach(t),GCr=i(Rl),j8=n(Rl,"P",{});var bje=s(j8);OCr=r(bje,"This class cannot be instantiated directly using "),pve=n(bje,"CODE",{});var MMt=s(pve);VCr=r(MMt,"__init__()"),MMt.forEach(t),XCr=r(bje," (throws an error)."),bje.forEach(t),zCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var _0=s(qt);T(D8.$$.fragment,_0),QCr=i(_0),uve=n(_0,"P",{});var EMt=s(uve);WCr=r(EMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),EMt.forEach(t),HCr=i(_0),Mc=n(_0,"P",{});var EZ=s(Mc);UCr=r(EZ,`Note:
Loading a model from its configuration file does `),_ve=n(EZ,"STRONG",{});var CMt=s(_ve);JCr=r(CMt,"not"),CMt.forEach(t),YCr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(EZ,"A",{href:!0});var wMt=s(bU);KCr=r(wMt,"from_pretrained()"),wMt.forEach(t),ZCr=r(EZ," to load the model weights."),EZ.forEach(t),e3r=i(_0),T(G5.$$.fragment,_0),_0.forEach(t),o3r=i(Rl),qr=n(Rl,"DIV",{class:!0});var Pl=s(qr);T(G8.$$.fragment,Pl),r3r=i(Pl),bve=n(Pl,"P",{});var AMt=s(bve);t3r=r(AMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),AMt.forEach(t),a3r=i(Pl),fn=n(Pl,"P",{});var b0=s(fn);n3r=r(b0,"The model class to instantiate is selected based on the "),vve=n(b0,"CODE",{});var yMt=s(vve);s3r=r(yMt,"model_type"),yMt.forEach(t),l3r=r(b0,` property of the config object (either
passed as an argument or loaded from `),Fve=n(b0,"CODE",{});var LMt=s(Fve);i3r=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),d3r=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(b0,"CODE",{});var xMt=s(Tve);c3r=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),f3r=r(b0,":"),b0.forEach(t),m3r=i(Pl),Mve=n(Pl,"UL",{});var $Mt=s(Mve);O5=n($Mt,"LI",{});var IRe=s(O5);Eve=n(IRe,"STRONG",{});var kMt=s(Eve);g3r=r(kMt,"vision-encoder-decoder"),kMt.forEach(t),h3r=r(IRe," \u2014 "),vU=n(IRe,"A",{href:!0});var SMt=s(vU);p3r=r(SMt,"TFVisionEncoderDecoderModel"),SMt.forEach(t),u3r=r(IRe," (Vision Encoder decoder model)"),IRe.forEach(t),$Mt.forEach(t),_3r=i(Pl),T(V5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),mqe=i(f),Ec=n(f,"H2",{class:!0});var vje=s(Ec);X5=n(vje,"A",{id:!0,class:!0,href:!0});var RMt=s(X5);Cve=n(RMt,"SPAN",{});var PMt=s(Cve);T(O8.$$.fragment,PMt),PMt.forEach(t),RMt.forEach(t),b3r=i(vje),wve=n(vje,"SPAN",{});var BMt=s(wve);v3r=r(BMt,"TFAutoModelForSpeechSeq2Seq"),BMt.forEach(t),vje.forEach(t),gqe=i(f),cr=n(f,"DIV",{class:!0});var Bl=s(cr);T(V8.$$.fragment,Bl),F3r=i(Bl),Cc=n(Bl,"P",{});var CZ=s(Cc);T3r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FU=n(CZ,"A",{href:!0});var IMt=s(FU);M3r=r(IMt,"from_pretrained()"),IMt.forEach(t),E3r=r(CZ," class method or the "),TU=n(CZ,"A",{href:!0});var qMt=s(TU);C3r=r(qMt,"from_config()"),qMt.forEach(t),w3r=r(CZ,` class
method.`),CZ.forEach(t),A3r=i(Bl),X8=n(Bl,"P",{});var Fje=s(X8);y3r=r(Fje,"This class cannot be instantiated directly using "),Ave=n(Fje,"CODE",{});var NMt=s(Ave);L3r=r(NMt,"__init__()"),NMt.forEach(t),x3r=r(Fje," (throws an error)."),Fje.forEach(t),$3r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var v0=s(Nt);T(z8.$$.fragment,v0),k3r=i(v0),yve=n(v0,"P",{});var jMt=s(yve);S3r=r(jMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jMt.forEach(t),R3r=i(v0),wc=n(v0,"P",{});var wZ=s(wc);P3r=r(wZ,`Note:
Loading a model from its configuration file does `),Lve=n(wZ,"STRONG",{});var DMt=s(Lve);B3r=r(DMt,"not"),DMt.forEach(t),I3r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(wZ,"A",{href:!0});var GMt=s(MU);q3r=r(GMt,"from_pretrained()"),GMt.forEach(t),N3r=r(wZ," to load the model weights."),wZ.forEach(t),j3r=i(v0),T(z5.$$.fragment,v0),v0.forEach(t),D3r=i(Bl),Nr=n(Bl,"DIV",{class:!0});var Il=s(Nr);T(Q8.$$.fragment,Il),G3r=i(Il),xve=n(Il,"P",{});var OMt=s(xve);O3r=r(OMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OMt.forEach(t),V3r=i(Il),mn=n(Il,"P",{});var F0=s(mn);X3r=r(F0,"The model class to instantiate is selected based on the "),$ve=n(F0,"CODE",{});var VMt=s($ve);z3r=r(VMt,"model_type"),VMt.forEach(t),Q3r=r(F0,` property of the config object (either
passed as an argument or loaded from `),kve=n(F0,"CODE",{});var XMt=s(kve);W3r=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),H3r=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(F0,"CODE",{});var zMt=s(Sve);U3r=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),J3r=r(F0,":"),F0.forEach(t),Y3r=i(Il),Rve=n(Il,"UL",{});var QMt=s(Rve);Q5=n(QMt,"LI",{});var qRe=s(Q5);Pve=n(qRe,"STRONG",{});var WMt=s(Pve);K3r=r(WMt,"speech_to_text"),WMt.forEach(t),Z3r=r(qRe," \u2014 "),EU=n(qRe,"A",{href:!0});var HMt=s(EU);ewr=r(HMt,"TFSpeech2TextForConditionalGeneration"),HMt.forEach(t),owr=r(qRe," (Speech2Text model)"),qRe.forEach(t),QMt.forEach(t),rwr=i(Il),T(W5.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),hqe=i(f),Ac=n(f,"H2",{class:!0});var Tje=s(Ac);H5=n(Tje,"A",{id:!0,class:!0,href:!0});var UMt=s(H5);Bve=n(UMt,"SPAN",{});var JMt=s(Bve);T(W8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),twr=i(Tje),Ive=n(Tje,"SPAN",{});var YMt=s(Ive);awr=r(YMt,"FlaxAutoModel"),YMt.forEach(t),Tje.forEach(t),pqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(H8.$$.fragment,ql),nwr=i(ql),yc=n(ql,"P",{});var AZ=s(yc);swr=r(AZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CU=n(AZ,"A",{href:!0});var KMt=s(CU);lwr=r(KMt,"from_pretrained()"),KMt.forEach(t),iwr=r(AZ," class method or the "),wU=n(AZ,"A",{href:!0});var ZMt=s(wU);dwr=r(ZMt,"from_config()"),ZMt.forEach(t),cwr=r(AZ,` class
method.`),AZ.forEach(t),fwr=i(ql),U8=n(ql,"P",{});var Mje=s(U8);mwr=r(Mje,"This class cannot be instantiated directly using "),qve=n(Mje,"CODE",{});var eEt=s(qve);gwr=r(eEt,"__init__()"),eEt.forEach(t),hwr=r(Mje," (throws an error)."),Mje.forEach(t),pwr=i(ql),jt=n(ql,"DIV",{class:!0});var T0=s(jt);T(J8.$$.fragment,T0),uwr=i(T0),Nve=n(T0,"P",{});var oEt=s(Nve);_wr=r(oEt,"Instantiates one of the base model classes of the library from a configuration."),oEt.forEach(t),bwr=i(T0),Lc=n(T0,"P",{});var yZ=s(Lc);vwr=r(yZ,`Note:
Loading a model from its configuration file does `),jve=n(yZ,"STRONG",{});var rEt=s(jve);Fwr=r(rEt,"not"),rEt.forEach(t),Twr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(yZ,"A",{href:!0});var tEt=s(AU);Mwr=r(tEt,"from_pretrained()"),tEt.forEach(t),Ewr=r(yZ," to load the model weights."),yZ.forEach(t),Cwr=i(T0),T(U5.$$.fragment,T0),T0.forEach(t),wwr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Y8.$$.fragment,Nl),Awr=i(Nl),Dve=n(Nl,"P",{});var aEt=s(Dve);ywr=r(aEt,"Instantiate one of the base model classes of the library from a pretrained model."),aEt.forEach(t),Lwr=i(Nl),gn=n(Nl,"P",{});var M0=s(gn);xwr=r(M0,"The model class to instantiate is selected based on the "),Gve=n(M0,"CODE",{});var nEt=s(Gve);$wr=r(nEt,"model_type"),nEt.forEach(t),kwr=r(M0,` property of the config object (either
passed as an argument or loaded from `),Ove=n(M0,"CODE",{});var sEt=s(Ove);Swr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),Rwr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(M0,"CODE",{});var lEt=s(Vve);Pwr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),Bwr=r(M0,":"),M0.forEach(t),Iwr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);J5=n(ne,"LI",{});var NRe=s(J5);Xve=n(NRe,"STRONG",{});var iEt=s(Xve);qwr=r(iEt,"albert"),iEt.forEach(t),Nwr=r(NRe," \u2014 "),yU=n(NRe,"A",{href:!0});var dEt=s(yU);jwr=r(dEt,"FlaxAlbertModel"),dEt.forEach(t),Dwr=r(NRe," (ALBERT model)"),NRe.forEach(t),Gwr=i(ne),Y5=n(ne,"LI",{});var jRe=s(Y5);zve=n(jRe,"STRONG",{});var cEt=s(zve);Owr=r(cEt,"bart"),cEt.forEach(t),Vwr=r(jRe," \u2014 "),LU=n(jRe,"A",{href:!0});var fEt=s(LU);Xwr=r(fEt,"FlaxBartModel"),fEt.forEach(t),zwr=r(jRe," (BART model)"),jRe.forEach(t),Qwr=i(ne),K5=n(ne,"LI",{});var DRe=s(K5);Qve=n(DRe,"STRONG",{});var mEt=s(Qve);Wwr=r(mEt,"beit"),mEt.forEach(t),Hwr=r(DRe," \u2014 "),xU=n(DRe,"A",{href:!0});var gEt=s(xU);Uwr=r(gEt,"FlaxBeitModel"),gEt.forEach(t),Jwr=r(DRe," (BEiT model)"),DRe.forEach(t),Ywr=i(ne),Z5=n(ne,"LI",{});var GRe=s(Z5);Wve=n(GRe,"STRONG",{});var hEt=s(Wve);Kwr=r(hEt,"bert"),hEt.forEach(t),Zwr=r(GRe," \u2014 "),$U=n(GRe,"A",{href:!0});var pEt=s($U);eAr=r(pEt,"FlaxBertModel"),pEt.forEach(t),oAr=r(GRe," (BERT model)"),GRe.forEach(t),rAr=i(ne),eC=n(ne,"LI",{});var ORe=s(eC);Hve=n(ORe,"STRONG",{});var uEt=s(Hve);tAr=r(uEt,"big_bird"),uEt.forEach(t),aAr=r(ORe," \u2014 "),kU=n(ORe,"A",{href:!0});var _Et=s(kU);nAr=r(_Et,"FlaxBigBirdModel"),_Et.forEach(t),sAr=r(ORe," (BigBird model)"),ORe.forEach(t),lAr=i(ne),oC=n(ne,"LI",{});var VRe=s(oC);Uve=n(VRe,"STRONG",{});var bEt=s(Uve);iAr=r(bEt,"blenderbot"),bEt.forEach(t),dAr=r(VRe," \u2014 "),SU=n(VRe,"A",{href:!0});var vEt=s(SU);cAr=r(vEt,"FlaxBlenderbotModel"),vEt.forEach(t),fAr=r(VRe," (Blenderbot model)"),VRe.forEach(t),mAr=i(ne),rC=n(ne,"LI",{});var XRe=s(rC);Jve=n(XRe,"STRONG",{});var FEt=s(Jve);gAr=r(FEt,"blenderbot-small"),FEt.forEach(t),hAr=r(XRe," \u2014 "),RU=n(XRe,"A",{href:!0});var TEt=s(RU);pAr=r(TEt,"FlaxBlenderbotSmallModel"),TEt.forEach(t),uAr=r(XRe," (BlenderbotSmall model)"),XRe.forEach(t),_Ar=i(ne),tC=n(ne,"LI",{});var zRe=s(tC);Yve=n(zRe,"STRONG",{});var MEt=s(Yve);bAr=r(MEt,"clip"),MEt.forEach(t),vAr=r(zRe," \u2014 "),PU=n(zRe,"A",{href:!0});var EEt=s(PU);FAr=r(EEt,"FlaxCLIPModel"),EEt.forEach(t),TAr=r(zRe," (CLIP model)"),zRe.forEach(t),MAr=i(ne),aC=n(ne,"LI",{});var QRe=s(aC);Kve=n(QRe,"STRONG",{});var CEt=s(Kve);EAr=r(CEt,"distilbert"),CEt.forEach(t),CAr=r(QRe," \u2014 "),BU=n(QRe,"A",{href:!0});var wEt=s(BU);wAr=r(wEt,"FlaxDistilBertModel"),wEt.forEach(t),AAr=r(QRe," (DistilBERT model)"),QRe.forEach(t),yAr=i(ne),nC=n(ne,"LI",{});var WRe=s(nC);Zve=n(WRe,"STRONG",{});var AEt=s(Zve);LAr=r(AEt,"electra"),AEt.forEach(t),xAr=r(WRe," \u2014 "),IU=n(WRe,"A",{href:!0});var yEt=s(IU);$Ar=r(yEt,"FlaxElectraModel"),yEt.forEach(t),kAr=r(WRe," (ELECTRA model)"),WRe.forEach(t),SAr=i(ne),sC=n(ne,"LI",{});var HRe=s(sC);eFe=n(HRe,"STRONG",{});var LEt=s(eFe);RAr=r(LEt,"gpt2"),LEt.forEach(t),PAr=r(HRe," \u2014 "),qU=n(HRe,"A",{href:!0});var xEt=s(qU);BAr=r(xEt,"FlaxGPT2Model"),xEt.forEach(t),IAr=r(HRe," (OpenAI GPT-2 model)"),HRe.forEach(t),qAr=i(ne),lC=n(ne,"LI",{});var URe=s(lC);oFe=n(URe,"STRONG",{});var $Et=s(oFe);NAr=r($Et,"gpt_neo"),$Et.forEach(t),jAr=r(URe," \u2014 "),NU=n(URe,"A",{href:!0});var kEt=s(NU);DAr=r(kEt,"FlaxGPTNeoModel"),kEt.forEach(t),GAr=r(URe," (GPT Neo model)"),URe.forEach(t),OAr=i(ne),iC=n(ne,"LI",{});var JRe=s(iC);rFe=n(JRe,"STRONG",{});var SEt=s(rFe);VAr=r(SEt,"gptj"),SEt.forEach(t),XAr=r(JRe," \u2014 "),jU=n(JRe,"A",{href:!0});var REt=s(jU);zAr=r(REt,"FlaxGPTJModel"),REt.forEach(t),QAr=r(JRe," (GPT-J model)"),JRe.forEach(t),WAr=i(ne),dC=n(ne,"LI",{});var YRe=s(dC);tFe=n(YRe,"STRONG",{});var PEt=s(tFe);HAr=r(PEt,"marian"),PEt.forEach(t),UAr=r(YRe," \u2014 "),DU=n(YRe,"A",{href:!0});var BEt=s(DU);JAr=r(BEt,"FlaxMarianModel"),BEt.forEach(t),YAr=r(YRe," (Marian model)"),YRe.forEach(t),KAr=i(ne),cC=n(ne,"LI",{});var KRe=s(cC);aFe=n(KRe,"STRONG",{});var IEt=s(aFe);ZAr=r(IEt,"mbart"),IEt.forEach(t),e0r=r(KRe," \u2014 "),GU=n(KRe,"A",{href:!0});var qEt=s(GU);o0r=r(qEt,"FlaxMBartModel"),qEt.forEach(t),r0r=r(KRe," (mBART model)"),KRe.forEach(t),t0r=i(ne),fC=n(ne,"LI",{});var ZRe=s(fC);nFe=n(ZRe,"STRONG",{});var NEt=s(nFe);a0r=r(NEt,"mt5"),NEt.forEach(t),n0r=r(ZRe," \u2014 "),OU=n(ZRe,"A",{href:!0});var jEt=s(OU);s0r=r(jEt,"FlaxMT5Model"),jEt.forEach(t),l0r=r(ZRe," (mT5 model)"),ZRe.forEach(t),i0r=i(ne),mC=n(ne,"LI",{});var ePe=s(mC);sFe=n(ePe,"STRONG",{});var DEt=s(sFe);d0r=r(DEt,"pegasus"),DEt.forEach(t),c0r=r(ePe," \u2014 "),VU=n(ePe,"A",{href:!0});var GEt=s(VU);f0r=r(GEt,"FlaxPegasusModel"),GEt.forEach(t),m0r=r(ePe," (Pegasus model)"),ePe.forEach(t),g0r=i(ne),gC=n(ne,"LI",{});var oPe=s(gC);lFe=n(oPe,"STRONG",{});var OEt=s(lFe);h0r=r(OEt,"roberta"),OEt.forEach(t),p0r=r(oPe," \u2014 "),XU=n(oPe,"A",{href:!0});var VEt=s(XU);u0r=r(VEt,"FlaxRobertaModel"),VEt.forEach(t),_0r=r(oPe," (RoBERTa model)"),oPe.forEach(t),b0r=i(ne),hC=n(ne,"LI",{});var rPe=s(hC);iFe=n(rPe,"STRONG",{});var XEt=s(iFe);v0r=r(XEt,"roformer"),XEt.forEach(t),F0r=r(rPe," \u2014 "),zU=n(rPe,"A",{href:!0});var zEt=s(zU);T0r=r(zEt,"FlaxRoFormerModel"),zEt.forEach(t),M0r=r(rPe," (RoFormer model)"),rPe.forEach(t),E0r=i(ne),pC=n(ne,"LI",{});var tPe=s(pC);dFe=n(tPe,"STRONG",{});var QEt=s(dFe);C0r=r(QEt,"t5"),QEt.forEach(t),w0r=r(tPe," \u2014 "),QU=n(tPe,"A",{href:!0});var WEt=s(QU);A0r=r(WEt,"FlaxT5Model"),WEt.forEach(t),y0r=r(tPe," (T5 model)"),tPe.forEach(t),L0r=i(ne),uC=n(ne,"LI",{});var aPe=s(uC);cFe=n(aPe,"STRONG",{});var HEt=s(cFe);x0r=r(HEt,"vision-text-dual-encoder"),HEt.forEach(t),$0r=r(aPe," \u2014 "),WU=n(aPe,"A",{href:!0});var UEt=s(WU);k0r=r(UEt,"FlaxVisionTextDualEncoderModel"),UEt.forEach(t),S0r=r(aPe," (VisionTextDualEncoder model)"),aPe.forEach(t),R0r=i(ne),_C=n(ne,"LI",{});var nPe=s(_C);fFe=n(nPe,"STRONG",{});var JEt=s(fFe);P0r=r(JEt,"vit"),JEt.forEach(t),B0r=r(nPe," \u2014 "),HU=n(nPe,"A",{href:!0});var YEt=s(HU);I0r=r(YEt,"FlaxViTModel"),YEt.forEach(t),q0r=r(nPe," (ViT model)"),nPe.forEach(t),N0r=i(ne),bC=n(ne,"LI",{});var sPe=s(bC);mFe=n(sPe,"STRONG",{});var KEt=s(mFe);j0r=r(KEt,"wav2vec2"),KEt.forEach(t),D0r=r(sPe," \u2014 "),UU=n(sPe,"A",{href:!0});var ZEt=s(UU);G0r=r(ZEt,"FlaxWav2Vec2Model"),ZEt.forEach(t),O0r=r(sPe," (Wav2Vec2 model)"),sPe.forEach(t),V0r=i(ne),vC=n(ne,"LI",{});var lPe=s(vC);gFe=n(lPe,"STRONG",{});var e5t=s(gFe);X0r=r(e5t,"xglm"),e5t.forEach(t),z0r=r(lPe," \u2014 "),JU=n(lPe,"A",{href:!0});var o5t=s(JU);Q0r=r(o5t,"FlaxXGLMModel"),o5t.forEach(t),W0r=r(lPe," (XGLM model)"),lPe.forEach(t),H0r=i(ne),FC=n(ne,"LI",{});var iPe=s(FC);hFe=n(iPe,"STRONG",{});var r5t=s(hFe);U0r=r(r5t,"xlm-roberta"),r5t.forEach(t),J0r=r(iPe," \u2014 "),YU=n(iPe,"A",{href:!0});var t5t=s(YU);Y0r=r(t5t,"FlaxXLMRobertaModel"),t5t.forEach(t),K0r=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),ne.forEach(t),Z0r=i(Nl),T(TC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),uqe=i(f),xc=n(f,"H2",{class:!0});var Eje=s(xc);MC=n(Eje,"A",{id:!0,class:!0,href:!0});var a5t=s(MC);pFe=n(a5t,"SPAN",{});var n5t=s(pFe);T(K8.$$.fragment,n5t),n5t.forEach(t),a5t.forEach(t),e6r=i(Eje),uFe=n(Eje,"SPAN",{});var s5t=s(uFe);o6r=r(s5t,"FlaxAutoModelForCausalLM"),s5t.forEach(t),Eje.forEach(t),_qe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(Z8.$$.fragment,jl),r6r=i(jl),$c=n(jl,"P",{});var LZ=s($c);t6r=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KU=n(LZ,"A",{href:!0});var l5t=s(KU);a6r=r(l5t,"from_pretrained()"),l5t.forEach(t),n6r=r(LZ," class method or the "),ZU=n(LZ,"A",{href:!0});var i5t=s(ZU);s6r=r(i5t,"from_config()"),i5t.forEach(t),l6r=r(LZ,` class
method.`),LZ.forEach(t),i6r=i(jl),ex=n(jl,"P",{});var Cje=s(ex);d6r=r(Cje,"This class cannot be instantiated directly using "),_Fe=n(Cje,"CODE",{});var d5t=s(_Fe);c6r=r(d5t,"__init__()"),d5t.forEach(t),f6r=r(Cje," (throws an error)."),Cje.forEach(t),m6r=i(jl),Dt=n(jl,"DIV",{class:!0});var E0=s(Dt);T(ox.$$.fragment,E0),g6r=i(E0),bFe=n(E0,"P",{});var c5t=s(bFe);h6r=r(c5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),c5t.forEach(t),p6r=i(E0),kc=n(E0,"P",{});var xZ=s(kc);u6r=r(xZ,`Note:
Loading a model from its configuration file does `),vFe=n(xZ,"STRONG",{});var f5t=s(vFe);_6r=r(f5t,"not"),f5t.forEach(t),b6r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(xZ,"A",{href:!0});var m5t=s(eJ);v6r=r(m5t,"from_pretrained()"),m5t.forEach(t),F6r=r(xZ," to load the model weights."),xZ.forEach(t),T6r=i(E0),T(EC.$$.fragment,E0),E0.forEach(t),M6r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(rx.$$.fragment,Dl),E6r=i(Dl),FFe=n(Dl,"P",{});var g5t=s(FFe);C6r=r(g5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),g5t.forEach(t),w6r=i(Dl),hn=n(Dl,"P",{});var C0=s(hn);A6r=r(C0,"The model class to instantiate is selected based on the "),TFe=n(C0,"CODE",{});var h5t=s(TFe);y6r=r(h5t,"model_type"),h5t.forEach(t),L6r=r(C0,` property of the config object (either
passed as an argument or loaded from `),MFe=n(C0,"CODE",{});var p5t=s(MFe);x6r=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),$6r=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(C0,"CODE",{});var u5t=s(EFe);k6r=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),S6r=r(C0,":"),C0.forEach(t),R6r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);CC=n(Oe,"LI",{});var dPe=s(CC);CFe=n(dPe,"STRONG",{});var _5t=s(CFe);P6r=r(_5t,"bart"),_5t.forEach(t),B6r=r(dPe," \u2014 "),oJ=n(dPe,"A",{href:!0});var b5t=s(oJ);I6r=r(b5t,"FlaxBartForCausalLM"),b5t.forEach(t),q6r=r(dPe," (BART model)"),dPe.forEach(t),N6r=i(Oe),wC=n(Oe,"LI",{});var cPe=s(wC);wFe=n(cPe,"STRONG",{});var v5t=s(wFe);j6r=r(v5t,"bert"),v5t.forEach(t),D6r=r(cPe," \u2014 "),rJ=n(cPe,"A",{href:!0});var F5t=s(rJ);G6r=r(F5t,"FlaxBertForCausalLM"),F5t.forEach(t),O6r=r(cPe," (BERT model)"),cPe.forEach(t),V6r=i(Oe),AC=n(Oe,"LI",{});var fPe=s(AC);AFe=n(fPe,"STRONG",{});var T5t=s(AFe);X6r=r(T5t,"big_bird"),T5t.forEach(t),z6r=r(fPe," \u2014 "),tJ=n(fPe,"A",{href:!0});var M5t=s(tJ);Q6r=r(M5t,"FlaxBigBirdForCausalLM"),M5t.forEach(t),W6r=r(fPe," (BigBird model)"),fPe.forEach(t),H6r=i(Oe),yC=n(Oe,"LI",{});var mPe=s(yC);yFe=n(mPe,"STRONG",{});var E5t=s(yFe);U6r=r(E5t,"electra"),E5t.forEach(t),J6r=r(mPe," \u2014 "),aJ=n(mPe,"A",{href:!0});var C5t=s(aJ);Y6r=r(C5t,"FlaxElectraForCausalLM"),C5t.forEach(t),K6r=r(mPe," (ELECTRA model)"),mPe.forEach(t),Z6r=i(Oe),LC=n(Oe,"LI",{});var gPe=s(LC);LFe=n(gPe,"STRONG",{});var w5t=s(LFe);eyr=r(w5t,"gpt2"),w5t.forEach(t),oyr=r(gPe," \u2014 "),nJ=n(gPe,"A",{href:!0});var A5t=s(nJ);ryr=r(A5t,"FlaxGPT2LMHeadModel"),A5t.forEach(t),tyr=r(gPe," (OpenAI GPT-2 model)"),gPe.forEach(t),ayr=i(Oe),xC=n(Oe,"LI",{});var hPe=s(xC);xFe=n(hPe,"STRONG",{});var y5t=s(xFe);nyr=r(y5t,"gpt_neo"),y5t.forEach(t),syr=r(hPe," \u2014 "),sJ=n(hPe,"A",{href:!0});var L5t=s(sJ);lyr=r(L5t,"FlaxGPTNeoForCausalLM"),L5t.forEach(t),iyr=r(hPe," (GPT Neo model)"),hPe.forEach(t),dyr=i(Oe),$C=n(Oe,"LI",{});var pPe=s($C);$Fe=n(pPe,"STRONG",{});var x5t=s($Fe);cyr=r(x5t,"gptj"),x5t.forEach(t),fyr=r(pPe," \u2014 "),lJ=n(pPe,"A",{href:!0});var $5t=s(lJ);myr=r($5t,"FlaxGPTJForCausalLM"),$5t.forEach(t),gyr=r(pPe," (GPT-J model)"),pPe.forEach(t),hyr=i(Oe),kC=n(Oe,"LI",{});var uPe=s(kC);kFe=n(uPe,"STRONG",{});var k5t=s(kFe);pyr=r(k5t,"roberta"),k5t.forEach(t),uyr=r(uPe," \u2014 "),iJ=n(uPe,"A",{href:!0});var S5t=s(iJ);_yr=r(S5t,"FlaxRobertaForCausalLM"),S5t.forEach(t),byr=r(uPe," (RoBERTa model)"),uPe.forEach(t),vyr=i(Oe),SC=n(Oe,"LI",{});var _Pe=s(SC);SFe=n(_Pe,"STRONG",{});var R5t=s(SFe);Fyr=r(R5t,"xglm"),R5t.forEach(t),Tyr=r(_Pe," \u2014 "),dJ=n(_Pe,"A",{href:!0});var P5t=s(dJ);Myr=r(P5t,"FlaxXGLMForCausalLM"),P5t.forEach(t),Eyr=r(_Pe," (XGLM model)"),_Pe.forEach(t),Oe.forEach(t),Cyr=i(Dl),T(RC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),bqe=i(f),Sc=n(f,"H2",{class:!0});var wje=s(Sc);PC=n(wje,"A",{id:!0,class:!0,href:!0});var B5t=s(PC);RFe=n(B5t,"SPAN",{});var I5t=s(RFe);T(tx.$$.fragment,I5t),I5t.forEach(t),B5t.forEach(t),wyr=i(wje),PFe=n(wje,"SPAN",{});var q5t=s(PFe);Ayr=r(q5t,"FlaxAutoModelForPreTraining"),q5t.forEach(t),wje.forEach(t),vqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(ax.$$.fragment,Gl),yyr=i(Gl),Rc=n(Gl,"P",{});var $Z=s(Rc);Lyr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cJ=n($Z,"A",{href:!0});var N5t=s(cJ);xyr=r(N5t,"from_pretrained()"),N5t.forEach(t),$yr=r($Z," class method or the "),fJ=n($Z,"A",{href:!0});var j5t=s(fJ);kyr=r(j5t,"from_config()"),j5t.forEach(t),Syr=r($Z,` class
method.`),$Z.forEach(t),Ryr=i(Gl),nx=n(Gl,"P",{});var Aje=s(nx);Pyr=r(Aje,"This class cannot be instantiated directly using "),BFe=n(Aje,"CODE",{});var D5t=s(BFe);Byr=r(D5t,"__init__()"),D5t.forEach(t),Iyr=r(Aje," (throws an error)."),Aje.forEach(t),qyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var w0=s(Gt);T(sx.$$.fragment,w0),Nyr=i(w0),IFe=n(w0,"P",{});var G5t=s(IFe);jyr=r(G5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),G5t.forEach(t),Dyr=i(w0),Pc=n(w0,"P",{});var kZ=s(Pc);Gyr=r(kZ,`Note:
Loading a model from its configuration file does `),qFe=n(kZ,"STRONG",{});var O5t=s(qFe);Oyr=r(O5t,"not"),O5t.forEach(t),Vyr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(kZ,"A",{href:!0});var V5t=s(mJ);Xyr=r(V5t,"from_pretrained()"),V5t.forEach(t),zyr=r(kZ," to load the model weights."),kZ.forEach(t),Qyr=i(w0),T(BC.$$.fragment,w0),w0.forEach(t),Wyr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(lx.$$.fragment,Ol),Hyr=i(Ol),NFe=n(Ol,"P",{});var X5t=s(NFe);Uyr=r(X5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X5t.forEach(t),Jyr=i(Ol),pn=n(Ol,"P",{});var A0=s(pn);Yyr=r(A0,"The model class to instantiate is selected based on the "),jFe=n(A0,"CODE",{});var z5t=s(jFe);Kyr=r(z5t,"model_type"),z5t.forEach(t),Zyr=r(A0,` property of the config object (either
passed as an argument or loaded from `),DFe=n(A0,"CODE",{});var Q5t=s(DFe);eLr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),oLr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(A0,"CODE",{});var W5t=s(GFe);rLr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),tLr=r(A0,":"),A0.forEach(t),aLr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);IC=n(we,"LI",{});var bPe=s(IC);OFe=n(bPe,"STRONG",{});var H5t=s(OFe);nLr=r(H5t,"albert"),H5t.forEach(t),sLr=r(bPe," \u2014 "),gJ=n(bPe,"A",{href:!0});var U5t=s(gJ);lLr=r(U5t,"FlaxAlbertForPreTraining"),U5t.forEach(t),iLr=r(bPe," (ALBERT model)"),bPe.forEach(t),dLr=i(we),qC=n(we,"LI",{});var vPe=s(qC);VFe=n(vPe,"STRONG",{});var J5t=s(VFe);cLr=r(J5t,"bart"),J5t.forEach(t),fLr=r(vPe," \u2014 "),hJ=n(vPe,"A",{href:!0});var Y5t=s(hJ);mLr=r(Y5t,"FlaxBartForConditionalGeneration"),Y5t.forEach(t),gLr=r(vPe," (BART model)"),vPe.forEach(t),hLr=i(we),NC=n(we,"LI",{});var FPe=s(NC);XFe=n(FPe,"STRONG",{});var K5t=s(XFe);pLr=r(K5t,"bert"),K5t.forEach(t),uLr=r(FPe," \u2014 "),pJ=n(FPe,"A",{href:!0});var Z5t=s(pJ);_Lr=r(Z5t,"FlaxBertForPreTraining"),Z5t.forEach(t),bLr=r(FPe," (BERT model)"),FPe.forEach(t),vLr=i(we),jC=n(we,"LI",{});var TPe=s(jC);zFe=n(TPe,"STRONG",{});var eCt=s(zFe);FLr=r(eCt,"big_bird"),eCt.forEach(t),TLr=r(TPe," \u2014 "),uJ=n(TPe,"A",{href:!0});var oCt=s(uJ);MLr=r(oCt,"FlaxBigBirdForPreTraining"),oCt.forEach(t),ELr=r(TPe," (BigBird model)"),TPe.forEach(t),CLr=i(we),DC=n(we,"LI",{});var MPe=s(DC);QFe=n(MPe,"STRONG",{});var rCt=s(QFe);wLr=r(rCt,"electra"),rCt.forEach(t),ALr=r(MPe," \u2014 "),_J=n(MPe,"A",{href:!0});var tCt=s(_J);yLr=r(tCt,"FlaxElectraForPreTraining"),tCt.forEach(t),LLr=r(MPe," (ELECTRA model)"),MPe.forEach(t),xLr=i(we),GC=n(we,"LI",{});var EPe=s(GC);WFe=n(EPe,"STRONG",{});var aCt=s(WFe);$Lr=r(aCt,"mbart"),aCt.forEach(t),kLr=r(EPe," \u2014 "),bJ=n(EPe,"A",{href:!0});var nCt=s(bJ);SLr=r(nCt,"FlaxMBartForConditionalGeneration"),nCt.forEach(t),RLr=r(EPe," (mBART model)"),EPe.forEach(t),PLr=i(we),OC=n(we,"LI",{});var CPe=s(OC);HFe=n(CPe,"STRONG",{});var sCt=s(HFe);BLr=r(sCt,"mt5"),sCt.forEach(t),ILr=r(CPe," \u2014 "),vJ=n(CPe,"A",{href:!0});var lCt=s(vJ);qLr=r(lCt,"FlaxMT5ForConditionalGeneration"),lCt.forEach(t),NLr=r(CPe," (mT5 model)"),CPe.forEach(t),jLr=i(we),VC=n(we,"LI",{});var wPe=s(VC);UFe=n(wPe,"STRONG",{});var iCt=s(UFe);DLr=r(iCt,"roberta"),iCt.forEach(t),GLr=r(wPe," \u2014 "),FJ=n(wPe,"A",{href:!0});var dCt=s(FJ);OLr=r(dCt,"FlaxRobertaForMaskedLM"),dCt.forEach(t),VLr=r(wPe," (RoBERTa model)"),wPe.forEach(t),XLr=i(we),XC=n(we,"LI",{});var APe=s(XC);JFe=n(APe,"STRONG",{});var cCt=s(JFe);zLr=r(cCt,"roformer"),cCt.forEach(t),QLr=r(APe," \u2014 "),TJ=n(APe,"A",{href:!0});var fCt=s(TJ);WLr=r(fCt,"FlaxRoFormerForMaskedLM"),fCt.forEach(t),HLr=r(APe," (RoFormer model)"),APe.forEach(t),ULr=i(we),zC=n(we,"LI",{});var yPe=s(zC);YFe=n(yPe,"STRONG",{});var mCt=s(YFe);JLr=r(mCt,"t5"),mCt.forEach(t),YLr=r(yPe," \u2014 "),MJ=n(yPe,"A",{href:!0});var gCt=s(MJ);KLr=r(gCt,"FlaxT5ForConditionalGeneration"),gCt.forEach(t),ZLr=r(yPe," (T5 model)"),yPe.forEach(t),e8r=i(we),QC=n(we,"LI",{});var LPe=s(QC);KFe=n(LPe,"STRONG",{});var hCt=s(KFe);o8r=r(hCt,"wav2vec2"),hCt.forEach(t),r8r=r(LPe," \u2014 "),EJ=n(LPe,"A",{href:!0});var pCt=s(EJ);t8r=r(pCt,"FlaxWav2Vec2ForPreTraining"),pCt.forEach(t),a8r=r(LPe," (Wav2Vec2 model)"),LPe.forEach(t),n8r=i(we),WC=n(we,"LI",{});var xPe=s(WC);ZFe=n(xPe,"STRONG",{});var uCt=s(ZFe);s8r=r(uCt,"xlm-roberta"),uCt.forEach(t),l8r=r(xPe," \u2014 "),CJ=n(xPe,"A",{href:!0});var _Ct=s(CJ);i8r=r(_Ct,"FlaxXLMRobertaForMaskedLM"),_Ct.forEach(t),d8r=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),we.forEach(t),c8r=i(Ol),T(HC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Fqe=i(f),Bc=n(f,"H2",{class:!0});var yje=s(Bc);UC=n(yje,"A",{id:!0,class:!0,href:!0});var bCt=s(UC);eTe=n(bCt,"SPAN",{});var vCt=s(eTe);T(ix.$$.fragment,vCt),vCt.forEach(t),bCt.forEach(t),f8r=i(yje),oTe=n(yje,"SPAN",{});var FCt=s(oTe);m8r=r(FCt,"FlaxAutoModelForMaskedLM"),FCt.forEach(t),yje.forEach(t),Tqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(dx.$$.fragment,Vl),g8r=i(Vl),Ic=n(Vl,"P",{});var SZ=s(Ic);h8r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wJ=n(SZ,"A",{href:!0});var TCt=s(wJ);p8r=r(TCt,"from_pretrained()"),TCt.forEach(t),u8r=r(SZ," class method or the "),AJ=n(SZ,"A",{href:!0});var MCt=s(AJ);_8r=r(MCt,"from_config()"),MCt.forEach(t),b8r=r(SZ,` class
method.`),SZ.forEach(t),v8r=i(Vl),cx=n(Vl,"P",{});var Lje=s(cx);F8r=r(Lje,"This class cannot be instantiated directly using "),rTe=n(Lje,"CODE",{});var ECt=s(rTe);T8r=r(ECt,"__init__()"),ECt.forEach(t),M8r=r(Lje," (throws an error)."),Lje.forEach(t),E8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var y0=s(Ot);T(fx.$$.fragment,y0),C8r=i(y0),tTe=n(y0,"P",{});var CCt=s(tTe);w8r=r(CCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),CCt.forEach(t),A8r=i(y0),qc=n(y0,"P",{});var RZ=s(qc);y8r=r(RZ,`Note:
Loading a model from its configuration file does `),aTe=n(RZ,"STRONG",{});var wCt=s(aTe);L8r=r(wCt,"not"),wCt.forEach(t),x8r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(RZ,"A",{href:!0});var ACt=s(yJ);$8r=r(ACt,"from_pretrained()"),ACt.forEach(t),k8r=r(RZ," to load the model weights."),RZ.forEach(t),S8r=i(y0),T(JC.$$.fragment,y0),y0.forEach(t),R8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(mx.$$.fragment,Xl),P8r=i(Xl),nTe=n(Xl,"P",{});var yCt=s(nTe);B8r=r(yCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yCt.forEach(t),I8r=i(Xl),un=n(Xl,"P",{});var L0=s(un);q8r=r(L0,"The model class to instantiate is selected based on the "),sTe=n(L0,"CODE",{});var LCt=s(sTe);N8r=r(LCt,"model_type"),LCt.forEach(t),j8r=r(L0,` property of the config object (either
passed as an argument or loaded from `),lTe=n(L0,"CODE",{});var xCt=s(lTe);D8r=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),G8r=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(L0,"CODE",{});var $Ct=s(iTe);O8r=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),V8r=r(L0,":"),L0.forEach(t),X8r=i(Xl),Le=n(Xl,"UL",{});var Pe=s(Le);YC=n(Pe,"LI",{});var $Pe=s(YC);dTe=n($Pe,"STRONG",{});var kCt=s(dTe);z8r=r(kCt,"albert"),kCt.forEach(t),Q8r=r($Pe," \u2014 "),LJ=n($Pe,"A",{href:!0});var SCt=s(LJ);W8r=r(SCt,"FlaxAlbertForMaskedLM"),SCt.forEach(t),H8r=r($Pe," (ALBERT model)"),$Pe.forEach(t),U8r=i(Pe),KC=n(Pe,"LI",{});var kPe=s(KC);cTe=n(kPe,"STRONG",{});var RCt=s(cTe);J8r=r(RCt,"bart"),RCt.forEach(t),Y8r=r(kPe," \u2014 "),xJ=n(kPe,"A",{href:!0});var PCt=s(xJ);K8r=r(PCt,"FlaxBartForConditionalGeneration"),PCt.forEach(t),Z8r=r(kPe," (BART model)"),kPe.forEach(t),exr=i(Pe),ZC=n(Pe,"LI",{});var SPe=s(ZC);fTe=n(SPe,"STRONG",{});var BCt=s(fTe);oxr=r(BCt,"bert"),BCt.forEach(t),rxr=r(SPe," \u2014 "),$J=n(SPe,"A",{href:!0});var ICt=s($J);txr=r(ICt,"FlaxBertForMaskedLM"),ICt.forEach(t),axr=r(SPe," (BERT model)"),SPe.forEach(t),nxr=i(Pe),e3=n(Pe,"LI",{});var RPe=s(e3);mTe=n(RPe,"STRONG",{});var qCt=s(mTe);sxr=r(qCt,"big_bird"),qCt.forEach(t),lxr=r(RPe," \u2014 "),kJ=n(RPe,"A",{href:!0});var NCt=s(kJ);ixr=r(NCt,"FlaxBigBirdForMaskedLM"),NCt.forEach(t),dxr=r(RPe," (BigBird model)"),RPe.forEach(t),cxr=i(Pe),o3=n(Pe,"LI",{});var PPe=s(o3);gTe=n(PPe,"STRONG",{});var jCt=s(gTe);fxr=r(jCt,"distilbert"),jCt.forEach(t),mxr=r(PPe," \u2014 "),SJ=n(PPe,"A",{href:!0});var DCt=s(SJ);gxr=r(DCt,"FlaxDistilBertForMaskedLM"),DCt.forEach(t),hxr=r(PPe," (DistilBERT model)"),PPe.forEach(t),pxr=i(Pe),r3=n(Pe,"LI",{});var BPe=s(r3);hTe=n(BPe,"STRONG",{});var GCt=s(hTe);uxr=r(GCt,"electra"),GCt.forEach(t),_xr=r(BPe," \u2014 "),RJ=n(BPe,"A",{href:!0});var OCt=s(RJ);bxr=r(OCt,"FlaxElectraForMaskedLM"),OCt.forEach(t),vxr=r(BPe," (ELECTRA model)"),BPe.forEach(t),Fxr=i(Pe),t3=n(Pe,"LI",{});var IPe=s(t3);pTe=n(IPe,"STRONG",{});var VCt=s(pTe);Txr=r(VCt,"mbart"),VCt.forEach(t),Mxr=r(IPe," \u2014 "),PJ=n(IPe,"A",{href:!0});var XCt=s(PJ);Exr=r(XCt,"FlaxMBartForConditionalGeneration"),XCt.forEach(t),Cxr=r(IPe," (mBART model)"),IPe.forEach(t),wxr=i(Pe),a3=n(Pe,"LI",{});var qPe=s(a3);uTe=n(qPe,"STRONG",{});var zCt=s(uTe);Axr=r(zCt,"roberta"),zCt.forEach(t),yxr=r(qPe," \u2014 "),BJ=n(qPe,"A",{href:!0});var QCt=s(BJ);Lxr=r(QCt,"FlaxRobertaForMaskedLM"),QCt.forEach(t),xxr=r(qPe," (RoBERTa model)"),qPe.forEach(t),$xr=i(Pe),n3=n(Pe,"LI",{});var NPe=s(n3);_Te=n(NPe,"STRONG",{});var WCt=s(_Te);kxr=r(WCt,"roformer"),WCt.forEach(t),Sxr=r(NPe," \u2014 "),IJ=n(NPe,"A",{href:!0});var HCt=s(IJ);Rxr=r(HCt,"FlaxRoFormerForMaskedLM"),HCt.forEach(t),Pxr=r(NPe," (RoFormer model)"),NPe.forEach(t),Bxr=i(Pe),s3=n(Pe,"LI",{});var jPe=s(s3);bTe=n(jPe,"STRONG",{});var UCt=s(bTe);Ixr=r(UCt,"xlm-roberta"),UCt.forEach(t),qxr=r(jPe," \u2014 "),qJ=n(jPe,"A",{href:!0});var JCt=s(qJ);Nxr=r(JCt,"FlaxXLMRobertaForMaskedLM"),JCt.forEach(t),jxr=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),Pe.forEach(t),Dxr=i(Xl),T(l3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Mqe=i(f),Nc=n(f,"H2",{class:!0});var xje=s(Nc);i3=n(xje,"A",{id:!0,class:!0,href:!0});var YCt=s(i3);vTe=n(YCt,"SPAN",{});var KCt=s(vTe);T(gx.$$.fragment,KCt),KCt.forEach(t),YCt.forEach(t),Gxr=i(xje),FTe=n(xje,"SPAN",{});var ZCt=s(FTe);Oxr=r(ZCt,"FlaxAutoModelForSeq2SeqLM"),ZCt.forEach(t),xje.forEach(t),Eqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(hx.$$.fragment,zl),Vxr=i(zl),jc=n(zl,"P",{});var PZ=s(jc);Xxr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NJ=n(PZ,"A",{href:!0});var e3t=s(NJ);zxr=r(e3t,"from_pretrained()"),e3t.forEach(t),Qxr=r(PZ," class method or the "),jJ=n(PZ,"A",{href:!0});var o3t=s(jJ);Wxr=r(o3t,"from_config()"),o3t.forEach(t),Hxr=r(PZ,` class
method.`),PZ.forEach(t),Uxr=i(zl),px=n(zl,"P",{});var $je=s(px);Jxr=r($je,"This class cannot be instantiated directly using "),TTe=n($je,"CODE",{});var r3t=s(TTe);Yxr=r(r3t,"__init__()"),r3t.forEach(t),Kxr=r($je," (throws an error)."),$je.forEach(t),Zxr=i(zl),Vt=n(zl,"DIV",{class:!0});var x0=s(Vt);T(ux.$$.fragment,x0),e9r=i(x0),MTe=n(x0,"P",{});var t3t=s(MTe);o9r=r(t3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t3t.forEach(t),r9r=i(x0),Dc=n(x0,"P",{});var BZ=s(Dc);t9r=r(BZ,`Note:
Loading a model from its configuration file does `),ETe=n(BZ,"STRONG",{});var a3t=s(ETe);a9r=r(a3t,"not"),a3t.forEach(t),n9r=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(BZ,"A",{href:!0});var n3t=s(DJ);s9r=r(n3t,"from_pretrained()"),n3t.forEach(t),l9r=r(BZ," to load the model weights."),BZ.forEach(t),i9r=i(x0),T(d3.$$.fragment,x0),x0.forEach(t),d9r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(_x.$$.fragment,Ql),c9r=i(Ql),CTe=n(Ql,"P",{});var s3t=s(CTe);f9r=r(s3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s3t.forEach(t),m9r=i(Ql),_n=n(Ql,"P",{});var $0=s(_n);g9r=r($0,"The model class to instantiate is selected based on the "),wTe=n($0,"CODE",{});var l3t=s(wTe);h9r=r(l3t,"model_type"),l3t.forEach(t),p9r=r($0,` property of the config object (either
passed as an argument or loaded from `),ATe=n($0,"CODE",{});var i3t=s(ATe);u9r=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),_9r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n($0,"CODE",{});var d3t=s(yTe);b9r=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),v9r=r($0,":"),$0.forEach(t),F9r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);c3=n(Ve,"LI",{});var DPe=s(c3);LTe=n(DPe,"STRONG",{});var c3t=s(LTe);T9r=r(c3t,"bart"),c3t.forEach(t),M9r=r(DPe," \u2014 "),GJ=n(DPe,"A",{href:!0});var f3t=s(GJ);E9r=r(f3t,"FlaxBartForConditionalGeneration"),f3t.forEach(t),C9r=r(DPe," (BART model)"),DPe.forEach(t),w9r=i(Ve),f3=n(Ve,"LI",{});var GPe=s(f3);xTe=n(GPe,"STRONG",{});var m3t=s(xTe);A9r=r(m3t,"blenderbot"),m3t.forEach(t),y9r=r(GPe," \u2014 "),OJ=n(GPe,"A",{href:!0});var g3t=s(OJ);L9r=r(g3t,"FlaxBlenderbotForConditionalGeneration"),g3t.forEach(t),x9r=r(GPe," (Blenderbot model)"),GPe.forEach(t),$9r=i(Ve),m3=n(Ve,"LI",{});var OPe=s(m3);$Te=n(OPe,"STRONG",{});var h3t=s($Te);k9r=r(h3t,"blenderbot-small"),h3t.forEach(t),S9r=r(OPe," \u2014 "),VJ=n(OPe,"A",{href:!0});var p3t=s(VJ);R9r=r(p3t,"FlaxBlenderbotSmallForConditionalGeneration"),p3t.forEach(t),P9r=r(OPe," (BlenderbotSmall model)"),OPe.forEach(t),B9r=i(Ve),g3=n(Ve,"LI",{});var VPe=s(g3);kTe=n(VPe,"STRONG",{});var u3t=s(kTe);I9r=r(u3t,"encoder-decoder"),u3t.forEach(t),q9r=r(VPe," \u2014 "),XJ=n(VPe,"A",{href:!0});var _3t=s(XJ);N9r=r(_3t,"FlaxEncoderDecoderModel"),_3t.forEach(t),j9r=r(VPe," (Encoder decoder model)"),VPe.forEach(t),D9r=i(Ve),h3=n(Ve,"LI",{});var XPe=s(h3);STe=n(XPe,"STRONG",{});var b3t=s(STe);G9r=r(b3t,"marian"),b3t.forEach(t),O9r=r(XPe," \u2014 "),zJ=n(XPe,"A",{href:!0});var v3t=s(zJ);V9r=r(v3t,"FlaxMarianMTModel"),v3t.forEach(t),X9r=r(XPe," (Marian model)"),XPe.forEach(t),z9r=i(Ve),p3=n(Ve,"LI",{});var zPe=s(p3);RTe=n(zPe,"STRONG",{});var F3t=s(RTe);Q9r=r(F3t,"mbart"),F3t.forEach(t),W9r=r(zPe," \u2014 "),QJ=n(zPe,"A",{href:!0});var T3t=s(QJ);H9r=r(T3t,"FlaxMBartForConditionalGeneration"),T3t.forEach(t),U9r=r(zPe," (mBART model)"),zPe.forEach(t),J9r=i(Ve),u3=n(Ve,"LI",{});var QPe=s(u3);PTe=n(QPe,"STRONG",{});var M3t=s(PTe);Y9r=r(M3t,"mt5"),M3t.forEach(t),K9r=r(QPe," \u2014 "),WJ=n(QPe,"A",{href:!0});var E3t=s(WJ);Z9r=r(E3t,"FlaxMT5ForConditionalGeneration"),E3t.forEach(t),e$r=r(QPe," (mT5 model)"),QPe.forEach(t),o$r=i(Ve),_3=n(Ve,"LI",{});var WPe=s(_3);BTe=n(WPe,"STRONG",{});var C3t=s(BTe);r$r=r(C3t,"pegasus"),C3t.forEach(t),t$r=r(WPe," \u2014 "),HJ=n(WPe,"A",{href:!0});var w3t=s(HJ);a$r=r(w3t,"FlaxPegasusForConditionalGeneration"),w3t.forEach(t),n$r=r(WPe," (Pegasus model)"),WPe.forEach(t),s$r=i(Ve),b3=n(Ve,"LI",{});var HPe=s(b3);ITe=n(HPe,"STRONG",{});var A3t=s(ITe);l$r=r(A3t,"t5"),A3t.forEach(t),i$r=r(HPe," \u2014 "),UJ=n(HPe,"A",{href:!0});var y3t=s(UJ);d$r=r(y3t,"FlaxT5ForConditionalGeneration"),y3t.forEach(t),c$r=r(HPe," (T5 model)"),HPe.forEach(t),Ve.forEach(t),f$r=i(Ql),T(v3.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Cqe=i(f),Gc=n(f,"H2",{class:!0});var kje=s(Gc);F3=n(kje,"A",{id:!0,class:!0,href:!0});var L3t=s(F3);qTe=n(L3t,"SPAN",{});var x3t=s(qTe);T(bx.$$.fragment,x3t),x3t.forEach(t),L3t.forEach(t),m$r=i(kje),NTe=n(kje,"SPAN",{});var $3t=s(NTe);g$r=r($3t,"FlaxAutoModelForSequenceClassification"),$3t.forEach(t),kje.forEach(t),wqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(vx.$$.fragment,Wl),h$r=i(Wl),Oc=n(Wl,"P",{});var IZ=s(Oc);p$r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JJ=n(IZ,"A",{href:!0});var k3t=s(JJ);u$r=r(k3t,"from_pretrained()"),k3t.forEach(t),_$r=r(IZ," class method or the "),YJ=n(IZ,"A",{href:!0});var S3t=s(YJ);b$r=r(S3t,"from_config()"),S3t.forEach(t),v$r=r(IZ,` class
method.`),IZ.forEach(t),F$r=i(Wl),Fx=n(Wl,"P",{});var Sje=s(Fx);T$r=r(Sje,"This class cannot be instantiated directly using "),jTe=n(Sje,"CODE",{});var R3t=s(jTe);M$r=r(R3t,"__init__()"),R3t.forEach(t),E$r=r(Sje," (throws an error)."),Sje.forEach(t),C$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var k0=s(Xt);T(Tx.$$.fragment,k0),w$r=i(k0),DTe=n(k0,"P",{});var P3t=s(DTe);A$r=r(P3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P3t.forEach(t),y$r=i(k0),Vc=n(k0,"P",{});var qZ=s(Vc);L$r=r(qZ,`Note:
Loading a model from its configuration file does `),GTe=n(qZ,"STRONG",{});var B3t=s(GTe);x$r=r(B3t,"not"),B3t.forEach(t),$$r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(qZ,"A",{href:!0});var I3t=s(KJ);k$r=r(I3t,"from_pretrained()"),I3t.forEach(t),S$r=r(qZ," to load the model weights."),qZ.forEach(t),R$r=i(k0),T(T3.$$.fragment,k0),k0.forEach(t),P$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Mx.$$.fragment,Hl),B$r=i(Hl),OTe=n(Hl,"P",{});var q3t=s(OTe);I$r=r(q3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q3t.forEach(t),q$r=i(Hl),bn=n(Hl,"P",{});var S0=s(bn);N$r=r(S0,"The model class to instantiate is selected based on the "),VTe=n(S0,"CODE",{});var N3t=s(VTe);j$r=r(N3t,"model_type"),N3t.forEach(t),D$r=r(S0,` property of the config object (either
passed as an argument or loaded from `),XTe=n(S0,"CODE",{});var j3t=s(XTe);G$r=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),O$r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(S0,"CODE",{});var D3t=s(zTe);V$r=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),X$r=r(S0,":"),S0.forEach(t),z$r=i(Hl),xe=n(Hl,"UL",{});var Be=s(xe);M3=n(Be,"LI",{});var UPe=s(M3);QTe=n(UPe,"STRONG",{});var G3t=s(QTe);Q$r=r(G3t,"albert"),G3t.forEach(t),W$r=r(UPe," \u2014 "),ZJ=n(UPe,"A",{href:!0});var O3t=s(ZJ);H$r=r(O3t,"FlaxAlbertForSequenceClassification"),O3t.forEach(t),U$r=r(UPe," (ALBERT model)"),UPe.forEach(t),J$r=i(Be),E3=n(Be,"LI",{});var JPe=s(E3);WTe=n(JPe,"STRONG",{});var V3t=s(WTe);Y$r=r(V3t,"bart"),V3t.forEach(t),K$r=r(JPe," \u2014 "),eY=n(JPe,"A",{href:!0});var X3t=s(eY);Z$r=r(X3t,"FlaxBartForSequenceClassification"),X3t.forEach(t),ekr=r(JPe," (BART model)"),JPe.forEach(t),okr=i(Be),C3=n(Be,"LI",{});var YPe=s(C3);HTe=n(YPe,"STRONG",{});var z3t=s(HTe);rkr=r(z3t,"bert"),z3t.forEach(t),tkr=r(YPe," \u2014 "),oY=n(YPe,"A",{href:!0});var Q3t=s(oY);akr=r(Q3t,"FlaxBertForSequenceClassification"),Q3t.forEach(t),nkr=r(YPe," (BERT model)"),YPe.forEach(t),skr=i(Be),w3=n(Be,"LI",{});var KPe=s(w3);UTe=n(KPe,"STRONG",{});var W3t=s(UTe);lkr=r(W3t,"big_bird"),W3t.forEach(t),ikr=r(KPe," \u2014 "),rY=n(KPe,"A",{href:!0});var H3t=s(rY);dkr=r(H3t,"FlaxBigBirdForSequenceClassification"),H3t.forEach(t),ckr=r(KPe," (BigBird model)"),KPe.forEach(t),fkr=i(Be),A3=n(Be,"LI",{});var ZPe=s(A3);JTe=n(ZPe,"STRONG",{});var U3t=s(JTe);mkr=r(U3t,"distilbert"),U3t.forEach(t),gkr=r(ZPe," \u2014 "),tY=n(ZPe,"A",{href:!0});var J3t=s(tY);hkr=r(J3t,"FlaxDistilBertForSequenceClassification"),J3t.forEach(t),pkr=r(ZPe," (DistilBERT model)"),ZPe.forEach(t),ukr=i(Be),y3=n(Be,"LI",{});var eBe=s(y3);YTe=n(eBe,"STRONG",{});var Y3t=s(YTe);_kr=r(Y3t,"electra"),Y3t.forEach(t),bkr=r(eBe," \u2014 "),aY=n(eBe,"A",{href:!0});var K3t=s(aY);vkr=r(K3t,"FlaxElectraForSequenceClassification"),K3t.forEach(t),Fkr=r(eBe," (ELECTRA model)"),eBe.forEach(t),Tkr=i(Be),L3=n(Be,"LI",{});var oBe=s(L3);KTe=n(oBe,"STRONG",{});var Z3t=s(KTe);Mkr=r(Z3t,"mbart"),Z3t.forEach(t),Ekr=r(oBe," \u2014 "),nY=n(oBe,"A",{href:!0});var ewt=s(nY);Ckr=r(ewt,"FlaxMBartForSequenceClassification"),ewt.forEach(t),wkr=r(oBe," (mBART model)"),oBe.forEach(t),Akr=i(Be),x3=n(Be,"LI",{});var rBe=s(x3);ZTe=n(rBe,"STRONG",{});var owt=s(ZTe);ykr=r(owt,"roberta"),owt.forEach(t),Lkr=r(rBe," \u2014 "),sY=n(rBe,"A",{href:!0});var rwt=s(sY);xkr=r(rwt,"FlaxRobertaForSequenceClassification"),rwt.forEach(t),$kr=r(rBe," (RoBERTa model)"),rBe.forEach(t),kkr=i(Be),$3=n(Be,"LI",{});var tBe=s($3);eMe=n(tBe,"STRONG",{});var twt=s(eMe);Skr=r(twt,"roformer"),twt.forEach(t),Rkr=r(tBe," \u2014 "),lY=n(tBe,"A",{href:!0});var awt=s(lY);Pkr=r(awt,"FlaxRoFormerForSequenceClassification"),awt.forEach(t),Bkr=r(tBe," (RoFormer model)"),tBe.forEach(t),Ikr=i(Be),k3=n(Be,"LI",{});var aBe=s(k3);oMe=n(aBe,"STRONG",{});var nwt=s(oMe);qkr=r(nwt,"xlm-roberta"),nwt.forEach(t),Nkr=r(aBe," \u2014 "),iY=n(aBe,"A",{href:!0});var swt=s(iY);jkr=r(swt,"FlaxXLMRobertaForSequenceClassification"),swt.forEach(t),Dkr=r(aBe," (XLM-RoBERTa model)"),aBe.forEach(t),Be.forEach(t),Gkr=i(Hl),T(S3.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Aqe=i(f),Xc=n(f,"H2",{class:!0});var Rje=s(Xc);R3=n(Rje,"A",{id:!0,class:!0,href:!0});var lwt=s(R3);rMe=n(lwt,"SPAN",{});var iwt=s(rMe);T(Ex.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),Okr=i(Rje),tMe=n(Rje,"SPAN",{});var dwt=s(tMe);Vkr=r(dwt,"FlaxAutoModelForQuestionAnswering"),dwt.forEach(t),Rje.forEach(t),yqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(Cx.$$.fragment,Ul),Xkr=i(Ul),zc=n(Ul,"P",{});var NZ=s(zc);zkr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dY=n(NZ,"A",{href:!0});var cwt=s(dY);Qkr=r(cwt,"from_pretrained()"),cwt.forEach(t),Wkr=r(NZ," class method or the "),cY=n(NZ,"A",{href:!0});var fwt=s(cY);Hkr=r(fwt,"from_config()"),fwt.forEach(t),Ukr=r(NZ,` class
method.`),NZ.forEach(t),Jkr=i(Ul),wx=n(Ul,"P",{});var Pje=s(wx);Ykr=r(Pje,"This class cannot be instantiated directly using "),aMe=n(Pje,"CODE",{});var mwt=s(aMe);Kkr=r(mwt,"__init__()"),mwt.forEach(t),Zkr=r(Pje," (throws an error)."),Pje.forEach(t),eSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var R0=s(zt);T(Ax.$$.fragment,R0),oSr=i(R0),nMe=n(R0,"P",{});var gwt=s(nMe);rSr=r(gwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gwt.forEach(t),tSr=i(R0),Qc=n(R0,"P",{});var jZ=s(Qc);aSr=r(jZ,`Note:
Loading a model from its configuration file does `),sMe=n(jZ,"STRONG",{});var hwt=s(sMe);nSr=r(hwt,"not"),hwt.forEach(t),sSr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(jZ,"A",{href:!0});var pwt=s(fY);lSr=r(pwt,"from_pretrained()"),pwt.forEach(t),iSr=r(jZ," to load the model weights."),jZ.forEach(t),dSr=i(R0),T(P3.$$.fragment,R0),R0.forEach(t),cSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(yx.$$.fragment,Jl),fSr=i(Jl),lMe=n(Jl,"P",{});var uwt=s(lMe);mSr=r(uwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uwt.forEach(t),gSr=i(Jl),vn=n(Jl,"P",{});var P0=s(vn);hSr=r(P0,"The model class to instantiate is selected based on the "),iMe=n(P0,"CODE",{});var _wt=s(iMe);pSr=r(_wt,"model_type"),_wt.forEach(t),uSr=r(P0,` property of the config object (either
passed as an argument or loaded from `),dMe=n(P0,"CODE",{});var bwt=s(dMe);_Sr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),bSr=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(P0,"CODE",{});var vwt=s(cMe);vSr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),FSr=r(P0,":"),P0.forEach(t),TSr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);B3=n(Ie,"LI",{});var nBe=s(B3);fMe=n(nBe,"STRONG",{});var Fwt=s(fMe);MSr=r(Fwt,"albert"),Fwt.forEach(t),ESr=r(nBe," \u2014 "),mY=n(nBe,"A",{href:!0});var Twt=s(mY);CSr=r(Twt,"FlaxAlbertForQuestionAnswering"),Twt.forEach(t),wSr=r(nBe," (ALBERT model)"),nBe.forEach(t),ASr=i(Ie),I3=n(Ie,"LI",{});var sBe=s(I3);mMe=n(sBe,"STRONG",{});var Mwt=s(mMe);ySr=r(Mwt,"bart"),Mwt.forEach(t),LSr=r(sBe," \u2014 "),gY=n(sBe,"A",{href:!0});var Ewt=s(gY);xSr=r(Ewt,"FlaxBartForQuestionAnswering"),Ewt.forEach(t),$Sr=r(sBe," (BART model)"),sBe.forEach(t),kSr=i(Ie),q3=n(Ie,"LI",{});var lBe=s(q3);gMe=n(lBe,"STRONG",{});var Cwt=s(gMe);SSr=r(Cwt,"bert"),Cwt.forEach(t),RSr=r(lBe," \u2014 "),hY=n(lBe,"A",{href:!0});var wwt=s(hY);PSr=r(wwt,"FlaxBertForQuestionAnswering"),wwt.forEach(t),BSr=r(lBe," (BERT model)"),lBe.forEach(t),ISr=i(Ie),N3=n(Ie,"LI",{});var iBe=s(N3);hMe=n(iBe,"STRONG",{});var Awt=s(hMe);qSr=r(Awt,"big_bird"),Awt.forEach(t),NSr=r(iBe," \u2014 "),pY=n(iBe,"A",{href:!0});var ywt=s(pY);jSr=r(ywt,"FlaxBigBirdForQuestionAnswering"),ywt.forEach(t),DSr=r(iBe," (BigBird model)"),iBe.forEach(t),GSr=i(Ie),j3=n(Ie,"LI",{});var dBe=s(j3);pMe=n(dBe,"STRONG",{});var Lwt=s(pMe);OSr=r(Lwt,"distilbert"),Lwt.forEach(t),VSr=r(dBe," \u2014 "),uY=n(dBe,"A",{href:!0});var xwt=s(uY);XSr=r(xwt,"FlaxDistilBertForQuestionAnswering"),xwt.forEach(t),zSr=r(dBe," (DistilBERT model)"),dBe.forEach(t),QSr=i(Ie),D3=n(Ie,"LI",{});var cBe=s(D3);uMe=n(cBe,"STRONG",{});var $wt=s(uMe);WSr=r($wt,"electra"),$wt.forEach(t),HSr=r(cBe," \u2014 "),_Y=n(cBe,"A",{href:!0});var kwt=s(_Y);USr=r(kwt,"FlaxElectraForQuestionAnswering"),kwt.forEach(t),JSr=r(cBe," (ELECTRA model)"),cBe.forEach(t),YSr=i(Ie),G3=n(Ie,"LI",{});var fBe=s(G3);_Me=n(fBe,"STRONG",{});var Swt=s(_Me);KSr=r(Swt,"mbart"),Swt.forEach(t),ZSr=r(fBe," \u2014 "),bY=n(fBe,"A",{href:!0});var Rwt=s(bY);eRr=r(Rwt,"FlaxMBartForQuestionAnswering"),Rwt.forEach(t),oRr=r(fBe," (mBART model)"),fBe.forEach(t),rRr=i(Ie),O3=n(Ie,"LI",{});var mBe=s(O3);bMe=n(mBe,"STRONG",{});var Pwt=s(bMe);tRr=r(Pwt,"roberta"),Pwt.forEach(t),aRr=r(mBe," \u2014 "),vY=n(mBe,"A",{href:!0});var Bwt=s(vY);nRr=r(Bwt,"FlaxRobertaForQuestionAnswering"),Bwt.forEach(t),sRr=r(mBe," (RoBERTa model)"),mBe.forEach(t),lRr=i(Ie),V3=n(Ie,"LI",{});var gBe=s(V3);vMe=n(gBe,"STRONG",{});var Iwt=s(vMe);iRr=r(Iwt,"roformer"),Iwt.forEach(t),dRr=r(gBe," \u2014 "),FY=n(gBe,"A",{href:!0});var qwt=s(FY);cRr=r(qwt,"FlaxRoFormerForQuestionAnswering"),qwt.forEach(t),fRr=r(gBe," (RoFormer model)"),gBe.forEach(t),mRr=i(Ie),X3=n(Ie,"LI",{});var hBe=s(X3);FMe=n(hBe,"STRONG",{});var Nwt=s(FMe);gRr=r(Nwt,"xlm-roberta"),Nwt.forEach(t),hRr=r(hBe," \u2014 "),TY=n(hBe,"A",{href:!0});var jwt=s(TY);pRr=r(jwt,"FlaxXLMRobertaForQuestionAnswering"),jwt.forEach(t),uRr=r(hBe," (XLM-RoBERTa model)"),hBe.forEach(t),Ie.forEach(t),_Rr=i(Jl),T(z3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Lqe=i(f),Wc=n(f,"H2",{class:!0});var Bje=s(Wc);Q3=n(Bje,"A",{id:!0,class:!0,href:!0});var Dwt=s(Q3);TMe=n(Dwt,"SPAN",{});var Gwt=s(TMe);T(Lx.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),bRr=i(Bje),MMe=n(Bje,"SPAN",{});var Owt=s(MMe);vRr=r(Owt,"FlaxAutoModelForTokenClassification"),Owt.forEach(t),Bje.forEach(t),xqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(xx.$$.fragment,Yl),FRr=i(Yl),Hc=n(Yl,"P",{});var DZ=s(Hc);TRr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MY=n(DZ,"A",{href:!0});var Vwt=s(MY);MRr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),ERr=r(DZ," class method or the "),EY=n(DZ,"A",{href:!0});var Xwt=s(EY);CRr=r(Xwt,"from_config()"),Xwt.forEach(t),wRr=r(DZ,` class
method.`),DZ.forEach(t),ARr=i(Yl),$x=n(Yl,"P",{});var Ije=s($x);yRr=r(Ije,"This class cannot be instantiated directly using "),EMe=n(Ije,"CODE",{});var zwt=s(EMe);LRr=r(zwt,"__init__()"),zwt.forEach(t),xRr=r(Ije," (throws an error)."),Ije.forEach(t),$Rr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var B0=s(Qt);T(kx.$$.fragment,B0),kRr=i(B0),CMe=n(B0,"P",{});var Qwt=s(CMe);SRr=r(Qwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qwt.forEach(t),RRr=i(B0),Uc=n(B0,"P",{});var GZ=s(Uc);PRr=r(GZ,`Note:
Loading a model from its configuration file does `),wMe=n(GZ,"STRONG",{});var Wwt=s(wMe);BRr=r(Wwt,"not"),Wwt.forEach(t),IRr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(GZ,"A",{href:!0});var Hwt=s(CY);qRr=r(Hwt,"from_pretrained()"),Hwt.forEach(t),NRr=r(GZ," to load the model weights."),GZ.forEach(t),jRr=i(B0),T(W3.$$.fragment,B0),B0.forEach(t),DRr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(Sx.$$.fragment,Kl),GRr=i(Kl),AMe=n(Kl,"P",{});var Uwt=s(AMe);ORr=r(Uwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uwt.forEach(t),VRr=i(Kl),Fn=n(Kl,"P",{});var I0=s(Fn);XRr=r(I0,"The model class to instantiate is selected based on the "),yMe=n(I0,"CODE",{});var Jwt=s(yMe);zRr=r(Jwt,"model_type"),Jwt.forEach(t),QRr=r(I0,` property of the config object (either
passed as an argument or loaded from `),LMe=n(I0,"CODE",{});var Ywt=s(LMe);WRr=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),HRr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(I0,"CODE",{});var Kwt=s(xMe);URr=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),JRr=r(I0,":"),I0.forEach(t),YRr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);H3=n(Fo,"LI",{});var pBe=s(H3);$Me=n(pBe,"STRONG",{});var Zwt=s($Me);KRr=r(Zwt,"albert"),Zwt.forEach(t),ZRr=r(pBe," \u2014 "),wY=n(pBe,"A",{href:!0});var eAt=s(wY);ePr=r(eAt,"FlaxAlbertForTokenClassification"),eAt.forEach(t),oPr=r(pBe," (ALBERT model)"),pBe.forEach(t),rPr=i(Fo),U3=n(Fo,"LI",{});var uBe=s(U3);kMe=n(uBe,"STRONG",{});var oAt=s(kMe);tPr=r(oAt,"bert"),oAt.forEach(t),aPr=r(uBe," \u2014 "),AY=n(uBe,"A",{href:!0});var rAt=s(AY);nPr=r(rAt,"FlaxBertForTokenClassification"),rAt.forEach(t),sPr=r(uBe," (BERT model)"),uBe.forEach(t),lPr=i(Fo),J3=n(Fo,"LI",{});var _Be=s(J3);SMe=n(_Be,"STRONG",{});var tAt=s(SMe);iPr=r(tAt,"big_bird"),tAt.forEach(t),dPr=r(_Be," \u2014 "),yY=n(_Be,"A",{href:!0});var aAt=s(yY);cPr=r(aAt,"FlaxBigBirdForTokenClassification"),aAt.forEach(t),fPr=r(_Be," (BigBird model)"),_Be.forEach(t),mPr=i(Fo),Y3=n(Fo,"LI",{});var bBe=s(Y3);RMe=n(bBe,"STRONG",{});var nAt=s(RMe);gPr=r(nAt,"distilbert"),nAt.forEach(t),hPr=r(bBe," \u2014 "),LY=n(bBe,"A",{href:!0});var sAt=s(LY);pPr=r(sAt,"FlaxDistilBertForTokenClassification"),sAt.forEach(t),uPr=r(bBe," (DistilBERT model)"),bBe.forEach(t),_Pr=i(Fo),K3=n(Fo,"LI",{});var vBe=s(K3);PMe=n(vBe,"STRONG",{});var lAt=s(PMe);bPr=r(lAt,"electra"),lAt.forEach(t),vPr=r(vBe," \u2014 "),xY=n(vBe,"A",{href:!0});var iAt=s(xY);FPr=r(iAt,"FlaxElectraForTokenClassification"),iAt.forEach(t),TPr=r(vBe," (ELECTRA model)"),vBe.forEach(t),MPr=i(Fo),Z3=n(Fo,"LI",{});var FBe=s(Z3);BMe=n(FBe,"STRONG",{});var dAt=s(BMe);EPr=r(dAt,"roberta"),dAt.forEach(t),CPr=r(FBe," \u2014 "),$Y=n(FBe,"A",{href:!0});var cAt=s($Y);wPr=r(cAt,"FlaxRobertaForTokenClassification"),cAt.forEach(t),APr=r(FBe," (RoBERTa model)"),FBe.forEach(t),yPr=i(Fo),ew=n(Fo,"LI",{});var TBe=s(ew);IMe=n(TBe,"STRONG",{});var fAt=s(IMe);LPr=r(fAt,"roformer"),fAt.forEach(t),xPr=r(TBe," \u2014 "),kY=n(TBe,"A",{href:!0});var mAt=s(kY);$Pr=r(mAt,"FlaxRoFormerForTokenClassification"),mAt.forEach(t),kPr=r(TBe," (RoFormer model)"),TBe.forEach(t),SPr=i(Fo),ow=n(Fo,"LI",{});var MBe=s(ow);qMe=n(MBe,"STRONG",{});var gAt=s(qMe);RPr=r(gAt,"xlm-roberta"),gAt.forEach(t),PPr=r(MBe," \u2014 "),SY=n(MBe,"A",{href:!0});var hAt=s(SY);BPr=r(hAt,"FlaxXLMRobertaForTokenClassification"),hAt.forEach(t),IPr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),Fo.forEach(t),qPr=i(Kl),T(rw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),$qe=i(f),Jc=n(f,"H2",{class:!0});var qje=s(Jc);tw=n(qje,"A",{id:!0,class:!0,href:!0});var pAt=s(tw);NMe=n(pAt,"SPAN",{});var uAt=s(NMe);T(Rx.$$.fragment,uAt),uAt.forEach(t),pAt.forEach(t),NPr=i(qje),jMe=n(qje,"SPAN",{});var _At=s(jMe);jPr=r(_At,"FlaxAutoModelForMultipleChoice"),_At.forEach(t),qje.forEach(t),kqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Px.$$.fragment,Zl),DPr=i(Zl),Yc=n(Zl,"P",{});var OZ=s(Yc);GPr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RY=n(OZ,"A",{href:!0});var bAt=s(RY);OPr=r(bAt,"from_pretrained()"),bAt.forEach(t),VPr=r(OZ," class method or the "),PY=n(OZ,"A",{href:!0});var vAt=s(PY);XPr=r(vAt,"from_config()"),vAt.forEach(t),zPr=r(OZ,` class
method.`),OZ.forEach(t),QPr=i(Zl),Bx=n(Zl,"P",{});var Nje=s(Bx);WPr=r(Nje,"This class cannot be instantiated directly using "),DMe=n(Nje,"CODE",{});var FAt=s(DMe);HPr=r(FAt,"__init__()"),FAt.forEach(t),UPr=r(Nje," (throws an error)."),Nje.forEach(t),JPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var q0=s(Wt);T(Ix.$$.fragment,q0),YPr=i(q0),GMe=n(q0,"P",{});var TAt=s(GMe);KPr=r(TAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TAt.forEach(t),ZPr=i(q0),Kc=n(q0,"P",{});var VZ=s(Kc);eBr=r(VZ,`Note:
Loading a model from its configuration file does `),OMe=n(VZ,"STRONG",{});var MAt=s(OMe);oBr=r(MAt,"not"),MAt.forEach(t),rBr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(VZ,"A",{href:!0});var EAt=s(BY);tBr=r(EAt,"from_pretrained()"),EAt.forEach(t),aBr=r(VZ," to load the model weights."),VZ.forEach(t),nBr=i(q0),T(aw.$$.fragment,q0),q0.forEach(t),sBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(qx.$$.fragment,ei),lBr=i(ei),VMe=n(ei,"P",{});var CAt=s(VMe);iBr=r(CAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CAt.forEach(t),dBr=i(ei),Tn=n(ei,"P",{});var N0=s(Tn);cBr=r(N0,"The model class to instantiate is selected based on the "),XMe=n(N0,"CODE",{});var wAt=s(XMe);fBr=r(wAt,"model_type"),wAt.forEach(t),mBr=r(N0,` property of the config object (either
passed as an argument or loaded from `),zMe=n(N0,"CODE",{});var AAt=s(zMe);gBr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),hBr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(N0,"CODE",{});var yAt=s(QMe);pBr=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),uBr=r(N0,":"),N0.forEach(t),_Br=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);nw=n(To,"LI",{});var EBe=s(nw);WMe=n(EBe,"STRONG",{});var LAt=s(WMe);bBr=r(LAt,"albert"),LAt.forEach(t),vBr=r(EBe," \u2014 "),IY=n(EBe,"A",{href:!0});var xAt=s(IY);FBr=r(xAt,"FlaxAlbertForMultipleChoice"),xAt.forEach(t),TBr=r(EBe," (ALBERT model)"),EBe.forEach(t),MBr=i(To),sw=n(To,"LI",{});var CBe=s(sw);HMe=n(CBe,"STRONG",{});var $At=s(HMe);EBr=r($At,"bert"),$At.forEach(t),CBr=r(CBe," \u2014 "),qY=n(CBe,"A",{href:!0});var kAt=s(qY);wBr=r(kAt,"FlaxBertForMultipleChoice"),kAt.forEach(t),ABr=r(CBe," (BERT model)"),CBe.forEach(t),yBr=i(To),lw=n(To,"LI",{});var wBe=s(lw);UMe=n(wBe,"STRONG",{});var SAt=s(UMe);LBr=r(SAt,"big_bird"),SAt.forEach(t),xBr=r(wBe," \u2014 "),NY=n(wBe,"A",{href:!0});var RAt=s(NY);$Br=r(RAt,"FlaxBigBirdForMultipleChoice"),RAt.forEach(t),kBr=r(wBe," (BigBird model)"),wBe.forEach(t),SBr=i(To),iw=n(To,"LI",{});var ABe=s(iw);JMe=n(ABe,"STRONG",{});var PAt=s(JMe);RBr=r(PAt,"distilbert"),PAt.forEach(t),PBr=r(ABe," \u2014 "),jY=n(ABe,"A",{href:!0});var BAt=s(jY);BBr=r(BAt,"FlaxDistilBertForMultipleChoice"),BAt.forEach(t),IBr=r(ABe," (DistilBERT model)"),ABe.forEach(t),qBr=i(To),dw=n(To,"LI",{});var yBe=s(dw);YMe=n(yBe,"STRONG",{});var IAt=s(YMe);NBr=r(IAt,"electra"),IAt.forEach(t),jBr=r(yBe," \u2014 "),DY=n(yBe,"A",{href:!0});var qAt=s(DY);DBr=r(qAt,"FlaxElectraForMultipleChoice"),qAt.forEach(t),GBr=r(yBe," (ELECTRA model)"),yBe.forEach(t),OBr=i(To),cw=n(To,"LI",{});var LBe=s(cw);KMe=n(LBe,"STRONG",{});var NAt=s(KMe);VBr=r(NAt,"roberta"),NAt.forEach(t),XBr=r(LBe," \u2014 "),GY=n(LBe,"A",{href:!0});var jAt=s(GY);zBr=r(jAt,"FlaxRobertaForMultipleChoice"),jAt.forEach(t),QBr=r(LBe," (RoBERTa model)"),LBe.forEach(t),WBr=i(To),fw=n(To,"LI",{});var xBe=s(fw);ZMe=n(xBe,"STRONG",{});var DAt=s(ZMe);HBr=r(DAt,"roformer"),DAt.forEach(t),UBr=r(xBe," \u2014 "),OY=n(xBe,"A",{href:!0});var GAt=s(OY);JBr=r(GAt,"FlaxRoFormerForMultipleChoice"),GAt.forEach(t),YBr=r(xBe," (RoFormer model)"),xBe.forEach(t),KBr=i(To),mw=n(To,"LI",{});var $Be=s(mw);eEe=n($Be,"STRONG",{});var OAt=s(eEe);ZBr=r(OAt,"xlm-roberta"),OAt.forEach(t),eIr=r($Be," \u2014 "),VY=n($Be,"A",{href:!0});var VAt=s(VY);oIr=r(VAt,"FlaxXLMRobertaForMultipleChoice"),VAt.forEach(t),rIr=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),To.forEach(t),tIr=i(ei),T(gw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Sqe=i(f),Zc=n(f,"H2",{class:!0});var jje=s(Zc);hw=n(jje,"A",{id:!0,class:!0,href:!0});var XAt=s(hw);oEe=n(XAt,"SPAN",{});var zAt=s(oEe);T(Nx.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),aIr=i(jje),rEe=n(jje,"SPAN",{});var QAt=s(rEe);nIr=r(QAt,"FlaxAutoModelForNextSentencePrediction"),QAt.forEach(t),jje.forEach(t),Rqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(jx.$$.fragment,oi),sIr=i(oi),ef=n(oi,"P",{});var XZ=s(ef);lIr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XY=n(XZ,"A",{href:!0});var WAt=s(XY);iIr=r(WAt,"from_pretrained()"),WAt.forEach(t),dIr=r(XZ," class method or the "),zY=n(XZ,"A",{href:!0});var HAt=s(zY);cIr=r(HAt,"from_config()"),HAt.forEach(t),fIr=r(XZ,` class
method.`),XZ.forEach(t),mIr=i(oi),Dx=n(oi,"P",{});var Dje=s(Dx);gIr=r(Dje,"This class cannot be instantiated directly using "),tEe=n(Dje,"CODE",{});var UAt=s(tEe);hIr=r(UAt,"__init__()"),UAt.forEach(t),pIr=r(Dje," (throws an error)."),Dje.forEach(t),uIr=i(oi),Ht=n(oi,"DIV",{class:!0});var j0=s(Ht);T(Gx.$$.fragment,j0),_Ir=i(j0),aEe=n(j0,"P",{});var JAt=s(aEe);bIr=r(JAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JAt.forEach(t),vIr=i(j0),of=n(j0,"P",{});var zZ=s(of);FIr=r(zZ,`Note:
Loading a model from its configuration file does `),nEe=n(zZ,"STRONG",{});var YAt=s(nEe);TIr=r(YAt,"not"),YAt.forEach(t),MIr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(zZ,"A",{href:!0});var KAt=s(QY);EIr=r(KAt,"from_pretrained()"),KAt.forEach(t),CIr=r(zZ," to load the model weights."),zZ.forEach(t),wIr=i(j0),T(pw.$$.fragment,j0),j0.forEach(t),AIr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Ox.$$.fragment,ri),yIr=i(ri),sEe=n(ri,"P",{});var ZAt=s(sEe);LIr=r(ZAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZAt.forEach(t),xIr=i(ri),Mn=n(ri,"P",{});var D0=s(Mn);$Ir=r(D0,"The model class to instantiate is selected based on the "),lEe=n(D0,"CODE",{});var e0t=s(lEe);kIr=r(e0t,"model_type"),e0t.forEach(t),SIr=r(D0,` property of the config object (either
passed as an argument or loaded from `),iEe=n(D0,"CODE",{});var o0t=s(iEe);RIr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),PIr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(D0,"CODE",{});var r0t=s(dEe);BIr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),IIr=r(D0,":"),D0.forEach(t),qIr=i(ri),cEe=n(ri,"UL",{});var t0t=s(cEe);uw=n(t0t,"LI",{});var kBe=s(uw);fEe=n(kBe,"STRONG",{});var a0t=s(fEe);NIr=r(a0t,"bert"),a0t.forEach(t),jIr=r(kBe," \u2014 "),WY=n(kBe,"A",{href:!0});var n0t=s(WY);DIr=r(n0t,"FlaxBertForNextSentencePrediction"),n0t.forEach(t),GIr=r(kBe," (BERT model)"),kBe.forEach(t),t0t.forEach(t),OIr=i(ri),T(_w.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Pqe=i(f),rf=n(f,"H2",{class:!0});var Gje=s(rf);bw=n(Gje,"A",{id:!0,class:!0,href:!0});var s0t=s(bw);mEe=n(s0t,"SPAN",{});var l0t=s(mEe);T(Vx.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),VIr=i(Gje),gEe=n(Gje,"SPAN",{});var i0t=s(gEe);XIr=r(i0t,"FlaxAutoModelForImageClassification"),i0t.forEach(t),Gje.forEach(t),Bqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Xx.$$.fragment,ti),zIr=i(ti),tf=n(ti,"P",{});var QZ=s(tf);QIr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HY=n(QZ,"A",{href:!0});var d0t=s(HY);WIr=r(d0t,"from_pretrained()"),d0t.forEach(t),HIr=r(QZ," class method or the "),UY=n(QZ,"A",{href:!0});var c0t=s(UY);UIr=r(c0t,"from_config()"),c0t.forEach(t),JIr=r(QZ,` class
method.`),QZ.forEach(t),YIr=i(ti),zx=n(ti,"P",{});var Oje=s(zx);KIr=r(Oje,"This class cannot be instantiated directly using "),hEe=n(Oje,"CODE",{});var f0t=s(hEe);ZIr=r(f0t,"__init__()"),f0t.forEach(t),eqr=r(Oje," (throws an error)."),Oje.forEach(t),oqr=i(ti),Ut=n(ti,"DIV",{class:!0});var G0=s(Ut);T(Qx.$$.fragment,G0),rqr=i(G0),pEe=n(G0,"P",{});var m0t=s(pEe);tqr=r(m0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m0t.forEach(t),aqr=i(G0),af=n(G0,"P",{});var WZ=s(af);nqr=r(WZ,`Note:
Loading a model from its configuration file does `),uEe=n(WZ,"STRONG",{});var g0t=s(uEe);sqr=r(g0t,"not"),g0t.forEach(t),lqr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(WZ,"A",{href:!0});var h0t=s(JY);iqr=r(h0t,"from_pretrained()"),h0t.forEach(t),dqr=r(WZ," to load the model weights."),WZ.forEach(t),cqr=i(G0),T(vw.$$.fragment,G0),G0.forEach(t),fqr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Wx.$$.fragment,ai),mqr=i(ai),_Ee=n(ai,"P",{});var p0t=s(_Ee);gqr=r(p0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p0t.forEach(t),hqr=i(ai),En=n(ai,"P",{});var O0=s(En);pqr=r(O0,"The model class to instantiate is selected based on the "),bEe=n(O0,"CODE",{});var u0t=s(bEe);uqr=r(u0t,"model_type"),u0t.forEach(t),_qr=r(O0,` property of the config object (either
passed as an argument or loaded from `),vEe=n(O0,"CODE",{});var _0t=s(vEe);bqr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),vqr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(O0,"CODE",{});var b0t=s(FEe);Fqr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),Tqr=r(O0,":"),O0.forEach(t),Mqr=i(ai),Hx=n(ai,"UL",{});var Vje=s(Hx);Fw=n(Vje,"LI",{});var SBe=s(Fw);TEe=n(SBe,"STRONG",{});var v0t=s(TEe);Eqr=r(v0t,"beit"),v0t.forEach(t),Cqr=r(SBe," \u2014 "),YY=n(SBe,"A",{href:!0});var F0t=s(YY);wqr=r(F0t,"FlaxBeitForImageClassification"),F0t.forEach(t),Aqr=r(SBe," (BEiT model)"),SBe.forEach(t),yqr=i(Vje),Tw=n(Vje,"LI",{});var RBe=s(Tw);MEe=n(RBe,"STRONG",{});var T0t=s(MEe);Lqr=r(T0t,"vit"),T0t.forEach(t),xqr=r(RBe," \u2014 "),KY=n(RBe,"A",{href:!0});var M0t=s(KY);$qr=r(M0t,"FlaxViTForImageClassification"),M0t.forEach(t),kqr=r(RBe," (ViT model)"),RBe.forEach(t),Vje.forEach(t),Sqr=i(ai),T(Mw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Iqe=i(f),nf=n(f,"H2",{class:!0});var Xje=s(nf);Ew=n(Xje,"A",{id:!0,class:!0,href:!0});var E0t=s(Ew);EEe=n(E0t,"SPAN",{});var C0t=s(EEe);T(Ux.$$.fragment,C0t),C0t.forEach(t),E0t.forEach(t),Rqr=i(Xje),CEe=n(Xje,"SPAN",{});var w0t=s(CEe);Pqr=r(w0t,"FlaxAutoModelForVision2Seq"),w0t.forEach(t),Xje.forEach(t),qqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Jx.$$.fragment,ni),Bqr=i(ni),sf=n(ni,"P",{});var HZ=s(sf);Iqr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZY=n(HZ,"A",{href:!0});var A0t=s(ZY);qqr=r(A0t,"from_pretrained()"),A0t.forEach(t),Nqr=r(HZ," class method or the "),eK=n(HZ,"A",{href:!0});var y0t=s(eK);jqr=r(y0t,"from_config()"),y0t.forEach(t),Dqr=r(HZ,` class
method.`),HZ.forEach(t),Gqr=i(ni),Yx=n(ni,"P",{});var zje=s(Yx);Oqr=r(zje,"This class cannot be instantiated directly using "),wEe=n(zje,"CODE",{});var L0t=s(wEe);Vqr=r(L0t,"__init__()"),L0t.forEach(t),Xqr=r(zje," (throws an error)."),zje.forEach(t),zqr=i(ni),Jt=n(ni,"DIV",{class:!0});var V0=s(Jt);T(Kx.$$.fragment,V0),Qqr=i(V0),AEe=n(V0,"P",{});var x0t=s(AEe);Wqr=r(x0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x0t.forEach(t),Hqr=i(V0),lf=n(V0,"P",{});var UZ=s(lf);Uqr=r(UZ,`Note:
Loading a model from its configuration file does `),yEe=n(UZ,"STRONG",{});var $0t=s(yEe);Jqr=r($0t,"not"),$0t.forEach(t),Yqr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(UZ,"A",{href:!0});var k0t=s(oK);Kqr=r(k0t,"from_pretrained()"),k0t.forEach(t),Zqr=r(UZ," to load the model weights."),UZ.forEach(t),eNr=i(V0),T(Cw.$$.fragment,V0),V0.forEach(t),oNr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(Zx.$$.fragment,si),rNr=i(si),LEe=n(si,"P",{});var S0t=s(LEe);tNr=r(S0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S0t.forEach(t),aNr=i(si),Cn=n(si,"P",{});var X0=s(Cn);nNr=r(X0,"The model class to instantiate is selected based on the "),xEe=n(X0,"CODE",{});var R0t=s(xEe);sNr=r(R0t,"model_type"),R0t.forEach(t),lNr=r(X0,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(X0,"CODE",{});var P0t=s($Ee);iNr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),dNr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(X0,"CODE",{});var B0t=s(kEe);cNr=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),fNr=r(X0,":"),X0.forEach(t),mNr=i(si),SEe=n(si,"UL",{});var I0t=s(SEe);ww=n(I0t,"LI",{});var PBe=s(ww);REe=n(PBe,"STRONG",{});var q0t=s(REe);gNr=r(q0t,"vision-encoder-decoder"),q0t.forEach(t),hNr=r(PBe," \u2014 "),rK=n(PBe,"A",{href:!0});var N0t=s(rK);pNr=r(N0t,"FlaxVisionEncoderDecoderModel"),N0t.forEach(t),uNr=r(PBe," (Vision Encoder decoder model)"),PBe.forEach(t),I0t.forEach(t),_Nr=i(si),T(Aw.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Oyt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(b$,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(v$,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertConfig"),c(F$,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartConfig"),c(T$,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitConfig"),c(M$,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertConfig"),c(E$,"href","/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(C$,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdConfig"),c(w$,"href","/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(A$,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(y$,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(L$,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertConfig"),c(x$,"href","/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineConfig"),c($$,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPConfig"),c(k$,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertConfig"),c(S$,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextConfig"),c(R$,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLConfig"),c(P$,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(B$,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(I$,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(q$,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaConfig"),c(N$,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(j$,"href","/docs/transformers/pr_17247/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(D$,"href","/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTConfig"),c(G$,"href","/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrConfig"),c(O$,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertConfig"),c(V$,"href","/docs/transformers/pr_17247/en/model_doc/dpr#transformers.DPRConfig"),c(X$,"href","/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTConfig"),c(z$,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraConfig"),c(Q$,"href","/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(W$,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertConfig"),c(H$,"href","/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaConfig"),c(U$,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetConfig"),c(J$,"href","/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTConfig"),c(Y$,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelConfig"),c(K$,"href","/docs/transformers/pr_17247/en/model_doc/glpn#transformers.GLPNConfig"),c(Z$,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Config"),c(ek,"href","/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ok,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJConfig"),c(rk,"href","/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertConfig"),c(tk,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertConfig"),c(ak,"href","/docs/transformers/pr_17247/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nk,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sk,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lk,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDConfig"),c(ik,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerConfig"),c(dk,"href","/docs/transformers/pr_17247/en/model_doc/luke#transformers.LukeConfig"),c(ck,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertConfig"),c(fk,"href","/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100Config"),c(mk,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianConfig"),c(gk,"href","/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(hk,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartConfig"),c(pk,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(uk,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(_k,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetConfig"),c(bk,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Config"),c(vk,"href","/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Fk,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Tk,"href","/docs/transformers/pr_17247/en/model_doc/opt#transformers.OPTConfig"),c(Mk,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ek,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ck,"href","/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartConfig"),c(wk,"href","/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Ak,"href","/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(yk,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Lk,"href","/docs/transformers/pr_17247/en/model_doc/rag#transformers.RagConfig"),c(xk,"href","/docs/transformers/pr_17247/en/model_doc/realm#transformers.RealmConfig"),c($k,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerConfig"),c(kk,"href","/docs/transformers/pr_17247/en/model_doc/regnet#transformers.RegNetConfig"),c(Sk,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertConfig"),c(Rk,"href","/docs/transformers/pr_17247/en/model_doc/resnet#transformers.ResNetConfig"),c(Pk,"href","/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertConfig"),c(Bk,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaConfig"),c(Ik,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerConfig"),c(qk,"href","/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerConfig"),c(Nk,"href","/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWConfig"),c(jk,"href","/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDConfig"),c(Dk,"href","/docs/transformers/pr_17247/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Gk,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Ok,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Vk,"href","/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterConfig"),c(Xk,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(zk,"href","/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinConfig"),c(Qk,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Config"),c(Wk,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasConfig"),c(Hk,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Uk,"href","/docs/transformers/pr_17247/en/model_doc/trocr#transformers.TrOCRConfig"),c(Jk,"href","/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Yk,"href","/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Kk,"href","/docs/transformers/pr_17247/en/model_doc/van#transformers.VanConfig"),c(Zk,"href","/docs/transformers/pr_17247/en/model_doc/vilt#transformers.ViltConfig"),c(eS,"href","/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(oS,"href","/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(rS,"href","/docs/transformers/pr_17247/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(tS,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTConfig"),c(aS,"href","/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(nS,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(sS,"href","/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMConfig"),c(lS,"href","/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMConfig"),c(iS,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMConfig"),c(dS,"href","/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(cS,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(fS,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(mS,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetConfig"),c(gS,"href","/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosConfig"),c(hS,"href","/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(pS,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(uS,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertTokenizer"),c(_S,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bS,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartTokenizer"),c(vS,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartTokenizerFast"),c(FS,"href","/docs/transformers/pr_17247/en/model_doc/barthez#transformers.BarthezTokenizer"),c(TS,"href","/docs/transformers/pr_17247/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(MS,"href","/docs/transformers/pr_17247/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(ES,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizer"),c(CS,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizerFast"),c(wS,"href","/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(AS,"href","/docs/transformers/pr_17247/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(yS,"href","/docs/transformers/pr_17247/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(LS,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(xS,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c($S,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(kS,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(SS,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(RS,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(PS,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(BS,"href","/docs/transformers/pr_17247/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(IS,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertTokenizer"),c(qS,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(NS,"href","/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineTokenizer"),c(jS,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPTokenizer"),c(DS,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(GS,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(OS,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(VS,"href","/docs/transformers/pr_17247/en/model_doc/cpm#transformers.CpmTokenizer"),c(XS,"href","/docs/transformers/pr_17247/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(zS,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(QS,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WS,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HS,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaTokenizer"),c(US,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(JS,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(YS,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(KS,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ZS,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(eR,"href","/docs/transformers/pr_17247/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(oR,"href","/docs/transformers/pr_17247/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(rR,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraTokenizer"),c(tR,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(aR,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(nR,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetTokenizer"),c(sR,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(lR,"href","/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(iR,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelTokenizer"),c(dR,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(cR,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fR,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mR,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/pr_17247/en/model_doc/herbert#transformers.HerbertTokenizer"),c(_R,"href","/docs/transformers/pr_17247/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vR,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FR,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TR,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(MR,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(ER,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(CR,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(wR,"href","/docs/transformers/pr_17247/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(AR,"href","/docs/transformers/pr_17247/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(yR,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDTokenizer"),c(LR,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDTokenizerFast"),c(xR,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerTokenizer"),c($R,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(kR,"href","/docs/transformers/pr_17247/en/model_doc/luke#transformers.LukeTokenizer"),c(SR,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(RR,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(PR,"href","/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BR,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianTokenizer"),c(IR,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartTokenizer"),c(qR,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NR,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(jR,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(DR,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizer"),c(GR,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17247/en/model_doc/mluke#transformers.MLukeTokenizer"),c(VR,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XR,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(QR,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WR,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.T5Tokenizer"),c(HR,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.T5TokenizerFast"),c(UR,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertTokenizer"),c(JR,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(KR,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(oP,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(rP,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(tP,"href","/docs/transformers/pr_17247/en/model_doc/phobert#transformers.PhobertTokenizer"),c(aP,"href","/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartTokenizer"),c(nP,"href","/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(sP,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizer"),c(lP,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizerFast"),c(iP,"href","/docs/transformers/pr_17247/en/model_doc/rag#transformers.RagTokenizer"),c(dP,"href","/docs/transformers/pr_17247/en/model_doc/realm#transformers.RealmTokenizer"),c(cP,"href","/docs/transformers/pr_17247/en/model_doc/realm#transformers.RealmTokenizerFast"),c(fP,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerTokenizer"),c(mP,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(gP,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertTokenizer"),c(hP,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(uP,"href","/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bP,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vP,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(FP,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(TP,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(MP,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(EP,"href","/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterTokenizer"),c(CP,"href","/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(wP,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(AP,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.T5Tokenizer"),c(LP,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.T5TokenizerFast"),c(xP,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasTokenizer"),c($P,"href","/docs/transformers/pr_17247/en/model_doc/tapex#transformers.TapexTokenizer"),c(kP,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(SP,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizer"),c(RP,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BP,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(IP,"href","/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qP,"href","/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NP,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMTokenizer"),c(jP,"href","/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(DP,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(GP,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(OP,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VP,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XP,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zP,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(QP,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertTokenizer"),c(WP,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(HP,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UP,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JP,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YP,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KP,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZP,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eB,"href","/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oB,"href","/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rB,"href","/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tB,"href","/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aB,"href","/docs/transformers/pr_17247/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nB,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sB,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lB,"href","/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(iB,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(dB,"href","/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(cB,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fB,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(gB,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(hB,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(FB,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(TB,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPProcessor"),c(MB,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(EB,"href","/docs/transformers/pr_17247/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(CB,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wB,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AB,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(yB,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(LB,"href","/docs/transformers/pr_17247/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xB,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($B,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kB,"href","/docs/transformers/pr_17247/en/model_doc/vilt#transformers.ViltProcessor"),c(SB,"href","/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(RB,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PB,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(BB,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IB,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qB,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NB,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertModel"),c(jB,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartModel"),c(DB,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitModel"),c(GB,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertModel"),c(OB,"href","/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(VB,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdModel"),c(XB,"href","/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(zB,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QB,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(WB,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertModel"),c(HB,"href","/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineModel"),c(UB,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.CLIPModel"),c(JB,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertModel"),c(YB,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextModel"),c(KB,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLModel"),c(ZB,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eI,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oI,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rI,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaModel"),c(tI,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aI,"href","/docs/transformers/pr_17247/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nI,"href","/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTModel"),c(sI,"href","/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrModel"),c(lI,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertModel"),c(iI,"href","/docs/transformers/pr_17247/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(dI,"href","/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTModel"),c(cI,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraModel"),c(fI,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertModel"),c(mI,"href","/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaModel"),c(gI,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetModel"),c(hI,"href","/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTModel"),c(pI,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelModel"),c(uI,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_I,"href","/docs/transformers/pr_17247/en/model_doc/glpn#transformers.GLPNModel"),c(bI,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2Model"),c(vI,"href","/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(FI,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJModel"),c(TI,"href","/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertModel"),c(MI,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertModel"),c(EI,"href","/docs/transformers/pr_17247/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(CI,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(wI,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(AI,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDModel"),c(yI,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerModel"),c(LI,"href","/docs/transformers/pr_17247/en/model_doc/luke#transformers.LukeModel"),c(xI,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertModel"),c($I,"href","/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100Model"),c(kI,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianModel"),c(SI,"href","/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerModel"),c(RI,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartModel"),c(PI,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(BI,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertModel"),c(II,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetModel"),c(qI,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5Model"),c(NI,"href","/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerModel"),c(jI,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(DI,"href","/docs/transformers/pr_17247/en/model_doc/opt#transformers.OPTModel"),c(GI,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusModel"),c(OI,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverModel"),c(VI,"href","/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartModel"),c(XI,"href","/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerModel"),c(zI,"href","/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(QI,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertModel"),c(WI,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerModel"),c(HI,"href","/docs/transformers/pr_17247/en/model_doc/regnet#transformers.RegNetModel"),c(UI,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertModel"),c(JI,"href","/docs/transformers/pr_17247/en/model_doc/resnet#transformers.ResNetModel"),c(YI,"href","/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertModel"),c(KI,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaModel"),c(ZI,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerModel"),c(eq,"href","/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerModel"),c(oq,"href","/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWModel"),c(rq,"href","/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDModel"),c(tq,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(aq,"href","/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterModel"),c(nq,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(sq,"href","/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinModel"),c(lq,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5Model"),c(iq,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasModel"),c(dq,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(cq,"href","/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechModel"),c(fq,"href","/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(mq,"href","/docs/transformers/pr_17247/en/model_doc/van#transformers.VanModel"),c(gq,"href","/docs/transformers/pr_17247/en/model_doc/vilt#transformers.ViltModel"),c(hq,"href","/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(pq,"href","/docs/transformers/pr_17247/en/model_doc/visual_bert#transformers.VisualBertModel"),c(uq,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTModel"),c(_q,"href","/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(bq,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(vq,"href","/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMModel"),c(Fq,"href","/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMModel"),c(Tq,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMModel"),c(Mq,"href","/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Eq,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Cq,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(wq,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetModel"),c(Aq,"href","/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosModel"),c(yq,"href","/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Lq,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xq,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($q,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kq,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Sq,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Rq,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForPreTraining"),c(Pq,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Bq,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qq,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jq,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Oq,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Vq,"href","/docs/transformers/pr_17247/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Xq,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForPreTraining"),c(zq,"href","/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Qq,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Wq,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Hq,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(eN,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oN,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rN,"href","/docs/transformers/pr_17247/en/model_doc/retribert#transformers.RetriBertModel"),c(tN,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(aN,"href","/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(nN,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(sN,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lN,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(iN,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dN,"href","/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(cN,"href","/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(fN,"href","/docs/transformers/pr_17247/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(mN,"href","/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(gN,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(hN,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pN,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uN,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_N,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y_,"id","transformers.AutoModelForCausalLM"),c(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(bN,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vN,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FN,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TN,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForCausalLM"),c(MN,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertLMHeadModel"),c(EN,"href","/docs/transformers/pr_17247/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(CN,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wN,"href","/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(AN,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(yN,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(LN,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(xN,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($N,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(kN,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForCausalLM"),c(SN,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(RN,"href","/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(PN,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(BN,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianForCausalLM"),c(IN,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForCausalLM"),c(qN,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(NN,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(jN,"href","/docs/transformers/pr_17247/en/model_doc/opt#transformers.OPTForCausalLM"),c(DN,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(GN,"href","/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(ON,"href","/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(VN,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(XN,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(zN,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(QN,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(WN,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(HN,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(UN,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JN,"href","/docs/transformers/pr_17247/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(YN,"href","/docs/transformers/pr_17247/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(KN,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(ej,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(oj,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(rj,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g2,"id","transformers.AutoModelForMaskedLM"),c(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(tj,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(cj,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(mj,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gj,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hj,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pj,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(_j,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bj,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(vj,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yj,"href","/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(xj,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(kj,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qj,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jj,"href","/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K2,"id","transformers.AutoModelForSeq2SeqLM"),c(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Dj,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gj,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oj,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vj,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Hj,"href","/docs/transformers/pr_17247/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17247/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.MarianMTModel"),c(Kj,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17247/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17247/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b1,"id","transformers.AutoModelForSequenceClassification"),c(b1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(nD,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c($D,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17247/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.AutoModelForMultipleChoice"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(eG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($G,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W7,"id","transformers.AutoModelForNextSentencePrediction"),c(W7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W7,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(SG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(IG,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(qG,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(NG,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jG,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rb,"id","transformers.AutoModelForTokenClassification"),c(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rb,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(DG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OG,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VG,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(XG,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForTokenClassification"),c(zG,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(QG,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForTokenClassification"),c(HG,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(UG,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(JG,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(YG,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(KG,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(eO,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(rO,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(tO,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(aO,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(sO,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(lO,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(iO,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(fO,"href","/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(mO,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(pO,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(uO,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(bO,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(vO,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(FO,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(TO,"href","/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForQuestionAnswering"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(MO,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EO,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CO,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wO,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17247/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17247/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(jO,"href","/docs/transformers/pr_17247/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17247/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17247/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17247/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17247/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17247/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17247/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17247/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17247/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(sV,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(dV,"href","/docs/transformers/pr_17247/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.AutoModelForTableQuestionAnswering"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(cV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.AutoModelForImageClassification"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(hV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitForImageClassification"),c(bV,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(vV,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FV,"href","/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TV,"href","/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MV,"href","/docs/transformers/pr_17247/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EV,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CV,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wV,"href","/docs/transformers/pr_17247/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AV,"href","/docs/transformers/pr_17247/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(yV,"href","/docs/transformers/pr_17247/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(LV,"href","/docs/transformers/pr_17247/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xV,"href","/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($V,"href","/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinForImageClassification"),c(kV,"href","/docs/transformers/pr_17247/en/model_doc/van#transformers.VanForImageClassification"),c(SV,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.AutoModelForVision2Seq"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(RV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.AutoModelForAudioClassification"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(qV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForAudioFrameClassification"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(HV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(KV,"href","/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(ZV,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(eX,"href","/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForCTC"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(oX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(nX,"href","/docs/transformers/pr_17247/en/model_doc/hubert#transformers.HubertForCTC"),c(sX,"href","/docs/transformers/pr_17247/en/model_doc/sew#transformers.SEWForCTC"),c(lX,"href","/docs/transformers/pr_17247/en/model_doc/sew-d#transformers.SEWDForCTC"),c(iX,"href","/docs/transformers/pr_17247/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(dX,"href","/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(cX,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fX,"href","/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(mX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17247/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(uX,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qv,"id","transformers.AutoModelForAudioXVector"),c(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qv,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(TX,"href","/docs/transformers/pr_17247/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(MX,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(EX,"href","/docs/transformers/pr_17247/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForMaskedImageModeling"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(CX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17247/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(LX,"href","/docs/transformers/pr_17247/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(xX,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForObjectDetection"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c($X,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrForObjectDetection"),c(PX,"href","/docs/transformers/pr_17247/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForImageSegmentation"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(BX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17247/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForSemanticSegmentation"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(jX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(VX,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(XX,"href","/docs/transformers/pr_17247/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(zX,"href","/docs/transformers/pr_17247/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForInstanceSegmentation"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(QX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17247/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.TFAutoModel"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(JX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertModel"),c(ez,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.TFBartModel"),c(oz,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertModel"),c(rz,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(tz,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(az,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertModel"),c(nz,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.TFCLIPModel"),c(sz,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertModel"),c(lz,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.TFConvNextModel"),c(iz,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLModel"),c(dz,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(cz,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaModel"),c(fz,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(mz,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(gz,"href","/docs/transformers/pr_17247/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(hz,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraModel"),c(pz,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(uz,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelModel"),c(_z,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(bz,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2Model"),c(vz,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJModel"),c(Fz,"href","/docs/transformers/pr_17247/en/model_doc/hubert#transformers.TFHubertModel"),c(Tz,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Mz,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.TFLEDModel"),c(Ez,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerModel"),c(Cz,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.TFLxmertModel"),c(wz,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.TFMarianModel"),c(Az,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.TFMBartModel"),c(yz,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Lz,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetModel"),c(xz,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.TFMT5Model"),c($z,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(kz,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Sz,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertModel"),c(Rz,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaModel"),c(Pz,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Bz,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Iz,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.TFT5Model"),c(qz,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasModel"),c(Nz,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jz,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.TFViTModel"),c(Dz,"href","/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Gz,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Oz,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMModel"),c(Vz,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Xz,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.TFAutoModelForPreTraining"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(zz,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Uz,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Jz,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Yz,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Kz,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Zz,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(oQ,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(tQ,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aQ,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17247/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(sQ,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(fQ,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17247/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(hQ,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModelForCausalLM"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(MQ,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CQ,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(wQ,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(yQ,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(LQ,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(xQ,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($Q,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.TFAutoModelForImageClassification"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17247/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(IQ,"href","/docs/transformers/pr_17247/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(qQ,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForMaskedLM"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(eW,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oW,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(rW,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tW,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(aW,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nW,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sW,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(lW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fW,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(gW,"href","/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(hW,"href","/docs/transformers/pr_17247/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.TFMarianMTModel"),c(uW,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(_W,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(vW,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForSequenceClassification"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(FW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17247/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c($W,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17247/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17247/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForMultipleChoice"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(UW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(pH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(vH,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(FH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17247/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.TFAutoModelForTokenClassification"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(CH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(LH,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(xH,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c($H,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(kH,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(SH,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(RH,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(PH,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(BH,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(IH,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(qH,"href","/docs/transformers/pr_17247/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(NH,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(jH,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(DH,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(GH,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(OH,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(VH,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(XH,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(zH,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(QH,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.TFAutoModelForQuestionAnswering"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(WH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17247/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17247/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17247/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17247/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17247/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(nU,"href","/docs/transformers/pr_17247/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17247/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17247/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17247/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17247/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17247/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(hU,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17247/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.TFAutoModelForVision2Seq"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(FU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_17247/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.FlaxAutoModel"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(CU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertModel"),c(LU,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartModel"),c(xU,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.FlaxBeitModel"),c($U,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertModel"),c(kU,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(SU,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(RU,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(PU,"href","/docs/transformers/pr_17247/en/model_doc/clip#transformers.FlaxCLIPModel"),c(BU,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(IU,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraModel"),c(qU,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(NU,"href","/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(jU,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(DU,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.FlaxMarianModel"),c(GU,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartModel"),c(OU,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.FlaxMT5Model"),c(VU,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(XU,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(zU,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(QU,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.FlaxT5Model"),c(WU,"href","/docs/transformers/pr_17247/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(HU,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.FlaxViTModel"),c(UU,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(JU,"href","/docs/transformers/pr_17247/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(YU,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.FlaxAutoModelForCausalLM"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(KU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(rJ,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(tJ,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(aJ,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(nJ,"href","/docs/transformers/pr_17247/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(sJ,"href","/docs/transformers/pr_17247/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(lJ,"href","/docs/transformers/pr_17247/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(iJ,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(dJ,"href","/docs/transformers/pr_17247/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForPreTraining"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(hJ,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(uJ,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(_J,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(bJ,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17247/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(CJ,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForMaskedLM"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Bc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($J,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17247/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17247/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(zJ,"href","/docs/transformers/pr_17247/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(QJ,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17247/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17247/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17247/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17247/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17247/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.FlaxAutoModelForTokenClassification"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(MY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(LY,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(xY,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($Y,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(kY,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(SY,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(RY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/pr_17247/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17247/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17247/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17247/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17247/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17247/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17247/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(XY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17247/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForImageClassification"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(HY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17247/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(KY,"href","/docs/transformers/pr_17247/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForVision2Seq"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17247/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17247/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,z0),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,Q0),e(Xe,yn),e(Xe,Ln),e(Ln,W0),e(Xe,fi),e(Xe,xn),e(xn,H0),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,m$),e(Ae,gi),e(gi,g$),e(Ae,h$),b(f,Eo,_),b(f,Ea,_),e(Ea,p$),e(Ea,pf),e(pf,u$),e(Ea,Qje),b(f,BBe,_),b(f,hi,_),e(hi,uf),e(uf,JZ),M(U0,JZ,null),e(hi,Wje),e(hi,YZ),e(YZ,Hje),b(f,IBe,_),b(f,$n,_),e($n,Uje),e($n,KZ),e(KZ,Jje),e($n,Yje),e($n,ZZ),e(ZZ,Kje),e($n,Zje),b(f,qBe,_),M(J0,f,_),b(f,NBe,_),b(f,_$,_),e(_$,eDe),b(f,jBe,_),M(_f,f,_),b(f,DBe,_),b(f,pi,_),e(pi,bf),e(bf,eee),M(Y0,eee,null),e(pi,oDe),e(pi,oee),e(oee,rDe),b(f,GBe,_),b(f,Co,_),M(K0,Co,null),e(Co,tDe),e(Co,Z0),e(Z0,aDe),e(Z0,b$),e(b$,nDe),e(Z0,sDe),e(Co,lDe),e(Co,e6),e(e6,iDe),e(e6,ree),e(ree,dDe),e(e6,cDe),e(Co,fDe),e(Co,Er),M(o6,Er,null),e(Er,mDe),e(Er,tee),e(tee,gDe),e(Er,hDe),e(Er,ui),e(ui,pDe),e(ui,aee),e(aee,uDe),e(ui,_De),e(ui,nee),e(nee,bDe),e(ui,vDe),e(Er,FDe),e(Er,y),e(y,vf),e(vf,see),e(see,TDe),e(vf,MDe),e(vf,v$),e(v$,EDe),e(vf,CDe),e(y,wDe),e(y,Ff),e(Ff,lee),e(lee,ADe),e(Ff,yDe),e(Ff,F$),e(F$,LDe),e(Ff,xDe),e(y,$De),e(y,Tf),e(Tf,iee),e(iee,kDe),e(Tf,SDe),e(Tf,T$),e(T$,RDe),e(Tf,PDe),e(y,BDe),e(y,Mf),e(Mf,dee),e(dee,IDe),e(Mf,qDe),e(Mf,M$),e(M$,NDe),e(Mf,jDe),e(y,DDe),e(y,Ef),e(Ef,cee),e(cee,GDe),e(Ef,ODe),e(Ef,E$),e(E$,VDe),e(Ef,XDe),e(y,zDe),e(y,Cf),e(Cf,fee),e(fee,QDe),e(Cf,WDe),e(Cf,C$),e(C$,HDe),e(Cf,UDe),e(y,JDe),e(y,wf),e(wf,mee),e(mee,YDe),e(wf,KDe),e(wf,w$),e(w$,ZDe),e(wf,eGe),e(y,oGe),e(y,Af),e(Af,gee),e(gee,rGe),e(Af,tGe),e(Af,A$),e(A$,aGe),e(Af,nGe),e(y,sGe),e(y,yf),e(yf,hee),e(hee,lGe),e(yf,iGe),e(yf,y$),e(y$,dGe),e(yf,cGe),e(y,fGe),e(y,Lf),e(Lf,pee),e(pee,mGe),e(Lf,gGe),e(Lf,L$),e(L$,hGe),e(Lf,pGe),e(y,uGe),e(y,xf),e(xf,uee),e(uee,_Ge),e(xf,bGe),e(xf,x$),e(x$,vGe),e(xf,FGe),e(y,TGe),e(y,$f),e($f,_ee),e(_ee,MGe),e($f,EGe),e($f,$$),e($$,CGe),e($f,wGe),e(y,AGe),e(y,kf),e(kf,bee),e(bee,yGe),e(kf,LGe),e(kf,k$),e(k$,xGe),e(kf,$Ge),e(y,kGe),e(y,Sf),e(Sf,vee),e(vee,SGe),e(Sf,RGe),e(Sf,S$),e(S$,PGe),e(Sf,BGe),e(y,IGe),e(y,Rf),e(Rf,Fee),e(Fee,qGe),e(Rf,NGe),e(Rf,R$),e(R$,jGe),e(Rf,DGe),e(y,GGe),e(y,Pf),e(Pf,Tee),e(Tee,OGe),e(Pf,VGe),e(Pf,P$),e(P$,XGe),e(Pf,zGe),e(y,QGe),e(y,Bf),e(Bf,Mee),e(Mee,WGe),e(Bf,HGe),e(Bf,B$),e(B$,UGe),e(Bf,JGe),e(y,YGe),e(y,If),e(If,Eee),e(Eee,KGe),e(If,ZGe),e(If,I$),e(I$,eOe),e(If,oOe),e(y,rOe),e(y,qf),e(qf,Cee),e(Cee,tOe),e(qf,aOe),e(qf,q$),e(q$,nOe),e(qf,sOe),e(y,lOe),e(y,Nf),e(Nf,wee),e(wee,iOe),e(Nf,dOe),e(Nf,N$),e(N$,cOe),e(Nf,fOe),e(y,mOe),e(y,jf),e(jf,Aee),e(Aee,gOe),e(jf,hOe),e(jf,j$),e(j$,pOe),e(jf,uOe),e(y,_Oe),e(y,Df),e(Df,yee),e(yee,bOe),e(Df,vOe),e(Df,D$),e(D$,FOe),e(Df,TOe),e(y,MOe),e(y,Gf),e(Gf,Lee),e(Lee,EOe),e(Gf,COe),e(Gf,G$),e(G$,wOe),e(Gf,AOe),e(y,yOe),e(y,Of),e(Of,xee),e(xee,LOe),e(Of,xOe),e(Of,O$),e(O$,$Oe),e(Of,kOe),e(y,SOe),e(y,Vf),e(Vf,$ee),e($ee,ROe),e(Vf,POe),e(Vf,V$),e(V$,BOe),e(Vf,IOe),e(y,qOe),e(y,Xf),e(Xf,kee),e(kee,NOe),e(Xf,jOe),e(Xf,X$),e(X$,DOe),e(Xf,GOe),e(y,OOe),e(y,zf),e(zf,See),e(See,VOe),e(zf,XOe),e(zf,z$),e(z$,zOe),e(zf,QOe),e(y,WOe),e(y,Qf),e(Qf,Ree),e(Ree,HOe),e(Qf,UOe),e(Qf,Q$),e(Q$,JOe),e(Qf,YOe),e(y,KOe),e(y,Wf),e(Wf,Pee),e(Pee,ZOe),e(Wf,eVe),e(Wf,W$),e(W$,oVe),e(Wf,rVe),e(y,tVe),e(y,Hf),e(Hf,Bee),e(Bee,aVe),e(Hf,nVe),e(Hf,H$),e(H$,sVe),e(Hf,lVe),e(y,iVe),e(y,Uf),e(Uf,Iee),e(Iee,dVe),e(Uf,cVe),e(Uf,U$),e(U$,fVe),e(Uf,mVe),e(y,gVe),e(y,Jf),e(Jf,qee),e(qee,hVe),e(Jf,pVe),e(Jf,J$),e(J$,uVe),e(Jf,_Ve),e(y,bVe),e(y,Yf),e(Yf,Nee),e(Nee,vVe),e(Yf,FVe),e(Yf,Y$),e(Y$,TVe),e(Yf,MVe),e(y,EVe),e(y,Kf),e(Kf,jee),e(jee,CVe),e(Kf,wVe),e(Kf,K$),e(K$,AVe),e(Kf,yVe),e(y,LVe),e(y,Zf),e(Zf,Dee),e(Dee,xVe),e(Zf,$Ve),e(Zf,Z$),e(Z$,kVe),e(Zf,SVe),e(y,RVe),e(y,em),e(em,Gee),e(Gee,PVe),e(em,BVe),e(em,ek),e(ek,IVe),e(em,qVe),e(y,NVe),e(y,om),e(om,Oee),e(Oee,jVe),e(om,DVe),e(om,ok),e(ok,GVe),e(om,OVe),e(y,VVe),e(y,rm),e(rm,Vee),e(Vee,XVe),e(rm,zVe),e(rm,rk),e(rk,QVe),e(rm,WVe),e(y,HVe),e(y,tm),e(tm,Xee),e(Xee,UVe),e(tm,JVe),e(tm,tk),e(tk,YVe),e(tm,KVe),e(y,ZVe),e(y,am),e(am,zee),e(zee,eXe),e(am,oXe),e(am,ak),e(ak,rXe),e(am,tXe),e(y,aXe),e(y,nm),e(nm,Qee),e(Qee,nXe),e(nm,sXe),e(nm,nk),e(nk,lXe),e(nm,iXe),e(y,dXe),e(y,sm),e(sm,Wee),e(Wee,cXe),e(sm,fXe),e(sm,sk),e(sk,mXe),e(sm,gXe),e(y,hXe),e(y,lm),e(lm,Hee),e(Hee,pXe),e(lm,uXe),e(lm,lk),e(lk,_Xe),e(lm,bXe),e(y,vXe),e(y,im),e(im,Uee),e(Uee,FXe),e(im,TXe),e(im,ik),e(ik,MXe),e(im,EXe),e(y,CXe),e(y,dm),e(dm,Jee),e(Jee,wXe),e(dm,AXe),e(dm,dk),e(dk,yXe),e(dm,LXe),e(y,xXe),e(y,cm),e(cm,Yee),e(Yee,$Xe),e(cm,kXe),e(cm,ck),e(ck,SXe),e(cm,RXe),e(y,PXe),e(y,fm),e(fm,Kee),e(Kee,BXe),e(fm,IXe),e(fm,fk),e(fk,qXe),e(fm,NXe),e(y,jXe),e(y,mm),e(mm,Zee),e(Zee,DXe),e(mm,GXe),e(mm,mk),e(mk,OXe),e(mm,VXe),e(y,XXe),e(y,gm),e(gm,eoe),e(eoe,zXe),e(gm,QXe),e(gm,gk),e(gk,WXe),e(gm,HXe),e(y,UXe),e(y,hm),e(hm,ooe),e(ooe,JXe),e(hm,YXe),e(hm,hk),e(hk,KXe),e(hm,ZXe),e(y,eze),e(y,pm),e(pm,roe),e(roe,oze),e(pm,rze),e(pm,pk),e(pk,tze),e(pm,aze),e(y,nze),e(y,um),e(um,toe),e(toe,sze),e(um,lze),e(um,uk),e(uk,ize),e(um,dze),e(y,cze),e(y,_m),e(_m,aoe),e(aoe,fze),e(_m,mze),e(_m,_k),e(_k,gze),e(_m,hze),e(y,pze),e(y,bm),e(bm,noe),e(noe,uze),e(bm,_ze),e(bm,bk),e(bk,bze),e(bm,vze),e(y,Fze),e(y,vm),e(vm,soe),e(soe,Tze),e(vm,Mze),e(vm,vk),e(vk,Eze),e(vm,Cze),e(y,wze),e(y,Fm),e(Fm,loe),e(loe,Aze),e(Fm,yze),e(Fm,Fk),e(Fk,Lze),e(Fm,xze),e(y,$ze),e(y,Tm),e(Tm,ioe),e(ioe,kze),e(Tm,Sze),e(Tm,Tk),e(Tk,Rze),e(Tm,Pze),e(y,Bze),e(y,Mm),e(Mm,doe),e(doe,Ize),e(Mm,qze),e(Mm,Mk),e(Mk,Nze),e(Mm,jze),e(y,Dze),e(y,Em),e(Em,coe),e(coe,Gze),e(Em,Oze),e(Em,Ek),e(Ek,Vze),e(Em,Xze),e(y,zze),e(y,Cm),e(Cm,foe),e(foe,Qze),e(Cm,Wze),e(Cm,Ck),e(Ck,Hze),e(Cm,Uze),e(y,Jze),e(y,wm),e(wm,moe),e(moe,Yze),e(wm,Kze),e(wm,wk),e(wk,Zze),e(wm,eQe),e(y,oQe),e(y,Am),e(Am,goe),e(goe,rQe),e(Am,tQe),e(Am,Ak),e(Ak,aQe),e(Am,nQe),e(y,sQe),e(y,ym),e(ym,hoe),e(hoe,lQe),e(ym,iQe),e(ym,yk),e(yk,dQe),e(ym,cQe),e(y,fQe),e(y,Lm),e(Lm,poe),e(poe,mQe),e(Lm,gQe),e(Lm,Lk),e(Lk,hQe),e(Lm,pQe),e(y,uQe),e(y,xm),e(xm,uoe),e(uoe,_Qe),e(xm,bQe),e(xm,xk),e(xk,vQe),e(xm,FQe),e(y,TQe),e(y,$m),e($m,_oe),e(_oe,MQe),e($m,EQe),e($m,$k),e($k,CQe),e($m,wQe),e(y,AQe),e(y,km),e(km,boe),e(boe,yQe),e(km,LQe),e(km,kk),e(kk,xQe),e(km,$Qe),e(y,kQe),e(y,Sm),e(Sm,voe),e(voe,SQe),e(Sm,RQe),e(Sm,Sk),e(Sk,PQe),e(Sm,BQe),e(y,IQe),e(y,Rm),e(Rm,Foe),e(Foe,qQe),e(Rm,NQe),e(Rm,Rk),e(Rk,jQe),e(Rm,DQe),e(y,GQe),e(y,Pm),e(Pm,Toe),e(Toe,OQe),e(Pm,VQe),e(Pm,Pk),e(Pk,XQe),e(Pm,zQe),e(y,QQe),e(y,Bm),e(Bm,Moe),e(Moe,WQe),e(Bm,HQe),e(Bm,Bk),e(Bk,UQe),e(Bm,JQe),e(y,YQe),e(y,Im),e(Im,Eoe),e(Eoe,KQe),e(Im,ZQe),e(Im,Ik),e(Ik,eWe),e(Im,oWe),e(y,rWe),e(y,qm),e(qm,Coe),e(Coe,tWe),e(qm,aWe),e(qm,qk),e(qk,nWe),e(qm,sWe),e(y,lWe),e(y,Nm),e(Nm,woe),e(woe,iWe),e(Nm,dWe),e(Nm,Nk),e(Nk,cWe),e(Nm,fWe),e(y,mWe),e(y,jm),e(jm,Aoe),e(Aoe,gWe),e(jm,hWe),e(jm,jk),e(jk,pWe),e(jm,uWe),e(y,_We),e(y,Dm),e(Dm,yoe),e(yoe,bWe),e(Dm,vWe),e(Dm,Dk),e(Dk,FWe),e(Dm,TWe),e(y,MWe),e(y,Gm),e(Gm,Loe),e(Loe,EWe),e(Gm,CWe),e(Gm,Gk),e(Gk,wWe),e(Gm,AWe),e(y,yWe),e(y,Om),e(Om,xoe),e(xoe,LWe),e(Om,xWe),e(Om,Ok),e(Ok,$We),e(Om,kWe),e(y,SWe),e(y,Vm),e(Vm,$oe),e($oe,RWe),e(Vm,PWe),e(Vm,Vk),e(Vk,BWe),e(Vm,IWe),e(y,qWe),e(y,Xm),e(Xm,koe),e(koe,NWe),e(Xm,jWe),e(Xm,Xk),e(Xk,DWe),e(Xm,GWe),e(y,OWe),e(y,zm),e(zm,Soe),e(Soe,VWe),e(zm,XWe),e(zm,zk),e(zk,zWe),e(zm,QWe),e(y,WWe),e(y,Qm),e(Qm,Roe),e(Roe,HWe),e(Qm,UWe),e(Qm,Qk),e(Qk,JWe),e(Qm,YWe),e(y,KWe),e(y,Wm),e(Wm,Poe),e(Poe,ZWe),e(Wm,eHe),e(Wm,Wk),e(Wk,oHe),e(Wm,rHe),e(y,tHe),e(y,Hm),e(Hm,Boe),e(Boe,aHe),e(Hm,nHe),e(Hm,Hk),e(Hk,sHe),e(Hm,lHe),e(y,iHe),e(y,Um),e(Um,Ioe),e(Ioe,dHe),e(Um,cHe),e(Um,Uk),e(Uk,fHe),e(Um,mHe),e(y,gHe),e(y,Jm),e(Jm,qoe),e(qoe,hHe),e(Jm,pHe),e(Jm,Jk),e(Jk,uHe),e(Jm,_He),e(y,bHe),e(y,Ym),e(Ym,Noe),e(Noe,vHe),e(Ym,FHe),e(Ym,Yk),e(Yk,THe),e(Ym,MHe),e(y,EHe),e(y,Km),e(Km,joe),e(joe,CHe),e(Km,wHe),e(Km,Kk),e(Kk,AHe),e(Km,yHe),e(y,LHe),e(y,Zm),e(Zm,Doe),e(Doe,xHe),e(Zm,$He),e(Zm,Zk),e(Zk,kHe),e(Zm,SHe),e(y,RHe),e(y,eg),e(eg,Goe),e(Goe,PHe),e(eg,BHe),e(eg,eS),e(eS,IHe),e(eg,qHe),e(y,NHe),e(y,og),e(og,Ooe),e(Ooe,jHe),e(og,DHe),e(og,oS),e(oS,GHe),e(og,OHe),e(y,VHe),e(y,rg),e(rg,Voe),e(Voe,XHe),e(rg,zHe),e(rg,rS),e(rS,QHe),e(rg,WHe),e(y,HHe),e(y,tg),e(tg,Xoe),e(Xoe,UHe),e(tg,JHe),e(tg,tS),e(tS,YHe),e(tg,KHe),e(y,ZHe),e(y,ag),e(ag,zoe),e(zoe,eUe),e(ag,oUe),e(ag,aS),e(aS,rUe),e(ag,tUe),e(y,aUe),e(y,ng),e(ng,Qoe),e(Qoe,nUe),e(ng,sUe),e(ng,nS),e(nS,lUe),e(ng,iUe),e(y,dUe),e(y,sg),e(sg,Woe),e(Woe,cUe),e(sg,fUe),e(sg,sS),e(sS,mUe),e(sg,gUe),e(y,hUe),e(y,lg),e(lg,Hoe),e(Hoe,pUe),e(lg,uUe),e(lg,lS),e(lS,_Ue),e(lg,bUe),e(y,vUe),e(y,ig),e(ig,Uoe),e(Uoe,FUe),e(ig,TUe),e(ig,iS),e(iS,MUe),e(ig,EUe),e(y,CUe),e(y,dg),e(dg,Joe),e(Joe,wUe),e(dg,AUe),e(dg,dS),e(dS,yUe),e(dg,LUe),e(y,xUe),e(y,cg),e(cg,Yoe),e(Yoe,$Ue),e(cg,kUe),e(cg,cS),e(cS,SUe),e(cg,RUe),e(y,PUe),e(y,fg),e(fg,Koe),e(Koe,BUe),e(fg,IUe),e(fg,fS),e(fS,qUe),e(fg,NUe),e(y,jUe),e(y,mg),e(mg,Zoe),e(Zoe,DUe),e(mg,GUe),e(mg,mS),e(mS,OUe),e(mg,VUe),e(y,XUe),e(y,gg),e(gg,ere),e(ere,zUe),e(gg,QUe),e(gg,gS),e(gS,WUe),e(gg,HUe),e(y,UUe),e(y,hg),e(hg,ore),e(ore,JUe),e(hg,YUe),e(hg,hS),e(hS,KUe),e(hg,ZUe),e(Er,eJe),M(pg,Er,null),e(Co,oJe),e(Co,ug),M(r6,ug,null),e(ug,rJe),e(ug,rre),e(rre,tJe),b(f,OBe,_),b(f,_i,_),e(_i,_g),e(_g,tre),M(t6,tre,null),e(_i,aJe),e(_i,are),e(are,nJe),b(f,VBe,_),b(f,wo,_),M(a6,wo,null),e(wo,sJe),e(wo,n6),e(n6,lJe),e(n6,pS),e(pS,iJe),e(n6,dJe),e(wo,cJe),e(wo,s6),e(s6,fJe),e(s6,nre),e(nre,mJe),e(s6,gJe),e(wo,hJe),e(wo,Cr),M(l6,Cr,null),e(Cr,pJe),e(Cr,sre),e(sre,uJe),e(Cr,_Je),e(Cr,Ca),e(Ca,bJe),e(Ca,lre),e(lre,vJe),e(Ca,FJe),e(Ca,ire),e(ire,TJe),e(Ca,MJe),e(Ca,dre),e(dre,EJe),e(Ca,CJe),e(Cr,wJe),e(Cr,k),e(k,kn),e(kn,cre),e(cre,AJe),e(kn,yJe),e(kn,uS),e(uS,LJe),e(kn,xJe),e(kn,_S),e(_S,$Je),e(kn,kJe),e(k,SJe),e(k,Sn),e(Sn,fre),e(fre,RJe),e(Sn,PJe),e(Sn,bS),e(bS,BJe),e(Sn,IJe),e(Sn,vS),e(vS,qJe),e(Sn,NJe),e(k,jJe),e(k,Rn),e(Rn,mre),e(mre,DJe),e(Rn,GJe),e(Rn,FS),e(FS,OJe),e(Rn,VJe),e(Rn,TS),e(TS,XJe),e(Rn,zJe),e(k,QJe),e(k,bg),e(bg,gre),e(gre,WJe),e(bg,HJe),e(bg,MS),e(MS,UJe),e(bg,JJe),e(k,YJe),e(k,Pn),e(Pn,hre),e(hre,KJe),e(Pn,ZJe),e(Pn,ES),e(ES,eYe),e(Pn,oYe),e(Pn,CS),e(CS,rYe),e(Pn,tYe),e(k,aYe),e(k,vg),e(vg,pre),e(pre,nYe),e(vg,sYe),e(vg,wS),e(wS,lYe),e(vg,iYe),e(k,dYe),e(k,Fg),e(Fg,ure),e(ure,cYe),e(Fg,fYe),e(Fg,AS),e(AS,mYe),e(Fg,gYe),e(k,hYe),e(k,Tg),e(Tg,_re),e(_re,pYe),e(Tg,uYe),e(Tg,yS),e(yS,_Ye),e(Tg,bYe),e(k,vYe),e(k,Bn),e(Bn,bre),e(bre,FYe),e(Bn,TYe),e(Bn,LS),e(LS,MYe),e(Bn,EYe),e(Bn,xS),e(xS,CYe),e(Bn,wYe),e(k,AYe),e(k,In),e(In,vre),e(vre,yYe),e(In,LYe),e(In,$S),e($S,xYe),e(In,$Ye),e(In,kS),e(kS,kYe),e(In,SYe),e(k,RYe),e(k,qn),e(qn,Fre),e(Fre,PYe),e(qn,BYe),e(qn,SS),e(SS,IYe),e(qn,qYe),e(qn,RS),e(RS,NYe),e(qn,jYe),e(k,DYe),e(k,Mg),e(Mg,Tre),e(Tre,GYe),e(Mg,OYe),e(Mg,PS),e(PS,VYe),e(Mg,XYe),e(k,zYe),e(k,Eg),e(Eg,Mre),e(Mre,QYe),e(Eg,WYe),e(Eg,BS),e(BS,HYe),e(Eg,UYe),e(k,JYe),e(k,Nn),e(Nn,Ere),e(Ere,YYe),e(Nn,KYe),e(Nn,IS),e(IS,ZYe),e(Nn,eKe),e(Nn,qS),e(qS,oKe),e(Nn,rKe),e(k,tKe),e(k,Cg),e(Cg,Cre),e(Cre,aKe),e(Cg,nKe),e(Cg,NS),e(NS,sKe),e(Cg,lKe),e(k,iKe),e(k,jn),e(jn,wre),e(wre,dKe),e(jn,cKe),e(jn,jS),e(jS,fKe),e(jn,mKe),e(jn,DS),e(DS,gKe),e(jn,hKe),e(k,pKe),e(k,Dn),e(Dn,Are),e(Are,uKe),e(Dn,_Ke),e(Dn,GS),e(GS,bKe),e(Dn,vKe),e(Dn,OS),e(OS,FKe),e(Dn,TKe),e(k,MKe),e(k,Gn),e(Gn,yre),e(yre,EKe),e(Gn,CKe),e(Gn,VS),e(VS,wKe),e(Gn,AKe),e(Gn,XS),e(XS,yKe),e(Gn,LKe),e(k,xKe),e(k,wg),e(wg,Lre),e(Lre,$Ke),e(wg,kKe),e(wg,zS),e(zS,SKe),e(wg,RKe),e(k,PKe),e(k,On),e(On,xre),e(xre,BKe),e(On,IKe),e(On,QS),e(QS,qKe),e(On,NKe),e(On,WS),e(WS,jKe),e(On,DKe),e(k,GKe),e(k,Vn),e(Vn,$re),e($re,OKe),e(Vn,VKe),e(Vn,HS),e(HS,XKe),e(Vn,zKe),e(Vn,US),e(US,QKe),e(Vn,WKe),e(k,HKe),e(k,Xn),e(Xn,kre),e(kre,UKe),e(Xn,JKe),e(Xn,JS),e(JS,YKe),e(Xn,KKe),e(Xn,YS),e(YS,ZKe),e(Xn,eZe),e(k,oZe),e(k,zn),e(zn,Sre),e(Sre,rZe),e(zn,tZe),e(zn,KS),e(KS,aZe),e(zn,nZe),e(zn,ZS),e(ZS,sZe),e(zn,lZe),e(k,iZe),e(k,Qn),e(Qn,Rre),e(Rre,dZe),e(Qn,cZe),e(Qn,eR),e(eR,fZe),e(Qn,mZe),e(Qn,oR),e(oR,gZe),e(Qn,hZe),e(k,pZe),e(k,Wn),e(Wn,Pre),e(Pre,uZe),e(Wn,_Ze),e(Wn,rR),e(rR,bZe),e(Wn,vZe),e(Wn,tR),e(tR,FZe),e(Wn,TZe),e(k,MZe),e(k,Ag),e(Ag,Bre),e(Bre,EZe),e(Ag,CZe),e(Ag,aR),e(aR,wZe),e(Ag,AZe),e(k,yZe),e(k,Hn),e(Hn,Ire),e(Ire,LZe),e(Hn,xZe),e(Hn,nR),e(nR,$Ze),e(Hn,kZe),e(Hn,sR),e(sR,SZe),e(Hn,RZe),e(k,PZe),e(k,yg),e(yg,qre),e(qre,BZe),e(yg,IZe),e(yg,lR),e(lR,qZe),e(yg,NZe),e(k,jZe),e(k,Un),e(Un,Nre),e(Nre,DZe),e(Un,GZe),e(Un,iR),e(iR,OZe),e(Un,VZe),e(Un,dR),e(dR,XZe),e(Un,zZe),e(k,QZe),e(k,Jn),e(Jn,jre),e(jre,WZe),e(Jn,HZe),e(Jn,cR),e(cR,UZe),e(Jn,JZe),e(Jn,fR),e(fR,YZe),e(Jn,KZe),e(k,ZZe),e(k,Yn),e(Yn,Dre),e(Dre,eeo),e(Yn,oeo),e(Yn,mR),e(mR,reo),e(Yn,teo),e(Yn,gR),e(gR,aeo),e(Yn,neo),e(k,seo),e(k,Kn),e(Kn,Gre),e(Gre,leo),e(Kn,ieo),e(Kn,hR),e(hR,deo),e(Kn,ceo),e(Kn,pR),e(pR,feo),e(Kn,meo),e(k,geo),e(k,Zn),e(Zn,Ore),e(Ore,heo),e(Zn,peo),e(Zn,uR),e(uR,ueo),e(Zn,_eo),e(Zn,_R),e(_R,beo),e(Zn,veo),e(k,Feo),e(k,Lg),e(Lg,Vre),e(Vre,Teo),e(Lg,Meo),e(Lg,bR),e(bR,Eeo),e(Lg,Ceo),e(k,weo),e(k,es),e(es,Xre),e(Xre,Aeo),e(es,yeo),e(es,vR),e(vR,Leo),e(es,xeo),e(es,FR),e(FR,$eo),e(es,keo),e(k,Seo),e(k,os),e(os,zre),e(zre,Reo),e(os,Peo),e(os,TR),e(TR,Beo),e(os,Ieo),e(os,MR),e(MR,qeo),e(os,Neo),e(k,jeo),e(k,rs),e(rs,Qre),e(Qre,Deo),e(rs,Geo),e(rs,ER),e(ER,Oeo),e(rs,Veo),e(rs,CR),e(CR,Xeo),e(rs,zeo),e(k,Qeo),e(k,ts),e(ts,Wre),e(Wre,Weo),e(ts,Heo),e(ts,wR),e(wR,Ueo),e(ts,Jeo),e(ts,AR),e(AR,Yeo),e(ts,Keo),e(k,Zeo),e(k,as),e(as,Hre),e(Hre,eoo),e(as,ooo),e(as,yR),e(yR,roo),e(as,too),e(as,LR),e(LR,aoo),e(as,noo),e(k,soo),e(k,ns),e(ns,Ure),e(Ure,loo),e(ns,ioo),e(ns,xR),e(xR,doo),e(ns,coo),e(ns,$R),e($R,foo),e(ns,moo),e(k,goo),e(k,xg),e(xg,Jre),e(Jre,hoo),e(xg,poo),e(xg,kR),e(kR,uoo),e(xg,_oo),e(k,boo),e(k,ss),e(ss,Yre),e(Yre,voo),e(ss,Foo),e(ss,SR),e(SR,Too),e(ss,Moo),e(ss,RR),e(RR,Eoo),e(ss,Coo),e(k,woo),e(k,$g),e($g,Kre),e(Kre,Aoo),e($g,yoo),e($g,PR),e(PR,Loo),e($g,xoo),e(k,$oo),e(k,kg),e(kg,Zre),e(Zre,koo),e(kg,Soo),e(kg,BR),e(BR,Roo),e(kg,Poo),e(k,Boo),e(k,ls),e(ls,ete),e(ete,Ioo),e(ls,qoo),e(ls,IR),e(IR,Noo),e(ls,joo),e(ls,qR),e(qR,Doo),e(ls,Goo),e(k,Ooo),e(k,is),e(is,ote),e(ote,Voo),e(is,Xoo),e(is,NR),e(NR,zoo),e(is,Qoo),e(is,jR),e(jR,Woo),e(is,Hoo),e(k,Uoo),e(k,ds),e(ds,rte),e(rte,Joo),e(ds,Yoo),e(ds,DR),e(DR,Koo),e(ds,Zoo),e(ds,GR),e(GR,ero),e(ds,oro),e(k,rro),e(k,Sg),e(Sg,tte),e(tte,tro),e(Sg,aro),e(Sg,OR),e(OR,nro),e(Sg,sro),e(k,lro),e(k,cs),e(cs,ate),e(ate,iro),e(cs,dro),e(cs,VR),e(VR,cro),e(cs,fro),e(cs,XR),e(XR,mro),e(cs,gro),e(k,hro),e(k,fs),e(fs,nte),e(nte,pro),e(fs,uro),e(fs,zR),e(zR,_ro),e(fs,bro),e(fs,QR),e(QR,vro),e(fs,Fro),e(k,Tro),e(k,ms),e(ms,ste),e(ste,Mro),e(ms,Ero),e(ms,WR),e(WR,Cro),e(ms,wro),e(ms,HR),e(HR,Aro),e(ms,yro),e(k,Lro),e(k,gs),e(gs,lte),e(lte,xro),e(gs,$ro),e(gs,UR),e(UR,kro),e(gs,Sro),e(gs,JR),e(JR,Rro),e(gs,Pro),e(k,Bro),e(k,hs),e(hs,ite),e(ite,Iro),e(hs,qro),e(hs,YR),e(YR,Nro),e(hs,jro),e(hs,KR),e(KR,Dro),e(hs,Gro),e(k,Oro),e(k,Rg),e(Rg,dte),e(dte,Vro),e(Rg,Xro),e(Rg,ZR),e(ZR,zro),e(Rg,Qro),e(k,Wro),e(k,ps),e(ps,cte),e(cte,Hro),e(ps,Uro),e(ps,eP),e(eP,Jro),e(ps,Yro),e(ps,oP),e(oP,Kro),e(ps,Zro),e(k,eto),e(k,Pg),e(Pg,fte),e(fte,oto),e(Pg,rto),e(Pg,rP),e(rP,tto),e(Pg,ato),e(k,nto),e(k,Bg),e(Bg,mte),e(mte,sto),e(Bg,lto),e(Bg,tP),e(tP,ito),e(Bg,dto),e(k,cto),e(k,Ig),e(Ig,gte),e(gte,fto),e(Ig,mto),e(Ig,aP),e(aP,gto),e(Ig,hto),e(k,pto),e(k,qg),e(qg,hte),e(hte,uto),e(qg,_to),e(qg,nP),e(nP,bto),e(qg,vto),e(k,Fto),e(k,us),e(us,pte),e(pte,Tto),e(us,Mto),e(us,sP),e(sP,Eto),e(us,Cto),e(us,lP),e(lP,wto),e(us,Ato),e(k,yto),e(k,Ng),e(Ng,ute),e(ute,Lto),e(Ng,xto),e(Ng,iP),e(iP,$to),e(Ng,kto),e(k,Sto),e(k,_s),e(_s,_te),e(_te,Rto),e(_s,Pto),e(_s,dP),e(dP,Bto),e(_s,Ito),e(_s,cP),e(cP,qto),e(_s,Nto),e(k,jto),e(k,bs),e(bs,bte),e(bte,Dto),e(bs,Gto),e(bs,fP),e(fP,Oto),e(bs,Vto),e(bs,mP),e(mP,Xto),e(bs,zto),e(k,Qto),e(k,vs),e(vs,vte),e(vte,Wto),e(vs,Hto),e(vs,gP),e(gP,Uto),e(vs,Jto),e(vs,hP),e(hP,Yto),e(vs,Kto),e(k,Zto),e(k,Fs),e(Fs,Fte),e(Fte,eao),e(Fs,oao),e(Fs,pP),e(pP,rao),e(Fs,tao),e(Fs,uP),e(uP,aao),e(Fs,nao),e(k,sao),e(k,Ts),e(Ts,Tte),e(Tte,lao),e(Ts,iao),e(Ts,_P),e(_P,dao),e(Ts,cao),e(Ts,bP),e(bP,fao),e(Ts,mao),e(k,gao),e(k,Ms),e(Ms,Mte),e(Mte,hao),e(Ms,pao),e(Ms,vP),e(vP,uao),e(Ms,_ao),e(Ms,FP),e(FP,bao),e(Ms,vao),e(k,Fao),e(k,jg),e(jg,Ete),e(Ete,Tao),e(jg,Mao),e(jg,TP),e(TP,Eao),e(jg,Cao),e(k,wao),e(k,Dg),e(Dg,Cte),e(Cte,Aao),e(Dg,yao),e(Dg,MP),e(MP,Lao),e(Dg,xao),e(k,$ao),e(k,Es),e(Es,wte),e(wte,kao),e(Es,Sao),e(Es,EP),e(EP,Rao),e(Es,Pao),e(Es,CP),e(CP,Bao),e(Es,Iao),e(k,qao),e(k,Cs),e(Cs,Ate),e(Ate,Nao),e(Cs,jao),e(Cs,wP),e(wP,Dao),e(Cs,Gao),e(Cs,AP),e(AP,Oao),e(Cs,Vao),e(k,Xao),e(k,ws),e(ws,yte),e(yte,zao),e(ws,Qao),e(ws,yP),e(yP,Wao),e(ws,Hao),e(ws,LP),e(LP,Uao),e(ws,Jao),e(k,Yao),e(k,Gg),e(Gg,Lte),e(Lte,Kao),e(Gg,Zao),e(Gg,xP),e(xP,eno),e(Gg,ono),e(k,rno),e(k,Og),e(Og,xte),e(xte,tno),e(Og,ano),e(Og,$P),e($P,nno),e(Og,sno),e(k,lno),e(k,Vg),e(Vg,$te),e($te,ino),e(Vg,dno),e(Vg,kP),e(kP,cno),e(Vg,fno),e(k,mno),e(k,As),e(As,kte),e(kte,gno),e(As,hno),e(As,SP),e(SP,pno),e(As,uno),e(As,RP),e(RP,_no),e(As,bno),e(k,vno),e(k,Xg),e(Xg,Ste),e(Ste,Fno),e(Xg,Tno),e(Xg,PP),e(PP,Mno),e(Xg,Eno),e(k,Cno),e(k,zg),e(zg,Rte),e(Rte,wno),e(zg,Ano),e(zg,BP),e(BP,yno),e(zg,Lno),e(k,xno),e(k,ys),e(ys,Pte),e(Pte,$no),e(ys,kno),e(ys,IP),e(IP,Sno),e(ys,Rno),e(ys,qP),e(qP,Pno),e(ys,Bno),e(k,Ino),e(k,Qg),e(Qg,Bte),e(Bte,qno),e(Qg,Nno),e(Qg,NP),e(NP,jno),e(Qg,Dno),e(k,Gno),e(k,Wg),e(Wg,Ite),e(Ite,Ono),e(Wg,Vno),e(Wg,jP),e(jP,Xno),e(Wg,zno),e(k,Qno),e(k,Ls),e(Ls,qte),e(qte,Wno),e(Ls,Hno),e(Ls,DP),e(DP,Uno),e(Ls,Jno),e(Ls,GP),e(GP,Yno),e(Ls,Kno),e(k,Zno),e(k,xs),e(xs,Nte),e(Nte,eso),e(xs,oso),e(xs,OP),e(OP,rso),e(xs,tso),e(xs,VP),e(VP,aso),e(xs,nso),e(k,sso),e(k,$s),e($s,jte),e(jte,lso),e($s,iso),e($s,XP),e(XP,dso),e($s,cso),e($s,zP),e(zP,fso),e($s,mso),e(k,gso),e(k,ks),e(ks,Dte),e(Dte,hso),e(ks,pso),e(ks,QP),e(QP,uso),e(ks,_so),e(ks,WP),e(WP,bso),e(ks,vso),e(Cr,Fso),M(Hg,Cr,null),e(wo,Tso),e(wo,Ug),M(i6,Ug,null),e(Ug,Mso),e(Ug,Gte),e(Gte,Eso),b(f,XBe,_),b(f,bi,_),e(bi,Jg),e(Jg,Ote),M(d6,Ote,null),e(bi,Cso),e(bi,Vte),e(Vte,wso),b(f,zBe,_),b(f,Ao,_),M(c6,Ao,null),e(Ao,Aso),e(Ao,f6),e(f6,yso),e(f6,HP),e(HP,Lso),e(f6,xso),e(Ao,$so),e(Ao,m6),e(m6,kso),e(m6,Xte),e(Xte,Sso),e(m6,Rso),e(Ao,Pso),e(Ao,Qe),M(g6,Qe,null),e(Qe,Bso),e(Qe,zte),e(zte,Iso),e(Qe,qso),e(Qe,wa),e(wa,Nso),e(wa,Qte),e(Qte,jso),e(wa,Dso),e(wa,Wte),e(Wte,Gso),e(wa,Oso),e(wa,Hte),e(Hte,Vso),e(wa,Xso),e(Qe,zso),e(Qe,oe),e(oe,Yg),e(Yg,Ute),e(Ute,Qso),e(Yg,Wso),e(Yg,UP),e(UP,Hso),e(Yg,Uso),e(oe,Jso),e(oe,Kg),e(Kg,Jte),e(Jte,Yso),e(Kg,Kso),e(Kg,JP),e(JP,Zso),e(Kg,elo),e(oe,olo),e(oe,Zg),e(Zg,Yte),e(Yte,rlo),e(Zg,tlo),e(Zg,YP),e(YP,alo),e(Zg,nlo),e(oe,slo),e(oe,eh),e(eh,Kte),e(Kte,llo),e(eh,ilo),e(eh,KP),e(KP,dlo),e(eh,clo),e(oe,flo),e(oe,oh),e(oh,Zte),e(Zte,mlo),e(oh,glo),e(oh,ZP),e(ZP,hlo),e(oh,plo),e(oe,ulo),e(oe,rh),e(rh,eae),e(eae,_lo),e(rh,blo),e(rh,eB),e(eB,vlo),e(rh,Flo),e(oe,Tlo),e(oe,th),e(th,oae),e(oae,Mlo),e(th,Elo),e(th,oB),e(oB,Clo),e(th,wlo),e(oe,Alo),e(oe,ah),e(ah,rae),e(rae,ylo),e(ah,Llo),e(ah,rB),e(rB,xlo),e(ah,$lo),e(oe,klo),e(oe,nh),e(nh,tae),e(tae,Slo),e(nh,Rlo),e(nh,tB),e(tB,Plo),e(nh,Blo),e(oe,Ilo),e(oe,sh),e(sh,aae),e(aae,qlo),e(sh,Nlo),e(sh,aB),e(aB,jlo),e(sh,Dlo),e(oe,Glo),e(oe,lh),e(lh,nae),e(nae,Olo),e(lh,Vlo),e(lh,nB),e(nB,Xlo),e(lh,zlo),e(oe,Qlo),e(oe,ih),e(ih,sae),e(sae,Wlo),e(ih,Hlo),e(ih,sB),e(sB,Ulo),e(ih,Jlo),e(oe,Ylo),e(oe,dh),e(dh,lae),e(lae,Klo),e(dh,Zlo),e(dh,lB),e(lB,eio),e(dh,oio),e(oe,rio),e(oe,ch),e(ch,iae),e(iae,tio),e(ch,aio),e(ch,iB),e(iB,nio),e(ch,sio),e(oe,lio),e(oe,fh),e(fh,dae),e(dae,iio),e(fh,dio),e(fh,dB),e(dB,cio),e(fh,fio),e(oe,mio),e(oe,mh),e(mh,cae),e(cae,gio),e(mh,hio),e(mh,cB),e(cB,pio),e(mh,uio),e(oe,_io),e(oe,gh),e(gh,fae),e(fae,bio),e(gh,vio),e(gh,fB),e(fB,Fio),e(gh,Tio),e(oe,Mio),e(oe,hh),e(hh,mae),e(mae,Eio),e(hh,Cio),e(hh,mB),e(mB,wio),e(hh,Aio),e(oe,yio),e(oe,ph),e(ph,gae),e(gae,Lio),e(ph,xio),e(ph,gB),e(gB,$io),e(ph,kio),e(oe,Sio),e(oe,uh),e(uh,hae),e(hae,Rio),e(uh,Pio),e(uh,hB),e(hB,Bio),e(uh,Iio),e(oe,qio),e(oe,_h),e(_h,pae),e(pae,Nio),e(_h,jio),e(_h,pB),e(pB,Dio),e(_h,Gio),e(oe,Oio),e(oe,bh),e(bh,uae),e(uae,Vio),e(bh,Xio),e(bh,uB),e(uB,zio),e(bh,Qio),e(oe,Wio),e(oe,vh),e(vh,_ae),e(_ae,Hio),e(vh,Uio),e(vh,_B),e(_B,Jio),e(vh,Yio),e(oe,Kio),e(oe,Fh),e(Fh,bae),e(bae,Zio),e(Fh,edo),e(Fh,bB),e(bB,odo),e(Fh,rdo),e(oe,tdo),e(oe,Th),e(Th,vae),e(vae,ado),e(Th,ndo),e(Th,vB),e(vB,sdo),e(Th,ldo),e(Qe,ido),M(Mh,Qe,null),e(Qe,ddo),M(Eh,Qe,null),e(Ao,cdo),e(Ao,Ch),M(h6,Ch,null),e(Ch,fdo),e(Ch,Fae),e(Fae,mdo),b(f,QBe,_),b(f,vi,_),e(vi,wh),e(wh,Tae),M(p6,Tae,null),e(vi,gdo),e(vi,Mae),e(Mae,hdo),b(f,WBe,_),b(f,yo,_),M(u6,yo,null),e(yo,pdo),e(yo,_6),e(_6,udo),e(_6,FB),e(FB,_do),e(_6,bdo),e(yo,vdo),e(yo,b6),e(b6,Fdo),e(b6,Eae),e(Eae,Tdo),e(b6,Mdo),e(yo,Edo),e(yo,We),M(v6,We,null),e(We,Cdo),e(We,Cae),e(Cae,wdo),e(We,Ado),e(We,Fi),e(Fi,ydo),e(Fi,wae),e(wae,Ldo),e(Fi,xdo),e(Fi,Aae),e(Aae,$do),e(Fi,kdo),e(We,Sdo),e(We,_e),e(_e,Ah),e(Ah,yae),e(yae,Rdo),e(Ah,Pdo),e(Ah,TB),e(TB,Bdo),e(Ah,Ido),e(_e,qdo),e(_e,yh),e(yh,Lae),e(Lae,Ndo),e(yh,jdo),e(yh,xae),e(xae,Ddo),e(yh,Gdo),e(_e,Odo),e(_e,Lh),e(Lh,$ae),e($ae,Vdo),e(Lh,Xdo),e(Lh,MB),e(MB,zdo),e(Lh,Qdo),e(_e,Wdo),e(_e,xh),e(xh,kae),e(kae,Hdo),e(xh,Udo),e(xh,EB),e(EB,Jdo),e(xh,Ydo),e(_e,Kdo),e(_e,$h),e($h,Sae),e(Sae,Zdo),e($h,eco),e($h,CB),e(CB,oco),e($h,rco),e(_e,tco),e(_e,kh),e(kh,Rae),e(Rae,aco),e(kh,nco),e(kh,wB),e(wB,sco),e(kh,lco),e(_e,ico),e(_e,Sh),e(Sh,Pae),e(Pae,dco),e(Sh,cco),e(Sh,AB),e(AB,fco),e(Sh,mco),e(_e,gco),e(_e,Rh),e(Rh,Bae),e(Bae,hco),e(Rh,pco),e(Rh,yB),e(yB,uco),e(Rh,_co),e(_e,bco),e(_e,Ph),e(Ph,Iae),e(Iae,vco),e(Ph,Fco),e(Ph,LB),e(LB,Tco),e(Ph,Mco),e(_e,Eco),e(_e,Bh),e(Bh,qae),e(qae,Cco),e(Bh,wco),e(Bh,xB),e(xB,Aco),e(Bh,yco),e(_e,Lco),e(_e,Ih),e(Ih,Nae),e(Nae,xco),e(Ih,$co),e(Ih,$B),e($B,kco),e(Ih,Sco),e(_e,Rco),e(_e,qh),e(qh,jae),e(jae,Pco),e(qh,Bco),e(qh,kB),e(kB,Ico),e(qh,qco),e(_e,Nco),e(_e,Nh),e(Nh,Dae),e(Dae,jco),e(Nh,Dco),e(Nh,SB),e(SB,Gco),e(Nh,Oco),e(_e,Vco),e(_e,jh),e(jh,Gae),e(Gae,Xco),e(jh,zco),e(jh,RB),e(RB,Qco),e(jh,Wco),e(_e,Hco),e(_e,Dh),e(Dh,Oae),e(Oae,Uco),e(Dh,Jco),e(Dh,PB),e(PB,Yco),e(Dh,Kco),e(We,Zco),M(Gh,We,null),e(We,efo),M(Oh,We,null),e(yo,ofo),e(yo,Vh),M(F6,Vh,null),e(Vh,rfo),e(Vh,Vae),e(Vae,tfo),b(f,HBe,_),b(f,Ti,_),e(Ti,Xh),e(Xh,Xae),M(T6,Xae,null),e(Ti,afo),e(Ti,zae),e(zae,nfo),b(f,UBe,_),b(f,Lo,_),M(M6,Lo,null),e(Lo,sfo),e(Lo,Mi),e(Mi,lfo),e(Mi,BB),e(BB,ifo),e(Mi,dfo),e(Mi,IB),e(IB,cfo),e(Mi,ffo),e(Lo,mfo),e(Lo,E6),e(E6,gfo),e(E6,Qae),e(Qae,hfo),e(E6,pfo),e(Lo,ufo),e(Lo,ot),M(C6,ot,null),e(ot,_fo),e(ot,Wae),e(Wae,bfo),e(ot,vfo),e(ot,Ei),e(Ei,Ffo),e(Ei,Hae),e(Hae,Tfo),e(Ei,Mfo),e(Ei,qB),e(qB,Efo),e(Ei,Cfo),e(ot,wfo),M(zh,ot,null),e(Lo,Afo),e(Lo,He),M(w6,He,null),e(He,yfo),e(He,Uae),e(Uae,Lfo),e(He,xfo),e(He,Aa),e(Aa,$fo),e(Aa,Jae),e(Jae,kfo),e(Aa,Sfo),e(Aa,Yae),e(Yae,Rfo),e(Aa,Pfo),e(Aa,Kae),e(Kae,Bfo),e(Aa,Ifo),e(He,qfo),e(He,x),e(x,Qh),e(Qh,Zae),e(Zae,Nfo),e(Qh,jfo),e(Qh,NB),e(NB,Dfo),e(Qh,Gfo),e(x,Ofo),e(x,Wh),e(Wh,ene),e(ene,Vfo),e(Wh,Xfo),e(Wh,jB),e(jB,zfo),e(Wh,Qfo),e(x,Wfo),e(x,Hh),e(Hh,one),e(one,Hfo),e(Hh,Ufo),e(Hh,DB),e(DB,Jfo),e(Hh,Yfo),e(x,Kfo),e(x,Uh),e(Uh,rne),e(rne,Zfo),e(Uh,emo),e(Uh,GB),e(GB,omo),e(Uh,rmo),e(x,tmo),e(x,Jh),e(Jh,tne),e(tne,amo),e(Jh,nmo),e(Jh,OB),e(OB,smo),e(Jh,lmo),e(x,imo),e(x,Yh),e(Yh,ane),e(ane,dmo),e(Yh,cmo),e(Yh,VB),e(VB,fmo),e(Yh,mmo),e(x,gmo),e(x,Kh),e(Kh,nne),e(nne,hmo),e(Kh,pmo),e(Kh,XB),e(XB,umo),e(Kh,_mo),e(x,bmo),e(x,Zh),e(Zh,sne),e(sne,vmo),e(Zh,Fmo),e(Zh,zB),e(zB,Tmo),e(Zh,Mmo),e(x,Emo),e(x,ep),e(ep,lne),e(lne,Cmo),e(ep,wmo),e(ep,QB),e(QB,Amo),e(ep,ymo),e(x,Lmo),e(x,op),e(op,ine),e(ine,xmo),e(op,$mo),e(op,WB),e(WB,kmo),e(op,Smo),e(x,Rmo),e(x,rp),e(rp,dne),e(dne,Pmo),e(rp,Bmo),e(rp,HB),e(HB,Imo),e(rp,qmo),e(x,Nmo),e(x,tp),e(tp,cne),e(cne,jmo),e(tp,Dmo),e(tp,UB),e(UB,Gmo),e(tp,Omo),e(x,Vmo),e(x,ap),e(ap,fne),e(fne,Xmo),e(ap,zmo),e(ap,JB),e(JB,Qmo),e(ap,Wmo),e(x,Hmo),e(x,np),e(np,mne),e(mne,Umo),e(np,Jmo),e(np,YB),e(YB,Ymo),e(np,Kmo),e(x,Zmo),e(x,sp),e(sp,gne),e(gne,ego),e(sp,ogo),e(sp,KB),e(KB,rgo),e(sp,tgo),e(x,ago),e(x,lp),e(lp,hne),e(hne,ngo),e(lp,sgo),e(lp,ZB),e(ZB,lgo),e(lp,igo),e(x,dgo),e(x,ip),e(ip,pne),e(pne,cgo),e(ip,fgo),e(ip,eI),e(eI,mgo),e(ip,ggo),e(x,hgo),e(x,dp),e(dp,une),e(une,pgo),e(dp,ugo),e(dp,oI),e(oI,_go),e(dp,bgo),e(x,vgo),e(x,cp),e(cp,_ne),e(_ne,Fgo),e(cp,Tgo),e(cp,rI),e(rI,Mgo),e(cp,Ego),e(x,Cgo),e(x,fp),e(fp,bne),e(bne,wgo),e(fp,Ago),e(fp,tI),e(tI,ygo),e(fp,Lgo),e(x,xgo),e(x,mp),e(mp,vne),e(vne,$go),e(mp,kgo),e(mp,aI),e(aI,Sgo),e(mp,Rgo),e(x,Pgo),e(x,gp),e(gp,Fne),e(Fne,Bgo),e(gp,Igo),e(gp,nI),e(nI,qgo),e(gp,Ngo),e(x,jgo),e(x,hp),e(hp,Tne),e(Tne,Dgo),e(hp,Ggo),e(hp,sI),e(sI,Ogo),e(hp,Vgo),e(x,Xgo),e(x,pp),e(pp,Mne),e(Mne,zgo),e(pp,Qgo),e(pp,lI),e(lI,Wgo),e(pp,Hgo),e(x,Ugo),e(x,up),e(up,Ene),e(Ene,Jgo),e(up,Ygo),e(up,iI),e(iI,Kgo),e(up,Zgo),e(x,eho),e(x,_p),e(_p,Cne),e(Cne,oho),e(_p,rho),e(_p,dI),e(dI,tho),e(_p,aho),e(x,nho),e(x,bp),e(bp,wne),e(wne,sho),e(bp,lho),e(bp,cI),e(cI,iho),e(bp,dho),e(x,cho),e(x,vp),e(vp,Ane),e(Ane,fho),e(vp,mho),e(vp,fI),e(fI,gho),e(vp,hho),e(x,pho),e(x,Fp),e(Fp,yne),e(yne,uho),e(Fp,_ho),e(Fp,mI),e(mI,bho),e(Fp,vho),e(x,Fho),e(x,Tp),e(Tp,Lne),e(Lne,Tho),e(Tp,Mho),e(Tp,gI),e(gI,Eho),e(Tp,Cho),e(x,who),e(x,Mp),e(Mp,xne),e(xne,Aho),e(Mp,yho),e(Mp,hI),e(hI,Lho),e(Mp,xho),e(x,$ho),e(x,Ss),e(Ss,$ne),e($ne,kho),e(Ss,Sho),e(Ss,pI),e(pI,Rho),e(Ss,Pho),e(Ss,uI),e(uI,Bho),e(Ss,Iho),e(x,qho),e(x,Ep),e(Ep,kne),e(kne,Nho),e(Ep,jho),e(Ep,_I),e(_I,Dho),e(Ep,Gho),e(x,Oho),e(x,Cp),e(Cp,Sne),e(Sne,Vho),e(Cp,Xho),e(Cp,bI),e(bI,zho),e(Cp,Qho),e(x,Who),e(x,wp),e(wp,Rne),e(Rne,Hho),e(wp,Uho),e(wp,vI),e(vI,Jho),e(wp,Yho),e(x,Kho),e(x,Ap),e(Ap,Pne),e(Pne,Zho),e(Ap,epo),e(Ap,FI),e(FI,opo),e(Ap,rpo),e(x,tpo),e(x,yp),e(yp,Bne),e(Bne,apo),e(yp,npo),e(yp,TI),e(TI,spo),e(yp,lpo),e(x,ipo),e(x,Lp),e(Lp,Ine),e(Ine,dpo),e(Lp,cpo),e(Lp,MI),e(MI,fpo),e(Lp,mpo),e(x,gpo),e(x,xp),e(xp,qne),e(qne,hpo),e(xp,ppo),e(xp,EI),e(EI,upo),e(xp,_po),e(x,bpo),e(x,$p),e($p,Nne),e(Nne,vpo),e($p,Fpo),e($p,CI),e(CI,Tpo),e($p,Mpo),e(x,Epo),e(x,kp),e(kp,jne),e(jne,Cpo),e(kp,wpo),e(kp,wI),e(wI,Apo),e(kp,ypo),e(x,Lpo),e(x,Sp),e(Sp,Dne),e(Dne,xpo),e(Sp,$po),e(Sp,AI),e(AI,kpo),e(Sp,Spo),e(x,Rpo),e(x,Rp),e(Rp,Gne),e(Gne,Ppo),e(Rp,Bpo),e(Rp,yI),e(yI,Ipo),e(Rp,qpo),e(x,Npo),e(x,Pp),e(Pp,One),e(One,jpo),e(Pp,Dpo),e(Pp,LI),e(LI,Gpo),e(Pp,Opo),e(x,Vpo),e(x,Bp),e(Bp,Vne),e(Vne,Xpo),e(Bp,zpo),e(Bp,xI),e(xI,Qpo),e(Bp,Wpo),e(x,Hpo),e(x,Ip),e(Ip,Xne),e(Xne,Upo),e(Ip,Jpo),e(Ip,$I),e($I,Ypo),e(Ip,Kpo),e(x,Zpo),e(x,qp),e(qp,zne),e(zne,euo),e(qp,ouo),e(qp,kI),e(kI,ruo),e(qp,tuo),e(x,auo),e(x,Np),e(Np,Qne),e(Qne,nuo),e(Np,suo),e(Np,SI),e(SI,luo),e(Np,iuo),e(x,duo),e(x,jp),e(jp,Wne),e(Wne,cuo),e(jp,fuo),e(jp,RI),e(RI,muo),e(jp,guo),e(x,huo),e(x,Dp),e(Dp,Hne),e(Hne,puo),e(Dp,uuo),e(Dp,PI),e(PI,_uo),e(Dp,buo),e(x,vuo),e(x,Gp),e(Gp,Une),e(Une,Fuo),e(Gp,Tuo),e(Gp,BI),e(BI,Muo),e(Gp,Euo),e(x,Cuo),e(x,Op),e(Op,Jne),e(Jne,wuo),e(Op,Auo),e(Op,II),e(II,yuo),e(Op,Luo),e(x,xuo),e(x,Vp),e(Vp,Yne),e(Yne,$uo),e(Vp,kuo),e(Vp,qI),e(qI,Suo),e(Vp,Ruo),e(x,Puo),e(x,Xp),e(Xp,Kne),e(Kne,Buo),e(Xp,Iuo),e(Xp,NI),e(NI,quo),e(Xp,Nuo),e(x,juo),e(x,zp),e(zp,Zne),e(Zne,Duo),e(zp,Guo),e(zp,jI),e(jI,Ouo),e(zp,Vuo),e(x,Xuo),e(x,Qp),e(Qp,ese),e(ese,zuo),e(Qp,Quo),e(Qp,DI),e(DI,Wuo),e(Qp,Huo),e(x,Uuo),e(x,Wp),e(Wp,ose),e(ose,Juo),e(Wp,Yuo),e(Wp,GI),e(GI,Kuo),e(Wp,Zuo),e(x,e_o),e(x,Hp),e(Hp,rse),e(rse,o_o),e(Hp,r_o),e(Hp,OI),e(OI,t_o),e(Hp,a_o),e(x,n_o),e(x,Up),e(Up,tse),e(tse,s_o),e(Up,l_o),e(Up,VI),e(VI,i_o),e(Up,d_o),e(x,c_o),e(x,Jp),e(Jp,ase),e(ase,f_o),e(Jp,m_o),e(Jp,XI),e(XI,g_o),e(Jp,h_o),e(x,p_o),e(x,Yp),e(Yp,nse),e(nse,u_o),e(Yp,__o),e(Yp,zI),e(zI,b_o),e(Yp,v_o),e(x,F_o),e(x,Kp),e(Kp,sse),e(sse,T_o),e(Kp,M_o),e(Kp,QI),e(QI,E_o),e(Kp,C_o),e(x,w_o),e(x,Zp),e(Zp,lse),e(lse,A_o),e(Zp,y_o),e(Zp,WI),e(WI,L_o),e(Zp,x_o),e(x,$_o),e(x,eu),e(eu,ise),e(ise,k_o),e(eu,S_o),e(eu,HI),e(HI,R_o),e(eu,P_o),e(x,B_o),e(x,ou),e(ou,dse),e(dse,I_o),e(ou,q_o),e(ou,UI),e(UI,N_o),e(ou,j_o),e(x,D_o),e(x,ru),e(ru,cse),e(cse,G_o),e(ru,O_o),e(ru,JI),e(JI,V_o),e(ru,X_o),e(x,z_o),e(x,tu),e(tu,fse),e(fse,Q_o),e(tu,W_o),e(tu,YI),e(YI,H_o),e(tu,U_o),e(x,J_o),e(x,au),e(au,mse),e(mse,Y_o),e(au,K_o),e(au,KI),e(KI,Z_o),e(au,e2o),e(x,o2o),e(x,nu),e(nu,gse),e(gse,r2o),e(nu,t2o),e(nu,ZI),e(ZI,a2o),e(nu,n2o),e(x,s2o),e(x,su),e(su,hse),e(hse,l2o),e(su,i2o),e(su,eq),e(eq,d2o),e(su,c2o),e(x,f2o),e(x,lu),e(lu,pse),e(pse,m2o),e(lu,g2o),e(lu,oq),e(oq,h2o),e(lu,p2o),e(x,u2o),e(x,iu),e(iu,use),e(use,_2o),e(iu,b2o),e(iu,rq),e(rq,v2o),e(iu,F2o),e(x,T2o),e(x,du),e(du,_se),e(_se,M2o),e(du,E2o),e(du,tq),e(tq,C2o),e(du,w2o),e(x,A2o),e(x,cu),e(cu,bse),e(bse,y2o),e(cu,L2o),e(cu,aq),e(aq,x2o),e(cu,$2o),e(x,k2o),e(x,fu),e(fu,vse),e(vse,S2o),e(fu,R2o),e(fu,nq),e(nq,P2o),e(fu,B2o),e(x,I2o),e(x,mu),e(mu,Fse),e(Fse,q2o),e(mu,N2o),e(mu,sq),e(sq,j2o),e(mu,D2o),e(x,G2o),e(x,gu),e(gu,Tse),e(Tse,O2o),e(gu,V2o),e(gu,lq),e(lq,X2o),e(gu,z2o),e(x,Q2o),e(x,hu),e(hu,Mse),e(Mse,W2o),e(hu,H2o),e(hu,iq),e(iq,U2o),e(hu,J2o),e(x,Y2o),e(x,pu),e(pu,Ese),e(Ese,K2o),e(pu,Z2o),e(pu,dq),e(dq,e1o),e(pu,o1o),e(x,r1o),e(x,uu),e(uu,Cse),e(Cse,t1o),e(uu,a1o),e(uu,cq),e(cq,n1o),e(uu,s1o),e(x,l1o),e(x,_u),e(_u,wse),e(wse,i1o),e(_u,d1o),e(_u,fq),e(fq,c1o),e(_u,f1o),e(x,m1o),e(x,bu),e(bu,Ase),e(Ase,g1o),e(bu,h1o),e(bu,mq),e(mq,p1o),e(bu,u1o),e(x,_1o),e(x,vu),e(vu,yse),e(yse,b1o),e(vu,v1o),e(vu,gq),e(gq,F1o),e(vu,T1o),e(x,M1o),e(x,Fu),e(Fu,Lse),e(Lse,E1o),e(Fu,C1o),e(Fu,hq),e(hq,w1o),e(Fu,A1o),e(x,y1o),e(x,Tu),e(Tu,xse),e(xse,L1o),e(Tu,x1o),e(Tu,pq),e(pq,$1o),e(Tu,k1o),e(x,S1o),e(x,Mu),e(Mu,$se),e($se,R1o),e(Mu,P1o),e(Mu,uq),e(uq,B1o),e(Mu,I1o),e(x,q1o),e(x,Eu),e(Eu,kse),e(kse,N1o),e(Eu,j1o),e(Eu,_q),e(_q,D1o),e(Eu,G1o),e(x,O1o),e(x,Cu),e(Cu,Sse),e(Sse,V1o),e(Cu,X1o),e(Cu,bq),e(bq,z1o),e(Cu,Q1o),e(x,W1o),e(x,wu),e(wu,Rse),e(Rse,H1o),e(wu,U1o),e(wu,vq),e(vq,J1o),e(wu,Y1o),e(x,K1o),e(x,Au),e(Au,Pse),e(Pse,Z1o),e(Au,e7o),e(Au,Fq),e(Fq,o7o),e(Au,r7o),e(x,t7o),e(x,yu),e(yu,Bse),e(Bse,a7o),e(yu,n7o),e(yu,Tq),e(Tq,s7o),e(yu,l7o),e(x,i7o),e(x,Lu),e(Lu,Ise),e(Ise,d7o),e(Lu,c7o),e(Lu,Mq),e(Mq,f7o),e(Lu,m7o),e(x,g7o),e(x,xu),e(xu,qse),e(qse,h7o),e(xu,p7o),e(xu,Eq),e(Eq,u7o),e(xu,_7o),e(x,b7o),e(x,$u),e($u,Nse),e(Nse,v7o),e($u,F7o),e($u,Cq),e(Cq,T7o),e($u,M7o),e(x,E7o),e(x,ku),e(ku,jse),e(jse,C7o),e(ku,w7o),e(ku,wq),e(wq,A7o),e(ku,y7o),e(x,L7o),e(x,Su),e(Su,Dse),e(Dse,x7o),e(Su,$7o),e(Su,Aq),e(Aq,k7o),e(Su,S7o),e(x,R7o),e(x,Ru),e(Ru,Gse),e(Gse,P7o),e(Ru,B7o),e(Ru,yq),e(yq,I7o),e(Ru,q7o),e(He,N7o),e(He,Pu),e(Pu,j7o),e(Pu,Ose),e(Ose,D7o),e(Pu,G7o),e(Pu,Vse),e(Vse,O7o),e(He,V7o),M(Bu,He,null),b(f,JBe,_),b(f,Ci,_),e(Ci,Iu),e(Iu,Xse),M(A6,Xse,null),e(Ci,X7o),e(Ci,zse),e(zse,z7o),b(f,YBe,_),b(f,xo,_),M(y6,xo,null),e(xo,Q7o),e(xo,wi),e(wi,W7o),e(wi,Lq),e(Lq,H7o),e(wi,U7o),e(wi,xq),e(xq,J7o),e(wi,Y7o),e(xo,K7o),e(xo,L6),e(L6,Z7o),e(L6,Qse),e(Qse,ebo),e(L6,obo),e(xo,rbo),e(xo,rt),M(x6,rt,null),e(rt,tbo),e(rt,Wse),e(Wse,abo),e(rt,nbo),e(rt,Ai),e(Ai,sbo),e(Ai,Hse),e(Hse,lbo),e(Ai,ibo),e(Ai,$q),e($q,dbo),e(Ai,cbo),e(rt,fbo),M(qu,rt,null),e(xo,mbo),e(xo,Ue),M($6,Ue,null),e(Ue,gbo),e(Ue,Use),e(Use,hbo),e(Ue,pbo),e(Ue,ya),e(ya,ubo),e(ya,Jse),e(Jse,_bo),e(ya,bbo),e(ya,Yse),e(Yse,vbo),e(ya,Fbo),e(ya,Kse),e(Kse,Tbo),e(ya,Mbo),e(Ue,Ebo),e(Ue,G),e(G,Nu),e(Nu,Zse),e(Zse,Cbo),e(Nu,wbo),e(Nu,kq),e(kq,Abo),e(Nu,ybo),e(G,Lbo),e(G,ju),e(ju,ele),e(ele,xbo),e(ju,$bo),e(ju,Sq),e(Sq,kbo),e(ju,Sbo),e(G,Rbo),e(G,Du),e(Du,ole),e(ole,Pbo),e(Du,Bbo),e(Du,Rq),e(Rq,Ibo),e(Du,qbo),e(G,Nbo),e(G,Gu),e(Gu,rle),e(rle,jbo),e(Gu,Dbo),e(Gu,Pq),e(Pq,Gbo),e(Gu,Obo),e(G,Vbo),e(G,Ou),e(Ou,tle),e(tle,Xbo),e(Ou,zbo),e(Ou,Bq),e(Bq,Qbo),e(Ou,Wbo),e(G,Hbo),e(G,Vu),e(Vu,ale),e(ale,Ubo),e(Vu,Jbo),e(Vu,Iq),e(Iq,Ybo),e(Vu,Kbo),e(G,Zbo),e(G,Xu),e(Xu,nle),e(nle,e4o),e(Xu,o4o),e(Xu,qq),e(qq,r4o),e(Xu,t4o),e(G,a4o),e(G,zu),e(zu,sle),e(sle,n4o),e(zu,s4o),e(zu,Nq),e(Nq,l4o),e(zu,i4o),e(G,d4o),e(G,Qu),e(Qu,lle),e(lle,c4o),e(Qu,f4o),e(Qu,jq),e(jq,m4o),e(Qu,g4o),e(G,h4o),e(G,Wu),e(Wu,ile),e(ile,p4o),e(Wu,u4o),e(Wu,Dq),e(Dq,_4o),e(Wu,b4o),e(G,v4o),e(G,Hu),e(Hu,dle),e(dle,F4o),e(Hu,T4o),e(Hu,Gq),e(Gq,M4o),e(Hu,E4o),e(G,C4o),e(G,Uu),e(Uu,cle),e(cle,w4o),e(Uu,A4o),e(Uu,Oq),e(Oq,y4o),e(Uu,L4o),e(G,x4o),e(G,Ju),e(Ju,fle),e(fle,$4o),e(Ju,k4o),e(Ju,Vq),e(Vq,S4o),e(Ju,R4o),e(G,P4o),e(G,Yu),e(Yu,mle),e(mle,B4o),e(Yu,I4o),e(Yu,Xq),e(Xq,q4o),e(Yu,N4o),e(G,j4o),e(G,Ku),e(Ku,gle),e(gle,D4o),e(Ku,G4o),e(Ku,zq),e(zq,O4o),e(Ku,V4o),e(G,X4o),e(G,Zu),e(Zu,hle),e(hle,z4o),e(Zu,Q4o),e(Zu,Qq),e(Qq,W4o),e(Zu,H4o),e(G,U4o),e(G,e_),e(e_,ple),e(ple,J4o),e(e_,Y4o),e(e_,Wq),e(Wq,K4o),e(e_,Z4o),e(G,evo),e(G,o_),e(o_,ule),e(ule,ovo),e(o_,rvo),e(o_,Hq),e(Hq,tvo),e(o_,avo),e(G,nvo),e(G,r_),e(r_,_le),e(_le,svo),e(r_,lvo),e(r_,Uq),e(Uq,ivo),e(r_,dvo),e(G,cvo),e(G,t_),e(t_,ble),e(ble,fvo),e(t_,mvo),e(t_,Jq),e(Jq,gvo),e(t_,hvo),e(G,pvo),e(G,a_),e(a_,vle),e(vle,uvo),e(a_,_vo),e(a_,Yq),e(Yq,bvo),e(a_,vvo),e(G,Fvo),e(G,n_),e(n_,Fle),e(Fle,Tvo),e(n_,Mvo),e(n_,Kq),e(Kq,Evo),e(n_,Cvo),e(G,wvo),e(G,s_),e(s_,Tle),e(Tle,Avo),e(s_,yvo),e(s_,Zq),e(Zq,Lvo),e(s_,xvo),e(G,$vo),e(G,l_),e(l_,Mle),e(Mle,kvo),e(l_,Svo),e(l_,eN),e(eN,Rvo),e(l_,Pvo),e(G,Bvo),e(G,i_),e(i_,Ele),e(Ele,Ivo),e(i_,qvo),e(i_,oN),e(oN,Nvo),e(i_,jvo),e(G,Dvo),e(G,d_),e(d_,Cle),e(Cle,Gvo),e(d_,Ovo),e(d_,rN),e(rN,Vvo),e(d_,Xvo),e(G,zvo),e(G,c_),e(c_,wle),e(wle,Qvo),e(c_,Wvo),e(c_,tN),e(tN,Hvo),e(c_,Uvo),e(G,Jvo),e(G,f_),e(f_,Ale),e(Ale,Yvo),e(f_,Kvo),e(f_,aN),e(aN,Zvo),e(f_,eFo),e(G,oFo),e(G,m_),e(m_,yle),e(yle,rFo),e(m_,tFo),e(m_,nN),e(nN,aFo),e(m_,nFo),e(G,sFo),e(G,g_),e(g_,Lle),e(Lle,lFo),e(g_,iFo),e(g_,sN),e(sN,dFo),e(g_,cFo),e(G,fFo),e(G,h_),e(h_,xle),e(xle,mFo),e(h_,gFo),e(h_,lN),e(lN,hFo),e(h_,pFo),e(G,uFo),e(G,p_),e(p_,$le),e($le,_Fo),e(p_,bFo),e(p_,iN),e(iN,vFo),e(p_,FFo),e(G,TFo),e(G,u_),e(u_,kle),e(kle,MFo),e(u_,EFo),e(u_,dN),e(dN,CFo),e(u_,wFo),e(G,AFo),e(G,__),e(__,Sle),e(Sle,yFo),e(__,LFo),e(__,cN),e(cN,xFo),e(__,$Fo),e(G,kFo),e(G,b_),e(b_,Rle),e(Rle,SFo),e(b_,RFo),e(b_,fN),e(fN,PFo),e(b_,BFo),e(G,IFo),e(G,v_),e(v_,Ple),e(Ple,qFo),e(v_,NFo),e(v_,mN),e(mN,jFo),e(v_,DFo),e(G,GFo),e(G,F_),e(F_,Ble),e(Ble,OFo),e(F_,VFo),e(F_,gN),e(gN,XFo),e(F_,zFo),e(G,QFo),e(G,T_),e(T_,Ile),e(Ile,WFo),e(T_,HFo),e(T_,hN),e(hN,UFo),e(T_,JFo),e(G,YFo),e(G,M_),e(M_,qle),e(qle,KFo),e(M_,ZFo),e(M_,pN),e(pN,eTo),e(M_,oTo),e(G,rTo),e(G,E_),e(E_,Nle),e(Nle,tTo),e(E_,aTo),e(E_,uN),e(uN,nTo),e(E_,sTo),e(G,lTo),e(G,C_),e(C_,jle),e(jle,iTo),e(C_,dTo),e(C_,_N),e(_N,cTo),e(C_,fTo),e(Ue,mTo),e(Ue,w_),e(w_,gTo),e(w_,Dle),e(Dle,hTo),e(w_,pTo),e(w_,Gle),e(Gle,uTo),e(Ue,_To),M(A_,Ue,null),b(f,KBe,_),b(f,yi,_),e(yi,y_),e(y_,Ole),M(k6,Ole,null),e(yi,bTo),e(yi,Vle),e(Vle,vTo),b(f,ZBe,_),b(f,$o,_),M(S6,$o,null),e($o,FTo),e($o,Li),e(Li,TTo),e(Li,bN),e(bN,MTo),e(Li,ETo),e(Li,vN),e(vN,CTo),e(Li,wTo),e($o,ATo),e($o,R6),e(R6,yTo),e(R6,Xle),e(Xle,LTo),e(R6,xTo),e($o,$To),e($o,tt),M(P6,tt,null),e(tt,kTo),e(tt,zle),e(zle,STo),e(tt,RTo),e(tt,xi),e(xi,PTo),e(xi,Qle),e(Qle,BTo),e(xi,ITo),e(xi,FN),e(FN,qTo),e(xi,NTo),e(tt,jTo),M(L_,tt,null),e($o,DTo),e($o,Je),M(B6,Je,null),e(Je,GTo),e(Je,Wle),e(Wle,OTo),e(Je,VTo),e(Je,La),e(La,XTo),e(La,Hle),e(Hle,zTo),e(La,QTo),e(La,Ule),e(Ule,WTo),e(La,HTo),e(La,Jle),e(Jle,UTo),e(La,JTo),e(Je,YTo),e(Je,z),e(z,x_),e(x_,Yle),e(Yle,KTo),e(x_,ZTo),e(x_,TN),e(TN,eMo),e(x_,oMo),e(z,rMo),e(z,$_),e($_,Kle),e(Kle,tMo),e($_,aMo),e($_,MN),e(MN,nMo),e($_,sMo),e(z,lMo),e(z,k_),e(k_,Zle),e(Zle,iMo),e(k_,dMo),e(k_,EN),e(EN,cMo),e(k_,fMo),e(z,mMo),e(z,S_),e(S_,eie),e(eie,gMo),e(S_,hMo),e(S_,CN),e(CN,pMo),e(S_,uMo),e(z,_Mo),e(z,R_),e(R_,oie),e(oie,bMo),e(R_,vMo),e(R_,wN),e(wN,FMo),e(R_,TMo),e(z,MMo),e(z,P_),e(P_,rie),e(rie,EMo),e(P_,CMo),e(P_,AN),e(AN,wMo),e(P_,AMo),e(z,yMo),e(z,B_),e(B_,tie),e(tie,LMo),e(B_,xMo),e(B_,yN),e(yN,$Mo),e(B_,kMo),e(z,SMo),e(z,I_),e(I_,aie),e(aie,RMo),e(I_,PMo),e(I_,LN),e(LN,BMo),e(I_,IMo),e(z,qMo),e(z,q_),e(q_,nie),e(nie,NMo),e(q_,jMo),e(q_,xN),e(xN,DMo),e(q_,GMo),e(z,OMo),e(z,N_),e(N_,sie),e(sie,VMo),e(N_,XMo),e(N_,$N),e($N,zMo),e(N_,QMo),e(z,WMo),e(z,j_),e(j_,lie),e(lie,HMo),e(j_,UMo),e(j_,kN),e(kN,JMo),e(j_,YMo),e(z,KMo),e(z,D_),e(D_,iie),e(iie,ZMo),e(D_,eEo),e(D_,SN),e(SN,oEo),e(D_,rEo),e(z,tEo),e(z,G_),e(G_,die),e(die,aEo),e(G_,nEo),e(G_,RN),e(RN,sEo),e(G_,lEo),e(z,iEo),e(z,O_),e(O_,cie),e(cie,dEo),e(O_,cEo),e(O_,PN),e(PN,fEo),e(O_,mEo),e(z,gEo),e(z,V_),e(V_,fie),e(fie,hEo),e(V_,pEo),e(V_,BN),e(BN,uEo),e(V_,_Eo),e(z,bEo),e(z,X_),e(X_,mie),e(mie,vEo),e(X_,FEo),e(X_,IN),e(IN,TEo),e(X_,MEo),e(z,EEo),e(z,z_),e(z_,gie),e(gie,CEo),e(z_,wEo),e(z_,qN),e(qN,AEo),e(z_,yEo),e(z,LEo),e(z,Q_),e(Q_,hie),e(hie,xEo),e(Q_,$Eo),e(Q_,NN),e(NN,kEo),e(Q_,SEo),e(z,REo),e(z,W_),e(W_,pie),e(pie,PEo),e(W_,BEo),e(W_,jN),e(jN,IEo),e(W_,qEo),e(z,NEo),e(z,H_),e(H_,uie),e(uie,jEo),e(H_,DEo),e(H_,DN),e(DN,GEo),e(H_,OEo),e(z,VEo),e(z,U_),e(U_,_ie),e(_ie,XEo),e(U_,zEo),e(U_,GN),e(GN,QEo),e(U_,WEo),e(z,HEo),e(z,J_),e(J_,bie),e(bie,UEo),e(J_,JEo),e(J_,ON),e(ON,YEo),e(J_,KEo),e(z,ZEo),e(z,Y_),e(Y_,vie),e(vie,e5o),e(Y_,o5o),e(Y_,VN),e(VN,r5o),e(Y_,t5o),e(z,a5o),e(z,K_),e(K_,Fie),e(Fie,n5o),e(K_,s5o),e(K_,XN),e(XN,l5o),e(K_,i5o),e(z,d5o),e(z,Z_),e(Z_,Tie),e(Tie,c5o),e(Z_,f5o),e(Z_,zN),e(zN,m5o),e(Z_,g5o),e(z,h5o),e(z,e2),e(e2,Mie),e(Mie,p5o),e(e2,u5o),e(e2,QN),e(QN,_5o),e(e2,b5o),e(z,v5o),e(z,o2),e(o2,Eie),e(Eie,F5o),e(o2,T5o),e(o2,WN),e(WN,M5o),e(o2,E5o),e(z,C5o),e(z,r2),e(r2,Cie),e(Cie,w5o),e(r2,A5o),e(r2,HN),e(HN,y5o),e(r2,L5o),e(z,x5o),e(z,t2),e(t2,wie),e(wie,$5o),e(t2,k5o),e(t2,UN),e(UN,S5o),e(t2,R5o),e(z,P5o),e(z,a2),e(a2,Aie),e(Aie,B5o),e(a2,I5o),e(a2,JN),e(JN,q5o),e(a2,N5o),e(z,j5o),e(z,n2),e(n2,yie),e(yie,D5o),e(n2,G5o),e(n2,YN),e(YN,O5o),e(n2,V5o),e(z,X5o),e(z,s2),e(s2,Lie),e(Lie,z5o),e(s2,Q5o),e(s2,KN),e(KN,W5o),e(s2,H5o),e(z,U5o),e(z,l2),e(l2,xie),e(xie,J5o),e(l2,Y5o),e(l2,ZN),e(ZN,K5o),e(l2,Z5o),e(z,eCo),e(z,i2),e(i2,$ie),e($ie,oCo),e(i2,rCo),e(i2,ej),e(ej,tCo),e(i2,aCo),e(z,nCo),e(z,d2),e(d2,kie),e(kie,sCo),e(d2,lCo),e(d2,oj),e(oj,iCo),e(d2,dCo),e(z,cCo),e(z,c2),e(c2,Sie),e(Sie,fCo),e(c2,mCo),e(c2,rj),e(rj,gCo),e(c2,hCo),e(Je,pCo),e(Je,f2),e(f2,uCo),e(f2,Rie),e(Rie,_Co),e(f2,bCo),e(f2,Pie),e(Pie,vCo),e(Je,FCo),M(m2,Je,null),b(f,eIe,_),b(f,$i,_),e($i,g2),e(g2,Bie),M(I6,Bie,null),e($i,TCo),e($i,Iie),e(Iie,MCo),b(f,oIe,_),b(f,ko,_),M(q6,ko,null),e(ko,ECo),e(ko,ki),e(ki,CCo),e(ki,tj),e(tj,wCo),e(ki,ACo),e(ki,aj),e(aj,yCo),e(ki,LCo),e(ko,xCo),e(ko,N6),e(N6,$Co),e(N6,qie),e(qie,kCo),e(N6,SCo),e(ko,RCo),e(ko,at),M(j6,at,null),e(at,PCo),e(at,Nie),e(Nie,BCo),e(at,ICo),e(at,Si),e(Si,qCo),e(Si,jie),e(jie,NCo),e(Si,jCo),e(Si,nj),e(nj,DCo),e(Si,GCo),e(at,OCo),M(h2,at,null),e(ko,VCo),e(ko,Ye),M(D6,Ye,null),e(Ye,XCo),e(Ye,Die),e(Die,zCo),e(Ye,QCo),e(Ye,xa),e(xa,WCo),e(xa,Gie),e(Gie,HCo),e(xa,UCo),e(xa,Oie),e(Oie,JCo),e(xa,YCo),e(xa,Vie),e(Vie,KCo),e(xa,ZCo),e(Ye,e3o),e(Ye,Q),e(Q,p2),e(p2,Xie),e(Xie,o3o),e(p2,r3o),e(p2,sj),e(sj,t3o),e(p2,a3o),e(Q,n3o),e(Q,u2),e(u2,zie),e(zie,s3o),e(u2,l3o),e(u2,lj),e(lj,i3o),e(u2,d3o),e(Q,c3o),e(Q,_2),e(_2,Qie),e(Qie,f3o),e(_2,m3o),e(_2,ij),e(ij,g3o),e(_2,h3o),e(Q,p3o),e(Q,b2),e(b2,Wie),e(Wie,u3o),e(b2,_3o),e(b2,dj),e(dj,b3o),e(b2,v3o),e(Q,F3o),e(Q,v2),e(v2,Hie),e(Hie,T3o),e(v2,M3o),e(v2,cj),e(cj,E3o),e(v2,C3o),e(Q,w3o),e(Q,F2),e(F2,Uie),e(Uie,A3o),e(F2,y3o),e(F2,fj),e(fj,L3o),e(F2,x3o),e(Q,$3o),e(Q,T2),e(T2,Jie),e(Jie,k3o),e(T2,S3o),e(T2,mj),e(mj,R3o),e(T2,P3o),e(Q,B3o),e(Q,M2),e(M2,Yie),e(Yie,I3o),e(M2,q3o),e(M2,gj),e(gj,N3o),e(M2,j3o),e(Q,D3o),e(Q,E2),e(E2,Kie),e(Kie,G3o),e(E2,O3o),e(E2,hj),e(hj,V3o),e(E2,X3o),e(Q,z3o),e(Q,C2),e(C2,Zie),e(Zie,Q3o),e(C2,W3o),e(C2,pj),e(pj,H3o),e(C2,U3o),e(Q,J3o),e(Q,w2),e(w2,ede),e(ede,Y3o),e(w2,K3o),e(w2,uj),e(uj,Z3o),e(w2,ewo),e(Q,owo),e(Q,A2),e(A2,ode),e(ode,rwo),e(A2,two),e(A2,_j),e(_j,awo),e(A2,nwo),e(Q,swo),e(Q,y2),e(y2,rde),e(rde,lwo),e(y2,iwo),e(y2,bj),e(bj,dwo),e(y2,cwo),e(Q,fwo),e(Q,L2),e(L2,tde),e(tde,mwo),e(L2,gwo),e(L2,vj),e(vj,hwo),e(L2,pwo),e(Q,uwo),e(Q,x2),e(x2,ade),e(ade,_wo),e(x2,bwo),e(x2,Fj),e(Fj,vwo),e(x2,Fwo),e(Q,Two),e(Q,$2),e($2,nde),e(nde,Mwo),e($2,Ewo),e($2,Tj),e(Tj,Cwo),e($2,wwo),e(Q,Awo),e(Q,k2),e(k2,sde),e(sde,ywo),e(k2,Lwo),e(k2,Mj),e(Mj,xwo),e(k2,$wo),e(Q,kwo),e(Q,S2),e(S2,lde),e(lde,Swo),e(S2,Rwo),e(S2,Ej),e(Ej,Pwo),e(S2,Bwo),e(Q,Iwo),e(Q,R2),e(R2,ide),e(ide,qwo),e(R2,Nwo),e(R2,Cj),e(Cj,jwo),e(R2,Dwo),e(Q,Gwo),e(Q,P2),e(P2,dde),e(dde,Owo),e(P2,Vwo),e(P2,wj),e(wj,Xwo),e(P2,zwo),e(Q,Qwo),e(Q,B2),e(B2,cde),e(cde,Wwo),e(B2,Hwo),e(B2,Aj),e(Aj,Uwo),e(B2,Jwo),e(Q,Ywo),e(Q,I2),e(I2,fde),e(fde,Kwo),e(I2,Zwo),e(I2,yj),e(yj,eAo),e(I2,oAo),e(Q,rAo),e(Q,q2),e(q2,mde),e(mde,tAo),e(q2,aAo),e(q2,Lj),e(Lj,nAo),e(q2,sAo),e(Q,lAo),e(Q,N2),e(N2,gde),e(gde,iAo),e(N2,dAo),e(N2,xj),e(xj,cAo),e(N2,fAo),e(Q,mAo),e(Q,j2),e(j2,hde),e(hde,gAo),e(j2,hAo),e(j2,$j),e($j,pAo),e(j2,uAo),e(Q,_Ao),e(Q,D2),e(D2,pde),e(pde,bAo),e(D2,vAo),e(D2,kj),e(kj,FAo),e(D2,TAo),e(Q,MAo),e(Q,G2),e(G2,ude),e(ude,EAo),e(G2,CAo),e(G2,Sj),e(Sj,wAo),e(G2,AAo),e(Q,yAo),e(Q,O2),e(O2,_de),e(_de,LAo),e(O2,xAo),e(O2,Rj),e(Rj,$Ao),e(O2,kAo),e(Q,SAo),e(Q,V2),e(V2,bde),e(bde,RAo),e(V2,PAo),e(V2,Pj),e(Pj,BAo),e(V2,IAo),e(Q,qAo),e(Q,X2),e(X2,vde),e(vde,NAo),e(X2,jAo),e(X2,Bj),e(Bj,DAo),e(X2,GAo),e(Q,OAo),e(Q,z2),e(z2,Fde),e(Fde,VAo),e(z2,XAo),e(z2,Tde),e(Tde,zAo),e(z2,QAo),e(Q,WAo),e(Q,Q2),e(Q2,Mde),e(Mde,HAo),e(Q2,UAo),e(Q2,Ij),e(Ij,JAo),e(Q2,YAo),e(Q,KAo),e(Q,W2),e(W2,Ede),e(Ede,ZAo),e(W2,e0o),e(W2,qj),e(qj,o0o),e(W2,r0o),e(Q,t0o),e(Q,H2),e(H2,Cde),e(Cde,a0o),e(H2,n0o),e(H2,Nj),e(Nj,s0o),e(H2,l0o),e(Q,i0o),e(Q,U2),e(U2,wde),e(wde,d0o),e(U2,c0o),e(U2,jj),e(jj,f0o),e(U2,m0o),e(Ye,g0o),e(Ye,J2),e(J2,h0o),e(J2,Ade),e(Ade,p0o),e(J2,u0o),e(J2,yde),e(yde,_0o),e(Ye,b0o),M(Y2,Ye,null),b(f,rIe,_),b(f,Ri,_),e(Ri,K2),e(K2,Lde),M(G6,Lde,null),e(Ri,v0o),e(Ri,xde),e(xde,F0o),b(f,tIe,_),b(f,So,_),M(O6,So,null),e(So,T0o),e(So,Pi),e(Pi,M0o),e(Pi,Dj),e(Dj,E0o),e(Pi,C0o),e(Pi,Gj),e(Gj,w0o),e(Pi,A0o),e(So,y0o),e(So,V6),e(V6,L0o),e(V6,$de),e($de,x0o),e(V6,$0o),e(So,k0o),e(So,nt),M(X6,nt,null),e(nt,S0o),e(nt,kde),e(kde,R0o),e(nt,P0o),e(nt,Bi),e(Bi,B0o),e(Bi,Sde),e(Sde,I0o),e(Bi,q0o),e(Bi,Oj),e(Oj,N0o),e(Bi,j0o),e(nt,D0o),M(Z2,nt,null),e(So,G0o),e(So,Ke),M(z6,Ke,null),e(Ke,O0o),e(Ke,Rde),e(Rde,V0o),e(Ke,X0o),e(Ke,$a),e($a,z0o),e($a,Pde),e(Pde,Q0o),e($a,W0o),e($a,Bde),e(Bde,H0o),e($a,U0o),e($a,Ide),e(Ide,J0o),e($a,Y0o),e(Ke,K0o),e(Ke,pe),e(pe,e1),e(e1,qde),e(qde,Z0o),e(e1,e6o),e(e1,Vj),e(Vj,o6o),e(e1,r6o),e(pe,t6o),e(pe,o1),e(o1,Nde),e(Nde,a6o),e(o1,n6o),e(o1,Xj),e(Xj,s6o),e(o1,l6o),e(pe,i6o),e(pe,r1),e(r1,jde),e(jde,d6o),e(r1,c6o),e(r1,zj),e(zj,f6o),e(r1,m6o),e(pe,g6o),e(pe,t1),e(t1,Dde),e(Dde,h6o),e(t1,p6o),e(t1,Qj),e(Qj,u6o),e(t1,_6o),e(pe,b6o),e(pe,a1),e(a1,Gde),e(Gde,v6o),e(a1,F6o),e(a1,Wj),e(Wj,T6o),e(a1,M6o),e(pe,E6o),e(pe,n1),e(n1,Ode),e(Ode,C6o),e(n1,w6o),e(n1,Hj),e(Hj,A6o),e(n1,y6o),e(pe,L6o),e(pe,s1),e(s1,Vde),e(Vde,x6o),e(s1,$6o),e(s1,Uj),e(Uj,k6o),e(s1,S6o),e(pe,R6o),e(pe,l1),e(l1,Xde),e(Xde,P6o),e(l1,B6o),e(l1,Jj),e(Jj,I6o),e(l1,q6o),e(pe,N6o),e(pe,i1),e(i1,zde),e(zde,j6o),e(i1,D6o),e(i1,Yj),e(Yj,G6o),e(i1,O6o),e(pe,V6o),e(pe,d1),e(d1,Qde),e(Qde,X6o),e(d1,z6o),e(d1,Kj),e(Kj,Q6o),e(d1,W6o),e(pe,H6o),e(pe,c1),e(c1,Wde),e(Wde,U6o),e(c1,J6o),e(c1,Zj),e(Zj,Y6o),e(c1,K6o),e(pe,Z6o),e(pe,f1),e(f1,Hde),e(Hde,eyo),e(f1,oyo),e(f1,eD),e(eD,ryo),e(f1,tyo),e(pe,ayo),e(pe,m1),e(m1,Ude),e(Ude,nyo),e(m1,syo),e(m1,oD),e(oD,lyo),e(m1,iyo),e(pe,dyo),e(pe,g1),e(g1,Jde),e(Jde,cyo),e(g1,fyo),e(g1,rD),e(rD,myo),e(g1,gyo),e(pe,hyo),e(pe,h1),e(h1,Yde),e(Yde,pyo),e(h1,uyo),e(h1,tD),e(tD,_yo),e(h1,byo),e(pe,vyo),e(pe,p1),e(p1,Kde),e(Kde,Fyo),e(p1,Tyo),e(p1,aD),e(aD,Myo),e(p1,Eyo),e(Ke,Cyo),e(Ke,u1),e(u1,wyo),e(u1,Zde),e(Zde,Ayo),e(u1,yyo),e(u1,ece),e(ece,Lyo),e(Ke,xyo),M(_1,Ke,null),b(f,aIe,_),b(f,Ii,_),e(Ii,b1),e(b1,oce),M(Q6,oce,null),e(Ii,$yo),e(Ii,rce),e(rce,kyo),b(f,nIe,_),b(f,Ro,_),M(W6,Ro,null),e(Ro,Syo),e(Ro,qi),e(qi,Ryo),e(qi,nD),e(nD,Pyo),e(qi,Byo),e(qi,sD),e(sD,Iyo),e(qi,qyo),e(Ro,Nyo),e(Ro,H6),e(H6,jyo),e(H6,tce),e(tce,Dyo),e(H6,Gyo),e(Ro,Oyo),e(Ro,st),M(U6,st,null),e(st,Vyo),e(st,ace),e(ace,Xyo),e(st,zyo),e(st,Ni),e(Ni,Qyo),e(Ni,nce),e(nce,Wyo),e(Ni,Hyo),e(Ni,lD),e(lD,Uyo),e(Ni,Jyo),e(st,Yyo),M(v1,st,null),e(Ro,Kyo),e(Ro,Ze),M(J6,Ze,null),e(Ze,Zyo),e(Ze,sce),e(sce,eLo),e(Ze,oLo),e(Ze,ka),e(ka,rLo),e(ka,lce),e(lce,tLo),e(ka,aLo),e(ka,ice),e(ice,nLo),e(ka,sLo),e(ka,dce),e(dce,lLo),e(ka,iLo),e(Ze,dLo),e(Ze,q),e(q,F1),e(F1,cce),e(cce,cLo),e(F1,fLo),e(F1,iD),e(iD,mLo),e(F1,gLo),e(q,hLo),e(q,T1),e(T1,fce),e(fce,pLo),e(T1,uLo),e(T1,dD),e(dD,_Lo),e(T1,bLo),e(q,vLo),e(q,M1),e(M1,mce),e(mce,FLo),e(M1,TLo),e(M1,cD),e(cD,MLo),e(M1,ELo),e(q,CLo),e(q,E1),e(E1,gce),e(gce,wLo),e(E1,ALo),e(E1,fD),e(fD,yLo),e(E1,LLo),e(q,xLo),e(q,C1),e(C1,hce),e(hce,$Lo),e(C1,kLo),e(C1,mD),e(mD,SLo),e(C1,RLo),e(q,PLo),e(q,w1),e(w1,pce),e(pce,BLo),e(w1,ILo),e(w1,gD),e(gD,qLo),e(w1,NLo),e(q,jLo),e(q,A1),e(A1,uce),e(uce,DLo),e(A1,GLo),e(A1,hD),e(hD,OLo),e(A1,VLo),e(q,XLo),e(q,y1),e(y1,_ce),e(_ce,zLo),e(y1,QLo),e(y1,pD),e(pD,WLo),e(y1,HLo),e(q,ULo),e(q,L1),e(L1,bce),e(bce,JLo),e(L1,YLo),e(L1,uD),e(uD,KLo),e(L1,ZLo),e(q,e8o),e(q,x1),e(x1,vce),e(vce,o8o),e(x1,r8o),e(x1,_D),e(_D,t8o),e(x1,a8o),e(q,n8o),e(q,$1),e($1,Fce),e(Fce,s8o),e($1,l8o),e($1,bD),e(bD,i8o),e($1,d8o),e(q,c8o),e(q,k1),e(k1,Tce),e(Tce,f8o),e(k1,m8o),e(k1,vD),e(vD,g8o),e(k1,h8o),e(q,p8o),e(q,S1),e(S1,Mce),e(Mce,u8o),e(S1,_8o),e(S1,FD),e(FD,b8o),e(S1,v8o),e(q,F8o),e(q,R1),e(R1,Ece),e(Ece,T8o),e(R1,M8o),e(R1,TD),e(TD,E8o),e(R1,C8o),e(q,w8o),e(q,P1),e(P1,Cce),e(Cce,A8o),e(P1,y8o),e(P1,MD),e(MD,L8o),e(P1,x8o),e(q,$8o),e(q,B1),e(B1,wce),e(wce,k8o),e(B1,S8o),e(B1,ED),e(ED,R8o),e(B1,P8o),e(q,B8o),e(q,I1),e(I1,Ace),e(Ace,I8o),e(I1,q8o),e(I1,CD),e(CD,N8o),e(I1,j8o),e(q,D8o),e(q,q1),e(q1,yce),e(yce,G8o),e(q1,O8o),e(q1,wD),e(wD,V8o),e(q1,X8o),e(q,z8o),e(q,N1),e(N1,Lce),e(Lce,Q8o),e(N1,W8o),e(N1,AD),e(AD,H8o),e(N1,U8o),e(q,J8o),e(q,j1),e(j1,xce),e(xce,Y8o),e(j1,K8o),e(j1,yD),e(yD,Z8o),e(j1,exo),e(q,oxo),e(q,D1),e(D1,$ce),e($ce,rxo),e(D1,txo),e(D1,LD),e(LD,axo),e(D1,nxo),e(q,sxo),e(q,G1),e(G1,kce),e(kce,lxo),e(G1,ixo),e(G1,xD),e(xD,dxo),e(G1,cxo),e(q,fxo),e(q,O1),e(O1,Sce),e(Sce,mxo),e(O1,gxo),e(O1,$D),e($D,hxo),e(O1,pxo),e(q,uxo),e(q,V1),e(V1,Rce),e(Rce,_xo),e(V1,bxo),e(V1,kD),e(kD,vxo),e(V1,Fxo),e(q,Txo),e(q,X1),e(X1,Pce),e(Pce,Mxo),e(X1,Exo),e(X1,SD),e(SD,Cxo),e(X1,wxo),e(q,Axo),e(q,z1),e(z1,Bce),e(Bce,yxo),e(z1,Lxo),e(z1,RD),e(RD,xxo),e(z1,$xo),e(q,kxo),e(q,Q1),e(Q1,Ice),e(Ice,Sxo),e(Q1,Rxo),e(Q1,PD),e(PD,Pxo),e(Q1,Bxo),e(q,Ixo),e(q,W1),e(W1,qce),e(qce,qxo),e(W1,Nxo),e(W1,BD),e(BD,jxo),e(W1,Dxo),e(q,Gxo),e(q,H1),e(H1,Nce),e(Nce,Oxo),e(H1,Vxo),e(H1,ID),e(ID,Xxo),e(H1,zxo),e(q,Qxo),e(q,U1),e(U1,jce),e(jce,Wxo),e(U1,Hxo),e(U1,qD),e(qD,Uxo),e(U1,Jxo),e(q,Yxo),e(q,J1),e(J1,Dce),e(Dce,Kxo),e(J1,Zxo),e(J1,ND),e(ND,e9o),e(J1,o9o),e(q,r9o),e(q,Y1),e(Y1,Gce),e(Gce,t9o),e(Y1,a9o),e(Y1,jD),e(jD,n9o),e(Y1,s9o),e(q,l9o),e(q,K1),e(K1,Oce),e(Oce,i9o),e(K1,d9o),e(K1,DD),e(DD,c9o),e(K1,f9o),e(q,m9o),e(q,Z1),e(Z1,Vce),e(Vce,g9o),e(Z1,h9o),e(Z1,GD),e(GD,p9o),e(Z1,u9o),e(q,_9o),e(q,e7),e(e7,Xce),e(Xce,b9o),e(e7,v9o),e(e7,OD),e(OD,F9o),e(e7,T9o),e(q,M9o),e(q,o7),e(o7,zce),e(zce,E9o),e(o7,C9o),e(o7,VD),e(VD,w9o),e(o7,A9o),e(q,y9o),e(q,r7),e(r7,Qce),e(Qce,L9o),e(r7,x9o),e(r7,XD),e(XD,$9o),e(r7,k9o),e(q,S9o),e(q,t7),e(t7,Wce),e(Wce,R9o),e(t7,P9o),e(t7,zD),e(zD,B9o),e(t7,I9o),e(q,q9o),e(q,a7),e(a7,Hce),e(Hce,N9o),e(a7,j9o),e(a7,QD),e(QD,D9o),e(a7,G9o),e(q,O9o),e(q,n7),e(n7,Uce),e(Uce,V9o),e(n7,X9o),e(n7,WD),e(WD,z9o),e(n7,Q9o),e(q,W9o),e(q,s7),e(s7,Jce),e(Jce,H9o),e(s7,U9o),e(s7,HD),e(HD,J9o),e(s7,Y9o),e(q,K9o),e(q,l7),e(l7,Yce),e(Yce,Z9o),e(l7,e$o),e(l7,UD),e(UD,o$o),e(l7,r$o),e(q,t$o),e(q,i7),e(i7,Kce),e(Kce,a$o),e(i7,n$o),e(i7,JD),e(JD,s$o),e(i7,l$o),e(q,i$o),e(q,d7),e(d7,Zce),e(Zce,d$o),e(d7,c$o),e(d7,YD),e(YD,f$o),e(d7,m$o),e(q,g$o),e(q,c7),e(c7,efe),e(efe,h$o),e(c7,p$o),e(c7,KD),e(KD,u$o),e(c7,_$o),e(q,b$o),e(q,f7),e(f7,ofe),e(ofe,v$o),e(f7,F$o),e(f7,ZD),e(ZD,T$o),e(f7,M$o),e(Ze,E$o),e(Ze,m7),e(m7,C$o),e(m7,rfe),e(rfe,w$o),e(m7,A$o),e(m7,tfe),e(tfe,y$o),e(Ze,L$o),M(g7,Ze,null),b(f,sIe,_),b(f,ji,_),e(ji,h7),e(h7,afe),M(Y6,afe,null),e(ji,x$o),e(ji,nfe),e(nfe,$$o),b(f,lIe,_),b(f,Po,_),M(K6,Po,null),e(Po,k$o),e(Po,Di),e(Di,S$o),e(Di,eG),e(eG,R$o),e(Di,P$o),e(Di,oG),e(oG,B$o),e(Di,I$o),e(Po,q$o),e(Po,Z6),e(Z6,N$o),e(Z6,sfe),e(sfe,j$o),e(Z6,D$o),e(Po,G$o),e(Po,lt),M(ey,lt,null),e(lt,O$o),e(lt,lfe),e(lfe,V$o),e(lt,X$o),e(lt,Gi),e(Gi,z$o),e(Gi,ife),e(ife,Q$o),e(Gi,W$o),e(Gi,rG),e(rG,H$o),e(Gi,U$o),e(lt,J$o),M(p7,lt,null),e(Po,Y$o),e(Po,eo),M(oy,eo,null),e(eo,K$o),e(eo,dfe),e(dfe,Z$o),e(eo,eko),e(eo,Sa),e(Sa,oko),e(Sa,cfe),e(cfe,rko),e(Sa,tko),e(Sa,ffe),e(ffe,ako),e(Sa,nko),e(Sa,mfe),e(mfe,sko),e(Sa,lko),e(eo,iko),e(eo,Y),e(Y,u7),e(u7,gfe),e(gfe,dko),e(u7,cko),e(u7,tG),e(tG,fko),e(u7,mko),e(Y,gko),e(Y,_7),e(_7,hfe),e(hfe,hko),e(_7,pko),e(_7,aG),e(aG,uko),e(_7,_ko),e(Y,bko),e(Y,b7),e(b7,pfe),e(pfe,vko),e(b7,Fko),e(b7,nG),e(nG,Tko),e(b7,Mko),e(Y,Eko),e(Y,v7),e(v7,ufe),e(ufe,Cko),e(v7,wko),e(v7,sG),e(sG,Ako),e(v7,yko),e(Y,Lko),e(Y,F7),e(F7,_fe),e(_fe,xko),e(F7,$ko),e(F7,lG),e(lG,kko),e(F7,Sko),e(Y,Rko),e(Y,T7),e(T7,bfe),e(bfe,Pko),e(T7,Bko),e(T7,iG),e(iG,Iko),e(T7,qko),e(Y,Nko),e(Y,M7),e(M7,vfe),e(vfe,jko),e(M7,Dko),e(M7,dG),e(dG,Gko),e(M7,Oko),e(Y,Vko),e(Y,E7),e(E7,Ffe),e(Ffe,Xko),e(E7,zko),e(E7,cG),e(cG,Qko),e(E7,Wko),e(Y,Hko),e(Y,C7),e(C7,Tfe),e(Tfe,Uko),e(C7,Jko),e(C7,fG),e(fG,Yko),e(C7,Kko),e(Y,Zko),e(Y,w7),e(w7,Mfe),e(Mfe,eSo),e(w7,oSo),e(w7,mG),e(mG,rSo),e(w7,tSo),e(Y,aSo),e(Y,A7),e(A7,Efe),e(Efe,nSo),e(A7,sSo),e(A7,gG),e(gG,lSo),e(A7,iSo),e(Y,dSo),e(Y,y7),e(y7,Cfe),e(Cfe,cSo),e(y7,fSo),e(y7,hG),e(hG,mSo),e(y7,gSo),e(Y,hSo),e(Y,L7),e(L7,wfe),e(wfe,pSo),e(L7,uSo),e(L7,pG),e(pG,_So),e(L7,bSo),e(Y,vSo),e(Y,x7),e(x7,Afe),e(Afe,FSo),e(x7,TSo),e(x7,uG),e(uG,MSo),e(x7,ESo),e(Y,CSo),e(Y,$7),e($7,yfe),e(yfe,wSo),e($7,ASo),e($7,_G),e(_G,ySo),e($7,LSo),e(Y,xSo),e(Y,k7),e(k7,Lfe),e(Lfe,$So),e(k7,kSo),e(k7,bG),e(bG,SSo),e(k7,RSo),e(Y,PSo),e(Y,S7),e(S7,xfe),e(xfe,BSo),e(S7,ISo),e(S7,vG),e(vG,qSo),e(S7,NSo),e(Y,jSo),e(Y,R7),e(R7,$fe),e($fe,DSo),e(R7,GSo),e(R7,FG),e(FG,OSo),e(R7,VSo),e(Y,XSo),e(Y,P7),e(P7,kfe),e(kfe,zSo),e(P7,QSo),e(P7,TG),e(TG,WSo),e(P7,HSo),e(Y,USo),e(Y,B7),e(B7,Sfe),e(Sfe,JSo),e(B7,YSo),e(B7,MG),e(MG,KSo),e(B7,ZSo),e(Y,eRo),e(Y,I7),e(I7,Rfe),e(Rfe,oRo),e(I7,rRo),e(I7,EG),e(EG,tRo),e(I7,aRo),e(Y,nRo),e(Y,q7),e(q7,Pfe),e(Pfe,sRo),e(q7,lRo),e(q7,CG),e(CG,iRo),e(q7,dRo),e(Y,cRo),e(Y,N7),e(N7,Bfe),e(Bfe,fRo),e(N7,mRo),e(N7,wG),e(wG,gRo),e(N7,hRo),e(Y,pRo),e(Y,j7),e(j7,Ife),e(Ife,uRo),e(j7,_Ro),e(j7,AG),e(AG,bRo),e(j7,vRo),e(Y,FRo),e(Y,D7),e(D7,qfe),e(qfe,TRo),e(D7,MRo),e(D7,yG),e(yG,ERo),e(D7,CRo),e(Y,wRo),e(Y,G7),e(G7,Nfe),e(Nfe,ARo),e(G7,yRo),e(G7,LG),e(LG,LRo),e(G7,xRo),e(Y,$Ro),e(Y,O7),e(O7,jfe),e(jfe,kRo),e(O7,SRo),e(O7,xG),e(xG,RRo),e(O7,PRo),e(Y,BRo),e(Y,V7),e(V7,Dfe),e(Dfe,IRo),e(V7,qRo),e(V7,$G),e($G,NRo),e(V7,jRo),e(Y,DRo),e(Y,X7),e(X7,Gfe),e(Gfe,GRo),e(X7,ORo),e(X7,kG),e(kG,VRo),e(X7,XRo),e(eo,zRo),e(eo,z7),e(z7,QRo),e(z7,Ofe),e(Ofe,WRo),e(z7,HRo),e(z7,Vfe),e(Vfe,URo),e(eo,JRo),M(Q7,eo,null),b(f,iIe,_),b(f,Oi,_),e(Oi,W7),e(W7,Xfe),M(ry,Xfe,null),e(Oi,YRo),e(Oi,zfe),e(zfe,KRo),b(f,dIe,_),b(f,Bo,_),M(ty,Bo,null),e(Bo,ZRo),e(Bo,Vi),e(Vi,ePo),e(Vi,SG),e(SG,oPo),e(Vi,rPo),e(Vi,RG),e(RG,tPo),e(Vi,aPo),e(Bo,nPo),e(Bo,ay),e(ay,sPo),e(ay,Qfe),e(Qfe,lPo),e(ay,iPo),e(Bo,dPo),e(Bo,it),M(ny,it,null),e(it,cPo),e(it,Wfe),e(Wfe,fPo),e(it,mPo),e(it,Xi),e(Xi,gPo),e(Xi,Hfe),e(Hfe,hPo),e(Xi,pPo),e(Xi,PG),e(PG,uPo),e(Xi,_Po),e(it,bPo),M(H7,it,null),e(Bo,vPo),e(Bo,oo),M(sy,oo,null),e(oo,FPo),e(oo,Ufe),e(Ufe,TPo),e(oo,MPo),e(oo,Ra),e(Ra,EPo),e(Ra,Jfe),e(Jfe,CPo),e(Ra,wPo),e(Ra,Yfe),e(Yfe,APo),e(Ra,yPo),e(Ra,Kfe),e(Kfe,LPo),e(Ra,xPo),e(oo,$Po),e(oo,Yr),e(Yr,U7),e(U7,Zfe),e(Zfe,kPo),e(U7,SPo),e(U7,BG),e(BG,RPo),e(U7,PPo),e(Yr,BPo),e(Yr,J7),e(J7,eme),e(eme,IPo),e(J7,qPo),e(J7,IG),e(IG,NPo),e(J7,jPo),e(Yr,DPo),e(Yr,Y7),e(Y7,ome),e(ome,GPo),e(Y7,OPo),e(Y7,qG),e(qG,VPo),e(Y7,XPo),e(Yr,zPo),e(Yr,K7),e(K7,rme),e(rme,QPo),e(K7,WPo),e(K7,NG),e(NG,HPo),e(K7,UPo),e(Yr,JPo),e(Yr,Z7),e(Z7,tme),e(tme,YPo),e(Z7,KPo),e(Z7,jG),e(jG,ZPo),e(Z7,eBo),e(oo,oBo),e(oo,eb),e(eb,rBo),e(eb,ame),e(ame,tBo),e(eb,aBo),e(eb,nme),e(nme,nBo),e(oo,sBo),M(ob,oo,null),b(f,cIe,_),b(f,zi,_),e(zi,rb),e(rb,sme),M(ly,sme,null),e(zi,lBo),e(zi,lme),e(lme,iBo),b(f,fIe,_),b(f,Io,_),M(iy,Io,null),e(Io,dBo),e(Io,Qi),e(Qi,cBo),e(Qi,DG),e(DG,fBo),e(Qi,mBo),e(Qi,GG),e(GG,gBo),e(Qi,hBo),e(Io,pBo),e(Io,dy),e(dy,uBo),e(dy,ime),e(ime,_Bo),e(dy,bBo),e(Io,vBo),e(Io,dt),M(cy,dt,null),e(dt,FBo),e(dt,dme),e(dme,TBo),e(dt,MBo),e(dt,Wi),e(Wi,EBo),e(Wi,cme),e(cme,CBo),e(Wi,wBo),e(Wi,OG),e(OG,ABo),e(Wi,yBo),e(dt,LBo),M(tb,dt,null),e(Io,xBo),e(Io,ro),M(fy,ro,null),e(ro,$Bo),e(ro,fme),e(fme,kBo),e(ro,SBo),e(ro,Pa),e(Pa,RBo),e(Pa,mme),e(mme,PBo),e(Pa,BBo),e(Pa,gme),e(gme,IBo),e(Pa,qBo),e(Pa,hme),e(hme,NBo),e(Pa,jBo),e(ro,DBo),e(ro,U),e(U,ab),e(ab,pme),e(pme,GBo),e(ab,OBo),e(ab,VG),e(VG,VBo),e(ab,XBo),e(U,zBo),e(U,nb),e(nb,ume),e(ume,QBo),e(nb,WBo),e(nb,XG),e(XG,HBo),e(nb,UBo),e(U,JBo),e(U,sb),e(sb,_me),e(_me,YBo),e(sb,KBo),e(sb,zG),e(zG,ZBo),e(sb,eIo),e(U,oIo),e(U,lb),e(lb,bme),e(bme,rIo),e(lb,tIo),e(lb,QG),e(QG,aIo),e(lb,nIo),e(U,sIo),e(U,ib),e(ib,vme),e(vme,lIo),e(ib,iIo),e(ib,WG),e(WG,dIo),e(ib,cIo),e(U,fIo),e(U,db),e(db,Fme),e(Fme,mIo),e(db,gIo),e(db,HG),e(HG,hIo),e(db,pIo),e(U,uIo),e(U,cb),e(cb,Tme),e(Tme,_Io),e(cb,bIo),e(cb,UG),e(UG,vIo),e(cb,FIo),e(U,TIo),e(U,fb),e(fb,Mme),e(Mme,MIo),e(fb,EIo),e(fb,JG),e(JG,CIo),e(fb,wIo),e(U,AIo),e(U,mb),e(mb,Eme),e(Eme,yIo),e(mb,LIo),e(mb,YG),e(YG,xIo),e(mb,$Io),e(U,kIo),e(U,gb),e(gb,Cme),e(Cme,SIo),e(gb,RIo),e(gb,KG),e(KG,PIo),e(gb,BIo),e(U,IIo),e(U,hb),e(hb,wme),e(wme,qIo),e(hb,NIo),e(hb,ZG),e(ZG,jIo),e(hb,DIo),e(U,GIo),e(U,pb),e(pb,Ame),e(Ame,OIo),e(pb,VIo),e(pb,eO),e(eO,XIo),e(pb,zIo),e(U,QIo),e(U,ub),e(ub,yme),e(yme,WIo),e(ub,HIo),e(ub,oO),e(oO,UIo),e(ub,JIo),e(U,YIo),e(U,_b),e(_b,Lme),e(Lme,KIo),e(_b,ZIo),e(_b,rO),e(rO,eqo),e(_b,oqo),e(U,rqo),e(U,bb),e(bb,xme),e(xme,tqo),e(bb,aqo),e(bb,tO),e(tO,nqo),e(bb,sqo),e(U,lqo),e(U,vb),e(vb,$me),e($me,iqo),e(vb,dqo),e(vb,aO),e(aO,cqo),e(vb,fqo),e(U,mqo),e(U,Fb),e(Fb,kme),e(kme,gqo),e(Fb,hqo),e(Fb,nO),e(nO,pqo),e(Fb,uqo),e(U,_qo),e(U,Tb),e(Tb,Sme),e(Sme,bqo),e(Tb,vqo),e(Tb,sO),e(sO,Fqo),e(Tb,Tqo),e(U,Mqo),e(U,Mb),e(Mb,Rme),e(Rme,Eqo),e(Mb,Cqo),e(Mb,lO),e(lO,wqo),e(Mb,Aqo),e(U,yqo),e(U,Eb),e(Eb,Pme),e(Pme,Lqo),e(Eb,xqo),e(Eb,iO),e(iO,$qo),e(Eb,kqo),e(U,Sqo),e(U,Cb),e(Cb,Bme),e(Bme,Rqo),e(Cb,Pqo),e(Cb,dO),e(dO,Bqo),e(Cb,Iqo),e(U,qqo),e(U,wb),e(wb,Ime),e(Ime,Nqo),e(wb,jqo),e(wb,cO),e(cO,Dqo),e(wb,Gqo),e(U,Oqo),e(U,Ab),e(Ab,qme),e(qme,Vqo),e(Ab,Xqo),e(Ab,fO),e(fO,zqo),e(Ab,Qqo),e(U,Wqo),e(U,yb),e(yb,Nme),e(Nme,Hqo),e(yb,Uqo),e(yb,mO),e(mO,Jqo),e(yb,Yqo),e(U,Kqo),e(U,Lb),e(Lb,jme),e(jme,Zqo),e(Lb,eNo),e(Lb,gO),e(gO,oNo),e(Lb,rNo),e(U,tNo),e(U,xb),e(xb,Dme),e(Dme,aNo),e(xb,nNo),e(xb,hO),e(hO,sNo),e(xb,lNo),e(U,iNo),e(U,$b),e($b,Gme),e(Gme,dNo),e($b,cNo),e($b,pO),e(pO,fNo),e($b,mNo),e(U,gNo),e(U,kb),e(kb,Ome),e(Ome,hNo),e(kb,pNo),e(kb,uO),e(uO,uNo),e(kb,_No),e(U,bNo),e(U,Sb),e(Sb,Vme),e(Vme,vNo),e(Sb,FNo),e(Sb,_O),e(_O,TNo),e(Sb,MNo),e(U,ENo),e(U,Rb),e(Rb,Xme),e(Xme,CNo),e(Rb,wNo),e(Rb,bO),e(bO,ANo),e(Rb,yNo),e(U,LNo),e(U,Pb),e(Pb,zme),e(zme,xNo),e(Pb,$No),e(Pb,vO),e(vO,kNo),e(Pb,SNo),e(U,RNo),e(U,Bb),e(Bb,Qme),e(Qme,PNo),e(Bb,BNo),e(Bb,FO),e(FO,INo),e(Bb,qNo),e(U,NNo),e(U,Ib),e(Ib,Wme),e(Wme,jNo),e(Ib,DNo),e(Ib,TO),e(TO,GNo),e(Ib,ONo),e(ro,VNo),e(ro,qb),e(qb,XNo),e(qb,Hme),e(Hme,zNo),e(qb,QNo),e(qb,Ume),e(Ume,WNo),e(ro,HNo),M(Nb,ro,null),b(f,mIe,_),b(f,Hi,_),e(Hi,jb),e(jb,Jme),M(my,Jme,null),e(Hi,UNo),e(Hi,Yme),e(Yme,JNo),b(f,gIe,_),b(f,qo,_),M(gy,qo,null),e(qo,YNo),e(qo,Ui),e(Ui,KNo),e(Ui,MO),e(MO,ZNo),e(Ui,ejo),e(Ui,EO),e(EO,ojo),e(Ui,rjo),e(qo,tjo),e(qo,hy),e(hy,ajo),e(hy,Kme),e(Kme,njo),e(hy,sjo),e(qo,ljo),e(qo,ct),M(py,ct,null),e(ct,ijo),e(ct,Zme),e(Zme,djo),e(ct,cjo),e(ct,Ji),e(Ji,fjo),e(Ji,ege),e(ege,mjo),e(Ji,gjo),e(Ji,CO),e(CO,hjo),e(Ji,pjo),e(ct,ujo),M(Db,ct,null),e(qo,_jo),e(qo,to),M(uy,to,null),e(to,bjo),e(to,oge),e(oge,vjo),e(to,Fjo),e(to,Ba),e(Ba,Tjo),e(Ba,rge),e(rge,Mjo),e(Ba,Ejo),e(Ba,tge),e(tge,Cjo),e(Ba,wjo),e(Ba,age),e(age,Ajo),e(Ba,yjo),e(to,Ljo),e(to,V),e(V,Gb),e(Gb,nge),e(nge,xjo),e(Gb,$jo),e(Gb,wO),e(wO,kjo),e(Gb,Sjo),e(V,Rjo),e(V,Ob),e(Ob,sge),e(sge,Pjo),e(Ob,Bjo),e(Ob,AO),e(AO,Ijo),e(Ob,qjo),e(V,Njo),e(V,Vb),e(Vb,lge),e(lge,jjo),e(Vb,Djo),e(Vb,yO),e(yO,Gjo),e(Vb,Ojo),e(V,Vjo),e(V,Xb),e(Xb,ige),e(ige,Xjo),e(Xb,zjo),e(Xb,LO),e(LO,Qjo),e(Xb,Wjo),e(V,Hjo),e(V,zb),e(zb,dge),e(dge,Ujo),e(zb,Jjo),e(zb,xO),e(xO,Yjo),e(zb,Kjo),e(V,Zjo),e(V,Qb),e(Qb,cge),e(cge,eDo),e(Qb,oDo),e(Qb,$O),e($O,rDo),e(Qb,tDo),e(V,aDo),e(V,Wb),e(Wb,fge),e(fge,nDo),e(Wb,sDo),e(Wb,kO),e(kO,lDo),e(Wb,iDo),e(V,dDo),e(V,Hb),e(Hb,mge),e(mge,cDo),e(Hb,fDo),e(Hb,SO),e(SO,mDo),e(Hb,gDo),e(V,hDo),e(V,Ub),e(Ub,gge),e(gge,pDo),e(Ub,uDo),e(Ub,RO),e(RO,_Do),e(Ub,bDo),e(V,vDo),e(V,Jb),e(Jb,hge),e(hge,FDo),e(Jb,TDo),e(Jb,PO),e(PO,MDo),e(Jb,EDo),e(V,CDo),e(V,Yb),e(Yb,pge),e(pge,wDo),e(Yb,ADo),e(Yb,BO),e(BO,yDo),e(Yb,LDo),e(V,xDo),e(V,Kb),e(Kb,uge),e(uge,$Do),e(Kb,kDo),e(Kb,IO),e(IO,SDo),e(Kb,RDo),e(V,PDo),e(V,Zb),e(Zb,_ge),e(_ge,BDo),e(Zb,IDo),e(Zb,qO),e(qO,qDo),e(Zb,NDo),e(V,jDo),e(V,e4),e(e4,bge),e(bge,DDo),e(e4,GDo),e(e4,NO),e(NO,ODo),e(e4,VDo),e(V,XDo),e(V,o4),e(o4,vge),e(vge,zDo),e(o4,QDo),e(o4,jO),e(jO,WDo),e(o4,HDo),e(V,UDo),e(V,r4),e(r4,Fge),e(Fge,JDo),e(r4,YDo),e(r4,DO),e(DO,KDo),e(r4,ZDo),e(V,eGo),e(V,t4),e(t4,Tge),e(Tge,oGo),e(t4,rGo),e(t4,GO),e(GO,tGo),e(t4,aGo),e(V,nGo),e(V,a4),e(a4,Mge),e(Mge,sGo),e(a4,lGo),e(a4,OO),e(OO,iGo),e(a4,dGo),e(V,cGo),e(V,n4),e(n4,Ege),e(Ege,fGo),e(n4,mGo),e(n4,VO),e(VO,gGo),e(n4,hGo),e(V,pGo),e(V,s4),e(s4,Cge),e(Cge,uGo),e(s4,_Go),e(s4,XO),e(XO,bGo),e(s4,vGo),e(V,FGo),e(V,l4),e(l4,wge),e(wge,TGo),e(l4,MGo),e(l4,zO),e(zO,EGo),e(l4,CGo),e(V,wGo),e(V,i4),e(i4,Age),e(Age,AGo),e(i4,yGo),e(i4,QO),e(QO,LGo),e(i4,xGo),e(V,$Go),e(V,d4),e(d4,yge),e(yge,kGo),e(d4,SGo),e(d4,WO),e(WO,RGo),e(d4,PGo),e(V,BGo),e(V,c4),e(c4,Lge),e(Lge,IGo),e(c4,qGo),e(c4,HO),e(HO,NGo),e(c4,jGo),e(V,DGo),e(V,f4),e(f4,xge),e(xge,GGo),e(f4,OGo),e(f4,UO),e(UO,VGo),e(f4,XGo),e(V,zGo),e(V,m4),e(m4,$ge),e($ge,QGo),e(m4,WGo),e(m4,JO),e(JO,HGo),e(m4,UGo),e(V,JGo),e(V,g4),e(g4,kge),e(kge,YGo),e(g4,KGo),e(g4,YO),e(YO,ZGo),e(g4,eOo),e(V,oOo),e(V,h4),e(h4,Sge),e(Sge,rOo),e(h4,tOo),e(h4,KO),e(KO,aOo),e(h4,nOo),e(V,sOo),e(V,p4),e(p4,Rge),e(Rge,lOo),e(p4,iOo),e(p4,ZO),e(ZO,dOo),e(p4,cOo),e(V,fOo),e(V,u4),e(u4,Pge),e(Pge,mOo),e(u4,gOo),e(u4,eV),e(eV,hOo),e(u4,pOo),e(V,uOo),e(V,_4),e(_4,Bge),e(Bge,_Oo),e(_4,bOo),e(_4,oV),e(oV,vOo),e(_4,FOo),e(V,TOo),e(V,b4),e(b4,Ige),e(Ige,MOo),e(b4,EOo),e(b4,rV),e(rV,COo),e(b4,wOo),e(V,AOo),e(V,v4),e(v4,qge),e(qge,yOo),e(v4,LOo),e(v4,tV),e(tV,xOo),e(v4,$Oo),e(V,kOo),e(V,F4),e(F4,Nge),e(Nge,SOo),e(F4,ROo),e(F4,aV),e(aV,POo),e(F4,BOo),e(V,IOo),e(V,T4),e(T4,jge),e(jge,qOo),e(T4,NOo),e(T4,nV),e(nV,jOo),e(T4,DOo),e(V,GOo),e(V,M4),e(M4,Dge),e(Dge,OOo),e(M4,VOo),e(M4,sV),e(sV,XOo),e(M4,zOo),e(V,QOo),e(V,E4),e(E4,Gge),e(Gge,WOo),e(E4,HOo),e(E4,lV),e(lV,UOo),e(E4,JOo),e(V,YOo),e(V,C4),e(C4,Oge),e(Oge,KOo),e(C4,ZOo),e(C4,iV),e(iV,eVo),e(C4,oVo),e(V,rVo),e(V,w4),e(w4,Vge),e(Vge,tVo),e(w4,aVo),e(w4,dV),e(dV,nVo),e(w4,sVo),e(to,lVo),e(to,A4),e(A4,iVo),e(A4,Xge),e(Xge,dVo),e(A4,cVo),e(A4,zge),e(zge,fVo),e(to,mVo),M(y4,to,null),b(f,hIe,_),b(f,Yi,_),e(Yi,L4),e(L4,Qge),M(_y,Qge,null),e(Yi,gVo),e(Yi,Wge),e(Wge,hVo),b(f,pIe,_),b(f,No,_),M(by,No,null),e(No,pVo),e(No,Ki),e(Ki,uVo),e(Ki,cV),e(cV,_Vo),e(Ki,bVo),e(Ki,fV),e(fV,vVo),e(Ki,FVo),e(No,TVo),e(No,vy),e(vy,MVo),e(vy,Hge),e(Hge,EVo),e(vy,CVo),e(No,wVo),e(No,ft),M(Fy,ft,null),e(ft,AVo),e(ft,Uge),e(Uge,yVo),e(ft,LVo),e(ft,Zi),e(Zi,xVo),e(Zi,Jge),e(Jge,$Vo),e(Zi,kVo),e(Zi,mV),e(mV,SVo),e(Zi,RVo),e(ft,PVo),M(x4,ft,null),e(No,BVo),e(No,ao),M(Ty,ao,null),e(ao,IVo),e(ao,Yge),e(Yge,qVo),e(ao,NVo),e(ao,Ia),e(Ia,jVo),e(Ia,Kge),e(Kge,DVo),e(Ia,GVo),e(Ia,Zge),e(Zge,OVo),e(Ia,VVo),e(Ia,ehe),e(ehe,XVo),e(Ia,zVo),e(ao,QVo),e(ao,ohe),e(ohe,$4),e($4,rhe),e(rhe,WVo),e($4,HVo),e($4,gV),e(gV,UVo),e($4,JVo),e(ao,YVo),e(ao,k4),e(k4,KVo),e(k4,the),e(the,ZVo),e(k4,eXo),e(k4,ahe),e(ahe,oXo),e(ao,rXo),M(S4,ao,null),b(f,uIe,_),b(f,ed,_),e(ed,R4),e(R4,nhe),M(My,nhe,null),e(ed,tXo),e(ed,she),e(she,aXo),b(f,_Ie,_),b(f,jo,_),M(Ey,jo,null),e(jo,nXo),e(jo,od),e(od,sXo),e(od,hV),e(hV,lXo),e(od,iXo),e(od,pV),e(pV,dXo),e(od,cXo),e(jo,fXo),e(jo,Cy),e(Cy,mXo),e(Cy,lhe),e(lhe,gXo),e(Cy,hXo),e(jo,pXo),e(jo,mt),M(wy,mt,null),e(mt,uXo),e(mt,ihe),e(ihe,_Xo),e(mt,bXo),e(mt,rd),e(rd,vXo),e(rd,dhe),e(dhe,FXo),e(rd,TXo),e(rd,uV),e(uV,MXo),e(rd,EXo),e(mt,CXo),M(P4,mt,null),e(jo,wXo),e(jo,no),M(Ay,no,null),e(no,AXo),e(no,che),e(che,yXo),e(no,LXo),e(no,qa),e(qa,xXo),e(qa,fhe),e(fhe,$Xo),e(qa,kXo),e(qa,mhe),e(mhe,SXo),e(qa,RXo),e(qa,ghe),e(ghe,PXo),e(qa,BXo),e(no,IXo),e(no,Fe),e(Fe,B4),e(B4,hhe),e(hhe,qXo),e(B4,NXo),e(B4,_V),e(_V,jXo),e(B4,DXo),e(Fe,GXo),e(Fe,I4),e(I4,phe),e(phe,OXo),e(I4,VXo),e(I4,bV),e(bV,XXo),e(I4,zXo),e(Fe,QXo),e(Fe,q4),e(q4,uhe),e(uhe,WXo),e(q4,HXo),e(q4,vV),e(vV,UXo),e(q4,JXo),e(Fe,YXo),e(Fe,Rs),e(Rs,_he),e(_he,KXo),e(Rs,ZXo),e(Rs,FV),e(FV,ezo),e(Rs,ozo),e(Rs,TV),e(TV,rzo),e(Rs,tzo),e(Fe,azo),e(Fe,N4),e(N4,bhe),e(bhe,nzo),e(N4,szo),e(N4,MV),e(MV,lzo),e(N4,izo),e(Fe,dzo),e(Fe,gt),e(gt,vhe),e(vhe,czo),e(gt,fzo),e(gt,EV),e(EV,mzo),e(gt,gzo),e(gt,CV),e(CV,hzo),e(gt,pzo),e(gt,wV),e(wV,uzo),e(gt,_zo),e(Fe,bzo),e(Fe,j4),e(j4,Fhe),e(Fhe,vzo),e(j4,Fzo),e(j4,AV),e(AV,Tzo),e(j4,Mzo),e(Fe,Ezo),e(Fe,D4),e(D4,The),e(The,Czo),e(D4,wzo),e(D4,yV),e(yV,Azo),e(D4,yzo),e(Fe,Lzo),e(Fe,G4),e(G4,Mhe),e(Mhe,xzo),e(G4,$zo),e(G4,LV),e(LV,kzo),e(G4,Szo),e(Fe,Rzo),e(Fe,O4),e(O4,Ehe),e(Ehe,Pzo),e(O4,Bzo),e(O4,xV),e(xV,Izo),e(O4,qzo),e(Fe,Nzo),e(Fe,V4),e(V4,Che),e(Che,jzo),e(V4,Dzo),e(V4,$V),e($V,Gzo),e(V4,Ozo),e(Fe,Vzo),e(Fe,X4),e(X4,whe),e(whe,Xzo),e(X4,zzo),e(X4,kV),e(kV,Qzo),e(X4,Wzo),e(Fe,Hzo),e(Fe,z4),e(z4,Ahe),e(Ahe,Uzo),e(z4,Jzo),e(z4,SV),e(SV,Yzo),e(z4,Kzo),e(no,Zzo),e(no,Q4),e(Q4,eQo),e(Q4,yhe),e(yhe,oQo),e(Q4,rQo),e(Q4,Lhe),e(Lhe,tQo),e(no,aQo),M(W4,no,null),b(f,bIe,_),b(f,td,_),e(td,H4),e(H4,xhe),M(yy,xhe,null),e(td,nQo),e(td,$he),e($he,sQo),b(f,vIe,_),b(f,Do,_),M(Ly,Do,null),e(Do,lQo),e(Do,ad),e(ad,iQo),e(ad,RV),e(RV,dQo),e(ad,cQo),e(ad,PV),e(PV,fQo),e(ad,mQo),e(Do,gQo),e(Do,xy),e(xy,hQo),e(xy,khe),e(khe,pQo),e(xy,uQo),e(Do,_Qo),e(Do,ht),M($y,ht,null),e(ht,bQo),e(ht,She),e(She,vQo),e(ht,FQo),e(ht,nd),e(nd,TQo),e(nd,Rhe),e(Rhe,MQo),e(nd,EQo),e(nd,BV),e(BV,CQo),e(nd,wQo),e(ht,AQo),M(U4,ht,null),e(Do,yQo),e(Do,so),M(ky,so,null),e(so,LQo),e(so,Phe),e(Phe,xQo),e(so,$Qo),e(so,Na),e(Na,kQo),e(Na,Bhe),e(Bhe,SQo),e(Na,RQo),e(Na,Ihe),e(Ihe,PQo),e(Na,BQo),e(Na,qhe),e(qhe,IQo),e(Na,qQo),e(so,NQo),e(so,Nhe),e(Nhe,J4),e(J4,jhe),e(jhe,jQo),e(J4,DQo),e(J4,IV),e(IV,GQo),e(J4,OQo),e(so,VQo),e(so,Y4),e(Y4,XQo),e(Y4,Dhe),e(Dhe,zQo),e(Y4,QQo),e(Y4,Ghe),e(Ghe,WQo),e(so,HQo),M(K4,so,null),b(f,FIe,_),b(f,sd,_),e(sd,Z4),e(Z4,Ohe),M(Sy,Ohe,null),e(sd,UQo),e(sd,Vhe),e(Vhe,JQo),b(f,TIe,_),b(f,Go,_),M(Ry,Go,null),e(Go,YQo),e(Go,ld),e(ld,KQo),e(ld,qV),e(qV,ZQo),e(ld,eWo),e(ld,NV),e(NV,oWo),e(ld,rWo),e(Go,tWo),e(Go,Py),e(Py,aWo),e(Py,Xhe),e(Xhe,nWo),e(Py,sWo),e(Go,lWo),e(Go,pt),M(By,pt,null),e(pt,iWo),e(pt,zhe),e(zhe,dWo),e(pt,cWo),e(pt,id),e(id,fWo),e(id,Qhe),e(Qhe,mWo),e(id,gWo),e(id,jV),e(jV,hWo),e(id,pWo),e(pt,uWo),M(ev,pt,null),e(Go,_Wo),e(Go,lo),M(Iy,lo,null),e(lo,bWo),e(lo,Whe),e(Whe,vWo),e(lo,FWo),e(lo,ja),e(ja,TWo),e(ja,Hhe),e(Hhe,MWo),e(ja,EWo),e(ja,Uhe),e(Uhe,CWo),e(ja,wWo),e(ja,Jhe),e(Jhe,AWo),e(ja,yWo),e(lo,LWo),e(lo,Ne),e(Ne,ov),e(ov,Yhe),e(Yhe,xWo),e(ov,$Wo),e(ov,DV),e(DV,kWo),e(ov,SWo),e(Ne,RWo),e(Ne,rv),e(rv,Khe),e(Khe,PWo),e(rv,BWo),e(rv,GV),e(GV,IWo),e(rv,qWo),e(Ne,NWo),e(Ne,tv),e(tv,Zhe),e(Zhe,jWo),e(tv,DWo),e(tv,OV),e(OV,GWo),e(tv,OWo),e(Ne,VWo),e(Ne,av),e(av,epe),e(epe,XWo),e(av,zWo),e(av,VV),e(VV,QWo),e(av,WWo),e(Ne,HWo),e(Ne,nv),e(nv,ope),e(ope,UWo),e(nv,JWo),e(nv,XV),e(XV,YWo),e(nv,KWo),e(Ne,ZWo),e(Ne,sv),e(sv,rpe),e(rpe,eHo),e(sv,oHo),e(sv,zV),e(zV,rHo),e(sv,tHo),e(Ne,aHo),e(Ne,lv),e(lv,tpe),e(tpe,nHo),e(lv,sHo),e(lv,QV),e(QV,lHo),e(lv,iHo),e(Ne,dHo),e(Ne,iv),e(iv,ape),e(ape,cHo),e(iv,fHo),e(iv,WV),e(WV,mHo),e(iv,gHo),e(lo,hHo),e(lo,dv),e(dv,pHo),e(dv,npe),e(npe,uHo),e(dv,_Ho),e(dv,spe),e(spe,bHo),e(lo,vHo),M(cv,lo,null),b(f,MIe,_),b(f,dd,_),e(dd,fv),e(fv,lpe),M(qy,lpe,null),e(dd,FHo),e(dd,ipe),e(ipe,THo),b(f,EIe,_),b(f,Oo,_),M(Ny,Oo,null),e(Oo,MHo),e(Oo,cd),e(cd,EHo),e(cd,HV),e(HV,CHo),e(cd,wHo),e(cd,UV),e(UV,AHo),e(cd,yHo),e(Oo,LHo),e(Oo,jy),e(jy,xHo),e(jy,dpe),e(dpe,$Ho),e(jy,kHo),e(Oo,SHo),e(Oo,ut),M(Dy,ut,null),e(ut,RHo),e(ut,cpe),e(cpe,PHo),e(ut,BHo),e(ut,fd),e(fd,IHo),e(fd,fpe),e(fpe,qHo),e(fd,NHo),e(fd,JV),e(JV,jHo),e(fd,DHo),e(ut,GHo),M(mv,ut,null),e(Oo,OHo),e(Oo,io),M(Gy,io,null),e(io,VHo),e(io,mpe),e(mpe,XHo),e(io,zHo),e(io,Da),e(Da,QHo),e(Da,gpe),e(gpe,WHo),e(Da,HHo),e(Da,hpe),e(hpe,UHo),e(Da,JHo),e(Da,ppe),e(ppe,YHo),e(Da,KHo),e(io,ZHo),e(io,Ga),e(Ga,gv),e(gv,upe),e(upe,eUo),e(gv,oUo),e(gv,YV),e(YV,rUo),e(gv,tUo),e(Ga,aUo),e(Ga,hv),e(hv,_pe),e(_pe,nUo),e(hv,sUo),e(hv,KV),e(KV,lUo),e(hv,iUo),e(Ga,dUo),e(Ga,pv),e(pv,bpe),e(bpe,cUo),e(pv,fUo),e(pv,ZV),e(ZV,mUo),e(pv,gUo),e(Ga,hUo),e(Ga,uv),e(uv,vpe),e(vpe,pUo),e(uv,uUo),e(uv,eX),e(eX,_Uo),e(uv,bUo),e(io,vUo),e(io,_v),e(_v,FUo),e(_v,Fpe),e(Fpe,TUo),e(_v,MUo),e(_v,Tpe),e(Tpe,EUo),e(io,CUo),M(bv,io,null),b(f,CIe,_),b(f,md,_),e(md,vv),e(vv,Mpe),M(Oy,Mpe,null),e(md,wUo),e(md,Epe),e(Epe,AUo),b(f,wIe,_),b(f,Vo,_),M(Vy,Vo,null),e(Vo,yUo),e(Vo,gd),e(gd,LUo),e(gd,oX),e(oX,xUo),e(gd,$Uo),e(gd,rX),e(rX,kUo),e(gd,SUo),e(Vo,RUo),e(Vo,Xy),e(Xy,PUo),e(Xy,Cpe),e(Cpe,BUo),e(Xy,IUo),e(Vo,qUo),e(Vo,_t),M(zy,_t,null),e(_t,NUo),e(_t,wpe),e(wpe,jUo),e(_t,DUo),e(_t,hd),e(hd,GUo),e(hd,Ape),e(Ape,OUo),e(hd,VUo),e(hd,tX),e(tX,XUo),e(hd,zUo),e(_t,QUo),M(Fv,_t,null),e(Vo,WUo),e(Vo,co),M(Qy,co,null),e(co,HUo),e(co,ype),e(ype,UUo),e(co,JUo),e(co,Oa),e(Oa,YUo),e(Oa,Lpe),e(Lpe,KUo),e(Oa,ZUo),e(Oa,xpe),e(xpe,eJo),e(Oa,oJo),e(Oa,$pe),e($pe,rJo),e(Oa,tJo),e(co,aJo),e(co,je),e(je,Tv),e(Tv,kpe),e(kpe,nJo),e(Tv,sJo),e(Tv,aX),e(aX,lJo),e(Tv,iJo),e(je,dJo),e(je,Mv),e(Mv,Spe),e(Spe,cJo),e(Mv,fJo),e(Mv,nX),e(nX,mJo),e(Mv,gJo),e(je,hJo),e(je,Ev),e(Ev,Rpe),e(Rpe,pJo),e(Ev,uJo),e(Ev,sX),e(sX,_Jo),e(Ev,bJo),e(je,vJo),e(je,Cv),e(Cv,Ppe),e(Ppe,FJo),e(Cv,TJo),e(Cv,lX),e(lX,MJo),e(Cv,EJo),e(je,CJo),e(je,wv),e(wv,Bpe),e(Bpe,wJo),e(wv,AJo),e(wv,iX),e(iX,yJo),e(wv,LJo),e(je,xJo),e(je,Av),e(Av,Ipe),e(Ipe,$Jo),e(Av,kJo),e(Av,dX),e(dX,SJo),e(Av,RJo),e(je,PJo),e(je,yv),e(yv,qpe),e(qpe,BJo),e(yv,IJo),e(yv,cX),e(cX,qJo),e(yv,NJo),e(je,jJo),e(je,Lv),e(Lv,Npe),e(Npe,DJo),e(Lv,GJo),e(Lv,fX),e(fX,OJo),e(Lv,VJo),e(co,XJo),e(co,xv),e(xv,zJo),e(xv,jpe),e(jpe,QJo),e(xv,WJo),e(xv,Dpe),e(Dpe,HJo),e(co,UJo),M($v,co,null),b(f,AIe,_),b(f,pd,_),e(pd,kv),e(kv,Gpe),M(Wy,Gpe,null),e(pd,JJo),e(pd,Ope),e(Ope,YJo),b(f,yIe,_),b(f,Xo,_),M(Hy,Xo,null),e(Xo,KJo),e(Xo,ud),e(ud,ZJo),e(ud,mX),e(mX,eYo),e(ud,oYo),e(ud,gX),e(gX,rYo),e(ud,tYo),e(Xo,aYo),e(Xo,Uy),e(Uy,nYo),e(Uy,Vpe),e(Vpe,sYo),e(Uy,lYo),e(Xo,iYo),e(Xo,bt),M(Jy,bt,null),e(bt,dYo),e(bt,Xpe),e(Xpe,cYo),e(bt,fYo),e(bt,_d),e(_d,mYo),e(_d,zpe),e(zpe,gYo),e(_d,hYo),e(_d,hX),e(hX,pYo),e(_d,uYo),e(bt,_Yo),M(Sv,bt,null),e(Xo,bYo),e(Xo,fo),M(Yy,fo,null),e(fo,vYo),e(fo,Qpe),e(Qpe,FYo),e(fo,TYo),e(fo,Va),e(Va,MYo),e(Va,Wpe),e(Wpe,EYo),e(Va,CYo),e(Va,Hpe),e(Hpe,wYo),e(Va,AYo),e(Va,Upe),e(Upe,yYo),e(Va,LYo),e(fo,xYo),e(fo,Ky),e(Ky,Rv),e(Rv,Jpe),e(Jpe,$Yo),e(Rv,kYo),e(Rv,pX),e(pX,SYo),e(Rv,RYo),e(Ky,PYo),e(Ky,Pv),e(Pv,Ype),e(Ype,BYo),e(Pv,IYo),e(Pv,uX),e(uX,qYo),e(Pv,NYo),e(fo,jYo),e(fo,Bv),e(Bv,DYo),e(Bv,Kpe),e(Kpe,GYo),e(Bv,OYo),e(Bv,Zpe),e(Zpe,VYo),e(fo,XYo),M(Iv,fo,null),b(f,LIe,_),b(f,bd,_),e(bd,qv),e(qv,eue),M(Zy,eue,null),e(bd,zYo),e(bd,oue),e(oue,QYo),b(f,xIe,_),b(f,zo,_),M(eL,zo,null),e(zo,WYo),e(zo,vd),e(vd,HYo),e(vd,_X),e(_X,UYo),e(vd,JYo),e(vd,bX),e(bX,YYo),e(vd,KYo),e(zo,ZYo),e(zo,oL),e(oL,eKo),e(oL,rue),e(rue,oKo),e(oL,rKo),e(zo,tKo),e(zo,vt),M(rL,vt,null),e(vt,aKo),e(vt,tue),e(tue,nKo),e(vt,sKo),e(vt,Fd),e(Fd,lKo),e(Fd,aue),e(aue,iKo),e(Fd,dKo),e(Fd,vX),e(vX,cKo),e(Fd,fKo),e(vt,mKo),M(Nv,vt,null),e(zo,gKo),e(zo,mo),M(tL,mo,null),e(mo,hKo),e(mo,nue),e(nue,pKo),e(mo,uKo),e(mo,Xa),e(Xa,_Ko),e(Xa,sue),e(sue,bKo),e(Xa,vKo),e(Xa,lue),e(lue,FKo),e(Xa,TKo),e(Xa,iue),e(iue,MKo),e(Xa,EKo),e(mo,CKo),e(mo,za),e(za,jv),e(jv,due),e(due,wKo),e(jv,AKo),e(jv,FX),e(FX,yKo),e(jv,LKo),e(za,xKo),e(za,Dv),e(Dv,cue),e(cue,$Ko),e(Dv,kKo),e(Dv,TX),e(TX,SKo),e(Dv,RKo),e(za,PKo),e(za,Gv),e(Gv,fue),e(fue,BKo),e(Gv,IKo),e(Gv,MX),e(MX,qKo),e(Gv,NKo),e(za,jKo),e(za,Ov),e(Ov,mue),e(mue,DKo),e(Ov,GKo),e(Ov,EX),e(EX,OKo),e(Ov,VKo),e(mo,XKo),e(mo,Vv),e(Vv,zKo),e(Vv,gue),e(gue,QKo),e(Vv,WKo),e(Vv,hue),e(hue,HKo),e(mo,UKo),M(Xv,mo,null),b(f,$Ie,_),b(f,Td,_),e(Td,zv),e(zv,pue),M(aL,pue,null),e(Td,JKo),e(Td,uue),e(uue,YKo),b(f,kIe,_),b(f,Qo,_),M(nL,Qo,null),e(Qo,KKo),e(Qo,Md),e(Md,ZKo),e(Md,CX),e(CX,eZo),e(Md,oZo),e(Md,wX),e(wX,rZo),e(Md,tZo),e(Qo,aZo),e(Qo,sL),e(sL,nZo),e(sL,_ue),e(_ue,sZo),e(sL,lZo),e(Qo,iZo),e(Qo,Ft),M(lL,Ft,null),e(Ft,dZo),e(Ft,bue),e(bue,cZo),e(Ft,fZo),e(Ft,Ed),e(Ed,mZo),e(Ed,vue),e(vue,gZo),e(Ed,hZo),e(Ed,AX),e(AX,pZo),e(Ed,uZo),e(Ft,_Zo),M(Qv,Ft,null),e(Qo,bZo),e(Qo,go),M(iL,go,null),e(go,vZo),e(go,Fue),e(Fue,FZo),e(go,TZo),e(go,Qa),e(Qa,MZo),e(Qa,Tue),e(Tue,EZo),e(Qa,CZo),e(Qa,Mue),e(Mue,wZo),e(Qa,AZo),e(Qa,Eue),e(Eue,yZo),e(Qa,LZo),e(go,xZo),e(go,Cd),e(Cd,Wv),e(Wv,Cue),e(Cue,$Zo),e(Wv,kZo),e(Wv,yX),e(yX,SZo),e(Wv,RZo),e(Cd,PZo),e(Cd,Hv),e(Hv,wue),e(wue,BZo),e(Hv,IZo),e(Hv,LX),e(LX,qZo),e(Hv,NZo),e(Cd,jZo),e(Cd,Uv),e(Uv,Aue),e(Aue,DZo),e(Uv,GZo),e(Uv,xX),e(xX,OZo),e(Uv,VZo),e(go,XZo),e(go,Jv),e(Jv,zZo),e(Jv,yue),e(yue,QZo),e(Jv,WZo),e(Jv,Lue),e(Lue,HZo),e(go,UZo),M(Yv,go,null),b(f,SIe,_),b(f,wd,_),e(wd,Kv),e(Kv,xue),M(dL,xue,null),e(wd,JZo),e(wd,$ue),e($ue,YZo),b(f,RIe,_),b(f,Wo,_),M(cL,Wo,null),e(Wo,KZo),e(Wo,Ad),e(Ad,ZZo),e(Ad,$X),e($X,eer),e(Ad,oer),e(Ad,kX),e(kX,rer),e(Ad,ter),e(Wo,aer),e(Wo,fL),e(fL,ner),e(fL,kue),e(kue,ser),e(fL,ler),e(Wo,ier),e(Wo,Tt),M(mL,Tt,null),e(Tt,der),e(Tt,Sue),e(Sue,cer),e(Tt,fer),e(Tt,yd),e(yd,mer),e(yd,Rue),e(Rue,ger),e(yd,her),e(yd,SX),e(SX,per),e(yd,uer),e(Tt,_er),M(Zv,Tt,null),e(Wo,ber),e(Wo,ho),M(gL,ho,null),e(ho,ver),e(ho,Pue),e(Pue,Fer),e(ho,Ter),e(ho,Wa),e(Wa,Mer),e(Wa,Bue),e(Bue,Eer),e(Wa,Cer),e(Wa,Iue),e(Iue,wer),e(Wa,Aer),e(Wa,que),e(que,yer),e(Wa,Ler),e(ho,xer),e(ho,hL),e(hL,eF),e(eF,Nue),e(Nue,$er),e(eF,ker),e(eF,RX),e(RX,Ser),e(eF,Rer),e(hL,Per),e(hL,oF),e(oF,jue),e(jue,Ber),e(oF,Ier),e(oF,PX),e(PX,qer),e(oF,Ner),e(ho,jer),e(ho,rF),e(rF,Der),e(rF,Due),e(Due,Ger),e(rF,Oer),e(rF,Gue),e(Gue,Ver),e(ho,Xer),M(tF,ho,null),b(f,PIe,_),b(f,Ld,_),e(Ld,aF),e(aF,Oue),M(pL,Oue,null),e(Ld,zer),e(Ld,Vue),e(Vue,Qer),b(f,BIe,_),b(f,Ho,_),M(uL,Ho,null),e(Ho,Wer),e(Ho,xd),e(xd,Her),e(xd,BX),e(BX,Uer),e(xd,Jer),e(xd,IX),e(IX,Yer),e(xd,Ker),e(Ho,Zer),e(Ho,_L),e(_L,eor),e(_L,Xue),e(Xue,oor),e(_L,ror),e(Ho,tor),e(Ho,Mt),M(bL,Mt,null),e(Mt,aor),e(Mt,zue),e(zue,nor),e(Mt,sor),e(Mt,$d),e($d,lor),e($d,Que),e(Que,ior),e($d,dor),e($d,qX),e(qX,cor),e($d,mor),e(Mt,gor),M(nF,Mt,null),e(Ho,hor),e(Ho,po),M(vL,po,null),e(po,por),e(po,Wue),e(Wue,uor),e(po,_or),e(po,Ha),e(Ha,bor),e(Ha,Hue),e(Hue,vor),e(Ha,For),e(Ha,Uue),e(Uue,Tor),e(Ha,Mor),e(Ha,Jue),e(Jue,Eor),e(Ha,Cor),e(po,wor),e(po,Yue),e(Yue,sF),e(sF,Kue),e(Kue,Aor),e(sF,yor),e(sF,NX),e(NX,Lor),e(sF,xor),e(po,$or),e(po,lF),e(lF,kor),e(lF,Zue),e(Zue,Sor),e(lF,Ror),e(lF,e_e),e(e_e,Por),e(po,Bor),M(iF,po,null),b(f,IIe,_),b(f,kd,_),e(kd,dF),e(dF,o_e),M(FL,o_e,null),e(kd,Ior),e(kd,r_e),e(r_e,qor),b(f,qIe,_),b(f,Uo,_),M(TL,Uo,null),e(Uo,Nor),e(Uo,Sd),e(Sd,jor),e(Sd,jX),e(jX,Dor),e(Sd,Gor),e(Sd,DX),e(DX,Oor),e(Sd,Vor),e(Uo,Xor),e(Uo,ML),e(ML,zor),e(ML,t_e),e(t_e,Qor),e(ML,Wor),e(Uo,Hor),e(Uo,Et),M(EL,Et,null),e(Et,Uor),e(Et,a_e),e(a_e,Jor),e(Et,Yor),e(Et,Rd),e(Rd,Kor),e(Rd,n_e),e(n_e,Zor),e(Rd,err),e(Rd,GX),e(GX,orr),e(Rd,rrr),e(Et,trr),M(cF,Et,null),e(Uo,arr),e(Uo,uo),M(CL,uo,null),e(uo,nrr),e(uo,s_e),e(s_e,srr),e(uo,lrr),e(uo,Ua),e(Ua,irr),e(Ua,l_e),e(l_e,drr),e(Ua,crr),e(Ua,i_e),e(i_e,frr),e(Ua,mrr),e(Ua,d_e),e(d_e,grr),e(Ua,hrr),e(uo,prr),e(uo,Ja),e(Ja,fF),e(fF,c_e),e(c_e,urr),e(fF,_rr),e(fF,OX),e(OX,brr),e(fF,vrr),e(Ja,Frr),e(Ja,mF),e(mF,f_e),e(f_e,Trr),e(mF,Mrr),e(mF,VX),e(VX,Err),e(mF,Crr),e(Ja,wrr),e(Ja,gF),e(gF,m_e),e(m_e,Arr),e(gF,yrr),e(gF,XX),e(XX,Lrr),e(gF,xrr),e(Ja,$rr),e(Ja,hF),e(hF,g_e),e(g_e,krr),e(hF,Srr),e(hF,zX),e(zX,Rrr),e(hF,Prr),e(uo,Brr),e(uo,pF),e(pF,Irr),e(pF,h_e),e(h_e,qrr),e(pF,Nrr),e(pF,p_e),e(p_e,jrr),e(uo,Drr),M(uF,uo,null),b(f,NIe,_),b(f,Pd,_),e(Pd,_F),e(_F,u_e),M(wL,u_e,null),e(Pd,Grr),e(Pd,__e),e(__e,Orr),b(f,jIe,_),b(f,Jo,_),M(AL,Jo,null),e(Jo,Vrr),e(Jo,Bd),e(Bd,Xrr),e(Bd,QX),e(QX,zrr),e(Bd,Qrr),e(Bd,WX),e(WX,Wrr),e(Bd,Hrr),e(Jo,Urr),e(Jo,yL),e(yL,Jrr),e(yL,b_e),e(b_e,Yrr),e(yL,Krr),e(Jo,Zrr),e(Jo,Ct),M(LL,Ct,null),e(Ct,etr),e(Ct,v_e),e(v_e,otr),e(Ct,rtr),e(Ct,Id),e(Id,ttr),e(Id,F_e),e(F_e,atr),e(Id,ntr),e(Id,HX),e(HX,str),e(Id,ltr),e(Ct,itr),M(bF,Ct,null),e(Jo,dtr),e(Jo,_o),M(xL,_o,null),e(_o,ctr),e(_o,T_e),e(T_e,ftr),e(_o,mtr),e(_o,Ya),e(Ya,gtr),e(Ya,M_e),e(M_e,htr),e(Ya,ptr),e(Ya,E_e),e(E_e,utr),e(Ya,_tr),e(Ya,C_e),e(C_e,btr),e(Ya,vtr),e(_o,Ftr),e(_o,w_e),e(w_e,vF),e(vF,A_e),e(A_e,Ttr),e(vF,Mtr),e(vF,UX),e(UX,Etr),e(vF,Ctr),e(_o,wtr),e(_o,FF),e(FF,Atr),e(FF,y_e),e(y_e,ytr),e(FF,Ltr),e(FF,L_e),e(L_e,xtr),e(_o,$tr),M(TF,_o,null),b(f,DIe,_),b(f,qd,_),e(qd,MF),e(MF,x_e),M($L,x_e,null),e(qd,ktr),e(qd,$_e),e($_e,Str),b(f,GIe,_),b(f,Yo,_),M(kL,Yo,null),e(Yo,Rtr),e(Yo,Nd),e(Nd,Ptr),e(Nd,JX),e(JX,Btr),e(Nd,Itr),e(Nd,YX),e(YX,qtr),e(Nd,Ntr),e(Yo,jtr),e(Yo,SL),e(SL,Dtr),e(SL,k_e),e(k_e,Gtr),e(SL,Otr),e(Yo,Vtr),e(Yo,wt),M(RL,wt,null),e(wt,Xtr),e(wt,S_e),e(S_e,ztr),e(wt,Qtr),e(wt,jd),e(jd,Wtr),e(jd,R_e),e(R_e,Htr),e(jd,Utr),e(jd,KX),e(KX,Jtr),e(jd,Ytr),e(wt,Ktr),M(EF,wt,null),e(Yo,Ztr),e(Yo,wr),M(PL,wr,null),e(wr,ear),e(wr,P_e),e(P_e,oar),e(wr,rar),e(wr,Ka),e(Ka,tar),e(Ka,B_e),e(B_e,aar),e(Ka,nar),e(Ka,I_e),e(I_e,sar),e(Ka,lar),e(Ka,q_e),e(q_e,iar),e(Ka,dar),e(wr,car),e(wr,N),e(N,CF),e(CF,N_e),e(N_e,far),e(CF,mar),e(CF,ZX),e(ZX,gar),e(CF,har),e(N,par),e(N,wF),e(wF,j_e),e(j_e,uar),e(wF,_ar),e(wF,ez),e(ez,bar),e(wF,Far),e(N,Tar),e(N,AF),e(AF,D_e),e(D_e,Mar),e(AF,Ear),e(AF,oz),e(oz,Car),e(AF,war),e(N,Aar),e(N,yF),e(yF,G_e),e(G_e,yar),e(yF,Lar),e(yF,rz),e(rz,xar),e(yF,$ar),e(N,kar),e(N,LF),e(LF,O_e),e(O_e,Sar),e(LF,Rar),e(LF,tz),e(tz,Par),e(LF,Bar),e(N,Iar),e(N,xF),e(xF,V_e),e(V_e,qar),e(xF,Nar),e(xF,az),e(az,jar),e(xF,Dar),e(N,Gar),e(N,$F),e($F,X_e),e(X_e,Oar),e($F,Var),e($F,nz),e(nz,Xar),e($F,zar),e(N,Qar),e(N,kF),e(kF,z_e),e(z_e,War),e(kF,Har),e(kF,sz),e(sz,Uar),e(kF,Jar),e(N,Yar),e(N,SF),e(SF,Q_e),e(Q_e,Kar),e(SF,Zar),e(SF,lz),e(lz,enr),e(SF,onr),e(N,rnr),e(N,RF),e(RF,W_e),e(W_e,tnr),e(RF,anr),e(RF,iz),e(iz,nnr),e(RF,snr),e(N,lnr),e(N,PF),e(PF,H_e),e(H_e,inr),e(PF,dnr),e(PF,dz),e(dz,cnr),e(PF,fnr),e(N,mnr),e(N,BF),e(BF,U_e),e(U_e,gnr),e(BF,hnr),e(BF,cz),e(cz,pnr),e(BF,unr),e(N,_nr),e(N,IF),e(IF,J_e),e(J_e,bnr),e(IF,vnr),e(IF,fz),e(fz,Fnr),e(IF,Tnr),e(N,Mnr),e(N,qF),e(qF,Y_e),e(Y_e,Enr),e(qF,Cnr),e(qF,mz),e(mz,wnr),e(qF,Anr),e(N,ynr),e(N,NF),e(NF,K_e),e(K_e,Lnr),e(NF,xnr),e(NF,gz),e(gz,$nr),e(NF,knr),e(N,Snr),e(N,jF),e(jF,Z_e),e(Z_e,Rnr),e(jF,Pnr),e(jF,hz),e(hz,Bnr),e(jF,Inr),e(N,qnr),e(N,DF),e(DF,e2e),e(e2e,Nnr),e(DF,jnr),e(DF,pz),e(pz,Dnr),e(DF,Gnr),e(N,Onr),e(N,Ps),e(Ps,o2e),e(o2e,Vnr),e(Ps,Xnr),e(Ps,uz),e(uz,znr),e(Ps,Qnr),e(Ps,_z),e(_z,Wnr),e(Ps,Hnr),e(N,Unr),e(N,GF),e(GF,r2e),e(r2e,Jnr),e(GF,Ynr),e(GF,bz),e(bz,Knr),e(GF,Znr),e(N,esr),e(N,OF),e(OF,t2e),e(t2e,osr),e(OF,rsr),e(OF,vz),e(vz,tsr),e(OF,asr),e(N,nsr),e(N,VF),e(VF,a2e),e(a2e,ssr),e(VF,lsr),e(VF,Fz),e(Fz,isr),e(VF,dsr),e(N,csr),e(N,XF),e(XF,n2e),e(n2e,fsr),e(XF,msr),e(XF,Tz),e(Tz,gsr),e(XF,hsr),e(N,psr),e(N,zF),e(zF,s2e),e(s2e,usr),e(zF,_sr),e(zF,Mz),e(Mz,bsr),e(zF,vsr),e(N,Fsr),e(N,QF),e(QF,l2e),e(l2e,Tsr),e(QF,Msr),e(QF,Ez),e(Ez,Esr),e(QF,Csr),e(N,wsr),e(N,WF),e(WF,i2e),e(i2e,Asr),e(WF,ysr),e(WF,Cz),e(Cz,Lsr),e(WF,xsr),e(N,$sr),e(N,HF),e(HF,d2e),e(d2e,ksr),e(HF,Ssr),e(HF,wz),e(wz,Rsr),e(HF,Psr),e(N,Bsr),e(N,UF),e(UF,c2e),e(c2e,Isr),e(UF,qsr),e(UF,Az),e(Az,Nsr),e(UF,jsr),e(N,Dsr),e(N,JF),e(JF,f2e),e(f2e,Gsr),e(JF,Osr),e(JF,yz),e(yz,Vsr),e(JF,Xsr),e(N,zsr),e(N,YF),e(YF,m2e),e(m2e,Qsr),e(YF,Wsr),e(YF,Lz),e(Lz,Hsr),e(YF,Usr),e(N,Jsr),e(N,KF),e(KF,g2e),e(g2e,Ysr),e(KF,Ksr),e(KF,xz),e(xz,Zsr),e(KF,elr),e(N,olr),e(N,ZF),e(ZF,h2e),e(h2e,rlr),e(ZF,tlr),e(ZF,$z),e($z,alr),e(ZF,nlr),e(N,slr),e(N,eT),e(eT,p2e),e(p2e,llr),e(eT,ilr),e(eT,kz),e(kz,dlr),e(eT,clr),e(N,flr),e(N,oT),e(oT,u2e),e(u2e,mlr),e(oT,glr),e(oT,Sz),e(Sz,hlr),e(oT,plr),e(N,ulr),e(N,rT),e(rT,_2e),e(_2e,_lr),e(rT,blr),e(rT,Rz),e(Rz,vlr),e(rT,Flr),e(N,Tlr),e(N,tT),e(tT,b2e),e(b2e,Mlr),e(tT,Elr),e(tT,Pz),e(Pz,Clr),e(tT,wlr),e(N,Alr),e(N,aT),e(aT,v2e),e(v2e,ylr),e(aT,Llr),e(aT,Bz),e(Bz,xlr),e(aT,$lr),e(N,klr),e(N,nT),e(nT,F2e),e(F2e,Slr),e(nT,Rlr),e(nT,Iz),e(Iz,Plr),e(nT,Blr),e(N,Ilr),e(N,sT),e(sT,T2e),e(T2e,qlr),e(sT,Nlr),e(sT,qz),e(qz,jlr),e(sT,Dlr),e(N,Glr),e(N,lT),e(lT,M2e),e(M2e,Olr),e(lT,Vlr),e(lT,Nz),e(Nz,Xlr),e(lT,zlr),e(N,Qlr),e(N,iT),e(iT,E2e),e(E2e,Wlr),e(iT,Hlr),e(iT,jz),e(jz,Ulr),e(iT,Jlr),e(N,Ylr),e(N,dT),e(dT,C2e),e(C2e,Klr),e(dT,Zlr),e(dT,Dz),e(Dz,eir),e(dT,oir),e(N,rir),e(N,cT),e(cT,w2e),e(w2e,tir),e(cT,air),e(cT,Gz),e(Gz,nir),e(cT,sir),e(N,lir),e(N,fT),e(fT,A2e),e(A2e,iir),e(fT,dir),e(fT,Oz),e(Oz,cir),e(fT,fir),e(N,mir),e(N,mT),e(mT,y2e),e(y2e,gir),e(mT,hir),e(mT,Vz),e(Vz,pir),e(mT,uir),e(N,_ir),e(N,gT),e(gT,L2e),e(L2e,bir),e(gT,vir),e(gT,Xz),e(Xz,Fir),e(gT,Tir),e(wr,Mir),M(hT,wr,null),b(f,OIe,_),b(f,Dd,_),e(Dd,pT),e(pT,x2e),M(BL,x2e,null),e(Dd,Eir),e(Dd,$2e),e($2e,Cir),b(f,VIe,_),b(f,Ko,_),M(IL,Ko,null),e(Ko,wir),e(Ko,Gd),e(Gd,Air),e(Gd,zz),e(zz,yir),e(Gd,Lir),e(Gd,Qz),e(Qz,xir),e(Gd,$ir),e(Ko,kir),e(Ko,qL),e(qL,Sir),e(qL,k2e),e(k2e,Rir),e(qL,Pir),e(Ko,Bir),e(Ko,At),M(NL,At,null),e(At,Iir),e(At,S2e),e(S2e,qir),e(At,Nir),e(At,Od),e(Od,jir),e(Od,R2e),e(R2e,Dir),e(Od,Gir),e(Od,Wz),e(Wz,Oir),e(Od,Vir),e(At,Xir),M(uT,At,null),e(Ko,zir),e(Ko,Ar),M(jL,Ar,null),e(Ar,Qir),e(Ar,P2e),e(P2e,Wir),e(Ar,Hir),e(Ar,Za),e(Za,Uir),e(Za,B2e),e(B2e,Jir),e(Za,Yir),e(Za,I2e),e(I2e,Kir),e(Za,Zir),e(Za,q2e),e(q2e,edr),e(Za,odr),e(Ar,rdr),e(Ar,se),e(se,_T),e(_T,N2e),e(N2e,tdr),e(_T,adr),e(_T,Hz),e(Hz,ndr),e(_T,sdr),e(se,ldr),e(se,bT),e(bT,j2e),e(j2e,idr),e(bT,ddr),e(bT,Uz),e(Uz,cdr),e(bT,fdr),e(se,mdr),e(se,vT),e(vT,D2e),e(D2e,gdr),e(vT,hdr),e(vT,Jz),e(Jz,pdr),e(vT,udr),e(se,_dr),e(se,FT),e(FT,G2e),e(G2e,bdr),e(FT,vdr),e(FT,Yz),e(Yz,Fdr),e(FT,Tdr),e(se,Mdr),e(se,TT),e(TT,O2e),e(O2e,Edr),e(TT,Cdr),e(TT,Kz),e(Kz,wdr),e(TT,Adr),e(se,ydr),e(se,MT),e(MT,V2e),e(V2e,Ldr),e(MT,xdr),e(MT,Zz),e(Zz,$dr),e(MT,kdr),e(se,Sdr),e(se,ET),e(ET,X2e),e(X2e,Rdr),e(ET,Pdr),e(ET,eQ),e(eQ,Bdr),e(ET,Idr),e(se,qdr),e(se,CT),e(CT,z2e),e(z2e,Ndr),e(CT,jdr),e(CT,oQ),e(oQ,Ddr),e(CT,Gdr),e(se,Odr),e(se,wT),e(wT,Q2e),e(Q2e,Vdr),e(wT,Xdr),e(wT,rQ),e(rQ,zdr),e(wT,Qdr),e(se,Wdr),e(se,AT),e(AT,W2e),e(W2e,Hdr),e(AT,Udr),e(AT,tQ),e(tQ,Jdr),e(AT,Ydr),e(se,Kdr),e(se,yT),e(yT,H2e),e(H2e,Zdr),e(yT,ecr),e(yT,aQ),e(aQ,ocr),e(yT,rcr),e(se,tcr),e(se,LT),e(LT,U2e),e(U2e,acr),e(LT,ncr),e(LT,nQ),e(nQ,scr),e(LT,lcr),e(se,icr),e(se,xT),e(xT,J2e),e(J2e,dcr),e(xT,ccr),e(xT,sQ),e(sQ,fcr),e(xT,mcr),e(se,gcr),e(se,$T),e($T,Y2e),e(Y2e,hcr),e($T,pcr),e($T,lQ),e(lQ,ucr),e($T,_cr),e(se,bcr),e(se,kT),e(kT,K2e),e(K2e,vcr),e(kT,Fcr),e(kT,iQ),e(iQ,Tcr),e(kT,Mcr),e(se,Ecr),e(se,ST),e(ST,Z2e),e(Z2e,Ccr),e(ST,wcr),e(ST,dQ),e(dQ,Acr),e(ST,ycr),e(se,Lcr),e(se,RT),e(RT,e1e),e(e1e,xcr),e(RT,$cr),e(RT,cQ),e(cQ,kcr),e(RT,Scr),e(se,Rcr),e(se,PT),e(PT,o1e),e(o1e,Pcr),e(PT,Bcr),e(PT,fQ),e(fQ,Icr),e(PT,qcr),e(se,Ncr),e(se,BT),e(BT,r1e),e(r1e,jcr),e(BT,Dcr),e(BT,mQ),e(mQ,Gcr),e(BT,Ocr),e(se,Vcr),e(se,IT),e(IT,t1e),e(t1e,Xcr),e(IT,zcr),e(IT,gQ),e(gQ,Qcr),e(IT,Wcr),e(se,Hcr),e(se,qT),e(qT,a1e),e(a1e,Ucr),e(qT,Jcr),e(qT,hQ),e(hQ,Ycr),e(qT,Kcr),e(se,Zcr),e(se,NT),e(NT,n1e),e(n1e,efr),e(NT,ofr),e(NT,pQ),e(pQ,rfr),e(NT,tfr),e(se,afr),e(se,jT),e(jT,s1e),e(s1e,nfr),e(jT,sfr),e(jT,uQ),e(uQ,lfr),e(jT,ifr),e(Ar,dfr),M(DT,Ar,null),b(f,XIe,_),b(f,Vd,_),e(Vd,GT),e(GT,l1e),M(DL,l1e,null),e(Vd,cfr),e(Vd,i1e),e(i1e,ffr),b(f,zIe,_),b(f,Zo,_),M(GL,Zo,null),e(Zo,mfr),e(Zo,Xd),e(Xd,gfr),e(Xd,_Q),e(_Q,hfr),e(Xd,pfr),e(Xd,bQ),e(bQ,ufr),e(Xd,_fr),e(Zo,bfr),e(Zo,OL),e(OL,vfr),e(OL,d1e),e(d1e,Ffr),e(OL,Tfr),e(Zo,Mfr),e(Zo,yt),M(VL,yt,null),e(yt,Efr),e(yt,c1e),e(c1e,Cfr),e(yt,wfr),e(yt,zd),e(zd,Afr),e(zd,f1e),e(f1e,yfr),e(zd,Lfr),e(zd,vQ),e(vQ,xfr),e(zd,$fr),e(yt,kfr),M(OT,yt,null),e(Zo,Sfr),e(Zo,yr),M(XL,yr,null),e(yr,Rfr),e(yr,m1e),e(m1e,Pfr),e(yr,Bfr),e(yr,en),e(en,Ifr),e(en,g1e),e(g1e,qfr),e(en,Nfr),e(en,h1e),e(h1e,jfr),e(en,Dfr),e(en,p1e),e(p1e,Gfr),e(en,Ofr),e(yr,Vfr),e(yr,Te),e(Te,VT),e(VT,u1e),e(u1e,Xfr),e(VT,zfr),e(VT,FQ),e(FQ,Qfr),e(VT,Wfr),e(Te,Hfr),e(Te,XT),e(XT,_1e),e(_1e,Ufr),e(XT,Jfr),e(XT,TQ),e(TQ,Yfr),e(XT,Kfr),e(Te,Zfr),e(Te,zT),e(zT,b1e),e(b1e,emr),e(zT,omr),e(zT,MQ),e(MQ,rmr),e(zT,tmr),e(Te,amr),e(Te,QT),e(QT,v1e),e(v1e,nmr),e(QT,smr),e(QT,EQ),e(EQ,lmr),e(QT,imr),e(Te,dmr),e(Te,WT),e(WT,F1e),e(F1e,cmr),e(WT,fmr),e(WT,CQ),e(CQ,mmr),e(WT,gmr),e(Te,hmr),e(Te,HT),e(HT,T1e),e(T1e,pmr),e(HT,umr),e(HT,wQ),e(wQ,_mr),e(HT,bmr),e(Te,vmr),e(Te,UT),e(UT,M1e),e(M1e,Fmr),e(UT,Tmr),e(UT,AQ),e(AQ,Mmr),e(UT,Emr),e(Te,Cmr),e(Te,JT),e(JT,E1e),e(E1e,wmr),e(JT,Amr),e(JT,yQ),e(yQ,ymr),e(JT,Lmr),e(Te,xmr),e(Te,YT),e(YT,C1e),e(C1e,$mr),e(YT,kmr),e(YT,LQ),e(LQ,Smr),e(YT,Rmr),e(Te,Pmr),e(Te,KT),e(KT,w1e),e(w1e,Bmr),e(KT,Imr),e(KT,xQ),e(xQ,qmr),e(KT,Nmr),e(Te,jmr),e(Te,ZT),e(ZT,A1e),e(A1e,Dmr),e(ZT,Gmr),e(ZT,$Q),e($Q,Omr),e(ZT,Vmr),e(Te,Xmr),e(Te,eM),e(eM,y1e),e(y1e,zmr),e(eM,Qmr),e(eM,kQ),e(kQ,Wmr),e(eM,Hmr),e(yr,Umr),M(oM,yr,null),b(f,QIe,_),b(f,Qd,_),e(Qd,rM),e(rM,L1e),M(zL,L1e,null),e(Qd,Jmr),e(Qd,x1e),e(x1e,Ymr),b(f,WIe,_),b(f,er,_),M(QL,er,null),e(er,Kmr),e(er,Wd),e(Wd,Zmr),e(Wd,SQ),e(SQ,egr),e(Wd,ogr),e(Wd,RQ),e(RQ,rgr),e(Wd,tgr),e(er,agr),e(er,WL),e(WL,ngr),e(WL,$1e),e($1e,sgr),e(WL,lgr),e(er,igr),e(er,Lt),M(HL,Lt,null),e(Lt,dgr),e(Lt,k1e),e(k1e,cgr),e(Lt,fgr),e(Lt,Hd),e(Hd,mgr),e(Hd,S1e),e(S1e,ggr),e(Hd,hgr),e(Hd,PQ),e(PQ,pgr),e(Hd,ugr),e(Lt,_gr),M(tM,Lt,null),e(er,bgr),e(er,Lr),M(UL,Lr,null),e(Lr,vgr),e(Lr,R1e),e(R1e,Fgr),e(Lr,Tgr),e(Lr,on),e(on,Mgr),e(on,P1e),e(P1e,Egr),e(on,Cgr),e(on,B1e),e(B1e,wgr),e(on,Agr),e(on,I1e),e(I1e,ygr),e(on,Lgr),e(Lr,xgr),e(Lr,Ud),e(Ud,aM),e(aM,q1e),e(q1e,$gr),e(aM,kgr),e(aM,BQ),e(BQ,Sgr),e(aM,Rgr),e(Ud,Pgr),e(Ud,nM),e(nM,N1e),e(N1e,Bgr),e(nM,Igr),e(nM,IQ),e(IQ,qgr),e(nM,Ngr),e(Ud,jgr),e(Ud,sM),e(sM,j1e),e(j1e,Dgr),e(sM,Ggr),e(sM,qQ),e(qQ,Ogr),e(sM,Vgr),e(Lr,Xgr),M(lM,Lr,null),b(f,HIe,_),b(f,Jd,_),e(Jd,iM),e(iM,D1e),M(JL,D1e,null),e(Jd,zgr),e(Jd,G1e),e(G1e,Qgr),b(f,UIe,_),b(f,or,_),M(YL,or,null),e(or,Wgr),e(or,Yd),e(Yd,Hgr),e(Yd,NQ),e(NQ,Ugr),e(Yd,Jgr),e(Yd,jQ),e(jQ,Ygr),e(Yd,Kgr),e(or,Zgr),e(or,KL),e(KL,ehr),e(KL,O1e),e(O1e,ohr),e(KL,rhr),e(or,thr),e(or,xt),M(ZL,xt,null),e(xt,ahr),e(xt,V1e),e(V1e,nhr),e(xt,shr),e(xt,Kd),e(Kd,lhr),e(Kd,X1e),e(X1e,ihr),e(Kd,dhr),e(Kd,DQ),e(DQ,chr),e(Kd,fhr),e(xt,mhr),M(dM,xt,null),e(or,ghr),e(or,xr),M(e8,xr,null),e(xr,hhr),e(xr,z1e),e(z1e,phr),e(xr,uhr),e(xr,rn),e(rn,_hr),e(rn,Q1e),e(Q1e,bhr),e(rn,vhr),e(rn,W1e),e(W1e,Fhr),e(rn,Thr),e(rn,H1e),e(H1e,Mhr),e(rn,Ehr),e(xr,Chr),e(xr,ie),e(ie,cM),e(cM,U1e),e(U1e,whr),e(cM,Ahr),e(cM,GQ),e(GQ,yhr),e(cM,Lhr),e(ie,xhr),e(ie,fM),e(fM,J1e),e(J1e,$hr),e(fM,khr),e(fM,OQ),e(OQ,Shr),e(fM,Rhr),e(ie,Phr),e(ie,mM),e(mM,Y1e),e(Y1e,Bhr),e(mM,Ihr),e(mM,VQ),e(VQ,qhr),e(mM,Nhr),e(ie,jhr),e(ie,gM),e(gM,K1e),e(K1e,Dhr),e(gM,Ghr),e(gM,XQ),e(XQ,Ohr),e(gM,Vhr),e(ie,Xhr),e(ie,hM),e(hM,Z1e),e(Z1e,zhr),e(hM,Qhr),e(hM,zQ),e(zQ,Whr),e(hM,Hhr),e(ie,Uhr),e(ie,pM),e(pM,e7e),e(e7e,Jhr),e(pM,Yhr),e(pM,QQ),e(QQ,Khr),e(pM,Zhr),e(ie,epr),e(ie,uM),e(uM,o7e),e(o7e,opr),e(uM,rpr),e(uM,WQ),e(WQ,tpr),e(uM,apr),e(ie,npr),e(ie,_M),e(_M,r7e),e(r7e,spr),e(_M,lpr),e(_M,HQ),e(HQ,ipr),e(_M,dpr),e(ie,cpr),e(ie,bM),e(bM,t7e),e(t7e,fpr),e(bM,mpr),e(bM,UQ),e(UQ,gpr),e(bM,hpr),e(ie,ppr),e(ie,vM),e(vM,a7e),e(a7e,upr),e(vM,_pr),e(vM,JQ),e(JQ,bpr),e(vM,vpr),e(ie,Fpr),e(ie,FM),e(FM,n7e),e(n7e,Tpr),e(FM,Mpr),e(FM,YQ),e(YQ,Epr),e(FM,Cpr),e(ie,wpr),e(ie,TM),e(TM,s7e),e(s7e,Apr),e(TM,ypr),e(TM,KQ),e(KQ,Lpr),e(TM,xpr),e(ie,$pr),e(ie,MM),e(MM,l7e),e(l7e,kpr),e(MM,Spr),e(MM,ZQ),e(ZQ,Rpr),e(MM,Ppr),e(ie,Bpr),e(ie,EM),e(EM,i7e),e(i7e,Ipr),e(EM,qpr),e(EM,eW),e(eW,Npr),e(EM,jpr),e(ie,Dpr),e(ie,CM),e(CM,d7e),e(d7e,Gpr),e(CM,Opr),e(CM,oW),e(oW,Vpr),e(CM,Xpr),e(ie,zpr),e(ie,wM),e(wM,c7e),e(c7e,Qpr),e(wM,Wpr),e(wM,rW),e(rW,Hpr),e(wM,Upr),e(ie,Jpr),e(ie,AM),e(AM,f7e),e(f7e,Ypr),e(AM,Kpr),e(AM,tW),e(tW,Zpr),e(AM,eur),e(ie,our),e(ie,yM),e(yM,m7e),e(m7e,rur),e(yM,tur),e(yM,aW),e(aW,aur),e(yM,nur),e(ie,sur),e(ie,LM),e(LM,g7e),e(g7e,lur),e(LM,iur),e(LM,nW),e(nW,dur),e(LM,cur),e(ie,fur),e(ie,xM),e(xM,h7e),e(h7e,mur),e(xM,gur),e(xM,sW),e(sW,hur),e(xM,pur),e(xr,uur),M($M,xr,null),b(f,JIe,_),b(f,Zd,_),e(Zd,kM),e(kM,p7e),M(o8,p7e,null),e(Zd,_ur),e(Zd,u7e),e(u7e,bur),b(f,YIe,_),b(f,rr,_),M(r8,rr,null),e(rr,vur),e(rr,ec),e(ec,Fur),e(ec,lW),e(lW,Tur),e(ec,Mur),e(ec,iW),e(iW,Eur),e(ec,Cur),e(rr,wur),e(rr,t8),e(t8,Aur),e(t8,_7e),e(_7e,yur),e(t8,Lur),e(rr,xur),e(rr,$t),M(a8,$t,null),e($t,$ur),e($t,b7e),e(b7e,kur),e($t,Sur),e($t,oc),e(oc,Rur),e(oc,v7e),e(v7e,Pur),e(oc,Bur),e(oc,dW),e(dW,Iur),e(oc,qur),e($t,Nur),M(SM,$t,null),e(rr,jur),e(rr,$r),M(n8,$r,null),e($r,Dur),e($r,F7e),e(F7e,Gur),e($r,Our),e($r,tn),e(tn,Vur),e(tn,T7e),e(T7e,Xur),e(tn,zur),e(tn,M7e),e(M7e,Qur),e(tn,Wur),e(tn,E7e),e(E7e,Hur),e(tn,Uur),e($r,Jur),e($r,ye),e(ye,RM),e(RM,C7e),e(C7e,Yur),e(RM,Kur),e(RM,cW),e(cW,Zur),e(RM,e_r),e(ye,o_r),e(ye,PM),e(PM,w7e),e(w7e,r_r),e(PM,t_r),e(PM,fW),e(fW,a_r),e(PM,n_r),e(ye,s_r),e(ye,BM),e(BM,A7e),e(A7e,l_r),e(BM,i_r),e(BM,mW),e(mW,d_r),e(BM,c_r),e(ye,f_r),e(ye,IM),e(IM,y7e),e(y7e,m_r),e(IM,g_r),e(IM,gW),e(gW,h_r),e(IM,p_r),e(ye,u_r),e(ye,qM),e(qM,L7e),e(L7e,__r),e(qM,b_r),e(qM,hW),e(hW,v_r),e(qM,F_r),e(ye,T_r),e(ye,NM),e(NM,x7e),e(x7e,M_r),e(NM,E_r),e(NM,pW),e(pW,C_r),e(NM,w_r),e(ye,A_r),e(ye,jM),e(jM,$7e),e($7e,y_r),e(jM,L_r),e(jM,uW),e(uW,x_r),e(jM,$_r),e(ye,k_r),e(ye,DM),e(DM,k7e),e(k7e,S_r),e(DM,R_r),e(DM,_W),e(_W,P_r),e(DM,B_r),e(ye,I_r),e(ye,GM),e(GM,S7e),e(S7e,q_r),e(GM,N_r),e(GM,bW),e(bW,j_r),e(GM,D_r),e(ye,G_r),e(ye,OM),e(OM,R7e),e(R7e,O_r),e(OM,V_r),e(OM,vW),e(vW,X_r),e(OM,z_r),e($r,Q_r),M(VM,$r,null),b(f,KIe,_),b(f,rc,_),e(rc,XM),e(XM,P7e),M(s8,P7e,null),e(rc,W_r),e(rc,B7e),e(B7e,H_r),b(f,ZIe,_),b(f,tr,_),M(l8,tr,null),e(tr,U_r),e(tr,tc),e(tc,J_r),e(tc,FW),e(FW,Y_r),e(tc,K_r),e(tc,TW),e(TW,Z_r),e(tc,e2r),e(tr,o2r),e(tr,i8),e(i8,r2r),e(i8,I7e),e(I7e,t2r),e(i8,a2r),e(tr,n2r),e(tr,kt),M(d8,kt,null),e(kt,s2r),e(kt,q7e),e(q7e,l2r),e(kt,i2r),e(kt,ac),e(ac,d2r),e(ac,N7e),e(N7e,c2r),e(ac,f2r),e(ac,MW),e(MW,m2r),e(ac,g2r),e(kt,h2r),M(zM,kt,null),e(tr,p2r),e(tr,kr),M(c8,kr,null),e(kr,u2r),e(kr,j7e),e(j7e,_2r),e(kr,b2r),e(kr,an),e(an,v2r),e(an,D7e),e(D7e,F2r),e(an,T2r),e(an,G7e),e(G7e,M2r),e(an,E2r),e(an,O7e),e(O7e,C2r),e(an,w2r),e(kr,A2r),e(kr,Z),e(Z,QM),e(QM,V7e),e(V7e,y2r),e(QM,L2r),e(QM,EW),e(EW,x2r),e(QM,$2r),e(Z,k2r),e(Z,WM),e(WM,X7e),e(X7e,S2r),e(WM,R2r),e(WM,CW),e(CW,P2r),e(WM,B2r),e(Z,I2r),e(Z,HM),e(HM,z7e),e(z7e,q2r),e(HM,N2r),e(HM,wW),e(wW,j2r),e(HM,D2r),e(Z,G2r),e(Z,UM),e(UM,Q7e),e(Q7e,O2r),e(UM,V2r),e(UM,AW),e(AW,X2r),e(UM,z2r),e(Z,Q2r),e(Z,JM),e(JM,W7e),e(W7e,W2r),e(JM,H2r),e(JM,yW),e(yW,U2r),e(JM,J2r),e(Z,Y2r),e(Z,YM),e(YM,H7e),e(H7e,K2r),e(YM,Z2r),e(YM,LW),e(LW,e1r),e(YM,o1r),e(Z,r1r),e(Z,KM),e(KM,U7e),e(U7e,t1r),e(KM,a1r),e(KM,xW),e(xW,n1r),e(KM,s1r),e(Z,l1r),e(Z,ZM),e(ZM,J7e),e(J7e,i1r),e(ZM,d1r),e(ZM,$W),e($W,c1r),e(ZM,f1r),e(Z,m1r),e(Z,eE),e(eE,Y7e),e(Y7e,g1r),e(eE,h1r),e(eE,kW),e(kW,p1r),e(eE,u1r),e(Z,_1r),e(Z,oE),e(oE,K7e),e(K7e,b1r),e(oE,v1r),e(oE,SW),e(SW,F1r),e(oE,T1r),e(Z,M1r),e(Z,rE),e(rE,Z7e),e(Z7e,E1r),e(rE,C1r),e(rE,RW),e(RW,w1r),e(rE,A1r),e(Z,y1r),e(Z,tE),e(tE,ebe),e(ebe,L1r),e(tE,x1r),e(tE,PW),e(PW,$1r),e(tE,k1r),e(Z,S1r),e(Z,aE),e(aE,obe),e(obe,R1r),e(aE,P1r),e(aE,BW),e(BW,B1r),e(aE,I1r),e(Z,q1r),e(Z,nE),e(nE,rbe),e(rbe,N1r),e(nE,j1r),e(nE,IW),e(IW,D1r),e(nE,G1r),e(Z,O1r),e(Z,sE),e(sE,tbe),e(tbe,V1r),e(sE,X1r),e(sE,qW),e(qW,z1r),e(sE,Q1r),e(Z,W1r),e(Z,lE),e(lE,abe),e(abe,H1r),e(lE,U1r),e(lE,NW),e(NW,J1r),e(lE,Y1r),e(Z,K1r),e(Z,iE),e(iE,nbe),e(nbe,Z1r),e(iE,e7r),e(iE,jW),e(jW,o7r),e(iE,r7r),e(Z,t7r),e(Z,dE),e(dE,sbe),e(sbe,a7r),e(dE,n7r),e(dE,DW),e(DW,s7r),e(dE,l7r),e(Z,i7r),e(Z,cE),e(cE,lbe),e(lbe,d7r),e(cE,c7r),e(cE,GW),e(GW,f7r),e(cE,m7r),e(Z,g7r),e(Z,fE),e(fE,ibe),e(ibe,h7r),e(fE,p7r),e(fE,OW),e(OW,u7r),e(fE,_7r),e(Z,b7r),e(Z,mE),e(mE,dbe),e(dbe,v7r),e(mE,F7r),e(mE,VW),e(VW,T7r),e(mE,M7r),e(Z,E7r),e(Z,gE),e(gE,cbe),e(cbe,C7r),e(gE,w7r),e(gE,XW),e(XW,A7r),e(gE,y7r),e(Z,L7r),e(Z,hE),e(hE,fbe),e(fbe,x7r),e(hE,$7r),e(hE,zW),e(zW,k7r),e(hE,S7r),e(Z,R7r),e(Z,pE),e(pE,mbe),e(mbe,P7r),e(pE,B7r),e(pE,QW),e(QW,I7r),e(pE,q7r),e(Z,N7r),e(Z,uE),e(uE,gbe),e(gbe,j7r),e(uE,D7r),e(uE,WW),e(WW,G7r),e(uE,O7r),e(Z,V7r),e(Z,_E),e(_E,hbe),e(hbe,X7r),e(_E,z7r),e(_E,HW),e(HW,Q7r),e(_E,W7r),e(kr,H7r),M(bE,kr,null),b(f,eqe,_),b(f,nc,_),e(nc,vE),e(vE,pbe),M(f8,pbe,null),e(nc,U7r),e(nc,ube),e(ube,J7r),b(f,oqe,_),b(f,ar,_),M(m8,ar,null),e(ar,Y7r),e(ar,sc),e(sc,K7r),e(sc,UW),e(UW,Z7r),e(sc,ebr),e(sc,JW),e(JW,obr),e(sc,rbr),e(ar,tbr),e(ar,g8),e(g8,abr),e(g8,_be),e(_be,nbr),e(g8,sbr),e(ar,lbr),e(ar,St),M(h8,St,null),e(St,ibr),e(St,bbe),e(bbe,dbr),e(St,cbr),e(St,lc),e(lc,fbr),e(lc,vbe),e(vbe,mbr),e(lc,gbr),e(lc,YW),e(YW,hbr),e(lc,pbr),e(St,ubr),M(FE,St,null),e(ar,_br),e(ar,Sr),M(p8,Sr,null),e(Sr,bbr),e(Sr,Fbe),e(Fbe,vbr),e(Sr,Fbr),e(Sr,nn),e(nn,Tbr),e(nn,Tbe),e(Tbe,Mbr),e(nn,Ebr),e(nn,Mbe),e(Mbe,Cbr),e(nn,wbr),e(nn,Ebe),e(Ebe,Abr),e(nn,ybr),e(Sr,Lbr),e(Sr,he),e(he,TE),e(TE,Cbe),e(Cbe,xbr),e(TE,$br),e(TE,KW),e(KW,kbr),e(TE,Sbr),e(he,Rbr),e(he,ME),e(ME,wbe),e(wbe,Pbr),e(ME,Bbr),e(ME,ZW),e(ZW,Ibr),e(ME,qbr),e(he,Nbr),e(he,EE),e(EE,Abe),e(Abe,jbr),e(EE,Dbr),e(EE,eH),e(eH,Gbr),e(EE,Obr),e(he,Vbr),e(he,CE),e(CE,ybe),e(ybe,Xbr),e(CE,zbr),e(CE,oH),e(oH,Qbr),e(CE,Wbr),e(he,Hbr),e(he,wE),e(wE,Lbe),e(Lbe,Ubr),e(wE,Jbr),e(wE,rH),e(rH,Ybr),e(wE,Kbr),e(he,Zbr),e(he,AE),e(AE,xbe),e(xbe,e4r),e(AE,o4r),e(AE,tH),e(tH,r4r),e(AE,t4r),e(he,a4r),e(he,yE),e(yE,$be),e($be,n4r),e(yE,s4r),e(yE,aH),e(aH,l4r),e(yE,i4r),e(he,d4r),e(he,LE),e(LE,kbe),e(kbe,c4r),e(LE,f4r),e(LE,nH),e(nH,m4r),e(LE,g4r),e(he,h4r),e(he,xE),e(xE,Sbe),e(Sbe,p4r),e(xE,u4r),e(xE,sH),e(sH,_4r),e(xE,b4r),e(he,v4r),e(he,$E),e($E,Rbe),e(Rbe,F4r),e($E,T4r),e($E,lH),e(lH,M4r),e($E,E4r),e(he,C4r),e(he,kE),e(kE,Pbe),e(Pbe,w4r),e(kE,A4r),e(kE,iH),e(iH,y4r),e(kE,L4r),e(he,x4r),e(he,SE),e(SE,Bbe),e(Bbe,$4r),e(SE,k4r),e(SE,dH),e(dH,S4r),e(SE,R4r),e(he,P4r),e(he,RE),e(RE,Ibe),e(Ibe,B4r),e(RE,I4r),e(RE,cH),e(cH,q4r),e(RE,N4r),e(he,j4r),e(he,PE),e(PE,qbe),e(qbe,D4r),e(PE,G4r),e(PE,fH),e(fH,O4r),e(PE,V4r),e(he,X4r),e(he,BE),e(BE,Nbe),e(Nbe,z4r),e(BE,Q4r),e(BE,mH),e(mH,W4r),e(BE,H4r),e(he,U4r),e(he,IE),e(IE,jbe),e(jbe,J4r),e(IE,Y4r),e(IE,gH),e(gH,K4r),e(IE,Z4r),e(he,evr),e(he,qE),e(qE,Dbe),e(Dbe,ovr),e(qE,rvr),e(qE,hH),e(hH,tvr),e(qE,avr),e(Sr,nvr),M(NE,Sr,null),b(f,rqe,_),b(f,ic,_),e(ic,jE),e(jE,Gbe),M(u8,Gbe,null),e(ic,svr),e(ic,Obe),e(Obe,lvr),b(f,tqe,_),b(f,nr,_),M(_8,nr,null),e(nr,ivr),e(nr,dc),e(dc,dvr),e(dc,pH),e(pH,cvr),e(dc,fvr),e(dc,uH),e(uH,mvr),e(dc,gvr),e(nr,hvr),e(nr,b8),e(b8,pvr),e(b8,Vbe),e(Vbe,uvr),e(b8,_vr),e(nr,bvr),e(nr,Rt),M(v8,Rt,null),e(Rt,vvr),e(Rt,Xbe),e(Xbe,Fvr),e(Rt,Tvr),e(Rt,cc),e(cc,Mvr),e(cc,zbe),e(zbe,Evr),e(cc,Cvr),e(cc,_H),e(_H,wvr),e(cc,Avr),e(Rt,yvr),M(DE,Rt,null),e(nr,Lvr),e(nr,Rr),M(F8,Rr,null),e(Rr,xvr),e(Rr,Qbe),e(Qbe,$vr),e(Rr,kvr),e(Rr,sn),e(sn,Svr),e(sn,Wbe),e(Wbe,Rvr),e(sn,Pvr),e(sn,Hbe),e(Hbe,Bvr),e(sn,Ivr),e(sn,Ube),e(Ube,qvr),e(sn,Nvr),e(Rr,jvr),e(Rr,T8),e(T8,GE),e(GE,Jbe),e(Jbe,Dvr),e(GE,Gvr),e(GE,bH),e(bH,Ovr),e(GE,Vvr),e(T8,Xvr),e(T8,OE),e(OE,Ybe),e(Ybe,zvr),e(OE,Qvr),e(OE,vH),e(vH,Wvr),e(OE,Hvr),e(Rr,Uvr),M(VE,Rr,null),b(f,aqe,_),b(f,fc,_),e(fc,XE),e(XE,Kbe),M(M8,Kbe,null),e(fc,Jvr),e(fc,Zbe),e(Zbe,Yvr),b(f,nqe,_),b(f,sr,_),M(E8,sr,null),e(sr,Kvr),e(sr,mc),e(mc,Zvr),e(mc,FH),e(FH,eFr),e(mc,oFr),e(mc,TH),e(TH,rFr),e(mc,tFr),e(sr,aFr),e(sr,C8),e(C8,nFr),e(C8,e4e),e(e4e,sFr),e(C8,lFr),e(sr,iFr),e(sr,Pt),M(w8,Pt,null),e(Pt,dFr),e(Pt,o4e),e(o4e,cFr),e(Pt,fFr),e(Pt,gc),e(gc,mFr),e(gc,r4e),e(r4e,gFr),e(gc,hFr),e(gc,MH),e(MH,pFr),e(gc,uFr),e(Pt,_Fr),M(zE,Pt,null),e(sr,bFr),e(sr,Pr),M(A8,Pr,null),e(Pr,vFr),e(Pr,t4e),e(t4e,FFr),e(Pr,TFr),e(Pr,ln),e(ln,MFr),e(ln,a4e),e(a4e,EFr),e(ln,CFr),e(ln,n4e),e(n4e,wFr),e(ln,AFr),e(ln,s4e),e(s4e,yFr),e(ln,LFr),e(Pr,xFr),e(Pr,l4e),e(l4e,QE),e(QE,i4e),e(i4e,$Fr),e(QE,kFr),e(QE,EH),e(EH,SFr),e(QE,RFr),e(Pr,PFr),M(WE,Pr,null),b(f,sqe,_),b(f,hc,_),e(hc,HE),e(HE,d4e),M(y8,d4e,null),e(hc,BFr),e(hc,c4e),e(c4e,IFr),b(f,lqe,_),b(f,lr,_),M(L8,lr,null),e(lr,qFr),e(lr,pc),e(pc,NFr),e(pc,CH),e(CH,jFr),e(pc,DFr),e(pc,wH),e(wH,GFr),e(pc,OFr),e(lr,VFr),e(lr,x8),e(x8,XFr),e(x8,f4e),e(f4e,zFr),e(x8,QFr),e(lr,WFr),e(lr,Bt),M($8,Bt,null),e(Bt,HFr),e(Bt,m4e),e(m4e,UFr),e(Bt,JFr),e(Bt,uc),e(uc,YFr),e(uc,g4e),e(g4e,KFr),e(uc,ZFr),e(uc,AH),e(AH,eTr),e(uc,oTr),e(Bt,rTr),M(UE,Bt,null),e(lr,tTr),e(lr,Br),M(k8,Br,null),e(Br,aTr),e(Br,h4e),e(h4e,nTr),e(Br,sTr),e(Br,dn),e(dn,lTr),e(dn,p4e),e(p4e,iTr),e(dn,dTr),e(dn,u4e),e(u4e,cTr),e(dn,fTr),e(dn,_4e),e(_4e,mTr),e(dn,gTr),e(Br,hTr),e(Br,de),e(de,JE),e(JE,b4e),e(b4e,pTr),e(JE,uTr),e(JE,yH),e(yH,_Tr),e(JE,bTr),e(de,vTr),e(de,YE),e(YE,v4e),e(v4e,FTr),e(YE,TTr),e(YE,LH),e(LH,MTr),e(YE,ETr),e(de,CTr),e(de,KE),e(KE,F4e),e(F4e,wTr),e(KE,ATr),e(KE,xH),e(xH,yTr),e(KE,LTr),e(de,xTr),e(de,ZE),e(ZE,T4e),e(T4e,$Tr),e(ZE,kTr),e(ZE,$H),e($H,STr),e(ZE,RTr),e(de,PTr),e(de,e5),e(e5,M4e),e(M4e,BTr),e(e5,ITr),e(e5,kH),e(kH,qTr),e(e5,NTr),e(de,jTr),e(de,o5),e(o5,E4e),e(E4e,DTr),e(o5,GTr),e(o5,SH),e(SH,OTr),e(o5,VTr),e(de,XTr),e(de,r5),e(r5,C4e),e(C4e,zTr),e(r5,QTr),e(r5,RH),e(RH,WTr),e(r5,HTr),e(de,UTr),e(de,t5),e(t5,w4e),e(w4e,JTr),e(t5,YTr),e(t5,PH),e(PH,KTr),e(t5,ZTr),e(de,eMr),e(de,a5),e(a5,A4e),e(A4e,oMr),e(a5,rMr),e(a5,BH),e(BH,tMr),e(a5,aMr),e(de,nMr),e(de,n5),e(n5,y4e),e(y4e,sMr),e(n5,lMr),e(n5,IH),e(IH,iMr),e(n5,dMr),e(de,cMr),e(de,s5),e(s5,L4e),e(L4e,fMr),e(s5,mMr),e(s5,qH),e(qH,gMr),e(s5,hMr),e(de,pMr),e(de,l5),e(l5,x4e),e(x4e,uMr),e(l5,_Mr),e(l5,NH),e(NH,bMr),e(l5,vMr),e(de,FMr),e(de,i5),e(i5,$4e),e($4e,TMr),e(i5,MMr),e(i5,jH),e(jH,EMr),e(i5,CMr),e(de,wMr),e(de,d5),e(d5,k4e),e(k4e,AMr),e(d5,yMr),e(d5,DH),e(DH,LMr),e(d5,xMr),e(de,$Mr),e(de,c5),e(c5,S4e),e(S4e,kMr),e(c5,SMr),e(c5,GH),e(GH,RMr),e(c5,PMr),e(de,BMr),e(de,f5),e(f5,R4e),e(R4e,IMr),e(f5,qMr),e(f5,OH),e(OH,NMr),e(f5,jMr),e(de,DMr),e(de,m5),e(m5,P4e),e(P4e,GMr),e(m5,OMr),e(m5,VH),e(VH,VMr),e(m5,XMr),e(de,zMr),e(de,g5),e(g5,B4e),e(B4e,QMr),e(g5,WMr),e(g5,XH),e(XH,HMr),e(g5,UMr),e(de,JMr),e(de,h5),e(h5,I4e),e(I4e,YMr),e(h5,KMr),e(h5,zH),e(zH,ZMr),e(h5,eEr),e(de,oEr),e(de,p5),e(p5,q4e),e(q4e,rEr),e(p5,tEr),e(p5,QH),e(QH,aEr),e(p5,nEr),e(Br,sEr),M(u5,Br,null),b(f,iqe,_),b(f,_c,_),e(_c,_5),e(_5,N4e),M(S8,N4e,null),e(_c,lEr),e(_c,j4e),e(j4e,iEr),b(f,dqe,_),b(f,ir,_),M(R8,ir,null),e(ir,dEr),e(ir,bc),e(bc,cEr),e(bc,WH),e(WH,fEr),e(bc,mEr),e(bc,HH),e(HH,gEr),e(bc,hEr),e(ir,pEr),e(ir,P8),e(P8,uEr),e(P8,D4e),e(D4e,_Er),e(P8,bEr),e(ir,vEr),e(ir,It),M(B8,It,null),e(It,FEr),e(It,G4e),e(G4e,TEr),e(It,MEr),e(It,vc),e(vc,EEr),e(vc,O4e),e(O4e,CEr),e(vc,wEr),e(vc,UH),e(UH,AEr),e(vc,yEr),e(It,LEr),M(b5,It,null),e(ir,xEr),e(ir,Ir),M(I8,Ir,null),e(Ir,$Er),e(Ir,V4e),e(V4e,kEr),e(Ir,SEr),e(Ir,cn),e(cn,REr),e(cn,X4e),e(X4e,PEr),e(cn,BEr),e(cn,z4e),e(z4e,IEr),e(cn,qEr),e(cn,Q4e),e(Q4e,NEr),e(cn,jEr),e(Ir,DEr),e(Ir,ce),e(ce,v5),e(v5,W4e),e(W4e,GEr),e(v5,OEr),e(v5,JH),e(JH,VEr),e(v5,XEr),e(ce,zEr),e(ce,F5),e(F5,H4e),e(H4e,QEr),e(F5,WEr),e(F5,YH),e(YH,HEr),e(F5,UEr),e(ce,JEr),e(ce,T5),e(T5,U4e),e(U4e,YEr),e(T5,KEr),e(T5,KH),e(KH,ZEr),e(T5,e5r),e(ce,o5r),e(ce,M5),e(M5,J4e),e(J4e,r5r),e(M5,t5r),e(M5,ZH),e(ZH,a5r),e(M5,n5r),e(ce,s5r),e(ce,E5),e(E5,Y4e),e(Y4e,l5r),e(E5,i5r),e(E5,eU),e(eU,d5r),e(E5,c5r),e(ce,f5r),e(ce,C5),e(C5,K4e),e(K4e,m5r),e(C5,g5r),e(C5,oU),e(oU,h5r),e(C5,p5r),e(ce,u5r),e(ce,w5),e(w5,Z4e),e(Z4e,_5r),e(w5,b5r),e(w5,rU),e(rU,v5r),e(w5,F5r),e(ce,T5r),e(ce,A5),e(A5,eve),e(eve,M5r),e(A5,E5r),e(A5,tU),e(tU,C5r),e(A5,w5r),e(ce,A5r),e(ce,y5),e(y5,ove),e(ove,y5r),e(y5,L5r),e(y5,aU),e(aU,x5r),e(y5,$5r),e(ce,k5r),e(ce,L5),e(L5,rve),e(rve,S5r),e(L5,R5r),e(L5,nU),e(nU,P5r),e(L5,B5r),e(ce,I5r),e(ce,x5),e(x5,tve),e(tve,q5r),e(x5,N5r),e(x5,sU),e(sU,j5r),e(x5,D5r),e(ce,G5r),e(ce,$5),e($5,ave),e(ave,O5r),e($5,V5r),e($5,lU),e(lU,X5r),e($5,z5r),e(ce,Q5r),e(ce,k5),e(k5,nve),e(nve,W5r),e(k5,H5r),e(k5,iU),e(iU,U5r),e(k5,J5r),e(ce,Y5r),e(ce,S5),e(S5,sve),e(sve,K5r),e(S5,Z5r),e(S5,dU),e(dU,eCr),e(S5,oCr),e(ce,rCr),e(ce,R5),e(R5,lve),e(lve,tCr),e(R5,aCr),e(R5,cU),e(cU,nCr),e(R5,sCr),e(ce,lCr),e(ce,P5),e(P5,ive),e(ive,iCr),e(P5,dCr),e(P5,fU),e(fU,cCr),e(P5,fCr),e(ce,mCr),e(ce,B5),e(B5,dve),e(dve,gCr),e(B5,hCr),e(B5,mU),e(mU,pCr),e(B5,uCr),e(ce,_Cr),e(ce,I5),e(I5,cve),e(cve,bCr),e(I5,vCr),e(I5,gU),e(gU,FCr),e(I5,TCr),e(ce,MCr),e(ce,q5),e(q5,fve),e(fve,ECr),e(q5,CCr),e(q5,hU),e(hU,wCr),e(q5,ACr),e(ce,yCr),e(ce,N5),e(N5,mve),e(mve,LCr),e(N5,xCr),e(N5,pU),e(pU,$Cr),e(N5,kCr),e(Ir,SCr),M(j5,Ir,null),b(f,cqe,_),b(f,Fc,_),e(Fc,D5),e(D5,gve),M(q8,gve,null),e(Fc,RCr),e(Fc,hve),e(hve,PCr),b(f,fqe,_),b(f,dr,_),M(N8,dr,null),e(dr,BCr),e(dr,Tc),e(Tc,ICr),e(Tc,uU),e(uU,qCr),e(Tc,NCr),e(Tc,_U),e(_U,jCr),e(Tc,DCr),e(dr,GCr),e(dr,j8),e(j8,OCr),e(j8,pve),e(pve,VCr),e(j8,XCr),e(dr,zCr),e(dr,qt),M(D8,qt,null),e(qt,QCr),e(qt,uve),e(uve,WCr),e(qt,HCr),e(qt,Mc),e(Mc,UCr),e(Mc,_ve),e(_ve,JCr),e(Mc,YCr),e(Mc,bU),e(bU,KCr),e(Mc,ZCr),e(qt,e3r),M(G5,qt,null),e(dr,o3r),e(dr,qr),M(G8,qr,null),e(qr,r3r),e(qr,bve),e(bve,t3r),e(qr,a3r),e(qr,fn),e(fn,n3r),e(fn,vve),e(vve,s3r),e(fn,l3r),e(fn,Fve),e(Fve,i3r),e(fn,d3r),e(fn,Tve),e(Tve,c3r),e(fn,f3r),e(qr,m3r),e(qr,Mve),e(Mve,O5),e(O5,Eve),e(Eve,g3r),e(O5,h3r),e(O5,vU),e(vU,p3r),e(O5,u3r),e(qr,_3r),M(V5,qr,null),b(f,mqe,_),b(f,Ec,_),e(Ec,X5),e(X5,Cve),M(O8,Cve,null),e(Ec,b3r),e(Ec,wve),e(wve,v3r),b(f,gqe,_),b(f,cr,_),M(V8,cr,null),e(cr,F3r),e(cr,Cc),e(Cc,T3r),e(Cc,FU),e(FU,M3r),e(Cc,E3r),e(Cc,TU),e(TU,C3r),e(Cc,w3r),e(cr,A3r),e(cr,X8),e(X8,y3r),e(X8,Ave),e(Ave,L3r),e(X8,x3r),e(cr,$3r),e(cr,Nt),M(z8,Nt,null),e(Nt,k3r),e(Nt,yve),e(yve,S3r),e(Nt,R3r),e(Nt,wc),e(wc,P3r),e(wc,Lve),e(Lve,B3r),e(wc,I3r),e(wc,MU),e(MU,q3r),e(wc,N3r),e(Nt,j3r),M(z5,Nt,null),e(cr,D3r),e(cr,Nr),M(Q8,Nr,null),e(Nr,G3r),e(Nr,xve),e(xve,O3r),e(Nr,V3r),e(Nr,mn),e(mn,X3r),e(mn,$ve),e($ve,z3r),e(mn,Q3r),e(mn,kve),e(kve,W3r),e(mn,H3r),e(mn,Sve),e(Sve,U3r),e(mn,J3r),e(Nr,Y3r),e(Nr,Rve),e(Rve,Q5),e(Q5,Pve),e(Pve,K3r),e(Q5,Z3r),e(Q5,EU),e(EU,ewr),e(Q5,owr),e(Nr,rwr),M(W5,Nr,null),b(f,hqe,_),b(f,Ac,_),e(Ac,H5),e(H5,Bve),M(W8,Bve,null),e(Ac,twr),e(Ac,Ive),e(Ive,awr),b(f,pqe,_),b(f,fr,_),M(H8,fr,null),e(fr,nwr),e(fr,yc),e(yc,swr),e(yc,CU),e(CU,lwr),e(yc,iwr),e(yc,wU),e(wU,dwr),e(yc,cwr),e(fr,fwr),e(fr,U8),e(U8,mwr),e(U8,qve),e(qve,gwr),e(U8,hwr),e(fr,pwr),e(fr,jt),M(J8,jt,null),e(jt,uwr),e(jt,Nve),e(Nve,_wr),e(jt,bwr),e(jt,Lc),e(Lc,vwr),e(Lc,jve),e(jve,Fwr),e(Lc,Twr),e(Lc,AU),e(AU,Mwr),e(Lc,Ewr),e(jt,Cwr),M(U5,jt,null),e(fr,wwr),e(fr,jr),M(Y8,jr,null),e(jr,Awr),e(jr,Dve),e(Dve,ywr),e(jr,Lwr),e(jr,gn),e(gn,xwr),e(gn,Gve),e(Gve,$wr),e(gn,kwr),e(gn,Ove),e(Ove,Swr),e(gn,Rwr),e(gn,Vve),e(Vve,Pwr),e(gn,Bwr),e(jr,Iwr),e(jr,re),e(re,J5),e(J5,Xve),e(Xve,qwr),e(J5,Nwr),e(J5,yU),e(yU,jwr),e(J5,Dwr),e(re,Gwr),e(re,Y5),e(Y5,zve),e(zve,Owr),e(Y5,Vwr),e(Y5,LU),e(LU,Xwr),e(Y5,zwr),e(re,Qwr),e(re,K5),e(K5,Qve),e(Qve,Wwr),e(K5,Hwr),e(K5,xU),e(xU,Uwr),e(K5,Jwr),e(re,Ywr),e(re,Z5),e(Z5,Wve),e(Wve,Kwr),e(Z5,Zwr),e(Z5,$U),e($U,eAr),e(Z5,oAr),e(re,rAr),e(re,eC),e(eC,Hve),e(Hve,tAr),e(eC,aAr),e(eC,kU),e(kU,nAr),e(eC,sAr),e(re,lAr),e(re,oC),e(oC,Uve),e(Uve,iAr),e(oC,dAr),e(oC,SU),e(SU,cAr),e(oC,fAr),e(re,mAr),e(re,rC),e(rC,Jve),e(Jve,gAr),e(rC,hAr),e(rC,RU),e(RU,pAr),e(rC,uAr),e(re,_Ar),e(re,tC),e(tC,Yve),e(Yve,bAr),e(tC,vAr),e(tC,PU),e(PU,FAr),e(tC,TAr),e(re,MAr),e(re,aC),e(aC,Kve),e(Kve,EAr),e(aC,CAr),e(aC,BU),e(BU,wAr),e(aC,AAr),e(re,yAr),e(re,nC),e(nC,Zve),e(Zve,LAr),e(nC,xAr),e(nC,IU),e(IU,$Ar),e(nC,kAr),e(re,SAr),e(re,sC),e(sC,eFe),e(eFe,RAr),e(sC,PAr),e(sC,qU),e(qU,BAr),e(sC,IAr),e(re,qAr),e(re,lC),e(lC,oFe),e(oFe,NAr),e(lC,jAr),e(lC,NU),e(NU,DAr),e(lC,GAr),e(re,OAr),e(re,iC),e(iC,rFe),e(rFe,VAr),e(iC,XAr),e(iC,jU),e(jU,zAr),e(iC,QAr),e(re,WAr),e(re,dC),e(dC,tFe),e(tFe,HAr),e(dC,UAr),e(dC,DU),e(DU,JAr),e(dC,YAr),e(re,KAr),e(re,cC),e(cC,aFe),e(aFe,ZAr),e(cC,e0r),e(cC,GU),e(GU,o0r),e(cC,r0r),e(re,t0r),e(re,fC),e(fC,nFe),e(nFe,a0r),e(fC,n0r),e(fC,OU),e(OU,s0r),e(fC,l0r),e(re,i0r),e(re,mC),e(mC,sFe),e(sFe,d0r),e(mC,c0r),e(mC,VU),e(VU,f0r),e(mC,m0r),e(re,g0r),e(re,gC),e(gC,lFe),e(lFe,h0r),e(gC,p0r),e(gC,XU),e(XU,u0r),e(gC,_0r),e(re,b0r),e(re,hC),e(hC,iFe),e(iFe,v0r),e(hC,F0r),e(hC,zU),e(zU,T0r),e(hC,M0r),e(re,E0r),e(re,pC),e(pC,dFe),e(dFe,C0r),e(pC,w0r),e(pC,QU),e(QU,A0r),e(pC,y0r),e(re,L0r),e(re,uC),e(uC,cFe),e(cFe,x0r),e(uC,$0r),e(uC,WU),e(WU,k0r),e(uC,S0r),e(re,R0r),e(re,_C),e(_C,fFe),e(fFe,P0r),e(_C,B0r),e(_C,HU),e(HU,I0r),e(_C,q0r),e(re,N0r),e(re,bC),e(bC,mFe),e(mFe,j0r),e(bC,D0r),e(bC,UU),e(UU,G0r),e(bC,O0r),e(re,V0r),e(re,vC),e(vC,gFe),e(gFe,X0r),e(vC,z0r),e(vC,JU),e(JU,Q0r),e(vC,W0r),e(re,H0r),e(re,FC),e(FC,hFe),e(hFe,U0r),e(FC,J0r),e(FC,YU),e(YU,Y0r),e(FC,K0r),e(jr,Z0r),M(TC,jr,null),b(f,uqe,_),b(f,xc,_),e(xc,MC),e(MC,pFe),M(K8,pFe,null),e(xc,e6r),e(xc,uFe),e(uFe,o6r),b(f,_qe,_),b(f,mr,_),M(Z8,mr,null),e(mr,r6r),e(mr,$c),e($c,t6r),e($c,KU),e(KU,a6r),e($c,n6r),e($c,ZU),e(ZU,s6r),e($c,l6r),e(mr,i6r),e(mr,ex),e(ex,d6r),e(ex,_Fe),e(_Fe,c6r),e(ex,f6r),e(mr,m6r),e(mr,Dt),M(ox,Dt,null),e(Dt,g6r),e(Dt,bFe),e(bFe,h6r),e(Dt,p6r),e(Dt,kc),e(kc,u6r),e(kc,vFe),e(vFe,_6r),e(kc,b6r),e(kc,eJ),e(eJ,v6r),e(kc,F6r),e(Dt,T6r),M(EC,Dt,null),e(mr,M6r),e(mr,Dr),M(rx,Dr,null),e(Dr,E6r),e(Dr,FFe),e(FFe,C6r),e(Dr,w6r),e(Dr,hn),e(hn,A6r),e(hn,TFe),e(TFe,y6r),e(hn,L6r),e(hn,MFe),e(MFe,x6r),e(hn,$6r),e(hn,EFe),e(EFe,k6r),e(hn,S6r),e(Dr,R6r),e(Dr,ke),e(ke,CC),e(CC,CFe),e(CFe,P6r),e(CC,B6r),e(CC,oJ),e(oJ,I6r),e(CC,q6r),e(ke,N6r),e(ke,wC),e(wC,wFe),e(wFe,j6r),e(wC,D6r),e(wC,rJ),e(rJ,G6r),e(wC,O6r),e(ke,V6r),e(ke,AC),e(AC,AFe),e(AFe,X6r),e(AC,z6r),e(AC,tJ),e(tJ,Q6r),e(AC,W6r),e(ke,H6r),e(ke,yC),e(yC,yFe),e(yFe,U6r),e(yC,J6r),e(yC,aJ),e(aJ,Y6r),e(yC,K6r),e(ke,Z6r),e(ke,LC),e(LC,LFe),e(LFe,eyr),e(LC,oyr),e(LC,nJ),e(nJ,ryr),e(LC,tyr),e(ke,ayr),e(ke,xC),e(xC,xFe),e(xFe,nyr),e(xC,syr),e(xC,sJ),e(sJ,lyr),e(xC,iyr),e(ke,dyr),e(ke,$C),e($C,$Fe),e($Fe,cyr),e($C,fyr),e($C,lJ),e(lJ,myr),e($C,gyr),e(ke,hyr),e(ke,kC),e(kC,kFe),e(kFe,pyr),e(kC,uyr),e(kC,iJ),e(iJ,_yr),e(kC,byr),e(ke,vyr),e(ke,SC),e(SC,SFe),e(SFe,Fyr),e(SC,Tyr),e(SC,dJ),e(dJ,Myr),e(SC,Eyr),e(Dr,Cyr),M(RC,Dr,null),b(f,bqe,_),b(f,Sc,_),e(Sc,PC),e(PC,RFe),M(tx,RFe,null),e(Sc,wyr),e(Sc,PFe),e(PFe,Ayr),b(f,vqe,_),b(f,gr,_),M(ax,gr,null),e(gr,yyr),e(gr,Rc),e(Rc,Lyr),e(Rc,cJ),e(cJ,xyr),e(Rc,$yr),e(Rc,fJ),e(fJ,kyr),e(Rc,Syr),e(gr,Ryr),e(gr,nx),e(nx,Pyr),e(nx,BFe),e(BFe,Byr),e(nx,Iyr),e(gr,qyr),e(gr,Gt),M(sx,Gt,null),e(Gt,Nyr),e(Gt,IFe),e(IFe,jyr),e(Gt,Dyr),e(Gt,Pc),e(Pc,Gyr),e(Pc,qFe),e(qFe,Oyr),e(Pc,Vyr),e(Pc,mJ),e(mJ,Xyr),e(Pc,zyr),e(Gt,Qyr),M(BC,Gt,null),e(gr,Wyr),e(gr,Gr),M(lx,Gr,null),e(Gr,Hyr),e(Gr,NFe),e(NFe,Uyr),e(Gr,Jyr),e(Gr,pn),e(pn,Yyr),e(pn,jFe),e(jFe,Kyr),e(pn,Zyr),e(pn,DFe),e(DFe,eLr),e(pn,oLr),e(pn,GFe),e(GFe,rLr),e(pn,tLr),e(Gr,aLr),e(Gr,Me),e(Me,IC),e(IC,OFe),e(OFe,nLr),e(IC,sLr),e(IC,gJ),e(gJ,lLr),e(IC,iLr),e(Me,dLr),e(Me,qC),e(qC,VFe),e(VFe,cLr),e(qC,fLr),e(qC,hJ),e(hJ,mLr),e(qC,gLr),e(Me,hLr),e(Me,NC),e(NC,XFe),e(XFe,pLr),e(NC,uLr),e(NC,pJ),e(pJ,_Lr),e(NC,bLr),e(Me,vLr),e(Me,jC),e(jC,zFe),e(zFe,FLr),e(jC,TLr),e(jC,uJ),e(uJ,MLr),e(jC,ELr),e(Me,CLr),e(Me,DC),e(DC,QFe),e(QFe,wLr),e(DC,ALr),e(DC,_J),e(_J,yLr),e(DC,LLr),e(Me,xLr),e(Me,GC),e(GC,WFe),e(WFe,$Lr),e(GC,kLr),e(GC,bJ),e(bJ,SLr),e(GC,RLr),e(Me,PLr),e(Me,OC),e(OC,HFe),e(HFe,BLr),e(OC,ILr),e(OC,vJ),e(vJ,qLr),e(OC,NLr),e(Me,jLr),e(Me,VC),e(VC,UFe),e(UFe,DLr),e(VC,GLr),e(VC,FJ),e(FJ,OLr),e(VC,VLr),e(Me,XLr),e(Me,XC),e(XC,JFe),e(JFe,zLr),e(XC,QLr),e(XC,TJ),e(TJ,WLr),e(XC,HLr),e(Me,ULr),e(Me,zC),e(zC,YFe),e(YFe,JLr),e(zC,YLr),e(zC,MJ),e(MJ,KLr),e(zC,ZLr),e(Me,e8r),e(Me,QC),e(QC,KFe),e(KFe,o8r),e(QC,r8r),e(QC,EJ),e(EJ,t8r),e(QC,a8r),e(Me,n8r),e(Me,WC),e(WC,ZFe),e(ZFe,s8r),e(WC,l8r),e(WC,CJ),e(CJ,i8r),e(WC,d8r),e(Gr,c8r),M(HC,Gr,null),b(f,Fqe,_),b(f,Bc,_),e(Bc,UC),e(UC,eTe),M(ix,eTe,null),e(Bc,f8r),e(Bc,oTe),e(oTe,m8r),b(f,Tqe,_),b(f,hr,_),M(dx,hr,null),e(hr,g8r),e(hr,Ic),e(Ic,h8r),e(Ic,wJ),e(wJ,p8r),e(Ic,u8r),e(Ic,AJ),e(AJ,_8r),e(Ic,b8r),e(hr,v8r),e(hr,cx),e(cx,F8r),e(cx,rTe),e(rTe,T8r),e(cx,M8r),e(hr,E8r),e(hr,Ot),M(fx,Ot,null),e(Ot,C8r),e(Ot,tTe),e(tTe,w8r),e(Ot,A8r),e(Ot,qc),e(qc,y8r),e(qc,aTe),e(aTe,L8r),e(qc,x8r),e(qc,yJ),e(yJ,$8r),e(qc,k8r),e(Ot,S8r),M(JC,Ot,null),e(hr,R8r),e(hr,Or),M(mx,Or,null),e(Or,P8r),e(Or,nTe),e(nTe,B8r),e(Or,I8r),e(Or,un),e(un,q8r),e(un,sTe),e(sTe,N8r),e(un,j8r),e(un,lTe),e(lTe,D8r),e(un,G8r),e(un,iTe),e(iTe,O8r),e(un,V8r),e(Or,X8r),e(Or,Le),e(Le,YC),e(YC,dTe),e(dTe,z8r),e(YC,Q8r),e(YC,LJ),e(LJ,W8r),e(YC,H8r),e(Le,U8r),e(Le,KC),e(KC,cTe),e(cTe,J8r),e(KC,Y8r),e(KC,xJ),e(xJ,K8r),e(KC,Z8r),e(Le,exr),e(Le,ZC),e(ZC,fTe),e(fTe,oxr),e(ZC,rxr),e(ZC,$J),e($J,txr),e(ZC,axr),e(Le,nxr),e(Le,e3),e(e3,mTe),e(mTe,sxr),e(e3,lxr),e(e3,kJ),e(kJ,ixr),e(e3,dxr),e(Le,cxr),e(Le,o3),e(o3,gTe),e(gTe,fxr),e(o3,mxr),e(o3,SJ),e(SJ,gxr),e(o3,hxr),e(Le,pxr),e(Le,r3),e(r3,hTe),e(hTe,uxr),e(r3,_xr),e(r3,RJ),e(RJ,bxr),e(r3,vxr),e(Le,Fxr),e(Le,t3),e(t3,pTe),e(pTe,Txr),e(t3,Mxr),e(t3,PJ),e(PJ,Exr),e(t3,Cxr),e(Le,wxr),e(Le,a3),e(a3,uTe),e(uTe,Axr),e(a3,yxr),e(a3,BJ),e(BJ,Lxr),e(a3,xxr),e(Le,$xr),e(Le,n3),e(n3,_Te),e(_Te,kxr),e(n3,Sxr),e(n3,IJ),e(IJ,Rxr),e(n3,Pxr),e(Le,Bxr),e(Le,s3),e(s3,bTe),e(bTe,Ixr),e(s3,qxr),e(s3,qJ),e(qJ,Nxr),e(s3,jxr),e(Or,Dxr),M(l3,Or,null),b(f,Mqe,_),b(f,Nc,_),e(Nc,i3),e(i3,vTe),M(gx,vTe,null),e(Nc,Gxr),e(Nc,FTe),e(FTe,Oxr),b(f,Eqe,_),b(f,pr,_),M(hx,pr,null),e(pr,Vxr),e(pr,jc),e(jc,Xxr),e(jc,NJ),e(NJ,zxr),e(jc,Qxr),e(jc,jJ),e(jJ,Wxr),e(jc,Hxr),e(pr,Uxr),e(pr,px),e(px,Jxr),e(px,TTe),e(TTe,Yxr),e(px,Kxr),e(pr,Zxr),e(pr,Vt),M(ux,Vt,null),e(Vt,e9r),e(Vt,MTe),e(MTe,o9r),e(Vt,r9r),e(Vt,Dc),e(Dc,t9r),e(Dc,ETe),e(ETe,a9r),e(Dc,n9r),e(Dc,DJ),e(DJ,s9r),e(Dc,l9r),e(Vt,i9r),M(d3,Vt,null),e(pr,d9r),e(pr,Vr),M(_x,Vr,null),e(Vr,c9r),e(Vr,CTe),e(CTe,f9r),e(Vr,m9r),e(Vr,_n),e(_n,g9r),e(_n,wTe),e(wTe,h9r),e(_n,p9r),e(_n,ATe),e(ATe,u9r),e(_n,_9r),e(_n,yTe),e(yTe,b9r),e(_n,v9r),e(Vr,F9r),e(Vr,Se),e(Se,c3),e(c3,LTe),e(LTe,T9r),e(c3,M9r),e(c3,GJ),e(GJ,E9r),e(c3,C9r),e(Se,w9r),e(Se,f3),e(f3,xTe),e(xTe,A9r),e(f3,y9r),e(f3,OJ),e(OJ,L9r),e(f3,x9r),e(Se,$9r),e(Se,m3),e(m3,$Te),e($Te,k9r),e(m3,S9r),e(m3,VJ),e(VJ,R9r),e(m3,P9r),e(Se,B9r),e(Se,g3),e(g3,kTe),e(kTe,I9r),e(g3,q9r),e(g3,XJ),e(XJ,N9r),e(g3,j9r),e(Se,D9r),e(Se,h3),e(h3,STe),e(STe,G9r),e(h3,O9r),e(h3,zJ),e(zJ,V9r),e(h3,X9r),e(Se,z9r),e(Se,p3),e(p3,RTe),e(RTe,Q9r),e(p3,W9r),e(p3,QJ),e(QJ,H9r),e(p3,U9r),e(Se,J9r),e(Se,u3),e(u3,PTe),e(PTe,Y9r),e(u3,K9r),e(u3,WJ),e(WJ,Z9r),e(u3,e$r),e(Se,o$r),e(Se,_3),e(_3,BTe),e(BTe,r$r),e(_3,t$r),e(_3,HJ),e(HJ,a$r),e(_3,n$r),e(Se,s$r),e(Se,b3),e(b3,ITe),e(ITe,l$r),e(b3,i$r),e(b3,UJ),e(UJ,d$r),e(b3,c$r),e(Vr,f$r),M(v3,Vr,null),b(f,Cqe,_),b(f,Gc,_),e(Gc,F3),e(F3,qTe),M(bx,qTe,null),e(Gc,m$r),e(Gc,NTe),e(NTe,g$r),b(f,wqe,_),b(f,ur,_),M(vx,ur,null),e(ur,h$r),e(ur,Oc),e(Oc,p$r),e(Oc,JJ),e(JJ,u$r),e(Oc,_$r),e(Oc,YJ),e(YJ,b$r),e(Oc,v$r),e(ur,F$r),e(ur,Fx),e(Fx,T$r),e(Fx,jTe),e(jTe,M$r),e(Fx,E$r),e(ur,C$r),e(ur,Xt),M(Tx,Xt,null),e(Xt,w$r),e(Xt,DTe),e(DTe,A$r),e(Xt,y$r),e(Xt,Vc),e(Vc,L$r),e(Vc,GTe),e(GTe,x$r),e(Vc,$$r),e(Vc,KJ),e(KJ,k$r),e(Vc,S$r),e(Xt,R$r),M(T3,Xt,null),e(ur,P$r),e(ur,Xr),M(Mx,Xr,null),e(Xr,B$r),e(Xr,OTe),e(OTe,I$r),e(Xr,q$r),e(Xr,bn),e(bn,N$r),e(bn,VTe),e(VTe,j$r),e(bn,D$r),e(bn,XTe),e(XTe,G$r),e(bn,O$r),e(bn,zTe),e(zTe,V$r),e(bn,X$r),e(Xr,z$r),e(Xr,xe),e(xe,M3),e(M3,QTe),e(QTe,Q$r),e(M3,W$r),e(M3,ZJ),e(ZJ,H$r),e(M3,U$r),e(xe,J$r),e(xe,E3),e(E3,WTe),e(WTe,Y$r),e(E3,K$r),e(E3,eY),e(eY,Z$r),e(E3,ekr),e(xe,okr),e(xe,C3),e(C3,HTe),e(HTe,rkr),e(C3,tkr),e(C3,oY),e(oY,akr),e(C3,nkr),e(xe,skr),e(xe,w3),e(w3,UTe),e(UTe,lkr),e(w3,ikr),e(w3,rY),e(rY,dkr),e(w3,ckr),e(xe,fkr),e(xe,A3),e(A3,JTe),e(JTe,mkr),e(A3,gkr),e(A3,tY),e(tY,hkr),e(A3,pkr),e(xe,ukr),e(xe,y3),e(y3,YTe),e(YTe,_kr),e(y3,bkr),e(y3,aY),e(aY,vkr),e(y3,Fkr),e(xe,Tkr),e(xe,L3),e(L3,KTe),e(KTe,Mkr),e(L3,Ekr),e(L3,nY),e(nY,Ckr),e(L3,wkr),e(xe,Akr),e(xe,x3),e(x3,ZTe),e(ZTe,ykr),e(x3,Lkr),e(x3,sY),e(sY,xkr),e(x3,$kr),e(xe,kkr),e(xe,$3),e($3,eMe),e(eMe,Skr),e($3,Rkr),e($3,lY),e(lY,Pkr),e($3,Bkr),e(xe,Ikr),e(xe,k3),e(k3,oMe),e(oMe,qkr),e(k3,Nkr),e(k3,iY),e(iY,jkr),e(k3,Dkr),e(Xr,Gkr),M(S3,Xr,null),b(f,Aqe,_),b(f,Xc,_),e(Xc,R3),e(R3,rMe),M(Ex,rMe,null),e(Xc,Okr),e(Xc,tMe),e(tMe,Vkr),b(f,yqe,_),b(f,_r,_),M(Cx,_r,null),e(_r,Xkr),e(_r,zc),e(zc,zkr),e(zc,dY),e(dY,Qkr),e(zc,Wkr),e(zc,cY),e(cY,Hkr),e(zc,Ukr),e(_r,Jkr),e(_r,wx),e(wx,Ykr),e(wx,aMe),e(aMe,Kkr),e(wx,Zkr),e(_r,eSr),e(_r,zt),M(Ax,zt,null),e(zt,oSr),e(zt,nMe),e(nMe,rSr),e(zt,tSr),e(zt,Qc),e(Qc,aSr),e(Qc,sMe),e(sMe,nSr),e(Qc,sSr),e(Qc,fY),e(fY,lSr),e(Qc,iSr),e(zt,dSr),M(P3,zt,null),e(_r,cSr),e(_r,zr),M(yx,zr,null),e(zr,fSr),e(zr,lMe),e(lMe,mSr),e(zr,gSr),e(zr,vn),e(vn,hSr),e(vn,iMe),e(iMe,pSr),e(vn,uSr),e(vn,dMe),e(dMe,_Sr),e(vn,bSr),e(vn,cMe),e(cMe,vSr),e(vn,FSr),e(zr,TSr),e(zr,$e),e($e,B3),e(B3,fMe),e(fMe,MSr),e(B3,ESr),e(B3,mY),e(mY,CSr),e(B3,wSr),e($e,ASr),e($e,I3),e(I3,mMe),e(mMe,ySr),e(I3,LSr),e(I3,gY),e(gY,xSr),e(I3,$Sr),e($e,kSr),e($e,q3),e(q3,gMe),e(gMe,SSr),e(q3,RSr),e(q3,hY),e(hY,PSr),e(q3,BSr),e($e,ISr),e($e,N3),e(N3,hMe),e(hMe,qSr),e(N3,NSr),e(N3,pY),e(pY,jSr),e(N3,DSr),e($e,GSr),e($e,j3),e(j3,pMe),e(pMe,OSr),e(j3,VSr),e(j3,uY),e(uY,XSr),e(j3,zSr),e($e,QSr),e($e,D3),e(D3,uMe),e(uMe,WSr),e(D3,HSr),e(D3,_Y),e(_Y,USr),e(D3,JSr),e($e,YSr),e($e,G3),e(G3,_Me),e(_Me,KSr),e(G3,ZSr),e(G3,bY),e(bY,eRr),e(G3,oRr),e($e,rRr),e($e,O3),e(O3,bMe),e(bMe,tRr),e(O3,aRr),e(O3,vY),e(vY,nRr),e(O3,sRr),e($e,lRr),e($e,V3),e(V3,vMe),e(vMe,iRr),e(V3,dRr),e(V3,FY),e(FY,cRr),e(V3,fRr),e($e,mRr),e($e,X3),e(X3,FMe),e(FMe,gRr),e(X3,hRr),e(X3,TY),e(TY,pRr),e(X3,uRr),e(zr,_Rr),M(z3,zr,null),b(f,Lqe,_),b(f,Wc,_),e(Wc,Q3),e(Q3,TMe),M(Lx,TMe,null),e(Wc,bRr),e(Wc,MMe),e(MMe,vRr),b(f,xqe,_),b(f,br,_),M(xx,br,null),e(br,FRr),e(br,Hc),e(Hc,TRr),e(Hc,MY),e(MY,MRr),e(Hc,ERr),e(Hc,EY),e(EY,CRr),e(Hc,wRr),e(br,ARr),e(br,$x),e($x,yRr),e($x,EMe),e(EMe,LRr),e($x,xRr),e(br,$Rr),e(br,Qt),M(kx,Qt,null),e(Qt,kRr),e(Qt,CMe),e(CMe,SRr),e(Qt,RRr),e(Qt,Uc),e(Uc,PRr),e(Uc,wMe),e(wMe,BRr),e(Uc,IRr),e(Uc,CY),e(CY,qRr),e(Uc,NRr),e(Qt,jRr),M(W3,Qt,null),e(br,DRr),e(br,Qr),M(Sx,Qr,null),e(Qr,GRr),e(Qr,AMe),e(AMe,ORr),e(Qr,VRr),e(Qr,Fn),e(Fn,XRr),e(Fn,yMe),e(yMe,zRr),e(Fn,QRr),e(Fn,LMe),e(LMe,WRr),e(Fn,HRr),e(Fn,xMe),e(xMe,URr),e(Fn,JRr),e(Qr,YRr),e(Qr,De),e(De,H3),e(H3,$Me),e($Me,KRr),e(H3,ZRr),e(H3,wY),e(wY,ePr),e(H3,oPr),e(De,rPr),e(De,U3),e(U3,kMe),e(kMe,tPr),e(U3,aPr),e(U3,AY),e(AY,nPr),e(U3,sPr),e(De,lPr),e(De,J3),e(J3,SMe),e(SMe,iPr),e(J3,dPr),e(J3,yY),e(yY,cPr),e(J3,fPr),e(De,mPr),e(De,Y3),e(Y3,RMe),e(RMe,gPr),e(Y3,hPr),e(Y3,LY),e(LY,pPr),e(Y3,uPr),e(De,_Pr),e(De,K3),e(K3,PMe),e(PMe,bPr),e(K3,vPr),e(K3,xY),e(xY,FPr),e(K3,TPr),e(De,MPr),e(De,Z3),e(Z3,BMe),e(BMe,EPr),e(Z3,CPr),e(Z3,$Y),e($Y,wPr),e(Z3,APr),e(De,yPr),e(De,ew),e(ew,IMe),e(IMe,LPr),e(ew,xPr),e(ew,kY),e(kY,$Pr),e(ew,kPr),e(De,SPr),e(De,ow),e(ow,qMe),e(qMe,RPr),e(ow,PPr),e(ow,SY),e(SY,BPr),e(ow,IPr),e(Qr,qPr),M(rw,Qr,null),b(f,$qe,_),b(f,Jc,_),e(Jc,tw),e(tw,NMe),M(Rx,NMe,null),e(Jc,NPr),e(Jc,jMe),e(jMe,jPr),b(f,kqe,_),b(f,vr,_),M(Px,vr,null),e(vr,DPr),e(vr,Yc),e(Yc,GPr),e(Yc,RY),e(RY,OPr),e(Yc,VPr),e(Yc,PY),e(PY,XPr),e(Yc,zPr),e(vr,QPr),e(vr,Bx),e(Bx,WPr),e(Bx,DMe),e(DMe,HPr),e(Bx,UPr),e(vr,JPr),e(vr,Wt),M(Ix,Wt,null),e(Wt,YPr),e(Wt,GMe),e(GMe,KPr),e(Wt,ZPr),e(Wt,Kc),e(Kc,eBr),e(Kc,OMe),e(OMe,oBr),e(Kc,rBr),e(Kc,BY),e(BY,tBr),e(Kc,aBr),e(Wt,nBr),M(aw,Wt,null),e(vr,sBr),e(vr,Wr),M(qx,Wr,null),e(Wr,lBr),e(Wr,VMe),e(VMe,iBr),e(Wr,dBr),e(Wr,Tn),e(Tn,cBr),e(Tn,XMe),e(XMe,fBr),e(Tn,mBr),e(Tn,zMe),e(zMe,gBr),e(Tn,hBr),e(Tn,QMe),e(QMe,pBr),e(Tn,uBr),e(Wr,_Br),e(Wr,Ge),e(Ge,nw),e(nw,WMe),e(WMe,bBr),e(nw,vBr),e(nw,IY),e(IY,FBr),e(nw,TBr),e(Ge,MBr),e(Ge,sw),e(sw,HMe),e(HMe,EBr),e(sw,CBr),e(sw,qY),e(qY,wBr),e(sw,ABr),e(Ge,yBr),e(Ge,lw),e(lw,UMe),e(UMe,LBr),e(lw,xBr),e(lw,NY),e(NY,$Br),e(lw,kBr),e(Ge,SBr),e(Ge,iw),e(iw,JMe),e(JMe,RBr),e(iw,PBr),e(iw,jY),e(jY,BBr),e(iw,IBr),e(Ge,qBr),e(Ge,dw),e(dw,YMe),e(YMe,NBr),e(dw,jBr),e(dw,DY),e(DY,DBr),e(dw,GBr),e(Ge,OBr),e(Ge,cw),e(cw,KMe),e(KMe,VBr),e(cw,XBr),e(cw,GY),e(GY,zBr),e(cw,QBr),e(Ge,WBr),e(Ge,fw),e(fw,ZMe),e(ZMe,HBr),e(fw,UBr),e(fw,OY),e(OY,JBr),e(fw,YBr),e(Ge,KBr),e(Ge,mw),e(mw,eEe),e(eEe,ZBr),e(mw,eIr),e(mw,VY),e(VY,oIr),e(mw,rIr),e(Wr,tIr),M(gw,Wr,null),b(f,Sqe,_),b(f,Zc,_),e(Zc,hw),e(hw,oEe),M(Nx,oEe,null),e(Zc,aIr),e(Zc,rEe),e(rEe,nIr),b(f,Rqe,_),b(f,Fr,_),M(jx,Fr,null),e(Fr,sIr),e(Fr,ef),e(ef,lIr),e(ef,XY),e(XY,iIr),e(ef,dIr),e(ef,zY),e(zY,cIr),e(ef,fIr),e(Fr,mIr),e(Fr,Dx),e(Dx,gIr),e(Dx,tEe),e(tEe,hIr),e(Dx,pIr),e(Fr,uIr),e(Fr,Ht),M(Gx,Ht,null),e(Ht,_Ir),e(Ht,aEe),e(aEe,bIr),e(Ht,vIr),e(Ht,of),e(of,FIr),e(of,nEe),e(nEe,TIr),e(of,MIr),e(of,QY),e(QY,EIr),e(of,CIr),e(Ht,wIr),M(pw,Ht,null),e(Fr,AIr),e(Fr,Hr),M(Ox,Hr,null),e(Hr,yIr),e(Hr,sEe),e(sEe,LIr),e(Hr,xIr),e(Hr,Mn),e(Mn,$Ir),e(Mn,lEe),e(lEe,kIr),e(Mn,SIr),e(Mn,iEe),e(iEe,RIr),e(Mn,PIr),e(Mn,dEe),e(dEe,BIr),e(Mn,IIr),e(Hr,qIr),e(Hr,cEe),e(cEe,uw),e(uw,fEe),e(fEe,NIr),e(uw,jIr),e(uw,WY),e(WY,DIr),e(uw,GIr),e(Hr,OIr),M(_w,Hr,null),b(f,Pqe,_),b(f,rf,_),e(rf,bw),e(bw,mEe),M(Vx,mEe,null),e(rf,VIr),e(rf,gEe),e(gEe,XIr),b(f,Bqe,_),b(f,Tr,_),M(Xx,Tr,null),e(Tr,zIr),e(Tr,tf),e(tf,QIr),e(tf,HY),e(HY,WIr),e(tf,HIr),e(tf,UY),e(UY,UIr),e(tf,JIr),e(Tr,YIr),e(Tr,zx),e(zx,KIr),e(zx,hEe),e(hEe,ZIr),e(zx,eqr),e(Tr,oqr),e(Tr,Ut),M(Qx,Ut,null),e(Ut,rqr),e(Ut,pEe),e(pEe,tqr),e(Ut,aqr),e(Ut,af),e(af,nqr),e(af,uEe),e(uEe,sqr),e(af,lqr),e(af,JY),e(JY,iqr),e(af,dqr),e(Ut,cqr),M(vw,Ut,null),e(Tr,fqr),e(Tr,Ur),M(Wx,Ur,null),e(Ur,mqr),e(Ur,_Ee),e(_Ee,gqr),e(Ur,hqr),e(Ur,En),e(En,pqr),e(En,bEe),e(bEe,uqr),e(En,_qr),e(En,vEe),e(vEe,bqr),e(En,vqr),e(En,FEe),e(FEe,Fqr),e(En,Tqr),e(Ur,Mqr),e(Ur,Hx),e(Hx,Fw),e(Fw,TEe),e(TEe,Eqr),e(Fw,Cqr),e(Fw,YY),e(YY,wqr),e(Fw,Aqr),e(Hx,yqr),e(Hx,Tw),e(Tw,MEe),e(MEe,Lqr),e(Tw,xqr),e(Tw,KY),e(KY,$qr),e(Tw,kqr),e(Ur,Sqr),M(Mw,Ur,null),b(f,Iqe,_),b(f,nf,_),e(nf,Ew),e(Ew,EEe),M(Ux,EEe,null),e(nf,Rqr),e(nf,CEe),e(CEe,Pqr),b(f,qqe,_),b(f,Mr,_),M(Jx,Mr,null),e(Mr,Bqr),e(Mr,sf),e(sf,Iqr),e(sf,ZY),e(ZY,qqr),e(sf,Nqr),e(sf,eK),e(eK,jqr),e(sf,Dqr),e(Mr,Gqr),e(Mr,Yx),e(Yx,Oqr),e(Yx,wEe),e(wEe,Vqr),e(Yx,Xqr),e(Mr,zqr),e(Mr,Jt),M(Kx,Jt,null),e(Jt,Qqr),e(Jt,AEe),e(AEe,Wqr),e(Jt,Hqr),e(Jt,lf),e(lf,Uqr),e(lf,yEe),e(yEe,Jqr),e(lf,Yqr),e(lf,oK),e(oK,Kqr),e(lf,Zqr),e(Jt,eNr),M(Cw,Jt,null),e(Mr,oNr),e(Mr,Jr),M(Zx,Jr,null),e(Jr,rNr),e(Jr,LEe),e(LEe,tNr),e(Jr,aNr),e(Jr,Cn),e(Cn,nNr),e(Cn,xEe),e(xEe,sNr),e(Cn,lNr),e(Cn,$Ee),e($Ee,iNr),e(Cn,dNr),e(Cn,kEe),e(kEe,cNr),e(Cn,fNr),e(Jr,mNr),e(Jr,SEe),e(SEe,ww),e(ww,REe),e(REe,gNr),e(ww,hNr),e(ww,rK),e(rK,pNr),e(ww,uNr),e(Jr,_Nr),M(Aw,Jr,null),Nqe=!0},p(f,[_]){const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),_f.$set(e9);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),pg.$set(PEe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),Hg.$set(BEe);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),Mh.$set(IEe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),Eh.$set(o9);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),Gh.$set(qEe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Oh.$set(wn);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),zh.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),Bu.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),qu.$set(DEe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),A_.$set(r9);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),L_.$set(GEe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),m2.$set(t9);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),h2.$set(OEe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),Y2.$set(a9);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),Z2.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),_1.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),v1.$set(zEe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),g7.$set(df);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),p7.$set(QEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),Q7.$set(WEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),H7.$set(HEe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),ob.$set(n9);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),tb.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),Nb.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),Db.$set(YEe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),y4.$set(Kr);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),x4.$set(s9);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),S4.$set(KEe);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),P4.$set(l9);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),W4.$set(ZEe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),U4.$set(Zr);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),K4.$set(e5e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),ev.$set(cf);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),cv.$set(o5e);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),mv.$set(r5e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),bv.$set(L);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),Fv.$set(yw);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),$v.$set(t5e);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),Sv.$set(a5e);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),Iv.$set(Lw);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),Nv.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),Xv.$set(s5e);const xw={};_&2&&(xw.$$scope={dirty:_,ctx:f}),Qv.$set(xw);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),Yv.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),Zv.$set(i5e);const $w={};_&2&&($w.$$scope={dirty:_,ctx:f}),tF.$set($w);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),nF.$set(d5e);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),iF.$set(c5e);const kw={};_&2&&(kw.$$scope={dirty:_,ctx:f}),cF.$set(kw);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),uF.$set(f5e);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),bF.$set(m5e);const Sw={};_&2&&(Sw.$$scope={dirty:_,ctx:f}),TF.$set(Sw);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),EF.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),hT.$set(h5e);const Rw={};_&2&&(Rw.$$scope={dirty:_,ctx:f}),uT.$set(Rw);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),DT.$set(p5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),OT.$set(u5e);const Pw={};_&2&&(Pw.$$scope={dirty:_,ctx:f}),oM.$set(Pw);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),tM.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),lM.$set(b5e);const Bw={};_&2&&(Bw.$$scope={dirty:_,ctx:f}),dM.$set(Bw);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),$M.$set(v5e);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),SM.$set(F5e);const Iw={};_&2&&(Iw.$$scope={dirty:_,ctx:f}),VM.$set(Iw);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),zM.$set(T5e);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),bE.$set(M5e);const qw={};_&2&&(qw.$$scope={dirty:_,ctx:f}),FE.$set(qw);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),NE.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),DE.$set(C5e);const Nw={};_&2&&(Nw.$$scope={dirty:_,ctx:f}),VE.$set(Nw);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),zE.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),WE.$set(A5e);const jw={};_&2&&(jw.$$scope={dirty:_,ctx:f}),UE.$set(jw);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),u5.$set(y5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),b5.$set(L5e);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),j5.$set(Dw);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),G5.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),V5.$set($5e);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),z5.$set(Gw);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),W5.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),U5.$set(S5e);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),TC.$set(Ow);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),EC.$set(R5e);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),RC.$set(P5e);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),BC.$set(Vw);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:f}),HC.$set(B5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:f}),JC.$set(I5e);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),l3.$set(Xw);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:f}),d3.$set(q5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:f}),v3.$set(N5e);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),T3.$set(zw);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:f}),S3.$set(j5e);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:f}),P3.$set(D5e);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),z3.$set(Qw);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:f}),W3.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:f}),rw.$set(O5e);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),aw.$set(Ww);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:f}),gw.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:f}),pw.$set(X5e);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),_w.$set(Hw);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:f}),vw.$set(z5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:f}),Mw.$set(Q5e);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),Cw.$set(Uw);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:f}),Aw.$set(W5e)},i(f){Nqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(U0.$$.fragment,f),E(J0.$$.fragment,f),E(_f.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(o6.$$.fragment,f),E(pg.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(a6.$$.fragment,f),E(l6.$$.fragment,f),E(Hg.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(g6.$$.fragment,f),E(Mh.$$.fragment,f),E(Eh.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(u6.$$.fragment,f),E(v6.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(C6.$$.fragment,f),E(zh.$$.fragment,f),E(w6.$$.fragment,f),E(Bu.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E(x6.$$.fragment,f),E(qu.$$.fragment,f),E($6.$$.fragment,f),E(A_.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(P6.$$.fragment,f),E(L_.$$.fragment,f),E(B6.$$.fragment,f),E(m2.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(h2.$$.fragment,f),E(D6.$$.fragment,f),E(Y2.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(X6.$$.fragment,f),E(Z2.$$.fragment,f),E(z6.$$.fragment,f),E(_1.$$.fragment,f),E(Q6.$$.fragment,f),E(W6.$$.fragment,f),E(U6.$$.fragment,f),E(v1.$$.fragment,f),E(J6.$$.fragment,f),E(g7.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(ey.$$.fragment,f),E(p7.$$.fragment,f),E(oy.$$.fragment,f),E(Q7.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(H7.$$.fragment,f),E(sy.$$.fragment,f),E(ob.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(tb.$$.fragment,f),E(fy.$$.fragment,f),E(Nb.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Db.$$.fragment,f),E(uy.$$.fragment,f),E(y4.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(x4.$$.fragment,f),E(Ty.$$.fragment,f),E(S4.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(P4.$$.fragment,f),E(Ay.$$.fragment,f),E(W4.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(U4.$$.fragment,f),E(ky.$$.fragment,f),E(K4.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(ev.$$.fragment,f),E(Iy.$$.fragment,f),E(cv.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(mv.$$.fragment,f),E(Gy.$$.fragment,f),E(bv.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(Fv.$$.fragment,f),E(Qy.$$.fragment,f),E($v.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(Sv.$$.fragment,f),E(Yy.$$.fragment,f),E(Iv.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(Nv.$$.fragment,f),E(tL.$$.fragment,f),E(Xv.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Qv.$$.fragment,f),E(iL.$$.fragment,f),E(Yv.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(Zv.$$.fragment,f),E(gL.$$.fragment,f),E(tF.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(nF.$$.fragment,f),E(vL.$$.fragment,f),E(iF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(cF.$$.fragment,f),E(CL.$$.fragment,f),E(uF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(bF.$$.fragment,f),E(xL.$$.fragment,f),E(TF.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(EF.$$.fragment,f),E(PL.$$.fragment,f),E(hT.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(uT.$$.fragment,f),E(jL.$$.fragment,f),E(DT.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(OT.$$.fragment,f),E(XL.$$.fragment,f),E(oM.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(tM.$$.fragment,f),E(UL.$$.fragment,f),E(lM.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(dM.$$.fragment,f),E(e8.$$.fragment,f),E($M.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(SM.$$.fragment,f),E(n8.$$.fragment,f),E(VM.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(zM.$$.fragment,f),E(c8.$$.fragment,f),E(bE.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(FE.$$.fragment,f),E(p8.$$.fragment,f),E(NE.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(DE.$$.fragment,f),E(F8.$$.fragment,f),E(VE.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(zE.$$.fragment,f),E(A8.$$.fragment,f),E(WE.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(UE.$$.fragment,f),E(k8.$$.fragment,f),E(u5.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(b5.$$.fragment,f),E(I8.$$.fragment,f),E(j5.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(G5.$$.fragment,f),E(G8.$$.fragment,f),E(V5.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(z5.$$.fragment,f),E(Q8.$$.fragment,f),E(W5.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(U5.$$.fragment,f),E(Y8.$$.fragment,f),E(TC.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(EC.$$.fragment,f),E(rx.$$.fragment,f),E(RC.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(BC.$$.fragment,f),E(lx.$$.fragment,f),E(HC.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(JC.$$.fragment,f),E(mx.$$.fragment,f),E(l3.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(d3.$$.fragment,f),E(_x.$$.fragment,f),E(v3.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(T3.$$.fragment,f),E(Mx.$$.fragment,f),E(S3.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(P3.$$.fragment,f),E(yx.$$.fragment,f),E(z3.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(W3.$$.fragment,f),E(Sx.$$.fragment,f),E(rw.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(aw.$$.fragment,f),E(qx.$$.fragment,f),E(gw.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(pw.$$.fragment,f),E(Ox.$$.fragment,f),E(_w.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(vw.$$.fragment,f),E(Wx.$$.fragment,f),E(Mw.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(Cw.$$.fragment,f),E(Zx.$$.fragment,f),E(Aw.$$.fragment,f),Nqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(U0.$$.fragment,f),C(J0.$$.fragment,f),C(_f.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(o6.$$.fragment,f),C(pg.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(a6.$$.fragment,f),C(l6.$$.fragment,f),C(Hg.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(g6.$$.fragment,f),C(Mh.$$.fragment,f),C(Eh.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(u6.$$.fragment,f),C(v6.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(C6.$$.fragment,f),C(zh.$$.fragment,f),C(w6.$$.fragment,f),C(Bu.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C(x6.$$.fragment,f),C(qu.$$.fragment,f),C($6.$$.fragment,f),C(A_.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(P6.$$.fragment,f),C(L_.$$.fragment,f),C(B6.$$.fragment,f),C(m2.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(h2.$$.fragment,f),C(D6.$$.fragment,f),C(Y2.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(X6.$$.fragment,f),C(Z2.$$.fragment,f),C(z6.$$.fragment,f),C(_1.$$.fragment,f),C(Q6.$$.fragment,f),C(W6.$$.fragment,f),C(U6.$$.fragment,f),C(v1.$$.fragment,f),C(J6.$$.fragment,f),C(g7.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(ey.$$.fragment,f),C(p7.$$.fragment,f),C(oy.$$.fragment,f),C(Q7.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(H7.$$.fragment,f),C(sy.$$.fragment,f),C(ob.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(tb.$$.fragment,f),C(fy.$$.fragment,f),C(Nb.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Db.$$.fragment,f),C(uy.$$.fragment,f),C(y4.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(x4.$$.fragment,f),C(Ty.$$.fragment,f),C(S4.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(P4.$$.fragment,f),C(Ay.$$.fragment,f),C(W4.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(U4.$$.fragment,f),C(ky.$$.fragment,f),C(K4.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(ev.$$.fragment,f),C(Iy.$$.fragment,f),C(cv.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(mv.$$.fragment,f),C(Gy.$$.fragment,f),C(bv.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(Fv.$$.fragment,f),C(Qy.$$.fragment,f),C($v.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(Sv.$$.fragment,f),C(Yy.$$.fragment,f),C(Iv.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(Nv.$$.fragment,f),C(tL.$$.fragment,f),C(Xv.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Qv.$$.fragment,f),C(iL.$$.fragment,f),C(Yv.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(Zv.$$.fragment,f),C(gL.$$.fragment,f),C(tF.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(nF.$$.fragment,f),C(vL.$$.fragment,f),C(iF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(cF.$$.fragment,f),C(CL.$$.fragment,f),C(uF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(bF.$$.fragment,f),C(xL.$$.fragment,f),C(TF.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(EF.$$.fragment,f),C(PL.$$.fragment,f),C(hT.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(uT.$$.fragment,f),C(jL.$$.fragment,f),C(DT.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(OT.$$.fragment,f),C(XL.$$.fragment,f),C(oM.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(tM.$$.fragment,f),C(UL.$$.fragment,f),C(lM.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(dM.$$.fragment,f),C(e8.$$.fragment,f),C($M.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(SM.$$.fragment,f),C(n8.$$.fragment,f),C(VM.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(zM.$$.fragment,f),C(c8.$$.fragment,f),C(bE.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(FE.$$.fragment,f),C(p8.$$.fragment,f),C(NE.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(DE.$$.fragment,f),C(F8.$$.fragment,f),C(VE.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(zE.$$.fragment,f),C(A8.$$.fragment,f),C(WE.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(UE.$$.fragment,f),C(k8.$$.fragment,f),C(u5.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(b5.$$.fragment,f),C(I8.$$.fragment,f),C(j5.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(G5.$$.fragment,f),C(G8.$$.fragment,f),C(V5.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(z5.$$.fragment,f),C(Q8.$$.fragment,f),C(W5.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(U5.$$.fragment,f),C(Y8.$$.fragment,f),C(TC.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(EC.$$.fragment,f),C(rx.$$.fragment,f),C(RC.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(BC.$$.fragment,f),C(lx.$$.fragment,f),C(HC.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(JC.$$.fragment,f),C(mx.$$.fragment,f),C(l3.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(d3.$$.fragment,f),C(_x.$$.fragment,f),C(v3.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(T3.$$.fragment,f),C(Mx.$$.fragment,f),C(S3.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(P3.$$.fragment,f),C(yx.$$.fragment,f),C(z3.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(W3.$$.fragment,f),C(Sx.$$.fragment,f),C(rw.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(aw.$$.fragment,f),C(qx.$$.fragment,f),C(gw.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(pw.$$.fragment,f),C(Ox.$$.fragment,f),C(_w.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(vw.$$.fragment,f),C(Wx.$$.fragment,f),C(Mw.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(Cw.$$.fragment,f),C(Zx.$$.fragment,f),C(Aw.$$.fragment,f),Nqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(BBe),f&&t(hi),w(U0),f&&t(IBe),f&&t($n),f&&t(qBe),w(J0,f),f&&t(NBe),f&&t(_$),f&&t(jBe),w(_f,f),f&&t(DBe),f&&t(pi),w(Y0),f&&t(GBe),f&&t(Co),w(K0),w(o6),w(pg),w(r6),f&&t(OBe),f&&t(_i),w(t6),f&&t(VBe),f&&t(wo),w(a6),w(l6),w(Hg),w(i6),f&&t(XBe),f&&t(bi),w(d6),f&&t(zBe),f&&t(Ao),w(c6),w(g6),w(Mh),w(Eh),w(h6),f&&t(QBe),f&&t(vi),w(p6),f&&t(WBe),f&&t(yo),w(u6),w(v6),w(Gh),w(Oh),w(F6),f&&t(HBe),f&&t(Ti),w(T6),f&&t(UBe),f&&t(Lo),w(M6),w(C6),w(zh),w(w6),w(Bu),f&&t(JBe),f&&t(Ci),w(A6),f&&t(YBe),f&&t(xo),w(y6),w(x6),w(qu),w($6),w(A_),f&&t(KBe),f&&t(yi),w(k6),f&&t(ZBe),f&&t($o),w(S6),w(P6),w(L_),w(B6),w(m2),f&&t(eIe),f&&t($i),w(I6),f&&t(oIe),f&&t(ko),w(q6),w(j6),w(h2),w(D6),w(Y2),f&&t(rIe),f&&t(Ri),w(G6),f&&t(tIe),f&&t(So),w(O6),w(X6),w(Z2),w(z6),w(_1),f&&t(aIe),f&&t(Ii),w(Q6),f&&t(nIe),f&&t(Ro),w(W6),w(U6),w(v1),w(J6),w(g7),f&&t(sIe),f&&t(ji),w(Y6),f&&t(lIe),f&&t(Po),w(K6),w(ey),w(p7),w(oy),w(Q7),f&&t(iIe),f&&t(Oi),w(ry),f&&t(dIe),f&&t(Bo),w(ty),w(ny),w(H7),w(sy),w(ob),f&&t(cIe),f&&t(zi),w(ly),f&&t(fIe),f&&t(Io),w(iy),w(cy),w(tb),w(fy),w(Nb),f&&t(mIe),f&&t(Hi),w(my),f&&t(gIe),f&&t(qo),w(gy),w(py),w(Db),w(uy),w(y4),f&&t(hIe),f&&t(Yi),w(_y),f&&t(pIe),f&&t(No),w(by),w(Fy),w(x4),w(Ty),w(S4),f&&t(uIe),f&&t(ed),w(My),f&&t(_Ie),f&&t(jo),w(Ey),w(wy),w(P4),w(Ay),w(W4),f&&t(bIe),f&&t(td),w(yy),f&&t(vIe),f&&t(Do),w(Ly),w($y),w(U4),w(ky),w(K4),f&&t(FIe),f&&t(sd),w(Sy),f&&t(TIe),f&&t(Go),w(Ry),w(By),w(ev),w(Iy),w(cv),f&&t(MIe),f&&t(dd),w(qy),f&&t(EIe),f&&t(Oo),w(Ny),w(Dy),w(mv),w(Gy),w(bv),f&&t(CIe),f&&t(md),w(Oy),f&&t(wIe),f&&t(Vo),w(Vy),w(zy),w(Fv),w(Qy),w($v),f&&t(AIe),f&&t(pd),w(Wy),f&&t(yIe),f&&t(Xo),w(Hy),w(Jy),w(Sv),w(Yy),w(Iv),f&&t(LIe),f&&t(bd),w(Zy),f&&t(xIe),f&&t(zo),w(eL),w(rL),w(Nv),w(tL),w(Xv),f&&t($Ie),f&&t(Td),w(aL),f&&t(kIe),f&&t(Qo),w(nL),w(lL),w(Qv),w(iL),w(Yv),f&&t(SIe),f&&t(wd),w(dL),f&&t(RIe),f&&t(Wo),w(cL),w(mL),w(Zv),w(gL),w(tF),f&&t(PIe),f&&t(Ld),w(pL),f&&t(BIe),f&&t(Ho),w(uL),w(bL),w(nF),w(vL),w(iF),f&&t(IIe),f&&t(kd),w(FL),f&&t(qIe),f&&t(Uo),w(TL),w(EL),w(cF),w(CL),w(uF),f&&t(NIe),f&&t(Pd),w(wL),f&&t(jIe),f&&t(Jo),w(AL),w(LL),w(bF),w(xL),w(TF),f&&t(DIe),f&&t(qd),w($L),f&&t(GIe),f&&t(Yo),w(kL),w(RL),w(EF),w(PL),w(hT),f&&t(OIe),f&&t(Dd),w(BL),f&&t(VIe),f&&t(Ko),w(IL),w(NL),w(uT),w(jL),w(DT),f&&t(XIe),f&&t(Vd),w(DL),f&&t(zIe),f&&t(Zo),w(GL),w(VL),w(OT),w(XL),w(oM),f&&t(QIe),f&&t(Qd),w(zL),f&&t(WIe),f&&t(er),w(QL),w(HL),w(tM),w(UL),w(lM),f&&t(HIe),f&&t(Jd),w(JL),f&&t(UIe),f&&t(or),w(YL),w(ZL),w(dM),w(e8),w($M),f&&t(JIe),f&&t(Zd),w(o8),f&&t(YIe),f&&t(rr),w(r8),w(a8),w(SM),w(n8),w(VM),f&&t(KIe),f&&t(rc),w(s8),f&&t(ZIe),f&&t(tr),w(l8),w(d8),w(zM),w(c8),w(bE),f&&t(eqe),f&&t(nc),w(f8),f&&t(oqe),f&&t(ar),w(m8),w(h8),w(FE),w(p8),w(NE),f&&t(rqe),f&&t(ic),w(u8),f&&t(tqe),f&&t(nr),w(_8),w(v8),w(DE),w(F8),w(VE),f&&t(aqe),f&&t(fc),w(M8),f&&t(nqe),f&&t(sr),w(E8),w(w8),w(zE),w(A8),w(WE),f&&t(sqe),f&&t(hc),w(y8),f&&t(lqe),f&&t(lr),w(L8),w($8),w(UE),w(k8),w(u5),f&&t(iqe),f&&t(_c),w(S8),f&&t(dqe),f&&t(ir),w(R8),w(B8),w(b5),w(I8),w(j5),f&&t(cqe),f&&t(Fc),w(q8),f&&t(fqe),f&&t(dr),w(N8),w(D8),w(G5),w(G8),w(V5),f&&t(mqe),f&&t(Ec),w(O8),f&&t(gqe),f&&t(cr),w(V8),w(z8),w(z5),w(Q8),w(W5),f&&t(hqe),f&&t(Ac),w(W8),f&&t(pqe),f&&t(fr),w(H8),w(J8),w(U5),w(Y8),w(TC),f&&t(uqe),f&&t(xc),w(K8),f&&t(_qe),f&&t(mr),w(Z8),w(ox),w(EC),w(rx),w(RC),f&&t(bqe),f&&t(Sc),w(tx),f&&t(vqe),f&&t(gr),w(ax),w(sx),w(BC),w(lx),w(HC),f&&t(Fqe),f&&t(Bc),w(ix),f&&t(Tqe),f&&t(hr),w(dx),w(fx),w(JC),w(mx),w(l3),f&&t(Mqe),f&&t(Nc),w(gx),f&&t(Eqe),f&&t(pr),w(hx),w(ux),w(d3),w(_x),w(v3),f&&t(Cqe),f&&t(Gc),w(bx),f&&t(wqe),f&&t(ur),w(vx),w(Tx),w(T3),w(Mx),w(S3),f&&t(Aqe),f&&t(Xc),w(Ex),f&&t(yqe),f&&t(_r),w(Cx),w(Ax),w(P3),w(yx),w(z3),f&&t(Lqe),f&&t(Wc),w(Lx),f&&t(xqe),f&&t(br),w(xx),w(kx),w(W3),w(Sx),w(rw),f&&t($qe),f&&t(Jc),w(Rx),f&&t(kqe),f&&t(vr),w(Px),w(Ix),w(aw),w(qx),w(gw),f&&t(Sqe),f&&t(Zc),w(Nx),f&&t(Rqe),f&&t(Fr),w(jx),w(Gx),w(pw),w(Ox),w(_w),f&&t(Pqe),f&&t(rf),w(Vx),f&&t(Bqe),f&&t(Tr),w(Xx),w(Qx),w(vw),w(Wx),w(Mw),f&&t(Iqe),f&&t(nf),w(Ux),f&&t(qqe),f&&t(Mr),w(Jx),w(Kx),w(Cw),w(Zx),w(Aw)}}}const Oyt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Vyt(A){return V0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jyt extends j0t{constructor(g){super();D0t(this,g,Vyt,Gyt,G0t,{})}}export{Jyt as default,Oyt as metadata};
