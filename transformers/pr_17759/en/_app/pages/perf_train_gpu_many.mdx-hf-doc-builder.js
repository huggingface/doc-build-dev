import{S as x6,i as M6,s as $6,e as a,k as h,w as u,t as o,M as N6,c as s,d as t,m as f,a as i,x as m,h as r,b as c,N as ie,G as l,g as p,y as v,q as P,o as w,B as y,v as z6}from"../chunks/vendor-hf-doc-builder.js";import{T as R6}from"../chunks/Tip-hf-doc-builder.js";import{I as O}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Ap}from"../chunks/CodeBlock-hf-doc-builder.js";function C6(xp){let b,Oe,E,j,oe;return{c(){b=a("p"),Oe=o("Note: Most of the strategies introduced in the "),E=a("a"),j=o("single GPU section"),oe=o(" (such as mixed precision training or gradient accumulation) are generic and apply to training models in general so make sure to have a look at it before diving into the following sections such as multi-GPU or CPU training."),this.h()},l(S){b=s(S,"P",{});var C=i(b);Oe=r(C,"Note: Most of the strategies introduced in the "),E=s(C,"A",{href:!0});var je=i(E);j=r(je,"single GPU section"),je.forEach(t),oe=r(C," (such as mixed precision training or gradient accumulation) are generic and apply to training models in general so make sure to have a look at it before diving into the following sections such as multi-GPU or CPU training."),C.forEach(t),this.h()},h(){c(E,"href","perf_train_gpu_one")},m(S,C){p(S,b,C),l(b,Oe),l(b,E),l(E,j),l(b,oe)},d(S){S&&t(b)}}}function Z6(xp){let b,Oe,E,j,oe,S,C,je,au,Mp,va,su,$p,Ae,Np,Pa,iu,zp,re,xe,mo,gt,ou,vo,ru,Rp,wa,nu,Cp,L,ya,Po,pu,hu,fu,ba,wo,cu,du,uu,_a,yo,mu,vu,Pu,ga,bo,wu,yu,bu,Ea,_o,_u,gu,Zp,Da,Eu,Bp,ne,Me,go,Et,Du,Eo,Lu,qp,La,Do,Tu,Fp,Z,Dt,Lo,Gu,ku,Lt,To,Uu,Iu,Go,Su,Ou,Tt,ko,ju,Au,pe,Uo,Io,xu,Mu,So,Oo,$u,Nu,he,jo,zu,Ru,Ao,Cu,Zu,xo,Bu,qu,Gt,Mo,Fu,Vu,kt,$o,Wu,Hu,No,Yu,Vp,Ta,zo,Xu,Wp,$e,Ut,Ro,Ku,Ju,It,Co,Qu,em,Zo,tm,lm,St,Bo,am,sm,qo,Fo,im,Hp,fe,Ne,Vo,Ot,om,Wo,rm,Yp,A,nm,Ho,pm,hm,Yo,fm,cm,jt,dm,um,Xp,ce,ze,Xo,At,mm,Ko,vm,Kp,de,Jo,Pm,wm,Qo,ym,bm,Jp,Re,er,_m,gm,tr,Em,Qp,Ga,Dm,eh,xt,Mt,Lm,Tm,th,Ce,lr,Gm,km,ka,Um,$t,ar,Im,Sm,Nt,Om,sr,jm,Am,lh,zt,Rt,xm,Mm,ah,Ua,$m,sh,T,ir,Nm,zm,or,Rm,Cm,Ct,Zm,rr,Bm,qm,Fm,Ia,Vm,nr,Wm,Hm,pr,Ym,ih,Sa,Xm,oh,Ze,Km,Zt,Jm,Qm,rh,Oa,ev,nh,ja,tv,ph,Aa,lv,hh,Be,av,Bt,sv,iv,fh,xa,ov,ch,qe,hr,ue,Ma,rv,nv,fr,pv,hv,$a,fv,cv,me,ve,Na,dv,uv,cr,mv,vv,za,Pv,wv,Pe,Ra,yv,bv,dr,_v,gv,Ca,Ev,Dv,we,Za,Lv,Tv,ur,Gv,kv,Ba,Uv,dh,qa,Iv,uh,Fa,Sv,mh,Va,Ov,vh,Wa,jv,Ph,qt,mr,Av,xv,wh,Ft,yh,D,Mv,vr,$v,Nv,Pr,zv,Rv,wr,Cv,Zv,yr,Bv,qv,br,Fv,bh,ye,Fe,_r,Vt,Vv,gr,Wv,_h,be,Hv,Wt,Yv,Xv,Ha,eg,gh,Ve,Kv,Er,Jv,Qv,Eh,Ya,eP,Dh,Ht,Lh,Xa,tP,Th,Ka,lP,Gh,Yt,kh,Ja,aP,Uh,Qa,sP,Ih,Xt,Sh,es,iP,Oh,ts,oP,jh,ls,rP,Ah,as,nP,xh,ss,pP,Mh,is,hP,$h,os,fP,Nh,rs,cP,zh,ns,dP,Rh,B,Dr,uP,mP,Lr,vP,PP,Tr,wP,Ch,ps,yP,Zh,hs,bP,Bh,fs,_P,qh,cs,gP,Fh,ds,EP,Vh,q,us,Kt,DP,LP,TP,ms,Jt,GP,kP,UP,Gr,Qt,kr,IP,SP,Wh,_e,We,Ur,el,OP,Ir,jP,Hh,He,AP,Sr,xP,MP,Yh,vs,$P,Xh,tl,Kh,Ps,NP,Jh,ws,zP,Qh,ys,RP,ef,bs,CP,tf,Ye,Or,ZP,BP,jr,qP,lf,_s,FP,af,Xe,VP,ll,WP,HP,sf,gs,Es,tg,of,Ds,YP,rf,Ls,XP,nf,F,KP,Ar,JP,QP,xr,e1,t1,pf,Ke,l1,Mr,a1,s1,hf,Je,i1,$r,o1,r1,ff,V,n1,Nr,p1,h1,zr,f1,c1,cf,Ts,d1,df,W,u1,Rr,m1,v1,Cr,P1,w1,uf,x,y1,Zr,b1,_1,Br,g1,E1,qr,D1,L1,mf,Gs,T1,vf,ks,G1,Pf,M,Fr,k1,U1,Vr,I1,S1,Wr,O1,j1,Hr,A1,wf,Us,x1,yf,Qe,Yr,M1,$1,Xr,N1,bf,Is,z1,_f,$,al,R1,Kr,C1,Z1,B1,Ss,q1,sl,F1,V1,Jr,W1,H1,Qr,Y1,gf,Os,X1,Ef,js,K1,Df,_,il,ol,J1,Q1,rl,ew,tw,en,nl,lw,aw,tn,pl,sw,iw,As,hl,ow,rw,nw,ln,fl,pw,hw,xs,cl,fw,cw,dw,Ms,dl,uw,mw,Lf,et,vw,an,Pw,ww,Tf,$s,yw,Gf,ge,bw,ul,_w,gw,Ns,lg,kf,zs,Ew,Uf,Rs,Dw,If,tt,Lw,sn,Tw,Gw,Sf,Ee,lt,on,ml,kw,rn,Uw,Of,Cs,Iw,jf,H,Sw,vl,Ow,jw,Pl,Aw,xw,Af,Y,Mw,nn,$w,Nw,pn,zw,Rw,xf,G,Cw,hn,Zw,Bw,fn,qw,Fw,cn,Vw,Ww,dn,Hw,Yw,Mf,wl,Xw,Zs,ag,$f,d,Kw,un,Jw,Qw,mn,e2,t2,vn,l2,a2,Pn,s2,i2,wn,o2,r2,yn,n2,p2,bn,h2,f2,Bs,sg,Nf,yl,c2,qs,ig,zf,bl,d2,Fs,og,Rf,Vs,u2,Cf,X,m2,_l,v2,P2,gl,w2,y2,Zf,Ws,b2,Bf,Hs,_2,qf,Ys,Xs,g2,El,E2,Ff,Ks,D2,Vf,N,Js,Dl,L2,T2,G2,Qs,Ll,k2,U2,I2,ei,Tl,S2,O2,j2,ti,Gl,A2,x2,Wf,li,M2,Hf,K,_n,$2,N2,kl,z2,Ul,R2,C2,Z2,ai,B2,Il,q2,Yf,De,at,gn,Sl,F2,En,V2,Xf,st,W2,Ol,H2,Y2,Kf,si,ii,rg,Jf,oi,X2,Qf,ri,K2,ec,ni,J2,tc,k,Dn,jl,Q2,ey,Ln,Al,ty,ly,Tn,xl,ay,sy,Gn,Ml,iy,oy,kn,$l,ry,lc,pi,ny,ac,Le,it,Un,Nl,py,In,hy,sc,hi,fy,ic,fi,ci,ng,oc,ot,cy,zl,dy,uy,rc,di,my,nc,ui,vy,pc,U,mi,Rl,Py,wy,yy,Sn,Cl,by,_y,On,Zl,gy,Ey,jn,Bl,Dy,Ly,An,ql,Ty,hc,vi,Gy,fc,Te,rt,xn,Fl,ky,Mn,Uy,cc,nt,Iy,Pi,Sy,Oy,dc,wi,jy,uc,yi,Ay,mc,pt,xy,$n,My,$y,vc,bi,Ny,Pc,_i,zy,wc,gi,Ry,yc,ht,ft,Vl,Cy,Zy,Wl,By,qy,Fy,Nn,Hl,Vy,bc,Ei,Wy,_c,Di,zn,Yl,Hy,gc,Li,Yy,Ec,Ge,ct,Rn,Xl,Xy,Cn,Ky,Dc,Kl,Jl,Jy,Qy,Lc,Ql,eb,ea,tb,Tc,Ti,lb,Gc,z,Zn,ab,sb,Bn,ib,ob,qn,rb,nb,Fn,pb,kc,Gi,hb,Uc,ki,Vn,fb,Ic,Ui,cb,Sc,Ii,Wn,db,Oc,Si,ub,jc,Oi,Hn,mb,Ac,ji,vb,xc,Ai,Yn,Pb,Mc,xi,wb,$c,Mi,$i,pg,Nc,Ni,yb,zc,zi,bb,Rc,Ri,_b,Cc,dt,gb,ta,Eb,Db,Zc,ke,ut,Xn,la,Lb,Kn,Tb,Bc,Ci,Gb,qc,Zi,Jn,kb,Fc,J,aa,Qn,Ub,Ib,ep,tp,Sb,Ob,sa,lp,jb,Ab,ia,ap,xb,Mb,sp,$b,Nb,ip,op,zb,Vc,Bi,Ue,Rb,oa,Cb,Zb,rp,Bb,qb,Wc,qi,np,Fb,Hc,Q,ra,pp,Vb,Wb,na,hp,Hb,Yb,fp,Xb,Kb,pa,cp,Jb,Qb,Ie,dp,up,e_,t_,mp,vp,l_,a_,Se,Pp,s_,i_,wp,o_,r_,yp,n_,p_,ha,bp,h_,f_,fa,_p,c_,d_,gp,u_,Yc,Fi,Ep,m_,Xc,mt,ca,Dp,v_,P_,da,Lp,w_,y_,Tp,b_,__,ua,Gp,g_,E_,kp,Up,D_,Kc;return S=new O({}),Ae=new R6({props:{$$slots:{default:[C6]},$$scope:{ctx:xp}}}),gt=new O({}),Et=new O({}),Ot=new O({}),At=new O({}),Ft=new Ap({props:{code:`




`,highlighted:`
<span class="hljs-comment"># DP</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">110</span>.<span class="hljs-string">5948</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">808</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/ NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">101</span>.<span class="hljs-string">9003</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">963</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/o NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">NCCL_P2P_DISABLE</span>=<span class="hljs-string">1</span> <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">131</span>.<span class="hljs-string">4367</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">522</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}`}}),Vt=new O({}),Ht=new Ap({props:{code:`La | Lb | Lc
---|----|---
a0 | b0 | c0
a1 | b1 | c1
a2 | b2 | c2`,highlighted:`La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),Yt=new Ap({props:{code:`
`,highlighted:`GPU0:
La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0

GPU1:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1

GPU2:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),Xt=new Ap({props:{code:`x0 => GPU0
x1 => GPU1
x2 => GPU2`,highlighted:`<span class="hljs-attribute">x0</span> <span class="hljs-operator">=</span>&gt; GPU0
<span class="hljs-attribute">x1</span> <span class="hljs-operator">=</span>&gt; GPU1
<span class="hljs-attribute">x2</span> <span class="hljs-operator">=</span>&gt; GPU2`}}),el=new O({}),tl=new Ap({props:{code:`===================  ===================
|  0 | 1 | 2 | 3  |  |  4 | 5 | 6 | 7  |
===================  ===================
        gpu0                 gpu1`,highlighted:`===================  ===================
|<span class="hljs-string">  0 </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string"> 2 </span>|<span class="hljs-string"> 3  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> 5 </span>|<span class="hljs-string"> 6 </span>|<span class="hljs-string"> 7  </span>|
===================  ===================
        gpu0                 gpu1`}}),ml=new O({}),Sl=new O({}),Nl=new O({}),Fl=new O({}),Xl=new O({}),la=new O({}),{c(){b=a("meta"),Oe=h(),E=a("h1"),j=a("a"),oe=a("span"),u(S.$$.fragment),C=h(),je=a("span"),au=o("Efficient Training on Multiple GPUs"),Mp=h(),va=a("p"),su=o("When training on a single GPU is too slow or the model weights don\u2019t fit in a single GPUs memory we use a mutli-GPU setup. Switching from a single GPU to multiple requires some form of parallelism as the work needs to be distributed. There are several techniques to achieve parallism such as data, tensor, or pipeline parallism. However, there is no one solution to fit them all and which settings works best depends on the hardware you are running on. While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),$p=h(),u(Ae.$$.fragment),Np=h(),Pa=a("p"),iu=o("We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),zp=h(),re=a("h2"),xe=a("a"),mo=a("span"),u(gt.$$.fragment),ou=h(),vo=a("span"),ru=o("Concepts"),Rp=h(),wa=a("p"),nu=o("The following is the brief description of the main concepts that will be described later in depth in this document."),Cp=h(),L=a("ol"),ya=a("li"),Po=a("strong"),pu=o("DataParallel (DP)"),hu=o(" - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),fu=h(),ba=a("li"),wo=a("strong"),cu=o("TensorParallel (TP)"),du=o(" - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),uu=h(),_a=a("li"),yo=a("strong"),mu=o("PipelineParallel (PP)"),vu=o(" - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),Pu=h(),ga=a("li"),bo=a("strong"),wu=o("Zero Redundancy Optimizer (ZeRO)"),yu=o(" - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),bu=h(),Ea=a("li"),_o=a("strong"),_u=o("Sharded DDP"),gu=o(" - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),Zp=h(),Da=a("p"),Eu=o("Before diving deeper into the specifics of each concept we first have a look at the rough decision process when training large models on a large infrastructure."),Bp=h(),ne=a("h2"),Me=a("a"),go=a("span"),u(Et.$$.fragment),Du=h(),Eo=a("span"),Lu=o("Scalability Strategy"),qp=h(),La=a("p"),Do=a("strong"),Tu=o("\u21E8 Single Node / Multi-GPU"),Fp=h(),Z=a("ul"),Dt=a("li"),Lo=a("p"),Gu=o("Model fits onto a single GPU:"),ku=h(),Lt=a("ol"),To=a("li"),Uu=o("DDP - Distributed DP"),Iu=h(),Go=a("li"),Su=o("ZeRO - may or may not be faster depending on the situation and configuration used"),Ou=h(),Tt=a("li"),ko=a("p"),ju=o("Model doesn\u2019t fit onto a single GPU:"),Au=h(),pe=a("ol"),Uo=a("li"),Io=a("p"),xu=o("PP"),Mu=h(),So=a("li"),Oo=a("p"),$u=o("ZeRO"),Nu=h(),he=a("li"),jo=a("p"),zu=o("TP"),Ru=h(),Ao=a("p"),Cu=o("With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),Zu=h(),xo=a("p"),Bu=o("TP is almost always used within a single node. That is TP size <= gpus per node."),qu=h(),Gt=a("li"),Mo=a("p"),Fu=o("Largest Layer not fitting into a single GPU:"),Vu=h(),kt=a("ol"),$o=a("li"),Wu=o("If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),Hu=h(),No=a("li"),Yu=o("With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Vp=h(),Ta=a("p"),zo=a("strong"),Xu=o("\u21E8 Multi-Node / Multi-GPU"),Wp=h(),$e=a("ul"),Ut=a("li"),Ro=a("p"),Ku=o("When you have fast inter-node connectivity:"),Ju=h(),It=a("ol"),Co=a("li"),Qu=o("ZeRO - as it requires close to no modifications to the model"),em=h(),Zo=a("li"),tm=o("PP+TP+DP - less communications, but requires massive changes to the model"),lm=h(),St=a("li"),Bo=a("p"),am=o("when you have slow inter-node connectivity and still low on GPU memory:"),sm=h(),qo=a("ol"),Fo=a("li"),im=o("DP+PP+TP+ZeRO-1"),Hp=h(),fe=a("h2"),Ne=a("a"),Vo=a("span"),u(Ot.$$.fragment),om=h(),Wo=a("span"),rm=o("Data Parallelism"),Yp=h(),A=a("p"),nm=o("Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),Ho=a("code"),pm=o("DataParallel"),hm=o(" (DP) and "),Yo=a("code"),fm=o("DistributedDataParallel"),cm=o(" (DDP) that are almost trivial to use. This is a built-in feature of Pytorch. Note that in general it is advised to use DDP as it is better maintained and works for all models while DP might fail for some models. "),jt=a("a"),dm=o("PyTorch documentation"),um=o(" itself recommends the use of DDP."),Xp=h(),ce=a("h3"),ze=a("a"),Xo=a("span"),u(At.$$.fragment),mm=h(),Ko=a("span"),vm=o("DP vs DDP"),Kp=h(),de=a("p"),Jo=a("code"),Pm=o("DistributedDataParallel"),wm=o(" (DDP) is typically faster than "),Qo=a("code"),ym=o("DataParallel"),bm=o(" (DP), but it is not always the case:"),Jp=h(),Re=a("ul"),er=a("li"),_m=o("while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),gm=h(),tr=a("li"),Em=o("on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),Qp=h(),Ga=a("p"),Dm=o("Here are the main differences in the inter-GPU communication overhead between the two modes:"),eh=h(),xt=a("p"),Mt=a("a"),Lm=o("DDP"),Tm=o(":"),th=h(),Ce=a("ul"),lr=a("li"),Gm=o("At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),km=h(),ka=a("li"),Um=o("Then for each batch:"),$t=a("ol"),ar=a("li"),Im=o("each gpu consumes each own mini-batch of data directly"),Sm=h(),Nt=a("li"),Om=o("during "),sr=a("code"),jm=o("backward"),Am=o(", once the local gradients are ready, they are then averaged across all processes"),lh=h(),zt=a("p"),Rt=a("a"),xm=o("DP"),Mm=o(":"),ah=h(),Ua=a("p"),$m=o("For each batch:"),sh=h(),T=a("ol"),ir=a("li"),Nm=o("gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),zm=h(),or=a("li"),Rm=o("replicates the up-to-date model from gpu 0 to each gpu"),Cm=h(),Ct=a("li"),Zm=o("runs "),rr=a("code"),Bm=o("forward"),qm=o(" and sends output from each gpu to gpu 0, computes loss"),Fm=h(),Ia=a("li"),Vm=o("scatters loss from gpu 0 to all gpus, runs "),nr=a("code"),Wm=o("backward"),Hm=h(),pr=a("li"),Ym=o("sends gradients from each gpu to gpu 0 and averages those"),ih=h(),Sa=a("p"),Xm=o("The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),oh=h(),Ze=a("p"),Km=o("DP copies data within the process via python threads, whereas DDP copies data via "),Zt=a("a"),Jm=o("torch.distributed"),Qm=o("."),rh=h(),Oa=a("p"),ev=o("Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),nh=h(),ja=a("p"),tv=o("You can use DDP across multiple machines, but this is not the case with DP."),ph=h(),Aa=a("p"),lv=o("There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),hh=h(),Be=a("p"),av=o("If you want to go really deep into understanding these 2 modes, this "),Bt=a("a"),sv=o("article"),iv=o(" is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),fh=h(),xa=a("p"),ov=o("Let\u2019s look at an actual benchmark:"),ch=h(),qe=a("table"),hr=a("thead"),ue=a("tr"),Ma=a("th"),rv=o("Type"),nv=h(),fr=a("th"),pv=o("NVlink"),hv=h(),$a=a("th"),fv=o("Time"),cv=h(),me=a("tbody"),ve=a("tr"),Na=a("td"),dv=o("2:DP"),uv=h(),cr=a("td"),mv=o("Y"),vv=h(),za=a("td"),Pv=o("110s"),wv=h(),Pe=a("tr"),Ra=a("td"),yv=o("2:DDP"),bv=h(),dr=a("td"),_v=o("Y"),gv=h(),Ca=a("td"),Ev=o("101s"),Dv=h(),we=a("tr"),Za=a("td"),Lv=o("2:DDP"),Tv=h(),ur=a("td"),Gv=o("N"),kv=h(),Ba=a("td"),Uv=o("131s"),dh=h(),qa=a("p"),Iv=o("Analysis:"),uh=h(),Fa=a("p"),Sv=o("Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),mh=h(),Va=a("p"),Ov=o("The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),vh=h(),Wa=a("p"),jv=o("Here is the full benchmark code and outputs:"),Ph=h(),qt=a("p"),mr=a("code"),Av=o("NCCL_P2P_DISABLE=1"),xv=o(" was used to disable the NVLink feature on the corresponding benchmark."),wh=h(),u(Ft.$$.fragment),yh=h(),D=a("p"),Mv=o("Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),vr=a("code"),$v=o("NV2"),Nv=o(" in "),Pr=a("code"),zv=o("nvidia-smi topo -m"),Rv=o(`)
Software: `),wr=a("code"),Cv=o("pytorch-1.8-to-be"),Zv=o(" + "),yr=a("code"),Bv=o("cuda-11.0"),qv=o(" / "),br=a("code"),Fv=o("transformers==4.3.0.dev0"),bh=h(),ye=a("h2"),Fe=a("a"),_r=a("span"),u(Vt.$$.fragment),Vv=h(),gr=a("span"),Wv=o("ZeRO Data Parallelism"),_h=h(),be=a("p"),Hv=o("ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Wt=a("a"),Yv=o("blog post"),Xv=h(),Ha=a("img"),gh=h(),Ve=a("p"),Kv=o("It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),Er=a("code"),Jv=o("DataParallel"),Qv=o(" (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),Eh=h(),Ya=a("p"),eP=o("Consider this simple model with 3 layers, where each layer has 3 params:"),Dh=h(),u(Ht.$$.fragment),Lh=h(),Xa=a("p"),tP=o("Layer La has weights a0, a1 and a2."),Th=h(),Ka=a("p"),lP=o("If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),Gh=h(),u(Yt.$$.fragment),kh=h(),Ja=a("p"),aP=o("In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),Uh=h(),Qa=a("p"),sP=o("Now each of these GPUs will get the usual mini-batch as it works in DP:"),Ih=h(),u(Xt.$$.fragment),Sh=h(),es=a("p"),iP=o("The inputs are unmodified - they think they are going to be processed by the normal model."),Oh=h(),ts=a("p"),oP=o("First, the inputs hit the layer La."),jh=h(),ls=a("p"),rP=o("Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),Ah=h(),as=a("p"),nP=o("In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),xh=h(),ss=a("p"),pP=o("Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),Mh=h(),is=a("p"),hP=o("All 3 GPUs get the full tensors reconstructed and a forward happens."),$h=h(),os=a("p"),fP=o("As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),Nh=h(),rs=a("p"),cP=o("And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),zh=h(),ns=a("p"),dP=o("To me this sounds like an efficient group backpacking weight distribution strategy:"),Rh=h(),B=a("ol"),Dr=a("li"),uP=o("person A carries the tent"),mP=h(),Lr=a("li"),vP=o("person B carries the stove"),PP=h(),Tr=a("li"),wP=o("person C carries the axe"),Ch=h(),ps=a("p"),yP=o("Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),Zh=h(),hs=a("p"),bP=o("Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),Bh=h(),fs=a("p"),_P=o("While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),qh=h(),cs=a("p"),gP=o("If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),Fh=h(),ds=a("p"),EP=o("Implementations:"),Vh=h(),q=a("ul"),us=a("li"),Kt=a("a"),DP=o("DeepSpeed"),LP=o(" ZeRO-DP stages 1+2+3"),TP=h(),ms=a("li"),Jt=a("a"),GP=o("Fairscale"),kP=o(" ZeRO-DP stages 1+2+3"),UP=h(),Gr=a("li"),Qt=a("a"),kr=a("code"),IP=o("transformers"),SP=o(" integration"),Wh=h(),_e=a("h2"),We=a("a"),Ur=a("span"),u(el.$$.fragment),OP=h(),Ir=a("span"),jP=o("Naive Model Parallelism (Vertical) and Pipeline Parallelism"),Hh=h(),He=a("p"),AP=o("Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),Sr=a("code"),xP=o(".to()"),MP=o(" the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),Yh=h(),vs=a("p"),$P=o("We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),Xh=h(),u(tl.$$.fragment),Kh=h(),Ps=a("p"),NP=o("we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),Jh=h(),ws=a("p"),zP=o("Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),Qh=h(),ys=a("p"),RP=o("Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),ef=h(),bs=a("p"),CP=o("Problems:"),tf=h(),Ye=a("ul"),Or=a("li"),ZP=o("the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),BP=h(),jr=a("li"),qP=o("shared embeddings may need to get copied back and forth between GPUs."),lf=h(),_s=a("p"),FP=o("Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),af=h(),Xe=a("p"),VP=o("The following illustration from the "),ll=a("a"),WP=o("GPipe paper"),HP=o(" shows the naive MP on the top, and PP on the bottom:"),sf=h(),gs=a("p"),Es=a("img"),of=h(),Ds=a("p"),YP=o("It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),rf=h(),Ls=a("p"),XP=o("Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),nf=h(),F=a("p"),KP=o("PP introduces a new hyper-parameter to tune and it\u2019s "),Ar=a("code"),JP=o("chunks"),QP=o(" which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),xr=a("code"),e1=o("chunks=4"),t1=o(". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),pf=h(),Ke=a("p"),l1=o("Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),Mr=a("code"),a1=o("chunks"),s1=o(", whereas DeepSpeed refers to the same hyper-parameter as GAS."),hf=h(),Je=a("p"),i1=o("Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),$r=a("code"),o1=o("chunks"),r1=o(" (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),ff=h(),V=a("p"),n1=o("To calculate the global batch size of the DP + PP setup we then do: "),Nr=a("code"),p1=o("mbs*chunks*dp_degree"),h1=o(" ("),zr=a("code"),f1=o("8*32*4=1024"),c1=o(")."),cf=h(),Ts=a("p"),d1=o("Let\u2019s go back to the diagram."),df=h(),W=a("p"),u1=o("With "),Rr=a("code"),m1=o("chunks=1"),v1=o(" you end up with the naive MP, which is very inefficient. With a very large "),Cr=a("code"),P1=o("chunks"),w1=o(" value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),uf=h(),x=a("p"),y1=o("While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),Zr=a("code"),b1=o("forward"),_1=o(" stage has to wait for "),Br=a("code"),g1=o("backward"),E1=o(" to complete the pipeline, the purpose of finding the best value for "),qr=a("code"),D1=o("chunks"),L1=o(" is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),mf=h(),Gs=a("p"),T1=o("There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),vf=h(),ks=a("p"),G1=o("Traditional Pipeline API solutions:"),Pf=h(),M=a("ul"),Fr=a("li"),k1=o("PyTorch"),U1=h(),Vr=a("li"),I1=o("FairScale"),S1=h(),Wr=a("li"),O1=o("DeepSpeed"),j1=h(),Hr=a("li"),A1=o("Megatron-LM"),wf=h(),Us=a("p"),x1=o("Modern solutions:"),yf=h(),Qe=a("ul"),Yr=a("li"),M1=o("Varuna"),$1=h(),Xr=a("li"),N1=o("Sagemaker"),bf=h(),Is=a("p"),z1=o("Problems with traditional Pipeline API solutions:"),_f=h(),$=a("ul"),al=a("li"),R1=o("have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),Kr=a("code"),C1=o("nn.Sequential"),Z1=o(" sequence of the same, which may require changes to the design of the model."),B1=h(),Ss=a("li"),q1=o("currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),sl=a("a"),F1=o("https://github.com/pytorch/pytorch/pull/50693"),V1=h(),Jr=a("li"),W1=o("conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),H1=h(),Qr=a("li"),Y1=o("have to arrange each layer so that the output of one model becomes an input to the other model."),gf=h(),Os=a("p"),X1=o("We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),Ef=h(),js=a("p"),K1=o("Implementations:"),Df=h(),_=a("ul"),il=a("li"),ol=a("a"),J1=o("Pytorch"),Q1=o(" (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),rl=a("a"),ew=o("examples"),tw=h(),en=a("li"),nl=a("a"),lw=o("FairScale"),aw=h(),tn=a("li"),pl=a("a"),sw=o("DeepSpeed"),iw=h(),As=a("li"),hl=a("a"),ow=o("Megatron-LM"),rw=o(" has an internal implementation - no API."),nw=h(),ln=a("li"),fl=a("a"),pw=o("Varuna"),hw=h(),xs=a("li"),cl=a("a"),fw=o("SageMaker"),cw=o(" - this is a proprietary solution that can only be used on AWS."),dw=h(),Ms=a("li"),dl=a("a"),uw=o("OSLO"),mw=o(" - this is implemented based on the Hugging Face Transformers."),Lf=h(),et=a("p"),vw=o("\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),an=a("code"),Pw=o("nn.Sequential"),ww=o(" and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),Tf=h(),$s=a("p"),yw=o("Other approaches:"),Gf=h(),ge=a("p"),bw=o("DeepSpeed, Varuna and SageMaker use the concept of an "),ul=a("a"),_w=o("Interleaved Pipeline"),gw=h(),Ns=a("img"),kf=h(),zs=a("p"),Ew=o("Here the bubble (idle time) is further minimized by prioritizing backward passes."),Uf=h(),Rs=a("p"),Dw=o("Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),If=h(),tt=a("p"),Lw=o("OSLO has pipeline parallelism implementation based on the Transformers without "),sn=a("code"),Tw=o("nn.Sequential"),Gw=o(" converting."),Sf=h(),Ee=a("h2"),lt=a("a"),on=a("span"),u(ml.$$.fragment),kw=h(),rn=a("span"),Uw=o("Tensor Parallelism"),Of=h(),Cs=a("p"),Iw=o("In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),jf=h(),H=a("p"),Sw=o("In this section we use concepts and diagrams from the "),vl=a("a"),Ow=o("Megatron-LM"),jw=o(" paper: "),Pl=a("a"),Aw=o("Efficient Large-Scale Language Model Training on GPU Clusters"),xw=o("."),Af=h(),Y=a("p"),Mw=o("The main building block of any transformer is a fully connected "),nn=a("code"),$w=o("nn.Linear"),Nw=o(" followed by a nonlinear activation "),pn=a("code"),zw=o("GeLU"),Rw=o("."),xf=h(),G=a("p"),Cw=o("Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),hn=a("code"),Zw=o("Y = GeLU(XA)"),Bw=o(", where "),fn=a("code"),qw=o("X"),Fw=o(" and "),cn=a("code"),Vw=o("Y"),Ww=o(" are the input and output vectors, and "),dn=a("code"),Hw=o("A"),Yw=o(" is the weight matrix."),Mf=h(),wl=a("p"),Xw=o(`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),Zs=a("img"),$f=h(),d=a("p"),Kw=o("If we split the weight matrix "),un=a("code"),Jw=o("A"),Qw=o(" column-wise across "),mn=a("code"),e2=o("N"),t2=o(" GPUs and perform matrix multiplications "),vn=a("code"),l2=o("XA_1"),a2=o(" through "),Pn=a("code"),s2=o("XA_n"),i2=o(" in parallel, then we will end up with "),wn=a("code"),o2=o("N"),r2=o(" output vectors "),yn=a("code"),n2=o("Y_1, Y_2, ..., Y_n"),p2=o(" which can be fed into "),bn=a("code"),h2=o("GeLU"),f2=o(` independently:
`),Bs=a("img"),Nf=h(),yl=a("p"),c2=o(`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),qs=a("img"),zf=h(),bl=a("p"),d2=o(`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),Fs=a("img"),Rf=h(),Vs=a("p"),u2=o("Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),Cf=h(),X=a("p"),m2=o("This section is based on the original much more "),_l=a("a"),v2=o("detailed TP overview"),P2=o(`.
by `),gl=a("a"),w2=o("@anton-l"),y2=o("."),Zf=h(),Ws=a("p"),b2=o("SageMaker combines TP with DP for a more efficient processing."),Bf=h(),Hs=a("p"),_2=o("Alternative names:"),qf=h(),Ys=a("ul"),Xs=a("li"),g2=o("DeepSpeed calls it "),El=a("a"),E2=o("tensor slicing"),Ff=h(),Ks=a("p"),D2=o("Implementations:"),Vf=h(),N=a("ul"),Js=a("li"),Dl=a("a"),L2=o("Megatron-LM"),T2=o(" has an internal implementation, as it\u2019s very model-specific"),G2=h(),Qs=a("li"),Ll=a("a"),k2=o("parallelformers"),U2=o(" (only inference at the moment)"),I2=h(),ei=a("li"),Tl=a("a"),S2=o("SageMaker"),O2=o(" - this is a proprietary solution that can only be used on AWS."),j2=h(),ti=a("li"),Gl=a("a"),A2=o("OSLO"),x2=o(" has the tensor parallelism implementation based on the Transformers."),Wf=h(),li=a("p"),M2=o("\u{1F917} Transformers status:"),Hf=h(),K=a("ul"),_n=a("li"),$2=o("core: not yet implemented in the core"),N2=h(),kl=a("li"),z2=o("but if you want inference "),Ul=a("a"),R2=o("parallelformers"),C2=o(" provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),Z2=h(),ai=a("li"),B2=o("Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),Il=a("a"),q2=o("here"),Yf=h(),De=a("h2"),at=a("a"),gn=a("span"),u(Sl.$$.fragment),F2=h(),En=a("span"),V2=o("DP+PP"),Xf=h(),st=a("p"),W2=o("The following diagram from the DeepSpeed "),Ol=a("a"),H2=o("pipeline tutorial"),Y2=o(" demonstrates how one combines DP with PP."),Kf=h(),si=a("p"),ii=a("img"),Jf=h(),oi=a("p"),X2=o("Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),Qf=h(),ri=a("p"),K2=o("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),ec=h(),ni=a("p"),J2=o("Implementations:"),tc=h(),k=a("ul"),Dn=a("li"),jl=a("a"),Q2=o("DeepSpeed"),ey=h(),Ln=a("li"),Al=a("a"),ty=o("Megatron-LM"),ly=h(),Tn=a("li"),xl=a("a"),ay=o("Varuna"),sy=h(),Gn=a("li"),Ml=a("a"),iy=o("SageMaker"),oy=h(),kn=a("li"),$l=a("a"),ry=o("OSLO"),lc=h(),pi=a("p"),ny=o("\u{1F917} Transformers status: not yet implemented"),ac=h(),Le=a("h2"),it=a("a"),Un=a("span"),u(Nl.$$.fragment),py=h(),In=a("span"),hy=o("DP+PP+TP"),sc=h(),hi=a("p"),fy=o("To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),ic=h(),fi=a("p"),ci=a("img"),oc=h(),ot=a("p"),cy=o("This diagram is from a blog post "),zl=a("a"),dy=o("3D parallelism: Scaling to trillion-parameter models"),uy=o(", which is a good read as well."),rc=h(),di=a("p"),my=o("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),nc=h(),ui=a("p"),vy=o("Implementations:"),pc=h(),U=a("ul"),mi=a("li"),Rl=a("a"),Py=o("DeepSpeed"),wy=o(" - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),yy=h(),Sn=a("li"),Cl=a("a"),by=o("Megatron-LM"),_y=h(),On=a("li"),Zl=a("a"),gy=o("Varuna"),Ey=h(),jn=a("li"),Bl=a("a"),Dy=o("SageMaker"),Ly=h(),An=a("li"),ql=a("a"),Ty=o("OSLO"),hc=h(),vi=a("p"),Gy=o("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),fc=h(),Te=a("h2"),rt=a("a"),xn=a("span"),u(Fl.$$.fragment),ky=h(),Mn=a("span"),Uy=o("ZeRO DP+PP+TP"),cc=h(),nt=a("p"),Iy=o("One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),Pi=a("a"),Sy=o("ZeRO Data Parallelism"),Oy=o(". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),dc=h(),wi=a("p"),jy=o("When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),uc=h(),yi=a("p"),Ay=o("While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),mc=h(),pt=a("p"),xy=o("In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),$n=a("code"),My=o("1/PP"),$y=o(", and so gradient sharding savings on top of that are less significant than pure DP."),vc=h(),bi=a("p"),Ny=o("ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),Pc=h(),_i=a("p"),zy=o("And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),wc=h(),gi=a("p"),Ry=o("Implementations:"),yc=h(),ht=a("ul"),ft=a("li"),Vl=a("a"),Cy=o("Megatron-DeepSpeed"),Zy=o(" and "),Wl=a("a"),By=o("Megatron-Deepspeed from BigScience"),qy=o(", which is the fork of the former repo."),Fy=h(),Nn=a("li"),Hl=a("a"),Vy=o("OSLO"),bc=h(),Ei=a("p"),Wy=o("Important papers:"),_c=h(),Di=a("ul"),zn=a("li"),Yl=a("a"),Hy=o("Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model"),gc=h(),Li=a("p"),Yy=o("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),Ec=h(),Ge=a("h2"),ct=a("a"),Rn=a("span"),u(Xl.$$.fragment),Xy=h(),Cn=a("span"),Ky=o("FlexFlow"),Dc=h(),Kl=a("p"),Jl=a("a"),Jy=o("FlexFlow"),Qy=o(" also solves the parallelization problem in a slightly different approach."),Lc=h(),Ql=a("p"),eb=o("Paper: "),ea=a("a"),tb=o("\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),Tc=h(),Ti=a("p"),lb=o("It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),Gc=h(),z=a("ol"),Zn=a("li"),ab=o("Sample = Data Parallelism (sample-wise parallel)"),sb=h(),Bn=a("li"),ib=o("Operator = Parallelize a single operation into several sub-operations"),ob=h(),qn=a("li"),rb=o("Attribute = Data Parallelism (length-wise parallel)"),nb=h(),Fn=a("li"),pb=o("Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),kc=h(),Gi=a("p"),hb=o("Examples:"),Uc=h(),ki=a("ul"),Vn=a("li"),fb=o("Sample"),Ic=h(),Ui=a("p"),cb=o("Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),Sc=h(),Ii=a("ul"),Wn=a("li"),db=o("Operator"),Oc=h(),Si=a("p"),ub=o("If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),jc=h(),Oi=a("ul"),Hn=a("li"),mb=o("Attribute"),Ac=h(),ji=a("p"),vb=o("We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),xc=h(),Ai=a("ul"),Yn=a("li"),Pb=o("Parameter"),Mc=h(),xi=a("p"),wb=o("It is similar with tensor model parallelism or naive layer-wise model parallelism."),$c=h(),Mi=a("p"),$i=a("img"),Nc=h(),Ni=a("p"),yb=o("The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),zc=h(),zi=a("p"),bb=o("One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),Rc=h(),Ri=a("p"),_b=o("So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),Cc=h(),dt=a("p"),gb=o("\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),ta=a("a"),Eb=o("transformers.utils.fx"),Db=o(", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),Zc=h(),ke=a("h2"),ut=a("a"),Xn=a("span"),u(la.$$.fragment),Lb=h(),Kn=a("span"),Tb=o("Which Strategy To Use When"),Bc=h(),Ci=a("p"),Gb=o("Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),qc=h(),Zi=a("p"),Jn=a("strong"),kb=o("\u21E8 Single GPU"),Fc=h(),J=a("ul"),aa=a("li"),Qn=a("p"),Ub=o("Model fits onto a single GPU:"),Ib=h(),ep=a("ol"),tp=a("li"),Sb=o("Normal use"),Ob=h(),sa=a("li"),lp=a("p"),jb=o("Model doesn\u2019t fit onto a single GPU:"),Ab=h(),ia=a("ol"),ap=a("li"),xb=o("ZeRO + Offload CPU and optionally NVMe"),Mb=h(),sp=a("li"),$b=o("as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),Nb=h(),ip=a("li"),op=a("p"),zb=o("Largest Layer not fitting into a single GPU:"),Vc=h(),Bi=a("ol"),Ue=a("li"),Rb=o("ZeRO - Enable "),oa=a("a"),Cb=o("Memory Centric Tiling"),Zb=o(" (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),rp=a("code"),Bb=o("torch.nn.Linear"),qb=o(" needs to be done by the user."),Wc=h(),qi=a("p"),np=a("strong"),Fb=o("\u21E8 Single Node / Multi-GPU"),Hc=h(),Q=a("ul"),ra=a("li"),pp=a("p"),Vb=o("Model fits onto a single GPU:"),Wb=h(),na=a("ol"),hp=a("li"),Hb=o("DDP - Distributed DP"),Yb=h(),fp=a("li"),Xb=o("ZeRO - may or may not be faster depending on the situation and configuration used"),Kb=h(),pa=a("li"),cp=a("p"),Jb=o("Model doesn\u2019t fit onto a single GPU:"),Qb=h(),Ie=a("ol"),dp=a("li"),up=a("p"),e_=o("PP"),t_=h(),mp=a("li"),vp=a("p"),l_=o("ZeRO"),a_=h(),Se=a("li"),Pp=a("p"),s_=o("TP"),i_=h(),wp=a("p"),o_=o("With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),r_=h(),yp=a("p"),n_=o("TP is almost always used within a single node. That is TP size <= gpus per node."),p_=h(),ha=a("li"),bp=a("p"),h_=o("Largest Layer not fitting into a single GPU:"),f_=h(),fa=a("ol"),_p=a("li"),c_=o("If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),d_=h(),gp=a("li"),u_=o("With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Yc=h(),Fi=a("p"),Ep=a("strong"),m_=o("\u21E8 Multi-Node / Multi-GPU"),Xc=h(),mt=a("ul"),ca=a("li"),Dp=a("p"),v_=o("When you have fast inter-node connectivity:"),P_=h(),da=a("ol"),Lp=a("li"),w_=o("ZeRO - as it requires close to no modifications to the model"),y_=h(),Tp=a("li"),b_=o("PP+TP+DP - less communications, but requires massive changes to the model"),__=h(),ua=a("li"),Gp=a("p"),g_=o("when you have slow inter-node connectivity and still low on GPU memory:"),E_=h(),kp=a("ol"),Up=a("li"),D_=o("DP+PP+TP+ZeRO-1"),this.h()},l(e){const n=N6('[data-svelte="svelte-1phssyn"]',document.head);b=s(n,"META",{name:!0,content:!0}),n.forEach(t),Oe=f(e),E=s(e,"H1",{class:!0});var ma=i(E);j=s(ma,"A",{id:!0,class:!0,href:!0});var hg=i(j);oe=s(hg,"SPAN",{});var fg=i(oe);m(S.$$.fragment,fg),fg.forEach(t),hg.forEach(t),C=f(ma),je=s(ma,"SPAN",{});var cg=i(je);au=r(cg,"Efficient Training on Multiple GPUs"),cg.forEach(t),ma.forEach(t),Mp=f(e),va=s(e,"P",{});var dg=i(va);su=r(dg,"When training on a single GPU is too slow or the model weights don\u2019t fit in a single GPUs memory we use a mutli-GPU setup. Switching from a single GPU to multiple requires some form of parallelism as the work needs to be distributed. There are several techniques to achieve parallism such as data, tensor, or pipeline parallism. However, there is no one solution to fit them all and which settings works best depends on the hardware you are running on. While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),dg.forEach(t),$p=f(e),m(Ae.$$.fragment,e),Np=f(e),Pa=s(e,"P",{});var ug=i(Pa);iu=r(ug,"We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),ug.forEach(t),zp=f(e),re=s(e,"H2",{class:!0});var Jc=i(re);xe=s(Jc,"A",{id:!0,class:!0,href:!0});var mg=i(xe);mo=s(mg,"SPAN",{});var vg=i(mo);m(gt.$$.fragment,vg),vg.forEach(t),mg.forEach(t),ou=f(Jc),vo=s(Jc,"SPAN",{});var Pg=i(vo);ru=r(Pg,"Concepts"),Pg.forEach(t),Jc.forEach(t),Rp=f(e),wa=s(e,"P",{});var wg=i(wa);nu=r(wg,"The following is the brief description of the main concepts that will be described later in depth in this document."),wg.forEach(t),Cp=f(e),L=s(e,"OL",{});var ee=i(L);ya=s(ee,"LI",{});var L_=i(ya);Po=s(L_,"STRONG",{});var yg=i(Po);pu=r(yg,"DataParallel (DP)"),yg.forEach(t),hu=r(L_," - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),L_.forEach(t),fu=f(ee),ba=s(ee,"LI",{});var T_=i(ba);wo=s(T_,"STRONG",{});var bg=i(wo);cu=r(bg,"TensorParallel (TP)"),bg.forEach(t),du=r(T_," - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),T_.forEach(t),uu=f(ee),_a=s(ee,"LI",{});var G_=i(_a);yo=s(G_,"STRONG",{});var _g=i(yo);mu=r(_g,"PipelineParallel (PP)"),_g.forEach(t),vu=r(G_," - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),G_.forEach(t),Pu=f(ee),ga=s(ee,"LI",{});var k_=i(ga);bo=s(k_,"STRONG",{});var gg=i(bo);wu=r(gg,"Zero Redundancy Optimizer (ZeRO)"),gg.forEach(t),yu=r(k_," - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),k_.forEach(t),bu=f(ee),Ea=s(ee,"LI",{});var U_=i(Ea);_o=s(U_,"STRONG",{});var Eg=i(_o);_u=r(Eg,"Sharded DDP"),Eg.forEach(t),gu=r(U_," - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),U_.forEach(t),ee.forEach(t),Zp=f(e),Da=s(e,"P",{});var Dg=i(Da);Eu=r(Dg,"Before diving deeper into the specifics of each concept we first have a look at the rough decision process when training large models on a large infrastructure."),Dg.forEach(t),Bp=f(e),ne=s(e,"H2",{class:!0});var Qc=i(ne);Me=s(Qc,"A",{id:!0,class:!0,href:!0});var Lg=i(Me);go=s(Lg,"SPAN",{});var Tg=i(go);m(Et.$$.fragment,Tg),Tg.forEach(t),Lg.forEach(t),Du=f(Qc),Eo=s(Qc,"SPAN",{});var Gg=i(Eo);Lu=r(Gg,"Scalability Strategy"),Gg.forEach(t),Qc.forEach(t),qp=f(e),La=s(e,"P",{});var kg=i(La);Do=s(kg,"STRONG",{});var Ug=i(Do);Tu=r(Ug,"\u21E8 Single Node / Multi-GPU"),Ug.forEach(t),kg.forEach(t),Fp=f(e),Z=s(e,"UL",{});var Vi=i(Z);Dt=s(Vi,"LI",{});var ed=i(Dt);Lo=s(ed,"P",{});var Ig=i(Lo);Gu=r(Ig,"Model fits onto a single GPU:"),Ig.forEach(t),ku=f(ed),Lt=s(ed,"OL",{});var td=i(Lt);To=s(td,"LI",{});var Sg=i(To);Uu=r(Sg,"DDP - Distributed DP"),Sg.forEach(t),Iu=f(td),Go=s(td,"LI",{});var Og=i(Go);Su=r(Og,"ZeRO - may or may not be faster depending on the situation and configuration used"),Og.forEach(t),td.forEach(t),ed.forEach(t),Ou=f(Vi),Tt=s(Vi,"LI",{});var ld=i(Tt);ko=s(ld,"P",{});var jg=i(ko);ju=r(jg,"Model doesn\u2019t fit onto a single GPU:"),jg.forEach(t),Au=f(ld),pe=s(ld,"OL",{});var Wi=i(pe);Uo=s(Wi,"LI",{});var Ag=i(Uo);Io=s(Ag,"P",{});var xg=i(Io);xu=r(xg,"PP"),xg.forEach(t),Ag.forEach(t),Mu=f(Wi),So=s(Wi,"LI",{});var Mg=i(So);Oo=s(Mg,"P",{});var $g=i(Oo);$u=r($g,"ZeRO"),$g.forEach(t),Mg.forEach(t),Nu=f(Wi),he=s(Wi,"LI",{});var Hi=i(he);jo=s(Hi,"P",{});var Ng=i(jo);zu=r(Ng,"TP"),Ng.forEach(t),Ru=f(Hi),Ao=s(Hi,"P",{});var zg=i(Ao);Cu=r(zg,"With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),zg.forEach(t),Zu=f(Hi),xo=s(Hi,"P",{});var Rg=i(xo);Bu=r(Rg,"TP is almost always used within a single node. That is TP size <= gpus per node."),Rg.forEach(t),Hi.forEach(t),Wi.forEach(t),ld.forEach(t),qu=f(Vi),Gt=s(Vi,"LI",{});var ad=i(Gt);Mo=s(ad,"P",{});var Cg=i(Mo);Fu=r(Cg,"Largest Layer not fitting into a single GPU:"),Cg.forEach(t),Vu=f(ad),kt=s(ad,"OL",{});var sd=i(kt);$o=s(sd,"LI",{});var Zg=i($o);Wu=r(Zg,"If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),Zg.forEach(t),Hu=f(sd),No=s(sd,"LI",{});var Bg=i(No);Yu=r(Bg,"With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Bg.forEach(t),sd.forEach(t),ad.forEach(t),Vi.forEach(t),Vp=f(e),Ta=s(e,"P",{});var qg=i(Ta);zo=s(qg,"STRONG",{});var Fg=i(zo);Xu=r(Fg,"\u21E8 Multi-Node / Multi-GPU"),Fg.forEach(t),qg.forEach(t),Wp=f(e),$e=s(e,"UL",{});var id=i($e);Ut=s(id,"LI",{});var od=i(Ut);Ro=s(od,"P",{});var Vg=i(Ro);Ku=r(Vg,"When you have fast inter-node connectivity:"),Vg.forEach(t),Ju=f(od),It=s(od,"OL",{});var rd=i(It);Co=s(rd,"LI",{});var Wg=i(Co);Qu=r(Wg,"ZeRO - as it requires close to no modifications to the model"),Wg.forEach(t),em=f(rd),Zo=s(rd,"LI",{});var Hg=i(Zo);tm=r(Hg,"PP+TP+DP - less communications, but requires massive changes to the model"),Hg.forEach(t),rd.forEach(t),od.forEach(t),lm=f(id),St=s(id,"LI",{});var nd=i(St);Bo=s(nd,"P",{});var Yg=i(Bo);am=r(Yg,"when you have slow inter-node connectivity and still low on GPU memory:"),Yg.forEach(t),sm=f(nd),qo=s(nd,"OL",{});var Xg=i(qo);Fo=s(Xg,"LI",{});var Kg=i(Fo);im=r(Kg,"DP+PP+TP+ZeRO-1"),Kg.forEach(t),Xg.forEach(t),nd.forEach(t),id.forEach(t),Hp=f(e),fe=s(e,"H2",{class:!0});var pd=i(fe);Ne=s(pd,"A",{id:!0,class:!0,href:!0});var Jg=i(Ne);Vo=s(Jg,"SPAN",{});var Qg=i(Vo);m(Ot.$$.fragment,Qg),Qg.forEach(t),Jg.forEach(t),om=f(pd),Wo=s(pd,"SPAN",{});var eE=i(Wo);rm=r(eE,"Data Parallelism"),eE.forEach(t),pd.forEach(t),Yp=f(e),A=s(e,"P",{});var vt=i(A);nm=r(vt,"Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),Ho=s(vt,"CODE",{});var tE=i(Ho);pm=r(tE,"DataParallel"),tE.forEach(t),hm=r(vt," (DP) and "),Yo=s(vt,"CODE",{});var lE=i(Yo);fm=r(lE,"DistributedDataParallel"),lE.forEach(t),cm=r(vt," (DDP) that are almost trivial to use. This is a built-in feature of Pytorch. Note that in general it is advised to use DDP as it is better maintained and works for all models while DP might fail for some models. "),jt=s(vt,"A",{href:!0,rel:!0});var aE=i(jt);dm=r(aE,"PyTorch documentation"),aE.forEach(t),um=r(vt," itself recommends the use of DDP."),vt.forEach(t),Xp=f(e),ce=s(e,"H3",{class:!0});var hd=i(ce);ze=s(hd,"A",{id:!0,class:!0,href:!0});var sE=i(ze);Xo=s(sE,"SPAN",{});var iE=i(Xo);m(At.$$.fragment,iE),iE.forEach(t),sE.forEach(t),mm=f(hd),Ko=s(hd,"SPAN",{});var oE=i(Ko);vm=r(oE,"DP vs DDP"),oE.forEach(t),hd.forEach(t),Kp=f(e),de=s(e,"P",{});var Ip=i(de);Jo=s(Ip,"CODE",{});var rE=i(Jo);Pm=r(rE,"DistributedDataParallel"),rE.forEach(t),wm=r(Ip," (DDP) is typically faster than "),Qo=s(Ip,"CODE",{});var nE=i(Qo);ym=r(nE,"DataParallel"),nE.forEach(t),bm=r(Ip," (DP), but it is not always the case:"),Ip.forEach(t),Jp=f(e),Re=s(e,"UL",{});var fd=i(Re);er=s(fd,"LI",{});var pE=i(er);_m=r(pE,"while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),pE.forEach(t),gm=f(fd),tr=s(fd,"LI",{});var hE=i(tr);Em=r(hE,"on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),hE.forEach(t),fd.forEach(t),Qp=f(e),Ga=s(e,"P",{});var fE=i(Ga);Dm=r(fE,"Here are the main differences in the inter-GPU communication overhead between the two modes:"),fE.forEach(t),eh=f(e),xt=s(e,"P",{});var I_=i(xt);Mt=s(I_,"A",{href:!0,rel:!0});var cE=i(Mt);Lm=r(cE,"DDP"),cE.forEach(t),Tm=r(I_,":"),I_.forEach(t),th=f(e),Ce=s(e,"UL",{});var cd=i(Ce);lr=s(cd,"LI",{});var dE=i(lr);Gm=r(dE,"At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),dE.forEach(t),km=f(cd),ka=s(cd,"LI",{});var S_=i(ka);Um=r(S_,"Then for each batch:"),$t=s(S_,"OL",{});var dd=i($t);ar=s(dd,"LI",{});var uE=i(ar);Im=r(uE,"each gpu consumes each own mini-batch of data directly"),uE.forEach(t),Sm=f(dd),Nt=s(dd,"LI",{});var ud=i(Nt);Om=r(ud,"during "),sr=s(ud,"CODE",{});var mE=i(sr);jm=r(mE,"backward"),mE.forEach(t),Am=r(ud,", once the local gradients are ready, they are then averaged across all processes"),ud.forEach(t),dd.forEach(t),S_.forEach(t),cd.forEach(t),lh=f(e),zt=s(e,"P",{});var O_=i(zt);Rt=s(O_,"A",{href:!0,rel:!0});var vE=i(Rt);xm=r(vE,"DP"),vE.forEach(t),Mm=r(O_,":"),O_.forEach(t),ah=f(e),Ua=s(e,"P",{});var PE=i(Ua);$m=r(PE,"For each batch:"),PE.forEach(t),sh=f(e),T=s(e,"OL",{});var te=i(T);ir=s(te,"LI",{});var wE=i(ir);Nm=r(wE,"gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),wE.forEach(t),zm=f(te),or=s(te,"LI",{});var yE=i(or);Rm=r(yE,"replicates the up-to-date model from gpu 0 to each gpu"),yE.forEach(t),Cm=f(te),Ct=s(te,"LI",{});var md=i(Ct);Zm=r(md,"runs "),rr=s(md,"CODE",{});var bE=i(rr);Bm=r(bE,"forward"),bE.forEach(t),qm=r(md," and sends output from each gpu to gpu 0, computes loss"),md.forEach(t),Fm=f(te),Ia=s(te,"LI",{});var j_=i(Ia);Vm=r(j_,"scatters loss from gpu 0 to all gpus, runs "),nr=s(j_,"CODE",{});var _E=i(nr);Wm=r(_E,"backward"),_E.forEach(t),j_.forEach(t),Hm=f(te),pr=s(te,"LI",{});var gE=i(pr);Ym=r(gE,"sends gradients from each gpu to gpu 0 and averages those"),gE.forEach(t),te.forEach(t),ih=f(e),Sa=s(e,"P",{});var EE=i(Sa);Xm=r(EE,"The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),EE.forEach(t),oh=f(e),Ze=s(e,"P",{});var vd=i(Ze);Km=r(vd,"DP copies data within the process via python threads, whereas DDP copies data via "),Zt=s(vd,"A",{href:!0,rel:!0});var DE=i(Zt);Jm=r(DE,"torch.distributed"),DE.forEach(t),Qm=r(vd,"."),vd.forEach(t),rh=f(e),Oa=s(e,"P",{});var LE=i(Oa);ev=r(LE,"Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),LE.forEach(t),nh=f(e),ja=s(e,"P",{});var TE=i(ja);tv=r(TE,"You can use DDP across multiple machines, but this is not the case with DP."),TE.forEach(t),ph=f(e),Aa=s(e,"P",{});var GE=i(Aa);lv=r(GE,"There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),GE.forEach(t),hh=f(e),Be=s(e,"P",{});var Pd=i(Be);av=r(Pd,"If you want to go really deep into understanding these 2 modes, this "),Bt=s(Pd,"A",{href:!0,rel:!0});var kE=i(Bt);sv=r(kE,"article"),kE.forEach(t),iv=r(Pd," is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),Pd.forEach(t),fh=f(e),xa=s(e,"P",{});var UE=i(xa);ov=r(UE,"Let\u2019s look at an actual benchmark:"),UE.forEach(t),ch=f(e),qe=s(e,"TABLE",{});var wd=i(qe);hr=s(wd,"THEAD",{});var IE=i(hr);ue=s(IE,"TR",{});var Yi=i(ue);Ma=s(Yi,"TH",{align:!0});var SE=i(Ma);rv=r(SE,"Type"),SE.forEach(t),nv=f(Yi),fr=s(Yi,"TH",{});var OE=i(fr);pv=r(OE,"NVlink"),OE.forEach(t),hv=f(Yi),$a=s(Yi,"TH",{align:!0});var jE=i($a);fv=r(jE,"Time"),jE.forEach(t),Yi.forEach(t),IE.forEach(t),cv=f(wd),me=s(wd,"TBODY",{});var Xi=i(me);ve=s(Xi,"TR",{});var Ki=i(ve);Na=s(Ki,"TD",{align:!0});var AE=i(Na);dv=r(AE,"2:DP"),AE.forEach(t),uv=f(Ki),cr=s(Ki,"TD",{});var xE=i(cr);mv=r(xE,"Y"),xE.forEach(t),vv=f(Ki),za=s(Ki,"TD",{align:!0});var ME=i(za);Pv=r(ME,"110s"),ME.forEach(t),Ki.forEach(t),wv=f(Xi),Pe=s(Xi,"TR",{});var Ji=i(Pe);Ra=s(Ji,"TD",{align:!0});var $E=i(Ra);yv=r($E,"2:DDP"),$E.forEach(t),bv=f(Ji),dr=s(Ji,"TD",{});var NE=i(dr);_v=r(NE,"Y"),NE.forEach(t),gv=f(Ji),Ca=s(Ji,"TD",{align:!0});var zE=i(Ca);Ev=r(zE,"101s"),zE.forEach(t),Ji.forEach(t),Dv=f(Xi),we=s(Xi,"TR",{});var Qi=i(we);Za=s(Qi,"TD",{align:!0});var RE=i(Za);Lv=r(RE,"2:DDP"),RE.forEach(t),Tv=f(Qi),ur=s(Qi,"TD",{});var CE=i(ur);Gv=r(CE,"N"),CE.forEach(t),kv=f(Qi),Ba=s(Qi,"TD",{align:!0});var ZE=i(Ba);Uv=r(ZE,"131s"),ZE.forEach(t),Qi.forEach(t),Xi.forEach(t),wd.forEach(t),dh=f(e),qa=s(e,"P",{});var BE=i(qa);Iv=r(BE,"Analysis:"),BE.forEach(t),uh=f(e),Fa=s(e,"P",{});var qE=i(Fa);Sv=r(qE,"Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),qE.forEach(t),mh=f(e),Va=s(e,"P",{});var FE=i(Va);Ov=r(FE,"The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),FE.forEach(t),vh=f(e),Wa=s(e,"P",{});var VE=i(Wa);jv=r(VE,"Here is the full benchmark code and outputs:"),VE.forEach(t),Ph=f(e),qt=s(e,"P",{});var A_=i(qt);mr=s(A_,"CODE",{});var WE=i(mr);Av=r(WE,"NCCL_P2P_DISABLE=1"),WE.forEach(t),xv=r(A_," was used to disable the NVLink feature on the corresponding benchmark."),A_.forEach(t),wh=f(e),m(Ft.$$.fragment,e),yh=f(e),D=s(e,"P",{});var R=i(D);Mv=r(R,"Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),vr=s(R,"CODE",{});var HE=i(vr);$v=r(HE,"NV2"),HE.forEach(t),Nv=r(R," in "),Pr=s(R,"CODE",{});var YE=i(Pr);zv=r(YE,"nvidia-smi topo -m"),YE.forEach(t),Rv=r(R,`)
Software: `),wr=s(R,"CODE",{});var XE=i(wr);Cv=r(XE,"pytorch-1.8-to-be"),XE.forEach(t),Zv=r(R," + "),yr=s(R,"CODE",{});var KE=i(yr);Bv=r(KE,"cuda-11.0"),KE.forEach(t),qv=r(R," / "),br=s(R,"CODE",{});var JE=i(br);Fv=r(JE,"transformers==4.3.0.dev0"),JE.forEach(t),R.forEach(t),bh=f(e),ye=s(e,"H2",{class:!0});var yd=i(ye);Fe=s(yd,"A",{id:!0,class:!0,href:!0});var QE=i(Fe);_r=s(QE,"SPAN",{});var e3=i(_r);m(Vt.$$.fragment,e3),e3.forEach(t),QE.forEach(t),Vv=f(yd),gr=s(yd,"SPAN",{});var t3=i(gr);Wv=r(t3,"ZeRO Data Parallelism"),t3.forEach(t),yd.forEach(t),_h=f(e),be=s(e,"P",{});var Sp=i(be);Hv=r(Sp,"ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Wt=s(Sp,"A",{href:!0,rel:!0});var l3=i(Wt);Yv=r(l3,"blog post"),l3.forEach(t),Xv=f(Sp),Ha=s(Sp,"IMG",{src:!0,alt:!0}),Sp.forEach(t),gh=f(e),Ve=s(e,"P",{});var bd=i(Ve);Kv=r(bd,"It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),Er=s(bd,"CODE",{});var a3=i(Er);Jv=r(a3,"DataParallel"),a3.forEach(t),Qv=r(bd," (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),bd.forEach(t),Eh=f(e),Ya=s(e,"P",{});var s3=i(Ya);eP=r(s3,"Consider this simple model with 3 layers, where each layer has 3 params:"),s3.forEach(t),Dh=f(e),m(Ht.$$.fragment,e),Lh=f(e),Xa=s(e,"P",{});var i3=i(Xa);tP=r(i3,"Layer La has weights a0, a1 and a2."),i3.forEach(t),Th=f(e),Ka=s(e,"P",{});var o3=i(Ka);lP=r(o3,"If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),o3.forEach(t),Gh=f(e),m(Yt.$$.fragment,e),kh=f(e),Ja=s(e,"P",{});var r3=i(Ja);aP=r(r3,"In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),r3.forEach(t),Uh=f(e),Qa=s(e,"P",{});var n3=i(Qa);sP=r(n3,"Now each of these GPUs will get the usual mini-batch as it works in DP:"),n3.forEach(t),Ih=f(e),m(Xt.$$.fragment,e),Sh=f(e),es=s(e,"P",{});var p3=i(es);iP=r(p3,"The inputs are unmodified - they think they are going to be processed by the normal model."),p3.forEach(t),Oh=f(e),ts=s(e,"P",{});var h3=i(ts);oP=r(h3,"First, the inputs hit the layer La."),h3.forEach(t),jh=f(e),ls=s(e,"P",{});var f3=i(ls);rP=r(f3,"Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),f3.forEach(t),Ah=f(e),as=s(e,"P",{});var c3=i(as);nP=r(c3,"In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),c3.forEach(t),xh=f(e),ss=s(e,"P",{});var d3=i(ss);pP=r(d3,"Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),d3.forEach(t),Mh=f(e),is=s(e,"P",{});var u3=i(is);hP=r(u3,"All 3 GPUs get the full tensors reconstructed and a forward happens."),u3.forEach(t),$h=f(e),os=s(e,"P",{});var m3=i(os);fP=r(m3,"As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),m3.forEach(t),Nh=f(e),rs=s(e,"P",{});var v3=i(rs);cP=r(v3,"And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),v3.forEach(t),zh=f(e),ns=s(e,"P",{});var P3=i(ns);dP=r(P3,"To me this sounds like an efficient group backpacking weight distribution strategy:"),P3.forEach(t),Rh=f(e),B=s(e,"OL",{});var eo=i(B);Dr=s(eo,"LI",{});var w3=i(Dr);uP=r(w3,"person A carries the tent"),w3.forEach(t),mP=f(eo),Lr=s(eo,"LI",{});var y3=i(Lr);vP=r(y3,"person B carries the stove"),y3.forEach(t),PP=f(eo),Tr=s(eo,"LI",{});var b3=i(Tr);wP=r(b3,"person C carries the axe"),b3.forEach(t),eo.forEach(t),Ch=f(e),ps=s(e,"P",{});var _3=i(ps);yP=r(_3,"Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),_3.forEach(t),Zh=f(e),hs=s(e,"P",{});var g3=i(hs);bP=r(g3,"Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),g3.forEach(t),Bh=f(e),fs=s(e,"P",{});var E3=i(fs);_P=r(E3,"While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),E3.forEach(t),qh=f(e),cs=s(e,"P",{});var D3=i(cs);gP=r(D3,"If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),D3.forEach(t),Fh=f(e),ds=s(e,"P",{});var L3=i(ds);EP=r(L3,"Implementations:"),L3.forEach(t),Vh=f(e),q=s(e,"UL",{});var to=i(q);us=s(to,"LI",{});var x_=i(us);Kt=s(x_,"A",{href:!0,rel:!0});var T3=i(Kt);DP=r(T3,"DeepSpeed"),T3.forEach(t),LP=r(x_," ZeRO-DP stages 1+2+3"),x_.forEach(t),TP=f(to),ms=s(to,"LI",{});var M_=i(ms);Jt=s(M_,"A",{href:!0,rel:!0});var G3=i(Jt);GP=r(G3,"Fairscale"),G3.forEach(t),kP=r(M_," ZeRO-DP stages 1+2+3"),M_.forEach(t),UP=f(to),Gr=s(to,"LI",{});var k3=i(Gr);Qt=s(k3,"A",{href:!0});var $_=i(Qt);kr=s($_,"CODE",{});var U3=i(kr);IP=r(U3,"transformers"),U3.forEach(t),SP=r($_," integration"),$_.forEach(t),k3.forEach(t),to.forEach(t),Wh=f(e),_e=s(e,"H2",{class:!0});var _d=i(_e);We=s(_d,"A",{id:!0,class:!0,href:!0});var I3=i(We);Ur=s(I3,"SPAN",{});var S3=i(Ur);m(el.$$.fragment,S3),S3.forEach(t),I3.forEach(t),OP=f(_d),Ir=s(_d,"SPAN",{});var O3=i(Ir);jP=r(O3,"Naive Model Parallelism (Vertical) and Pipeline Parallelism"),O3.forEach(t),_d.forEach(t),Hh=f(e),He=s(e,"P",{});var gd=i(He);AP=r(gd,"Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),Sr=s(gd,"CODE",{});var j3=i(Sr);xP=r(j3,".to()"),j3.forEach(t),MP=r(gd," the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),gd.forEach(t),Yh=f(e),vs=s(e,"P",{});var A3=i(vs);$P=r(A3,"We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),A3.forEach(t),Xh=f(e),m(tl.$$.fragment,e),Kh=f(e),Ps=s(e,"P",{});var x3=i(Ps);NP=r(x3,"we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),x3.forEach(t),Jh=f(e),ws=s(e,"P",{});var M3=i(ws);zP=r(M3,"Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),M3.forEach(t),Qh=f(e),ys=s(e,"P",{});var $3=i(ys);RP=r($3,"Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),$3.forEach(t),ef=f(e),bs=s(e,"P",{});var N3=i(bs);CP=r(N3,"Problems:"),N3.forEach(t),tf=f(e),Ye=s(e,"UL",{});var Ed=i(Ye);Or=s(Ed,"LI",{});var z3=i(Or);ZP=r(z3,"the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),z3.forEach(t),BP=f(Ed),jr=s(Ed,"LI",{});var R3=i(jr);qP=r(R3,"shared embeddings may need to get copied back and forth between GPUs."),R3.forEach(t),Ed.forEach(t),lf=f(e),_s=s(e,"P",{});var C3=i(_s);FP=r(C3,"Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),C3.forEach(t),af=f(e),Xe=s(e,"P",{});var Dd=i(Xe);VP=r(Dd,"The following illustration from the "),ll=s(Dd,"A",{href:!0,rel:!0});var Z3=i(ll);WP=r(Z3,"GPipe paper"),Z3.forEach(t),HP=r(Dd," shows the naive MP on the top, and PP on the bottom:"),Dd.forEach(t),sf=f(e),gs=s(e,"P",{});var B3=i(gs);Es=s(B3,"IMG",{src:!0,alt:!0}),B3.forEach(t),of=f(e),Ds=s(e,"P",{});var q3=i(Ds);YP=r(q3,"It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),q3.forEach(t),rf=f(e),Ls=s(e,"P",{});var F3=i(Ls);XP=r(F3,"Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),F3.forEach(t),nf=f(e),F=s(e,"P",{});var lo=i(F);KP=r(lo,"PP introduces a new hyper-parameter to tune and it\u2019s "),Ar=s(lo,"CODE",{});var V3=i(Ar);JP=r(V3,"chunks"),V3.forEach(t),QP=r(lo," which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),xr=s(lo,"CODE",{});var W3=i(xr);e1=r(W3,"chunks=4"),W3.forEach(t),t1=r(lo,". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),lo.forEach(t),pf=f(e),Ke=s(e,"P",{});var Ld=i(Ke);l1=r(Ld,"Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),Mr=s(Ld,"CODE",{});var H3=i(Mr);a1=r(H3,"chunks"),H3.forEach(t),s1=r(Ld,", whereas DeepSpeed refers to the same hyper-parameter as GAS."),Ld.forEach(t),hf=f(e),Je=s(e,"P",{});var Td=i(Je);i1=r(Td,"Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),$r=s(Td,"CODE",{});var Y3=i($r);o1=r(Y3,"chunks"),Y3.forEach(t),r1=r(Td," (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),Td.forEach(t),ff=f(e),V=s(e,"P",{});var ao=i(V);n1=r(ao,"To calculate the global batch size of the DP + PP setup we then do: "),Nr=s(ao,"CODE",{});var X3=i(Nr);p1=r(X3,"mbs*chunks*dp_degree"),X3.forEach(t),h1=r(ao," ("),zr=s(ao,"CODE",{});var K3=i(zr);f1=r(K3,"8*32*4=1024"),K3.forEach(t),c1=r(ao,")."),ao.forEach(t),cf=f(e),Ts=s(e,"P",{});var J3=i(Ts);d1=r(J3,"Let\u2019s go back to the diagram."),J3.forEach(t),df=f(e),W=s(e,"P",{});var so=i(W);u1=r(so,"With "),Rr=s(so,"CODE",{});var Q3=i(Rr);m1=r(Q3,"chunks=1"),Q3.forEach(t),v1=r(so," you end up with the naive MP, which is very inefficient. With a very large "),Cr=s(so,"CODE",{});var e4=i(Cr);P1=r(e4,"chunks"),e4.forEach(t),w1=r(so," value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),so.forEach(t),uf=f(e),x=s(e,"P",{});var Pt=i(x);y1=r(Pt,"While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),Zr=s(Pt,"CODE",{});var t4=i(Zr);b1=r(t4,"forward"),t4.forEach(t),_1=r(Pt," stage has to wait for "),Br=s(Pt,"CODE",{});var l4=i(Br);g1=r(l4,"backward"),l4.forEach(t),E1=r(Pt," to complete the pipeline, the purpose of finding the best value for "),qr=s(Pt,"CODE",{});var a4=i(qr);D1=r(a4,"chunks"),a4.forEach(t),L1=r(Pt," is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),Pt.forEach(t),mf=f(e),Gs=s(e,"P",{});var s4=i(Gs);T1=r(s4,"There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),s4.forEach(t),vf=f(e),ks=s(e,"P",{});var i4=i(ks);G1=r(i4,"Traditional Pipeline API solutions:"),i4.forEach(t),Pf=f(e),M=s(e,"UL",{});var wt=i(M);Fr=s(wt,"LI",{});var o4=i(Fr);k1=r(o4,"PyTorch"),o4.forEach(t),U1=f(wt),Vr=s(wt,"LI",{});var r4=i(Vr);I1=r(r4,"FairScale"),r4.forEach(t),S1=f(wt),Wr=s(wt,"LI",{});var n4=i(Wr);O1=r(n4,"DeepSpeed"),n4.forEach(t),j1=f(wt),Hr=s(wt,"LI",{});var p4=i(Hr);A1=r(p4,"Megatron-LM"),p4.forEach(t),wt.forEach(t),wf=f(e),Us=s(e,"P",{});var h4=i(Us);x1=r(h4,"Modern solutions:"),h4.forEach(t),yf=f(e),Qe=s(e,"UL",{});var Gd=i(Qe);Yr=s(Gd,"LI",{});var f4=i(Yr);M1=r(f4,"Varuna"),f4.forEach(t),$1=f(Gd),Xr=s(Gd,"LI",{});var c4=i(Xr);N1=r(c4,"Sagemaker"),c4.forEach(t),Gd.forEach(t),bf=f(e),Is=s(e,"P",{});var d4=i(Is);z1=r(d4,"Problems with traditional Pipeline API solutions:"),d4.forEach(t),_f=f(e),$=s(e,"UL",{});var yt=i($);al=s(yt,"LI",{});var kd=i(al);R1=r(kd,"have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),Kr=s(kd,"CODE",{});var u4=i(Kr);C1=r(u4,"nn.Sequential"),u4.forEach(t),Z1=r(kd," sequence of the same, which may require changes to the design of the model."),kd.forEach(t),B1=f(yt),Ss=s(yt,"LI",{});var N_=i(Ss);q1=r(N_,"currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),sl=s(N_,"A",{href:!0,rel:!0});var m4=i(sl);F1=r(m4,"https://github.com/pytorch/pytorch/pull/50693"),m4.forEach(t),N_.forEach(t),V1=f(yt),Jr=s(yt,"LI",{});var v4=i(Jr);W1=r(v4,"conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),v4.forEach(t),H1=f(yt),Qr=s(yt,"LI",{});var P4=i(Qr);Y1=r(P4,"have to arrange each layer so that the output of one model becomes an input to the other model."),P4.forEach(t),yt.forEach(t),gf=f(e),Os=s(e,"P",{});var w4=i(Os);X1=r(w4,"We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),w4.forEach(t),Ef=f(e),js=s(e,"P",{});var y4=i(js);K1=r(y4,"Implementations:"),y4.forEach(t),Df=f(e),_=s(e,"UL",{});var I=i(_);il=s(I,"LI",{});var Ud=i(il);ol=s(Ud,"A",{href:!0,rel:!0});var b4=i(ol);J1=r(b4,"Pytorch"),b4.forEach(t),Q1=r(Ud," (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),rl=s(Ud,"A",{href:!0,rel:!0});var _4=i(rl);ew=r(_4,"examples"),_4.forEach(t),Ud.forEach(t),tw=f(I),en=s(I,"LI",{});var g4=i(en);nl=s(g4,"A",{href:!0,rel:!0});var E4=i(nl);lw=r(E4,"FairScale"),E4.forEach(t),g4.forEach(t),aw=f(I),tn=s(I,"LI",{});var D4=i(tn);pl=s(D4,"A",{href:!0,rel:!0});var L4=i(pl);sw=r(L4,"DeepSpeed"),L4.forEach(t),D4.forEach(t),iw=f(I),As=s(I,"LI",{});var z_=i(As);hl=s(z_,"A",{href:!0,rel:!0});var T4=i(hl);ow=r(T4,"Megatron-LM"),T4.forEach(t),rw=r(z_," has an internal implementation - no API."),z_.forEach(t),nw=f(I),ln=s(I,"LI",{});var G4=i(ln);fl=s(G4,"A",{href:!0,rel:!0});var k4=i(fl);pw=r(k4,"Varuna"),k4.forEach(t),G4.forEach(t),hw=f(I),xs=s(I,"LI",{});var R_=i(xs);cl=s(R_,"A",{href:!0,rel:!0});var U4=i(cl);fw=r(U4,"SageMaker"),U4.forEach(t),cw=r(R_," - this is a proprietary solution that can only be used on AWS."),R_.forEach(t),dw=f(I),Ms=s(I,"LI",{});var C_=i(Ms);dl=s(C_,"A",{href:!0,rel:!0});var I4=i(dl);uw=r(I4,"OSLO"),I4.forEach(t),mw=r(C_," - this is implemented based on the Hugging Face Transformers."),C_.forEach(t),I.forEach(t),Lf=f(e),et=s(e,"P",{});var Id=i(et);vw=r(Id,"\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),an=s(Id,"CODE",{});var S4=i(an);Pw=r(S4,"nn.Sequential"),S4.forEach(t),ww=r(Id," and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),Id.forEach(t),Tf=f(e),$s=s(e,"P",{});var O4=i($s);yw=r(O4,"Other approaches:"),O4.forEach(t),Gf=f(e),ge=s(e,"P",{});var Op=i(ge);bw=r(Op,"DeepSpeed, Varuna and SageMaker use the concept of an "),ul=s(Op,"A",{href:!0,rel:!0});var j4=i(ul);_w=r(j4,"Interleaved Pipeline"),j4.forEach(t),gw=f(Op),Ns=s(Op,"IMG",{src:!0,alt:!0}),Op.forEach(t),kf=f(e),zs=s(e,"P",{});var A4=i(zs);Ew=r(A4,"Here the bubble (idle time) is further minimized by prioritizing backward passes."),A4.forEach(t),Uf=f(e),Rs=s(e,"P",{});var x4=i(Rs);Dw=r(x4,"Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),x4.forEach(t),If=f(e),tt=s(e,"P",{});var Sd=i(tt);Lw=r(Sd,"OSLO has pipeline parallelism implementation based on the Transformers without "),sn=s(Sd,"CODE",{});var M4=i(sn);Tw=r(M4,"nn.Sequential"),M4.forEach(t),Gw=r(Sd," converting."),Sd.forEach(t),Sf=f(e),Ee=s(e,"H2",{class:!0});var Od=i(Ee);lt=s(Od,"A",{id:!0,class:!0,href:!0});var $4=i(lt);on=s($4,"SPAN",{});var N4=i(on);m(ml.$$.fragment,N4),N4.forEach(t),$4.forEach(t),kw=f(Od),rn=s(Od,"SPAN",{});var z4=i(rn);Uw=r(z4,"Tensor Parallelism"),z4.forEach(t),Od.forEach(t),Of=f(e),Cs=s(e,"P",{});var R4=i(Cs);Iw=r(R4,"In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),R4.forEach(t),jf=f(e),H=s(e,"P",{});var io=i(H);Sw=r(io,"In this section we use concepts and diagrams from the "),vl=s(io,"A",{href:!0,rel:!0});var C4=i(vl);Ow=r(C4,"Megatron-LM"),C4.forEach(t),jw=r(io," paper: "),Pl=s(io,"A",{href:!0,rel:!0});var Z4=i(Pl);Aw=r(Z4,"Efficient Large-Scale Language Model Training on GPU Clusters"),Z4.forEach(t),xw=r(io,"."),io.forEach(t),Af=f(e),Y=s(e,"P",{});var oo=i(Y);Mw=r(oo,"The main building block of any transformer is a fully connected "),nn=s(oo,"CODE",{});var B4=i(nn);$w=r(B4,"nn.Linear"),B4.forEach(t),Nw=r(oo," followed by a nonlinear activation "),pn=s(oo,"CODE",{});var q4=i(pn);zw=r(q4,"GeLU"),q4.forEach(t),Rw=r(oo,"."),oo.forEach(t),xf=f(e),G=s(e,"P",{});var le=i(G);Cw=r(le,"Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),hn=s(le,"CODE",{});var F4=i(hn);Zw=r(F4,"Y = GeLU(XA)"),F4.forEach(t),Bw=r(le,", where "),fn=s(le,"CODE",{});var V4=i(fn);qw=r(V4,"X"),V4.forEach(t),Fw=r(le," and "),cn=s(le,"CODE",{});var W4=i(cn);Vw=r(W4,"Y"),W4.forEach(t),Ww=r(le," are the input and output vectors, and "),dn=s(le,"CODE",{});var H4=i(dn);Hw=r(H4,"A"),H4.forEach(t),Yw=r(le," is the weight matrix."),le.forEach(t),Mf=f(e),wl=s(e,"P",{});var Z_=i(wl);Xw=r(Z_,`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),Zs=s(Z_,"IMG",{src:!0,alt:!0}),Z_.forEach(t),$f=f(e),d=s(e,"P",{});var g=i(d);Kw=r(g,"If we split the weight matrix "),un=s(g,"CODE",{});var Y4=i(un);Jw=r(Y4,"A"),Y4.forEach(t),Qw=r(g," column-wise across "),mn=s(g,"CODE",{});var X4=i(mn);e2=r(X4,"N"),X4.forEach(t),t2=r(g," GPUs and perform matrix multiplications "),vn=s(g,"CODE",{});var K4=i(vn);l2=r(K4,"XA_1"),K4.forEach(t),a2=r(g," through "),Pn=s(g,"CODE",{});var J4=i(Pn);s2=r(J4,"XA_n"),J4.forEach(t),i2=r(g," in parallel, then we will end up with "),wn=s(g,"CODE",{});var Q4=i(wn);o2=r(Q4,"N"),Q4.forEach(t),r2=r(g," output vectors "),yn=s(g,"CODE",{});var e0=i(yn);n2=r(e0,"Y_1, Y_2, ..., Y_n"),e0.forEach(t),p2=r(g," which can be fed into "),bn=s(g,"CODE",{});var t0=i(bn);h2=r(t0,"GeLU"),t0.forEach(t),f2=r(g,` independently:
`),Bs=s(g,"IMG",{src:!0,alt:!0}),g.forEach(t),Nf=f(e),yl=s(e,"P",{});var B_=i(yl);c2=r(B_,`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),qs=s(B_,"IMG",{src:!0,alt:!0}),B_.forEach(t),zf=f(e),bl=s(e,"P",{});var q_=i(bl);d2=r(q_,`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),Fs=s(q_,"IMG",{src:!0,alt:!0}),q_.forEach(t),Rf=f(e),Vs=s(e,"P",{});var l0=i(Vs);u2=r(l0,"Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),l0.forEach(t),Cf=f(e),X=s(e,"P",{});var ro=i(X);m2=r(ro,"This section is based on the original much more "),_l=s(ro,"A",{href:!0,rel:!0});var a0=i(_l);v2=r(a0,"detailed TP overview"),a0.forEach(t),P2=r(ro,`.
by `),gl=s(ro,"A",{href:!0,rel:!0});var s0=i(gl);w2=r(s0,"@anton-l"),s0.forEach(t),y2=r(ro,"."),ro.forEach(t),Zf=f(e),Ws=s(e,"P",{});var i0=i(Ws);b2=r(i0,"SageMaker combines TP with DP for a more efficient processing."),i0.forEach(t),Bf=f(e),Hs=s(e,"P",{});var o0=i(Hs);_2=r(o0,"Alternative names:"),o0.forEach(t),qf=f(e),Ys=s(e,"UL",{});var r0=i(Ys);Xs=s(r0,"LI",{});var F_=i(Xs);g2=r(F_,"DeepSpeed calls it "),El=s(F_,"A",{href:!0,rel:!0});var n0=i(El);E2=r(n0,"tensor slicing"),n0.forEach(t),F_.forEach(t),r0.forEach(t),Ff=f(e),Ks=s(e,"P",{});var p0=i(Ks);D2=r(p0,"Implementations:"),p0.forEach(t),Vf=f(e),N=s(e,"UL",{});var bt=i(N);Js=s(bt,"LI",{});var V_=i(Js);Dl=s(V_,"A",{href:!0,rel:!0});var h0=i(Dl);L2=r(h0,"Megatron-LM"),h0.forEach(t),T2=r(V_," has an internal implementation, as it\u2019s very model-specific"),V_.forEach(t),G2=f(bt),Qs=s(bt,"LI",{});var W_=i(Qs);Ll=s(W_,"A",{href:!0,rel:!0});var f0=i(Ll);k2=r(f0,"parallelformers"),f0.forEach(t),U2=r(W_," (only inference at the moment)"),W_.forEach(t),I2=f(bt),ei=s(bt,"LI",{});var H_=i(ei);Tl=s(H_,"A",{href:!0,rel:!0});var c0=i(Tl);S2=r(c0,"SageMaker"),c0.forEach(t),O2=r(H_," - this is a proprietary solution that can only be used on AWS."),H_.forEach(t),j2=f(bt),ti=s(bt,"LI",{});var Y_=i(ti);Gl=s(Y_,"A",{href:!0,rel:!0});var d0=i(Gl);A2=r(d0,"OSLO"),d0.forEach(t),x2=r(Y_," has the tensor parallelism implementation based on the Transformers."),Y_.forEach(t),bt.forEach(t),Wf=f(e),li=s(e,"P",{});var u0=i(li);M2=r(u0,"\u{1F917} Transformers status:"),u0.forEach(t),Hf=f(e),K=s(e,"UL",{});var no=i(K);_n=s(no,"LI",{});var m0=i(_n);$2=r(m0,"core: not yet implemented in the core"),m0.forEach(t),N2=f(no),kl=s(no,"LI",{});var jd=i(kl);z2=r(jd,"but if you want inference "),Ul=s(jd,"A",{href:!0,rel:!0});var v0=i(Ul);R2=r(v0,"parallelformers"),v0.forEach(t),C2=r(jd," provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),jd.forEach(t),Z2=f(no),ai=s(no,"LI",{});var X_=i(ai);B2=r(X_,"Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),Il=s(X_,"A",{href:!0,rel:!0});var P0=i(Il);q2=r(P0,"here"),P0.forEach(t),X_.forEach(t),no.forEach(t),Yf=f(e),De=s(e,"H2",{class:!0});var Ad=i(De);at=s(Ad,"A",{id:!0,class:!0,href:!0});var w0=i(at);gn=s(w0,"SPAN",{});var y0=i(gn);m(Sl.$$.fragment,y0),y0.forEach(t),w0.forEach(t),F2=f(Ad),En=s(Ad,"SPAN",{});var b0=i(En);V2=r(b0,"DP+PP"),b0.forEach(t),Ad.forEach(t),Xf=f(e),st=s(e,"P",{});var xd=i(st);W2=r(xd,"The following diagram from the DeepSpeed "),Ol=s(xd,"A",{href:!0,rel:!0});var _0=i(Ol);H2=r(_0,"pipeline tutorial"),_0.forEach(t),Y2=r(xd," demonstrates how one combines DP with PP."),xd.forEach(t),Kf=f(e),si=s(e,"P",{});var g0=i(si);ii=s(g0,"IMG",{src:!0,alt:!0}),g0.forEach(t),Jf=f(e),oi=s(e,"P",{});var E0=i(oi);X2=r(E0,"Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),E0.forEach(t),Qf=f(e),ri=s(e,"P",{});var D0=i(ri);K2=r(D0,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),D0.forEach(t),ec=f(e),ni=s(e,"P",{});var L0=i(ni);J2=r(L0,"Implementations:"),L0.forEach(t),tc=f(e),k=s(e,"UL",{});var ae=i(k);Dn=s(ae,"LI",{});var T0=i(Dn);jl=s(T0,"A",{href:!0,rel:!0});var G0=i(jl);Q2=r(G0,"DeepSpeed"),G0.forEach(t),T0.forEach(t),ey=f(ae),Ln=s(ae,"LI",{});var k0=i(Ln);Al=s(k0,"A",{href:!0,rel:!0});var U0=i(Al);ty=r(U0,"Megatron-LM"),U0.forEach(t),k0.forEach(t),ly=f(ae),Tn=s(ae,"LI",{});var I0=i(Tn);xl=s(I0,"A",{href:!0,rel:!0});var S0=i(xl);ay=r(S0,"Varuna"),S0.forEach(t),I0.forEach(t),sy=f(ae),Gn=s(ae,"LI",{});var O0=i(Gn);Ml=s(O0,"A",{href:!0,rel:!0});var j0=i(Ml);iy=r(j0,"SageMaker"),j0.forEach(t),O0.forEach(t),oy=f(ae),kn=s(ae,"LI",{});var A0=i(kn);$l=s(A0,"A",{href:!0,rel:!0});var x0=i($l);ry=r(x0,"OSLO"),x0.forEach(t),A0.forEach(t),ae.forEach(t),lc=f(e),pi=s(e,"P",{});var M0=i(pi);ny=r(M0,"\u{1F917} Transformers status: not yet implemented"),M0.forEach(t),ac=f(e),Le=s(e,"H2",{class:!0});var Md=i(Le);it=s(Md,"A",{id:!0,class:!0,href:!0});var $0=i(it);Un=s($0,"SPAN",{});var N0=i(Un);m(Nl.$$.fragment,N0),N0.forEach(t),$0.forEach(t),py=f(Md),In=s(Md,"SPAN",{});var z0=i(In);hy=r(z0,"DP+PP+TP"),z0.forEach(t),Md.forEach(t),sc=f(e),hi=s(e,"P",{});var R0=i(hi);fy=r(R0,"To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),R0.forEach(t),ic=f(e),fi=s(e,"P",{});var C0=i(fi);ci=s(C0,"IMG",{src:!0,alt:!0}),C0.forEach(t),oc=f(e),ot=s(e,"P",{});var $d=i(ot);cy=r($d,"This diagram is from a blog post "),zl=s($d,"A",{href:!0,rel:!0});var Z0=i(zl);dy=r(Z0,"3D parallelism: Scaling to trillion-parameter models"),Z0.forEach(t),uy=r($d,", which is a good read as well."),$d.forEach(t),rc=f(e),di=s(e,"P",{});var B0=i(di);my=r(B0,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),B0.forEach(t),nc=f(e),ui=s(e,"P",{});var q0=i(ui);vy=r(q0,"Implementations:"),q0.forEach(t),pc=f(e),U=s(e,"UL",{});var se=i(U);mi=s(se,"LI",{});var K_=i(mi);Rl=s(K_,"A",{href:!0,rel:!0});var F0=i(Rl);Py=r(F0,"DeepSpeed"),F0.forEach(t),wy=r(K_," - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),K_.forEach(t),yy=f(se),Sn=s(se,"LI",{});var V0=i(Sn);Cl=s(V0,"A",{href:!0,rel:!0});var W0=i(Cl);by=r(W0,"Megatron-LM"),W0.forEach(t),V0.forEach(t),_y=f(se),On=s(se,"LI",{});var H0=i(On);Zl=s(H0,"A",{href:!0,rel:!0});var Y0=i(Zl);gy=r(Y0,"Varuna"),Y0.forEach(t),H0.forEach(t),Ey=f(se),jn=s(se,"LI",{});var X0=i(jn);Bl=s(X0,"A",{href:!0,rel:!0});var K0=i(Bl);Dy=r(K0,"SageMaker"),K0.forEach(t),X0.forEach(t),Ly=f(se),An=s(se,"LI",{});var J0=i(An);ql=s(J0,"A",{href:!0,rel:!0});var Q0=i(ql);Ty=r(Q0,"OSLO"),Q0.forEach(t),J0.forEach(t),se.forEach(t),hc=f(e),vi=s(e,"P",{});var e5=i(vi);Gy=r(e5,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),e5.forEach(t),fc=f(e),Te=s(e,"H2",{class:!0});var Nd=i(Te);rt=s(Nd,"A",{id:!0,class:!0,href:!0});var t5=i(rt);xn=s(t5,"SPAN",{});var l5=i(xn);m(Fl.$$.fragment,l5),l5.forEach(t),t5.forEach(t),ky=f(Nd),Mn=s(Nd,"SPAN",{});var a5=i(Mn);Uy=r(a5,"ZeRO DP+PP+TP"),a5.forEach(t),Nd.forEach(t),cc=f(e),nt=s(e,"P",{});var zd=i(nt);Iy=r(zd,"One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),Pi=s(zd,"A",{href:!0});var s5=i(Pi);Sy=r(s5,"ZeRO Data Parallelism"),s5.forEach(t),Oy=r(zd,". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),zd.forEach(t),dc=f(e),wi=s(e,"P",{});var i5=i(wi);jy=r(i5,"When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),i5.forEach(t),uc=f(e),yi=s(e,"P",{});var o5=i(yi);Ay=r(o5,"While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),o5.forEach(t),mc=f(e),pt=s(e,"P",{});var Rd=i(pt);xy=r(Rd,"In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),$n=s(Rd,"CODE",{});var r5=i($n);My=r(r5,"1/PP"),r5.forEach(t),$y=r(Rd,", and so gradient sharding savings on top of that are less significant than pure DP."),Rd.forEach(t),vc=f(e),bi=s(e,"P",{});var n5=i(bi);Ny=r(n5,"ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),n5.forEach(t),Pc=f(e),_i=s(e,"P",{});var p5=i(_i);zy=r(p5,"And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),p5.forEach(t),wc=f(e),gi=s(e,"P",{});var h5=i(gi);Ry=r(h5,"Implementations:"),h5.forEach(t),yc=f(e),ht=s(e,"UL",{});var Cd=i(ht);ft=s(Cd,"LI",{});var jp=i(ft);Vl=s(jp,"A",{href:!0,rel:!0});var f5=i(Vl);Cy=r(f5,"Megatron-DeepSpeed"),f5.forEach(t),Zy=r(jp," and "),Wl=s(jp,"A",{href:!0,rel:!0});var c5=i(Wl);By=r(c5,"Megatron-Deepspeed from BigScience"),c5.forEach(t),qy=r(jp,", which is the fork of the former repo."),jp.forEach(t),Fy=f(Cd),Nn=s(Cd,"LI",{});var d5=i(Nn);Hl=s(d5,"A",{href:!0,rel:!0});var u5=i(Hl);Vy=r(u5,"OSLO"),u5.forEach(t),d5.forEach(t),Cd.forEach(t),bc=f(e),Ei=s(e,"P",{});var m5=i(Ei);Wy=r(m5,"Important papers:"),m5.forEach(t),_c=f(e),Di=s(e,"UL",{});var v5=i(Di);zn=s(v5,"LI",{});var P5=i(zn);Yl=s(P5,"A",{href:!0,rel:!0});var w5=i(Yl);Hy=r(w5,"Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model"),w5.forEach(t),P5.forEach(t),v5.forEach(t),gc=f(e),Li=s(e,"P",{});var y5=i(Li);Yy=r(y5,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),y5.forEach(t),Ec=f(e),Ge=s(e,"H2",{class:!0});var Zd=i(Ge);ct=s(Zd,"A",{id:!0,class:!0,href:!0});var b5=i(ct);Rn=s(b5,"SPAN",{});var _5=i(Rn);m(Xl.$$.fragment,_5),_5.forEach(t),b5.forEach(t),Xy=f(Zd),Cn=s(Zd,"SPAN",{});var g5=i(Cn);Ky=r(g5,"FlexFlow"),g5.forEach(t),Zd.forEach(t),Dc=f(e),Kl=s(e,"P",{});var J_=i(Kl);Jl=s(J_,"A",{href:!0,rel:!0});var E5=i(Jl);Jy=r(E5,"FlexFlow"),E5.forEach(t),Qy=r(J_," also solves the parallelization problem in a slightly different approach."),J_.forEach(t),Lc=f(e),Ql=s(e,"P",{});var Q_=i(Ql);eb=r(Q_,"Paper: "),ea=s(Q_,"A",{href:!0,rel:!0});var D5=i(ea);tb=r(D5,"\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),D5.forEach(t),Q_.forEach(t),Tc=f(e),Ti=s(e,"P",{});var L5=i(Ti);lb=r(L5,"It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),L5.forEach(t),Gc=f(e),z=s(e,"OL",{});var _t=i(z);Zn=s(_t,"LI",{});var T5=i(Zn);ab=r(T5,"Sample = Data Parallelism (sample-wise parallel)"),T5.forEach(t),sb=f(_t),Bn=s(_t,"LI",{});var G5=i(Bn);ib=r(G5,"Operator = Parallelize a single operation into several sub-operations"),G5.forEach(t),ob=f(_t),qn=s(_t,"LI",{});var k5=i(qn);rb=r(k5,"Attribute = Data Parallelism (length-wise parallel)"),k5.forEach(t),nb=f(_t),Fn=s(_t,"LI",{});var U5=i(Fn);pb=r(U5,"Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),U5.forEach(t),_t.forEach(t),kc=f(e),Gi=s(e,"P",{});var I5=i(Gi);hb=r(I5,"Examples:"),I5.forEach(t),Uc=f(e),ki=s(e,"UL",{});var S5=i(ki);Vn=s(S5,"LI",{});var O5=i(Vn);fb=r(O5,"Sample"),O5.forEach(t),S5.forEach(t),Ic=f(e),Ui=s(e,"P",{});var j5=i(Ui);cb=r(j5,"Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),j5.forEach(t),Sc=f(e),Ii=s(e,"UL",{});var A5=i(Ii);Wn=s(A5,"LI",{});var x5=i(Wn);db=r(x5,"Operator"),x5.forEach(t),A5.forEach(t),Oc=f(e),Si=s(e,"P",{});var M5=i(Si);ub=r(M5,"If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),M5.forEach(t),jc=f(e),Oi=s(e,"UL",{});var $5=i(Oi);Hn=s($5,"LI",{});var N5=i(Hn);mb=r(N5,"Attribute"),N5.forEach(t),$5.forEach(t),Ac=f(e),ji=s(e,"P",{});var z5=i(ji);vb=r(z5,"We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),z5.forEach(t),xc=f(e),Ai=s(e,"UL",{});var R5=i(Ai);Yn=s(R5,"LI",{});var C5=i(Yn);Pb=r(C5,"Parameter"),C5.forEach(t),R5.forEach(t),Mc=f(e),xi=s(e,"P",{});var Z5=i(xi);wb=r(Z5,"It is similar with tensor model parallelism or naive layer-wise model parallelism."),Z5.forEach(t),$c=f(e),Mi=s(e,"P",{});var B5=i(Mi);$i=s(B5,"IMG",{src:!0,alt:!0}),B5.forEach(t),Nc=f(e),Ni=s(e,"P",{});var q5=i(Ni);yb=r(q5,"The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),q5.forEach(t),zc=f(e),zi=s(e,"P",{});var F5=i(zi);bb=r(F5,"One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),F5.forEach(t),Rc=f(e),Ri=s(e,"P",{});var V5=i(Ri);_b=r(V5,"So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),V5.forEach(t),Cc=f(e),dt=s(e,"P",{});var Bd=i(dt);gb=r(Bd,"\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),ta=s(Bd,"A",{href:!0,rel:!0});var W5=i(ta);Eb=r(W5,"transformers.utils.fx"),W5.forEach(t),Db=r(Bd,", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),Bd.forEach(t),Zc=f(e),ke=s(e,"H2",{class:!0});var qd=i(ke);ut=s(qd,"A",{id:!0,class:!0,href:!0});var H5=i(ut);Xn=s(H5,"SPAN",{});var Y5=i(Xn);m(la.$$.fragment,Y5),Y5.forEach(t),H5.forEach(t),Lb=f(qd),Kn=s(qd,"SPAN",{});var X5=i(Kn);Tb=r(X5,"Which Strategy To Use When"),X5.forEach(t),qd.forEach(t),Bc=f(e),Ci=s(e,"P",{});var K5=i(Ci);Gb=r(K5,"Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),K5.forEach(t),qc=f(e),Zi=s(e,"P",{});var J5=i(Zi);Jn=s(J5,"STRONG",{});var Q5=i(Jn);kb=r(Q5,"\u21E8 Single GPU"),Q5.forEach(t),J5.forEach(t),Fc=f(e),J=s(e,"UL",{});var po=i(J);aa=s(po,"LI",{});var Fd=i(aa);Qn=s(Fd,"P",{});var e6=i(Qn);Ub=r(e6,"Model fits onto a single GPU:"),e6.forEach(t),Ib=f(Fd),ep=s(Fd,"OL",{});var t6=i(ep);tp=s(t6,"LI",{});var l6=i(tp);Sb=r(l6,"Normal use"),l6.forEach(t),t6.forEach(t),Fd.forEach(t),Ob=f(po),sa=s(po,"LI",{});var Vd=i(sa);lp=s(Vd,"P",{});var a6=i(lp);jb=r(a6,"Model doesn\u2019t fit onto a single GPU:"),a6.forEach(t),Ab=f(Vd),ia=s(Vd,"OL",{});var Wd=i(ia);ap=s(Wd,"LI",{});var s6=i(ap);xb=r(s6,"ZeRO + Offload CPU and optionally NVMe"),s6.forEach(t),Mb=f(Wd),sp=s(Wd,"LI",{});var i6=i(sp);$b=r(i6,"as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),i6.forEach(t),Wd.forEach(t),Vd.forEach(t),Nb=f(po),ip=s(po,"LI",{});var o6=i(ip);op=s(o6,"P",{});var r6=i(op);zb=r(r6,"Largest Layer not fitting into a single GPU:"),r6.forEach(t),o6.forEach(t),po.forEach(t),Vc=f(e),Bi=s(e,"OL",{});var n6=i(Bi);Ue=s(n6,"LI",{});var ho=i(Ue);Rb=r(ho,"ZeRO - Enable "),oa=s(ho,"A",{href:!0,rel:!0});var p6=i(oa);Cb=r(p6,"Memory Centric Tiling"),p6.forEach(t),Zb=r(ho," (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),rp=s(ho,"CODE",{});var h6=i(rp);Bb=r(h6,"torch.nn.Linear"),h6.forEach(t),qb=r(ho," needs to be done by the user."),ho.forEach(t),n6.forEach(t),Wc=f(e),qi=s(e,"P",{});var f6=i(qi);np=s(f6,"STRONG",{});var c6=i(np);Fb=r(c6,"\u21E8 Single Node / Multi-GPU"),c6.forEach(t),f6.forEach(t),Hc=f(e),Q=s(e,"UL",{});var fo=i(Q);ra=s(fo,"LI",{});var Hd=i(ra);pp=s(Hd,"P",{});var d6=i(pp);Vb=r(d6,"Model fits onto a single GPU:"),d6.forEach(t),Wb=f(Hd),na=s(Hd,"OL",{});var Yd=i(na);hp=s(Yd,"LI",{});var u6=i(hp);Hb=r(u6,"DDP - Distributed DP"),u6.forEach(t),Yb=f(Yd),fp=s(Yd,"LI",{});var m6=i(fp);Xb=r(m6,"ZeRO - may or may not be faster depending on the situation and configuration used"),m6.forEach(t),Yd.forEach(t),Hd.forEach(t),Kb=f(fo),pa=s(fo,"LI",{});var Xd=i(pa);cp=s(Xd,"P",{});var v6=i(cp);Jb=r(v6,"Model doesn\u2019t fit onto a single GPU:"),v6.forEach(t),Qb=f(Xd),Ie=s(Xd,"OL",{});var co=i(Ie);dp=s(co,"LI",{});var P6=i(dp);up=s(P6,"P",{});var w6=i(up);e_=r(w6,"PP"),w6.forEach(t),P6.forEach(t),t_=f(co),mp=s(co,"LI",{});var y6=i(mp);vp=s(y6,"P",{});var b6=i(vp);l_=r(b6,"ZeRO"),b6.forEach(t),y6.forEach(t),a_=f(co),Se=s(co,"LI",{});var uo=i(Se);Pp=s(uo,"P",{});var _6=i(Pp);s_=r(_6,"TP"),_6.forEach(t),i_=f(uo),wp=s(uo,"P",{});var g6=i(wp);o_=r(g6,"With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),g6.forEach(t),r_=f(uo),yp=s(uo,"P",{});var E6=i(yp);n_=r(E6,"TP is almost always used within a single node. That is TP size <= gpus per node."),E6.forEach(t),uo.forEach(t),co.forEach(t),Xd.forEach(t),p_=f(fo),ha=s(fo,"LI",{});var Kd=i(ha);bp=s(Kd,"P",{});var D6=i(bp);h_=r(D6,"Largest Layer not fitting into a single GPU:"),D6.forEach(t),f_=f(Kd),fa=s(Kd,"OL",{});var Jd=i(fa);_p=s(Jd,"LI",{});var L6=i(_p);c_=r(L6,"If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),L6.forEach(t),d_=f(Jd),gp=s(Jd,"LI",{});var T6=i(gp);u_=r(T6,"With ZeRO see the same entry for \u201CSingle GPU\u201D above"),T6.forEach(t),Jd.forEach(t),Kd.forEach(t),fo.forEach(t),Yc=f(e),Fi=s(e,"P",{});var G6=i(Fi);Ep=s(G6,"STRONG",{});var k6=i(Ep);m_=r(k6,"\u21E8 Multi-Node / Multi-GPU"),k6.forEach(t),G6.forEach(t),Xc=f(e),mt=s(e,"UL",{});var Qd=i(mt);ca=s(Qd,"LI",{});var eu=i(ca);Dp=s(eu,"P",{});var U6=i(Dp);v_=r(U6,"When you have fast inter-node connectivity:"),U6.forEach(t),P_=f(eu),da=s(eu,"OL",{});var tu=i(da);Lp=s(tu,"LI",{});var I6=i(Lp);w_=r(I6,"ZeRO - as it requires close to no modifications to the model"),I6.forEach(t),y_=f(tu),Tp=s(tu,"LI",{});var S6=i(Tp);b_=r(S6,"PP+TP+DP - less communications, but requires massive changes to the model"),S6.forEach(t),tu.forEach(t),eu.forEach(t),__=f(Qd),ua=s(Qd,"LI",{});var lu=i(ua);Gp=s(lu,"P",{});var O6=i(Gp);g_=r(O6,"when you have slow inter-node connectivity and still low on GPU memory:"),O6.forEach(t),E_=f(lu),kp=s(lu,"OL",{});var j6=i(kp);Up=s(j6,"LI",{});var A6=i(Up);D_=r(A6,"DP+PP+TP+ZeRO-1"),A6.forEach(t),j6.forEach(t),lu.forEach(t),Qd.forEach(t),this.h()},h(){c(b,"name","hf:doc:metadata"),c(b,"content",JSON.stringify(B6)),c(j,"id","efficient-training-on-multiple-gpus"),c(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j,"href","#efficient-training-on-multiple-gpus"),c(E,"class","relative group"),c(xe,"id","concepts"),c(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xe,"href","#concepts"),c(re,"class","relative group"),c(Me,"id","scalability-strategy"),c(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Me,"href","#scalability-strategy"),c(ne,"class","relative group"),c(Ne,"id","data-parallelism"),c(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ne,"href","#data-parallelism"),c(fe,"class","relative group"),c(jt,"href","https://pytorch.org/docs/master/generated/torch.nn.DataParallel.html"),c(jt,"rel","nofollow"),c(ze,"id","dp-vs-ddp"),c(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ze,"href","#dp-vs-ddp"),c(ce,"class","relative group"),c(Mt,"href","https://pytorch.org/docs/master/notes/ddp.html"),c(Mt,"rel","nofollow"),c(Rt,"href","https://pytorch.org/docs/master/generated/torch.nn.DataParallel.html"),c(Rt,"rel","nofollow"),c(Zt,"href","https://pytorch.org/docs/master/distributed.html"),c(Zt,"rel","nofollow"),c(Bt,"href","https://www.telesens.co/2019/04/04/distributed-data-parallel-training-using-pytorch-on-aws/"),c(Bt,"rel","nofollow"),c(Ma,"align","left"),c($a,"align","right"),c(Na,"align","left"),c(za,"align","right"),c(Ra,"align","left"),c(Ca,"align","right"),c(Za,"align","left"),c(Ba,"align","right"),c(Fe,"id","zero-data-parallelism"),c(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fe,"href","#zero-data-parallelism"),c(ye,"class","relative group"),c(Wt,"href","https://www.microsoft.com/en-us/research/blog/zero-deepspeed-new-system-optimizations-enable-training-models-with-over-100-billion-parameters/"),c(Wt,"rel","nofollow"),ie(Ha.src,eg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero.png")||c(Ha,"src",eg),c(Ha,"alt","DeepSpeed-Image-1"),c(Kt,"href","https://www.deepspeed.ai/features/#the-zero-redundancy-optimizer"),c(Kt,"rel","nofollow"),c(Jt,"href","https://github.com/facebookresearch/fairscale/#optimizer-state-sharding-zero"),c(Jt,"rel","nofollow"),c(Qt,"href","main_classes/trainer#trainer-integrations"),c(We,"id","naive-model-parallelism-vertical-and-pipeline-parallelism"),c(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(We,"href","#naive-model-parallelism-vertical-and-pipeline-parallelism"),c(_e,"class","relative group"),c(ll,"href","https://ai.googleblog.com/2019/03/introducing-gpipe-open-source-library.html"),c(ll,"rel","nofollow"),ie(Es.src,tg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-gpipe-bubble.png")||c(Es,"src",tg),c(Es,"alt","mp-pp"),c(sl,"href","https://github.com/pytorch/pytorch/pull/50693"),c(sl,"rel","nofollow"),c(ol,"href","https://pytorch.org/docs/stable/pipeline.html"),c(ol,"rel","nofollow"),c(rl,"href","https://github.com/pytorch/pytorch/blob/master/benchmarks/distributed/pipeline/pipe.py"),c(rl,"rel","nofollow"),c(nl,"href","https://fairscale.readthedocs.io/en/latest/tutorials/pipe.html"),c(nl,"rel","nofollow"),c(pl,"href","https://www.deepspeed.ai/tutorials/pipeline/"),c(pl,"rel","nofollow"),c(hl,"href","https://github.com/NVIDIA/Megatron-LM"),c(hl,"rel","nofollow"),c(fl,"href","https://github.com/microsoft/varuna"),c(fl,"rel","nofollow"),c(cl,"href","https://arxiv.org/abs/2111.05972"),c(cl,"rel","nofollow"),c(dl,"href","https://github.com/tunib-ai/oslo"),c(dl,"rel","nofollow"),c(ul,"href","https://docs.aws.amazon.com/sagemaker/latest/dg/model-parallel-core-features.html"),c(ul,"rel","nofollow"),ie(Ns.src,lg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-sagemaker-interleaved-pipeline.png")||c(Ns,"src",lg),c(Ns,"alt","interleaved-pipeline-execution"),c(lt,"id","tensor-parallelism"),c(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lt,"href","#tensor-parallelism"),c(Ee,"class","relative group"),c(vl,"href","https://github.com/NVIDIA/Megatron-LM"),c(vl,"rel","nofollow"),c(Pl,"href","https://arxiv.org/abs/2104.04473"),c(Pl,"rel","nofollow"),ie(Zs.src,ag="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_gemm.png")||c(Zs,"src",ag),c(Zs,"alt","Parallel GEMM"),ie(Bs.src,sg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-independent-gelu.png")||c(Bs,"src",sg),c(Bs,"alt","independent GeLU"),ie(qs.src,ig="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_shard_processing.png")||c(qs,"src",ig),c(qs,"alt","parallel shard processing"),ie(Fs.src,og="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_self_attention.png")||c(Fs,"src",og),c(Fs,"alt","parallel self-attention"),c(_l,"href","https://github.com/huggingface/transformers/issues/10321#issuecomment-783543530"),c(_l,"rel","nofollow"),c(gl,"href","https://github.com/anton-l"),c(gl,"rel","nofollow"),c(El,"href","https://www.deepspeed.ai/features/#model-parallelism"),c(El,"rel","nofollow"),c(Dl,"href","https://github.com/NVIDIA/Megatron-LM"),c(Dl,"rel","nofollow"),c(Ll,"href","https://github.com/tunib-ai/parallelformers"),c(Ll,"rel","nofollow"),c(Tl,"href","https://arxiv.org/abs/2111.05972"),c(Tl,"rel","nofollow"),c(Gl,"href","https://github.com/tunib-ai/oslo"),c(Gl,"rel","nofollow"),c(Ul,"href","https://github.com/tunib-ai/parallelformers"),c(Ul,"rel","nofollow"),c(Il,"href","https://www.deepspeed.ai/tutorials/inference-tutorial/"),c(Il,"rel","nofollow"),c(at,"id","dppp"),c(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(at,"href","#dppp"),c(De,"class","relative group"),c(Ol,"href","https://www.deepspeed.ai/tutorials/pipeline/"),c(Ol,"rel","nofollow"),ie(ii.src,rg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero-dp-pp.png")||c(ii,"src",rg),c(ii,"alt","dp-pp-2d"),c(jl,"href","https://github.com/microsoft/DeepSpeed"),c(jl,"rel","nofollow"),c(Al,"href","https://github.com/NVIDIA/Megatron-LM"),c(Al,"rel","nofollow"),c(xl,"href","https://github.com/microsoft/varuna"),c(xl,"rel","nofollow"),c(Ml,"href","https://arxiv.org/abs/2111.05972"),c(Ml,"rel","nofollow"),c($l,"href","https://github.com/tunib-ai/oslo"),c($l,"rel","nofollow"),c(it,"id","dppptp"),c(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(it,"href","#dppptp"),c(Le,"class","relative group"),ie(ci.src,ng="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-deepspeed-3d.png")||c(ci,"src",ng),c(ci,"alt","dp-pp-tp-3d"),c(zl,"href","https://www.microsoft.com/en-us/research/blog/deepspeed-extreme-scale-model-training-for-everyone/"),c(zl,"rel","nofollow"),c(Rl,"href","https://github.com/microsoft/DeepSpeed"),c(Rl,"rel","nofollow"),c(Cl,"href","https://github.com/NVIDIA/Megatron-LM"),c(Cl,"rel","nofollow"),c(Zl,"href","https://github.com/microsoft/varuna"),c(Zl,"rel","nofollow"),c(Bl,"href","https://arxiv.org/abs/2111.05972"),c(Bl,"rel","nofollow"),c(ql,"href","https://github.com/tunib-ai/oslo"),c(ql,"rel","nofollow"),c(rt,"id","zero-dppptp"),c(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rt,"href","#zero-dppptp"),c(Te,"class","relative group"),c(Pi,"href","#zero-data-parallelism"),c(Vl,"href","https://github.com/microsoft/Megatron-DeepSpeed"),c(Vl,"rel","nofollow"),c(Wl,"href","https://github.com/bigscience-workshop/Megatron-DeepSpeed"),c(Wl,"rel","nofollow"),c(Hl,"href","https://github.com/tunib-ai/oslo"),c(Hl,"rel","nofollow"),c(Yl,"href","https://arxiv.org/abs/2201.11990"),c(Yl,"rel","nofollow"),c(ct,"id","flexflow"),c(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ct,"href","#flexflow"),c(Ge,"class","relative group"),c(Jl,"href","https://github.com/flexflow/FlexFlow"),c(Jl,"rel","nofollow"),c(ea,"href","https://arxiv.org/abs/1807.05358"),c(ea,"rel","nofollow"),ie($i.src,pg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-flexflow.jpeg")||c($i,"src",pg),c($i,"alt","flex-flow-soap"),c(ta,"href","https://github.com/huggingface/transformers/blob/master/src/transformers/utils/fx.py"),c(ta,"rel","nofollow"),c(ut,"id","which-strategy-to-use-when"),c(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ut,"href","#which-strategy-to-use-when"),c(ke,"class","relative group"),c(oa,"href","https://deepspeed.readthedocs.io/en/latest/zero3.html#memory-centric-tiling"),c(oa,"rel","nofollow")},m(e,n){l(document.head,b),p(e,Oe,n),p(e,E,n),l(E,j),l(j,oe),v(S,oe,null),l(E,C),l(E,je),l(je,au),p(e,Mp,n),p(e,va,n),l(va,su),p(e,$p,n),v(Ae,e,n),p(e,Np,n),p(e,Pa,n),l(Pa,iu),p(e,zp,n),p(e,re,n),l(re,xe),l(xe,mo),v(gt,mo,null),l(re,ou),l(re,vo),l(vo,ru),p(e,Rp,n),p(e,wa,n),l(wa,nu),p(e,Cp,n),p(e,L,n),l(L,ya),l(ya,Po),l(Po,pu),l(ya,hu),l(L,fu),l(L,ba),l(ba,wo),l(wo,cu),l(ba,du),l(L,uu),l(L,_a),l(_a,yo),l(yo,mu),l(_a,vu),l(L,Pu),l(L,ga),l(ga,bo),l(bo,wu),l(ga,yu),l(L,bu),l(L,Ea),l(Ea,_o),l(_o,_u),l(Ea,gu),p(e,Zp,n),p(e,Da,n),l(Da,Eu),p(e,Bp,n),p(e,ne,n),l(ne,Me),l(Me,go),v(Et,go,null),l(ne,Du),l(ne,Eo),l(Eo,Lu),p(e,qp,n),p(e,La,n),l(La,Do),l(Do,Tu),p(e,Fp,n),p(e,Z,n),l(Z,Dt),l(Dt,Lo),l(Lo,Gu),l(Dt,ku),l(Dt,Lt),l(Lt,To),l(To,Uu),l(Lt,Iu),l(Lt,Go),l(Go,Su),l(Z,Ou),l(Z,Tt),l(Tt,ko),l(ko,ju),l(Tt,Au),l(Tt,pe),l(pe,Uo),l(Uo,Io),l(Io,xu),l(pe,Mu),l(pe,So),l(So,Oo),l(Oo,$u),l(pe,Nu),l(pe,he),l(he,jo),l(jo,zu),l(he,Ru),l(he,Ao),l(Ao,Cu),l(he,Zu),l(he,xo),l(xo,Bu),l(Z,qu),l(Z,Gt),l(Gt,Mo),l(Mo,Fu),l(Gt,Vu),l(Gt,kt),l(kt,$o),l($o,Wu),l(kt,Hu),l(kt,No),l(No,Yu),p(e,Vp,n),p(e,Ta,n),l(Ta,zo),l(zo,Xu),p(e,Wp,n),p(e,$e,n),l($e,Ut),l(Ut,Ro),l(Ro,Ku),l(Ut,Ju),l(Ut,It),l(It,Co),l(Co,Qu),l(It,em),l(It,Zo),l(Zo,tm),l($e,lm),l($e,St),l(St,Bo),l(Bo,am),l(St,sm),l(St,qo),l(qo,Fo),l(Fo,im),p(e,Hp,n),p(e,fe,n),l(fe,Ne),l(Ne,Vo),v(Ot,Vo,null),l(fe,om),l(fe,Wo),l(Wo,rm),p(e,Yp,n),p(e,A,n),l(A,nm),l(A,Ho),l(Ho,pm),l(A,hm),l(A,Yo),l(Yo,fm),l(A,cm),l(A,jt),l(jt,dm),l(A,um),p(e,Xp,n),p(e,ce,n),l(ce,ze),l(ze,Xo),v(At,Xo,null),l(ce,mm),l(ce,Ko),l(Ko,vm),p(e,Kp,n),p(e,de,n),l(de,Jo),l(Jo,Pm),l(de,wm),l(de,Qo),l(Qo,ym),l(de,bm),p(e,Jp,n),p(e,Re,n),l(Re,er),l(er,_m),l(Re,gm),l(Re,tr),l(tr,Em),p(e,Qp,n),p(e,Ga,n),l(Ga,Dm),p(e,eh,n),p(e,xt,n),l(xt,Mt),l(Mt,Lm),l(xt,Tm),p(e,th,n),p(e,Ce,n),l(Ce,lr),l(lr,Gm),l(Ce,km),l(Ce,ka),l(ka,Um),l(ka,$t),l($t,ar),l(ar,Im),l($t,Sm),l($t,Nt),l(Nt,Om),l(Nt,sr),l(sr,jm),l(Nt,Am),p(e,lh,n),p(e,zt,n),l(zt,Rt),l(Rt,xm),l(zt,Mm),p(e,ah,n),p(e,Ua,n),l(Ua,$m),p(e,sh,n),p(e,T,n),l(T,ir),l(ir,Nm),l(T,zm),l(T,or),l(or,Rm),l(T,Cm),l(T,Ct),l(Ct,Zm),l(Ct,rr),l(rr,Bm),l(Ct,qm),l(T,Fm),l(T,Ia),l(Ia,Vm),l(Ia,nr),l(nr,Wm),l(T,Hm),l(T,pr),l(pr,Ym),p(e,ih,n),p(e,Sa,n),l(Sa,Xm),p(e,oh,n),p(e,Ze,n),l(Ze,Km),l(Ze,Zt),l(Zt,Jm),l(Ze,Qm),p(e,rh,n),p(e,Oa,n),l(Oa,ev),p(e,nh,n),p(e,ja,n),l(ja,tv),p(e,ph,n),p(e,Aa,n),l(Aa,lv),p(e,hh,n),p(e,Be,n),l(Be,av),l(Be,Bt),l(Bt,sv),l(Be,iv),p(e,fh,n),p(e,xa,n),l(xa,ov),p(e,ch,n),p(e,qe,n),l(qe,hr),l(hr,ue),l(ue,Ma),l(Ma,rv),l(ue,nv),l(ue,fr),l(fr,pv),l(ue,hv),l(ue,$a),l($a,fv),l(qe,cv),l(qe,me),l(me,ve),l(ve,Na),l(Na,dv),l(ve,uv),l(ve,cr),l(cr,mv),l(ve,vv),l(ve,za),l(za,Pv),l(me,wv),l(me,Pe),l(Pe,Ra),l(Ra,yv),l(Pe,bv),l(Pe,dr),l(dr,_v),l(Pe,gv),l(Pe,Ca),l(Ca,Ev),l(me,Dv),l(me,we),l(we,Za),l(Za,Lv),l(we,Tv),l(we,ur),l(ur,Gv),l(we,kv),l(we,Ba),l(Ba,Uv),p(e,dh,n),p(e,qa,n),l(qa,Iv),p(e,uh,n),p(e,Fa,n),l(Fa,Sv),p(e,mh,n),p(e,Va,n),l(Va,Ov),p(e,vh,n),p(e,Wa,n),l(Wa,jv),p(e,Ph,n),p(e,qt,n),l(qt,mr),l(mr,Av),l(qt,xv),p(e,wh,n),v(Ft,e,n),p(e,yh,n),p(e,D,n),l(D,Mv),l(D,vr),l(vr,$v),l(D,Nv),l(D,Pr),l(Pr,zv),l(D,Rv),l(D,wr),l(wr,Cv),l(D,Zv),l(D,yr),l(yr,Bv),l(D,qv),l(D,br),l(br,Fv),p(e,bh,n),p(e,ye,n),l(ye,Fe),l(Fe,_r),v(Vt,_r,null),l(ye,Vv),l(ye,gr),l(gr,Wv),p(e,_h,n),p(e,be,n),l(be,Hv),l(be,Wt),l(Wt,Yv),l(be,Xv),l(be,Ha),p(e,gh,n),p(e,Ve,n),l(Ve,Kv),l(Ve,Er),l(Er,Jv),l(Ve,Qv),p(e,Eh,n),p(e,Ya,n),l(Ya,eP),p(e,Dh,n),v(Ht,e,n),p(e,Lh,n),p(e,Xa,n),l(Xa,tP),p(e,Th,n),p(e,Ka,n),l(Ka,lP),p(e,Gh,n),v(Yt,e,n),p(e,kh,n),p(e,Ja,n),l(Ja,aP),p(e,Uh,n),p(e,Qa,n),l(Qa,sP),p(e,Ih,n),v(Xt,e,n),p(e,Sh,n),p(e,es,n),l(es,iP),p(e,Oh,n),p(e,ts,n),l(ts,oP),p(e,jh,n),p(e,ls,n),l(ls,rP),p(e,Ah,n),p(e,as,n),l(as,nP),p(e,xh,n),p(e,ss,n),l(ss,pP),p(e,Mh,n),p(e,is,n),l(is,hP),p(e,$h,n),p(e,os,n),l(os,fP),p(e,Nh,n),p(e,rs,n),l(rs,cP),p(e,zh,n),p(e,ns,n),l(ns,dP),p(e,Rh,n),p(e,B,n),l(B,Dr),l(Dr,uP),l(B,mP),l(B,Lr),l(Lr,vP),l(B,PP),l(B,Tr),l(Tr,wP),p(e,Ch,n),p(e,ps,n),l(ps,yP),p(e,Zh,n),p(e,hs,n),l(hs,bP),p(e,Bh,n),p(e,fs,n),l(fs,_P),p(e,qh,n),p(e,cs,n),l(cs,gP),p(e,Fh,n),p(e,ds,n),l(ds,EP),p(e,Vh,n),p(e,q,n),l(q,us),l(us,Kt),l(Kt,DP),l(us,LP),l(q,TP),l(q,ms),l(ms,Jt),l(Jt,GP),l(ms,kP),l(q,UP),l(q,Gr),l(Gr,Qt),l(Qt,kr),l(kr,IP),l(Qt,SP),p(e,Wh,n),p(e,_e,n),l(_e,We),l(We,Ur),v(el,Ur,null),l(_e,OP),l(_e,Ir),l(Ir,jP),p(e,Hh,n),p(e,He,n),l(He,AP),l(He,Sr),l(Sr,xP),l(He,MP),p(e,Yh,n),p(e,vs,n),l(vs,$P),p(e,Xh,n),v(tl,e,n),p(e,Kh,n),p(e,Ps,n),l(Ps,NP),p(e,Jh,n),p(e,ws,n),l(ws,zP),p(e,Qh,n),p(e,ys,n),l(ys,RP),p(e,ef,n),p(e,bs,n),l(bs,CP),p(e,tf,n),p(e,Ye,n),l(Ye,Or),l(Or,ZP),l(Ye,BP),l(Ye,jr),l(jr,qP),p(e,lf,n),p(e,_s,n),l(_s,FP),p(e,af,n),p(e,Xe,n),l(Xe,VP),l(Xe,ll),l(ll,WP),l(Xe,HP),p(e,sf,n),p(e,gs,n),l(gs,Es),p(e,of,n),p(e,Ds,n),l(Ds,YP),p(e,rf,n),p(e,Ls,n),l(Ls,XP),p(e,nf,n),p(e,F,n),l(F,KP),l(F,Ar),l(Ar,JP),l(F,QP),l(F,xr),l(xr,e1),l(F,t1),p(e,pf,n),p(e,Ke,n),l(Ke,l1),l(Ke,Mr),l(Mr,a1),l(Ke,s1),p(e,hf,n),p(e,Je,n),l(Je,i1),l(Je,$r),l($r,o1),l(Je,r1),p(e,ff,n),p(e,V,n),l(V,n1),l(V,Nr),l(Nr,p1),l(V,h1),l(V,zr),l(zr,f1),l(V,c1),p(e,cf,n),p(e,Ts,n),l(Ts,d1),p(e,df,n),p(e,W,n),l(W,u1),l(W,Rr),l(Rr,m1),l(W,v1),l(W,Cr),l(Cr,P1),l(W,w1),p(e,uf,n),p(e,x,n),l(x,y1),l(x,Zr),l(Zr,b1),l(x,_1),l(x,Br),l(Br,g1),l(x,E1),l(x,qr),l(qr,D1),l(x,L1),p(e,mf,n),p(e,Gs,n),l(Gs,T1),p(e,vf,n),p(e,ks,n),l(ks,G1),p(e,Pf,n),p(e,M,n),l(M,Fr),l(Fr,k1),l(M,U1),l(M,Vr),l(Vr,I1),l(M,S1),l(M,Wr),l(Wr,O1),l(M,j1),l(M,Hr),l(Hr,A1),p(e,wf,n),p(e,Us,n),l(Us,x1),p(e,yf,n),p(e,Qe,n),l(Qe,Yr),l(Yr,M1),l(Qe,$1),l(Qe,Xr),l(Xr,N1),p(e,bf,n),p(e,Is,n),l(Is,z1),p(e,_f,n),p(e,$,n),l($,al),l(al,R1),l(al,Kr),l(Kr,C1),l(al,Z1),l($,B1),l($,Ss),l(Ss,q1),l(Ss,sl),l(sl,F1),l($,V1),l($,Jr),l(Jr,W1),l($,H1),l($,Qr),l(Qr,Y1),p(e,gf,n),p(e,Os,n),l(Os,X1),p(e,Ef,n),p(e,js,n),l(js,K1),p(e,Df,n),p(e,_,n),l(_,il),l(il,ol),l(ol,J1),l(il,Q1),l(il,rl),l(rl,ew),l(_,tw),l(_,en),l(en,nl),l(nl,lw),l(_,aw),l(_,tn),l(tn,pl),l(pl,sw),l(_,iw),l(_,As),l(As,hl),l(hl,ow),l(As,rw),l(_,nw),l(_,ln),l(ln,fl),l(fl,pw),l(_,hw),l(_,xs),l(xs,cl),l(cl,fw),l(xs,cw),l(_,dw),l(_,Ms),l(Ms,dl),l(dl,uw),l(Ms,mw),p(e,Lf,n),p(e,et,n),l(et,vw),l(et,an),l(an,Pw),l(et,ww),p(e,Tf,n),p(e,$s,n),l($s,yw),p(e,Gf,n),p(e,ge,n),l(ge,bw),l(ge,ul),l(ul,_w),l(ge,gw),l(ge,Ns),p(e,kf,n),p(e,zs,n),l(zs,Ew),p(e,Uf,n),p(e,Rs,n),l(Rs,Dw),p(e,If,n),p(e,tt,n),l(tt,Lw),l(tt,sn),l(sn,Tw),l(tt,Gw),p(e,Sf,n),p(e,Ee,n),l(Ee,lt),l(lt,on),v(ml,on,null),l(Ee,kw),l(Ee,rn),l(rn,Uw),p(e,Of,n),p(e,Cs,n),l(Cs,Iw),p(e,jf,n),p(e,H,n),l(H,Sw),l(H,vl),l(vl,Ow),l(H,jw),l(H,Pl),l(Pl,Aw),l(H,xw),p(e,Af,n),p(e,Y,n),l(Y,Mw),l(Y,nn),l(nn,$w),l(Y,Nw),l(Y,pn),l(pn,zw),l(Y,Rw),p(e,xf,n),p(e,G,n),l(G,Cw),l(G,hn),l(hn,Zw),l(G,Bw),l(G,fn),l(fn,qw),l(G,Fw),l(G,cn),l(cn,Vw),l(G,Ww),l(G,dn),l(dn,Hw),l(G,Yw),p(e,Mf,n),p(e,wl,n),l(wl,Xw),l(wl,Zs),p(e,$f,n),p(e,d,n),l(d,Kw),l(d,un),l(un,Jw),l(d,Qw),l(d,mn),l(mn,e2),l(d,t2),l(d,vn),l(vn,l2),l(d,a2),l(d,Pn),l(Pn,s2),l(d,i2),l(d,wn),l(wn,o2),l(d,r2),l(d,yn),l(yn,n2),l(d,p2),l(d,bn),l(bn,h2),l(d,f2),l(d,Bs),p(e,Nf,n),p(e,yl,n),l(yl,c2),l(yl,qs),p(e,zf,n),p(e,bl,n),l(bl,d2),l(bl,Fs),p(e,Rf,n),p(e,Vs,n),l(Vs,u2),p(e,Cf,n),p(e,X,n),l(X,m2),l(X,_l),l(_l,v2),l(X,P2),l(X,gl),l(gl,w2),l(X,y2),p(e,Zf,n),p(e,Ws,n),l(Ws,b2),p(e,Bf,n),p(e,Hs,n),l(Hs,_2),p(e,qf,n),p(e,Ys,n),l(Ys,Xs),l(Xs,g2),l(Xs,El),l(El,E2),p(e,Ff,n),p(e,Ks,n),l(Ks,D2),p(e,Vf,n),p(e,N,n),l(N,Js),l(Js,Dl),l(Dl,L2),l(Js,T2),l(N,G2),l(N,Qs),l(Qs,Ll),l(Ll,k2),l(Qs,U2),l(N,I2),l(N,ei),l(ei,Tl),l(Tl,S2),l(ei,O2),l(N,j2),l(N,ti),l(ti,Gl),l(Gl,A2),l(ti,x2),p(e,Wf,n),p(e,li,n),l(li,M2),p(e,Hf,n),p(e,K,n),l(K,_n),l(_n,$2),l(K,N2),l(K,kl),l(kl,z2),l(kl,Ul),l(Ul,R2),l(kl,C2),l(K,Z2),l(K,ai),l(ai,B2),l(ai,Il),l(Il,q2),p(e,Yf,n),p(e,De,n),l(De,at),l(at,gn),v(Sl,gn,null),l(De,F2),l(De,En),l(En,V2),p(e,Xf,n),p(e,st,n),l(st,W2),l(st,Ol),l(Ol,H2),l(st,Y2),p(e,Kf,n),p(e,si,n),l(si,ii),p(e,Jf,n),p(e,oi,n),l(oi,X2),p(e,Qf,n),p(e,ri,n),l(ri,K2),p(e,ec,n),p(e,ni,n),l(ni,J2),p(e,tc,n),p(e,k,n),l(k,Dn),l(Dn,jl),l(jl,Q2),l(k,ey),l(k,Ln),l(Ln,Al),l(Al,ty),l(k,ly),l(k,Tn),l(Tn,xl),l(xl,ay),l(k,sy),l(k,Gn),l(Gn,Ml),l(Ml,iy),l(k,oy),l(k,kn),l(kn,$l),l($l,ry),p(e,lc,n),p(e,pi,n),l(pi,ny),p(e,ac,n),p(e,Le,n),l(Le,it),l(it,Un),v(Nl,Un,null),l(Le,py),l(Le,In),l(In,hy),p(e,sc,n),p(e,hi,n),l(hi,fy),p(e,ic,n),p(e,fi,n),l(fi,ci),p(e,oc,n),p(e,ot,n),l(ot,cy),l(ot,zl),l(zl,dy),l(ot,uy),p(e,rc,n),p(e,di,n),l(di,my),p(e,nc,n),p(e,ui,n),l(ui,vy),p(e,pc,n),p(e,U,n),l(U,mi),l(mi,Rl),l(Rl,Py),l(mi,wy),l(U,yy),l(U,Sn),l(Sn,Cl),l(Cl,by),l(U,_y),l(U,On),l(On,Zl),l(Zl,gy),l(U,Ey),l(U,jn),l(jn,Bl),l(Bl,Dy),l(U,Ly),l(U,An),l(An,ql),l(ql,Ty),p(e,hc,n),p(e,vi,n),l(vi,Gy),p(e,fc,n),p(e,Te,n),l(Te,rt),l(rt,xn),v(Fl,xn,null),l(Te,ky),l(Te,Mn),l(Mn,Uy),p(e,cc,n),p(e,nt,n),l(nt,Iy),l(nt,Pi),l(Pi,Sy),l(nt,Oy),p(e,dc,n),p(e,wi,n),l(wi,jy),p(e,uc,n),p(e,yi,n),l(yi,Ay),p(e,mc,n),p(e,pt,n),l(pt,xy),l(pt,$n),l($n,My),l(pt,$y),p(e,vc,n),p(e,bi,n),l(bi,Ny),p(e,Pc,n),p(e,_i,n),l(_i,zy),p(e,wc,n),p(e,gi,n),l(gi,Ry),p(e,yc,n),p(e,ht,n),l(ht,ft),l(ft,Vl),l(Vl,Cy),l(ft,Zy),l(ft,Wl),l(Wl,By),l(ft,qy),l(ht,Fy),l(ht,Nn),l(Nn,Hl),l(Hl,Vy),p(e,bc,n),p(e,Ei,n),l(Ei,Wy),p(e,_c,n),p(e,Di,n),l(Di,zn),l(zn,Yl),l(Yl,Hy),p(e,gc,n),p(e,Li,n),l(Li,Yy),p(e,Ec,n),p(e,Ge,n),l(Ge,ct),l(ct,Rn),v(Xl,Rn,null),l(Ge,Xy),l(Ge,Cn),l(Cn,Ky),p(e,Dc,n),p(e,Kl,n),l(Kl,Jl),l(Jl,Jy),l(Kl,Qy),p(e,Lc,n),p(e,Ql,n),l(Ql,eb),l(Ql,ea),l(ea,tb),p(e,Tc,n),p(e,Ti,n),l(Ti,lb),p(e,Gc,n),p(e,z,n),l(z,Zn),l(Zn,ab),l(z,sb),l(z,Bn),l(Bn,ib),l(z,ob),l(z,qn),l(qn,rb),l(z,nb),l(z,Fn),l(Fn,pb),p(e,kc,n),p(e,Gi,n),l(Gi,hb),p(e,Uc,n),p(e,ki,n),l(ki,Vn),l(Vn,fb),p(e,Ic,n),p(e,Ui,n),l(Ui,cb),p(e,Sc,n),p(e,Ii,n),l(Ii,Wn),l(Wn,db),p(e,Oc,n),p(e,Si,n),l(Si,ub),p(e,jc,n),p(e,Oi,n),l(Oi,Hn),l(Hn,mb),p(e,Ac,n),p(e,ji,n),l(ji,vb),p(e,xc,n),p(e,Ai,n),l(Ai,Yn),l(Yn,Pb),p(e,Mc,n),p(e,xi,n),l(xi,wb),p(e,$c,n),p(e,Mi,n),l(Mi,$i),p(e,Nc,n),p(e,Ni,n),l(Ni,yb),p(e,zc,n),p(e,zi,n),l(zi,bb),p(e,Rc,n),p(e,Ri,n),l(Ri,_b),p(e,Cc,n),p(e,dt,n),l(dt,gb),l(dt,ta),l(ta,Eb),l(dt,Db),p(e,Zc,n),p(e,ke,n),l(ke,ut),l(ut,Xn),v(la,Xn,null),l(ke,Lb),l(ke,Kn),l(Kn,Tb),p(e,Bc,n),p(e,Ci,n),l(Ci,Gb),p(e,qc,n),p(e,Zi,n),l(Zi,Jn),l(Jn,kb),p(e,Fc,n),p(e,J,n),l(J,aa),l(aa,Qn),l(Qn,Ub),l(aa,Ib),l(aa,ep),l(ep,tp),l(tp,Sb),l(J,Ob),l(J,sa),l(sa,lp),l(lp,jb),l(sa,Ab),l(sa,ia),l(ia,ap),l(ap,xb),l(ia,Mb),l(ia,sp),l(sp,$b),l(J,Nb),l(J,ip),l(ip,op),l(op,zb),p(e,Vc,n),p(e,Bi,n),l(Bi,Ue),l(Ue,Rb),l(Ue,oa),l(oa,Cb),l(Ue,Zb),l(Ue,rp),l(rp,Bb),l(Ue,qb),p(e,Wc,n),p(e,qi,n),l(qi,np),l(np,Fb),p(e,Hc,n),p(e,Q,n),l(Q,ra),l(ra,pp),l(pp,Vb),l(ra,Wb),l(ra,na),l(na,hp),l(hp,Hb),l(na,Yb),l(na,fp),l(fp,Xb),l(Q,Kb),l(Q,pa),l(pa,cp),l(cp,Jb),l(pa,Qb),l(pa,Ie),l(Ie,dp),l(dp,up),l(up,e_),l(Ie,t_),l(Ie,mp),l(mp,vp),l(vp,l_),l(Ie,a_),l(Ie,Se),l(Se,Pp),l(Pp,s_),l(Se,i_),l(Se,wp),l(wp,o_),l(Se,r_),l(Se,yp),l(yp,n_),l(Q,p_),l(Q,ha),l(ha,bp),l(bp,h_),l(ha,f_),l(ha,fa),l(fa,_p),l(_p,c_),l(fa,d_),l(fa,gp),l(gp,u_),p(e,Yc,n),p(e,Fi,n),l(Fi,Ep),l(Ep,m_),p(e,Xc,n),p(e,mt,n),l(mt,ca),l(ca,Dp),l(Dp,v_),l(ca,P_),l(ca,da),l(da,Lp),l(Lp,w_),l(da,y_),l(da,Tp),l(Tp,b_),l(mt,__),l(mt,ua),l(ua,Gp),l(Gp,g_),l(ua,E_),l(ua,kp),l(kp,Up),l(Up,D_),Kc=!0},p(e,[n]){const ma={};n&2&&(ma.$$scope={dirty:n,ctx:e}),Ae.$set(ma)},i(e){Kc||(P(S.$$.fragment,e),P(Ae.$$.fragment,e),P(gt.$$.fragment,e),P(Et.$$.fragment,e),P(Ot.$$.fragment,e),P(At.$$.fragment,e),P(Ft.$$.fragment,e),P(Vt.$$.fragment,e),P(Ht.$$.fragment,e),P(Yt.$$.fragment,e),P(Xt.$$.fragment,e),P(el.$$.fragment,e),P(tl.$$.fragment,e),P(ml.$$.fragment,e),P(Sl.$$.fragment,e),P(Nl.$$.fragment,e),P(Fl.$$.fragment,e),P(Xl.$$.fragment,e),P(la.$$.fragment,e),Kc=!0)},o(e){w(S.$$.fragment,e),w(Ae.$$.fragment,e),w(gt.$$.fragment,e),w(Et.$$.fragment,e),w(Ot.$$.fragment,e),w(At.$$.fragment,e),w(Ft.$$.fragment,e),w(Vt.$$.fragment,e),w(Ht.$$.fragment,e),w(Yt.$$.fragment,e),w(Xt.$$.fragment,e),w(el.$$.fragment,e),w(tl.$$.fragment,e),w(ml.$$.fragment,e),w(Sl.$$.fragment,e),w(Nl.$$.fragment,e),w(Fl.$$.fragment,e),w(Xl.$$.fragment,e),w(la.$$.fragment,e),Kc=!1},d(e){t(b),e&&t(Oe),e&&t(E),y(S),e&&t(Mp),e&&t(va),e&&t($p),y(Ae,e),e&&t(Np),e&&t(Pa),e&&t(zp),e&&t(re),y(gt),e&&t(Rp),e&&t(wa),e&&t(Cp),e&&t(L),e&&t(Zp),e&&t(Da),e&&t(Bp),e&&t(ne),y(Et),e&&t(qp),e&&t(La),e&&t(Fp),e&&t(Z),e&&t(Vp),e&&t(Ta),e&&t(Wp),e&&t($e),e&&t(Hp),e&&t(fe),y(Ot),e&&t(Yp),e&&t(A),e&&t(Xp),e&&t(ce),y(At),e&&t(Kp),e&&t(de),e&&t(Jp),e&&t(Re),e&&t(Qp),e&&t(Ga),e&&t(eh),e&&t(xt),e&&t(th),e&&t(Ce),e&&t(lh),e&&t(zt),e&&t(ah),e&&t(Ua),e&&t(sh),e&&t(T),e&&t(ih),e&&t(Sa),e&&t(oh),e&&t(Ze),e&&t(rh),e&&t(Oa),e&&t(nh),e&&t(ja),e&&t(ph),e&&t(Aa),e&&t(hh),e&&t(Be),e&&t(fh),e&&t(xa),e&&t(ch),e&&t(qe),e&&t(dh),e&&t(qa),e&&t(uh),e&&t(Fa),e&&t(mh),e&&t(Va),e&&t(vh),e&&t(Wa),e&&t(Ph),e&&t(qt),e&&t(wh),y(Ft,e),e&&t(yh),e&&t(D),e&&t(bh),e&&t(ye),y(Vt),e&&t(_h),e&&t(be),e&&t(gh),e&&t(Ve),e&&t(Eh),e&&t(Ya),e&&t(Dh),y(Ht,e),e&&t(Lh),e&&t(Xa),e&&t(Th),e&&t(Ka),e&&t(Gh),y(Yt,e),e&&t(kh),e&&t(Ja),e&&t(Uh),e&&t(Qa),e&&t(Ih),y(Xt,e),e&&t(Sh),e&&t(es),e&&t(Oh),e&&t(ts),e&&t(jh),e&&t(ls),e&&t(Ah),e&&t(as),e&&t(xh),e&&t(ss),e&&t(Mh),e&&t(is),e&&t($h),e&&t(os),e&&t(Nh),e&&t(rs),e&&t(zh),e&&t(ns),e&&t(Rh),e&&t(B),e&&t(Ch),e&&t(ps),e&&t(Zh),e&&t(hs),e&&t(Bh),e&&t(fs),e&&t(qh),e&&t(cs),e&&t(Fh),e&&t(ds),e&&t(Vh),e&&t(q),e&&t(Wh),e&&t(_e),y(el),e&&t(Hh),e&&t(He),e&&t(Yh),e&&t(vs),e&&t(Xh),y(tl,e),e&&t(Kh),e&&t(Ps),e&&t(Jh),e&&t(ws),e&&t(Qh),e&&t(ys),e&&t(ef),e&&t(bs),e&&t(tf),e&&t(Ye),e&&t(lf),e&&t(_s),e&&t(af),e&&t(Xe),e&&t(sf),e&&t(gs),e&&t(of),e&&t(Ds),e&&t(rf),e&&t(Ls),e&&t(nf),e&&t(F),e&&t(pf),e&&t(Ke),e&&t(hf),e&&t(Je),e&&t(ff),e&&t(V),e&&t(cf),e&&t(Ts),e&&t(df),e&&t(W),e&&t(uf),e&&t(x),e&&t(mf),e&&t(Gs),e&&t(vf),e&&t(ks),e&&t(Pf),e&&t(M),e&&t(wf),e&&t(Us),e&&t(yf),e&&t(Qe),e&&t(bf),e&&t(Is),e&&t(_f),e&&t($),e&&t(gf),e&&t(Os),e&&t(Ef),e&&t(js),e&&t(Df),e&&t(_),e&&t(Lf),e&&t(et),e&&t(Tf),e&&t($s),e&&t(Gf),e&&t(ge),e&&t(kf),e&&t(zs),e&&t(Uf),e&&t(Rs),e&&t(If),e&&t(tt),e&&t(Sf),e&&t(Ee),y(ml),e&&t(Of),e&&t(Cs),e&&t(jf),e&&t(H),e&&t(Af),e&&t(Y),e&&t(xf),e&&t(G),e&&t(Mf),e&&t(wl),e&&t($f),e&&t(d),e&&t(Nf),e&&t(yl),e&&t(zf),e&&t(bl),e&&t(Rf),e&&t(Vs),e&&t(Cf),e&&t(X),e&&t(Zf),e&&t(Ws),e&&t(Bf),e&&t(Hs),e&&t(qf),e&&t(Ys),e&&t(Ff),e&&t(Ks),e&&t(Vf),e&&t(N),e&&t(Wf),e&&t(li),e&&t(Hf),e&&t(K),e&&t(Yf),e&&t(De),y(Sl),e&&t(Xf),e&&t(st),e&&t(Kf),e&&t(si),e&&t(Jf),e&&t(oi),e&&t(Qf),e&&t(ri),e&&t(ec),e&&t(ni),e&&t(tc),e&&t(k),e&&t(lc),e&&t(pi),e&&t(ac),e&&t(Le),y(Nl),e&&t(sc),e&&t(hi),e&&t(ic),e&&t(fi),e&&t(oc),e&&t(ot),e&&t(rc),e&&t(di),e&&t(nc),e&&t(ui),e&&t(pc),e&&t(U),e&&t(hc),e&&t(vi),e&&t(fc),e&&t(Te),y(Fl),e&&t(cc),e&&t(nt),e&&t(dc),e&&t(wi),e&&t(uc),e&&t(yi),e&&t(mc),e&&t(pt),e&&t(vc),e&&t(bi),e&&t(Pc),e&&t(_i),e&&t(wc),e&&t(gi),e&&t(yc),e&&t(ht),e&&t(bc),e&&t(Ei),e&&t(_c),e&&t(Di),e&&t(gc),e&&t(Li),e&&t(Ec),e&&t(Ge),y(Xl),e&&t(Dc),e&&t(Kl),e&&t(Lc),e&&t(Ql),e&&t(Tc),e&&t(Ti),e&&t(Gc),e&&t(z),e&&t(kc),e&&t(Gi),e&&t(Uc),e&&t(ki),e&&t(Ic),e&&t(Ui),e&&t(Sc),e&&t(Ii),e&&t(Oc),e&&t(Si),e&&t(jc),e&&t(Oi),e&&t(Ac),e&&t(ji),e&&t(xc),e&&t(Ai),e&&t(Mc),e&&t(xi),e&&t($c),e&&t(Mi),e&&t(Nc),e&&t(Ni),e&&t(zc),e&&t(zi),e&&t(Rc),e&&t(Ri),e&&t(Cc),e&&t(dt),e&&t(Zc),e&&t(ke),y(la),e&&t(Bc),e&&t(Ci),e&&t(qc),e&&t(Zi),e&&t(Fc),e&&t(J),e&&t(Vc),e&&t(Bi),e&&t(Wc),e&&t(qi),e&&t(Hc),e&&t(Q),e&&t(Yc),e&&t(Fi),e&&t(Xc),e&&t(mt)}}}const B6={local:"efficient-training-on-multiple-gpus",sections:[{local:"concepts",title:"Concepts"},{local:"scalability-strategy",title:"Scalability Strategy"},{local:"data-parallelism",sections:[{local:"dp-vs-ddp",title:"DP vs DDP"}],title:"Data Parallelism"},{local:"zero-data-parallelism",title:"ZeRO Data Parallelism"},{local:"naive-model-parallelism-vertical-and-pipeline-parallelism",title:"Naive Model Parallelism (Vertical) and Pipeline Parallelism"},{local:"tensor-parallelism",title:"Tensor Parallelism"},{local:"dppp",title:"DP+PP"},{local:"dppptp",title:"DP+PP+TP"},{local:"zero-dppptp",title:"ZeRO DP+PP+TP"},{local:"flexflow",title:"FlexFlow"},{local:"which-strategy-to-use-when",title:"Which Strategy To Use When"}],title:"Efficient Training on Multiple GPUs"};function q6(xp){return z6(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Y6 extends x6{constructor(b){super();M6(this,b,q6,Z6,$6,{})}}export{Y6 as default,B6 as metadata};
