import{S as SLt,i as RLt,s as PLt,e as a,k as l,w as F,t as o,M as BLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ILt,L as I}from"../../chunks/vendor-316217a5.js";import{T as yGr}from"../../chunks/Tip-27e9fea0.js";import{D as R}from"../../chunks/Docstring-1fe4a33a.js";import{C as P}from"../../chunks/CodeBlock-8418a95e.js";import{I as re}from"../../chunks/IconCopyLink-40460835.js";import{E as B}from"../../chunks/ExampleCodeBlock-32fc0037.js";function qLt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,f0,pf,je,We,gi,yn,m0,Ln,xn,g0,hi,$n,h0,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),f0=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),m0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),g0=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),h0=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var S$=s(p);m=r(S$,"NewModelConfig"),S$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var R$=s(ci);hf=r(R$,"model_type"),R$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var P$=s(fi);mi=r(P$,'"new-model"'),P$.forEach(t),f0=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),m0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var B$=s(Ln);xn=r(B$,"PreTrainedModel"),B$.forEach(t),g0=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),h0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var I$=s(pi);_f=r(I$,"NewModelConfig"),I$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,f0),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,m0),e(je,Ln),e(Ln,xn),e(je,g0),e(je,hi),e(hi,$n),e(je,h0),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function NLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function GLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function VLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,f0,pf,je,We,gi,yn,m0,Ln,xn,g0,hi,$n,h0,pi,_f,Ca,Qe,Ae,S$,_i,R$,P$,Eo,wa,B$,uf,I$,hGe,tqe,ui,bf,Pee,p0,pGe,Bee,_Ge,aqe,kn,uGe,Iee,bGe,vGe,qee,FGe,TGe,nqe,_0,sqe,q$,MGe,lqe,vf,iqe,bi,Ff,Nee,u0,EGe,jee,CGe,dqe,Co,b0,wGe,v0,AGe,N$,yGe,LGe,xGe,F0,$Ge,Dee,kGe,SGe,RGe,Er,T0,PGe,Gee,BGe,IGe,vi,qGe,Oee,NGe,jGe,Vee,DGe,GGe,OGe,A,Tf,Xee,VGe,XGe,j$,zGe,WGe,QGe,Mf,zee,HGe,UGe,D$,JGe,YGe,KGe,Ef,Wee,ZGe,eOe,G$,oOe,rOe,tOe,Cf,Qee,aOe,nOe,O$,sOe,lOe,iOe,wf,Hee,dOe,cOe,V$,fOe,mOe,gOe,Af,Uee,hOe,pOe,X$,_Oe,uOe,bOe,yf,Jee,vOe,FOe,z$,TOe,MOe,EOe,Lf,Yee,COe,wOe,W$,AOe,yOe,LOe,xf,Kee,xOe,$Oe,Q$,kOe,SOe,ROe,$f,Zee,POe,BOe,H$,IOe,qOe,NOe,kf,eoe,jOe,DOe,U$,GOe,OOe,VOe,Sf,ooe,XOe,zOe,J$,WOe,QOe,HOe,Rf,roe,UOe,JOe,Y$,YOe,KOe,ZOe,Pf,toe,eVe,oVe,K$,rVe,tVe,aVe,Bf,aoe,nVe,sVe,Z$,lVe,iVe,dVe,If,noe,cVe,fVe,ek,mVe,gVe,hVe,qf,soe,pVe,_Ve,ok,uVe,bVe,vVe,Nf,loe,FVe,TVe,rk,MVe,EVe,CVe,jf,ioe,wVe,AVe,tk,yVe,LVe,xVe,Df,doe,$Ve,kVe,ak,SVe,RVe,PVe,Gf,coe,BVe,IVe,nk,qVe,NVe,jVe,Of,foe,DVe,GVe,sk,OVe,VVe,XVe,Vf,moe,zVe,WVe,lk,QVe,HVe,UVe,Xf,goe,JVe,YVe,ik,KVe,ZVe,eXe,zf,hoe,oXe,rXe,dk,tXe,aXe,nXe,Wf,poe,sXe,lXe,ck,iXe,dXe,cXe,Qf,_oe,fXe,mXe,fk,gXe,hXe,pXe,Hf,uoe,_Xe,uXe,mk,bXe,vXe,FXe,Uf,boe,TXe,MXe,gk,EXe,CXe,wXe,Jf,voe,AXe,yXe,hk,LXe,xXe,$Xe,Yf,Foe,kXe,SXe,pk,RXe,PXe,BXe,Kf,Toe,IXe,qXe,_k,NXe,jXe,DXe,Zf,Moe,GXe,OXe,uk,VXe,XXe,zXe,em,Eoe,WXe,QXe,bk,HXe,UXe,JXe,om,Coe,YXe,KXe,vk,ZXe,eze,oze,rm,woe,rze,tze,Fk,aze,nze,sze,tm,Aoe,lze,ize,Tk,dze,cze,fze,am,yoe,mze,gze,Mk,hze,pze,_ze,nm,Loe,uze,bze,Ek,vze,Fze,Tze,sm,xoe,Mze,Eze,Ck,Cze,wze,Aze,lm,$oe,yze,Lze,wk,xze,$ze,kze,im,koe,Sze,Rze,Ak,Pze,Bze,Ize,dm,Soe,qze,Nze,yk,jze,Dze,Gze,cm,Roe,Oze,Vze,Lk,Xze,zze,Wze,fm,Poe,Qze,Hze,xk,Uze,Jze,Yze,mm,Boe,Kze,Zze,$k,eWe,oWe,rWe,gm,Ioe,tWe,aWe,kk,nWe,sWe,lWe,hm,qoe,iWe,dWe,Sk,cWe,fWe,mWe,pm,Noe,gWe,hWe,Rk,pWe,_We,uWe,_m,joe,bWe,vWe,Pk,FWe,TWe,MWe,um,Doe,EWe,CWe,Bk,wWe,AWe,yWe,bm,Goe,LWe,xWe,Ik,$We,kWe,SWe,vm,Ooe,RWe,PWe,qk,BWe,IWe,qWe,Fm,Voe,NWe,jWe,Nk,DWe,GWe,OWe,Tm,Xoe,VWe,XWe,jk,zWe,WWe,QWe,Mm,zoe,HWe,UWe,Dk,JWe,YWe,KWe,Em,Woe,ZWe,eQe,Gk,oQe,rQe,tQe,Cm,Qoe,aQe,nQe,Ok,sQe,lQe,iQe,wm,Hoe,dQe,cQe,Vk,fQe,mQe,gQe,Am,Uoe,hQe,pQe,Xk,_Qe,uQe,bQe,ym,Joe,vQe,FQe,zk,TQe,MQe,EQe,Lm,Yoe,CQe,wQe,Wk,AQe,yQe,LQe,xm,Koe,xQe,$Qe,Qk,kQe,SQe,RQe,$m,Zoe,PQe,BQe,Hk,IQe,qQe,NQe,km,ere,jQe,DQe,Uk,GQe,OQe,VQe,Sm,ore,XQe,zQe,Jk,WQe,QQe,HQe,Rm,rre,UQe,JQe,Yk,YQe,KQe,ZQe,Pm,tre,eHe,oHe,Kk,rHe,tHe,aHe,Bm,are,nHe,sHe,Zk,lHe,iHe,dHe,Im,nre,cHe,fHe,eS,mHe,gHe,hHe,qm,sre,pHe,_He,oS,uHe,bHe,vHe,Nm,lre,FHe,THe,rS,MHe,EHe,CHe,jm,ire,wHe,AHe,tS,yHe,LHe,xHe,Dm,dre,$He,kHe,aS,SHe,RHe,PHe,Gm,cre,BHe,IHe,nS,qHe,NHe,jHe,Om,fre,DHe,GHe,sS,OHe,VHe,XHe,Vm,mre,zHe,WHe,lS,QHe,HHe,UHe,Xm,gre,JHe,YHe,iS,KHe,ZHe,eUe,zm,hre,oUe,rUe,dS,tUe,aUe,nUe,Wm,pre,sUe,lUe,cS,iUe,dUe,cUe,Qm,_re,fUe,mUe,fS,gUe,hUe,pUe,Hm,ure,_Ue,uUe,mS,bUe,vUe,FUe,Um,bre,TUe,MUe,gS,EUe,CUe,wUe,Jm,vre,AUe,yUe,hS,LUe,xUe,$Ue,Ym,Fre,kUe,SUe,pS,RUe,PUe,BUe,Km,Tre,IUe,qUe,_S,NUe,jUe,DUe,Zm,Mre,GUe,OUe,uS,VUe,XUe,zUe,eg,Ere,WUe,QUe,bS,HUe,UUe,JUe,og,Cre,YUe,KUe,vS,ZUe,eJe,oJe,rg,wre,rJe,tJe,FS,aJe,nJe,sJe,tg,Are,lJe,iJe,TS,dJe,cJe,fJe,ag,yre,mJe,gJe,MS,hJe,pJe,_Je,ng,Lre,uJe,bJe,ES,vJe,FJe,TJe,sg,xre,MJe,EJe,CS,CJe,wJe,AJe,lg,$re,yJe,LJe,wS,xJe,$Je,kJe,ig,kre,SJe,RJe,AS,PJe,BJe,IJe,dg,Sre,qJe,NJe,yS,jJe,DJe,GJe,cg,Rre,OJe,VJe,LS,XJe,zJe,WJe,fg,Pre,QJe,HJe,xS,UJe,JJe,YJe,mg,Bre,KJe,ZJe,$S,eYe,oYe,rYe,gg,Ire,tYe,aYe,kS,nYe,sYe,lYe,hg,qre,iYe,dYe,SS,cYe,fYe,mYe,pg,Nre,gYe,hYe,RS,pYe,_Ye,uYe,_g,jre,bYe,vYe,PS,FYe,TYe,MYe,ug,Dre,EYe,CYe,BS,wYe,AYe,yYe,bg,Gre,LYe,xYe,IS,$Ye,kYe,SYe,vg,Ore,RYe,PYe,qS,BYe,IYe,qYe,Fg,NYe,Tg,M0,jYe,Vre,DYe,cqe,Fi,Mg,Xre,E0,GYe,zre,OYe,fqe,wo,C0,VYe,w0,XYe,NS,zYe,WYe,QYe,A0,HYe,Wre,UYe,JYe,YYe,Cr,y0,KYe,Qre,ZYe,eKe,Aa,oKe,Hre,rKe,tKe,Ure,aKe,nKe,Jre,sKe,lKe,iKe,k,Sn,Yre,dKe,cKe,jS,fKe,mKe,DS,gKe,hKe,pKe,Rn,Kre,_Ke,uKe,GS,bKe,vKe,OS,FKe,TKe,MKe,Pn,Zre,EKe,CKe,VS,wKe,AKe,XS,yKe,LKe,xKe,Eg,ete,$Ke,kKe,zS,SKe,RKe,PKe,Bn,ote,BKe,IKe,WS,qKe,NKe,QS,jKe,DKe,GKe,Cg,rte,OKe,VKe,HS,XKe,zKe,WKe,wg,tte,QKe,HKe,US,UKe,JKe,YKe,Ag,ate,KKe,ZKe,JS,eZe,oZe,rZe,In,nte,tZe,aZe,YS,nZe,sZe,KS,lZe,iZe,dZe,qn,ste,cZe,fZe,ZS,mZe,gZe,eR,hZe,pZe,_Ze,Nn,lte,uZe,bZe,oR,vZe,FZe,rR,TZe,MZe,EZe,yg,ite,CZe,wZe,tR,AZe,yZe,LZe,Lg,dte,xZe,$Ze,aR,kZe,SZe,RZe,jn,cte,PZe,BZe,nR,IZe,qZe,sR,NZe,jZe,DZe,xg,fte,GZe,OZe,lR,VZe,XZe,zZe,Dn,mte,WZe,QZe,iR,HZe,UZe,dR,JZe,YZe,KZe,Gn,gte,ZZe,eeo,cR,oeo,reo,fR,teo,aeo,neo,On,hte,seo,leo,mR,ieo,deo,gR,ceo,feo,meo,$g,pte,geo,heo,hR,peo,_eo,ueo,Vn,_te,beo,veo,pR,Feo,Teo,_R,Meo,Eeo,Ceo,Xn,ute,weo,Aeo,uR,yeo,Leo,bR,xeo,$eo,keo,zn,bte,Seo,Reo,vR,Peo,Beo,FR,Ieo,qeo,Neo,Wn,vte,jeo,Deo,TR,Geo,Oeo,MR,Veo,Xeo,zeo,Qn,Fte,Weo,Qeo,ER,Heo,Ueo,CR,Jeo,Yeo,Keo,Hn,Tte,Zeo,eoo,wR,ooo,roo,AR,too,aoo,noo,kg,Mte,soo,loo,yR,ioo,doo,coo,Un,Ete,foo,moo,LR,goo,hoo,xR,poo,_oo,uoo,Sg,Cte,boo,voo,$R,Foo,Too,Moo,Jn,wte,Eoo,Coo,kR,woo,Aoo,SR,yoo,Loo,xoo,Yn,Ate,$oo,koo,RR,Soo,Roo,PR,Poo,Boo,Ioo,Kn,yte,qoo,Noo,BR,joo,Doo,IR,Goo,Ooo,Voo,Zn,Lte,Xoo,zoo,qR,Woo,Qoo,NR,Hoo,Uoo,Joo,es,xte,Yoo,Koo,jR,Zoo,ero,DR,oro,rro,tro,Rg,$te,aro,nro,GR,sro,lro,iro,os,kte,dro,cro,OR,fro,mro,VR,gro,hro,pro,rs,Ste,_ro,uro,XR,bro,vro,zR,Fro,Tro,Mro,ts,Rte,Ero,Cro,WR,wro,Aro,QR,yro,Lro,xro,as,Pte,$ro,kro,HR,Sro,Rro,UR,Pro,Bro,Iro,ns,Bte,qro,Nro,JR,jro,Dro,YR,Gro,Oro,Vro,ss,Ite,Xro,zro,KR,Wro,Qro,ZR,Hro,Uro,Jro,Pg,qte,Yro,Kro,eP,Zro,eto,oto,ls,Nte,rto,tto,oP,ato,nto,rP,sto,lto,ito,Bg,jte,dto,cto,tP,fto,mto,gto,Ig,Dte,hto,pto,aP,_to,uto,bto,is,Gte,vto,Fto,nP,Tto,Mto,sP,Eto,Cto,wto,ds,Ote,Ato,yto,lP,Lto,xto,iP,$to,kto,Sto,cs,Vte,Rto,Pto,dP,Bto,Ito,cP,qto,Nto,jto,qg,Xte,Dto,Gto,fP,Oto,Vto,Xto,fs,zte,zto,Wto,mP,Qto,Hto,gP,Uto,Jto,Yto,ms,Wte,Kto,Zto,hP,eao,oao,pP,rao,tao,aao,gs,Qte,nao,sao,_P,lao,iao,uP,dao,cao,fao,hs,Hte,mao,gao,bP,hao,pao,vP,_ao,uao,bao,ps,Ute,vao,Fao,FP,Tao,Mao,TP,Eao,Cao,wao,Ng,Jte,Aao,yao,MP,Lao,xao,$ao,_s,Yte,kao,Sao,EP,Rao,Pao,CP,Bao,Iao,qao,jg,Kte,Nao,jao,wP,Dao,Gao,Oao,Dg,Zte,Vao,Xao,AP,zao,Wao,Qao,Gg,eae,Hao,Uao,yP,Jao,Yao,Kao,Og,oae,Zao,eno,LP,ono,rno,tno,us,rae,ano,nno,xP,sno,lno,$P,ino,dno,cno,Vg,tae,fno,mno,kP,gno,hno,pno,bs,aae,_no,uno,SP,bno,vno,RP,Fno,Tno,Mno,vs,nae,Eno,Cno,PP,wno,Ano,BP,yno,Lno,xno,Fs,sae,$no,kno,IP,Sno,Rno,qP,Pno,Bno,Ino,Ts,lae,qno,Nno,NP,jno,Dno,jP,Gno,Ono,Vno,Ms,iae,Xno,zno,DP,Wno,Qno,GP,Hno,Uno,Jno,Es,dae,Yno,Kno,OP,Zno,eso,VP,oso,rso,tso,Xg,cae,aso,nso,XP,sso,lso,iso,zg,fae,dso,cso,zP,fso,mso,gso,Cs,mae,hso,pso,WP,_so,uso,QP,bso,vso,Fso,ws,gae,Tso,Mso,HP,Eso,Cso,UP,wso,Aso,yso,As,hae,Lso,xso,JP,$so,kso,YP,Sso,Rso,Pso,Wg,pae,Bso,Iso,KP,qso,Nso,jso,Qg,_ae,Dso,Gso,ZP,Oso,Vso,Xso,Hg,uae,zso,Wso,eB,Qso,Hso,Uso,ys,bae,Jso,Yso,oB,Kso,Zso,rB,elo,olo,rlo,Ug,vae,tlo,alo,tB,nlo,slo,llo,Jg,Fae,ilo,dlo,aB,clo,flo,mlo,Yg,Tae,glo,hlo,nB,plo,_lo,ulo,Ls,Mae,blo,vlo,sB,Flo,Tlo,lB,Mlo,Elo,Clo,Kg,Eae,wlo,Alo,iB,ylo,Llo,xlo,Zg,Cae,$lo,klo,dB,Slo,Rlo,Plo,xs,wae,Blo,Ilo,cB,qlo,Nlo,fB,jlo,Dlo,Glo,$s,Aae,Olo,Vlo,mB,Xlo,zlo,gB,Wlo,Qlo,Hlo,ks,yae,Ulo,Jlo,hB,Ylo,Klo,pB,Zlo,eio,oio,Ss,Lae,rio,tio,_B,aio,nio,uB,sio,lio,iio,eh,dio,oh,L0,cio,xae,fio,mqe,Ti,rh,$ae,x0,mio,kae,gio,gqe,Ao,$0,hio,k0,pio,bB,_io,uio,bio,S0,vio,Sae,Fio,Tio,Mio,He,R0,Eio,Rae,Cio,wio,ya,Aio,Pae,yio,Lio,Bae,xio,$io,Iae,kio,Sio,Rio,K,th,qae,Pio,Bio,vB,Iio,qio,Nio,ah,Nae,jio,Dio,FB,Gio,Oio,Vio,nh,jae,Xio,zio,TB,Wio,Qio,Hio,sh,Dae,Uio,Jio,MB,Yio,Kio,Zio,lh,Gae,edo,odo,EB,rdo,tdo,ado,ih,Oae,ndo,sdo,CB,ldo,ido,ddo,dh,Vae,cdo,fdo,wB,mdo,gdo,hdo,ch,Xae,pdo,_do,AB,udo,bdo,vdo,fh,zae,Fdo,Tdo,yB,Mdo,Edo,Cdo,mh,Wae,wdo,Ado,LB,ydo,Ldo,xdo,gh,Qae,$do,kdo,xB,Sdo,Rdo,Pdo,hh,Hae,Bdo,Ido,$B,qdo,Ndo,jdo,ph,Uae,Ddo,Gdo,kB,Odo,Vdo,Xdo,_h,Jae,zdo,Wdo,SB,Qdo,Hdo,Udo,uh,Yae,Jdo,Ydo,RB,Kdo,Zdo,eco,bh,Kae,oco,rco,PB,tco,aco,nco,vh,Zae,sco,lco,BB,ico,dco,cco,Fh,ene,fco,mco,IB,gco,hco,pco,Th,one,_co,uco,qB,bco,vco,Fco,Mh,rne,Tco,Mco,NB,Eco,Cco,wco,Eh,tne,Aco,yco,jB,Lco,xco,$co,Ch,ane,kco,Sco,DB,Rco,Pco,Bco,wh,nne,Ico,qco,GB,Nco,jco,Dco,Ah,sne,Gco,Oco,OB,Vco,Xco,zco,yh,lne,Wco,Qco,VB,Hco,Uco,Jco,Lh,ine,Yco,Kco,XB,Zco,efo,ofo,xh,dne,rfo,tfo,zB,afo,nfo,sfo,$h,cne,lfo,ifo,WB,dfo,cfo,ffo,kh,mfo,Sh,gfo,Rh,P0,hfo,fne,pfo,hqe,Mi,Ph,mne,B0,_fo,gne,ufo,pqe,yo,I0,bfo,q0,vfo,QB,Ffo,Tfo,Mfo,N0,Efo,hne,Cfo,wfo,Afo,Ue,j0,yfo,pne,Lfo,xfo,Ei,$fo,_ne,kfo,Sfo,une,Rfo,Pfo,Bfo,pe,Bh,bne,Ifo,qfo,HB,Nfo,jfo,Dfo,Ih,vne,Gfo,Ofo,Fne,Vfo,Xfo,zfo,qh,Tne,Wfo,Qfo,UB,Hfo,Ufo,Jfo,Nh,Mne,Yfo,Kfo,JB,Zfo,emo,omo,jh,Ene,rmo,tmo,YB,amo,nmo,smo,Dh,Cne,lmo,imo,KB,dmo,cmo,fmo,Gh,wne,mmo,gmo,ZB,hmo,pmo,_mo,Oh,Ane,umo,bmo,eI,vmo,Fmo,Tmo,Vh,yne,Mmo,Emo,oI,Cmo,wmo,Amo,Xh,Lne,ymo,Lmo,rI,xmo,$mo,kmo,zh,xne,Smo,Rmo,tI,Pmo,Bmo,Imo,Wh,$ne,qmo,Nmo,aI,jmo,Dmo,Gmo,Qh,kne,Omo,Vmo,nI,Xmo,zmo,Wmo,Hh,Sne,Qmo,Hmo,sI,Umo,Jmo,Ymo,Uh,Rne,Kmo,Zmo,lI,ego,ogo,rgo,Jh,Pne,tgo,ago,iI,ngo,sgo,lgo,Yh,igo,Kh,dgo,Zh,D0,cgo,Bne,fgo,_qe,Ci,ep,Ine,G0,mgo,qne,ggo,uqe,Lo,O0,hgo,wi,pgo,dI,_go,ugo,cI,bgo,vgo,Fgo,V0,Tgo,Nne,Mgo,Ego,Cgo,tt,X0,wgo,jne,Ago,ygo,Ai,Lgo,Dne,xgo,$go,fI,kgo,Sgo,Rgo,op,Pgo,Je,z0,Bgo,Gne,Igo,qgo,La,Ngo,One,jgo,Dgo,Vne,Ggo,Ogo,Xne,Vgo,Xgo,zgo,x,rp,zne,Wgo,Qgo,mI,Hgo,Ugo,Jgo,tp,Wne,Ygo,Kgo,gI,Zgo,eho,oho,ap,Qne,rho,tho,hI,aho,nho,sho,np,Hne,lho,iho,pI,dho,cho,fho,sp,Une,mho,gho,_I,hho,pho,_ho,lp,Jne,uho,bho,uI,vho,Fho,Tho,ip,Yne,Mho,Eho,bI,Cho,who,Aho,dp,Kne,yho,Lho,vI,xho,$ho,kho,cp,Zne,Sho,Rho,FI,Pho,Bho,Iho,fp,ese,qho,Nho,TI,jho,Dho,Gho,mp,ose,Oho,Vho,MI,Xho,zho,Who,gp,rse,Qho,Hho,EI,Uho,Jho,Yho,hp,tse,Kho,Zho,CI,epo,opo,rpo,pp,ase,tpo,apo,wI,npo,spo,lpo,_p,nse,ipo,dpo,AI,cpo,fpo,mpo,up,sse,gpo,hpo,yI,ppo,_po,upo,bp,lse,bpo,vpo,LI,Fpo,Tpo,Mpo,vp,ise,Epo,Cpo,xI,wpo,Apo,ypo,Fp,dse,Lpo,xpo,$I,$po,kpo,Spo,Tp,cse,Rpo,Ppo,kI,Bpo,Ipo,qpo,Mp,fse,Npo,jpo,SI,Dpo,Gpo,Opo,Ep,mse,Vpo,Xpo,RI,zpo,Wpo,Qpo,Cp,gse,Hpo,Upo,PI,Jpo,Ypo,Kpo,wp,hse,Zpo,e_o,BI,o_o,r_o,t_o,Ap,pse,a_o,n_o,II,s_o,l_o,i_o,yp,_se,d_o,c_o,qI,f_o,m_o,g_o,Lp,use,h_o,p_o,NI,__o,u_o,b_o,xp,bse,v_o,F_o,jI,T_o,M_o,E_o,$p,vse,C_o,w_o,DI,A_o,y_o,L_o,kp,Fse,x_o,$_o,GI,k_o,S_o,R_o,Sp,Tse,P_o,B_o,OI,I_o,q_o,N_o,Rp,Mse,j_o,D_o,VI,G_o,O_o,V_o,Rs,Ese,X_o,z_o,XI,W_o,Q_o,zI,H_o,U_o,J_o,Pp,Cse,Y_o,K_o,WI,Z_o,euo,ouo,Bp,wse,ruo,tuo,QI,auo,nuo,suo,Ip,Ase,luo,iuo,HI,duo,cuo,fuo,qp,yse,muo,guo,UI,huo,puo,_uo,Np,Lse,uuo,buo,JI,vuo,Fuo,Tuo,jp,xse,Muo,Euo,YI,Cuo,wuo,Auo,Dp,$se,yuo,Luo,KI,xuo,$uo,kuo,Gp,kse,Suo,Ruo,ZI,Puo,Buo,Iuo,Op,Sse,quo,Nuo,eq,juo,Duo,Guo,Vp,Rse,Ouo,Vuo,oq,Xuo,zuo,Wuo,Xp,Pse,Quo,Huo,rq,Uuo,Juo,Yuo,zp,Bse,Kuo,Zuo,tq,e1o,o1o,r1o,Wp,Ise,t1o,a1o,aq,n1o,s1o,l1o,Qp,qse,i1o,d1o,nq,c1o,f1o,m1o,Hp,Nse,g1o,h1o,sq,p1o,_1o,u1o,Up,jse,b1o,v1o,lq,F1o,T1o,M1o,Jp,Dse,E1o,C1o,iq,w1o,A1o,y1o,Yp,Gse,L1o,x1o,dq,$1o,k1o,S1o,Kp,Ose,R1o,P1o,cq,B1o,I1o,q1o,Zp,Vse,N1o,j1o,fq,D1o,G1o,O1o,e_,Xse,V1o,X1o,mq,z1o,W1o,Q1o,o_,zse,H1o,U1o,gq,J1o,Y1o,K1o,r_,Wse,Z1o,ebo,hq,obo,rbo,tbo,t_,Qse,abo,nbo,pq,sbo,lbo,ibo,a_,Hse,dbo,cbo,_q,fbo,mbo,gbo,n_,Use,hbo,pbo,uq,_bo,ubo,bbo,s_,Jse,vbo,Fbo,bq,Tbo,Mbo,Ebo,l_,Yse,Cbo,wbo,vq,Abo,ybo,Lbo,i_,Kse,xbo,$bo,Fq,kbo,Sbo,Rbo,d_,Zse,Pbo,Bbo,Tq,Ibo,qbo,Nbo,c_,ele,jbo,Dbo,Mq,Gbo,Obo,Vbo,f_,ole,Xbo,zbo,Eq,Wbo,Qbo,Hbo,m_,rle,Ubo,Jbo,Cq,Ybo,Kbo,Zbo,g_,tle,e2o,o2o,wq,r2o,t2o,a2o,h_,ale,n2o,s2o,Aq,l2o,i2o,d2o,p_,nle,c2o,f2o,yq,m2o,g2o,h2o,__,sle,p2o,_2o,Lq,u2o,b2o,v2o,u_,lle,F2o,T2o,xq,M2o,E2o,C2o,b_,ile,w2o,A2o,$q,y2o,L2o,x2o,v_,dle,$2o,k2o,kq,S2o,R2o,P2o,F_,cle,B2o,I2o,Sq,q2o,N2o,j2o,T_,fle,D2o,G2o,Rq,O2o,V2o,X2o,M_,mle,z2o,W2o,Pq,Q2o,H2o,U2o,E_,gle,J2o,Y2o,Bq,K2o,Z2o,evo,C_,hle,ovo,rvo,Iq,tvo,avo,nvo,w_,ple,svo,lvo,qq,ivo,dvo,cvo,A_,_le,fvo,mvo,Nq,gvo,hvo,pvo,y_,ule,_vo,uvo,jq,bvo,vvo,Fvo,L_,ble,Tvo,Mvo,Dq,Evo,Cvo,wvo,x_,vle,Avo,yvo,Gq,Lvo,xvo,$vo,$_,Fle,kvo,Svo,Oq,Rvo,Pvo,Bvo,k_,Tle,Ivo,qvo,Vq,Nvo,jvo,Dvo,S_,Mle,Gvo,Ovo,Xq,Vvo,Xvo,zvo,R_,Ele,Wvo,Qvo,zq,Hvo,Uvo,Jvo,P_,Cle,Yvo,Kvo,Wq,Zvo,eFo,oFo,B_,wle,rFo,tFo,Qq,aFo,nFo,sFo,I_,Ale,lFo,iFo,Hq,dFo,cFo,fFo,q_,yle,mFo,gFo,Uq,hFo,pFo,_Fo,N_,Lle,uFo,bFo,Jq,vFo,FFo,TFo,j_,xle,MFo,EFo,Yq,CFo,wFo,AFo,D_,$le,yFo,LFo,Kq,xFo,$Fo,kFo,G_,kle,SFo,RFo,Zq,PFo,BFo,IFo,O_,Sle,qFo,NFo,eN,jFo,DFo,GFo,V_,Rle,OFo,VFo,oN,XFo,zFo,WFo,X_,Ple,QFo,HFo,rN,UFo,JFo,YFo,z_,Ble,KFo,ZFo,tN,e6o,o6o,r6o,W_,Ile,t6o,a6o,aN,n6o,s6o,l6o,Q_,i6o,qle,d6o,c6o,Nle,f6o,m6o,H_,bqe,yi,U_,jle,W0,g6o,Dle,h6o,vqe,xo,Q0,p6o,Li,_6o,nN,u6o,b6o,sN,v6o,F6o,T6o,H0,M6o,Gle,E6o,C6o,w6o,at,U0,A6o,Ole,y6o,L6o,xi,x6o,Vle,$6o,k6o,lN,S6o,R6o,P6o,J_,B6o,Ye,J0,I6o,Xle,q6o,N6o,xa,j6o,zle,D6o,G6o,Wle,O6o,V6o,Qle,X6o,z6o,W6o,G,Y_,Hle,Q6o,H6o,iN,U6o,J6o,Y6o,K_,Ule,K6o,Z6o,dN,eTo,oTo,rTo,Z_,Jle,tTo,aTo,cN,nTo,sTo,lTo,eu,Yle,iTo,dTo,fN,cTo,fTo,mTo,ou,Kle,gTo,hTo,mN,pTo,_To,uTo,ru,Zle,bTo,vTo,gN,FTo,TTo,MTo,tu,eie,ETo,CTo,hN,wTo,ATo,yTo,au,oie,LTo,xTo,pN,$To,kTo,STo,nu,rie,RTo,PTo,_N,BTo,ITo,qTo,su,tie,NTo,jTo,uN,DTo,GTo,OTo,lu,aie,VTo,XTo,bN,zTo,WTo,QTo,iu,nie,HTo,UTo,vN,JTo,YTo,KTo,du,sie,ZTo,e8o,FN,o8o,r8o,t8o,cu,lie,a8o,n8o,TN,s8o,l8o,i8o,fu,iie,d8o,c8o,MN,f8o,m8o,g8o,mu,die,h8o,p8o,EN,_8o,u8o,b8o,gu,cie,v8o,F8o,CN,T8o,M8o,E8o,hu,fie,C8o,w8o,wN,A8o,y8o,L8o,pu,mie,x8o,$8o,AN,k8o,S8o,R8o,_u,gie,P8o,B8o,yN,I8o,q8o,N8o,uu,hie,j8o,D8o,LN,G8o,O8o,V8o,bu,pie,X8o,z8o,xN,W8o,Q8o,H8o,vu,_ie,U8o,J8o,$N,Y8o,K8o,Z8o,Fu,uie,e7o,o7o,kN,r7o,t7o,a7o,Tu,bie,n7o,s7o,SN,l7o,i7o,d7o,Mu,vie,c7o,f7o,RN,m7o,g7o,h7o,Eu,Fie,p7o,_7o,PN,u7o,b7o,v7o,Cu,Tie,F7o,T7o,BN,M7o,E7o,C7o,wu,Mie,w7o,A7o,IN,y7o,L7o,x7o,Au,Eie,$7o,k7o,qN,S7o,R7o,P7o,yu,Cie,B7o,I7o,NN,q7o,N7o,j7o,Lu,wie,D7o,G7o,jN,O7o,V7o,X7o,xu,Aie,z7o,W7o,DN,Q7o,H7o,U7o,$u,yie,J7o,Y7o,GN,K7o,Z7o,eMo,ku,Lie,oMo,rMo,ON,tMo,aMo,nMo,Su,xie,sMo,lMo,VN,iMo,dMo,cMo,Ru,$ie,fMo,mMo,XN,gMo,hMo,pMo,Pu,kie,_Mo,uMo,zN,bMo,vMo,FMo,Bu,Sie,TMo,MMo,WN,EMo,CMo,wMo,Iu,Rie,AMo,yMo,QN,LMo,xMo,$Mo,qu,Pie,kMo,SMo,HN,RMo,PMo,BMo,Nu,Bie,IMo,qMo,UN,NMo,jMo,DMo,ju,GMo,Iie,OMo,VMo,qie,XMo,zMo,Du,Fqe,$i,Gu,Nie,Y0,WMo,jie,QMo,Tqe,$o,K0,HMo,ki,UMo,JN,JMo,YMo,YN,KMo,ZMo,e4o,Z0,o4o,Die,r4o,t4o,a4o,nt,eA,n4o,Gie,s4o,l4o,Si,i4o,Oie,d4o,c4o,KN,f4o,m4o,g4o,Ou,h4o,Ke,oA,p4o,Vie,_4o,u4o,$a,b4o,Xie,v4o,F4o,zie,T4o,M4o,Wie,E4o,C4o,w4o,z,Vu,Qie,A4o,y4o,ZN,L4o,x4o,$4o,Xu,Hie,k4o,S4o,ej,R4o,P4o,B4o,zu,Uie,I4o,q4o,oj,N4o,j4o,D4o,Wu,Jie,G4o,O4o,rj,V4o,X4o,z4o,Qu,Yie,W4o,Q4o,tj,H4o,U4o,J4o,Hu,Kie,Y4o,K4o,aj,Z4o,eEo,oEo,Uu,Zie,rEo,tEo,nj,aEo,nEo,sEo,Ju,ede,lEo,iEo,sj,dEo,cEo,fEo,Yu,ode,mEo,gEo,lj,hEo,pEo,_Eo,Ku,rde,uEo,bEo,ij,vEo,FEo,TEo,Zu,tde,MEo,EEo,dj,CEo,wEo,AEo,e1,ade,yEo,LEo,cj,xEo,$Eo,kEo,o1,nde,SEo,REo,fj,PEo,BEo,IEo,r1,sde,qEo,NEo,mj,jEo,DEo,GEo,t1,lde,OEo,VEo,gj,XEo,zEo,WEo,a1,ide,QEo,HEo,hj,UEo,JEo,YEo,n1,dde,KEo,ZEo,pj,eCo,oCo,rCo,s1,cde,tCo,aCo,_j,nCo,sCo,lCo,l1,fde,iCo,dCo,uj,cCo,fCo,mCo,i1,mde,gCo,hCo,bj,pCo,_Co,uCo,d1,gde,bCo,vCo,vj,FCo,TCo,MCo,c1,hde,ECo,CCo,Fj,wCo,ACo,yCo,f1,pde,LCo,xCo,Tj,$Co,kCo,SCo,m1,_de,RCo,PCo,Mj,BCo,ICo,qCo,g1,ude,NCo,jCo,Ej,DCo,GCo,OCo,h1,bde,VCo,XCo,Cj,zCo,WCo,QCo,p1,vde,HCo,UCo,wj,JCo,YCo,KCo,_1,Fde,ZCo,e5o,Aj,o5o,r5o,t5o,u1,Tde,a5o,n5o,yj,s5o,l5o,i5o,b1,Mde,d5o,c5o,Lj,f5o,m5o,g5o,v1,Ede,h5o,p5o,xj,_5o,u5o,b5o,F1,Cde,v5o,F5o,$j,T5o,M5o,E5o,T1,wde,C5o,w5o,kj,A5o,y5o,L5o,M1,Ade,x5o,$5o,Sj,k5o,S5o,R5o,E1,yde,P5o,B5o,Rj,I5o,q5o,N5o,C1,Lde,j5o,D5o,Pj,G5o,O5o,V5o,w1,X5o,xde,z5o,W5o,$de,Q5o,H5o,A1,Mqe,Ri,y1,kde,rA,U5o,Sde,J5o,Eqe,ko,tA,Y5o,Pi,K5o,Bj,Z5o,e3o,Ij,o3o,r3o,t3o,aA,a3o,Rde,n3o,s3o,l3o,st,nA,i3o,Pde,d3o,c3o,Bi,f3o,Bde,m3o,g3o,qj,h3o,p3o,_3o,L1,u3o,Ze,sA,b3o,Ide,v3o,F3o,ka,T3o,qde,M3o,E3o,Nde,C3o,w3o,jde,A3o,y3o,L3o,W,x1,Dde,x3o,$3o,Nj,k3o,S3o,R3o,$1,Gde,P3o,B3o,jj,I3o,q3o,N3o,k1,Ode,j3o,D3o,Dj,G3o,O3o,V3o,S1,Vde,X3o,z3o,Gj,W3o,Q3o,H3o,R1,Xde,U3o,J3o,Oj,Y3o,K3o,Z3o,P1,zde,ewo,owo,Vj,rwo,two,awo,B1,Wde,nwo,swo,Xj,lwo,iwo,dwo,I1,Qde,cwo,fwo,zj,mwo,gwo,hwo,q1,Hde,pwo,_wo,Wj,uwo,bwo,vwo,N1,Ude,Fwo,Two,Qj,Mwo,Ewo,Cwo,j1,Jde,wwo,Awo,Hj,ywo,Lwo,xwo,D1,Yde,$wo,kwo,Uj,Swo,Rwo,Pwo,G1,Kde,Bwo,Iwo,Jj,qwo,Nwo,jwo,O1,Zde,Dwo,Gwo,Yj,Owo,Vwo,Xwo,V1,ece,zwo,Wwo,Kj,Qwo,Hwo,Uwo,X1,oce,Jwo,Ywo,Zj,Kwo,Zwo,e0o,z1,rce,o0o,r0o,eD,t0o,a0o,n0o,W1,tce,s0o,l0o,oD,i0o,d0o,c0o,Q1,ace,f0o,m0o,rD,g0o,h0o,p0o,H1,nce,_0o,u0o,tD,b0o,v0o,F0o,U1,sce,T0o,M0o,aD,E0o,C0o,w0o,J1,lce,A0o,y0o,nD,L0o,x0o,$0o,Y1,ice,k0o,S0o,sD,R0o,P0o,B0o,K1,dce,I0o,q0o,lD,N0o,j0o,D0o,Z1,cce,G0o,O0o,iD,V0o,X0o,z0o,eb,fce,W0o,Q0o,dD,H0o,U0o,J0o,ob,mce,Y0o,K0o,cD,Z0o,eAo,oAo,rb,gce,rAo,tAo,fD,aAo,nAo,sAo,tb,hce,lAo,iAo,mD,dAo,cAo,fAo,ab,pce,mAo,gAo,gD,hAo,pAo,_Ao,nb,_ce,uAo,bAo,uce,vAo,FAo,TAo,sb,bce,MAo,EAo,hD,CAo,wAo,AAo,lb,vce,yAo,LAo,pD,xAo,$Ao,kAo,ib,Fce,SAo,RAo,_D,PAo,BAo,IAo,db,Tce,qAo,NAo,uD,jAo,DAo,GAo,cb,OAo,Mce,VAo,XAo,Ece,zAo,WAo,fb,Cqe,Ii,mb,Cce,lA,QAo,wce,HAo,wqe,So,iA,UAo,qi,JAo,bD,YAo,KAo,vD,ZAo,eyo,oyo,dA,ryo,Ace,tyo,ayo,nyo,lt,cA,syo,yce,lyo,iyo,Ni,dyo,Lce,cyo,fyo,FD,myo,gyo,hyo,gb,pyo,eo,fA,_yo,xce,uyo,byo,Sa,vyo,$ce,Fyo,Tyo,kce,Myo,Eyo,Sce,Cyo,wyo,Ayo,_e,hb,Rce,yyo,Lyo,TD,xyo,$yo,kyo,pb,Pce,Syo,Ryo,MD,Pyo,Byo,Iyo,_b,Bce,qyo,Nyo,ED,jyo,Dyo,Gyo,ub,Ice,Oyo,Vyo,CD,Xyo,zyo,Wyo,bb,qce,Qyo,Hyo,wD,Uyo,Jyo,Yyo,vb,Nce,Kyo,Zyo,AD,eLo,oLo,rLo,Fb,jce,tLo,aLo,yD,nLo,sLo,lLo,Tb,Dce,iLo,dLo,LD,cLo,fLo,mLo,Mb,Gce,gLo,hLo,xD,pLo,_Lo,uLo,Eb,Oce,bLo,vLo,$D,FLo,TLo,MLo,Cb,Vce,ELo,CLo,kD,wLo,ALo,yLo,wb,Xce,LLo,xLo,SD,$Lo,kLo,SLo,Ab,zce,RLo,PLo,RD,BLo,ILo,qLo,yb,Wce,NLo,jLo,PD,DLo,GLo,OLo,Lb,Qce,VLo,XLo,BD,zLo,WLo,QLo,xb,Hce,HLo,ULo,ID,JLo,YLo,KLo,$b,ZLo,Uce,e9o,o9o,Jce,r9o,t9o,kb,Aqe,ji,Sb,Yce,mA,a9o,Kce,n9o,yqe,Ro,gA,s9o,Di,l9o,qD,i9o,d9o,ND,c9o,f9o,m9o,hA,g9o,Zce,h9o,p9o,_9o,it,pA,u9o,efe,b9o,v9o,Gi,F9o,ofe,T9o,M9o,jD,E9o,C9o,w9o,Rb,A9o,oo,_A,y9o,rfe,L9o,x9o,Ra,$9o,tfe,k9o,S9o,afe,R9o,P9o,nfe,B9o,I9o,q9o,q,Pb,sfe,N9o,j9o,DD,D9o,G9o,O9o,Bb,lfe,V9o,X9o,GD,z9o,W9o,Q9o,Ib,ife,H9o,U9o,OD,J9o,Y9o,K9o,qb,dfe,Z9o,exo,VD,oxo,rxo,txo,Nb,cfe,axo,nxo,XD,sxo,lxo,ixo,jb,ffe,dxo,cxo,zD,fxo,mxo,gxo,Db,mfe,hxo,pxo,WD,_xo,uxo,bxo,Gb,gfe,vxo,Fxo,QD,Txo,Mxo,Exo,Ob,hfe,Cxo,wxo,HD,Axo,yxo,Lxo,Vb,pfe,xxo,$xo,UD,kxo,Sxo,Rxo,Xb,_fe,Pxo,Bxo,JD,Ixo,qxo,Nxo,zb,ufe,jxo,Dxo,YD,Gxo,Oxo,Vxo,Wb,bfe,Xxo,zxo,KD,Wxo,Qxo,Hxo,Qb,vfe,Uxo,Jxo,ZD,Yxo,Kxo,Zxo,Hb,Ffe,e$o,o$o,eG,r$o,t$o,a$o,Ub,Tfe,n$o,s$o,oG,l$o,i$o,d$o,Jb,Mfe,c$o,f$o,rG,m$o,g$o,h$o,Yb,Efe,p$o,_$o,tG,u$o,b$o,v$o,Kb,Cfe,F$o,T$o,aG,M$o,E$o,C$o,Zb,wfe,w$o,A$o,nG,y$o,L$o,x$o,e2,Afe,$$o,k$o,sG,S$o,R$o,P$o,o2,yfe,B$o,I$o,lG,q$o,N$o,j$o,r2,Lfe,D$o,G$o,iG,O$o,V$o,X$o,t2,xfe,z$o,W$o,dG,Q$o,H$o,U$o,a2,$fe,J$o,Y$o,cG,K$o,Z$o,eko,n2,kfe,oko,rko,fG,tko,ako,nko,s2,Sfe,sko,lko,mG,iko,dko,cko,l2,Rfe,fko,mko,gG,gko,hko,pko,i2,Pfe,_ko,uko,hG,bko,vko,Fko,d2,Bfe,Tko,Mko,pG,Eko,Cko,wko,c2,Ife,Ako,yko,_G,Lko,xko,$ko,f2,qfe,kko,Sko,uG,Rko,Pko,Bko,m2,Nfe,Iko,qko,bG,Nko,jko,Dko,g2,jfe,Gko,Oko,vG,Vko,Xko,zko,h2,Dfe,Wko,Qko,FG,Hko,Uko,Jko,p2,Gfe,Yko,Kko,TG,Zko,eSo,oSo,_2,Ofe,rSo,tSo,MG,aSo,nSo,sSo,u2,Vfe,lSo,iSo,EG,dSo,cSo,fSo,b2,Xfe,mSo,gSo,CG,hSo,pSo,_So,v2,zfe,uSo,bSo,wG,vSo,FSo,TSo,F2,Wfe,MSo,ESo,AG,CSo,wSo,ASo,T2,Qfe,ySo,LSo,yG,xSo,$So,kSo,M2,Hfe,SSo,RSo,LG,PSo,BSo,ISo,E2,Ufe,qSo,NSo,xG,jSo,DSo,GSo,C2,Jfe,OSo,VSo,$G,XSo,zSo,WSo,w2,Yfe,QSo,HSo,kG,USo,JSo,YSo,A2,KSo,Kfe,ZSo,eRo,Zfe,oRo,rRo,y2,Lqe,Oi,L2,eme,uA,tRo,ome,aRo,xqe,Po,bA,nRo,Vi,sRo,SG,lRo,iRo,RG,dRo,cRo,fRo,vA,mRo,rme,gRo,hRo,pRo,dt,FA,_Ro,tme,uRo,bRo,Xi,vRo,ame,FRo,TRo,PG,MRo,ERo,CRo,x2,wRo,ro,TA,ARo,nme,yRo,LRo,Pa,xRo,sme,$Ro,kRo,lme,SRo,RRo,ime,PRo,BRo,IRo,Y,$2,dme,qRo,NRo,BG,jRo,DRo,GRo,k2,cme,ORo,VRo,IG,XRo,zRo,WRo,S2,fme,QRo,HRo,qG,URo,JRo,YRo,R2,mme,KRo,ZRo,NG,ePo,oPo,rPo,P2,gme,tPo,aPo,jG,nPo,sPo,lPo,B2,hme,iPo,dPo,DG,cPo,fPo,mPo,I2,pme,gPo,hPo,GG,pPo,_Po,uPo,q2,_me,bPo,vPo,OG,FPo,TPo,MPo,N2,ume,EPo,CPo,VG,wPo,APo,yPo,j2,bme,LPo,xPo,XG,$Po,kPo,SPo,D2,vme,RPo,PPo,zG,BPo,IPo,qPo,G2,Fme,NPo,jPo,WG,DPo,GPo,OPo,O2,Tme,VPo,XPo,QG,zPo,WPo,QPo,V2,Mme,HPo,UPo,HG,JPo,YPo,KPo,X2,Eme,ZPo,eBo,UG,oBo,rBo,tBo,z2,Cme,aBo,nBo,JG,sBo,lBo,iBo,W2,wme,dBo,cBo,YG,fBo,mBo,gBo,Q2,Ame,hBo,pBo,KG,_Bo,uBo,bBo,H2,yme,vBo,FBo,ZG,TBo,MBo,EBo,U2,Lme,CBo,wBo,eO,ABo,yBo,LBo,J2,xme,xBo,$Bo,oO,kBo,SBo,RBo,Y2,$me,PBo,BBo,rO,IBo,qBo,NBo,K2,kme,jBo,DBo,tO,GBo,OBo,VBo,Z2,Sme,XBo,zBo,aO,WBo,QBo,HBo,ev,Rme,UBo,JBo,nO,YBo,KBo,ZBo,ov,Pme,eIo,oIo,sO,rIo,tIo,aIo,rv,Bme,nIo,sIo,lO,lIo,iIo,dIo,tv,Ime,cIo,fIo,iO,mIo,gIo,hIo,av,qme,pIo,_Io,dO,uIo,bIo,vIo,nv,FIo,Nme,TIo,MIo,jme,EIo,CIo,sv,$qe,zi,lv,Dme,MA,wIo,Gme,AIo,kqe,Bo,EA,yIo,Wi,LIo,cO,xIo,$Io,fO,kIo,SIo,RIo,CA,PIo,Ome,BIo,IIo,qIo,ct,wA,NIo,Vme,jIo,DIo,Qi,GIo,Xme,OIo,VIo,mO,XIo,zIo,WIo,iv,QIo,to,AA,HIo,zme,UIo,JIo,Ba,YIo,Wme,KIo,ZIo,Qme,eqo,oqo,Hme,rqo,tqo,aqo,Yr,dv,Ume,nqo,sqo,gO,lqo,iqo,dqo,cv,Jme,cqo,fqo,hO,mqo,gqo,hqo,fv,Yme,pqo,_qo,pO,uqo,bqo,vqo,mv,Kme,Fqo,Tqo,_O,Mqo,Eqo,Cqo,gv,Zme,wqo,Aqo,uO,yqo,Lqo,xqo,hv,$qo,ege,kqo,Sqo,oge,Rqo,Pqo,pv,Sqe,Hi,_v,rge,yA,Bqo,tge,Iqo,Rqe,Io,LA,qqo,Ui,Nqo,bO,jqo,Dqo,vO,Gqo,Oqo,Vqo,xA,Xqo,age,zqo,Wqo,Qqo,ft,$A,Hqo,nge,Uqo,Jqo,Ji,Yqo,sge,Kqo,Zqo,FO,eNo,oNo,rNo,uv,tNo,ao,kA,aNo,lge,nNo,sNo,Ia,lNo,ige,iNo,dNo,dge,cNo,fNo,cge,mNo,gNo,hNo,U,bv,fge,pNo,_No,TO,uNo,bNo,vNo,vv,mge,FNo,TNo,MO,MNo,ENo,CNo,Fv,gge,wNo,ANo,EO,yNo,LNo,xNo,Tv,hge,$No,kNo,CO,SNo,RNo,PNo,Mv,pge,BNo,INo,wO,qNo,NNo,jNo,Ev,_ge,DNo,GNo,AO,ONo,VNo,XNo,Cv,uge,zNo,WNo,yO,QNo,HNo,UNo,wv,bge,JNo,YNo,LO,KNo,ZNo,ejo,Av,vge,ojo,rjo,xO,tjo,ajo,njo,yv,Fge,sjo,ljo,$O,ijo,djo,cjo,Lv,Tge,fjo,mjo,kO,gjo,hjo,pjo,xv,Mge,_jo,ujo,SO,bjo,vjo,Fjo,$v,Ege,Tjo,Mjo,RO,Ejo,Cjo,wjo,kv,Cge,Ajo,yjo,PO,Ljo,xjo,$jo,Sv,wge,kjo,Sjo,BO,Rjo,Pjo,Bjo,Rv,Age,Ijo,qjo,IO,Njo,jjo,Djo,Pv,yge,Gjo,Ojo,qO,Vjo,Xjo,zjo,Bv,Lge,Wjo,Qjo,NO,Hjo,Ujo,Jjo,Iv,xge,Yjo,Kjo,jO,Zjo,eDo,oDo,qv,$ge,rDo,tDo,DO,aDo,nDo,sDo,Nv,kge,lDo,iDo,GO,dDo,cDo,fDo,jv,Sge,mDo,gDo,OO,hDo,pDo,_Do,Dv,Rge,uDo,bDo,VO,vDo,FDo,TDo,Gv,Pge,MDo,EDo,XO,CDo,wDo,ADo,Ov,Bge,yDo,LDo,zO,xDo,$Do,kDo,Vv,Ige,SDo,RDo,WO,PDo,BDo,IDo,Xv,qge,qDo,NDo,QO,jDo,DDo,GDo,zv,Nge,ODo,VDo,HO,XDo,zDo,WDo,Wv,jge,QDo,HDo,UO,UDo,JDo,YDo,Qv,Dge,KDo,ZDo,JO,eGo,oGo,rGo,Hv,Gge,tGo,aGo,YO,nGo,sGo,lGo,Uv,Oge,iGo,dGo,KO,cGo,fGo,mGo,Jv,Vge,gGo,hGo,ZO,pGo,_Go,uGo,Yv,bGo,Xge,vGo,FGo,zge,TGo,MGo,Kv,Pqe,Yi,Zv,Wge,SA,EGo,Qge,CGo,Bqe,qo,RA,wGo,Ki,AGo,eV,yGo,LGo,oV,xGo,$Go,kGo,PA,SGo,Hge,RGo,PGo,BGo,mt,BA,IGo,Uge,qGo,NGo,Zi,jGo,Jge,DGo,GGo,rV,OGo,VGo,XGo,eF,zGo,no,IA,WGo,Yge,QGo,HGo,qa,UGo,Kge,JGo,YGo,Zge,KGo,ZGo,ehe,eOo,oOo,rOo,V,oF,ohe,tOo,aOo,tV,nOo,sOo,lOo,rF,rhe,iOo,dOo,aV,cOo,fOo,mOo,tF,the,gOo,hOo,nV,pOo,_Oo,uOo,aF,ahe,bOo,vOo,sV,FOo,TOo,MOo,nF,nhe,EOo,COo,lV,wOo,AOo,yOo,sF,she,LOo,xOo,iV,$Oo,kOo,SOo,lF,lhe,ROo,POo,dV,BOo,IOo,qOo,iF,ihe,NOo,jOo,cV,DOo,GOo,OOo,dF,dhe,VOo,XOo,fV,zOo,WOo,QOo,cF,che,HOo,UOo,mV,JOo,YOo,KOo,fF,fhe,ZOo,eVo,gV,oVo,rVo,tVo,mF,mhe,aVo,nVo,hV,sVo,lVo,iVo,gF,ghe,dVo,cVo,pV,fVo,mVo,gVo,hF,hhe,hVo,pVo,_V,_Vo,uVo,bVo,pF,phe,vVo,FVo,uV,TVo,MVo,EVo,_F,_he,CVo,wVo,bV,AVo,yVo,LVo,uF,uhe,xVo,$Vo,vV,kVo,SVo,RVo,bF,bhe,PVo,BVo,FV,IVo,qVo,NVo,vF,vhe,jVo,DVo,TV,GVo,OVo,VVo,FF,Fhe,XVo,zVo,MV,WVo,QVo,HVo,TF,The,UVo,JVo,EV,YVo,KVo,ZVo,MF,Mhe,eXo,oXo,CV,rXo,tXo,aXo,EF,Ehe,nXo,sXo,wV,lXo,iXo,dXo,CF,Che,cXo,fXo,AV,mXo,gXo,hXo,wF,whe,pXo,_Xo,yV,uXo,bXo,vXo,AF,Ahe,FXo,TXo,LV,MXo,EXo,CXo,yF,yhe,wXo,AXo,xV,yXo,LXo,xXo,LF,Lhe,$Xo,kXo,$V,SXo,RXo,PXo,xF,xhe,BXo,IXo,kV,qXo,NXo,jXo,$F,$he,DXo,GXo,SV,OXo,VXo,XXo,kF,khe,zXo,WXo,RV,QXo,HXo,UXo,SF,She,JXo,YXo,PV,KXo,ZXo,ezo,RF,Rhe,ozo,rzo,BV,tzo,azo,nzo,PF,Phe,szo,lzo,IV,izo,dzo,czo,BF,Bhe,fzo,mzo,qV,gzo,hzo,pzo,IF,Ihe,_zo,uzo,NV,bzo,vzo,Fzo,qF,qhe,Tzo,Mzo,jV,Ezo,Czo,wzo,NF,Nhe,Azo,yzo,DV,Lzo,xzo,$zo,jF,jhe,kzo,Szo,GV,Rzo,Pzo,Bzo,DF,Izo,Dhe,qzo,Nzo,Ghe,jzo,Dzo,GF,Iqe,ed,OF,Ohe,qA,Gzo,Vhe,Ozo,qqe,No,NA,Vzo,od,Xzo,OV,zzo,Wzo,VV,Qzo,Hzo,Uzo,jA,Jzo,Xhe,Yzo,Kzo,Zzo,gt,DA,eWo,zhe,oWo,rWo,rd,tWo,Whe,aWo,nWo,XV,sWo,lWo,iWo,VF,dWo,so,GA,cWo,Qhe,fWo,mWo,Na,gWo,Hhe,hWo,pWo,Uhe,_Wo,uWo,Jhe,bWo,vWo,FWo,Yhe,XF,Khe,TWo,MWo,zV,EWo,CWo,wWo,zF,AWo,Zhe,yWo,LWo,epe,xWo,$Wo,WF,Nqe,td,QF,ope,OA,kWo,rpe,SWo,jqe,jo,VA,RWo,ad,PWo,WV,BWo,IWo,QV,qWo,NWo,jWo,XA,DWo,tpe,GWo,OWo,VWo,ht,zA,XWo,ape,zWo,WWo,nd,QWo,npe,HWo,UWo,HV,JWo,YWo,KWo,HF,ZWo,lo,WA,eQo,spe,oQo,rQo,ja,tQo,lpe,aQo,nQo,ipe,sQo,lQo,dpe,iQo,dQo,cQo,Fe,UF,cpe,fQo,mQo,UV,gQo,hQo,pQo,JF,fpe,_Qo,uQo,JV,bQo,vQo,FQo,YF,mpe,TQo,MQo,YV,EQo,CQo,wQo,KF,gpe,AQo,yQo,KV,LQo,xQo,$Qo,Ps,hpe,kQo,SQo,ZV,RQo,PQo,eX,BQo,IQo,qQo,ZF,ppe,NQo,jQo,oX,DQo,GQo,OQo,pt,_pe,VQo,XQo,rX,zQo,WQo,tX,QQo,HQo,aX,UQo,JQo,YQo,e6,upe,KQo,ZQo,nX,eHo,oHo,rHo,o6,bpe,tHo,aHo,sX,nHo,sHo,lHo,r6,vpe,iHo,dHo,lX,cHo,fHo,mHo,t6,Fpe,gHo,hHo,iX,pHo,_Ho,uHo,a6,Tpe,bHo,vHo,dX,FHo,THo,MHo,n6,Mpe,EHo,CHo,cX,wHo,AHo,yHo,s6,Epe,LHo,xHo,fX,$Ho,kHo,SHo,l6,RHo,Cpe,PHo,BHo,wpe,IHo,qHo,i6,Dqe,sd,d6,Ape,QA,NHo,ype,jHo,Gqe,Do,HA,DHo,ld,GHo,mX,OHo,VHo,gX,XHo,zHo,WHo,UA,QHo,Lpe,HHo,UHo,JHo,_t,JA,YHo,xpe,KHo,ZHo,id,eUo,$pe,oUo,rUo,hX,tUo,aUo,nUo,c6,sUo,io,YA,lUo,kpe,iUo,dUo,Da,cUo,Spe,fUo,mUo,Rpe,gUo,hUo,Ppe,pUo,_Uo,uUo,Bpe,f6,Ipe,bUo,vUo,pX,FUo,TUo,MUo,m6,EUo,qpe,CUo,wUo,Npe,AUo,yUo,g6,Oqe,dd,h6,jpe,KA,LUo,Dpe,xUo,Vqe,Go,ZA,$Uo,cd,kUo,_X,SUo,RUo,uX,PUo,BUo,IUo,ey,qUo,Gpe,NUo,jUo,DUo,ut,oy,GUo,Ope,OUo,VUo,fd,XUo,Vpe,zUo,WUo,bX,QUo,HUo,UUo,p6,JUo,co,ry,YUo,Xpe,KUo,ZUo,Ga,eJo,zpe,oJo,rJo,Wpe,tJo,aJo,Qpe,nJo,sJo,lJo,ke,_6,Hpe,iJo,dJo,vX,cJo,fJo,mJo,u6,Upe,gJo,hJo,FX,pJo,_Jo,uJo,b6,Jpe,bJo,vJo,TX,FJo,TJo,MJo,v6,Ype,EJo,CJo,MX,wJo,AJo,yJo,F6,Kpe,LJo,xJo,EX,$Jo,kJo,SJo,T6,Zpe,RJo,PJo,CX,BJo,IJo,qJo,M6,e_e,NJo,jJo,wX,DJo,GJo,OJo,E6,o_e,VJo,XJo,AX,zJo,WJo,QJo,C6,r_e,HJo,UJo,yX,JJo,YJo,KJo,w6,ZJo,t_e,eYo,oYo,a_e,rYo,tYo,A6,Xqe,md,y6,n_e,ty,aYo,s_e,nYo,zqe,Oo,ay,sYo,gd,lYo,LX,iYo,dYo,xX,cYo,fYo,mYo,ny,gYo,l_e,hYo,pYo,_Yo,bt,sy,uYo,i_e,bYo,vYo,hd,FYo,d_e,TYo,MYo,$X,EYo,CYo,wYo,L6,AYo,fo,ly,yYo,c_e,LYo,xYo,Oa,$Yo,f_e,kYo,SYo,m_e,RYo,PYo,g_e,BYo,IYo,qYo,Kr,x6,h_e,NYo,jYo,kX,DYo,GYo,OYo,$6,p_e,VYo,XYo,SX,zYo,WYo,QYo,k6,__e,HYo,UYo,RX,JYo,YYo,KYo,S6,u_e,ZYo,eKo,PX,oKo,rKo,tKo,R6,b_e,aKo,nKo,BX,sKo,lKo,iKo,P6,dKo,v_e,cKo,fKo,F_e,mKo,gKo,B6,Wqe,pd,I6,T_e,iy,hKo,M_e,pKo,Qqe,Vo,dy,_Ko,_d,uKo,IX,bKo,vKo,qX,FKo,TKo,MKo,cy,EKo,E_e,CKo,wKo,AKo,vt,fy,yKo,C_e,LKo,xKo,ud,$Ko,w_e,kKo,SKo,NX,RKo,PKo,BKo,q6,IKo,mo,my,qKo,A_e,NKo,jKo,Va,DKo,y_e,GKo,OKo,L_e,VKo,XKo,x_e,zKo,WKo,QKo,Se,N6,$_e,HKo,UKo,jX,JKo,YKo,KKo,j6,k_e,ZKo,eZo,DX,oZo,rZo,tZo,D6,S_e,aZo,nZo,GX,sZo,lZo,iZo,G6,R_e,dZo,cZo,OX,fZo,mZo,gZo,O6,P_e,hZo,pZo,VX,_Zo,uZo,bZo,V6,B_e,vZo,FZo,XX,TZo,MZo,EZo,X6,I_e,CZo,wZo,zX,AZo,yZo,LZo,z6,q_e,xZo,$Zo,WX,kZo,SZo,RZo,W6,N_e,PZo,BZo,QX,IZo,qZo,NZo,Q6,jZo,j_e,DZo,GZo,D_e,OZo,VZo,H6,Hqe,bd,U6,G_e,gy,XZo,O_e,zZo,Uqe,Xo,hy,WZo,vd,QZo,HX,HZo,UZo,UX,JZo,YZo,KZo,py,ZZo,V_e,eer,oer,rer,Ft,_y,ter,X_e,aer,ner,Fd,ser,z_e,ler,ier,JX,der,cer,fer,J6,mer,go,uy,ger,W_e,her,per,Xa,_er,Q_e,uer,ber,H_e,ver,Fer,U_e,Ter,Mer,Eer,by,Y6,J_e,Cer,wer,YX,Aer,yer,Ler,K6,Y_e,xer,$er,KX,ker,Ser,Rer,Z6,Per,K_e,Ber,Ier,Z_e,qer,Ner,eT,Jqe,Td,oT,eue,vy,jer,oue,Der,Yqe,zo,Fy,Ger,Md,Oer,ZX,Ver,Xer,ez,zer,Wer,Qer,Ty,Her,rue,Uer,Jer,Yer,Tt,My,Ker,tue,Zer,eor,Ed,oor,aue,ror,tor,oz,aor,nor,sor,rT,lor,ho,Ey,ior,nue,dor,cor,za,mor,sue,gor,hor,lue,por,_or,iue,uor,bor,vor,Zr,tT,due,For,Tor,rz,Mor,Eor,Cor,aT,cue,wor,Aor,tz,yor,Lor,xor,nT,fue,$or,kor,az,Sor,Ror,Por,sT,mue,Bor,Ior,nz,qor,Nor,jor,lT,gue,Dor,Gor,sz,Oor,Vor,Xor,iT,zor,hue,Wor,Qor,pue,Hor,Uor,dT,Kqe,Cd,cT,_ue,Cy,Jor,uue,Yor,Zqe,Wo,wy,Kor,wd,Zor,lz,err,orr,iz,rrr,trr,arr,Ay,nrr,bue,srr,lrr,irr,Mt,yy,drr,vue,crr,frr,Ad,mrr,Fue,grr,hrr,dz,prr,_rr,urr,fT,brr,po,Ly,vrr,Tue,Frr,Trr,Wa,Mrr,Mue,Err,Crr,Eue,wrr,Arr,Cue,yrr,Lrr,xrr,yd,mT,wue,$rr,krr,cz,Srr,Rrr,Prr,gT,Aue,Brr,Irr,fz,qrr,Nrr,jrr,hT,yue,Drr,Grr,mz,Orr,Vrr,Xrr,pT,zrr,Lue,Wrr,Qrr,xue,Hrr,Urr,_T,eNe,Ld,uT,$ue,xy,Jrr,kue,Yrr,oNe,Qo,$y,Krr,xd,Zrr,gz,etr,otr,hz,rtr,ttr,atr,ky,ntr,Sue,str,ltr,itr,Et,Sy,dtr,Rue,ctr,ftr,$d,mtr,Pue,gtr,htr,pz,ptr,_tr,utr,bT,btr,_o,Ry,vtr,Bue,Ftr,Ttr,Qa,Mtr,Iue,Etr,Ctr,que,wtr,Atr,Nue,ytr,Ltr,xtr,Py,vT,jue,$tr,ktr,_z,Str,Rtr,Ptr,FT,Due,Btr,Itr,uz,qtr,Ntr,jtr,TT,Dtr,Gue,Gtr,Otr,Oue,Vtr,Xtr,MT,rNe,kd,ET,Vue,By,ztr,Xue,Wtr,tNe,Ho,Iy,Qtr,Sd,Htr,bz,Utr,Jtr,vz,Ytr,Ktr,Ztr,qy,ear,zue,oar,rar,tar,Ct,Ny,aar,Wue,nar,sar,Rd,lar,Que,iar,dar,Fz,car,far,mar,CT,gar,uo,jy,har,Hue,par,_ar,Ha,uar,Uue,bar,Far,Jue,Tar,Mar,Yue,Ear,Car,war,Kue,wT,Zue,Aar,yar,Tz,Lar,xar,$ar,AT,kar,e1e,Sar,Rar,o1e,Par,Bar,yT,aNe,Pd,LT,r1e,Dy,Iar,t1e,qar,nNe,Uo,Gy,Nar,Bd,jar,Mz,Dar,Gar,Ez,Oar,Var,Xar,Oy,zar,a1e,War,Qar,Har,wt,Vy,Uar,n1e,Jar,Yar,Id,Kar,s1e,Zar,enr,Cz,onr,rnr,tnr,xT,anr,bo,Xy,nnr,l1e,snr,lnr,Ua,inr,i1e,dnr,cnr,d1e,fnr,mnr,c1e,gnr,hnr,pnr,Ja,$T,f1e,_nr,unr,wz,bnr,vnr,Fnr,kT,m1e,Tnr,Mnr,Az,Enr,Cnr,wnr,ST,g1e,Anr,ynr,yz,Lnr,xnr,$nr,RT,h1e,knr,Snr,Lz,Rnr,Pnr,Bnr,PT,Inr,p1e,qnr,Nnr,_1e,jnr,Dnr,BT,sNe,qd,IT,u1e,zy,Gnr,b1e,Onr,lNe,Jo,Wy,Vnr,Nd,Xnr,xz,znr,Wnr,$z,Qnr,Hnr,Unr,Qy,Jnr,v1e,Ynr,Knr,Znr,At,Hy,esr,F1e,osr,rsr,jd,tsr,T1e,asr,nsr,kz,ssr,lsr,isr,qT,dsr,vo,Uy,csr,M1e,fsr,msr,Ya,gsr,E1e,hsr,psr,C1e,_sr,usr,w1e,bsr,vsr,Fsr,A1e,NT,y1e,Tsr,Msr,Sz,Esr,Csr,wsr,jT,Asr,L1e,ysr,Lsr,x1e,xsr,$sr,DT,iNe,Dd,GT,$1e,Jy,ksr,k1e,Ssr,dNe,Yo,Yy,Rsr,Gd,Psr,Rz,Bsr,Isr,Pz,qsr,Nsr,jsr,Ky,Dsr,S1e,Gsr,Osr,Vsr,yt,Zy,Xsr,R1e,zsr,Wsr,Od,Qsr,P1e,Hsr,Usr,Bz,Jsr,Ysr,Ksr,OT,Zsr,wr,eL,elr,B1e,olr,rlr,Ka,tlr,I1e,alr,nlr,q1e,slr,llr,N1e,ilr,dlr,clr,N,VT,j1e,flr,mlr,Iz,glr,hlr,plr,XT,D1e,_lr,ulr,qz,blr,vlr,Flr,zT,G1e,Tlr,Mlr,Nz,Elr,Clr,wlr,WT,O1e,Alr,ylr,jz,Llr,xlr,$lr,QT,V1e,klr,Slr,Dz,Rlr,Plr,Blr,HT,X1e,Ilr,qlr,Gz,Nlr,jlr,Dlr,UT,z1e,Glr,Olr,Oz,Vlr,Xlr,zlr,JT,W1e,Wlr,Qlr,Vz,Hlr,Ulr,Jlr,YT,Q1e,Ylr,Klr,Xz,Zlr,eir,oir,KT,H1e,rir,tir,zz,air,nir,sir,ZT,U1e,lir,iir,Wz,dir,cir,fir,e8,J1e,mir,gir,Qz,hir,pir,_ir,o8,Y1e,uir,bir,Hz,vir,Fir,Tir,r8,K1e,Mir,Eir,Uz,Cir,wir,Air,t8,Z1e,yir,Lir,Jz,xir,$ir,kir,a8,ebe,Sir,Rir,Yz,Pir,Bir,Iir,n8,obe,qir,Nir,Kz,jir,Dir,Gir,Bs,rbe,Oir,Vir,Zz,Xir,zir,eW,Wir,Qir,Hir,s8,tbe,Uir,Jir,oW,Yir,Kir,Zir,l8,abe,edr,odr,rW,rdr,tdr,adr,i8,nbe,ndr,sdr,tW,ldr,idr,ddr,d8,sbe,cdr,fdr,aW,mdr,gdr,hdr,c8,lbe,pdr,_dr,nW,udr,bdr,vdr,f8,ibe,Fdr,Tdr,sW,Mdr,Edr,Cdr,m8,dbe,wdr,Adr,lW,ydr,Ldr,xdr,g8,cbe,$dr,kdr,iW,Sdr,Rdr,Pdr,h8,fbe,Bdr,Idr,dW,qdr,Ndr,jdr,p8,mbe,Ddr,Gdr,cW,Odr,Vdr,Xdr,_8,gbe,zdr,Wdr,fW,Qdr,Hdr,Udr,u8,hbe,Jdr,Ydr,mW,Kdr,Zdr,ecr,b8,pbe,ocr,rcr,gW,tcr,acr,ncr,v8,_be,scr,lcr,hW,icr,dcr,ccr,F8,ube,fcr,mcr,pW,gcr,hcr,pcr,T8,bbe,_cr,ucr,_W,bcr,vcr,Fcr,M8,vbe,Tcr,Mcr,uW,Ecr,Ccr,wcr,E8,Fbe,Acr,ycr,bW,Lcr,xcr,$cr,C8,Tbe,kcr,Scr,vW,Rcr,Pcr,Bcr,w8,Mbe,Icr,qcr,FW,Ncr,jcr,Dcr,A8,Ebe,Gcr,Ocr,TW,Vcr,Xcr,zcr,y8,Cbe,Wcr,Qcr,MW,Hcr,Ucr,Jcr,L8,wbe,Ycr,Kcr,EW,Zcr,efr,ofr,x8,Abe,rfr,tfr,CW,afr,nfr,sfr,$8,ybe,lfr,ifr,wW,dfr,cfr,ffr,k8,Lbe,mfr,gfr,AW,hfr,pfr,_fr,S8,xbe,ufr,bfr,yW,vfr,Ffr,Tfr,R8,$be,Mfr,Efr,LW,Cfr,wfr,Afr,P8,cNe,Vd,B8,kbe,oL,yfr,Sbe,Lfr,fNe,Ko,rL,xfr,Xd,$fr,xW,kfr,Sfr,$W,Rfr,Pfr,Bfr,tL,Ifr,Rbe,qfr,Nfr,jfr,Lt,aL,Dfr,Pbe,Gfr,Ofr,zd,Vfr,Bbe,Xfr,zfr,kW,Wfr,Qfr,Hfr,I8,Ufr,Ar,nL,Jfr,Ibe,Yfr,Kfr,Za,Zfr,qbe,emr,omr,Nbe,rmr,tmr,jbe,amr,nmr,smr,se,q8,Dbe,lmr,imr,SW,dmr,cmr,fmr,N8,Gbe,mmr,gmr,RW,hmr,pmr,_mr,j8,Obe,umr,bmr,PW,vmr,Fmr,Tmr,D8,Vbe,Mmr,Emr,BW,Cmr,wmr,Amr,G8,Xbe,ymr,Lmr,IW,xmr,$mr,kmr,O8,zbe,Smr,Rmr,qW,Pmr,Bmr,Imr,V8,Wbe,qmr,Nmr,NW,jmr,Dmr,Gmr,X8,Qbe,Omr,Vmr,jW,Xmr,zmr,Wmr,z8,Hbe,Qmr,Hmr,DW,Umr,Jmr,Ymr,W8,Ube,Kmr,Zmr,GW,egr,ogr,rgr,Q8,Jbe,tgr,agr,OW,ngr,sgr,lgr,H8,Ybe,igr,dgr,VW,cgr,fgr,mgr,U8,Kbe,ggr,hgr,XW,pgr,_gr,ugr,J8,Zbe,bgr,vgr,zW,Fgr,Tgr,Mgr,Y8,e2e,Egr,Cgr,WW,wgr,Agr,ygr,K8,o2e,Lgr,xgr,QW,$gr,kgr,Sgr,Z8,r2e,Rgr,Pgr,HW,Bgr,Igr,qgr,e7,t2e,Ngr,jgr,UW,Dgr,Ggr,Ogr,o7,a2e,Vgr,Xgr,JW,zgr,Wgr,Qgr,r7,n2e,Hgr,Ugr,YW,Jgr,Ygr,Kgr,t7,s2e,Zgr,ehr,KW,ohr,rhr,thr,a7,l2e,ahr,nhr,ZW,shr,lhr,ihr,n7,i2e,dhr,chr,eQ,fhr,mhr,ghr,s7,mNe,Wd,l7,d2e,sL,hhr,c2e,phr,gNe,Zo,lL,_hr,Qd,uhr,oQ,bhr,vhr,rQ,Fhr,Thr,Mhr,iL,Ehr,f2e,Chr,whr,Ahr,xt,dL,yhr,m2e,Lhr,xhr,Hd,$hr,g2e,khr,Shr,tQ,Rhr,Phr,Bhr,i7,Ihr,yr,cL,qhr,h2e,Nhr,jhr,en,Dhr,p2e,Ghr,Ohr,_2e,Vhr,Xhr,u2e,zhr,Whr,Qhr,Me,d7,b2e,Hhr,Uhr,aQ,Jhr,Yhr,Khr,c7,v2e,Zhr,epr,nQ,opr,rpr,tpr,f7,F2e,apr,npr,sQ,spr,lpr,ipr,m7,T2e,dpr,cpr,lQ,fpr,mpr,gpr,g7,M2e,hpr,ppr,iQ,_pr,upr,bpr,h7,E2e,vpr,Fpr,dQ,Tpr,Mpr,Epr,p7,C2e,Cpr,wpr,cQ,Apr,ypr,Lpr,_7,w2e,xpr,$pr,fQ,kpr,Spr,Rpr,u7,A2e,Ppr,Bpr,mQ,Ipr,qpr,Npr,b7,y2e,jpr,Dpr,gQ,Gpr,Opr,Vpr,v7,L2e,Xpr,zpr,hQ,Wpr,Qpr,Hpr,F7,x2e,Upr,Jpr,pQ,Ypr,Kpr,Zpr,T7,hNe,Ud,M7,$2e,fL,e_r,k2e,o_r,pNe,er,mL,r_r,Jd,t_r,_Q,a_r,n_r,uQ,s_r,l_r,i_r,gL,d_r,S2e,c_r,f_r,m_r,$t,hL,g_r,R2e,h_r,p_r,Yd,__r,P2e,u_r,b_r,bQ,v_r,F_r,T_r,E7,M_r,Lr,pL,E_r,B2e,C_r,w_r,on,A_r,I2e,y_r,L_r,q2e,x_r,$_r,N2e,k_r,S_r,R_r,rn,C7,j2e,P_r,B_r,vQ,I_r,q_r,N_r,w7,D2e,j_r,D_r,FQ,G_r,O_r,V_r,A7,G2e,X_r,z_r,TQ,W_r,Q_r,H_r,y7,O2e,U_r,J_r,MQ,Y_r,K_r,Z_r,L7,_Ne,Kd,x7,V2e,_L,eur,X2e,our,uNe,or,uL,rur,Zd,tur,EQ,aur,nur,CQ,sur,lur,iur,bL,dur,z2e,cur,fur,mur,kt,vL,gur,W2e,hur,pur,ec,_ur,Q2e,uur,bur,wQ,vur,Fur,Tur,$7,Mur,xr,FL,Eur,H2e,Cur,wur,tn,Aur,U2e,yur,Lur,J2e,xur,$ur,Y2e,kur,Sur,Rur,ie,k7,K2e,Pur,Bur,AQ,Iur,qur,Nur,S7,Z2e,jur,Dur,yQ,Gur,Our,Vur,R7,eve,Xur,zur,LQ,Wur,Qur,Hur,P7,ove,Uur,Jur,xQ,Yur,Kur,Zur,B7,rve,e1r,o1r,$Q,r1r,t1r,a1r,I7,tve,n1r,s1r,kQ,l1r,i1r,d1r,q7,ave,c1r,f1r,SQ,m1r,g1r,h1r,N7,nve,p1r,_1r,RQ,u1r,b1r,v1r,j7,sve,F1r,T1r,PQ,M1r,E1r,C1r,D7,lve,w1r,A1r,BQ,y1r,L1r,x1r,G7,ive,$1r,k1r,IQ,S1r,R1r,P1r,O7,dve,B1r,I1r,qQ,q1r,N1r,j1r,V7,cve,D1r,G1r,NQ,O1r,V1r,X1r,X7,fve,z1r,W1r,jQ,Q1r,H1r,U1r,z7,mve,J1r,Y1r,DQ,K1r,Z1r,ebr,W7,gve,obr,rbr,GQ,tbr,abr,nbr,Q7,hve,sbr,lbr,OQ,ibr,dbr,cbr,H7,pve,fbr,mbr,VQ,gbr,hbr,pbr,U7,_ve,_br,ubr,XQ,bbr,vbr,Fbr,J7,uve,Tbr,Mbr,zQ,Ebr,Cbr,wbr,Y7,bNe,oc,K7,bve,TL,Abr,vve,ybr,vNe,rr,ML,Lbr,rc,xbr,WQ,$br,kbr,QQ,Sbr,Rbr,Pbr,EL,Bbr,Fve,Ibr,qbr,Nbr,St,CL,jbr,Tve,Dbr,Gbr,tc,Obr,Mve,Vbr,Xbr,HQ,zbr,Wbr,Qbr,Z7,Hbr,$r,wL,Ubr,Eve,Jbr,Ybr,an,Kbr,Cve,Zbr,e2r,wve,o2r,r2r,Ave,t2r,a2r,n2r,ye,eM,yve,s2r,l2r,UQ,i2r,d2r,c2r,oM,Lve,f2r,m2r,JQ,g2r,h2r,p2r,rM,xve,_2r,u2r,YQ,b2r,v2r,F2r,tM,$ve,T2r,M2r,KQ,E2r,C2r,w2r,aM,kve,A2r,y2r,ZQ,L2r,x2r,$2r,nM,Sve,k2r,S2r,eH,R2r,P2r,B2r,sM,Rve,I2r,q2r,oH,N2r,j2r,D2r,lM,Pve,G2r,O2r,rH,V2r,X2r,z2r,iM,Bve,W2r,Q2r,tH,H2r,U2r,J2r,dM,Ive,Y2r,K2r,aH,Z2r,evr,ovr,cM,FNe,ac,fM,qve,AL,rvr,Nve,tvr,TNe,tr,yL,avr,nc,nvr,nH,svr,lvr,sH,ivr,dvr,cvr,LL,fvr,jve,mvr,gvr,hvr,Rt,xL,pvr,Dve,_vr,uvr,sc,bvr,Gve,vvr,Fvr,lH,Tvr,Mvr,Evr,mM,Cvr,kr,$L,wvr,Ove,Avr,yvr,nn,Lvr,Vve,xvr,$vr,Xve,kvr,Svr,zve,Rvr,Pvr,Bvr,oe,gM,Wve,Ivr,qvr,iH,Nvr,jvr,Dvr,hM,Qve,Gvr,Ovr,dH,Vvr,Xvr,zvr,pM,Hve,Wvr,Qvr,cH,Hvr,Uvr,Jvr,_M,Uve,Yvr,Kvr,fH,Zvr,eFr,oFr,uM,Jve,rFr,tFr,mH,aFr,nFr,sFr,bM,Yve,lFr,iFr,gH,dFr,cFr,fFr,vM,Kve,mFr,gFr,hH,hFr,pFr,_Fr,FM,Zve,uFr,bFr,pH,vFr,FFr,TFr,TM,eFe,MFr,EFr,_H,CFr,wFr,AFr,MM,oFe,yFr,LFr,uH,xFr,$Fr,kFr,EM,rFe,SFr,RFr,bH,PFr,BFr,IFr,CM,tFe,qFr,NFr,vH,jFr,DFr,GFr,wM,aFe,OFr,VFr,FH,XFr,zFr,WFr,AM,nFe,QFr,HFr,TH,UFr,JFr,YFr,yM,sFe,KFr,ZFr,MH,e6r,o6r,r6r,LM,lFe,t6r,a6r,EH,n6r,s6r,l6r,xM,iFe,i6r,d6r,CH,c6r,f6r,m6r,$M,dFe,g6r,h6r,wH,p6r,_6r,u6r,kM,cFe,b6r,v6r,AH,F6r,T6r,M6r,SM,fFe,E6r,C6r,yH,w6r,A6r,y6r,RM,mFe,L6r,x6r,LH,$6r,k6r,S6r,PM,gFe,R6r,P6r,xH,B6r,I6r,q6r,BM,hFe,N6r,j6r,$H,D6r,G6r,O6r,IM,pFe,V6r,X6r,kH,z6r,W6r,Q6r,qM,_Fe,H6r,U6r,SH,J6r,Y6r,K6r,NM,uFe,Z6r,eTr,RH,oTr,rTr,tTr,jM,MNe,lc,DM,bFe,kL,aTr,vFe,nTr,ENe,ar,SL,sTr,ic,lTr,PH,iTr,dTr,BH,cTr,fTr,mTr,RL,gTr,FFe,hTr,pTr,_Tr,Pt,PL,uTr,TFe,bTr,vTr,dc,FTr,MFe,TTr,MTr,IH,ETr,CTr,wTr,GM,ATr,Sr,BL,yTr,EFe,LTr,xTr,sn,$Tr,CFe,kTr,STr,wFe,RTr,PTr,AFe,BTr,ITr,qTr,he,OM,yFe,NTr,jTr,qH,DTr,GTr,OTr,VM,LFe,VTr,XTr,NH,zTr,WTr,QTr,XM,xFe,HTr,UTr,jH,JTr,YTr,KTr,zM,$Fe,ZTr,e8r,DH,o8r,r8r,t8r,WM,kFe,a8r,n8r,GH,s8r,l8r,i8r,QM,SFe,d8r,c8r,OH,f8r,m8r,g8r,HM,RFe,h8r,p8r,VH,_8r,u8r,b8r,UM,PFe,v8r,F8r,XH,T8r,M8r,E8r,JM,BFe,C8r,w8r,zH,A8r,y8r,L8r,YM,IFe,x8r,$8r,WH,k8r,S8r,R8r,KM,qFe,P8r,B8r,QH,I8r,q8r,N8r,ZM,NFe,j8r,D8r,HH,G8r,O8r,V8r,e4,jFe,X8r,z8r,UH,W8r,Q8r,H8r,o4,DFe,U8r,J8r,JH,Y8r,K8r,Z8r,r4,GFe,e7r,o7r,YH,r7r,t7r,a7r,t4,OFe,n7r,s7r,KH,l7r,i7r,d7r,a4,VFe,c7r,f7r,ZH,m7r,g7r,h7r,n4,CNe,cc,s4,XFe,IL,p7r,zFe,_7r,wNe,nr,qL,u7r,fc,b7r,eU,v7r,F7r,oU,T7r,M7r,E7r,NL,C7r,WFe,w7r,A7r,y7r,Bt,jL,L7r,QFe,x7r,$7r,mc,k7r,HFe,S7r,R7r,rU,P7r,B7r,I7r,l4,q7r,Rr,DL,N7r,UFe,j7r,D7r,ln,G7r,JFe,O7r,V7r,YFe,X7r,z7r,KFe,W7r,Q7r,H7r,GL,i4,ZFe,U7r,J7r,tU,Y7r,K7r,Z7r,d4,e6e,eMr,oMr,aU,rMr,tMr,aMr,c4,ANe,gc,f4,o6e,OL,nMr,r6e,sMr,yNe,sr,VL,lMr,hc,iMr,nU,dMr,cMr,sU,fMr,mMr,gMr,XL,hMr,t6e,pMr,_Mr,uMr,It,zL,bMr,a6e,vMr,FMr,pc,TMr,n6e,MMr,EMr,lU,CMr,wMr,AMr,m4,yMr,Pr,WL,LMr,s6e,xMr,$Mr,dn,kMr,l6e,SMr,RMr,i6e,PMr,BMr,d6e,IMr,qMr,NMr,c6e,g4,f6e,jMr,DMr,iU,GMr,OMr,VMr,h4,LNe,_c,p4,m6e,QL,XMr,g6e,zMr,xNe,lr,HL,WMr,uc,QMr,dU,HMr,UMr,cU,JMr,YMr,KMr,UL,ZMr,h6e,e4r,o4r,r4r,qt,JL,t4r,p6e,a4r,n4r,bc,s4r,_6e,l4r,i4r,fU,d4r,c4r,f4r,_4,m4r,Br,YL,g4r,u6e,h4r,p4r,cn,_4r,b6e,u4r,b4r,v6e,v4r,F4r,F6e,T4r,M4r,E4r,de,u4,T6e,C4r,w4r,mU,A4r,y4r,L4r,b4,M6e,x4r,$4r,gU,k4r,S4r,R4r,v4,E6e,P4r,B4r,hU,I4r,q4r,N4r,F4,C6e,j4r,D4r,pU,G4r,O4r,V4r,T4,w6e,X4r,z4r,_U,W4r,Q4r,H4r,M4,A6e,U4r,J4r,uU,Y4r,K4r,Z4r,E4,y6e,eEr,oEr,bU,rEr,tEr,aEr,C4,L6e,nEr,sEr,vU,lEr,iEr,dEr,w4,x6e,cEr,fEr,FU,mEr,gEr,hEr,A4,$6e,pEr,_Er,TU,uEr,bEr,vEr,y4,k6e,FEr,TEr,MU,MEr,EEr,CEr,L4,S6e,wEr,AEr,EU,yEr,LEr,xEr,x4,R6e,$Er,kEr,CU,SEr,REr,PEr,$4,P6e,BEr,IEr,wU,qEr,NEr,jEr,k4,B6e,DEr,GEr,AU,OEr,VEr,XEr,S4,I6e,zEr,WEr,yU,QEr,HEr,UEr,R4,q6e,JEr,YEr,LU,KEr,ZEr,eCr,P4,N6e,oCr,rCr,xU,tCr,aCr,nCr,B4,j6e,sCr,lCr,$U,iCr,dCr,cCr,I4,D6e,fCr,mCr,kU,gCr,hCr,pCr,q4,$Ne,vc,N4,G6e,KL,_Cr,O6e,uCr,kNe,ir,ZL,bCr,Fc,vCr,SU,FCr,TCr,RU,MCr,ECr,CCr,e9,wCr,V6e,ACr,yCr,LCr,Nt,o9,xCr,X6e,$Cr,kCr,Tc,SCr,z6e,RCr,PCr,PU,BCr,ICr,qCr,j4,NCr,Ir,r9,jCr,W6e,DCr,GCr,fn,OCr,Q6e,VCr,XCr,H6e,zCr,WCr,U6e,QCr,HCr,UCr,ce,D4,J6e,JCr,YCr,BU,KCr,ZCr,e5r,G4,Y6e,o5r,r5r,IU,t5r,a5r,n5r,O4,K6e,s5r,l5r,qU,i5r,d5r,c5r,V4,Z6e,f5r,m5r,NU,g5r,h5r,p5r,X4,eTe,_5r,u5r,jU,b5r,v5r,F5r,z4,oTe,T5r,M5r,DU,E5r,C5r,w5r,W4,rTe,A5r,y5r,GU,L5r,x5r,$5r,Q4,tTe,k5r,S5r,OU,R5r,P5r,B5r,H4,aTe,I5r,q5r,VU,N5r,j5r,D5r,U4,nTe,G5r,O5r,XU,V5r,X5r,z5r,J4,sTe,W5r,Q5r,zU,H5r,U5r,J5r,Y4,lTe,Y5r,K5r,WU,Z5r,e3r,o3r,K4,iTe,r3r,t3r,QU,a3r,n3r,s3r,Z4,dTe,l3r,i3r,HU,d3r,c3r,f3r,eE,cTe,m3r,g3r,UU,h3r,p3r,_3r,oE,fTe,u3r,b3r,JU,v3r,F3r,T3r,rE,mTe,M3r,E3r,YU,C3r,w3r,A3r,tE,gTe,y3r,L3r,KU,x3r,$3r,k3r,aE,hTe,S3r,R3r,ZU,P3r,B3r,I3r,nE,pTe,q3r,N3r,eJ,j3r,D3r,G3r,sE,SNe,Mc,lE,_Te,t9,O3r,uTe,V3r,RNe,dr,a9,X3r,Ec,z3r,oJ,W3r,Q3r,rJ,H3r,U3r,J3r,n9,Y3r,bTe,K3r,Z3r,ewr,jt,s9,owr,vTe,rwr,twr,Cc,awr,FTe,nwr,swr,tJ,lwr,iwr,dwr,iE,cwr,qr,l9,fwr,TTe,mwr,gwr,mn,hwr,MTe,pwr,_wr,ETe,uwr,bwr,CTe,vwr,Fwr,Twr,wTe,dE,ATe,Mwr,Ewr,aJ,Cwr,wwr,Awr,cE,PNe,wc,fE,yTe,i9,ywr,LTe,Lwr,BNe,cr,d9,xwr,Ac,$wr,nJ,kwr,Swr,sJ,Rwr,Pwr,Bwr,c9,Iwr,xTe,qwr,Nwr,jwr,Dt,f9,Dwr,$Te,Gwr,Owr,yc,Vwr,kTe,Xwr,zwr,lJ,Wwr,Qwr,Hwr,mE,Uwr,Nr,m9,Jwr,STe,Ywr,Kwr,gn,Zwr,RTe,e0r,o0r,PTe,r0r,t0r,BTe,a0r,n0r,s0r,ITe,gE,qTe,l0r,i0r,iJ,d0r,c0r,f0r,hE,INe,Lc,pE,NTe,g9,m0r,jTe,g0r,qNe,fr,h9,h0r,xc,p0r,dJ,_0r,u0r,cJ,b0r,v0r,F0r,p9,T0r,DTe,M0r,E0r,C0r,Gt,_9,w0r,GTe,A0r,y0r,$c,L0r,OTe,x0r,$0r,fJ,k0r,S0r,R0r,_E,P0r,jr,u9,B0r,VTe,I0r,q0r,hn,N0r,XTe,j0r,D0r,zTe,G0r,O0r,WTe,V0r,X0r,z0r,te,uE,QTe,W0r,Q0r,mJ,H0r,U0r,J0r,bE,HTe,Y0r,K0r,gJ,Z0r,eAr,oAr,vE,UTe,rAr,tAr,hJ,aAr,nAr,sAr,FE,JTe,lAr,iAr,pJ,dAr,cAr,fAr,TE,YTe,mAr,gAr,_J,hAr,pAr,_Ar,ME,KTe,uAr,bAr,uJ,vAr,FAr,TAr,EE,ZTe,MAr,EAr,bJ,CAr,wAr,AAr,CE,e8e,yAr,LAr,vJ,xAr,$Ar,kAr,wE,o8e,SAr,RAr,FJ,PAr,BAr,IAr,AE,r8e,qAr,NAr,TJ,jAr,DAr,GAr,yE,t8e,OAr,VAr,MJ,XAr,zAr,WAr,LE,a8e,QAr,HAr,EJ,UAr,JAr,YAr,xE,n8e,KAr,ZAr,CJ,eyr,oyr,ryr,$E,s8e,tyr,ayr,wJ,nyr,syr,lyr,kE,l8e,iyr,dyr,AJ,cyr,fyr,myr,SE,i8e,gyr,hyr,yJ,pyr,_yr,uyr,RE,d8e,byr,vyr,LJ,Fyr,Tyr,Myr,PE,c8e,Eyr,Cyr,xJ,wyr,Ayr,yyr,BE,f8e,Lyr,xyr,$J,$yr,kyr,Syr,IE,m8e,Ryr,Pyr,kJ,Byr,Iyr,qyr,qE,g8e,Nyr,jyr,SJ,Dyr,Gyr,Oyr,NE,h8e,Vyr,Xyr,RJ,zyr,Wyr,Qyr,jE,p8e,Hyr,Uyr,PJ,Jyr,Yyr,Kyr,DE,_8e,Zyr,eLr,BJ,oLr,rLr,tLr,GE,u8e,aLr,nLr,IJ,sLr,lLr,iLr,OE,NNe,kc,VE,b8e,b9,dLr,v8e,cLr,jNe,mr,v9,fLr,Sc,mLr,qJ,gLr,hLr,NJ,pLr,_Lr,uLr,F9,bLr,F8e,vLr,FLr,TLr,Ot,T9,MLr,T8e,ELr,CLr,Rc,wLr,M8e,ALr,yLr,jJ,LLr,xLr,$Lr,XE,kLr,Dr,M9,SLr,E8e,RLr,PLr,pn,BLr,C8e,ILr,qLr,w8e,NLr,jLr,A8e,DLr,GLr,OLr,Re,zE,y8e,VLr,XLr,DJ,zLr,WLr,QLr,WE,L8e,HLr,ULr,GJ,JLr,YLr,KLr,QE,x8e,ZLr,e9r,OJ,o9r,r9r,t9r,HE,$8e,a9r,n9r,VJ,s9r,l9r,i9r,UE,k8e,d9r,c9r,XJ,f9r,m9r,g9r,JE,S8e,h9r,p9r,zJ,_9r,u9r,b9r,YE,R8e,v9r,F9r,WJ,T9r,M9r,E9r,KE,P8e,C9r,w9r,QJ,A9r,y9r,L9r,ZE,B8e,x9r,$9r,HJ,k9r,S9r,R9r,eC,DNe,Pc,oC,I8e,E9,P9r,q8e,B9r,GNe,gr,C9,I9r,Bc,q9r,UJ,N9r,j9r,JJ,D9r,G9r,O9r,w9,V9r,N8e,X9r,z9r,W9r,Vt,A9,Q9r,j8e,H9r,U9r,Ic,J9r,D8e,Y9r,K9r,YJ,Z9r,exr,oxr,rC,rxr,Gr,y9,txr,G8e,axr,nxr,_n,sxr,O8e,lxr,ixr,V8e,dxr,cxr,X8e,fxr,mxr,gxr,Ee,tC,z8e,hxr,pxr,KJ,_xr,uxr,bxr,aC,W8e,vxr,Fxr,ZJ,Txr,Mxr,Exr,nC,Q8e,Cxr,wxr,eY,Axr,yxr,Lxr,sC,H8e,xxr,$xr,oY,kxr,Sxr,Rxr,lC,U8e,Pxr,Bxr,rY,Ixr,qxr,Nxr,iC,J8e,jxr,Dxr,tY,Gxr,Oxr,Vxr,dC,Y8e,Xxr,zxr,aY,Wxr,Qxr,Hxr,cC,K8e,Uxr,Jxr,nY,Yxr,Kxr,Zxr,fC,Z8e,e$r,o$r,sY,r$r,t$r,a$r,mC,e7e,n$r,s$r,lY,l$r,i$r,d$r,gC,o7e,c$r,f$r,iY,m$r,g$r,h$r,hC,r7e,p$r,_$r,dY,u$r,b$r,v$r,pC,ONe,qc,_C,t7e,L9,F$r,a7e,T$r,VNe,hr,x9,M$r,Nc,E$r,cY,C$r,w$r,fY,A$r,y$r,L$r,$9,x$r,n7e,$$r,k$r,S$r,Xt,k9,R$r,s7e,P$r,B$r,jc,I$r,l7e,q$r,N$r,mY,j$r,D$r,G$r,uC,O$r,Or,S9,V$r,i7e,X$r,z$r,un,W$r,d7e,Q$r,H$r,c7e,U$r,J$r,f7e,Y$r,K$r,Z$r,Le,bC,m7e,ekr,okr,gY,rkr,tkr,akr,vC,g7e,nkr,skr,hY,lkr,ikr,dkr,FC,h7e,ckr,fkr,pY,mkr,gkr,hkr,TC,p7e,pkr,_kr,_Y,ukr,bkr,vkr,MC,_7e,Fkr,Tkr,uY,Mkr,Ekr,Ckr,EC,u7e,wkr,Akr,bY,ykr,Lkr,xkr,CC,b7e,$kr,kkr,vY,Skr,Rkr,Pkr,wC,v7e,Bkr,Ikr,FY,qkr,Nkr,jkr,AC,F7e,Dkr,Gkr,TY,Okr,Vkr,Xkr,yC,T7e,zkr,Wkr,MY,Qkr,Hkr,Ukr,LC,XNe,Dc,xC,M7e,R9,Jkr,E7e,Ykr,zNe,pr,P9,Kkr,Gc,Zkr,EY,eSr,oSr,CY,rSr,tSr,aSr,B9,nSr,C7e,sSr,lSr,iSr,zt,I9,dSr,w7e,cSr,fSr,Oc,mSr,A7e,gSr,hSr,wY,pSr,_Sr,uSr,$C,bSr,Vr,q9,vSr,y7e,FSr,TSr,bn,MSr,L7e,ESr,CSr,x7e,wSr,ASr,$7e,ySr,LSr,xSr,Pe,kC,k7e,$Sr,kSr,AY,SSr,RSr,PSr,SC,S7e,BSr,ISr,yY,qSr,NSr,jSr,RC,R7e,DSr,GSr,LY,OSr,VSr,XSr,PC,P7e,zSr,WSr,xY,QSr,HSr,USr,BC,B7e,JSr,YSr,$Y,KSr,ZSr,eRr,IC,I7e,oRr,rRr,kY,tRr,aRr,nRr,qC,q7e,sRr,lRr,SY,iRr,dRr,cRr,NC,N7e,fRr,mRr,RY,gRr,hRr,pRr,jC,j7e,_Rr,uRr,PY,bRr,vRr,FRr,DC,WNe,Vc,GC,D7e,N9,TRr,G7e,MRr,QNe,_r,j9,ERr,Xc,CRr,BY,wRr,ARr,IY,yRr,LRr,xRr,D9,$Rr,O7e,kRr,SRr,RRr,Wt,G9,PRr,V7e,BRr,IRr,zc,qRr,X7e,NRr,jRr,qY,DRr,GRr,ORr,OC,VRr,Xr,O9,XRr,z7e,zRr,WRr,vn,QRr,W7e,HRr,URr,Q7e,JRr,YRr,H7e,KRr,ZRr,ePr,xe,VC,U7e,oPr,rPr,NY,tPr,aPr,nPr,XC,J7e,sPr,lPr,jY,iPr,dPr,cPr,zC,Y7e,fPr,mPr,DY,gPr,hPr,pPr,WC,K7e,_Pr,uPr,GY,bPr,vPr,FPr,QC,Z7e,TPr,MPr,OY,EPr,CPr,wPr,HC,eMe,APr,yPr,VY,LPr,xPr,$Pr,UC,oMe,kPr,SPr,XY,RPr,PPr,BPr,JC,rMe,IPr,qPr,zY,NPr,jPr,DPr,YC,tMe,GPr,OPr,WY,VPr,XPr,zPr,KC,aMe,WPr,QPr,QY,HPr,UPr,JPr,ZC,HNe,Wc,e5,nMe,V9,YPr,sMe,KPr,UNe,ur,X9,ZPr,Qc,eBr,HY,oBr,rBr,UY,tBr,aBr,nBr,z9,sBr,lMe,lBr,iBr,dBr,Qt,W9,cBr,iMe,fBr,mBr,Hc,gBr,dMe,hBr,pBr,JY,_Br,uBr,bBr,o5,vBr,zr,Q9,FBr,cMe,TBr,MBr,Fn,EBr,fMe,CBr,wBr,mMe,ABr,yBr,gMe,LBr,xBr,$Br,$e,r5,hMe,kBr,SBr,YY,RBr,PBr,BBr,t5,pMe,IBr,qBr,KY,NBr,jBr,DBr,a5,_Me,GBr,OBr,ZY,VBr,XBr,zBr,n5,uMe,WBr,QBr,eK,HBr,UBr,JBr,s5,bMe,YBr,KBr,oK,ZBr,eIr,oIr,l5,vMe,rIr,tIr,rK,aIr,nIr,sIr,i5,FMe,lIr,iIr,tK,dIr,cIr,fIr,d5,TMe,mIr,gIr,aK,hIr,pIr,_Ir,c5,MMe,uIr,bIr,nK,vIr,FIr,TIr,f5,EMe,MIr,EIr,sK,CIr,wIr,AIr,m5,JNe,Uc,g5,CMe,H9,yIr,wMe,LIr,YNe,br,U9,xIr,Jc,$Ir,lK,kIr,SIr,iK,RIr,PIr,BIr,J9,IIr,AMe,qIr,NIr,jIr,Ht,Y9,DIr,yMe,GIr,OIr,Yc,VIr,LMe,XIr,zIr,dK,WIr,QIr,HIr,h5,UIr,Wr,K9,JIr,xMe,YIr,KIr,Tn,ZIr,$Me,eqr,oqr,kMe,rqr,tqr,SMe,aqr,nqr,sqr,De,p5,RMe,lqr,iqr,cK,dqr,cqr,fqr,_5,PMe,mqr,gqr,fK,hqr,pqr,_qr,u5,BMe,uqr,bqr,mK,vqr,Fqr,Tqr,b5,IMe,Mqr,Eqr,gK,Cqr,wqr,Aqr,v5,qMe,yqr,Lqr,hK,xqr,$qr,kqr,F5,NMe,Sqr,Rqr,pK,Pqr,Bqr,Iqr,T5,jMe,qqr,Nqr,_K,jqr,Dqr,Gqr,M5,DMe,Oqr,Vqr,uK,Xqr,zqr,Wqr,E5,KNe,Kc,C5,GMe,Z9,Qqr,OMe,Hqr,ZNe,vr,ex,Uqr,Zc,Jqr,bK,Yqr,Kqr,vK,Zqr,eNr,oNr,ox,rNr,VMe,tNr,aNr,nNr,Ut,rx,sNr,XMe,lNr,iNr,ef,dNr,zMe,cNr,fNr,FK,mNr,gNr,hNr,w5,pNr,Qr,tx,_Nr,WMe,uNr,bNr,Mn,vNr,QMe,FNr,TNr,HMe,MNr,ENr,UMe,CNr,wNr,ANr,Ge,A5,JMe,yNr,LNr,TK,xNr,$Nr,kNr,y5,YMe,SNr,RNr,MK,PNr,BNr,INr,L5,KMe,qNr,NNr,EK,jNr,DNr,GNr,x5,ZMe,ONr,VNr,CK,XNr,zNr,WNr,$5,e4e,QNr,HNr,wK,UNr,JNr,YNr,k5,o4e,KNr,ZNr,AK,ejr,ojr,rjr,S5,r4e,tjr,ajr,yK,njr,sjr,ljr,R5,t4e,ijr,djr,LK,cjr,fjr,mjr,P5,eje,of,B5,a4e,ax,gjr,n4e,hjr,oje,Fr,nx,pjr,rf,_jr,xK,ujr,bjr,$K,vjr,Fjr,Tjr,sx,Mjr,s4e,Ejr,Cjr,wjr,Jt,lx,Ajr,l4e,yjr,Ljr,tf,xjr,i4e,$jr,kjr,kK,Sjr,Rjr,Pjr,I5,Bjr,Hr,ix,Ijr,d4e,qjr,Njr,En,jjr,c4e,Djr,Gjr,f4e,Ojr,Vjr,m4e,Xjr,zjr,Wjr,g4e,q5,h4e,Qjr,Hjr,SK,Ujr,Jjr,Yjr,N5,rje,af,j5,p4e,dx,Kjr,_4e,Zjr,tje,Tr,cx,eDr,nf,oDr,RK,rDr,tDr,PK,aDr,nDr,sDr,fx,lDr,u4e,iDr,dDr,cDr,Yt,mx,fDr,b4e,mDr,gDr,sf,hDr,v4e,pDr,_Dr,BK,uDr,bDr,vDr,D5,FDr,Ur,gx,TDr,F4e,MDr,EDr,Cn,CDr,T4e,wDr,ADr,M4e,yDr,LDr,E4e,xDr,$Dr,kDr,hx,G5,C4e,SDr,RDr,IK,PDr,BDr,IDr,O5,w4e,qDr,NDr,qK,jDr,DDr,GDr,V5,aje,lf,X5,A4e,px,ODr,y4e,VDr,nje,Mr,_x,XDr,df,zDr,NK,WDr,QDr,jK,HDr,UDr,JDr,ux,YDr,L4e,KDr,ZDr,eGr,Kt,bx,oGr,x4e,rGr,tGr,cf,aGr,$4e,nGr,sGr,DK,lGr,iGr,dGr,z5,cGr,Jr,vx,fGr,k4e,mGr,gGr,wn,hGr,S4e,pGr,_Gr,R4e,uGr,bGr,P4e,vGr,FGr,TGr,B4e,W5,I4e,MGr,EGr,GK,CGr,wGr,AGr,Q5,sje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),p0=new re({}),_0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new yGr({props:{warning:!0,$$slots:{default:[qLt]},$$scope:{ctx:L}}}),u0=new re({}),b0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/configuration_auto.py#L578"}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/configuration_auto.py#L601"}}),Fg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),M0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/configuration_auto.py#L724"}}),E0=new re({}),C0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/tokenization_auto.py#L388"}}),y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16871/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/tokenization_auto.py#L402"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),L0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/tokenization_auto.py#L598"}}),x0=new re({}),$0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),R0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16871/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),kh=new yGr({props:{$$slots:{default:[DLt]},$$scope:{ctx:L}}}),Sh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),P0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),B0=new re({}),I0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/processing_auto.py#L87"}}),j0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/processing_auto.py#L101"}}),Yh=new yGr({props:{$$slots:{default:[OLt]},$$scope:{ctx:L}}}),Kh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),D0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/processing_auto.py#L254"}}),G0=new re({}),O0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L729"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),op=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),W0=new re({}),Q0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L736"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Du=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),Y0=new re({}),K0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L751"}}),eA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Ou=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),oA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),A1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),rA=new re({}),tA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L758"}}),nA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),L1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),sA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),lA=new re({}),iA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L765"}}),cA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),mA=new re({}),gA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L774"}}),pA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),y2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),uA=new re({}),bA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L808"}}),FA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),x2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),TA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),sv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),MA=new re({}),EA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L815"}}),wA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),iv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),yA=new re({}),LA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L801"}}),$A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),SA=new re({}),RA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L783"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),qA=new re({}),NA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L790"}}),DA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),OA=new re({}),VA=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L824"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),QA=new re({}),HA=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L863"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),KA=new re({}),ZA=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L870"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L893"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),L6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L877"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L884"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L902"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L909"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L856"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L831"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L838"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_auto.py#L847"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),P8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),oL=new re({}),rL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),I8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),sL=new re({}),lL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),fL=new re({}),mL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),_L=new re({}),uL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),TL=new re({}),ML=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),AL=new re({}),yL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),IL=new re({}),qL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),OL=new re({}),VL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),QL=new re({}),HL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),t9=new re({}),a9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),i9=new re({}),d9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),g9=new re({}),h9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),_9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),b9=new re({}),v9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),T9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),E9=new re({}),C9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),A9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),L9=new re({}),x9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),k9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),R9=new re({}),P9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),I9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),N9=new re({}),j9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),V9=new re({}),X9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),H9=new re({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),ax=new re({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),dx=new re({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),px=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),f0=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),m0=o("AutoConfig"),Ln=o(", "),xn=a("a"),g0=o("AutoModel"),hi=o(`, and
`),$n=a("a"),h0=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),S$=o("will create a model that is an instance of "),_i=a("a"),R$=o("BertModel"),P$=o("."),Eo=l(),wa=a("p"),B$=o("There is one class of "),uf=a("code"),I$=o("AutoModel"),hGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tqe=l(),ui=a("h2"),bf=a("a"),Pee=a("span"),F(p0.$$.fragment),pGe=l(),Bee=a("span"),_Ge=o("Extending the Auto Classes"),aqe=l(),kn=a("p"),uGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Iee=a("code"),bGe=o("NewModel"),vGe=o(", make sure you have a "),qee=a("code"),FGe=o("NewModelConfig"),TGe=o(` then you can add those to the auto
classes like this:`),nqe=l(),F(_0.$$.fragment),sqe=l(),q$=a("p"),MGe=o("You will then be able to use the auto classes like you would usually do!"),lqe=l(),F(vf.$$.fragment),iqe=l(),bi=a("h2"),Ff=a("a"),Nee=a("span"),F(u0.$$.fragment),EGe=l(),jee=a("span"),CGe=o("AutoConfig"),dqe=l(),Co=a("div"),F(b0.$$.fragment),wGe=l(),v0=a("p"),AGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),N$=a("a"),yGe=o("from_pretrained()"),LGe=o(" class method."),xGe=l(),F0=a("p"),$Ge=o("This class cannot be instantiated directly using "),Dee=a("code"),kGe=o("__init__()"),SGe=o(" (throws an error)."),RGe=l(),Er=a("div"),F(T0.$$.fragment),PGe=l(),Gee=a("p"),BGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),IGe=l(),vi=a("p"),qGe=o("The configuration class to instantiate is selected based on the "),Oee=a("code"),NGe=o("model_type"),jGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vee=a("code"),DGe=o("pretrained_model_name_or_path"),GGe=o(":"),OGe=l(),A=a("ul"),Tf=a("li"),Xee=a("strong"),VGe=o("albert"),XGe=o(" \u2014 "),j$=a("a"),zGe=o("AlbertConfig"),WGe=o(" (ALBERT model)"),QGe=l(),Mf=a("li"),zee=a("strong"),HGe=o("bart"),UGe=o(" \u2014 "),D$=a("a"),JGe=o("BartConfig"),YGe=o(" (BART model)"),KGe=l(),Ef=a("li"),Wee=a("strong"),ZGe=o("beit"),eOe=o(" \u2014 "),G$=a("a"),oOe=o("BeitConfig"),rOe=o(" (BEiT model)"),tOe=l(),Cf=a("li"),Qee=a("strong"),aOe=o("bert"),nOe=o(" \u2014 "),O$=a("a"),sOe=o("BertConfig"),lOe=o(" (BERT model)"),iOe=l(),wf=a("li"),Hee=a("strong"),dOe=o("bert-generation"),cOe=o(" \u2014 "),V$=a("a"),fOe=o("BertGenerationConfig"),mOe=o(" (Bert Generation model)"),gOe=l(),Af=a("li"),Uee=a("strong"),hOe=o("big_bird"),pOe=o(" \u2014 "),X$=a("a"),_Oe=o("BigBirdConfig"),uOe=o(" (BigBird model)"),bOe=l(),yf=a("li"),Jee=a("strong"),vOe=o("bigbird_pegasus"),FOe=o(" \u2014 "),z$=a("a"),TOe=o("BigBirdPegasusConfig"),MOe=o(" (BigBirdPegasus model)"),EOe=l(),Lf=a("li"),Yee=a("strong"),COe=o("blenderbot"),wOe=o(" \u2014 "),W$=a("a"),AOe=o("BlenderbotConfig"),yOe=o(" (Blenderbot model)"),LOe=l(),xf=a("li"),Kee=a("strong"),xOe=o("blenderbot-small"),$Oe=o(" \u2014 "),Q$=a("a"),kOe=o("BlenderbotSmallConfig"),SOe=o(" (BlenderbotSmall model)"),ROe=l(),$f=a("li"),Zee=a("strong"),POe=o("camembert"),BOe=o(" \u2014 "),H$=a("a"),IOe=o("CamembertConfig"),qOe=o(" (CamemBERT model)"),NOe=l(),kf=a("li"),eoe=a("strong"),jOe=o("canine"),DOe=o(" \u2014 "),U$=a("a"),GOe=o("CanineConfig"),OOe=o(" (Canine model)"),VOe=l(),Sf=a("li"),ooe=a("strong"),XOe=o("clip"),zOe=o(" \u2014 "),J$=a("a"),WOe=o("CLIPConfig"),QOe=o(" (CLIP model)"),HOe=l(),Rf=a("li"),roe=a("strong"),UOe=o("convbert"),JOe=o(" \u2014 "),Y$=a("a"),YOe=o("ConvBertConfig"),KOe=o(" (ConvBERT model)"),ZOe=l(),Pf=a("li"),toe=a("strong"),eVe=o("convnext"),oVe=o(" \u2014 "),K$=a("a"),rVe=o("ConvNextConfig"),tVe=o(" (ConvNext model)"),aVe=l(),Bf=a("li"),aoe=a("strong"),nVe=o("ctrl"),sVe=o(" \u2014 "),Z$=a("a"),lVe=o("CTRLConfig"),iVe=o(" (CTRL model)"),dVe=l(),If=a("li"),noe=a("strong"),cVe=o("cvt"),fVe=o(" \u2014 "),ek=a("a"),mVe=o("CvtConfig"),gVe=o(" (CvT model)"),hVe=l(),qf=a("li"),soe=a("strong"),pVe=o("data2vec-audio"),_Ve=o(" \u2014 "),ok=a("a"),uVe=o("Data2VecAudioConfig"),bVe=o(" (Data2VecAudio model)"),vVe=l(),Nf=a("li"),loe=a("strong"),FVe=o("data2vec-text"),TVe=o(" \u2014 "),rk=a("a"),MVe=o("Data2VecTextConfig"),EVe=o(" (Data2VecText model)"),CVe=l(),jf=a("li"),ioe=a("strong"),wVe=o("data2vec-vision"),AVe=o(" \u2014 "),tk=a("a"),yVe=o("Data2VecVisionConfig"),LVe=o(" (Data2VecVision model)"),xVe=l(),Df=a("li"),doe=a("strong"),$Ve=o("deberta"),kVe=o(" \u2014 "),ak=a("a"),SVe=o("DebertaConfig"),RVe=o(" (DeBERTa model)"),PVe=l(),Gf=a("li"),coe=a("strong"),BVe=o("deberta-v2"),IVe=o(" \u2014 "),nk=a("a"),qVe=o("DebertaV2Config"),NVe=o(" (DeBERTa-v2 model)"),jVe=l(),Of=a("li"),foe=a("strong"),DVe=o("decision_transformer"),GVe=o(" \u2014 "),sk=a("a"),OVe=o("DecisionTransformerConfig"),VVe=o(" (Decision Transformer model)"),XVe=l(),Vf=a("li"),moe=a("strong"),zVe=o("deit"),WVe=o(" \u2014 "),lk=a("a"),QVe=o("DeiTConfig"),HVe=o(" (DeiT model)"),UVe=l(),Xf=a("li"),goe=a("strong"),JVe=o("detr"),YVe=o(" \u2014 "),ik=a("a"),KVe=o("DetrConfig"),ZVe=o(" (DETR model)"),eXe=l(),zf=a("li"),hoe=a("strong"),oXe=o("distilbert"),rXe=o(" \u2014 "),dk=a("a"),tXe=o("DistilBertConfig"),aXe=o(" (DistilBERT model)"),nXe=l(),Wf=a("li"),poe=a("strong"),sXe=o("dpr"),lXe=o(" \u2014 "),ck=a("a"),iXe=o("DPRConfig"),dXe=o(" (DPR model)"),cXe=l(),Qf=a("li"),_oe=a("strong"),fXe=o("dpt"),mXe=o(" \u2014 "),fk=a("a"),gXe=o("DPTConfig"),hXe=o(" (DPT model)"),pXe=l(),Hf=a("li"),uoe=a("strong"),_Xe=o("electra"),uXe=o(" \u2014 "),mk=a("a"),bXe=o("ElectraConfig"),vXe=o(" (ELECTRA model)"),FXe=l(),Uf=a("li"),boe=a("strong"),TXe=o("encoder-decoder"),MXe=o(" \u2014 "),gk=a("a"),EXe=o("EncoderDecoderConfig"),CXe=o(" (Encoder decoder model)"),wXe=l(),Jf=a("li"),voe=a("strong"),AXe=o("flaubert"),yXe=o(" \u2014 "),hk=a("a"),LXe=o("FlaubertConfig"),xXe=o(" (FlauBERT model)"),$Xe=l(),Yf=a("li"),Foe=a("strong"),kXe=o("flava"),SXe=o(" \u2014 "),pk=a("a"),RXe=o("FlavaConfig"),PXe=o(" (Flava model)"),BXe=l(),Kf=a("li"),Toe=a("strong"),IXe=o("fnet"),qXe=o(" \u2014 "),_k=a("a"),NXe=o("FNetConfig"),jXe=o(" (FNet model)"),DXe=l(),Zf=a("li"),Moe=a("strong"),GXe=o("fsmt"),OXe=o(" \u2014 "),uk=a("a"),VXe=o("FSMTConfig"),XXe=o(" (FairSeq Machine-Translation model)"),zXe=l(),em=a("li"),Eoe=a("strong"),WXe=o("funnel"),QXe=o(" \u2014 "),bk=a("a"),HXe=o("FunnelConfig"),UXe=o(" (Funnel Transformer model)"),JXe=l(),om=a("li"),Coe=a("strong"),YXe=o("glpn"),KXe=o(" \u2014 "),vk=a("a"),ZXe=o("GLPNConfig"),eze=o(" (GLPN model)"),oze=l(),rm=a("li"),woe=a("strong"),rze=o("gpt2"),tze=o(" \u2014 "),Fk=a("a"),aze=o("GPT2Config"),nze=o(" (OpenAI GPT-2 model)"),sze=l(),tm=a("li"),Aoe=a("strong"),lze=o("gpt_neo"),ize=o(" \u2014 "),Tk=a("a"),dze=o("GPTNeoConfig"),cze=o(" (GPT Neo model)"),fze=l(),am=a("li"),yoe=a("strong"),mze=o("gptj"),gze=o(" \u2014 "),Mk=a("a"),hze=o("GPTJConfig"),pze=o(" (GPT-J model)"),_ze=l(),nm=a("li"),Loe=a("strong"),uze=o("hubert"),bze=o(" \u2014 "),Ek=a("a"),vze=o("HubertConfig"),Fze=o(" (Hubert model)"),Tze=l(),sm=a("li"),xoe=a("strong"),Mze=o("ibert"),Eze=o(" \u2014 "),Ck=a("a"),Cze=o("IBertConfig"),wze=o(" (I-BERT model)"),Aze=l(),lm=a("li"),$oe=a("strong"),yze=o("imagegpt"),Lze=o(" \u2014 "),wk=a("a"),xze=o("ImageGPTConfig"),$ze=o(" (ImageGPT model)"),kze=l(),im=a("li"),koe=a("strong"),Sze=o("layoutlm"),Rze=o(" \u2014 "),Ak=a("a"),Pze=o("LayoutLMConfig"),Bze=o(" (LayoutLM model)"),Ize=l(),dm=a("li"),Soe=a("strong"),qze=o("layoutlmv2"),Nze=o(" \u2014 "),yk=a("a"),jze=o("LayoutLMv2Config"),Dze=o(" (LayoutLMv2 model)"),Gze=l(),cm=a("li"),Roe=a("strong"),Oze=o("led"),Vze=o(" \u2014 "),Lk=a("a"),Xze=o("LEDConfig"),zze=o(" (LED model)"),Wze=l(),fm=a("li"),Poe=a("strong"),Qze=o("longformer"),Hze=o(" \u2014 "),xk=a("a"),Uze=o("LongformerConfig"),Jze=o(" (Longformer model)"),Yze=l(),mm=a("li"),Boe=a("strong"),Kze=o("luke"),Zze=o(" \u2014 "),$k=a("a"),eWe=o("LukeConfig"),oWe=o(" (LUKE model)"),rWe=l(),gm=a("li"),Ioe=a("strong"),tWe=o("lxmert"),aWe=o(" \u2014 "),kk=a("a"),nWe=o("LxmertConfig"),sWe=o(" (LXMERT model)"),lWe=l(),hm=a("li"),qoe=a("strong"),iWe=o("m2m_100"),dWe=o(" \u2014 "),Sk=a("a"),cWe=o("M2M100Config"),fWe=o(" (M2M100 model)"),mWe=l(),pm=a("li"),Noe=a("strong"),gWe=o("marian"),hWe=o(" \u2014 "),Rk=a("a"),pWe=o("MarianConfig"),_We=o(" (Marian model)"),uWe=l(),_m=a("li"),joe=a("strong"),bWe=o("maskformer"),vWe=o(" \u2014 "),Pk=a("a"),FWe=o("MaskFormerConfig"),TWe=o(" (MaskFormer model)"),MWe=l(),um=a("li"),Doe=a("strong"),EWe=o("mbart"),CWe=o(" \u2014 "),Bk=a("a"),wWe=o("MBartConfig"),AWe=o(" (mBART model)"),yWe=l(),bm=a("li"),Goe=a("strong"),LWe=o("megatron-bert"),xWe=o(" \u2014 "),Ik=a("a"),$We=o("MegatronBertConfig"),kWe=o(" (MegatronBert model)"),SWe=l(),vm=a("li"),Ooe=a("strong"),RWe=o("mobilebert"),PWe=o(" \u2014 "),qk=a("a"),BWe=o("MobileBertConfig"),IWe=o(" (MobileBERT model)"),qWe=l(),Fm=a("li"),Voe=a("strong"),NWe=o("mpnet"),jWe=o(" \u2014 "),Nk=a("a"),DWe=o("MPNetConfig"),GWe=o(" (MPNet model)"),OWe=l(),Tm=a("li"),Xoe=a("strong"),VWe=o("mt5"),XWe=o(" \u2014 "),jk=a("a"),zWe=o("MT5Config"),WWe=o(" (mT5 model)"),QWe=l(),Mm=a("li"),zoe=a("strong"),HWe=o("nystromformer"),UWe=o(" \u2014 "),Dk=a("a"),JWe=o("NystromformerConfig"),YWe=o(" (Nystromformer model)"),KWe=l(),Em=a("li"),Woe=a("strong"),ZWe=o("openai-gpt"),eQe=o(" \u2014 "),Gk=a("a"),oQe=o("OpenAIGPTConfig"),rQe=o(" (OpenAI GPT model)"),tQe=l(),Cm=a("li"),Qoe=a("strong"),aQe=o("opt"),nQe=o(" \u2014 "),Ok=a("a"),sQe=o("OPTConfig"),lQe=o(" (OPT model)"),iQe=l(),wm=a("li"),Hoe=a("strong"),dQe=o("pegasus"),cQe=o(" \u2014 "),Vk=a("a"),fQe=o("PegasusConfig"),mQe=o(" (Pegasus model)"),gQe=l(),Am=a("li"),Uoe=a("strong"),hQe=o("perceiver"),pQe=o(" \u2014 "),Xk=a("a"),_Qe=o("PerceiverConfig"),uQe=o(" (Perceiver model)"),bQe=l(),ym=a("li"),Joe=a("strong"),vQe=o("plbart"),FQe=o(" \u2014 "),zk=a("a"),TQe=o("PLBartConfig"),MQe=o(" (PLBart model)"),EQe=l(),Lm=a("li"),Yoe=a("strong"),CQe=o("poolformer"),wQe=o(" \u2014 "),Wk=a("a"),AQe=o("PoolFormerConfig"),yQe=o(" (PoolFormer model)"),LQe=l(),xm=a("li"),Koe=a("strong"),xQe=o("prophetnet"),$Qe=o(" \u2014 "),Qk=a("a"),kQe=o("ProphetNetConfig"),SQe=o(" (ProphetNet model)"),RQe=l(),$m=a("li"),Zoe=a("strong"),PQe=o("qdqbert"),BQe=o(" \u2014 "),Hk=a("a"),IQe=o("QDQBertConfig"),qQe=o(" (QDQBert model)"),NQe=l(),km=a("li"),ere=a("strong"),jQe=o("rag"),DQe=o(" \u2014 "),Uk=a("a"),GQe=o("RagConfig"),OQe=o(" (RAG model)"),VQe=l(),Sm=a("li"),ore=a("strong"),XQe=o("realm"),zQe=o(" \u2014 "),Jk=a("a"),WQe=o("RealmConfig"),QQe=o(" (Realm model)"),HQe=l(),Rm=a("li"),rre=a("strong"),UQe=o("reformer"),JQe=o(" \u2014 "),Yk=a("a"),YQe=o("ReformerConfig"),KQe=o(" (Reformer model)"),ZQe=l(),Pm=a("li"),tre=a("strong"),eHe=o("regnet"),oHe=o(" \u2014 "),Kk=a("a"),rHe=o("RegNetConfig"),tHe=o(" (RegNet model)"),aHe=l(),Bm=a("li"),are=a("strong"),nHe=o("rembert"),sHe=o(" \u2014 "),Zk=a("a"),lHe=o("RemBertConfig"),iHe=o(" (RemBERT model)"),dHe=l(),Im=a("li"),nre=a("strong"),cHe=o("resnet"),fHe=o(" \u2014 "),eS=a("a"),mHe=o("ResNetConfig"),gHe=o(" (ResNet model)"),hHe=l(),qm=a("li"),sre=a("strong"),pHe=o("retribert"),_He=o(" \u2014 "),oS=a("a"),uHe=o("RetriBertConfig"),bHe=o(" (RetriBERT model)"),vHe=l(),Nm=a("li"),lre=a("strong"),FHe=o("roberta"),THe=o(" \u2014 "),rS=a("a"),MHe=o("RobertaConfig"),EHe=o(" (RoBERTa model)"),CHe=l(),jm=a("li"),ire=a("strong"),wHe=o("roformer"),AHe=o(" \u2014 "),tS=a("a"),yHe=o("RoFormerConfig"),LHe=o(" (RoFormer model)"),xHe=l(),Dm=a("li"),dre=a("strong"),$He=o("segformer"),kHe=o(" \u2014 "),aS=a("a"),SHe=o("SegformerConfig"),RHe=o(" (SegFormer model)"),PHe=l(),Gm=a("li"),cre=a("strong"),BHe=o("sew"),IHe=o(" \u2014 "),nS=a("a"),qHe=o("SEWConfig"),NHe=o(" (SEW model)"),jHe=l(),Om=a("li"),fre=a("strong"),DHe=o("sew-d"),GHe=o(" \u2014 "),sS=a("a"),OHe=o("SEWDConfig"),VHe=o(" (SEW-D model)"),XHe=l(),Vm=a("li"),mre=a("strong"),zHe=o("speech-encoder-decoder"),WHe=o(" \u2014 "),lS=a("a"),QHe=o("SpeechEncoderDecoderConfig"),HHe=o(" (Speech Encoder decoder model)"),UHe=l(),Xm=a("li"),gre=a("strong"),JHe=o("speech_to_text"),YHe=o(" \u2014 "),iS=a("a"),KHe=o("Speech2TextConfig"),ZHe=o(" (Speech2Text model)"),eUe=l(),zm=a("li"),hre=a("strong"),oUe=o("speech_to_text_2"),rUe=o(" \u2014 "),dS=a("a"),tUe=o("Speech2Text2Config"),aUe=o(" (Speech2Text2 model)"),nUe=l(),Wm=a("li"),pre=a("strong"),sUe=o("splinter"),lUe=o(" \u2014 "),cS=a("a"),iUe=o("SplinterConfig"),dUe=o(" (Splinter model)"),cUe=l(),Qm=a("li"),_re=a("strong"),fUe=o("squeezebert"),mUe=o(" \u2014 "),fS=a("a"),gUe=o("SqueezeBertConfig"),hUe=o(" (SqueezeBERT model)"),pUe=l(),Hm=a("li"),ure=a("strong"),_Ue=o("swin"),uUe=o(" \u2014 "),mS=a("a"),bUe=o("SwinConfig"),vUe=o(" (Swin model)"),FUe=l(),Um=a("li"),bre=a("strong"),TUe=o("t5"),MUe=o(" \u2014 "),gS=a("a"),EUe=o("T5Config"),CUe=o(" (T5 model)"),wUe=l(),Jm=a("li"),vre=a("strong"),AUe=o("tapas"),yUe=o(" \u2014 "),hS=a("a"),LUe=o("TapasConfig"),xUe=o(" (TAPAS model)"),$Ue=l(),Ym=a("li"),Fre=a("strong"),kUe=o("trajectory_transformer"),SUe=o(" \u2014 "),pS=a("a"),RUe=o("TrajectoryTransformerConfig"),PUe=o(" (Trajectory Transformer model)"),BUe=l(),Km=a("li"),Tre=a("strong"),IUe=o("transfo-xl"),qUe=o(" \u2014 "),_S=a("a"),NUe=o("TransfoXLConfig"),jUe=o(" (Transformer-XL model)"),DUe=l(),Zm=a("li"),Mre=a("strong"),GUe=o("trocr"),OUe=o(" \u2014 "),uS=a("a"),VUe=o("TrOCRConfig"),XUe=o(" (TrOCR model)"),zUe=l(),eg=a("li"),Ere=a("strong"),WUe=o("unispeech"),QUe=o(" \u2014 "),bS=a("a"),HUe=o("UniSpeechConfig"),UUe=o(" (UniSpeech model)"),JUe=l(),og=a("li"),Cre=a("strong"),YUe=o("unispeech-sat"),KUe=o(" \u2014 "),vS=a("a"),ZUe=o("UniSpeechSatConfig"),eJe=o(" (UniSpeechSat model)"),oJe=l(),rg=a("li"),wre=a("strong"),rJe=o("van"),tJe=o(" \u2014 "),FS=a("a"),aJe=o("VanConfig"),nJe=o(" (VAN model)"),sJe=l(),tg=a("li"),Are=a("strong"),lJe=o("vilt"),iJe=o(" \u2014 "),TS=a("a"),dJe=o("ViltConfig"),cJe=o(" (ViLT model)"),fJe=l(),ag=a("li"),yre=a("strong"),mJe=o("vision-encoder-decoder"),gJe=o(" \u2014 "),MS=a("a"),hJe=o("VisionEncoderDecoderConfig"),pJe=o(" (Vision Encoder decoder model)"),_Je=l(),ng=a("li"),Lre=a("strong"),uJe=o("vision-text-dual-encoder"),bJe=o(" \u2014 "),ES=a("a"),vJe=o("VisionTextDualEncoderConfig"),FJe=o(" (VisionTextDualEncoder model)"),TJe=l(),sg=a("li"),xre=a("strong"),MJe=o("visual_bert"),EJe=o(" \u2014 "),CS=a("a"),CJe=o("VisualBertConfig"),wJe=o(" (VisualBert model)"),AJe=l(),lg=a("li"),$re=a("strong"),yJe=o("vit"),LJe=o(" \u2014 "),wS=a("a"),xJe=o("ViTConfig"),$Je=o(" (ViT model)"),kJe=l(),ig=a("li"),kre=a("strong"),SJe=o("vit_mae"),RJe=o(" \u2014 "),AS=a("a"),PJe=o("ViTMAEConfig"),BJe=o(" (ViTMAE model)"),IJe=l(),dg=a("li"),Sre=a("strong"),qJe=o("wav2vec2"),NJe=o(" \u2014 "),yS=a("a"),jJe=o("Wav2Vec2Config"),DJe=o(" (Wav2Vec2 model)"),GJe=l(),cg=a("li"),Rre=a("strong"),OJe=o("wav2vec2-conformer"),VJe=o(" \u2014 "),LS=a("a"),XJe=o("Wav2Vec2ConformerConfig"),zJe=o(" (Wav2Vec2-Conformer model)"),WJe=l(),fg=a("li"),Pre=a("strong"),QJe=o("wavlm"),HJe=o(" \u2014 "),xS=a("a"),UJe=o("WavLMConfig"),JJe=o(" (WavLM model)"),YJe=l(),mg=a("li"),Bre=a("strong"),KJe=o("xglm"),ZJe=o(" \u2014 "),$S=a("a"),eYe=o("XGLMConfig"),oYe=o(" (XGLM model)"),rYe=l(),gg=a("li"),Ire=a("strong"),tYe=o("xlm"),aYe=o(" \u2014 "),kS=a("a"),nYe=o("XLMConfig"),sYe=o(" (XLM model)"),lYe=l(),hg=a("li"),qre=a("strong"),iYe=o("xlm-prophetnet"),dYe=o(" \u2014 "),SS=a("a"),cYe=o("XLMProphetNetConfig"),fYe=o(" (XLMProphetNet model)"),mYe=l(),pg=a("li"),Nre=a("strong"),gYe=o("xlm-roberta"),hYe=o(" \u2014 "),RS=a("a"),pYe=o("XLMRobertaConfig"),_Ye=o(" (XLM-RoBERTa model)"),uYe=l(),_g=a("li"),jre=a("strong"),bYe=o("xlm-roberta-xl"),vYe=o(" \u2014 "),PS=a("a"),FYe=o("XLMRobertaXLConfig"),TYe=o(" (XLM-RoBERTa-XL model)"),MYe=l(),ug=a("li"),Dre=a("strong"),EYe=o("xlnet"),CYe=o(" \u2014 "),BS=a("a"),wYe=o("XLNetConfig"),AYe=o(" (XLNet model)"),yYe=l(),bg=a("li"),Gre=a("strong"),LYe=o("yolos"),xYe=o(" \u2014 "),IS=a("a"),$Ye=o("YolosConfig"),kYe=o(" (YOLOS model)"),SYe=l(),vg=a("li"),Ore=a("strong"),RYe=o("yoso"),PYe=o(" \u2014 "),qS=a("a"),BYe=o("YosoConfig"),IYe=o(" (YOSO model)"),qYe=l(),F(Fg.$$.fragment),NYe=l(),Tg=a("div"),F(M0.$$.fragment),jYe=l(),Vre=a("p"),DYe=o("Register a new configuration for this class."),cqe=l(),Fi=a("h2"),Mg=a("a"),Xre=a("span"),F(E0.$$.fragment),GYe=l(),zre=a("span"),OYe=o("AutoTokenizer"),fqe=l(),wo=a("div"),F(C0.$$.fragment),VYe=l(),w0=a("p"),XYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=a("a"),zYe=o("AutoTokenizer.from_pretrained()"),WYe=o(" class method."),QYe=l(),A0=a("p"),HYe=o("This class cannot be instantiated directly using "),Wre=a("code"),UYe=o("__init__()"),JYe=o(" (throws an error)."),YYe=l(),Cr=a("div"),F(y0.$$.fragment),KYe=l(),Qre=a("p"),ZYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),eKe=l(),Aa=a("p"),oKe=o("The tokenizer class to instantiate is selected based on the "),Hre=a("code"),rKe=o("model_type"),tKe=o(` property of the config object (either
passed as an argument or loaded from `),Ure=a("code"),aKe=o("pretrained_model_name_or_path"),nKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jre=a("code"),sKe=o("pretrained_model_name_or_path"),lKe=o(":"),iKe=l(),k=a("ul"),Sn=a("li"),Yre=a("strong"),dKe=o("albert"),cKe=o(" \u2014 "),jS=a("a"),fKe=o("AlbertTokenizer"),mKe=o(" or "),DS=a("a"),gKe=o("AlbertTokenizerFast"),hKe=o(" (ALBERT model)"),pKe=l(),Rn=a("li"),Kre=a("strong"),_Ke=o("bart"),uKe=o(" \u2014 "),GS=a("a"),bKe=o("BartTokenizer"),vKe=o(" or "),OS=a("a"),FKe=o("BartTokenizerFast"),TKe=o(" (BART model)"),MKe=l(),Pn=a("li"),Zre=a("strong"),EKe=o("barthez"),CKe=o(" \u2014 "),VS=a("a"),wKe=o("BarthezTokenizer"),AKe=o(" or "),XS=a("a"),yKe=o("BarthezTokenizerFast"),LKe=o(" (BARThez model)"),xKe=l(),Eg=a("li"),ete=a("strong"),$Ke=o("bartpho"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("BartphoTokenizer"),RKe=o(" (BARTpho model)"),PKe=l(),Bn=a("li"),ote=a("strong"),BKe=o("bert"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("BertTokenizer"),NKe=o(" or "),QS=a("a"),jKe=o("BertTokenizerFast"),DKe=o(" (BERT model)"),GKe=l(),Cg=a("li"),rte=a("strong"),OKe=o("bert-generation"),VKe=o(" \u2014 "),HS=a("a"),XKe=o("BertGenerationTokenizer"),zKe=o(" (Bert Generation model)"),WKe=l(),wg=a("li"),tte=a("strong"),QKe=o("bert-japanese"),HKe=o(" \u2014 "),US=a("a"),UKe=o("BertJapaneseTokenizer"),JKe=o(" (BertJapanese model)"),YKe=l(),Ag=a("li"),ate=a("strong"),KKe=o("bertweet"),ZKe=o(" \u2014 "),JS=a("a"),eZe=o("BertweetTokenizer"),oZe=o(" (Bertweet model)"),rZe=l(),In=a("li"),nte=a("strong"),tZe=o("big_bird"),aZe=o(" \u2014 "),YS=a("a"),nZe=o("BigBirdTokenizer"),sZe=o(" or "),KS=a("a"),lZe=o("BigBirdTokenizerFast"),iZe=o(" (BigBird model)"),dZe=l(),qn=a("li"),ste=a("strong"),cZe=o("bigbird_pegasus"),fZe=o(" \u2014 "),ZS=a("a"),mZe=o("PegasusTokenizer"),gZe=o(" or "),eR=a("a"),hZe=o("PegasusTokenizerFast"),pZe=o(" (BigBirdPegasus model)"),_Ze=l(),Nn=a("li"),lte=a("strong"),uZe=o("blenderbot"),bZe=o(" \u2014 "),oR=a("a"),vZe=o("BlenderbotTokenizer"),FZe=o(" or "),rR=a("a"),TZe=o("BlenderbotTokenizerFast"),MZe=o(" (Blenderbot model)"),EZe=l(),yg=a("li"),ite=a("strong"),CZe=o("blenderbot-small"),wZe=o(" \u2014 "),tR=a("a"),AZe=o("BlenderbotSmallTokenizer"),yZe=o(" (BlenderbotSmall model)"),LZe=l(),Lg=a("li"),dte=a("strong"),xZe=o("byt5"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("ByT5Tokenizer"),SZe=o(" (ByT5 model)"),RZe=l(),jn=a("li"),cte=a("strong"),PZe=o("camembert"),BZe=o(" \u2014 "),nR=a("a"),IZe=o("CamembertTokenizer"),qZe=o(" or "),sR=a("a"),NZe=o("CamembertTokenizerFast"),jZe=o(" (CamemBERT model)"),DZe=l(),xg=a("li"),fte=a("strong"),GZe=o("canine"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("CanineTokenizer"),XZe=o(" (Canine model)"),zZe=l(),Dn=a("li"),mte=a("strong"),WZe=o("clip"),QZe=o(" \u2014 "),iR=a("a"),HZe=o("CLIPTokenizer"),UZe=o(" or "),dR=a("a"),JZe=o("CLIPTokenizerFast"),YZe=o(" (CLIP model)"),KZe=l(),Gn=a("li"),gte=a("strong"),ZZe=o("convbert"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("ConvBertTokenizer"),reo=o(" or "),fR=a("a"),teo=o("ConvBertTokenizerFast"),aeo=o(" (ConvBERT model)"),neo=l(),On=a("li"),hte=a("strong"),seo=o("cpm"),leo=o(" \u2014 "),mR=a("a"),ieo=o("CpmTokenizer"),deo=o(" or "),gR=a("a"),ceo=o("CpmTokenizerFast"),feo=o(" (CPM model)"),meo=l(),$g=a("li"),pte=a("strong"),geo=o("ctrl"),heo=o(" \u2014 "),hR=a("a"),peo=o("CTRLTokenizer"),_eo=o(" (CTRL model)"),ueo=l(),Vn=a("li"),_te=a("strong"),beo=o("data2vec-text"),veo=o(" \u2014 "),pR=a("a"),Feo=o("RobertaTokenizer"),Teo=o(" or "),_R=a("a"),Meo=o("RobertaTokenizerFast"),Eeo=o(" (Data2VecText model)"),Ceo=l(),Xn=a("li"),ute=a("strong"),weo=o("deberta"),Aeo=o(" \u2014 "),uR=a("a"),yeo=o("DebertaTokenizer"),Leo=o(" or "),bR=a("a"),xeo=o("DebertaTokenizerFast"),$eo=o(" (DeBERTa model)"),keo=l(),zn=a("li"),bte=a("strong"),Seo=o("deberta-v2"),Reo=o(" \u2014 "),vR=a("a"),Peo=o("DebertaV2Tokenizer"),Beo=o(" or "),FR=a("a"),Ieo=o("DebertaV2TokenizerFast"),qeo=o(" (DeBERTa-v2 model)"),Neo=l(),Wn=a("li"),vte=a("strong"),jeo=o("distilbert"),Deo=o(" \u2014 "),TR=a("a"),Geo=o("DistilBertTokenizer"),Oeo=o(" or "),MR=a("a"),Veo=o("DistilBertTokenizerFast"),Xeo=o(" (DistilBERT model)"),zeo=l(),Qn=a("li"),Fte=a("strong"),Weo=o("dpr"),Qeo=o(" \u2014 "),ER=a("a"),Heo=o("DPRQuestionEncoderTokenizer"),Ueo=o(" or "),CR=a("a"),Jeo=o("DPRQuestionEncoderTokenizerFast"),Yeo=o(" (DPR model)"),Keo=l(),Hn=a("li"),Tte=a("strong"),Zeo=o("electra"),eoo=o(" \u2014 "),wR=a("a"),ooo=o("ElectraTokenizer"),roo=o(" or "),AR=a("a"),too=o("ElectraTokenizerFast"),aoo=o(" (ELECTRA model)"),noo=l(),kg=a("li"),Mte=a("strong"),soo=o("flaubert"),loo=o(" \u2014 "),yR=a("a"),ioo=o("FlaubertTokenizer"),doo=o(" (FlauBERT model)"),coo=l(),Un=a("li"),Ete=a("strong"),foo=o("fnet"),moo=o(" \u2014 "),LR=a("a"),goo=o("FNetTokenizer"),hoo=o(" or "),xR=a("a"),poo=o("FNetTokenizerFast"),_oo=o(" (FNet model)"),uoo=l(),Sg=a("li"),Cte=a("strong"),boo=o("fsmt"),voo=o(" \u2014 "),$R=a("a"),Foo=o("FSMTTokenizer"),Too=o(" (FairSeq Machine-Translation model)"),Moo=l(),Jn=a("li"),wte=a("strong"),Eoo=o("funnel"),Coo=o(" \u2014 "),kR=a("a"),woo=o("FunnelTokenizer"),Aoo=o(" or "),SR=a("a"),yoo=o("FunnelTokenizerFast"),Loo=o(" (Funnel Transformer model)"),xoo=l(),Yn=a("li"),Ate=a("strong"),$oo=o("gpt2"),koo=o(" \u2014 "),RR=a("a"),Soo=o("GPT2Tokenizer"),Roo=o(" or "),PR=a("a"),Poo=o("GPT2TokenizerFast"),Boo=o(" (OpenAI GPT-2 model)"),Ioo=l(),Kn=a("li"),yte=a("strong"),qoo=o("gpt_neo"),Noo=o(" \u2014 "),BR=a("a"),joo=o("GPT2Tokenizer"),Doo=o(" or "),IR=a("a"),Goo=o("GPT2TokenizerFast"),Ooo=o(" (GPT Neo model)"),Voo=l(),Zn=a("li"),Lte=a("strong"),Xoo=o("gptj"),zoo=o(" \u2014 "),qR=a("a"),Woo=o("GPT2Tokenizer"),Qoo=o(" or "),NR=a("a"),Hoo=o("GPT2TokenizerFast"),Uoo=o(" (GPT-J model)"),Joo=l(),es=a("li"),xte=a("strong"),Yoo=o("herbert"),Koo=o(" \u2014 "),jR=a("a"),Zoo=o("HerbertTokenizer"),ero=o(" or "),DR=a("a"),oro=o("HerbertTokenizerFast"),rro=o(" (HerBERT model)"),tro=l(),Rg=a("li"),$te=a("strong"),aro=o("hubert"),nro=o(" \u2014 "),GR=a("a"),sro=o("Wav2Vec2CTCTokenizer"),lro=o(" (Hubert model)"),iro=l(),os=a("li"),kte=a("strong"),dro=o("ibert"),cro=o(" \u2014 "),OR=a("a"),fro=o("RobertaTokenizer"),mro=o(" or "),VR=a("a"),gro=o("RobertaTokenizerFast"),hro=o(" (I-BERT model)"),pro=l(),rs=a("li"),Ste=a("strong"),_ro=o("layoutlm"),uro=o(" \u2014 "),XR=a("a"),bro=o("LayoutLMTokenizer"),vro=o(" or "),zR=a("a"),Fro=o("LayoutLMTokenizerFast"),Tro=o(" (LayoutLM model)"),Mro=l(),ts=a("li"),Rte=a("strong"),Ero=o("layoutlmv2"),Cro=o(" \u2014 "),WR=a("a"),wro=o("LayoutLMv2Tokenizer"),Aro=o(" or "),QR=a("a"),yro=o("LayoutLMv2TokenizerFast"),Lro=o(" (LayoutLMv2 model)"),xro=l(),as=a("li"),Pte=a("strong"),$ro=o("layoutxlm"),kro=o(" \u2014 "),HR=a("a"),Sro=o("LayoutXLMTokenizer"),Rro=o(" or "),UR=a("a"),Pro=o("LayoutXLMTokenizerFast"),Bro=o(" (LayoutXLM model)"),Iro=l(),ns=a("li"),Bte=a("strong"),qro=o("led"),Nro=o(" \u2014 "),JR=a("a"),jro=o("LEDTokenizer"),Dro=o(" or "),YR=a("a"),Gro=o("LEDTokenizerFast"),Oro=o(" (LED model)"),Vro=l(),ss=a("li"),Ite=a("strong"),Xro=o("longformer"),zro=o(" \u2014 "),KR=a("a"),Wro=o("LongformerTokenizer"),Qro=o(" or "),ZR=a("a"),Hro=o("LongformerTokenizerFast"),Uro=o(" (Longformer model)"),Jro=l(),Pg=a("li"),qte=a("strong"),Yro=o("luke"),Kro=o(" \u2014 "),eP=a("a"),Zro=o("LukeTokenizer"),eto=o(" (LUKE model)"),oto=l(),ls=a("li"),Nte=a("strong"),rto=o("lxmert"),tto=o(" \u2014 "),oP=a("a"),ato=o("LxmertTokenizer"),nto=o(" or "),rP=a("a"),sto=o("LxmertTokenizerFast"),lto=o(" (LXMERT model)"),ito=l(),Bg=a("li"),jte=a("strong"),dto=o("m2m_100"),cto=o(" \u2014 "),tP=a("a"),fto=o("M2M100Tokenizer"),mto=o(" (M2M100 model)"),gto=l(),Ig=a("li"),Dte=a("strong"),hto=o("marian"),pto=o(" \u2014 "),aP=a("a"),_to=o("MarianTokenizer"),uto=o(" (Marian model)"),bto=l(),is=a("li"),Gte=a("strong"),vto=o("mbart"),Fto=o(" \u2014 "),nP=a("a"),Tto=o("MBartTokenizer"),Mto=o(" or "),sP=a("a"),Eto=o("MBartTokenizerFast"),Cto=o(" (mBART model)"),wto=l(),ds=a("li"),Ote=a("strong"),Ato=o("mbart50"),yto=o(" \u2014 "),lP=a("a"),Lto=o("MBart50Tokenizer"),xto=o(" or "),iP=a("a"),$to=o("MBart50TokenizerFast"),kto=o(" (mBART-50 model)"),Sto=l(),cs=a("li"),Vte=a("strong"),Rto=o("megatron-bert"),Pto=o(" \u2014 "),dP=a("a"),Bto=o("BertTokenizer"),Ito=o(" or "),cP=a("a"),qto=o("BertTokenizerFast"),Nto=o(" (MegatronBert model)"),jto=l(),qg=a("li"),Xte=a("strong"),Dto=o("mluke"),Gto=o(" \u2014 "),fP=a("a"),Oto=o("MLukeTokenizer"),Vto=o(" (mLUKE model)"),Xto=l(),fs=a("li"),zte=a("strong"),zto=o("mobilebert"),Wto=o(" \u2014 "),mP=a("a"),Qto=o("MobileBertTokenizer"),Hto=o(" or "),gP=a("a"),Uto=o("MobileBertTokenizerFast"),Jto=o(" (MobileBERT model)"),Yto=l(),ms=a("li"),Wte=a("strong"),Kto=o("mpnet"),Zto=o(" \u2014 "),hP=a("a"),eao=o("MPNetTokenizer"),oao=o(" or "),pP=a("a"),rao=o("MPNetTokenizerFast"),tao=o(" (MPNet model)"),aao=l(),gs=a("li"),Qte=a("strong"),nao=o("mt5"),sao=o(" \u2014 "),_P=a("a"),lao=o("MT5Tokenizer"),iao=o(" or "),uP=a("a"),dao=o("MT5TokenizerFast"),cao=o(" (mT5 model)"),fao=l(),hs=a("li"),Hte=a("strong"),mao=o("nystromformer"),gao=o(" \u2014 "),bP=a("a"),hao=o("AlbertTokenizer"),pao=o(" or "),vP=a("a"),_ao=o("AlbertTokenizerFast"),uao=o(" (Nystromformer model)"),bao=l(),ps=a("li"),Ute=a("strong"),vao=o("openai-gpt"),Fao=o(" \u2014 "),FP=a("a"),Tao=o("OpenAIGPTTokenizer"),Mao=o(" or "),TP=a("a"),Eao=o("OpenAIGPTTokenizerFast"),Cao=o(" (OpenAI GPT model)"),wao=l(),Ng=a("li"),Jte=a("strong"),Aao=o("opt"),yao=o(" \u2014 "),MP=a("a"),Lao=o("GPT2Tokenizer"),xao=o(" (OPT model)"),$ao=l(),_s=a("li"),Yte=a("strong"),kao=o("pegasus"),Sao=o(" \u2014 "),EP=a("a"),Rao=o("PegasusTokenizer"),Pao=o(" or "),CP=a("a"),Bao=o("PegasusTokenizerFast"),Iao=o(" (Pegasus model)"),qao=l(),jg=a("li"),Kte=a("strong"),Nao=o("perceiver"),jao=o(" \u2014 "),wP=a("a"),Dao=o("PerceiverTokenizer"),Gao=o(" (Perceiver model)"),Oao=l(),Dg=a("li"),Zte=a("strong"),Vao=o("phobert"),Xao=o(" \u2014 "),AP=a("a"),zao=o("PhobertTokenizer"),Wao=o(" (PhoBERT model)"),Qao=l(),Gg=a("li"),eae=a("strong"),Hao=o("plbart"),Uao=o(" \u2014 "),yP=a("a"),Jao=o("PLBartTokenizer"),Yao=o(" (PLBart model)"),Kao=l(),Og=a("li"),oae=a("strong"),Zao=o("prophetnet"),eno=o(" \u2014 "),LP=a("a"),ono=o("ProphetNetTokenizer"),rno=o(" (ProphetNet model)"),tno=l(),us=a("li"),rae=a("strong"),ano=o("qdqbert"),nno=o(" \u2014 "),xP=a("a"),sno=o("BertTokenizer"),lno=o(" or "),$P=a("a"),ino=o("BertTokenizerFast"),dno=o(" (QDQBert model)"),cno=l(),Vg=a("li"),tae=a("strong"),fno=o("rag"),mno=o(" \u2014 "),kP=a("a"),gno=o("RagTokenizer"),hno=o(" (RAG model)"),pno=l(),bs=a("li"),aae=a("strong"),_no=o("realm"),uno=o(" \u2014 "),SP=a("a"),bno=o("RealmTokenizer"),vno=o(" or "),RP=a("a"),Fno=o("RealmTokenizerFast"),Tno=o(" (Realm model)"),Mno=l(),vs=a("li"),nae=a("strong"),Eno=o("reformer"),Cno=o(" \u2014 "),PP=a("a"),wno=o("ReformerTokenizer"),Ano=o(" or "),BP=a("a"),yno=o("ReformerTokenizerFast"),Lno=o(" (Reformer model)"),xno=l(),Fs=a("li"),sae=a("strong"),$no=o("rembert"),kno=o(" \u2014 "),IP=a("a"),Sno=o("RemBertTokenizer"),Rno=o(" or "),qP=a("a"),Pno=o("RemBertTokenizerFast"),Bno=o(" (RemBERT model)"),Ino=l(),Ts=a("li"),lae=a("strong"),qno=o("retribert"),Nno=o(" \u2014 "),NP=a("a"),jno=o("RetriBertTokenizer"),Dno=o(" or "),jP=a("a"),Gno=o("RetriBertTokenizerFast"),Ono=o(" (RetriBERT model)"),Vno=l(),Ms=a("li"),iae=a("strong"),Xno=o("roberta"),zno=o(" \u2014 "),DP=a("a"),Wno=o("RobertaTokenizer"),Qno=o(" or "),GP=a("a"),Hno=o("RobertaTokenizerFast"),Uno=o(" (RoBERTa model)"),Jno=l(),Es=a("li"),dae=a("strong"),Yno=o("roformer"),Kno=o(" \u2014 "),OP=a("a"),Zno=o("RoFormerTokenizer"),eso=o(" or "),VP=a("a"),oso=o("RoFormerTokenizerFast"),rso=o(" (RoFormer model)"),tso=l(),Xg=a("li"),cae=a("strong"),aso=o("speech_to_text"),nso=o(" \u2014 "),XP=a("a"),sso=o("Speech2TextTokenizer"),lso=o(" (Speech2Text model)"),iso=l(),zg=a("li"),fae=a("strong"),dso=o("speech_to_text_2"),cso=o(" \u2014 "),zP=a("a"),fso=o("Speech2Text2Tokenizer"),mso=o(" (Speech2Text2 model)"),gso=l(),Cs=a("li"),mae=a("strong"),hso=o("splinter"),pso=o(" \u2014 "),WP=a("a"),_so=o("SplinterTokenizer"),uso=o(" or "),QP=a("a"),bso=o("SplinterTokenizerFast"),vso=o(" (Splinter model)"),Fso=l(),ws=a("li"),gae=a("strong"),Tso=o("squeezebert"),Mso=o(" \u2014 "),HP=a("a"),Eso=o("SqueezeBertTokenizer"),Cso=o(" or "),UP=a("a"),wso=o("SqueezeBertTokenizerFast"),Aso=o(" (SqueezeBERT model)"),yso=l(),As=a("li"),hae=a("strong"),Lso=o("t5"),xso=o(" \u2014 "),JP=a("a"),$so=o("T5Tokenizer"),kso=o(" or "),YP=a("a"),Sso=o("T5TokenizerFast"),Rso=o(" (T5 model)"),Pso=l(),Wg=a("li"),pae=a("strong"),Bso=o("tapas"),Iso=o(" \u2014 "),KP=a("a"),qso=o("TapasTokenizer"),Nso=o(" (TAPAS model)"),jso=l(),Qg=a("li"),_ae=a("strong"),Dso=o("tapex"),Gso=o(" \u2014 "),ZP=a("a"),Oso=o("TapexTokenizer"),Vso=o(" (TAPEX model)"),Xso=l(),Hg=a("li"),uae=a("strong"),zso=o("transfo-xl"),Wso=o(" \u2014 "),eB=a("a"),Qso=o("TransfoXLTokenizer"),Hso=o(" (Transformer-XL model)"),Uso=l(),ys=a("li"),bae=a("strong"),Jso=o("visual_bert"),Yso=o(" \u2014 "),oB=a("a"),Kso=o("BertTokenizer"),Zso=o(" or "),rB=a("a"),elo=o("BertTokenizerFast"),olo=o(" (VisualBert model)"),rlo=l(),Ug=a("li"),vae=a("strong"),tlo=o("wav2vec2"),alo=o(" \u2014 "),tB=a("a"),nlo=o("Wav2Vec2CTCTokenizer"),slo=o(" (Wav2Vec2 model)"),llo=l(),Jg=a("li"),Fae=a("strong"),ilo=o("wav2vec2-conformer"),dlo=o(" \u2014 "),aB=a("a"),clo=o("Wav2Vec2CTCTokenizer"),flo=o(" (Wav2Vec2-Conformer model)"),mlo=l(),Yg=a("li"),Tae=a("strong"),glo=o("wav2vec2_phoneme"),hlo=o(" \u2014 "),nB=a("a"),plo=o("Wav2Vec2PhonemeCTCTokenizer"),_lo=o(" (Wav2Vec2Phoneme model)"),ulo=l(),Ls=a("li"),Mae=a("strong"),blo=o("xglm"),vlo=o(" \u2014 "),sB=a("a"),Flo=o("XGLMTokenizer"),Tlo=o(" or "),lB=a("a"),Mlo=o("XGLMTokenizerFast"),Elo=o(" (XGLM model)"),Clo=l(),Kg=a("li"),Eae=a("strong"),wlo=o("xlm"),Alo=o(" \u2014 "),iB=a("a"),ylo=o("XLMTokenizer"),Llo=o(" (XLM model)"),xlo=l(),Zg=a("li"),Cae=a("strong"),$lo=o("xlm-prophetnet"),klo=o(" \u2014 "),dB=a("a"),Slo=o("XLMProphetNetTokenizer"),Rlo=o(" (XLMProphetNet model)"),Plo=l(),xs=a("li"),wae=a("strong"),Blo=o("xlm-roberta"),Ilo=o(" \u2014 "),cB=a("a"),qlo=o("XLMRobertaTokenizer"),Nlo=o(" or "),fB=a("a"),jlo=o("XLMRobertaTokenizerFast"),Dlo=o(" (XLM-RoBERTa model)"),Glo=l(),$s=a("li"),Aae=a("strong"),Olo=o("xlm-roberta-xl"),Vlo=o(" \u2014 "),mB=a("a"),Xlo=o("RobertaTokenizer"),zlo=o(" or "),gB=a("a"),Wlo=o("RobertaTokenizerFast"),Qlo=o(" (XLM-RoBERTa-XL model)"),Hlo=l(),ks=a("li"),yae=a("strong"),Ulo=o("xlnet"),Jlo=o(" \u2014 "),hB=a("a"),Ylo=o("XLNetTokenizer"),Klo=o(" or "),pB=a("a"),Zlo=o("XLNetTokenizerFast"),eio=o(" (XLNet model)"),oio=l(),Ss=a("li"),Lae=a("strong"),rio=o("yoso"),tio=o(" \u2014 "),_B=a("a"),aio=o("AlbertTokenizer"),nio=o(" or "),uB=a("a"),sio=o("AlbertTokenizerFast"),lio=o(" (YOSO model)"),iio=l(),F(eh.$$.fragment),dio=l(),oh=a("div"),F(L0.$$.fragment),cio=l(),xae=a("p"),fio=o("Register a new tokenizer in this mapping."),mqe=l(),Ti=a("h2"),rh=a("a"),$ae=a("span"),F(x0.$$.fragment),mio=l(),kae=a("span"),gio=o("AutoFeatureExtractor"),gqe=l(),Ao=a("div"),F($0.$$.fragment),hio=l(),k0=a("p"),pio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bB=a("a"),_io=o("AutoFeatureExtractor.from_pretrained()"),uio=o(" class method."),bio=l(),S0=a("p"),vio=o("This class cannot be instantiated directly using "),Sae=a("code"),Fio=o("__init__()"),Tio=o(" (throws an error)."),Mio=l(),He=a("div"),F(R0.$$.fragment),Eio=l(),Rae=a("p"),Cio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wio=l(),ya=a("p"),Aio=o("The feature extractor class to instantiate is selected based on the "),Pae=a("code"),yio=o("model_type"),Lio=o(` property of the config object
(either passed as an argument or loaded from `),Bae=a("code"),xio=o("pretrained_model_name_or_path"),$io=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iae=a("code"),kio=o("pretrained_model_name_or_path"),Sio=o(":"),Rio=l(),K=a("ul"),th=a("li"),qae=a("strong"),Pio=o("beit"),Bio=o(" \u2014 "),vB=a("a"),Iio=o("BeitFeatureExtractor"),qio=o(" (BEiT model)"),Nio=l(),ah=a("li"),Nae=a("strong"),jio=o("clip"),Dio=o(" \u2014 "),FB=a("a"),Gio=o("CLIPFeatureExtractor"),Oio=o(" (CLIP model)"),Vio=l(),nh=a("li"),jae=a("strong"),Xio=o("convnext"),zio=o(" \u2014 "),TB=a("a"),Wio=o("ConvNextFeatureExtractor"),Qio=o(" (ConvNext model)"),Hio=l(),sh=a("li"),Dae=a("strong"),Uio=o("cvt"),Jio=o(" \u2014 "),MB=a("a"),Yio=o("ConvNextFeatureExtractor"),Kio=o(" (CvT model)"),Zio=l(),lh=a("li"),Gae=a("strong"),edo=o("data2vec-audio"),odo=o(" \u2014 "),EB=a("a"),rdo=o("Wav2Vec2FeatureExtractor"),tdo=o(" (Data2VecAudio model)"),ado=l(),ih=a("li"),Oae=a("strong"),ndo=o("data2vec-vision"),sdo=o(" \u2014 "),CB=a("a"),ldo=o("BeitFeatureExtractor"),ido=o(" (Data2VecVision model)"),ddo=l(),dh=a("li"),Vae=a("strong"),cdo=o("deit"),fdo=o(" \u2014 "),wB=a("a"),mdo=o("DeiTFeatureExtractor"),gdo=o(" (DeiT model)"),hdo=l(),ch=a("li"),Xae=a("strong"),pdo=o("detr"),_do=o(" \u2014 "),AB=a("a"),udo=o("DetrFeatureExtractor"),bdo=o(" (DETR model)"),vdo=l(),fh=a("li"),zae=a("strong"),Fdo=o("dpt"),Tdo=o(" \u2014 "),yB=a("a"),Mdo=o("DPTFeatureExtractor"),Edo=o(" (DPT model)"),Cdo=l(),mh=a("li"),Wae=a("strong"),wdo=o("flava"),Ado=o(" \u2014 "),LB=a("a"),ydo=o("FlavaFeatureExtractor"),Ldo=o(" (Flava model)"),xdo=l(),gh=a("li"),Qae=a("strong"),$do=o("glpn"),kdo=o(" \u2014 "),xB=a("a"),Sdo=o("GLPNFeatureExtractor"),Rdo=o(" (GLPN model)"),Pdo=l(),hh=a("li"),Hae=a("strong"),Bdo=o("hubert"),Ido=o(" \u2014 "),$B=a("a"),qdo=o("Wav2Vec2FeatureExtractor"),Ndo=o(" (Hubert model)"),jdo=l(),ph=a("li"),Uae=a("strong"),Ddo=o("imagegpt"),Gdo=o(" \u2014 "),kB=a("a"),Odo=o("ImageGPTFeatureExtractor"),Vdo=o(" (ImageGPT model)"),Xdo=l(),_h=a("li"),Jae=a("strong"),zdo=o("layoutlmv2"),Wdo=o(" \u2014 "),SB=a("a"),Qdo=o("LayoutLMv2FeatureExtractor"),Hdo=o(" (LayoutLMv2 model)"),Udo=l(),uh=a("li"),Yae=a("strong"),Jdo=o("maskformer"),Ydo=o(" \u2014 "),RB=a("a"),Kdo=o("MaskFormerFeatureExtractor"),Zdo=o(" (MaskFormer model)"),eco=l(),bh=a("li"),Kae=a("strong"),oco=o("perceiver"),rco=o(" \u2014 "),PB=a("a"),tco=o("PerceiverFeatureExtractor"),aco=o(" (Perceiver model)"),nco=l(),vh=a("li"),Zae=a("strong"),sco=o("poolformer"),lco=o(" \u2014 "),BB=a("a"),ico=o("PoolFormerFeatureExtractor"),dco=o(" (PoolFormer model)"),cco=l(),Fh=a("li"),ene=a("strong"),fco=o("regnet"),mco=o(" \u2014 "),IB=a("a"),gco=o("ConvNextFeatureExtractor"),hco=o(" (RegNet model)"),pco=l(),Th=a("li"),one=a("strong"),_co=o("resnet"),uco=o(" \u2014 "),qB=a("a"),bco=o("ConvNextFeatureExtractor"),vco=o(" (ResNet model)"),Fco=l(),Mh=a("li"),rne=a("strong"),Tco=o("segformer"),Mco=o(" \u2014 "),NB=a("a"),Eco=o("SegformerFeatureExtractor"),Cco=o(" (SegFormer model)"),wco=l(),Eh=a("li"),tne=a("strong"),Aco=o("speech_to_text"),yco=o(" \u2014 "),jB=a("a"),Lco=o("Speech2TextFeatureExtractor"),xco=o(" (Speech2Text model)"),$co=l(),Ch=a("li"),ane=a("strong"),kco=o("swin"),Sco=o(" \u2014 "),DB=a("a"),Rco=o("ViTFeatureExtractor"),Pco=o(" (Swin model)"),Bco=l(),wh=a("li"),nne=a("strong"),Ico=o("van"),qco=o(" \u2014 "),GB=a("a"),Nco=o("ConvNextFeatureExtractor"),jco=o(" (VAN model)"),Dco=l(),Ah=a("li"),sne=a("strong"),Gco=o("vit"),Oco=o(" \u2014 "),OB=a("a"),Vco=o("ViTFeatureExtractor"),Xco=o(" (ViT model)"),zco=l(),yh=a("li"),lne=a("strong"),Wco=o("vit_mae"),Qco=o(" \u2014 "),VB=a("a"),Hco=o("ViTFeatureExtractor"),Uco=o(" (ViTMAE model)"),Jco=l(),Lh=a("li"),ine=a("strong"),Yco=o("wav2vec2"),Kco=o(" \u2014 "),XB=a("a"),Zco=o("Wav2Vec2FeatureExtractor"),efo=o(" (Wav2Vec2 model)"),ofo=l(),xh=a("li"),dne=a("strong"),rfo=o("wav2vec2-conformer"),tfo=o(" \u2014 "),zB=a("a"),afo=o("Wav2Vec2FeatureExtractor"),nfo=o(" (Wav2Vec2-Conformer model)"),sfo=l(),$h=a("li"),cne=a("strong"),lfo=o("yolos"),ifo=o(" \u2014 "),WB=a("a"),dfo=o("YolosFeatureExtractor"),cfo=o(" (YOLOS model)"),ffo=l(),F(kh.$$.fragment),mfo=l(),F(Sh.$$.fragment),gfo=l(),Rh=a("div"),F(P0.$$.fragment),hfo=l(),fne=a("p"),pfo=o("Register a new feature extractor for this class."),hqe=l(),Mi=a("h2"),Ph=a("a"),mne=a("span"),F(B0.$$.fragment),_fo=l(),gne=a("span"),ufo=o("AutoProcessor"),pqe=l(),yo=a("div"),F(I0.$$.fragment),bfo=l(),q0=a("p"),vfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=a("a"),Ffo=o("AutoProcessor.from_pretrained()"),Tfo=o(" class method."),Mfo=l(),N0=a("p"),Efo=o("This class cannot be instantiated directly using "),hne=a("code"),Cfo=o("__init__()"),wfo=o(" (throws an error)."),Afo=l(),Ue=a("div"),F(j0.$$.fragment),yfo=l(),pne=a("p"),Lfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xfo=l(),Ei=a("p"),$fo=o("The processor class to instantiate is selected based on the "),_ne=a("code"),kfo=o("model_type"),Sfo=o(` property of the config object (either
passed as an argument or loaded from `),une=a("code"),Rfo=o("pretrained_model_name_or_path"),Pfo=o(" if possible):"),Bfo=l(),pe=a("ul"),Bh=a("li"),bne=a("strong"),Ifo=o("clip"),qfo=o(" \u2014 "),HB=a("a"),Nfo=o("CLIPProcessor"),jfo=o(" (CLIP model)"),Dfo=l(),Ih=a("li"),vne=a("strong"),Gfo=o("flava"),Ofo=o(" \u2014 "),Fne=a("code"),Vfo=o("FLAVAProcessor"),Xfo=o(" (Flava model)"),zfo=l(),qh=a("li"),Tne=a("strong"),Wfo=o("layoutlmv2"),Qfo=o(" \u2014 "),UB=a("a"),Hfo=o("LayoutLMv2Processor"),Ufo=o(" (LayoutLMv2 model)"),Jfo=l(),Nh=a("li"),Mne=a("strong"),Yfo=o("layoutxlm"),Kfo=o(" \u2014 "),JB=a("a"),Zfo=o("LayoutXLMProcessor"),emo=o(" (LayoutXLM model)"),omo=l(),jh=a("li"),Ene=a("strong"),rmo=o("sew"),tmo=o(" \u2014 "),YB=a("a"),amo=o("Wav2Vec2Processor"),nmo=o(" (SEW model)"),smo=l(),Dh=a("li"),Cne=a("strong"),lmo=o("sew-d"),imo=o(" \u2014 "),KB=a("a"),dmo=o("Wav2Vec2Processor"),cmo=o(" (SEW-D model)"),fmo=l(),Gh=a("li"),wne=a("strong"),mmo=o("speech_to_text"),gmo=o(" \u2014 "),ZB=a("a"),hmo=o("Speech2TextProcessor"),pmo=o(" (Speech2Text model)"),_mo=l(),Oh=a("li"),Ane=a("strong"),umo=o("speech_to_text_2"),bmo=o(" \u2014 "),eI=a("a"),vmo=o("Speech2Text2Processor"),Fmo=o(" (Speech2Text2 model)"),Tmo=l(),Vh=a("li"),yne=a("strong"),Mmo=o("trocr"),Emo=o(" \u2014 "),oI=a("a"),Cmo=o("TrOCRProcessor"),wmo=o(" (TrOCR model)"),Amo=l(),Xh=a("li"),Lne=a("strong"),ymo=o("unispeech"),Lmo=o(" \u2014 "),rI=a("a"),xmo=o("Wav2Vec2Processor"),$mo=o(" (UniSpeech model)"),kmo=l(),zh=a("li"),xne=a("strong"),Smo=o("unispeech-sat"),Rmo=o(" \u2014 "),tI=a("a"),Pmo=o("Wav2Vec2Processor"),Bmo=o(" (UniSpeechSat model)"),Imo=l(),Wh=a("li"),$ne=a("strong"),qmo=o("vilt"),Nmo=o(" \u2014 "),aI=a("a"),jmo=o("ViltProcessor"),Dmo=o(" (ViLT model)"),Gmo=l(),Qh=a("li"),kne=a("strong"),Omo=o("vision-text-dual-encoder"),Vmo=o(" \u2014 "),nI=a("a"),Xmo=o("VisionTextDualEncoderProcessor"),zmo=o(" (VisionTextDualEncoder model)"),Wmo=l(),Hh=a("li"),Sne=a("strong"),Qmo=o("wav2vec2"),Hmo=o(" \u2014 "),sI=a("a"),Umo=o("Wav2Vec2Processor"),Jmo=o(" (Wav2Vec2 model)"),Ymo=l(),Uh=a("li"),Rne=a("strong"),Kmo=o("wav2vec2-conformer"),Zmo=o(" \u2014 "),lI=a("a"),ego=o("Wav2Vec2Processor"),ogo=o(" (Wav2Vec2-Conformer model)"),rgo=l(),Jh=a("li"),Pne=a("strong"),tgo=o("wavlm"),ago=o(" \u2014 "),iI=a("a"),ngo=o("Wav2Vec2Processor"),sgo=o(" (WavLM model)"),lgo=l(),F(Yh.$$.fragment),igo=l(),F(Kh.$$.fragment),dgo=l(),Zh=a("div"),F(D0.$$.fragment),cgo=l(),Bne=a("p"),fgo=o("Register a new processor for this class."),_qe=l(),Ci=a("h2"),ep=a("a"),Ine=a("span"),F(G0.$$.fragment),mgo=l(),qne=a("span"),ggo=o("AutoModel"),uqe=l(),Lo=a("div"),F(O0.$$.fragment),hgo=l(),wi=a("p"),pgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dI=a("a"),_go=o("from_pretrained()"),ugo=o(" class method or the "),cI=a("a"),bgo=o("from_config()"),vgo=o(` class
method.`),Fgo=l(),V0=a("p"),Tgo=o("This class cannot be instantiated directly using "),Nne=a("code"),Mgo=o("__init__()"),Ego=o(" (throws an error)."),Cgo=l(),tt=a("div"),F(X0.$$.fragment),wgo=l(),jne=a("p"),Ago=o("Instantiates one of the base model classes of the library from a configuration."),ygo=l(),Ai=a("p"),Lgo=o(`Note:
Loading a model from its configuration file does `),Dne=a("strong"),xgo=o("not"),$go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=a("a"),kgo=o("from_pretrained()"),Sgo=o(" to load the model weights."),Rgo=l(),F(op.$$.fragment),Pgo=l(),Je=a("div"),F(z0.$$.fragment),Bgo=l(),Gne=a("p"),Igo=o("Instantiate one of the base model classes of the library from a pretrained model."),qgo=l(),La=a("p"),Ngo=o("The model class to instantiate is selected based on the "),One=a("code"),jgo=o("model_type"),Dgo=o(` property of the config object (either
passed as an argument or loaded from `),Vne=a("code"),Ggo=o("pretrained_model_name_or_path"),Ogo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xne=a("code"),Vgo=o("pretrained_model_name_or_path"),Xgo=o(":"),zgo=l(),x=a("ul"),rp=a("li"),zne=a("strong"),Wgo=o("albert"),Qgo=o(" \u2014 "),mI=a("a"),Hgo=o("AlbertModel"),Ugo=o(" (ALBERT model)"),Jgo=l(),tp=a("li"),Wne=a("strong"),Ygo=o("bart"),Kgo=o(" \u2014 "),gI=a("a"),Zgo=o("BartModel"),eho=o(" (BART model)"),oho=l(),ap=a("li"),Qne=a("strong"),rho=o("beit"),tho=o(" \u2014 "),hI=a("a"),aho=o("BeitModel"),nho=o(" (BEiT model)"),sho=l(),np=a("li"),Hne=a("strong"),lho=o("bert"),iho=o(" \u2014 "),pI=a("a"),dho=o("BertModel"),cho=o(" (BERT model)"),fho=l(),sp=a("li"),Une=a("strong"),mho=o("bert-generation"),gho=o(" \u2014 "),_I=a("a"),hho=o("BertGenerationEncoder"),pho=o(" (Bert Generation model)"),_ho=l(),lp=a("li"),Jne=a("strong"),uho=o("big_bird"),bho=o(" \u2014 "),uI=a("a"),vho=o("BigBirdModel"),Fho=o(" (BigBird model)"),Tho=l(),ip=a("li"),Yne=a("strong"),Mho=o("bigbird_pegasus"),Eho=o(" \u2014 "),bI=a("a"),Cho=o("BigBirdPegasusModel"),who=o(" (BigBirdPegasus model)"),Aho=l(),dp=a("li"),Kne=a("strong"),yho=o("blenderbot"),Lho=o(" \u2014 "),vI=a("a"),xho=o("BlenderbotModel"),$ho=o(" (Blenderbot model)"),kho=l(),cp=a("li"),Zne=a("strong"),Sho=o("blenderbot-small"),Rho=o(" \u2014 "),FI=a("a"),Pho=o("BlenderbotSmallModel"),Bho=o(" (BlenderbotSmall model)"),Iho=l(),fp=a("li"),ese=a("strong"),qho=o("camembert"),Nho=o(" \u2014 "),TI=a("a"),jho=o("CamembertModel"),Dho=o(" (CamemBERT model)"),Gho=l(),mp=a("li"),ose=a("strong"),Oho=o("canine"),Vho=o(" \u2014 "),MI=a("a"),Xho=o("CanineModel"),zho=o(" (Canine model)"),Who=l(),gp=a("li"),rse=a("strong"),Qho=o("clip"),Hho=o(" \u2014 "),EI=a("a"),Uho=o("CLIPModel"),Jho=o(" (CLIP model)"),Yho=l(),hp=a("li"),tse=a("strong"),Kho=o("convbert"),Zho=o(" \u2014 "),CI=a("a"),epo=o("ConvBertModel"),opo=o(" (ConvBERT model)"),rpo=l(),pp=a("li"),ase=a("strong"),tpo=o("convnext"),apo=o(" \u2014 "),wI=a("a"),npo=o("ConvNextModel"),spo=o(" (ConvNext model)"),lpo=l(),_p=a("li"),nse=a("strong"),ipo=o("ctrl"),dpo=o(" \u2014 "),AI=a("a"),cpo=o("CTRLModel"),fpo=o(" (CTRL model)"),mpo=l(),up=a("li"),sse=a("strong"),gpo=o("cvt"),hpo=o(" \u2014 "),yI=a("a"),ppo=o("CvtModel"),_po=o(" (CvT model)"),upo=l(),bp=a("li"),lse=a("strong"),bpo=o("data2vec-audio"),vpo=o(" \u2014 "),LI=a("a"),Fpo=o("Data2VecAudioModel"),Tpo=o(" (Data2VecAudio model)"),Mpo=l(),vp=a("li"),ise=a("strong"),Epo=o("data2vec-text"),Cpo=o(" \u2014 "),xI=a("a"),wpo=o("Data2VecTextModel"),Apo=o(" (Data2VecText model)"),ypo=l(),Fp=a("li"),dse=a("strong"),Lpo=o("data2vec-vision"),xpo=o(" \u2014 "),$I=a("a"),$po=o("Data2VecVisionModel"),kpo=o(" (Data2VecVision model)"),Spo=l(),Tp=a("li"),cse=a("strong"),Rpo=o("deberta"),Ppo=o(" \u2014 "),kI=a("a"),Bpo=o("DebertaModel"),Ipo=o(" (DeBERTa model)"),qpo=l(),Mp=a("li"),fse=a("strong"),Npo=o("deberta-v2"),jpo=o(" \u2014 "),SI=a("a"),Dpo=o("DebertaV2Model"),Gpo=o(" (DeBERTa-v2 model)"),Opo=l(),Ep=a("li"),mse=a("strong"),Vpo=o("decision_transformer"),Xpo=o(" \u2014 "),RI=a("a"),zpo=o("DecisionTransformerModel"),Wpo=o(" (Decision Transformer model)"),Qpo=l(),Cp=a("li"),gse=a("strong"),Hpo=o("deit"),Upo=o(" \u2014 "),PI=a("a"),Jpo=o("DeiTModel"),Ypo=o(" (DeiT model)"),Kpo=l(),wp=a("li"),hse=a("strong"),Zpo=o("detr"),e_o=o(" \u2014 "),BI=a("a"),o_o=o("DetrModel"),r_o=o(" (DETR model)"),t_o=l(),Ap=a("li"),pse=a("strong"),a_o=o("distilbert"),n_o=o(" \u2014 "),II=a("a"),s_o=o("DistilBertModel"),l_o=o(" (DistilBERT model)"),i_o=l(),yp=a("li"),_se=a("strong"),d_o=o("dpr"),c_o=o(" \u2014 "),qI=a("a"),f_o=o("DPRQuestionEncoder"),m_o=o(" (DPR model)"),g_o=l(),Lp=a("li"),use=a("strong"),h_o=o("dpt"),p_o=o(" \u2014 "),NI=a("a"),__o=o("DPTModel"),u_o=o(" (DPT model)"),b_o=l(),xp=a("li"),bse=a("strong"),v_o=o("electra"),F_o=o(" \u2014 "),jI=a("a"),T_o=o("ElectraModel"),M_o=o(" (ELECTRA model)"),E_o=l(),$p=a("li"),vse=a("strong"),C_o=o("flaubert"),w_o=o(" \u2014 "),DI=a("a"),A_o=o("FlaubertModel"),y_o=o(" (FlauBERT model)"),L_o=l(),kp=a("li"),Fse=a("strong"),x_o=o("flava"),$_o=o(" \u2014 "),GI=a("a"),k_o=o("FlavaModel"),S_o=o(" (Flava model)"),R_o=l(),Sp=a("li"),Tse=a("strong"),P_o=o("fnet"),B_o=o(" \u2014 "),OI=a("a"),I_o=o("FNetModel"),q_o=o(" (FNet model)"),N_o=l(),Rp=a("li"),Mse=a("strong"),j_o=o("fsmt"),D_o=o(" \u2014 "),VI=a("a"),G_o=o("FSMTModel"),O_o=o(" (FairSeq Machine-Translation model)"),V_o=l(),Rs=a("li"),Ese=a("strong"),X_o=o("funnel"),z_o=o(" \u2014 "),XI=a("a"),W_o=o("FunnelModel"),Q_o=o(" or "),zI=a("a"),H_o=o("FunnelBaseModel"),U_o=o(" (Funnel Transformer model)"),J_o=l(),Pp=a("li"),Cse=a("strong"),Y_o=o("glpn"),K_o=o(" \u2014 "),WI=a("a"),Z_o=o("GLPNModel"),euo=o(" (GLPN model)"),ouo=l(),Bp=a("li"),wse=a("strong"),ruo=o("gpt2"),tuo=o(" \u2014 "),QI=a("a"),auo=o("GPT2Model"),nuo=o(" (OpenAI GPT-2 model)"),suo=l(),Ip=a("li"),Ase=a("strong"),luo=o("gpt_neo"),iuo=o(" \u2014 "),HI=a("a"),duo=o("GPTNeoModel"),cuo=o(" (GPT Neo model)"),fuo=l(),qp=a("li"),yse=a("strong"),muo=o("gptj"),guo=o(" \u2014 "),UI=a("a"),huo=o("GPTJModel"),puo=o(" (GPT-J model)"),_uo=l(),Np=a("li"),Lse=a("strong"),uuo=o("hubert"),buo=o(" \u2014 "),JI=a("a"),vuo=o("HubertModel"),Fuo=o(" (Hubert model)"),Tuo=l(),jp=a("li"),xse=a("strong"),Muo=o("ibert"),Euo=o(" \u2014 "),YI=a("a"),Cuo=o("IBertModel"),wuo=o(" (I-BERT model)"),Auo=l(),Dp=a("li"),$se=a("strong"),yuo=o("imagegpt"),Luo=o(" \u2014 "),KI=a("a"),xuo=o("ImageGPTModel"),$uo=o(" (ImageGPT model)"),kuo=l(),Gp=a("li"),kse=a("strong"),Suo=o("layoutlm"),Ruo=o(" \u2014 "),ZI=a("a"),Puo=o("LayoutLMModel"),Buo=o(" (LayoutLM model)"),Iuo=l(),Op=a("li"),Sse=a("strong"),quo=o("layoutlmv2"),Nuo=o(" \u2014 "),eq=a("a"),juo=o("LayoutLMv2Model"),Duo=o(" (LayoutLMv2 model)"),Guo=l(),Vp=a("li"),Rse=a("strong"),Ouo=o("led"),Vuo=o(" \u2014 "),oq=a("a"),Xuo=o("LEDModel"),zuo=o(" (LED model)"),Wuo=l(),Xp=a("li"),Pse=a("strong"),Quo=o("longformer"),Huo=o(" \u2014 "),rq=a("a"),Uuo=o("LongformerModel"),Juo=o(" (Longformer model)"),Yuo=l(),zp=a("li"),Bse=a("strong"),Kuo=o("luke"),Zuo=o(" \u2014 "),tq=a("a"),e1o=o("LukeModel"),o1o=o(" (LUKE model)"),r1o=l(),Wp=a("li"),Ise=a("strong"),t1o=o("lxmert"),a1o=o(" \u2014 "),aq=a("a"),n1o=o("LxmertModel"),s1o=o(" (LXMERT model)"),l1o=l(),Qp=a("li"),qse=a("strong"),i1o=o("m2m_100"),d1o=o(" \u2014 "),nq=a("a"),c1o=o("M2M100Model"),f1o=o(" (M2M100 model)"),m1o=l(),Hp=a("li"),Nse=a("strong"),g1o=o("marian"),h1o=o(" \u2014 "),sq=a("a"),p1o=o("MarianModel"),_1o=o(" (Marian model)"),u1o=l(),Up=a("li"),jse=a("strong"),b1o=o("maskformer"),v1o=o(" \u2014 "),lq=a("a"),F1o=o("MaskFormerModel"),T1o=o(" (MaskFormer model)"),M1o=l(),Jp=a("li"),Dse=a("strong"),E1o=o("mbart"),C1o=o(" \u2014 "),iq=a("a"),w1o=o("MBartModel"),A1o=o(" (mBART model)"),y1o=l(),Yp=a("li"),Gse=a("strong"),L1o=o("megatron-bert"),x1o=o(" \u2014 "),dq=a("a"),$1o=o("MegatronBertModel"),k1o=o(" (MegatronBert model)"),S1o=l(),Kp=a("li"),Ose=a("strong"),R1o=o("mobilebert"),P1o=o(" \u2014 "),cq=a("a"),B1o=o("MobileBertModel"),I1o=o(" (MobileBERT model)"),q1o=l(),Zp=a("li"),Vse=a("strong"),N1o=o("mpnet"),j1o=o(" \u2014 "),fq=a("a"),D1o=o("MPNetModel"),G1o=o(" (MPNet model)"),O1o=l(),e_=a("li"),Xse=a("strong"),V1o=o("mt5"),X1o=o(" \u2014 "),mq=a("a"),z1o=o("MT5Model"),W1o=o(" (mT5 model)"),Q1o=l(),o_=a("li"),zse=a("strong"),H1o=o("nystromformer"),U1o=o(" \u2014 "),gq=a("a"),J1o=o("NystromformerModel"),Y1o=o(" (Nystromformer model)"),K1o=l(),r_=a("li"),Wse=a("strong"),Z1o=o("openai-gpt"),ebo=o(" \u2014 "),hq=a("a"),obo=o("OpenAIGPTModel"),rbo=o(" (OpenAI GPT model)"),tbo=l(),t_=a("li"),Qse=a("strong"),abo=o("opt"),nbo=o(" \u2014 "),pq=a("a"),sbo=o("OPTModel"),lbo=o(" (OPT model)"),ibo=l(),a_=a("li"),Hse=a("strong"),dbo=o("pegasus"),cbo=o(" \u2014 "),_q=a("a"),fbo=o("PegasusModel"),mbo=o(" (Pegasus model)"),gbo=l(),n_=a("li"),Use=a("strong"),hbo=o("perceiver"),pbo=o(" \u2014 "),uq=a("a"),_bo=o("PerceiverModel"),ubo=o(" (Perceiver model)"),bbo=l(),s_=a("li"),Jse=a("strong"),vbo=o("plbart"),Fbo=o(" \u2014 "),bq=a("a"),Tbo=o("PLBartModel"),Mbo=o(" (PLBart model)"),Ebo=l(),l_=a("li"),Yse=a("strong"),Cbo=o("poolformer"),wbo=o(" \u2014 "),vq=a("a"),Abo=o("PoolFormerModel"),ybo=o(" (PoolFormer model)"),Lbo=l(),i_=a("li"),Kse=a("strong"),xbo=o("prophetnet"),$bo=o(" \u2014 "),Fq=a("a"),kbo=o("ProphetNetModel"),Sbo=o(" (ProphetNet model)"),Rbo=l(),d_=a("li"),Zse=a("strong"),Pbo=o("qdqbert"),Bbo=o(" \u2014 "),Tq=a("a"),Ibo=o("QDQBertModel"),qbo=o(" (QDQBert model)"),Nbo=l(),c_=a("li"),ele=a("strong"),jbo=o("reformer"),Dbo=o(" \u2014 "),Mq=a("a"),Gbo=o("ReformerModel"),Obo=o(" (Reformer model)"),Vbo=l(),f_=a("li"),ole=a("strong"),Xbo=o("regnet"),zbo=o(" \u2014 "),Eq=a("a"),Wbo=o("RegNetModel"),Qbo=o(" (RegNet model)"),Hbo=l(),m_=a("li"),rle=a("strong"),Ubo=o("rembert"),Jbo=o(" \u2014 "),Cq=a("a"),Ybo=o("RemBertModel"),Kbo=o(" (RemBERT model)"),Zbo=l(),g_=a("li"),tle=a("strong"),e2o=o("resnet"),o2o=o(" \u2014 "),wq=a("a"),r2o=o("ResNetModel"),t2o=o(" (ResNet model)"),a2o=l(),h_=a("li"),ale=a("strong"),n2o=o("retribert"),s2o=o(" \u2014 "),Aq=a("a"),l2o=o("RetriBertModel"),i2o=o(" (RetriBERT model)"),d2o=l(),p_=a("li"),nle=a("strong"),c2o=o("roberta"),f2o=o(" \u2014 "),yq=a("a"),m2o=o("RobertaModel"),g2o=o(" (RoBERTa model)"),h2o=l(),__=a("li"),sle=a("strong"),p2o=o("roformer"),_2o=o(" \u2014 "),Lq=a("a"),u2o=o("RoFormerModel"),b2o=o(" (RoFormer model)"),v2o=l(),u_=a("li"),lle=a("strong"),F2o=o("segformer"),T2o=o(" \u2014 "),xq=a("a"),M2o=o("SegformerModel"),E2o=o(" (SegFormer model)"),C2o=l(),b_=a("li"),ile=a("strong"),w2o=o("sew"),A2o=o(" \u2014 "),$q=a("a"),y2o=o("SEWModel"),L2o=o(" (SEW model)"),x2o=l(),v_=a("li"),dle=a("strong"),$2o=o("sew-d"),k2o=o(" \u2014 "),kq=a("a"),S2o=o("SEWDModel"),R2o=o(" (SEW-D model)"),P2o=l(),F_=a("li"),cle=a("strong"),B2o=o("speech_to_text"),I2o=o(" \u2014 "),Sq=a("a"),q2o=o("Speech2TextModel"),N2o=o(" (Speech2Text model)"),j2o=l(),T_=a("li"),fle=a("strong"),D2o=o("splinter"),G2o=o(" \u2014 "),Rq=a("a"),O2o=o("SplinterModel"),V2o=o(" (Splinter model)"),X2o=l(),M_=a("li"),mle=a("strong"),z2o=o("squeezebert"),W2o=o(" \u2014 "),Pq=a("a"),Q2o=o("SqueezeBertModel"),H2o=o(" (SqueezeBERT model)"),U2o=l(),E_=a("li"),gle=a("strong"),J2o=o("swin"),Y2o=o(" \u2014 "),Bq=a("a"),K2o=o("SwinModel"),Z2o=o(" (Swin model)"),evo=l(),C_=a("li"),hle=a("strong"),ovo=o("t5"),rvo=o(" \u2014 "),Iq=a("a"),tvo=o("T5Model"),avo=o(" (T5 model)"),nvo=l(),w_=a("li"),ple=a("strong"),svo=o("tapas"),lvo=o(" \u2014 "),qq=a("a"),ivo=o("TapasModel"),dvo=o(" (TAPAS model)"),cvo=l(),A_=a("li"),_le=a("strong"),fvo=o("trajectory_transformer"),mvo=o(" \u2014 "),Nq=a("a"),gvo=o("TrajectoryTransformerModel"),hvo=o(" (Trajectory Transformer model)"),pvo=l(),y_=a("li"),ule=a("strong"),_vo=o("transfo-xl"),uvo=o(" \u2014 "),jq=a("a"),bvo=o("TransfoXLModel"),vvo=o(" (Transformer-XL model)"),Fvo=l(),L_=a("li"),ble=a("strong"),Tvo=o("unispeech"),Mvo=o(" \u2014 "),Dq=a("a"),Evo=o("UniSpeechModel"),Cvo=o(" (UniSpeech model)"),wvo=l(),x_=a("li"),vle=a("strong"),Avo=o("unispeech-sat"),yvo=o(" \u2014 "),Gq=a("a"),Lvo=o("UniSpeechSatModel"),xvo=o(" (UniSpeechSat model)"),$vo=l(),$_=a("li"),Fle=a("strong"),kvo=o("van"),Svo=o(" \u2014 "),Oq=a("a"),Rvo=o("VanModel"),Pvo=o(" (VAN model)"),Bvo=l(),k_=a("li"),Tle=a("strong"),Ivo=o("vilt"),qvo=o(" \u2014 "),Vq=a("a"),Nvo=o("ViltModel"),jvo=o(" (ViLT model)"),Dvo=l(),S_=a("li"),Mle=a("strong"),Gvo=o("vision-text-dual-encoder"),Ovo=o(" \u2014 "),Xq=a("a"),Vvo=o("VisionTextDualEncoderModel"),Xvo=o(" (VisionTextDualEncoder model)"),zvo=l(),R_=a("li"),Ele=a("strong"),Wvo=o("visual_bert"),Qvo=o(" \u2014 "),zq=a("a"),Hvo=o("VisualBertModel"),Uvo=o(" (VisualBert model)"),Jvo=l(),P_=a("li"),Cle=a("strong"),Yvo=o("vit"),Kvo=o(" \u2014 "),Wq=a("a"),Zvo=o("ViTModel"),eFo=o(" (ViT model)"),oFo=l(),B_=a("li"),wle=a("strong"),rFo=o("vit_mae"),tFo=o(" \u2014 "),Qq=a("a"),aFo=o("ViTMAEModel"),nFo=o(" (ViTMAE model)"),sFo=l(),I_=a("li"),Ale=a("strong"),lFo=o("wav2vec2"),iFo=o(" \u2014 "),Hq=a("a"),dFo=o("Wav2Vec2Model"),cFo=o(" (Wav2Vec2 model)"),fFo=l(),q_=a("li"),yle=a("strong"),mFo=o("wav2vec2-conformer"),gFo=o(" \u2014 "),Uq=a("a"),hFo=o("Wav2Vec2ConformerModel"),pFo=o(" (Wav2Vec2-Conformer model)"),_Fo=l(),N_=a("li"),Lle=a("strong"),uFo=o("wavlm"),bFo=o(" \u2014 "),Jq=a("a"),vFo=o("WavLMModel"),FFo=o(" (WavLM model)"),TFo=l(),j_=a("li"),xle=a("strong"),MFo=o("xglm"),EFo=o(" \u2014 "),Yq=a("a"),CFo=o("XGLMModel"),wFo=o(" (XGLM model)"),AFo=l(),D_=a("li"),$le=a("strong"),yFo=o("xlm"),LFo=o(" \u2014 "),Kq=a("a"),xFo=o("XLMModel"),$Fo=o(" (XLM model)"),kFo=l(),G_=a("li"),kle=a("strong"),SFo=o("xlm-prophetnet"),RFo=o(" \u2014 "),Zq=a("a"),PFo=o("XLMProphetNetModel"),BFo=o(" (XLMProphetNet model)"),IFo=l(),O_=a("li"),Sle=a("strong"),qFo=o("xlm-roberta"),NFo=o(" \u2014 "),eN=a("a"),jFo=o("XLMRobertaModel"),DFo=o(" (XLM-RoBERTa model)"),GFo=l(),V_=a("li"),Rle=a("strong"),OFo=o("xlm-roberta-xl"),VFo=o(" \u2014 "),oN=a("a"),XFo=o("XLMRobertaXLModel"),zFo=o(" (XLM-RoBERTa-XL model)"),WFo=l(),X_=a("li"),Ple=a("strong"),QFo=o("xlnet"),HFo=o(" \u2014 "),rN=a("a"),UFo=o("XLNetModel"),JFo=o(" (XLNet model)"),YFo=l(),z_=a("li"),Ble=a("strong"),KFo=o("yolos"),ZFo=o(" \u2014 "),tN=a("a"),e6o=o("YolosModel"),o6o=o(" (YOLOS model)"),r6o=l(),W_=a("li"),Ile=a("strong"),t6o=o("yoso"),a6o=o(" \u2014 "),aN=a("a"),n6o=o("YosoModel"),s6o=o(" (YOSO model)"),l6o=l(),Q_=a("p"),i6o=o("The model is set in evaluation mode by default using "),qle=a("code"),d6o=o("model.eval()"),c6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=a("code"),f6o=o("model.train()"),m6o=l(),F(H_.$$.fragment),bqe=l(),yi=a("h2"),U_=a("a"),jle=a("span"),F(W0.$$.fragment),g6o=l(),Dle=a("span"),h6o=o("AutoModelForPreTraining"),vqe=l(),xo=a("div"),F(Q0.$$.fragment),p6o=l(),Li=a("p"),_6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nN=a("a"),u6o=o("from_pretrained()"),b6o=o(" class method or the "),sN=a("a"),v6o=o("from_config()"),F6o=o(` class
method.`),T6o=l(),H0=a("p"),M6o=o("This class cannot be instantiated directly using "),Gle=a("code"),E6o=o("__init__()"),C6o=o(" (throws an error)."),w6o=l(),at=a("div"),F(U0.$$.fragment),A6o=l(),Ole=a("p"),y6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L6o=l(),xi=a("p"),x6o=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),$6o=o("not"),k6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=a("a"),S6o=o("from_pretrained()"),R6o=o(" to load the model weights."),P6o=l(),F(J_.$$.fragment),B6o=l(),Ye=a("div"),F(J0.$$.fragment),I6o=l(),Xle=a("p"),q6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N6o=l(),xa=a("p"),j6o=o("The model class to instantiate is selected based on the "),zle=a("code"),D6o=o("model_type"),G6o=o(` property of the config object (either
passed as an argument or loaded from `),Wle=a("code"),O6o=o("pretrained_model_name_or_path"),V6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=a("code"),X6o=o("pretrained_model_name_or_path"),z6o=o(":"),W6o=l(),G=a("ul"),Y_=a("li"),Hle=a("strong"),Q6o=o("albert"),H6o=o(" \u2014 "),iN=a("a"),U6o=o("AlbertForPreTraining"),J6o=o(" (ALBERT model)"),Y6o=l(),K_=a("li"),Ule=a("strong"),K6o=o("bart"),Z6o=o(" \u2014 "),dN=a("a"),eTo=o("BartForConditionalGeneration"),oTo=o(" (BART model)"),rTo=l(),Z_=a("li"),Jle=a("strong"),tTo=o("bert"),aTo=o(" \u2014 "),cN=a("a"),nTo=o("BertForPreTraining"),sTo=o(" (BERT model)"),lTo=l(),eu=a("li"),Yle=a("strong"),iTo=o("big_bird"),dTo=o(" \u2014 "),fN=a("a"),cTo=o("BigBirdForPreTraining"),fTo=o(" (BigBird model)"),mTo=l(),ou=a("li"),Kle=a("strong"),gTo=o("camembert"),hTo=o(" \u2014 "),mN=a("a"),pTo=o("CamembertForMaskedLM"),_To=o(" (CamemBERT model)"),uTo=l(),ru=a("li"),Zle=a("strong"),bTo=o("ctrl"),vTo=o(" \u2014 "),gN=a("a"),FTo=o("CTRLLMHeadModel"),TTo=o(" (CTRL model)"),MTo=l(),tu=a("li"),eie=a("strong"),ETo=o("data2vec-text"),CTo=o(" \u2014 "),hN=a("a"),wTo=o("Data2VecTextForMaskedLM"),ATo=o(" (Data2VecText model)"),yTo=l(),au=a("li"),oie=a("strong"),LTo=o("deberta"),xTo=o(" \u2014 "),pN=a("a"),$To=o("DebertaForMaskedLM"),kTo=o(" (DeBERTa model)"),STo=l(),nu=a("li"),rie=a("strong"),RTo=o("deberta-v2"),PTo=o(" \u2014 "),_N=a("a"),BTo=o("DebertaV2ForMaskedLM"),ITo=o(" (DeBERTa-v2 model)"),qTo=l(),su=a("li"),tie=a("strong"),NTo=o("distilbert"),jTo=o(" \u2014 "),uN=a("a"),DTo=o("DistilBertForMaskedLM"),GTo=o(" (DistilBERT model)"),OTo=l(),lu=a("li"),aie=a("strong"),VTo=o("electra"),XTo=o(" \u2014 "),bN=a("a"),zTo=o("ElectraForPreTraining"),WTo=o(" (ELECTRA model)"),QTo=l(),iu=a("li"),nie=a("strong"),HTo=o("flaubert"),UTo=o(" \u2014 "),vN=a("a"),JTo=o("FlaubertWithLMHeadModel"),YTo=o(" (FlauBERT model)"),KTo=l(),du=a("li"),sie=a("strong"),ZTo=o("flava"),e8o=o(" \u2014 "),FN=a("a"),o8o=o("FlavaForPreTraining"),r8o=o(" (Flava model)"),t8o=l(),cu=a("li"),lie=a("strong"),a8o=o("fnet"),n8o=o(" \u2014 "),TN=a("a"),s8o=o("FNetForPreTraining"),l8o=o(" (FNet model)"),i8o=l(),fu=a("li"),iie=a("strong"),d8o=o("fsmt"),c8o=o(" \u2014 "),MN=a("a"),f8o=o("FSMTForConditionalGeneration"),m8o=o(" (FairSeq Machine-Translation model)"),g8o=l(),mu=a("li"),die=a("strong"),h8o=o("funnel"),p8o=o(" \u2014 "),EN=a("a"),_8o=o("FunnelForPreTraining"),u8o=o(" (Funnel Transformer model)"),b8o=l(),gu=a("li"),cie=a("strong"),v8o=o("gpt2"),F8o=o(" \u2014 "),CN=a("a"),T8o=o("GPT2LMHeadModel"),M8o=o(" (OpenAI GPT-2 model)"),E8o=l(),hu=a("li"),fie=a("strong"),C8o=o("ibert"),w8o=o(" \u2014 "),wN=a("a"),A8o=o("IBertForMaskedLM"),y8o=o(" (I-BERT model)"),L8o=l(),pu=a("li"),mie=a("strong"),x8o=o("layoutlm"),$8o=o(" \u2014 "),AN=a("a"),k8o=o("LayoutLMForMaskedLM"),S8o=o(" (LayoutLM model)"),R8o=l(),_u=a("li"),gie=a("strong"),P8o=o("longformer"),B8o=o(" \u2014 "),yN=a("a"),I8o=o("LongformerForMaskedLM"),q8o=o(" (Longformer model)"),N8o=l(),uu=a("li"),hie=a("strong"),j8o=o("lxmert"),D8o=o(" \u2014 "),LN=a("a"),G8o=o("LxmertForPreTraining"),O8o=o(" (LXMERT model)"),V8o=l(),bu=a("li"),pie=a("strong"),X8o=o("megatron-bert"),z8o=o(" \u2014 "),xN=a("a"),W8o=o("MegatronBertForPreTraining"),Q8o=o(" (MegatronBert model)"),H8o=l(),vu=a("li"),_ie=a("strong"),U8o=o("mobilebert"),J8o=o(" \u2014 "),$N=a("a"),Y8o=o("MobileBertForPreTraining"),K8o=o(" (MobileBERT model)"),Z8o=l(),Fu=a("li"),uie=a("strong"),e7o=o("mpnet"),o7o=o(" \u2014 "),kN=a("a"),r7o=o("MPNetForMaskedLM"),t7o=o(" (MPNet model)"),a7o=l(),Tu=a("li"),bie=a("strong"),n7o=o("openai-gpt"),s7o=o(" \u2014 "),SN=a("a"),l7o=o("OpenAIGPTLMHeadModel"),i7o=o(" (OpenAI GPT model)"),d7o=l(),Mu=a("li"),vie=a("strong"),c7o=o("retribert"),f7o=o(" \u2014 "),RN=a("a"),m7o=o("RetriBertModel"),g7o=o(" (RetriBERT model)"),h7o=l(),Eu=a("li"),Fie=a("strong"),p7o=o("roberta"),_7o=o(" \u2014 "),PN=a("a"),u7o=o("RobertaForMaskedLM"),b7o=o(" (RoBERTa model)"),v7o=l(),Cu=a("li"),Tie=a("strong"),F7o=o("splinter"),T7o=o(" \u2014 "),BN=a("a"),M7o=o("SplinterForPreTraining"),E7o=o(" (Splinter model)"),C7o=l(),wu=a("li"),Mie=a("strong"),w7o=o("squeezebert"),A7o=o(" \u2014 "),IN=a("a"),y7o=o("SqueezeBertForMaskedLM"),L7o=o(" (SqueezeBERT model)"),x7o=l(),Au=a("li"),Eie=a("strong"),$7o=o("t5"),k7o=o(" \u2014 "),qN=a("a"),S7o=o("T5ForConditionalGeneration"),R7o=o(" (T5 model)"),P7o=l(),yu=a("li"),Cie=a("strong"),B7o=o("tapas"),I7o=o(" \u2014 "),NN=a("a"),q7o=o("TapasForMaskedLM"),N7o=o(" (TAPAS model)"),j7o=l(),Lu=a("li"),wie=a("strong"),D7o=o("transfo-xl"),G7o=o(" \u2014 "),jN=a("a"),O7o=o("TransfoXLLMHeadModel"),V7o=o(" (Transformer-XL model)"),X7o=l(),xu=a("li"),Aie=a("strong"),z7o=o("unispeech"),W7o=o(" \u2014 "),DN=a("a"),Q7o=o("UniSpeechForPreTraining"),H7o=o(" (UniSpeech model)"),U7o=l(),$u=a("li"),yie=a("strong"),J7o=o("unispeech-sat"),Y7o=o(" \u2014 "),GN=a("a"),K7o=o("UniSpeechSatForPreTraining"),Z7o=o(" (UniSpeechSat model)"),eMo=l(),ku=a("li"),Lie=a("strong"),oMo=o("visual_bert"),rMo=o(" \u2014 "),ON=a("a"),tMo=o("VisualBertForPreTraining"),aMo=o(" (VisualBert model)"),nMo=l(),Su=a("li"),xie=a("strong"),sMo=o("vit_mae"),lMo=o(" \u2014 "),VN=a("a"),iMo=o("ViTMAEForPreTraining"),dMo=o(" (ViTMAE model)"),cMo=l(),Ru=a("li"),$ie=a("strong"),fMo=o("wav2vec2"),mMo=o(" \u2014 "),XN=a("a"),gMo=o("Wav2Vec2ForPreTraining"),hMo=o(" (Wav2Vec2 model)"),pMo=l(),Pu=a("li"),kie=a("strong"),_Mo=o("wav2vec2-conformer"),uMo=o(" \u2014 "),zN=a("a"),bMo=o("Wav2Vec2ConformerForPreTraining"),vMo=o(" (Wav2Vec2-Conformer model)"),FMo=l(),Bu=a("li"),Sie=a("strong"),TMo=o("xlm"),MMo=o(" \u2014 "),WN=a("a"),EMo=o("XLMWithLMHeadModel"),CMo=o(" (XLM model)"),wMo=l(),Iu=a("li"),Rie=a("strong"),AMo=o("xlm-roberta"),yMo=o(" \u2014 "),QN=a("a"),LMo=o("XLMRobertaForMaskedLM"),xMo=o(" (XLM-RoBERTa model)"),$Mo=l(),qu=a("li"),Pie=a("strong"),kMo=o("xlm-roberta-xl"),SMo=o(" \u2014 "),HN=a("a"),RMo=o("XLMRobertaXLForMaskedLM"),PMo=o(" (XLM-RoBERTa-XL model)"),BMo=l(),Nu=a("li"),Bie=a("strong"),IMo=o("xlnet"),qMo=o(" \u2014 "),UN=a("a"),NMo=o("XLNetLMHeadModel"),jMo=o(" (XLNet model)"),DMo=l(),ju=a("p"),GMo=o("The model is set in evaluation mode by default using "),Iie=a("code"),OMo=o("model.eval()"),VMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),XMo=o("model.train()"),zMo=l(),F(Du.$$.fragment),Fqe=l(),$i=a("h2"),Gu=a("a"),Nie=a("span"),F(Y0.$$.fragment),WMo=l(),jie=a("span"),QMo=o("AutoModelForCausalLM"),Tqe=l(),$o=a("div"),F(K0.$$.fragment),HMo=l(),ki=a("p"),UMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=a("a"),JMo=o("from_pretrained()"),YMo=o(" class method or the "),YN=a("a"),KMo=o("from_config()"),ZMo=o(` class
method.`),e4o=l(),Z0=a("p"),o4o=o("This class cannot be instantiated directly using "),Die=a("code"),r4o=o("__init__()"),t4o=o(" (throws an error)."),a4o=l(),nt=a("div"),F(eA.$$.fragment),n4o=l(),Gie=a("p"),s4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),l4o=l(),Si=a("p"),i4o=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),d4o=o("not"),c4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),f4o=o("from_pretrained()"),m4o=o(" to load the model weights."),g4o=l(),F(Ou.$$.fragment),h4o=l(),Ke=a("div"),F(oA.$$.fragment),p4o=l(),Vie=a("p"),_4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u4o=l(),$a=a("p"),b4o=o("The model class to instantiate is selected based on the "),Xie=a("code"),v4o=o("model_type"),F4o=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),T4o=o("pretrained_model_name_or_path"),M4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),E4o=o("pretrained_model_name_or_path"),C4o=o(":"),w4o=l(),z=a("ul"),Vu=a("li"),Qie=a("strong"),A4o=o("bart"),y4o=o(" \u2014 "),ZN=a("a"),L4o=o("BartForCausalLM"),x4o=o(" (BART model)"),$4o=l(),Xu=a("li"),Hie=a("strong"),k4o=o("bert"),S4o=o(" \u2014 "),ej=a("a"),R4o=o("BertLMHeadModel"),P4o=o(" (BERT model)"),B4o=l(),zu=a("li"),Uie=a("strong"),I4o=o("bert-generation"),q4o=o(" \u2014 "),oj=a("a"),N4o=o("BertGenerationDecoder"),j4o=o(" (Bert Generation model)"),D4o=l(),Wu=a("li"),Jie=a("strong"),G4o=o("big_bird"),O4o=o(" \u2014 "),rj=a("a"),V4o=o("BigBirdForCausalLM"),X4o=o(" (BigBird model)"),z4o=l(),Qu=a("li"),Yie=a("strong"),W4o=o("bigbird_pegasus"),Q4o=o(" \u2014 "),tj=a("a"),H4o=o("BigBirdPegasusForCausalLM"),U4o=o(" (BigBirdPegasus model)"),J4o=l(),Hu=a("li"),Kie=a("strong"),Y4o=o("blenderbot"),K4o=o(" \u2014 "),aj=a("a"),Z4o=o("BlenderbotForCausalLM"),eEo=o(" (Blenderbot model)"),oEo=l(),Uu=a("li"),Zie=a("strong"),rEo=o("blenderbot-small"),tEo=o(" \u2014 "),nj=a("a"),aEo=o("BlenderbotSmallForCausalLM"),nEo=o(" (BlenderbotSmall model)"),sEo=l(),Ju=a("li"),ede=a("strong"),lEo=o("camembert"),iEo=o(" \u2014 "),sj=a("a"),dEo=o("CamembertForCausalLM"),cEo=o(" (CamemBERT model)"),fEo=l(),Yu=a("li"),ode=a("strong"),mEo=o("ctrl"),gEo=o(" \u2014 "),lj=a("a"),hEo=o("CTRLLMHeadModel"),pEo=o(" (CTRL model)"),_Eo=l(),Ku=a("li"),rde=a("strong"),uEo=o("data2vec-text"),bEo=o(" \u2014 "),ij=a("a"),vEo=o("Data2VecTextForCausalLM"),FEo=o(" (Data2VecText model)"),TEo=l(),Zu=a("li"),tde=a("strong"),MEo=o("electra"),EEo=o(" \u2014 "),dj=a("a"),CEo=o("ElectraForCausalLM"),wEo=o(" (ELECTRA model)"),AEo=l(),e1=a("li"),ade=a("strong"),yEo=o("gpt2"),LEo=o(" \u2014 "),cj=a("a"),xEo=o("GPT2LMHeadModel"),$Eo=o(" (OpenAI GPT-2 model)"),kEo=l(),o1=a("li"),nde=a("strong"),SEo=o("gpt_neo"),REo=o(" \u2014 "),fj=a("a"),PEo=o("GPTNeoForCausalLM"),BEo=o(" (GPT Neo model)"),IEo=l(),r1=a("li"),sde=a("strong"),qEo=o("gptj"),NEo=o(" \u2014 "),mj=a("a"),jEo=o("GPTJForCausalLM"),DEo=o(" (GPT-J model)"),GEo=l(),t1=a("li"),lde=a("strong"),OEo=o("marian"),VEo=o(" \u2014 "),gj=a("a"),XEo=o("MarianForCausalLM"),zEo=o(" (Marian model)"),WEo=l(),a1=a("li"),ide=a("strong"),QEo=o("mbart"),HEo=o(" \u2014 "),hj=a("a"),UEo=o("MBartForCausalLM"),JEo=o(" (mBART model)"),YEo=l(),n1=a("li"),dde=a("strong"),KEo=o("megatron-bert"),ZEo=o(" \u2014 "),pj=a("a"),eCo=o("MegatronBertForCausalLM"),oCo=o(" (MegatronBert model)"),rCo=l(),s1=a("li"),cde=a("strong"),tCo=o("openai-gpt"),aCo=o(" \u2014 "),_j=a("a"),nCo=o("OpenAIGPTLMHeadModel"),sCo=o(" (OpenAI GPT model)"),lCo=l(),l1=a("li"),fde=a("strong"),iCo=o("opt"),dCo=o(" \u2014 "),uj=a("a"),cCo=o("OPTForCausalLM"),fCo=o(" (OPT model)"),mCo=l(),i1=a("li"),mde=a("strong"),gCo=o("pegasus"),hCo=o(" \u2014 "),bj=a("a"),pCo=o("PegasusForCausalLM"),_Co=o(" (Pegasus model)"),uCo=l(),d1=a("li"),gde=a("strong"),bCo=o("plbart"),vCo=o(" \u2014 "),vj=a("a"),FCo=o("PLBartForCausalLM"),TCo=o(" (PLBart model)"),MCo=l(),c1=a("li"),hde=a("strong"),ECo=o("prophetnet"),CCo=o(" \u2014 "),Fj=a("a"),wCo=o("ProphetNetForCausalLM"),ACo=o(" (ProphetNet model)"),yCo=l(),f1=a("li"),pde=a("strong"),LCo=o("qdqbert"),xCo=o(" \u2014 "),Tj=a("a"),$Co=o("QDQBertLMHeadModel"),kCo=o(" (QDQBert model)"),SCo=l(),m1=a("li"),_de=a("strong"),RCo=o("reformer"),PCo=o(" \u2014 "),Mj=a("a"),BCo=o("ReformerModelWithLMHead"),ICo=o(" (Reformer model)"),qCo=l(),g1=a("li"),ude=a("strong"),NCo=o("rembert"),jCo=o(" \u2014 "),Ej=a("a"),DCo=o("RemBertForCausalLM"),GCo=o(" (RemBERT model)"),OCo=l(),h1=a("li"),bde=a("strong"),VCo=o("roberta"),XCo=o(" \u2014 "),Cj=a("a"),zCo=o("RobertaForCausalLM"),WCo=o(" (RoBERTa model)"),QCo=l(),p1=a("li"),vde=a("strong"),HCo=o("roformer"),UCo=o(" \u2014 "),wj=a("a"),JCo=o("RoFormerForCausalLM"),YCo=o(" (RoFormer model)"),KCo=l(),_1=a("li"),Fde=a("strong"),ZCo=o("speech_to_text_2"),e5o=o(" \u2014 "),Aj=a("a"),o5o=o("Speech2Text2ForCausalLM"),r5o=o(" (Speech2Text2 model)"),t5o=l(),u1=a("li"),Tde=a("strong"),a5o=o("transfo-xl"),n5o=o(" \u2014 "),yj=a("a"),s5o=o("TransfoXLLMHeadModel"),l5o=o(" (Transformer-XL model)"),i5o=l(),b1=a("li"),Mde=a("strong"),d5o=o("trocr"),c5o=o(" \u2014 "),Lj=a("a"),f5o=o("TrOCRForCausalLM"),m5o=o(" (TrOCR model)"),g5o=l(),v1=a("li"),Ede=a("strong"),h5o=o("xglm"),p5o=o(" \u2014 "),xj=a("a"),_5o=o("XGLMForCausalLM"),u5o=o(" (XGLM model)"),b5o=l(),F1=a("li"),Cde=a("strong"),v5o=o("xlm"),F5o=o(" \u2014 "),$j=a("a"),T5o=o("XLMWithLMHeadModel"),M5o=o(" (XLM model)"),E5o=l(),T1=a("li"),wde=a("strong"),C5o=o("xlm-prophetnet"),w5o=o(" \u2014 "),kj=a("a"),A5o=o("XLMProphetNetForCausalLM"),y5o=o(" (XLMProphetNet model)"),L5o=l(),M1=a("li"),Ade=a("strong"),x5o=o("xlm-roberta"),$5o=o(" \u2014 "),Sj=a("a"),k5o=o("XLMRobertaForCausalLM"),S5o=o(" (XLM-RoBERTa model)"),R5o=l(),E1=a("li"),yde=a("strong"),P5o=o("xlm-roberta-xl"),B5o=o(" \u2014 "),Rj=a("a"),I5o=o("XLMRobertaXLForCausalLM"),q5o=o(" (XLM-RoBERTa-XL model)"),N5o=l(),C1=a("li"),Lde=a("strong"),j5o=o("xlnet"),D5o=o(" \u2014 "),Pj=a("a"),G5o=o("XLNetLMHeadModel"),O5o=o(" (XLNet model)"),V5o=l(),w1=a("p"),X5o=o("The model is set in evaluation mode by default using "),xde=a("code"),z5o=o("model.eval()"),W5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),Q5o=o("model.train()"),H5o=l(),F(A1.$$.fragment),Mqe=l(),Ri=a("h2"),y1=a("a"),kde=a("span"),F(rA.$$.fragment),U5o=l(),Sde=a("span"),J5o=o("AutoModelForMaskedLM"),Eqe=l(),ko=a("div"),F(tA.$$.fragment),Y5o=l(),Pi=a("p"),K5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bj=a("a"),Z5o=o("from_pretrained()"),e3o=o(" class method or the "),Ij=a("a"),o3o=o("from_config()"),r3o=o(` class
method.`),t3o=l(),aA=a("p"),a3o=o("This class cannot be instantiated directly using "),Rde=a("code"),n3o=o("__init__()"),s3o=o(" (throws an error)."),l3o=l(),st=a("div"),F(nA.$$.fragment),i3o=l(),Pde=a("p"),d3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c3o=l(),Bi=a("p"),f3o=o(`Note:
Loading a model from its configuration file does `),Bde=a("strong"),m3o=o("not"),g3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=a("a"),h3o=o("from_pretrained()"),p3o=o(" to load the model weights."),_3o=l(),F(L1.$$.fragment),u3o=l(),Ze=a("div"),F(sA.$$.fragment),b3o=l(),Ide=a("p"),v3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),F3o=l(),ka=a("p"),T3o=o("The model class to instantiate is selected based on the "),qde=a("code"),M3o=o("model_type"),E3o=o(` property of the config object (either
passed as an argument or loaded from `),Nde=a("code"),C3o=o("pretrained_model_name_or_path"),w3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),A3o=o("pretrained_model_name_or_path"),y3o=o(":"),L3o=l(),W=a("ul"),x1=a("li"),Dde=a("strong"),x3o=o("albert"),$3o=o(" \u2014 "),Nj=a("a"),k3o=o("AlbertForMaskedLM"),S3o=o(" (ALBERT model)"),R3o=l(),$1=a("li"),Gde=a("strong"),P3o=o("bart"),B3o=o(" \u2014 "),jj=a("a"),I3o=o("BartForConditionalGeneration"),q3o=o(" (BART model)"),N3o=l(),k1=a("li"),Ode=a("strong"),j3o=o("bert"),D3o=o(" \u2014 "),Dj=a("a"),G3o=o("BertForMaskedLM"),O3o=o(" (BERT model)"),V3o=l(),S1=a("li"),Vde=a("strong"),X3o=o("big_bird"),z3o=o(" \u2014 "),Gj=a("a"),W3o=o("BigBirdForMaskedLM"),Q3o=o(" (BigBird model)"),H3o=l(),R1=a("li"),Xde=a("strong"),U3o=o("camembert"),J3o=o(" \u2014 "),Oj=a("a"),Y3o=o("CamembertForMaskedLM"),K3o=o(" (CamemBERT model)"),Z3o=l(),P1=a("li"),zde=a("strong"),ewo=o("convbert"),owo=o(" \u2014 "),Vj=a("a"),rwo=o("ConvBertForMaskedLM"),two=o(" (ConvBERT model)"),awo=l(),B1=a("li"),Wde=a("strong"),nwo=o("data2vec-text"),swo=o(" \u2014 "),Xj=a("a"),lwo=o("Data2VecTextForMaskedLM"),iwo=o(" (Data2VecText model)"),dwo=l(),I1=a("li"),Qde=a("strong"),cwo=o("deberta"),fwo=o(" \u2014 "),zj=a("a"),mwo=o("DebertaForMaskedLM"),gwo=o(" (DeBERTa model)"),hwo=l(),q1=a("li"),Hde=a("strong"),pwo=o("deberta-v2"),_wo=o(" \u2014 "),Wj=a("a"),uwo=o("DebertaV2ForMaskedLM"),bwo=o(" (DeBERTa-v2 model)"),vwo=l(),N1=a("li"),Ude=a("strong"),Fwo=o("distilbert"),Two=o(" \u2014 "),Qj=a("a"),Mwo=o("DistilBertForMaskedLM"),Ewo=o(" (DistilBERT model)"),Cwo=l(),j1=a("li"),Jde=a("strong"),wwo=o("electra"),Awo=o(" \u2014 "),Hj=a("a"),ywo=o("ElectraForMaskedLM"),Lwo=o(" (ELECTRA model)"),xwo=l(),D1=a("li"),Yde=a("strong"),$wo=o("flaubert"),kwo=o(" \u2014 "),Uj=a("a"),Swo=o("FlaubertWithLMHeadModel"),Rwo=o(" (FlauBERT model)"),Pwo=l(),G1=a("li"),Kde=a("strong"),Bwo=o("fnet"),Iwo=o(" \u2014 "),Jj=a("a"),qwo=o("FNetForMaskedLM"),Nwo=o(" (FNet model)"),jwo=l(),O1=a("li"),Zde=a("strong"),Dwo=o("funnel"),Gwo=o(" \u2014 "),Yj=a("a"),Owo=o("FunnelForMaskedLM"),Vwo=o(" (Funnel Transformer model)"),Xwo=l(),V1=a("li"),ece=a("strong"),zwo=o("ibert"),Wwo=o(" \u2014 "),Kj=a("a"),Qwo=o("IBertForMaskedLM"),Hwo=o(" (I-BERT model)"),Uwo=l(),X1=a("li"),oce=a("strong"),Jwo=o("layoutlm"),Ywo=o(" \u2014 "),Zj=a("a"),Kwo=o("LayoutLMForMaskedLM"),Zwo=o(" (LayoutLM model)"),e0o=l(),z1=a("li"),rce=a("strong"),o0o=o("longformer"),r0o=o(" \u2014 "),eD=a("a"),t0o=o("LongformerForMaskedLM"),a0o=o(" (Longformer model)"),n0o=l(),W1=a("li"),tce=a("strong"),s0o=o("mbart"),l0o=o(" \u2014 "),oD=a("a"),i0o=o("MBartForConditionalGeneration"),d0o=o(" (mBART model)"),c0o=l(),Q1=a("li"),ace=a("strong"),f0o=o("megatron-bert"),m0o=o(" \u2014 "),rD=a("a"),g0o=o("MegatronBertForMaskedLM"),h0o=o(" (MegatronBert model)"),p0o=l(),H1=a("li"),nce=a("strong"),_0o=o("mobilebert"),u0o=o(" \u2014 "),tD=a("a"),b0o=o("MobileBertForMaskedLM"),v0o=o(" (MobileBERT model)"),F0o=l(),U1=a("li"),sce=a("strong"),T0o=o("mpnet"),M0o=o(" \u2014 "),aD=a("a"),E0o=o("MPNetForMaskedLM"),C0o=o(" (MPNet model)"),w0o=l(),J1=a("li"),lce=a("strong"),A0o=o("nystromformer"),y0o=o(" \u2014 "),nD=a("a"),L0o=o("NystromformerForMaskedLM"),x0o=o(" (Nystromformer model)"),$0o=l(),Y1=a("li"),ice=a("strong"),k0o=o("perceiver"),S0o=o(" \u2014 "),sD=a("a"),R0o=o("PerceiverForMaskedLM"),P0o=o(" (Perceiver model)"),B0o=l(),K1=a("li"),dce=a("strong"),I0o=o("qdqbert"),q0o=o(" \u2014 "),lD=a("a"),N0o=o("QDQBertForMaskedLM"),j0o=o(" (QDQBert model)"),D0o=l(),Z1=a("li"),cce=a("strong"),G0o=o("reformer"),O0o=o(" \u2014 "),iD=a("a"),V0o=o("ReformerForMaskedLM"),X0o=o(" (Reformer model)"),z0o=l(),eb=a("li"),fce=a("strong"),W0o=o("rembert"),Q0o=o(" \u2014 "),dD=a("a"),H0o=o("RemBertForMaskedLM"),U0o=o(" (RemBERT model)"),J0o=l(),ob=a("li"),mce=a("strong"),Y0o=o("roberta"),K0o=o(" \u2014 "),cD=a("a"),Z0o=o("RobertaForMaskedLM"),eAo=o(" (RoBERTa model)"),oAo=l(),rb=a("li"),gce=a("strong"),rAo=o("roformer"),tAo=o(" \u2014 "),fD=a("a"),aAo=o("RoFormerForMaskedLM"),nAo=o(" (RoFormer model)"),sAo=l(),tb=a("li"),hce=a("strong"),lAo=o("squeezebert"),iAo=o(" \u2014 "),mD=a("a"),dAo=o("SqueezeBertForMaskedLM"),cAo=o(" (SqueezeBERT model)"),fAo=l(),ab=a("li"),pce=a("strong"),mAo=o("tapas"),gAo=o(" \u2014 "),gD=a("a"),hAo=o("TapasForMaskedLM"),pAo=o(" (TAPAS model)"),_Ao=l(),nb=a("li"),_ce=a("strong"),uAo=o("wav2vec2"),bAo=o(" \u2014 "),uce=a("code"),vAo=o("Wav2Vec2ForMaskedLM"),FAo=o(" (Wav2Vec2 model)"),TAo=l(),sb=a("li"),bce=a("strong"),MAo=o("xlm"),EAo=o(" \u2014 "),hD=a("a"),CAo=o("XLMWithLMHeadModel"),wAo=o(" (XLM model)"),AAo=l(),lb=a("li"),vce=a("strong"),yAo=o("xlm-roberta"),LAo=o(" \u2014 "),pD=a("a"),xAo=o("XLMRobertaForMaskedLM"),$Ao=o(" (XLM-RoBERTa model)"),kAo=l(),ib=a("li"),Fce=a("strong"),SAo=o("xlm-roberta-xl"),RAo=o(" \u2014 "),_D=a("a"),PAo=o("XLMRobertaXLForMaskedLM"),BAo=o(" (XLM-RoBERTa-XL model)"),IAo=l(),db=a("li"),Tce=a("strong"),qAo=o("yoso"),NAo=o(" \u2014 "),uD=a("a"),jAo=o("YosoForMaskedLM"),DAo=o(" (YOSO model)"),GAo=l(),cb=a("p"),OAo=o("The model is set in evaluation mode by default using "),Mce=a("code"),VAo=o("model.eval()"),XAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),zAo=o("model.train()"),WAo=l(),F(fb.$$.fragment),Cqe=l(),Ii=a("h2"),mb=a("a"),Cce=a("span"),F(lA.$$.fragment),QAo=l(),wce=a("span"),HAo=o("AutoModelForSeq2SeqLM"),wqe=l(),So=a("div"),F(iA.$$.fragment),UAo=l(),qi=a("p"),JAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bD=a("a"),YAo=o("from_pretrained()"),KAo=o(" class method or the "),vD=a("a"),ZAo=o("from_config()"),eyo=o(` class
method.`),oyo=l(),dA=a("p"),ryo=o("This class cannot be instantiated directly using "),Ace=a("code"),tyo=o("__init__()"),ayo=o(" (throws an error)."),nyo=l(),lt=a("div"),F(cA.$$.fragment),syo=l(),yce=a("p"),lyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iyo=l(),Ni=a("p"),dyo=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),cyo=o("not"),fyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),myo=o("from_pretrained()"),gyo=o(" to load the model weights."),hyo=l(),F(gb.$$.fragment),pyo=l(),eo=a("div"),F(fA.$$.fragment),_yo=l(),xce=a("p"),uyo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),byo=l(),Sa=a("p"),vyo=o("The model class to instantiate is selected based on the "),$ce=a("code"),Fyo=o("model_type"),Tyo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),Myo=o("pretrained_model_name_or_path"),Eyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),Cyo=o("pretrained_model_name_or_path"),wyo=o(":"),Ayo=l(),_e=a("ul"),hb=a("li"),Rce=a("strong"),yyo=o("bart"),Lyo=o(" \u2014 "),TD=a("a"),xyo=o("BartForConditionalGeneration"),$yo=o(" (BART model)"),kyo=l(),pb=a("li"),Pce=a("strong"),Syo=o("bigbird_pegasus"),Ryo=o(" \u2014 "),MD=a("a"),Pyo=o("BigBirdPegasusForConditionalGeneration"),Byo=o(" (BigBirdPegasus model)"),Iyo=l(),_b=a("li"),Bce=a("strong"),qyo=o("blenderbot"),Nyo=o(" \u2014 "),ED=a("a"),jyo=o("BlenderbotForConditionalGeneration"),Dyo=o(" (Blenderbot model)"),Gyo=l(),ub=a("li"),Ice=a("strong"),Oyo=o("blenderbot-small"),Vyo=o(" \u2014 "),CD=a("a"),Xyo=o("BlenderbotSmallForConditionalGeneration"),zyo=o(" (BlenderbotSmall model)"),Wyo=l(),bb=a("li"),qce=a("strong"),Qyo=o("encoder-decoder"),Hyo=o(" \u2014 "),wD=a("a"),Uyo=o("EncoderDecoderModel"),Jyo=o(" (Encoder decoder model)"),Yyo=l(),vb=a("li"),Nce=a("strong"),Kyo=o("fsmt"),Zyo=o(" \u2014 "),AD=a("a"),eLo=o("FSMTForConditionalGeneration"),oLo=o(" (FairSeq Machine-Translation model)"),rLo=l(),Fb=a("li"),jce=a("strong"),tLo=o("led"),aLo=o(" \u2014 "),yD=a("a"),nLo=o("LEDForConditionalGeneration"),sLo=o(" (LED model)"),lLo=l(),Tb=a("li"),Dce=a("strong"),iLo=o("m2m_100"),dLo=o(" \u2014 "),LD=a("a"),cLo=o("M2M100ForConditionalGeneration"),fLo=o(" (M2M100 model)"),mLo=l(),Mb=a("li"),Gce=a("strong"),gLo=o("marian"),hLo=o(" \u2014 "),xD=a("a"),pLo=o("MarianMTModel"),_Lo=o(" (Marian model)"),uLo=l(),Eb=a("li"),Oce=a("strong"),bLo=o("mbart"),vLo=o(" \u2014 "),$D=a("a"),FLo=o("MBartForConditionalGeneration"),TLo=o(" (mBART model)"),MLo=l(),Cb=a("li"),Vce=a("strong"),ELo=o("mt5"),CLo=o(" \u2014 "),kD=a("a"),wLo=o("MT5ForConditionalGeneration"),ALo=o(" (mT5 model)"),yLo=l(),wb=a("li"),Xce=a("strong"),LLo=o("pegasus"),xLo=o(" \u2014 "),SD=a("a"),$Lo=o("PegasusForConditionalGeneration"),kLo=o(" (Pegasus model)"),SLo=l(),Ab=a("li"),zce=a("strong"),RLo=o("plbart"),PLo=o(" \u2014 "),RD=a("a"),BLo=o("PLBartForConditionalGeneration"),ILo=o(" (PLBart model)"),qLo=l(),yb=a("li"),Wce=a("strong"),NLo=o("prophetnet"),jLo=o(" \u2014 "),PD=a("a"),DLo=o("ProphetNetForConditionalGeneration"),GLo=o(" (ProphetNet model)"),OLo=l(),Lb=a("li"),Qce=a("strong"),VLo=o("t5"),XLo=o(" \u2014 "),BD=a("a"),zLo=o("T5ForConditionalGeneration"),WLo=o(" (T5 model)"),QLo=l(),xb=a("li"),Hce=a("strong"),HLo=o("xlm-prophetnet"),ULo=o(" \u2014 "),ID=a("a"),JLo=o("XLMProphetNetForConditionalGeneration"),YLo=o(" (XLMProphetNet model)"),KLo=l(),$b=a("p"),ZLo=o("The model is set in evaluation mode by default using "),Uce=a("code"),e9o=o("model.eval()"),o9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=a("code"),r9o=o("model.train()"),t9o=l(),F(kb.$$.fragment),Aqe=l(),ji=a("h2"),Sb=a("a"),Yce=a("span"),F(mA.$$.fragment),a9o=l(),Kce=a("span"),n9o=o("AutoModelForSequenceClassification"),yqe=l(),Ro=a("div"),F(gA.$$.fragment),s9o=l(),Di=a("p"),l9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=a("a"),i9o=o("from_pretrained()"),d9o=o(" class method or the "),ND=a("a"),c9o=o("from_config()"),f9o=o(` class
method.`),m9o=l(),hA=a("p"),g9o=o("This class cannot be instantiated directly using "),Zce=a("code"),h9o=o("__init__()"),p9o=o(" (throws an error)."),_9o=l(),it=a("div"),F(pA.$$.fragment),u9o=l(),efe=a("p"),b9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v9o=l(),Gi=a("p"),F9o=o(`Note:
Loading a model from its configuration file does `),ofe=a("strong"),T9o=o("not"),M9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),E9o=o("from_pretrained()"),C9o=o(" to load the model weights."),w9o=l(),F(Rb.$$.fragment),A9o=l(),oo=a("div"),F(_A.$$.fragment),y9o=l(),rfe=a("p"),L9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),x9o=l(),Ra=a("p"),$9o=o("The model class to instantiate is selected based on the "),tfe=a("code"),k9o=o("model_type"),S9o=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),R9o=o("pretrained_model_name_or_path"),P9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),B9o=o("pretrained_model_name_or_path"),I9o=o(":"),q9o=l(),q=a("ul"),Pb=a("li"),sfe=a("strong"),N9o=o("albert"),j9o=o(" \u2014 "),DD=a("a"),D9o=o("AlbertForSequenceClassification"),G9o=o(" (ALBERT model)"),O9o=l(),Bb=a("li"),lfe=a("strong"),V9o=o("bart"),X9o=o(" \u2014 "),GD=a("a"),z9o=o("BartForSequenceClassification"),W9o=o(" (BART model)"),Q9o=l(),Ib=a("li"),ife=a("strong"),H9o=o("bert"),U9o=o(" \u2014 "),OD=a("a"),J9o=o("BertForSequenceClassification"),Y9o=o(" (BERT model)"),K9o=l(),qb=a("li"),dfe=a("strong"),Z9o=o("big_bird"),exo=o(" \u2014 "),VD=a("a"),oxo=o("BigBirdForSequenceClassification"),rxo=o(" (BigBird model)"),txo=l(),Nb=a("li"),cfe=a("strong"),axo=o("bigbird_pegasus"),nxo=o(" \u2014 "),XD=a("a"),sxo=o("BigBirdPegasusForSequenceClassification"),lxo=o(" (BigBirdPegasus model)"),ixo=l(),jb=a("li"),ffe=a("strong"),dxo=o("camembert"),cxo=o(" \u2014 "),zD=a("a"),fxo=o("CamembertForSequenceClassification"),mxo=o(" (CamemBERT model)"),gxo=l(),Db=a("li"),mfe=a("strong"),hxo=o("canine"),pxo=o(" \u2014 "),WD=a("a"),_xo=o("CanineForSequenceClassification"),uxo=o(" (Canine model)"),bxo=l(),Gb=a("li"),gfe=a("strong"),vxo=o("convbert"),Fxo=o(" \u2014 "),QD=a("a"),Txo=o("ConvBertForSequenceClassification"),Mxo=o(" (ConvBERT model)"),Exo=l(),Ob=a("li"),hfe=a("strong"),Cxo=o("ctrl"),wxo=o(" \u2014 "),HD=a("a"),Axo=o("CTRLForSequenceClassification"),yxo=o(" (CTRL model)"),Lxo=l(),Vb=a("li"),pfe=a("strong"),xxo=o("data2vec-text"),$xo=o(" \u2014 "),UD=a("a"),kxo=o("Data2VecTextForSequenceClassification"),Sxo=o(" (Data2VecText model)"),Rxo=l(),Xb=a("li"),_fe=a("strong"),Pxo=o("deberta"),Bxo=o(" \u2014 "),JD=a("a"),Ixo=o("DebertaForSequenceClassification"),qxo=o(" (DeBERTa model)"),Nxo=l(),zb=a("li"),ufe=a("strong"),jxo=o("deberta-v2"),Dxo=o(" \u2014 "),YD=a("a"),Gxo=o("DebertaV2ForSequenceClassification"),Oxo=o(" (DeBERTa-v2 model)"),Vxo=l(),Wb=a("li"),bfe=a("strong"),Xxo=o("distilbert"),zxo=o(" \u2014 "),KD=a("a"),Wxo=o("DistilBertForSequenceClassification"),Qxo=o(" (DistilBERT model)"),Hxo=l(),Qb=a("li"),vfe=a("strong"),Uxo=o("electra"),Jxo=o(" \u2014 "),ZD=a("a"),Yxo=o("ElectraForSequenceClassification"),Kxo=o(" (ELECTRA model)"),Zxo=l(),Hb=a("li"),Ffe=a("strong"),e$o=o("flaubert"),o$o=o(" \u2014 "),eG=a("a"),r$o=o("FlaubertForSequenceClassification"),t$o=o(" (FlauBERT model)"),a$o=l(),Ub=a("li"),Tfe=a("strong"),n$o=o("fnet"),s$o=o(" \u2014 "),oG=a("a"),l$o=o("FNetForSequenceClassification"),i$o=o(" (FNet model)"),d$o=l(),Jb=a("li"),Mfe=a("strong"),c$o=o("funnel"),f$o=o(" \u2014 "),rG=a("a"),m$o=o("FunnelForSequenceClassification"),g$o=o(" (Funnel Transformer model)"),h$o=l(),Yb=a("li"),Efe=a("strong"),p$o=o("gpt2"),_$o=o(" \u2014 "),tG=a("a"),u$o=o("GPT2ForSequenceClassification"),b$o=o(" (OpenAI GPT-2 model)"),v$o=l(),Kb=a("li"),Cfe=a("strong"),F$o=o("gpt_neo"),T$o=o(" \u2014 "),aG=a("a"),M$o=o("GPTNeoForSequenceClassification"),E$o=o(" (GPT Neo model)"),C$o=l(),Zb=a("li"),wfe=a("strong"),w$o=o("gptj"),A$o=o(" \u2014 "),nG=a("a"),y$o=o("GPTJForSequenceClassification"),L$o=o(" (GPT-J model)"),x$o=l(),e2=a("li"),Afe=a("strong"),$$o=o("ibert"),k$o=o(" \u2014 "),sG=a("a"),S$o=o("IBertForSequenceClassification"),R$o=o(" (I-BERT model)"),P$o=l(),o2=a("li"),yfe=a("strong"),B$o=o("layoutlm"),I$o=o(" \u2014 "),lG=a("a"),q$o=o("LayoutLMForSequenceClassification"),N$o=o(" (LayoutLM model)"),j$o=l(),r2=a("li"),Lfe=a("strong"),D$o=o("layoutlmv2"),G$o=o(" \u2014 "),iG=a("a"),O$o=o("LayoutLMv2ForSequenceClassification"),V$o=o(" (LayoutLMv2 model)"),X$o=l(),t2=a("li"),xfe=a("strong"),z$o=o("led"),W$o=o(" \u2014 "),dG=a("a"),Q$o=o("LEDForSequenceClassification"),H$o=o(" (LED model)"),U$o=l(),a2=a("li"),$fe=a("strong"),J$o=o("longformer"),Y$o=o(" \u2014 "),cG=a("a"),K$o=o("LongformerForSequenceClassification"),Z$o=o(" (Longformer model)"),eko=l(),n2=a("li"),kfe=a("strong"),oko=o("mbart"),rko=o(" \u2014 "),fG=a("a"),tko=o("MBartForSequenceClassification"),ako=o(" (mBART model)"),nko=l(),s2=a("li"),Sfe=a("strong"),sko=o("megatron-bert"),lko=o(" \u2014 "),mG=a("a"),iko=o("MegatronBertForSequenceClassification"),dko=o(" (MegatronBert model)"),cko=l(),l2=a("li"),Rfe=a("strong"),fko=o("mobilebert"),mko=o(" \u2014 "),gG=a("a"),gko=o("MobileBertForSequenceClassification"),hko=o(" (MobileBERT model)"),pko=l(),i2=a("li"),Pfe=a("strong"),_ko=o("mpnet"),uko=o(" \u2014 "),hG=a("a"),bko=o("MPNetForSequenceClassification"),vko=o(" (MPNet model)"),Fko=l(),d2=a("li"),Bfe=a("strong"),Tko=o("nystromformer"),Mko=o(" \u2014 "),pG=a("a"),Eko=o("NystromformerForSequenceClassification"),Cko=o(" (Nystromformer model)"),wko=l(),c2=a("li"),Ife=a("strong"),Ako=o("openai-gpt"),yko=o(" \u2014 "),_G=a("a"),Lko=o("OpenAIGPTForSequenceClassification"),xko=o(" (OpenAI GPT model)"),$ko=l(),f2=a("li"),qfe=a("strong"),kko=o("perceiver"),Sko=o(" \u2014 "),uG=a("a"),Rko=o("PerceiverForSequenceClassification"),Pko=o(" (Perceiver model)"),Bko=l(),m2=a("li"),Nfe=a("strong"),Iko=o("plbart"),qko=o(" \u2014 "),bG=a("a"),Nko=o("PLBartForSequenceClassification"),jko=o(" (PLBart model)"),Dko=l(),g2=a("li"),jfe=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),vG=a("a"),Vko=o("QDQBertForSequenceClassification"),Xko=o(" (QDQBert model)"),zko=l(),h2=a("li"),Dfe=a("strong"),Wko=o("reformer"),Qko=o(" \u2014 "),FG=a("a"),Hko=o("ReformerForSequenceClassification"),Uko=o(" (Reformer model)"),Jko=l(),p2=a("li"),Gfe=a("strong"),Yko=o("rembert"),Kko=o(" \u2014 "),TG=a("a"),Zko=o("RemBertForSequenceClassification"),eSo=o(" (RemBERT model)"),oSo=l(),_2=a("li"),Ofe=a("strong"),rSo=o("roberta"),tSo=o(" \u2014 "),MG=a("a"),aSo=o("RobertaForSequenceClassification"),nSo=o(" (RoBERTa model)"),sSo=l(),u2=a("li"),Vfe=a("strong"),lSo=o("roformer"),iSo=o(" \u2014 "),EG=a("a"),dSo=o("RoFormerForSequenceClassification"),cSo=o(" (RoFormer model)"),fSo=l(),b2=a("li"),Xfe=a("strong"),mSo=o("squeezebert"),gSo=o(" \u2014 "),CG=a("a"),hSo=o("SqueezeBertForSequenceClassification"),pSo=o(" (SqueezeBERT model)"),_So=l(),v2=a("li"),zfe=a("strong"),uSo=o("tapas"),bSo=o(" \u2014 "),wG=a("a"),vSo=o("TapasForSequenceClassification"),FSo=o(" (TAPAS model)"),TSo=l(),F2=a("li"),Wfe=a("strong"),MSo=o("transfo-xl"),ESo=o(" \u2014 "),AG=a("a"),CSo=o("TransfoXLForSequenceClassification"),wSo=o(" (Transformer-XL model)"),ASo=l(),T2=a("li"),Qfe=a("strong"),ySo=o("xlm"),LSo=o(" \u2014 "),yG=a("a"),xSo=o("XLMForSequenceClassification"),$So=o(" (XLM model)"),kSo=l(),M2=a("li"),Hfe=a("strong"),SSo=o("xlm-roberta"),RSo=o(" \u2014 "),LG=a("a"),PSo=o("XLMRobertaForSequenceClassification"),BSo=o(" (XLM-RoBERTa model)"),ISo=l(),E2=a("li"),Ufe=a("strong"),qSo=o("xlm-roberta-xl"),NSo=o(" \u2014 "),xG=a("a"),jSo=o("XLMRobertaXLForSequenceClassification"),DSo=o(" (XLM-RoBERTa-XL model)"),GSo=l(),C2=a("li"),Jfe=a("strong"),OSo=o("xlnet"),VSo=o(" \u2014 "),$G=a("a"),XSo=o("XLNetForSequenceClassification"),zSo=o(" (XLNet model)"),WSo=l(),w2=a("li"),Yfe=a("strong"),QSo=o("yoso"),HSo=o(" \u2014 "),kG=a("a"),USo=o("YosoForSequenceClassification"),JSo=o(" (YOSO model)"),YSo=l(),A2=a("p"),KSo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),ZSo=o("model.eval()"),eRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),oRo=o("model.train()"),rRo=l(),F(y2.$$.fragment),Lqe=l(),Oi=a("h2"),L2=a("a"),eme=a("span"),F(uA.$$.fragment),tRo=l(),ome=a("span"),aRo=o("AutoModelForMultipleChoice"),xqe=l(),Po=a("div"),F(bA.$$.fragment),nRo=l(),Vi=a("p"),sRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SG=a("a"),lRo=o("from_pretrained()"),iRo=o(" class method or the "),RG=a("a"),dRo=o("from_config()"),cRo=o(` class
method.`),fRo=l(),vA=a("p"),mRo=o("This class cannot be instantiated directly using "),rme=a("code"),gRo=o("__init__()"),hRo=o(" (throws an error)."),pRo=l(),dt=a("div"),F(FA.$$.fragment),_Ro=l(),tme=a("p"),uRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bRo=l(),Xi=a("p"),vRo=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),FRo=o("not"),TRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),MRo=o("from_pretrained()"),ERo=o(" to load the model weights."),CRo=l(),F(x2.$$.fragment),wRo=l(),ro=a("div"),F(TA.$$.fragment),ARo=l(),nme=a("p"),yRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LRo=l(),Pa=a("p"),xRo=o("The model class to instantiate is selected based on the "),sme=a("code"),$Ro=o("model_type"),kRo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),SRo=o("pretrained_model_name_or_path"),RRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),PRo=o("pretrained_model_name_or_path"),BRo=o(":"),IRo=l(),Y=a("ul"),$2=a("li"),dme=a("strong"),qRo=o("albert"),NRo=o(" \u2014 "),BG=a("a"),jRo=o("AlbertForMultipleChoice"),DRo=o(" (ALBERT model)"),GRo=l(),k2=a("li"),cme=a("strong"),ORo=o("bert"),VRo=o(" \u2014 "),IG=a("a"),XRo=o("BertForMultipleChoice"),zRo=o(" (BERT model)"),WRo=l(),S2=a("li"),fme=a("strong"),QRo=o("big_bird"),HRo=o(" \u2014 "),qG=a("a"),URo=o("BigBirdForMultipleChoice"),JRo=o(" (BigBird model)"),YRo=l(),R2=a("li"),mme=a("strong"),KRo=o("camembert"),ZRo=o(" \u2014 "),NG=a("a"),ePo=o("CamembertForMultipleChoice"),oPo=o(" (CamemBERT model)"),rPo=l(),P2=a("li"),gme=a("strong"),tPo=o("canine"),aPo=o(" \u2014 "),jG=a("a"),nPo=o("CanineForMultipleChoice"),sPo=o(" (Canine model)"),lPo=l(),B2=a("li"),hme=a("strong"),iPo=o("convbert"),dPo=o(" \u2014 "),DG=a("a"),cPo=o("ConvBertForMultipleChoice"),fPo=o(" (ConvBERT model)"),mPo=l(),I2=a("li"),pme=a("strong"),gPo=o("data2vec-text"),hPo=o(" \u2014 "),GG=a("a"),pPo=o("Data2VecTextForMultipleChoice"),_Po=o(" (Data2VecText model)"),uPo=l(),q2=a("li"),_me=a("strong"),bPo=o("deberta-v2"),vPo=o(" \u2014 "),OG=a("a"),FPo=o("DebertaV2ForMultipleChoice"),TPo=o(" (DeBERTa-v2 model)"),MPo=l(),N2=a("li"),ume=a("strong"),EPo=o("distilbert"),CPo=o(" \u2014 "),VG=a("a"),wPo=o("DistilBertForMultipleChoice"),APo=o(" (DistilBERT model)"),yPo=l(),j2=a("li"),bme=a("strong"),LPo=o("electra"),xPo=o(" \u2014 "),XG=a("a"),$Po=o("ElectraForMultipleChoice"),kPo=o(" (ELECTRA model)"),SPo=l(),D2=a("li"),vme=a("strong"),RPo=o("flaubert"),PPo=o(" \u2014 "),zG=a("a"),BPo=o("FlaubertForMultipleChoice"),IPo=o(" (FlauBERT model)"),qPo=l(),G2=a("li"),Fme=a("strong"),NPo=o("fnet"),jPo=o(" \u2014 "),WG=a("a"),DPo=o("FNetForMultipleChoice"),GPo=o(" (FNet model)"),OPo=l(),O2=a("li"),Tme=a("strong"),VPo=o("funnel"),XPo=o(" \u2014 "),QG=a("a"),zPo=o("FunnelForMultipleChoice"),WPo=o(" (Funnel Transformer model)"),QPo=l(),V2=a("li"),Mme=a("strong"),HPo=o("ibert"),UPo=o(" \u2014 "),HG=a("a"),JPo=o("IBertForMultipleChoice"),YPo=o(" (I-BERT model)"),KPo=l(),X2=a("li"),Eme=a("strong"),ZPo=o("longformer"),eBo=o(" \u2014 "),UG=a("a"),oBo=o("LongformerForMultipleChoice"),rBo=o(" (Longformer model)"),tBo=l(),z2=a("li"),Cme=a("strong"),aBo=o("megatron-bert"),nBo=o(" \u2014 "),JG=a("a"),sBo=o("MegatronBertForMultipleChoice"),lBo=o(" (MegatronBert model)"),iBo=l(),W2=a("li"),wme=a("strong"),dBo=o("mobilebert"),cBo=o(" \u2014 "),YG=a("a"),fBo=o("MobileBertForMultipleChoice"),mBo=o(" (MobileBERT model)"),gBo=l(),Q2=a("li"),Ame=a("strong"),hBo=o("mpnet"),pBo=o(" \u2014 "),KG=a("a"),_Bo=o("MPNetForMultipleChoice"),uBo=o(" (MPNet model)"),bBo=l(),H2=a("li"),yme=a("strong"),vBo=o("nystromformer"),FBo=o(" \u2014 "),ZG=a("a"),TBo=o("NystromformerForMultipleChoice"),MBo=o(" (Nystromformer model)"),EBo=l(),U2=a("li"),Lme=a("strong"),CBo=o("qdqbert"),wBo=o(" \u2014 "),eO=a("a"),ABo=o("QDQBertForMultipleChoice"),yBo=o(" (QDQBert model)"),LBo=l(),J2=a("li"),xme=a("strong"),xBo=o("rembert"),$Bo=o(" \u2014 "),oO=a("a"),kBo=o("RemBertForMultipleChoice"),SBo=o(" (RemBERT model)"),RBo=l(),Y2=a("li"),$me=a("strong"),PBo=o("roberta"),BBo=o(" \u2014 "),rO=a("a"),IBo=o("RobertaForMultipleChoice"),qBo=o(" (RoBERTa model)"),NBo=l(),K2=a("li"),kme=a("strong"),jBo=o("roformer"),DBo=o(" \u2014 "),tO=a("a"),GBo=o("RoFormerForMultipleChoice"),OBo=o(" (RoFormer model)"),VBo=l(),Z2=a("li"),Sme=a("strong"),XBo=o("squeezebert"),zBo=o(" \u2014 "),aO=a("a"),WBo=o("SqueezeBertForMultipleChoice"),QBo=o(" (SqueezeBERT model)"),HBo=l(),ev=a("li"),Rme=a("strong"),UBo=o("xlm"),JBo=o(" \u2014 "),nO=a("a"),YBo=o("XLMForMultipleChoice"),KBo=o(" (XLM model)"),ZBo=l(),ov=a("li"),Pme=a("strong"),eIo=o("xlm-roberta"),oIo=o(" \u2014 "),sO=a("a"),rIo=o("XLMRobertaForMultipleChoice"),tIo=o(" (XLM-RoBERTa model)"),aIo=l(),rv=a("li"),Bme=a("strong"),nIo=o("xlm-roberta-xl"),sIo=o(" \u2014 "),lO=a("a"),lIo=o("XLMRobertaXLForMultipleChoice"),iIo=o(" (XLM-RoBERTa-XL model)"),dIo=l(),tv=a("li"),Ime=a("strong"),cIo=o("xlnet"),fIo=o(" \u2014 "),iO=a("a"),mIo=o("XLNetForMultipleChoice"),gIo=o(" (XLNet model)"),hIo=l(),av=a("li"),qme=a("strong"),pIo=o("yoso"),_Io=o(" \u2014 "),dO=a("a"),uIo=o("YosoForMultipleChoice"),bIo=o(" (YOSO model)"),vIo=l(),nv=a("p"),FIo=o("The model is set in evaluation mode by default using "),Nme=a("code"),TIo=o("model.eval()"),MIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),EIo=o("model.train()"),CIo=l(),F(sv.$$.fragment),$qe=l(),zi=a("h2"),lv=a("a"),Dme=a("span"),F(MA.$$.fragment),wIo=l(),Gme=a("span"),AIo=o("AutoModelForNextSentencePrediction"),kqe=l(),Bo=a("div"),F(EA.$$.fragment),yIo=l(),Wi=a("p"),LIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cO=a("a"),xIo=o("from_pretrained()"),$Io=o(" class method or the "),fO=a("a"),kIo=o("from_config()"),SIo=o(` class
method.`),RIo=l(),CA=a("p"),PIo=o("This class cannot be instantiated directly using "),Ome=a("code"),BIo=o("__init__()"),IIo=o(" (throws an error)."),qIo=l(),ct=a("div"),F(wA.$$.fragment),NIo=l(),Vme=a("p"),jIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DIo=l(),Qi=a("p"),GIo=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),OIo=o("not"),VIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),XIo=o("from_pretrained()"),zIo=o(" to load the model weights."),WIo=l(),F(iv.$$.fragment),QIo=l(),to=a("div"),F(AA.$$.fragment),HIo=l(),zme=a("p"),UIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JIo=l(),Ba=a("p"),YIo=o("The model class to instantiate is selected based on the "),Wme=a("code"),KIo=o("model_type"),ZIo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),eqo=o("pretrained_model_name_or_path"),oqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),rqo=o("pretrained_model_name_or_path"),tqo=o(":"),aqo=l(),Yr=a("ul"),dv=a("li"),Ume=a("strong"),nqo=o("bert"),sqo=o(" \u2014 "),gO=a("a"),lqo=o("BertForNextSentencePrediction"),iqo=o(" (BERT model)"),dqo=l(),cv=a("li"),Jme=a("strong"),cqo=o("fnet"),fqo=o(" \u2014 "),hO=a("a"),mqo=o("FNetForNextSentencePrediction"),gqo=o(" (FNet model)"),hqo=l(),fv=a("li"),Yme=a("strong"),pqo=o("megatron-bert"),_qo=o(" \u2014 "),pO=a("a"),uqo=o("MegatronBertForNextSentencePrediction"),bqo=o(" (MegatronBert model)"),vqo=l(),mv=a("li"),Kme=a("strong"),Fqo=o("mobilebert"),Tqo=o(" \u2014 "),_O=a("a"),Mqo=o("MobileBertForNextSentencePrediction"),Eqo=o(" (MobileBERT model)"),Cqo=l(),gv=a("li"),Zme=a("strong"),wqo=o("qdqbert"),Aqo=o(" \u2014 "),uO=a("a"),yqo=o("QDQBertForNextSentencePrediction"),Lqo=o(" (QDQBert model)"),xqo=l(),hv=a("p"),$qo=o("The model is set in evaluation mode by default using "),ege=a("code"),kqo=o("model.eval()"),Sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),Rqo=o("model.train()"),Pqo=l(),F(pv.$$.fragment),Sqe=l(),Hi=a("h2"),_v=a("a"),rge=a("span"),F(yA.$$.fragment),Bqo=l(),tge=a("span"),Iqo=o("AutoModelForTokenClassification"),Rqe=l(),Io=a("div"),F(LA.$$.fragment),qqo=l(),Ui=a("p"),Nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bO=a("a"),jqo=o("from_pretrained()"),Dqo=o(" class method or the "),vO=a("a"),Gqo=o("from_config()"),Oqo=o(` class
method.`),Vqo=l(),xA=a("p"),Xqo=o("This class cannot be instantiated directly using "),age=a("code"),zqo=o("__init__()"),Wqo=o(" (throws an error)."),Qqo=l(),ft=a("div"),F($A.$$.fragment),Hqo=l(),nge=a("p"),Uqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jqo=l(),Ji=a("p"),Yqo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),Kqo=o("not"),Zqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),eNo=o("from_pretrained()"),oNo=o(" to load the model weights."),rNo=l(),F(uv.$$.fragment),tNo=l(),ao=a("div"),F(kA.$$.fragment),aNo=l(),lge=a("p"),nNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sNo=l(),Ia=a("p"),lNo=o("The model class to instantiate is selected based on the "),ige=a("code"),iNo=o("model_type"),dNo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),cNo=o("pretrained_model_name_or_path"),fNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),mNo=o("pretrained_model_name_or_path"),gNo=o(":"),hNo=l(),U=a("ul"),bv=a("li"),fge=a("strong"),pNo=o("albert"),_No=o(" \u2014 "),TO=a("a"),uNo=o("AlbertForTokenClassification"),bNo=o(" (ALBERT model)"),vNo=l(),vv=a("li"),mge=a("strong"),FNo=o("bert"),TNo=o(" \u2014 "),MO=a("a"),MNo=o("BertForTokenClassification"),ENo=o(" (BERT model)"),CNo=l(),Fv=a("li"),gge=a("strong"),wNo=o("big_bird"),ANo=o(" \u2014 "),EO=a("a"),yNo=o("BigBirdForTokenClassification"),LNo=o(" (BigBird model)"),xNo=l(),Tv=a("li"),hge=a("strong"),$No=o("camembert"),kNo=o(" \u2014 "),CO=a("a"),SNo=o("CamembertForTokenClassification"),RNo=o(" (CamemBERT model)"),PNo=l(),Mv=a("li"),pge=a("strong"),BNo=o("canine"),INo=o(" \u2014 "),wO=a("a"),qNo=o("CanineForTokenClassification"),NNo=o(" (Canine model)"),jNo=l(),Ev=a("li"),_ge=a("strong"),DNo=o("convbert"),GNo=o(" \u2014 "),AO=a("a"),ONo=o("ConvBertForTokenClassification"),VNo=o(" (ConvBERT model)"),XNo=l(),Cv=a("li"),uge=a("strong"),zNo=o("data2vec-text"),WNo=o(" \u2014 "),yO=a("a"),QNo=o("Data2VecTextForTokenClassification"),HNo=o(" (Data2VecText model)"),UNo=l(),wv=a("li"),bge=a("strong"),JNo=o("deberta"),YNo=o(" \u2014 "),LO=a("a"),KNo=o("DebertaForTokenClassification"),ZNo=o(" (DeBERTa model)"),ejo=l(),Av=a("li"),vge=a("strong"),ojo=o("deberta-v2"),rjo=o(" \u2014 "),xO=a("a"),tjo=o("DebertaV2ForTokenClassification"),ajo=o(" (DeBERTa-v2 model)"),njo=l(),yv=a("li"),Fge=a("strong"),sjo=o("distilbert"),ljo=o(" \u2014 "),$O=a("a"),ijo=o("DistilBertForTokenClassification"),djo=o(" (DistilBERT model)"),cjo=l(),Lv=a("li"),Tge=a("strong"),fjo=o("electra"),mjo=o(" \u2014 "),kO=a("a"),gjo=o("ElectraForTokenClassification"),hjo=o(" (ELECTRA model)"),pjo=l(),xv=a("li"),Mge=a("strong"),_jo=o("flaubert"),ujo=o(" \u2014 "),SO=a("a"),bjo=o("FlaubertForTokenClassification"),vjo=o(" (FlauBERT model)"),Fjo=l(),$v=a("li"),Ege=a("strong"),Tjo=o("fnet"),Mjo=o(" \u2014 "),RO=a("a"),Ejo=o("FNetForTokenClassification"),Cjo=o(" (FNet model)"),wjo=l(),kv=a("li"),Cge=a("strong"),Ajo=o("funnel"),yjo=o(" \u2014 "),PO=a("a"),Ljo=o("FunnelForTokenClassification"),xjo=o(" (Funnel Transformer model)"),$jo=l(),Sv=a("li"),wge=a("strong"),kjo=o("gpt2"),Sjo=o(" \u2014 "),BO=a("a"),Rjo=o("GPT2ForTokenClassification"),Pjo=o(" (OpenAI GPT-2 model)"),Bjo=l(),Rv=a("li"),Age=a("strong"),Ijo=o("ibert"),qjo=o(" \u2014 "),IO=a("a"),Njo=o("IBertForTokenClassification"),jjo=o(" (I-BERT model)"),Djo=l(),Pv=a("li"),yge=a("strong"),Gjo=o("layoutlm"),Ojo=o(" \u2014 "),qO=a("a"),Vjo=o("LayoutLMForTokenClassification"),Xjo=o(" (LayoutLM model)"),zjo=l(),Bv=a("li"),Lge=a("strong"),Wjo=o("layoutlmv2"),Qjo=o(" \u2014 "),NO=a("a"),Hjo=o("LayoutLMv2ForTokenClassification"),Ujo=o(" (LayoutLMv2 model)"),Jjo=l(),Iv=a("li"),xge=a("strong"),Yjo=o("longformer"),Kjo=o(" \u2014 "),jO=a("a"),Zjo=o("LongformerForTokenClassification"),eDo=o(" (Longformer model)"),oDo=l(),qv=a("li"),$ge=a("strong"),rDo=o("megatron-bert"),tDo=o(" \u2014 "),DO=a("a"),aDo=o("MegatronBertForTokenClassification"),nDo=o(" (MegatronBert model)"),sDo=l(),Nv=a("li"),kge=a("strong"),lDo=o("mobilebert"),iDo=o(" \u2014 "),GO=a("a"),dDo=o("MobileBertForTokenClassification"),cDo=o(" (MobileBERT model)"),fDo=l(),jv=a("li"),Sge=a("strong"),mDo=o("mpnet"),gDo=o(" \u2014 "),OO=a("a"),hDo=o("MPNetForTokenClassification"),pDo=o(" (MPNet model)"),_Do=l(),Dv=a("li"),Rge=a("strong"),uDo=o("nystromformer"),bDo=o(" \u2014 "),VO=a("a"),vDo=o("NystromformerForTokenClassification"),FDo=o(" (Nystromformer model)"),TDo=l(),Gv=a("li"),Pge=a("strong"),MDo=o("qdqbert"),EDo=o(" \u2014 "),XO=a("a"),CDo=o("QDQBertForTokenClassification"),wDo=o(" (QDQBert model)"),ADo=l(),Ov=a("li"),Bge=a("strong"),yDo=o("rembert"),LDo=o(" \u2014 "),zO=a("a"),xDo=o("RemBertForTokenClassification"),$Do=o(" (RemBERT model)"),kDo=l(),Vv=a("li"),Ige=a("strong"),SDo=o("roberta"),RDo=o(" \u2014 "),WO=a("a"),PDo=o("RobertaForTokenClassification"),BDo=o(" (RoBERTa model)"),IDo=l(),Xv=a("li"),qge=a("strong"),qDo=o("roformer"),NDo=o(" \u2014 "),QO=a("a"),jDo=o("RoFormerForTokenClassification"),DDo=o(" (RoFormer model)"),GDo=l(),zv=a("li"),Nge=a("strong"),ODo=o("squeezebert"),VDo=o(" \u2014 "),HO=a("a"),XDo=o("SqueezeBertForTokenClassification"),zDo=o(" (SqueezeBERT model)"),WDo=l(),Wv=a("li"),jge=a("strong"),QDo=o("xlm"),HDo=o(" \u2014 "),UO=a("a"),UDo=o("XLMForTokenClassification"),JDo=o(" (XLM model)"),YDo=l(),Qv=a("li"),Dge=a("strong"),KDo=o("xlm-roberta"),ZDo=o(" \u2014 "),JO=a("a"),eGo=o("XLMRobertaForTokenClassification"),oGo=o(" (XLM-RoBERTa model)"),rGo=l(),Hv=a("li"),Gge=a("strong"),tGo=o("xlm-roberta-xl"),aGo=o(" \u2014 "),YO=a("a"),nGo=o("XLMRobertaXLForTokenClassification"),sGo=o(" (XLM-RoBERTa-XL model)"),lGo=l(),Uv=a("li"),Oge=a("strong"),iGo=o("xlnet"),dGo=o(" \u2014 "),KO=a("a"),cGo=o("XLNetForTokenClassification"),fGo=o(" (XLNet model)"),mGo=l(),Jv=a("li"),Vge=a("strong"),gGo=o("yoso"),hGo=o(" \u2014 "),ZO=a("a"),pGo=o("YosoForTokenClassification"),_Go=o(" (YOSO model)"),uGo=l(),Yv=a("p"),bGo=o("The model is set in evaluation mode by default using "),Xge=a("code"),vGo=o("model.eval()"),FGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),TGo=o("model.train()"),MGo=l(),F(Kv.$$.fragment),Pqe=l(),Yi=a("h2"),Zv=a("a"),Wge=a("span"),F(SA.$$.fragment),EGo=l(),Qge=a("span"),CGo=o("AutoModelForQuestionAnswering"),Bqe=l(),qo=a("div"),F(RA.$$.fragment),wGo=l(),Ki=a("p"),AGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eV=a("a"),yGo=o("from_pretrained()"),LGo=o(" class method or the "),oV=a("a"),xGo=o("from_config()"),$Go=o(` class
method.`),kGo=l(),PA=a("p"),SGo=o("This class cannot be instantiated directly using "),Hge=a("code"),RGo=o("__init__()"),PGo=o(" (throws an error)."),BGo=l(),mt=a("div"),F(BA.$$.fragment),IGo=l(),Uge=a("p"),qGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NGo=l(),Zi=a("p"),jGo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),DGo=o("not"),GGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),OGo=o("from_pretrained()"),VGo=o(" to load the model weights."),XGo=l(),F(eF.$$.fragment),zGo=l(),no=a("div"),F(IA.$$.fragment),WGo=l(),Yge=a("p"),QGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HGo=l(),qa=a("p"),UGo=o("The model class to instantiate is selected based on the "),Kge=a("code"),JGo=o("model_type"),YGo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),KGo=o("pretrained_model_name_or_path"),ZGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),eOo=o("pretrained_model_name_or_path"),oOo=o(":"),rOo=l(),V=a("ul"),oF=a("li"),ohe=a("strong"),tOo=o("albert"),aOo=o(" \u2014 "),tV=a("a"),nOo=o("AlbertForQuestionAnswering"),sOo=o(" (ALBERT model)"),lOo=l(),rF=a("li"),rhe=a("strong"),iOo=o("bart"),dOo=o(" \u2014 "),aV=a("a"),cOo=o("BartForQuestionAnswering"),fOo=o(" (BART model)"),mOo=l(),tF=a("li"),the=a("strong"),gOo=o("bert"),hOo=o(" \u2014 "),nV=a("a"),pOo=o("BertForQuestionAnswering"),_Oo=o(" (BERT model)"),uOo=l(),aF=a("li"),ahe=a("strong"),bOo=o("big_bird"),vOo=o(" \u2014 "),sV=a("a"),FOo=o("BigBirdForQuestionAnswering"),TOo=o(" (BigBird model)"),MOo=l(),nF=a("li"),nhe=a("strong"),EOo=o("bigbird_pegasus"),COo=o(" \u2014 "),lV=a("a"),wOo=o("BigBirdPegasusForQuestionAnswering"),AOo=o(" (BigBirdPegasus model)"),yOo=l(),sF=a("li"),she=a("strong"),LOo=o("camembert"),xOo=o(" \u2014 "),iV=a("a"),$Oo=o("CamembertForQuestionAnswering"),kOo=o(" (CamemBERT model)"),SOo=l(),lF=a("li"),lhe=a("strong"),ROo=o("canine"),POo=o(" \u2014 "),dV=a("a"),BOo=o("CanineForQuestionAnswering"),IOo=o(" (Canine model)"),qOo=l(),iF=a("li"),ihe=a("strong"),NOo=o("convbert"),jOo=o(" \u2014 "),cV=a("a"),DOo=o("ConvBertForQuestionAnswering"),GOo=o(" (ConvBERT model)"),OOo=l(),dF=a("li"),dhe=a("strong"),VOo=o("data2vec-text"),XOo=o(" \u2014 "),fV=a("a"),zOo=o("Data2VecTextForQuestionAnswering"),WOo=o(" (Data2VecText model)"),QOo=l(),cF=a("li"),che=a("strong"),HOo=o("deberta"),UOo=o(" \u2014 "),mV=a("a"),JOo=o("DebertaForQuestionAnswering"),YOo=o(" (DeBERTa model)"),KOo=l(),fF=a("li"),fhe=a("strong"),ZOo=o("deberta-v2"),eVo=o(" \u2014 "),gV=a("a"),oVo=o("DebertaV2ForQuestionAnswering"),rVo=o(" (DeBERTa-v2 model)"),tVo=l(),mF=a("li"),mhe=a("strong"),aVo=o("distilbert"),nVo=o(" \u2014 "),hV=a("a"),sVo=o("DistilBertForQuestionAnswering"),lVo=o(" (DistilBERT model)"),iVo=l(),gF=a("li"),ghe=a("strong"),dVo=o("electra"),cVo=o(" \u2014 "),pV=a("a"),fVo=o("ElectraForQuestionAnswering"),mVo=o(" (ELECTRA model)"),gVo=l(),hF=a("li"),hhe=a("strong"),hVo=o("flaubert"),pVo=o(" \u2014 "),_V=a("a"),_Vo=o("FlaubertForQuestionAnsweringSimple"),uVo=o(" (FlauBERT model)"),bVo=l(),pF=a("li"),phe=a("strong"),vVo=o("fnet"),FVo=o(" \u2014 "),uV=a("a"),TVo=o("FNetForQuestionAnswering"),MVo=o(" (FNet model)"),EVo=l(),_F=a("li"),_he=a("strong"),CVo=o("funnel"),wVo=o(" \u2014 "),bV=a("a"),AVo=o("FunnelForQuestionAnswering"),yVo=o(" (Funnel Transformer model)"),LVo=l(),uF=a("li"),uhe=a("strong"),xVo=o("gptj"),$Vo=o(" \u2014 "),vV=a("a"),kVo=o("GPTJForQuestionAnswering"),SVo=o(" (GPT-J model)"),RVo=l(),bF=a("li"),bhe=a("strong"),PVo=o("ibert"),BVo=o(" \u2014 "),FV=a("a"),IVo=o("IBertForQuestionAnswering"),qVo=o(" (I-BERT model)"),NVo=l(),vF=a("li"),vhe=a("strong"),jVo=o("layoutlmv2"),DVo=o(" \u2014 "),TV=a("a"),GVo=o("LayoutLMv2ForQuestionAnswering"),OVo=o(" (LayoutLMv2 model)"),VVo=l(),FF=a("li"),Fhe=a("strong"),XVo=o("led"),zVo=o(" \u2014 "),MV=a("a"),WVo=o("LEDForQuestionAnswering"),QVo=o(" (LED model)"),HVo=l(),TF=a("li"),The=a("strong"),UVo=o("longformer"),JVo=o(" \u2014 "),EV=a("a"),YVo=o("LongformerForQuestionAnswering"),KVo=o(" (Longformer model)"),ZVo=l(),MF=a("li"),Mhe=a("strong"),eXo=o("lxmert"),oXo=o(" \u2014 "),CV=a("a"),rXo=o("LxmertForQuestionAnswering"),tXo=o(" (LXMERT model)"),aXo=l(),EF=a("li"),Ehe=a("strong"),nXo=o("mbart"),sXo=o(" \u2014 "),wV=a("a"),lXo=o("MBartForQuestionAnswering"),iXo=o(" (mBART model)"),dXo=l(),CF=a("li"),Che=a("strong"),cXo=o("megatron-bert"),fXo=o(" \u2014 "),AV=a("a"),mXo=o("MegatronBertForQuestionAnswering"),gXo=o(" (MegatronBert model)"),hXo=l(),wF=a("li"),whe=a("strong"),pXo=o("mobilebert"),_Xo=o(" \u2014 "),yV=a("a"),uXo=o("MobileBertForQuestionAnswering"),bXo=o(" (MobileBERT model)"),vXo=l(),AF=a("li"),Ahe=a("strong"),FXo=o("mpnet"),TXo=o(" \u2014 "),LV=a("a"),MXo=o("MPNetForQuestionAnswering"),EXo=o(" (MPNet model)"),CXo=l(),yF=a("li"),yhe=a("strong"),wXo=o("nystromformer"),AXo=o(" \u2014 "),xV=a("a"),yXo=o("NystromformerForQuestionAnswering"),LXo=o(" (Nystromformer model)"),xXo=l(),LF=a("li"),Lhe=a("strong"),$Xo=o("qdqbert"),kXo=o(" \u2014 "),$V=a("a"),SXo=o("QDQBertForQuestionAnswering"),RXo=o(" (QDQBert model)"),PXo=l(),xF=a("li"),xhe=a("strong"),BXo=o("reformer"),IXo=o(" \u2014 "),kV=a("a"),qXo=o("ReformerForQuestionAnswering"),NXo=o(" (Reformer model)"),jXo=l(),$F=a("li"),$he=a("strong"),DXo=o("rembert"),GXo=o(" \u2014 "),SV=a("a"),OXo=o("RemBertForQuestionAnswering"),VXo=o(" (RemBERT model)"),XXo=l(),kF=a("li"),khe=a("strong"),zXo=o("roberta"),WXo=o(" \u2014 "),RV=a("a"),QXo=o("RobertaForQuestionAnswering"),HXo=o(" (RoBERTa model)"),UXo=l(),SF=a("li"),She=a("strong"),JXo=o("roformer"),YXo=o(" \u2014 "),PV=a("a"),KXo=o("RoFormerForQuestionAnswering"),ZXo=o(" (RoFormer model)"),ezo=l(),RF=a("li"),Rhe=a("strong"),ozo=o("splinter"),rzo=o(" \u2014 "),BV=a("a"),tzo=o("SplinterForQuestionAnswering"),azo=o(" (Splinter model)"),nzo=l(),PF=a("li"),Phe=a("strong"),szo=o("squeezebert"),lzo=o(" \u2014 "),IV=a("a"),izo=o("SqueezeBertForQuestionAnswering"),dzo=o(" (SqueezeBERT model)"),czo=l(),BF=a("li"),Bhe=a("strong"),fzo=o("xlm"),mzo=o(" \u2014 "),qV=a("a"),gzo=o("XLMForQuestionAnsweringSimple"),hzo=o(" (XLM model)"),pzo=l(),IF=a("li"),Ihe=a("strong"),_zo=o("xlm-roberta"),uzo=o(" \u2014 "),NV=a("a"),bzo=o("XLMRobertaForQuestionAnswering"),vzo=o(" (XLM-RoBERTa model)"),Fzo=l(),qF=a("li"),qhe=a("strong"),Tzo=o("xlm-roberta-xl"),Mzo=o(" \u2014 "),jV=a("a"),Ezo=o("XLMRobertaXLForQuestionAnswering"),Czo=o(" (XLM-RoBERTa-XL model)"),wzo=l(),NF=a("li"),Nhe=a("strong"),Azo=o("xlnet"),yzo=o(" \u2014 "),DV=a("a"),Lzo=o("XLNetForQuestionAnsweringSimple"),xzo=o(" (XLNet model)"),$zo=l(),jF=a("li"),jhe=a("strong"),kzo=o("yoso"),Szo=o(" \u2014 "),GV=a("a"),Rzo=o("YosoForQuestionAnswering"),Pzo=o(" (YOSO model)"),Bzo=l(),DF=a("p"),Izo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),qzo=o("model.eval()"),Nzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),jzo=o("model.train()"),Dzo=l(),F(GF.$$.fragment),Iqe=l(),ed=a("h2"),OF=a("a"),Ohe=a("span"),F(qA.$$.fragment),Gzo=l(),Vhe=a("span"),Ozo=o("AutoModelForTableQuestionAnswering"),qqe=l(),No=a("div"),F(NA.$$.fragment),Vzo=l(),od=a("p"),Xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OV=a("a"),zzo=o("from_pretrained()"),Wzo=o(" class method or the "),VV=a("a"),Qzo=o("from_config()"),Hzo=o(` class
method.`),Uzo=l(),jA=a("p"),Jzo=o("This class cannot be instantiated directly using "),Xhe=a("code"),Yzo=o("__init__()"),Kzo=o(" (throws an error)."),Zzo=l(),gt=a("div"),F(DA.$$.fragment),eWo=l(),zhe=a("p"),oWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rWo=l(),rd=a("p"),tWo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),aWo=o("not"),nWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),sWo=o("from_pretrained()"),lWo=o(" to load the model weights."),iWo=l(),F(VF.$$.fragment),dWo=l(),so=a("div"),F(GA.$$.fragment),cWo=l(),Qhe=a("p"),fWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mWo=l(),Na=a("p"),gWo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),hWo=o("model_type"),pWo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),_Wo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(":"),FWo=l(),Yhe=a("ul"),XF=a("li"),Khe=a("strong"),TWo=o("tapas"),MWo=o(" \u2014 "),zV=a("a"),EWo=o("TapasForQuestionAnswering"),CWo=o(" (TAPAS model)"),wWo=l(),zF=a("p"),AWo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),yWo=o("model.eval()"),LWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),xWo=o("model.train()"),$Wo=l(),F(WF.$$.fragment),Nqe=l(),td=a("h2"),QF=a("a"),ope=a("span"),F(OA.$$.fragment),kWo=l(),rpe=a("span"),SWo=o("AutoModelForImageClassification"),jqe=l(),jo=a("div"),F(VA.$$.fragment),RWo=l(),ad=a("p"),PWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=a("a"),BWo=o("from_pretrained()"),IWo=o(" class method or the "),QV=a("a"),qWo=o("from_config()"),NWo=o(` class
method.`),jWo=l(),XA=a("p"),DWo=o("This class cannot be instantiated directly using "),tpe=a("code"),GWo=o("__init__()"),OWo=o(" (throws an error)."),VWo=l(),ht=a("div"),F(zA.$$.fragment),XWo=l(),ape=a("p"),zWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WWo=l(),nd=a("p"),QWo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),HWo=o("not"),UWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),JWo=o("from_pretrained()"),YWo=o(" to load the model weights."),KWo=l(),F(HF.$$.fragment),ZWo=l(),lo=a("div"),F(WA.$$.fragment),eQo=l(),spe=a("p"),oQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rQo=l(),ja=a("p"),tQo=o("The model class to instantiate is selected based on the "),lpe=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),Fe=a("ul"),UF=a("li"),cpe=a("strong"),fQo=o("beit"),mQo=o(" \u2014 "),UV=a("a"),gQo=o("BeitForImageClassification"),hQo=o(" (BEiT model)"),pQo=l(),JF=a("li"),fpe=a("strong"),_Qo=o("convnext"),uQo=o(" \u2014 "),JV=a("a"),bQo=o("ConvNextForImageClassification"),vQo=o(" (ConvNext model)"),FQo=l(),YF=a("li"),mpe=a("strong"),TQo=o("cvt"),MQo=o(" \u2014 "),YV=a("a"),EQo=o("CvtForImageClassification"),CQo=o(" (CvT model)"),wQo=l(),KF=a("li"),gpe=a("strong"),AQo=o("data2vec-vision"),yQo=o(" \u2014 "),KV=a("a"),LQo=o("Data2VecVisionForImageClassification"),xQo=o(" (Data2VecVision model)"),$Qo=l(),Ps=a("li"),hpe=a("strong"),kQo=o("deit"),SQo=o(" \u2014 "),ZV=a("a"),RQo=o("DeiTForImageClassification"),PQo=o(" or "),eX=a("a"),BQo=o("DeiTForImageClassificationWithTeacher"),IQo=o(" (DeiT model)"),qQo=l(),ZF=a("li"),ppe=a("strong"),NQo=o("imagegpt"),jQo=o(" \u2014 "),oX=a("a"),DQo=o("ImageGPTForImageClassification"),GQo=o(" (ImageGPT model)"),OQo=l(),pt=a("li"),_pe=a("strong"),VQo=o("perceiver"),XQo=o(" \u2014 "),rX=a("a"),zQo=o("PerceiverForImageClassificationLearned"),WQo=o(" or "),tX=a("a"),QQo=o("PerceiverForImageClassificationFourier"),HQo=o(" or "),aX=a("a"),UQo=o("PerceiverForImageClassificationConvProcessing"),JQo=o(" (Perceiver model)"),YQo=l(),e6=a("li"),upe=a("strong"),KQo=o("poolformer"),ZQo=o(" \u2014 "),nX=a("a"),eHo=o("PoolFormerForImageClassification"),oHo=o(" (PoolFormer model)"),rHo=l(),o6=a("li"),bpe=a("strong"),tHo=o("regnet"),aHo=o(" \u2014 "),sX=a("a"),nHo=o("RegNetForImageClassification"),sHo=o(" (RegNet model)"),lHo=l(),r6=a("li"),vpe=a("strong"),iHo=o("resnet"),dHo=o(" \u2014 "),lX=a("a"),cHo=o("ResNetForImageClassification"),fHo=o(" (ResNet model)"),mHo=l(),t6=a("li"),Fpe=a("strong"),gHo=o("segformer"),hHo=o(" \u2014 "),iX=a("a"),pHo=o("SegformerForImageClassification"),_Ho=o(" (SegFormer model)"),uHo=l(),a6=a("li"),Tpe=a("strong"),bHo=o("swin"),vHo=o(" \u2014 "),dX=a("a"),FHo=o("SwinForImageClassification"),THo=o(" (Swin model)"),MHo=l(),n6=a("li"),Mpe=a("strong"),EHo=o("van"),CHo=o(" \u2014 "),cX=a("a"),wHo=o("VanForImageClassification"),AHo=o(" (VAN model)"),yHo=l(),s6=a("li"),Epe=a("strong"),LHo=o("vit"),xHo=o(" \u2014 "),fX=a("a"),$Ho=o("ViTForImageClassification"),kHo=o(" (ViT model)"),SHo=l(),l6=a("p"),RHo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),PHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),IHo=o("model.train()"),qHo=l(),F(i6.$$.fragment),Dqe=l(),sd=a("h2"),d6=a("a"),Ape=a("span"),F(QA.$$.fragment),NHo=l(),ype=a("span"),jHo=o("AutoModelForVision2Seq"),Gqe=l(),Do=a("div"),F(HA.$$.fragment),DHo=l(),ld=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mX=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),gX=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),WHo=l(),UA=a("p"),QHo=o("This class cannot be instantiated directly using "),Lpe=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),_t=a("div"),F(JA.$$.fragment),YHo=l(),xpe=a("p"),KHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZHo=l(),id=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(c6.$$.fragment),sUo=l(),io=a("div"),F(YA.$$.fragment),lUo=l(),kpe=a("p"),iUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dUo=l(),Da=a("p"),cUo=o("The model class to instantiate is selected based on the "),Spe=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(":"),uUo=l(),Bpe=a("ul"),f6=a("li"),Ipe=a("strong"),bUo=o("vision-encoder-decoder"),vUo=o(" \u2014 "),pX=a("a"),FUo=o("VisionEncoderDecoderModel"),TUo=o(" (Vision Encoder decoder model)"),MUo=l(),m6=a("p"),EUo=o("The model is set in evaluation mode by default using "),qpe=a("code"),CUo=o("model.eval()"),wUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),AUo=o("model.train()"),yUo=l(),F(g6.$$.fragment),Oqe=l(),dd=a("h2"),h6=a("a"),jpe=a("span"),F(KA.$$.fragment),LUo=l(),Dpe=a("span"),xUo=o("AutoModelForAudioClassification"),Vqe=l(),Go=a("div"),F(ZA.$$.fragment),$Uo=l(),cd=a("p"),kUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_X=a("a"),SUo=o("from_pretrained()"),RUo=o(" class method or the "),uX=a("a"),PUo=o("from_config()"),BUo=o(` class
method.`),IUo=l(),ey=a("p"),qUo=o("This class cannot be instantiated directly using "),Gpe=a("code"),NUo=o("__init__()"),jUo=o(" (throws an error)."),DUo=l(),ut=a("div"),F(oy.$$.fragment),GUo=l(),Ope=a("p"),OUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VUo=l(),fd=a("p"),XUo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),zUo=o("not"),WUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),QUo=o("from_pretrained()"),HUo=o(" to load the model weights."),UUo=l(),F(p6.$$.fragment),JUo=l(),co=a("div"),F(ry.$$.fragment),YUo=l(),Xpe=a("p"),KUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZUo=l(),Ga=a("p"),eJo=o("The model class to instantiate is selected based on the "),zpe=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),ke=a("ul"),_6=a("li"),Hpe=a("strong"),iJo=o("data2vec-audio"),dJo=o(" \u2014 "),vX=a("a"),cJo=o("Data2VecAudioForSequenceClassification"),fJo=o(" (Data2VecAudio model)"),mJo=l(),u6=a("li"),Upe=a("strong"),gJo=o("hubert"),hJo=o(" \u2014 "),FX=a("a"),pJo=o("HubertForSequenceClassification"),_Jo=o(" (Hubert model)"),uJo=l(),b6=a("li"),Jpe=a("strong"),bJo=o("sew"),vJo=o(" \u2014 "),TX=a("a"),FJo=o("SEWForSequenceClassification"),TJo=o(" (SEW model)"),MJo=l(),v6=a("li"),Ype=a("strong"),EJo=o("sew-d"),CJo=o(" \u2014 "),MX=a("a"),wJo=o("SEWDForSequenceClassification"),AJo=o(" (SEW-D model)"),yJo=l(),F6=a("li"),Kpe=a("strong"),LJo=o("unispeech"),xJo=o(" \u2014 "),EX=a("a"),$Jo=o("UniSpeechForSequenceClassification"),kJo=o(" (UniSpeech model)"),SJo=l(),T6=a("li"),Zpe=a("strong"),RJo=o("unispeech-sat"),PJo=o(" \u2014 "),CX=a("a"),BJo=o("UniSpeechSatForSequenceClassification"),IJo=o(" (UniSpeechSat model)"),qJo=l(),M6=a("li"),e_e=a("strong"),NJo=o("wav2vec2"),jJo=o(" \u2014 "),wX=a("a"),DJo=o("Wav2Vec2ForSequenceClassification"),GJo=o(" (Wav2Vec2 model)"),OJo=l(),E6=a("li"),o_e=a("strong"),VJo=o("wav2vec2-conformer"),XJo=o(" \u2014 "),AX=a("a"),zJo=o("Wav2Vec2ConformerForSequenceClassification"),WJo=o(" (Wav2Vec2-Conformer model)"),QJo=l(),C6=a("li"),r_e=a("strong"),HJo=o("wavlm"),UJo=o(" \u2014 "),yX=a("a"),JJo=o("WavLMForSequenceClassification"),YJo=o(" (WavLM model)"),KJo=l(),w6=a("p"),ZJo=o("The model is set in evaluation mode by default using "),t_e=a("code"),eYo=o("model.eval()"),oYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),rYo=o("model.train()"),tYo=l(),F(A6.$$.fragment),Xqe=l(),md=a("h2"),y6=a("a"),n_e=a("span"),F(ty.$$.fragment),aYo=l(),s_e=a("span"),nYo=o("AutoModelForAudioFrameClassification"),zqe=l(),Oo=a("div"),F(ay.$$.fragment),sYo=l(),gd=a("p"),lYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LX=a("a"),iYo=o("from_pretrained()"),dYo=o(" class method or the "),xX=a("a"),cYo=o("from_config()"),fYo=o(` class
method.`),mYo=l(),ny=a("p"),gYo=o("This class cannot be instantiated directly using "),l_e=a("code"),hYo=o("__init__()"),pYo=o(" (throws an error)."),_Yo=l(),bt=a("div"),F(sy.$$.fragment),uYo=l(),i_e=a("p"),bYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vYo=l(),hd=a("p"),FYo=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),TYo=o("not"),MYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),EYo=o("from_pretrained()"),CYo=o(" to load the model weights."),wYo=l(),F(L6.$$.fragment),AYo=l(),fo=a("div"),F(ly.$$.fragment),yYo=l(),c_e=a("p"),LYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xYo=l(),Oa=a("p"),$Yo=o("The model class to instantiate is selected based on the "),f_e=a("code"),kYo=o("model_type"),SYo=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),RYo=o("pretrained_model_name_or_path"),PYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),BYo=o("pretrained_model_name_or_path"),IYo=o(":"),qYo=l(),Kr=a("ul"),x6=a("li"),h_e=a("strong"),NYo=o("data2vec-audio"),jYo=o(" \u2014 "),kX=a("a"),DYo=o("Data2VecAudioForAudioFrameClassification"),GYo=o(" (Data2VecAudio model)"),OYo=l(),$6=a("li"),p_e=a("strong"),VYo=o("unispeech-sat"),XYo=o(" \u2014 "),SX=a("a"),zYo=o("UniSpeechSatForAudioFrameClassification"),WYo=o(" (UniSpeechSat model)"),QYo=l(),k6=a("li"),__e=a("strong"),HYo=o("wav2vec2"),UYo=o(" \u2014 "),RX=a("a"),JYo=o("Wav2Vec2ForAudioFrameClassification"),YYo=o(" (Wav2Vec2 model)"),KYo=l(),S6=a("li"),u_e=a("strong"),ZYo=o("wav2vec2-conformer"),eKo=o(" \u2014 "),PX=a("a"),oKo=o("Wav2Vec2ConformerForAudioFrameClassification"),rKo=o(" (Wav2Vec2-Conformer model)"),tKo=l(),R6=a("li"),b_e=a("strong"),aKo=o("wavlm"),nKo=o(" \u2014 "),BX=a("a"),sKo=o("WavLMForAudioFrameClassification"),lKo=o(" (WavLM model)"),iKo=l(),P6=a("p"),dKo=o("The model is set in evaluation mode by default using "),v_e=a("code"),cKo=o("model.eval()"),fKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),mKo=o("model.train()"),gKo=l(),F(B6.$$.fragment),Wqe=l(),pd=a("h2"),I6=a("a"),T_e=a("span"),F(iy.$$.fragment),hKo=l(),M_e=a("span"),pKo=o("AutoModelForCTC"),Qqe=l(),Vo=a("div"),F(dy.$$.fragment),_Ko=l(),_d=a("p"),uKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IX=a("a"),bKo=o("from_pretrained()"),vKo=o(" class method or the "),qX=a("a"),FKo=o("from_config()"),TKo=o(` class
method.`),MKo=l(),cy=a("p"),EKo=o("This class cannot be instantiated directly using "),E_e=a("code"),CKo=o("__init__()"),wKo=o(" (throws an error)."),AKo=l(),vt=a("div"),F(fy.$$.fragment),yKo=l(),C_e=a("p"),LKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xKo=l(),ud=a("p"),$Ko=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),kKo=o("not"),SKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),RKo=o("from_pretrained()"),PKo=o(" to load the model weights."),BKo=l(),F(q6.$$.fragment),IKo=l(),mo=a("div"),F(my.$$.fragment),qKo=l(),A_e=a("p"),NKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jKo=l(),Va=a("p"),DKo=o("The model class to instantiate is selected based on the "),y_e=a("code"),GKo=o("model_type"),OKo=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),VKo=o("pretrained_model_name_or_path"),XKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),zKo=o("pretrained_model_name_or_path"),WKo=o(":"),QKo=l(),Se=a("ul"),N6=a("li"),$_e=a("strong"),HKo=o("data2vec-audio"),UKo=o(" \u2014 "),jX=a("a"),JKo=o("Data2VecAudioForCTC"),YKo=o(" (Data2VecAudio model)"),KKo=l(),j6=a("li"),k_e=a("strong"),ZKo=o("hubert"),eZo=o(" \u2014 "),DX=a("a"),oZo=o("HubertForCTC"),rZo=o(" (Hubert model)"),tZo=l(),D6=a("li"),S_e=a("strong"),aZo=o("sew"),nZo=o(" \u2014 "),GX=a("a"),sZo=o("SEWForCTC"),lZo=o(" (SEW model)"),iZo=l(),G6=a("li"),R_e=a("strong"),dZo=o("sew-d"),cZo=o(" \u2014 "),OX=a("a"),fZo=o("SEWDForCTC"),mZo=o(" (SEW-D model)"),gZo=l(),O6=a("li"),P_e=a("strong"),hZo=o("unispeech"),pZo=o(" \u2014 "),VX=a("a"),_Zo=o("UniSpeechForCTC"),uZo=o(" (UniSpeech model)"),bZo=l(),V6=a("li"),B_e=a("strong"),vZo=o("unispeech-sat"),FZo=o(" \u2014 "),XX=a("a"),TZo=o("UniSpeechSatForCTC"),MZo=o(" (UniSpeechSat model)"),EZo=l(),X6=a("li"),I_e=a("strong"),CZo=o("wav2vec2"),wZo=o(" \u2014 "),zX=a("a"),AZo=o("Wav2Vec2ForCTC"),yZo=o(" (Wav2Vec2 model)"),LZo=l(),z6=a("li"),q_e=a("strong"),xZo=o("wav2vec2-conformer"),$Zo=o(" \u2014 "),WX=a("a"),kZo=o("Wav2Vec2ConformerForCTC"),SZo=o(" (Wav2Vec2-Conformer model)"),RZo=l(),W6=a("li"),N_e=a("strong"),PZo=o("wavlm"),BZo=o(" \u2014 "),QX=a("a"),IZo=o("WavLMForCTC"),qZo=o(" (WavLM model)"),NZo=l(),Q6=a("p"),jZo=o("The model is set in evaluation mode by default using "),j_e=a("code"),DZo=o("model.eval()"),GZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),OZo=o("model.train()"),VZo=l(),F(H6.$$.fragment),Hqe=l(),bd=a("h2"),U6=a("a"),G_e=a("span"),F(gy.$$.fragment),XZo=l(),O_e=a("span"),zZo=o("AutoModelForSpeechSeq2Seq"),Uqe=l(),Xo=a("div"),F(hy.$$.fragment),WZo=l(),vd=a("p"),QZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HX=a("a"),HZo=o("from_pretrained()"),UZo=o(" class method or the "),UX=a("a"),JZo=o("from_config()"),YZo=o(` class
method.`),KZo=l(),py=a("p"),ZZo=o("This class cannot be instantiated directly using "),V_e=a("code"),eer=o("__init__()"),oer=o(" (throws an error)."),rer=l(),Ft=a("div"),F(_y.$$.fragment),ter=l(),X_e=a("p"),aer=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ner=l(),Fd=a("p"),ser=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),ler=o("not"),ier=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),der=o("from_pretrained()"),cer=o(" to load the model weights."),fer=l(),F(J6.$$.fragment),mer=l(),go=a("div"),F(uy.$$.fragment),ger=l(),W_e=a("p"),her=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),per=l(),Xa=a("p"),_er=o("The model class to instantiate is selected based on the "),Q_e=a("code"),uer=o("model_type"),ber=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),ver=o("pretrained_model_name_or_path"),Fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Ter=o("pretrained_model_name_or_path"),Mer=o(":"),Eer=l(),by=a("ul"),Y6=a("li"),J_e=a("strong"),Cer=o("speech-encoder-decoder"),wer=o(" \u2014 "),YX=a("a"),Aer=o("SpeechEncoderDecoderModel"),yer=o(" (Speech Encoder decoder model)"),Ler=l(),K6=a("li"),Y_e=a("strong"),xer=o("speech_to_text"),$er=o(" \u2014 "),KX=a("a"),ker=o("Speech2TextForConditionalGeneration"),Ser=o(" (Speech2Text model)"),Rer=l(),Z6=a("p"),Per=o("The model is set in evaluation mode by default using "),K_e=a("code"),Ber=o("model.eval()"),Ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),qer=o("model.train()"),Ner=l(),F(eT.$$.fragment),Jqe=l(),Td=a("h2"),oT=a("a"),eue=a("span"),F(vy.$$.fragment),jer=l(),oue=a("span"),Der=o("AutoModelForAudioXVector"),Yqe=l(),zo=a("div"),F(Fy.$$.fragment),Ger=l(),Md=a("p"),Oer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZX=a("a"),Ver=o("from_pretrained()"),Xer=o(" class method or the "),ez=a("a"),zer=o("from_config()"),Wer=o(` class
method.`),Qer=l(),Ty=a("p"),Her=o("This class cannot be instantiated directly using "),rue=a("code"),Uer=o("__init__()"),Jer=o(" (throws an error)."),Yer=l(),Tt=a("div"),F(My.$$.fragment),Ker=l(),tue=a("p"),Zer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eor=l(),Ed=a("p"),oor=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),ror=o("not"),tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),aor=o("from_pretrained()"),nor=o(" to load the model weights."),sor=l(),F(rT.$$.fragment),lor=l(),ho=a("div"),F(Ey.$$.fragment),ior=l(),nue=a("p"),dor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),cor=l(),za=a("p"),mor=o("The model class to instantiate is selected based on the "),sue=a("code"),gor=o("model_type"),hor=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),por=o("pretrained_model_name_or_path"),_or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),uor=o("pretrained_model_name_or_path"),bor=o(":"),vor=l(),Zr=a("ul"),tT=a("li"),due=a("strong"),For=o("data2vec-audio"),Tor=o(" \u2014 "),rz=a("a"),Mor=o("Data2VecAudioForXVector"),Eor=o(" (Data2VecAudio model)"),Cor=l(),aT=a("li"),cue=a("strong"),wor=o("unispeech-sat"),Aor=o(" \u2014 "),tz=a("a"),yor=o("UniSpeechSatForXVector"),Lor=o(" (UniSpeechSat model)"),xor=l(),nT=a("li"),fue=a("strong"),$or=o("wav2vec2"),kor=o(" \u2014 "),az=a("a"),Sor=o("Wav2Vec2ForXVector"),Ror=o(" (Wav2Vec2 model)"),Por=l(),sT=a("li"),mue=a("strong"),Bor=o("wav2vec2-conformer"),Ior=o(" \u2014 "),nz=a("a"),qor=o("Wav2Vec2ConformerForXVector"),Nor=o(" (Wav2Vec2-Conformer model)"),jor=l(),lT=a("li"),gue=a("strong"),Dor=o("wavlm"),Gor=o(" \u2014 "),sz=a("a"),Oor=o("WavLMForXVector"),Vor=o(" (WavLM model)"),Xor=l(),iT=a("p"),zor=o("The model is set in evaluation mode by default using "),hue=a("code"),Wor=o("model.eval()"),Qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),Hor=o("model.train()"),Uor=l(),F(dT.$$.fragment),Kqe=l(),Cd=a("h2"),cT=a("a"),_ue=a("span"),F(Cy.$$.fragment),Jor=l(),uue=a("span"),Yor=o("AutoModelForMaskedImageModeling"),Zqe=l(),Wo=a("div"),F(wy.$$.fragment),Kor=l(),wd=a("p"),Zor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lz=a("a"),err=o("from_pretrained()"),orr=o(" class method or the "),iz=a("a"),rrr=o("from_config()"),trr=o(` class
method.`),arr=l(),Ay=a("p"),nrr=o("This class cannot be instantiated directly using "),bue=a("code"),srr=o("__init__()"),lrr=o(" (throws an error)."),irr=l(),Mt=a("div"),F(yy.$$.fragment),drr=l(),vue=a("p"),crr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),frr=l(),Ad=a("p"),mrr=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),grr=o("not"),hrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),prr=o("from_pretrained()"),_rr=o(" to load the model weights."),urr=l(),F(fT.$$.fragment),brr=l(),po=a("div"),F(Ly.$$.fragment),vrr=l(),Tue=a("p"),Frr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Trr=l(),Wa=a("p"),Mrr=o("The model class to instantiate is selected based on the "),Mue=a("code"),Err=o("model_type"),Crr=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),yrr=o("pretrained_model_name_or_path"),Lrr=o(":"),xrr=l(),yd=a("ul"),mT=a("li"),wue=a("strong"),$rr=o("deit"),krr=o(" \u2014 "),cz=a("a"),Srr=o("DeiTForMaskedImageModeling"),Rrr=o(" (DeiT model)"),Prr=l(),gT=a("li"),Aue=a("strong"),Brr=o("swin"),Irr=o(" \u2014 "),fz=a("a"),qrr=o("SwinForMaskedImageModeling"),Nrr=o(" (Swin model)"),jrr=l(),hT=a("li"),yue=a("strong"),Drr=o("vit"),Grr=o(" \u2014 "),mz=a("a"),Orr=o("ViTForMaskedImageModeling"),Vrr=o(" (ViT model)"),Xrr=l(),pT=a("p"),zrr=o("The model is set in evaluation mode by default using "),Lue=a("code"),Wrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),Hrr=o("model.train()"),Urr=l(),F(_T.$$.fragment),eNe=l(),Ld=a("h2"),uT=a("a"),$ue=a("span"),F(xy.$$.fragment),Jrr=l(),kue=a("span"),Yrr=o("AutoModelForObjectDetection"),oNe=l(),Qo=a("div"),F($y.$$.fragment),Krr=l(),xd=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gz=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),hz=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),ky=a("p"),ntr=o("This class cannot be instantiated directly using "),Sue=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),Et=a("div"),F(Sy.$$.fragment),dtr=l(),Rue=a("p"),ctr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ftr=l(),$d=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),ptr=o("from_pretrained()"),_tr=o(" to load the model weights."),utr=l(),F(bT.$$.fragment),btr=l(),_o=a("div"),F(Ry.$$.fragment),vtr=l(),Bue=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ttr=l(),Qa=a("p"),Mtr=o("The model class to instantiate is selected based on the "),Iue=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(":"),xtr=l(),Py=a("ul"),vT=a("li"),jue=a("strong"),$tr=o("detr"),ktr=o(" \u2014 "),_z=a("a"),Str=o("DetrForObjectDetection"),Rtr=o(" (DETR model)"),Ptr=l(),FT=a("li"),Due=a("strong"),Btr=o("yolos"),Itr=o(" \u2014 "),uz=a("a"),qtr=o("YolosForObjectDetection"),Ntr=o(" (YOLOS model)"),jtr=l(),TT=a("p"),Dtr=o("The model is set in evaluation mode by default using "),Gue=a("code"),Gtr=o("model.eval()"),Otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),Vtr=o("model.train()"),Xtr=l(),F(MT.$$.fragment),rNe=l(),kd=a("h2"),ET=a("a"),Vue=a("span"),F(By.$$.fragment),ztr=l(),Xue=a("span"),Wtr=o("AutoModelForImageSegmentation"),tNe=l(),Ho=a("div"),F(Iy.$$.fragment),Qtr=l(),Sd=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bz=a("a"),Utr=o("from_pretrained()"),Jtr=o(" class method or the "),vz=a("a"),Ytr=o("from_config()"),Ktr=o(` class
method.`),Ztr=l(),qy=a("p"),ear=o("This class cannot be instantiated directly using "),zue=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),Ct=a("div"),F(Ny.$$.fragment),aar=l(),Wue=a("p"),nar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sar=l(),Rd=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),car=o("from_pretrained()"),far=o(" to load the model weights."),mar=l(),F(CT.$$.fragment),gar=l(),uo=a("div"),F(jy.$$.fragment),har=l(),Hue=a("p"),par=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_ar=l(),Ha=a("p"),uar=o("The model class to instantiate is selected based on the "),Uue=a("code"),bar=o("model_type"),Far=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(":"),war=l(),Kue=a("ul"),wT=a("li"),Zue=a("strong"),Aar=o("detr"),yar=o(" \u2014 "),Tz=a("a"),Lar=o("DetrForSegmentation"),xar=o(" (DETR model)"),$ar=l(),AT=a("p"),kar=o("The model is set in evaluation mode by default using "),e1e=a("code"),Sar=o("model.eval()"),Rar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),Par=o("model.train()"),Bar=l(),F(yT.$$.fragment),aNe=l(),Pd=a("h2"),LT=a("a"),r1e=a("span"),F(Dy.$$.fragment),Iar=l(),t1e=a("span"),qar=o("AutoModelForSemanticSegmentation"),nNe=l(),Uo=a("div"),F(Gy.$$.fragment),Nar=l(),Bd=a("p"),jar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mz=a("a"),Dar=o("from_pretrained()"),Gar=o(" class method or the "),Ez=a("a"),Oar=o("from_config()"),Var=o(` class
method.`),Xar=l(),Oy=a("p"),zar=o("This class cannot be instantiated directly using "),a1e=a("code"),War=o("__init__()"),Qar=o(" (throws an error)."),Har=l(),wt=a("div"),F(Vy.$$.fragment),Uar=l(),n1e=a("p"),Jar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Yar=l(),Id=a("p"),Kar=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Zar=o("not"),enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),onr=o("from_pretrained()"),rnr=o(" to load the model weights."),tnr=l(),F(xT.$$.fragment),anr=l(),bo=a("div"),F(Xy.$$.fragment),nnr=l(),l1e=a("p"),snr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lnr=l(),Ua=a("p"),inr=o("The model class to instantiate is selected based on the "),i1e=a("code"),dnr=o("model_type"),cnr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),fnr=o("pretrained_model_name_or_path"),mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(":"),pnr=l(),Ja=a("ul"),$T=a("li"),f1e=a("strong"),_nr=o("beit"),unr=o(" \u2014 "),wz=a("a"),bnr=o("BeitForSemanticSegmentation"),vnr=o(" (BEiT model)"),Fnr=l(),kT=a("li"),m1e=a("strong"),Tnr=o("data2vec-vision"),Mnr=o(" \u2014 "),Az=a("a"),Enr=o("Data2VecVisionForSemanticSegmentation"),Cnr=o(" (Data2VecVision model)"),wnr=l(),ST=a("li"),g1e=a("strong"),Anr=o("dpt"),ynr=o(" \u2014 "),yz=a("a"),Lnr=o("DPTForSemanticSegmentation"),xnr=o(" (DPT model)"),$nr=l(),RT=a("li"),h1e=a("strong"),knr=o("segformer"),Snr=o(" \u2014 "),Lz=a("a"),Rnr=o("SegformerForSemanticSegmentation"),Pnr=o(" (SegFormer model)"),Bnr=l(),PT=a("p"),Inr=o("The model is set in evaluation mode by default using "),p1e=a("code"),qnr=o("model.eval()"),Nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_1e=a("code"),jnr=o("model.train()"),Dnr=l(),F(BT.$$.fragment),sNe=l(),qd=a("h2"),IT=a("a"),u1e=a("span"),F(zy.$$.fragment),Gnr=l(),b1e=a("span"),Onr=o("AutoModelForInstanceSegmentation"),lNe=l(),Jo=a("div"),F(Wy.$$.fragment),Vnr=l(),Nd=a("p"),Xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xz=a("a"),znr=o("from_pretrained()"),Wnr=o(" class method or the "),$z=a("a"),Qnr=o("from_config()"),Hnr=o(` class
method.`),Unr=l(),Qy=a("p"),Jnr=o("This class cannot be instantiated directly using "),v1e=a("code"),Ynr=o("__init__()"),Knr=o(" (throws an error)."),Znr=l(),At=a("div"),F(Hy.$$.fragment),esr=l(),F1e=a("p"),osr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rsr=l(),jd=a("p"),tsr=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),asr=o("not"),nsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),ssr=o("from_pretrained()"),lsr=o(" to load the model weights."),isr=l(),F(qT.$$.fragment),dsr=l(),vo=a("div"),F(Uy.$$.fragment),csr=l(),M1e=a("p"),fsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),msr=l(),Ya=a("p"),gsr=o("The model class to instantiate is selected based on the "),E1e=a("code"),hsr=o("model_type"),psr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),_sr=o("pretrained_model_name_or_path"),usr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),bsr=o("pretrained_model_name_or_path"),vsr=o(":"),Fsr=l(),A1e=a("ul"),NT=a("li"),y1e=a("strong"),Tsr=o("maskformer"),Msr=o(" \u2014 "),Sz=a("a"),Esr=o("MaskFormerForInstanceSegmentation"),Csr=o(" (MaskFormer model)"),wsr=l(),jT=a("p"),Asr=o("The model is set in evaluation mode by default using "),L1e=a("code"),ysr=o("model.eval()"),Lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=a("code"),xsr=o("model.train()"),$sr=l(),F(DT.$$.fragment),iNe=l(),Dd=a("h2"),GT=a("a"),$1e=a("span"),F(Jy.$$.fragment),ksr=l(),k1e=a("span"),Ssr=o("TFAutoModel"),dNe=l(),Yo=a("div"),F(Yy.$$.fragment),Rsr=l(),Gd=a("p"),Psr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rz=a("a"),Bsr=o("from_pretrained()"),Isr=o(" class method or the "),Pz=a("a"),qsr=o("from_config()"),Nsr=o(` class
method.`),jsr=l(),Ky=a("p"),Dsr=o("This class cannot be instantiated directly using "),S1e=a("code"),Gsr=o("__init__()"),Osr=o(" (throws an error)."),Vsr=l(),yt=a("div"),F(Zy.$$.fragment),Xsr=l(),R1e=a("p"),zsr=o("Instantiates one of the base model classes of the library from a configuration."),Wsr=l(),Od=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Hsr=o("not"),Usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" to load the model weights."),Ksr=l(),F(OT.$$.fragment),Zsr=l(),wr=a("div"),F(eL.$$.fragment),elr=l(),B1e=a("p"),olr=o("Instantiate one of the base model classes of the library from a pretrained model."),rlr=l(),Ka=a("p"),tlr=o("The model class to instantiate is selected based on the "),I1e=a("code"),alr=o("model_type"),nlr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(":"),clr=l(),N=a("ul"),VT=a("li"),j1e=a("strong"),flr=o("albert"),mlr=o(" \u2014 "),Iz=a("a"),glr=o("TFAlbertModel"),hlr=o(" (ALBERT model)"),plr=l(),XT=a("li"),D1e=a("strong"),_lr=o("bart"),ulr=o(" \u2014 "),qz=a("a"),blr=o("TFBartModel"),vlr=o(" (BART model)"),Flr=l(),zT=a("li"),G1e=a("strong"),Tlr=o("bert"),Mlr=o(" \u2014 "),Nz=a("a"),Elr=o("TFBertModel"),Clr=o(" (BERT model)"),wlr=l(),WT=a("li"),O1e=a("strong"),Alr=o("blenderbot"),ylr=o(" \u2014 "),jz=a("a"),Llr=o("TFBlenderbotModel"),xlr=o(" (Blenderbot model)"),$lr=l(),QT=a("li"),V1e=a("strong"),klr=o("blenderbot-small"),Slr=o(" \u2014 "),Dz=a("a"),Rlr=o("TFBlenderbotSmallModel"),Plr=o(" (BlenderbotSmall model)"),Blr=l(),HT=a("li"),X1e=a("strong"),Ilr=o("camembert"),qlr=o(" \u2014 "),Gz=a("a"),Nlr=o("TFCamembertModel"),jlr=o(" (CamemBERT model)"),Dlr=l(),UT=a("li"),z1e=a("strong"),Glr=o("clip"),Olr=o(" \u2014 "),Oz=a("a"),Vlr=o("TFCLIPModel"),Xlr=o(" (CLIP model)"),zlr=l(),JT=a("li"),W1e=a("strong"),Wlr=o("convbert"),Qlr=o(" \u2014 "),Vz=a("a"),Hlr=o("TFConvBertModel"),Ulr=o(" (ConvBERT model)"),Jlr=l(),YT=a("li"),Q1e=a("strong"),Ylr=o("convnext"),Klr=o(" \u2014 "),Xz=a("a"),Zlr=o("TFConvNextModel"),eir=o(" (ConvNext model)"),oir=l(),KT=a("li"),H1e=a("strong"),rir=o("ctrl"),tir=o(" \u2014 "),zz=a("a"),air=o("TFCTRLModel"),nir=o(" (CTRL model)"),sir=l(),ZT=a("li"),U1e=a("strong"),lir=o("data2vec-vision"),iir=o(" \u2014 "),Wz=a("a"),dir=o("TFData2VecVisionModel"),cir=o(" (Data2VecVision model)"),fir=l(),e8=a("li"),J1e=a("strong"),mir=o("deberta"),gir=o(" \u2014 "),Qz=a("a"),hir=o("TFDebertaModel"),pir=o(" (DeBERTa model)"),_ir=l(),o8=a("li"),Y1e=a("strong"),uir=o("deberta-v2"),bir=o(" \u2014 "),Hz=a("a"),vir=o("TFDebertaV2Model"),Fir=o(" (DeBERTa-v2 model)"),Tir=l(),r8=a("li"),K1e=a("strong"),Mir=o("distilbert"),Eir=o(" \u2014 "),Uz=a("a"),Cir=o("TFDistilBertModel"),wir=o(" (DistilBERT model)"),Air=l(),t8=a("li"),Z1e=a("strong"),yir=o("dpr"),Lir=o(" \u2014 "),Jz=a("a"),xir=o("TFDPRQuestionEncoder"),$ir=o(" (DPR model)"),kir=l(),a8=a("li"),ebe=a("strong"),Sir=o("electra"),Rir=o(" \u2014 "),Yz=a("a"),Pir=o("TFElectraModel"),Bir=o(" (ELECTRA model)"),Iir=l(),n8=a("li"),obe=a("strong"),qir=o("flaubert"),Nir=o(" \u2014 "),Kz=a("a"),jir=o("TFFlaubertModel"),Dir=o(" (FlauBERT model)"),Gir=l(),Bs=a("li"),rbe=a("strong"),Oir=o("funnel"),Vir=o(" \u2014 "),Zz=a("a"),Xir=o("TFFunnelModel"),zir=o(" or "),eW=a("a"),Wir=o("TFFunnelBaseModel"),Qir=o(" (Funnel Transformer model)"),Hir=l(),s8=a("li"),tbe=a("strong"),Uir=o("gpt2"),Jir=o(" \u2014 "),oW=a("a"),Yir=o("TFGPT2Model"),Kir=o(" (OpenAI GPT-2 model)"),Zir=l(),l8=a("li"),abe=a("strong"),edr=o("gptj"),odr=o(" \u2014 "),rW=a("a"),rdr=o("TFGPTJModel"),tdr=o(" (GPT-J model)"),adr=l(),i8=a("li"),nbe=a("strong"),ndr=o("hubert"),sdr=o(" \u2014 "),tW=a("a"),ldr=o("TFHubertModel"),idr=o(" (Hubert model)"),ddr=l(),d8=a("li"),sbe=a("strong"),cdr=o("layoutlm"),fdr=o(" \u2014 "),aW=a("a"),mdr=o("TFLayoutLMModel"),gdr=o(" (LayoutLM model)"),hdr=l(),c8=a("li"),lbe=a("strong"),pdr=o("led"),_dr=o(" \u2014 "),nW=a("a"),udr=o("TFLEDModel"),bdr=o(" (LED model)"),vdr=l(),f8=a("li"),ibe=a("strong"),Fdr=o("longformer"),Tdr=o(" \u2014 "),sW=a("a"),Mdr=o("TFLongformerModel"),Edr=o(" (Longformer model)"),Cdr=l(),m8=a("li"),dbe=a("strong"),wdr=o("lxmert"),Adr=o(" \u2014 "),lW=a("a"),ydr=o("TFLxmertModel"),Ldr=o(" (LXMERT model)"),xdr=l(),g8=a("li"),cbe=a("strong"),$dr=o("marian"),kdr=o(" \u2014 "),iW=a("a"),Sdr=o("TFMarianModel"),Rdr=o(" (Marian model)"),Pdr=l(),h8=a("li"),fbe=a("strong"),Bdr=o("mbart"),Idr=o(" \u2014 "),dW=a("a"),qdr=o("TFMBartModel"),Ndr=o(" (mBART model)"),jdr=l(),p8=a("li"),mbe=a("strong"),Ddr=o("mobilebert"),Gdr=o(" \u2014 "),cW=a("a"),Odr=o("TFMobileBertModel"),Vdr=o(" (MobileBERT model)"),Xdr=l(),_8=a("li"),gbe=a("strong"),zdr=o("mpnet"),Wdr=o(" \u2014 "),fW=a("a"),Qdr=o("TFMPNetModel"),Hdr=o(" (MPNet model)"),Udr=l(),u8=a("li"),hbe=a("strong"),Jdr=o("mt5"),Ydr=o(" \u2014 "),mW=a("a"),Kdr=o("TFMT5Model"),Zdr=o(" (mT5 model)"),ecr=l(),b8=a("li"),pbe=a("strong"),ocr=o("openai-gpt"),rcr=o(" \u2014 "),gW=a("a"),tcr=o("TFOpenAIGPTModel"),acr=o(" (OpenAI GPT model)"),ncr=l(),v8=a("li"),_be=a("strong"),scr=o("pegasus"),lcr=o(" \u2014 "),hW=a("a"),icr=o("TFPegasusModel"),dcr=o(" (Pegasus model)"),ccr=l(),F8=a("li"),ube=a("strong"),fcr=o("rembert"),mcr=o(" \u2014 "),pW=a("a"),gcr=o("TFRemBertModel"),hcr=o(" (RemBERT model)"),pcr=l(),T8=a("li"),bbe=a("strong"),_cr=o("roberta"),ucr=o(" \u2014 "),_W=a("a"),bcr=o("TFRobertaModel"),vcr=o(" (RoBERTa model)"),Fcr=l(),M8=a("li"),vbe=a("strong"),Tcr=o("roformer"),Mcr=o(" \u2014 "),uW=a("a"),Ecr=o("TFRoFormerModel"),Ccr=o(" (RoFormer model)"),wcr=l(),E8=a("li"),Fbe=a("strong"),Acr=o("speech_to_text"),ycr=o(" \u2014 "),bW=a("a"),Lcr=o("TFSpeech2TextModel"),xcr=o(" (Speech2Text model)"),$cr=l(),C8=a("li"),Tbe=a("strong"),kcr=o("swin"),Scr=o(" \u2014 "),vW=a("a"),Rcr=o("TFSwinModel"),Pcr=o(" (Swin model)"),Bcr=l(),w8=a("li"),Mbe=a("strong"),Icr=o("t5"),qcr=o(" \u2014 "),FW=a("a"),Ncr=o("TFT5Model"),jcr=o(" (T5 model)"),Dcr=l(),A8=a("li"),Ebe=a("strong"),Gcr=o("tapas"),Ocr=o(" \u2014 "),TW=a("a"),Vcr=o("TFTapasModel"),Xcr=o(" (TAPAS model)"),zcr=l(),y8=a("li"),Cbe=a("strong"),Wcr=o("transfo-xl"),Qcr=o(" \u2014 "),MW=a("a"),Hcr=o("TFTransfoXLModel"),Ucr=o(" (Transformer-XL model)"),Jcr=l(),L8=a("li"),wbe=a("strong"),Ycr=o("vit"),Kcr=o(" \u2014 "),EW=a("a"),Zcr=o("TFViTModel"),efr=o(" (ViT model)"),ofr=l(),x8=a("li"),Abe=a("strong"),rfr=o("vit_mae"),tfr=o(" \u2014 "),CW=a("a"),afr=o("TFViTMAEModel"),nfr=o(" (ViTMAE model)"),sfr=l(),$8=a("li"),ybe=a("strong"),lfr=o("wav2vec2"),ifr=o(" \u2014 "),wW=a("a"),dfr=o("TFWav2Vec2Model"),cfr=o(" (Wav2Vec2 model)"),ffr=l(),k8=a("li"),Lbe=a("strong"),mfr=o("xlm"),gfr=o(" \u2014 "),AW=a("a"),hfr=o("TFXLMModel"),pfr=o(" (XLM model)"),_fr=l(),S8=a("li"),xbe=a("strong"),ufr=o("xlm-roberta"),bfr=o(" \u2014 "),yW=a("a"),vfr=o("TFXLMRobertaModel"),Ffr=o(" (XLM-RoBERTa model)"),Tfr=l(),R8=a("li"),$be=a("strong"),Mfr=o("xlnet"),Efr=o(" \u2014 "),LW=a("a"),Cfr=o("TFXLNetModel"),wfr=o(" (XLNet model)"),Afr=l(),F(P8.$$.fragment),cNe=l(),Vd=a("h2"),B8=a("a"),kbe=a("span"),F(oL.$$.fragment),yfr=l(),Sbe=a("span"),Lfr=o("TFAutoModelForPreTraining"),fNe=l(),Ko=a("div"),F(rL.$$.fragment),xfr=l(),Xd=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xW=a("a"),kfr=o("from_pretrained()"),Sfr=o(" class method or the "),$W=a("a"),Rfr=o("from_config()"),Pfr=o(` class
method.`),Bfr=l(),tL=a("p"),Ifr=o("This class cannot be instantiated directly using "),Rbe=a("code"),qfr=o("__init__()"),Nfr=o(" (throws an error)."),jfr=l(),Lt=a("div"),F(aL.$$.fragment),Dfr=l(),Pbe=a("p"),Gfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ofr=l(),zd=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),Xfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),Wfr=o("from_pretrained()"),Qfr=o(" to load the model weights."),Hfr=l(),F(I8.$$.fragment),Ufr=l(),Ar=a("div"),F(nL.$$.fragment),Jfr=l(),Ibe=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kfr=l(),Za=a("p"),Zfr=o("The model class to instantiate is selected based on the "),qbe=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),se=a("ul"),q8=a("li"),Dbe=a("strong"),lmr=o("albert"),imr=o(" \u2014 "),SW=a("a"),dmr=o("TFAlbertForPreTraining"),cmr=o(" (ALBERT model)"),fmr=l(),N8=a("li"),Gbe=a("strong"),mmr=o("bart"),gmr=o(" \u2014 "),RW=a("a"),hmr=o("TFBartForConditionalGeneration"),pmr=o(" (BART model)"),_mr=l(),j8=a("li"),Obe=a("strong"),umr=o("bert"),bmr=o(" \u2014 "),PW=a("a"),vmr=o("TFBertForPreTraining"),Fmr=o(" (BERT model)"),Tmr=l(),D8=a("li"),Vbe=a("strong"),Mmr=o("camembert"),Emr=o(" \u2014 "),BW=a("a"),Cmr=o("TFCamembertForMaskedLM"),wmr=o(" (CamemBERT model)"),Amr=l(),G8=a("li"),Xbe=a("strong"),ymr=o("ctrl"),Lmr=o(" \u2014 "),IW=a("a"),xmr=o("TFCTRLLMHeadModel"),$mr=o(" (CTRL model)"),kmr=l(),O8=a("li"),zbe=a("strong"),Smr=o("distilbert"),Rmr=o(" \u2014 "),qW=a("a"),Pmr=o("TFDistilBertForMaskedLM"),Bmr=o(" (DistilBERT model)"),Imr=l(),V8=a("li"),Wbe=a("strong"),qmr=o("electra"),Nmr=o(" \u2014 "),NW=a("a"),jmr=o("TFElectraForPreTraining"),Dmr=o(" (ELECTRA model)"),Gmr=l(),X8=a("li"),Qbe=a("strong"),Omr=o("flaubert"),Vmr=o(" \u2014 "),jW=a("a"),Xmr=o("TFFlaubertWithLMHeadModel"),zmr=o(" (FlauBERT model)"),Wmr=l(),z8=a("li"),Hbe=a("strong"),Qmr=o("funnel"),Hmr=o(" \u2014 "),DW=a("a"),Umr=o("TFFunnelForPreTraining"),Jmr=o(" (Funnel Transformer model)"),Ymr=l(),W8=a("li"),Ube=a("strong"),Kmr=o("gpt2"),Zmr=o(" \u2014 "),GW=a("a"),egr=o("TFGPT2LMHeadModel"),ogr=o(" (OpenAI GPT-2 model)"),rgr=l(),Q8=a("li"),Jbe=a("strong"),tgr=o("layoutlm"),agr=o(" \u2014 "),OW=a("a"),ngr=o("TFLayoutLMForMaskedLM"),sgr=o(" (LayoutLM model)"),lgr=l(),H8=a("li"),Ybe=a("strong"),igr=o("lxmert"),dgr=o(" \u2014 "),VW=a("a"),cgr=o("TFLxmertForPreTraining"),fgr=o(" (LXMERT model)"),mgr=l(),U8=a("li"),Kbe=a("strong"),ggr=o("mobilebert"),hgr=o(" \u2014 "),XW=a("a"),pgr=o("TFMobileBertForPreTraining"),_gr=o(" (MobileBERT model)"),ugr=l(),J8=a("li"),Zbe=a("strong"),bgr=o("mpnet"),vgr=o(" \u2014 "),zW=a("a"),Fgr=o("TFMPNetForMaskedLM"),Tgr=o(" (MPNet model)"),Mgr=l(),Y8=a("li"),e2e=a("strong"),Egr=o("openai-gpt"),Cgr=o(" \u2014 "),WW=a("a"),wgr=o("TFOpenAIGPTLMHeadModel"),Agr=o(" (OpenAI GPT model)"),ygr=l(),K8=a("li"),o2e=a("strong"),Lgr=o("roberta"),xgr=o(" \u2014 "),QW=a("a"),$gr=o("TFRobertaForMaskedLM"),kgr=o(" (RoBERTa model)"),Sgr=l(),Z8=a("li"),r2e=a("strong"),Rgr=o("t5"),Pgr=o(" \u2014 "),HW=a("a"),Bgr=o("TFT5ForConditionalGeneration"),Igr=o(" (T5 model)"),qgr=l(),e7=a("li"),t2e=a("strong"),Ngr=o("tapas"),jgr=o(" \u2014 "),UW=a("a"),Dgr=o("TFTapasForMaskedLM"),Ggr=o(" (TAPAS model)"),Ogr=l(),o7=a("li"),a2e=a("strong"),Vgr=o("transfo-xl"),Xgr=o(" \u2014 "),JW=a("a"),zgr=o("TFTransfoXLLMHeadModel"),Wgr=o(" (Transformer-XL model)"),Qgr=l(),r7=a("li"),n2e=a("strong"),Hgr=o("vit_mae"),Ugr=o(" \u2014 "),YW=a("a"),Jgr=o("TFViTMAEForPreTraining"),Ygr=o(" (ViTMAE model)"),Kgr=l(),t7=a("li"),s2e=a("strong"),Zgr=o("xlm"),ehr=o(" \u2014 "),KW=a("a"),ohr=o("TFXLMWithLMHeadModel"),rhr=o(" (XLM model)"),thr=l(),a7=a("li"),l2e=a("strong"),ahr=o("xlm-roberta"),nhr=o(" \u2014 "),ZW=a("a"),shr=o("TFXLMRobertaForMaskedLM"),lhr=o(" (XLM-RoBERTa model)"),ihr=l(),n7=a("li"),i2e=a("strong"),dhr=o("xlnet"),chr=o(" \u2014 "),eQ=a("a"),fhr=o("TFXLNetLMHeadModel"),mhr=o(" (XLNet model)"),ghr=l(),F(s7.$$.fragment),mNe=l(),Wd=a("h2"),l7=a("a"),d2e=a("span"),F(sL.$$.fragment),hhr=l(),c2e=a("span"),phr=o("TFAutoModelForCausalLM"),gNe=l(),Zo=a("div"),F(lL.$$.fragment),_hr=l(),Qd=a("p"),uhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oQ=a("a"),bhr=o("from_pretrained()"),vhr=o(" class method or the "),rQ=a("a"),Fhr=o("from_config()"),Thr=o(` class
method.`),Mhr=l(),iL=a("p"),Ehr=o("This class cannot be instantiated directly using "),f2e=a("code"),Chr=o("__init__()"),whr=o(" (throws an error)."),Ahr=l(),xt=a("div"),F(dL.$$.fragment),yhr=l(),m2e=a("p"),Lhr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xhr=l(),Hd=a("p"),$hr=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Rhr=o("from_pretrained()"),Phr=o(" to load the model weights."),Bhr=l(),F(i7.$$.fragment),Ihr=l(),yr=a("div"),F(cL.$$.fragment),qhr=l(),h2e=a("p"),Nhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jhr=l(),en=a("p"),Dhr=o("The model class to instantiate is selected based on the "),p2e=a("code"),Ghr=o("model_type"),Ohr=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),zhr=o("pretrained_model_name_or_path"),Whr=o(":"),Qhr=l(),Me=a("ul"),d7=a("li"),b2e=a("strong"),Hhr=o("bert"),Uhr=o(" \u2014 "),aQ=a("a"),Jhr=o("TFBertLMHeadModel"),Yhr=o(" (BERT model)"),Khr=l(),c7=a("li"),v2e=a("strong"),Zhr=o("camembert"),epr=o(" \u2014 "),nQ=a("a"),opr=o("TFCamembertForCausalLM"),rpr=o(" (CamemBERT model)"),tpr=l(),f7=a("li"),F2e=a("strong"),apr=o("ctrl"),npr=o(" \u2014 "),sQ=a("a"),spr=o("TFCTRLLMHeadModel"),lpr=o(" (CTRL model)"),ipr=l(),m7=a("li"),T2e=a("strong"),dpr=o("gpt2"),cpr=o(" \u2014 "),lQ=a("a"),fpr=o("TFGPT2LMHeadModel"),mpr=o(" (OpenAI GPT-2 model)"),gpr=l(),g7=a("li"),M2e=a("strong"),hpr=o("gptj"),ppr=o(" \u2014 "),iQ=a("a"),_pr=o("TFGPTJForCausalLM"),upr=o(" (GPT-J model)"),bpr=l(),h7=a("li"),E2e=a("strong"),vpr=o("openai-gpt"),Fpr=o(" \u2014 "),dQ=a("a"),Tpr=o("TFOpenAIGPTLMHeadModel"),Mpr=o(" (OpenAI GPT model)"),Epr=l(),p7=a("li"),C2e=a("strong"),Cpr=o("rembert"),wpr=o(" \u2014 "),cQ=a("a"),Apr=o("TFRemBertForCausalLM"),ypr=o(" (RemBERT model)"),Lpr=l(),_7=a("li"),w2e=a("strong"),xpr=o("roberta"),$pr=o(" \u2014 "),fQ=a("a"),kpr=o("TFRobertaForCausalLM"),Spr=o(" (RoBERTa model)"),Rpr=l(),u7=a("li"),A2e=a("strong"),Ppr=o("roformer"),Bpr=o(" \u2014 "),mQ=a("a"),Ipr=o("TFRoFormerForCausalLM"),qpr=o(" (RoFormer model)"),Npr=l(),b7=a("li"),y2e=a("strong"),jpr=o("transfo-xl"),Dpr=o(" \u2014 "),gQ=a("a"),Gpr=o("TFTransfoXLLMHeadModel"),Opr=o(" (Transformer-XL model)"),Vpr=l(),v7=a("li"),L2e=a("strong"),Xpr=o("xlm"),zpr=o(" \u2014 "),hQ=a("a"),Wpr=o("TFXLMWithLMHeadModel"),Qpr=o(" (XLM model)"),Hpr=l(),F7=a("li"),x2e=a("strong"),Upr=o("xlnet"),Jpr=o(" \u2014 "),pQ=a("a"),Ypr=o("TFXLNetLMHeadModel"),Kpr=o(" (XLNet model)"),Zpr=l(),F(T7.$$.fragment),hNe=l(),Ud=a("h2"),M7=a("a"),$2e=a("span"),F(fL.$$.fragment),e_r=l(),k2e=a("span"),o_r=o("TFAutoModelForImageClassification"),pNe=l(),er=a("div"),F(mL.$$.fragment),r_r=l(),Jd=a("p"),t_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=a("a"),a_r=o("from_pretrained()"),n_r=o(" class method or the "),uQ=a("a"),s_r=o("from_config()"),l_r=o(` class
method.`),i_r=l(),gL=a("p"),d_r=o("This class cannot be instantiated directly using "),S2e=a("code"),c_r=o("__init__()"),f_r=o(" (throws an error)."),m_r=l(),$t=a("div"),F(hL.$$.fragment),g_r=l(),R2e=a("p"),h_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),p_r=l(),Yd=a("p"),__r=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),u_r=o("not"),b_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),v_r=o("from_pretrained()"),F_r=o(" to load the model weights."),T_r=l(),F(E7.$$.fragment),M_r=l(),Lr=a("div"),F(pL.$$.fragment),E_r=l(),B2e=a("p"),C_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w_r=l(),on=a("p"),A_r=o("The model class to instantiate is selected based on the "),I2e=a("code"),y_r=o("model_type"),L_r=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),k_r=o("pretrained_model_name_or_path"),S_r=o(":"),R_r=l(),rn=a("ul"),C7=a("li"),j2e=a("strong"),P_r=o("convnext"),B_r=o(" \u2014 "),vQ=a("a"),I_r=o("TFConvNextForImageClassification"),q_r=o(" (ConvNext model)"),N_r=l(),w7=a("li"),D2e=a("strong"),j_r=o("data2vec-vision"),D_r=o(" \u2014 "),FQ=a("a"),G_r=o("TFData2VecVisionForImageClassification"),O_r=o(" (Data2VecVision model)"),V_r=l(),A7=a("li"),G2e=a("strong"),X_r=o("swin"),z_r=o(" \u2014 "),TQ=a("a"),W_r=o("TFSwinForImageClassification"),Q_r=o(" (Swin model)"),H_r=l(),y7=a("li"),O2e=a("strong"),U_r=o("vit"),J_r=o(" \u2014 "),MQ=a("a"),Y_r=o("TFViTForImageClassification"),K_r=o(" (ViT model)"),Z_r=l(),F(L7.$$.fragment),_Ne=l(),Kd=a("h2"),x7=a("a"),V2e=a("span"),F(_L.$$.fragment),eur=l(),X2e=a("span"),our=o("TFAutoModelForMaskedLM"),uNe=l(),or=a("div"),F(uL.$$.fragment),rur=l(),Zd=a("p"),tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=a("a"),aur=o("from_pretrained()"),nur=o(" class method or the "),CQ=a("a"),sur=o("from_config()"),lur=o(` class
method.`),iur=l(),bL=a("p"),dur=o("This class cannot be instantiated directly using "),z2e=a("code"),cur=o("__init__()"),fur=o(" (throws an error)."),mur=l(),kt=a("div"),F(vL.$$.fragment),gur=l(),W2e=a("p"),hur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pur=l(),ec=a("p"),_ur=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),uur=o("not"),bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),vur=o("from_pretrained()"),Fur=o(" to load the model weights."),Tur=l(),F($7.$$.fragment),Mur=l(),xr=a("div"),F(FL.$$.fragment),Eur=l(),H2e=a("p"),Cur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wur=l(),tn=a("p"),Aur=o("The model class to instantiate is selected based on the "),U2e=a("code"),yur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(":"),Rur=l(),ie=a("ul"),k7=a("li"),K2e=a("strong"),Pur=o("albert"),Bur=o(" \u2014 "),AQ=a("a"),Iur=o("TFAlbertForMaskedLM"),qur=o(" (ALBERT model)"),Nur=l(),S7=a("li"),Z2e=a("strong"),jur=o("bert"),Dur=o(" \u2014 "),yQ=a("a"),Gur=o("TFBertForMaskedLM"),Our=o(" (BERT model)"),Vur=l(),R7=a("li"),eve=a("strong"),Xur=o("camembert"),zur=o(" \u2014 "),LQ=a("a"),Wur=o("TFCamembertForMaskedLM"),Qur=o(" (CamemBERT model)"),Hur=l(),P7=a("li"),ove=a("strong"),Uur=o("convbert"),Jur=o(" \u2014 "),xQ=a("a"),Yur=o("TFConvBertForMaskedLM"),Kur=o(" (ConvBERT model)"),Zur=l(),B7=a("li"),rve=a("strong"),e1r=o("deberta"),o1r=o(" \u2014 "),$Q=a("a"),r1r=o("TFDebertaForMaskedLM"),t1r=o(" (DeBERTa model)"),a1r=l(),I7=a("li"),tve=a("strong"),n1r=o("deberta-v2"),s1r=o(" \u2014 "),kQ=a("a"),l1r=o("TFDebertaV2ForMaskedLM"),i1r=o(" (DeBERTa-v2 model)"),d1r=l(),q7=a("li"),ave=a("strong"),c1r=o("distilbert"),f1r=o(" \u2014 "),SQ=a("a"),m1r=o("TFDistilBertForMaskedLM"),g1r=o(" (DistilBERT model)"),h1r=l(),N7=a("li"),nve=a("strong"),p1r=o("electra"),_1r=o(" \u2014 "),RQ=a("a"),u1r=o("TFElectraForMaskedLM"),b1r=o(" (ELECTRA model)"),v1r=l(),j7=a("li"),sve=a("strong"),F1r=o("flaubert"),T1r=o(" \u2014 "),PQ=a("a"),M1r=o("TFFlaubertWithLMHeadModel"),E1r=o(" (FlauBERT model)"),C1r=l(),D7=a("li"),lve=a("strong"),w1r=o("funnel"),A1r=o(" \u2014 "),BQ=a("a"),y1r=o("TFFunnelForMaskedLM"),L1r=o(" (Funnel Transformer model)"),x1r=l(),G7=a("li"),ive=a("strong"),$1r=o("layoutlm"),k1r=o(" \u2014 "),IQ=a("a"),S1r=o("TFLayoutLMForMaskedLM"),R1r=o(" (LayoutLM model)"),P1r=l(),O7=a("li"),dve=a("strong"),B1r=o("longformer"),I1r=o(" \u2014 "),qQ=a("a"),q1r=o("TFLongformerForMaskedLM"),N1r=o(" (Longformer model)"),j1r=l(),V7=a("li"),cve=a("strong"),D1r=o("mobilebert"),G1r=o(" \u2014 "),NQ=a("a"),O1r=o("TFMobileBertForMaskedLM"),V1r=o(" (MobileBERT model)"),X1r=l(),X7=a("li"),fve=a("strong"),z1r=o("mpnet"),W1r=o(" \u2014 "),jQ=a("a"),Q1r=o("TFMPNetForMaskedLM"),H1r=o(" (MPNet model)"),U1r=l(),z7=a("li"),mve=a("strong"),J1r=o("rembert"),Y1r=o(" \u2014 "),DQ=a("a"),K1r=o("TFRemBertForMaskedLM"),Z1r=o(" (RemBERT model)"),ebr=l(),W7=a("li"),gve=a("strong"),obr=o("roberta"),rbr=o(" \u2014 "),GQ=a("a"),tbr=o("TFRobertaForMaskedLM"),abr=o(" (RoBERTa model)"),nbr=l(),Q7=a("li"),hve=a("strong"),sbr=o("roformer"),lbr=o(" \u2014 "),OQ=a("a"),ibr=o("TFRoFormerForMaskedLM"),dbr=o(" (RoFormer model)"),cbr=l(),H7=a("li"),pve=a("strong"),fbr=o("tapas"),mbr=o(" \u2014 "),VQ=a("a"),gbr=o("TFTapasForMaskedLM"),hbr=o(" (TAPAS model)"),pbr=l(),U7=a("li"),_ve=a("strong"),_br=o("xlm"),ubr=o(" \u2014 "),XQ=a("a"),bbr=o("TFXLMWithLMHeadModel"),vbr=o(" (XLM model)"),Fbr=l(),J7=a("li"),uve=a("strong"),Tbr=o("xlm-roberta"),Mbr=o(" \u2014 "),zQ=a("a"),Ebr=o("TFXLMRobertaForMaskedLM"),Cbr=o(" (XLM-RoBERTa model)"),wbr=l(),F(Y7.$$.fragment),bNe=l(),oc=a("h2"),K7=a("a"),bve=a("span"),F(TL.$$.fragment),Abr=l(),vve=a("span"),ybr=o("TFAutoModelForSeq2SeqLM"),vNe=l(),rr=a("div"),F(ML.$$.fragment),Lbr=l(),rc=a("p"),xbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WQ=a("a"),$br=o("from_pretrained()"),kbr=o(" class method or the "),QQ=a("a"),Sbr=o("from_config()"),Rbr=o(` class
method.`),Pbr=l(),EL=a("p"),Bbr=o("This class cannot be instantiated directly using "),Fve=a("code"),Ibr=o("__init__()"),qbr=o(" (throws an error)."),Nbr=l(),St=a("div"),F(CL.$$.fragment),jbr=l(),Tve=a("p"),Dbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gbr=l(),tc=a("p"),Obr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),Vbr=o("not"),Xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),zbr=o("from_pretrained()"),Wbr=o(" to load the model weights."),Qbr=l(),F(Z7.$$.fragment),Hbr=l(),$r=a("div"),F(wL.$$.fragment),Ubr=l(),Eve=a("p"),Jbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ybr=l(),an=a("p"),Kbr=o("The model class to instantiate is selected based on the "),Cve=a("code"),Zbr=o("model_type"),e2r=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),t2r=o("pretrained_model_name_or_path"),a2r=o(":"),n2r=l(),ye=a("ul"),eM=a("li"),yve=a("strong"),s2r=o("bart"),l2r=o(" \u2014 "),UQ=a("a"),i2r=o("TFBartForConditionalGeneration"),d2r=o(" (BART model)"),c2r=l(),oM=a("li"),Lve=a("strong"),f2r=o("blenderbot"),m2r=o(" \u2014 "),JQ=a("a"),g2r=o("TFBlenderbotForConditionalGeneration"),h2r=o(" (Blenderbot model)"),p2r=l(),rM=a("li"),xve=a("strong"),_2r=o("blenderbot-small"),u2r=o(" \u2014 "),YQ=a("a"),b2r=o("TFBlenderbotSmallForConditionalGeneration"),v2r=o(" (BlenderbotSmall model)"),F2r=l(),tM=a("li"),$ve=a("strong"),T2r=o("encoder-decoder"),M2r=o(" \u2014 "),KQ=a("a"),E2r=o("TFEncoderDecoderModel"),C2r=o(" (Encoder decoder model)"),w2r=l(),aM=a("li"),kve=a("strong"),A2r=o("led"),y2r=o(" \u2014 "),ZQ=a("a"),L2r=o("TFLEDForConditionalGeneration"),x2r=o(" (LED model)"),$2r=l(),nM=a("li"),Sve=a("strong"),k2r=o("marian"),S2r=o(" \u2014 "),eH=a("a"),R2r=o("TFMarianMTModel"),P2r=o(" (Marian model)"),B2r=l(),sM=a("li"),Rve=a("strong"),I2r=o("mbart"),q2r=o(" \u2014 "),oH=a("a"),N2r=o("TFMBartForConditionalGeneration"),j2r=o(" (mBART model)"),D2r=l(),lM=a("li"),Pve=a("strong"),G2r=o("mt5"),O2r=o(" \u2014 "),rH=a("a"),V2r=o("TFMT5ForConditionalGeneration"),X2r=o(" (mT5 model)"),z2r=l(),iM=a("li"),Bve=a("strong"),W2r=o("pegasus"),Q2r=o(" \u2014 "),tH=a("a"),H2r=o("TFPegasusForConditionalGeneration"),U2r=o(" (Pegasus model)"),J2r=l(),dM=a("li"),Ive=a("strong"),Y2r=o("t5"),K2r=o(" \u2014 "),aH=a("a"),Z2r=o("TFT5ForConditionalGeneration"),evr=o(" (T5 model)"),ovr=l(),F(cM.$$.fragment),FNe=l(),ac=a("h2"),fM=a("a"),qve=a("span"),F(AL.$$.fragment),rvr=l(),Nve=a("span"),tvr=o("TFAutoModelForSequenceClassification"),TNe=l(),tr=a("div"),F(yL.$$.fragment),avr=l(),nc=a("p"),nvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=a("a"),svr=o("from_pretrained()"),lvr=o(" class method or the "),sH=a("a"),ivr=o("from_config()"),dvr=o(` class
method.`),cvr=l(),LL=a("p"),fvr=o("This class cannot be instantiated directly using "),jve=a("code"),mvr=o("__init__()"),gvr=o(" (throws an error)."),hvr=l(),Rt=a("div"),F(xL.$$.fragment),pvr=l(),Dve=a("p"),_vr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uvr=l(),sc=a("p"),bvr=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),vvr=o("not"),Fvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),Tvr=o("from_pretrained()"),Mvr=o(" to load the model weights."),Evr=l(),F(mM.$$.fragment),Cvr=l(),kr=a("div"),F($L.$$.fragment),wvr=l(),Ove=a("p"),Avr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yvr=l(),nn=a("p"),Lvr=o("The model class to instantiate is selected based on the "),Vve=a("code"),xvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),kvr=o("pretrained_model_name_or_path"),Svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),Rvr=o("pretrained_model_name_or_path"),Pvr=o(":"),Bvr=l(),oe=a("ul"),gM=a("li"),Wve=a("strong"),Ivr=o("albert"),qvr=o(" \u2014 "),iH=a("a"),Nvr=o("TFAlbertForSequenceClassification"),jvr=o(" (ALBERT model)"),Dvr=l(),hM=a("li"),Qve=a("strong"),Gvr=o("bert"),Ovr=o(" \u2014 "),dH=a("a"),Vvr=o("TFBertForSequenceClassification"),Xvr=o(" (BERT model)"),zvr=l(),pM=a("li"),Hve=a("strong"),Wvr=o("camembert"),Qvr=o(" \u2014 "),cH=a("a"),Hvr=o("TFCamembertForSequenceClassification"),Uvr=o(" (CamemBERT model)"),Jvr=l(),_M=a("li"),Uve=a("strong"),Yvr=o("convbert"),Kvr=o(" \u2014 "),fH=a("a"),Zvr=o("TFConvBertForSequenceClassification"),eFr=o(" (ConvBERT model)"),oFr=l(),uM=a("li"),Jve=a("strong"),rFr=o("ctrl"),tFr=o(" \u2014 "),mH=a("a"),aFr=o("TFCTRLForSequenceClassification"),nFr=o(" (CTRL model)"),sFr=l(),bM=a("li"),Yve=a("strong"),lFr=o("deberta"),iFr=o(" \u2014 "),gH=a("a"),dFr=o("TFDebertaForSequenceClassification"),cFr=o(" (DeBERTa model)"),fFr=l(),vM=a("li"),Kve=a("strong"),mFr=o("deberta-v2"),gFr=o(" \u2014 "),hH=a("a"),hFr=o("TFDebertaV2ForSequenceClassification"),pFr=o(" (DeBERTa-v2 model)"),_Fr=l(),FM=a("li"),Zve=a("strong"),uFr=o("distilbert"),bFr=o(" \u2014 "),pH=a("a"),vFr=o("TFDistilBertForSequenceClassification"),FFr=o(" (DistilBERT model)"),TFr=l(),TM=a("li"),eFe=a("strong"),MFr=o("electra"),EFr=o(" \u2014 "),_H=a("a"),CFr=o("TFElectraForSequenceClassification"),wFr=o(" (ELECTRA model)"),AFr=l(),MM=a("li"),oFe=a("strong"),yFr=o("flaubert"),LFr=o(" \u2014 "),uH=a("a"),xFr=o("TFFlaubertForSequenceClassification"),$Fr=o(" (FlauBERT model)"),kFr=l(),EM=a("li"),rFe=a("strong"),SFr=o("funnel"),RFr=o(" \u2014 "),bH=a("a"),PFr=o("TFFunnelForSequenceClassification"),BFr=o(" (Funnel Transformer model)"),IFr=l(),CM=a("li"),tFe=a("strong"),qFr=o("gpt2"),NFr=o(" \u2014 "),vH=a("a"),jFr=o("TFGPT2ForSequenceClassification"),DFr=o(" (OpenAI GPT-2 model)"),GFr=l(),wM=a("li"),aFe=a("strong"),OFr=o("gptj"),VFr=o(" \u2014 "),FH=a("a"),XFr=o("TFGPTJForSequenceClassification"),zFr=o(" (GPT-J model)"),WFr=l(),AM=a("li"),nFe=a("strong"),QFr=o("layoutlm"),HFr=o(" \u2014 "),TH=a("a"),UFr=o("TFLayoutLMForSequenceClassification"),JFr=o(" (LayoutLM model)"),YFr=l(),yM=a("li"),sFe=a("strong"),KFr=o("longformer"),ZFr=o(" \u2014 "),MH=a("a"),e6r=o("TFLongformerForSequenceClassification"),o6r=o(" (Longformer model)"),r6r=l(),LM=a("li"),lFe=a("strong"),t6r=o("mobilebert"),a6r=o(" \u2014 "),EH=a("a"),n6r=o("TFMobileBertForSequenceClassification"),s6r=o(" (MobileBERT model)"),l6r=l(),xM=a("li"),iFe=a("strong"),i6r=o("mpnet"),d6r=o(" \u2014 "),CH=a("a"),c6r=o("TFMPNetForSequenceClassification"),f6r=o(" (MPNet model)"),m6r=l(),$M=a("li"),dFe=a("strong"),g6r=o("openai-gpt"),h6r=o(" \u2014 "),wH=a("a"),p6r=o("TFOpenAIGPTForSequenceClassification"),_6r=o(" (OpenAI GPT model)"),u6r=l(),kM=a("li"),cFe=a("strong"),b6r=o("rembert"),v6r=o(" \u2014 "),AH=a("a"),F6r=o("TFRemBertForSequenceClassification"),T6r=o(" (RemBERT model)"),M6r=l(),SM=a("li"),fFe=a("strong"),E6r=o("roberta"),C6r=o(" \u2014 "),yH=a("a"),w6r=o("TFRobertaForSequenceClassification"),A6r=o(" (RoBERTa model)"),y6r=l(),RM=a("li"),mFe=a("strong"),L6r=o("roformer"),x6r=o(" \u2014 "),LH=a("a"),$6r=o("TFRoFormerForSequenceClassification"),k6r=o(" (RoFormer model)"),S6r=l(),PM=a("li"),gFe=a("strong"),R6r=o("tapas"),P6r=o(" \u2014 "),xH=a("a"),B6r=o("TFTapasForSequenceClassification"),I6r=o(" (TAPAS model)"),q6r=l(),BM=a("li"),hFe=a("strong"),N6r=o("transfo-xl"),j6r=o(" \u2014 "),$H=a("a"),D6r=o("TFTransfoXLForSequenceClassification"),G6r=o(" (Transformer-XL model)"),O6r=l(),IM=a("li"),pFe=a("strong"),V6r=o("xlm"),X6r=o(" \u2014 "),kH=a("a"),z6r=o("TFXLMForSequenceClassification"),W6r=o(" (XLM model)"),Q6r=l(),qM=a("li"),_Fe=a("strong"),H6r=o("xlm-roberta"),U6r=o(" \u2014 "),SH=a("a"),J6r=o("TFXLMRobertaForSequenceClassification"),Y6r=o(" (XLM-RoBERTa model)"),K6r=l(),NM=a("li"),uFe=a("strong"),Z6r=o("xlnet"),eTr=o(" \u2014 "),RH=a("a"),oTr=o("TFXLNetForSequenceClassification"),rTr=o(" (XLNet model)"),tTr=l(),F(jM.$$.fragment),MNe=l(),lc=a("h2"),DM=a("a"),bFe=a("span"),F(kL.$$.fragment),aTr=l(),vFe=a("span"),nTr=o("TFAutoModelForMultipleChoice"),ENe=l(),ar=a("div"),F(SL.$$.fragment),sTr=l(),ic=a("p"),lTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PH=a("a"),iTr=o("from_pretrained()"),dTr=o(" class method or the "),BH=a("a"),cTr=o("from_config()"),fTr=o(` class
method.`),mTr=l(),RL=a("p"),gTr=o("This class cannot be instantiated directly using "),FFe=a("code"),hTr=o("__init__()"),pTr=o(" (throws an error)."),_Tr=l(),Pt=a("div"),F(PL.$$.fragment),uTr=l(),TFe=a("p"),bTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vTr=l(),dc=a("p"),FTr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),TTr=o("not"),MTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),ETr=o("from_pretrained()"),CTr=o(" to load the model weights."),wTr=l(),F(GM.$$.fragment),ATr=l(),Sr=a("div"),F(BL.$$.fragment),yTr=l(),EFe=a("p"),LTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xTr=l(),sn=a("p"),$Tr=o("The model class to instantiate is selected based on the "),CFe=a("code"),kTr=o("model_type"),STr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),RTr=o("pretrained_model_name_or_path"),PTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),BTr=o("pretrained_model_name_or_path"),ITr=o(":"),qTr=l(),he=a("ul"),OM=a("li"),yFe=a("strong"),NTr=o("albert"),jTr=o(" \u2014 "),qH=a("a"),DTr=o("TFAlbertForMultipleChoice"),GTr=o(" (ALBERT model)"),OTr=l(),VM=a("li"),LFe=a("strong"),VTr=o("bert"),XTr=o(" \u2014 "),NH=a("a"),zTr=o("TFBertForMultipleChoice"),WTr=o(" (BERT model)"),QTr=l(),XM=a("li"),xFe=a("strong"),HTr=o("camembert"),UTr=o(" \u2014 "),jH=a("a"),JTr=o("TFCamembertForMultipleChoice"),YTr=o(" (CamemBERT model)"),KTr=l(),zM=a("li"),$Fe=a("strong"),ZTr=o("convbert"),e8r=o(" \u2014 "),DH=a("a"),o8r=o("TFConvBertForMultipleChoice"),r8r=o(" (ConvBERT model)"),t8r=l(),WM=a("li"),kFe=a("strong"),a8r=o("distilbert"),n8r=o(" \u2014 "),GH=a("a"),s8r=o("TFDistilBertForMultipleChoice"),l8r=o(" (DistilBERT model)"),i8r=l(),QM=a("li"),SFe=a("strong"),d8r=o("electra"),c8r=o(" \u2014 "),OH=a("a"),f8r=o("TFElectraForMultipleChoice"),m8r=o(" (ELECTRA model)"),g8r=l(),HM=a("li"),RFe=a("strong"),h8r=o("flaubert"),p8r=o(" \u2014 "),VH=a("a"),_8r=o("TFFlaubertForMultipleChoice"),u8r=o(" (FlauBERT model)"),b8r=l(),UM=a("li"),PFe=a("strong"),v8r=o("funnel"),F8r=o(" \u2014 "),XH=a("a"),T8r=o("TFFunnelForMultipleChoice"),M8r=o(" (Funnel Transformer model)"),E8r=l(),JM=a("li"),BFe=a("strong"),C8r=o("longformer"),w8r=o(" \u2014 "),zH=a("a"),A8r=o("TFLongformerForMultipleChoice"),y8r=o(" (Longformer model)"),L8r=l(),YM=a("li"),IFe=a("strong"),x8r=o("mobilebert"),$8r=o(" \u2014 "),WH=a("a"),k8r=o("TFMobileBertForMultipleChoice"),S8r=o(" (MobileBERT model)"),R8r=l(),KM=a("li"),qFe=a("strong"),P8r=o("mpnet"),B8r=o(" \u2014 "),QH=a("a"),I8r=o("TFMPNetForMultipleChoice"),q8r=o(" (MPNet model)"),N8r=l(),ZM=a("li"),NFe=a("strong"),j8r=o("rembert"),D8r=o(" \u2014 "),HH=a("a"),G8r=o("TFRemBertForMultipleChoice"),O8r=o(" (RemBERT model)"),V8r=l(),e4=a("li"),jFe=a("strong"),X8r=o("roberta"),z8r=o(" \u2014 "),UH=a("a"),W8r=o("TFRobertaForMultipleChoice"),Q8r=o(" (RoBERTa model)"),H8r=l(),o4=a("li"),DFe=a("strong"),U8r=o("roformer"),J8r=o(" \u2014 "),JH=a("a"),Y8r=o("TFRoFormerForMultipleChoice"),K8r=o(" (RoFormer model)"),Z8r=l(),r4=a("li"),GFe=a("strong"),e7r=o("xlm"),o7r=o(" \u2014 "),YH=a("a"),r7r=o("TFXLMForMultipleChoice"),t7r=o(" (XLM model)"),a7r=l(),t4=a("li"),OFe=a("strong"),n7r=o("xlm-roberta"),s7r=o(" \u2014 "),KH=a("a"),l7r=o("TFXLMRobertaForMultipleChoice"),i7r=o(" (XLM-RoBERTa model)"),d7r=l(),a4=a("li"),VFe=a("strong"),c7r=o("xlnet"),f7r=o(" \u2014 "),ZH=a("a"),m7r=o("TFXLNetForMultipleChoice"),g7r=o(" (XLNet model)"),h7r=l(),F(n4.$$.fragment),CNe=l(),cc=a("h2"),s4=a("a"),XFe=a("span"),F(IL.$$.fragment),p7r=l(),zFe=a("span"),_7r=o("TFAutoModelForNextSentencePrediction"),wNe=l(),nr=a("div"),F(qL.$$.fragment),u7r=l(),fc=a("p"),b7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=a("a"),v7r=o("from_pretrained()"),F7r=o(" class method or the "),oU=a("a"),T7r=o("from_config()"),M7r=o(` class
method.`),E7r=l(),NL=a("p"),C7r=o("This class cannot be instantiated directly using "),WFe=a("code"),w7r=o("__init__()"),A7r=o(" (throws an error)."),y7r=l(),Bt=a("div"),F(jL.$$.fragment),L7r=l(),QFe=a("p"),x7r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$7r=l(),mc=a("p"),k7r=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),S7r=o("not"),R7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),P7r=o("from_pretrained()"),B7r=o(" to load the model weights."),I7r=l(),F(l4.$$.fragment),q7r=l(),Rr=a("div"),F(DL.$$.fragment),N7r=l(),UFe=a("p"),j7r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),D7r=l(),ln=a("p"),G7r=o("The model class to instantiate is selected based on the "),JFe=a("code"),O7r=o("model_type"),V7r=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),X7r=o("pretrained_model_name_or_path"),z7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),W7r=o("pretrained_model_name_or_path"),Q7r=o(":"),H7r=l(),GL=a("ul"),i4=a("li"),ZFe=a("strong"),U7r=o("bert"),J7r=o(" \u2014 "),tU=a("a"),Y7r=o("TFBertForNextSentencePrediction"),K7r=o(" (BERT model)"),Z7r=l(),d4=a("li"),e6e=a("strong"),eMr=o("mobilebert"),oMr=o(" \u2014 "),aU=a("a"),rMr=o("TFMobileBertForNextSentencePrediction"),tMr=o(" (MobileBERT model)"),aMr=l(),F(c4.$$.fragment),ANe=l(),gc=a("h2"),f4=a("a"),o6e=a("span"),F(OL.$$.fragment),nMr=l(),r6e=a("span"),sMr=o("TFAutoModelForTableQuestionAnswering"),yNe=l(),sr=a("div"),F(VL.$$.fragment),lMr=l(),hc=a("p"),iMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nU=a("a"),dMr=o("from_pretrained()"),cMr=o(" class method or the "),sU=a("a"),fMr=o("from_config()"),mMr=o(` class
method.`),gMr=l(),XL=a("p"),hMr=o("This class cannot be instantiated directly using "),t6e=a("code"),pMr=o("__init__()"),_Mr=o(" (throws an error)."),uMr=l(),It=a("div"),F(zL.$$.fragment),bMr=l(),a6e=a("p"),vMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FMr=l(),pc=a("p"),TMr=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),MMr=o("not"),EMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),CMr=o("from_pretrained()"),wMr=o(" to load the model weights."),AMr=l(),F(m4.$$.fragment),yMr=l(),Pr=a("div"),F(WL.$$.fragment),LMr=l(),s6e=a("p"),xMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Mr=l(),dn=a("p"),kMr=o("The model class to instantiate is selected based on the "),l6e=a("code"),SMr=o("model_type"),RMr=o(` property of the config object (either
passed as an argument or loaded from `),i6e=a("code"),PMr=o("pretrained_model_name_or_path"),BMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=a("code"),IMr=o("pretrained_model_name_or_path"),qMr=o(":"),NMr=l(),c6e=a("ul"),g4=a("li"),f6e=a("strong"),jMr=o("tapas"),DMr=o(" \u2014 "),iU=a("a"),GMr=o("TFTapasForQuestionAnswering"),OMr=o(" (TAPAS model)"),VMr=l(),F(h4.$$.fragment),LNe=l(),_c=a("h2"),p4=a("a"),m6e=a("span"),F(QL.$$.fragment),XMr=l(),g6e=a("span"),zMr=o("TFAutoModelForTokenClassification"),xNe=l(),lr=a("div"),F(HL.$$.fragment),WMr=l(),uc=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dU=a("a"),HMr=o("from_pretrained()"),UMr=o(" class method or the "),cU=a("a"),JMr=o("from_config()"),YMr=o(` class
method.`),KMr=l(),UL=a("p"),ZMr=o("This class cannot be instantiated directly using "),h6e=a("code"),e4r=o("__init__()"),o4r=o(" (throws an error)."),r4r=l(),qt=a("div"),F(JL.$$.fragment),t4r=l(),p6e=a("p"),a4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n4r=l(),bc=a("p"),s4r=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),l4r=o("not"),i4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),d4r=o("from_pretrained()"),c4r=o(" to load the model weights."),f4r=l(),F(_4.$$.fragment),m4r=l(),Br=a("div"),F(YL.$$.fragment),g4r=l(),u6e=a("p"),h4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p4r=l(),cn=a("p"),_4r=o("The model class to instantiate is selected based on the "),b6e=a("code"),u4r=o("model_type"),b4r=o(` property of the config object (either
passed as an argument or loaded from `),v6e=a("code"),v4r=o("pretrained_model_name_or_path"),F4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),T4r=o("pretrained_model_name_or_path"),M4r=o(":"),E4r=l(),de=a("ul"),u4=a("li"),T6e=a("strong"),C4r=o("albert"),w4r=o(" \u2014 "),mU=a("a"),A4r=o("TFAlbertForTokenClassification"),y4r=o(" (ALBERT model)"),L4r=l(),b4=a("li"),M6e=a("strong"),x4r=o("bert"),$4r=o(" \u2014 "),gU=a("a"),k4r=o("TFBertForTokenClassification"),S4r=o(" (BERT model)"),R4r=l(),v4=a("li"),E6e=a("strong"),P4r=o("camembert"),B4r=o(" \u2014 "),hU=a("a"),I4r=o("TFCamembertForTokenClassification"),q4r=o(" (CamemBERT model)"),N4r=l(),F4=a("li"),C6e=a("strong"),j4r=o("convbert"),D4r=o(" \u2014 "),pU=a("a"),G4r=o("TFConvBertForTokenClassification"),O4r=o(" (ConvBERT model)"),V4r=l(),T4=a("li"),w6e=a("strong"),X4r=o("deberta"),z4r=o(" \u2014 "),_U=a("a"),W4r=o("TFDebertaForTokenClassification"),Q4r=o(" (DeBERTa model)"),H4r=l(),M4=a("li"),A6e=a("strong"),U4r=o("deberta-v2"),J4r=o(" \u2014 "),uU=a("a"),Y4r=o("TFDebertaV2ForTokenClassification"),K4r=o(" (DeBERTa-v2 model)"),Z4r=l(),E4=a("li"),y6e=a("strong"),eEr=o("distilbert"),oEr=o(" \u2014 "),bU=a("a"),rEr=o("TFDistilBertForTokenClassification"),tEr=o(" (DistilBERT model)"),aEr=l(),C4=a("li"),L6e=a("strong"),nEr=o("electra"),sEr=o(" \u2014 "),vU=a("a"),lEr=o("TFElectraForTokenClassification"),iEr=o(" (ELECTRA model)"),dEr=l(),w4=a("li"),x6e=a("strong"),cEr=o("flaubert"),fEr=o(" \u2014 "),FU=a("a"),mEr=o("TFFlaubertForTokenClassification"),gEr=o(" (FlauBERT model)"),hEr=l(),A4=a("li"),$6e=a("strong"),pEr=o("funnel"),_Er=o(" \u2014 "),TU=a("a"),uEr=o("TFFunnelForTokenClassification"),bEr=o(" (Funnel Transformer model)"),vEr=l(),y4=a("li"),k6e=a("strong"),FEr=o("layoutlm"),TEr=o(" \u2014 "),MU=a("a"),MEr=o("TFLayoutLMForTokenClassification"),EEr=o(" (LayoutLM model)"),CEr=l(),L4=a("li"),S6e=a("strong"),wEr=o("longformer"),AEr=o(" \u2014 "),EU=a("a"),yEr=o("TFLongformerForTokenClassification"),LEr=o(" (Longformer model)"),xEr=l(),x4=a("li"),R6e=a("strong"),$Er=o("mobilebert"),kEr=o(" \u2014 "),CU=a("a"),SEr=o("TFMobileBertForTokenClassification"),REr=o(" (MobileBERT model)"),PEr=l(),$4=a("li"),P6e=a("strong"),BEr=o("mpnet"),IEr=o(" \u2014 "),wU=a("a"),qEr=o("TFMPNetForTokenClassification"),NEr=o(" (MPNet model)"),jEr=l(),k4=a("li"),B6e=a("strong"),DEr=o("rembert"),GEr=o(" \u2014 "),AU=a("a"),OEr=o("TFRemBertForTokenClassification"),VEr=o(" (RemBERT model)"),XEr=l(),S4=a("li"),I6e=a("strong"),zEr=o("roberta"),WEr=o(" \u2014 "),yU=a("a"),QEr=o("TFRobertaForTokenClassification"),HEr=o(" (RoBERTa model)"),UEr=l(),R4=a("li"),q6e=a("strong"),JEr=o("roformer"),YEr=o(" \u2014 "),LU=a("a"),KEr=o("TFRoFormerForTokenClassification"),ZEr=o(" (RoFormer model)"),eCr=l(),P4=a("li"),N6e=a("strong"),oCr=o("xlm"),rCr=o(" \u2014 "),xU=a("a"),tCr=o("TFXLMForTokenClassification"),aCr=o(" (XLM model)"),nCr=l(),B4=a("li"),j6e=a("strong"),sCr=o("xlm-roberta"),lCr=o(" \u2014 "),$U=a("a"),iCr=o("TFXLMRobertaForTokenClassification"),dCr=o(" (XLM-RoBERTa model)"),cCr=l(),I4=a("li"),D6e=a("strong"),fCr=o("xlnet"),mCr=o(" \u2014 "),kU=a("a"),gCr=o("TFXLNetForTokenClassification"),hCr=o(" (XLNet model)"),pCr=l(),F(q4.$$.fragment),$Ne=l(),vc=a("h2"),N4=a("a"),G6e=a("span"),F(KL.$$.fragment),_Cr=l(),O6e=a("span"),uCr=o("TFAutoModelForQuestionAnswering"),kNe=l(),ir=a("div"),F(ZL.$$.fragment),bCr=l(),Fc=a("p"),vCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SU=a("a"),FCr=o("from_pretrained()"),TCr=o(" class method or the "),RU=a("a"),MCr=o("from_config()"),ECr=o(` class
method.`),CCr=l(),e9=a("p"),wCr=o("This class cannot be instantiated directly using "),V6e=a("code"),ACr=o("__init__()"),yCr=o(" (throws an error)."),LCr=l(),Nt=a("div"),F(o9.$$.fragment),xCr=l(),X6e=a("p"),$Cr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kCr=l(),Tc=a("p"),SCr=o(`Note:
Loading a model from its configuration file does `),z6e=a("strong"),RCr=o("not"),PCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),BCr=o("from_pretrained()"),ICr=o(" to load the model weights."),qCr=l(),F(j4.$$.fragment),NCr=l(),Ir=a("div"),F(r9.$$.fragment),jCr=l(),W6e=a("p"),DCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GCr=l(),fn=a("p"),OCr=o("The model class to instantiate is selected based on the "),Q6e=a("code"),VCr=o("model_type"),XCr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),zCr=o("pretrained_model_name_or_path"),WCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),QCr=o("pretrained_model_name_or_path"),HCr=o(":"),UCr=l(),ce=a("ul"),D4=a("li"),J6e=a("strong"),JCr=o("albert"),YCr=o(" \u2014 "),BU=a("a"),KCr=o("TFAlbertForQuestionAnswering"),ZCr=o(" (ALBERT model)"),e5r=l(),G4=a("li"),Y6e=a("strong"),o5r=o("bert"),r5r=o(" \u2014 "),IU=a("a"),t5r=o("TFBertForQuestionAnswering"),a5r=o(" (BERT model)"),n5r=l(),O4=a("li"),K6e=a("strong"),s5r=o("camembert"),l5r=o(" \u2014 "),qU=a("a"),i5r=o("TFCamembertForQuestionAnswering"),d5r=o(" (CamemBERT model)"),c5r=l(),V4=a("li"),Z6e=a("strong"),f5r=o("convbert"),m5r=o(" \u2014 "),NU=a("a"),g5r=o("TFConvBertForQuestionAnswering"),h5r=o(" (ConvBERT model)"),p5r=l(),X4=a("li"),eTe=a("strong"),_5r=o("deberta"),u5r=o(" \u2014 "),jU=a("a"),b5r=o("TFDebertaForQuestionAnswering"),v5r=o(" (DeBERTa model)"),F5r=l(),z4=a("li"),oTe=a("strong"),T5r=o("deberta-v2"),M5r=o(" \u2014 "),DU=a("a"),E5r=o("TFDebertaV2ForQuestionAnswering"),C5r=o(" (DeBERTa-v2 model)"),w5r=l(),W4=a("li"),rTe=a("strong"),A5r=o("distilbert"),y5r=o(" \u2014 "),GU=a("a"),L5r=o("TFDistilBertForQuestionAnswering"),x5r=o(" (DistilBERT model)"),$5r=l(),Q4=a("li"),tTe=a("strong"),k5r=o("electra"),S5r=o(" \u2014 "),OU=a("a"),R5r=o("TFElectraForQuestionAnswering"),P5r=o(" (ELECTRA model)"),B5r=l(),H4=a("li"),aTe=a("strong"),I5r=o("flaubert"),q5r=o(" \u2014 "),VU=a("a"),N5r=o("TFFlaubertForQuestionAnsweringSimple"),j5r=o(" (FlauBERT model)"),D5r=l(),U4=a("li"),nTe=a("strong"),G5r=o("funnel"),O5r=o(" \u2014 "),XU=a("a"),V5r=o("TFFunnelForQuestionAnswering"),X5r=o(" (Funnel Transformer model)"),z5r=l(),J4=a("li"),sTe=a("strong"),W5r=o("gptj"),Q5r=o(" \u2014 "),zU=a("a"),H5r=o("TFGPTJForQuestionAnswering"),U5r=o(" (GPT-J model)"),J5r=l(),Y4=a("li"),lTe=a("strong"),Y5r=o("longformer"),K5r=o(" \u2014 "),WU=a("a"),Z5r=o("TFLongformerForQuestionAnswering"),e3r=o(" (Longformer model)"),o3r=l(),K4=a("li"),iTe=a("strong"),r3r=o("mobilebert"),t3r=o(" \u2014 "),QU=a("a"),a3r=o("TFMobileBertForQuestionAnswering"),n3r=o(" (MobileBERT model)"),s3r=l(),Z4=a("li"),dTe=a("strong"),l3r=o("mpnet"),i3r=o(" \u2014 "),HU=a("a"),d3r=o("TFMPNetForQuestionAnswering"),c3r=o(" (MPNet model)"),f3r=l(),eE=a("li"),cTe=a("strong"),m3r=o("rembert"),g3r=o(" \u2014 "),UU=a("a"),h3r=o("TFRemBertForQuestionAnswering"),p3r=o(" (RemBERT model)"),_3r=l(),oE=a("li"),fTe=a("strong"),u3r=o("roberta"),b3r=o(" \u2014 "),JU=a("a"),v3r=o("TFRobertaForQuestionAnswering"),F3r=o(" (RoBERTa model)"),T3r=l(),rE=a("li"),mTe=a("strong"),M3r=o("roformer"),E3r=o(" \u2014 "),YU=a("a"),C3r=o("TFRoFormerForQuestionAnswering"),w3r=o(" (RoFormer model)"),A3r=l(),tE=a("li"),gTe=a("strong"),y3r=o("xlm"),L3r=o(" \u2014 "),KU=a("a"),x3r=o("TFXLMForQuestionAnsweringSimple"),$3r=o(" (XLM model)"),k3r=l(),aE=a("li"),hTe=a("strong"),S3r=o("xlm-roberta"),R3r=o(" \u2014 "),ZU=a("a"),P3r=o("TFXLMRobertaForQuestionAnswering"),B3r=o(" (XLM-RoBERTa model)"),I3r=l(),nE=a("li"),pTe=a("strong"),q3r=o("xlnet"),N3r=o(" \u2014 "),eJ=a("a"),j3r=o("TFXLNetForQuestionAnsweringSimple"),D3r=o(" (XLNet model)"),G3r=l(),F(sE.$$.fragment),SNe=l(),Mc=a("h2"),lE=a("a"),_Te=a("span"),F(t9.$$.fragment),O3r=l(),uTe=a("span"),V3r=o("TFAutoModelForVision2Seq"),RNe=l(),dr=a("div"),F(a9.$$.fragment),X3r=l(),Ec=a("p"),z3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oJ=a("a"),W3r=o("from_pretrained()"),Q3r=o(" class method or the "),rJ=a("a"),H3r=o("from_config()"),U3r=o(` class
method.`),J3r=l(),n9=a("p"),Y3r=o("This class cannot be instantiated directly using "),bTe=a("code"),K3r=o("__init__()"),Z3r=o(" (throws an error)."),ewr=l(),jt=a("div"),F(s9.$$.fragment),owr=l(),vTe=a("p"),rwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),twr=l(),Cc=a("p"),awr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),nwr=o("not"),swr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),lwr=o("from_pretrained()"),iwr=o(" to load the model weights."),dwr=l(),F(iE.$$.fragment),cwr=l(),qr=a("div"),F(l9.$$.fragment),fwr=l(),TTe=a("p"),mwr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gwr=l(),mn=a("p"),hwr=o("The model class to instantiate is selected based on the "),MTe=a("code"),pwr=o("model_type"),_wr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),uwr=o("pretrained_model_name_or_path"),bwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),vwr=o("pretrained_model_name_or_path"),Fwr=o(":"),Twr=l(),wTe=a("ul"),dE=a("li"),ATe=a("strong"),Mwr=o("vision-encoder-decoder"),Ewr=o(" \u2014 "),aJ=a("a"),Cwr=o("TFVisionEncoderDecoderModel"),wwr=o(" (Vision Encoder decoder model)"),Awr=l(),F(cE.$$.fragment),PNe=l(),wc=a("h2"),fE=a("a"),yTe=a("span"),F(i9.$$.fragment),ywr=l(),LTe=a("span"),Lwr=o("TFAutoModelForSpeechSeq2Seq"),BNe=l(),cr=a("div"),F(d9.$$.fragment),xwr=l(),Ac=a("p"),$wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nJ=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),sJ=a("a"),Rwr=o("from_config()"),Pwr=o(` class
method.`),Bwr=l(),c9=a("p"),Iwr=o("This class cannot be instantiated directly using "),xTe=a("code"),qwr=o("__init__()"),Nwr=o(" (throws an error)."),jwr=l(),Dt=a("div"),F(f9.$$.fragment),Dwr=l(),$Te=a("p"),Gwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Owr=l(),yc=a("p"),Vwr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),Xwr=o("not"),zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),Wwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Hwr=l(),F(mE.$$.fragment),Uwr=l(),Nr=a("div"),F(m9.$$.fragment),Jwr=l(),STe=a("p"),Ywr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kwr=l(),gn=a("p"),Zwr=o("The model class to instantiate is selected based on the "),RTe=a("code"),e0r=o("model_type"),o0r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(":"),s0r=l(),ITe=a("ul"),gE=a("li"),qTe=a("strong"),l0r=o("speech_to_text"),i0r=o(" \u2014 "),iJ=a("a"),d0r=o("TFSpeech2TextForConditionalGeneration"),c0r=o(" (Speech2Text model)"),f0r=l(),F(hE.$$.fragment),INe=l(),Lc=a("h2"),pE=a("a"),NTe=a("span"),F(g9.$$.fragment),m0r=l(),jTe=a("span"),g0r=o("FlaxAutoModel"),qNe=l(),fr=a("div"),F(h9.$$.fragment),h0r=l(),xc=a("p"),p0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dJ=a("a"),_0r=o("from_pretrained()"),u0r=o(" class method or the "),cJ=a("a"),b0r=o("from_config()"),v0r=o(` class
method.`),F0r=l(),p9=a("p"),T0r=o("This class cannot be instantiated directly using "),DTe=a("code"),M0r=o("__init__()"),E0r=o(" (throws an error)."),C0r=l(),Gt=a("div"),F(_9.$$.fragment),w0r=l(),GTe=a("p"),A0r=o("Instantiates one of the base model classes of the library from a configuration."),y0r=l(),$c=a("p"),L0r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),x0r=o("not"),$0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),k0r=o("from_pretrained()"),S0r=o(" to load the model weights."),R0r=l(),F(_E.$$.fragment),P0r=l(),jr=a("div"),F(u9.$$.fragment),B0r=l(),VTe=a("p"),I0r=o("Instantiate one of the base model classes of the library from a pretrained model."),q0r=l(),hn=a("p"),N0r=o("The model class to instantiate is selected based on the "),XTe=a("code"),j0r=o("model_type"),D0r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(":"),z0r=l(),te=a("ul"),uE=a("li"),QTe=a("strong"),W0r=o("albert"),Q0r=o(" \u2014 "),mJ=a("a"),H0r=o("FlaxAlbertModel"),U0r=o(" (ALBERT model)"),J0r=l(),bE=a("li"),HTe=a("strong"),Y0r=o("bart"),K0r=o(" \u2014 "),gJ=a("a"),Z0r=o("FlaxBartModel"),eAr=o(" (BART model)"),oAr=l(),vE=a("li"),UTe=a("strong"),rAr=o("beit"),tAr=o(" \u2014 "),hJ=a("a"),aAr=o("FlaxBeitModel"),nAr=o(" (BEiT model)"),sAr=l(),FE=a("li"),JTe=a("strong"),lAr=o("bert"),iAr=o(" \u2014 "),pJ=a("a"),dAr=o("FlaxBertModel"),cAr=o(" (BERT model)"),fAr=l(),TE=a("li"),YTe=a("strong"),mAr=o("big_bird"),gAr=o(" \u2014 "),_J=a("a"),hAr=o("FlaxBigBirdModel"),pAr=o(" (BigBird model)"),_Ar=l(),ME=a("li"),KTe=a("strong"),uAr=o("blenderbot"),bAr=o(" \u2014 "),uJ=a("a"),vAr=o("FlaxBlenderbotModel"),FAr=o(" (Blenderbot model)"),TAr=l(),EE=a("li"),ZTe=a("strong"),MAr=o("blenderbot-small"),EAr=o(" \u2014 "),bJ=a("a"),CAr=o("FlaxBlenderbotSmallModel"),wAr=o(" (BlenderbotSmall model)"),AAr=l(),CE=a("li"),e8e=a("strong"),yAr=o("clip"),LAr=o(" \u2014 "),vJ=a("a"),xAr=o("FlaxCLIPModel"),$Ar=o(" (CLIP model)"),kAr=l(),wE=a("li"),o8e=a("strong"),SAr=o("distilbert"),RAr=o(" \u2014 "),FJ=a("a"),PAr=o("FlaxDistilBertModel"),BAr=o(" (DistilBERT model)"),IAr=l(),AE=a("li"),r8e=a("strong"),qAr=o("electra"),NAr=o(" \u2014 "),TJ=a("a"),jAr=o("FlaxElectraModel"),DAr=o(" (ELECTRA model)"),GAr=l(),yE=a("li"),t8e=a("strong"),OAr=o("gpt2"),VAr=o(" \u2014 "),MJ=a("a"),XAr=o("FlaxGPT2Model"),zAr=o(" (OpenAI GPT-2 model)"),WAr=l(),LE=a("li"),a8e=a("strong"),QAr=o("gpt_neo"),HAr=o(" \u2014 "),EJ=a("a"),UAr=o("FlaxGPTNeoModel"),JAr=o(" (GPT Neo model)"),YAr=l(),xE=a("li"),n8e=a("strong"),KAr=o("gptj"),ZAr=o(" \u2014 "),CJ=a("a"),eyr=o("FlaxGPTJModel"),oyr=o(" (GPT-J model)"),ryr=l(),$E=a("li"),s8e=a("strong"),tyr=o("marian"),ayr=o(" \u2014 "),wJ=a("a"),nyr=o("FlaxMarianModel"),syr=o(" (Marian model)"),lyr=l(),kE=a("li"),l8e=a("strong"),iyr=o("mbart"),dyr=o(" \u2014 "),AJ=a("a"),cyr=o("FlaxMBartModel"),fyr=o(" (mBART model)"),myr=l(),SE=a("li"),i8e=a("strong"),gyr=o("mt5"),hyr=o(" \u2014 "),yJ=a("a"),pyr=o("FlaxMT5Model"),_yr=o(" (mT5 model)"),uyr=l(),RE=a("li"),d8e=a("strong"),byr=o("pegasus"),vyr=o(" \u2014 "),LJ=a("a"),Fyr=o("FlaxPegasusModel"),Tyr=o(" (Pegasus model)"),Myr=l(),PE=a("li"),c8e=a("strong"),Eyr=o("roberta"),Cyr=o(" \u2014 "),xJ=a("a"),wyr=o("FlaxRobertaModel"),Ayr=o(" (RoBERTa model)"),yyr=l(),BE=a("li"),f8e=a("strong"),Lyr=o("roformer"),xyr=o(" \u2014 "),$J=a("a"),$yr=o("FlaxRoFormerModel"),kyr=o(" (RoFormer model)"),Syr=l(),IE=a("li"),m8e=a("strong"),Ryr=o("t5"),Pyr=o(" \u2014 "),kJ=a("a"),Byr=o("FlaxT5Model"),Iyr=o(" (T5 model)"),qyr=l(),qE=a("li"),g8e=a("strong"),Nyr=o("vision-text-dual-encoder"),jyr=o(" \u2014 "),SJ=a("a"),Dyr=o("FlaxVisionTextDualEncoderModel"),Gyr=o(" (VisionTextDualEncoder model)"),Oyr=l(),NE=a("li"),h8e=a("strong"),Vyr=o("vit"),Xyr=o(" \u2014 "),RJ=a("a"),zyr=o("FlaxViTModel"),Wyr=o(" (ViT model)"),Qyr=l(),jE=a("li"),p8e=a("strong"),Hyr=o("wav2vec2"),Uyr=o(" \u2014 "),PJ=a("a"),Jyr=o("FlaxWav2Vec2Model"),Yyr=o(" (Wav2Vec2 model)"),Kyr=l(),DE=a("li"),_8e=a("strong"),Zyr=o("xglm"),eLr=o(" \u2014 "),BJ=a("a"),oLr=o("FlaxXGLMModel"),rLr=o(" (XGLM model)"),tLr=l(),GE=a("li"),u8e=a("strong"),aLr=o("xlm-roberta"),nLr=o(" \u2014 "),IJ=a("a"),sLr=o("FlaxXLMRobertaModel"),lLr=o(" (XLM-RoBERTa model)"),iLr=l(),F(OE.$$.fragment),NNe=l(),kc=a("h2"),VE=a("a"),b8e=a("span"),F(b9.$$.fragment),dLr=l(),v8e=a("span"),cLr=o("FlaxAutoModelForCausalLM"),jNe=l(),mr=a("div"),F(v9.$$.fragment),fLr=l(),Sc=a("p"),mLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" class method or the "),NJ=a("a"),pLr=o("from_config()"),_Lr=o(` class
method.`),uLr=l(),F9=a("p"),bLr=o("This class cannot be instantiated directly using "),F8e=a("code"),vLr=o("__init__()"),FLr=o(" (throws an error)."),TLr=l(),Ot=a("div"),F(T9.$$.fragment),MLr=l(),T8e=a("p"),ELr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CLr=l(),Rc=a("p"),wLr=o(`Note:
Loading a model from its configuration file does `),M8e=a("strong"),ALr=o("not"),yLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),LLr=o("from_pretrained()"),xLr=o(" to load the model weights."),$Lr=l(),F(XE.$$.fragment),kLr=l(),Dr=a("div"),F(M9.$$.fragment),SLr=l(),E8e=a("p"),RLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PLr=l(),pn=a("p"),BLr=o("The model class to instantiate is selected based on the "),C8e=a("code"),ILr=o("model_type"),qLr=o(` property of the config object (either
passed as an argument or loaded from `),w8e=a("code"),NLr=o("pretrained_model_name_or_path"),jLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(":"),OLr=l(),Re=a("ul"),zE=a("li"),y8e=a("strong"),VLr=o("bart"),XLr=o(" \u2014 "),DJ=a("a"),zLr=o("FlaxBartForCausalLM"),WLr=o(" (BART model)"),QLr=l(),WE=a("li"),L8e=a("strong"),HLr=o("bert"),ULr=o(" \u2014 "),GJ=a("a"),JLr=o("FlaxBertForCausalLM"),YLr=o(" (BERT model)"),KLr=l(),QE=a("li"),x8e=a("strong"),ZLr=o("big_bird"),e9r=o(" \u2014 "),OJ=a("a"),o9r=o("FlaxBigBirdForCausalLM"),r9r=o(" (BigBird model)"),t9r=l(),HE=a("li"),$8e=a("strong"),a9r=o("electra"),n9r=o(" \u2014 "),VJ=a("a"),s9r=o("FlaxElectraForCausalLM"),l9r=o(" (ELECTRA model)"),i9r=l(),UE=a("li"),k8e=a("strong"),d9r=o("gpt2"),c9r=o(" \u2014 "),XJ=a("a"),f9r=o("FlaxGPT2LMHeadModel"),m9r=o(" (OpenAI GPT-2 model)"),g9r=l(),JE=a("li"),S8e=a("strong"),h9r=o("gpt_neo"),p9r=o(" \u2014 "),zJ=a("a"),_9r=o("FlaxGPTNeoForCausalLM"),u9r=o(" (GPT Neo model)"),b9r=l(),YE=a("li"),R8e=a("strong"),v9r=o("gptj"),F9r=o(" \u2014 "),WJ=a("a"),T9r=o("FlaxGPTJForCausalLM"),M9r=o(" (GPT-J model)"),E9r=l(),KE=a("li"),P8e=a("strong"),C9r=o("roberta"),w9r=o(" \u2014 "),QJ=a("a"),A9r=o("FlaxRobertaForCausalLM"),y9r=o(" (RoBERTa model)"),L9r=l(),ZE=a("li"),B8e=a("strong"),x9r=o("xglm"),$9r=o(" \u2014 "),HJ=a("a"),k9r=o("FlaxXGLMForCausalLM"),S9r=o(" (XGLM model)"),R9r=l(),F(eC.$$.fragment),DNe=l(),Pc=a("h2"),oC=a("a"),I8e=a("span"),F(E9.$$.fragment),P9r=l(),q8e=a("span"),B9r=o("FlaxAutoModelForPreTraining"),GNe=l(),gr=a("div"),F(C9.$$.fragment),I9r=l(),Bc=a("p"),q9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=a("a"),N9r=o("from_pretrained()"),j9r=o(" class method or the "),JJ=a("a"),D9r=o("from_config()"),G9r=o(` class
method.`),O9r=l(),w9=a("p"),V9r=o("This class cannot be instantiated directly using "),N8e=a("code"),X9r=o("__init__()"),z9r=o(" (throws an error)."),W9r=l(),Vt=a("div"),F(A9.$$.fragment),Q9r=l(),j8e=a("p"),H9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U9r=l(),Ic=a("p"),J9r=o(`Note:
Loading a model from its configuration file does `),D8e=a("strong"),Y9r=o("not"),K9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),Z9r=o("from_pretrained()"),exr=o(" to load the model weights."),oxr=l(),F(rC.$$.fragment),rxr=l(),Gr=a("div"),F(y9.$$.fragment),txr=l(),G8e=a("p"),axr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nxr=l(),_n=a("p"),sxr=o("The model class to instantiate is selected based on the "),O8e=a("code"),lxr=o("model_type"),ixr=o(` property of the config object (either
passed as an argument or loaded from `),V8e=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=a("code"),fxr=o("pretrained_model_name_or_path"),mxr=o(":"),gxr=l(),Ee=a("ul"),tC=a("li"),z8e=a("strong"),hxr=o("albert"),pxr=o(" \u2014 "),KJ=a("a"),_xr=o("FlaxAlbertForPreTraining"),uxr=o(" (ALBERT model)"),bxr=l(),aC=a("li"),W8e=a("strong"),vxr=o("bart"),Fxr=o(" \u2014 "),ZJ=a("a"),Txr=o("FlaxBartForConditionalGeneration"),Mxr=o(" (BART model)"),Exr=l(),nC=a("li"),Q8e=a("strong"),Cxr=o("bert"),wxr=o(" \u2014 "),eY=a("a"),Axr=o("FlaxBertForPreTraining"),yxr=o(" (BERT model)"),Lxr=l(),sC=a("li"),H8e=a("strong"),xxr=o("big_bird"),$xr=o(" \u2014 "),oY=a("a"),kxr=o("FlaxBigBirdForPreTraining"),Sxr=o(" (BigBird model)"),Rxr=l(),lC=a("li"),U8e=a("strong"),Pxr=o("electra"),Bxr=o(" \u2014 "),rY=a("a"),Ixr=o("FlaxElectraForPreTraining"),qxr=o(" (ELECTRA model)"),Nxr=l(),iC=a("li"),J8e=a("strong"),jxr=o("mbart"),Dxr=o(" \u2014 "),tY=a("a"),Gxr=o("FlaxMBartForConditionalGeneration"),Oxr=o(" (mBART model)"),Vxr=l(),dC=a("li"),Y8e=a("strong"),Xxr=o("mt5"),zxr=o(" \u2014 "),aY=a("a"),Wxr=o("FlaxMT5ForConditionalGeneration"),Qxr=o(" (mT5 model)"),Hxr=l(),cC=a("li"),K8e=a("strong"),Uxr=o("roberta"),Jxr=o(" \u2014 "),nY=a("a"),Yxr=o("FlaxRobertaForMaskedLM"),Kxr=o(" (RoBERTa model)"),Zxr=l(),fC=a("li"),Z8e=a("strong"),e$r=o("roformer"),o$r=o(" \u2014 "),sY=a("a"),r$r=o("FlaxRoFormerForMaskedLM"),t$r=o(" (RoFormer model)"),a$r=l(),mC=a("li"),e7e=a("strong"),n$r=o("t5"),s$r=o(" \u2014 "),lY=a("a"),l$r=o("FlaxT5ForConditionalGeneration"),i$r=o(" (T5 model)"),d$r=l(),gC=a("li"),o7e=a("strong"),c$r=o("wav2vec2"),f$r=o(" \u2014 "),iY=a("a"),m$r=o("FlaxWav2Vec2ForPreTraining"),g$r=o(" (Wav2Vec2 model)"),h$r=l(),hC=a("li"),r7e=a("strong"),p$r=o("xlm-roberta"),_$r=o(" \u2014 "),dY=a("a"),u$r=o("FlaxXLMRobertaForMaskedLM"),b$r=o(" (XLM-RoBERTa model)"),v$r=l(),F(pC.$$.fragment),ONe=l(),qc=a("h2"),_C=a("a"),t7e=a("span"),F(L9.$$.fragment),F$r=l(),a7e=a("span"),T$r=o("FlaxAutoModelForMaskedLM"),VNe=l(),hr=a("div"),F(x9.$$.fragment),M$r=l(),Nc=a("p"),E$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=a("a"),C$r=o("from_pretrained()"),w$r=o(" class method or the "),fY=a("a"),A$r=o("from_config()"),y$r=o(` class
method.`),L$r=l(),$9=a("p"),x$r=o("This class cannot be instantiated directly using "),n7e=a("code"),$$r=o("__init__()"),k$r=o(" (throws an error)."),S$r=l(),Xt=a("div"),F(k9.$$.fragment),R$r=l(),s7e=a("p"),P$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B$r=l(),jc=a("p"),I$r=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),q$r=o("not"),N$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),j$r=o("from_pretrained()"),D$r=o(" to load the model weights."),G$r=l(),F(uC.$$.fragment),O$r=l(),Or=a("div"),F(S9.$$.fragment),V$r=l(),i7e=a("p"),X$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z$r=l(),un=a("p"),W$r=o("The model class to instantiate is selected based on the "),d7e=a("code"),Q$r=o("model_type"),H$r=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),U$r=o("pretrained_model_name_or_path"),J$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),Y$r=o("pretrained_model_name_or_path"),K$r=o(":"),Z$r=l(),Le=a("ul"),bC=a("li"),m7e=a("strong"),ekr=o("albert"),okr=o(" \u2014 "),gY=a("a"),rkr=o("FlaxAlbertForMaskedLM"),tkr=o(" (ALBERT model)"),akr=l(),vC=a("li"),g7e=a("strong"),nkr=o("bart"),skr=o(" \u2014 "),hY=a("a"),lkr=o("FlaxBartForConditionalGeneration"),ikr=o(" (BART model)"),dkr=l(),FC=a("li"),h7e=a("strong"),ckr=o("bert"),fkr=o(" \u2014 "),pY=a("a"),mkr=o("FlaxBertForMaskedLM"),gkr=o(" (BERT model)"),hkr=l(),TC=a("li"),p7e=a("strong"),pkr=o("big_bird"),_kr=o(" \u2014 "),_Y=a("a"),ukr=o("FlaxBigBirdForMaskedLM"),bkr=o(" (BigBird model)"),vkr=l(),MC=a("li"),_7e=a("strong"),Fkr=o("distilbert"),Tkr=o(" \u2014 "),uY=a("a"),Mkr=o("FlaxDistilBertForMaskedLM"),Ekr=o(" (DistilBERT model)"),Ckr=l(),EC=a("li"),u7e=a("strong"),wkr=o("electra"),Akr=o(" \u2014 "),bY=a("a"),ykr=o("FlaxElectraForMaskedLM"),Lkr=o(" (ELECTRA model)"),xkr=l(),CC=a("li"),b7e=a("strong"),$kr=o("mbart"),kkr=o(" \u2014 "),vY=a("a"),Skr=o("FlaxMBartForConditionalGeneration"),Rkr=o(" (mBART model)"),Pkr=l(),wC=a("li"),v7e=a("strong"),Bkr=o("roberta"),Ikr=o(" \u2014 "),FY=a("a"),qkr=o("FlaxRobertaForMaskedLM"),Nkr=o(" (RoBERTa model)"),jkr=l(),AC=a("li"),F7e=a("strong"),Dkr=o("roformer"),Gkr=o(" \u2014 "),TY=a("a"),Okr=o("FlaxRoFormerForMaskedLM"),Vkr=o(" (RoFormer model)"),Xkr=l(),yC=a("li"),T7e=a("strong"),zkr=o("xlm-roberta"),Wkr=o(" \u2014 "),MY=a("a"),Qkr=o("FlaxXLMRobertaForMaskedLM"),Hkr=o(" (XLM-RoBERTa model)"),Ukr=l(),F(LC.$$.fragment),XNe=l(),Dc=a("h2"),xC=a("a"),M7e=a("span"),F(R9.$$.fragment),Jkr=l(),E7e=a("span"),Ykr=o("FlaxAutoModelForSeq2SeqLM"),zNe=l(),pr=a("div"),F(P9.$$.fragment),Kkr=l(),Gc=a("p"),Zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=a("a"),eSr=o("from_pretrained()"),oSr=o(" class method or the "),CY=a("a"),rSr=o("from_config()"),tSr=o(` class
method.`),aSr=l(),B9=a("p"),nSr=o("This class cannot be instantiated directly using "),C7e=a("code"),sSr=o("__init__()"),lSr=o(" (throws an error)."),iSr=l(),zt=a("div"),F(I9.$$.fragment),dSr=l(),w7e=a("p"),cSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fSr=l(),Oc=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),gSr=o("not"),hSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),pSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),uSr=l(),F($C.$$.fragment),bSr=l(),Vr=a("div"),F(q9.$$.fragment),vSr=l(),y7e=a("p"),FSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TSr=l(),bn=a("p"),MSr=o("The model class to instantiate is selected based on the "),L7e=a("code"),ESr=o("model_type"),CSr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),ySr=o("pretrained_model_name_or_path"),LSr=o(":"),xSr=l(),Pe=a("ul"),kC=a("li"),k7e=a("strong"),$Sr=o("bart"),kSr=o(" \u2014 "),AY=a("a"),SSr=o("FlaxBartForConditionalGeneration"),RSr=o(" (BART model)"),PSr=l(),SC=a("li"),S7e=a("strong"),BSr=o("blenderbot"),ISr=o(" \u2014 "),yY=a("a"),qSr=o("FlaxBlenderbotForConditionalGeneration"),NSr=o(" (Blenderbot model)"),jSr=l(),RC=a("li"),R7e=a("strong"),DSr=o("blenderbot-small"),GSr=o(" \u2014 "),LY=a("a"),OSr=o("FlaxBlenderbotSmallForConditionalGeneration"),VSr=o(" (BlenderbotSmall model)"),XSr=l(),PC=a("li"),P7e=a("strong"),zSr=o("encoder-decoder"),WSr=o(" \u2014 "),xY=a("a"),QSr=o("FlaxEncoderDecoderModel"),HSr=o(" (Encoder decoder model)"),USr=l(),BC=a("li"),B7e=a("strong"),JSr=o("marian"),YSr=o(" \u2014 "),$Y=a("a"),KSr=o("FlaxMarianMTModel"),ZSr=o(" (Marian model)"),eRr=l(),IC=a("li"),I7e=a("strong"),oRr=o("mbart"),rRr=o(" \u2014 "),kY=a("a"),tRr=o("FlaxMBartForConditionalGeneration"),aRr=o(" (mBART model)"),nRr=l(),qC=a("li"),q7e=a("strong"),sRr=o("mt5"),lRr=o(" \u2014 "),SY=a("a"),iRr=o("FlaxMT5ForConditionalGeneration"),dRr=o(" (mT5 model)"),cRr=l(),NC=a("li"),N7e=a("strong"),fRr=o("pegasus"),mRr=o(" \u2014 "),RY=a("a"),gRr=o("FlaxPegasusForConditionalGeneration"),hRr=o(" (Pegasus model)"),pRr=l(),jC=a("li"),j7e=a("strong"),_Rr=o("t5"),uRr=o(" \u2014 "),PY=a("a"),bRr=o("FlaxT5ForConditionalGeneration"),vRr=o(" (T5 model)"),FRr=l(),F(DC.$$.fragment),WNe=l(),Vc=a("h2"),GC=a("a"),D7e=a("span"),F(N9.$$.fragment),TRr=l(),G7e=a("span"),MRr=o("FlaxAutoModelForSequenceClassification"),QNe=l(),_r=a("div"),F(j9.$$.fragment),ERr=l(),Xc=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BY=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),IY=a("a"),yRr=o("from_config()"),LRr=o(` class
method.`),xRr=l(),D9=a("p"),$Rr=o("This class cannot be instantiated directly using "),O7e=a("code"),kRr=o("__init__()"),SRr=o(" (throws an error)."),RRr=l(),Wt=a("div"),F(G9.$$.fragment),PRr=l(),V7e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IRr=l(),zc=a("p"),qRr=o(`Note:
Loading a model from its configuration file does `),X7e=a("strong"),NRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),F(OC.$$.fragment),VRr=l(),Xr=a("div"),F(O9.$$.fragment),XRr=l(),z7e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WRr=l(),vn=a("p"),QRr=o("The model class to instantiate is selected based on the "),W7e=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),Q7e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),ePr=l(),xe=a("ul"),VC=a("li"),U7e=a("strong"),oPr=o("albert"),rPr=o(" \u2014 "),NY=a("a"),tPr=o("FlaxAlbertForSequenceClassification"),aPr=o(" (ALBERT model)"),nPr=l(),XC=a("li"),J7e=a("strong"),sPr=o("bart"),lPr=o(" \u2014 "),jY=a("a"),iPr=o("FlaxBartForSequenceClassification"),dPr=o(" (BART model)"),cPr=l(),zC=a("li"),Y7e=a("strong"),fPr=o("bert"),mPr=o(" \u2014 "),DY=a("a"),gPr=o("FlaxBertForSequenceClassification"),hPr=o(" (BERT model)"),pPr=l(),WC=a("li"),K7e=a("strong"),_Pr=o("big_bird"),uPr=o(" \u2014 "),GY=a("a"),bPr=o("FlaxBigBirdForSequenceClassification"),vPr=o(" (BigBird model)"),FPr=l(),QC=a("li"),Z7e=a("strong"),TPr=o("distilbert"),MPr=o(" \u2014 "),OY=a("a"),EPr=o("FlaxDistilBertForSequenceClassification"),CPr=o(" (DistilBERT model)"),wPr=l(),HC=a("li"),eMe=a("strong"),APr=o("electra"),yPr=o(" \u2014 "),VY=a("a"),LPr=o("FlaxElectraForSequenceClassification"),xPr=o(" (ELECTRA model)"),$Pr=l(),UC=a("li"),oMe=a("strong"),kPr=o("mbart"),SPr=o(" \u2014 "),XY=a("a"),RPr=o("FlaxMBartForSequenceClassification"),PPr=o(" (mBART model)"),BPr=l(),JC=a("li"),rMe=a("strong"),IPr=o("roberta"),qPr=o(" \u2014 "),zY=a("a"),NPr=o("FlaxRobertaForSequenceClassification"),jPr=o(" (RoBERTa model)"),DPr=l(),YC=a("li"),tMe=a("strong"),GPr=o("roformer"),OPr=o(" \u2014 "),WY=a("a"),VPr=o("FlaxRoFormerForSequenceClassification"),XPr=o(" (RoFormer model)"),zPr=l(),KC=a("li"),aMe=a("strong"),WPr=o("xlm-roberta"),QPr=o(" \u2014 "),QY=a("a"),HPr=o("FlaxXLMRobertaForSequenceClassification"),UPr=o(" (XLM-RoBERTa model)"),JPr=l(),F(ZC.$$.fragment),HNe=l(),Wc=a("h2"),e5=a("a"),nMe=a("span"),F(V9.$$.fragment),YPr=l(),sMe=a("span"),KPr=o("FlaxAutoModelForQuestionAnswering"),UNe=l(),ur=a("div"),F(X9.$$.fragment),ZPr=l(),Qc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HY=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),UY=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),z9=a("p"),sBr=o("This class cannot be instantiated directly using "),lMe=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),Qt=a("div"),F(W9.$$.fragment),cBr=l(),iMe=a("p"),fBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mBr=l(),Hc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),hBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),_Br=o("from_pretrained()"),uBr=o(" to load the model weights."),bBr=l(),F(o5.$$.fragment),vBr=l(),zr=a("div"),F(Q9.$$.fragment),FBr=l(),cMe=a("p"),TBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MBr=l(),Fn=a("p"),EBr=o("The model class to instantiate is selected based on the "),fMe=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),mMe=a("code"),ABr=o("pretrained_model_name_or_path"),yBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),LBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),$e=a("ul"),r5=a("li"),hMe=a("strong"),kBr=o("albert"),SBr=o(" \u2014 "),YY=a("a"),RBr=o("FlaxAlbertForQuestionAnswering"),PBr=o(" (ALBERT model)"),BBr=l(),t5=a("li"),pMe=a("strong"),IBr=o("bart"),qBr=o(" \u2014 "),KY=a("a"),NBr=o("FlaxBartForQuestionAnswering"),jBr=o(" (BART model)"),DBr=l(),a5=a("li"),_Me=a("strong"),GBr=o("bert"),OBr=o(" \u2014 "),ZY=a("a"),VBr=o("FlaxBertForQuestionAnswering"),XBr=o(" (BERT model)"),zBr=l(),n5=a("li"),uMe=a("strong"),WBr=o("big_bird"),QBr=o(" \u2014 "),eK=a("a"),HBr=o("FlaxBigBirdForQuestionAnswering"),UBr=o(" (BigBird model)"),JBr=l(),s5=a("li"),bMe=a("strong"),YBr=o("distilbert"),KBr=o(" \u2014 "),oK=a("a"),ZBr=o("FlaxDistilBertForQuestionAnswering"),eIr=o(" (DistilBERT model)"),oIr=l(),l5=a("li"),vMe=a("strong"),rIr=o("electra"),tIr=o(" \u2014 "),rK=a("a"),aIr=o("FlaxElectraForQuestionAnswering"),nIr=o(" (ELECTRA model)"),sIr=l(),i5=a("li"),FMe=a("strong"),lIr=o("mbart"),iIr=o(" \u2014 "),tK=a("a"),dIr=o("FlaxMBartForQuestionAnswering"),cIr=o(" (mBART model)"),fIr=l(),d5=a("li"),TMe=a("strong"),mIr=o("roberta"),gIr=o(" \u2014 "),aK=a("a"),hIr=o("FlaxRobertaForQuestionAnswering"),pIr=o(" (RoBERTa model)"),_Ir=l(),c5=a("li"),MMe=a("strong"),uIr=o("roformer"),bIr=o(" \u2014 "),nK=a("a"),vIr=o("FlaxRoFormerForQuestionAnswering"),FIr=o(" (RoFormer model)"),TIr=l(),f5=a("li"),EMe=a("strong"),MIr=o("xlm-roberta"),EIr=o(" \u2014 "),sK=a("a"),CIr=o("FlaxXLMRobertaForQuestionAnswering"),wIr=o(" (XLM-RoBERTa model)"),AIr=l(),F(m5.$$.fragment),JNe=l(),Uc=a("h2"),g5=a("a"),CMe=a("span"),F(H9.$$.fragment),yIr=l(),wMe=a("span"),LIr=o("FlaxAutoModelForTokenClassification"),YNe=l(),br=a("div"),F(U9.$$.fragment),xIr=l(),Jc=a("p"),$Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lK=a("a"),kIr=o("from_pretrained()"),SIr=o(" class method or the "),iK=a("a"),RIr=o("from_config()"),PIr=o(` class
method.`),BIr=l(),J9=a("p"),IIr=o("This class cannot be instantiated directly using "),AMe=a("code"),qIr=o("__init__()"),NIr=o(" (throws an error)."),jIr=l(),Ht=a("div"),F(Y9.$$.fragment),DIr=l(),yMe=a("p"),GIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OIr=l(),Yc=a("p"),VIr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),XIr=o("not"),zIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),WIr=o("from_pretrained()"),QIr=o(" to load the model weights."),HIr=l(),F(h5.$$.fragment),UIr=l(),Wr=a("div"),F(K9.$$.fragment),JIr=l(),xMe=a("p"),YIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KIr=l(),Tn=a("p"),ZIr=o("The model class to instantiate is selected based on the "),$Me=a("code"),eqr=o("model_type"),oqr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),rqr=o("pretrained_model_name_or_path"),tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),aqr=o("pretrained_model_name_or_path"),nqr=o(":"),sqr=l(),De=a("ul"),p5=a("li"),RMe=a("strong"),lqr=o("albert"),iqr=o(" \u2014 "),cK=a("a"),dqr=o("FlaxAlbertForTokenClassification"),cqr=o(" (ALBERT model)"),fqr=l(),_5=a("li"),PMe=a("strong"),mqr=o("bert"),gqr=o(" \u2014 "),fK=a("a"),hqr=o("FlaxBertForTokenClassification"),pqr=o(" (BERT model)"),_qr=l(),u5=a("li"),BMe=a("strong"),uqr=o("big_bird"),bqr=o(" \u2014 "),mK=a("a"),vqr=o("FlaxBigBirdForTokenClassification"),Fqr=o(" (BigBird model)"),Tqr=l(),b5=a("li"),IMe=a("strong"),Mqr=o("distilbert"),Eqr=o(" \u2014 "),gK=a("a"),Cqr=o("FlaxDistilBertForTokenClassification"),wqr=o(" (DistilBERT model)"),Aqr=l(),v5=a("li"),qMe=a("strong"),yqr=o("electra"),Lqr=o(" \u2014 "),hK=a("a"),xqr=o("FlaxElectraForTokenClassification"),$qr=o(" (ELECTRA model)"),kqr=l(),F5=a("li"),NMe=a("strong"),Sqr=o("roberta"),Rqr=o(" \u2014 "),pK=a("a"),Pqr=o("FlaxRobertaForTokenClassification"),Bqr=o(" (RoBERTa model)"),Iqr=l(),T5=a("li"),jMe=a("strong"),qqr=o("roformer"),Nqr=o(" \u2014 "),_K=a("a"),jqr=o("FlaxRoFormerForTokenClassification"),Dqr=o(" (RoFormer model)"),Gqr=l(),M5=a("li"),DMe=a("strong"),Oqr=o("xlm-roberta"),Vqr=o(" \u2014 "),uK=a("a"),Xqr=o("FlaxXLMRobertaForTokenClassification"),zqr=o(" (XLM-RoBERTa model)"),Wqr=l(),F(E5.$$.fragment),KNe=l(),Kc=a("h2"),C5=a("a"),GMe=a("span"),F(Z9.$$.fragment),Qqr=l(),OMe=a("span"),Hqr=o("FlaxAutoModelForMultipleChoice"),ZNe=l(),vr=a("div"),F(ex.$$.fragment),Uqr=l(),Zc=a("p"),Jqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bK=a("a"),Yqr=o("from_pretrained()"),Kqr=o(" class method or the "),vK=a("a"),Zqr=o("from_config()"),eNr=o(` class
method.`),oNr=l(),ox=a("p"),rNr=o("This class cannot be instantiated directly using "),VMe=a("code"),tNr=o("__init__()"),aNr=o(" (throws an error)."),nNr=l(),Ut=a("div"),F(rx.$$.fragment),sNr=l(),XMe=a("p"),lNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iNr=l(),ef=a("p"),dNr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),cNr=o("not"),fNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),mNr=o("from_pretrained()"),gNr=o(" to load the model weights."),hNr=l(),F(w5.$$.fragment),pNr=l(),Qr=a("div"),F(tx.$$.fragment),_Nr=l(),WMe=a("p"),uNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bNr=l(),Mn=a("p"),vNr=o("The model class to instantiate is selected based on the "),QMe=a("code"),FNr=o("model_type"),TNr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),MNr=o("pretrained_model_name_or_path"),ENr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(":"),ANr=l(),Ge=a("ul"),A5=a("li"),JMe=a("strong"),yNr=o("albert"),LNr=o(" \u2014 "),TK=a("a"),xNr=o("FlaxAlbertForMultipleChoice"),$Nr=o(" (ALBERT model)"),kNr=l(),y5=a("li"),YMe=a("strong"),SNr=o("bert"),RNr=o(" \u2014 "),MK=a("a"),PNr=o("FlaxBertForMultipleChoice"),BNr=o(" (BERT model)"),INr=l(),L5=a("li"),KMe=a("strong"),qNr=o("big_bird"),NNr=o(" \u2014 "),EK=a("a"),jNr=o("FlaxBigBirdForMultipleChoice"),DNr=o(" (BigBird model)"),GNr=l(),x5=a("li"),ZMe=a("strong"),ONr=o("distilbert"),VNr=o(" \u2014 "),CK=a("a"),XNr=o("FlaxDistilBertForMultipleChoice"),zNr=o(" (DistilBERT model)"),WNr=l(),$5=a("li"),e4e=a("strong"),QNr=o("electra"),HNr=o(" \u2014 "),wK=a("a"),UNr=o("FlaxElectraForMultipleChoice"),JNr=o(" (ELECTRA model)"),YNr=l(),k5=a("li"),o4e=a("strong"),KNr=o("roberta"),ZNr=o(" \u2014 "),AK=a("a"),ejr=o("FlaxRobertaForMultipleChoice"),ojr=o(" (RoBERTa model)"),rjr=l(),S5=a("li"),r4e=a("strong"),tjr=o("roformer"),ajr=o(" \u2014 "),yK=a("a"),njr=o("FlaxRoFormerForMultipleChoice"),sjr=o(" (RoFormer model)"),ljr=l(),R5=a("li"),t4e=a("strong"),ijr=o("xlm-roberta"),djr=o(" \u2014 "),LK=a("a"),cjr=o("FlaxXLMRobertaForMultipleChoice"),fjr=o(" (XLM-RoBERTa model)"),mjr=l(),F(P5.$$.fragment),eje=l(),of=a("h2"),B5=a("a"),a4e=a("span"),F(ax.$$.fragment),gjr=l(),n4e=a("span"),hjr=o("FlaxAutoModelForNextSentencePrediction"),oje=l(),Fr=a("div"),F(nx.$$.fragment),pjr=l(),rf=a("p"),_jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xK=a("a"),ujr=o("from_pretrained()"),bjr=o(" class method or the "),$K=a("a"),vjr=o("from_config()"),Fjr=o(` class
method.`),Tjr=l(),sx=a("p"),Mjr=o("This class cannot be instantiated directly using "),s4e=a("code"),Ejr=o("__init__()"),Cjr=o(" (throws an error)."),wjr=l(),Jt=a("div"),F(lx.$$.fragment),Ajr=l(),l4e=a("p"),yjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ljr=l(),tf=a("p"),xjr=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),$jr=o("not"),kjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),Sjr=o("from_pretrained()"),Rjr=o(" to load the model weights."),Pjr=l(),F(I5.$$.fragment),Bjr=l(),Hr=a("div"),F(ix.$$.fragment),Ijr=l(),d4e=a("p"),qjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Njr=l(),En=a("p"),jjr=o("The model class to instantiate is selected based on the "),c4e=a("code"),Djr=o("model_type"),Gjr=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),Ojr=o("pretrained_model_name_or_path"),Vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(":"),Wjr=l(),g4e=a("ul"),q5=a("li"),h4e=a("strong"),Qjr=o("bert"),Hjr=o(" \u2014 "),SK=a("a"),Ujr=o("FlaxBertForNextSentencePrediction"),Jjr=o(" (BERT model)"),Yjr=l(),F(N5.$$.fragment),rje=l(),af=a("h2"),j5=a("a"),p4e=a("span"),F(dx.$$.fragment),Kjr=l(),_4e=a("span"),Zjr=o("FlaxAutoModelForImageClassification"),tje=l(),Tr=a("div"),F(cx.$$.fragment),eDr=l(),nf=a("p"),oDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RK=a("a"),rDr=o("from_pretrained()"),tDr=o(" class method or the "),PK=a("a"),aDr=o("from_config()"),nDr=o(` class
method.`),sDr=l(),fx=a("p"),lDr=o("This class cannot be instantiated directly using "),u4e=a("code"),iDr=o("__init__()"),dDr=o(" (throws an error)."),cDr=l(),Yt=a("div"),F(mx.$$.fragment),fDr=l(),b4e=a("p"),mDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gDr=l(),sf=a("p"),hDr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),pDr=o("not"),_Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),uDr=o("from_pretrained()"),bDr=o(" to load the model weights."),vDr=l(),F(D5.$$.fragment),FDr=l(),Ur=a("div"),F(gx.$$.fragment),TDr=l(),F4e=a("p"),MDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EDr=l(),Cn=a("p"),CDr=o("The model class to instantiate is selected based on the "),T4e=a("code"),wDr=o("model_type"),ADr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(":"),kDr=l(),hx=a("ul"),G5=a("li"),C4e=a("strong"),SDr=o("beit"),RDr=o(" \u2014 "),IK=a("a"),PDr=o("FlaxBeitForImageClassification"),BDr=o(" (BEiT model)"),IDr=l(),O5=a("li"),w4e=a("strong"),qDr=o("vit"),NDr=o(" \u2014 "),qK=a("a"),jDr=o("FlaxViTForImageClassification"),DDr=o(" (ViT model)"),GDr=l(),F(V5.$$.fragment),aje=l(),lf=a("h2"),X5=a("a"),A4e=a("span"),F(px.$$.fragment),ODr=l(),y4e=a("span"),VDr=o("FlaxAutoModelForVision2Seq"),nje=l(),Mr=a("div"),F(_x.$$.fragment),XDr=l(),df=a("p"),zDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=a("a"),WDr=o("from_pretrained()"),QDr=o(" class method or the "),jK=a("a"),HDr=o("from_config()"),UDr=o(` class
method.`),JDr=l(),ux=a("p"),YDr=o("This class cannot be instantiated directly using "),L4e=a("code"),KDr=o("__init__()"),ZDr=o(" (throws an error)."),eGr=l(),Kt=a("div"),F(bx.$$.fragment),oGr=l(),x4e=a("p"),rGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGr=l(),cf=a("p"),aGr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),nGr=o("not"),sGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),lGr=o("from_pretrained()"),iGr=o(" to load the model weights."),dGr=l(),F(z5.$$.fragment),cGr=l(),Jr=a("div"),F(vx.$$.fragment),fGr=l(),k4e=a("p"),mGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gGr=l(),wn=a("p"),hGr=o("The model class to instantiate is selected based on the "),S4e=a("code"),pGr=o("model_type"),_Gr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),uGr=o("pretrained_model_name_or_path"),bGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),vGr=o("pretrained_model_name_or_path"),FGr=o(":"),TGr=l(),B4e=a("ul"),W5=a("li"),I4e=a("strong"),MGr=o("vision-encoder-decoder"),EGr=o(" \u2014 "),GK=a("a"),CGr=o("FlaxVisionEncoderDecoderModel"),wGr=o(" (Vision Encoder decoder model)"),AGr=l(),F(Q5.$$.fragment),this.h()},l(f){const u=BLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Fx=s(p);m=n(Fx,"A",{id:!0,class:!0,href:!0});var q4e=s(m);_=n(q4e,"SPAN",{});var N4e=s(_);T(d.$$.fragment,N4e),N4e.forEach(t),q4e.forEach(t),h=i(Fx),Mo=n(Fx,"SPAN",{});var j4e=s(Mo);ci=r(j4e,"Auto Classes"),j4e.forEach(t),Fx.forEach(t),hf=i(f),rt=n(f,"P",{});var Tx=s(rt);fi=r(Tx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(Tx,"CODE",{});var D4e=s(mi);f0=r(D4e,"from_pretrained()"),D4e.forEach(t),pf=r(Tx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var G4e=s(yn);m0=r(G4e,"AutoConfig"),G4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var O4e=s(xn);g0=r(O4e,"AutoModel"),O4e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var V4e=s($n);h0=r(V4e,"AutoTokenizer"),V4e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Mx=s(Ae);S$=r(Mx,"will create a model that is an instance of "),_i=n(Mx,"A",{href:!0});var X4e=s(_i);R$=r(X4e,"BertModel"),X4e.forEach(t),P$=r(Mx,"."),Mx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ex=s(wa);B$=r(Ex,"There is one class of "),uf=n(Ex,"CODE",{});var z4e=s(uf);I$=r(z4e,"AutoModel"),z4e.forEach(t),hGe=r(Ex," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ex.forEach(t),tqe=i(f),ui=n(f,"H2",{class:!0});var Cx=s(ui);bf=n(Cx,"A",{id:!0,class:!0,href:!0});var W4e=s(bf);Pee=n(W4e,"SPAN",{});var Q4e=s(Pee);T(p0.$$.fragment,Q4e),Q4e.forEach(t),W4e.forEach(t),pGe=i(Cx),Bee=n(Cx,"SPAN",{});var H4e=s(Bee);_Ge=r(H4e,"Extending the Auto Classes"),H4e.forEach(t),Cx.forEach(t),aqe=i(f),kn=n(f,"P",{});var ff=s(kn);uGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Iee=n(ff,"CODE",{});var U4e=s(Iee);bGe=r(U4e,"NewModel"),U4e.forEach(t),vGe=r(ff,", make sure you have a "),qee=n(ff,"CODE",{});var J4e=s(qee);FGe=r(J4e,"NewModelConfig"),J4e.forEach(t),TGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),nqe=i(f),T(_0.$$.fragment,f),sqe=i(f),q$=n(f,"P",{});var Y4e=s(q$);MGe=r(Y4e,"You will then be able to use the auto classes like you would usually do!"),Y4e.forEach(t),lqe=i(f),T(vf.$$.fragment,f),iqe=i(f),bi=n(f,"H2",{class:!0});var wx=s(bi);Ff=n(wx,"A",{id:!0,class:!0,href:!0});var K4e=s(Ff);Nee=n(K4e,"SPAN",{});var Z4e=s(Nee);T(u0.$$.fragment,Z4e),Z4e.forEach(t),K4e.forEach(t),EGe=i(wx),jee=n(wx,"SPAN",{});var eEe=s(jee);CGe=r(eEe,"AutoConfig"),eEe.forEach(t),wx.forEach(t),dqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(b0.$$.fragment,et),wGe=i(et),v0=n(et,"P",{});var Ax=s(v0);AGe=r(Ax,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),N$=n(Ax,"A",{href:!0});var oEe=s(N$);yGe=r(oEe,"from_pretrained()"),oEe.forEach(t),LGe=r(Ax," class method."),Ax.forEach(t),xGe=i(et),F0=n(et,"P",{});var yx=s(F0);$Ge=r(yx,"This class cannot be instantiated directly using "),Dee=n(yx,"CODE",{});var rEe=s(Dee);kGe=r(rEe,"__init__()"),rEe.forEach(t),SGe=r(yx," (throws an error)."),yx.forEach(t),RGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(T0.$$.fragment,ot),PGe=i(ot),Gee=n(ot,"P",{});var tEe=s(Gee);BGe=r(tEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tEe.forEach(t),IGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);qGe=r(mf,"The configuration class to instantiate is selected based on the "),Oee=n(mf,"CODE",{});var aEe=s(Oee);NGe=r(aEe,"model_type"),aEe.forEach(t),jGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vee=n(mf,"CODE",{});var nEe=s(Vee);DGe=r(nEe,"pretrained_model_name_or_path"),nEe.forEach(t),GGe=r(mf,":"),mf.forEach(t),OGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var H5=s(Tf);Xee=n(H5,"STRONG",{});var sEe=s(Xee);VGe=r(sEe,"albert"),sEe.forEach(t),XGe=r(H5," \u2014 "),j$=n(H5,"A",{href:!0});var lEe=s(j$);zGe=r(lEe,"AlbertConfig"),lEe.forEach(t),WGe=r(H5," (ALBERT model)"),H5.forEach(t),QGe=i(y),Mf=n(y,"LI",{});var U5=s(Mf);zee=n(U5,"STRONG",{});var iEe=s(zee);HGe=r(iEe,"bart"),iEe.forEach(t),UGe=r(U5," \u2014 "),D$=n(U5,"A",{href:!0});var dEe=s(D$);JGe=r(dEe,"BartConfig"),dEe.forEach(t),YGe=r(U5," (BART model)"),U5.forEach(t),KGe=i(y),Ef=n(y,"LI",{});var J5=s(Ef);Wee=n(J5,"STRONG",{});var cEe=s(Wee);ZGe=r(cEe,"beit"),cEe.forEach(t),eOe=r(J5," \u2014 "),G$=n(J5,"A",{href:!0});var fEe=s(G$);oOe=r(fEe,"BeitConfig"),fEe.forEach(t),rOe=r(J5," (BEiT model)"),J5.forEach(t),tOe=i(y),Cf=n(y,"LI",{});var Y5=s(Cf);Qee=n(Y5,"STRONG",{});var mEe=s(Qee);aOe=r(mEe,"bert"),mEe.forEach(t),nOe=r(Y5," \u2014 "),O$=n(Y5,"A",{href:!0});var gEe=s(O$);sOe=r(gEe,"BertConfig"),gEe.forEach(t),lOe=r(Y5," (BERT model)"),Y5.forEach(t),iOe=i(y),wf=n(y,"LI",{});var K5=s(wf);Hee=n(K5,"STRONG",{});var hEe=s(Hee);dOe=r(hEe,"bert-generation"),hEe.forEach(t),cOe=r(K5," \u2014 "),V$=n(K5,"A",{href:!0});var pEe=s(V$);fOe=r(pEe,"BertGenerationConfig"),pEe.forEach(t),mOe=r(K5," (Bert Generation model)"),K5.forEach(t),gOe=i(y),Af=n(y,"LI",{});var Z5=s(Af);Uee=n(Z5,"STRONG",{});var _Ee=s(Uee);hOe=r(_Ee,"big_bird"),_Ee.forEach(t),pOe=r(Z5," \u2014 "),X$=n(Z5,"A",{href:!0});var uEe=s(X$);_Oe=r(uEe,"BigBirdConfig"),uEe.forEach(t),uOe=r(Z5," (BigBird model)"),Z5.forEach(t),bOe=i(y),yf=n(y,"LI",{});var e3=s(yf);Jee=n(e3,"STRONG",{});var bEe=s(Jee);vOe=r(bEe,"bigbird_pegasus"),bEe.forEach(t),FOe=r(e3," \u2014 "),z$=n(e3,"A",{href:!0});var vEe=s(z$);TOe=r(vEe,"BigBirdPegasusConfig"),vEe.forEach(t),MOe=r(e3," (BigBirdPegasus model)"),e3.forEach(t),EOe=i(y),Lf=n(y,"LI",{});var o3=s(Lf);Yee=n(o3,"STRONG",{});var FEe=s(Yee);COe=r(FEe,"blenderbot"),FEe.forEach(t),wOe=r(o3," \u2014 "),W$=n(o3,"A",{href:!0});var TEe=s(W$);AOe=r(TEe,"BlenderbotConfig"),TEe.forEach(t),yOe=r(o3," (Blenderbot model)"),o3.forEach(t),LOe=i(y),xf=n(y,"LI",{});var r3=s(xf);Kee=n(r3,"STRONG",{});var MEe=s(Kee);xOe=r(MEe,"blenderbot-small"),MEe.forEach(t),$Oe=r(r3," \u2014 "),Q$=n(r3,"A",{href:!0});var EEe=s(Q$);kOe=r(EEe,"BlenderbotSmallConfig"),EEe.forEach(t),SOe=r(r3," (BlenderbotSmall model)"),r3.forEach(t),ROe=i(y),$f=n(y,"LI",{});var t3=s($f);Zee=n(t3,"STRONG",{});var CEe=s(Zee);POe=r(CEe,"camembert"),CEe.forEach(t),BOe=r(t3," \u2014 "),H$=n(t3,"A",{href:!0});var wEe=s(H$);IOe=r(wEe,"CamembertConfig"),wEe.forEach(t),qOe=r(t3," (CamemBERT model)"),t3.forEach(t),NOe=i(y),kf=n(y,"LI",{});var a3=s(kf);eoe=n(a3,"STRONG",{});var AEe=s(eoe);jOe=r(AEe,"canine"),AEe.forEach(t),DOe=r(a3," \u2014 "),U$=n(a3,"A",{href:!0});var yEe=s(U$);GOe=r(yEe,"CanineConfig"),yEe.forEach(t),OOe=r(a3," (Canine model)"),a3.forEach(t),VOe=i(y),Sf=n(y,"LI",{});var n3=s(Sf);ooe=n(n3,"STRONG",{});var LEe=s(ooe);XOe=r(LEe,"clip"),LEe.forEach(t),zOe=r(n3," \u2014 "),J$=n(n3,"A",{href:!0});var xEe=s(J$);WOe=r(xEe,"CLIPConfig"),xEe.forEach(t),QOe=r(n3," (CLIP model)"),n3.forEach(t),HOe=i(y),Rf=n(y,"LI",{});var s3=s(Rf);roe=n(s3,"STRONG",{});var $Ee=s(roe);UOe=r($Ee,"convbert"),$Ee.forEach(t),JOe=r(s3," \u2014 "),Y$=n(s3,"A",{href:!0});var kEe=s(Y$);YOe=r(kEe,"ConvBertConfig"),kEe.forEach(t),KOe=r(s3," (ConvBERT model)"),s3.forEach(t),ZOe=i(y),Pf=n(y,"LI",{});var l3=s(Pf);toe=n(l3,"STRONG",{});var SEe=s(toe);eVe=r(SEe,"convnext"),SEe.forEach(t),oVe=r(l3," \u2014 "),K$=n(l3,"A",{href:!0});var REe=s(K$);rVe=r(REe,"ConvNextConfig"),REe.forEach(t),tVe=r(l3," (ConvNext model)"),l3.forEach(t),aVe=i(y),Bf=n(y,"LI",{});var i3=s(Bf);aoe=n(i3,"STRONG",{});var PEe=s(aoe);nVe=r(PEe,"ctrl"),PEe.forEach(t),sVe=r(i3," \u2014 "),Z$=n(i3,"A",{href:!0});var BEe=s(Z$);lVe=r(BEe,"CTRLConfig"),BEe.forEach(t),iVe=r(i3," (CTRL model)"),i3.forEach(t),dVe=i(y),If=n(y,"LI",{});var d3=s(If);noe=n(d3,"STRONG",{});var IEe=s(noe);cVe=r(IEe,"cvt"),IEe.forEach(t),fVe=r(d3," \u2014 "),ek=n(d3,"A",{href:!0});var qEe=s(ek);mVe=r(qEe,"CvtConfig"),qEe.forEach(t),gVe=r(d3," (CvT model)"),d3.forEach(t),hVe=i(y),qf=n(y,"LI",{});var c3=s(qf);soe=n(c3,"STRONG",{});var NEe=s(soe);pVe=r(NEe,"data2vec-audio"),NEe.forEach(t),_Ve=r(c3," \u2014 "),ok=n(c3,"A",{href:!0});var jEe=s(ok);uVe=r(jEe,"Data2VecAudioConfig"),jEe.forEach(t),bVe=r(c3," (Data2VecAudio model)"),c3.forEach(t),vVe=i(y),Nf=n(y,"LI",{});var f3=s(Nf);loe=n(f3,"STRONG",{});var DEe=s(loe);FVe=r(DEe,"data2vec-text"),DEe.forEach(t),TVe=r(f3," \u2014 "),rk=n(f3,"A",{href:!0});var GEe=s(rk);MVe=r(GEe,"Data2VecTextConfig"),GEe.forEach(t),EVe=r(f3," (Data2VecText model)"),f3.forEach(t),CVe=i(y),jf=n(y,"LI",{});var m3=s(jf);ioe=n(m3,"STRONG",{});var OEe=s(ioe);wVe=r(OEe,"data2vec-vision"),OEe.forEach(t),AVe=r(m3," \u2014 "),tk=n(m3,"A",{href:!0});var VEe=s(tk);yVe=r(VEe,"Data2VecVisionConfig"),VEe.forEach(t),LVe=r(m3," (Data2VecVision model)"),m3.forEach(t),xVe=i(y),Df=n(y,"LI",{});var g3=s(Df);doe=n(g3,"STRONG",{});var XEe=s(doe);$Ve=r(XEe,"deberta"),XEe.forEach(t),kVe=r(g3," \u2014 "),ak=n(g3,"A",{href:!0});var zEe=s(ak);SVe=r(zEe,"DebertaConfig"),zEe.forEach(t),RVe=r(g3," (DeBERTa model)"),g3.forEach(t),PVe=i(y),Gf=n(y,"LI",{});var h3=s(Gf);coe=n(h3,"STRONG",{});var WEe=s(coe);BVe=r(WEe,"deberta-v2"),WEe.forEach(t),IVe=r(h3," \u2014 "),nk=n(h3,"A",{href:!0});var QEe=s(nk);qVe=r(QEe,"DebertaV2Config"),QEe.forEach(t),NVe=r(h3," (DeBERTa-v2 model)"),h3.forEach(t),jVe=i(y),Of=n(y,"LI",{});var p3=s(Of);foe=n(p3,"STRONG",{});var HEe=s(foe);DVe=r(HEe,"decision_transformer"),HEe.forEach(t),GVe=r(p3," \u2014 "),sk=n(p3,"A",{href:!0});var UEe=s(sk);OVe=r(UEe,"DecisionTransformerConfig"),UEe.forEach(t),VVe=r(p3," (Decision Transformer model)"),p3.forEach(t),XVe=i(y),Vf=n(y,"LI",{});var _3=s(Vf);moe=n(_3,"STRONG",{});var JEe=s(moe);zVe=r(JEe,"deit"),JEe.forEach(t),WVe=r(_3," \u2014 "),lk=n(_3,"A",{href:!0});var LGr=s(lk);QVe=r(LGr,"DeiTConfig"),LGr.forEach(t),HVe=r(_3," (DeiT model)"),_3.forEach(t),UVe=i(y),Xf=n(y,"LI",{});var YEe=s(Xf);goe=n(YEe,"STRONG",{});var xGr=s(goe);JVe=r(xGr,"detr"),xGr.forEach(t),YVe=r(YEe," \u2014 "),ik=n(YEe,"A",{href:!0});var $Gr=s(ik);KVe=r($Gr,"DetrConfig"),$Gr.forEach(t),ZVe=r(YEe," (DETR model)"),YEe.forEach(t),eXe=i(y),zf=n(y,"LI",{});var KEe=s(zf);hoe=n(KEe,"STRONG",{});var kGr=s(hoe);oXe=r(kGr,"distilbert"),kGr.forEach(t),rXe=r(KEe," \u2014 "),dk=n(KEe,"A",{href:!0});var SGr=s(dk);tXe=r(SGr,"DistilBertConfig"),SGr.forEach(t),aXe=r(KEe," (DistilBERT model)"),KEe.forEach(t),nXe=i(y),Wf=n(y,"LI",{});var ZEe=s(Wf);poe=n(ZEe,"STRONG",{});var RGr=s(poe);sXe=r(RGr,"dpr"),RGr.forEach(t),lXe=r(ZEe," \u2014 "),ck=n(ZEe,"A",{href:!0});var PGr=s(ck);iXe=r(PGr,"DPRConfig"),PGr.forEach(t),dXe=r(ZEe," (DPR model)"),ZEe.forEach(t),cXe=i(y),Qf=n(y,"LI",{});var eCe=s(Qf);_oe=n(eCe,"STRONG",{});var BGr=s(_oe);fXe=r(BGr,"dpt"),BGr.forEach(t),mXe=r(eCe," \u2014 "),fk=n(eCe,"A",{href:!0});var IGr=s(fk);gXe=r(IGr,"DPTConfig"),IGr.forEach(t),hXe=r(eCe," (DPT model)"),eCe.forEach(t),pXe=i(y),Hf=n(y,"LI",{});var oCe=s(Hf);uoe=n(oCe,"STRONG",{});var qGr=s(uoe);_Xe=r(qGr,"electra"),qGr.forEach(t),uXe=r(oCe," \u2014 "),mk=n(oCe,"A",{href:!0});var NGr=s(mk);bXe=r(NGr,"ElectraConfig"),NGr.forEach(t),vXe=r(oCe," (ELECTRA model)"),oCe.forEach(t),FXe=i(y),Uf=n(y,"LI",{});var rCe=s(Uf);boe=n(rCe,"STRONG",{});var jGr=s(boe);TXe=r(jGr,"encoder-decoder"),jGr.forEach(t),MXe=r(rCe," \u2014 "),gk=n(rCe,"A",{href:!0});var DGr=s(gk);EXe=r(DGr,"EncoderDecoderConfig"),DGr.forEach(t),CXe=r(rCe," (Encoder decoder model)"),rCe.forEach(t),wXe=i(y),Jf=n(y,"LI",{});var tCe=s(Jf);voe=n(tCe,"STRONG",{});var GGr=s(voe);AXe=r(GGr,"flaubert"),GGr.forEach(t),yXe=r(tCe," \u2014 "),hk=n(tCe,"A",{href:!0});var OGr=s(hk);LXe=r(OGr,"FlaubertConfig"),OGr.forEach(t),xXe=r(tCe," (FlauBERT model)"),tCe.forEach(t),$Xe=i(y),Yf=n(y,"LI",{});var aCe=s(Yf);Foe=n(aCe,"STRONG",{});var VGr=s(Foe);kXe=r(VGr,"flava"),VGr.forEach(t),SXe=r(aCe," \u2014 "),pk=n(aCe,"A",{href:!0});var XGr=s(pk);RXe=r(XGr,"FlavaConfig"),XGr.forEach(t),PXe=r(aCe," (Flava model)"),aCe.forEach(t),BXe=i(y),Kf=n(y,"LI",{});var nCe=s(Kf);Toe=n(nCe,"STRONG",{});var zGr=s(Toe);IXe=r(zGr,"fnet"),zGr.forEach(t),qXe=r(nCe," \u2014 "),_k=n(nCe,"A",{href:!0});var WGr=s(_k);NXe=r(WGr,"FNetConfig"),WGr.forEach(t),jXe=r(nCe," (FNet model)"),nCe.forEach(t),DXe=i(y),Zf=n(y,"LI",{});var sCe=s(Zf);Moe=n(sCe,"STRONG",{});var QGr=s(Moe);GXe=r(QGr,"fsmt"),QGr.forEach(t),OXe=r(sCe," \u2014 "),uk=n(sCe,"A",{href:!0});var HGr=s(uk);VXe=r(HGr,"FSMTConfig"),HGr.forEach(t),XXe=r(sCe," (FairSeq Machine-Translation model)"),sCe.forEach(t),zXe=i(y),em=n(y,"LI",{});var lCe=s(em);Eoe=n(lCe,"STRONG",{});var UGr=s(Eoe);WXe=r(UGr,"funnel"),UGr.forEach(t),QXe=r(lCe," \u2014 "),bk=n(lCe,"A",{href:!0});var JGr=s(bk);HXe=r(JGr,"FunnelConfig"),JGr.forEach(t),UXe=r(lCe," (Funnel Transformer model)"),lCe.forEach(t),JXe=i(y),om=n(y,"LI",{});var iCe=s(om);Coe=n(iCe,"STRONG",{});var YGr=s(Coe);YXe=r(YGr,"glpn"),YGr.forEach(t),KXe=r(iCe," \u2014 "),vk=n(iCe,"A",{href:!0});var KGr=s(vk);ZXe=r(KGr,"GLPNConfig"),KGr.forEach(t),eze=r(iCe," (GLPN model)"),iCe.forEach(t),oze=i(y),rm=n(y,"LI",{});var dCe=s(rm);woe=n(dCe,"STRONG",{});var ZGr=s(woe);rze=r(ZGr,"gpt2"),ZGr.forEach(t),tze=r(dCe," \u2014 "),Fk=n(dCe,"A",{href:!0});var eOr=s(Fk);aze=r(eOr,"GPT2Config"),eOr.forEach(t),nze=r(dCe," (OpenAI GPT-2 model)"),dCe.forEach(t),sze=i(y),tm=n(y,"LI",{});var cCe=s(tm);Aoe=n(cCe,"STRONG",{});var oOr=s(Aoe);lze=r(oOr,"gpt_neo"),oOr.forEach(t),ize=r(cCe," \u2014 "),Tk=n(cCe,"A",{href:!0});var rOr=s(Tk);dze=r(rOr,"GPTNeoConfig"),rOr.forEach(t),cze=r(cCe," (GPT Neo model)"),cCe.forEach(t),fze=i(y),am=n(y,"LI",{});var fCe=s(am);yoe=n(fCe,"STRONG",{});var tOr=s(yoe);mze=r(tOr,"gptj"),tOr.forEach(t),gze=r(fCe," \u2014 "),Mk=n(fCe,"A",{href:!0});var aOr=s(Mk);hze=r(aOr,"GPTJConfig"),aOr.forEach(t),pze=r(fCe," (GPT-J model)"),fCe.forEach(t),_ze=i(y),nm=n(y,"LI",{});var mCe=s(nm);Loe=n(mCe,"STRONG",{});var nOr=s(Loe);uze=r(nOr,"hubert"),nOr.forEach(t),bze=r(mCe," \u2014 "),Ek=n(mCe,"A",{href:!0});var sOr=s(Ek);vze=r(sOr,"HubertConfig"),sOr.forEach(t),Fze=r(mCe," (Hubert model)"),mCe.forEach(t),Tze=i(y),sm=n(y,"LI",{});var gCe=s(sm);xoe=n(gCe,"STRONG",{});var lOr=s(xoe);Mze=r(lOr,"ibert"),lOr.forEach(t),Eze=r(gCe," \u2014 "),Ck=n(gCe,"A",{href:!0});var iOr=s(Ck);Cze=r(iOr,"IBertConfig"),iOr.forEach(t),wze=r(gCe," (I-BERT model)"),gCe.forEach(t),Aze=i(y),lm=n(y,"LI",{});var hCe=s(lm);$oe=n(hCe,"STRONG",{});var dOr=s($oe);yze=r(dOr,"imagegpt"),dOr.forEach(t),Lze=r(hCe," \u2014 "),wk=n(hCe,"A",{href:!0});var cOr=s(wk);xze=r(cOr,"ImageGPTConfig"),cOr.forEach(t),$ze=r(hCe," (ImageGPT model)"),hCe.forEach(t),kze=i(y),im=n(y,"LI",{});var pCe=s(im);koe=n(pCe,"STRONG",{});var fOr=s(koe);Sze=r(fOr,"layoutlm"),fOr.forEach(t),Rze=r(pCe," \u2014 "),Ak=n(pCe,"A",{href:!0});var mOr=s(Ak);Pze=r(mOr,"LayoutLMConfig"),mOr.forEach(t),Bze=r(pCe," (LayoutLM model)"),pCe.forEach(t),Ize=i(y),dm=n(y,"LI",{});var _Ce=s(dm);Soe=n(_Ce,"STRONG",{});var gOr=s(Soe);qze=r(gOr,"layoutlmv2"),gOr.forEach(t),Nze=r(_Ce," \u2014 "),yk=n(_Ce,"A",{href:!0});var hOr=s(yk);jze=r(hOr,"LayoutLMv2Config"),hOr.forEach(t),Dze=r(_Ce," (LayoutLMv2 model)"),_Ce.forEach(t),Gze=i(y),cm=n(y,"LI",{});var uCe=s(cm);Roe=n(uCe,"STRONG",{});var pOr=s(Roe);Oze=r(pOr,"led"),pOr.forEach(t),Vze=r(uCe," \u2014 "),Lk=n(uCe,"A",{href:!0});var _Or=s(Lk);Xze=r(_Or,"LEDConfig"),_Or.forEach(t),zze=r(uCe," (LED model)"),uCe.forEach(t),Wze=i(y),fm=n(y,"LI",{});var bCe=s(fm);Poe=n(bCe,"STRONG",{});var uOr=s(Poe);Qze=r(uOr,"longformer"),uOr.forEach(t),Hze=r(bCe," \u2014 "),xk=n(bCe,"A",{href:!0});var bOr=s(xk);Uze=r(bOr,"LongformerConfig"),bOr.forEach(t),Jze=r(bCe," (Longformer model)"),bCe.forEach(t),Yze=i(y),mm=n(y,"LI",{});var vCe=s(mm);Boe=n(vCe,"STRONG",{});var vOr=s(Boe);Kze=r(vOr,"luke"),vOr.forEach(t),Zze=r(vCe," \u2014 "),$k=n(vCe,"A",{href:!0});var FOr=s($k);eWe=r(FOr,"LukeConfig"),FOr.forEach(t),oWe=r(vCe," (LUKE model)"),vCe.forEach(t),rWe=i(y),gm=n(y,"LI",{});var FCe=s(gm);Ioe=n(FCe,"STRONG",{});var TOr=s(Ioe);tWe=r(TOr,"lxmert"),TOr.forEach(t),aWe=r(FCe," \u2014 "),kk=n(FCe,"A",{href:!0});var MOr=s(kk);nWe=r(MOr,"LxmertConfig"),MOr.forEach(t),sWe=r(FCe," (LXMERT model)"),FCe.forEach(t),lWe=i(y),hm=n(y,"LI",{});var TCe=s(hm);qoe=n(TCe,"STRONG",{});var EOr=s(qoe);iWe=r(EOr,"m2m_100"),EOr.forEach(t),dWe=r(TCe," \u2014 "),Sk=n(TCe,"A",{href:!0});var COr=s(Sk);cWe=r(COr,"M2M100Config"),COr.forEach(t),fWe=r(TCe," (M2M100 model)"),TCe.forEach(t),mWe=i(y),pm=n(y,"LI",{});var MCe=s(pm);Noe=n(MCe,"STRONG",{});var wOr=s(Noe);gWe=r(wOr,"marian"),wOr.forEach(t),hWe=r(MCe," \u2014 "),Rk=n(MCe,"A",{href:!0});var AOr=s(Rk);pWe=r(AOr,"MarianConfig"),AOr.forEach(t),_We=r(MCe," (Marian model)"),MCe.forEach(t),uWe=i(y),_m=n(y,"LI",{});var ECe=s(_m);joe=n(ECe,"STRONG",{});var yOr=s(joe);bWe=r(yOr,"maskformer"),yOr.forEach(t),vWe=r(ECe," \u2014 "),Pk=n(ECe,"A",{href:!0});var LOr=s(Pk);FWe=r(LOr,"MaskFormerConfig"),LOr.forEach(t),TWe=r(ECe," (MaskFormer model)"),ECe.forEach(t),MWe=i(y),um=n(y,"LI",{});var CCe=s(um);Doe=n(CCe,"STRONG",{});var xOr=s(Doe);EWe=r(xOr,"mbart"),xOr.forEach(t),CWe=r(CCe," \u2014 "),Bk=n(CCe,"A",{href:!0});var $Or=s(Bk);wWe=r($Or,"MBartConfig"),$Or.forEach(t),AWe=r(CCe," (mBART model)"),CCe.forEach(t),yWe=i(y),bm=n(y,"LI",{});var wCe=s(bm);Goe=n(wCe,"STRONG",{});var kOr=s(Goe);LWe=r(kOr,"megatron-bert"),kOr.forEach(t),xWe=r(wCe," \u2014 "),Ik=n(wCe,"A",{href:!0});var SOr=s(Ik);$We=r(SOr,"MegatronBertConfig"),SOr.forEach(t),kWe=r(wCe," (MegatronBert model)"),wCe.forEach(t),SWe=i(y),vm=n(y,"LI",{});var ACe=s(vm);Ooe=n(ACe,"STRONG",{});var ROr=s(Ooe);RWe=r(ROr,"mobilebert"),ROr.forEach(t),PWe=r(ACe," \u2014 "),qk=n(ACe,"A",{href:!0});var POr=s(qk);BWe=r(POr,"MobileBertConfig"),POr.forEach(t),IWe=r(ACe," (MobileBERT model)"),ACe.forEach(t),qWe=i(y),Fm=n(y,"LI",{});var yCe=s(Fm);Voe=n(yCe,"STRONG",{});var BOr=s(Voe);NWe=r(BOr,"mpnet"),BOr.forEach(t),jWe=r(yCe," \u2014 "),Nk=n(yCe,"A",{href:!0});var IOr=s(Nk);DWe=r(IOr,"MPNetConfig"),IOr.forEach(t),GWe=r(yCe," (MPNet model)"),yCe.forEach(t),OWe=i(y),Tm=n(y,"LI",{});var LCe=s(Tm);Xoe=n(LCe,"STRONG",{});var qOr=s(Xoe);VWe=r(qOr,"mt5"),qOr.forEach(t),XWe=r(LCe," \u2014 "),jk=n(LCe,"A",{href:!0});var NOr=s(jk);zWe=r(NOr,"MT5Config"),NOr.forEach(t),WWe=r(LCe," (mT5 model)"),LCe.forEach(t),QWe=i(y),Mm=n(y,"LI",{});var xCe=s(Mm);zoe=n(xCe,"STRONG",{});var jOr=s(zoe);HWe=r(jOr,"nystromformer"),jOr.forEach(t),UWe=r(xCe," \u2014 "),Dk=n(xCe,"A",{href:!0});var DOr=s(Dk);JWe=r(DOr,"NystromformerConfig"),DOr.forEach(t),YWe=r(xCe," (Nystromformer model)"),xCe.forEach(t),KWe=i(y),Em=n(y,"LI",{});var $Ce=s(Em);Woe=n($Ce,"STRONG",{});var GOr=s(Woe);ZWe=r(GOr,"openai-gpt"),GOr.forEach(t),eQe=r($Ce," \u2014 "),Gk=n($Ce,"A",{href:!0});var OOr=s(Gk);oQe=r(OOr,"OpenAIGPTConfig"),OOr.forEach(t),rQe=r($Ce," (OpenAI GPT model)"),$Ce.forEach(t),tQe=i(y),Cm=n(y,"LI",{});var kCe=s(Cm);Qoe=n(kCe,"STRONG",{});var VOr=s(Qoe);aQe=r(VOr,"opt"),VOr.forEach(t),nQe=r(kCe," \u2014 "),Ok=n(kCe,"A",{href:!0});var XOr=s(Ok);sQe=r(XOr,"OPTConfig"),XOr.forEach(t),lQe=r(kCe," (OPT model)"),kCe.forEach(t),iQe=i(y),wm=n(y,"LI",{});var SCe=s(wm);Hoe=n(SCe,"STRONG",{});var zOr=s(Hoe);dQe=r(zOr,"pegasus"),zOr.forEach(t),cQe=r(SCe," \u2014 "),Vk=n(SCe,"A",{href:!0});var WOr=s(Vk);fQe=r(WOr,"PegasusConfig"),WOr.forEach(t),mQe=r(SCe," (Pegasus model)"),SCe.forEach(t),gQe=i(y),Am=n(y,"LI",{});var RCe=s(Am);Uoe=n(RCe,"STRONG",{});var QOr=s(Uoe);hQe=r(QOr,"perceiver"),QOr.forEach(t),pQe=r(RCe," \u2014 "),Xk=n(RCe,"A",{href:!0});var HOr=s(Xk);_Qe=r(HOr,"PerceiverConfig"),HOr.forEach(t),uQe=r(RCe," (Perceiver model)"),RCe.forEach(t),bQe=i(y),ym=n(y,"LI",{});var PCe=s(ym);Joe=n(PCe,"STRONG",{});var UOr=s(Joe);vQe=r(UOr,"plbart"),UOr.forEach(t),FQe=r(PCe," \u2014 "),zk=n(PCe,"A",{href:!0});var JOr=s(zk);TQe=r(JOr,"PLBartConfig"),JOr.forEach(t),MQe=r(PCe," (PLBart model)"),PCe.forEach(t),EQe=i(y),Lm=n(y,"LI",{});var BCe=s(Lm);Yoe=n(BCe,"STRONG",{});var YOr=s(Yoe);CQe=r(YOr,"poolformer"),YOr.forEach(t),wQe=r(BCe," \u2014 "),Wk=n(BCe,"A",{href:!0});var KOr=s(Wk);AQe=r(KOr,"PoolFormerConfig"),KOr.forEach(t),yQe=r(BCe," (PoolFormer model)"),BCe.forEach(t),LQe=i(y),xm=n(y,"LI",{});var ICe=s(xm);Koe=n(ICe,"STRONG",{});var ZOr=s(Koe);xQe=r(ZOr,"prophetnet"),ZOr.forEach(t),$Qe=r(ICe," \u2014 "),Qk=n(ICe,"A",{href:!0});var eVr=s(Qk);kQe=r(eVr,"ProphetNetConfig"),eVr.forEach(t),SQe=r(ICe," (ProphetNet model)"),ICe.forEach(t),RQe=i(y),$m=n(y,"LI",{});var qCe=s($m);Zoe=n(qCe,"STRONG",{});var oVr=s(Zoe);PQe=r(oVr,"qdqbert"),oVr.forEach(t),BQe=r(qCe," \u2014 "),Hk=n(qCe,"A",{href:!0});var rVr=s(Hk);IQe=r(rVr,"QDQBertConfig"),rVr.forEach(t),qQe=r(qCe," (QDQBert model)"),qCe.forEach(t),NQe=i(y),km=n(y,"LI",{});var NCe=s(km);ere=n(NCe,"STRONG",{});var tVr=s(ere);jQe=r(tVr,"rag"),tVr.forEach(t),DQe=r(NCe," \u2014 "),Uk=n(NCe,"A",{href:!0});var aVr=s(Uk);GQe=r(aVr,"RagConfig"),aVr.forEach(t),OQe=r(NCe," (RAG model)"),NCe.forEach(t),VQe=i(y),Sm=n(y,"LI",{});var jCe=s(Sm);ore=n(jCe,"STRONG",{});var nVr=s(ore);XQe=r(nVr,"realm"),nVr.forEach(t),zQe=r(jCe," \u2014 "),Jk=n(jCe,"A",{href:!0});var sVr=s(Jk);WQe=r(sVr,"RealmConfig"),sVr.forEach(t),QQe=r(jCe," (Realm model)"),jCe.forEach(t),HQe=i(y),Rm=n(y,"LI",{});var DCe=s(Rm);rre=n(DCe,"STRONG",{});var lVr=s(rre);UQe=r(lVr,"reformer"),lVr.forEach(t),JQe=r(DCe," \u2014 "),Yk=n(DCe,"A",{href:!0});var iVr=s(Yk);YQe=r(iVr,"ReformerConfig"),iVr.forEach(t),KQe=r(DCe," (Reformer model)"),DCe.forEach(t),ZQe=i(y),Pm=n(y,"LI",{});var GCe=s(Pm);tre=n(GCe,"STRONG",{});var dVr=s(tre);eHe=r(dVr,"regnet"),dVr.forEach(t),oHe=r(GCe," \u2014 "),Kk=n(GCe,"A",{href:!0});var cVr=s(Kk);rHe=r(cVr,"RegNetConfig"),cVr.forEach(t),tHe=r(GCe," (RegNet model)"),GCe.forEach(t),aHe=i(y),Bm=n(y,"LI",{});var OCe=s(Bm);are=n(OCe,"STRONG",{});var fVr=s(are);nHe=r(fVr,"rembert"),fVr.forEach(t),sHe=r(OCe," \u2014 "),Zk=n(OCe,"A",{href:!0});var mVr=s(Zk);lHe=r(mVr,"RemBertConfig"),mVr.forEach(t),iHe=r(OCe," (RemBERT model)"),OCe.forEach(t),dHe=i(y),Im=n(y,"LI",{});var VCe=s(Im);nre=n(VCe,"STRONG",{});var gVr=s(nre);cHe=r(gVr,"resnet"),gVr.forEach(t),fHe=r(VCe," \u2014 "),eS=n(VCe,"A",{href:!0});var hVr=s(eS);mHe=r(hVr,"ResNetConfig"),hVr.forEach(t),gHe=r(VCe," (ResNet model)"),VCe.forEach(t),hHe=i(y),qm=n(y,"LI",{});var XCe=s(qm);sre=n(XCe,"STRONG",{});var pVr=s(sre);pHe=r(pVr,"retribert"),pVr.forEach(t),_He=r(XCe," \u2014 "),oS=n(XCe,"A",{href:!0});var _Vr=s(oS);uHe=r(_Vr,"RetriBertConfig"),_Vr.forEach(t),bHe=r(XCe," (RetriBERT model)"),XCe.forEach(t),vHe=i(y),Nm=n(y,"LI",{});var zCe=s(Nm);lre=n(zCe,"STRONG",{});var uVr=s(lre);FHe=r(uVr,"roberta"),uVr.forEach(t),THe=r(zCe," \u2014 "),rS=n(zCe,"A",{href:!0});var bVr=s(rS);MHe=r(bVr,"RobertaConfig"),bVr.forEach(t),EHe=r(zCe," (RoBERTa model)"),zCe.forEach(t),CHe=i(y),jm=n(y,"LI",{});var WCe=s(jm);ire=n(WCe,"STRONG",{});var vVr=s(ire);wHe=r(vVr,"roformer"),vVr.forEach(t),AHe=r(WCe," \u2014 "),tS=n(WCe,"A",{href:!0});var FVr=s(tS);yHe=r(FVr,"RoFormerConfig"),FVr.forEach(t),LHe=r(WCe," (RoFormer model)"),WCe.forEach(t),xHe=i(y),Dm=n(y,"LI",{});var QCe=s(Dm);dre=n(QCe,"STRONG",{});var TVr=s(dre);$He=r(TVr,"segformer"),TVr.forEach(t),kHe=r(QCe," \u2014 "),aS=n(QCe,"A",{href:!0});var MVr=s(aS);SHe=r(MVr,"SegformerConfig"),MVr.forEach(t),RHe=r(QCe," (SegFormer model)"),QCe.forEach(t),PHe=i(y),Gm=n(y,"LI",{});var HCe=s(Gm);cre=n(HCe,"STRONG",{});var EVr=s(cre);BHe=r(EVr,"sew"),EVr.forEach(t),IHe=r(HCe," \u2014 "),nS=n(HCe,"A",{href:!0});var CVr=s(nS);qHe=r(CVr,"SEWConfig"),CVr.forEach(t),NHe=r(HCe," (SEW model)"),HCe.forEach(t),jHe=i(y),Om=n(y,"LI",{});var UCe=s(Om);fre=n(UCe,"STRONG",{});var wVr=s(fre);DHe=r(wVr,"sew-d"),wVr.forEach(t),GHe=r(UCe," \u2014 "),sS=n(UCe,"A",{href:!0});var AVr=s(sS);OHe=r(AVr,"SEWDConfig"),AVr.forEach(t),VHe=r(UCe," (SEW-D model)"),UCe.forEach(t),XHe=i(y),Vm=n(y,"LI",{});var JCe=s(Vm);mre=n(JCe,"STRONG",{});var yVr=s(mre);zHe=r(yVr,"speech-encoder-decoder"),yVr.forEach(t),WHe=r(JCe," \u2014 "),lS=n(JCe,"A",{href:!0});var LVr=s(lS);QHe=r(LVr,"SpeechEncoderDecoderConfig"),LVr.forEach(t),HHe=r(JCe," (Speech Encoder decoder model)"),JCe.forEach(t),UHe=i(y),Xm=n(y,"LI",{});var YCe=s(Xm);gre=n(YCe,"STRONG",{});var xVr=s(gre);JHe=r(xVr,"speech_to_text"),xVr.forEach(t),YHe=r(YCe," \u2014 "),iS=n(YCe,"A",{href:!0});var $Vr=s(iS);KHe=r($Vr,"Speech2TextConfig"),$Vr.forEach(t),ZHe=r(YCe," (Speech2Text model)"),YCe.forEach(t),eUe=i(y),zm=n(y,"LI",{});var KCe=s(zm);hre=n(KCe,"STRONG",{});var kVr=s(hre);oUe=r(kVr,"speech_to_text_2"),kVr.forEach(t),rUe=r(KCe," \u2014 "),dS=n(KCe,"A",{href:!0});var SVr=s(dS);tUe=r(SVr,"Speech2Text2Config"),SVr.forEach(t),aUe=r(KCe," (Speech2Text2 model)"),KCe.forEach(t),nUe=i(y),Wm=n(y,"LI",{});var ZCe=s(Wm);pre=n(ZCe,"STRONG",{});var RVr=s(pre);sUe=r(RVr,"splinter"),RVr.forEach(t),lUe=r(ZCe," \u2014 "),cS=n(ZCe,"A",{href:!0});var PVr=s(cS);iUe=r(PVr,"SplinterConfig"),PVr.forEach(t),dUe=r(ZCe," (Splinter model)"),ZCe.forEach(t),cUe=i(y),Qm=n(y,"LI",{});var e5e=s(Qm);_re=n(e5e,"STRONG",{});var BVr=s(_re);fUe=r(BVr,"squeezebert"),BVr.forEach(t),mUe=r(e5e," \u2014 "),fS=n(e5e,"A",{href:!0});var IVr=s(fS);gUe=r(IVr,"SqueezeBertConfig"),IVr.forEach(t),hUe=r(e5e," (SqueezeBERT model)"),e5e.forEach(t),pUe=i(y),Hm=n(y,"LI",{});var o5e=s(Hm);ure=n(o5e,"STRONG",{});var qVr=s(ure);_Ue=r(qVr,"swin"),qVr.forEach(t),uUe=r(o5e," \u2014 "),mS=n(o5e,"A",{href:!0});var NVr=s(mS);bUe=r(NVr,"SwinConfig"),NVr.forEach(t),vUe=r(o5e," (Swin model)"),o5e.forEach(t),FUe=i(y),Um=n(y,"LI",{});var r5e=s(Um);bre=n(r5e,"STRONG",{});var jVr=s(bre);TUe=r(jVr,"t5"),jVr.forEach(t),MUe=r(r5e," \u2014 "),gS=n(r5e,"A",{href:!0});var DVr=s(gS);EUe=r(DVr,"T5Config"),DVr.forEach(t),CUe=r(r5e," (T5 model)"),r5e.forEach(t),wUe=i(y),Jm=n(y,"LI",{});var t5e=s(Jm);vre=n(t5e,"STRONG",{});var GVr=s(vre);AUe=r(GVr,"tapas"),GVr.forEach(t),yUe=r(t5e," \u2014 "),hS=n(t5e,"A",{href:!0});var OVr=s(hS);LUe=r(OVr,"TapasConfig"),OVr.forEach(t),xUe=r(t5e," (TAPAS model)"),t5e.forEach(t),$Ue=i(y),Ym=n(y,"LI",{});var a5e=s(Ym);Fre=n(a5e,"STRONG",{});var VVr=s(Fre);kUe=r(VVr,"trajectory_transformer"),VVr.forEach(t),SUe=r(a5e," \u2014 "),pS=n(a5e,"A",{href:!0});var XVr=s(pS);RUe=r(XVr,"TrajectoryTransformerConfig"),XVr.forEach(t),PUe=r(a5e," (Trajectory Transformer model)"),a5e.forEach(t),BUe=i(y),Km=n(y,"LI",{});var n5e=s(Km);Tre=n(n5e,"STRONG",{});var zVr=s(Tre);IUe=r(zVr,"transfo-xl"),zVr.forEach(t),qUe=r(n5e," \u2014 "),_S=n(n5e,"A",{href:!0});var WVr=s(_S);NUe=r(WVr,"TransfoXLConfig"),WVr.forEach(t),jUe=r(n5e," (Transformer-XL model)"),n5e.forEach(t),DUe=i(y),Zm=n(y,"LI",{});var s5e=s(Zm);Mre=n(s5e,"STRONG",{});var QVr=s(Mre);GUe=r(QVr,"trocr"),QVr.forEach(t),OUe=r(s5e," \u2014 "),uS=n(s5e,"A",{href:!0});var HVr=s(uS);VUe=r(HVr,"TrOCRConfig"),HVr.forEach(t),XUe=r(s5e," (TrOCR model)"),s5e.forEach(t),zUe=i(y),eg=n(y,"LI",{});var l5e=s(eg);Ere=n(l5e,"STRONG",{});var UVr=s(Ere);WUe=r(UVr,"unispeech"),UVr.forEach(t),QUe=r(l5e," \u2014 "),bS=n(l5e,"A",{href:!0});var JVr=s(bS);HUe=r(JVr,"UniSpeechConfig"),JVr.forEach(t),UUe=r(l5e," (UniSpeech model)"),l5e.forEach(t),JUe=i(y),og=n(y,"LI",{});var i5e=s(og);Cre=n(i5e,"STRONG",{});var YVr=s(Cre);YUe=r(YVr,"unispeech-sat"),YVr.forEach(t),KUe=r(i5e," \u2014 "),vS=n(i5e,"A",{href:!0});var KVr=s(vS);ZUe=r(KVr,"UniSpeechSatConfig"),KVr.forEach(t),eJe=r(i5e," (UniSpeechSat model)"),i5e.forEach(t),oJe=i(y),rg=n(y,"LI",{});var d5e=s(rg);wre=n(d5e,"STRONG",{});var ZVr=s(wre);rJe=r(ZVr,"van"),ZVr.forEach(t),tJe=r(d5e," \u2014 "),FS=n(d5e,"A",{href:!0});var eXr=s(FS);aJe=r(eXr,"VanConfig"),eXr.forEach(t),nJe=r(d5e," (VAN model)"),d5e.forEach(t),sJe=i(y),tg=n(y,"LI",{});var c5e=s(tg);Are=n(c5e,"STRONG",{});var oXr=s(Are);lJe=r(oXr,"vilt"),oXr.forEach(t),iJe=r(c5e," \u2014 "),TS=n(c5e,"A",{href:!0});var rXr=s(TS);dJe=r(rXr,"ViltConfig"),rXr.forEach(t),cJe=r(c5e," (ViLT model)"),c5e.forEach(t),fJe=i(y),ag=n(y,"LI",{});var f5e=s(ag);yre=n(f5e,"STRONG",{});var tXr=s(yre);mJe=r(tXr,"vision-encoder-decoder"),tXr.forEach(t),gJe=r(f5e," \u2014 "),MS=n(f5e,"A",{href:!0});var aXr=s(MS);hJe=r(aXr,"VisionEncoderDecoderConfig"),aXr.forEach(t),pJe=r(f5e," (Vision Encoder decoder model)"),f5e.forEach(t),_Je=i(y),ng=n(y,"LI",{});var m5e=s(ng);Lre=n(m5e,"STRONG",{});var nXr=s(Lre);uJe=r(nXr,"vision-text-dual-encoder"),nXr.forEach(t),bJe=r(m5e," \u2014 "),ES=n(m5e,"A",{href:!0});var sXr=s(ES);vJe=r(sXr,"VisionTextDualEncoderConfig"),sXr.forEach(t),FJe=r(m5e," (VisionTextDualEncoder model)"),m5e.forEach(t),TJe=i(y),sg=n(y,"LI",{});var g5e=s(sg);xre=n(g5e,"STRONG",{});var lXr=s(xre);MJe=r(lXr,"visual_bert"),lXr.forEach(t),EJe=r(g5e," \u2014 "),CS=n(g5e,"A",{href:!0});var iXr=s(CS);CJe=r(iXr,"VisualBertConfig"),iXr.forEach(t),wJe=r(g5e," (VisualBert model)"),g5e.forEach(t),AJe=i(y),lg=n(y,"LI",{});var h5e=s(lg);$re=n(h5e,"STRONG",{});var dXr=s($re);yJe=r(dXr,"vit"),dXr.forEach(t),LJe=r(h5e," \u2014 "),wS=n(h5e,"A",{href:!0});var cXr=s(wS);xJe=r(cXr,"ViTConfig"),cXr.forEach(t),$Je=r(h5e," (ViT model)"),h5e.forEach(t),kJe=i(y),ig=n(y,"LI",{});var p5e=s(ig);kre=n(p5e,"STRONG",{});var fXr=s(kre);SJe=r(fXr,"vit_mae"),fXr.forEach(t),RJe=r(p5e," \u2014 "),AS=n(p5e,"A",{href:!0});var mXr=s(AS);PJe=r(mXr,"ViTMAEConfig"),mXr.forEach(t),BJe=r(p5e," (ViTMAE model)"),p5e.forEach(t),IJe=i(y),dg=n(y,"LI",{});var _5e=s(dg);Sre=n(_5e,"STRONG",{});var gXr=s(Sre);qJe=r(gXr,"wav2vec2"),gXr.forEach(t),NJe=r(_5e," \u2014 "),yS=n(_5e,"A",{href:!0});var hXr=s(yS);jJe=r(hXr,"Wav2Vec2Config"),hXr.forEach(t),DJe=r(_5e," (Wav2Vec2 model)"),_5e.forEach(t),GJe=i(y),cg=n(y,"LI",{});var u5e=s(cg);Rre=n(u5e,"STRONG",{});var pXr=s(Rre);OJe=r(pXr,"wav2vec2-conformer"),pXr.forEach(t),VJe=r(u5e," \u2014 "),LS=n(u5e,"A",{href:!0});var _Xr=s(LS);XJe=r(_Xr,"Wav2Vec2ConformerConfig"),_Xr.forEach(t),zJe=r(u5e," (Wav2Vec2-Conformer model)"),u5e.forEach(t),WJe=i(y),fg=n(y,"LI",{});var b5e=s(fg);Pre=n(b5e,"STRONG",{});var uXr=s(Pre);QJe=r(uXr,"wavlm"),uXr.forEach(t),HJe=r(b5e," \u2014 "),xS=n(b5e,"A",{href:!0});var bXr=s(xS);UJe=r(bXr,"WavLMConfig"),bXr.forEach(t),JJe=r(b5e," (WavLM model)"),b5e.forEach(t),YJe=i(y),mg=n(y,"LI",{});var v5e=s(mg);Bre=n(v5e,"STRONG",{});var vXr=s(Bre);KJe=r(vXr,"xglm"),vXr.forEach(t),ZJe=r(v5e," \u2014 "),$S=n(v5e,"A",{href:!0});var FXr=s($S);eYe=r(FXr,"XGLMConfig"),FXr.forEach(t),oYe=r(v5e," (XGLM model)"),v5e.forEach(t),rYe=i(y),gg=n(y,"LI",{});var F5e=s(gg);Ire=n(F5e,"STRONG",{});var TXr=s(Ire);tYe=r(TXr,"xlm"),TXr.forEach(t),aYe=r(F5e," \u2014 "),kS=n(F5e,"A",{href:!0});var MXr=s(kS);nYe=r(MXr,"XLMConfig"),MXr.forEach(t),sYe=r(F5e," (XLM model)"),F5e.forEach(t),lYe=i(y),hg=n(y,"LI",{});var T5e=s(hg);qre=n(T5e,"STRONG",{});var EXr=s(qre);iYe=r(EXr,"xlm-prophetnet"),EXr.forEach(t),dYe=r(T5e," \u2014 "),SS=n(T5e,"A",{href:!0});var CXr=s(SS);cYe=r(CXr,"XLMProphetNetConfig"),CXr.forEach(t),fYe=r(T5e," (XLMProphetNet model)"),T5e.forEach(t),mYe=i(y),pg=n(y,"LI",{});var M5e=s(pg);Nre=n(M5e,"STRONG",{});var wXr=s(Nre);gYe=r(wXr,"xlm-roberta"),wXr.forEach(t),hYe=r(M5e," \u2014 "),RS=n(M5e,"A",{href:!0});var AXr=s(RS);pYe=r(AXr,"XLMRobertaConfig"),AXr.forEach(t),_Ye=r(M5e," (XLM-RoBERTa model)"),M5e.forEach(t),uYe=i(y),_g=n(y,"LI",{});var E5e=s(_g);jre=n(E5e,"STRONG",{});var yXr=s(jre);bYe=r(yXr,"xlm-roberta-xl"),yXr.forEach(t),vYe=r(E5e," \u2014 "),PS=n(E5e,"A",{href:!0});var LXr=s(PS);FYe=r(LXr,"XLMRobertaXLConfig"),LXr.forEach(t),TYe=r(E5e," (XLM-RoBERTa-XL model)"),E5e.forEach(t),MYe=i(y),ug=n(y,"LI",{});var C5e=s(ug);Dre=n(C5e,"STRONG",{});var xXr=s(Dre);EYe=r(xXr,"xlnet"),xXr.forEach(t),CYe=r(C5e," \u2014 "),BS=n(C5e,"A",{href:!0});var $Xr=s(BS);wYe=r($Xr,"XLNetConfig"),$Xr.forEach(t),AYe=r(C5e," (XLNet model)"),C5e.forEach(t),yYe=i(y),bg=n(y,"LI",{});var w5e=s(bg);Gre=n(w5e,"STRONG",{});var kXr=s(Gre);LYe=r(kXr,"yolos"),kXr.forEach(t),xYe=r(w5e," \u2014 "),IS=n(w5e,"A",{href:!0});var SXr=s(IS);$Ye=r(SXr,"YolosConfig"),SXr.forEach(t),kYe=r(w5e," (YOLOS model)"),w5e.forEach(t),SYe=i(y),vg=n(y,"LI",{});var A5e=s(vg);Ore=n(A5e,"STRONG",{});var RXr=s(Ore);RYe=r(RXr,"yoso"),RXr.forEach(t),PYe=r(A5e," \u2014 "),qS=n(A5e,"A",{href:!0});var PXr=s(qS);BYe=r(PXr,"YosoConfig"),PXr.forEach(t),IYe=r(A5e," (YOSO model)"),A5e.forEach(t),y.forEach(t),qYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),NYe=i(et),Tg=n(et,"DIV",{class:!0});var lje=s(Tg);T(M0.$$.fragment,lje),jYe=i(lje),Vre=n(lje,"P",{});var BXr=s(Vre);DYe=r(BXr,"Register a new configuration for this class."),BXr.forEach(t),lje.forEach(t),et.forEach(t),cqe=i(f),Fi=n(f,"H2",{class:!0});var ije=s(Fi);Mg=n(ije,"A",{id:!0,class:!0,href:!0});var IXr=s(Mg);Xre=n(IXr,"SPAN",{});var qXr=s(Xre);T(E0.$$.fragment,qXr),qXr.forEach(t),IXr.forEach(t),GYe=i(ije),zre=n(ije,"SPAN",{});var NXr=s(zre);OYe=r(NXr,"AutoTokenizer"),NXr.forEach(t),ije.forEach(t),fqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(C0.$$.fragment,Is),VYe=i(Is),w0=n(Is,"P",{});var dje=s(w0);XYe=r(dje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=n(dje,"A",{href:!0});var jXr=s(NS);zYe=r(jXr,"AutoTokenizer.from_pretrained()"),jXr.forEach(t),WYe=r(dje," class method."),dje.forEach(t),QYe=i(Is),A0=n(Is,"P",{});var cje=s(A0);HYe=r(cje,"This class cannot be instantiated directly using "),Wre=n(cje,"CODE",{});var DXr=s(Wre);UYe=r(DXr,"__init__()"),DXr.forEach(t),JYe=r(cje," (throws an error)."),cje.forEach(t),YYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(y0.$$.fragment,qs),KYe=i(qs),Qre=n(qs,"P",{});var GXr=s(Qre);ZYe=r(GXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GXr.forEach(t),eKe=i(qs),Aa=n(qs,"P",{});var u3=s(Aa);oKe=r(u3,"The tokenizer class to instantiate is selected based on the "),Hre=n(u3,"CODE",{});var OXr=s(Hre);rKe=r(OXr,"model_type"),OXr.forEach(t),tKe=r(u3,` property of the config object (either
passed as an argument or loaded from `),Ure=n(u3,"CODE",{});var VXr=s(Ure);aKe=r(VXr,"pretrained_model_name_or_path"),VXr.forEach(t),nKe=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jre=n(u3,"CODE",{});var XXr=s(Jre);sKe=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),lKe=r(u3,":"),u3.forEach(t),iKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Lx=s(Sn);Yre=n(Lx,"STRONG",{});var zXr=s(Yre);dKe=r(zXr,"albert"),zXr.forEach(t),cKe=r(Lx," \u2014 "),jS=n(Lx,"A",{href:!0});var WXr=s(jS);fKe=r(WXr,"AlbertTokenizer"),WXr.forEach(t),mKe=r(Lx," or "),DS=n(Lx,"A",{href:!0});var QXr=s(DS);gKe=r(QXr,"AlbertTokenizerFast"),QXr.forEach(t),hKe=r(Lx," (ALBERT model)"),Lx.forEach(t),pKe=i(S),Rn=n(S,"LI",{});var xx=s(Rn);Kre=n(xx,"STRONG",{});var HXr=s(Kre);_Ke=r(HXr,"bart"),HXr.forEach(t),uKe=r(xx," \u2014 "),GS=n(xx,"A",{href:!0});var UXr=s(GS);bKe=r(UXr,"BartTokenizer"),UXr.forEach(t),vKe=r(xx," or "),OS=n(xx,"A",{href:!0});var JXr=s(OS);FKe=r(JXr,"BartTokenizerFast"),JXr.forEach(t),TKe=r(xx," (BART model)"),xx.forEach(t),MKe=i(S),Pn=n(S,"LI",{});var $x=s(Pn);Zre=n($x,"STRONG",{});var YXr=s(Zre);EKe=r(YXr,"barthez"),YXr.forEach(t),CKe=r($x," \u2014 "),VS=n($x,"A",{href:!0});var KXr=s(VS);wKe=r(KXr,"BarthezTokenizer"),KXr.forEach(t),AKe=r($x," or "),XS=n($x,"A",{href:!0});var ZXr=s(XS);yKe=r(ZXr,"BarthezTokenizerFast"),ZXr.forEach(t),LKe=r($x," (BARThez model)"),$x.forEach(t),xKe=i(S),Eg=n(S,"LI",{});var y5e=s(Eg);ete=n(y5e,"STRONG",{});var ezr=s(ete);$Ke=r(ezr,"bartpho"),ezr.forEach(t),kKe=r(y5e," \u2014 "),zS=n(y5e,"A",{href:!0});var ozr=s(zS);SKe=r(ozr,"BartphoTokenizer"),ozr.forEach(t),RKe=r(y5e," (BARTpho model)"),y5e.forEach(t),PKe=i(S),Bn=n(S,"LI",{});var kx=s(Bn);ote=n(kx,"STRONG",{});var rzr=s(ote);BKe=r(rzr,"bert"),rzr.forEach(t),IKe=r(kx," \u2014 "),WS=n(kx,"A",{href:!0});var tzr=s(WS);qKe=r(tzr,"BertTokenizer"),tzr.forEach(t),NKe=r(kx," or "),QS=n(kx,"A",{href:!0});var azr=s(QS);jKe=r(azr,"BertTokenizerFast"),azr.forEach(t),DKe=r(kx," (BERT model)"),kx.forEach(t),GKe=i(S),Cg=n(S,"LI",{});var L5e=s(Cg);rte=n(L5e,"STRONG",{});var nzr=s(rte);OKe=r(nzr,"bert-generation"),nzr.forEach(t),VKe=r(L5e," \u2014 "),HS=n(L5e,"A",{href:!0});var szr=s(HS);XKe=r(szr,"BertGenerationTokenizer"),szr.forEach(t),zKe=r(L5e," (Bert Generation model)"),L5e.forEach(t),WKe=i(S),wg=n(S,"LI",{});var x5e=s(wg);tte=n(x5e,"STRONG",{});var lzr=s(tte);QKe=r(lzr,"bert-japanese"),lzr.forEach(t),HKe=r(x5e," \u2014 "),US=n(x5e,"A",{href:!0});var izr=s(US);UKe=r(izr,"BertJapaneseTokenizer"),izr.forEach(t),JKe=r(x5e," (BertJapanese model)"),x5e.forEach(t),YKe=i(S),Ag=n(S,"LI",{});var $5e=s(Ag);ate=n($5e,"STRONG",{});var dzr=s(ate);KKe=r(dzr,"bertweet"),dzr.forEach(t),ZKe=r($5e," \u2014 "),JS=n($5e,"A",{href:!0});var czr=s(JS);eZe=r(czr,"BertweetTokenizer"),czr.forEach(t),oZe=r($5e," (Bertweet model)"),$5e.forEach(t),rZe=i(S),In=n(S,"LI",{});var Sx=s(In);nte=n(Sx,"STRONG",{});var fzr=s(nte);tZe=r(fzr,"big_bird"),fzr.forEach(t),aZe=r(Sx," \u2014 "),YS=n(Sx,"A",{href:!0});var mzr=s(YS);nZe=r(mzr,"BigBirdTokenizer"),mzr.forEach(t),sZe=r(Sx," or "),KS=n(Sx,"A",{href:!0});var gzr=s(KS);lZe=r(gzr,"BigBirdTokenizerFast"),gzr.forEach(t),iZe=r(Sx," (BigBird model)"),Sx.forEach(t),dZe=i(S),qn=n(S,"LI",{});var Rx=s(qn);ste=n(Rx,"STRONG",{});var hzr=s(ste);cZe=r(hzr,"bigbird_pegasus"),hzr.forEach(t),fZe=r(Rx," \u2014 "),ZS=n(Rx,"A",{href:!0});var pzr=s(ZS);mZe=r(pzr,"PegasusTokenizer"),pzr.forEach(t),gZe=r(Rx," or "),eR=n(Rx,"A",{href:!0});var _zr=s(eR);hZe=r(_zr,"PegasusTokenizerFast"),_zr.forEach(t),pZe=r(Rx," (BigBirdPegasus model)"),Rx.forEach(t),_Ze=i(S),Nn=n(S,"LI",{});var Px=s(Nn);lte=n(Px,"STRONG",{});var uzr=s(lte);uZe=r(uzr,"blenderbot"),uzr.forEach(t),bZe=r(Px," \u2014 "),oR=n(Px,"A",{href:!0});var bzr=s(oR);vZe=r(bzr,"BlenderbotTokenizer"),bzr.forEach(t),FZe=r(Px," or "),rR=n(Px,"A",{href:!0});var vzr=s(rR);TZe=r(vzr,"BlenderbotTokenizerFast"),vzr.forEach(t),MZe=r(Px," (Blenderbot model)"),Px.forEach(t),EZe=i(S),yg=n(S,"LI",{});var k5e=s(yg);ite=n(k5e,"STRONG",{});var Fzr=s(ite);CZe=r(Fzr,"blenderbot-small"),Fzr.forEach(t),wZe=r(k5e," \u2014 "),tR=n(k5e,"A",{href:!0});var Tzr=s(tR);AZe=r(Tzr,"BlenderbotSmallTokenizer"),Tzr.forEach(t),yZe=r(k5e," (BlenderbotSmall model)"),k5e.forEach(t),LZe=i(S),Lg=n(S,"LI",{});var S5e=s(Lg);dte=n(S5e,"STRONG",{});var Mzr=s(dte);xZe=r(Mzr,"byt5"),Mzr.forEach(t),$Ze=r(S5e," \u2014 "),aR=n(S5e,"A",{href:!0});var Ezr=s(aR);kZe=r(Ezr,"ByT5Tokenizer"),Ezr.forEach(t),SZe=r(S5e," (ByT5 model)"),S5e.forEach(t),RZe=i(S),jn=n(S,"LI",{});var Bx=s(jn);cte=n(Bx,"STRONG",{});var Czr=s(cte);PZe=r(Czr,"camembert"),Czr.forEach(t),BZe=r(Bx," \u2014 "),nR=n(Bx,"A",{href:!0});var wzr=s(nR);IZe=r(wzr,"CamembertTokenizer"),wzr.forEach(t),qZe=r(Bx," or "),sR=n(Bx,"A",{href:!0});var Azr=s(sR);NZe=r(Azr,"CamembertTokenizerFast"),Azr.forEach(t),jZe=r(Bx," (CamemBERT model)"),Bx.forEach(t),DZe=i(S),xg=n(S,"LI",{});var R5e=s(xg);fte=n(R5e,"STRONG",{});var yzr=s(fte);GZe=r(yzr,"canine"),yzr.forEach(t),OZe=r(R5e," \u2014 "),lR=n(R5e,"A",{href:!0});var Lzr=s(lR);VZe=r(Lzr,"CanineTokenizer"),Lzr.forEach(t),XZe=r(R5e," (Canine model)"),R5e.forEach(t),zZe=i(S),Dn=n(S,"LI",{});var Ix=s(Dn);mte=n(Ix,"STRONG",{});var xzr=s(mte);WZe=r(xzr,"clip"),xzr.forEach(t),QZe=r(Ix," \u2014 "),iR=n(Ix,"A",{href:!0});var $zr=s(iR);HZe=r($zr,"CLIPTokenizer"),$zr.forEach(t),UZe=r(Ix," or "),dR=n(Ix,"A",{href:!0});var kzr=s(dR);JZe=r(kzr,"CLIPTokenizerFast"),kzr.forEach(t),YZe=r(Ix," (CLIP model)"),Ix.forEach(t),KZe=i(S),Gn=n(S,"LI",{});var qx=s(Gn);gte=n(qx,"STRONG",{});var Szr=s(gte);ZZe=r(Szr,"convbert"),Szr.forEach(t),eeo=r(qx," \u2014 "),cR=n(qx,"A",{href:!0});var Rzr=s(cR);oeo=r(Rzr,"ConvBertTokenizer"),Rzr.forEach(t),reo=r(qx," or "),fR=n(qx,"A",{href:!0});var Pzr=s(fR);teo=r(Pzr,"ConvBertTokenizerFast"),Pzr.forEach(t),aeo=r(qx," (ConvBERT model)"),qx.forEach(t),neo=i(S),On=n(S,"LI",{});var Nx=s(On);hte=n(Nx,"STRONG",{});var Bzr=s(hte);seo=r(Bzr,"cpm"),Bzr.forEach(t),leo=r(Nx," \u2014 "),mR=n(Nx,"A",{href:!0});var Izr=s(mR);ieo=r(Izr,"CpmTokenizer"),Izr.forEach(t),deo=r(Nx," or "),gR=n(Nx,"A",{href:!0});var qzr=s(gR);ceo=r(qzr,"CpmTokenizerFast"),qzr.forEach(t),feo=r(Nx," (CPM model)"),Nx.forEach(t),meo=i(S),$g=n(S,"LI",{});var P5e=s($g);pte=n(P5e,"STRONG",{});var Nzr=s(pte);geo=r(Nzr,"ctrl"),Nzr.forEach(t),heo=r(P5e," \u2014 "),hR=n(P5e,"A",{href:!0});var jzr=s(hR);peo=r(jzr,"CTRLTokenizer"),jzr.forEach(t),_eo=r(P5e," (CTRL model)"),P5e.forEach(t),ueo=i(S),Vn=n(S,"LI",{});var jx=s(Vn);_te=n(jx,"STRONG",{});var Dzr=s(_te);beo=r(Dzr,"data2vec-text"),Dzr.forEach(t),veo=r(jx," \u2014 "),pR=n(jx,"A",{href:!0});var Gzr=s(pR);Feo=r(Gzr,"RobertaTokenizer"),Gzr.forEach(t),Teo=r(jx," or "),_R=n(jx,"A",{href:!0});var Ozr=s(_R);Meo=r(Ozr,"RobertaTokenizerFast"),Ozr.forEach(t),Eeo=r(jx," (Data2VecText model)"),jx.forEach(t),Ceo=i(S),Xn=n(S,"LI",{});var Dx=s(Xn);ute=n(Dx,"STRONG",{});var Vzr=s(ute);weo=r(Vzr,"deberta"),Vzr.forEach(t),Aeo=r(Dx," \u2014 "),uR=n(Dx,"A",{href:!0});var Xzr=s(uR);yeo=r(Xzr,"DebertaTokenizer"),Xzr.forEach(t),Leo=r(Dx," or "),bR=n(Dx,"A",{href:!0});var zzr=s(bR);xeo=r(zzr,"DebertaTokenizerFast"),zzr.forEach(t),$eo=r(Dx," (DeBERTa model)"),Dx.forEach(t),keo=i(S),zn=n(S,"LI",{});var Gx=s(zn);bte=n(Gx,"STRONG",{});var Wzr=s(bte);Seo=r(Wzr,"deberta-v2"),Wzr.forEach(t),Reo=r(Gx," \u2014 "),vR=n(Gx,"A",{href:!0});var Qzr=s(vR);Peo=r(Qzr,"DebertaV2Tokenizer"),Qzr.forEach(t),Beo=r(Gx," or "),FR=n(Gx,"A",{href:!0});var Hzr=s(FR);Ieo=r(Hzr,"DebertaV2TokenizerFast"),Hzr.forEach(t),qeo=r(Gx," (DeBERTa-v2 model)"),Gx.forEach(t),Neo=i(S),Wn=n(S,"LI",{});var Ox=s(Wn);vte=n(Ox,"STRONG",{});var Uzr=s(vte);jeo=r(Uzr,"distilbert"),Uzr.forEach(t),Deo=r(Ox," \u2014 "),TR=n(Ox,"A",{href:!0});var Jzr=s(TR);Geo=r(Jzr,"DistilBertTokenizer"),Jzr.forEach(t),Oeo=r(Ox," or "),MR=n(Ox,"A",{href:!0});var Yzr=s(MR);Veo=r(Yzr,"DistilBertTokenizerFast"),Yzr.forEach(t),Xeo=r(Ox," (DistilBERT model)"),Ox.forEach(t),zeo=i(S),Qn=n(S,"LI",{});var Vx=s(Qn);Fte=n(Vx,"STRONG",{});var Kzr=s(Fte);Weo=r(Kzr,"dpr"),Kzr.forEach(t),Qeo=r(Vx," \u2014 "),ER=n(Vx,"A",{href:!0});var Zzr=s(ER);Heo=r(Zzr,"DPRQuestionEncoderTokenizer"),Zzr.forEach(t),Ueo=r(Vx," or "),CR=n(Vx,"A",{href:!0});var eWr=s(CR);Jeo=r(eWr,"DPRQuestionEncoderTokenizerFast"),eWr.forEach(t),Yeo=r(Vx," (DPR model)"),Vx.forEach(t),Keo=i(S),Hn=n(S,"LI",{});var Xx=s(Hn);Tte=n(Xx,"STRONG",{});var oWr=s(Tte);Zeo=r(oWr,"electra"),oWr.forEach(t),eoo=r(Xx," \u2014 "),wR=n(Xx,"A",{href:!0});var rWr=s(wR);ooo=r(rWr,"ElectraTokenizer"),rWr.forEach(t),roo=r(Xx," or "),AR=n(Xx,"A",{href:!0});var tWr=s(AR);too=r(tWr,"ElectraTokenizerFast"),tWr.forEach(t),aoo=r(Xx," (ELECTRA model)"),Xx.forEach(t),noo=i(S),kg=n(S,"LI",{});var B5e=s(kg);Mte=n(B5e,"STRONG",{});var aWr=s(Mte);soo=r(aWr,"flaubert"),aWr.forEach(t),loo=r(B5e," \u2014 "),yR=n(B5e,"A",{href:!0});var nWr=s(yR);ioo=r(nWr,"FlaubertTokenizer"),nWr.forEach(t),doo=r(B5e," (FlauBERT model)"),B5e.forEach(t),coo=i(S),Un=n(S,"LI",{});var zx=s(Un);Ete=n(zx,"STRONG",{});var sWr=s(Ete);foo=r(sWr,"fnet"),sWr.forEach(t),moo=r(zx," \u2014 "),LR=n(zx,"A",{href:!0});var lWr=s(LR);goo=r(lWr,"FNetTokenizer"),lWr.forEach(t),hoo=r(zx," or "),xR=n(zx,"A",{href:!0});var iWr=s(xR);poo=r(iWr,"FNetTokenizerFast"),iWr.forEach(t),_oo=r(zx," (FNet model)"),zx.forEach(t),uoo=i(S),Sg=n(S,"LI",{});var I5e=s(Sg);Cte=n(I5e,"STRONG",{});var dWr=s(Cte);boo=r(dWr,"fsmt"),dWr.forEach(t),voo=r(I5e," \u2014 "),$R=n(I5e,"A",{href:!0});var cWr=s($R);Foo=r(cWr,"FSMTTokenizer"),cWr.forEach(t),Too=r(I5e," (FairSeq Machine-Translation model)"),I5e.forEach(t),Moo=i(S),Jn=n(S,"LI",{});var Wx=s(Jn);wte=n(Wx,"STRONG",{});var fWr=s(wte);Eoo=r(fWr,"funnel"),fWr.forEach(t),Coo=r(Wx," \u2014 "),kR=n(Wx,"A",{href:!0});var mWr=s(kR);woo=r(mWr,"FunnelTokenizer"),mWr.forEach(t),Aoo=r(Wx," or "),SR=n(Wx,"A",{href:!0});var gWr=s(SR);yoo=r(gWr,"FunnelTokenizerFast"),gWr.forEach(t),Loo=r(Wx," (Funnel Transformer model)"),Wx.forEach(t),xoo=i(S),Yn=n(S,"LI",{});var Qx=s(Yn);Ate=n(Qx,"STRONG",{});var hWr=s(Ate);$oo=r(hWr,"gpt2"),hWr.forEach(t),koo=r(Qx," \u2014 "),RR=n(Qx,"A",{href:!0});var pWr=s(RR);Soo=r(pWr,"GPT2Tokenizer"),pWr.forEach(t),Roo=r(Qx," or "),PR=n(Qx,"A",{href:!0});var _Wr=s(PR);Poo=r(_Wr,"GPT2TokenizerFast"),_Wr.forEach(t),Boo=r(Qx," (OpenAI GPT-2 model)"),Qx.forEach(t),Ioo=i(S),Kn=n(S,"LI",{});var Hx=s(Kn);yte=n(Hx,"STRONG",{});var uWr=s(yte);qoo=r(uWr,"gpt_neo"),uWr.forEach(t),Noo=r(Hx," \u2014 "),BR=n(Hx,"A",{href:!0});var bWr=s(BR);joo=r(bWr,"GPT2Tokenizer"),bWr.forEach(t),Doo=r(Hx," or "),IR=n(Hx,"A",{href:!0});var vWr=s(IR);Goo=r(vWr,"GPT2TokenizerFast"),vWr.forEach(t),Ooo=r(Hx," (GPT Neo model)"),Hx.forEach(t),Voo=i(S),Zn=n(S,"LI",{});var Ux=s(Zn);Lte=n(Ux,"STRONG",{});var FWr=s(Lte);Xoo=r(FWr,"gptj"),FWr.forEach(t),zoo=r(Ux," \u2014 "),qR=n(Ux,"A",{href:!0});var TWr=s(qR);Woo=r(TWr,"GPT2Tokenizer"),TWr.forEach(t),Qoo=r(Ux," or "),NR=n(Ux,"A",{href:!0});var MWr=s(NR);Hoo=r(MWr,"GPT2TokenizerFast"),MWr.forEach(t),Uoo=r(Ux," (GPT-J model)"),Ux.forEach(t),Joo=i(S),es=n(S,"LI",{});var Jx=s(es);xte=n(Jx,"STRONG",{});var EWr=s(xte);Yoo=r(EWr,"herbert"),EWr.forEach(t),Koo=r(Jx," \u2014 "),jR=n(Jx,"A",{href:!0});var CWr=s(jR);Zoo=r(CWr,"HerbertTokenizer"),CWr.forEach(t),ero=r(Jx," or "),DR=n(Jx,"A",{href:!0});var wWr=s(DR);oro=r(wWr,"HerbertTokenizerFast"),wWr.forEach(t),rro=r(Jx," (HerBERT model)"),Jx.forEach(t),tro=i(S),Rg=n(S,"LI",{});var q5e=s(Rg);$te=n(q5e,"STRONG",{});var AWr=s($te);aro=r(AWr,"hubert"),AWr.forEach(t),nro=r(q5e," \u2014 "),GR=n(q5e,"A",{href:!0});var yWr=s(GR);sro=r(yWr,"Wav2Vec2CTCTokenizer"),yWr.forEach(t),lro=r(q5e," (Hubert model)"),q5e.forEach(t),iro=i(S),os=n(S,"LI",{});var Yx=s(os);kte=n(Yx,"STRONG",{});var LWr=s(kte);dro=r(LWr,"ibert"),LWr.forEach(t),cro=r(Yx," \u2014 "),OR=n(Yx,"A",{href:!0});var xWr=s(OR);fro=r(xWr,"RobertaTokenizer"),xWr.forEach(t),mro=r(Yx," or "),VR=n(Yx,"A",{href:!0});var $Wr=s(VR);gro=r($Wr,"RobertaTokenizerFast"),$Wr.forEach(t),hro=r(Yx," (I-BERT model)"),Yx.forEach(t),pro=i(S),rs=n(S,"LI",{});var Kx=s(rs);Ste=n(Kx,"STRONG",{});var kWr=s(Ste);_ro=r(kWr,"layoutlm"),kWr.forEach(t),uro=r(Kx," \u2014 "),XR=n(Kx,"A",{href:!0});var SWr=s(XR);bro=r(SWr,"LayoutLMTokenizer"),SWr.forEach(t),vro=r(Kx," or "),zR=n(Kx,"A",{href:!0});var RWr=s(zR);Fro=r(RWr,"LayoutLMTokenizerFast"),RWr.forEach(t),Tro=r(Kx," (LayoutLM model)"),Kx.forEach(t),Mro=i(S),ts=n(S,"LI",{});var Zx=s(ts);Rte=n(Zx,"STRONG",{});var PWr=s(Rte);Ero=r(PWr,"layoutlmv2"),PWr.forEach(t),Cro=r(Zx," \u2014 "),WR=n(Zx,"A",{href:!0});var BWr=s(WR);wro=r(BWr,"LayoutLMv2Tokenizer"),BWr.forEach(t),Aro=r(Zx," or "),QR=n(Zx,"A",{href:!0});var IWr=s(QR);yro=r(IWr,"LayoutLMv2TokenizerFast"),IWr.forEach(t),Lro=r(Zx," (LayoutLMv2 model)"),Zx.forEach(t),xro=i(S),as=n(S,"LI",{});var e$=s(as);Pte=n(e$,"STRONG",{});var qWr=s(Pte);$ro=r(qWr,"layoutxlm"),qWr.forEach(t),kro=r(e$," \u2014 "),HR=n(e$,"A",{href:!0});var NWr=s(HR);Sro=r(NWr,"LayoutXLMTokenizer"),NWr.forEach(t),Rro=r(e$," or "),UR=n(e$,"A",{href:!0});var jWr=s(UR);Pro=r(jWr,"LayoutXLMTokenizerFast"),jWr.forEach(t),Bro=r(e$," (LayoutXLM model)"),e$.forEach(t),Iro=i(S),ns=n(S,"LI",{});var o$=s(ns);Bte=n(o$,"STRONG",{});var DWr=s(Bte);qro=r(DWr,"led"),DWr.forEach(t),Nro=r(o$," \u2014 "),JR=n(o$,"A",{href:!0});var GWr=s(JR);jro=r(GWr,"LEDTokenizer"),GWr.forEach(t),Dro=r(o$," or "),YR=n(o$,"A",{href:!0});var OWr=s(YR);Gro=r(OWr,"LEDTokenizerFast"),OWr.forEach(t),Oro=r(o$," (LED model)"),o$.forEach(t),Vro=i(S),ss=n(S,"LI",{});var r$=s(ss);Ite=n(r$,"STRONG",{});var VWr=s(Ite);Xro=r(VWr,"longformer"),VWr.forEach(t),zro=r(r$," \u2014 "),KR=n(r$,"A",{href:!0});var XWr=s(KR);Wro=r(XWr,"LongformerTokenizer"),XWr.forEach(t),Qro=r(r$," or "),ZR=n(r$,"A",{href:!0});var zWr=s(ZR);Hro=r(zWr,"LongformerTokenizerFast"),zWr.forEach(t),Uro=r(r$," (Longformer model)"),r$.forEach(t),Jro=i(S),Pg=n(S,"LI",{});var N5e=s(Pg);qte=n(N5e,"STRONG",{});var WWr=s(qte);Yro=r(WWr,"luke"),WWr.forEach(t),Kro=r(N5e," \u2014 "),eP=n(N5e,"A",{href:!0});var QWr=s(eP);Zro=r(QWr,"LukeTokenizer"),QWr.forEach(t),eto=r(N5e," (LUKE model)"),N5e.forEach(t),oto=i(S),ls=n(S,"LI",{});var t$=s(ls);Nte=n(t$,"STRONG",{});var HWr=s(Nte);rto=r(HWr,"lxmert"),HWr.forEach(t),tto=r(t$," \u2014 "),oP=n(t$,"A",{href:!0});var UWr=s(oP);ato=r(UWr,"LxmertTokenizer"),UWr.forEach(t),nto=r(t$," or "),rP=n(t$,"A",{href:!0});var JWr=s(rP);sto=r(JWr,"LxmertTokenizerFast"),JWr.forEach(t),lto=r(t$," (LXMERT model)"),t$.forEach(t),ito=i(S),Bg=n(S,"LI",{});var j5e=s(Bg);jte=n(j5e,"STRONG",{});var YWr=s(jte);dto=r(YWr,"m2m_100"),YWr.forEach(t),cto=r(j5e," \u2014 "),tP=n(j5e,"A",{href:!0});var KWr=s(tP);fto=r(KWr,"M2M100Tokenizer"),KWr.forEach(t),mto=r(j5e," (M2M100 model)"),j5e.forEach(t),gto=i(S),Ig=n(S,"LI",{});var D5e=s(Ig);Dte=n(D5e,"STRONG",{});var ZWr=s(Dte);hto=r(ZWr,"marian"),ZWr.forEach(t),pto=r(D5e," \u2014 "),aP=n(D5e,"A",{href:!0});var eQr=s(aP);_to=r(eQr,"MarianTokenizer"),eQr.forEach(t),uto=r(D5e," (Marian model)"),D5e.forEach(t),bto=i(S),is=n(S,"LI",{});var a$=s(is);Gte=n(a$,"STRONG",{});var oQr=s(Gte);vto=r(oQr,"mbart"),oQr.forEach(t),Fto=r(a$," \u2014 "),nP=n(a$,"A",{href:!0});var rQr=s(nP);Tto=r(rQr,"MBartTokenizer"),rQr.forEach(t),Mto=r(a$," or "),sP=n(a$,"A",{href:!0});var tQr=s(sP);Eto=r(tQr,"MBartTokenizerFast"),tQr.forEach(t),Cto=r(a$," (mBART model)"),a$.forEach(t),wto=i(S),ds=n(S,"LI",{});var n$=s(ds);Ote=n(n$,"STRONG",{});var aQr=s(Ote);Ato=r(aQr,"mbart50"),aQr.forEach(t),yto=r(n$," \u2014 "),lP=n(n$,"A",{href:!0});var nQr=s(lP);Lto=r(nQr,"MBart50Tokenizer"),nQr.forEach(t),xto=r(n$," or "),iP=n(n$,"A",{href:!0});var sQr=s(iP);$to=r(sQr,"MBart50TokenizerFast"),sQr.forEach(t),kto=r(n$," (mBART-50 model)"),n$.forEach(t),Sto=i(S),cs=n(S,"LI",{});var s$=s(cs);Vte=n(s$,"STRONG",{});var lQr=s(Vte);Rto=r(lQr,"megatron-bert"),lQr.forEach(t),Pto=r(s$," \u2014 "),dP=n(s$,"A",{href:!0});var iQr=s(dP);Bto=r(iQr,"BertTokenizer"),iQr.forEach(t),Ito=r(s$," or "),cP=n(s$,"A",{href:!0});var dQr=s(cP);qto=r(dQr,"BertTokenizerFast"),dQr.forEach(t),Nto=r(s$," (MegatronBert model)"),s$.forEach(t),jto=i(S),qg=n(S,"LI",{});var G5e=s(qg);Xte=n(G5e,"STRONG",{});var cQr=s(Xte);Dto=r(cQr,"mluke"),cQr.forEach(t),Gto=r(G5e," \u2014 "),fP=n(G5e,"A",{href:!0});var fQr=s(fP);Oto=r(fQr,"MLukeTokenizer"),fQr.forEach(t),Vto=r(G5e," (mLUKE model)"),G5e.forEach(t),Xto=i(S),fs=n(S,"LI",{});var l$=s(fs);zte=n(l$,"STRONG",{});var mQr=s(zte);zto=r(mQr,"mobilebert"),mQr.forEach(t),Wto=r(l$," \u2014 "),mP=n(l$,"A",{href:!0});var gQr=s(mP);Qto=r(gQr,"MobileBertTokenizer"),gQr.forEach(t),Hto=r(l$," or "),gP=n(l$,"A",{href:!0});var hQr=s(gP);Uto=r(hQr,"MobileBertTokenizerFast"),hQr.forEach(t),Jto=r(l$," (MobileBERT model)"),l$.forEach(t),Yto=i(S),ms=n(S,"LI",{});var i$=s(ms);Wte=n(i$,"STRONG",{});var pQr=s(Wte);Kto=r(pQr,"mpnet"),pQr.forEach(t),Zto=r(i$," \u2014 "),hP=n(i$,"A",{href:!0});var _Qr=s(hP);eao=r(_Qr,"MPNetTokenizer"),_Qr.forEach(t),oao=r(i$," or "),pP=n(i$,"A",{href:!0});var uQr=s(pP);rao=r(uQr,"MPNetTokenizerFast"),uQr.forEach(t),tao=r(i$," (MPNet model)"),i$.forEach(t),aao=i(S),gs=n(S,"LI",{});var d$=s(gs);Qte=n(d$,"STRONG",{});var bQr=s(Qte);nao=r(bQr,"mt5"),bQr.forEach(t),sao=r(d$," \u2014 "),_P=n(d$,"A",{href:!0});var vQr=s(_P);lao=r(vQr,"MT5Tokenizer"),vQr.forEach(t),iao=r(d$," or "),uP=n(d$,"A",{href:!0});var FQr=s(uP);dao=r(FQr,"MT5TokenizerFast"),FQr.forEach(t),cao=r(d$," (mT5 model)"),d$.forEach(t),fao=i(S),hs=n(S,"LI",{});var c$=s(hs);Hte=n(c$,"STRONG",{});var TQr=s(Hte);mao=r(TQr,"nystromformer"),TQr.forEach(t),gao=r(c$," \u2014 "),bP=n(c$,"A",{href:!0});var MQr=s(bP);hao=r(MQr,"AlbertTokenizer"),MQr.forEach(t),pao=r(c$," or "),vP=n(c$,"A",{href:!0});var EQr=s(vP);_ao=r(EQr,"AlbertTokenizerFast"),EQr.forEach(t),uao=r(c$," (Nystromformer model)"),c$.forEach(t),bao=i(S),ps=n(S,"LI",{});var f$=s(ps);Ute=n(f$,"STRONG",{});var CQr=s(Ute);vao=r(CQr,"openai-gpt"),CQr.forEach(t),Fao=r(f$," \u2014 "),FP=n(f$,"A",{href:!0});var wQr=s(FP);Tao=r(wQr,"OpenAIGPTTokenizer"),wQr.forEach(t),Mao=r(f$," or "),TP=n(f$,"A",{href:!0});var AQr=s(TP);Eao=r(AQr,"OpenAIGPTTokenizerFast"),AQr.forEach(t),Cao=r(f$," (OpenAI GPT model)"),f$.forEach(t),wao=i(S),Ng=n(S,"LI",{});var O5e=s(Ng);Jte=n(O5e,"STRONG",{});var yQr=s(Jte);Aao=r(yQr,"opt"),yQr.forEach(t),yao=r(O5e," \u2014 "),MP=n(O5e,"A",{href:!0});var LQr=s(MP);Lao=r(LQr,"GPT2Tokenizer"),LQr.forEach(t),xao=r(O5e," (OPT model)"),O5e.forEach(t),$ao=i(S),_s=n(S,"LI",{});var m$=s(_s);Yte=n(m$,"STRONG",{});var xQr=s(Yte);kao=r(xQr,"pegasus"),xQr.forEach(t),Sao=r(m$," \u2014 "),EP=n(m$,"A",{href:!0});var $Qr=s(EP);Rao=r($Qr,"PegasusTokenizer"),$Qr.forEach(t),Pao=r(m$," or "),CP=n(m$,"A",{href:!0});var kQr=s(CP);Bao=r(kQr,"PegasusTokenizerFast"),kQr.forEach(t),Iao=r(m$," (Pegasus model)"),m$.forEach(t),qao=i(S),jg=n(S,"LI",{});var V5e=s(jg);Kte=n(V5e,"STRONG",{});var SQr=s(Kte);Nao=r(SQr,"perceiver"),SQr.forEach(t),jao=r(V5e," \u2014 "),wP=n(V5e,"A",{href:!0});var RQr=s(wP);Dao=r(RQr,"PerceiverTokenizer"),RQr.forEach(t),Gao=r(V5e," (Perceiver model)"),V5e.forEach(t),Oao=i(S),Dg=n(S,"LI",{});var X5e=s(Dg);Zte=n(X5e,"STRONG",{});var PQr=s(Zte);Vao=r(PQr,"phobert"),PQr.forEach(t),Xao=r(X5e," \u2014 "),AP=n(X5e,"A",{href:!0});var BQr=s(AP);zao=r(BQr,"PhobertTokenizer"),BQr.forEach(t),Wao=r(X5e," (PhoBERT model)"),X5e.forEach(t),Qao=i(S),Gg=n(S,"LI",{});var z5e=s(Gg);eae=n(z5e,"STRONG",{});var IQr=s(eae);Hao=r(IQr,"plbart"),IQr.forEach(t),Uao=r(z5e," \u2014 "),yP=n(z5e,"A",{href:!0});var qQr=s(yP);Jao=r(qQr,"PLBartTokenizer"),qQr.forEach(t),Yao=r(z5e," (PLBart model)"),z5e.forEach(t),Kao=i(S),Og=n(S,"LI",{});var W5e=s(Og);oae=n(W5e,"STRONG",{});var NQr=s(oae);Zao=r(NQr,"prophetnet"),NQr.forEach(t),eno=r(W5e," \u2014 "),LP=n(W5e,"A",{href:!0});var jQr=s(LP);ono=r(jQr,"ProphetNetTokenizer"),jQr.forEach(t),rno=r(W5e," (ProphetNet model)"),W5e.forEach(t),tno=i(S),us=n(S,"LI",{});var g$=s(us);rae=n(g$,"STRONG",{});var DQr=s(rae);ano=r(DQr,"qdqbert"),DQr.forEach(t),nno=r(g$," \u2014 "),xP=n(g$,"A",{href:!0});var GQr=s(xP);sno=r(GQr,"BertTokenizer"),GQr.forEach(t),lno=r(g$," or "),$P=n(g$,"A",{href:!0});var OQr=s($P);ino=r(OQr,"BertTokenizerFast"),OQr.forEach(t),dno=r(g$," (QDQBert model)"),g$.forEach(t),cno=i(S),Vg=n(S,"LI",{});var Q5e=s(Vg);tae=n(Q5e,"STRONG",{});var VQr=s(tae);fno=r(VQr,"rag"),VQr.forEach(t),mno=r(Q5e," \u2014 "),kP=n(Q5e,"A",{href:!0});var XQr=s(kP);gno=r(XQr,"RagTokenizer"),XQr.forEach(t),hno=r(Q5e," (RAG model)"),Q5e.forEach(t),pno=i(S),bs=n(S,"LI",{});var h$=s(bs);aae=n(h$,"STRONG",{});var zQr=s(aae);_no=r(zQr,"realm"),zQr.forEach(t),uno=r(h$," \u2014 "),SP=n(h$,"A",{href:!0});var WQr=s(SP);bno=r(WQr,"RealmTokenizer"),WQr.forEach(t),vno=r(h$," or "),RP=n(h$,"A",{href:!0});var QQr=s(RP);Fno=r(QQr,"RealmTokenizerFast"),QQr.forEach(t),Tno=r(h$," (Realm model)"),h$.forEach(t),Mno=i(S),vs=n(S,"LI",{});var p$=s(vs);nae=n(p$,"STRONG",{});var HQr=s(nae);Eno=r(HQr,"reformer"),HQr.forEach(t),Cno=r(p$," \u2014 "),PP=n(p$,"A",{href:!0});var UQr=s(PP);wno=r(UQr,"ReformerTokenizer"),UQr.forEach(t),Ano=r(p$," or "),BP=n(p$,"A",{href:!0});var JQr=s(BP);yno=r(JQr,"ReformerTokenizerFast"),JQr.forEach(t),Lno=r(p$," (Reformer model)"),p$.forEach(t),xno=i(S),Fs=n(S,"LI",{});var _$=s(Fs);sae=n(_$,"STRONG",{});var YQr=s(sae);$no=r(YQr,"rembert"),YQr.forEach(t),kno=r(_$," \u2014 "),IP=n(_$,"A",{href:!0});var KQr=s(IP);Sno=r(KQr,"RemBertTokenizer"),KQr.forEach(t),Rno=r(_$," or "),qP=n(_$,"A",{href:!0});var ZQr=s(qP);Pno=r(ZQr,"RemBertTokenizerFast"),ZQr.forEach(t),Bno=r(_$," (RemBERT model)"),_$.forEach(t),Ino=i(S),Ts=n(S,"LI",{});var u$=s(Ts);lae=n(u$,"STRONG",{});var eHr=s(lae);qno=r(eHr,"retribert"),eHr.forEach(t),Nno=r(u$," \u2014 "),NP=n(u$,"A",{href:!0});var oHr=s(NP);jno=r(oHr,"RetriBertTokenizer"),oHr.forEach(t),Dno=r(u$," or "),jP=n(u$,"A",{href:!0});var rHr=s(jP);Gno=r(rHr,"RetriBertTokenizerFast"),rHr.forEach(t),Ono=r(u$," (RetriBERT model)"),u$.forEach(t),Vno=i(S),Ms=n(S,"LI",{});var b$=s(Ms);iae=n(b$,"STRONG",{});var tHr=s(iae);Xno=r(tHr,"roberta"),tHr.forEach(t),zno=r(b$," \u2014 "),DP=n(b$,"A",{href:!0});var aHr=s(DP);Wno=r(aHr,"RobertaTokenizer"),aHr.forEach(t),Qno=r(b$," or "),GP=n(b$,"A",{href:!0});var nHr=s(GP);Hno=r(nHr,"RobertaTokenizerFast"),nHr.forEach(t),Uno=r(b$," (RoBERTa model)"),b$.forEach(t),Jno=i(S),Es=n(S,"LI",{});var v$=s(Es);dae=n(v$,"STRONG",{});var sHr=s(dae);Yno=r(sHr,"roformer"),sHr.forEach(t),Kno=r(v$," \u2014 "),OP=n(v$,"A",{href:!0});var lHr=s(OP);Zno=r(lHr,"RoFormerTokenizer"),lHr.forEach(t),eso=r(v$," or "),VP=n(v$,"A",{href:!0});var iHr=s(VP);oso=r(iHr,"RoFormerTokenizerFast"),iHr.forEach(t),rso=r(v$," (RoFormer model)"),v$.forEach(t),tso=i(S),Xg=n(S,"LI",{});var H5e=s(Xg);cae=n(H5e,"STRONG",{});var dHr=s(cae);aso=r(dHr,"speech_to_text"),dHr.forEach(t),nso=r(H5e," \u2014 "),XP=n(H5e,"A",{href:!0});var cHr=s(XP);sso=r(cHr,"Speech2TextTokenizer"),cHr.forEach(t),lso=r(H5e," (Speech2Text model)"),H5e.forEach(t),iso=i(S),zg=n(S,"LI",{});var U5e=s(zg);fae=n(U5e,"STRONG",{});var fHr=s(fae);dso=r(fHr,"speech_to_text_2"),fHr.forEach(t),cso=r(U5e," \u2014 "),zP=n(U5e,"A",{href:!0});var mHr=s(zP);fso=r(mHr,"Speech2Text2Tokenizer"),mHr.forEach(t),mso=r(U5e," (Speech2Text2 model)"),U5e.forEach(t),gso=i(S),Cs=n(S,"LI",{});var F$=s(Cs);mae=n(F$,"STRONG",{});var gHr=s(mae);hso=r(gHr,"splinter"),gHr.forEach(t),pso=r(F$," \u2014 "),WP=n(F$,"A",{href:!0});var hHr=s(WP);_so=r(hHr,"SplinterTokenizer"),hHr.forEach(t),uso=r(F$," or "),QP=n(F$,"A",{href:!0});var pHr=s(QP);bso=r(pHr,"SplinterTokenizerFast"),pHr.forEach(t),vso=r(F$," (Splinter model)"),F$.forEach(t),Fso=i(S),ws=n(S,"LI",{});var T$=s(ws);gae=n(T$,"STRONG",{});var _Hr=s(gae);Tso=r(_Hr,"squeezebert"),_Hr.forEach(t),Mso=r(T$," \u2014 "),HP=n(T$,"A",{href:!0});var uHr=s(HP);Eso=r(uHr,"SqueezeBertTokenizer"),uHr.forEach(t),Cso=r(T$," or "),UP=n(T$,"A",{href:!0});var bHr=s(UP);wso=r(bHr,"SqueezeBertTokenizerFast"),bHr.forEach(t),Aso=r(T$," (SqueezeBERT model)"),T$.forEach(t),yso=i(S),As=n(S,"LI",{});var M$=s(As);hae=n(M$,"STRONG",{});var vHr=s(hae);Lso=r(vHr,"t5"),vHr.forEach(t),xso=r(M$," \u2014 "),JP=n(M$,"A",{href:!0});var FHr=s(JP);$so=r(FHr,"T5Tokenizer"),FHr.forEach(t),kso=r(M$," or "),YP=n(M$,"A",{href:!0});var THr=s(YP);Sso=r(THr,"T5TokenizerFast"),THr.forEach(t),Rso=r(M$," (T5 model)"),M$.forEach(t),Pso=i(S),Wg=n(S,"LI",{});var J5e=s(Wg);pae=n(J5e,"STRONG",{});var MHr=s(pae);Bso=r(MHr,"tapas"),MHr.forEach(t),Iso=r(J5e," \u2014 "),KP=n(J5e,"A",{href:!0});var EHr=s(KP);qso=r(EHr,"TapasTokenizer"),EHr.forEach(t),Nso=r(J5e," (TAPAS model)"),J5e.forEach(t),jso=i(S),Qg=n(S,"LI",{});var Y5e=s(Qg);_ae=n(Y5e,"STRONG",{});var CHr=s(_ae);Dso=r(CHr,"tapex"),CHr.forEach(t),Gso=r(Y5e," \u2014 "),ZP=n(Y5e,"A",{href:!0});var wHr=s(ZP);Oso=r(wHr,"TapexTokenizer"),wHr.forEach(t),Vso=r(Y5e," (TAPEX model)"),Y5e.forEach(t),Xso=i(S),Hg=n(S,"LI",{});var K5e=s(Hg);uae=n(K5e,"STRONG",{});var AHr=s(uae);zso=r(AHr,"transfo-xl"),AHr.forEach(t),Wso=r(K5e," \u2014 "),eB=n(K5e,"A",{href:!0});var yHr=s(eB);Qso=r(yHr,"TransfoXLTokenizer"),yHr.forEach(t),Hso=r(K5e," (Transformer-XL model)"),K5e.forEach(t),Uso=i(S),ys=n(S,"LI",{});var E$=s(ys);bae=n(E$,"STRONG",{});var LHr=s(bae);Jso=r(LHr,"visual_bert"),LHr.forEach(t),Yso=r(E$," \u2014 "),oB=n(E$,"A",{href:!0});var xHr=s(oB);Kso=r(xHr,"BertTokenizer"),xHr.forEach(t),Zso=r(E$," or "),rB=n(E$,"A",{href:!0});var $Hr=s(rB);elo=r($Hr,"BertTokenizerFast"),$Hr.forEach(t),olo=r(E$," (VisualBert model)"),E$.forEach(t),rlo=i(S),Ug=n(S,"LI",{});var Z5e=s(Ug);vae=n(Z5e,"STRONG",{});var kHr=s(vae);tlo=r(kHr,"wav2vec2"),kHr.forEach(t),alo=r(Z5e," \u2014 "),tB=n(Z5e,"A",{href:!0});var SHr=s(tB);nlo=r(SHr,"Wav2Vec2CTCTokenizer"),SHr.forEach(t),slo=r(Z5e," (Wav2Vec2 model)"),Z5e.forEach(t),llo=i(S),Jg=n(S,"LI",{});var e3e=s(Jg);Fae=n(e3e,"STRONG",{});var RHr=s(Fae);ilo=r(RHr,"wav2vec2-conformer"),RHr.forEach(t),dlo=r(e3e," \u2014 "),aB=n(e3e,"A",{href:!0});var PHr=s(aB);clo=r(PHr,"Wav2Vec2CTCTokenizer"),PHr.forEach(t),flo=r(e3e," (Wav2Vec2-Conformer model)"),e3e.forEach(t),mlo=i(S),Yg=n(S,"LI",{});var o3e=s(Yg);Tae=n(o3e,"STRONG",{});var BHr=s(Tae);glo=r(BHr,"wav2vec2_phoneme"),BHr.forEach(t),hlo=r(o3e," \u2014 "),nB=n(o3e,"A",{href:!0});var IHr=s(nB);plo=r(IHr,"Wav2Vec2PhonemeCTCTokenizer"),IHr.forEach(t),_lo=r(o3e," (Wav2Vec2Phoneme model)"),o3e.forEach(t),ulo=i(S),Ls=n(S,"LI",{});var C$=s(Ls);Mae=n(C$,"STRONG",{});var qHr=s(Mae);blo=r(qHr,"xglm"),qHr.forEach(t),vlo=r(C$," \u2014 "),sB=n(C$,"A",{href:!0});var NHr=s(sB);Flo=r(NHr,"XGLMTokenizer"),NHr.forEach(t),Tlo=r(C$," or "),lB=n(C$,"A",{href:!0});var jHr=s(lB);Mlo=r(jHr,"XGLMTokenizerFast"),jHr.forEach(t),Elo=r(C$," (XGLM model)"),C$.forEach(t),Clo=i(S),Kg=n(S,"LI",{});var r3e=s(Kg);Eae=n(r3e,"STRONG",{});var DHr=s(Eae);wlo=r(DHr,"xlm"),DHr.forEach(t),Alo=r(r3e," \u2014 "),iB=n(r3e,"A",{href:!0});var GHr=s(iB);ylo=r(GHr,"XLMTokenizer"),GHr.forEach(t),Llo=r(r3e," (XLM model)"),r3e.forEach(t),xlo=i(S),Zg=n(S,"LI",{});var t3e=s(Zg);Cae=n(t3e,"STRONG",{});var OHr=s(Cae);$lo=r(OHr,"xlm-prophetnet"),OHr.forEach(t),klo=r(t3e," \u2014 "),dB=n(t3e,"A",{href:!0});var VHr=s(dB);Slo=r(VHr,"XLMProphetNetTokenizer"),VHr.forEach(t),Rlo=r(t3e," (XLMProphetNet model)"),t3e.forEach(t),Plo=i(S),xs=n(S,"LI",{});var w$=s(xs);wae=n(w$,"STRONG",{});var XHr=s(wae);Blo=r(XHr,"xlm-roberta"),XHr.forEach(t),Ilo=r(w$," \u2014 "),cB=n(w$,"A",{href:!0});var zHr=s(cB);qlo=r(zHr,"XLMRobertaTokenizer"),zHr.forEach(t),Nlo=r(w$," or "),fB=n(w$,"A",{href:!0});var WHr=s(fB);jlo=r(WHr,"XLMRobertaTokenizerFast"),WHr.forEach(t),Dlo=r(w$," (XLM-RoBERTa model)"),w$.forEach(t),Glo=i(S),$s=n(S,"LI",{});var A$=s($s);Aae=n(A$,"STRONG",{});var QHr=s(Aae);Olo=r(QHr,"xlm-roberta-xl"),QHr.forEach(t),Vlo=r(A$," \u2014 "),mB=n(A$,"A",{href:!0});var HHr=s(mB);Xlo=r(HHr,"RobertaTokenizer"),HHr.forEach(t),zlo=r(A$," or "),gB=n(A$,"A",{href:!0});var UHr=s(gB);Wlo=r(UHr,"RobertaTokenizerFast"),UHr.forEach(t),Qlo=r(A$," (XLM-RoBERTa-XL model)"),A$.forEach(t),Hlo=i(S),ks=n(S,"LI",{});var y$=s(ks);yae=n(y$,"STRONG",{});var JHr=s(yae);Ulo=r(JHr,"xlnet"),JHr.forEach(t),Jlo=r(y$," \u2014 "),hB=n(y$,"A",{href:!0});var YHr=s(hB);Ylo=r(YHr,"XLNetTokenizer"),YHr.forEach(t),Klo=r(y$," or "),pB=n(y$,"A",{href:!0});var KHr=s(pB);Zlo=r(KHr,"XLNetTokenizerFast"),KHr.forEach(t),eio=r(y$," (XLNet model)"),y$.forEach(t),oio=i(S),Ss=n(S,"LI",{});var L$=s(Ss);Lae=n(L$,"STRONG",{});var ZHr=s(Lae);rio=r(ZHr,"yoso"),ZHr.forEach(t),tio=r(L$," \u2014 "),_B=n(L$,"A",{href:!0});var eUr=s(_B);aio=r(eUr,"AlbertTokenizer"),eUr.forEach(t),nio=r(L$," or "),uB=n(L$,"A",{href:!0});var oUr=s(uB);sio=r(oUr,"AlbertTokenizerFast"),oUr.forEach(t),lio=r(L$," (YOSO model)"),L$.forEach(t),S.forEach(t),iio=i(qs),T(eh.$$.fragment,qs),qs.forEach(t),dio=i(Is),oh=n(Is,"DIV",{class:!0});var fje=s(oh);T(L0.$$.fragment,fje),cio=i(fje),xae=n(fje,"P",{});var rUr=s(xae);fio=r(rUr,"Register a new tokenizer in this mapping."),rUr.forEach(t),fje.forEach(t),Is.forEach(t),mqe=i(f),Ti=n(f,"H2",{class:!0});var mje=s(Ti);rh=n(mje,"A",{id:!0,class:!0,href:!0});var tUr=s(rh);$ae=n(tUr,"SPAN",{});var aUr=s($ae);T(x0.$$.fragment,aUr),aUr.forEach(t),tUr.forEach(t),mio=i(mje),kae=n(mje,"SPAN",{});var nUr=s(kae);gio=r(nUr,"AutoFeatureExtractor"),nUr.forEach(t),mje.forEach(t),gqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T($0.$$.fragment,Ns),hio=i(Ns),k0=n(Ns,"P",{});var gje=s(k0);pio=r(gje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bB=n(gje,"A",{href:!0});var sUr=s(bB);_io=r(sUr,"AutoFeatureExtractor.from_pretrained()"),sUr.forEach(t),uio=r(gje," class method."),gje.forEach(t),bio=i(Ns),S0=n(Ns,"P",{});var hje=s(S0);vio=r(hje,"This class cannot be instantiated directly using "),Sae=n(hje,"CODE",{});var lUr=s(Sae);Fio=r(lUr,"__init__()"),lUr.forEach(t),Tio=r(hje," (throws an error)."),hje.forEach(t),Mio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(R0.$$.fragment,Zt),Eio=i(Zt),Rae=n(Zt,"P",{});var iUr=s(Rae);Cio=r(iUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),iUr.forEach(t),wio=i(Zt),ya=n(Zt,"P",{});var b3=s(ya);Aio=r(b3,"The feature extractor class to instantiate is selected based on the "),Pae=n(b3,"CODE",{});var dUr=s(Pae);yio=r(dUr,"model_type"),dUr.forEach(t),Lio=r(b3,` property of the config object
(either passed as an argument or loaded from `),Bae=n(b3,"CODE",{});var cUr=s(Bae);xio=r(cUr,"pretrained_model_name_or_path"),cUr.forEach(t),$io=r(b3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iae=n(b3,"CODE",{});var fUr=s(Iae);kio=r(fUr,"pretrained_model_name_or_path"),fUr.forEach(t),Sio=r(b3,":"),b3.forEach(t),Rio=i(Zt),K=n(Zt,"UL",{});var ee=s(K);th=n(ee,"LI",{});var a3e=s(th);qae=n(a3e,"STRONG",{});var mUr=s(qae);Pio=r(mUr,"beit"),mUr.forEach(t),Bio=r(a3e," \u2014 "),vB=n(a3e,"A",{href:!0});var gUr=s(vB);Iio=r(gUr,"BeitFeatureExtractor"),gUr.forEach(t),qio=r(a3e," (BEiT model)"),a3e.forEach(t),Nio=i(ee),ah=n(ee,"LI",{});var n3e=s(ah);Nae=n(n3e,"STRONG",{});var hUr=s(Nae);jio=r(hUr,"clip"),hUr.forEach(t),Dio=r(n3e," \u2014 "),FB=n(n3e,"A",{href:!0});var pUr=s(FB);Gio=r(pUr,"CLIPFeatureExtractor"),pUr.forEach(t),Oio=r(n3e," (CLIP model)"),n3e.forEach(t),Vio=i(ee),nh=n(ee,"LI",{});var s3e=s(nh);jae=n(s3e,"STRONG",{});var _Ur=s(jae);Xio=r(_Ur,"convnext"),_Ur.forEach(t),zio=r(s3e," \u2014 "),TB=n(s3e,"A",{href:!0});var uUr=s(TB);Wio=r(uUr,"ConvNextFeatureExtractor"),uUr.forEach(t),Qio=r(s3e," (ConvNext model)"),s3e.forEach(t),Hio=i(ee),sh=n(ee,"LI",{});var l3e=s(sh);Dae=n(l3e,"STRONG",{});var bUr=s(Dae);Uio=r(bUr,"cvt"),bUr.forEach(t),Jio=r(l3e," \u2014 "),MB=n(l3e,"A",{href:!0});var vUr=s(MB);Yio=r(vUr,"ConvNextFeatureExtractor"),vUr.forEach(t),Kio=r(l3e," (CvT model)"),l3e.forEach(t),Zio=i(ee),lh=n(ee,"LI",{});var i3e=s(lh);Gae=n(i3e,"STRONG",{});var FUr=s(Gae);edo=r(FUr,"data2vec-audio"),FUr.forEach(t),odo=r(i3e," \u2014 "),EB=n(i3e,"A",{href:!0});var TUr=s(EB);rdo=r(TUr,"Wav2Vec2FeatureExtractor"),TUr.forEach(t),tdo=r(i3e," (Data2VecAudio model)"),i3e.forEach(t),ado=i(ee),ih=n(ee,"LI",{});var d3e=s(ih);Oae=n(d3e,"STRONG",{});var MUr=s(Oae);ndo=r(MUr,"data2vec-vision"),MUr.forEach(t),sdo=r(d3e," \u2014 "),CB=n(d3e,"A",{href:!0});var EUr=s(CB);ldo=r(EUr,"BeitFeatureExtractor"),EUr.forEach(t),ido=r(d3e," (Data2VecVision model)"),d3e.forEach(t),ddo=i(ee),dh=n(ee,"LI",{});var c3e=s(dh);Vae=n(c3e,"STRONG",{});var CUr=s(Vae);cdo=r(CUr,"deit"),CUr.forEach(t),fdo=r(c3e," \u2014 "),wB=n(c3e,"A",{href:!0});var wUr=s(wB);mdo=r(wUr,"DeiTFeatureExtractor"),wUr.forEach(t),gdo=r(c3e," (DeiT model)"),c3e.forEach(t),hdo=i(ee),ch=n(ee,"LI",{});var f3e=s(ch);Xae=n(f3e,"STRONG",{});var AUr=s(Xae);pdo=r(AUr,"detr"),AUr.forEach(t),_do=r(f3e," \u2014 "),AB=n(f3e,"A",{href:!0});var yUr=s(AB);udo=r(yUr,"DetrFeatureExtractor"),yUr.forEach(t),bdo=r(f3e," (DETR model)"),f3e.forEach(t),vdo=i(ee),fh=n(ee,"LI",{});var m3e=s(fh);zae=n(m3e,"STRONG",{});var LUr=s(zae);Fdo=r(LUr,"dpt"),LUr.forEach(t),Tdo=r(m3e," \u2014 "),yB=n(m3e,"A",{href:!0});var xUr=s(yB);Mdo=r(xUr,"DPTFeatureExtractor"),xUr.forEach(t),Edo=r(m3e," (DPT model)"),m3e.forEach(t),Cdo=i(ee),mh=n(ee,"LI",{});var g3e=s(mh);Wae=n(g3e,"STRONG",{});var $Ur=s(Wae);wdo=r($Ur,"flava"),$Ur.forEach(t),Ado=r(g3e," \u2014 "),LB=n(g3e,"A",{href:!0});var kUr=s(LB);ydo=r(kUr,"FlavaFeatureExtractor"),kUr.forEach(t),Ldo=r(g3e," (Flava model)"),g3e.forEach(t),xdo=i(ee),gh=n(ee,"LI",{});var h3e=s(gh);Qae=n(h3e,"STRONG",{});var SUr=s(Qae);$do=r(SUr,"glpn"),SUr.forEach(t),kdo=r(h3e," \u2014 "),xB=n(h3e,"A",{href:!0});var RUr=s(xB);Sdo=r(RUr,"GLPNFeatureExtractor"),RUr.forEach(t),Rdo=r(h3e," (GLPN model)"),h3e.forEach(t),Pdo=i(ee),hh=n(ee,"LI",{});var p3e=s(hh);Hae=n(p3e,"STRONG",{});var PUr=s(Hae);Bdo=r(PUr,"hubert"),PUr.forEach(t),Ido=r(p3e," \u2014 "),$B=n(p3e,"A",{href:!0});var BUr=s($B);qdo=r(BUr,"Wav2Vec2FeatureExtractor"),BUr.forEach(t),Ndo=r(p3e," (Hubert model)"),p3e.forEach(t),jdo=i(ee),ph=n(ee,"LI",{});var _3e=s(ph);Uae=n(_3e,"STRONG",{});var IUr=s(Uae);Ddo=r(IUr,"imagegpt"),IUr.forEach(t),Gdo=r(_3e," \u2014 "),kB=n(_3e,"A",{href:!0});var qUr=s(kB);Odo=r(qUr,"ImageGPTFeatureExtractor"),qUr.forEach(t),Vdo=r(_3e," (ImageGPT model)"),_3e.forEach(t),Xdo=i(ee),_h=n(ee,"LI",{});var u3e=s(_h);Jae=n(u3e,"STRONG",{});var NUr=s(Jae);zdo=r(NUr,"layoutlmv2"),NUr.forEach(t),Wdo=r(u3e," \u2014 "),SB=n(u3e,"A",{href:!0});var jUr=s(SB);Qdo=r(jUr,"LayoutLMv2FeatureExtractor"),jUr.forEach(t),Hdo=r(u3e," (LayoutLMv2 model)"),u3e.forEach(t),Udo=i(ee),uh=n(ee,"LI",{});var b3e=s(uh);Yae=n(b3e,"STRONG",{});var DUr=s(Yae);Jdo=r(DUr,"maskformer"),DUr.forEach(t),Ydo=r(b3e," \u2014 "),RB=n(b3e,"A",{href:!0});var GUr=s(RB);Kdo=r(GUr,"MaskFormerFeatureExtractor"),GUr.forEach(t),Zdo=r(b3e," (MaskFormer model)"),b3e.forEach(t),eco=i(ee),bh=n(ee,"LI",{});var v3e=s(bh);Kae=n(v3e,"STRONG",{});var OUr=s(Kae);oco=r(OUr,"perceiver"),OUr.forEach(t),rco=r(v3e," \u2014 "),PB=n(v3e,"A",{href:!0});var VUr=s(PB);tco=r(VUr,"PerceiverFeatureExtractor"),VUr.forEach(t),aco=r(v3e," (Perceiver model)"),v3e.forEach(t),nco=i(ee),vh=n(ee,"LI",{});var F3e=s(vh);Zae=n(F3e,"STRONG",{});var XUr=s(Zae);sco=r(XUr,"poolformer"),XUr.forEach(t),lco=r(F3e," \u2014 "),BB=n(F3e,"A",{href:!0});var zUr=s(BB);ico=r(zUr,"PoolFormerFeatureExtractor"),zUr.forEach(t),dco=r(F3e," (PoolFormer model)"),F3e.forEach(t),cco=i(ee),Fh=n(ee,"LI",{});var T3e=s(Fh);ene=n(T3e,"STRONG",{});var WUr=s(ene);fco=r(WUr,"regnet"),WUr.forEach(t),mco=r(T3e," \u2014 "),IB=n(T3e,"A",{href:!0});var QUr=s(IB);gco=r(QUr,"ConvNextFeatureExtractor"),QUr.forEach(t),hco=r(T3e," (RegNet model)"),T3e.forEach(t),pco=i(ee),Th=n(ee,"LI",{});var M3e=s(Th);one=n(M3e,"STRONG",{});var HUr=s(one);_co=r(HUr,"resnet"),HUr.forEach(t),uco=r(M3e," \u2014 "),qB=n(M3e,"A",{href:!0});var UUr=s(qB);bco=r(UUr,"ConvNextFeatureExtractor"),UUr.forEach(t),vco=r(M3e," (ResNet model)"),M3e.forEach(t),Fco=i(ee),Mh=n(ee,"LI",{});var E3e=s(Mh);rne=n(E3e,"STRONG",{});var JUr=s(rne);Tco=r(JUr,"segformer"),JUr.forEach(t),Mco=r(E3e," \u2014 "),NB=n(E3e,"A",{href:!0});var YUr=s(NB);Eco=r(YUr,"SegformerFeatureExtractor"),YUr.forEach(t),Cco=r(E3e," (SegFormer model)"),E3e.forEach(t),wco=i(ee),Eh=n(ee,"LI",{});var C3e=s(Eh);tne=n(C3e,"STRONG",{});var KUr=s(tne);Aco=r(KUr,"speech_to_text"),KUr.forEach(t),yco=r(C3e," \u2014 "),jB=n(C3e,"A",{href:!0});var ZUr=s(jB);Lco=r(ZUr,"Speech2TextFeatureExtractor"),ZUr.forEach(t),xco=r(C3e," (Speech2Text model)"),C3e.forEach(t),$co=i(ee),Ch=n(ee,"LI",{});var w3e=s(Ch);ane=n(w3e,"STRONG",{});var eJr=s(ane);kco=r(eJr,"swin"),eJr.forEach(t),Sco=r(w3e," \u2014 "),DB=n(w3e,"A",{href:!0});var oJr=s(DB);Rco=r(oJr,"ViTFeatureExtractor"),oJr.forEach(t),Pco=r(w3e," (Swin model)"),w3e.forEach(t),Bco=i(ee),wh=n(ee,"LI",{});var A3e=s(wh);nne=n(A3e,"STRONG",{});var rJr=s(nne);Ico=r(rJr,"van"),rJr.forEach(t),qco=r(A3e," \u2014 "),GB=n(A3e,"A",{href:!0});var tJr=s(GB);Nco=r(tJr,"ConvNextFeatureExtractor"),tJr.forEach(t),jco=r(A3e," (VAN model)"),A3e.forEach(t),Dco=i(ee),Ah=n(ee,"LI",{});var y3e=s(Ah);sne=n(y3e,"STRONG",{});var aJr=s(sne);Gco=r(aJr,"vit"),aJr.forEach(t),Oco=r(y3e," \u2014 "),OB=n(y3e,"A",{href:!0});var nJr=s(OB);Vco=r(nJr,"ViTFeatureExtractor"),nJr.forEach(t),Xco=r(y3e," (ViT model)"),y3e.forEach(t),zco=i(ee),yh=n(ee,"LI",{});var L3e=s(yh);lne=n(L3e,"STRONG",{});var sJr=s(lne);Wco=r(sJr,"vit_mae"),sJr.forEach(t),Qco=r(L3e," \u2014 "),VB=n(L3e,"A",{href:!0});var lJr=s(VB);Hco=r(lJr,"ViTFeatureExtractor"),lJr.forEach(t),Uco=r(L3e," (ViTMAE model)"),L3e.forEach(t),Jco=i(ee),Lh=n(ee,"LI",{});var x3e=s(Lh);ine=n(x3e,"STRONG",{});var iJr=s(ine);Yco=r(iJr,"wav2vec2"),iJr.forEach(t),Kco=r(x3e," \u2014 "),XB=n(x3e,"A",{href:!0});var dJr=s(XB);Zco=r(dJr,"Wav2Vec2FeatureExtractor"),dJr.forEach(t),efo=r(x3e," (Wav2Vec2 model)"),x3e.forEach(t),ofo=i(ee),xh=n(ee,"LI",{});var $3e=s(xh);dne=n($3e,"STRONG",{});var cJr=s(dne);rfo=r(cJr,"wav2vec2-conformer"),cJr.forEach(t),tfo=r($3e," \u2014 "),zB=n($3e,"A",{href:!0});var fJr=s(zB);afo=r(fJr,"Wav2Vec2FeatureExtractor"),fJr.forEach(t),nfo=r($3e," (Wav2Vec2-Conformer model)"),$3e.forEach(t),sfo=i(ee),$h=n(ee,"LI",{});var k3e=s($h);cne=n(k3e,"STRONG",{});var mJr=s(cne);lfo=r(mJr,"yolos"),mJr.forEach(t),ifo=r(k3e," \u2014 "),WB=n(k3e,"A",{href:!0});var gJr=s(WB);dfo=r(gJr,"YolosFeatureExtractor"),gJr.forEach(t),cfo=r(k3e," (YOLOS model)"),k3e.forEach(t),ee.forEach(t),ffo=i(Zt),T(kh.$$.fragment,Zt),mfo=i(Zt),T(Sh.$$.fragment,Zt),Zt.forEach(t),gfo=i(Ns),Rh=n(Ns,"DIV",{class:!0});var pje=s(Rh);T(P0.$$.fragment,pje),hfo=i(pje),fne=n(pje,"P",{});var hJr=s(fne);pfo=r(hJr,"Register a new feature extractor for this class."),hJr.forEach(t),pje.forEach(t),Ns.forEach(t),hqe=i(f),Mi=n(f,"H2",{class:!0});var _je=s(Mi);Ph=n(_je,"A",{id:!0,class:!0,href:!0});var pJr=s(Ph);mne=n(pJr,"SPAN",{});var _Jr=s(mne);T(B0.$$.fragment,_Jr),_Jr.forEach(t),pJr.forEach(t),_fo=i(_je),gne=n(_je,"SPAN",{});var uJr=s(gne);ufo=r(uJr,"AutoProcessor"),uJr.forEach(t),_je.forEach(t),pqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(I0.$$.fragment,js),bfo=i(js),q0=n(js,"P",{});var uje=s(q0);vfo=r(uje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=n(uje,"A",{href:!0});var bJr=s(QB);Ffo=r(bJr,"AutoProcessor.from_pretrained()"),bJr.forEach(t),Tfo=r(uje," class method."),uje.forEach(t),Mfo=i(js),N0=n(js,"P",{});var bje=s(N0);Efo=r(bje,"This class cannot be instantiated directly using "),hne=n(bje,"CODE",{});var vJr=s(hne);Cfo=r(vJr,"__init__()"),vJr.forEach(t),wfo=r(bje," (throws an error)."),bje.forEach(t),Afo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(j0.$$.fragment,ea),yfo=i(ea),pne=n(ea,"P",{});var FJr=s(pne);Lfo=r(FJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),FJr.forEach(t),xfo=i(ea),Ei=n(ea,"P",{});var OK=s(Ei);$fo=r(OK,"The processor class to instantiate is selected based on the "),_ne=n(OK,"CODE",{});var TJr=s(_ne);kfo=r(TJr,"model_type"),TJr.forEach(t),Sfo=r(OK,` property of the config object (either
passed as an argument or loaded from `),une=n(OK,"CODE",{});var MJr=s(une);Rfo=r(MJr,"pretrained_model_name_or_path"),MJr.forEach(t),Pfo=r(OK," if possible):"),OK.forEach(t),Bfo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Bh=n(be,"LI",{});var S3e=s(Bh);bne=n(S3e,"STRONG",{});var EJr=s(bne);Ifo=r(EJr,"clip"),EJr.forEach(t),qfo=r(S3e," \u2014 "),HB=n(S3e,"A",{href:!0});var CJr=s(HB);Nfo=r(CJr,"CLIPProcessor"),CJr.forEach(t),jfo=r(S3e," (CLIP model)"),S3e.forEach(t),Dfo=i(be),Ih=n(be,"LI",{});var R3e=s(Ih);vne=n(R3e,"STRONG",{});var wJr=s(vne);Gfo=r(wJr,"flava"),wJr.forEach(t),Ofo=r(R3e," \u2014 "),Fne=n(R3e,"CODE",{});var AJr=s(Fne);Vfo=r(AJr,"FLAVAProcessor"),AJr.forEach(t),Xfo=r(R3e," (Flava model)"),R3e.forEach(t),zfo=i(be),qh=n(be,"LI",{});var P3e=s(qh);Tne=n(P3e,"STRONG",{});var yJr=s(Tne);Wfo=r(yJr,"layoutlmv2"),yJr.forEach(t),Qfo=r(P3e," \u2014 "),UB=n(P3e,"A",{href:!0});var LJr=s(UB);Hfo=r(LJr,"LayoutLMv2Processor"),LJr.forEach(t),Ufo=r(P3e," (LayoutLMv2 model)"),P3e.forEach(t),Jfo=i(be),Nh=n(be,"LI",{});var B3e=s(Nh);Mne=n(B3e,"STRONG",{});var xJr=s(Mne);Yfo=r(xJr,"layoutxlm"),xJr.forEach(t),Kfo=r(B3e," \u2014 "),JB=n(B3e,"A",{href:!0});var $Jr=s(JB);Zfo=r($Jr,"LayoutXLMProcessor"),$Jr.forEach(t),emo=r(B3e," (LayoutXLM model)"),B3e.forEach(t),omo=i(be),jh=n(be,"LI",{});var I3e=s(jh);Ene=n(I3e,"STRONG",{});var kJr=s(Ene);rmo=r(kJr,"sew"),kJr.forEach(t),tmo=r(I3e," \u2014 "),YB=n(I3e,"A",{href:!0});var SJr=s(YB);amo=r(SJr,"Wav2Vec2Processor"),SJr.forEach(t),nmo=r(I3e," (SEW model)"),I3e.forEach(t),smo=i(be),Dh=n(be,"LI",{});var q3e=s(Dh);Cne=n(q3e,"STRONG",{});var RJr=s(Cne);lmo=r(RJr,"sew-d"),RJr.forEach(t),imo=r(q3e," \u2014 "),KB=n(q3e,"A",{href:!0});var PJr=s(KB);dmo=r(PJr,"Wav2Vec2Processor"),PJr.forEach(t),cmo=r(q3e," (SEW-D model)"),q3e.forEach(t),fmo=i(be),Gh=n(be,"LI",{});var N3e=s(Gh);wne=n(N3e,"STRONG",{});var BJr=s(wne);mmo=r(BJr,"speech_to_text"),BJr.forEach(t),gmo=r(N3e," \u2014 "),ZB=n(N3e,"A",{href:!0});var IJr=s(ZB);hmo=r(IJr,"Speech2TextProcessor"),IJr.forEach(t),pmo=r(N3e," (Speech2Text model)"),N3e.forEach(t),_mo=i(be),Oh=n(be,"LI",{});var j3e=s(Oh);Ane=n(j3e,"STRONG",{});var qJr=s(Ane);umo=r(qJr,"speech_to_text_2"),qJr.forEach(t),bmo=r(j3e," \u2014 "),eI=n(j3e,"A",{href:!0});var NJr=s(eI);vmo=r(NJr,"Speech2Text2Processor"),NJr.forEach(t),Fmo=r(j3e," (Speech2Text2 model)"),j3e.forEach(t),Tmo=i(be),Vh=n(be,"LI",{});var D3e=s(Vh);yne=n(D3e,"STRONG",{});var jJr=s(yne);Mmo=r(jJr,"trocr"),jJr.forEach(t),Emo=r(D3e," \u2014 "),oI=n(D3e,"A",{href:!0});var DJr=s(oI);Cmo=r(DJr,"TrOCRProcessor"),DJr.forEach(t),wmo=r(D3e," (TrOCR model)"),D3e.forEach(t),Amo=i(be),Xh=n(be,"LI",{});var G3e=s(Xh);Lne=n(G3e,"STRONG",{});var GJr=s(Lne);ymo=r(GJr,"unispeech"),GJr.forEach(t),Lmo=r(G3e," \u2014 "),rI=n(G3e,"A",{href:!0});var OJr=s(rI);xmo=r(OJr,"Wav2Vec2Processor"),OJr.forEach(t),$mo=r(G3e," (UniSpeech model)"),G3e.forEach(t),kmo=i(be),zh=n(be,"LI",{});var O3e=s(zh);xne=n(O3e,"STRONG",{});var VJr=s(xne);Smo=r(VJr,"unispeech-sat"),VJr.forEach(t),Rmo=r(O3e," \u2014 "),tI=n(O3e,"A",{href:!0});var XJr=s(tI);Pmo=r(XJr,"Wav2Vec2Processor"),XJr.forEach(t),Bmo=r(O3e," (UniSpeechSat model)"),O3e.forEach(t),Imo=i(be),Wh=n(be,"LI",{});var V3e=s(Wh);$ne=n(V3e,"STRONG",{});var zJr=s($ne);qmo=r(zJr,"vilt"),zJr.forEach(t),Nmo=r(V3e," \u2014 "),aI=n(V3e,"A",{href:!0});var WJr=s(aI);jmo=r(WJr,"ViltProcessor"),WJr.forEach(t),Dmo=r(V3e," (ViLT model)"),V3e.forEach(t),Gmo=i(be),Qh=n(be,"LI",{});var X3e=s(Qh);kne=n(X3e,"STRONG",{});var QJr=s(kne);Omo=r(QJr,"vision-text-dual-encoder"),QJr.forEach(t),Vmo=r(X3e," \u2014 "),nI=n(X3e,"A",{href:!0});var HJr=s(nI);Xmo=r(HJr,"VisionTextDualEncoderProcessor"),HJr.forEach(t),zmo=r(X3e," (VisionTextDualEncoder model)"),X3e.forEach(t),Wmo=i(be),Hh=n(be,"LI",{});var z3e=s(Hh);Sne=n(z3e,"STRONG",{});var UJr=s(Sne);Qmo=r(UJr,"wav2vec2"),UJr.forEach(t),Hmo=r(z3e," \u2014 "),sI=n(z3e,"A",{href:!0});var JJr=s(sI);Umo=r(JJr,"Wav2Vec2Processor"),JJr.forEach(t),Jmo=r(z3e," (Wav2Vec2 model)"),z3e.forEach(t),Ymo=i(be),Uh=n(be,"LI",{});var W3e=s(Uh);Rne=n(W3e,"STRONG",{});var YJr=s(Rne);Kmo=r(YJr,"wav2vec2-conformer"),YJr.forEach(t),Zmo=r(W3e," \u2014 "),lI=n(W3e,"A",{href:!0});var KJr=s(lI);ego=r(KJr,"Wav2Vec2Processor"),KJr.forEach(t),ogo=r(W3e," (Wav2Vec2-Conformer model)"),W3e.forEach(t),rgo=i(be),Jh=n(be,"LI",{});var Q3e=s(Jh);Pne=n(Q3e,"STRONG",{});var ZJr=s(Pne);tgo=r(ZJr,"wavlm"),ZJr.forEach(t),ago=r(Q3e," \u2014 "),iI=n(Q3e,"A",{href:!0});var eYr=s(iI);ngo=r(eYr,"Wav2Vec2Processor"),eYr.forEach(t),sgo=r(Q3e," (WavLM model)"),Q3e.forEach(t),be.forEach(t),lgo=i(ea),T(Yh.$$.fragment,ea),igo=i(ea),T(Kh.$$.fragment,ea),ea.forEach(t),dgo=i(js),Zh=n(js,"DIV",{class:!0});var vje=s(Zh);T(D0.$$.fragment,vje),cgo=i(vje),Bne=n(vje,"P",{});var oYr=s(Bne);fgo=r(oYr,"Register a new processor for this class."),oYr.forEach(t),vje.forEach(t),js.forEach(t),_qe=i(f),Ci=n(f,"H2",{class:!0});var Fje=s(Ci);ep=n(Fje,"A",{id:!0,class:!0,href:!0});var rYr=s(ep);Ine=n(rYr,"SPAN",{});var tYr=s(Ine);T(G0.$$.fragment,tYr),tYr.forEach(t),rYr.forEach(t),mgo=i(Fje),qne=n(Fje,"SPAN",{});var aYr=s(qne);ggo=r(aYr,"AutoModel"),aYr.forEach(t),Fje.forEach(t),uqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(O0.$$.fragment,Ds),hgo=i(Ds),wi=n(Ds,"P",{});var VK=s(wi);pgo=r(VK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dI=n(VK,"A",{href:!0});var nYr=s(dI);_go=r(nYr,"from_pretrained()"),nYr.forEach(t),ugo=r(VK," class method or the "),cI=n(VK,"A",{href:!0});var sYr=s(cI);bgo=r(sYr,"from_config()"),sYr.forEach(t),vgo=r(VK,` class
method.`),VK.forEach(t),Fgo=i(Ds),V0=n(Ds,"P",{});var Tje=s(V0);Tgo=r(Tje,"This class cannot be instantiated directly using "),Nne=n(Tje,"CODE",{});var lYr=s(Nne);Mgo=r(lYr,"__init__()"),lYr.forEach(t),Ego=r(Tje," (throws an error)."),Tje.forEach(t),Cgo=i(Ds),tt=n(Ds,"DIV",{class:!0});var v3=s(tt);T(X0.$$.fragment,v3),wgo=i(v3),jne=n(v3,"P",{});var iYr=s(jne);Ago=r(iYr,"Instantiates one of the base model classes of the library from a configuration."),iYr.forEach(t),ygo=i(v3),Ai=n(v3,"P",{});var XK=s(Ai);Lgo=r(XK,`Note:
Loading a model from its configuration file does `),Dne=n(XK,"STRONG",{});var dYr=s(Dne);xgo=r(dYr,"not"),dYr.forEach(t),$go=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=n(XK,"A",{href:!0});var cYr=s(fI);kgo=r(cYr,"from_pretrained()"),cYr.forEach(t),Sgo=r(XK," to load the model weights."),XK.forEach(t),Rgo=i(v3),T(op.$$.fragment,v3),v3.forEach(t),Pgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(z0.$$.fragment,oa),Bgo=i(oa),Gne=n(oa,"P",{});var fYr=s(Gne);Igo=r(fYr,"Instantiate one of the base model classes of the library from a pretrained model."),fYr.forEach(t),qgo=i(oa),La=n(oa,"P",{});var F3=s(La);Ngo=r(F3,"The model class to instantiate is selected based on the "),One=n(F3,"CODE",{});var mYr=s(One);jgo=r(mYr,"model_type"),mYr.forEach(t),Dgo=r(F3,` property of the config object (either
passed as an argument or loaded from `),Vne=n(F3,"CODE",{});var gYr=s(Vne);Ggo=r(gYr,"pretrained_model_name_or_path"),gYr.forEach(t),Ogo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xne=n(F3,"CODE",{});var hYr=s(Xne);Vgo=r(hYr,"pretrained_model_name_or_path"),hYr.forEach(t),Xgo=r(F3,":"),F3.forEach(t),zgo=i(oa),x=n(oa,"UL",{});var $=s(x);rp=n($,"LI",{});var H3e=s(rp);zne=n(H3e,"STRONG",{});var pYr=s(zne);Wgo=r(pYr,"albert"),pYr.forEach(t),Qgo=r(H3e," \u2014 "),mI=n(H3e,"A",{href:!0});var _Yr=s(mI);Hgo=r(_Yr,"AlbertModel"),_Yr.forEach(t),Ugo=r(H3e," (ALBERT model)"),H3e.forEach(t),Jgo=i($),tp=n($,"LI",{});var U3e=s(tp);Wne=n(U3e,"STRONG",{});var uYr=s(Wne);Ygo=r(uYr,"bart"),uYr.forEach(t),Kgo=r(U3e," \u2014 "),gI=n(U3e,"A",{href:!0});var bYr=s(gI);Zgo=r(bYr,"BartModel"),bYr.forEach(t),eho=r(U3e," (BART model)"),U3e.forEach(t),oho=i($),ap=n($,"LI",{});var J3e=s(ap);Qne=n(J3e,"STRONG",{});var vYr=s(Qne);rho=r(vYr,"beit"),vYr.forEach(t),tho=r(J3e," \u2014 "),hI=n(J3e,"A",{href:!0});var FYr=s(hI);aho=r(FYr,"BeitModel"),FYr.forEach(t),nho=r(J3e," (BEiT model)"),J3e.forEach(t),sho=i($),np=n($,"LI",{});var Y3e=s(np);Hne=n(Y3e,"STRONG",{});var TYr=s(Hne);lho=r(TYr,"bert"),TYr.forEach(t),iho=r(Y3e," \u2014 "),pI=n(Y3e,"A",{href:!0});var MYr=s(pI);dho=r(MYr,"BertModel"),MYr.forEach(t),cho=r(Y3e," (BERT model)"),Y3e.forEach(t),fho=i($),sp=n($,"LI",{});var K3e=s(sp);Une=n(K3e,"STRONG",{});var EYr=s(Une);mho=r(EYr,"bert-generation"),EYr.forEach(t),gho=r(K3e," \u2014 "),_I=n(K3e,"A",{href:!0});var CYr=s(_I);hho=r(CYr,"BertGenerationEncoder"),CYr.forEach(t),pho=r(K3e," (Bert Generation model)"),K3e.forEach(t),_ho=i($),lp=n($,"LI",{});var Z3e=s(lp);Jne=n(Z3e,"STRONG",{});var wYr=s(Jne);uho=r(wYr,"big_bird"),wYr.forEach(t),bho=r(Z3e," \u2014 "),uI=n(Z3e,"A",{href:!0});var AYr=s(uI);vho=r(AYr,"BigBirdModel"),AYr.forEach(t),Fho=r(Z3e," (BigBird model)"),Z3e.forEach(t),Tho=i($),ip=n($,"LI",{});var ewe=s(ip);Yne=n(ewe,"STRONG",{});var yYr=s(Yne);Mho=r(yYr,"bigbird_pegasus"),yYr.forEach(t),Eho=r(ewe," \u2014 "),bI=n(ewe,"A",{href:!0});var LYr=s(bI);Cho=r(LYr,"BigBirdPegasusModel"),LYr.forEach(t),who=r(ewe," (BigBirdPegasus model)"),ewe.forEach(t),Aho=i($),dp=n($,"LI",{});var owe=s(dp);Kne=n(owe,"STRONG",{});var xYr=s(Kne);yho=r(xYr,"blenderbot"),xYr.forEach(t),Lho=r(owe," \u2014 "),vI=n(owe,"A",{href:!0});var $Yr=s(vI);xho=r($Yr,"BlenderbotModel"),$Yr.forEach(t),$ho=r(owe," (Blenderbot model)"),owe.forEach(t),kho=i($),cp=n($,"LI",{});var rwe=s(cp);Zne=n(rwe,"STRONG",{});var kYr=s(Zne);Sho=r(kYr,"blenderbot-small"),kYr.forEach(t),Rho=r(rwe," \u2014 "),FI=n(rwe,"A",{href:!0});var SYr=s(FI);Pho=r(SYr,"BlenderbotSmallModel"),SYr.forEach(t),Bho=r(rwe," (BlenderbotSmall model)"),rwe.forEach(t),Iho=i($),fp=n($,"LI",{});var twe=s(fp);ese=n(twe,"STRONG",{});var RYr=s(ese);qho=r(RYr,"camembert"),RYr.forEach(t),Nho=r(twe," \u2014 "),TI=n(twe,"A",{href:!0});var PYr=s(TI);jho=r(PYr,"CamembertModel"),PYr.forEach(t),Dho=r(twe," (CamemBERT model)"),twe.forEach(t),Gho=i($),mp=n($,"LI",{});var awe=s(mp);ose=n(awe,"STRONG",{});var BYr=s(ose);Oho=r(BYr,"canine"),BYr.forEach(t),Vho=r(awe," \u2014 "),MI=n(awe,"A",{href:!0});var IYr=s(MI);Xho=r(IYr,"CanineModel"),IYr.forEach(t),zho=r(awe," (Canine model)"),awe.forEach(t),Who=i($),gp=n($,"LI",{});var nwe=s(gp);rse=n(nwe,"STRONG",{});var qYr=s(rse);Qho=r(qYr,"clip"),qYr.forEach(t),Hho=r(nwe," \u2014 "),EI=n(nwe,"A",{href:!0});var NYr=s(EI);Uho=r(NYr,"CLIPModel"),NYr.forEach(t),Jho=r(nwe," (CLIP model)"),nwe.forEach(t),Yho=i($),hp=n($,"LI",{});var swe=s(hp);tse=n(swe,"STRONG",{});var jYr=s(tse);Kho=r(jYr,"convbert"),jYr.forEach(t),Zho=r(swe," \u2014 "),CI=n(swe,"A",{href:!0});var DYr=s(CI);epo=r(DYr,"ConvBertModel"),DYr.forEach(t),opo=r(swe," (ConvBERT model)"),swe.forEach(t),rpo=i($),pp=n($,"LI",{});var lwe=s(pp);ase=n(lwe,"STRONG",{});var GYr=s(ase);tpo=r(GYr,"convnext"),GYr.forEach(t),apo=r(lwe," \u2014 "),wI=n(lwe,"A",{href:!0});var OYr=s(wI);npo=r(OYr,"ConvNextModel"),OYr.forEach(t),spo=r(lwe," (ConvNext model)"),lwe.forEach(t),lpo=i($),_p=n($,"LI",{});var iwe=s(_p);nse=n(iwe,"STRONG",{});var VYr=s(nse);ipo=r(VYr,"ctrl"),VYr.forEach(t),dpo=r(iwe," \u2014 "),AI=n(iwe,"A",{href:!0});var XYr=s(AI);cpo=r(XYr,"CTRLModel"),XYr.forEach(t),fpo=r(iwe," (CTRL model)"),iwe.forEach(t),mpo=i($),up=n($,"LI",{});var dwe=s(up);sse=n(dwe,"STRONG",{});var zYr=s(sse);gpo=r(zYr,"cvt"),zYr.forEach(t),hpo=r(dwe," \u2014 "),yI=n(dwe,"A",{href:!0});var WYr=s(yI);ppo=r(WYr,"CvtModel"),WYr.forEach(t),_po=r(dwe," (CvT model)"),dwe.forEach(t),upo=i($),bp=n($,"LI",{});var cwe=s(bp);lse=n(cwe,"STRONG",{});var QYr=s(lse);bpo=r(QYr,"data2vec-audio"),QYr.forEach(t),vpo=r(cwe," \u2014 "),LI=n(cwe,"A",{href:!0});var HYr=s(LI);Fpo=r(HYr,"Data2VecAudioModel"),HYr.forEach(t),Tpo=r(cwe," (Data2VecAudio model)"),cwe.forEach(t),Mpo=i($),vp=n($,"LI",{});var fwe=s(vp);ise=n(fwe,"STRONG",{});var UYr=s(ise);Epo=r(UYr,"data2vec-text"),UYr.forEach(t),Cpo=r(fwe," \u2014 "),xI=n(fwe,"A",{href:!0});var JYr=s(xI);wpo=r(JYr,"Data2VecTextModel"),JYr.forEach(t),Apo=r(fwe," (Data2VecText model)"),fwe.forEach(t),ypo=i($),Fp=n($,"LI",{});var mwe=s(Fp);dse=n(mwe,"STRONG",{});var YYr=s(dse);Lpo=r(YYr,"data2vec-vision"),YYr.forEach(t),xpo=r(mwe," \u2014 "),$I=n(mwe,"A",{href:!0});var KYr=s($I);$po=r(KYr,"Data2VecVisionModel"),KYr.forEach(t),kpo=r(mwe," (Data2VecVision model)"),mwe.forEach(t),Spo=i($),Tp=n($,"LI",{});var gwe=s(Tp);cse=n(gwe,"STRONG",{});var ZYr=s(cse);Rpo=r(ZYr,"deberta"),ZYr.forEach(t),Ppo=r(gwe," \u2014 "),kI=n(gwe,"A",{href:!0});var eKr=s(kI);Bpo=r(eKr,"DebertaModel"),eKr.forEach(t),Ipo=r(gwe," (DeBERTa model)"),gwe.forEach(t),qpo=i($),Mp=n($,"LI",{});var hwe=s(Mp);fse=n(hwe,"STRONG",{});var oKr=s(fse);Npo=r(oKr,"deberta-v2"),oKr.forEach(t),jpo=r(hwe," \u2014 "),SI=n(hwe,"A",{href:!0});var rKr=s(SI);Dpo=r(rKr,"DebertaV2Model"),rKr.forEach(t),Gpo=r(hwe," (DeBERTa-v2 model)"),hwe.forEach(t),Opo=i($),Ep=n($,"LI",{});var pwe=s(Ep);mse=n(pwe,"STRONG",{});var tKr=s(mse);Vpo=r(tKr,"decision_transformer"),tKr.forEach(t),Xpo=r(pwe," \u2014 "),RI=n(pwe,"A",{href:!0});var aKr=s(RI);zpo=r(aKr,"DecisionTransformerModel"),aKr.forEach(t),Wpo=r(pwe," (Decision Transformer model)"),pwe.forEach(t),Qpo=i($),Cp=n($,"LI",{});var _we=s(Cp);gse=n(_we,"STRONG",{});var nKr=s(gse);Hpo=r(nKr,"deit"),nKr.forEach(t),Upo=r(_we," \u2014 "),PI=n(_we,"A",{href:!0});var sKr=s(PI);Jpo=r(sKr,"DeiTModel"),sKr.forEach(t),Ypo=r(_we," (DeiT model)"),_we.forEach(t),Kpo=i($),wp=n($,"LI",{});var uwe=s(wp);hse=n(uwe,"STRONG",{});var lKr=s(hse);Zpo=r(lKr,"detr"),lKr.forEach(t),e_o=r(uwe," \u2014 "),BI=n(uwe,"A",{href:!0});var iKr=s(BI);o_o=r(iKr,"DetrModel"),iKr.forEach(t),r_o=r(uwe," (DETR model)"),uwe.forEach(t),t_o=i($),Ap=n($,"LI",{});var bwe=s(Ap);pse=n(bwe,"STRONG",{});var dKr=s(pse);a_o=r(dKr,"distilbert"),dKr.forEach(t),n_o=r(bwe," \u2014 "),II=n(bwe,"A",{href:!0});var cKr=s(II);s_o=r(cKr,"DistilBertModel"),cKr.forEach(t),l_o=r(bwe," (DistilBERT model)"),bwe.forEach(t),i_o=i($),yp=n($,"LI",{});var vwe=s(yp);_se=n(vwe,"STRONG",{});var fKr=s(_se);d_o=r(fKr,"dpr"),fKr.forEach(t),c_o=r(vwe," \u2014 "),qI=n(vwe,"A",{href:!0});var mKr=s(qI);f_o=r(mKr,"DPRQuestionEncoder"),mKr.forEach(t),m_o=r(vwe," (DPR model)"),vwe.forEach(t),g_o=i($),Lp=n($,"LI",{});var Fwe=s(Lp);use=n(Fwe,"STRONG",{});var gKr=s(use);h_o=r(gKr,"dpt"),gKr.forEach(t),p_o=r(Fwe," \u2014 "),NI=n(Fwe,"A",{href:!0});var hKr=s(NI);__o=r(hKr,"DPTModel"),hKr.forEach(t),u_o=r(Fwe," (DPT model)"),Fwe.forEach(t),b_o=i($),xp=n($,"LI",{});var Twe=s(xp);bse=n(Twe,"STRONG",{});var pKr=s(bse);v_o=r(pKr,"electra"),pKr.forEach(t),F_o=r(Twe," \u2014 "),jI=n(Twe,"A",{href:!0});var _Kr=s(jI);T_o=r(_Kr,"ElectraModel"),_Kr.forEach(t),M_o=r(Twe," (ELECTRA model)"),Twe.forEach(t),E_o=i($),$p=n($,"LI",{});var Mwe=s($p);vse=n(Mwe,"STRONG",{});var uKr=s(vse);C_o=r(uKr,"flaubert"),uKr.forEach(t),w_o=r(Mwe," \u2014 "),DI=n(Mwe,"A",{href:!0});var bKr=s(DI);A_o=r(bKr,"FlaubertModel"),bKr.forEach(t),y_o=r(Mwe," (FlauBERT model)"),Mwe.forEach(t),L_o=i($),kp=n($,"LI",{});var Ewe=s(kp);Fse=n(Ewe,"STRONG",{});var vKr=s(Fse);x_o=r(vKr,"flava"),vKr.forEach(t),$_o=r(Ewe," \u2014 "),GI=n(Ewe,"A",{href:!0});var FKr=s(GI);k_o=r(FKr,"FlavaModel"),FKr.forEach(t),S_o=r(Ewe," (Flava model)"),Ewe.forEach(t),R_o=i($),Sp=n($,"LI",{});var Cwe=s(Sp);Tse=n(Cwe,"STRONG",{});var TKr=s(Tse);P_o=r(TKr,"fnet"),TKr.forEach(t),B_o=r(Cwe," \u2014 "),OI=n(Cwe,"A",{href:!0});var MKr=s(OI);I_o=r(MKr,"FNetModel"),MKr.forEach(t),q_o=r(Cwe," (FNet model)"),Cwe.forEach(t),N_o=i($),Rp=n($,"LI",{});var wwe=s(Rp);Mse=n(wwe,"STRONG",{});var EKr=s(Mse);j_o=r(EKr,"fsmt"),EKr.forEach(t),D_o=r(wwe," \u2014 "),VI=n(wwe,"A",{href:!0});var CKr=s(VI);G_o=r(CKr,"FSMTModel"),CKr.forEach(t),O_o=r(wwe," (FairSeq Machine-Translation model)"),wwe.forEach(t),V_o=i($),Rs=n($,"LI",{});var x$=s(Rs);Ese=n(x$,"STRONG",{});var wKr=s(Ese);X_o=r(wKr,"funnel"),wKr.forEach(t),z_o=r(x$," \u2014 "),XI=n(x$,"A",{href:!0});var AKr=s(XI);W_o=r(AKr,"FunnelModel"),AKr.forEach(t),Q_o=r(x$," or "),zI=n(x$,"A",{href:!0});var yKr=s(zI);H_o=r(yKr,"FunnelBaseModel"),yKr.forEach(t),U_o=r(x$," (Funnel Transformer model)"),x$.forEach(t),J_o=i($),Pp=n($,"LI",{});var Awe=s(Pp);Cse=n(Awe,"STRONG",{});var LKr=s(Cse);Y_o=r(LKr,"glpn"),LKr.forEach(t),K_o=r(Awe," \u2014 "),WI=n(Awe,"A",{href:!0});var xKr=s(WI);Z_o=r(xKr,"GLPNModel"),xKr.forEach(t),euo=r(Awe," (GLPN model)"),Awe.forEach(t),ouo=i($),Bp=n($,"LI",{});var ywe=s(Bp);wse=n(ywe,"STRONG",{});var $Kr=s(wse);ruo=r($Kr,"gpt2"),$Kr.forEach(t),tuo=r(ywe," \u2014 "),QI=n(ywe,"A",{href:!0});var kKr=s(QI);auo=r(kKr,"GPT2Model"),kKr.forEach(t),nuo=r(ywe," (OpenAI GPT-2 model)"),ywe.forEach(t),suo=i($),Ip=n($,"LI",{});var Lwe=s(Ip);Ase=n(Lwe,"STRONG",{});var SKr=s(Ase);luo=r(SKr,"gpt_neo"),SKr.forEach(t),iuo=r(Lwe," \u2014 "),HI=n(Lwe,"A",{href:!0});var RKr=s(HI);duo=r(RKr,"GPTNeoModel"),RKr.forEach(t),cuo=r(Lwe," (GPT Neo model)"),Lwe.forEach(t),fuo=i($),qp=n($,"LI",{});var xwe=s(qp);yse=n(xwe,"STRONG",{});var PKr=s(yse);muo=r(PKr,"gptj"),PKr.forEach(t),guo=r(xwe," \u2014 "),UI=n(xwe,"A",{href:!0});var BKr=s(UI);huo=r(BKr,"GPTJModel"),BKr.forEach(t),puo=r(xwe," (GPT-J model)"),xwe.forEach(t),_uo=i($),Np=n($,"LI",{});var $we=s(Np);Lse=n($we,"STRONG",{});var IKr=s(Lse);uuo=r(IKr,"hubert"),IKr.forEach(t),buo=r($we," \u2014 "),JI=n($we,"A",{href:!0});var qKr=s(JI);vuo=r(qKr,"HubertModel"),qKr.forEach(t),Fuo=r($we," (Hubert model)"),$we.forEach(t),Tuo=i($),jp=n($,"LI",{});var kwe=s(jp);xse=n(kwe,"STRONG",{});var NKr=s(xse);Muo=r(NKr,"ibert"),NKr.forEach(t),Euo=r(kwe," \u2014 "),YI=n(kwe,"A",{href:!0});var jKr=s(YI);Cuo=r(jKr,"IBertModel"),jKr.forEach(t),wuo=r(kwe," (I-BERT model)"),kwe.forEach(t),Auo=i($),Dp=n($,"LI",{});var Swe=s(Dp);$se=n(Swe,"STRONG",{});var DKr=s($se);yuo=r(DKr,"imagegpt"),DKr.forEach(t),Luo=r(Swe," \u2014 "),KI=n(Swe,"A",{href:!0});var GKr=s(KI);xuo=r(GKr,"ImageGPTModel"),GKr.forEach(t),$uo=r(Swe," (ImageGPT model)"),Swe.forEach(t),kuo=i($),Gp=n($,"LI",{});var Rwe=s(Gp);kse=n(Rwe,"STRONG",{});var OKr=s(kse);Suo=r(OKr,"layoutlm"),OKr.forEach(t),Ruo=r(Rwe," \u2014 "),ZI=n(Rwe,"A",{href:!0});var VKr=s(ZI);Puo=r(VKr,"LayoutLMModel"),VKr.forEach(t),Buo=r(Rwe," (LayoutLM model)"),Rwe.forEach(t),Iuo=i($),Op=n($,"LI",{});var Pwe=s(Op);Sse=n(Pwe,"STRONG",{});var XKr=s(Sse);quo=r(XKr,"layoutlmv2"),XKr.forEach(t),Nuo=r(Pwe," \u2014 "),eq=n(Pwe,"A",{href:!0});var zKr=s(eq);juo=r(zKr,"LayoutLMv2Model"),zKr.forEach(t),Duo=r(Pwe," (LayoutLMv2 model)"),Pwe.forEach(t),Guo=i($),Vp=n($,"LI",{});var Bwe=s(Vp);Rse=n(Bwe,"STRONG",{});var WKr=s(Rse);Ouo=r(WKr,"led"),WKr.forEach(t),Vuo=r(Bwe," \u2014 "),oq=n(Bwe,"A",{href:!0});var QKr=s(oq);Xuo=r(QKr,"LEDModel"),QKr.forEach(t),zuo=r(Bwe," (LED model)"),Bwe.forEach(t),Wuo=i($),Xp=n($,"LI",{});var Iwe=s(Xp);Pse=n(Iwe,"STRONG",{});var HKr=s(Pse);Quo=r(HKr,"longformer"),HKr.forEach(t),Huo=r(Iwe," \u2014 "),rq=n(Iwe,"A",{href:!0});var UKr=s(rq);Uuo=r(UKr,"LongformerModel"),UKr.forEach(t),Juo=r(Iwe," (Longformer model)"),Iwe.forEach(t),Yuo=i($),zp=n($,"LI",{});var qwe=s(zp);Bse=n(qwe,"STRONG",{});var JKr=s(Bse);Kuo=r(JKr,"luke"),JKr.forEach(t),Zuo=r(qwe," \u2014 "),tq=n(qwe,"A",{href:!0});var YKr=s(tq);e1o=r(YKr,"LukeModel"),YKr.forEach(t),o1o=r(qwe," (LUKE model)"),qwe.forEach(t),r1o=i($),Wp=n($,"LI",{});var Nwe=s(Wp);Ise=n(Nwe,"STRONG",{});var KKr=s(Ise);t1o=r(KKr,"lxmert"),KKr.forEach(t),a1o=r(Nwe," \u2014 "),aq=n(Nwe,"A",{href:!0});var ZKr=s(aq);n1o=r(ZKr,"LxmertModel"),ZKr.forEach(t),s1o=r(Nwe," (LXMERT model)"),Nwe.forEach(t),l1o=i($),Qp=n($,"LI",{});var jwe=s(Qp);qse=n(jwe,"STRONG",{});var eZr=s(qse);i1o=r(eZr,"m2m_100"),eZr.forEach(t),d1o=r(jwe," \u2014 "),nq=n(jwe,"A",{href:!0});var oZr=s(nq);c1o=r(oZr,"M2M100Model"),oZr.forEach(t),f1o=r(jwe," (M2M100 model)"),jwe.forEach(t),m1o=i($),Hp=n($,"LI",{});var Dwe=s(Hp);Nse=n(Dwe,"STRONG",{});var rZr=s(Nse);g1o=r(rZr,"marian"),rZr.forEach(t),h1o=r(Dwe," \u2014 "),sq=n(Dwe,"A",{href:!0});var tZr=s(sq);p1o=r(tZr,"MarianModel"),tZr.forEach(t),_1o=r(Dwe," (Marian model)"),Dwe.forEach(t),u1o=i($),Up=n($,"LI",{});var Gwe=s(Up);jse=n(Gwe,"STRONG",{});var aZr=s(jse);b1o=r(aZr,"maskformer"),aZr.forEach(t),v1o=r(Gwe," \u2014 "),lq=n(Gwe,"A",{href:!0});var nZr=s(lq);F1o=r(nZr,"MaskFormerModel"),nZr.forEach(t),T1o=r(Gwe," (MaskFormer model)"),Gwe.forEach(t),M1o=i($),Jp=n($,"LI",{});var Owe=s(Jp);Dse=n(Owe,"STRONG",{});var sZr=s(Dse);E1o=r(sZr,"mbart"),sZr.forEach(t),C1o=r(Owe," \u2014 "),iq=n(Owe,"A",{href:!0});var lZr=s(iq);w1o=r(lZr,"MBartModel"),lZr.forEach(t),A1o=r(Owe," (mBART model)"),Owe.forEach(t),y1o=i($),Yp=n($,"LI",{});var Vwe=s(Yp);Gse=n(Vwe,"STRONG",{});var iZr=s(Gse);L1o=r(iZr,"megatron-bert"),iZr.forEach(t),x1o=r(Vwe," \u2014 "),dq=n(Vwe,"A",{href:!0});var dZr=s(dq);$1o=r(dZr,"MegatronBertModel"),dZr.forEach(t),k1o=r(Vwe," (MegatronBert model)"),Vwe.forEach(t),S1o=i($),Kp=n($,"LI",{});var Xwe=s(Kp);Ose=n(Xwe,"STRONG",{});var cZr=s(Ose);R1o=r(cZr,"mobilebert"),cZr.forEach(t),P1o=r(Xwe," \u2014 "),cq=n(Xwe,"A",{href:!0});var fZr=s(cq);B1o=r(fZr,"MobileBertModel"),fZr.forEach(t),I1o=r(Xwe," (MobileBERT model)"),Xwe.forEach(t),q1o=i($),Zp=n($,"LI",{});var zwe=s(Zp);Vse=n(zwe,"STRONG",{});var mZr=s(Vse);N1o=r(mZr,"mpnet"),mZr.forEach(t),j1o=r(zwe," \u2014 "),fq=n(zwe,"A",{href:!0});var gZr=s(fq);D1o=r(gZr,"MPNetModel"),gZr.forEach(t),G1o=r(zwe," (MPNet model)"),zwe.forEach(t),O1o=i($),e_=n($,"LI",{});var Wwe=s(e_);Xse=n(Wwe,"STRONG",{});var hZr=s(Xse);V1o=r(hZr,"mt5"),hZr.forEach(t),X1o=r(Wwe," \u2014 "),mq=n(Wwe,"A",{href:!0});var pZr=s(mq);z1o=r(pZr,"MT5Model"),pZr.forEach(t),W1o=r(Wwe," (mT5 model)"),Wwe.forEach(t),Q1o=i($),o_=n($,"LI",{});var Qwe=s(o_);zse=n(Qwe,"STRONG",{});var _Zr=s(zse);H1o=r(_Zr,"nystromformer"),_Zr.forEach(t),U1o=r(Qwe," \u2014 "),gq=n(Qwe,"A",{href:!0});var uZr=s(gq);J1o=r(uZr,"NystromformerModel"),uZr.forEach(t),Y1o=r(Qwe," (Nystromformer model)"),Qwe.forEach(t),K1o=i($),r_=n($,"LI",{});var Hwe=s(r_);Wse=n(Hwe,"STRONG",{});var bZr=s(Wse);Z1o=r(bZr,"openai-gpt"),bZr.forEach(t),ebo=r(Hwe," \u2014 "),hq=n(Hwe,"A",{href:!0});var vZr=s(hq);obo=r(vZr,"OpenAIGPTModel"),vZr.forEach(t),rbo=r(Hwe," (OpenAI GPT model)"),Hwe.forEach(t),tbo=i($),t_=n($,"LI",{});var Uwe=s(t_);Qse=n(Uwe,"STRONG",{});var FZr=s(Qse);abo=r(FZr,"opt"),FZr.forEach(t),nbo=r(Uwe," \u2014 "),pq=n(Uwe,"A",{href:!0});var TZr=s(pq);sbo=r(TZr,"OPTModel"),TZr.forEach(t),lbo=r(Uwe," (OPT model)"),Uwe.forEach(t),ibo=i($),a_=n($,"LI",{});var Jwe=s(a_);Hse=n(Jwe,"STRONG",{});var MZr=s(Hse);dbo=r(MZr,"pegasus"),MZr.forEach(t),cbo=r(Jwe," \u2014 "),_q=n(Jwe,"A",{href:!0});var EZr=s(_q);fbo=r(EZr,"PegasusModel"),EZr.forEach(t),mbo=r(Jwe," (Pegasus model)"),Jwe.forEach(t),gbo=i($),n_=n($,"LI",{});var Ywe=s(n_);Use=n(Ywe,"STRONG",{});var CZr=s(Use);hbo=r(CZr,"perceiver"),CZr.forEach(t),pbo=r(Ywe," \u2014 "),uq=n(Ywe,"A",{href:!0});var wZr=s(uq);_bo=r(wZr,"PerceiverModel"),wZr.forEach(t),ubo=r(Ywe," (Perceiver model)"),Ywe.forEach(t),bbo=i($),s_=n($,"LI",{});var Kwe=s(s_);Jse=n(Kwe,"STRONG",{});var AZr=s(Jse);vbo=r(AZr,"plbart"),AZr.forEach(t),Fbo=r(Kwe," \u2014 "),bq=n(Kwe,"A",{href:!0});var yZr=s(bq);Tbo=r(yZr,"PLBartModel"),yZr.forEach(t),Mbo=r(Kwe," (PLBart model)"),Kwe.forEach(t),Ebo=i($),l_=n($,"LI",{});var Zwe=s(l_);Yse=n(Zwe,"STRONG",{});var LZr=s(Yse);Cbo=r(LZr,"poolformer"),LZr.forEach(t),wbo=r(Zwe," \u2014 "),vq=n(Zwe,"A",{href:!0});var xZr=s(vq);Abo=r(xZr,"PoolFormerModel"),xZr.forEach(t),ybo=r(Zwe," (PoolFormer model)"),Zwe.forEach(t),Lbo=i($),i_=n($,"LI",{});var e0e=s(i_);Kse=n(e0e,"STRONG",{});var $Zr=s(Kse);xbo=r($Zr,"prophetnet"),$Zr.forEach(t),$bo=r(e0e," \u2014 "),Fq=n(e0e,"A",{href:!0});var kZr=s(Fq);kbo=r(kZr,"ProphetNetModel"),kZr.forEach(t),Sbo=r(e0e," (ProphetNet model)"),e0e.forEach(t),Rbo=i($),d_=n($,"LI",{});var o0e=s(d_);Zse=n(o0e,"STRONG",{});var SZr=s(Zse);Pbo=r(SZr,"qdqbert"),SZr.forEach(t),Bbo=r(o0e," \u2014 "),Tq=n(o0e,"A",{href:!0});var RZr=s(Tq);Ibo=r(RZr,"QDQBertModel"),RZr.forEach(t),qbo=r(o0e," (QDQBert model)"),o0e.forEach(t),Nbo=i($),c_=n($,"LI",{});var r0e=s(c_);ele=n(r0e,"STRONG",{});var PZr=s(ele);jbo=r(PZr,"reformer"),PZr.forEach(t),Dbo=r(r0e," \u2014 "),Mq=n(r0e,"A",{href:!0});var BZr=s(Mq);Gbo=r(BZr,"ReformerModel"),BZr.forEach(t),Obo=r(r0e," (Reformer model)"),r0e.forEach(t),Vbo=i($),f_=n($,"LI",{});var t0e=s(f_);ole=n(t0e,"STRONG",{});var IZr=s(ole);Xbo=r(IZr,"regnet"),IZr.forEach(t),zbo=r(t0e," \u2014 "),Eq=n(t0e,"A",{href:!0});var qZr=s(Eq);Wbo=r(qZr,"RegNetModel"),qZr.forEach(t),Qbo=r(t0e," (RegNet model)"),t0e.forEach(t),Hbo=i($),m_=n($,"LI",{});var a0e=s(m_);rle=n(a0e,"STRONG",{});var NZr=s(rle);Ubo=r(NZr,"rembert"),NZr.forEach(t),Jbo=r(a0e," \u2014 "),Cq=n(a0e,"A",{href:!0});var jZr=s(Cq);Ybo=r(jZr,"RemBertModel"),jZr.forEach(t),Kbo=r(a0e," (RemBERT model)"),a0e.forEach(t),Zbo=i($),g_=n($,"LI",{});var n0e=s(g_);tle=n(n0e,"STRONG",{});var DZr=s(tle);e2o=r(DZr,"resnet"),DZr.forEach(t),o2o=r(n0e," \u2014 "),wq=n(n0e,"A",{href:!0});var GZr=s(wq);r2o=r(GZr,"ResNetModel"),GZr.forEach(t),t2o=r(n0e," (ResNet model)"),n0e.forEach(t),a2o=i($),h_=n($,"LI",{});var s0e=s(h_);ale=n(s0e,"STRONG",{});var OZr=s(ale);n2o=r(OZr,"retribert"),OZr.forEach(t),s2o=r(s0e," \u2014 "),Aq=n(s0e,"A",{href:!0});var VZr=s(Aq);l2o=r(VZr,"RetriBertModel"),VZr.forEach(t),i2o=r(s0e," (RetriBERT model)"),s0e.forEach(t),d2o=i($),p_=n($,"LI",{});var l0e=s(p_);nle=n(l0e,"STRONG",{});var XZr=s(nle);c2o=r(XZr,"roberta"),XZr.forEach(t),f2o=r(l0e," \u2014 "),yq=n(l0e,"A",{href:!0});var zZr=s(yq);m2o=r(zZr,"RobertaModel"),zZr.forEach(t),g2o=r(l0e," (RoBERTa model)"),l0e.forEach(t),h2o=i($),__=n($,"LI",{});var i0e=s(__);sle=n(i0e,"STRONG",{});var WZr=s(sle);p2o=r(WZr,"roformer"),WZr.forEach(t),_2o=r(i0e," \u2014 "),Lq=n(i0e,"A",{href:!0});var QZr=s(Lq);u2o=r(QZr,"RoFormerModel"),QZr.forEach(t),b2o=r(i0e," (RoFormer model)"),i0e.forEach(t),v2o=i($),u_=n($,"LI",{});var d0e=s(u_);lle=n(d0e,"STRONG",{});var HZr=s(lle);F2o=r(HZr,"segformer"),HZr.forEach(t),T2o=r(d0e," \u2014 "),xq=n(d0e,"A",{href:!0});var UZr=s(xq);M2o=r(UZr,"SegformerModel"),UZr.forEach(t),E2o=r(d0e," (SegFormer model)"),d0e.forEach(t),C2o=i($),b_=n($,"LI",{});var c0e=s(b_);ile=n(c0e,"STRONG",{});var JZr=s(ile);w2o=r(JZr,"sew"),JZr.forEach(t),A2o=r(c0e," \u2014 "),$q=n(c0e,"A",{href:!0});var YZr=s($q);y2o=r(YZr,"SEWModel"),YZr.forEach(t),L2o=r(c0e," (SEW model)"),c0e.forEach(t),x2o=i($),v_=n($,"LI",{});var f0e=s(v_);dle=n(f0e,"STRONG",{});var KZr=s(dle);$2o=r(KZr,"sew-d"),KZr.forEach(t),k2o=r(f0e," \u2014 "),kq=n(f0e,"A",{href:!0});var ZZr=s(kq);S2o=r(ZZr,"SEWDModel"),ZZr.forEach(t),R2o=r(f0e," (SEW-D model)"),f0e.forEach(t),P2o=i($),F_=n($,"LI",{});var m0e=s(F_);cle=n(m0e,"STRONG",{});var eet=s(cle);B2o=r(eet,"speech_to_text"),eet.forEach(t),I2o=r(m0e," \u2014 "),Sq=n(m0e,"A",{href:!0});var oet=s(Sq);q2o=r(oet,"Speech2TextModel"),oet.forEach(t),N2o=r(m0e," (Speech2Text model)"),m0e.forEach(t),j2o=i($),T_=n($,"LI",{});var g0e=s(T_);fle=n(g0e,"STRONG",{});var ret=s(fle);D2o=r(ret,"splinter"),ret.forEach(t),G2o=r(g0e," \u2014 "),Rq=n(g0e,"A",{href:!0});var tet=s(Rq);O2o=r(tet,"SplinterModel"),tet.forEach(t),V2o=r(g0e," (Splinter model)"),g0e.forEach(t),X2o=i($),M_=n($,"LI",{});var h0e=s(M_);mle=n(h0e,"STRONG",{});var aet=s(mle);z2o=r(aet,"squeezebert"),aet.forEach(t),W2o=r(h0e," \u2014 "),Pq=n(h0e,"A",{href:!0});var net=s(Pq);Q2o=r(net,"SqueezeBertModel"),net.forEach(t),H2o=r(h0e," (SqueezeBERT model)"),h0e.forEach(t),U2o=i($),E_=n($,"LI",{});var p0e=s(E_);gle=n(p0e,"STRONG",{});var set=s(gle);J2o=r(set,"swin"),set.forEach(t),Y2o=r(p0e," \u2014 "),Bq=n(p0e,"A",{href:!0});var iet=s(Bq);K2o=r(iet,"SwinModel"),iet.forEach(t),Z2o=r(p0e," (Swin model)"),p0e.forEach(t),evo=i($),C_=n($,"LI",{});var _0e=s(C_);hle=n(_0e,"STRONG",{});var det=s(hle);ovo=r(det,"t5"),det.forEach(t),rvo=r(_0e," \u2014 "),Iq=n(_0e,"A",{href:!0});var cet=s(Iq);tvo=r(cet,"T5Model"),cet.forEach(t),avo=r(_0e," (T5 model)"),_0e.forEach(t),nvo=i($),w_=n($,"LI",{});var u0e=s(w_);ple=n(u0e,"STRONG",{});var fet=s(ple);svo=r(fet,"tapas"),fet.forEach(t),lvo=r(u0e," \u2014 "),qq=n(u0e,"A",{href:!0});var met=s(qq);ivo=r(met,"TapasModel"),met.forEach(t),dvo=r(u0e," (TAPAS model)"),u0e.forEach(t),cvo=i($),A_=n($,"LI",{});var b0e=s(A_);_le=n(b0e,"STRONG",{});var get=s(_le);fvo=r(get,"trajectory_transformer"),get.forEach(t),mvo=r(b0e," \u2014 "),Nq=n(b0e,"A",{href:!0});var het=s(Nq);gvo=r(het,"TrajectoryTransformerModel"),het.forEach(t),hvo=r(b0e," (Trajectory Transformer model)"),b0e.forEach(t),pvo=i($),y_=n($,"LI",{});var v0e=s(y_);ule=n(v0e,"STRONG",{});var pet=s(ule);_vo=r(pet,"transfo-xl"),pet.forEach(t),uvo=r(v0e," \u2014 "),jq=n(v0e,"A",{href:!0});var _et=s(jq);bvo=r(_et,"TransfoXLModel"),_et.forEach(t),vvo=r(v0e," (Transformer-XL model)"),v0e.forEach(t),Fvo=i($),L_=n($,"LI",{});var F0e=s(L_);ble=n(F0e,"STRONG",{});var uet=s(ble);Tvo=r(uet,"unispeech"),uet.forEach(t),Mvo=r(F0e," \u2014 "),Dq=n(F0e,"A",{href:!0});var bet=s(Dq);Evo=r(bet,"UniSpeechModel"),bet.forEach(t),Cvo=r(F0e," (UniSpeech model)"),F0e.forEach(t),wvo=i($),x_=n($,"LI",{});var T0e=s(x_);vle=n(T0e,"STRONG",{});var vet=s(vle);Avo=r(vet,"unispeech-sat"),vet.forEach(t),yvo=r(T0e," \u2014 "),Gq=n(T0e,"A",{href:!0});var Fet=s(Gq);Lvo=r(Fet,"UniSpeechSatModel"),Fet.forEach(t),xvo=r(T0e," (UniSpeechSat model)"),T0e.forEach(t),$vo=i($),$_=n($,"LI",{});var M0e=s($_);Fle=n(M0e,"STRONG",{});var Tet=s(Fle);kvo=r(Tet,"van"),Tet.forEach(t),Svo=r(M0e," \u2014 "),Oq=n(M0e,"A",{href:!0});var Met=s(Oq);Rvo=r(Met,"VanModel"),Met.forEach(t),Pvo=r(M0e," (VAN model)"),M0e.forEach(t),Bvo=i($),k_=n($,"LI",{});var E0e=s(k_);Tle=n(E0e,"STRONG",{});var Eet=s(Tle);Ivo=r(Eet,"vilt"),Eet.forEach(t),qvo=r(E0e," \u2014 "),Vq=n(E0e,"A",{href:!0});var Cet=s(Vq);Nvo=r(Cet,"ViltModel"),Cet.forEach(t),jvo=r(E0e," (ViLT model)"),E0e.forEach(t),Dvo=i($),S_=n($,"LI",{});var C0e=s(S_);Mle=n(C0e,"STRONG",{});var wet=s(Mle);Gvo=r(wet,"vision-text-dual-encoder"),wet.forEach(t),Ovo=r(C0e," \u2014 "),Xq=n(C0e,"A",{href:!0});var Aet=s(Xq);Vvo=r(Aet,"VisionTextDualEncoderModel"),Aet.forEach(t),Xvo=r(C0e," (VisionTextDualEncoder model)"),C0e.forEach(t),zvo=i($),R_=n($,"LI",{});var w0e=s(R_);Ele=n(w0e,"STRONG",{});var yet=s(Ele);Wvo=r(yet,"visual_bert"),yet.forEach(t),Qvo=r(w0e," \u2014 "),zq=n(w0e,"A",{href:!0});var Let=s(zq);Hvo=r(Let,"VisualBertModel"),Let.forEach(t),Uvo=r(w0e," (VisualBert model)"),w0e.forEach(t),Jvo=i($),P_=n($,"LI",{});var A0e=s(P_);Cle=n(A0e,"STRONG",{});var xet=s(Cle);Yvo=r(xet,"vit"),xet.forEach(t),Kvo=r(A0e," \u2014 "),Wq=n(A0e,"A",{href:!0});var $et=s(Wq);Zvo=r($et,"ViTModel"),$et.forEach(t),eFo=r(A0e," (ViT model)"),A0e.forEach(t),oFo=i($),B_=n($,"LI",{});var y0e=s(B_);wle=n(y0e,"STRONG",{});var ket=s(wle);rFo=r(ket,"vit_mae"),ket.forEach(t),tFo=r(y0e," \u2014 "),Qq=n(y0e,"A",{href:!0});var Set=s(Qq);aFo=r(Set,"ViTMAEModel"),Set.forEach(t),nFo=r(y0e," (ViTMAE model)"),y0e.forEach(t),sFo=i($),I_=n($,"LI",{});var L0e=s(I_);Ale=n(L0e,"STRONG",{});var Ret=s(Ale);lFo=r(Ret,"wav2vec2"),Ret.forEach(t),iFo=r(L0e," \u2014 "),Hq=n(L0e,"A",{href:!0});var Pet=s(Hq);dFo=r(Pet,"Wav2Vec2Model"),Pet.forEach(t),cFo=r(L0e," (Wav2Vec2 model)"),L0e.forEach(t),fFo=i($),q_=n($,"LI",{});var x0e=s(q_);yle=n(x0e,"STRONG",{});var Bet=s(yle);mFo=r(Bet,"wav2vec2-conformer"),Bet.forEach(t),gFo=r(x0e," \u2014 "),Uq=n(x0e,"A",{href:!0});var Iet=s(Uq);hFo=r(Iet,"Wav2Vec2ConformerModel"),Iet.forEach(t),pFo=r(x0e," (Wav2Vec2-Conformer model)"),x0e.forEach(t),_Fo=i($),N_=n($,"LI",{});var $0e=s(N_);Lle=n($0e,"STRONG",{});var qet=s(Lle);uFo=r(qet,"wavlm"),qet.forEach(t),bFo=r($0e," \u2014 "),Jq=n($0e,"A",{href:!0});var Net=s(Jq);vFo=r(Net,"WavLMModel"),Net.forEach(t),FFo=r($0e," (WavLM model)"),$0e.forEach(t),TFo=i($),j_=n($,"LI",{});var k0e=s(j_);xle=n(k0e,"STRONG",{});var jet=s(xle);MFo=r(jet,"xglm"),jet.forEach(t),EFo=r(k0e," \u2014 "),Yq=n(k0e,"A",{href:!0});var Det=s(Yq);CFo=r(Det,"XGLMModel"),Det.forEach(t),wFo=r(k0e," (XGLM model)"),k0e.forEach(t),AFo=i($),D_=n($,"LI",{});var S0e=s(D_);$le=n(S0e,"STRONG",{});var Get=s($le);yFo=r(Get,"xlm"),Get.forEach(t),LFo=r(S0e," \u2014 "),Kq=n(S0e,"A",{href:!0});var Oet=s(Kq);xFo=r(Oet,"XLMModel"),Oet.forEach(t),$Fo=r(S0e," (XLM model)"),S0e.forEach(t),kFo=i($),G_=n($,"LI",{});var R0e=s(G_);kle=n(R0e,"STRONG",{});var Vet=s(kle);SFo=r(Vet,"xlm-prophetnet"),Vet.forEach(t),RFo=r(R0e," \u2014 "),Zq=n(R0e,"A",{href:!0});var Xet=s(Zq);PFo=r(Xet,"XLMProphetNetModel"),Xet.forEach(t),BFo=r(R0e," (XLMProphetNet model)"),R0e.forEach(t),IFo=i($),O_=n($,"LI",{});var P0e=s(O_);Sle=n(P0e,"STRONG",{});var zet=s(Sle);qFo=r(zet,"xlm-roberta"),zet.forEach(t),NFo=r(P0e," \u2014 "),eN=n(P0e,"A",{href:!0});var Wet=s(eN);jFo=r(Wet,"XLMRobertaModel"),Wet.forEach(t),DFo=r(P0e," (XLM-RoBERTa model)"),P0e.forEach(t),GFo=i($),V_=n($,"LI",{});var B0e=s(V_);Rle=n(B0e,"STRONG",{});var Qet=s(Rle);OFo=r(Qet,"xlm-roberta-xl"),Qet.forEach(t),VFo=r(B0e," \u2014 "),oN=n(B0e,"A",{href:!0});var Het=s(oN);XFo=r(Het,"XLMRobertaXLModel"),Het.forEach(t),zFo=r(B0e," (XLM-RoBERTa-XL model)"),B0e.forEach(t),WFo=i($),X_=n($,"LI",{});var I0e=s(X_);Ple=n(I0e,"STRONG",{});var Uet=s(Ple);QFo=r(Uet,"xlnet"),Uet.forEach(t),HFo=r(I0e," \u2014 "),rN=n(I0e,"A",{href:!0});var Jet=s(rN);UFo=r(Jet,"XLNetModel"),Jet.forEach(t),JFo=r(I0e," (XLNet model)"),I0e.forEach(t),YFo=i($),z_=n($,"LI",{});var q0e=s(z_);Ble=n(q0e,"STRONG",{});var Yet=s(Ble);KFo=r(Yet,"yolos"),Yet.forEach(t),ZFo=r(q0e," \u2014 "),tN=n(q0e,"A",{href:!0});var Ket=s(tN);e6o=r(Ket,"YolosModel"),Ket.forEach(t),o6o=r(q0e," (YOLOS model)"),q0e.forEach(t),r6o=i($),W_=n($,"LI",{});var N0e=s(W_);Ile=n(N0e,"STRONG",{});var Zet=s(Ile);t6o=r(Zet,"yoso"),Zet.forEach(t),a6o=r(N0e," \u2014 "),aN=n(N0e,"A",{href:!0});var eot=s(aN);n6o=r(eot,"YosoModel"),eot.forEach(t),s6o=r(N0e," (YOSO model)"),N0e.forEach(t),$.forEach(t),l6o=i(oa),Q_=n(oa,"P",{});var j0e=s(Q_);i6o=r(j0e,"The model is set in evaluation mode by default using "),qle=n(j0e,"CODE",{});var oot=s(qle);d6o=r(oot,"model.eval()"),oot.forEach(t),c6o=r(j0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=n(j0e,"CODE",{});var rot=s(Nle);f6o=r(rot,"model.train()"),rot.forEach(t),j0e.forEach(t),m6o=i(oa),T(H_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),bqe=i(f),yi=n(f,"H2",{class:!0});var Mje=s(yi);U_=n(Mje,"A",{id:!0,class:!0,href:!0});var tot=s(U_);jle=n(tot,"SPAN",{});var aot=s(jle);T(W0.$$.fragment,aot),aot.forEach(t),tot.forEach(t),g6o=i(Mje),Dle=n(Mje,"SPAN",{});var not=s(Dle);h6o=r(not,"AutoModelForPreTraining"),not.forEach(t),Mje.forEach(t),vqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(Q0.$$.fragment,Gs),p6o=i(Gs),Li=n(Gs,"P",{});var zK=s(Li);_6o=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nN=n(zK,"A",{href:!0});var sot=s(nN);u6o=r(sot,"from_pretrained()"),sot.forEach(t),b6o=r(zK," class method or the "),sN=n(zK,"A",{href:!0});var lot=s(sN);v6o=r(lot,"from_config()"),lot.forEach(t),F6o=r(zK,` class
method.`),zK.forEach(t),T6o=i(Gs),H0=n(Gs,"P",{});var Eje=s(H0);M6o=r(Eje,"This class cannot be instantiated directly using "),Gle=n(Eje,"CODE",{});var iot=s(Gle);E6o=r(iot,"__init__()"),iot.forEach(t),C6o=r(Eje," (throws an error)."),Eje.forEach(t),w6o=i(Gs),at=n(Gs,"DIV",{class:!0});var T3=s(at);T(U0.$$.fragment,T3),A6o=i(T3),Ole=n(T3,"P",{});var dot=s(Ole);y6o=r(dot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dot.forEach(t),L6o=i(T3),xi=n(T3,"P",{});var WK=s(xi);x6o=r(WK,`Note:
Loading a model from its configuration file does `),Vle=n(WK,"STRONG",{});var cot=s(Vle);$6o=r(cot,"not"),cot.forEach(t),k6o=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=n(WK,"A",{href:!0});var fot=s(lN);S6o=r(fot,"from_pretrained()"),fot.forEach(t),R6o=r(WK," to load the model weights."),WK.forEach(t),P6o=i(T3),T(J_.$$.fragment,T3),T3.forEach(t),B6o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(J0.$$.fragment,ra),I6o=i(ra),Xle=n(ra,"P",{});var mot=s(Xle);q6o=r(mot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mot.forEach(t),N6o=i(ra),xa=n(ra,"P",{});var M3=s(xa);j6o=r(M3,"The model class to instantiate is selected based on the "),zle=n(M3,"CODE",{});var got=s(zle);D6o=r(got,"model_type"),got.forEach(t),G6o=r(M3,` property of the config object (either
passed as an argument or loaded from `),Wle=n(M3,"CODE",{});var hot=s(Wle);O6o=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),V6o=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=n(M3,"CODE",{});var pot=s(Qle);X6o=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),z6o=r(M3,":"),M3.forEach(t),W6o=i(ra),G=n(ra,"UL",{});var O=s(G);Y_=n(O,"LI",{});var D0e=s(Y_);Hle=n(D0e,"STRONG",{});var _ot=s(Hle);Q6o=r(_ot,"albert"),_ot.forEach(t),H6o=r(D0e," \u2014 "),iN=n(D0e,"A",{href:!0});var uot=s(iN);U6o=r(uot,"AlbertForPreTraining"),uot.forEach(t),J6o=r(D0e," (ALBERT model)"),D0e.forEach(t),Y6o=i(O),K_=n(O,"LI",{});var G0e=s(K_);Ule=n(G0e,"STRONG",{});var bot=s(Ule);K6o=r(bot,"bart"),bot.forEach(t),Z6o=r(G0e," \u2014 "),dN=n(G0e,"A",{href:!0});var vot=s(dN);eTo=r(vot,"BartForConditionalGeneration"),vot.forEach(t),oTo=r(G0e," (BART model)"),G0e.forEach(t),rTo=i(O),Z_=n(O,"LI",{});var O0e=s(Z_);Jle=n(O0e,"STRONG",{});var Fot=s(Jle);tTo=r(Fot,"bert"),Fot.forEach(t),aTo=r(O0e," \u2014 "),cN=n(O0e,"A",{href:!0});var Tot=s(cN);nTo=r(Tot,"BertForPreTraining"),Tot.forEach(t),sTo=r(O0e," (BERT model)"),O0e.forEach(t),lTo=i(O),eu=n(O,"LI",{});var V0e=s(eu);Yle=n(V0e,"STRONG",{});var Mot=s(Yle);iTo=r(Mot,"big_bird"),Mot.forEach(t),dTo=r(V0e," \u2014 "),fN=n(V0e,"A",{href:!0});var Eot=s(fN);cTo=r(Eot,"BigBirdForPreTraining"),Eot.forEach(t),fTo=r(V0e," (BigBird model)"),V0e.forEach(t),mTo=i(O),ou=n(O,"LI",{});var X0e=s(ou);Kle=n(X0e,"STRONG",{});var Cot=s(Kle);gTo=r(Cot,"camembert"),Cot.forEach(t),hTo=r(X0e," \u2014 "),mN=n(X0e,"A",{href:!0});var wot=s(mN);pTo=r(wot,"CamembertForMaskedLM"),wot.forEach(t),_To=r(X0e," (CamemBERT model)"),X0e.forEach(t),uTo=i(O),ru=n(O,"LI",{});var z0e=s(ru);Zle=n(z0e,"STRONG",{});var Aot=s(Zle);bTo=r(Aot,"ctrl"),Aot.forEach(t),vTo=r(z0e," \u2014 "),gN=n(z0e,"A",{href:!0});var yot=s(gN);FTo=r(yot,"CTRLLMHeadModel"),yot.forEach(t),TTo=r(z0e," (CTRL model)"),z0e.forEach(t),MTo=i(O),tu=n(O,"LI",{});var W0e=s(tu);eie=n(W0e,"STRONG",{});var Lot=s(eie);ETo=r(Lot,"data2vec-text"),Lot.forEach(t),CTo=r(W0e," \u2014 "),hN=n(W0e,"A",{href:!0});var xot=s(hN);wTo=r(xot,"Data2VecTextForMaskedLM"),xot.forEach(t),ATo=r(W0e," (Data2VecText model)"),W0e.forEach(t),yTo=i(O),au=n(O,"LI",{});var Q0e=s(au);oie=n(Q0e,"STRONG",{});var $ot=s(oie);LTo=r($ot,"deberta"),$ot.forEach(t),xTo=r(Q0e," \u2014 "),pN=n(Q0e,"A",{href:!0});var kot=s(pN);$To=r(kot,"DebertaForMaskedLM"),kot.forEach(t),kTo=r(Q0e," (DeBERTa model)"),Q0e.forEach(t),STo=i(O),nu=n(O,"LI",{});var H0e=s(nu);rie=n(H0e,"STRONG",{});var Sot=s(rie);RTo=r(Sot,"deberta-v2"),Sot.forEach(t),PTo=r(H0e," \u2014 "),_N=n(H0e,"A",{href:!0});var Rot=s(_N);BTo=r(Rot,"DebertaV2ForMaskedLM"),Rot.forEach(t),ITo=r(H0e," (DeBERTa-v2 model)"),H0e.forEach(t),qTo=i(O),su=n(O,"LI",{});var U0e=s(su);tie=n(U0e,"STRONG",{});var Pot=s(tie);NTo=r(Pot,"distilbert"),Pot.forEach(t),jTo=r(U0e," \u2014 "),uN=n(U0e,"A",{href:!0});var Bot=s(uN);DTo=r(Bot,"DistilBertForMaskedLM"),Bot.forEach(t),GTo=r(U0e," (DistilBERT model)"),U0e.forEach(t),OTo=i(O),lu=n(O,"LI",{});var J0e=s(lu);aie=n(J0e,"STRONG",{});var Iot=s(aie);VTo=r(Iot,"electra"),Iot.forEach(t),XTo=r(J0e," \u2014 "),bN=n(J0e,"A",{href:!0});var qot=s(bN);zTo=r(qot,"ElectraForPreTraining"),qot.forEach(t),WTo=r(J0e," (ELECTRA model)"),J0e.forEach(t),QTo=i(O),iu=n(O,"LI",{});var Y0e=s(iu);nie=n(Y0e,"STRONG",{});var Not=s(nie);HTo=r(Not,"flaubert"),Not.forEach(t),UTo=r(Y0e," \u2014 "),vN=n(Y0e,"A",{href:!0});var jot=s(vN);JTo=r(jot,"FlaubertWithLMHeadModel"),jot.forEach(t),YTo=r(Y0e," (FlauBERT model)"),Y0e.forEach(t),KTo=i(O),du=n(O,"LI",{});var K0e=s(du);sie=n(K0e,"STRONG",{});var Dot=s(sie);ZTo=r(Dot,"flava"),Dot.forEach(t),e8o=r(K0e," \u2014 "),FN=n(K0e,"A",{href:!0});var Got=s(FN);o8o=r(Got,"FlavaForPreTraining"),Got.forEach(t),r8o=r(K0e," (Flava model)"),K0e.forEach(t),t8o=i(O),cu=n(O,"LI",{});var Z0e=s(cu);lie=n(Z0e,"STRONG",{});var Oot=s(lie);a8o=r(Oot,"fnet"),Oot.forEach(t),n8o=r(Z0e," \u2014 "),TN=n(Z0e,"A",{href:!0});var Vot=s(TN);s8o=r(Vot,"FNetForPreTraining"),Vot.forEach(t),l8o=r(Z0e," (FNet model)"),Z0e.forEach(t),i8o=i(O),fu=n(O,"LI",{});var eAe=s(fu);iie=n(eAe,"STRONG",{});var Xot=s(iie);d8o=r(Xot,"fsmt"),Xot.forEach(t),c8o=r(eAe," \u2014 "),MN=n(eAe,"A",{href:!0});var zot=s(MN);f8o=r(zot,"FSMTForConditionalGeneration"),zot.forEach(t),m8o=r(eAe," (FairSeq Machine-Translation model)"),eAe.forEach(t),g8o=i(O),mu=n(O,"LI",{});var oAe=s(mu);die=n(oAe,"STRONG",{});var Wot=s(die);h8o=r(Wot,"funnel"),Wot.forEach(t),p8o=r(oAe," \u2014 "),EN=n(oAe,"A",{href:!0});var Qot=s(EN);_8o=r(Qot,"FunnelForPreTraining"),Qot.forEach(t),u8o=r(oAe," (Funnel Transformer model)"),oAe.forEach(t),b8o=i(O),gu=n(O,"LI",{});var rAe=s(gu);cie=n(rAe,"STRONG",{});var Hot=s(cie);v8o=r(Hot,"gpt2"),Hot.forEach(t),F8o=r(rAe," \u2014 "),CN=n(rAe,"A",{href:!0});var Uot=s(CN);T8o=r(Uot,"GPT2LMHeadModel"),Uot.forEach(t),M8o=r(rAe," (OpenAI GPT-2 model)"),rAe.forEach(t),E8o=i(O),hu=n(O,"LI",{});var tAe=s(hu);fie=n(tAe,"STRONG",{});var Jot=s(fie);C8o=r(Jot,"ibert"),Jot.forEach(t),w8o=r(tAe," \u2014 "),wN=n(tAe,"A",{href:!0});var Yot=s(wN);A8o=r(Yot,"IBertForMaskedLM"),Yot.forEach(t),y8o=r(tAe," (I-BERT model)"),tAe.forEach(t),L8o=i(O),pu=n(O,"LI",{});var aAe=s(pu);mie=n(aAe,"STRONG",{});var Kot=s(mie);x8o=r(Kot,"layoutlm"),Kot.forEach(t),$8o=r(aAe," \u2014 "),AN=n(aAe,"A",{href:!0});var Zot=s(AN);k8o=r(Zot,"LayoutLMForMaskedLM"),Zot.forEach(t),S8o=r(aAe," (LayoutLM model)"),aAe.forEach(t),R8o=i(O),_u=n(O,"LI",{});var nAe=s(_u);gie=n(nAe,"STRONG",{});var ert=s(gie);P8o=r(ert,"longformer"),ert.forEach(t),B8o=r(nAe," \u2014 "),yN=n(nAe,"A",{href:!0});var ort=s(yN);I8o=r(ort,"LongformerForMaskedLM"),ort.forEach(t),q8o=r(nAe," (Longformer model)"),nAe.forEach(t),N8o=i(O),uu=n(O,"LI",{});var sAe=s(uu);hie=n(sAe,"STRONG",{});var rrt=s(hie);j8o=r(rrt,"lxmert"),rrt.forEach(t),D8o=r(sAe," \u2014 "),LN=n(sAe,"A",{href:!0});var trt=s(LN);G8o=r(trt,"LxmertForPreTraining"),trt.forEach(t),O8o=r(sAe," (LXMERT model)"),sAe.forEach(t),V8o=i(O),bu=n(O,"LI",{});var lAe=s(bu);pie=n(lAe,"STRONG",{});var art=s(pie);X8o=r(art,"megatron-bert"),art.forEach(t),z8o=r(lAe," \u2014 "),xN=n(lAe,"A",{href:!0});var nrt=s(xN);W8o=r(nrt,"MegatronBertForPreTraining"),nrt.forEach(t),Q8o=r(lAe," (MegatronBert model)"),lAe.forEach(t),H8o=i(O),vu=n(O,"LI",{});var iAe=s(vu);_ie=n(iAe,"STRONG",{});var srt=s(_ie);U8o=r(srt,"mobilebert"),srt.forEach(t),J8o=r(iAe," \u2014 "),$N=n(iAe,"A",{href:!0});var lrt=s($N);Y8o=r(lrt,"MobileBertForPreTraining"),lrt.forEach(t),K8o=r(iAe," (MobileBERT model)"),iAe.forEach(t),Z8o=i(O),Fu=n(O,"LI",{});var dAe=s(Fu);uie=n(dAe,"STRONG",{});var irt=s(uie);e7o=r(irt,"mpnet"),irt.forEach(t),o7o=r(dAe," \u2014 "),kN=n(dAe,"A",{href:!0});var drt=s(kN);r7o=r(drt,"MPNetForMaskedLM"),drt.forEach(t),t7o=r(dAe," (MPNet model)"),dAe.forEach(t),a7o=i(O),Tu=n(O,"LI",{});var cAe=s(Tu);bie=n(cAe,"STRONG",{});var crt=s(bie);n7o=r(crt,"openai-gpt"),crt.forEach(t),s7o=r(cAe," \u2014 "),SN=n(cAe,"A",{href:!0});var frt=s(SN);l7o=r(frt,"OpenAIGPTLMHeadModel"),frt.forEach(t),i7o=r(cAe," (OpenAI GPT model)"),cAe.forEach(t),d7o=i(O),Mu=n(O,"LI",{});var fAe=s(Mu);vie=n(fAe,"STRONG",{});var mrt=s(vie);c7o=r(mrt,"retribert"),mrt.forEach(t),f7o=r(fAe," \u2014 "),RN=n(fAe,"A",{href:!0});var grt=s(RN);m7o=r(grt,"RetriBertModel"),grt.forEach(t),g7o=r(fAe," (RetriBERT model)"),fAe.forEach(t),h7o=i(O),Eu=n(O,"LI",{});var mAe=s(Eu);Fie=n(mAe,"STRONG",{});var hrt=s(Fie);p7o=r(hrt,"roberta"),hrt.forEach(t),_7o=r(mAe," \u2014 "),PN=n(mAe,"A",{href:!0});var prt=s(PN);u7o=r(prt,"RobertaForMaskedLM"),prt.forEach(t),b7o=r(mAe," (RoBERTa model)"),mAe.forEach(t),v7o=i(O),Cu=n(O,"LI",{});var gAe=s(Cu);Tie=n(gAe,"STRONG",{});var _rt=s(Tie);F7o=r(_rt,"splinter"),_rt.forEach(t),T7o=r(gAe," \u2014 "),BN=n(gAe,"A",{href:!0});var urt=s(BN);M7o=r(urt,"SplinterForPreTraining"),urt.forEach(t),E7o=r(gAe," (Splinter model)"),gAe.forEach(t),C7o=i(O),wu=n(O,"LI",{});var hAe=s(wu);Mie=n(hAe,"STRONG",{});var brt=s(Mie);w7o=r(brt,"squeezebert"),brt.forEach(t),A7o=r(hAe," \u2014 "),IN=n(hAe,"A",{href:!0});var vrt=s(IN);y7o=r(vrt,"SqueezeBertForMaskedLM"),vrt.forEach(t),L7o=r(hAe," (SqueezeBERT model)"),hAe.forEach(t),x7o=i(O),Au=n(O,"LI",{});var pAe=s(Au);Eie=n(pAe,"STRONG",{});var Frt=s(Eie);$7o=r(Frt,"t5"),Frt.forEach(t),k7o=r(pAe," \u2014 "),qN=n(pAe,"A",{href:!0});var Trt=s(qN);S7o=r(Trt,"T5ForConditionalGeneration"),Trt.forEach(t),R7o=r(pAe," (T5 model)"),pAe.forEach(t),P7o=i(O),yu=n(O,"LI",{});var _Ae=s(yu);Cie=n(_Ae,"STRONG",{});var Mrt=s(Cie);B7o=r(Mrt,"tapas"),Mrt.forEach(t),I7o=r(_Ae," \u2014 "),NN=n(_Ae,"A",{href:!0});var Ert=s(NN);q7o=r(Ert,"TapasForMaskedLM"),Ert.forEach(t),N7o=r(_Ae," (TAPAS model)"),_Ae.forEach(t),j7o=i(O),Lu=n(O,"LI",{});var uAe=s(Lu);wie=n(uAe,"STRONG",{});var Crt=s(wie);D7o=r(Crt,"transfo-xl"),Crt.forEach(t),G7o=r(uAe," \u2014 "),jN=n(uAe,"A",{href:!0});var wrt=s(jN);O7o=r(wrt,"TransfoXLLMHeadModel"),wrt.forEach(t),V7o=r(uAe," (Transformer-XL model)"),uAe.forEach(t),X7o=i(O),xu=n(O,"LI",{});var bAe=s(xu);Aie=n(bAe,"STRONG",{});var Art=s(Aie);z7o=r(Art,"unispeech"),Art.forEach(t),W7o=r(bAe," \u2014 "),DN=n(bAe,"A",{href:!0});var yrt=s(DN);Q7o=r(yrt,"UniSpeechForPreTraining"),yrt.forEach(t),H7o=r(bAe," (UniSpeech model)"),bAe.forEach(t),U7o=i(O),$u=n(O,"LI",{});var vAe=s($u);yie=n(vAe,"STRONG",{});var Lrt=s(yie);J7o=r(Lrt,"unispeech-sat"),Lrt.forEach(t),Y7o=r(vAe," \u2014 "),GN=n(vAe,"A",{href:!0});var xrt=s(GN);K7o=r(xrt,"UniSpeechSatForPreTraining"),xrt.forEach(t),Z7o=r(vAe," (UniSpeechSat model)"),vAe.forEach(t),eMo=i(O),ku=n(O,"LI",{});var FAe=s(ku);Lie=n(FAe,"STRONG",{});var $rt=s(Lie);oMo=r($rt,"visual_bert"),$rt.forEach(t),rMo=r(FAe," \u2014 "),ON=n(FAe,"A",{href:!0});var krt=s(ON);tMo=r(krt,"VisualBertForPreTraining"),krt.forEach(t),aMo=r(FAe," (VisualBert model)"),FAe.forEach(t),nMo=i(O),Su=n(O,"LI",{});var TAe=s(Su);xie=n(TAe,"STRONG",{});var Srt=s(xie);sMo=r(Srt,"vit_mae"),Srt.forEach(t),lMo=r(TAe," \u2014 "),VN=n(TAe,"A",{href:!0});var Rrt=s(VN);iMo=r(Rrt,"ViTMAEForPreTraining"),Rrt.forEach(t),dMo=r(TAe," (ViTMAE model)"),TAe.forEach(t),cMo=i(O),Ru=n(O,"LI",{});var MAe=s(Ru);$ie=n(MAe,"STRONG",{});var Prt=s($ie);fMo=r(Prt,"wav2vec2"),Prt.forEach(t),mMo=r(MAe," \u2014 "),XN=n(MAe,"A",{href:!0});var Brt=s(XN);gMo=r(Brt,"Wav2Vec2ForPreTraining"),Brt.forEach(t),hMo=r(MAe," (Wav2Vec2 model)"),MAe.forEach(t),pMo=i(O),Pu=n(O,"LI",{});var EAe=s(Pu);kie=n(EAe,"STRONG",{});var Irt=s(kie);_Mo=r(Irt,"wav2vec2-conformer"),Irt.forEach(t),uMo=r(EAe," \u2014 "),zN=n(EAe,"A",{href:!0});var qrt=s(zN);bMo=r(qrt,"Wav2Vec2ConformerForPreTraining"),qrt.forEach(t),vMo=r(EAe," (Wav2Vec2-Conformer model)"),EAe.forEach(t),FMo=i(O),Bu=n(O,"LI",{});var CAe=s(Bu);Sie=n(CAe,"STRONG",{});var Nrt=s(Sie);TMo=r(Nrt,"xlm"),Nrt.forEach(t),MMo=r(CAe," \u2014 "),WN=n(CAe,"A",{href:!0});var jrt=s(WN);EMo=r(jrt,"XLMWithLMHeadModel"),jrt.forEach(t),CMo=r(CAe," (XLM model)"),CAe.forEach(t),wMo=i(O),Iu=n(O,"LI",{});var wAe=s(Iu);Rie=n(wAe,"STRONG",{});var Drt=s(Rie);AMo=r(Drt,"xlm-roberta"),Drt.forEach(t),yMo=r(wAe," \u2014 "),QN=n(wAe,"A",{href:!0});var Grt=s(QN);LMo=r(Grt,"XLMRobertaForMaskedLM"),Grt.forEach(t),xMo=r(wAe," (XLM-RoBERTa model)"),wAe.forEach(t),$Mo=i(O),qu=n(O,"LI",{});var AAe=s(qu);Pie=n(AAe,"STRONG",{});var Ort=s(Pie);kMo=r(Ort,"xlm-roberta-xl"),Ort.forEach(t),SMo=r(AAe," \u2014 "),HN=n(AAe,"A",{href:!0});var Vrt=s(HN);RMo=r(Vrt,"XLMRobertaXLForMaskedLM"),Vrt.forEach(t),PMo=r(AAe," (XLM-RoBERTa-XL model)"),AAe.forEach(t),BMo=i(O),Nu=n(O,"LI",{});var yAe=s(Nu);Bie=n(yAe,"STRONG",{});var Xrt=s(Bie);IMo=r(Xrt,"xlnet"),Xrt.forEach(t),qMo=r(yAe," \u2014 "),UN=n(yAe,"A",{href:!0});var zrt=s(UN);NMo=r(zrt,"XLNetLMHeadModel"),zrt.forEach(t),jMo=r(yAe," (XLNet model)"),yAe.forEach(t),O.forEach(t),DMo=i(ra),ju=n(ra,"P",{});var LAe=s(ju);GMo=r(LAe,"The model is set in evaluation mode by default using "),Iie=n(LAe,"CODE",{});var Wrt=s(Iie);OMo=r(Wrt,"model.eval()"),Wrt.forEach(t),VMo=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(LAe,"CODE",{});var Qrt=s(qie);XMo=r(Qrt,"model.train()"),Qrt.forEach(t),LAe.forEach(t),zMo=i(ra),T(Du.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Fqe=i(f),$i=n(f,"H2",{class:!0});var Cje=s($i);Gu=n(Cje,"A",{id:!0,class:!0,href:!0});var Hrt=s(Gu);Nie=n(Hrt,"SPAN",{});var Urt=s(Nie);T(Y0.$$.fragment,Urt),Urt.forEach(t),Hrt.forEach(t),WMo=i(Cje),jie=n(Cje,"SPAN",{});var Jrt=s(jie);QMo=r(Jrt,"AutoModelForCausalLM"),Jrt.forEach(t),Cje.forEach(t),Tqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(K0.$$.fragment,Os),HMo=i(Os),ki=n(Os,"P",{});var QK=s(ki);UMo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=n(QK,"A",{href:!0});var Yrt=s(JN);JMo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),YMo=r(QK," class method or the "),YN=n(QK,"A",{href:!0});var Krt=s(YN);KMo=r(Krt,"from_config()"),Krt.forEach(t),ZMo=r(QK,` class
method.`),QK.forEach(t),e4o=i(Os),Z0=n(Os,"P",{});var wje=s(Z0);o4o=r(wje,"This class cannot be instantiated directly using "),Die=n(wje,"CODE",{});var Zrt=s(Die);r4o=r(Zrt,"__init__()"),Zrt.forEach(t),t4o=r(wje," (throws an error)."),wje.forEach(t),a4o=i(Os),nt=n(Os,"DIV",{class:!0});var E3=s(nt);T(eA.$$.fragment,E3),n4o=i(E3),Gie=n(E3,"P",{});var ett=s(Gie);s4o=r(ett,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ett.forEach(t),l4o=i(E3),Si=n(E3,"P",{});var HK=s(Si);i4o=r(HK,`Note:
Loading a model from its configuration file does `),Oie=n(HK,"STRONG",{});var ott=s(Oie);d4o=r(ott,"not"),ott.forEach(t),c4o=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(HK,"A",{href:!0});var rtt=s(KN);f4o=r(rtt,"from_pretrained()"),rtt.forEach(t),m4o=r(HK," to load the model weights."),HK.forEach(t),g4o=i(E3),T(Ou.$$.fragment,E3),E3.forEach(t),h4o=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(oA.$$.fragment,ta),p4o=i(ta),Vie=n(ta,"P",{});var ttt=s(Vie);_4o=r(ttt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ttt.forEach(t),u4o=i(ta),$a=n(ta,"P",{});var C3=s($a);b4o=r(C3,"The model class to instantiate is selected based on the "),Xie=n(C3,"CODE",{});var att=s(Xie);v4o=r(att,"model_type"),att.forEach(t),F4o=r(C3,` property of the config object (either
passed as an argument or loaded from `),zie=n(C3,"CODE",{});var ntt=s(zie);T4o=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),M4o=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(C3,"CODE",{});var stt=s(Wie);E4o=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),C4o=r(C3,":"),C3.forEach(t),w4o=i(ta),z=n(ta,"UL",{});var Q=s(z);Vu=n(Q,"LI",{});var xAe=s(Vu);Qie=n(xAe,"STRONG",{});var ltt=s(Qie);A4o=r(ltt,"bart"),ltt.forEach(t),y4o=r(xAe," \u2014 "),ZN=n(xAe,"A",{href:!0});var itt=s(ZN);L4o=r(itt,"BartForCausalLM"),itt.forEach(t),x4o=r(xAe," (BART model)"),xAe.forEach(t),$4o=i(Q),Xu=n(Q,"LI",{});var $Ae=s(Xu);Hie=n($Ae,"STRONG",{});var dtt=s(Hie);k4o=r(dtt,"bert"),dtt.forEach(t),S4o=r($Ae," \u2014 "),ej=n($Ae,"A",{href:!0});var ctt=s(ej);R4o=r(ctt,"BertLMHeadModel"),ctt.forEach(t),P4o=r($Ae," (BERT model)"),$Ae.forEach(t),B4o=i(Q),zu=n(Q,"LI",{});var kAe=s(zu);Uie=n(kAe,"STRONG",{});var ftt=s(Uie);I4o=r(ftt,"bert-generation"),ftt.forEach(t),q4o=r(kAe," \u2014 "),oj=n(kAe,"A",{href:!0});var mtt=s(oj);N4o=r(mtt,"BertGenerationDecoder"),mtt.forEach(t),j4o=r(kAe," (Bert Generation model)"),kAe.forEach(t),D4o=i(Q),Wu=n(Q,"LI",{});var SAe=s(Wu);Jie=n(SAe,"STRONG",{});var gtt=s(Jie);G4o=r(gtt,"big_bird"),gtt.forEach(t),O4o=r(SAe," \u2014 "),rj=n(SAe,"A",{href:!0});var htt=s(rj);V4o=r(htt,"BigBirdForCausalLM"),htt.forEach(t),X4o=r(SAe," (BigBird model)"),SAe.forEach(t),z4o=i(Q),Qu=n(Q,"LI",{});var RAe=s(Qu);Yie=n(RAe,"STRONG",{});var ptt=s(Yie);W4o=r(ptt,"bigbird_pegasus"),ptt.forEach(t),Q4o=r(RAe," \u2014 "),tj=n(RAe,"A",{href:!0});var _tt=s(tj);H4o=r(_tt,"BigBirdPegasusForCausalLM"),_tt.forEach(t),U4o=r(RAe," (BigBirdPegasus model)"),RAe.forEach(t),J4o=i(Q),Hu=n(Q,"LI",{});var PAe=s(Hu);Kie=n(PAe,"STRONG",{});var utt=s(Kie);Y4o=r(utt,"blenderbot"),utt.forEach(t),K4o=r(PAe," \u2014 "),aj=n(PAe,"A",{href:!0});var btt=s(aj);Z4o=r(btt,"BlenderbotForCausalLM"),btt.forEach(t),eEo=r(PAe," (Blenderbot model)"),PAe.forEach(t),oEo=i(Q),Uu=n(Q,"LI",{});var BAe=s(Uu);Zie=n(BAe,"STRONG",{});var vtt=s(Zie);rEo=r(vtt,"blenderbot-small"),vtt.forEach(t),tEo=r(BAe," \u2014 "),nj=n(BAe,"A",{href:!0});var Ftt=s(nj);aEo=r(Ftt,"BlenderbotSmallForCausalLM"),Ftt.forEach(t),nEo=r(BAe," (BlenderbotSmall model)"),BAe.forEach(t),sEo=i(Q),Ju=n(Q,"LI",{});var IAe=s(Ju);ede=n(IAe,"STRONG",{});var Ttt=s(ede);lEo=r(Ttt,"camembert"),Ttt.forEach(t),iEo=r(IAe," \u2014 "),sj=n(IAe,"A",{href:!0});var Mtt=s(sj);dEo=r(Mtt,"CamembertForCausalLM"),Mtt.forEach(t),cEo=r(IAe," (CamemBERT model)"),IAe.forEach(t),fEo=i(Q),Yu=n(Q,"LI",{});var qAe=s(Yu);ode=n(qAe,"STRONG",{});var Ett=s(ode);mEo=r(Ett,"ctrl"),Ett.forEach(t),gEo=r(qAe," \u2014 "),lj=n(qAe,"A",{href:!0});var Ctt=s(lj);hEo=r(Ctt,"CTRLLMHeadModel"),Ctt.forEach(t),pEo=r(qAe," (CTRL model)"),qAe.forEach(t),_Eo=i(Q),Ku=n(Q,"LI",{});var NAe=s(Ku);rde=n(NAe,"STRONG",{});var wtt=s(rde);uEo=r(wtt,"data2vec-text"),wtt.forEach(t),bEo=r(NAe," \u2014 "),ij=n(NAe,"A",{href:!0});var Att=s(ij);vEo=r(Att,"Data2VecTextForCausalLM"),Att.forEach(t),FEo=r(NAe," (Data2VecText model)"),NAe.forEach(t),TEo=i(Q),Zu=n(Q,"LI",{});var jAe=s(Zu);tde=n(jAe,"STRONG",{});var ytt=s(tde);MEo=r(ytt,"electra"),ytt.forEach(t),EEo=r(jAe," \u2014 "),dj=n(jAe,"A",{href:!0});var Ltt=s(dj);CEo=r(Ltt,"ElectraForCausalLM"),Ltt.forEach(t),wEo=r(jAe," (ELECTRA model)"),jAe.forEach(t),AEo=i(Q),e1=n(Q,"LI",{});var DAe=s(e1);ade=n(DAe,"STRONG",{});var xtt=s(ade);yEo=r(xtt,"gpt2"),xtt.forEach(t),LEo=r(DAe," \u2014 "),cj=n(DAe,"A",{href:!0});var $tt=s(cj);xEo=r($tt,"GPT2LMHeadModel"),$tt.forEach(t),$Eo=r(DAe," (OpenAI GPT-2 model)"),DAe.forEach(t),kEo=i(Q),o1=n(Q,"LI",{});var GAe=s(o1);nde=n(GAe,"STRONG",{});var ktt=s(nde);SEo=r(ktt,"gpt_neo"),ktt.forEach(t),REo=r(GAe," \u2014 "),fj=n(GAe,"A",{href:!0});var Stt=s(fj);PEo=r(Stt,"GPTNeoForCausalLM"),Stt.forEach(t),BEo=r(GAe," (GPT Neo model)"),GAe.forEach(t),IEo=i(Q),r1=n(Q,"LI",{});var OAe=s(r1);sde=n(OAe,"STRONG",{});var Rtt=s(sde);qEo=r(Rtt,"gptj"),Rtt.forEach(t),NEo=r(OAe," \u2014 "),mj=n(OAe,"A",{href:!0});var Ptt=s(mj);jEo=r(Ptt,"GPTJForCausalLM"),Ptt.forEach(t),DEo=r(OAe," (GPT-J model)"),OAe.forEach(t),GEo=i(Q),t1=n(Q,"LI",{});var VAe=s(t1);lde=n(VAe,"STRONG",{});var Btt=s(lde);OEo=r(Btt,"marian"),Btt.forEach(t),VEo=r(VAe," \u2014 "),gj=n(VAe,"A",{href:!0});var Itt=s(gj);XEo=r(Itt,"MarianForCausalLM"),Itt.forEach(t),zEo=r(VAe," (Marian model)"),VAe.forEach(t),WEo=i(Q),a1=n(Q,"LI",{});var XAe=s(a1);ide=n(XAe,"STRONG",{});var qtt=s(ide);QEo=r(qtt,"mbart"),qtt.forEach(t),HEo=r(XAe," \u2014 "),hj=n(XAe,"A",{href:!0});var Ntt=s(hj);UEo=r(Ntt,"MBartForCausalLM"),Ntt.forEach(t),JEo=r(XAe," (mBART model)"),XAe.forEach(t),YEo=i(Q),n1=n(Q,"LI",{});var zAe=s(n1);dde=n(zAe,"STRONG",{});var jtt=s(dde);KEo=r(jtt,"megatron-bert"),jtt.forEach(t),ZEo=r(zAe," \u2014 "),pj=n(zAe,"A",{href:!0});var Dtt=s(pj);eCo=r(Dtt,"MegatronBertForCausalLM"),Dtt.forEach(t),oCo=r(zAe," (MegatronBert model)"),zAe.forEach(t),rCo=i(Q),s1=n(Q,"LI",{});var WAe=s(s1);cde=n(WAe,"STRONG",{});var Gtt=s(cde);tCo=r(Gtt,"openai-gpt"),Gtt.forEach(t),aCo=r(WAe," \u2014 "),_j=n(WAe,"A",{href:!0});var Ott=s(_j);nCo=r(Ott,"OpenAIGPTLMHeadModel"),Ott.forEach(t),sCo=r(WAe," (OpenAI GPT model)"),WAe.forEach(t),lCo=i(Q),l1=n(Q,"LI",{});var QAe=s(l1);fde=n(QAe,"STRONG",{});var Vtt=s(fde);iCo=r(Vtt,"opt"),Vtt.forEach(t),dCo=r(QAe," \u2014 "),uj=n(QAe,"A",{href:!0});var Xtt=s(uj);cCo=r(Xtt,"OPTForCausalLM"),Xtt.forEach(t),fCo=r(QAe," (OPT model)"),QAe.forEach(t),mCo=i(Q),i1=n(Q,"LI",{});var HAe=s(i1);mde=n(HAe,"STRONG",{});var ztt=s(mde);gCo=r(ztt,"pegasus"),ztt.forEach(t),hCo=r(HAe," \u2014 "),bj=n(HAe,"A",{href:!0});var Wtt=s(bj);pCo=r(Wtt,"PegasusForCausalLM"),Wtt.forEach(t),_Co=r(HAe," (Pegasus model)"),HAe.forEach(t),uCo=i(Q),d1=n(Q,"LI",{});var UAe=s(d1);gde=n(UAe,"STRONG",{});var Qtt=s(gde);bCo=r(Qtt,"plbart"),Qtt.forEach(t),vCo=r(UAe," \u2014 "),vj=n(UAe,"A",{href:!0});var Htt=s(vj);FCo=r(Htt,"PLBartForCausalLM"),Htt.forEach(t),TCo=r(UAe," (PLBart model)"),UAe.forEach(t),MCo=i(Q),c1=n(Q,"LI",{});var JAe=s(c1);hde=n(JAe,"STRONG",{});var Utt=s(hde);ECo=r(Utt,"prophetnet"),Utt.forEach(t),CCo=r(JAe," \u2014 "),Fj=n(JAe,"A",{href:!0});var Jtt=s(Fj);wCo=r(Jtt,"ProphetNetForCausalLM"),Jtt.forEach(t),ACo=r(JAe," (ProphetNet model)"),JAe.forEach(t),yCo=i(Q),f1=n(Q,"LI",{});var YAe=s(f1);pde=n(YAe,"STRONG",{});var Ytt=s(pde);LCo=r(Ytt,"qdqbert"),Ytt.forEach(t),xCo=r(YAe," \u2014 "),Tj=n(YAe,"A",{href:!0});var Ktt=s(Tj);$Co=r(Ktt,"QDQBertLMHeadModel"),Ktt.forEach(t),kCo=r(YAe," (QDQBert model)"),YAe.forEach(t),SCo=i(Q),m1=n(Q,"LI",{});var KAe=s(m1);_de=n(KAe,"STRONG",{});var Ztt=s(_de);RCo=r(Ztt,"reformer"),Ztt.forEach(t),PCo=r(KAe," \u2014 "),Mj=n(KAe,"A",{href:!0});var eat=s(Mj);BCo=r(eat,"ReformerModelWithLMHead"),eat.forEach(t),ICo=r(KAe," (Reformer model)"),KAe.forEach(t),qCo=i(Q),g1=n(Q,"LI",{});var ZAe=s(g1);ude=n(ZAe,"STRONG",{});var oat=s(ude);NCo=r(oat,"rembert"),oat.forEach(t),jCo=r(ZAe," \u2014 "),Ej=n(ZAe,"A",{href:!0});var rat=s(Ej);DCo=r(rat,"RemBertForCausalLM"),rat.forEach(t),GCo=r(ZAe," (RemBERT model)"),ZAe.forEach(t),OCo=i(Q),h1=n(Q,"LI",{});var eye=s(h1);bde=n(eye,"STRONG",{});var tat=s(bde);VCo=r(tat,"roberta"),tat.forEach(t),XCo=r(eye," \u2014 "),Cj=n(eye,"A",{href:!0});var aat=s(Cj);zCo=r(aat,"RobertaForCausalLM"),aat.forEach(t),WCo=r(eye," (RoBERTa model)"),eye.forEach(t),QCo=i(Q),p1=n(Q,"LI",{});var oye=s(p1);vde=n(oye,"STRONG",{});var nat=s(vde);HCo=r(nat,"roformer"),nat.forEach(t),UCo=r(oye," \u2014 "),wj=n(oye,"A",{href:!0});var sat=s(wj);JCo=r(sat,"RoFormerForCausalLM"),sat.forEach(t),YCo=r(oye," (RoFormer model)"),oye.forEach(t),KCo=i(Q),_1=n(Q,"LI",{});var rye=s(_1);Fde=n(rye,"STRONG",{});var lat=s(Fde);ZCo=r(lat,"speech_to_text_2"),lat.forEach(t),e5o=r(rye," \u2014 "),Aj=n(rye,"A",{href:!0});var iat=s(Aj);o5o=r(iat,"Speech2Text2ForCausalLM"),iat.forEach(t),r5o=r(rye," (Speech2Text2 model)"),rye.forEach(t),t5o=i(Q),u1=n(Q,"LI",{});var tye=s(u1);Tde=n(tye,"STRONG",{});var dat=s(Tde);a5o=r(dat,"transfo-xl"),dat.forEach(t),n5o=r(tye," \u2014 "),yj=n(tye,"A",{href:!0});var cat=s(yj);s5o=r(cat,"TransfoXLLMHeadModel"),cat.forEach(t),l5o=r(tye," (Transformer-XL model)"),tye.forEach(t),i5o=i(Q),b1=n(Q,"LI",{});var aye=s(b1);Mde=n(aye,"STRONG",{});var fat=s(Mde);d5o=r(fat,"trocr"),fat.forEach(t),c5o=r(aye," \u2014 "),Lj=n(aye,"A",{href:!0});var mat=s(Lj);f5o=r(mat,"TrOCRForCausalLM"),mat.forEach(t),m5o=r(aye," (TrOCR model)"),aye.forEach(t),g5o=i(Q),v1=n(Q,"LI",{});var nye=s(v1);Ede=n(nye,"STRONG",{});var gat=s(Ede);h5o=r(gat,"xglm"),gat.forEach(t),p5o=r(nye," \u2014 "),xj=n(nye,"A",{href:!0});var hat=s(xj);_5o=r(hat,"XGLMForCausalLM"),hat.forEach(t),u5o=r(nye," (XGLM model)"),nye.forEach(t),b5o=i(Q),F1=n(Q,"LI",{});var sye=s(F1);Cde=n(sye,"STRONG",{});var pat=s(Cde);v5o=r(pat,"xlm"),pat.forEach(t),F5o=r(sye," \u2014 "),$j=n(sye,"A",{href:!0});var _at=s($j);T5o=r(_at,"XLMWithLMHeadModel"),_at.forEach(t),M5o=r(sye," (XLM model)"),sye.forEach(t),E5o=i(Q),T1=n(Q,"LI",{});var lye=s(T1);wde=n(lye,"STRONG",{});var uat=s(wde);C5o=r(uat,"xlm-prophetnet"),uat.forEach(t),w5o=r(lye," \u2014 "),kj=n(lye,"A",{href:!0});var bat=s(kj);A5o=r(bat,"XLMProphetNetForCausalLM"),bat.forEach(t),y5o=r(lye," (XLMProphetNet model)"),lye.forEach(t),L5o=i(Q),M1=n(Q,"LI",{});var iye=s(M1);Ade=n(iye,"STRONG",{});var vat=s(Ade);x5o=r(vat,"xlm-roberta"),vat.forEach(t),$5o=r(iye," \u2014 "),Sj=n(iye,"A",{href:!0});var Fat=s(Sj);k5o=r(Fat,"XLMRobertaForCausalLM"),Fat.forEach(t),S5o=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),R5o=i(Q),E1=n(Q,"LI",{});var dye=s(E1);yde=n(dye,"STRONG",{});var Tat=s(yde);P5o=r(Tat,"xlm-roberta-xl"),Tat.forEach(t),B5o=r(dye," \u2014 "),Rj=n(dye,"A",{href:!0});var Mat=s(Rj);I5o=r(Mat,"XLMRobertaXLForCausalLM"),Mat.forEach(t),q5o=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),N5o=i(Q),C1=n(Q,"LI",{});var cye=s(C1);Lde=n(cye,"STRONG",{});var Eat=s(Lde);j5o=r(Eat,"xlnet"),Eat.forEach(t),D5o=r(cye," \u2014 "),Pj=n(cye,"A",{href:!0});var Cat=s(Pj);G5o=r(Cat,"XLNetLMHeadModel"),Cat.forEach(t),O5o=r(cye," (XLNet model)"),cye.forEach(t),Q.forEach(t),V5o=i(ta),w1=n(ta,"P",{});var fye=s(w1);X5o=r(fye,"The model is set in evaluation mode by default using "),xde=n(fye,"CODE",{});var wat=s(xde);z5o=r(wat,"model.eval()"),wat.forEach(t),W5o=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(fye,"CODE",{});var Aat=s($de);Q5o=r(Aat,"model.train()"),Aat.forEach(t),fye.forEach(t),H5o=i(ta),T(A1.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Mqe=i(f),Ri=n(f,"H2",{class:!0});var Aje=s(Ri);y1=n(Aje,"A",{id:!0,class:!0,href:!0});var yat=s(y1);kde=n(yat,"SPAN",{});var Lat=s(kde);T(rA.$$.fragment,Lat),Lat.forEach(t),yat.forEach(t),U5o=i(Aje),Sde=n(Aje,"SPAN",{});var xat=s(Sde);J5o=r(xat,"AutoModelForMaskedLM"),xat.forEach(t),Aje.forEach(t),Eqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(tA.$$.fragment,Vs),Y5o=i(Vs),Pi=n(Vs,"P",{});var UK=s(Pi);K5o=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bj=n(UK,"A",{href:!0});var $at=s(Bj);Z5o=r($at,"from_pretrained()"),$at.forEach(t),e3o=r(UK," class method or the "),Ij=n(UK,"A",{href:!0});var kat=s(Ij);o3o=r(kat,"from_config()"),kat.forEach(t),r3o=r(UK,` class
method.`),UK.forEach(t),t3o=i(Vs),aA=n(Vs,"P",{});var yje=s(aA);a3o=r(yje,"This class cannot be instantiated directly using "),Rde=n(yje,"CODE",{});var Sat=s(Rde);n3o=r(Sat,"__init__()"),Sat.forEach(t),s3o=r(yje," (throws an error)."),yje.forEach(t),l3o=i(Vs),st=n(Vs,"DIV",{class:!0});var w3=s(st);T(nA.$$.fragment,w3),i3o=i(w3),Pde=n(w3,"P",{});var Rat=s(Pde);d3o=r(Rat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rat.forEach(t),c3o=i(w3),Bi=n(w3,"P",{});var JK=s(Bi);f3o=r(JK,`Note:
Loading a model from its configuration file does `),Bde=n(JK,"STRONG",{});var Pat=s(Bde);m3o=r(Pat,"not"),Pat.forEach(t),g3o=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=n(JK,"A",{href:!0});var Bat=s(qj);h3o=r(Bat,"from_pretrained()"),Bat.forEach(t),p3o=r(JK," to load the model weights."),JK.forEach(t),_3o=i(w3),T(L1.$$.fragment,w3),w3.forEach(t),u3o=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(sA.$$.fragment,aa),b3o=i(aa),Ide=n(aa,"P",{});var Iat=s(Ide);v3o=r(Iat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Iat.forEach(t),F3o=i(aa),ka=n(aa,"P",{});var A3=s(ka);T3o=r(A3,"The model class to instantiate is selected based on the "),qde=n(A3,"CODE",{});var qat=s(qde);M3o=r(qat,"model_type"),qat.forEach(t),E3o=r(A3,` property of the config object (either
passed as an argument or loaded from `),Nde=n(A3,"CODE",{});var Nat=s(Nde);C3o=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),w3o=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(A3,"CODE",{});var jat=s(jde);A3o=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),y3o=r(A3,":"),A3.forEach(t),L3o=i(aa),W=n(aa,"UL",{});var H=s(W);x1=n(H,"LI",{});var mye=s(x1);Dde=n(mye,"STRONG",{});var Dat=s(Dde);x3o=r(Dat,"albert"),Dat.forEach(t),$3o=r(mye," \u2014 "),Nj=n(mye,"A",{href:!0});var Gat=s(Nj);k3o=r(Gat,"AlbertForMaskedLM"),Gat.forEach(t),S3o=r(mye," (ALBERT model)"),mye.forEach(t),R3o=i(H),$1=n(H,"LI",{});var gye=s($1);Gde=n(gye,"STRONG",{});var Oat=s(Gde);P3o=r(Oat,"bart"),Oat.forEach(t),B3o=r(gye," \u2014 "),jj=n(gye,"A",{href:!0});var Vat=s(jj);I3o=r(Vat,"BartForConditionalGeneration"),Vat.forEach(t),q3o=r(gye," (BART model)"),gye.forEach(t),N3o=i(H),k1=n(H,"LI",{});var hye=s(k1);Ode=n(hye,"STRONG",{});var Xat=s(Ode);j3o=r(Xat,"bert"),Xat.forEach(t),D3o=r(hye," \u2014 "),Dj=n(hye,"A",{href:!0});var zat=s(Dj);G3o=r(zat,"BertForMaskedLM"),zat.forEach(t),O3o=r(hye," (BERT model)"),hye.forEach(t),V3o=i(H),S1=n(H,"LI",{});var pye=s(S1);Vde=n(pye,"STRONG",{});var Wat=s(Vde);X3o=r(Wat,"big_bird"),Wat.forEach(t),z3o=r(pye," \u2014 "),Gj=n(pye,"A",{href:!0});var Qat=s(Gj);W3o=r(Qat,"BigBirdForMaskedLM"),Qat.forEach(t),Q3o=r(pye," (BigBird model)"),pye.forEach(t),H3o=i(H),R1=n(H,"LI",{});var _ye=s(R1);Xde=n(_ye,"STRONG",{});var Hat=s(Xde);U3o=r(Hat,"camembert"),Hat.forEach(t),J3o=r(_ye," \u2014 "),Oj=n(_ye,"A",{href:!0});var Uat=s(Oj);Y3o=r(Uat,"CamembertForMaskedLM"),Uat.forEach(t),K3o=r(_ye," (CamemBERT model)"),_ye.forEach(t),Z3o=i(H),P1=n(H,"LI",{});var uye=s(P1);zde=n(uye,"STRONG",{});var Jat=s(zde);ewo=r(Jat,"convbert"),Jat.forEach(t),owo=r(uye," \u2014 "),Vj=n(uye,"A",{href:!0});var Yat=s(Vj);rwo=r(Yat,"ConvBertForMaskedLM"),Yat.forEach(t),two=r(uye," (ConvBERT model)"),uye.forEach(t),awo=i(H),B1=n(H,"LI",{});var bye=s(B1);Wde=n(bye,"STRONG",{});var Kat=s(Wde);nwo=r(Kat,"data2vec-text"),Kat.forEach(t),swo=r(bye," \u2014 "),Xj=n(bye,"A",{href:!0});var Zat=s(Xj);lwo=r(Zat,"Data2VecTextForMaskedLM"),Zat.forEach(t),iwo=r(bye," (Data2VecText model)"),bye.forEach(t),dwo=i(H),I1=n(H,"LI",{});var vye=s(I1);Qde=n(vye,"STRONG",{});var ent=s(Qde);cwo=r(ent,"deberta"),ent.forEach(t),fwo=r(vye," \u2014 "),zj=n(vye,"A",{href:!0});var ont=s(zj);mwo=r(ont,"DebertaForMaskedLM"),ont.forEach(t),gwo=r(vye," (DeBERTa model)"),vye.forEach(t),hwo=i(H),q1=n(H,"LI",{});var Fye=s(q1);Hde=n(Fye,"STRONG",{});var rnt=s(Hde);pwo=r(rnt,"deberta-v2"),rnt.forEach(t),_wo=r(Fye," \u2014 "),Wj=n(Fye,"A",{href:!0});var tnt=s(Wj);uwo=r(tnt,"DebertaV2ForMaskedLM"),tnt.forEach(t),bwo=r(Fye," (DeBERTa-v2 model)"),Fye.forEach(t),vwo=i(H),N1=n(H,"LI",{});var Tye=s(N1);Ude=n(Tye,"STRONG",{});var ant=s(Ude);Fwo=r(ant,"distilbert"),ant.forEach(t),Two=r(Tye," \u2014 "),Qj=n(Tye,"A",{href:!0});var nnt=s(Qj);Mwo=r(nnt,"DistilBertForMaskedLM"),nnt.forEach(t),Ewo=r(Tye," (DistilBERT model)"),Tye.forEach(t),Cwo=i(H),j1=n(H,"LI",{});var Mye=s(j1);Jde=n(Mye,"STRONG",{});var snt=s(Jde);wwo=r(snt,"electra"),snt.forEach(t),Awo=r(Mye," \u2014 "),Hj=n(Mye,"A",{href:!0});var lnt=s(Hj);ywo=r(lnt,"ElectraForMaskedLM"),lnt.forEach(t),Lwo=r(Mye," (ELECTRA model)"),Mye.forEach(t),xwo=i(H),D1=n(H,"LI",{});var Eye=s(D1);Yde=n(Eye,"STRONG",{});var int=s(Yde);$wo=r(int,"flaubert"),int.forEach(t),kwo=r(Eye," \u2014 "),Uj=n(Eye,"A",{href:!0});var dnt=s(Uj);Swo=r(dnt,"FlaubertWithLMHeadModel"),dnt.forEach(t),Rwo=r(Eye," (FlauBERT model)"),Eye.forEach(t),Pwo=i(H),G1=n(H,"LI",{});var Cye=s(G1);Kde=n(Cye,"STRONG",{});var cnt=s(Kde);Bwo=r(cnt,"fnet"),cnt.forEach(t),Iwo=r(Cye," \u2014 "),Jj=n(Cye,"A",{href:!0});var fnt=s(Jj);qwo=r(fnt,"FNetForMaskedLM"),fnt.forEach(t),Nwo=r(Cye," (FNet model)"),Cye.forEach(t),jwo=i(H),O1=n(H,"LI",{});var wye=s(O1);Zde=n(wye,"STRONG",{});var mnt=s(Zde);Dwo=r(mnt,"funnel"),mnt.forEach(t),Gwo=r(wye," \u2014 "),Yj=n(wye,"A",{href:!0});var gnt=s(Yj);Owo=r(gnt,"FunnelForMaskedLM"),gnt.forEach(t),Vwo=r(wye," (Funnel Transformer model)"),wye.forEach(t),Xwo=i(H),V1=n(H,"LI",{});var Aye=s(V1);ece=n(Aye,"STRONG",{});var hnt=s(ece);zwo=r(hnt,"ibert"),hnt.forEach(t),Wwo=r(Aye," \u2014 "),Kj=n(Aye,"A",{href:!0});var pnt=s(Kj);Qwo=r(pnt,"IBertForMaskedLM"),pnt.forEach(t),Hwo=r(Aye," (I-BERT model)"),Aye.forEach(t),Uwo=i(H),X1=n(H,"LI",{});var yye=s(X1);oce=n(yye,"STRONG",{});var _nt=s(oce);Jwo=r(_nt,"layoutlm"),_nt.forEach(t),Ywo=r(yye," \u2014 "),Zj=n(yye,"A",{href:!0});var unt=s(Zj);Kwo=r(unt,"LayoutLMForMaskedLM"),unt.forEach(t),Zwo=r(yye," (LayoutLM model)"),yye.forEach(t),e0o=i(H),z1=n(H,"LI",{});var Lye=s(z1);rce=n(Lye,"STRONG",{});var bnt=s(rce);o0o=r(bnt,"longformer"),bnt.forEach(t),r0o=r(Lye," \u2014 "),eD=n(Lye,"A",{href:!0});var vnt=s(eD);t0o=r(vnt,"LongformerForMaskedLM"),vnt.forEach(t),a0o=r(Lye," (Longformer model)"),Lye.forEach(t),n0o=i(H),W1=n(H,"LI",{});var xye=s(W1);tce=n(xye,"STRONG",{});var Fnt=s(tce);s0o=r(Fnt,"mbart"),Fnt.forEach(t),l0o=r(xye," \u2014 "),oD=n(xye,"A",{href:!0});var Tnt=s(oD);i0o=r(Tnt,"MBartForConditionalGeneration"),Tnt.forEach(t),d0o=r(xye," (mBART model)"),xye.forEach(t),c0o=i(H),Q1=n(H,"LI",{});var $ye=s(Q1);ace=n($ye,"STRONG",{});var Mnt=s(ace);f0o=r(Mnt,"megatron-bert"),Mnt.forEach(t),m0o=r($ye," \u2014 "),rD=n($ye,"A",{href:!0});var Ent=s(rD);g0o=r(Ent,"MegatronBertForMaskedLM"),Ent.forEach(t),h0o=r($ye," (MegatronBert model)"),$ye.forEach(t),p0o=i(H),H1=n(H,"LI",{});var kye=s(H1);nce=n(kye,"STRONG",{});var Cnt=s(nce);_0o=r(Cnt,"mobilebert"),Cnt.forEach(t),u0o=r(kye," \u2014 "),tD=n(kye,"A",{href:!0});var wnt=s(tD);b0o=r(wnt,"MobileBertForMaskedLM"),wnt.forEach(t),v0o=r(kye," (MobileBERT model)"),kye.forEach(t),F0o=i(H),U1=n(H,"LI",{});var Sye=s(U1);sce=n(Sye,"STRONG",{});var Ant=s(sce);T0o=r(Ant,"mpnet"),Ant.forEach(t),M0o=r(Sye," \u2014 "),aD=n(Sye,"A",{href:!0});var ynt=s(aD);E0o=r(ynt,"MPNetForMaskedLM"),ynt.forEach(t),C0o=r(Sye," (MPNet model)"),Sye.forEach(t),w0o=i(H),J1=n(H,"LI",{});var Rye=s(J1);lce=n(Rye,"STRONG",{});var Lnt=s(lce);A0o=r(Lnt,"nystromformer"),Lnt.forEach(t),y0o=r(Rye," \u2014 "),nD=n(Rye,"A",{href:!0});var xnt=s(nD);L0o=r(xnt,"NystromformerForMaskedLM"),xnt.forEach(t),x0o=r(Rye," (Nystromformer model)"),Rye.forEach(t),$0o=i(H),Y1=n(H,"LI",{});var Pye=s(Y1);ice=n(Pye,"STRONG",{});var $nt=s(ice);k0o=r($nt,"perceiver"),$nt.forEach(t),S0o=r(Pye," \u2014 "),sD=n(Pye,"A",{href:!0});var knt=s(sD);R0o=r(knt,"PerceiverForMaskedLM"),knt.forEach(t),P0o=r(Pye," (Perceiver model)"),Pye.forEach(t),B0o=i(H),K1=n(H,"LI",{});var Bye=s(K1);dce=n(Bye,"STRONG",{});var Snt=s(dce);I0o=r(Snt,"qdqbert"),Snt.forEach(t),q0o=r(Bye," \u2014 "),lD=n(Bye,"A",{href:!0});var Rnt=s(lD);N0o=r(Rnt,"QDQBertForMaskedLM"),Rnt.forEach(t),j0o=r(Bye," (QDQBert model)"),Bye.forEach(t),D0o=i(H),Z1=n(H,"LI",{});var Iye=s(Z1);cce=n(Iye,"STRONG",{});var Pnt=s(cce);G0o=r(Pnt,"reformer"),Pnt.forEach(t),O0o=r(Iye," \u2014 "),iD=n(Iye,"A",{href:!0});var Bnt=s(iD);V0o=r(Bnt,"ReformerForMaskedLM"),Bnt.forEach(t),X0o=r(Iye," (Reformer model)"),Iye.forEach(t),z0o=i(H),eb=n(H,"LI",{});var qye=s(eb);fce=n(qye,"STRONG",{});var Int=s(fce);W0o=r(Int,"rembert"),Int.forEach(t),Q0o=r(qye," \u2014 "),dD=n(qye,"A",{href:!0});var qnt=s(dD);H0o=r(qnt,"RemBertForMaskedLM"),qnt.forEach(t),U0o=r(qye," (RemBERT model)"),qye.forEach(t),J0o=i(H),ob=n(H,"LI",{});var Nye=s(ob);mce=n(Nye,"STRONG",{});var Nnt=s(mce);Y0o=r(Nnt,"roberta"),Nnt.forEach(t),K0o=r(Nye," \u2014 "),cD=n(Nye,"A",{href:!0});var jnt=s(cD);Z0o=r(jnt,"RobertaForMaskedLM"),jnt.forEach(t),eAo=r(Nye," (RoBERTa model)"),Nye.forEach(t),oAo=i(H),rb=n(H,"LI",{});var jye=s(rb);gce=n(jye,"STRONG",{});var Dnt=s(gce);rAo=r(Dnt,"roformer"),Dnt.forEach(t),tAo=r(jye," \u2014 "),fD=n(jye,"A",{href:!0});var Gnt=s(fD);aAo=r(Gnt,"RoFormerForMaskedLM"),Gnt.forEach(t),nAo=r(jye," (RoFormer model)"),jye.forEach(t),sAo=i(H),tb=n(H,"LI",{});var Dye=s(tb);hce=n(Dye,"STRONG",{});var Ont=s(hce);lAo=r(Ont,"squeezebert"),Ont.forEach(t),iAo=r(Dye," \u2014 "),mD=n(Dye,"A",{href:!0});var Vnt=s(mD);dAo=r(Vnt,"SqueezeBertForMaskedLM"),Vnt.forEach(t),cAo=r(Dye," (SqueezeBERT model)"),Dye.forEach(t),fAo=i(H),ab=n(H,"LI",{});var Gye=s(ab);pce=n(Gye,"STRONG",{});var Xnt=s(pce);mAo=r(Xnt,"tapas"),Xnt.forEach(t),gAo=r(Gye," \u2014 "),gD=n(Gye,"A",{href:!0});var znt=s(gD);hAo=r(znt,"TapasForMaskedLM"),znt.forEach(t),pAo=r(Gye," (TAPAS model)"),Gye.forEach(t),_Ao=i(H),nb=n(H,"LI",{});var Oye=s(nb);_ce=n(Oye,"STRONG",{});var Wnt=s(_ce);uAo=r(Wnt,"wav2vec2"),Wnt.forEach(t),bAo=r(Oye," \u2014 "),uce=n(Oye,"CODE",{});var Qnt=s(uce);vAo=r(Qnt,"Wav2Vec2ForMaskedLM"),Qnt.forEach(t),FAo=r(Oye," (Wav2Vec2 model)"),Oye.forEach(t),TAo=i(H),sb=n(H,"LI",{});var Vye=s(sb);bce=n(Vye,"STRONG",{});var Hnt=s(bce);MAo=r(Hnt,"xlm"),Hnt.forEach(t),EAo=r(Vye," \u2014 "),hD=n(Vye,"A",{href:!0});var Unt=s(hD);CAo=r(Unt,"XLMWithLMHeadModel"),Unt.forEach(t),wAo=r(Vye," (XLM model)"),Vye.forEach(t),AAo=i(H),lb=n(H,"LI",{});var Xye=s(lb);vce=n(Xye,"STRONG",{});var Jnt=s(vce);yAo=r(Jnt,"xlm-roberta"),Jnt.forEach(t),LAo=r(Xye," \u2014 "),pD=n(Xye,"A",{href:!0});var Ynt=s(pD);xAo=r(Ynt,"XLMRobertaForMaskedLM"),Ynt.forEach(t),$Ao=r(Xye," (XLM-RoBERTa model)"),Xye.forEach(t),kAo=i(H),ib=n(H,"LI",{});var zye=s(ib);Fce=n(zye,"STRONG",{});var Knt=s(Fce);SAo=r(Knt,"xlm-roberta-xl"),Knt.forEach(t),RAo=r(zye," \u2014 "),_D=n(zye,"A",{href:!0});var Znt=s(_D);PAo=r(Znt,"XLMRobertaXLForMaskedLM"),Znt.forEach(t),BAo=r(zye," (XLM-RoBERTa-XL model)"),zye.forEach(t),IAo=i(H),db=n(H,"LI",{});var Wye=s(db);Tce=n(Wye,"STRONG",{});var est=s(Tce);qAo=r(est,"yoso"),est.forEach(t),NAo=r(Wye," \u2014 "),uD=n(Wye,"A",{href:!0});var ost=s(uD);jAo=r(ost,"YosoForMaskedLM"),ost.forEach(t),DAo=r(Wye," (YOSO model)"),Wye.forEach(t),H.forEach(t),GAo=i(aa),cb=n(aa,"P",{});var Qye=s(cb);OAo=r(Qye,"The model is set in evaluation mode by default using "),Mce=n(Qye,"CODE",{});var rst=s(Mce);VAo=r(rst,"model.eval()"),rst.forEach(t),XAo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(Qye,"CODE",{});var tst=s(Ece);zAo=r(tst,"model.train()"),tst.forEach(t),Qye.forEach(t),WAo=i(aa),T(fb.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Cqe=i(f),Ii=n(f,"H2",{class:!0});var Lje=s(Ii);mb=n(Lje,"A",{id:!0,class:!0,href:!0});var ast=s(mb);Cce=n(ast,"SPAN",{});var nst=s(Cce);T(lA.$$.fragment,nst),nst.forEach(t),ast.forEach(t),QAo=i(Lje),wce=n(Lje,"SPAN",{});var sst=s(wce);HAo=r(sst,"AutoModelForSeq2SeqLM"),sst.forEach(t),Lje.forEach(t),wqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(iA.$$.fragment,Xs),UAo=i(Xs),qi=n(Xs,"P",{});var YK=s(qi);JAo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bD=n(YK,"A",{href:!0});var lst=s(bD);YAo=r(lst,"from_pretrained()"),lst.forEach(t),KAo=r(YK," class method or the "),vD=n(YK,"A",{href:!0});var ist=s(vD);ZAo=r(ist,"from_config()"),ist.forEach(t),eyo=r(YK,` class
method.`),YK.forEach(t),oyo=i(Xs),dA=n(Xs,"P",{});var xje=s(dA);ryo=r(xje,"This class cannot be instantiated directly using "),Ace=n(xje,"CODE",{});var dst=s(Ace);tyo=r(dst,"__init__()"),dst.forEach(t),ayo=r(xje," (throws an error)."),xje.forEach(t),nyo=i(Xs),lt=n(Xs,"DIV",{class:!0});var y3=s(lt);T(cA.$$.fragment,y3),syo=i(y3),yce=n(y3,"P",{});var cst=s(yce);lyo=r(cst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cst.forEach(t),iyo=i(y3),Ni=n(y3,"P",{});var KK=s(Ni);dyo=r(KK,`Note:
Loading a model from its configuration file does `),Lce=n(KK,"STRONG",{});var fst=s(Lce);cyo=r(fst,"not"),fst.forEach(t),fyo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(KK,"A",{href:!0});var mst=s(FD);myo=r(mst,"from_pretrained()"),mst.forEach(t),gyo=r(KK," to load the model weights."),KK.forEach(t),hyo=i(y3),T(gb.$$.fragment,y3),y3.forEach(t),pyo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(fA.$$.fragment,na),_yo=i(na),xce=n(na,"P",{});var gst=s(xce);uyo=r(gst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gst.forEach(t),byo=i(na),Sa=n(na,"P",{});var L3=s(Sa);vyo=r(L3,"The model class to instantiate is selected based on the "),$ce=n(L3,"CODE",{});var hst=s($ce);Fyo=r(hst,"model_type"),hst.forEach(t),Tyo=r(L3,` property of the config object (either
passed as an argument or loaded from `),kce=n(L3,"CODE",{});var pst=s(kce);Myo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),Eyo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(L3,"CODE",{});var _st=s(Sce);Cyo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),wyo=r(L3,":"),L3.forEach(t),Ayo=i(na),_e=n(na,"UL",{});var ve=s(_e);hb=n(ve,"LI",{});var Hye=s(hb);Rce=n(Hye,"STRONG",{});var ust=s(Rce);yyo=r(ust,"bart"),ust.forEach(t),Lyo=r(Hye," \u2014 "),TD=n(Hye,"A",{href:!0});var bst=s(TD);xyo=r(bst,"BartForConditionalGeneration"),bst.forEach(t),$yo=r(Hye," (BART model)"),Hye.forEach(t),kyo=i(ve),pb=n(ve,"LI",{});var Uye=s(pb);Pce=n(Uye,"STRONG",{});var vst=s(Pce);Syo=r(vst,"bigbird_pegasus"),vst.forEach(t),Ryo=r(Uye," \u2014 "),MD=n(Uye,"A",{href:!0});var Fst=s(MD);Pyo=r(Fst,"BigBirdPegasusForConditionalGeneration"),Fst.forEach(t),Byo=r(Uye," (BigBirdPegasus model)"),Uye.forEach(t),Iyo=i(ve),_b=n(ve,"LI",{});var Jye=s(_b);Bce=n(Jye,"STRONG",{});var Tst=s(Bce);qyo=r(Tst,"blenderbot"),Tst.forEach(t),Nyo=r(Jye," \u2014 "),ED=n(Jye,"A",{href:!0});var Mst=s(ED);jyo=r(Mst,"BlenderbotForConditionalGeneration"),Mst.forEach(t),Dyo=r(Jye," (Blenderbot model)"),Jye.forEach(t),Gyo=i(ve),ub=n(ve,"LI",{});var Yye=s(ub);Ice=n(Yye,"STRONG",{});var Est=s(Ice);Oyo=r(Est,"blenderbot-small"),Est.forEach(t),Vyo=r(Yye," \u2014 "),CD=n(Yye,"A",{href:!0});var Cst=s(CD);Xyo=r(Cst,"BlenderbotSmallForConditionalGeneration"),Cst.forEach(t),zyo=r(Yye," (BlenderbotSmall model)"),Yye.forEach(t),Wyo=i(ve),bb=n(ve,"LI",{});var Kye=s(bb);qce=n(Kye,"STRONG",{});var wst=s(qce);Qyo=r(wst,"encoder-decoder"),wst.forEach(t),Hyo=r(Kye," \u2014 "),wD=n(Kye,"A",{href:!0});var Ast=s(wD);Uyo=r(Ast,"EncoderDecoderModel"),Ast.forEach(t),Jyo=r(Kye," (Encoder decoder model)"),Kye.forEach(t),Yyo=i(ve),vb=n(ve,"LI",{});var Zye=s(vb);Nce=n(Zye,"STRONG",{});var yst=s(Nce);Kyo=r(yst,"fsmt"),yst.forEach(t),Zyo=r(Zye," \u2014 "),AD=n(Zye,"A",{href:!0});var Lst=s(AD);eLo=r(Lst,"FSMTForConditionalGeneration"),Lst.forEach(t),oLo=r(Zye," (FairSeq Machine-Translation model)"),Zye.forEach(t),rLo=i(ve),Fb=n(ve,"LI",{});var eLe=s(Fb);jce=n(eLe,"STRONG",{});var xst=s(jce);tLo=r(xst,"led"),xst.forEach(t),aLo=r(eLe," \u2014 "),yD=n(eLe,"A",{href:!0});var $st=s(yD);nLo=r($st,"LEDForConditionalGeneration"),$st.forEach(t),sLo=r(eLe," (LED model)"),eLe.forEach(t),lLo=i(ve),Tb=n(ve,"LI",{});var oLe=s(Tb);Dce=n(oLe,"STRONG",{});var kst=s(Dce);iLo=r(kst,"m2m_100"),kst.forEach(t),dLo=r(oLe," \u2014 "),LD=n(oLe,"A",{href:!0});var Sst=s(LD);cLo=r(Sst,"M2M100ForConditionalGeneration"),Sst.forEach(t),fLo=r(oLe," (M2M100 model)"),oLe.forEach(t),mLo=i(ve),Mb=n(ve,"LI",{});var rLe=s(Mb);Gce=n(rLe,"STRONG",{});var Rst=s(Gce);gLo=r(Rst,"marian"),Rst.forEach(t),hLo=r(rLe," \u2014 "),xD=n(rLe,"A",{href:!0});var Pst=s(xD);pLo=r(Pst,"MarianMTModel"),Pst.forEach(t),_Lo=r(rLe," (Marian model)"),rLe.forEach(t),uLo=i(ve),Eb=n(ve,"LI",{});var tLe=s(Eb);Oce=n(tLe,"STRONG",{});var Bst=s(Oce);bLo=r(Bst,"mbart"),Bst.forEach(t),vLo=r(tLe," \u2014 "),$D=n(tLe,"A",{href:!0});var Ist=s($D);FLo=r(Ist,"MBartForConditionalGeneration"),Ist.forEach(t),TLo=r(tLe," (mBART model)"),tLe.forEach(t),MLo=i(ve),Cb=n(ve,"LI",{});var aLe=s(Cb);Vce=n(aLe,"STRONG",{});var qst=s(Vce);ELo=r(qst,"mt5"),qst.forEach(t),CLo=r(aLe," \u2014 "),kD=n(aLe,"A",{href:!0});var Nst=s(kD);wLo=r(Nst,"MT5ForConditionalGeneration"),Nst.forEach(t),ALo=r(aLe," (mT5 model)"),aLe.forEach(t),yLo=i(ve),wb=n(ve,"LI",{});var nLe=s(wb);Xce=n(nLe,"STRONG",{});var jst=s(Xce);LLo=r(jst,"pegasus"),jst.forEach(t),xLo=r(nLe," \u2014 "),SD=n(nLe,"A",{href:!0});var Dst=s(SD);$Lo=r(Dst,"PegasusForConditionalGeneration"),Dst.forEach(t),kLo=r(nLe," (Pegasus model)"),nLe.forEach(t),SLo=i(ve),Ab=n(ve,"LI",{});var sLe=s(Ab);zce=n(sLe,"STRONG",{});var Gst=s(zce);RLo=r(Gst,"plbart"),Gst.forEach(t),PLo=r(sLe," \u2014 "),RD=n(sLe,"A",{href:!0});var Ost=s(RD);BLo=r(Ost,"PLBartForConditionalGeneration"),Ost.forEach(t),ILo=r(sLe," (PLBart model)"),sLe.forEach(t),qLo=i(ve),yb=n(ve,"LI",{});var lLe=s(yb);Wce=n(lLe,"STRONG",{});var Vst=s(Wce);NLo=r(Vst,"prophetnet"),Vst.forEach(t),jLo=r(lLe," \u2014 "),PD=n(lLe,"A",{href:!0});var Xst=s(PD);DLo=r(Xst,"ProphetNetForConditionalGeneration"),Xst.forEach(t),GLo=r(lLe," (ProphetNet model)"),lLe.forEach(t),OLo=i(ve),Lb=n(ve,"LI",{});var iLe=s(Lb);Qce=n(iLe,"STRONG",{});var zst=s(Qce);VLo=r(zst,"t5"),zst.forEach(t),XLo=r(iLe," \u2014 "),BD=n(iLe,"A",{href:!0});var Wst=s(BD);zLo=r(Wst,"T5ForConditionalGeneration"),Wst.forEach(t),WLo=r(iLe," (T5 model)"),iLe.forEach(t),QLo=i(ve),xb=n(ve,"LI",{});var dLe=s(xb);Hce=n(dLe,"STRONG",{});var Qst=s(Hce);HLo=r(Qst,"xlm-prophetnet"),Qst.forEach(t),ULo=r(dLe," \u2014 "),ID=n(dLe,"A",{href:!0});var Hst=s(ID);JLo=r(Hst,"XLMProphetNetForConditionalGeneration"),Hst.forEach(t),YLo=r(dLe," (XLMProphetNet model)"),dLe.forEach(t),ve.forEach(t),KLo=i(na),$b=n(na,"P",{});var cLe=s($b);ZLo=r(cLe,"The model is set in evaluation mode by default using "),Uce=n(cLe,"CODE",{});var Ust=s(Uce);e9o=r(Ust,"model.eval()"),Ust.forEach(t),o9o=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=n(cLe,"CODE",{});var Jst=s(Jce);r9o=r(Jst,"model.train()"),Jst.forEach(t),cLe.forEach(t),t9o=i(na),T(kb.$$.fragment,na),na.forEach(t),Xs.forEach(t),Aqe=i(f),ji=n(f,"H2",{class:!0});var $je=s(ji);Sb=n($je,"A",{id:!0,class:!0,href:!0});var Yst=s(Sb);Yce=n(Yst,"SPAN",{});var Kst=s(Yce);T(mA.$$.fragment,Kst),Kst.forEach(t),Yst.forEach(t),a9o=i($je),Kce=n($je,"SPAN",{});var Zst=s(Kce);n9o=r(Zst,"AutoModelForSequenceClassification"),Zst.forEach(t),$je.forEach(t),yqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(gA.$$.fragment,zs),s9o=i(zs),Di=n(zs,"P",{});var ZK=s(Di);l9o=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=n(ZK,"A",{href:!0});var elt=s(qD);i9o=r(elt,"from_pretrained()"),elt.forEach(t),d9o=r(ZK," class method or the "),ND=n(ZK,"A",{href:!0});var olt=s(ND);c9o=r(olt,"from_config()"),olt.forEach(t),f9o=r(ZK,` class
method.`),ZK.forEach(t),m9o=i(zs),hA=n(zs,"P",{});var kje=s(hA);g9o=r(kje,"This class cannot be instantiated directly using "),Zce=n(kje,"CODE",{});var rlt=s(Zce);h9o=r(rlt,"__init__()"),rlt.forEach(t),p9o=r(kje," (throws an error)."),kje.forEach(t),_9o=i(zs),it=n(zs,"DIV",{class:!0});var x3=s(it);T(pA.$$.fragment,x3),u9o=i(x3),efe=n(x3,"P",{});var tlt=s(efe);b9o=r(tlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tlt.forEach(t),v9o=i(x3),Gi=n(x3,"P",{});var eZ=s(Gi);F9o=r(eZ,`Note:
Loading a model from its configuration file does `),ofe=n(eZ,"STRONG",{});var alt=s(ofe);T9o=r(alt,"not"),alt.forEach(t),M9o=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(eZ,"A",{href:!0});var nlt=s(jD);E9o=r(nlt,"from_pretrained()"),nlt.forEach(t),C9o=r(eZ," to load the model weights."),eZ.forEach(t),w9o=i(x3),T(Rb.$$.fragment,x3),x3.forEach(t),A9o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(_A.$$.fragment,sa),y9o=i(sa),rfe=n(sa,"P",{});var slt=s(rfe);L9o=r(slt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),slt.forEach(t),x9o=i(sa),Ra=n(sa,"P",{});var $3=s(Ra);$9o=r($3,"The model class to instantiate is selected based on the "),tfe=n($3,"CODE",{});var llt=s(tfe);k9o=r(llt,"model_type"),llt.forEach(t),S9o=r($3,` property of the config object (either
passed as an argument or loaded from `),afe=n($3,"CODE",{});var ilt=s(afe);R9o=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),P9o=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n($3,"CODE",{});var dlt=s(nfe);B9o=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),I9o=r($3,":"),$3.forEach(t),q9o=i(sa),q=n(sa,"UL",{});var j=s(q);Pb=n(j,"LI",{});var fLe=s(Pb);sfe=n(fLe,"STRONG",{});var clt=s(sfe);N9o=r(clt,"albert"),clt.forEach(t),j9o=r(fLe," \u2014 "),DD=n(fLe,"A",{href:!0});var flt=s(DD);D9o=r(flt,"AlbertForSequenceClassification"),flt.forEach(t),G9o=r(fLe," (ALBERT model)"),fLe.forEach(t),O9o=i(j),Bb=n(j,"LI",{});var mLe=s(Bb);lfe=n(mLe,"STRONG",{});var mlt=s(lfe);V9o=r(mlt,"bart"),mlt.forEach(t),X9o=r(mLe," \u2014 "),GD=n(mLe,"A",{href:!0});var glt=s(GD);z9o=r(glt,"BartForSequenceClassification"),glt.forEach(t),W9o=r(mLe," (BART model)"),mLe.forEach(t),Q9o=i(j),Ib=n(j,"LI",{});var gLe=s(Ib);ife=n(gLe,"STRONG",{});var hlt=s(ife);H9o=r(hlt,"bert"),hlt.forEach(t),U9o=r(gLe," \u2014 "),OD=n(gLe,"A",{href:!0});var plt=s(OD);J9o=r(plt,"BertForSequenceClassification"),plt.forEach(t),Y9o=r(gLe," (BERT model)"),gLe.forEach(t),K9o=i(j),qb=n(j,"LI",{});var hLe=s(qb);dfe=n(hLe,"STRONG",{});var _lt=s(dfe);Z9o=r(_lt,"big_bird"),_lt.forEach(t),exo=r(hLe," \u2014 "),VD=n(hLe,"A",{href:!0});var ult=s(VD);oxo=r(ult,"BigBirdForSequenceClassification"),ult.forEach(t),rxo=r(hLe," (BigBird model)"),hLe.forEach(t),txo=i(j),Nb=n(j,"LI",{});var pLe=s(Nb);cfe=n(pLe,"STRONG",{});var blt=s(cfe);axo=r(blt,"bigbird_pegasus"),blt.forEach(t),nxo=r(pLe," \u2014 "),XD=n(pLe,"A",{href:!0});var vlt=s(XD);sxo=r(vlt,"BigBirdPegasusForSequenceClassification"),vlt.forEach(t),lxo=r(pLe," (BigBirdPegasus model)"),pLe.forEach(t),ixo=i(j),jb=n(j,"LI",{});var _Le=s(jb);ffe=n(_Le,"STRONG",{});var Flt=s(ffe);dxo=r(Flt,"camembert"),Flt.forEach(t),cxo=r(_Le," \u2014 "),zD=n(_Le,"A",{href:!0});var Tlt=s(zD);fxo=r(Tlt,"CamembertForSequenceClassification"),Tlt.forEach(t),mxo=r(_Le," (CamemBERT model)"),_Le.forEach(t),gxo=i(j),Db=n(j,"LI",{});var uLe=s(Db);mfe=n(uLe,"STRONG",{});var Mlt=s(mfe);hxo=r(Mlt,"canine"),Mlt.forEach(t),pxo=r(uLe," \u2014 "),WD=n(uLe,"A",{href:!0});var Elt=s(WD);_xo=r(Elt,"CanineForSequenceClassification"),Elt.forEach(t),uxo=r(uLe," (Canine model)"),uLe.forEach(t),bxo=i(j),Gb=n(j,"LI",{});var bLe=s(Gb);gfe=n(bLe,"STRONG",{});var Clt=s(gfe);vxo=r(Clt,"convbert"),Clt.forEach(t),Fxo=r(bLe," \u2014 "),QD=n(bLe,"A",{href:!0});var wlt=s(QD);Txo=r(wlt,"ConvBertForSequenceClassification"),wlt.forEach(t),Mxo=r(bLe," (ConvBERT model)"),bLe.forEach(t),Exo=i(j),Ob=n(j,"LI",{});var vLe=s(Ob);hfe=n(vLe,"STRONG",{});var Alt=s(hfe);Cxo=r(Alt,"ctrl"),Alt.forEach(t),wxo=r(vLe," \u2014 "),HD=n(vLe,"A",{href:!0});var ylt=s(HD);Axo=r(ylt,"CTRLForSequenceClassification"),ylt.forEach(t),yxo=r(vLe," (CTRL model)"),vLe.forEach(t),Lxo=i(j),Vb=n(j,"LI",{});var FLe=s(Vb);pfe=n(FLe,"STRONG",{});var Llt=s(pfe);xxo=r(Llt,"data2vec-text"),Llt.forEach(t),$xo=r(FLe," \u2014 "),UD=n(FLe,"A",{href:!0});var xlt=s(UD);kxo=r(xlt,"Data2VecTextForSequenceClassification"),xlt.forEach(t),Sxo=r(FLe," (Data2VecText model)"),FLe.forEach(t),Rxo=i(j),Xb=n(j,"LI",{});var TLe=s(Xb);_fe=n(TLe,"STRONG",{});var $lt=s(_fe);Pxo=r($lt,"deberta"),$lt.forEach(t),Bxo=r(TLe," \u2014 "),JD=n(TLe,"A",{href:!0});var klt=s(JD);Ixo=r(klt,"DebertaForSequenceClassification"),klt.forEach(t),qxo=r(TLe," (DeBERTa model)"),TLe.forEach(t),Nxo=i(j),zb=n(j,"LI",{});var MLe=s(zb);ufe=n(MLe,"STRONG",{});var Slt=s(ufe);jxo=r(Slt,"deberta-v2"),Slt.forEach(t),Dxo=r(MLe," \u2014 "),YD=n(MLe,"A",{href:!0});var Rlt=s(YD);Gxo=r(Rlt,"DebertaV2ForSequenceClassification"),Rlt.forEach(t),Oxo=r(MLe," (DeBERTa-v2 model)"),MLe.forEach(t),Vxo=i(j),Wb=n(j,"LI",{});var ELe=s(Wb);bfe=n(ELe,"STRONG",{});var Plt=s(bfe);Xxo=r(Plt,"distilbert"),Plt.forEach(t),zxo=r(ELe," \u2014 "),KD=n(ELe,"A",{href:!0});var Blt=s(KD);Wxo=r(Blt,"DistilBertForSequenceClassification"),Blt.forEach(t),Qxo=r(ELe," (DistilBERT model)"),ELe.forEach(t),Hxo=i(j),Qb=n(j,"LI",{});var CLe=s(Qb);vfe=n(CLe,"STRONG",{});var Ilt=s(vfe);Uxo=r(Ilt,"electra"),Ilt.forEach(t),Jxo=r(CLe," \u2014 "),ZD=n(CLe,"A",{href:!0});var qlt=s(ZD);Yxo=r(qlt,"ElectraForSequenceClassification"),qlt.forEach(t),Kxo=r(CLe," (ELECTRA model)"),CLe.forEach(t),Zxo=i(j),Hb=n(j,"LI",{});var wLe=s(Hb);Ffe=n(wLe,"STRONG",{});var Nlt=s(Ffe);e$o=r(Nlt,"flaubert"),Nlt.forEach(t),o$o=r(wLe," \u2014 "),eG=n(wLe,"A",{href:!0});var jlt=s(eG);r$o=r(jlt,"FlaubertForSequenceClassification"),jlt.forEach(t),t$o=r(wLe," (FlauBERT model)"),wLe.forEach(t),a$o=i(j),Ub=n(j,"LI",{});var ALe=s(Ub);Tfe=n(ALe,"STRONG",{});var Dlt=s(Tfe);n$o=r(Dlt,"fnet"),Dlt.forEach(t),s$o=r(ALe," \u2014 "),oG=n(ALe,"A",{href:!0});var Glt=s(oG);l$o=r(Glt,"FNetForSequenceClassification"),Glt.forEach(t),i$o=r(ALe," (FNet model)"),ALe.forEach(t),d$o=i(j),Jb=n(j,"LI",{});var yLe=s(Jb);Mfe=n(yLe,"STRONG",{});var Olt=s(Mfe);c$o=r(Olt,"funnel"),Olt.forEach(t),f$o=r(yLe," \u2014 "),rG=n(yLe,"A",{href:!0});var Vlt=s(rG);m$o=r(Vlt,"FunnelForSequenceClassification"),Vlt.forEach(t),g$o=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),h$o=i(j),Yb=n(j,"LI",{});var LLe=s(Yb);Efe=n(LLe,"STRONG",{});var Xlt=s(Efe);p$o=r(Xlt,"gpt2"),Xlt.forEach(t),_$o=r(LLe," \u2014 "),tG=n(LLe,"A",{href:!0});var zlt=s(tG);u$o=r(zlt,"GPT2ForSequenceClassification"),zlt.forEach(t),b$o=r(LLe," (OpenAI GPT-2 model)"),LLe.forEach(t),v$o=i(j),Kb=n(j,"LI",{});var xLe=s(Kb);Cfe=n(xLe,"STRONG",{});var Wlt=s(Cfe);F$o=r(Wlt,"gpt_neo"),Wlt.forEach(t),T$o=r(xLe," \u2014 "),aG=n(xLe,"A",{href:!0});var Qlt=s(aG);M$o=r(Qlt,"GPTNeoForSequenceClassification"),Qlt.forEach(t),E$o=r(xLe," (GPT Neo model)"),xLe.forEach(t),C$o=i(j),Zb=n(j,"LI",{});var $Le=s(Zb);wfe=n($Le,"STRONG",{});var Hlt=s(wfe);w$o=r(Hlt,"gptj"),Hlt.forEach(t),A$o=r($Le," \u2014 "),nG=n($Le,"A",{href:!0});var Ult=s(nG);y$o=r(Ult,"GPTJForSequenceClassification"),Ult.forEach(t),L$o=r($Le," (GPT-J model)"),$Le.forEach(t),x$o=i(j),e2=n(j,"LI",{});var kLe=s(e2);Afe=n(kLe,"STRONG",{});var Jlt=s(Afe);$$o=r(Jlt,"ibert"),Jlt.forEach(t),k$o=r(kLe," \u2014 "),sG=n(kLe,"A",{href:!0});var Ylt=s(sG);S$o=r(Ylt,"IBertForSequenceClassification"),Ylt.forEach(t),R$o=r(kLe," (I-BERT model)"),kLe.forEach(t),P$o=i(j),o2=n(j,"LI",{});var SLe=s(o2);yfe=n(SLe,"STRONG",{});var Klt=s(yfe);B$o=r(Klt,"layoutlm"),Klt.forEach(t),I$o=r(SLe," \u2014 "),lG=n(SLe,"A",{href:!0});var Zlt=s(lG);q$o=r(Zlt,"LayoutLMForSequenceClassification"),Zlt.forEach(t),N$o=r(SLe," (LayoutLM model)"),SLe.forEach(t),j$o=i(j),r2=n(j,"LI",{});var RLe=s(r2);Lfe=n(RLe,"STRONG",{});var eit=s(Lfe);D$o=r(eit,"layoutlmv2"),eit.forEach(t),G$o=r(RLe," \u2014 "),iG=n(RLe,"A",{href:!0});var oit=s(iG);O$o=r(oit,"LayoutLMv2ForSequenceClassification"),oit.forEach(t),V$o=r(RLe," (LayoutLMv2 model)"),RLe.forEach(t),X$o=i(j),t2=n(j,"LI",{});var PLe=s(t2);xfe=n(PLe,"STRONG",{});var rit=s(xfe);z$o=r(rit,"led"),rit.forEach(t),W$o=r(PLe," \u2014 "),dG=n(PLe,"A",{href:!0});var tit=s(dG);Q$o=r(tit,"LEDForSequenceClassification"),tit.forEach(t),H$o=r(PLe," (LED model)"),PLe.forEach(t),U$o=i(j),a2=n(j,"LI",{});var BLe=s(a2);$fe=n(BLe,"STRONG",{});var ait=s($fe);J$o=r(ait,"longformer"),ait.forEach(t),Y$o=r(BLe," \u2014 "),cG=n(BLe,"A",{href:!0});var nit=s(cG);K$o=r(nit,"LongformerForSequenceClassification"),nit.forEach(t),Z$o=r(BLe," (Longformer model)"),BLe.forEach(t),eko=i(j),n2=n(j,"LI",{});var ILe=s(n2);kfe=n(ILe,"STRONG",{});var sit=s(kfe);oko=r(sit,"mbart"),sit.forEach(t),rko=r(ILe," \u2014 "),fG=n(ILe,"A",{href:!0});var lit=s(fG);tko=r(lit,"MBartForSequenceClassification"),lit.forEach(t),ako=r(ILe," (mBART model)"),ILe.forEach(t),nko=i(j),s2=n(j,"LI",{});var qLe=s(s2);Sfe=n(qLe,"STRONG",{});var iit=s(Sfe);sko=r(iit,"megatron-bert"),iit.forEach(t),lko=r(qLe," \u2014 "),mG=n(qLe,"A",{href:!0});var dit=s(mG);iko=r(dit,"MegatronBertForSequenceClassification"),dit.forEach(t),dko=r(qLe," (MegatronBert model)"),qLe.forEach(t),cko=i(j),l2=n(j,"LI",{});var NLe=s(l2);Rfe=n(NLe,"STRONG",{});var cit=s(Rfe);fko=r(cit,"mobilebert"),cit.forEach(t),mko=r(NLe," \u2014 "),gG=n(NLe,"A",{href:!0});var fit=s(gG);gko=r(fit,"MobileBertForSequenceClassification"),fit.forEach(t),hko=r(NLe," (MobileBERT model)"),NLe.forEach(t),pko=i(j),i2=n(j,"LI",{});var jLe=s(i2);Pfe=n(jLe,"STRONG",{});var mit=s(Pfe);_ko=r(mit,"mpnet"),mit.forEach(t),uko=r(jLe," \u2014 "),hG=n(jLe,"A",{href:!0});var git=s(hG);bko=r(git,"MPNetForSequenceClassification"),git.forEach(t),vko=r(jLe," (MPNet model)"),jLe.forEach(t),Fko=i(j),d2=n(j,"LI",{});var DLe=s(d2);Bfe=n(DLe,"STRONG",{});var hit=s(Bfe);Tko=r(hit,"nystromformer"),hit.forEach(t),Mko=r(DLe," \u2014 "),pG=n(DLe,"A",{href:!0});var pit=s(pG);Eko=r(pit,"NystromformerForSequenceClassification"),pit.forEach(t),Cko=r(DLe," (Nystromformer model)"),DLe.forEach(t),wko=i(j),c2=n(j,"LI",{});var GLe=s(c2);Ife=n(GLe,"STRONG",{});var _it=s(Ife);Ako=r(_it,"openai-gpt"),_it.forEach(t),yko=r(GLe," \u2014 "),_G=n(GLe,"A",{href:!0});var uit=s(_G);Lko=r(uit,"OpenAIGPTForSequenceClassification"),uit.forEach(t),xko=r(GLe," (OpenAI GPT model)"),GLe.forEach(t),$ko=i(j),f2=n(j,"LI",{});var OLe=s(f2);qfe=n(OLe,"STRONG",{});var bit=s(qfe);kko=r(bit,"perceiver"),bit.forEach(t),Sko=r(OLe," \u2014 "),uG=n(OLe,"A",{href:!0});var vit=s(uG);Rko=r(vit,"PerceiverForSequenceClassification"),vit.forEach(t),Pko=r(OLe," (Perceiver model)"),OLe.forEach(t),Bko=i(j),m2=n(j,"LI",{});var VLe=s(m2);Nfe=n(VLe,"STRONG",{});var Fit=s(Nfe);Iko=r(Fit,"plbart"),Fit.forEach(t),qko=r(VLe," \u2014 "),bG=n(VLe,"A",{href:!0});var Tit=s(bG);Nko=r(Tit,"PLBartForSequenceClassification"),Tit.forEach(t),jko=r(VLe," (PLBart model)"),VLe.forEach(t),Dko=i(j),g2=n(j,"LI",{});var XLe=s(g2);jfe=n(XLe,"STRONG",{});var Mit=s(jfe);Gko=r(Mit,"qdqbert"),Mit.forEach(t),Oko=r(XLe," \u2014 "),vG=n(XLe,"A",{href:!0});var Eit=s(vG);Vko=r(Eit,"QDQBertForSequenceClassification"),Eit.forEach(t),Xko=r(XLe," (QDQBert model)"),XLe.forEach(t),zko=i(j),h2=n(j,"LI",{});var zLe=s(h2);Dfe=n(zLe,"STRONG",{});var Cit=s(Dfe);Wko=r(Cit,"reformer"),Cit.forEach(t),Qko=r(zLe," \u2014 "),FG=n(zLe,"A",{href:!0});var wit=s(FG);Hko=r(wit,"ReformerForSequenceClassification"),wit.forEach(t),Uko=r(zLe," (Reformer model)"),zLe.forEach(t),Jko=i(j),p2=n(j,"LI",{});var WLe=s(p2);Gfe=n(WLe,"STRONG",{});var Ait=s(Gfe);Yko=r(Ait,"rembert"),Ait.forEach(t),Kko=r(WLe," \u2014 "),TG=n(WLe,"A",{href:!0});var yit=s(TG);Zko=r(yit,"RemBertForSequenceClassification"),yit.forEach(t),eSo=r(WLe," (RemBERT model)"),WLe.forEach(t),oSo=i(j),_2=n(j,"LI",{});var QLe=s(_2);Ofe=n(QLe,"STRONG",{});var Lit=s(Ofe);rSo=r(Lit,"roberta"),Lit.forEach(t),tSo=r(QLe," \u2014 "),MG=n(QLe,"A",{href:!0});var xit=s(MG);aSo=r(xit,"RobertaForSequenceClassification"),xit.forEach(t),nSo=r(QLe," (RoBERTa model)"),QLe.forEach(t),sSo=i(j),u2=n(j,"LI",{});var HLe=s(u2);Vfe=n(HLe,"STRONG",{});var $it=s(Vfe);lSo=r($it,"roformer"),$it.forEach(t),iSo=r(HLe," \u2014 "),EG=n(HLe,"A",{href:!0});var kit=s(EG);dSo=r(kit,"RoFormerForSequenceClassification"),kit.forEach(t),cSo=r(HLe," (RoFormer model)"),HLe.forEach(t),fSo=i(j),b2=n(j,"LI",{});var ULe=s(b2);Xfe=n(ULe,"STRONG",{});var Sit=s(Xfe);mSo=r(Sit,"squeezebert"),Sit.forEach(t),gSo=r(ULe," \u2014 "),CG=n(ULe,"A",{href:!0});var Rit=s(CG);hSo=r(Rit,"SqueezeBertForSequenceClassification"),Rit.forEach(t),pSo=r(ULe," (SqueezeBERT model)"),ULe.forEach(t),_So=i(j),v2=n(j,"LI",{});var JLe=s(v2);zfe=n(JLe,"STRONG",{});var Pit=s(zfe);uSo=r(Pit,"tapas"),Pit.forEach(t),bSo=r(JLe," \u2014 "),wG=n(JLe,"A",{href:!0});var Bit=s(wG);vSo=r(Bit,"TapasForSequenceClassification"),Bit.forEach(t),FSo=r(JLe," (TAPAS model)"),JLe.forEach(t),TSo=i(j),F2=n(j,"LI",{});var YLe=s(F2);Wfe=n(YLe,"STRONG",{});var Iit=s(Wfe);MSo=r(Iit,"transfo-xl"),Iit.forEach(t),ESo=r(YLe," \u2014 "),AG=n(YLe,"A",{href:!0});var qit=s(AG);CSo=r(qit,"TransfoXLForSequenceClassification"),qit.forEach(t),wSo=r(YLe," (Transformer-XL model)"),YLe.forEach(t),ASo=i(j),T2=n(j,"LI",{});var KLe=s(T2);Qfe=n(KLe,"STRONG",{});var Nit=s(Qfe);ySo=r(Nit,"xlm"),Nit.forEach(t),LSo=r(KLe," \u2014 "),yG=n(KLe,"A",{href:!0});var jit=s(yG);xSo=r(jit,"XLMForSequenceClassification"),jit.forEach(t),$So=r(KLe," (XLM model)"),KLe.forEach(t),kSo=i(j),M2=n(j,"LI",{});var ZLe=s(M2);Hfe=n(ZLe,"STRONG",{});var Dit=s(Hfe);SSo=r(Dit,"xlm-roberta"),Dit.forEach(t),RSo=r(ZLe," \u2014 "),LG=n(ZLe,"A",{href:!0});var Git=s(LG);PSo=r(Git,"XLMRobertaForSequenceClassification"),Git.forEach(t),BSo=r(ZLe," (XLM-RoBERTa model)"),ZLe.forEach(t),ISo=i(j),E2=n(j,"LI",{});var e9e=s(E2);Ufe=n(e9e,"STRONG",{});var Oit=s(Ufe);qSo=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),NSo=r(e9e," \u2014 "),xG=n(e9e,"A",{href:!0});var Vit=s(xG);jSo=r(Vit,"XLMRobertaXLForSequenceClassification"),Vit.forEach(t),DSo=r(e9e," (XLM-RoBERTa-XL model)"),e9e.forEach(t),GSo=i(j),C2=n(j,"LI",{});var o9e=s(C2);Jfe=n(o9e,"STRONG",{});var Xit=s(Jfe);OSo=r(Xit,"xlnet"),Xit.forEach(t),VSo=r(o9e," \u2014 "),$G=n(o9e,"A",{href:!0});var zit=s($G);XSo=r(zit,"XLNetForSequenceClassification"),zit.forEach(t),zSo=r(o9e," (XLNet model)"),o9e.forEach(t),WSo=i(j),w2=n(j,"LI",{});var r9e=s(w2);Yfe=n(r9e,"STRONG",{});var Wit=s(Yfe);QSo=r(Wit,"yoso"),Wit.forEach(t),HSo=r(r9e," \u2014 "),kG=n(r9e,"A",{href:!0});var Qit=s(kG);USo=r(Qit,"YosoForSequenceClassification"),Qit.forEach(t),JSo=r(r9e," (YOSO model)"),r9e.forEach(t),j.forEach(t),YSo=i(sa),A2=n(sa,"P",{});var t9e=s(A2);KSo=r(t9e,"The model is set in evaluation mode by default using "),Kfe=n(t9e,"CODE",{});var Hit=s(Kfe);ZSo=r(Hit,"model.eval()"),Hit.forEach(t),eRo=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(t9e,"CODE",{});var Uit=s(Zfe);oRo=r(Uit,"model.train()"),Uit.forEach(t),t9e.forEach(t),rRo=i(sa),T(y2.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Lqe=i(f),Oi=n(f,"H2",{class:!0});var Sje=s(Oi);L2=n(Sje,"A",{id:!0,class:!0,href:!0});var Jit=s(L2);eme=n(Jit,"SPAN",{});var Yit=s(eme);T(uA.$$.fragment,Yit),Yit.forEach(t),Jit.forEach(t),tRo=i(Sje),ome=n(Sje,"SPAN",{});var Kit=s(ome);aRo=r(Kit,"AutoModelForMultipleChoice"),Kit.forEach(t),Sje.forEach(t),xqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(bA.$$.fragment,Ws),nRo=i(Ws),Vi=n(Ws,"P",{});var oZ=s(Vi);sRo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SG=n(oZ,"A",{href:!0});var Zit=s(SG);lRo=r(Zit,"from_pretrained()"),Zit.forEach(t),iRo=r(oZ," class method or the "),RG=n(oZ,"A",{href:!0});var edt=s(RG);dRo=r(edt,"from_config()"),edt.forEach(t),cRo=r(oZ,` class
method.`),oZ.forEach(t),fRo=i(Ws),vA=n(Ws,"P",{});var Rje=s(vA);mRo=r(Rje,"This class cannot be instantiated directly using "),rme=n(Rje,"CODE",{});var odt=s(rme);gRo=r(odt,"__init__()"),odt.forEach(t),hRo=r(Rje," (throws an error)."),Rje.forEach(t),pRo=i(Ws),dt=n(Ws,"DIV",{class:!0});var k3=s(dt);T(FA.$$.fragment,k3),_Ro=i(k3),tme=n(k3,"P",{});var rdt=s(tme);uRo=r(rdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rdt.forEach(t),bRo=i(k3),Xi=n(k3,"P",{});var rZ=s(Xi);vRo=r(rZ,`Note:
Loading a model from its configuration file does `),ame=n(rZ,"STRONG",{});var tdt=s(ame);FRo=r(tdt,"not"),tdt.forEach(t),TRo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(rZ,"A",{href:!0});var adt=s(PG);MRo=r(adt,"from_pretrained()"),adt.forEach(t),ERo=r(rZ," to load the model weights."),rZ.forEach(t),CRo=i(k3),T(x2.$$.fragment,k3),k3.forEach(t),wRo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(TA.$$.fragment,la),ARo=i(la),nme=n(la,"P",{});var ndt=s(nme);yRo=r(ndt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ndt.forEach(t),LRo=i(la),Pa=n(la,"P",{});var S3=s(Pa);xRo=r(S3,"The model class to instantiate is selected based on the "),sme=n(S3,"CODE",{});var sdt=s(sme);$Ro=r(sdt,"model_type"),sdt.forEach(t),kRo=r(S3,` property of the config object (either
passed as an argument or loaded from `),lme=n(S3,"CODE",{});var ldt=s(lme);SRo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),RRo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(S3,"CODE",{});var idt=s(ime);PRo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),BRo=r(S3,":"),S3.forEach(t),IRo=i(la),Y=n(la,"UL",{});var Z=s(Y);$2=n(Z,"LI",{});var a9e=s($2);dme=n(a9e,"STRONG",{});var ddt=s(dme);qRo=r(ddt,"albert"),ddt.forEach(t),NRo=r(a9e," \u2014 "),BG=n(a9e,"A",{href:!0});var cdt=s(BG);jRo=r(cdt,"AlbertForMultipleChoice"),cdt.forEach(t),DRo=r(a9e," (ALBERT model)"),a9e.forEach(t),GRo=i(Z),k2=n(Z,"LI",{});var n9e=s(k2);cme=n(n9e,"STRONG",{});var fdt=s(cme);ORo=r(fdt,"bert"),fdt.forEach(t),VRo=r(n9e," \u2014 "),IG=n(n9e,"A",{href:!0});var mdt=s(IG);XRo=r(mdt,"BertForMultipleChoice"),mdt.forEach(t),zRo=r(n9e," (BERT model)"),n9e.forEach(t),WRo=i(Z),S2=n(Z,"LI",{});var s9e=s(S2);fme=n(s9e,"STRONG",{});var gdt=s(fme);QRo=r(gdt,"big_bird"),gdt.forEach(t),HRo=r(s9e," \u2014 "),qG=n(s9e,"A",{href:!0});var hdt=s(qG);URo=r(hdt,"BigBirdForMultipleChoice"),hdt.forEach(t),JRo=r(s9e," (BigBird model)"),s9e.forEach(t),YRo=i(Z),R2=n(Z,"LI",{});var l9e=s(R2);mme=n(l9e,"STRONG",{});var pdt=s(mme);KRo=r(pdt,"camembert"),pdt.forEach(t),ZRo=r(l9e," \u2014 "),NG=n(l9e,"A",{href:!0});var _dt=s(NG);ePo=r(_dt,"CamembertForMultipleChoice"),_dt.forEach(t),oPo=r(l9e," (CamemBERT model)"),l9e.forEach(t),rPo=i(Z),P2=n(Z,"LI",{});var i9e=s(P2);gme=n(i9e,"STRONG",{});var udt=s(gme);tPo=r(udt,"canine"),udt.forEach(t),aPo=r(i9e," \u2014 "),jG=n(i9e,"A",{href:!0});var bdt=s(jG);nPo=r(bdt,"CanineForMultipleChoice"),bdt.forEach(t),sPo=r(i9e," (Canine model)"),i9e.forEach(t),lPo=i(Z),B2=n(Z,"LI",{});var d9e=s(B2);hme=n(d9e,"STRONG",{});var vdt=s(hme);iPo=r(vdt,"convbert"),vdt.forEach(t),dPo=r(d9e," \u2014 "),DG=n(d9e,"A",{href:!0});var Fdt=s(DG);cPo=r(Fdt,"ConvBertForMultipleChoice"),Fdt.forEach(t),fPo=r(d9e," (ConvBERT model)"),d9e.forEach(t),mPo=i(Z),I2=n(Z,"LI",{});var c9e=s(I2);pme=n(c9e,"STRONG",{});var Tdt=s(pme);gPo=r(Tdt,"data2vec-text"),Tdt.forEach(t),hPo=r(c9e," \u2014 "),GG=n(c9e,"A",{href:!0});var Mdt=s(GG);pPo=r(Mdt,"Data2VecTextForMultipleChoice"),Mdt.forEach(t),_Po=r(c9e," (Data2VecText model)"),c9e.forEach(t),uPo=i(Z),q2=n(Z,"LI",{});var f9e=s(q2);_me=n(f9e,"STRONG",{});var Edt=s(_me);bPo=r(Edt,"deberta-v2"),Edt.forEach(t),vPo=r(f9e," \u2014 "),OG=n(f9e,"A",{href:!0});var Cdt=s(OG);FPo=r(Cdt,"DebertaV2ForMultipleChoice"),Cdt.forEach(t),TPo=r(f9e," (DeBERTa-v2 model)"),f9e.forEach(t),MPo=i(Z),N2=n(Z,"LI",{});var m9e=s(N2);ume=n(m9e,"STRONG",{});var wdt=s(ume);EPo=r(wdt,"distilbert"),wdt.forEach(t),CPo=r(m9e," \u2014 "),VG=n(m9e,"A",{href:!0});var Adt=s(VG);wPo=r(Adt,"DistilBertForMultipleChoice"),Adt.forEach(t),APo=r(m9e," (DistilBERT model)"),m9e.forEach(t),yPo=i(Z),j2=n(Z,"LI",{});var g9e=s(j2);bme=n(g9e,"STRONG",{});var ydt=s(bme);LPo=r(ydt,"electra"),ydt.forEach(t),xPo=r(g9e," \u2014 "),XG=n(g9e,"A",{href:!0});var Ldt=s(XG);$Po=r(Ldt,"ElectraForMultipleChoice"),Ldt.forEach(t),kPo=r(g9e," (ELECTRA model)"),g9e.forEach(t),SPo=i(Z),D2=n(Z,"LI",{});var h9e=s(D2);vme=n(h9e,"STRONG",{});var xdt=s(vme);RPo=r(xdt,"flaubert"),xdt.forEach(t),PPo=r(h9e," \u2014 "),zG=n(h9e,"A",{href:!0});var $dt=s(zG);BPo=r($dt,"FlaubertForMultipleChoice"),$dt.forEach(t),IPo=r(h9e," (FlauBERT model)"),h9e.forEach(t),qPo=i(Z),G2=n(Z,"LI",{});var p9e=s(G2);Fme=n(p9e,"STRONG",{});var kdt=s(Fme);NPo=r(kdt,"fnet"),kdt.forEach(t),jPo=r(p9e," \u2014 "),WG=n(p9e,"A",{href:!0});var Sdt=s(WG);DPo=r(Sdt,"FNetForMultipleChoice"),Sdt.forEach(t),GPo=r(p9e," (FNet model)"),p9e.forEach(t),OPo=i(Z),O2=n(Z,"LI",{});var _9e=s(O2);Tme=n(_9e,"STRONG",{});var Rdt=s(Tme);VPo=r(Rdt,"funnel"),Rdt.forEach(t),XPo=r(_9e," \u2014 "),QG=n(_9e,"A",{href:!0});var Pdt=s(QG);zPo=r(Pdt,"FunnelForMultipleChoice"),Pdt.forEach(t),WPo=r(_9e," (Funnel Transformer model)"),_9e.forEach(t),QPo=i(Z),V2=n(Z,"LI",{});var u9e=s(V2);Mme=n(u9e,"STRONG",{});var Bdt=s(Mme);HPo=r(Bdt,"ibert"),Bdt.forEach(t),UPo=r(u9e," \u2014 "),HG=n(u9e,"A",{href:!0});var Idt=s(HG);JPo=r(Idt,"IBertForMultipleChoice"),Idt.forEach(t),YPo=r(u9e," (I-BERT model)"),u9e.forEach(t),KPo=i(Z),X2=n(Z,"LI",{});var b9e=s(X2);Eme=n(b9e,"STRONG",{});var qdt=s(Eme);ZPo=r(qdt,"longformer"),qdt.forEach(t),eBo=r(b9e," \u2014 "),UG=n(b9e,"A",{href:!0});var Ndt=s(UG);oBo=r(Ndt,"LongformerForMultipleChoice"),Ndt.forEach(t),rBo=r(b9e," (Longformer model)"),b9e.forEach(t),tBo=i(Z),z2=n(Z,"LI",{});var v9e=s(z2);Cme=n(v9e,"STRONG",{});var jdt=s(Cme);aBo=r(jdt,"megatron-bert"),jdt.forEach(t),nBo=r(v9e," \u2014 "),JG=n(v9e,"A",{href:!0});var Ddt=s(JG);sBo=r(Ddt,"MegatronBertForMultipleChoice"),Ddt.forEach(t),lBo=r(v9e," (MegatronBert model)"),v9e.forEach(t),iBo=i(Z),W2=n(Z,"LI",{});var F9e=s(W2);wme=n(F9e,"STRONG",{});var Gdt=s(wme);dBo=r(Gdt,"mobilebert"),Gdt.forEach(t),cBo=r(F9e," \u2014 "),YG=n(F9e,"A",{href:!0});var Odt=s(YG);fBo=r(Odt,"MobileBertForMultipleChoice"),Odt.forEach(t),mBo=r(F9e," (MobileBERT model)"),F9e.forEach(t),gBo=i(Z),Q2=n(Z,"LI",{});var T9e=s(Q2);Ame=n(T9e,"STRONG",{});var Vdt=s(Ame);hBo=r(Vdt,"mpnet"),Vdt.forEach(t),pBo=r(T9e," \u2014 "),KG=n(T9e,"A",{href:!0});var Xdt=s(KG);_Bo=r(Xdt,"MPNetForMultipleChoice"),Xdt.forEach(t),uBo=r(T9e," (MPNet model)"),T9e.forEach(t),bBo=i(Z),H2=n(Z,"LI",{});var M9e=s(H2);yme=n(M9e,"STRONG",{});var zdt=s(yme);vBo=r(zdt,"nystromformer"),zdt.forEach(t),FBo=r(M9e," \u2014 "),ZG=n(M9e,"A",{href:!0});var Wdt=s(ZG);TBo=r(Wdt,"NystromformerForMultipleChoice"),Wdt.forEach(t),MBo=r(M9e," (Nystromformer model)"),M9e.forEach(t),EBo=i(Z),U2=n(Z,"LI",{});var E9e=s(U2);Lme=n(E9e,"STRONG",{});var Qdt=s(Lme);CBo=r(Qdt,"qdqbert"),Qdt.forEach(t),wBo=r(E9e," \u2014 "),eO=n(E9e,"A",{href:!0});var Hdt=s(eO);ABo=r(Hdt,"QDQBertForMultipleChoice"),Hdt.forEach(t),yBo=r(E9e," (QDQBert model)"),E9e.forEach(t),LBo=i(Z),J2=n(Z,"LI",{});var C9e=s(J2);xme=n(C9e,"STRONG",{});var Udt=s(xme);xBo=r(Udt,"rembert"),Udt.forEach(t),$Bo=r(C9e," \u2014 "),oO=n(C9e,"A",{href:!0});var Jdt=s(oO);kBo=r(Jdt,"RemBertForMultipleChoice"),Jdt.forEach(t),SBo=r(C9e," (RemBERT model)"),C9e.forEach(t),RBo=i(Z),Y2=n(Z,"LI",{});var w9e=s(Y2);$me=n(w9e,"STRONG",{});var Ydt=s($me);PBo=r(Ydt,"roberta"),Ydt.forEach(t),BBo=r(w9e," \u2014 "),rO=n(w9e,"A",{href:!0});var Kdt=s(rO);IBo=r(Kdt,"RobertaForMultipleChoice"),Kdt.forEach(t),qBo=r(w9e," (RoBERTa model)"),w9e.forEach(t),NBo=i(Z),K2=n(Z,"LI",{});var A9e=s(K2);kme=n(A9e,"STRONG",{});var Zdt=s(kme);jBo=r(Zdt,"roformer"),Zdt.forEach(t),DBo=r(A9e," \u2014 "),tO=n(A9e,"A",{href:!0});var ect=s(tO);GBo=r(ect,"RoFormerForMultipleChoice"),ect.forEach(t),OBo=r(A9e," (RoFormer model)"),A9e.forEach(t),VBo=i(Z),Z2=n(Z,"LI",{});var y9e=s(Z2);Sme=n(y9e,"STRONG",{});var oct=s(Sme);XBo=r(oct,"squeezebert"),oct.forEach(t),zBo=r(y9e," \u2014 "),aO=n(y9e,"A",{href:!0});var rct=s(aO);WBo=r(rct,"SqueezeBertForMultipleChoice"),rct.forEach(t),QBo=r(y9e," (SqueezeBERT model)"),y9e.forEach(t),HBo=i(Z),ev=n(Z,"LI",{});var L9e=s(ev);Rme=n(L9e,"STRONG",{});var tct=s(Rme);UBo=r(tct,"xlm"),tct.forEach(t),JBo=r(L9e," \u2014 "),nO=n(L9e,"A",{href:!0});var act=s(nO);YBo=r(act,"XLMForMultipleChoice"),act.forEach(t),KBo=r(L9e," (XLM model)"),L9e.forEach(t),ZBo=i(Z),ov=n(Z,"LI",{});var x9e=s(ov);Pme=n(x9e,"STRONG",{});var nct=s(Pme);eIo=r(nct,"xlm-roberta"),nct.forEach(t),oIo=r(x9e," \u2014 "),sO=n(x9e,"A",{href:!0});var sct=s(sO);rIo=r(sct,"XLMRobertaForMultipleChoice"),sct.forEach(t),tIo=r(x9e," (XLM-RoBERTa model)"),x9e.forEach(t),aIo=i(Z),rv=n(Z,"LI",{});var $9e=s(rv);Bme=n($9e,"STRONG",{});var lct=s(Bme);nIo=r(lct,"xlm-roberta-xl"),lct.forEach(t),sIo=r($9e," \u2014 "),lO=n($9e,"A",{href:!0});var ict=s(lO);lIo=r(ict,"XLMRobertaXLForMultipleChoice"),ict.forEach(t),iIo=r($9e," (XLM-RoBERTa-XL model)"),$9e.forEach(t),dIo=i(Z),tv=n(Z,"LI",{});var k9e=s(tv);Ime=n(k9e,"STRONG",{});var dct=s(Ime);cIo=r(dct,"xlnet"),dct.forEach(t),fIo=r(k9e," \u2014 "),iO=n(k9e,"A",{href:!0});var cct=s(iO);mIo=r(cct,"XLNetForMultipleChoice"),cct.forEach(t),gIo=r(k9e," (XLNet model)"),k9e.forEach(t),hIo=i(Z),av=n(Z,"LI",{});var S9e=s(av);qme=n(S9e,"STRONG",{});var fct=s(qme);pIo=r(fct,"yoso"),fct.forEach(t),_Io=r(S9e," \u2014 "),dO=n(S9e,"A",{href:!0});var mct=s(dO);uIo=r(mct,"YosoForMultipleChoice"),mct.forEach(t),bIo=r(S9e," (YOSO model)"),S9e.forEach(t),Z.forEach(t),vIo=i(la),nv=n(la,"P",{});var R9e=s(nv);FIo=r(R9e,"The model is set in evaluation mode by default using "),Nme=n(R9e,"CODE",{});var gct=s(Nme);TIo=r(gct,"model.eval()"),gct.forEach(t),MIo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(R9e,"CODE",{});var hct=s(jme);EIo=r(hct,"model.train()"),hct.forEach(t),R9e.forEach(t),CIo=i(la),T(sv.$$.fragment,la),la.forEach(t),Ws.forEach(t),$qe=i(f),zi=n(f,"H2",{class:!0});var Pje=s(zi);lv=n(Pje,"A",{id:!0,class:!0,href:!0});var pct=s(lv);Dme=n(pct,"SPAN",{});var _ct=s(Dme);T(MA.$$.fragment,_ct),_ct.forEach(t),pct.forEach(t),wIo=i(Pje),Gme=n(Pje,"SPAN",{});var uct=s(Gme);AIo=r(uct,"AutoModelForNextSentencePrediction"),uct.forEach(t),Pje.forEach(t),kqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(EA.$$.fragment,Qs),yIo=i(Qs),Wi=n(Qs,"P",{});var tZ=s(Wi);LIo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cO=n(tZ,"A",{href:!0});var bct=s(cO);xIo=r(bct,"from_pretrained()"),bct.forEach(t),$Io=r(tZ," class method or the "),fO=n(tZ,"A",{href:!0});var vct=s(fO);kIo=r(vct,"from_config()"),vct.forEach(t),SIo=r(tZ,` class
method.`),tZ.forEach(t),RIo=i(Qs),CA=n(Qs,"P",{});var Bje=s(CA);PIo=r(Bje,"This class cannot be instantiated directly using "),Ome=n(Bje,"CODE",{});var Fct=s(Ome);BIo=r(Fct,"__init__()"),Fct.forEach(t),IIo=r(Bje," (throws an error)."),Bje.forEach(t),qIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var R3=s(ct);T(wA.$$.fragment,R3),NIo=i(R3),Vme=n(R3,"P",{});var Tct=s(Vme);jIo=r(Tct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tct.forEach(t),DIo=i(R3),Qi=n(R3,"P",{});var aZ=s(Qi);GIo=r(aZ,`Note:
Loading a model from its configuration file does `),Xme=n(aZ,"STRONG",{});var Mct=s(Xme);OIo=r(Mct,"not"),Mct.forEach(t),VIo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(aZ,"A",{href:!0});var Ect=s(mO);XIo=r(Ect,"from_pretrained()"),Ect.forEach(t),zIo=r(aZ," to load the model weights."),aZ.forEach(t),WIo=i(R3),T(iv.$$.fragment,R3),R3.forEach(t),QIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(AA.$$.fragment,ia),HIo=i(ia),zme=n(ia,"P",{});var Cct=s(zme);UIo=r(Cct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cct.forEach(t),JIo=i(ia),Ba=n(ia,"P",{});var P3=s(Ba);YIo=r(P3,"The model class to instantiate is selected based on the "),Wme=n(P3,"CODE",{});var wct=s(Wme);KIo=r(wct,"model_type"),wct.forEach(t),ZIo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Qme=n(P3,"CODE",{});var Act=s(Qme);eqo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),oqo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(P3,"CODE",{});var yct=s(Hme);rqo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),tqo=r(P3,":"),P3.forEach(t),aqo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);dv=n(Hs,"LI",{});var P9e=s(dv);Ume=n(P9e,"STRONG",{});var Lct=s(Ume);nqo=r(Lct,"bert"),Lct.forEach(t),sqo=r(P9e," \u2014 "),gO=n(P9e,"A",{href:!0});var xct=s(gO);lqo=r(xct,"BertForNextSentencePrediction"),xct.forEach(t),iqo=r(P9e," (BERT model)"),P9e.forEach(t),dqo=i(Hs),cv=n(Hs,"LI",{});var B9e=s(cv);Jme=n(B9e,"STRONG",{});var $ct=s(Jme);cqo=r($ct,"fnet"),$ct.forEach(t),fqo=r(B9e," \u2014 "),hO=n(B9e,"A",{href:!0});var kct=s(hO);mqo=r(kct,"FNetForNextSentencePrediction"),kct.forEach(t),gqo=r(B9e," (FNet model)"),B9e.forEach(t),hqo=i(Hs),fv=n(Hs,"LI",{});var I9e=s(fv);Yme=n(I9e,"STRONG",{});var Sct=s(Yme);pqo=r(Sct,"megatron-bert"),Sct.forEach(t),_qo=r(I9e," \u2014 "),pO=n(I9e,"A",{href:!0});var Rct=s(pO);uqo=r(Rct,"MegatronBertForNextSentencePrediction"),Rct.forEach(t),bqo=r(I9e," (MegatronBert model)"),I9e.forEach(t),vqo=i(Hs),mv=n(Hs,"LI",{});var q9e=s(mv);Kme=n(q9e,"STRONG",{});var Pct=s(Kme);Fqo=r(Pct,"mobilebert"),Pct.forEach(t),Tqo=r(q9e," \u2014 "),_O=n(q9e,"A",{href:!0});var Bct=s(_O);Mqo=r(Bct,"MobileBertForNextSentencePrediction"),Bct.forEach(t),Eqo=r(q9e," (MobileBERT model)"),q9e.forEach(t),Cqo=i(Hs),gv=n(Hs,"LI",{});var N9e=s(gv);Zme=n(N9e,"STRONG",{});var Ict=s(Zme);wqo=r(Ict,"qdqbert"),Ict.forEach(t),Aqo=r(N9e," \u2014 "),uO=n(N9e,"A",{href:!0});var qct=s(uO);yqo=r(qct,"QDQBertForNextSentencePrediction"),qct.forEach(t),Lqo=r(N9e," (QDQBert model)"),N9e.forEach(t),Hs.forEach(t),xqo=i(ia),hv=n(ia,"P",{});var j9e=s(hv);$qo=r(j9e,"The model is set in evaluation mode by default using "),ege=n(j9e,"CODE",{});var Nct=s(ege);kqo=r(Nct,"model.eval()"),Nct.forEach(t),Sqo=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(j9e,"CODE",{});var jct=s(oge);Rqo=r(jct,"model.train()"),jct.forEach(t),j9e.forEach(t),Pqo=i(ia),T(pv.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Sqe=i(f),Hi=n(f,"H2",{class:!0});var Ije=s(Hi);_v=n(Ije,"A",{id:!0,class:!0,href:!0});var Dct=s(_v);rge=n(Dct,"SPAN",{});var Gct=s(rge);T(yA.$$.fragment,Gct),Gct.forEach(t),Dct.forEach(t),Bqo=i(Ije),tge=n(Ije,"SPAN",{});var Oct=s(tge);Iqo=r(Oct,"AutoModelForTokenClassification"),Oct.forEach(t),Ije.forEach(t),Rqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(LA.$$.fragment,Us),qqo=i(Us),Ui=n(Us,"P",{});var nZ=s(Ui);Nqo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bO=n(nZ,"A",{href:!0});var Vct=s(bO);jqo=r(Vct,"from_pretrained()"),Vct.forEach(t),Dqo=r(nZ," class method or the "),vO=n(nZ,"A",{href:!0});var Xct=s(vO);Gqo=r(Xct,"from_config()"),Xct.forEach(t),Oqo=r(nZ,` class
method.`),nZ.forEach(t),Vqo=i(Us),xA=n(Us,"P",{});var qje=s(xA);Xqo=r(qje,"This class cannot be instantiated directly using "),age=n(qje,"CODE",{});var zct=s(age);zqo=r(zct,"__init__()"),zct.forEach(t),Wqo=r(qje," (throws an error)."),qje.forEach(t),Qqo=i(Us),ft=n(Us,"DIV",{class:!0});var B3=s(ft);T($A.$$.fragment,B3),Hqo=i(B3),nge=n(B3,"P",{});var Wct=s(nge);Uqo=r(Wct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wct.forEach(t),Jqo=i(B3),Ji=n(B3,"P",{});var sZ=s(Ji);Yqo=r(sZ,`Note:
Loading a model from its configuration file does `),sge=n(sZ,"STRONG",{});var Qct=s(sge);Kqo=r(Qct,"not"),Qct.forEach(t),Zqo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(sZ,"A",{href:!0});var Hct=s(FO);eNo=r(Hct,"from_pretrained()"),Hct.forEach(t),oNo=r(sZ," to load the model weights."),sZ.forEach(t),rNo=i(B3),T(uv.$$.fragment,B3),B3.forEach(t),tNo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(kA.$$.fragment,da),aNo=i(da),lge=n(da,"P",{});var Uct=s(lge);nNo=r(Uct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uct.forEach(t),sNo=i(da),Ia=n(da,"P",{});var I3=s(Ia);lNo=r(I3,"The model class to instantiate is selected based on the "),ige=n(I3,"CODE",{});var Jct=s(ige);iNo=r(Jct,"model_type"),Jct.forEach(t),dNo=r(I3,` property of the config object (either
passed as an argument or loaded from `),dge=n(I3,"CODE",{});var Yct=s(dge);cNo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),fNo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(I3,"CODE",{});var Kct=s(cge);mNo=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),gNo=r(I3,":"),I3.forEach(t),hNo=i(da),U=n(da,"UL",{});var J=s(U);bv=n(J,"LI",{});var D9e=s(bv);fge=n(D9e,"STRONG",{});var Zct=s(fge);pNo=r(Zct,"albert"),Zct.forEach(t),_No=r(D9e," \u2014 "),TO=n(D9e,"A",{href:!0});var eft=s(TO);uNo=r(eft,"AlbertForTokenClassification"),eft.forEach(t),bNo=r(D9e," (ALBERT model)"),D9e.forEach(t),vNo=i(J),vv=n(J,"LI",{});var G9e=s(vv);mge=n(G9e,"STRONG",{});var oft=s(mge);FNo=r(oft,"bert"),oft.forEach(t),TNo=r(G9e," \u2014 "),MO=n(G9e,"A",{href:!0});var rft=s(MO);MNo=r(rft,"BertForTokenClassification"),rft.forEach(t),ENo=r(G9e," (BERT model)"),G9e.forEach(t),CNo=i(J),Fv=n(J,"LI",{});var O9e=s(Fv);gge=n(O9e,"STRONG",{});var tft=s(gge);wNo=r(tft,"big_bird"),tft.forEach(t),ANo=r(O9e," \u2014 "),EO=n(O9e,"A",{href:!0});var aft=s(EO);yNo=r(aft,"BigBirdForTokenClassification"),aft.forEach(t),LNo=r(O9e," (BigBird model)"),O9e.forEach(t),xNo=i(J),Tv=n(J,"LI",{});var V9e=s(Tv);hge=n(V9e,"STRONG",{});var nft=s(hge);$No=r(nft,"camembert"),nft.forEach(t),kNo=r(V9e," \u2014 "),CO=n(V9e,"A",{href:!0});var sft=s(CO);SNo=r(sft,"CamembertForTokenClassification"),sft.forEach(t),RNo=r(V9e," (CamemBERT model)"),V9e.forEach(t),PNo=i(J),Mv=n(J,"LI",{});var X9e=s(Mv);pge=n(X9e,"STRONG",{});var lft=s(pge);BNo=r(lft,"canine"),lft.forEach(t),INo=r(X9e," \u2014 "),wO=n(X9e,"A",{href:!0});var ift=s(wO);qNo=r(ift,"CanineForTokenClassification"),ift.forEach(t),NNo=r(X9e," (Canine model)"),X9e.forEach(t),jNo=i(J),Ev=n(J,"LI",{});var z9e=s(Ev);_ge=n(z9e,"STRONG",{});var dft=s(_ge);DNo=r(dft,"convbert"),dft.forEach(t),GNo=r(z9e," \u2014 "),AO=n(z9e,"A",{href:!0});var cft=s(AO);ONo=r(cft,"ConvBertForTokenClassification"),cft.forEach(t),VNo=r(z9e," (ConvBERT model)"),z9e.forEach(t),XNo=i(J),Cv=n(J,"LI",{});var W9e=s(Cv);uge=n(W9e,"STRONG",{});var fft=s(uge);zNo=r(fft,"data2vec-text"),fft.forEach(t),WNo=r(W9e," \u2014 "),yO=n(W9e,"A",{href:!0});var mft=s(yO);QNo=r(mft,"Data2VecTextForTokenClassification"),mft.forEach(t),HNo=r(W9e," (Data2VecText model)"),W9e.forEach(t),UNo=i(J),wv=n(J,"LI",{});var Q9e=s(wv);bge=n(Q9e,"STRONG",{});var gft=s(bge);JNo=r(gft,"deberta"),gft.forEach(t),YNo=r(Q9e," \u2014 "),LO=n(Q9e,"A",{href:!0});var hft=s(LO);KNo=r(hft,"DebertaForTokenClassification"),hft.forEach(t),ZNo=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),ejo=i(J),Av=n(J,"LI",{});var H9e=s(Av);vge=n(H9e,"STRONG",{});var pft=s(vge);ojo=r(pft,"deberta-v2"),pft.forEach(t),rjo=r(H9e," \u2014 "),xO=n(H9e,"A",{href:!0});var _ft=s(xO);tjo=r(_ft,"DebertaV2ForTokenClassification"),_ft.forEach(t),ajo=r(H9e," (DeBERTa-v2 model)"),H9e.forEach(t),njo=i(J),yv=n(J,"LI",{});var U9e=s(yv);Fge=n(U9e,"STRONG",{});var uft=s(Fge);sjo=r(uft,"distilbert"),uft.forEach(t),ljo=r(U9e," \u2014 "),$O=n(U9e,"A",{href:!0});var bft=s($O);ijo=r(bft,"DistilBertForTokenClassification"),bft.forEach(t),djo=r(U9e," (DistilBERT model)"),U9e.forEach(t),cjo=i(J),Lv=n(J,"LI",{});var J9e=s(Lv);Tge=n(J9e,"STRONG",{});var vft=s(Tge);fjo=r(vft,"electra"),vft.forEach(t),mjo=r(J9e," \u2014 "),kO=n(J9e,"A",{href:!0});var Fft=s(kO);gjo=r(Fft,"ElectraForTokenClassification"),Fft.forEach(t),hjo=r(J9e," (ELECTRA model)"),J9e.forEach(t),pjo=i(J),xv=n(J,"LI",{});var Y9e=s(xv);Mge=n(Y9e,"STRONG",{});var Tft=s(Mge);_jo=r(Tft,"flaubert"),Tft.forEach(t),ujo=r(Y9e," \u2014 "),SO=n(Y9e,"A",{href:!0});var Mft=s(SO);bjo=r(Mft,"FlaubertForTokenClassification"),Mft.forEach(t),vjo=r(Y9e," (FlauBERT model)"),Y9e.forEach(t),Fjo=i(J),$v=n(J,"LI",{});var K9e=s($v);Ege=n(K9e,"STRONG",{});var Eft=s(Ege);Tjo=r(Eft,"fnet"),Eft.forEach(t),Mjo=r(K9e," \u2014 "),RO=n(K9e,"A",{href:!0});var Cft=s(RO);Ejo=r(Cft,"FNetForTokenClassification"),Cft.forEach(t),Cjo=r(K9e," (FNet model)"),K9e.forEach(t),wjo=i(J),kv=n(J,"LI",{});var Z9e=s(kv);Cge=n(Z9e,"STRONG",{});var wft=s(Cge);Ajo=r(wft,"funnel"),wft.forEach(t),yjo=r(Z9e," \u2014 "),PO=n(Z9e,"A",{href:!0});var Aft=s(PO);Ljo=r(Aft,"FunnelForTokenClassification"),Aft.forEach(t),xjo=r(Z9e," (Funnel Transformer model)"),Z9e.forEach(t),$jo=i(J),Sv=n(J,"LI",{});var exe=s(Sv);wge=n(exe,"STRONG",{});var yft=s(wge);kjo=r(yft,"gpt2"),yft.forEach(t),Sjo=r(exe," \u2014 "),BO=n(exe,"A",{href:!0});var Lft=s(BO);Rjo=r(Lft,"GPT2ForTokenClassification"),Lft.forEach(t),Pjo=r(exe," (OpenAI GPT-2 model)"),exe.forEach(t),Bjo=i(J),Rv=n(J,"LI",{});var oxe=s(Rv);Age=n(oxe,"STRONG",{});var xft=s(Age);Ijo=r(xft,"ibert"),xft.forEach(t),qjo=r(oxe," \u2014 "),IO=n(oxe,"A",{href:!0});var $ft=s(IO);Njo=r($ft,"IBertForTokenClassification"),$ft.forEach(t),jjo=r(oxe," (I-BERT model)"),oxe.forEach(t),Djo=i(J),Pv=n(J,"LI",{});var rxe=s(Pv);yge=n(rxe,"STRONG",{});var kft=s(yge);Gjo=r(kft,"layoutlm"),kft.forEach(t),Ojo=r(rxe," \u2014 "),qO=n(rxe,"A",{href:!0});var Sft=s(qO);Vjo=r(Sft,"LayoutLMForTokenClassification"),Sft.forEach(t),Xjo=r(rxe," (LayoutLM model)"),rxe.forEach(t),zjo=i(J),Bv=n(J,"LI",{});var txe=s(Bv);Lge=n(txe,"STRONG",{});var Rft=s(Lge);Wjo=r(Rft,"layoutlmv2"),Rft.forEach(t),Qjo=r(txe," \u2014 "),NO=n(txe,"A",{href:!0});var Pft=s(NO);Hjo=r(Pft,"LayoutLMv2ForTokenClassification"),Pft.forEach(t),Ujo=r(txe," (LayoutLMv2 model)"),txe.forEach(t),Jjo=i(J),Iv=n(J,"LI",{});var axe=s(Iv);xge=n(axe,"STRONG",{});var Bft=s(xge);Yjo=r(Bft,"longformer"),Bft.forEach(t),Kjo=r(axe," \u2014 "),jO=n(axe,"A",{href:!0});var Ift=s(jO);Zjo=r(Ift,"LongformerForTokenClassification"),Ift.forEach(t),eDo=r(axe," (Longformer model)"),axe.forEach(t),oDo=i(J),qv=n(J,"LI",{});var nxe=s(qv);$ge=n(nxe,"STRONG",{});var qft=s($ge);rDo=r(qft,"megatron-bert"),qft.forEach(t),tDo=r(nxe," \u2014 "),DO=n(nxe,"A",{href:!0});var Nft=s(DO);aDo=r(Nft,"MegatronBertForTokenClassification"),Nft.forEach(t),nDo=r(nxe," (MegatronBert model)"),nxe.forEach(t),sDo=i(J),Nv=n(J,"LI",{});var sxe=s(Nv);kge=n(sxe,"STRONG",{});var jft=s(kge);lDo=r(jft,"mobilebert"),jft.forEach(t),iDo=r(sxe," \u2014 "),GO=n(sxe,"A",{href:!0});var Dft=s(GO);dDo=r(Dft,"MobileBertForTokenClassification"),Dft.forEach(t),cDo=r(sxe," (MobileBERT model)"),sxe.forEach(t),fDo=i(J),jv=n(J,"LI",{});var lxe=s(jv);Sge=n(lxe,"STRONG",{});var Gft=s(Sge);mDo=r(Gft,"mpnet"),Gft.forEach(t),gDo=r(lxe," \u2014 "),OO=n(lxe,"A",{href:!0});var Oft=s(OO);hDo=r(Oft,"MPNetForTokenClassification"),Oft.forEach(t),pDo=r(lxe," (MPNet model)"),lxe.forEach(t),_Do=i(J),Dv=n(J,"LI",{});var ixe=s(Dv);Rge=n(ixe,"STRONG",{});var Vft=s(Rge);uDo=r(Vft,"nystromformer"),Vft.forEach(t),bDo=r(ixe," \u2014 "),VO=n(ixe,"A",{href:!0});var Xft=s(VO);vDo=r(Xft,"NystromformerForTokenClassification"),Xft.forEach(t),FDo=r(ixe," (Nystromformer model)"),ixe.forEach(t),TDo=i(J),Gv=n(J,"LI",{});var dxe=s(Gv);Pge=n(dxe,"STRONG",{});var zft=s(Pge);MDo=r(zft,"qdqbert"),zft.forEach(t),EDo=r(dxe," \u2014 "),XO=n(dxe,"A",{href:!0});var Wft=s(XO);CDo=r(Wft,"QDQBertForTokenClassification"),Wft.forEach(t),wDo=r(dxe," (QDQBert model)"),dxe.forEach(t),ADo=i(J),Ov=n(J,"LI",{});var cxe=s(Ov);Bge=n(cxe,"STRONG",{});var Qft=s(Bge);yDo=r(Qft,"rembert"),Qft.forEach(t),LDo=r(cxe," \u2014 "),zO=n(cxe,"A",{href:!0});var Hft=s(zO);xDo=r(Hft,"RemBertForTokenClassification"),Hft.forEach(t),$Do=r(cxe," (RemBERT model)"),cxe.forEach(t),kDo=i(J),Vv=n(J,"LI",{});var fxe=s(Vv);Ige=n(fxe,"STRONG",{});var Uft=s(Ige);SDo=r(Uft,"roberta"),Uft.forEach(t),RDo=r(fxe," \u2014 "),WO=n(fxe,"A",{href:!0});var Jft=s(WO);PDo=r(Jft,"RobertaForTokenClassification"),Jft.forEach(t),BDo=r(fxe," (RoBERTa model)"),fxe.forEach(t),IDo=i(J),Xv=n(J,"LI",{});var mxe=s(Xv);qge=n(mxe,"STRONG",{});var Yft=s(qge);qDo=r(Yft,"roformer"),Yft.forEach(t),NDo=r(mxe," \u2014 "),QO=n(mxe,"A",{href:!0});var Kft=s(QO);jDo=r(Kft,"RoFormerForTokenClassification"),Kft.forEach(t),DDo=r(mxe," (RoFormer model)"),mxe.forEach(t),GDo=i(J),zv=n(J,"LI",{});var gxe=s(zv);Nge=n(gxe,"STRONG",{});var Zft=s(Nge);ODo=r(Zft,"squeezebert"),Zft.forEach(t),VDo=r(gxe," \u2014 "),HO=n(gxe,"A",{href:!0});var emt=s(HO);XDo=r(emt,"SqueezeBertForTokenClassification"),emt.forEach(t),zDo=r(gxe," (SqueezeBERT model)"),gxe.forEach(t),WDo=i(J),Wv=n(J,"LI",{});var hxe=s(Wv);jge=n(hxe,"STRONG",{});var omt=s(jge);QDo=r(omt,"xlm"),omt.forEach(t),HDo=r(hxe," \u2014 "),UO=n(hxe,"A",{href:!0});var rmt=s(UO);UDo=r(rmt,"XLMForTokenClassification"),rmt.forEach(t),JDo=r(hxe," (XLM model)"),hxe.forEach(t),YDo=i(J),Qv=n(J,"LI",{});var pxe=s(Qv);Dge=n(pxe,"STRONG",{});var tmt=s(Dge);KDo=r(tmt,"xlm-roberta"),tmt.forEach(t),ZDo=r(pxe," \u2014 "),JO=n(pxe,"A",{href:!0});var amt=s(JO);eGo=r(amt,"XLMRobertaForTokenClassification"),amt.forEach(t),oGo=r(pxe," (XLM-RoBERTa model)"),pxe.forEach(t),rGo=i(J),Hv=n(J,"LI",{});var _xe=s(Hv);Gge=n(_xe,"STRONG",{});var nmt=s(Gge);tGo=r(nmt,"xlm-roberta-xl"),nmt.forEach(t),aGo=r(_xe," \u2014 "),YO=n(_xe,"A",{href:!0});var smt=s(YO);nGo=r(smt,"XLMRobertaXLForTokenClassification"),smt.forEach(t),sGo=r(_xe," (XLM-RoBERTa-XL model)"),_xe.forEach(t),lGo=i(J),Uv=n(J,"LI",{});var uxe=s(Uv);Oge=n(uxe,"STRONG",{});var lmt=s(Oge);iGo=r(lmt,"xlnet"),lmt.forEach(t),dGo=r(uxe," \u2014 "),KO=n(uxe,"A",{href:!0});var imt=s(KO);cGo=r(imt,"XLNetForTokenClassification"),imt.forEach(t),fGo=r(uxe," (XLNet model)"),uxe.forEach(t),mGo=i(J),Jv=n(J,"LI",{});var bxe=s(Jv);Vge=n(bxe,"STRONG",{});var dmt=s(Vge);gGo=r(dmt,"yoso"),dmt.forEach(t),hGo=r(bxe," \u2014 "),ZO=n(bxe,"A",{href:!0});var cmt=s(ZO);pGo=r(cmt,"YosoForTokenClassification"),cmt.forEach(t),_Go=r(bxe," (YOSO model)"),bxe.forEach(t),J.forEach(t),uGo=i(da),Yv=n(da,"P",{});var vxe=s(Yv);bGo=r(vxe,"The model is set in evaluation mode by default using "),Xge=n(vxe,"CODE",{});var fmt=s(Xge);vGo=r(fmt,"model.eval()"),fmt.forEach(t),FGo=r(vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(vxe,"CODE",{});var mmt=s(zge);TGo=r(mmt,"model.train()"),mmt.forEach(t),vxe.forEach(t),MGo=i(da),T(Kv.$$.fragment,da),da.forEach(t),Us.forEach(t),Pqe=i(f),Yi=n(f,"H2",{class:!0});var Nje=s(Yi);Zv=n(Nje,"A",{id:!0,class:!0,href:!0});var gmt=s(Zv);Wge=n(gmt,"SPAN",{});var hmt=s(Wge);T(SA.$$.fragment,hmt),hmt.forEach(t),gmt.forEach(t),EGo=i(Nje),Qge=n(Nje,"SPAN",{});var pmt=s(Qge);CGo=r(pmt,"AutoModelForQuestionAnswering"),pmt.forEach(t),Nje.forEach(t),Bqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(RA.$$.fragment,Js),wGo=i(Js),Ki=n(Js,"P",{});var lZ=s(Ki);AGo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eV=n(lZ,"A",{href:!0});var _mt=s(eV);yGo=r(_mt,"from_pretrained()"),_mt.forEach(t),LGo=r(lZ," class method or the "),oV=n(lZ,"A",{href:!0});var umt=s(oV);xGo=r(umt,"from_config()"),umt.forEach(t),$Go=r(lZ,` class
method.`),lZ.forEach(t),kGo=i(Js),PA=n(Js,"P",{});var jje=s(PA);SGo=r(jje,"This class cannot be instantiated directly using "),Hge=n(jje,"CODE",{});var bmt=s(Hge);RGo=r(bmt,"__init__()"),bmt.forEach(t),PGo=r(jje," (throws an error)."),jje.forEach(t),BGo=i(Js),mt=n(Js,"DIV",{class:!0});var q3=s(mt);T(BA.$$.fragment,q3),IGo=i(q3),Uge=n(q3,"P",{});var vmt=s(Uge);qGo=r(vmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vmt.forEach(t),NGo=i(q3),Zi=n(q3,"P",{});var iZ=s(Zi);jGo=r(iZ,`Note:
Loading a model from its configuration file does `),Jge=n(iZ,"STRONG",{});var Fmt=s(Jge);DGo=r(Fmt,"not"),Fmt.forEach(t),GGo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(iZ,"A",{href:!0});var Tmt=s(rV);OGo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),VGo=r(iZ," to load the model weights."),iZ.forEach(t),XGo=i(q3),T(eF.$$.fragment,q3),q3.forEach(t),zGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(IA.$$.fragment,ca),WGo=i(ca),Yge=n(ca,"P",{});var Mmt=s(Yge);QGo=r(Mmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mmt.forEach(t),HGo=i(ca),qa=n(ca,"P",{});var N3=s(qa);UGo=r(N3,"The model class to instantiate is selected based on the "),Kge=n(N3,"CODE",{});var Emt=s(Kge);JGo=r(Emt,"model_type"),Emt.forEach(t),YGo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Zge=n(N3,"CODE",{});var Cmt=s(Zge);KGo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),ZGo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(N3,"CODE",{});var wmt=s(ehe);eOo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),oOo=r(N3,":"),N3.forEach(t),rOo=i(ca),V=n(ca,"UL",{});var X=s(V);oF=n(X,"LI",{});var Fxe=s(oF);ohe=n(Fxe,"STRONG",{});var Amt=s(ohe);tOo=r(Amt,"albert"),Amt.forEach(t),aOo=r(Fxe," \u2014 "),tV=n(Fxe,"A",{href:!0});var ymt=s(tV);nOo=r(ymt,"AlbertForQuestionAnswering"),ymt.forEach(t),sOo=r(Fxe," (ALBERT model)"),Fxe.forEach(t),lOo=i(X),rF=n(X,"LI",{});var Txe=s(rF);rhe=n(Txe,"STRONG",{});var Lmt=s(rhe);iOo=r(Lmt,"bart"),Lmt.forEach(t),dOo=r(Txe," \u2014 "),aV=n(Txe,"A",{href:!0});var xmt=s(aV);cOo=r(xmt,"BartForQuestionAnswering"),xmt.forEach(t),fOo=r(Txe," (BART model)"),Txe.forEach(t),mOo=i(X),tF=n(X,"LI",{});var Mxe=s(tF);the=n(Mxe,"STRONG",{});var $mt=s(the);gOo=r($mt,"bert"),$mt.forEach(t),hOo=r(Mxe," \u2014 "),nV=n(Mxe,"A",{href:!0});var kmt=s(nV);pOo=r(kmt,"BertForQuestionAnswering"),kmt.forEach(t),_Oo=r(Mxe," (BERT model)"),Mxe.forEach(t),uOo=i(X),aF=n(X,"LI",{});var Exe=s(aF);ahe=n(Exe,"STRONG",{});var Smt=s(ahe);bOo=r(Smt,"big_bird"),Smt.forEach(t),vOo=r(Exe," \u2014 "),sV=n(Exe,"A",{href:!0});var Rmt=s(sV);FOo=r(Rmt,"BigBirdForQuestionAnswering"),Rmt.forEach(t),TOo=r(Exe," (BigBird model)"),Exe.forEach(t),MOo=i(X),nF=n(X,"LI",{});var Cxe=s(nF);nhe=n(Cxe,"STRONG",{});var Pmt=s(nhe);EOo=r(Pmt,"bigbird_pegasus"),Pmt.forEach(t),COo=r(Cxe," \u2014 "),lV=n(Cxe,"A",{href:!0});var Bmt=s(lV);wOo=r(Bmt,"BigBirdPegasusForQuestionAnswering"),Bmt.forEach(t),AOo=r(Cxe," (BigBirdPegasus model)"),Cxe.forEach(t),yOo=i(X),sF=n(X,"LI",{});var wxe=s(sF);she=n(wxe,"STRONG",{});var Imt=s(she);LOo=r(Imt,"camembert"),Imt.forEach(t),xOo=r(wxe," \u2014 "),iV=n(wxe,"A",{href:!0});var qmt=s(iV);$Oo=r(qmt,"CamembertForQuestionAnswering"),qmt.forEach(t),kOo=r(wxe," (CamemBERT model)"),wxe.forEach(t),SOo=i(X),lF=n(X,"LI",{});var Axe=s(lF);lhe=n(Axe,"STRONG",{});var Nmt=s(lhe);ROo=r(Nmt,"canine"),Nmt.forEach(t),POo=r(Axe," \u2014 "),dV=n(Axe,"A",{href:!0});var jmt=s(dV);BOo=r(jmt,"CanineForQuestionAnswering"),jmt.forEach(t),IOo=r(Axe," (Canine model)"),Axe.forEach(t),qOo=i(X),iF=n(X,"LI",{});var yxe=s(iF);ihe=n(yxe,"STRONG",{});var Dmt=s(ihe);NOo=r(Dmt,"convbert"),Dmt.forEach(t),jOo=r(yxe," \u2014 "),cV=n(yxe,"A",{href:!0});var Gmt=s(cV);DOo=r(Gmt,"ConvBertForQuestionAnswering"),Gmt.forEach(t),GOo=r(yxe," (ConvBERT model)"),yxe.forEach(t),OOo=i(X),dF=n(X,"LI",{});var Lxe=s(dF);dhe=n(Lxe,"STRONG",{});var Omt=s(dhe);VOo=r(Omt,"data2vec-text"),Omt.forEach(t),XOo=r(Lxe," \u2014 "),fV=n(Lxe,"A",{href:!0});var Vmt=s(fV);zOo=r(Vmt,"Data2VecTextForQuestionAnswering"),Vmt.forEach(t),WOo=r(Lxe," (Data2VecText model)"),Lxe.forEach(t),QOo=i(X),cF=n(X,"LI",{});var xxe=s(cF);che=n(xxe,"STRONG",{});var Xmt=s(che);HOo=r(Xmt,"deberta"),Xmt.forEach(t),UOo=r(xxe," \u2014 "),mV=n(xxe,"A",{href:!0});var zmt=s(mV);JOo=r(zmt,"DebertaForQuestionAnswering"),zmt.forEach(t),YOo=r(xxe," (DeBERTa model)"),xxe.forEach(t),KOo=i(X),fF=n(X,"LI",{});var $xe=s(fF);fhe=n($xe,"STRONG",{});var Wmt=s(fhe);ZOo=r(Wmt,"deberta-v2"),Wmt.forEach(t),eVo=r($xe," \u2014 "),gV=n($xe,"A",{href:!0});var Qmt=s(gV);oVo=r(Qmt,"DebertaV2ForQuestionAnswering"),Qmt.forEach(t),rVo=r($xe," (DeBERTa-v2 model)"),$xe.forEach(t),tVo=i(X),mF=n(X,"LI",{});var kxe=s(mF);mhe=n(kxe,"STRONG",{});var Hmt=s(mhe);aVo=r(Hmt,"distilbert"),Hmt.forEach(t),nVo=r(kxe," \u2014 "),hV=n(kxe,"A",{href:!0});var Umt=s(hV);sVo=r(Umt,"DistilBertForQuestionAnswering"),Umt.forEach(t),lVo=r(kxe," (DistilBERT model)"),kxe.forEach(t),iVo=i(X),gF=n(X,"LI",{});var Sxe=s(gF);ghe=n(Sxe,"STRONG",{});var Jmt=s(ghe);dVo=r(Jmt,"electra"),Jmt.forEach(t),cVo=r(Sxe," \u2014 "),pV=n(Sxe,"A",{href:!0});var Ymt=s(pV);fVo=r(Ymt,"ElectraForQuestionAnswering"),Ymt.forEach(t),mVo=r(Sxe," (ELECTRA model)"),Sxe.forEach(t),gVo=i(X),hF=n(X,"LI",{});var Rxe=s(hF);hhe=n(Rxe,"STRONG",{});var Kmt=s(hhe);hVo=r(Kmt,"flaubert"),Kmt.forEach(t),pVo=r(Rxe," \u2014 "),_V=n(Rxe,"A",{href:!0});var Zmt=s(_V);_Vo=r(Zmt,"FlaubertForQuestionAnsweringSimple"),Zmt.forEach(t),uVo=r(Rxe," (FlauBERT model)"),Rxe.forEach(t),bVo=i(X),pF=n(X,"LI",{});var Pxe=s(pF);phe=n(Pxe,"STRONG",{});var egt=s(phe);vVo=r(egt,"fnet"),egt.forEach(t),FVo=r(Pxe," \u2014 "),uV=n(Pxe,"A",{href:!0});var ogt=s(uV);TVo=r(ogt,"FNetForQuestionAnswering"),ogt.forEach(t),MVo=r(Pxe," (FNet model)"),Pxe.forEach(t),EVo=i(X),_F=n(X,"LI",{});var Bxe=s(_F);_he=n(Bxe,"STRONG",{});var rgt=s(_he);CVo=r(rgt,"funnel"),rgt.forEach(t),wVo=r(Bxe," \u2014 "),bV=n(Bxe,"A",{href:!0});var tgt=s(bV);AVo=r(tgt,"FunnelForQuestionAnswering"),tgt.forEach(t),yVo=r(Bxe," (Funnel Transformer model)"),Bxe.forEach(t),LVo=i(X),uF=n(X,"LI",{});var Ixe=s(uF);uhe=n(Ixe,"STRONG",{});var agt=s(uhe);xVo=r(agt,"gptj"),agt.forEach(t),$Vo=r(Ixe," \u2014 "),vV=n(Ixe,"A",{href:!0});var ngt=s(vV);kVo=r(ngt,"GPTJForQuestionAnswering"),ngt.forEach(t),SVo=r(Ixe," (GPT-J model)"),Ixe.forEach(t),RVo=i(X),bF=n(X,"LI",{});var qxe=s(bF);bhe=n(qxe,"STRONG",{});var sgt=s(bhe);PVo=r(sgt,"ibert"),sgt.forEach(t),BVo=r(qxe," \u2014 "),FV=n(qxe,"A",{href:!0});var lgt=s(FV);IVo=r(lgt,"IBertForQuestionAnswering"),lgt.forEach(t),qVo=r(qxe," (I-BERT model)"),qxe.forEach(t),NVo=i(X),vF=n(X,"LI",{});var Nxe=s(vF);vhe=n(Nxe,"STRONG",{});var igt=s(vhe);jVo=r(igt,"layoutlmv2"),igt.forEach(t),DVo=r(Nxe," \u2014 "),TV=n(Nxe,"A",{href:!0});var dgt=s(TV);GVo=r(dgt,"LayoutLMv2ForQuestionAnswering"),dgt.forEach(t),OVo=r(Nxe," (LayoutLMv2 model)"),Nxe.forEach(t),VVo=i(X),FF=n(X,"LI",{});var jxe=s(FF);Fhe=n(jxe,"STRONG",{});var cgt=s(Fhe);XVo=r(cgt,"led"),cgt.forEach(t),zVo=r(jxe," \u2014 "),MV=n(jxe,"A",{href:!0});var fgt=s(MV);WVo=r(fgt,"LEDForQuestionAnswering"),fgt.forEach(t),QVo=r(jxe," (LED model)"),jxe.forEach(t),HVo=i(X),TF=n(X,"LI",{});var Dxe=s(TF);The=n(Dxe,"STRONG",{});var mgt=s(The);UVo=r(mgt,"longformer"),mgt.forEach(t),JVo=r(Dxe," \u2014 "),EV=n(Dxe,"A",{href:!0});var ggt=s(EV);YVo=r(ggt,"LongformerForQuestionAnswering"),ggt.forEach(t),KVo=r(Dxe," (Longformer model)"),Dxe.forEach(t),ZVo=i(X),MF=n(X,"LI",{});var Gxe=s(MF);Mhe=n(Gxe,"STRONG",{});var hgt=s(Mhe);eXo=r(hgt,"lxmert"),hgt.forEach(t),oXo=r(Gxe," \u2014 "),CV=n(Gxe,"A",{href:!0});var pgt=s(CV);rXo=r(pgt,"LxmertForQuestionAnswering"),pgt.forEach(t),tXo=r(Gxe," (LXMERT model)"),Gxe.forEach(t),aXo=i(X),EF=n(X,"LI",{});var Oxe=s(EF);Ehe=n(Oxe,"STRONG",{});var _gt=s(Ehe);nXo=r(_gt,"mbart"),_gt.forEach(t),sXo=r(Oxe," \u2014 "),wV=n(Oxe,"A",{href:!0});var ugt=s(wV);lXo=r(ugt,"MBartForQuestionAnswering"),ugt.forEach(t),iXo=r(Oxe," (mBART model)"),Oxe.forEach(t),dXo=i(X),CF=n(X,"LI",{});var Vxe=s(CF);Che=n(Vxe,"STRONG",{});var bgt=s(Che);cXo=r(bgt,"megatron-bert"),bgt.forEach(t),fXo=r(Vxe," \u2014 "),AV=n(Vxe,"A",{href:!0});var vgt=s(AV);mXo=r(vgt,"MegatronBertForQuestionAnswering"),vgt.forEach(t),gXo=r(Vxe," (MegatronBert model)"),Vxe.forEach(t),hXo=i(X),wF=n(X,"LI",{});var Xxe=s(wF);whe=n(Xxe,"STRONG",{});var Fgt=s(whe);pXo=r(Fgt,"mobilebert"),Fgt.forEach(t),_Xo=r(Xxe," \u2014 "),yV=n(Xxe,"A",{href:!0});var Tgt=s(yV);uXo=r(Tgt,"MobileBertForQuestionAnswering"),Tgt.forEach(t),bXo=r(Xxe," (MobileBERT model)"),Xxe.forEach(t),vXo=i(X),AF=n(X,"LI",{});var zxe=s(AF);Ahe=n(zxe,"STRONG",{});var Mgt=s(Ahe);FXo=r(Mgt,"mpnet"),Mgt.forEach(t),TXo=r(zxe," \u2014 "),LV=n(zxe,"A",{href:!0});var Egt=s(LV);MXo=r(Egt,"MPNetForQuestionAnswering"),Egt.forEach(t),EXo=r(zxe," (MPNet model)"),zxe.forEach(t),CXo=i(X),yF=n(X,"LI",{});var Wxe=s(yF);yhe=n(Wxe,"STRONG",{});var Cgt=s(yhe);wXo=r(Cgt,"nystromformer"),Cgt.forEach(t),AXo=r(Wxe," \u2014 "),xV=n(Wxe,"A",{href:!0});var wgt=s(xV);yXo=r(wgt,"NystromformerForQuestionAnswering"),wgt.forEach(t),LXo=r(Wxe," (Nystromformer model)"),Wxe.forEach(t),xXo=i(X),LF=n(X,"LI",{});var Qxe=s(LF);Lhe=n(Qxe,"STRONG",{});var Agt=s(Lhe);$Xo=r(Agt,"qdqbert"),Agt.forEach(t),kXo=r(Qxe," \u2014 "),$V=n(Qxe,"A",{href:!0});var ygt=s($V);SXo=r(ygt,"QDQBertForQuestionAnswering"),ygt.forEach(t),RXo=r(Qxe," (QDQBert model)"),Qxe.forEach(t),PXo=i(X),xF=n(X,"LI",{});var Hxe=s(xF);xhe=n(Hxe,"STRONG",{});var Lgt=s(xhe);BXo=r(Lgt,"reformer"),Lgt.forEach(t),IXo=r(Hxe," \u2014 "),kV=n(Hxe,"A",{href:!0});var xgt=s(kV);qXo=r(xgt,"ReformerForQuestionAnswering"),xgt.forEach(t),NXo=r(Hxe," (Reformer model)"),Hxe.forEach(t),jXo=i(X),$F=n(X,"LI",{});var Uxe=s($F);$he=n(Uxe,"STRONG",{});var $gt=s($he);DXo=r($gt,"rembert"),$gt.forEach(t),GXo=r(Uxe," \u2014 "),SV=n(Uxe,"A",{href:!0});var kgt=s(SV);OXo=r(kgt,"RemBertForQuestionAnswering"),kgt.forEach(t),VXo=r(Uxe," (RemBERT model)"),Uxe.forEach(t),XXo=i(X),kF=n(X,"LI",{});var Jxe=s(kF);khe=n(Jxe,"STRONG",{});var Sgt=s(khe);zXo=r(Sgt,"roberta"),Sgt.forEach(t),WXo=r(Jxe," \u2014 "),RV=n(Jxe,"A",{href:!0});var Rgt=s(RV);QXo=r(Rgt,"RobertaForQuestionAnswering"),Rgt.forEach(t),HXo=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),UXo=i(X),SF=n(X,"LI",{});var Yxe=s(SF);She=n(Yxe,"STRONG",{});var Pgt=s(She);JXo=r(Pgt,"roformer"),Pgt.forEach(t),YXo=r(Yxe," \u2014 "),PV=n(Yxe,"A",{href:!0});var Bgt=s(PV);KXo=r(Bgt,"RoFormerForQuestionAnswering"),Bgt.forEach(t),ZXo=r(Yxe," (RoFormer model)"),Yxe.forEach(t),ezo=i(X),RF=n(X,"LI",{});var Kxe=s(RF);Rhe=n(Kxe,"STRONG",{});var Igt=s(Rhe);ozo=r(Igt,"splinter"),Igt.forEach(t),rzo=r(Kxe," \u2014 "),BV=n(Kxe,"A",{href:!0});var qgt=s(BV);tzo=r(qgt,"SplinterForQuestionAnswering"),qgt.forEach(t),azo=r(Kxe," (Splinter model)"),Kxe.forEach(t),nzo=i(X),PF=n(X,"LI",{});var Zxe=s(PF);Phe=n(Zxe,"STRONG",{});var Ngt=s(Phe);szo=r(Ngt,"squeezebert"),Ngt.forEach(t),lzo=r(Zxe," \u2014 "),IV=n(Zxe,"A",{href:!0});var jgt=s(IV);izo=r(jgt,"SqueezeBertForQuestionAnswering"),jgt.forEach(t),dzo=r(Zxe," (SqueezeBERT model)"),Zxe.forEach(t),czo=i(X),BF=n(X,"LI",{});var e$e=s(BF);Bhe=n(e$e,"STRONG",{});var Dgt=s(Bhe);fzo=r(Dgt,"xlm"),Dgt.forEach(t),mzo=r(e$e," \u2014 "),qV=n(e$e,"A",{href:!0});var Ggt=s(qV);gzo=r(Ggt,"XLMForQuestionAnsweringSimple"),Ggt.forEach(t),hzo=r(e$e," (XLM model)"),e$e.forEach(t),pzo=i(X),IF=n(X,"LI",{});var o$e=s(IF);Ihe=n(o$e,"STRONG",{});var Ogt=s(Ihe);_zo=r(Ogt,"xlm-roberta"),Ogt.forEach(t),uzo=r(o$e," \u2014 "),NV=n(o$e,"A",{href:!0});var Vgt=s(NV);bzo=r(Vgt,"XLMRobertaForQuestionAnswering"),Vgt.forEach(t),vzo=r(o$e," (XLM-RoBERTa model)"),o$e.forEach(t),Fzo=i(X),qF=n(X,"LI",{});var r$e=s(qF);qhe=n(r$e,"STRONG",{});var Xgt=s(qhe);Tzo=r(Xgt,"xlm-roberta-xl"),Xgt.forEach(t),Mzo=r(r$e," \u2014 "),jV=n(r$e,"A",{href:!0});var zgt=s(jV);Ezo=r(zgt,"XLMRobertaXLForQuestionAnswering"),zgt.forEach(t),Czo=r(r$e," (XLM-RoBERTa-XL model)"),r$e.forEach(t),wzo=i(X),NF=n(X,"LI",{});var t$e=s(NF);Nhe=n(t$e,"STRONG",{});var Wgt=s(Nhe);Azo=r(Wgt,"xlnet"),Wgt.forEach(t),yzo=r(t$e," \u2014 "),DV=n(t$e,"A",{href:!0});var Qgt=s(DV);Lzo=r(Qgt,"XLNetForQuestionAnsweringSimple"),Qgt.forEach(t),xzo=r(t$e," (XLNet model)"),t$e.forEach(t),$zo=i(X),jF=n(X,"LI",{});var a$e=s(jF);jhe=n(a$e,"STRONG",{});var Hgt=s(jhe);kzo=r(Hgt,"yoso"),Hgt.forEach(t),Szo=r(a$e," \u2014 "),GV=n(a$e,"A",{href:!0});var Ugt=s(GV);Rzo=r(Ugt,"YosoForQuestionAnswering"),Ugt.forEach(t),Pzo=r(a$e," (YOSO model)"),a$e.forEach(t),X.forEach(t),Bzo=i(ca),DF=n(ca,"P",{});var n$e=s(DF);Izo=r(n$e,"The model is set in evaluation mode by default using "),Dhe=n(n$e,"CODE",{});var Jgt=s(Dhe);qzo=r(Jgt,"model.eval()"),Jgt.forEach(t),Nzo=r(n$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(n$e,"CODE",{});var Ygt=s(Ghe);jzo=r(Ygt,"model.train()"),Ygt.forEach(t),n$e.forEach(t),Dzo=i(ca),T(GF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Iqe=i(f),ed=n(f,"H2",{class:!0});var Dje=s(ed);OF=n(Dje,"A",{id:!0,class:!0,href:!0});var Kgt=s(OF);Ohe=n(Kgt,"SPAN",{});var Zgt=s(Ohe);T(qA.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),Gzo=i(Dje),Vhe=n(Dje,"SPAN",{});var eht=s(Vhe);Ozo=r(eht,"AutoModelForTableQuestionAnswering"),eht.forEach(t),Dje.forEach(t),qqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(NA.$$.fragment,Ys),Vzo=i(Ys),od=n(Ys,"P",{});var dZ=s(od);Xzo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OV=n(dZ,"A",{href:!0});var oht=s(OV);zzo=r(oht,"from_pretrained()"),oht.forEach(t),Wzo=r(dZ," class method or the "),VV=n(dZ,"A",{href:!0});var rht=s(VV);Qzo=r(rht,"from_config()"),rht.forEach(t),Hzo=r(dZ,` class
method.`),dZ.forEach(t),Uzo=i(Ys),jA=n(Ys,"P",{});var Gje=s(jA);Jzo=r(Gje,"This class cannot be instantiated directly using "),Xhe=n(Gje,"CODE",{});var tht=s(Xhe);Yzo=r(tht,"__init__()"),tht.forEach(t),Kzo=r(Gje," (throws an error)."),Gje.forEach(t),Zzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var j3=s(gt);T(DA.$$.fragment,j3),eWo=i(j3),zhe=n(j3,"P",{});var aht=s(zhe);oWo=r(aht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aht.forEach(t),rWo=i(j3),rd=n(j3,"P",{});var cZ=s(rd);tWo=r(cZ,`Note:
Loading a model from its configuration file does `),Whe=n(cZ,"STRONG",{});var nht=s(Whe);aWo=r(nht,"not"),nht.forEach(t),nWo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(cZ,"A",{href:!0});var sht=s(XV);sWo=r(sht,"from_pretrained()"),sht.forEach(t),lWo=r(cZ," to load the model weights."),cZ.forEach(t),iWo=i(j3),T(VF.$$.fragment,j3),j3.forEach(t),dWo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(GA.$$.fragment,fa),cWo=i(fa),Qhe=n(fa,"P",{});var lht=s(Qhe);fWo=r(lht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lht.forEach(t),mWo=i(fa),Na=n(fa,"P",{});var D3=s(Na);gWo=r(D3,"The model class to instantiate is selected based on the "),Hhe=n(D3,"CODE",{});var iht=s(Hhe);hWo=r(iht,"model_type"),iht.forEach(t),pWo=r(D3,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(D3,"CODE",{});var dht=s(Uhe);_Wo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),uWo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(D3,"CODE",{});var cht=s(Jhe);bWo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),vWo=r(D3,":"),D3.forEach(t),FWo=i(fa),Yhe=n(fa,"UL",{});var fht=s(Yhe);XF=n(fht,"LI",{});var s$e=s(XF);Khe=n(s$e,"STRONG",{});var mht=s(Khe);TWo=r(mht,"tapas"),mht.forEach(t),MWo=r(s$e," \u2014 "),zV=n(s$e,"A",{href:!0});var ght=s(zV);EWo=r(ght,"TapasForQuestionAnswering"),ght.forEach(t),CWo=r(s$e," (TAPAS model)"),s$e.forEach(t),fht.forEach(t),wWo=i(fa),zF=n(fa,"P",{});var l$e=s(zF);AWo=r(l$e,"The model is set in evaluation mode by default using "),Zhe=n(l$e,"CODE",{});var hht=s(Zhe);yWo=r(hht,"model.eval()"),hht.forEach(t),LWo=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(l$e,"CODE",{});var pht=s(epe);xWo=r(pht,"model.train()"),pht.forEach(t),l$e.forEach(t),$Wo=i(fa),T(WF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Nqe=i(f),td=n(f,"H2",{class:!0});var Oje=s(td);QF=n(Oje,"A",{id:!0,class:!0,href:!0});var _ht=s(QF);ope=n(_ht,"SPAN",{});var uht=s(ope);T(OA.$$.fragment,uht),uht.forEach(t),_ht.forEach(t),kWo=i(Oje),rpe=n(Oje,"SPAN",{});var bht=s(rpe);SWo=r(bht,"AutoModelForImageClassification"),bht.forEach(t),Oje.forEach(t),jqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(VA.$$.fragment,Ks),RWo=i(Ks),ad=n(Ks,"P",{});var fZ=s(ad);PWo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=n(fZ,"A",{href:!0});var vht=s(WV);BWo=r(vht,"from_pretrained()"),vht.forEach(t),IWo=r(fZ," class method or the "),QV=n(fZ,"A",{href:!0});var Fht=s(QV);qWo=r(Fht,"from_config()"),Fht.forEach(t),NWo=r(fZ,` class
method.`),fZ.forEach(t),jWo=i(Ks),XA=n(Ks,"P",{});var Vje=s(XA);DWo=r(Vje,"This class cannot be instantiated directly using "),tpe=n(Vje,"CODE",{});var Tht=s(tpe);GWo=r(Tht,"__init__()"),Tht.forEach(t),OWo=r(Vje," (throws an error)."),Vje.forEach(t),VWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var G3=s(ht);T(zA.$$.fragment,G3),XWo=i(G3),ape=n(G3,"P",{});var Mht=s(ape);zWo=r(Mht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mht.forEach(t),WWo=i(G3),nd=n(G3,"P",{});var mZ=s(nd);QWo=r(mZ,`Note:
Loading a model from its configuration file does `),npe=n(mZ,"STRONG",{});var Eht=s(npe);HWo=r(Eht,"not"),Eht.forEach(t),UWo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(mZ,"A",{href:!0});var Cht=s(HV);JWo=r(Cht,"from_pretrained()"),Cht.forEach(t),YWo=r(mZ," to load the model weights."),mZ.forEach(t),KWo=i(G3),T(HF.$$.fragment,G3),G3.forEach(t),ZWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(WA.$$.fragment,ma),eQo=i(ma),spe=n(ma,"P",{});var wht=s(spe);oQo=r(wht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wht.forEach(t),rQo=i(ma),ja=n(ma,"P",{});var O3=s(ja);tQo=r(O3,"The model class to instantiate is selected based on the "),lpe=n(O3,"CODE",{});var Aht=s(lpe);aQo=r(Aht,"model_type"),Aht.forEach(t),nQo=r(O3,` property of the config object (either
passed as an argument or loaded from `),ipe=n(O3,"CODE",{});var yht=s(ipe);sQo=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),lQo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(O3,"CODE",{});var Lht=s(dpe);iQo=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),dQo=r(O3,":"),O3.forEach(t),cQo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);UF=n(Te,"LI",{});var i$e=s(UF);cpe=n(i$e,"STRONG",{});var xht=s(cpe);fQo=r(xht,"beit"),xht.forEach(t),mQo=r(i$e," \u2014 "),UV=n(i$e,"A",{href:!0});var $ht=s(UV);gQo=r($ht,"BeitForImageClassification"),$ht.forEach(t),hQo=r(i$e," (BEiT model)"),i$e.forEach(t),pQo=i(Te),JF=n(Te,"LI",{});var d$e=s(JF);fpe=n(d$e,"STRONG",{});var kht=s(fpe);_Qo=r(kht,"convnext"),kht.forEach(t),uQo=r(d$e," \u2014 "),JV=n(d$e,"A",{href:!0});var Sht=s(JV);bQo=r(Sht,"ConvNextForImageClassification"),Sht.forEach(t),vQo=r(d$e," (ConvNext model)"),d$e.forEach(t),FQo=i(Te),YF=n(Te,"LI",{});var c$e=s(YF);mpe=n(c$e,"STRONG",{});var Rht=s(mpe);TQo=r(Rht,"cvt"),Rht.forEach(t),MQo=r(c$e," \u2014 "),YV=n(c$e,"A",{href:!0});var Pht=s(YV);EQo=r(Pht,"CvtForImageClassification"),Pht.forEach(t),CQo=r(c$e," (CvT model)"),c$e.forEach(t),wQo=i(Te),KF=n(Te,"LI",{});var f$e=s(KF);gpe=n(f$e,"STRONG",{});var Bht=s(gpe);AQo=r(Bht,"data2vec-vision"),Bht.forEach(t),yQo=r(f$e," \u2014 "),KV=n(f$e,"A",{href:!0});var Iht=s(KV);LQo=r(Iht,"Data2VecVisionForImageClassification"),Iht.forEach(t),xQo=r(f$e," (Data2VecVision model)"),f$e.forEach(t),$Qo=i(Te),Ps=n(Te,"LI",{});var $$=s(Ps);hpe=n($$,"STRONG",{});var qht=s(hpe);kQo=r(qht,"deit"),qht.forEach(t),SQo=r($$," \u2014 "),ZV=n($$,"A",{href:!0});var Nht=s(ZV);RQo=r(Nht,"DeiTForImageClassification"),Nht.forEach(t),PQo=r($$," or "),eX=n($$,"A",{href:!0});var jht=s(eX);BQo=r(jht,"DeiTForImageClassificationWithTeacher"),jht.forEach(t),IQo=r($$," (DeiT model)"),$$.forEach(t),qQo=i(Te),ZF=n(Te,"LI",{});var m$e=s(ZF);ppe=n(m$e,"STRONG",{});var Dht=s(ppe);NQo=r(Dht,"imagegpt"),Dht.forEach(t),jQo=r(m$e," \u2014 "),oX=n(m$e,"A",{href:!0});var Ght=s(oX);DQo=r(Ght,"ImageGPTForImageClassification"),Ght.forEach(t),GQo=r(m$e," (ImageGPT model)"),m$e.forEach(t),OQo=i(Te),pt=n(Te,"LI",{});var gf=s(pt);_pe=n(gf,"STRONG",{});var Oht=s(_pe);VQo=r(Oht,"perceiver"),Oht.forEach(t),XQo=r(gf," \u2014 "),rX=n(gf,"A",{href:!0});var Vht=s(rX);zQo=r(Vht,"PerceiverForImageClassificationLearned"),Vht.forEach(t),WQo=r(gf," or "),tX=n(gf,"A",{href:!0});var Xht=s(tX);QQo=r(Xht,"PerceiverForImageClassificationFourier"),Xht.forEach(t),HQo=r(gf," or "),aX=n(gf,"A",{href:!0});var zht=s(aX);UQo=r(zht,"PerceiverForImageClassificationConvProcessing"),zht.forEach(t),JQo=r(gf," (Perceiver model)"),gf.forEach(t),YQo=i(Te),e6=n(Te,"LI",{});var g$e=s(e6);upe=n(g$e,"STRONG",{});var Wht=s(upe);KQo=r(Wht,"poolformer"),Wht.forEach(t),ZQo=r(g$e," \u2014 "),nX=n(g$e,"A",{href:!0});var Qht=s(nX);eHo=r(Qht,"PoolFormerForImageClassification"),Qht.forEach(t),oHo=r(g$e," (PoolFormer model)"),g$e.forEach(t),rHo=i(Te),o6=n(Te,"LI",{});var h$e=s(o6);bpe=n(h$e,"STRONG",{});var Hht=s(bpe);tHo=r(Hht,"regnet"),Hht.forEach(t),aHo=r(h$e," \u2014 "),sX=n(h$e,"A",{href:!0});var Uht=s(sX);nHo=r(Uht,"RegNetForImageClassification"),Uht.forEach(t),sHo=r(h$e," (RegNet model)"),h$e.forEach(t),lHo=i(Te),r6=n(Te,"LI",{});var p$e=s(r6);vpe=n(p$e,"STRONG",{});var Jht=s(vpe);iHo=r(Jht,"resnet"),Jht.forEach(t),dHo=r(p$e," \u2014 "),lX=n(p$e,"A",{href:!0});var Yht=s(lX);cHo=r(Yht,"ResNetForImageClassification"),Yht.forEach(t),fHo=r(p$e," (ResNet model)"),p$e.forEach(t),mHo=i(Te),t6=n(Te,"LI",{});var _$e=s(t6);Fpe=n(_$e,"STRONG",{});var Kht=s(Fpe);gHo=r(Kht,"segformer"),Kht.forEach(t),hHo=r(_$e," \u2014 "),iX=n(_$e,"A",{href:!0});var Zht=s(iX);pHo=r(Zht,"SegformerForImageClassification"),Zht.forEach(t),_Ho=r(_$e," (SegFormer model)"),_$e.forEach(t),uHo=i(Te),a6=n(Te,"LI",{});var u$e=s(a6);Tpe=n(u$e,"STRONG",{});var ept=s(Tpe);bHo=r(ept,"swin"),ept.forEach(t),vHo=r(u$e," \u2014 "),dX=n(u$e,"A",{href:!0});var opt=s(dX);FHo=r(opt,"SwinForImageClassification"),opt.forEach(t),THo=r(u$e," (Swin model)"),u$e.forEach(t),MHo=i(Te),n6=n(Te,"LI",{});var b$e=s(n6);Mpe=n(b$e,"STRONG",{});var rpt=s(Mpe);EHo=r(rpt,"van"),rpt.forEach(t),CHo=r(b$e," \u2014 "),cX=n(b$e,"A",{href:!0});var tpt=s(cX);wHo=r(tpt,"VanForImageClassification"),tpt.forEach(t),AHo=r(b$e," (VAN model)"),b$e.forEach(t),yHo=i(Te),s6=n(Te,"LI",{});var v$e=s(s6);Epe=n(v$e,"STRONG",{});var apt=s(Epe);LHo=r(apt,"vit"),apt.forEach(t),xHo=r(v$e," \u2014 "),fX=n(v$e,"A",{href:!0});var npt=s(fX);$Ho=r(npt,"ViTForImageClassification"),npt.forEach(t),kHo=r(v$e," (ViT model)"),v$e.forEach(t),Te.forEach(t),SHo=i(ma),l6=n(ma,"P",{});var F$e=s(l6);RHo=r(F$e,"The model is set in evaluation mode by default using "),Cpe=n(F$e,"CODE",{});var spt=s(Cpe);PHo=r(spt,"model.eval()"),spt.forEach(t),BHo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(F$e,"CODE",{});var lpt=s(wpe);IHo=r(lpt,"model.train()"),lpt.forEach(t),F$e.forEach(t),qHo=i(ma),T(i6.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Dqe=i(f),sd=n(f,"H2",{class:!0});var Xje=s(sd);d6=n(Xje,"A",{id:!0,class:!0,href:!0});var ipt=s(d6);Ape=n(ipt,"SPAN",{});var dpt=s(Ape);T(QA.$$.fragment,dpt),dpt.forEach(t),ipt.forEach(t),NHo=i(Xje),ype=n(Xje,"SPAN",{});var cpt=s(ype);jHo=r(cpt,"AutoModelForVision2Seq"),cpt.forEach(t),Xje.forEach(t),Gqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(HA.$$.fragment,Zs),DHo=i(Zs),ld=n(Zs,"P",{});var gZ=s(ld);GHo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mX=n(gZ,"A",{href:!0});var fpt=s(mX);OHo=r(fpt,"from_pretrained()"),fpt.forEach(t),VHo=r(gZ," class method or the "),gX=n(gZ,"A",{href:!0});var mpt=s(gX);XHo=r(mpt,"from_config()"),mpt.forEach(t),zHo=r(gZ,` class
method.`),gZ.forEach(t),WHo=i(Zs),UA=n(Zs,"P",{});var zje=s(UA);QHo=r(zje,"This class cannot be instantiated directly using "),Lpe=n(zje,"CODE",{});var gpt=s(Lpe);HHo=r(gpt,"__init__()"),gpt.forEach(t),UHo=r(zje," (throws an error)."),zje.forEach(t),JHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var V3=s(_t);T(JA.$$.fragment,V3),YHo=i(V3),xpe=n(V3,"P",{});var hpt=s(xpe);KHo=r(hpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hpt.forEach(t),ZHo=i(V3),id=n(V3,"P",{});var hZ=s(id);eUo=r(hZ,`Note:
Loading a model from its configuration file does `),$pe=n(hZ,"STRONG",{});var ppt=s($pe);oUo=r(ppt,"not"),ppt.forEach(t),rUo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(hZ,"A",{href:!0});var _pt=s(hX);tUo=r(_pt,"from_pretrained()"),_pt.forEach(t),aUo=r(hZ," to load the model weights."),hZ.forEach(t),nUo=i(V3),T(c6.$$.fragment,V3),V3.forEach(t),sUo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(YA.$$.fragment,ga),lUo=i(ga),kpe=n(ga,"P",{});var upt=s(kpe);iUo=r(upt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),upt.forEach(t),dUo=i(ga),Da=n(ga,"P",{});var X3=s(Da);cUo=r(X3,"The model class to instantiate is selected based on the "),Spe=n(X3,"CODE",{});var bpt=s(Spe);fUo=r(bpt,"model_type"),bpt.forEach(t),mUo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(X3,"CODE",{});var vpt=s(Rpe);gUo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),hUo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(X3,"CODE",{});var Fpt=s(Ppe);pUo=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),_Uo=r(X3,":"),X3.forEach(t),uUo=i(ga),Bpe=n(ga,"UL",{});var Tpt=s(Bpe);f6=n(Tpt,"LI",{});var T$e=s(f6);Ipe=n(T$e,"STRONG",{});var Mpt=s(Ipe);bUo=r(Mpt,"vision-encoder-decoder"),Mpt.forEach(t),vUo=r(T$e," \u2014 "),pX=n(T$e,"A",{href:!0});var Ept=s(pX);FUo=r(Ept,"VisionEncoderDecoderModel"),Ept.forEach(t),TUo=r(T$e," (Vision Encoder decoder model)"),T$e.forEach(t),Tpt.forEach(t),MUo=i(ga),m6=n(ga,"P",{});var M$e=s(m6);EUo=r(M$e,"The model is set in evaluation mode by default using "),qpe=n(M$e,"CODE",{});var Cpt=s(qpe);CUo=r(Cpt,"model.eval()"),Cpt.forEach(t),wUo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(M$e,"CODE",{});var wpt=s(Npe);AUo=r(wpt,"model.train()"),wpt.forEach(t),M$e.forEach(t),yUo=i(ga),T(g6.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Oqe=i(f),dd=n(f,"H2",{class:!0});var Wje=s(dd);h6=n(Wje,"A",{id:!0,class:!0,href:!0});var Apt=s(h6);jpe=n(Apt,"SPAN",{});var ypt=s(jpe);T(KA.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),LUo=i(Wje),Dpe=n(Wje,"SPAN",{});var Lpt=s(Dpe);xUo=r(Lpt,"AutoModelForAudioClassification"),Lpt.forEach(t),Wje.forEach(t),Vqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(ZA.$$.fragment,el),$Uo=i(el),cd=n(el,"P",{});var pZ=s(cd);kUo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_X=n(pZ,"A",{href:!0});var xpt=s(_X);SUo=r(xpt,"from_pretrained()"),xpt.forEach(t),RUo=r(pZ," class method or the "),uX=n(pZ,"A",{href:!0});var $pt=s(uX);PUo=r($pt,"from_config()"),$pt.forEach(t),BUo=r(pZ,` class
method.`),pZ.forEach(t),IUo=i(el),ey=n(el,"P",{});var Qje=s(ey);qUo=r(Qje,"This class cannot be instantiated directly using "),Gpe=n(Qje,"CODE",{});var kpt=s(Gpe);NUo=r(kpt,"__init__()"),kpt.forEach(t),jUo=r(Qje," (throws an error)."),Qje.forEach(t),DUo=i(el),ut=n(el,"DIV",{class:!0});var z3=s(ut);T(oy.$$.fragment,z3),GUo=i(z3),Ope=n(z3,"P",{});var Spt=s(Ope);OUo=r(Spt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Spt.forEach(t),VUo=i(z3),fd=n(z3,"P",{});var _Z=s(fd);XUo=r(_Z,`Note:
Loading a model from its configuration file does `),Vpe=n(_Z,"STRONG",{});var Rpt=s(Vpe);zUo=r(Rpt,"not"),Rpt.forEach(t),WUo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(_Z,"A",{href:!0});var Ppt=s(bX);QUo=r(Ppt,"from_pretrained()"),Ppt.forEach(t),HUo=r(_Z," to load the model weights."),_Z.forEach(t),UUo=i(z3),T(p6.$$.fragment,z3),z3.forEach(t),JUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(ry.$$.fragment,ha),YUo=i(ha),Xpe=n(ha,"P",{});var Bpt=s(Xpe);KUo=r(Bpt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Bpt.forEach(t),ZUo=i(ha),Ga=n(ha,"P",{});var W3=s(Ga);eJo=r(W3,"The model class to instantiate is selected based on the "),zpe=n(W3,"CODE",{});var Ipt=s(zpe);oJo=r(Ipt,"model_type"),Ipt.forEach(t),rJo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(W3,"CODE",{});var qpt=s(Wpe);tJo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),aJo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(W3,"CODE",{});var Npt=s(Qpe);nJo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),sJo=r(W3,":"),W3.forEach(t),lJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);_6=n(Oe,"LI",{});var E$e=s(_6);Hpe=n(E$e,"STRONG",{});var jpt=s(Hpe);iJo=r(jpt,"data2vec-audio"),jpt.forEach(t),dJo=r(E$e," \u2014 "),vX=n(E$e,"A",{href:!0});var Dpt=s(vX);cJo=r(Dpt,"Data2VecAudioForSequenceClassification"),Dpt.forEach(t),fJo=r(E$e," (Data2VecAudio model)"),E$e.forEach(t),mJo=i(Oe),u6=n(Oe,"LI",{});var C$e=s(u6);Upe=n(C$e,"STRONG",{});var Gpt=s(Upe);gJo=r(Gpt,"hubert"),Gpt.forEach(t),hJo=r(C$e," \u2014 "),FX=n(C$e,"A",{href:!0});var Opt=s(FX);pJo=r(Opt,"HubertForSequenceClassification"),Opt.forEach(t),_Jo=r(C$e," (Hubert model)"),C$e.forEach(t),uJo=i(Oe),b6=n(Oe,"LI",{});var w$e=s(b6);Jpe=n(w$e,"STRONG",{});var Vpt=s(Jpe);bJo=r(Vpt,"sew"),Vpt.forEach(t),vJo=r(w$e," \u2014 "),TX=n(w$e,"A",{href:!0});var Xpt=s(TX);FJo=r(Xpt,"SEWForSequenceClassification"),Xpt.forEach(t),TJo=r(w$e," (SEW model)"),w$e.forEach(t),MJo=i(Oe),v6=n(Oe,"LI",{});var A$e=s(v6);Ype=n(A$e,"STRONG",{});var zpt=s(Ype);EJo=r(zpt,"sew-d"),zpt.forEach(t),CJo=r(A$e," \u2014 "),MX=n(A$e,"A",{href:!0});var Wpt=s(MX);wJo=r(Wpt,"SEWDForSequenceClassification"),Wpt.forEach(t),AJo=r(A$e," (SEW-D model)"),A$e.forEach(t),yJo=i(Oe),F6=n(Oe,"LI",{});var y$e=s(F6);Kpe=n(y$e,"STRONG",{});var Qpt=s(Kpe);LJo=r(Qpt,"unispeech"),Qpt.forEach(t),xJo=r(y$e," \u2014 "),EX=n(y$e,"A",{href:!0});var Hpt=s(EX);$Jo=r(Hpt,"UniSpeechForSequenceClassification"),Hpt.forEach(t),kJo=r(y$e," (UniSpeech model)"),y$e.forEach(t),SJo=i(Oe),T6=n(Oe,"LI",{});var L$e=s(T6);Zpe=n(L$e,"STRONG",{});var Upt=s(Zpe);RJo=r(Upt,"unispeech-sat"),Upt.forEach(t),PJo=r(L$e," \u2014 "),CX=n(L$e,"A",{href:!0});var Jpt=s(CX);BJo=r(Jpt,"UniSpeechSatForSequenceClassification"),Jpt.forEach(t),IJo=r(L$e," (UniSpeechSat model)"),L$e.forEach(t),qJo=i(Oe),M6=n(Oe,"LI",{});var x$e=s(M6);e_e=n(x$e,"STRONG",{});var Ypt=s(e_e);NJo=r(Ypt,"wav2vec2"),Ypt.forEach(t),jJo=r(x$e," \u2014 "),wX=n(x$e,"A",{href:!0});var Kpt=s(wX);DJo=r(Kpt,"Wav2Vec2ForSequenceClassification"),Kpt.forEach(t),GJo=r(x$e," (Wav2Vec2 model)"),x$e.forEach(t),OJo=i(Oe),E6=n(Oe,"LI",{});var $$e=s(E6);o_e=n($$e,"STRONG",{});var Zpt=s(o_e);VJo=r(Zpt,"wav2vec2-conformer"),Zpt.forEach(t),XJo=r($$e," \u2014 "),AX=n($$e,"A",{href:!0});var e_t=s(AX);zJo=r(e_t,"Wav2Vec2ConformerForSequenceClassification"),e_t.forEach(t),WJo=r($$e," (Wav2Vec2-Conformer model)"),$$e.forEach(t),QJo=i(Oe),C6=n(Oe,"LI",{});var k$e=s(C6);r_e=n(k$e,"STRONG",{});var o_t=s(r_e);HJo=r(o_t,"wavlm"),o_t.forEach(t),UJo=r(k$e," \u2014 "),yX=n(k$e,"A",{href:!0});var r_t=s(yX);JJo=r(r_t,"WavLMForSequenceClassification"),r_t.forEach(t),YJo=r(k$e," (WavLM model)"),k$e.forEach(t),Oe.forEach(t),KJo=i(ha),w6=n(ha,"P",{});var S$e=s(w6);ZJo=r(S$e,"The model is set in evaluation mode by default using "),t_e=n(S$e,"CODE",{});var t_t=s(t_e);eYo=r(t_t,"model.eval()"),t_t.forEach(t),oYo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(S$e,"CODE",{});var a_t=s(a_e);rYo=r(a_t,"model.train()"),a_t.forEach(t),S$e.forEach(t),tYo=i(ha),T(A6.$$.fragment,ha),ha.forEach(t),el.forEach(t),Xqe=i(f),md=n(f,"H2",{class:!0});var Hje=s(md);y6=n(Hje,"A",{id:!0,class:!0,href:!0});var n_t=s(y6);n_e=n(n_t,"SPAN",{});var s_t=s(n_e);T(ty.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),aYo=i(Hje),s_e=n(Hje,"SPAN",{});var l_t=s(s_e);nYo=r(l_t,"AutoModelForAudioFrameClassification"),l_t.forEach(t),Hje.forEach(t),zqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(ay.$$.fragment,ol),sYo=i(ol),gd=n(ol,"P",{});var uZ=s(gd);lYo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LX=n(uZ,"A",{href:!0});var i_t=s(LX);iYo=r(i_t,"from_pretrained()"),i_t.forEach(t),dYo=r(uZ," class method or the "),xX=n(uZ,"A",{href:!0});var d_t=s(xX);cYo=r(d_t,"from_config()"),d_t.forEach(t),fYo=r(uZ,` class
method.`),uZ.forEach(t),mYo=i(ol),ny=n(ol,"P",{});var Uje=s(ny);gYo=r(Uje,"This class cannot be instantiated directly using "),l_e=n(Uje,"CODE",{});var c_t=s(l_e);hYo=r(c_t,"__init__()"),c_t.forEach(t),pYo=r(Uje," (throws an error)."),Uje.forEach(t),_Yo=i(ol),bt=n(ol,"DIV",{class:!0});var Q3=s(bt);T(sy.$$.fragment,Q3),uYo=i(Q3),i_e=n(Q3,"P",{});var f_t=s(i_e);bYo=r(f_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),f_t.forEach(t),vYo=i(Q3),hd=n(Q3,"P",{});var bZ=s(hd);FYo=r(bZ,`Note:
Loading a model from its configuration file does `),d_e=n(bZ,"STRONG",{});var m_t=s(d_e);TYo=r(m_t,"not"),m_t.forEach(t),MYo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(bZ,"A",{href:!0});var g_t=s($X);EYo=r(g_t,"from_pretrained()"),g_t.forEach(t),CYo=r(bZ," to load the model weights."),bZ.forEach(t),wYo=i(Q3),T(L6.$$.fragment,Q3),Q3.forEach(t),AYo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(ly.$$.fragment,pa),yYo=i(pa),c_e=n(pa,"P",{});var h_t=s(c_e);LYo=r(h_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),h_t.forEach(t),xYo=i(pa),Oa=n(pa,"P",{});var H3=s(Oa);$Yo=r(H3,"The model class to instantiate is selected based on the "),f_e=n(H3,"CODE",{});var p_t=s(f_e);kYo=r(p_t,"model_type"),p_t.forEach(t),SYo=r(H3,` property of the config object (either
passed as an argument or loaded from `),m_e=n(H3,"CODE",{});var __t=s(m_e);RYo=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),PYo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(H3,"CODE",{});var u_t=s(g_e);BYo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),IYo=r(H3,":"),H3.forEach(t),qYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);x6=n(rl,"LI",{});var R$e=s(x6);h_e=n(R$e,"STRONG",{});var b_t=s(h_e);NYo=r(b_t,"data2vec-audio"),b_t.forEach(t),jYo=r(R$e," \u2014 "),kX=n(R$e,"A",{href:!0});var v_t=s(kX);DYo=r(v_t,"Data2VecAudioForAudioFrameClassification"),v_t.forEach(t),GYo=r(R$e," (Data2VecAudio model)"),R$e.forEach(t),OYo=i(rl),$6=n(rl,"LI",{});var P$e=s($6);p_e=n(P$e,"STRONG",{});var F_t=s(p_e);VYo=r(F_t,"unispeech-sat"),F_t.forEach(t),XYo=r(P$e," \u2014 "),SX=n(P$e,"A",{href:!0});var T_t=s(SX);zYo=r(T_t,"UniSpeechSatForAudioFrameClassification"),T_t.forEach(t),WYo=r(P$e," (UniSpeechSat model)"),P$e.forEach(t),QYo=i(rl),k6=n(rl,"LI",{});var B$e=s(k6);__e=n(B$e,"STRONG",{});var M_t=s(__e);HYo=r(M_t,"wav2vec2"),M_t.forEach(t),UYo=r(B$e," \u2014 "),RX=n(B$e,"A",{href:!0});var E_t=s(RX);JYo=r(E_t,"Wav2Vec2ForAudioFrameClassification"),E_t.forEach(t),YYo=r(B$e," (Wav2Vec2 model)"),B$e.forEach(t),KYo=i(rl),S6=n(rl,"LI",{});var I$e=s(S6);u_e=n(I$e,"STRONG",{});var C_t=s(u_e);ZYo=r(C_t,"wav2vec2-conformer"),C_t.forEach(t),eKo=r(I$e," \u2014 "),PX=n(I$e,"A",{href:!0});var w_t=s(PX);oKo=r(w_t,"Wav2Vec2ConformerForAudioFrameClassification"),w_t.forEach(t),rKo=r(I$e," (Wav2Vec2-Conformer model)"),I$e.forEach(t),tKo=i(rl),R6=n(rl,"LI",{});var q$e=s(R6);b_e=n(q$e,"STRONG",{});var A_t=s(b_e);aKo=r(A_t,"wavlm"),A_t.forEach(t),nKo=r(q$e," \u2014 "),BX=n(q$e,"A",{href:!0});var y_t=s(BX);sKo=r(y_t,"WavLMForAudioFrameClassification"),y_t.forEach(t),lKo=r(q$e," (WavLM model)"),q$e.forEach(t),rl.forEach(t),iKo=i(pa),P6=n(pa,"P",{});var N$e=s(P6);dKo=r(N$e,"The model is set in evaluation mode by default using "),v_e=n(N$e,"CODE",{});var L_t=s(v_e);cKo=r(L_t,"model.eval()"),L_t.forEach(t),fKo=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(N$e,"CODE",{});var x_t=s(F_e);mKo=r(x_t,"model.train()"),x_t.forEach(t),N$e.forEach(t),gKo=i(pa),T(B6.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Wqe=i(f),pd=n(f,"H2",{class:!0});var Jje=s(pd);I6=n(Jje,"A",{id:!0,class:!0,href:!0});var $_t=s(I6);T_e=n($_t,"SPAN",{});var k_t=s(T_e);T(iy.$$.fragment,k_t),k_t.forEach(t),$_t.forEach(t),hKo=i(Jje),M_e=n(Jje,"SPAN",{});var S_t=s(M_e);pKo=r(S_t,"AutoModelForCTC"),S_t.forEach(t),Jje.forEach(t),Qqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(dy.$$.fragment,tl),_Ko=i(tl),_d=n(tl,"P",{});var vZ=s(_d);uKo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IX=n(vZ,"A",{href:!0});var R_t=s(IX);bKo=r(R_t,"from_pretrained()"),R_t.forEach(t),vKo=r(vZ," class method or the "),qX=n(vZ,"A",{href:!0});var P_t=s(qX);FKo=r(P_t,"from_config()"),P_t.forEach(t),TKo=r(vZ,` class
method.`),vZ.forEach(t),MKo=i(tl),cy=n(tl,"P",{});var Yje=s(cy);EKo=r(Yje,"This class cannot be instantiated directly using "),E_e=n(Yje,"CODE",{});var B_t=s(E_e);CKo=r(B_t,"__init__()"),B_t.forEach(t),wKo=r(Yje," (throws an error)."),Yje.forEach(t),AKo=i(tl),vt=n(tl,"DIV",{class:!0});var U3=s(vt);T(fy.$$.fragment,U3),yKo=i(U3),C_e=n(U3,"P",{});var I_t=s(C_e);LKo=r(I_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),I_t.forEach(t),xKo=i(U3),ud=n(U3,"P",{});var FZ=s(ud);$Ko=r(FZ,`Note:
Loading a model from its configuration file does `),w_e=n(FZ,"STRONG",{});var q_t=s(w_e);kKo=r(q_t,"not"),q_t.forEach(t),SKo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(FZ,"A",{href:!0});var N_t=s(NX);RKo=r(N_t,"from_pretrained()"),N_t.forEach(t),PKo=r(FZ," to load the model weights."),FZ.forEach(t),BKo=i(U3),T(q6.$$.fragment,U3),U3.forEach(t),IKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(my.$$.fragment,_a),qKo=i(_a),A_e=n(_a,"P",{});var j_t=s(A_e);NKo=r(j_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),j_t.forEach(t),jKo=i(_a),Va=n(_a,"P",{});var J3=s(Va);DKo=r(J3,"The model class to instantiate is selected based on the "),y_e=n(J3,"CODE",{});var D_t=s(y_e);GKo=r(D_t,"model_type"),D_t.forEach(t),OKo=r(J3,` property of the config object (either
passed as an argument or loaded from `),L_e=n(J3,"CODE",{});var G_t=s(L_e);VKo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),XKo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(J3,"CODE",{});var O_t=s(x_e);zKo=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),WKo=r(J3,":"),J3.forEach(t),QKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);N6=n(Ve,"LI",{});var j$e=s(N6);$_e=n(j$e,"STRONG",{});var V_t=s($_e);HKo=r(V_t,"data2vec-audio"),V_t.forEach(t),UKo=r(j$e," \u2014 "),jX=n(j$e,"A",{href:!0});var X_t=s(jX);JKo=r(X_t,"Data2VecAudioForCTC"),X_t.forEach(t),YKo=r(j$e," (Data2VecAudio model)"),j$e.forEach(t),KKo=i(Ve),j6=n(Ve,"LI",{});var D$e=s(j6);k_e=n(D$e,"STRONG",{});var z_t=s(k_e);ZKo=r(z_t,"hubert"),z_t.forEach(t),eZo=r(D$e," \u2014 "),DX=n(D$e,"A",{href:!0});var W_t=s(DX);oZo=r(W_t,"HubertForCTC"),W_t.forEach(t),rZo=r(D$e," (Hubert model)"),D$e.forEach(t),tZo=i(Ve),D6=n(Ve,"LI",{});var G$e=s(D6);S_e=n(G$e,"STRONG",{});var Q_t=s(S_e);aZo=r(Q_t,"sew"),Q_t.forEach(t),nZo=r(G$e," \u2014 "),GX=n(G$e,"A",{href:!0});var H_t=s(GX);sZo=r(H_t,"SEWForCTC"),H_t.forEach(t),lZo=r(G$e," (SEW model)"),G$e.forEach(t),iZo=i(Ve),G6=n(Ve,"LI",{});var O$e=s(G6);R_e=n(O$e,"STRONG",{});var U_t=s(R_e);dZo=r(U_t,"sew-d"),U_t.forEach(t),cZo=r(O$e," \u2014 "),OX=n(O$e,"A",{href:!0});var J_t=s(OX);fZo=r(J_t,"SEWDForCTC"),J_t.forEach(t),mZo=r(O$e," (SEW-D model)"),O$e.forEach(t),gZo=i(Ve),O6=n(Ve,"LI",{});var V$e=s(O6);P_e=n(V$e,"STRONG",{});var Y_t=s(P_e);hZo=r(Y_t,"unispeech"),Y_t.forEach(t),pZo=r(V$e," \u2014 "),VX=n(V$e,"A",{href:!0});var K_t=s(VX);_Zo=r(K_t,"UniSpeechForCTC"),K_t.forEach(t),uZo=r(V$e," (UniSpeech model)"),V$e.forEach(t),bZo=i(Ve),V6=n(Ve,"LI",{});var X$e=s(V6);B_e=n(X$e,"STRONG",{});var Z_t=s(B_e);vZo=r(Z_t,"unispeech-sat"),Z_t.forEach(t),FZo=r(X$e," \u2014 "),XX=n(X$e,"A",{href:!0});var eut=s(XX);TZo=r(eut,"UniSpeechSatForCTC"),eut.forEach(t),MZo=r(X$e," (UniSpeechSat model)"),X$e.forEach(t),EZo=i(Ve),X6=n(Ve,"LI",{});var z$e=s(X6);I_e=n(z$e,"STRONG",{});var out=s(I_e);CZo=r(out,"wav2vec2"),out.forEach(t),wZo=r(z$e," \u2014 "),zX=n(z$e,"A",{href:!0});var rut=s(zX);AZo=r(rut,"Wav2Vec2ForCTC"),rut.forEach(t),yZo=r(z$e," (Wav2Vec2 model)"),z$e.forEach(t),LZo=i(Ve),z6=n(Ve,"LI",{});var W$e=s(z6);q_e=n(W$e,"STRONG",{});var tut=s(q_e);xZo=r(tut,"wav2vec2-conformer"),tut.forEach(t),$Zo=r(W$e," \u2014 "),WX=n(W$e,"A",{href:!0});var aut=s(WX);kZo=r(aut,"Wav2Vec2ConformerForCTC"),aut.forEach(t),SZo=r(W$e," (Wav2Vec2-Conformer model)"),W$e.forEach(t),RZo=i(Ve),W6=n(Ve,"LI",{});var Q$e=s(W6);N_e=n(Q$e,"STRONG",{});var nut=s(N_e);PZo=r(nut,"wavlm"),nut.forEach(t),BZo=r(Q$e," \u2014 "),QX=n(Q$e,"A",{href:!0});var sut=s(QX);IZo=r(sut,"WavLMForCTC"),sut.forEach(t),qZo=r(Q$e," (WavLM model)"),Q$e.forEach(t),Ve.forEach(t),NZo=i(_a),Q6=n(_a,"P",{});var H$e=s(Q6);jZo=r(H$e,"The model is set in evaluation mode by default using "),j_e=n(H$e,"CODE",{});var lut=s(j_e);DZo=r(lut,"model.eval()"),lut.forEach(t),GZo=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(H$e,"CODE",{});var iut=s(D_e);OZo=r(iut,"model.train()"),iut.forEach(t),H$e.forEach(t),VZo=i(_a),T(H6.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Hqe=i(f),bd=n(f,"H2",{class:!0});var Kje=s(bd);U6=n(Kje,"A",{id:!0,class:!0,href:!0});var dut=s(U6);G_e=n(dut,"SPAN",{});var cut=s(G_e);T(gy.$$.fragment,cut),cut.forEach(t),dut.forEach(t),XZo=i(Kje),O_e=n(Kje,"SPAN",{});var fut=s(O_e);zZo=r(fut,"AutoModelForSpeechSeq2Seq"),fut.forEach(t),Kje.forEach(t),Uqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(hy.$$.fragment,al),WZo=i(al),vd=n(al,"P",{});var TZ=s(vd);QZo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HX=n(TZ,"A",{href:!0});var mut=s(HX);HZo=r(mut,"from_pretrained()"),mut.forEach(t),UZo=r(TZ," class method or the "),UX=n(TZ,"A",{href:!0});var gut=s(UX);JZo=r(gut,"from_config()"),gut.forEach(t),YZo=r(TZ,` class
method.`),TZ.forEach(t),KZo=i(al),py=n(al,"P",{});var Zje=s(py);ZZo=r(Zje,"This class cannot be instantiated directly using "),V_e=n(Zje,"CODE",{});var hut=s(V_e);eer=r(hut,"__init__()"),hut.forEach(t),oer=r(Zje," (throws an error)."),Zje.forEach(t),rer=i(al),Ft=n(al,"DIV",{class:!0});var Y3=s(Ft);T(_y.$$.fragment,Y3),ter=i(Y3),X_e=n(Y3,"P",{});var put=s(X_e);aer=r(put,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),put.forEach(t),ner=i(Y3),Fd=n(Y3,"P",{});var MZ=s(Fd);ser=r(MZ,`Note:
Loading a model from its configuration file does `),z_e=n(MZ,"STRONG",{});var _ut=s(z_e);ler=r(_ut,"not"),_ut.forEach(t),ier=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(MZ,"A",{href:!0});var uut=s(JX);der=r(uut,"from_pretrained()"),uut.forEach(t),cer=r(MZ," to load the model weights."),MZ.forEach(t),fer=i(Y3),T(J6.$$.fragment,Y3),Y3.forEach(t),mer=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(uy.$$.fragment,ua),ger=i(ua),W_e=n(ua,"P",{});var but=s(W_e);her=r(but,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),but.forEach(t),per=i(ua),Xa=n(ua,"P",{});var K3=s(Xa);_er=r(K3,"The model class to instantiate is selected based on the "),Q_e=n(K3,"CODE",{});var vut=s(Q_e);uer=r(vut,"model_type"),vut.forEach(t),ber=r(K3,` property of the config object (either
passed as an argument or loaded from `),H_e=n(K3,"CODE",{});var Fut=s(H_e);ver=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Fer=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(K3,"CODE",{});var Tut=s(U_e);Ter=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Mer=r(K3,":"),K3.forEach(t),Eer=i(ua),by=n(ua,"UL",{});var eDe=s(by);Y6=n(eDe,"LI",{});var U$e=s(Y6);J_e=n(U$e,"STRONG",{});var Mut=s(J_e);Cer=r(Mut,"speech-encoder-decoder"),Mut.forEach(t),wer=r(U$e," \u2014 "),YX=n(U$e,"A",{href:!0});var Eut=s(YX);Aer=r(Eut,"SpeechEncoderDecoderModel"),Eut.forEach(t),yer=r(U$e," (Speech Encoder decoder model)"),U$e.forEach(t),Ler=i(eDe),K6=n(eDe,"LI",{});var J$e=s(K6);Y_e=n(J$e,"STRONG",{});var Cut=s(Y_e);xer=r(Cut,"speech_to_text"),Cut.forEach(t),$er=r(J$e," \u2014 "),KX=n(J$e,"A",{href:!0});var wut=s(KX);ker=r(wut,"Speech2TextForConditionalGeneration"),wut.forEach(t),Ser=r(J$e," (Speech2Text model)"),J$e.forEach(t),eDe.forEach(t),Rer=i(ua),Z6=n(ua,"P",{});var Y$e=s(Z6);Per=r(Y$e,"The model is set in evaluation mode by default using "),K_e=n(Y$e,"CODE",{});var Aut=s(K_e);Ber=r(Aut,"model.eval()"),Aut.forEach(t),Ier=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Y$e,"CODE",{});var yut=s(Z_e);qer=r(yut,"model.train()"),yut.forEach(t),Y$e.forEach(t),Ner=i(ua),T(eT.$$.fragment,ua),ua.forEach(t),al.forEach(t),Jqe=i(f),Td=n(f,"H2",{class:!0});var oDe=s(Td);oT=n(oDe,"A",{id:!0,class:!0,href:!0});var Lut=s(oT);eue=n(Lut,"SPAN",{});var xut=s(eue);T(vy.$$.fragment,xut),xut.forEach(t),Lut.forEach(t),jer=i(oDe),oue=n(oDe,"SPAN",{});var $ut=s(oue);Der=r($ut,"AutoModelForAudioXVector"),$ut.forEach(t),oDe.forEach(t),Yqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(Fy.$$.fragment,nl),Ger=i(nl),Md=n(nl,"P",{});var EZ=s(Md);Oer=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZX=n(EZ,"A",{href:!0});var kut=s(ZX);Ver=r(kut,"from_pretrained()"),kut.forEach(t),Xer=r(EZ," class method or the "),ez=n(EZ,"A",{href:!0});var Sut=s(ez);zer=r(Sut,"from_config()"),Sut.forEach(t),Wer=r(EZ,` class
method.`),EZ.forEach(t),Qer=i(nl),Ty=n(nl,"P",{});var rDe=s(Ty);Her=r(rDe,"This class cannot be instantiated directly using "),rue=n(rDe,"CODE",{});var Rut=s(rue);Uer=r(Rut,"__init__()"),Rut.forEach(t),Jer=r(rDe," (throws an error)."),rDe.forEach(t),Yer=i(nl),Tt=n(nl,"DIV",{class:!0});var Z3=s(Tt);T(My.$$.fragment,Z3),Ker=i(Z3),tue=n(Z3,"P",{});var Put=s(tue);Zer=r(Put,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Put.forEach(t),eor=i(Z3),Ed=n(Z3,"P",{});var CZ=s(Ed);oor=r(CZ,`Note:
Loading a model from its configuration file does `),aue=n(CZ,"STRONG",{});var But=s(aue);ror=r(But,"not"),But.forEach(t),tor=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(CZ,"A",{href:!0});var Iut=s(oz);aor=r(Iut,"from_pretrained()"),Iut.forEach(t),nor=r(CZ," to load the model weights."),CZ.forEach(t),sor=i(Z3),T(rT.$$.fragment,Z3),Z3.forEach(t),lor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(Ey.$$.fragment,ba),ior=i(ba),nue=n(ba,"P",{});var qut=s(nue);dor=r(qut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),qut.forEach(t),cor=i(ba),za=n(ba,"P",{});var ew=s(za);mor=r(ew,"The model class to instantiate is selected based on the "),sue=n(ew,"CODE",{});var Nut=s(sue);gor=r(Nut,"model_type"),Nut.forEach(t),hor=r(ew,` property of the config object (either
passed as an argument or loaded from `),lue=n(ew,"CODE",{});var jut=s(lue);por=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),_or=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(ew,"CODE",{});var Dut=s(iue);uor=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),bor=r(ew,":"),ew.forEach(t),vor=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);tT=n(sl,"LI",{});var K$e=s(tT);due=n(K$e,"STRONG",{});var Gut=s(due);For=r(Gut,"data2vec-audio"),Gut.forEach(t),Tor=r(K$e," \u2014 "),rz=n(K$e,"A",{href:!0});var Out=s(rz);Mor=r(Out,"Data2VecAudioForXVector"),Out.forEach(t),Eor=r(K$e," (Data2VecAudio model)"),K$e.forEach(t),Cor=i(sl),aT=n(sl,"LI",{});var Z$e=s(aT);cue=n(Z$e,"STRONG",{});var Vut=s(cue);wor=r(Vut,"unispeech-sat"),Vut.forEach(t),Aor=r(Z$e," \u2014 "),tz=n(Z$e,"A",{href:!0});var Xut=s(tz);yor=r(Xut,"UniSpeechSatForXVector"),Xut.forEach(t),Lor=r(Z$e," (UniSpeechSat model)"),Z$e.forEach(t),xor=i(sl),nT=n(sl,"LI",{});var eke=s(nT);fue=n(eke,"STRONG",{});var zut=s(fue);$or=r(zut,"wav2vec2"),zut.forEach(t),kor=r(eke," \u2014 "),az=n(eke,"A",{href:!0});var Wut=s(az);Sor=r(Wut,"Wav2Vec2ForXVector"),Wut.forEach(t),Ror=r(eke," (Wav2Vec2 model)"),eke.forEach(t),Por=i(sl),sT=n(sl,"LI",{});var oke=s(sT);mue=n(oke,"STRONG",{});var Qut=s(mue);Bor=r(Qut,"wav2vec2-conformer"),Qut.forEach(t),Ior=r(oke," \u2014 "),nz=n(oke,"A",{href:!0});var Hut=s(nz);qor=r(Hut,"Wav2Vec2ConformerForXVector"),Hut.forEach(t),Nor=r(oke," (Wav2Vec2-Conformer model)"),oke.forEach(t),jor=i(sl),lT=n(sl,"LI",{});var rke=s(lT);gue=n(rke,"STRONG",{});var Uut=s(gue);Dor=r(Uut,"wavlm"),Uut.forEach(t),Gor=r(rke," \u2014 "),sz=n(rke,"A",{href:!0});var Jut=s(sz);Oor=r(Jut,"WavLMForXVector"),Jut.forEach(t),Vor=r(rke," (WavLM model)"),rke.forEach(t),sl.forEach(t),Xor=i(ba),iT=n(ba,"P",{});var tke=s(iT);zor=r(tke,"The model is set in evaluation mode by default using "),hue=n(tke,"CODE",{});var Yut=s(hue);Wor=r(Yut,"model.eval()"),Yut.forEach(t),Qor=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(tke,"CODE",{});var Kut=s(pue);Hor=r(Kut,"model.train()"),Kut.forEach(t),tke.forEach(t),Uor=i(ba),T(dT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Kqe=i(f),Cd=n(f,"H2",{class:!0});var tDe=s(Cd);cT=n(tDe,"A",{id:!0,class:!0,href:!0});var Zut=s(cT);_ue=n(Zut,"SPAN",{});var e1t=s(_ue);T(Cy.$$.fragment,e1t),e1t.forEach(t),Zut.forEach(t),Jor=i(tDe),uue=n(tDe,"SPAN",{});var o1t=s(uue);Yor=r(o1t,"AutoModelForMaskedImageModeling"),o1t.forEach(t),tDe.forEach(t),Zqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(wy.$$.fragment,ll),Kor=i(ll),wd=n(ll,"P",{});var wZ=s(wd);Zor=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lz=n(wZ,"A",{href:!0});var r1t=s(lz);err=r(r1t,"from_pretrained()"),r1t.forEach(t),orr=r(wZ," class method or the "),iz=n(wZ,"A",{href:!0});var t1t=s(iz);rrr=r(t1t,"from_config()"),t1t.forEach(t),trr=r(wZ,` class
method.`),wZ.forEach(t),arr=i(ll),Ay=n(ll,"P",{});var aDe=s(Ay);nrr=r(aDe,"This class cannot be instantiated directly using "),bue=n(aDe,"CODE",{});var a1t=s(bue);srr=r(a1t,"__init__()"),a1t.forEach(t),lrr=r(aDe," (throws an error)."),aDe.forEach(t),irr=i(ll),Mt=n(ll,"DIV",{class:!0});var ow=s(Mt);T(yy.$$.fragment,ow),drr=i(ow),vue=n(ow,"P",{});var n1t=s(vue);crr=r(n1t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),n1t.forEach(t),frr=i(ow),Ad=n(ow,"P",{});var AZ=s(Ad);mrr=r(AZ,`Note:
Loading a model from its configuration file does `),Fue=n(AZ,"STRONG",{});var s1t=s(Fue);grr=r(s1t,"not"),s1t.forEach(t),hrr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(AZ,"A",{href:!0});var l1t=s(dz);prr=r(l1t,"from_pretrained()"),l1t.forEach(t),_rr=r(AZ," to load the model weights."),AZ.forEach(t),urr=i(ow),T(fT.$$.fragment,ow),ow.forEach(t),brr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(Ly.$$.fragment,va),vrr=i(va),Tue=n(va,"P",{});var i1t=s(Tue);Frr=r(i1t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),i1t.forEach(t),Trr=i(va),Wa=n(va,"P",{});var rw=s(Wa);Mrr=r(rw,"The model class to instantiate is selected based on the "),Mue=n(rw,"CODE",{});var d1t=s(Mue);Err=r(d1t,"model_type"),d1t.forEach(t),Crr=r(rw,` property of the config object (either
passed as an argument or loaded from `),Eue=n(rw,"CODE",{});var c1t=s(Eue);wrr=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),Arr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(rw,"CODE",{});var f1t=s(Cue);yrr=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),Lrr=r(rw,":"),rw.forEach(t),xrr=i(va),yd=n(va,"UL",{});var yZ=s(yd);mT=n(yZ,"LI",{});var ake=s(mT);wue=n(ake,"STRONG",{});var m1t=s(wue);$rr=r(m1t,"deit"),m1t.forEach(t),krr=r(ake," \u2014 "),cz=n(ake,"A",{href:!0});var g1t=s(cz);Srr=r(g1t,"DeiTForMaskedImageModeling"),g1t.forEach(t),Rrr=r(ake," (DeiT model)"),ake.forEach(t),Prr=i(yZ),gT=n(yZ,"LI",{});var nke=s(gT);Aue=n(nke,"STRONG",{});var h1t=s(Aue);Brr=r(h1t,"swin"),h1t.forEach(t),Irr=r(nke," \u2014 "),fz=n(nke,"A",{href:!0});var p1t=s(fz);qrr=r(p1t,"SwinForMaskedImageModeling"),p1t.forEach(t),Nrr=r(nke," (Swin model)"),nke.forEach(t),jrr=i(yZ),hT=n(yZ,"LI",{});var ske=s(hT);yue=n(ske,"STRONG",{});var _1t=s(yue);Drr=r(_1t,"vit"),_1t.forEach(t),Grr=r(ske," \u2014 "),mz=n(ske,"A",{href:!0});var u1t=s(mz);Orr=r(u1t,"ViTForMaskedImageModeling"),u1t.forEach(t),Vrr=r(ske," (ViT model)"),ske.forEach(t),yZ.forEach(t),Xrr=i(va),pT=n(va,"P",{});var lke=s(pT);zrr=r(lke,"The model is set in evaluation mode by default using "),Lue=n(lke,"CODE",{});var b1t=s(Lue);Wrr=r(b1t,"model.eval()"),b1t.forEach(t),Qrr=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(lke,"CODE",{});var v1t=s(xue);Hrr=r(v1t,"model.train()"),v1t.forEach(t),lke.forEach(t),Urr=i(va),T(_T.$$.fragment,va),va.forEach(t),ll.forEach(t),eNe=i(f),Ld=n(f,"H2",{class:!0});var nDe=s(Ld);uT=n(nDe,"A",{id:!0,class:!0,href:!0});var F1t=s(uT);$ue=n(F1t,"SPAN",{});var T1t=s($ue);T(xy.$$.fragment,T1t),T1t.forEach(t),F1t.forEach(t),Jrr=i(nDe),kue=n(nDe,"SPAN",{});var M1t=s(kue);Yrr=r(M1t,"AutoModelForObjectDetection"),M1t.forEach(t),nDe.forEach(t),oNe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T($y.$$.fragment,il),Krr=i(il),xd=n(il,"P",{});var LZ=s(xd);Zrr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gz=n(LZ,"A",{href:!0});var E1t=s(gz);etr=r(E1t,"from_pretrained()"),E1t.forEach(t),otr=r(LZ," class method or the "),hz=n(LZ,"A",{href:!0});var C1t=s(hz);rtr=r(C1t,"from_config()"),C1t.forEach(t),ttr=r(LZ,` class
method.`),LZ.forEach(t),atr=i(il),ky=n(il,"P",{});var sDe=s(ky);ntr=r(sDe,"This class cannot be instantiated directly using "),Sue=n(sDe,"CODE",{});var w1t=s(Sue);str=r(w1t,"__init__()"),w1t.forEach(t),ltr=r(sDe," (throws an error)."),sDe.forEach(t),itr=i(il),Et=n(il,"DIV",{class:!0});var tw=s(Et);T(Sy.$$.fragment,tw),dtr=i(tw),Rue=n(tw,"P",{});var A1t=s(Rue);ctr=r(A1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),A1t.forEach(t),ftr=i(tw),$d=n(tw,"P",{});var xZ=s($d);mtr=r(xZ,`Note:
Loading a model from its configuration file does `),Pue=n(xZ,"STRONG",{});var y1t=s(Pue);gtr=r(y1t,"not"),y1t.forEach(t),htr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(xZ,"A",{href:!0});var L1t=s(pz);ptr=r(L1t,"from_pretrained()"),L1t.forEach(t),_tr=r(xZ," to load the model weights."),xZ.forEach(t),utr=i(tw),T(bT.$$.fragment,tw),tw.forEach(t),btr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(Ry.$$.fragment,Fa),vtr=i(Fa),Bue=n(Fa,"P",{});var x1t=s(Bue);Ftr=r(x1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),x1t.forEach(t),Ttr=i(Fa),Qa=n(Fa,"P",{});var aw=s(Qa);Mtr=r(aw,"The model class to instantiate is selected based on the "),Iue=n(aw,"CODE",{});var $1t=s(Iue);Etr=r($1t,"model_type"),$1t.forEach(t),Ctr=r(aw,` property of the config object (either
passed as an argument or loaded from `),que=n(aw,"CODE",{});var k1t=s(que);wtr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),Atr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(aw,"CODE",{});var S1t=s(Nue);ytr=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),Ltr=r(aw,":"),aw.forEach(t),xtr=i(Fa),Py=n(Fa,"UL",{});var lDe=s(Py);vT=n(lDe,"LI",{});var ike=s(vT);jue=n(ike,"STRONG",{});var R1t=s(jue);$tr=r(R1t,"detr"),R1t.forEach(t),ktr=r(ike," \u2014 "),_z=n(ike,"A",{href:!0});var P1t=s(_z);Str=r(P1t,"DetrForObjectDetection"),P1t.forEach(t),Rtr=r(ike," (DETR model)"),ike.forEach(t),Ptr=i(lDe),FT=n(lDe,"LI",{});var dke=s(FT);Due=n(dke,"STRONG",{});var B1t=s(Due);Btr=r(B1t,"yolos"),B1t.forEach(t),Itr=r(dke," \u2014 "),uz=n(dke,"A",{href:!0});var I1t=s(uz);qtr=r(I1t,"YolosForObjectDetection"),I1t.forEach(t),Ntr=r(dke," (YOLOS model)"),dke.forEach(t),lDe.forEach(t),jtr=i(Fa),TT=n(Fa,"P",{});var cke=s(TT);Dtr=r(cke,"The model is set in evaluation mode by default using "),Gue=n(cke,"CODE",{});var q1t=s(Gue);Gtr=r(q1t,"model.eval()"),q1t.forEach(t),Otr=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(cke,"CODE",{});var N1t=s(Oue);Vtr=r(N1t,"model.train()"),N1t.forEach(t),cke.forEach(t),Xtr=i(Fa),T(MT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),rNe=i(f),kd=n(f,"H2",{class:!0});var iDe=s(kd);ET=n(iDe,"A",{id:!0,class:!0,href:!0});var j1t=s(ET);Vue=n(j1t,"SPAN",{});var D1t=s(Vue);T(By.$$.fragment,D1t),D1t.forEach(t),j1t.forEach(t),ztr=i(iDe),Xue=n(iDe,"SPAN",{});var G1t=s(Xue);Wtr=r(G1t,"AutoModelForImageSegmentation"),G1t.forEach(t),iDe.forEach(t),tNe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(Iy.$$.fragment,dl),Qtr=i(dl),Sd=n(dl,"P",{});var $Z=s(Sd);Htr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bz=n($Z,"A",{href:!0});var O1t=s(bz);Utr=r(O1t,"from_pretrained()"),O1t.forEach(t),Jtr=r($Z," class method or the "),vz=n($Z,"A",{href:!0});var V1t=s(vz);Ytr=r(V1t,"from_config()"),V1t.forEach(t),Ktr=r($Z,` class
method.`),$Z.forEach(t),Ztr=i(dl),qy=n(dl,"P",{});var dDe=s(qy);ear=r(dDe,"This class cannot be instantiated directly using "),zue=n(dDe,"CODE",{});var X1t=s(zue);oar=r(X1t,"__init__()"),X1t.forEach(t),rar=r(dDe," (throws an error)."),dDe.forEach(t),tar=i(dl),Ct=n(dl,"DIV",{class:!0});var nw=s(Ct);T(Ny.$$.fragment,nw),aar=i(nw),Wue=n(nw,"P",{});var z1t=s(Wue);nar=r(z1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),z1t.forEach(t),sar=i(nw),Rd=n(nw,"P",{});var kZ=s(Rd);lar=r(kZ,`Note:
Loading a model from its configuration file does `),Que=n(kZ,"STRONG",{});var W1t=s(Que);iar=r(W1t,"not"),W1t.forEach(t),dar=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(kZ,"A",{href:!0});var Q1t=s(Fz);car=r(Q1t,"from_pretrained()"),Q1t.forEach(t),far=r(kZ," to load the model weights."),kZ.forEach(t),mar=i(nw),T(CT.$$.fragment,nw),nw.forEach(t),gar=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(jy.$$.fragment,Ta),har=i(Ta),Hue=n(Ta,"P",{});var H1t=s(Hue);par=r(H1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),H1t.forEach(t),_ar=i(Ta),Ha=n(Ta,"P",{});var sw=s(Ha);uar=r(sw,"The model class to instantiate is selected based on the "),Uue=n(sw,"CODE",{});var U1t=s(Uue);bar=r(U1t,"model_type"),U1t.forEach(t),Far=r(sw,` property of the config object (either
passed as an argument or loaded from `),Jue=n(sw,"CODE",{});var J1t=s(Jue);Tar=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),Mar=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(sw,"CODE",{});var Y1t=s(Yue);Ear=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),Car=r(sw,":"),sw.forEach(t),war=i(Ta),Kue=n(Ta,"UL",{});var K1t=s(Kue);wT=n(K1t,"LI",{});var fke=s(wT);Zue=n(fke,"STRONG",{});var Z1t=s(Zue);Aar=r(Z1t,"detr"),Z1t.forEach(t),yar=r(fke," \u2014 "),Tz=n(fke,"A",{href:!0});var ebt=s(Tz);Lar=r(ebt,"DetrForSegmentation"),ebt.forEach(t),xar=r(fke," (DETR model)"),fke.forEach(t),K1t.forEach(t),$ar=i(Ta),AT=n(Ta,"P",{});var mke=s(AT);kar=r(mke,"The model is set in evaluation mode by default using "),e1e=n(mke,"CODE",{});var obt=s(e1e);Sar=r(obt,"model.eval()"),obt.forEach(t),Rar=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(mke,"CODE",{});var rbt=s(o1e);Par=r(rbt,"model.train()"),rbt.forEach(t),mke.forEach(t),Bar=i(Ta),T(yT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),aNe=i(f),Pd=n(f,"H2",{class:!0});var cDe=s(Pd);LT=n(cDe,"A",{id:!0,class:!0,href:!0});var tbt=s(LT);r1e=n(tbt,"SPAN",{});var abt=s(r1e);T(Dy.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),Iar=i(cDe),t1e=n(cDe,"SPAN",{});var nbt=s(t1e);qar=r(nbt,"AutoModelForSemanticSegmentation"),nbt.forEach(t),cDe.forEach(t),nNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(Gy.$$.fragment,cl),Nar=i(cl),Bd=n(cl,"P",{});var SZ=s(Bd);jar=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mz=n(SZ,"A",{href:!0});var sbt=s(Mz);Dar=r(sbt,"from_pretrained()"),sbt.forEach(t),Gar=r(SZ," class method or the "),Ez=n(SZ,"A",{href:!0});var lbt=s(Ez);Oar=r(lbt,"from_config()"),lbt.forEach(t),Var=r(SZ,` class
method.`),SZ.forEach(t),Xar=i(cl),Oy=n(cl,"P",{});var fDe=s(Oy);zar=r(fDe,"This class cannot be instantiated directly using "),a1e=n(fDe,"CODE",{});var ibt=s(a1e);War=r(ibt,"__init__()"),ibt.forEach(t),Qar=r(fDe," (throws an error)."),fDe.forEach(t),Har=i(cl),wt=n(cl,"DIV",{class:!0});var lw=s(wt);T(Vy.$$.fragment,lw),Uar=i(lw),n1e=n(lw,"P",{});var dbt=s(n1e);Jar=r(dbt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dbt.forEach(t),Yar=i(lw),Id=n(lw,"P",{});var RZ=s(Id);Kar=r(RZ,`Note:
Loading a model from its configuration file does `),s1e=n(RZ,"STRONG",{});var cbt=s(s1e);Zar=r(cbt,"not"),cbt.forEach(t),enr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(RZ,"A",{href:!0});var fbt=s(Cz);onr=r(fbt,"from_pretrained()"),fbt.forEach(t),rnr=r(RZ," to load the model weights."),RZ.forEach(t),tnr=i(lw),T(xT.$$.fragment,lw),lw.forEach(t),anr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(Xy.$$.fragment,Ma),nnr=i(Ma),l1e=n(Ma,"P",{});var mbt=s(l1e);snr=r(mbt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mbt.forEach(t),lnr=i(Ma),Ua=n(Ma,"P",{});var iw=s(Ua);inr=r(iw,"The model class to instantiate is selected based on the "),i1e=n(iw,"CODE",{});var gbt=s(i1e);dnr=r(gbt,"model_type"),gbt.forEach(t),cnr=r(iw,` property of the config object (either
passed as an argument or loaded from `),d1e=n(iw,"CODE",{});var hbt=s(d1e);fnr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),mnr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(iw,"CODE",{});var pbt=s(c1e);gnr=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),hnr=r(iw,":"),iw.forEach(t),pnr=i(Ma),Ja=n(Ma,"UL",{});var dw=s(Ja);$T=n(dw,"LI",{});var gke=s($T);f1e=n(gke,"STRONG",{});var _bt=s(f1e);_nr=r(_bt,"beit"),_bt.forEach(t),unr=r(gke," \u2014 "),wz=n(gke,"A",{href:!0});var ubt=s(wz);bnr=r(ubt,"BeitForSemanticSegmentation"),ubt.forEach(t),vnr=r(gke," (BEiT model)"),gke.forEach(t),Fnr=i(dw),kT=n(dw,"LI",{});var hke=s(kT);m1e=n(hke,"STRONG",{});var bbt=s(m1e);Tnr=r(bbt,"data2vec-vision"),bbt.forEach(t),Mnr=r(hke," \u2014 "),Az=n(hke,"A",{href:!0});var vbt=s(Az);Enr=r(vbt,"Data2VecVisionForSemanticSegmentation"),vbt.forEach(t),Cnr=r(hke," (Data2VecVision model)"),hke.forEach(t),wnr=i(dw),ST=n(dw,"LI",{});var pke=s(ST);g1e=n(pke,"STRONG",{});var Fbt=s(g1e);Anr=r(Fbt,"dpt"),Fbt.forEach(t),ynr=r(pke," \u2014 "),yz=n(pke,"A",{href:!0});var Tbt=s(yz);Lnr=r(Tbt,"DPTForSemanticSegmentation"),Tbt.forEach(t),xnr=r(pke," (DPT model)"),pke.forEach(t),$nr=i(dw),RT=n(dw,"LI",{});var _ke=s(RT);h1e=n(_ke,"STRONG",{});var Mbt=s(h1e);knr=r(Mbt,"segformer"),Mbt.forEach(t),Snr=r(_ke," \u2014 "),Lz=n(_ke,"A",{href:!0});var Ebt=s(Lz);Rnr=r(Ebt,"SegformerForSemanticSegmentation"),Ebt.forEach(t),Pnr=r(_ke," (SegFormer model)"),_ke.forEach(t),dw.forEach(t),Bnr=i(Ma),PT=n(Ma,"P",{});var uke=s(PT);Inr=r(uke,"The model is set in evaluation mode by default using "),p1e=n(uke,"CODE",{});var Cbt=s(p1e);qnr=r(Cbt,"model.eval()"),Cbt.forEach(t),Nnr=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_1e=n(uke,"CODE",{});var wbt=s(_1e);jnr=r(wbt,"model.train()"),wbt.forEach(t),uke.forEach(t),Dnr=i(Ma),T(BT.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),sNe=i(f),qd=n(f,"H2",{class:!0});var mDe=s(qd);IT=n(mDe,"A",{id:!0,class:!0,href:!0});var Abt=s(IT);u1e=n(Abt,"SPAN",{});var ybt=s(u1e);T(zy.$$.fragment,ybt),ybt.forEach(t),Abt.forEach(t),Gnr=i(mDe),b1e=n(mDe,"SPAN",{});var Lbt=s(b1e);Onr=r(Lbt,"AutoModelForInstanceSegmentation"),Lbt.forEach(t),mDe.forEach(t),lNe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(Wy.$$.fragment,fl),Vnr=i(fl),Nd=n(fl,"P",{});var PZ=s(Nd);Xnr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xz=n(PZ,"A",{href:!0});var xbt=s(xz);znr=r(xbt,"from_pretrained()"),xbt.forEach(t),Wnr=r(PZ," class method or the "),$z=n(PZ,"A",{href:!0});var $bt=s($z);Qnr=r($bt,"from_config()"),$bt.forEach(t),Hnr=r(PZ,` class
method.`),PZ.forEach(t),Unr=i(fl),Qy=n(fl,"P",{});var gDe=s(Qy);Jnr=r(gDe,"This class cannot be instantiated directly using "),v1e=n(gDe,"CODE",{});var kbt=s(v1e);Ynr=r(kbt,"__init__()"),kbt.forEach(t),Knr=r(gDe," (throws an error)."),gDe.forEach(t),Znr=i(fl),At=n(fl,"DIV",{class:!0});var cw=s(At);T(Hy.$$.fragment,cw),esr=i(cw),F1e=n(cw,"P",{});var Sbt=s(F1e);osr=r(Sbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Sbt.forEach(t),rsr=i(cw),jd=n(cw,"P",{});var BZ=s(jd);tsr=r(BZ,`Note:
Loading a model from its configuration file does `),T1e=n(BZ,"STRONG",{});var Rbt=s(T1e);asr=r(Rbt,"not"),Rbt.forEach(t),nsr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(BZ,"A",{href:!0});var Pbt=s(kz);ssr=r(Pbt,"from_pretrained()"),Pbt.forEach(t),lsr=r(BZ," to load the model weights."),BZ.forEach(t),isr=i(cw),T(qT.$$.fragment,cw),cw.forEach(t),dsr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(Uy.$$.fragment,Ea),csr=i(Ea),M1e=n(Ea,"P",{});var Bbt=s(M1e);fsr=r(Bbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Bbt.forEach(t),msr=i(Ea),Ya=n(Ea,"P",{});var fw=s(Ya);gsr=r(fw,"The model class to instantiate is selected based on the "),E1e=n(fw,"CODE",{});var Ibt=s(E1e);hsr=r(Ibt,"model_type"),Ibt.forEach(t),psr=r(fw,` property of the config object (either
passed as an argument or loaded from `),C1e=n(fw,"CODE",{});var qbt=s(C1e);_sr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),usr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(fw,"CODE",{});var Nbt=s(w1e);bsr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),vsr=r(fw,":"),fw.forEach(t),Fsr=i(Ea),A1e=n(Ea,"UL",{});var jbt=s(A1e);NT=n(jbt,"LI",{});var bke=s(NT);y1e=n(bke,"STRONG",{});var Dbt=s(y1e);Tsr=r(Dbt,"maskformer"),Dbt.forEach(t),Msr=r(bke," \u2014 "),Sz=n(bke,"A",{href:!0});var Gbt=s(Sz);Esr=r(Gbt,"MaskFormerForInstanceSegmentation"),Gbt.forEach(t),Csr=r(bke," (MaskFormer model)"),bke.forEach(t),jbt.forEach(t),wsr=i(Ea),jT=n(Ea,"P",{});var vke=s(jT);Asr=r(vke,"The model is set in evaluation mode by default using "),L1e=n(vke,"CODE",{});var Obt=s(L1e);ysr=r(Obt,"model.eval()"),Obt.forEach(t),Lsr=r(vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=n(vke,"CODE",{});var Vbt=s(x1e);xsr=r(Vbt,"model.train()"),Vbt.forEach(t),vke.forEach(t),$sr=i(Ea),T(DT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),iNe=i(f),Dd=n(f,"H2",{class:!0});var hDe=s(Dd);GT=n(hDe,"A",{id:!0,class:!0,href:!0});var Xbt=s(GT);$1e=n(Xbt,"SPAN",{});var zbt=s($1e);T(Jy.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),ksr=i(hDe),k1e=n(hDe,"SPAN",{});var Wbt=s(k1e);Ssr=r(Wbt,"TFAutoModel"),Wbt.forEach(t),hDe.forEach(t),dNe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(Yy.$$.fragment,ml),Rsr=i(ml),Gd=n(ml,"P",{});var IZ=s(Gd);Psr=r(IZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rz=n(IZ,"A",{href:!0});var Qbt=s(Rz);Bsr=r(Qbt,"from_pretrained()"),Qbt.forEach(t),Isr=r(IZ," class method or the "),Pz=n(IZ,"A",{href:!0});var Hbt=s(Pz);qsr=r(Hbt,"from_config()"),Hbt.forEach(t),Nsr=r(IZ,` class
method.`),IZ.forEach(t),jsr=i(ml),Ky=n(ml,"P",{});var pDe=s(Ky);Dsr=r(pDe,"This class cannot be instantiated directly using "),S1e=n(pDe,"CODE",{});var Ubt=s(S1e);Gsr=r(Ubt,"__init__()"),Ubt.forEach(t),Osr=r(pDe," (throws an error)."),pDe.forEach(t),Vsr=i(ml),yt=n(ml,"DIV",{class:!0});var mw=s(yt);T(Zy.$$.fragment,mw),Xsr=i(mw),R1e=n(mw,"P",{});var Jbt=s(R1e);zsr=r(Jbt,"Instantiates one of the base model classes of the library from a configuration."),Jbt.forEach(t),Wsr=i(mw),Od=n(mw,"P",{});var qZ=s(Od);Qsr=r(qZ,`Note:
Loading a model from its configuration file does `),P1e=n(qZ,"STRONG",{});var Ybt=s(P1e);Hsr=r(Ybt,"not"),Ybt.forEach(t),Usr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(qZ,"A",{href:!0});var Kbt=s(Bz);Jsr=r(Kbt,"from_pretrained()"),Kbt.forEach(t),Ysr=r(qZ," to load the model weights."),qZ.forEach(t),Ksr=i(mw),T(OT.$$.fragment,mw),mw.forEach(t),Zsr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(eL.$$.fragment,gl),elr=i(gl),B1e=n(gl,"P",{});var Zbt=s(B1e);olr=r(Zbt,"Instantiate one of the base model classes of the library from a pretrained model."),Zbt.forEach(t),rlr=i(gl),Ka=n(gl,"P",{});var gw=s(Ka);tlr=r(gw,"The model class to instantiate is selected based on the "),I1e=n(gw,"CODE",{});var e2t=s(I1e);alr=r(e2t,"model_type"),e2t.forEach(t),nlr=r(gw,` property of the config object (either
passed as an argument or loaded from `),q1e=n(gw,"CODE",{});var o2t=s(q1e);slr=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),llr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(gw,"CODE",{});var r2t=s(N1e);ilr=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),dlr=r(gw,":"),gw.forEach(t),clr=i(gl),N=n(gl,"UL",{});var D=s(N);VT=n(D,"LI",{});var Fke=s(VT);j1e=n(Fke,"STRONG",{});var t2t=s(j1e);flr=r(t2t,"albert"),t2t.forEach(t),mlr=r(Fke," \u2014 "),Iz=n(Fke,"A",{href:!0});var a2t=s(Iz);glr=r(a2t,"TFAlbertModel"),a2t.forEach(t),hlr=r(Fke," (ALBERT model)"),Fke.forEach(t),plr=i(D),XT=n(D,"LI",{});var Tke=s(XT);D1e=n(Tke,"STRONG",{});var n2t=s(D1e);_lr=r(n2t,"bart"),n2t.forEach(t),ulr=r(Tke," \u2014 "),qz=n(Tke,"A",{href:!0});var s2t=s(qz);blr=r(s2t,"TFBartModel"),s2t.forEach(t),vlr=r(Tke," (BART model)"),Tke.forEach(t),Flr=i(D),zT=n(D,"LI",{});var Mke=s(zT);G1e=n(Mke,"STRONG",{});var l2t=s(G1e);Tlr=r(l2t,"bert"),l2t.forEach(t),Mlr=r(Mke," \u2014 "),Nz=n(Mke,"A",{href:!0});var i2t=s(Nz);Elr=r(i2t,"TFBertModel"),i2t.forEach(t),Clr=r(Mke," (BERT model)"),Mke.forEach(t),wlr=i(D),WT=n(D,"LI",{});var Eke=s(WT);O1e=n(Eke,"STRONG",{});var d2t=s(O1e);Alr=r(d2t,"blenderbot"),d2t.forEach(t),ylr=r(Eke," \u2014 "),jz=n(Eke,"A",{href:!0});var c2t=s(jz);Llr=r(c2t,"TFBlenderbotModel"),c2t.forEach(t),xlr=r(Eke," (Blenderbot model)"),Eke.forEach(t),$lr=i(D),QT=n(D,"LI",{});var Cke=s(QT);V1e=n(Cke,"STRONG",{});var f2t=s(V1e);klr=r(f2t,"blenderbot-small"),f2t.forEach(t),Slr=r(Cke," \u2014 "),Dz=n(Cke,"A",{href:!0});var m2t=s(Dz);Rlr=r(m2t,"TFBlenderbotSmallModel"),m2t.forEach(t),Plr=r(Cke," (BlenderbotSmall model)"),Cke.forEach(t),Blr=i(D),HT=n(D,"LI",{});var wke=s(HT);X1e=n(wke,"STRONG",{});var g2t=s(X1e);Ilr=r(g2t,"camembert"),g2t.forEach(t),qlr=r(wke," \u2014 "),Gz=n(wke,"A",{href:!0});var h2t=s(Gz);Nlr=r(h2t,"TFCamembertModel"),h2t.forEach(t),jlr=r(wke," (CamemBERT model)"),wke.forEach(t),Dlr=i(D),UT=n(D,"LI",{});var Ake=s(UT);z1e=n(Ake,"STRONG",{});var p2t=s(z1e);Glr=r(p2t,"clip"),p2t.forEach(t),Olr=r(Ake," \u2014 "),Oz=n(Ake,"A",{href:!0});var _2t=s(Oz);Vlr=r(_2t,"TFCLIPModel"),_2t.forEach(t),Xlr=r(Ake," (CLIP model)"),Ake.forEach(t),zlr=i(D),JT=n(D,"LI",{});var yke=s(JT);W1e=n(yke,"STRONG",{});var u2t=s(W1e);Wlr=r(u2t,"convbert"),u2t.forEach(t),Qlr=r(yke," \u2014 "),Vz=n(yke,"A",{href:!0});var b2t=s(Vz);Hlr=r(b2t,"TFConvBertModel"),b2t.forEach(t),Ulr=r(yke," (ConvBERT model)"),yke.forEach(t),Jlr=i(D),YT=n(D,"LI",{});var Lke=s(YT);Q1e=n(Lke,"STRONG",{});var v2t=s(Q1e);Ylr=r(v2t,"convnext"),v2t.forEach(t),Klr=r(Lke," \u2014 "),Xz=n(Lke,"A",{href:!0});var F2t=s(Xz);Zlr=r(F2t,"TFConvNextModel"),F2t.forEach(t),eir=r(Lke," (ConvNext model)"),Lke.forEach(t),oir=i(D),KT=n(D,"LI",{});var xke=s(KT);H1e=n(xke,"STRONG",{});var T2t=s(H1e);rir=r(T2t,"ctrl"),T2t.forEach(t),tir=r(xke," \u2014 "),zz=n(xke,"A",{href:!0});var M2t=s(zz);air=r(M2t,"TFCTRLModel"),M2t.forEach(t),nir=r(xke," (CTRL model)"),xke.forEach(t),sir=i(D),ZT=n(D,"LI",{});var $ke=s(ZT);U1e=n($ke,"STRONG",{});var E2t=s(U1e);lir=r(E2t,"data2vec-vision"),E2t.forEach(t),iir=r($ke," \u2014 "),Wz=n($ke,"A",{href:!0});var C2t=s(Wz);dir=r(C2t,"TFData2VecVisionModel"),C2t.forEach(t),cir=r($ke," (Data2VecVision model)"),$ke.forEach(t),fir=i(D),e8=n(D,"LI",{});var kke=s(e8);J1e=n(kke,"STRONG",{});var w2t=s(J1e);mir=r(w2t,"deberta"),w2t.forEach(t),gir=r(kke," \u2014 "),Qz=n(kke,"A",{href:!0});var A2t=s(Qz);hir=r(A2t,"TFDebertaModel"),A2t.forEach(t),pir=r(kke," (DeBERTa model)"),kke.forEach(t),_ir=i(D),o8=n(D,"LI",{});var Ske=s(o8);Y1e=n(Ske,"STRONG",{});var y2t=s(Y1e);uir=r(y2t,"deberta-v2"),y2t.forEach(t),bir=r(Ske," \u2014 "),Hz=n(Ske,"A",{href:!0});var L2t=s(Hz);vir=r(L2t,"TFDebertaV2Model"),L2t.forEach(t),Fir=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),Tir=i(D),r8=n(D,"LI",{});var Rke=s(r8);K1e=n(Rke,"STRONG",{});var x2t=s(K1e);Mir=r(x2t,"distilbert"),x2t.forEach(t),Eir=r(Rke," \u2014 "),Uz=n(Rke,"A",{href:!0});var $2t=s(Uz);Cir=r($2t,"TFDistilBertModel"),$2t.forEach(t),wir=r(Rke," (DistilBERT model)"),Rke.forEach(t),Air=i(D),t8=n(D,"LI",{});var Pke=s(t8);Z1e=n(Pke,"STRONG",{});var k2t=s(Z1e);yir=r(k2t,"dpr"),k2t.forEach(t),Lir=r(Pke," \u2014 "),Jz=n(Pke,"A",{href:!0});var S2t=s(Jz);xir=r(S2t,"TFDPRQuestionEncoder"),S2t.forEach(t),$ir=r(Pke," (DPR model)"),Pke.forEach(t),kir=i(D),a8=n(D,"LI",{});var Bke=s(a8);ebe=n(Bke,"STRONG",{});var R2t=s(ebe);Sir=r(R2t,"electra"),R2t.forEach(t),Rir=r(Bke," \u2014 "),Yz=n(Bke,"A",{href:!0});var P2t=s(Yz);Pir=r(P2t,"TFElectraModel"),P2t.forEach(t),Bir=r(Bke," (ELECTRA model)"),Bke.forEach(t),Iir=i(D),n8=n(D,"LI",{});var Ike=s(n8);obe=n(Ike,"STRONG",{});var B2t=s(obe);qir=r(B2t,"flaubert"),B2t.forEach(t),Nir=r(Ike," \u2014 "),Kz=n(Ike,"A",{href:!0});var I2t=s(Kz);jir=r(I2t,"TFFlaubertModel"),I2t.forEach(t),Dir=r(Ike," (FlauBERT model)"),Ike.forEach(t),Gir=i(D),Bs=n(D,"LI",{});var k$=s(Bs);rbe=n(k$,"STRONG",{});var q2t=s(rbe);Oir=r(q2t,"funnel"),q2t.forEach(t),Vir=r(k$," \u2014 "),Zz=n(k$,"A",{href:!0});var N2t=s(Zz);Xir=r(N2t,"TFFunnelModel"),N2t.forEach(t),zir=r(k$," or "),eW=n(k$,"A",{href:!0});var j2t=s(eW);Wir=r(j2t,"TFFunnelBaseModel"),j2t.forEach(t),Qir=r(k$," (Funnel Transformer model)"),k$.forEach(t),Hir=i(D),s8=n(D,"LI",{});var qke=s(s8);tbe=n(qke,"STRONG",{});var D2t=s(tbe);Uir=r(D2t,"gpt2"),D2t.forEach(t),Jir=r(qke," \u2014 "),oW=n(qke,"A",{href:!0});var G2t=s(oW);Yir=r(G2t,"TFGPT2Model"),G2t.forEach(t),Kir=r(qke," (OpenAI GPT-2 model)"),qke.forEach(t),Zir=i(D),l8=n(D,"LI",{});var Nke=s(l8);abe=n(Nke,"STRONG",{});var O2t=s(abe);edr=r(O2t,"gptj"),O2t.forEach(t),odr=r(Nke," \u2014 "),rW=n(Nke,"A",{href:!0});var V2t=s(rW);rdr=r(V2t,"TFGPTJModel"),V2t.forEach(t),tdr=r(Nke," (GPT-J model)"),Nke.forEach(t),adr=i(D),i8=n(D,"LI",{});var jke=s(i8);nbe=n(jke,"STRONG",{});var X2t=s(nbe);ndr=r(X2t,"hubert"),X2t.forEach(t),sdr=r(jke," \u2014 "),tW=n(jke,"A",{href:!0});var z2t=s(tW);ldr=r(z2t,"TFHubertModel"),z2t.forEach(t),idr=r(jke," (Hubert model)"),jke.forEach(t),ddr=i(D),d8=n(D,"LI",{});var Dke=s(d8);sbe=n(Dke,"STRONG",{});var W2t=s(sbe);cdr=r(W2t,"layoutlm"),W2t.forEach(t),fdr=r(Dke," \u2014 "),aW=n(Dke,"A",{href:!0});var Q2t=s(aW);mdr=r(Q2t,"TFLayoutLMModel"),Q2t.forEach(t),gdr=r(Dke," (LayoutLM model)"),Dke.forEach(t),hdr=i(D),c8=n(D,"LI",{});var Gke=s(c8);lbe=n(Gke,"STRONG",{});var H2t=s(lbe);pdr=r(H2t,"led"),H2t.forEach(t),_dr=r(Gke," \u2014 "),nW=n(Gke,"A",{href:!0});var U2t=s(nW);udr=r(U2t,"TFLEDModel"),U2t.forEach(t),bdr=r(Gke," (LED model)"),Gke.forEach(t),vdr=i(D),f8=n(D,"LI",{});var Oke=s(f8);ibe=n(Oke,"STRONG",{});var J2t=s(ibe);Fdr=r(J2t,"longformer"),J2t.forEach(t),Tdr=r(Oke," \u2014 "),sW=n(Oke,"A",{href:!0});var Y2t=s(sW);Mdr=r(Y2t,"TFLongformerModel"),Y2t.forEach(t),Edr=r(Oke," (Longformer model)"),Oke.forEach(t),Cdr=i(D),m8=n(D,"LI",{});var Vke=s(m8);dbe=n(Vke,"STRONG",{});var K2t=s(dbe);wdr=r(K2t,"lxmert"),K2t.forEach(t),Adr=r(Vke," \u2014 "),lW=n(Vke,"A",{href:!0});var Z2t=s(lW);ydr=r(Z2t,"TFLxmertModel"),Z2t.forEach(t),Ldr=r(Vke," (LXMERT model)"),Vke.forEach(t),xdr=i(D),g8=n(D,"LI",{});var Xke=s(g8);cbe=n(Xke,"STRONG",{});var evt=s(cbe);$dr=r(evt,"marian"),evt.forEach(t),kdr=r(Xke," \u2014 "),iW=n(Xke,"A",{href:!0});var ovt=s(iW);Sdr=r(ovt,"TFMarianModel"),ovt.forEach(t),Rdr=r(Xke," (Marian model)"),Xke.forEach(t),Pdr=i(D),h8=n(D,"LI",{});var zke=s(h8);fbe=n(zke,"STRONG",{});var rvt=s(fbe);Bdr=r(rvt,"mbart"),rvt.forEach(t),Idr=r(zke," \u2014 "),dW=n(zke,"A",{href:!0});var tvt=s(dW);qdr=r(tvt,"TFMBartModel"),tvt.forEach(t),Ndr=r(zke," (mBART model)"),zke.forEach(t),jdr=i(D),p8=n(D,"LI",{});var Wke=s(p8);mbe=n(Wke,"STRONG",{});var avt=s(mbe);Ddr=r(avt,"mobilebert"),avt.forEach(t),Gdr=r(Wke," \u2014 "),cW=n(Wke,"A",{href:!0});var nvt=s(cW);Odr=r(nvt,"TFMobileBertModel"),nvt.forEach(t),Vdr=r(Wke," (MobileBERT model)"),Wke.forEach(t),Xdr=i(D),_8=n(D,"LI",{});var Qke=s(_8);gbe=n(Qke,"STRONG",{});var svt=s(gbe);zdr=r(svt,"mpnet"),svt.forEach(t),Wdr=r(Qke," \u2014 "),fW=n(Qke,"A",{href:!0});var lvt=s(fW);Qdr=r(lvt,"TFMPNetModel"),lvt.forEach(t),Hdr=r(Qke," (MPNet model)"),Qke.forEach(t),Udr=i(D),u8=n(D,"LI",{});var Hke=s(u8);hbe=n(Hke,"STRONG",{});var ivt=s(hbe);Jdr=r(ivt,"mt5"),ivt.forEach(t),Ydr=r(Hke," \u2014 "),mW=n(Hke,"A",{href:!0});var dvt=s(mW);Kdr=r(dvt,"TFMT5Model"),dvt.forEach(t),Zdr=r(Hke," (mT5 model)"),Hke.forEach(t),ecr=i(D),b8=n(D,"LI",{});var Uke=s(b8);pbe=n(Uke,"STRONG",{});var cvt=s(pbe);ocr=r(cvt,"openai-gpt"),cvt.forEach(t),rcr=r(Uke," \u2014 "),gW=n(Uke,"A",{href:!0});var fvt=s(gW);tcr=r(fvt,"TFOpenAIGPTModel"),fvt.forEach(t),acr=r(Uke," (OpenAI GPT model)"),Uke.forEach(t),ncr=i(D),v8=n(D,"LI",{});var Jke=s(v8);_be=n(Jke,"STRONG",{});var mvt=s(_be);scr=r(mvt,"pegasus"),mvt.forEach(t),lcr=r(Jke," \u2014 "),hW=n(Jke,"A",{href:!0});var gvt=s(hW);icr=r(gvt,"TFPegasusModel"),gvt.forEach(t),dcr=r(Jke," (Pegasus model)"),Jke.forEach(t),ccr=i(D),F8=n(D,"LI",{});var Yke=s(F8);ube=n(Yke,"STRONG",{});var hvt=s(ube);fcr=r(hvt,"rembert"),hvt.forEach(t),mcr=r(Yke," \u2014 "),pW=n(Yke,"A",{href:!0});var pvt=s(pW);gcr=r(pvt,"TFRemBertModel"),pvt.forEach(t),hcr=r(Yke," (RemBERT model)"),Yke.forEach(t),pcr=i(D),T8=n(D,"LI",{});var Kke=s(T8);bbe=n(Kke,"STRONG",{});var _vt=s(bbe);_cr=r(_vt,"roberta"),_vt.forEach(t),ucr=r(Kke," \u2014 "),_W=n(Kke,"A",{href:!0});var uvt=s(_W);bcr=r(uvt,"TFRobertaModel"),uvt.forEach(t),vcr=r(Kke," (RoBERTa model)"),Kke.forEach(t),Fcr=i(D),M8=n(D,"LI",{});var Zke=s(M8);vbe=n(Zke,"STRONG",{});var bvt=s(vbe);Tcr=r(bvt,"roformer"),bvt.forEach(t),Mcr=r(Zke," \u2014 "),uW=n(Zke,"A",{href:!0});var vvt=s(uW);Ecr=r(vvt,"TFRoFormerModel"),vvt.forEach(t),Ccr=r(Zke," (RoFormer model)"),Zke.forEach(t),wcr=i(D),E8=n(D,"LI",{});var eSe=s(E8);Fbe=n(eSe,"STRONG",{});var Fvt=s(Fbe);Acr=r(Fvt,"speech_to_text"),Fvt.forEach(t),ycr=r(eSe," \u2014 "),bW=n(eSe,"A",{href:!0});var Tvt=s(bW);Lcr=r(Tvt,"TFSpeech2TextModel"),Tvt.forEach(t),xcr=r(eSe," (Speech2Text model)"),eSe.forEach(t),$cr=i(D),C8=n(D,"LI",{});var oSe=s(C8);Tbe=n(oSe,"STRONG",{});var Mvt=s(Tbe);kcr=r(Mvt,"swin"),Mvt.forEach(t),Scr=r(oSe," \u2014 "),vW=n(oSe,"A",{href:!0});var Evt=s(vW);Rcr=r(Evt,"TFSwinModel"),Evt.forEach(t),Pcr=r(oSe," (Swin model)"),oSe.forEach(t),Bcr=i(D),w8=n(D,"LI",{});var rSe=s(w8);Mbe=n(rSe,"STRONG",{});var Cvt=s(Mbe);Icr=r(Cvt,"t5"),Cvt.forEach(t),qcr=r(rSe," \u2014 "),FW=n(rSe,"A",{href:!0});var wvt=s(FW);Ncr=r(wvt,"TFT5Model"),wvt.forEach(t),jcr=r(rSe," (T5 model)"),rSe.forEach(t),Dcr=i(D),A8=n(D,"LI",{});var tSe=s(A8);Ebe=n(tSe,"STRONG",{});var Avt=s(Ebe);Gcr=r(Avt,"tapas"),Avt.forEach(t),Ocr=r(tSe," \u2014 "),TW=n(tSe,"A",{href:!0});var yvt=s(TW);Vcr=r(yvt,"TFTapasModel"),yvt.forEach(t),Xcr=r(tSe," (TAPAS model)"),tSe.forEach(t),zcr=i(D),y8=n(D,"LI",{});var aSe=s(y8);Cbe=n(aSe,"STRONG",{});var Lvt=s(Cbe);Wcr=r(Lvt,"transfo-xl"),Lvt.forEach(t),Qcr=r(aSe," \u2014 "),MW=n(aSe,"A",{href:!0});var xvt=s(MW);Hcr=r(xvt,"TFTransfoXLModel"),xvt.forEach(t),Ucr=r(aSe," (Transformer-XL model)"),aSe.forEach(t),Jcr=i(D),L8=n(D,"LI",{});var nSe=s(L8);wbe=n(nSe,"STRONG",{});var $vt=s(wbe);Ycr=r($vt,"vit"),$vt.forEach(t),Kcr=r(nSe," \u2014 "),EW=n(nSe,"A",{href:!0});var kvt=s(EW);Zcr=r(kvt,"TFViTModel"),kvt.forEach(t),efr=r(nSe," (ViT model)"),nSe.forEach(t),ofr=i(D),x8=n(D,"LI",{});var sSe=s(x8);Abe=n(sSe,"STRONG",{});var Svt=s(Abe);rfr=r(Svt,"vit_mae"),Svt.forEach(t),tfr=r(sSe," \u2014 "),CW=n(sSe,"A",{href:!0});var Rvt=s(CW);afr=r(Rvt,"TFViTMAEModel"),Rvt.forEach(t),nfr=r(sSe," (ViTMAE model)"),sSe.forEach(t),sfr=i(D),$8=n(D,"LI",{});var lSe=s($8);ybe=n(lSe,"STRONG",{});var Pvt=s(ybe);lfr=r(Pvt,"wav2vec2"),Pvt.forEach(t),ifr=r(lSe," \u2014 "),wW=n(lSe,"A",{href:!0});var Bvt=s(wW);dfr=r(Bvt,"TFWav2Vec2Model"),Bvt.forEach(t),cfr=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),ffr=i(D),k8=n(D,"LI",{});var iSe=s(k8);Lbe=n(iSe,"STRONG",{});var Ivt=s(Lbe);mfr=r(Ivt,"xlm"),Ivt.forEach(t),gfr=r(iSe," \u2014 "),AW=n(iSe,"A",{href:!0});var qvt=s(AW);hfr=r(qvt,"TFXLMModel"),qvt.forEach(t),pfr=r(iSe," (XLM model)"),iSe.forEach(t),_fr=i(D),S8=n(D,"LI",{});var dSe=s(S8);xbe=n(dSe,"STRONG",{});var Nvt=s(xbe);ufr=r(Nvt,"xlm-roberta"),Nvt.forEach(t),bfr=r(dSe," \u2014 "),yW=n(dSe,"A",{href:!0});var jvt=s(yW);vfr=r(jvt,"TFXLMRobertaModel"),jvt.forEach(t),Ffr=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),Tfr=i(D),R8=n(D,"LI",{});var cSe=s(R8);$be=n(cSe,"STRONG",{});var Dvt=s($be);Mfr=r(Dvt,"xlnet"),Dvt.forEach(t),Efr=r(cSe," \u2014 "),LW=n(cSe,"A",{href:!0});var Gvt=s(LW);Cfr=r(Gvt,"TFXLNetModel"),Gvt.forEach(t),wfr=r(cSe," (XLNet model)"),cSe.forEach(t),D.forEach(t),Afr=i(gl),T(P8.$$.fragment,gl),gl.forEach(t),ml.forEach(t),cNe=i(f),Vd=n(f,"H2",{class:!0});var _De=s(Vd);B8=n(_De,"A",{id:!0,class:!0,href:!0});var Ovt=s(B8);kbe=n(Ovt,"SPAN",{});var Vvt=s(kbe);T(oL.$$.fragment,Vvt),Vvt.forEach(t),Ovt.forEach(t),yfr=i(_De),Sbe=n(_De,"SPAN",{});var Xvt=s(Sbe);Lfr=r(Xvt,"TFAutoModelForPreTraining"),Xvt.forEach(t),_De.forEach(t),fNe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(rL.$$.fragment,hl),xfr=i(hl),Xd=n(hl,"P",{});var NZ=s(Xd);$fr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xW=n(NZ,"A",{href:!0});var zvt=s(xW);kfr=r(zvt,"from_pretrained()"),zvt.forEach(t),Sfr=r(NZ," class method or the "),$W=n(NZ,"A",{href:!0});var Wvt=s($W);Rfr=r(Wvt,"from_config()"),Wvt.forEach(t),Pfr=r(NZ,` class
method.`),NZ.forEach(t),Bfr=i(hl),tL=n(hl,"P",{});var uDe=s(tL);Ifr=r(uDe,"This class cannot be instantiated directly using "),Rbe=n(uDe,"CODE",{});var Qvt=s(Rbe);qfr=r(Qvt,"__init__()"),Qvt.forEach(t),Nfr=r(uDe," (throws an error)."),uDe.forEach(t),jfr=i(hl),Lt=n(hl,"DIV",{class:!0});var hw=s(Lt);T(aL.$$.fragment,hw),Dfr=i(hw),Pbe=n(hw,"P",{});var Hvt=s(Pbe);Gfr=r(Hvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hvt.forEach(t),Ofr=i(hw),zd=n(hw,"P",{});var jZ=s(zd);Vfr=r(jZ,`Note:
Loading a model from its configuration file does `),Bbe=n(jZ,"STRONG",{});var Uvt=s(Bbe);Xfr=r(Uvt,"not"),Uvt.forEach(t),zfr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(jZ,"A",{href:!0});var Jvt=s(kW);Wfr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),Qfr=r(jZ," to load the model weights."),jZ.forEach(t),Hfr=i(hw),T(I8.$$.fragment,hw),hw.forEach(t),Ufr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(nL.$$.fragment,pl),Jfr=i(pl),Ibe=n(pl,"P",{});var Yvt=s(Ibe);Yfr=r(Yvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yvt.forEach(t),Kfr=i(pl),Za=n(pl,"P",{});var pw=s(Za);Zfr=r(pw,"The model class to instantiate is selected based on the "),qbe=n(pw,"CODE",{});var Kvt=s(qbe);emr=r(Kvt,"model_type"),Kvt.forEach(t),omr=r(pw,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(pw,"CODE",{});var Zvt=s(Nbe);rmr=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),tmr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(pw,"CODE",{});var eFt=s(jbe);amr=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),nmr=r(pw,":"),pw.forEach(t),smr=i(pl),se=n(pl,"UL",{});var le=s(se);q8=n(le,"LI",{});var fSe=s(q8);Dbe=n(fSe,"STRONG",{});var oFt=s(Dbe);lmr=r(oFt,"albert"),oFt.forEach(t),imr=r(fSe," \u2014 "),SW=n(fSe,"A",{href:!0});var rFt=s(SW);dmr=r(rFt,"TFAlbertForPreTraining"),rFt.forEach(t),cmr=r(fSe," (ALBERT model)"),fSe.forEach(t),fmr=i(le),N8=n(le,"LI",{});var mSe=s(N8);Gbe=n(mSe,"STRONG",{});var tFt=s(Gbe);mmr=r(tFt,"bart"),tFt.forEach(t),gmr=r(mSe," \u2014 "),RW=n(mSe,"A",{href:!0});var aFt=s(RW);hmr=r(aFt,"TFBartForConditionalGeneration"),aFt.forEach(t),pmr=r(mSe," (BART model)"),mSe.forEach(t),_mr=i(le),j8=n(le,"LI",{});var gSe=s(j8);Obe=n(gSe,"STRONG",{});var nFt=s(Obe);umr=r(nFt,"bert"),nFt.forEach(t),bmr=r(gSe," \u2014 "),PW=n(gSe,"A",{href:!0});var sFt=s(PW);vmr=r(sFt,"TFBertForPreTraining"),sFt.forEach(t),Fmr=r(gSe," (BERT model)"),gSe.forEach(t),Tmr=i(le),D8=n(le,"LI",{});var hSe=s(D8);Vbe=n(hSe,"STRONG",{});var lFt=s(Vbe);Mmr=r(lFt,"camembert"),lFt.forEach(t),Emr=r(hSe," \u2014 "),BW=n(hSe,"A",{href:!0});var iFt=s(BW);Cmr=r(iFt,"TFCamembertForMaskedLM"),iFt.forEach(t),wmr=r(hSe," (CamemBERT model)"),hSe.forEach(t),Amr=i(le),G8=n(le,"LI",{});var pSe=s(G8);Xbe=n(pSe,"STRONG",{});var dFt=s(Xbe);ymr=r(dFt,"ctrl"),dFt.forEach(t),Lmr=r(pSe," \u2014 "),IW=n(pSe,"A",{href:!0});var cFt=s(IW);xmr=r(cFt,"TFCTRLLMHeadModel"),cFt.forEach(t),$mr=r(pSe," (CTRL model)"),pSe.forEach(t),kmr=i(le),O8=n(le,"LI",{});var _Se=s(O8);zbe=n(_Se,"STRONG",{});var fFt=s(zbe);Smr=r(fFt,"distilbert"),fFt.forEach(t),Rmr=r(_Se," \u2014 "),qW=n(_Se,"A",{href:!0});var mFt=s(qW);Pmr=r(mFt,"TFDistilBertForMaskedLM"),mFt.forEach(t),Bmr=r(_Se," (DistilBERT model)"),_Se.forEach(t),Imr=i(le),V8=n(le,"LI",{});var uSe=s(V8);Wbe=n(uSe,"STRONG",{});var gFt=s(Wbe);qmr=r(gFt,"electra"),gFt.forEach(t),Nmr=r(uSe," \u2014 "),NW=n(uSe,"A",{href:!0});var hFt=s(NW);jmr=r(hFt,"TFElectraForPreTraining"),hFt.forEach(t),Dmr=r(uSe," (ELECTRA model)"),uSe.forEach(t),Gmr=i(le),X8=n(le,"LI",{});var bSe=s(X8);Qbe=n(bSe,"STRONG",{});var pFt=s(Qbe);Omr=r(pFt,"flaubert"),pFt.forEach(t),Vmr=r(bSe," \u2014 "),jW=n(bSe,"A",{href:!0});var _Ft=s(jW);Xmr=r(_Ft,"TFFlaubertWithLMHeadModel"),_Ft.forEach(t),zmr=r(bSe," (FlauBERT model)"),bSe.forEach(t),Wmr=i(le),z8=n(le,"LI",{});var vSe=s(z8);Hbe=n(vSe,"STRONG",{});var uFt=s(Hbe);Qmr=r(uFt,"funnel"),uFt.forEach(t),Hmr=r(vSe," \u2014 "),DW=n(vSe,"A",{href:!0});var bFt=s(DW);Umr=r(bFt,"TFFunnelForPreTraining"),bFt.forEach(t),Jmr=r(vSe," (Funnel Transformer model)"),vSe.forEach(t),Ymr=i(le),W8=n(le,"LI",{});var FSe=s(W8);Ube=n(FSe,"STRONG",{});var vFt=s(Ube);Kmr=r(vFt,"gpt2"),vFt.forEach(t),Zmr=r(FSe," \u2014 "),GW=n(FSe,"A",{href:!0});var FFt=s(GW);egr=r(FFt,"TFGPT2LMHeadModel"),FFt.forEach(t),ogr=r(FSe," (OpenAI GPT-2 model)"),FSe.forEach(t),rgr=i(le),Q8=n(le,"LI",{});var TSe=s(Q8);Jbe=n(TSe,"STRONG",{});var TFt=s(Jbe);tgr=r(TFt,"layoutlm"),TFt.forEach(t),agr=r(TSe," \u2014 "),OW=n(TSe,"A",{href:!0});var MFt=s(OW);ngr=r(MFt,"TFLayoutLMForMaskedLM"),MFt.forEach(t),sgr=r(TSe," (LayoutLM model)"),TSe.forEach(t),lgr=i(le),H8=n(le,"LI",{});var MSe=s(H8);Ybe=n(MSe,"STRONG",{});var EFt=s(Ybe);igr=r(EFt,"lxmert"),EFt.forEach(t),dgr=r(MSe," \u2014 "),VW=n(MSe,"A",{href:!0});var CFt=s(VW);cgr=r(CFt,"TFLxmertForPreTraining"),CFt.forEach(t),fgr=r(MSe," (LXMERT model)"),MSe.forEach(t),mgr=i(le),U8=n(le,"LI",{});var ESe=s(U8);Kbe=n(ESe,"STRONG",{});var wFt=s(Kbe);ggr=r(wFt,"mobilebert"),wFt.forEach(t),hgr=r(ESe," \u2014 "),XW=n(ESe,"A",{href:!0});var AFt=s(XW);pgr=r(AFt,"TFMobileBertForPreTraining"),AFt.forEach(t),_gr=r(ESe," (MobileBERT model)"),ESe.forEach(t),ugr=i(le),J8=n(le,"LI",{});var CSe=s(J8);Zbe=n(CSe,"STRONG",{});var yFt=s(Zbe);bgr=r(yFt,"mpnet"),yFt.forEach(t),vgr=r(CSe," \u2014 "),zW=n(CSe,"A",{href:!0});var LFt=s(zW);Fgr=r(LFt,"TFMPNetForMaskedLM"),LFt.forEach(t),Tgr=r(CSe," (MPNet model)"),CSe.forEach(t),Mgr=i(le),Y8=n(le,"LI",{});var wSe=s(Y8);e2e=n(wSe,"STRONG",{});var xFt=s(e2e);Egr=r(xFt,"openai-gpt"),xFt.forEach(t),Cgr=r(wSe," \u2014 "),WW=n(wSe,"A",{href:!0});var $Ft=s(WW);wgr=r($Ft,"TFOpenAIGPTLMHeadModel"),$Ft.forEach(t),Agr=r(wSe," (OpenAI GPT model)"),wSe.forEach(t),ygr=i(le),K8=n(le,"LI",{});var ASe=s(K8);o2e=n(ASe,"STRONG",{});var kFt=s(o2e);Lgr=r(kFt,"roberta"),kFt.forEach(t),xgr=r(ASe," \u2014 "),QW=n(ASe,"A",{href:!0});var SFt=s(QW);$gr=r(SFt,"TFRobertaForMaskedLM"),SFt.forEach(t),kgr=r(ASe," (RoBERTa model)"),ASe.forEach(t),Sgr=i(le),Z8=n(le,"LI",{});var ySe=s(Z8);r2e=n(ySe,"STRONG",{});var RFt=s(r2e);Rgr=r(RFt,"t5"),RFt.forEach(t),Pgr=r(ySe," \u2014 "),HW=n(ySe,"A",{href:!0});var PFt=s(HW);Bgr=r(PFt,"TFT5ForConditionalGeneration"),PFt.forEach(t),Igr=r(ySe," (T5 model)"),ySe.forEach(t),qgr=i(le),e7=n(le,"LI",{});var LSe=s(e7);t2e=n(LSe,"STRONG",{});var BFt=s(t2e);Ngr=r(BFt,"tapas"),BFt.forEach(t),jgr=r(LSe," \u2014 "),UW=n(LSe,"A",{href:!0});var IFt=s(UW);Dgr=r(IFt,"TFTapasForMaskedLM"),IFt.forEach(t),Ggr=r(LSe," (TAPAS model)"),LSe.forEach(t),Ogr=i(le),o7=n(le,"LI",{});var xSe=s(o7);a2e=n(xSe,"STRONG",{});var qFt=s(a2e);Vgr=r(qFt,"transfo-xl"),qFt.forEach(t),Xgr=r(xSe," \u2014 "),JW=n(xSe,"A",{href:!0});var NFt=s(JW);zgr=r(NFt,"TFTransfoXLLMHeadModel"),NFt.forEach(t),Wgr=r(xSe," (Transformer-XL model)"),xSe.forEach(t),Qgr=i(le),r7=n(le,"LI",{});var $Se=s(r7);n2e=n($Se,"STRONG",{});var jFt=s(n2e);Hgr=r(jFt,"vit_mae"),jFt.forEach(t),Ugr=r($Se," \u2014 "),YW=n($Se,"A",{href:!0});var DFt=s(YW);Jgr=r(DFt,"TFViTMAEForPreTraining"),DFt.forEach(t),Ygr=r($Se," (ViTMAE model)"),$Se.forEach(t),Kgr=i(le),t7=n(le,"LI",{});var kSe=s(t7);s2e=n(kSe,"STRONG",{});var GFt=s(s2e);Zgr=r(GFt,"xlm"),GFt.forEach(t),ehr=r(kSe," \u2014 "),KW=n(kSe,"A",{href:!0});var OFt=s(KW);ohr=r(OFt,"TFXLMWithLMHeadModel"),OFt.forEach(t),rhr=r(kSe," (XLM model)"),kSe.forEach(t),thr=i(le),a7=n(le,"LI",{});var SSe=s(a7);l2e=n(SSe,"STRONG",{});var VFt=s(l2e);ahr=r(VFt,"xlm-roberta"),VFt.forEach(t),nhr=r(SSe," \u2014 "),ZW=n(SSe,"A",{href:!0});var XFt=s(ZW);shr=r(XFt,"TFXLMRobertaForMaskedLM"),XFt.forEach(t),lhr=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),ihr=i(le),n7=n(le,"LI",{});var RSe=s(n7);i2e=n(RSe,"STRONG",{});var zFt=s(i2e);dhr=r(zFt,"xlnet"),zFt.forEach(t),chr=r(RSe," \u2014 "),eQ=n(RSe,"A",{href:!0});var WFt=s(eQ);fhr=r(WFt,"TFXLNetLMHeadModel"),WFt.forEach(t),mhr=r(RSe," (XLNet model)"),RSe.forEach(t),le.forEach(t),ghr=i(pl),T(s7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),mNe=i(f),Wd=n(f,"H2",{class:!0});var bDe=s(Wd);l7=n(bDe,"A",{id:!0,class:!0,href:!0});var QFt=s(l7);d2e=n(QFt,"SPAN",{});var HFt=s(d2e);T(sL.$$.fragment,HFt),HFt.forEach(t),QFt.forEach(t),hhr=i(bDe),c2e=n(bDe,"SPAN",{});var UFt=s(c2e);phr=r(UFt,"TFAutoModelForCausalLM"),UFt.forEach(t),bDe.forEach(t),gNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(lL.$$.fragment,_l),_hr=i(_l),Qd=n(_l,"P",{});var DZ=s(Qd);uhr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oQ=n(DZ,"A",{href:!0});var JFt=s(oQ);bhr=r(JFt,"from_pretrained()"),JFt.forEach(t),vhr=r(DZ," class method or the "),rQ=n(DZ,"A",{href:!0});var YFt=s(rQ);Fhr=r(YFt,"from_config()"),YFt.forEach(t),Thr=r(DZ,` class
method.`),DZ.forEach(t),Mhr=i(_l),iL=n(_l,"P",{});var vDe=s(iL);Ehr=r(vDe,"This class cannot be instantiated directly using "),f2e=n(vDe,"CODE",{});var KFt=s(f2e);Chr=r(KFt,"__init__()"),KFt.forEach(t),whr=r(vDe," (throws an error)."),vDe.forEach(t),Ahr=i(_l),xt=n(_l,"DIV",{class:!0});var _w=s(xt);T(dL.$$.fragment,_w),yhr=i(_w),m2e=n(_w,"P",{});var ZFt=s(m2e);Lhr=r(ZFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZFt.forEach(t),xhr=i(_w),Hd=n(_w,"P",{});var GZ=s(Hd);$hr=r(GZ,`Note:
Loading a model from its configuration file does `),g2e=n(GZ,"STRONG",{});var e6t=s(g2e);khr=r(e6t,"not"),e6t.forEach(t),Shr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(GZ,"A",{href:!0});var o6t=s(tQ);Rhr=r(o6t,"from_pretrained()"),o6t.forEach(t),Phr=r(GZ," to load the model weights."),GZ.forEach(t),Bhr=i(_w),T(i7.$$.fragment,_w),_w.forEach(t),Ihr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(cL.$$.fragment,ul),qhr=i(ul),h2e=n(ul,"P",{});var r6t=s(h2e);Nhr=r(r6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r6t.forEach(t),jhr=i(ul),en=n(ul,"P",{});var uw=s(en);Dhr=r(uw,"The model class to instantiate is selected based on the "),p2e=n(uw,"CODE",{});var t6t=s(p2e);Ghr=r(t6t,"model_type"),t6t.forEach(t),Ohr=r(uw,` property of the config object (either
passed as an argument or loaded from `),_2e=n(uw,"CODE",{});var a6t=s(_2e);Vhr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),Xhr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(uw,"CODE",{});var n6t=s(u2e);zhr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),Whr=r(uw,":"),uw.forEach(t),Qhr=i(ul),Me=n(ul,"UL",{});var Ce=s(Me);d7=n(Ce,"LI",{});var PSe=s(d7);b2e=n(PSe,"STRONG",{});var s6t=s(b2e);Hhr=r(s6t,"bert"),s6t.forEach(t),Uhr=r(PSe," \u2014 "),aQ=n(PSe,"A",{href:!0});var l6t=s(aQ);Jhr=r(l6t,"TFBertLMHeadModel"),l6t.forEach(t),Yhr=r(PSe," (BERT model)"),PSe.forEach(t),Khr=i(Ce),c7=n(Ce,"LI",{});var BSe=s(c7);v2e=n(BSe,"STRONG",{});var i6t=s(v2e);Zhr=r(i6t,"camembert"),i6t.forEach(t),epr=r(BSe," \u2014 "),nQ=n(BSe,"A",{href:!0});var d6t=s(nQ);opr=r(d6t,"TFCamembertForCausalLM"),d6t.forEach(t),rpr=r(BSe," (CamemBERT model)"),BSe.forEach(t),tpr=i(Ce),f7=n(Ce,"LI",{});var ISe=s(f7);F2e=n(ISe,"STRONG",{});var c6t=s(F2e);apr=r(c6t,"ctrl"),c6t.forEach(t),npr=r(ISe," \u2014 "),sQ=n(ISe,"A",{href:!0});var f6t=s(sQ);spr=r(f6t,"TFCTRLLMHeadModel"),f6t.forEach(t),lpr=r(ISe," (CTRL model)"),ISe.forEach(t),ipr=i(Ce),m7=n(Ce,"LI",{});var qSe=s(m7);T2e=n(qSe,"STRONG",{});var m6t=s(T2e);dpr=r(m6t,"gpt2"),m6t.forEach(t),cpr=r(qSe," \u2014 "),lQ=n(qSe,"A",{href:!0});var g6t=s(lQ);fpr=r(g6t,"TFGPT2LMHeadModel"),g6t.forEach(t),mpr=r(qSe," (OpenAI GPT-2 model)"),qSe.forEach(t),gpr=i(Ce),g7=n(Ce,"LI",{});var NSe=s(g7);M2e=n(NSe,"STRONG",{});var h6t=s(M2e);hpr=r(h6t,"gptj"),h6t.forEach(t),ppr=r(NSe," \u2014 "),iQ=n(NSe,"A",{href:!0});var p6t=s(iQ);_pr=r(p6t,"TFGPTJForCausalLM"),p6t.forEach(t),upr=r(NSe," (GPT-J model)"),NSe.forEach(t),bpr=i(Ce),h7=n(Ce,"LI",{});var jSe=s(h7);E2e=n(jSe,"STRONG",{});var _6t=s(E2e);vpr=r(_6t,"openai-gpt"),_6t.forEach(t),Fpr=r(jSe," \u2014 "),dQ=n(jSe,"A",{href:!0});var u6t=s(dQ);Tpr=r(u6t,"TFOpenAIGPTLMHeadModel"),u6t.forEach(t),Mpr=r(jSe," (OpenAI GPT model)"),jSe.forEach(t),Epr=i(Ce),p7=n(Ce,"LI",{});var DSe=s(p7);C2e=n(DSe,"STRONG",{});var b6t=s(C2e);Cpr=r(b6t,"rembert"),b6t.forEach(t),wpr=r(DSe," \u2014 "),cQ=n(DSe,"A",{href:!0});var v6t=s(cQ);Apr=r(v6t,"TFRemBertForCausalLM"),v6t.forEach(t),ypr=r(DSe," (RemBERT model)"),DSe.forEach(t),Lpr=i(Ce),_7=n(Ce,"LI",{});var GSe=s(_7);w2e=n(GSe,"STRONG",{});var F6t=s(w2e);xpr=r(F6t,"roberta"),F6t.forEach(t),$pr=r(GSe," \u2014 "),fQ=n(GSe,"A",{href:!0});var T6t=s(fQ);kpr=r(T6t,"TFRobertaForCausalLM"),T6t.forEach(t),Spr=r(GSe," (RoBERTa model)"),GSe.forEach(t),Rpr=i(Ce),u7=n(Ce,"LI",{});var OSe=s(u7);A2e=n(OSe,"STRONG",{});var M6t=s(A2e);Ppr=r(M6t,"roformer"),M6t.forEach(t),Bpr=r(OSe," \u2014 "),mQ=n(OSe,"A",{href:!0});var E6t=s(mQ);Ipr=r(E6t,"TFRoFormerForCausalLM"),E6t.forEach(t),qpr=r(OSe," (RoFormer model)"),OSe.forEach(t),Npr=i(Ce),b7=n(Ce,"LI",{});var VSe=s(b7);y2e=n(VSe,"STRONG",{});var C6t=s(y2e);jpr=r(C6t,"transfo-xl"),C6t.forEach(t),Dpr=r(VSe," \u2014 "),gQ=n(VSe,"A",{href:!0});var w6t=s(gQ);Gpr=r(w6t,"TFTransfoXLLMHeadModel"),w6t.forEach(t),Opr=r(VSe," (Transformer-XL model)"),VSe.forEach(t),Vpr=i(Ce),v7=n(Ce,"LI",{});var XSe=s(v7);L2e=n(XSe,"STRONG",{});var A6t=s(L2e);Xpr=r(A6t,"xlm"),A6t.forEach(t),zpr=r(XSe," \u2014 "),hQ=n(XSe,"A",{href:!0});var y6t=s(hQ);Wpr=r(y6t,"TFXLMWithLMHeadModel"),y6t.forEach(t),Qpr=r(XSe," (XLM model)"),XSe.forEach(t),Hpr=i(Ce),F7=n(Ce,"LI",{});var zSe=s(F7);x2e=n(zSe,"STRONG",{});var L6t=s(x2e);Upr=r(L6t,"xlnet"),L6t.forEach(t),Jpr=r(zSe," \u2014 "),pQ=n(zSe,"A",{href:!0});var x6t=s(pQ);Ypr=r(x6t,"TFXLNetLMHeadModel"),x6t.forEach(t),Kpr=r(zSe," (XLNet model)"),zSe.forEach(t),Ce.forEach(t),Zpr=i(ul),T(T7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),hNe=i(f),Ud=n(f,"H2",{class:!0});var FDe=s(Ud);M7=n(FDe,"A",{id:!0,class:!0,href:!0});var $6t=s(M7);$2e=n($6t,"SPAN",{});var k6t=s($2e);T(fL.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),e_r=i(FDe),k2e=n(FDe,"SPAN",{});var S6t=s(k2e);o_r=r(S6t,"TFAutoModelForImageClassification"),S6t.forEach(t),FDe.forEach(t),pNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(mL.$$.fragment,bl),r_r=i(bl),Jd=n(bl,"P",{});var OZ=s(Jd);t_r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=n(OZ,"A",{href:!0});var R6t=s(_Q);a_r=r(R6t,"from_pretrained()"),R6t.forEach(t),n_r=r(OZ," class method or the "),uQ=n(OZ,"A",{href:!0});var P6t=s(uQ);s_r=r(P6t,"from_config()"),P6t.forEach(t),l_r=r(OZ,` class
method.`),OZ.forEach(t),i_r=i(bl),gL=n(bl,"P",{});var TDe=s(gL);d_r=r(TDe,"This class cannot be instantiated directly using "),S2e=n(TDe,"CODE",{});var B6t=s(S2e);c_r=r(B6t,"__init__()"),B6t.forEach(t),f_r=r(TDe," (throws an error)."),TDe.forEach(t),m_r=i(bl),$t=n(bl,"DIV",{class:!0});var bw=s($t);T(hL.$$.fragment,bw),g_r=i(bw),R2e=n(bw,"P",{});var I6t=s(R2e);h_r=r(I6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),I6t.forEach(t),p_r=i(bw),Yd=n(bw,"P",{});var VZ=s(Yd);__r=r(VZ,`Note:
Loading a model from its configuration file does `),P2e=n(VZ,"STRONG",{});var q6t=s(P2e);u_r=r(q6t,"not"),q6t.forEach(t),b_r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(VZ,"A",{href:!0});var N6t=s(bQ);v_r=r(N6t,"from_pretrained()"),N6t.forEach(t),F_r=r(VZ," to load the model weights."),VZ.forEach(t),T_r=i(bw),T(E7.$$.fragment,bw),bw.forEach(t),M_r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(pL.$$.fragment,vl),E_r=i(vl),B2e=n(vl,"P",{});var j6t=s(B2e);C_r=r(j6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j6t.forEach(t),w_r=i(vl),on=n(vl,"P",{});var vw=s(on);A_r=r(vw,"The model class to instantiate is selected based on the "),I2e=n(vw,"CODE",{});var D6t=s(I2e);y_r=r(D6t,"model_type"),D6t.forEach(t),L_r=r(vw,` property of the config object (either
passed as an argument or loaded from `),q2e=n(vw,"CODE",{});var G6t=s(q2e);x_r=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),$_r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(vw,"CODE",{});var O6t=s(N2e);k_r=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),S_r=r(vw,":"),vw.forEach(t),R_r=i(vl),rn=n(vl,"UL",{});var Fw=s(rn);C7=n(Fw,"LI",{});var WSe=s(C7);j2e=n(WSe,"STRONG",{});var V6t=s(j2e);P_r=r(V6t,"convnext"),V6t.forEach(t),B_r=r(WSe," \u2014 "),vQ=n(WSe,"A",{href:!0});var X6t=s(vQ);I_r=r(X6t,"TFConvNextForImageClassification"),X6t.forEach(t),q_r=r(WSe," (ConvNext model)"),WSe.forEach(t),N_r=i(Fw),w7=n(Fw,"LI",{});var QSe=s(w7);D2e=n(QSe,"STRONG",{});var z6t=s(D2e);j_r=r(z6t,"data2vec-vision"),z6t.forEach(t),D_r=r(QSe," \u2014 "),FQ=n(QSe,"A",{href:!0});var W6t=s(FQ);G_r=r(W6t,"TFData2VecVisionForImageClassification"),W6t.forEach(t),O_r=r(QSe," (Data2VecVision model)"),QSe.forEach(t),V_r=i(Fw),A7=n(Fw,"LI",{});var HSe=s(A7);G2e=n(HSe,"STRONG",{});var Q6t=s(G2e);X_r=r(Q6t,"swin"),Q6t.forEach(t),z_r=r(HSe," \u2014 "),TQ=n(HSe,"A",{href:!0});var H6t=s(TQ);W_r=r(H6t,"TFSwinForImageClassification"),H6t.forEach(t),Q_r=r(HSe," (Swin model)"),HSe.forEach(t),H_r=i(Fw),y7=n(Fw,"LI",{});var USe=s(y7);O2e=n(USe,"STRONG",{});var U6t=s(O2e);U_r=r(U6t,"vit"),U6t.forEach(t),J_r=r(USe," \u2014 "),MQ=n(USe,"A",{href:!0});var J6t=s(MQ);Y_r=r(J6t,"TFViTForImageClassification"),J6t.forEach(t),K_r=r(USe," (ViT model)"),USe.forEach(t),Fw.forEach(t),Z_r=i(vl),T(L7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),_Ne=i(f),Kd=n(f,"H2",{class:!0});var MDe=s(Kd);x7=n(MDe,"A",{id:!0,class:!0,href:!0});var Y6t=s(x7);V2e=n(Y6t,"SPAN",{});var K6t=s(V2e);T(_L.$$.fragment,K6t),K6t.forEach(t),Y6t.forEach(t),eur=i(MDe),X2e=n(MDe,"SPAN",{});var Z6t=s(X2e);our=r(Z6t,"TFAutoModelForMaskedLM"),Z6t.forEach(t),MDe.forEach(t),uNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(uL.$$.fragment,Fl),rur=i(Fl),Zd=n(Fl,"P",{});var XZ=s(Zd);tur=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=n(XZ,"A",{href:!0});var eTt=s(EQ);aur=r(eTt,"from_pretrained()"),eTt.forEach(t),nur=r(XZ," class method or the "),CQ=n(XZ,"A",{href:!0});var oTt=s(CQ);sur=r(oTt,"from_config()"),oTt.forEach(t),lur=r(XZ,` class
method.`),XZ.forEach(t),iur=i(Fl),bL=n(Fl,"P",{});var EDe=s(bL);dur=r(EDe,"This class cannot be instantiated directly using "),z2e=n(EDe,"CODE",{});var rTt=s(z2e);cur=r(rTt,"__init__()"),rTt.forEach(t),fur=r(EDe," (throws an error)."),EDe.forEach(t),mur=i(Fl),kt=n(Fl,"DIV",{class:!0});var Tw=s(kt);T(vL.$$.fragment,Tw),gur=i(Tw),W2e=n(Tw,"P",{});var tTt=s(W2e);hur=r(tTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tTt.forEach(t),pur=i(Tw),ec=n(Tw,"P",{});var zZ=s(ec);_ur=r(zZ,`Note:
Loading a model from its configuration file does `),Q2e=n(zZ,"STRONG",{});var aTt=s(Q2e);uur=r(aTt,"not"),aTt.forEach(t),bur=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(zZ,"A",{href:!0});var nTt=s(wQ);vur=r(nTt,"from_pretrained()"),nTt.forEach(t),Fur=r(zZ," to load the model weights."),zZ.forEach(t),Tur=i(Tw),T($7.$$.fragment,Tw),Tw.forEach(t),Mur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(FL.$$.fragment,Tl),Eur=i(Tl),H2e=n(Tl,"P",{});var sTt=s(H2e);Cur=r(sTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sTt.forEach(t),wur=i(Tl),tn=n(Tl,"P",{});var Mw=s(tn);Aur=r(Mw,"The model class to instantiate is selected based on the "),U2e=n(Mw,"CODE",{});var lTt=s(U2e);yur=r(lTt,"model_type"),lTt.forEach(t),Lur=r(Mw,` property of the config object (either
passed as an argument or loaded from `),J2e=n(Mw,"CODE",{});var iTt=s(J2e);xur=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),$ur=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(Mw,"CODE",{});var dTt=s(Y2e);kur=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),Sur=r(Mw,":"),Mw.forEach(t),Rur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);k7=n(fe,"LI",{});var JSe=s(k7);K2e=n(JSe,"STRONG",{});var cTt=s(K2e);Pur=r(cTt,"albert"),cTt.forEach(t),Bur=r(JSe," \u2014 "),AQ=n(JSe,"A",{href:!0});var fTt=s(AQ);Iur=r(fTt,"TFAlbertForMaskedLM"),fTt.forEach(t),qur=r(JSe," (ALBERT model)"),JSe.forEach(t),Nur=i(fe),S7=n(fe,"LI",{});var YSe=s(S7);Z2e=n(YSe,"STRONG",{});var mTt=s(Z2e);jur=r(mTt,"bert"),mTt.forEach(t),Dur=r(YSe," \u2014 "),yQ=n(YSe,"A",{href:!0});var gTt=s(yQ);Gur=r(gTt,"TFBertForMaskedLM"),gTt.forEach(t),Our=r(YSe," (BERT model)"),YSe.forEach(t),Vur=i(fe),R7=n(fe,"LI",{});var KSe=s(R7);eve=n(KSe,"STRONG",{});var hTt=s(eve);Xur=r(hTt,"camembert"),hTt.forEach(t),zur=r(KSe," \u2014 "),LQ=n(KSe,"A",{href:!0});var pTt=s(LQ);Wur=r(pTt,"TFCamembertForMaskedLM"),pTt.forEach(t),Qur=r(KSe," (CamemBERT model)"),KSe.forEach(t),Hur=i(fe),P7=n(fe,"LI",{});var ZSe=s(P7);ove=n(ZSe,"STRONG",{});var _Tt=s(ove);Uur=r(_Tt,"convbert"),_Tt.forEach(t),Jur=r(ZSe," \u2014 "),xQ=n(ZSe,"A",{href:!0});var uTt=s(xQ);Yur=r(uTt,"TFConvBertForMaskedLM"),uTt.forEach(t),Kur=r(ZSe," (ConvBERT model)"),ZSe.forEach(t),Zur=i(fe),B7=n(fe,"LI",{});var eRe=s(B7);rve=n(eRe,"STRONG",{});var bTt=s(rve);e1r=r(bTt,"deberta"),bTt.forEach(t),o1r=r(eRe," \u2014 "),$Q=n(eRe,"A",{href:!0});var vTt=s($Q);r1r=r(vTt,"TFDebertaForMaskedLM"),vTt.forEach(t),t1r=r(eRe," (DeBERTa model)"),eRe.forEach(t),a1r=i(fe),I7=n(fe,"LI",{});var oRe=s(I7);tve=n(oRe,"STRONG",{});var FTt=s(tve);n1r=r(FTt,"deberta-v2"),FTt.forEach(t),s1r=r(oRe," \u2014 "),kQ=n(oRe,"A",{href:!0});var TTt=s(kQ);l1r=r(TTt,"TFDebertaV2ForMaskedLM"),TTt.forEach(t),i1r=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),d1r=i(fe),q7=n(fe,"LI",{});var rRe=s(q7);ave=n(rRe,"STRONG",{});var MTt=s(ave);c1r=r(MTt,"distilbert"),MTt.forEach(t),f1r=r(rRe," \u2014 "),SQ=n(rRe,"A",{href:!0});var ETt=s(SQ);m1r=r(ETt,"TFDistilBertForMaskedLM"),ETt.forEach(t),g1r=r(rRe," (DistilBERT model)"),rRe.forEach(t),h1r=i(fe),N7=n(fe,"LI",{});var tRe=s(N7);nve=n(tRe,"STRONG",{});var CTt=s(nve);p1r=r(CTt,"electra"),CTt.forEach(t),_1r=r(tRe," \u2014 "),RQ=n(tRe,"A",{href:!0});var wTt=s(RQ);u1r=r(wTt,"TFElectraForMaskedLM"),wTt.forEach(t),b1r=r(tRe," (ELECTRA model)"),tRe.forEach(t),v1r=i(fe),j7=n(fe,"LI",{});var aRe=s(j7);sve=n(aRe,"STRONG",{});var ATt=s(sve);F1r=r(ATt,"flaubert"),ATt.forEach(t),T1r=r(aRe," \u2014 "),PQ=n(aRe,"A",{href:!0});var yTt=s(PQ);M1r=r(yTt,"TFFlaubertWithLMHeadModel"),yTt.forEach(t),E1r=r(aRe," (FlauBERT model)"),aRe.forEach(t),C1r=i(fe),D7=n(fe,"LI",{});var nRe=s(D7);lve=n(nRe,"STRONG",{});var LTt=s(lve);w1r=r(LTt,"funnel"),LTt.forEach(t),A1r=r(nRe," \u2014 "),BQ=n(nRe,"A",{href:!0});var xTt=s(BQ);y1r=r(xTt,"TFFunnelForMaskedLM"),xTt.forEach(t),L1r=r(nRe," (Funnel Transformer model)"),nRe.forEach(t),x1r=i(fe),G7=n(fe,"LI",{});var sRe=s(G7);ive=n(sRe,"STRONG",{});var $Tt=s(ive);$1r=r($Tt,"layoutlm"),$Tt.forEach(t),k1r=r(sRe," \u2014 "),IQ=n(sRe,"A",{href:!0});var kTt=s(IQ);S1r=r(kTt,"TFLayoutLMForMaskedLM"),kTt.forEach(t),R1r=r(sRe," (LayoutLM model)"),sRe.forEach(t),P1r=i(fe),O7=n(fe,"LI",{});var lRe=s(O7);dve=n(lRe,"STRONG",{});var STt=s(dve);B1r=r(STt,"longformer"),STt.forEach(t),I1r=r(lRe," \u2014 "),qQ=n(lRe,"A",{href:!0});var RTt=s(qQ);q1r=r(RTt,"TFLongformerForMaskedLM"),RTt.forEach(t),N1r=r(lRe," (Longformer model)"),lRe.forEach(t),j1r=i(fe),V7=n(fe,"LI",{});var iRe=s(V7);cve=n(iRe,"STRONG",{});var PTt=s(cve);D1r=r(PTt,"mobilebert"),PTt.forEach(t),G1r=r(iRe," \u2014 "),NQ=n(iRe,"A",{href:!0});var BTt=s(NQ);O1r=r(BTt,"TFMobileBertForMaskedLM"),BTt.forEach(t),V1r=r(iRe," (MobileBERT model)"),iRe.forEach(t),X1r=i(fe),X7=n(fe,"LI",{});var dRe=s(X7);fve=n(dRe,"STRONG",{});var ITt=s(fve);z1r=r(ITt,"mpnet"),ITt.forEach(t),W1r=r(dRe," \u2014 "),jQ=n(dRe,"A",{href:!0});var qTt=s(jQ);Q1r=r(qTt,"TFMPNetForMaskedLM"),qTt.forEach(t),H1r=r(dRe," (MPNet model)"),dRe.forEach(t),U1r=i(fe),z7=n(fe,"LI",{});var cRe=s(z7);mve=n(cRe,"STRONG",{});var NTt=s(mve);J1r=r(NTt,"rembert"),NTt.forEach(t),Y1r=r(cRe," \u2014 "),DQ=n(cRe,"A",{href:!0});var jTt=s(DQ);K1r=r(jTt,"TFRemBertForMaskedLM"),jTt.forEach(t),Z1r=r(cRe," (RemBERT model)"),cRe.forEach(t),ebr=i(fe),W7=n(fe,"LI",{});var fRe=s(W7);gve=n(fRe,"STRONG",{});var DTt=s(gve);obr=r(DTt,"roberta"),DTt.forEach(t),rbr=r(fRe," \u2014 "),GQ=n(fRe,"A",{href:!0});var GTt=s(GQ);tbr=r(GTt,"TFRobertaForMaskedLM"),GTt.forEach(t),abr=r(fRe," (RoBERTa model)"),fRe.forEach(t),nbr=i(fe),Q7=n(fe,"LI",{});var mRe=s(Q7);hve=n(mRe,"STRONG",{});var OTt=s(hve);sbr=r(OTt,"roformer"),OTt.forEach(t),lbr=r(mRe," \u2014 "),OQ=n(mRe,"A",{href:!0});var VTt=s(OQ);ibr=r(VTt,"TFRoFormerForMaskedLM"),VTt.forEach(t),dbr=r(mRe," (RoFormer model)"),mRe.forEach(t),cbr=i(fe),H7=n(fe,"LI",{});var gRe=s(H7);pve=n(gRe,"STRONG",{});var XTt=s(pve);fbr=r(XTt,"tapas"),XTt.forEach(t),mbr=r(gRe," \u2014 "),VQ=n(gRe,"A",{href:!0});var zTt=s(VQ);gbr=r(zTt,"TFTapasForMaskedLM"),zTt.forEach(t),hbr=r(gRe," (TAPAS model)"),gRe.forEach(t),pbr=i(fe),U7=n(fe,"LI",{});var hRe=s(U7);_ve=n(hRe,"STRONG",{});var WTt=s(_ve);_br=r(WTt,"xlm"),WTt.forEach(t),ubr=r(hRe," \u2014 "),XQ=n(hRe,"A",{href:!0});var QTt=s(XQ);bbr=r(QTt,"TFXLMWithLMHeadModel"),QTt.forEach(t),vbr=r(hRe," (XLM model)"),hRe.forEach(t),Fbr=i(fe),J7=n(fe,"LI",{});var pRe=s(J7);uve=n(pRe,"STRONG",{});var HTt=s(uve);Tbr=r(HTt,"xlm-roberta"),HTt.forEach(t),Mbr=r(pRe," \u2014 "),zQ=n(pRe,"A",{href:!0});var UTt=s(zQ);Ebr=r(UTt,"TFXLMRobertaForMaskedLM"),UTt.forEach(t),Cbr=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),fe.forEach(t),wbr=i(Tl),T(Y7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),bNe=i(f),oc=n(f,"H2",{class:!0});var CDe=s(oc);K7=n(CDe,"A",{id:!0,class:!0,href:!0});var JTt=s(K7);bve=n(JTt,"SPAN",{});var YTt=s(bve);T(TL.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),Abr=i(CDe),vve=n(CDe,"SPAN",{});var KTt=s(vve);ybr=r(KTt,"TFAutoModelForSeq2SeqLM"),KTt.forEach(t),CDe.forEach(t),vNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(ML.$$.fragment,Ml),Lbr=i(Ml),rc=n(Ml,"P",{});var WZ=s(rc);xbr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WQ=n(WZ,"A",{href:!0});var ZTt=s(WQ);$br=r(ZTt,"from_pretrained()"),ZTt.forEach(t),kbr=r(WZ," class method or the "),QQ=n(WZ,"A",{href:!0});var e8t=s(QQ);Sbr=r(e8t,"from_config()"),e8t.forEach(t),Rbr=r(WZ,` class
method.`),WZ.forEach(t),Pbr=i(Ml),EL=n(Ml,"P",{});var wDe=s(EL);Bbr=r(wDe,"This class cannot be instantiated directly using "),Fve=n(wDe,"CODE",{});var o8t=s(Fve);Ibr=r(o8t,"__init__()"),o8t.forEach(t),qbr=r(wDe," (throws an error)."),wDe.forEach(t),Nbr=i(Ml),St=n(Ml,"DIV",{class:!0});var Ew=s(St);T(CL.$$.fragment,Ew),jbr=i(Ew),Tve=n(Ew,"P",{});var r8t=s(Tve);Dbr=r(r8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r8t.forEach(t),Gbr=i(Ew),tc=n(Ew,"P",{});var QZ=s(tc);Obr=r(QZ,`Note:
Loading a model from its configuration file does `),Mve=n(QZ,"STRONG",{});var t8t=s(Mve);Vbr=r(t8t,"not"),t8t.forEach(t),Xbr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(QZ,"A",{href:!0});var a8t=s(HQ);zbr=r(a8t,"from_pretrained()"),a8t.forEach(t),Wbr=r(QZ," to load the model weights."),QZ.forEach(t),Qbr=i(Ew),T(Z7.$$.fragment,Ew),Ew.forEach(t),Hbr=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(wL.$$.fragment,El),Ubr=i(El),Eve=n(El,"P",{});var n8t=s(Eve);Jbr=r(n8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),n8t.forEach(t),Ybr=i(El),an=n(El,"P",{});var Cw=s(an);Kbr=r(Cw,"The model class to instantiate is selected based on the "),Cve=n(Cw,"CODE",{});var s8t=s(Cve);Zbr=r(s8t,"model_type"),s8t.forEach(t),e2r=r(Cw,` property of the config object (either
passed as an argument or loaded from `),wve=n(Cw,"CODE",{});var l8t=s(wve);o2r=r(l8t,"pretrained_model_name_or_path"),l8t.forEach(t),r2r=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(Cw,"CODE",{});var i8t=s(Ave);t2r=r(i8t,"pretrained_model_name_or_path"),i8t.forEach(t),a2r=r(Cw,":"),Cw.forEach(t),n2r=i(El),ye=n(El,"UL",{});var Be=s(ye);eM=n(Be,"LI",{});var _Re=s(eM);yve=n(_Re,"STRONG",{});var d8t=s(yve);s2r=r(d8t,"bart"),d8t.forEach(t),l2r=r(_Re," \u2014 "),UQ=n(_Re,"A",{href:!0});var c8t=s(UQ);i2r=r(c8t,"TFBartForConditionalGeneration"),c8t.forEach(t),d2r=r(_Re," (BART model)"),_Re.forEach(t),c2r=i(Be),oM=n(Be,"LI",{});var uRe=s(oM);Lve=n(uRe,"STRONG",{});var f8t=s(Lve);f2r=r(f8t,"blenderbot"),f8t.forEach(t),m2r=r(uRe," \u2014 "),JQ=n(uRe,"A",{href:!0});var m8t=s(JQ);g2r=r(m8t,"TFBlenderbotForConditionalGeneration"),m8t.forEach(t),h2r=r(uRe," (Blenderbot model)"),uRe.forEach(t),p2r=i(Be),rM=n(Be,"LI",{});var bRe=s(rM);xve=n(bRe,"STRONG",{});var g8t=s(xve);_2r=r(g8t,"blenderbot-small"),g8t.forEach(t),u2r=r(bRe," \u2014 "),YQ=n(bRe,"A",{href:!0});var h8t=s(YQ);b2r=r(h8t,"TFBlenderbotSmallForConditionalGeneration"),h8t.forEach(t),v2r=r(bRe," (BlenderbotSmall model)"),bRe.forEach(t),F2r=i(Be),tM=n(Be,"LI",{});var vRe=s(tM);$ve=n(vRe,"STRONG",{});var p8t=s($ve);T2r=r(p8t,"encoder-decoder"),p8t.forEach(t),M2r=r(vRe," \u2014 "),KQ=n(vRe,"A",{href:!0});var _8t=s(KQ);E2r=r(_8t,"TFEncoderDecoderModel"),_8t.forEach(t),C2r=r(vRe," (Encoder decoder model)"),vRe.forEach(t),w2r=i(Be),aM=n(Be,"LI",{});var FRe=s(aM);kve=n(FRe,"STRONG",{});var u8t=s(kve);A2r=r(u8t,"led"),u8t.forEach(t),y2r=r(FRe," \u2014 "),ZQ=n(FRe,"A",{href:!0});var b8t=s(ZQ);L2r=r(b8t,"TFLEDForConditionalGeneration"),b8t.forEach(t),x2r=r(FRe," (LED model)"),FRe.forEach(t),$2r=i(Be),nM=n(Be,"LI",{});var TRe=s(nM);Sve=n(TRe,"STRONG",{});var v8t=s(Sve);k2r=r(v8t,"marian"),v8t.forEach(t),S2r=r(TRe," \u2014 "),eH=n(TRe,"A",{href:!0});var F8t=s(eH);R2r=r(F8t,"TFMarianMTModel"),F8t.forEach(t),P2r=r(TRe," (Marian model)"),TRe.forEach(t),B2r=i(Be),sM=n(Be,"LI",{});var MRe=s(sM);Rve=n(MRe,"STRONG",{});var T8t=s(Rve);I2r=r(T8t,"mbart"),T8t.forEach(t),q2r=r(MRe," \u2014 "),oH=n(MRe,"A",{href:!0});var M8t=s(oH);N2r=r(M8t,"TFMBartForConditionalGeneration"),M8t.forEach(t),j2r=r(MRe," (mBART model)"),MRe.forEach(t),D2r=i(Be),lM=n(Be,"LI",{});var ERe=s(lM);Pve=n(ERe,"STRONG",{});var E8t=s(Pve);G2r=r(E8t,"mt5"),E8t.forEach(t),O2r=r(ERe," \u2014 "),rH=n(ERe,"A",{href:!0});var C8t=s(rH);V2r=r(C8t,"TFMT5ForConditionalGeneration"),C8t.forEach(t),X2r=r(ERe," (mT5 model)"),ERe.forEach(t),z2r=i(Be),iM=n(Be,"LI",{});var CRe=s(iM);Bve=n(CRe,"STRONG",{});var w8t=s(Bve);W2r=r(w8t,"pegasus"),w8t.forEach(t),Q2r=r(CRe," \u2014 "),tH=n(CRe,"A",{href:!0});var A8t=s(tH);H2r=r(A8t,"TFPegasusForConditionalGeneration"),A8t.forEach(t),U2r=r(CRe," (Pegasus model)"),CRe.forEach(t),J2r=i(Be),dM=n(Be,"LI",{});var wRe=s(dM);Ive=n(wRe,"STRONG",{});var y8t=s(Ive);Y2r=r(y8t,"t5"),y8t.forEach(t),K2r=r(wRe," \u2014 "),aH=n(wRe,"A",{href:!0});var L8t=s(aH);Z2r=r(L8t,"TFT5ForConditionalGeneration"),L8t.forEach(t),evr=r(wRe," (T5 model)"),wRe.forEach(t),Be.forEach(t),ovr=i(El),T(cM.$$.fragment,El),El.forEach(t),Ml.forEach(t),FNe=i(f),ac=n(f,"H2",{class:!0});var ADe=s(ac);fM=n(ADe,"A",{id:!0,class:!0,href:!0});var x8t=s(fM);qve=n(x8t,"SPAN",{});var $8t=s(qve);T(AL.$$.fragment,$8t),$8t.forEach(t),x8t.forEach(t),rvr=i(ADe),Nve=n(ADe,"SPAN",{});var k8t=s(Nve);tvr=r(k8t,"TFAutoModelForSequenceClassification"),k8t.forEach(t),ADe.forEach(t),TNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(yL.$$.fragment,Cl),avr=i(Cl),nc=n(Cl,"P",{});var HZ=s(nc);nvr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=n(HZ,"A",{href:!0});var S8t=s(nH);svr=r(S8t,"from_pretrained()"),S8t.forEach(t),lvr=r(HZ," class method or the "),sH=n(HZ,"A",{href:!0});var R8t=s(sH);ivr=r(R8t,"from_config()"),R8t.forEach(t),dvr=r(HZ,` class
method.`),HZ.forEach(t),cvr=i(Cl),LL=n(Cl,"P",{});var yDe=s(LL);fvr=r(yDe,"This class cannot be instantiated directly using "),jve=n(yDe,"CODE",{});var P8t=s(jve);mvr=r(P8t,"__init__()"),P8t.forEach(t),gvr=r(yDe," (throws an error)."),yDe.forEach(t),hvr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var ww=s(Rt);T(xL.$$.fragment,ww),pvr=i(ww),Dve=n(ww,"P",{});var B8t=s(Dve);_vr=r(B8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B8t.forEach(t),uvr=i(ww),sc=n(ww,"P",{});var UZ=s(sc);bvr=r(UZ,`Note:
Loading a model from its configuration file does `),Gve=n(UZ,"STRONG",{});var I8t=s(Gve);vvr=r(I8t,"not"),I8t.forEach(t),Fvr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(UZ,"A",{href:!0});var q8t=s(lH);Tvr=r(q8t,"from_pretrained()"),q8t.forEach(t),Mvr=r(UZ," to load the model weights."),UZ.forEach(t),Evr=i(ww),T(mM.$$.fragment,ww),ww.forEach(t),Cvr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T($L.$$.fragment,wl),wvr=i(wl),Ove=n(wl,"P",{});var N8t=s(Ove);Avr=r(N8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),N8t.forEach(t),yvr=i(wl),nn=n(wl,"P",{});var Aw=s(nn);Lvr=r(Aw,"The model class to instantiate is selected based on the "),Vve=n(Aw,"CODE",{});var j8t=s(Vve);xvr=r(j8t,"model_type"),j8t.forEach(t),$vr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Xve=n(Aw,"CODE",{});var D8t=s(Xve);kvr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),Svr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(Aw,"CODE",{});var G8t=s(zve);Rvr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),Pvr=r(Aw,":"),Aw.forEach(t),Bvr=i(wl),oe=n(wl,"UL",{});var ae=s(oe);gM=n(ae,"LI",{});var ARe=s(gM);Wve=n(ARe,"STRONG",{});var O8t=s(Wve);Ivr=r(O8t,"albert"),O8t.forEach(t),qvr=r(ARe," \u2014 "),iH=n(ARe,"A",{href:!0});var V8t=s(iH);Nvr=r(V8t,"TFAlbertForSequenceClassification"),V8t.forEach(t),jvr=r(ARe," (ALBERT model)"),ARe.forEach(t),Dvr=i(ae),hM=n(ae,"LI",{});var yRe=s(hM);Qve=n(yRe,"STRONG",{});var X8t=s(Qve);Gvr=r(X8t,"bert"),X8t.forEach(t),Ovr=r(yRe," \u2014 "),dH=n(yRe,"A",{href:!0});var z8t=s(dH);Vvr=r(z8t,"TFBertForSequenceClassification"),z8t.forEach(t),Xvr=r(yRe," (BERT model)"),yRe.forEach(t),zvr=i(ae),pM=n(ae,"LI",{});var LRe=s(pM);Hve=n(LRe,"STRONG",{});var W8t=s(Hve);Wvr=r(W8t,"camembert"),W8t.forEach(t),Qvr=r(LRe," \u2014 "),cH=n(LRe,"A",{href:!0});var Q8t=s(cH);Hvr=r(Q8t,"TFCamembertForSequenceClassification"),Q8t.forEach(t),Uvr=r(LRe," (CamemBERT model)"),LRe.forEach(t),Jvr=i(ae),_M=n(ae,"LI",{});var xRe=s(_M);Uve=n(xRe,"STRONG",{});var H8t=s(Uve);Yvr=r(H8t,"convbert"),H8t.forEach(t),Kvr=r(xRe," \u2014 "),fH=n(xRe,"A",{href:!0});var U8t=s(fH);Zvr=r(U8t,"TFConvBertForSequenceClassification"),U8t.forEach(t),eFr=r(xRe," (ConvBERT model)"),xRe.forEach(t),oFr=i(ae),uM=n(ae,"LI",{});var $Re=s(uM);Jve=n($Re,"STRONG",{});var J8t=s(Jve);rFr=r(J8t,"ctrl"),J8t.forEach(t),tFr=r($Re," \u2014 "),mH=n($Re,"A",{href:!0});var Y8t=s(mH);aFr=r(Y8t,"TFCTRLForSequenceClassification"),Y8t.forEach(t),nFr=r($Re," (CTRL model)"),$Re.forEach(t),sFr=i(ae),bM=n(ae,"LI",{});var kRe=s(bM);Yve=n(kRe,"STRONG",{});var K8t=s(Yve);lFr=r(K8t,"deberta"),K8t.forEach(t),iFr=r(kRe," \u2014 "),gH=n(kRe,"A",{href:!0});var Z8t=s(gH);dFr=r(Z8t,"TFDebertaForSequenceClassification"),Z8t.forEach(t),cFr=r(kRe," (DeBERTa model)"),kRe.forEach(t),fFr=i(ae),vM=n(ae,"LI",{});var SRe=s(vM);Kve=n(SRe,"STRONG",{});var e7t=s(Kve);mFr=r(e7t,"deberta-v2"),e7t.forEach(t),gFr=r(SRe," \u2014 "),hH=n(SRe,"A",{href:!0});var o7t=s(hH);hFr=r(o7t,"TFDebertaV2ForSequenceClassification"),o7t.forEach(t),pFr=r(SRe," (DeBERTa-v2 model)"),SRe.forEach(t),_Fr=i(ae),FM=n(ae,"LI",{});var RRe=s(FM);Zve=n(RRe,"STRONG",{});var r7t=s(Zve);uFr=r(r7t,"distilbert"),r7t.forEach(t),bFr=r(RRe," \u2014 "),pH=n(RRe,"A",{href:!0});var t7t=s(pH);vFr=r(t7t,"TFDistilBertForSequenceClassification"),t7t.forEach(t),FFr=r(RRe," (DistilBERT model)"),RRe.forEach(t),TFr=i(ae),TM=n(ae,"LI",{});var PRe=s(TM);eFe=n(PRe,"STRONG",{});var a7t=s(eFe);MFr=r(a7t,"electra"),a7t.forEach(t),EFr=r(PRe," \u2014 "),_H=n(PRe,"A",{href:!0});var n7t=s(_H);CFr=r(n7t,"TFElectraForSequenceClassification"),n7t.forEach(t),wFr=r(PRe," (ELECTRA model)"),PRe.forEach(t),AFr=i(ae),MM=n(ae,"LI",{});var BRe=s(MM);oFe=n(BRe,"STRONG",{});var s7t=s(oFe);yFr=r(s7t,"flaubert"),s7t.forEach(t),LFr=r(BRe," \u2014 "),uH=n(BRe,"A",{href:!0});var l7t=s(uH);xFr=r(l7t,"TFFlaubertForSequenceClassification"),l7t.forEach(t),$Fr=r(BRe," (FlauBERT model)"),BRe.forEach(t),kFr=i(ae),EM=n(ae,"LI",{});var IRe=s(EM);rFe=n(IRe,"STRONG",{});var i7t=s(rFe);SFr=r(i7t,"funnel"),i7t.forEach(t),RFr=r(IRe," \u2014 "),bH=n(IRe,"A",{href:!0});var d7t=s(bH);PFr=r(d7t,"TFFunnelForSequenceClassification"),d7t.forEach(t),BFr=r(IRe," (Funnel Transformer model)"),IRe.forEach(t),IFr=i(ae),CM=n(ae,"LI",{});var qRe=s(CM);tFe=n(qRe,"STRONG",{});var c7t=s(tFe);qFr=r(c7t,"gpt2"),c7t.forEach(t),NFr=r(qRe," \u2014 "),vH=n(qRe,"A",{href:!0});var f7t=s(vH);jFr=r(f7t,"TFGPT2ForSequenceClassification"),f7t.forEach(t),DFr=r(qRe," (OpenAI GPT-2 model)"),qRe.forEach(t),GFr=i(ae),wM=n(ae,"LI",{});var NRe=s(wM);aFe=n(NRe,"STRONG",{});var m7t=s(aFe);OFr=r(m7t,"gptj"),m7t.forEach(t),VFr=r(NRe," \u2014 "),FH=n(NRe,"A",{href:!0});var g7t=s(FH);XFr=r(g7t,"TFGPTJForSequenceClassification"),g7t.forEach(t),zFr=r(NRe," (GPT-J model)"),NRe.forEach(t),WFr=i(ae),AM=n(ae,"LI",{});var jRe=s(AM);nFe=n(jRe,"STRONG",{});var h7t=s(nFe);QFr=r(h7t,"layoutlm"),h7t.forEach(t),HFr=r(jRe," \u2014 "),TH=n(jRe,"A",{href:!0});var p7t=s(TH);UFr=r(p7t,"TFLayoutLMForSequenceClassification"),p7t.forEach(t),JFr=r(jRe," (LayoutLM model)"),jRe.forEach(t),YFr=i(ae),yM=n(ae,"LI",{});var DRe=s(yM);sFe=n(DRe,"STRONG",{});var _7t=s(sFe);KFr=r(_7t,"longformer"),_7t.forEach(t),ZFr=r(DRe," \u2014 "),MH=n(DRe,"A",{href:!0});var u7t=s(MH);e6r=r(u7t,"TFLongformerForSequenceClassification"),u7t.forEach(t),o6r=r(DRe," (Longformer model)"),DRe.forEach(t),r6r=i(ae),LM=n(ae,"LI",{});var GRe=s(LM);lFe=n(GRe,"STRONG",{});var b7t=s(lFe);t6r=r(b7t,"mobilebert"),b7t.forEach(t),a6r=r(GRe," \u2014 "),EH=n(GRe,"A",{href:!0});var v7t=s(EH);n6r=r(v7t,"TFMobileBertForSequenceClassification"),v7t.forEach(t),s6r=r(GRe," (MobileBERT model)"),GRe.forEach(t),l6r=i(ae),xM=n(ae,"LI",{});var ORe=s(xM);iFe=n(ORe,"STRONG",{});var F7t=s(iFe);i6r=r(F7t,"mpnet"),F7t.forEach(t),d6r=r(ORe," \u2014 "),CH=n(ORe,"A",{href:!0});var T7t=s(CH);c6r=r(T7t,"TFMPNetForSequenceClassification"),T7t.forEach(t),f6r=r(ORe," (MPNet model)"),ORe.forEach(t),m6r=i(ae),$M=n(ae,"LI",{});var VRe=s($M);dFe=n(VRe,"STRONG",{});var M7t=s(dFe);g6r=r(M7t,"openai-gpt"),M7t.forEach(t),h6r=r(VRe," \u2014 "),wH=n(VRe,"A",{href:!0});var E7t=s(wH);p6r=r(E7t,"TFOpenAIGPTForSequenceClassification"),E7t.forEach(t),_6r=r(VRe," (OpenAI GPT model)"),VRe.forEach(t),u6r=i(ae),kM=n(ae,"LI",{});var XRe=s(kM);cFe=n(XRe,"STRONG",{});var C7t=s(cFe);b6r=r(C7t,"rembert"),C7t.forEach(t),v6r=r(XRe," \u2014 "),AH=n(XRe,"A",{href:!0});var w7t=s(AH);F6r=r(w7t,"TFRemBertForSequenceClassification"),w7t.forEach(t),T6r=r(XRe," (RemBERT model)"),XRe.forEach(t),M6r=i(ae),SM=n(ae,"LI",{});var zRe=s(SM);fFe=n(zRe,"STRONG",{});var A7t=s(fFe);E6r=r(A7t,"roberta"),A7t.forEach(t),C6r=r(zRe," \u2014 "),yH=n(zRe,"A",{href:!0});var y7t=s(yH);w6r=r(y7t,"TFRobertaForSequenceClassification"),y7t.forEach(t),A6r=r(zRe," (RoBERTa model)"),zRe.forEach(t),y6r=i(ae),RM=n(ae,"LI",{});var WRe=s(RM);mFe=n(WRe,"STRONG",{});var L7t=s(mFe);L6r=r(L7t,"roformer"),L7t.forEach(t),x6r=r(WRe," \u2014 "),LH=n(WRe,"A",{href:!0});var x7t=s(LH);$6r=r(x7t,"TFRoFormerForSequenceClassification"),x7t.forEach(t),k6r=r(WRe," (RoFormer model)"),WRe.forEach(t),S6r=i(ae),PM=n(ae,"LI",{});var QRe=s(PM);gFe=n(QRe,"STRONG",{});var $7t=s(gFe);R6r=r($7t,"tapas"),$7t.forEach(t),P6r=r(QRe," \u2014 "),xH=n(QRe,"A",{href:!0});var k7t=s(xH);B6r=r(k7t,"TFTapasForSequenceClassification"),k7t.forEach(t),I6r=r(QRe," (TAPAS model)"),QRe.forEach(t),q6r=i(ae),BM=n(ae,"LI",{});var HRe=s(BM);hFe=n(HRe,"STRONG",{});var S7t=s(hFe);N6r=r(S7t,"transfo-xl"),S7t.forEach(t),j6r=r(HRe," \u2014 "),$H=n(HRe,"A",{href:!0});var R7t=s($H);D6r=r(R7t,"TFTransfoXLForSequenceClassification"),R7t.forEach(t),G6r=r(HRe," (Transformer-XL model)"),HRe.forEach(t),O6r=i(ae),IM=n(ae,"LI",{});var URe=s(IM);pFe=n(URe,"STRONG",{});var P7t=s(pFe);V6r=r(P7t,"xlm"),P7t.forEach(t),X6r=r(URe," \u2014 "),kH=n(URe,"A",{href:!0});var B7t=s(kH);z6r=r(B7t,"TFXLMForSequenceClassification"),B7t.forEach(t),W6r=r(URe," (XLM model)"),URe.forEach(t),Q6r=i(ae),qM=n(ae,"LI",{});var JRe=s(qM);_Fe=n(JRe,"STRONG",{});var I7t=s(_Fe);H6r=r(I7t,"xlm-roberta"),I7t.forEach(t),U6r=r(JRe," \u2014 "),SH=n(JRe,"A",{href:!0});var q7t=s(SH);J6r=r(q7t,"TFXLMRobertaForSequenceClassification"),q7t.forEach(t),Y6r=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),K6r=i(ae),NM=n(ae,"LI",{});var YRe=s(NM);uFe=n(YRe,"STRONG",{});var N7t=s(uFe);Z6r=r(N7t,"xlnet"),N7t.forEach(t),eTr=r(YRe," \u2014 "),RH=n(YRe,"A",{href:!0});var j7t=s(RH);oTr=r(j7t,"TFXLNetForSequenceClassification"),j7t.forEach(t),rTr=r(YRe," (XLNet model)"),YRe.forEach(t),ae.forEach(t),tTr=i(wl),T(jM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),MNe=i(f),lc=n(f,"H2",{class:!0});var LDe=s(lc);DM=n(LDe,"A",{id:!0,class:!0,href:!0});var D7t=s(DM);bFe=n(D7t,"SPAN",{});var G7t=s(bFe);T(kL.$$.fragment,G7t),G7t.forEach(t),D7t.forEach(t),aTr=i(LDe),vFe=n(LDe,"SPAN",{});var O7t=s(vFe);nTr=r(O7t,"TFAutoModelForMultipleChoice"),O7t.forEach(t),LDe.forEach(t),ENe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(SL.$$.fragment,Al),sTr=i(Al),ic=n(Al,"P",{});var JZ=s(ic);lTr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PH=n(JZ,"A",{href:!0});var V7t=s(PH);iTr=r(V7t,"from_pretrained()"),V7t.forEach(t),dTr=r(JZ," class method or the "),BH=n(JZ,"A",{href:!0});var X7t=s(BH);cTr=r(X7t,"from_config()"),X7t.forEach(t),fTr=r(JZ,` class
method.`),JZ.forEach(t),mTr=i(Al),RL=n(Al,"P",{});var xDe=s(RL);gTr=r(xDe,"This class cannot be instantiated directly using "),FFe=n(xDe,"CODE",{});var z7t=s(FFe);hTr=r(z7t,"__init__()"),z7t.forEach(t),pTr=r(xDe," (throws an error)."),xDe.forEach(t),_Tr=i(Al),Pt=n(Al,"DIV",{class:!0});var yw=s(Pt);T(PL.$$.fragment,yw),uTr=i(yw),TFe=n(yw,"P",{});var W7t=s(TFe);bTr=r(W7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),W7t.forEach(t),vTr=i(yw),dc=n(yw,"P",{});var YZ=s(dc);FTr=r(YZ,`Note:
Loading a model from its configuration file does `),MFe=n(YZ,"STRONG",{});var Q7t=s(MFe);TTr=r(Q7t,"not"),Q7t.forEach(t),MTr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(YZ,"A",{href:!0});var H7t=s(IH);ETr=r(H7t,"from_pretrained()"),H7t.forEach(t),CTr=r(YZ," to load the model weights."),YZ.forEach(t),wTr=i(yw),T(GM.$$.fragment,yw),yw.forEach(t),ATr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(BL.$$.fragment,yl),yTr=i(yl),EFe=n(yl,"P",{});var U7t=s(EFe);LTr=r(U7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U7t.forEach(t),xTr=i(yl),sn=n(yl,"P",{});var Lw=s(sn);$Tr=r(Lw,"The model class to instantiate is selected based on the "),CFe=n(Lw,"CODE",{});var J7t=s(CFe);kTr=r(J7t,"model_type"),J7t.forEach(t),STr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),wFe=n(Lw,"CODE",{});var Y7t=s(wFe);RTr=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),PTr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(Lw,"CODE",{});var K7t=s(AFe);BTr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),ITr=r(Lw,":"),Lw.forEach(t),qTr=i(yl),he=n(yl,"UL",{});var ue=s(he);OM=n(ue,"LI",{});var KRe=s(OM);yFe=n(KRe,"STRONG",{});var Z7t=s(yFe);NTr=r(Z7t,"albert"),Z7t.forEach(t),jTr=r(KRe," \u2014 "),qH=n(KRe,"A",{href:!0});var eMt=s(qH);DTr=r(eMt,"TFAlbertForMultipleChoice"),eMt.forEach(t),GTr=r(KRe," (ALBERT model)"),KRe.forEach(t),OTr=i(ue),VM=n(ue,"LI",{});var ZRe=s(VM);LFe=n(ZRe,"STRONG",{});var oMt=s(LFe);VTr=r(oMt,"bert"),oMt.forEach(t),XTr=r(ZRe," \u2014 "),NH=n(ZRe,"A",{href:!0});var rMt=s(NH);zTr=r(rMt,"TFBertForMultipleChoice"),rMt.forEach(t),WTr=r(ZRe," (BERT model)"),ZRe.forEach(t),QTr=i(ue),XM=n(ue,"LI",{});var ePe=s(XM);xFe=n(ePe,"STRONG",{});var tMt=s(xFe);HTr=r(tMt,"camembert"),tMt.forEach(t),UTr=r(ePe," \u2014 "),jH=n(ePe,"A",{href:!0});var aMt=s(jH);JTr=r(aMt,"TFCamembertForMultipleChoice"),aMt.forEach(t),YTr=r(ePe," (CamemBERT model)"),ePe.forEach(t),KTr=i(ue),zM=n(ue,"LI",{});var oPe=s(zM);$Fe=n(oPe,"STRONG",{});var nMt=s($Fe);ZTr=r(nMt,"convbert"),nMt.forEach(t),e8r=r(oPe," \u2014 "),DH=n(oPe,"A",{href:!0});var sMt=s(DH);o8r=r(sMt,"TFConvBertForMultipleChoice"),sMt.forEach(t),r8r=r(oPe," (ConvBERT model)"),oPe.forEach(t),t8r=i(ue),WM=n(ue,"LI",{});var rPe=s(WM);kFe=n(rPe,"STRONG",{});var lMt=s(kFe);a8r=r(lMt,"distilbert"),lMt.forEach(t),n8r=r(rPe," \u2014 "),GH=n(rPe,"A",{href:!0});var iMt=s(GH);s8r=r(iMt,"TFDistilBertForMultipleChoice"),iMt.forEach(t),l8r=r(rPe," (DistilBERT model)"),rPe.forEach(t),i8r=i(ue),QM=n(ue,"LI",{});var tPe=s(QM);SFe=n(tPe,"STRONG",{});var dMt=s(SFe);d8r=r(dMt,"electra"),dMt.forEach(t),c8r=r(tPe," \u2014 "),OH=n(tPe,"A",{href:!0});var cMt=s(OH);f8r=r(cMt,"TFElectraForMultipleChoice"),cMt.forEach(t),m8r=r(tPe," (ELECTRA model)"),tPe.forEach(t),g8r=i(ue),HM=n(ue,"LI",{});var aPe=s(HM);RFe=n(aPe,"STRONG",{});var fMt=s(RFe);h8r=r(fMt,"flaubert"),fMt.forEach(t),p8r=r(aPe," \u2014 "),VH=n(aPe,"A",{href:!0});var mMt=s(VH);_8r=r(mMt,"TFFlaubertForMultipleChoice"),mMt.forEach(t),u8r=r(aPe," (FlauBERT model)"),aPe.forEach(t),b8r=i(ue),UM=n(ue,"LI",{});var nPe=s(UM);PFe=n(nPe,"STRONG",{});var gMt=s(PFe);v8r=r(gMt,"funnel"),gMt.forEach(t),F8r=r(nPe," \u2014 "),XH=n(nPe,"A",{href:!0});var hMt=s(XH);T8r=r(hMt,"TFFunnelForMultipleChoice"),hMt.forEach(t),M8r=r(nPe," (Funnel Transformer model)"),nPe.forEach(t),E8r=i(ue),JM=n(ue,"LI",{});var sPe=s(JM);BFe=n(sPe,"STRONG",{});var pMt=s(BFe);C8r=r(pMt,"longformer"),pMt.forEach(t),w8r=r(sPe," \u2014 "),zH=n(sPe,"A",{href:!0});var _Mt=s(zH);A8r=r(_Mt,"TFLongformerForMultipleChoice"),_Mt.forEach(t),y8r=r(sPe," (Longformer model)"),sPe.forEach(t),L8r=i(ue),YM=n(ue,"LI",{});var lPe=s(YM);IFe=n(lPe,"STRONG",{});var uMt=s(IFe);x8r=r(uMt,"mobilebert"),uMt.forEach(t),$8r=r(lPe," \u2014 "),WH=n(lPe,"A",{href:!0});var bMt=s(WH);k8r=r(bMt,"TFMobileBertForMultipleChoice"),bMt.forEach(t),S8r=r(lPe," (MobileBERT model)"),lPe.forEach(t),R8r=i(ue),KM=n(ue,"LI",{});var iPe=s(KM);qFe=n(iPe,"STRONG",{});var vMt=s(qFe);P8r=r(vMt,"mpnet"),vMt.forEach(t),B8r=r(iPe," \u2014 "),QH=n(iPe,"A",{href:!0});var FMt=s(QH);I8r=r(FMt,"TFMPNetForMultipleChoice"),FMt.forEach(t),q8r=r(iPe," (MPNet model)"),iPe.forEach(t),N8r=i(ue),ZM=n(ue,"LI",{});var dPe=s(ZM);NFe=n(dPe,"STRONG",{});var TMt=s(NFe);j8r=r(TMt,"rembert"),TMt.forEach(t),D8r=r(dPe," \u2014 "),HH=n(dPe,"A",{href:!0});var MMt=s(HH);G8r=r(MMt,"TFRemBertForMultipleChoice"),MMt.forEach(t),O8r=r(dPe," (RemBERT model)"),dPe.forEach(t),V8r=i(ue),e4=n(ue,"LI",{});var cPe=s(e4);jFe=n(cPe,"STRONG",{});var EMt=s(jFe);X8r=r(EMt,"roberta"),EMt.forEach(t),z8r=r(cPe," \u2014 "),UH=n(cPe,"A",{href:!0});var CMt=s(UH);W8r=r(CMt,"TFRobertaForMultipleChoice"),CMt.forEach(t),Q8r=r(cPe," (RoBERTa model)"),cPe.forEach(t),H8r=i(ue),o4=n(ue,"LI",{});var fPe=s(o4);DFe=n(fPe,"STRONG",{});var wMt=s(DFe);U8r=r(wMt,"roformer"),wMt.forEach(t),J8r=r(fPe," \u2014 "),JH=n(fPe,"A",{href:!0});var AMt=s(JH);Y8r=r(AMt,"TFRoFormerForMultipleChoice"),AMt.forEach(t),K8r=r(fPe," (RoFormer model)"),fPe.forEach(t),Z8r=i(ue),r4=n(ue,"LI",{});var mPe=s(r4);GFe=n(mPe,"STRONG",{});var yMt=s(GFe);e7r=r(yMt,"xlm"),yMt.forEach(t),o7r=r(mPe," \u2014 "),YH=n(mPe,"A",{href:!0});var LMt=s(YH);r7r=r(LMt,"TFXLMForMultipleChoice"),LMt.forEach(t),t7r=r(mPe," (XLM model)"),mPe.forEach(t),a7r=i(ue),t4=n(ue,"LI",{});var gPe=s(t4);OFe=n(gPe,"STRONG",{});var xMt=s(OFe);n7r=r(xMt,"xlm-roberta"),xMt.forEach(t),s7r=r(gPe," \u2014 "),KH=n(gPe,"A",{href:!0});var $Mt=s(KH);l7r=r($Mt,"TFXLMRobertaForMultipleChoice"),$Mt.forEach(t),i7r=r(gPe," (XLM-RoBERTa model)"),gPe.forEach(t),d7r=i(ue),a4=n(ue,"LI",{});var hPe=s(a4);VFe=n(hPe,"STRONG",{});var kMt=s(VFe);c7r=r(kMt,"xlnet"),kMt.forEach(t),f7r=r(hPe," \u2014 "),ZH=n(hPe,"A",{href:!0});var SMt=s(ZH);m7r=r(SMt,"TFXLNetForMultipleChoice"),SMt.forEach(t),g7r=r(hPe," (XLNet model)"),hPe.forEach(t),ue.forEach(t),h7r=i(yl),T(n4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),CNe=i(f),cc=n(f,"H2",{class:!0});var $De=s(cc);s4=n($De,"A",{id:!0,class:!0,href:!0});var RMt=s(s4);XFe=n(RMt,"SPAN",{});var PMt=s(XFe);T(IL.$$.fragment,PMt),PMt.forEach(t),RMt.forEach(t),p7r=i($De),zFe=n($De,"SPAN",{});var BMt=s(zFe);_7r=r(BMt,"TFAutoModelForNextSentencePrediction"),BMt.forEach(t),$De.forEach(t),wNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(qL.$$.fragment,Ll),u7r=i(Ll),fc=n(Ll,"P",{});var KZ=s(fc);b7r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=n(KZ,"A",{href:!0});var IMt=s(eU);v7r=r(IMt,"from_pretrained()"),IMt.forEach(t),F7r=r(KZ," class method or the "),oU=n(KZ,"A",{href:!0});var qMt=s(oU);T7r=r(qMt,"from_config()"),qMt.forEach(t),M7r=r(KZ,` class
method.`),KZ.forEach(t),E7r=i(Ll),NL=n(Ll,"P",{});var kDe=s(NL);C7r=r(kDe,"This class cannot be instantiated directly using "),WFe=n(kDe,"CODE",{});var NMt=s(WFe);w7r=r(NMt,"__init__()"),NMt.forEach(t),A7r=r(kDe," (throws an error)."),kDe.forEach(t),y7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var xw=s(Bt);T(jL.$$.fragment,xw),L7r=i(xw),QFe=n(xw,"P",{});var jMt=s(QFe);x7r=r(jMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jMt.forEach(t),$7r=i(xw),mc=n(xw,"P",{});var ZZ=s(mc);k7r=r(ZZ,`Note:
Loading a model from its configuration file does `),HFe=n(ZZ,"STRONG",{});var DMt=s(HFe);S7r=r(DMt,"not"),DMt.forEach(t),R7r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(ZZ,"A",{href:!0});var GMt=s(rU);P7r=r(GMt,"from_pretrained()"),GMt.forEach(t),B7r=r(ZZ," to load the model weights."),ZZ.forEach(t),I7r=i(xw),T(l4.$$.fragment,xw),xw.forEach(t),q7r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(DL.$$.fragment,xl),N7r=i(xl),UFe=n(xl,"P",{});var OMt=s(UFe);j7r=r(OMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OMt.forEach(t),D7r=i(xl),ln=n(xl,"P",{});var $w=s(ln);G7r=r($w,"The model class to instantiate is selected based on the "),JFe=n($w,"CODE",{});var VMt=s(JFe);O7r=r(VMt,"model_type"),VMt.forEach(t),V7r=r($w,` property of the config object (either
passed as an argument or loaded from `),YFe=n($w,"CODE",{});var XMt=s(YFe);X7r=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),z7r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n($w,"CODE",{});var zMt=s(KFe);W7r=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),Q7r=r($w,":"),$w.forEach(t),H7r=i(xl),GL=n(xl,"UL",{});var SDe=s(GL);i4=n(SDe,"LI",{});var pPe=s(i4);ZFe=n(pPe,"STRONG",{});var WMt=s(ZFe);U7r=r(WMt,"bert"),WMt.forEach(t),J7r=r(pPe," \u2014 "),tU=n(pPe,"A",{href:!0});var QMt=s(tU);Y7r=r(QMt,"TFBertForNextSentencePrediction"),QMt.forEach(t),K7r=r(pPe," (BERT model)"),pPe.forEach(t),Z7r=i(SDe),d4=n(SDe,"LI",{});var _Pe=s(d4);e6e=n(_Pe,"STRONG",{});var HMt=s(e6e);eMr=r(HMt,"mobilebert"),HMt.forEach(t),oMr=r(_Pe," \u2014 "),aU=n(_Pe,"A",{href:!0});var UMt=s(aU);rMr=r(UMt,"TFMobileBertForNextSentencePrediction"),UMt.forEach(t),tMr=r(_Pe," (MobileBERT model)"),_Pe.forEach(t),SDe.forEach(t),aMr=i(xl),T(c4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),ANe=i(f),gc=n(f,"H2",{class:!0});var RDe=s(gc);f4=n(RDe,"A",{id:!0,class:!0,href:!0});var JMt=s(f4);o6e=n(JMt,"SPAN",{});var YMt=s(o6e);T(OL.$$.fragment,YMt),YMt.forEach(t),JMt.forEach(t),nMr=i(RDe),r6e=n(RDe,"SPAN",{});var KMt=s(r6e);sMr=r(KMt,"TFAutoModelForTableQuestionAnswering"),KMt.forEach(t),RDe.forEach(t),yNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(VL.$$.fragment,$l),lMr=i($l),hc=n($l,"P",{});var eee=s(hc);iMr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nU=n(eee,"A",{href:!0});var ZMt=s(nU);dMr=r(ZMt,"from_pretrained()"),ZMt.forEach(t),cMr=r(eee," class method or the "),sU=n(eee,"A",{href:!0});var e4t=s(sU);fMr=r(e4t,"from_config()"),e4t.forEach(t),mMr=r(eee,` class
method.`),eee.forEach(t),gMr=i($l),XL=n($l,"P",{});var PDe=s(XL);hMr=r(PDe,"This class cannot be instantiated directly using "),t6e=n(PDe,"CODE",{});var o4t=s(t6e);pMr=r(o4t,"__init__()"),o4t.forEach(t),_Mr=r(PDe," (throws an error)."),PDe.forEach(t),uMr=i($l),It=n($l,"DIV",{class:!0});var kw=s(It);T(zL.$$.fragment,kw),bMr=i(kw),a6e=n(kw,"P",{});var r4t=s(a6e);vMr=r(r4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r4t.forEach(t),FMr=i(kw),pc=n(kw,"P",{});var oee=s(pc);TMr=r(oee,`Note:
Loading a model from its configuration file does `),n6e=n(oee,"STRONG",{});var t4t=s(n6e);MMr=r(t4t,"not"),t4t.forEach(t),EMr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(oee,"A",{href:!0});var a4t=s(lU);CMr=r(a4t,"from_pretrained()"),a4t.forEach(t),wMr=r(oee," to load the model weights."),oee.forEach(t),AMr=i(kw),T(m4.$$.fragment,kw),kw.forEach(t),yMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(WL.$$.fragment,kl),LMr=i(kl),s6e=n(kl,"P",{});var n4t=s(s6e);xMr=r(n4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),n4t.forEach(t),$Mr=i(kl),dn=n(kl,"P",{});var Sw=s(dn);kMr=r(Sw,"The model class to instantiate is selected based on the "),l6e=n(Sw,"CODE",{});var s4t=s(l6e);SMr=r(s4t,"model_type"),s4t.forEach(t),RMr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),i6e=n(Sw,"CODE",{});var l4t=s(i6e);PMr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),BMr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=n(Sw,"CODE",{});var i4t=s(d6e);IMr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),qMr=r(Sw,":"),Sw.forEach(t),NMr=i(kl),c6e=n(kl,"UL",{});var d4t=s(c6e);g4=n(d4t,"LI",{});var uPe=s(g4);f6e=n(uPe,"STRONG",{});var c4t=s(f6e);jMr=r(c4t,"tapas"),c4t.forEach(t),DMr=r(uPe," \u2014 "),iU=n(uPe,"A",{href:!0});var f4t=s(iU);GMr=r(f4t,"TFTapasForQuestionAnswering"),f4t.forEach(t),OMr=r(uPe," (TAPAS model)"),uPe.forEach(t),d4t.forEach(t),VMr=i(kl),T(h4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),LNe=i(f),_c=n(f,"H2",{class:!0});var BDe=s(_c);p4=n(BDe,"A",{id:!0,class:!0,href:!0});var m4t=s(p4);m6e=n(m4t,"SPAN",{});var g4t=s(m6e);T(QL.$$.fragment,g4t),g4t.forEach(t),m4t.forEach(t),XMr=i(BDe),g6e=n(BDe,"SPAN",{});var h4t=s(g6e);zMr=r(h4t,"TFAutoModelForTokenClassification"),h4t.forEach(t),BDe.forEach(t),xNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(HL.$$.fragment,Sl),WMr=i(Sl),uc=n(Sl,"P",{});var ree=s(uc);QMr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dU=n(ree,"A",{href:!0});var p4t=s(dU);HMr=r(p4t,"from_pretrained()"),p4t.forEach(t),UMr=r(ree," class method or the "),cU=n(ree,"A",{href:!0});var _4t=s(cU);JMr=r(_4t,"from_config()"),_4t.forEach(t),YMr=r(ree,` class
method.`),ree.forEach(t),KMr=i(Sl),UL=n(Sl,"P",{});var IDe=s(UL);ZMr=r(IDe,"This class cannot be instantiated directly using "),h6e=n(IDe,"CODE",{});var u4t=s(h6e);e4r=r(u4t,"__init__()"),u4t.forEach(t),o4r=r(IDe," (throws an error)."),IDe.forEach(t),r4r=i(Sl),qt=n(Sl,"DIV",{class:!0});var Rw=s(qt);T(JL.$$.fragment,Rw),t4r=i(Rw),p6e=n(Rw,"P",{});var b4t=s(p6e);a4r=r(b4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),b4t.forEach(t),n4r=i(Rw),bc=n(Rw,"P",{});var tee=s(bc);s4r=r(tee,`Note:
Loading a model from its configuration file does `),_6e=n(tee,"STRONG",{});var v4t=s(_6e);l4r=r(v4t,"not"),v4t.forEach(t),i4r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(tee,"A",{href:!0});var F4t=s(fU);d4r=r(F4t,"from_pretrained()"),F4t.forEach(t),c4r=r(tee," to load the model weights."),tee.forEach(t),f4r=i(Rw),T(_4.$$.fragment,Rw),Rw.forEach(t),m4r=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(YL.$$.fragment,Rl),g4r=i(Rl),u6e=n(Rl,"P",{});var T4t=s(u6e);h4r=r(T4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),T4t.forEach(t),p4r=i(Rl),cn=n(Rl,"P",{});var Pw=s(cn);_4r=r(Pw,"The model class to instantiate is selected based on the "),b6e=n(Pw,"CODE",{});var M4t=s(b6e);u4r=r(M4t,"model_type"),M4t.forEach(t),b4r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),v6e=n(Pw,"CODE",{});var E4t=s(v6e);v4r=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),F4r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(Pw,"CODE",{});var C4t=s(F6e);T4r=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),M4r=r(Pw,":"),Pw.forEach(t),E4r=i(Rl),de=n(Rl,"UL",{});var me=s(de);u4=n(me,"LI",{});var bPe=s(u4);T6e=n(bPe,"STRONG",{});var w4t=s(T6e);C4r=r(w4t,"albert"),w4t.forEach(t),w4r=r(bPe," \u2014 "),mU=n(bPe,"A",{href:!0});var A4t=s(mU);A4r=r(A4t,"TFAlbertForTokenClassification"),A4t.forEach(t),y4r=r(bPe," (ALBERT model)"),bPe.forEach(t),L4r=i(me),b4=n(me,"LI",{});var vPe=s(b4);M6e=n(vPe,"STRONG",{});var y4t=s(M6e);x4r=r(y4t,"bert"),y4t.forEach(t),$4r=r(vPe," \u2014 "),gU=n(vPe,"A",{href:!0});var L4t=s(gU);k4r=r(L4t,"TFBertForTokenClassification"),L4t.forEach(t),S4r=r(vPe," (BERT model)"),vPe.forEach(t),R4r=i(me),v4=n(me,"LI",{});var FPe=s(v4);E6e=n(FPe,"STRONG",{});var x4t=s(E6e);P4r=r(x4t,"camembert"),x4t.forEach(t),B4r=r(FPe," \u2014 "),hU=n(FPe,"A",{href:!0});var $4t=s(hU);I4r=r($4t,"TFCamembertForTokenClassification"),$4t.forEach(t),q4r=r(FPe," (CamemBERT model)"),FPe.forEach(t),N4r=i(me),F4=n(me,"LI",{});var TPe=s(F4);C6e=n(TPe,"STRONG",{});var k4t=s(C6e);j4r=r(k4t,"convbert"),k4t.forEach(t),D4r=r(TPe," \u2014 "),pU=n(TPe,"A",{href:!0});var S4t=s(pU);G4r=r(S4t,"TFConvBertForTokenClassification"),S4t.forEach(t),O4r=r(TPe," (ConvBERT model)"),TPe.forEach(t),V4r=i(me),T4=n(me,"LI",{});var MPe=s(T4);w6e=n(MPe,"STRONG",{});var R4t=s(w6e);X4r=r(R4t,"deberta"),R4t.forEach(t),z4r=r(MPe," \u2014 "),_U=n(MPe,"A",{href:!0});var P4t=s(_U);W4r=r(P4t,"TFDebertaForTokenClassification"),P4t.forEach(t),Q4r=r(MPe," (DeBERTa model)"),MPe.forEach(t),H4r=i(me),M4=n(me,"LI",{});var EPe=s(M4);A6e=n(EPe,"STRONG",{});var B4t=s(A6e);U4r=r(B4t,"deberta-v2"),B4t.forEach(t),J4r=r(EPe," \u2014 "),uU=n(EPe,"A",{href:!0});var I4t=s(uU);Y4r=r(I4t,"TFDebertaV2ForTokenClassification"),I4t.forEach(t),K4r=r(EPe," (DeBERTa-v2 model)"),EPe.forEach(t),Z4r=i(me),E4=n(me,"LI",{});var CPe=s(E4);y6e=n(CPe,"STRONG",{});var q4t=s(y6e);eEr=r(q4t,"distilbert"),q4t.forEach(t),oEr=r(CPe," \u2014 "),bU=n(CPe,"A",{href:!0});var N4t=s(bU);rEr=r(N4t,"TFDistilBertForTokenClassification"),N4t.forEach(t),tEr=r(CPe," (DistilBERT model)"),CPe.forEach(t),aEr=i(me),C4=n(me,"LI",{});var wPe=s(C4);L6e=n(wPe,"STRONG",{});var j4t=s(L6e);nEr=r(j4t,"electra"),j4t.forEach(t),sEr=r(wPe," \u2014 "),vU=n(wPe,"A",{href:!0});var D4t=s(vU);lEr=r(D4t,"TFElectraForTokenClassification"),D4t.forEach(t),iEr=r(wPe," (ELECTRA model)"),wPe.forEach(t),dEr=i(me),w4=n(me,"LI",{});var APe=s(w4);x6e=n(APe,"STRONG",{});var G4t=s(x6e);cEr=r(G4t,"flaubert"),G4t.forEach(t),fEr=r(APe," \u2014 "),FU=n(APe,"A",{href:!0});var O4t=s(FU);mEr=r(O4t,"TFFlaubertForTokenClassification"),O4t.forEach(t),gEr=r(APe," (FlauBERT model)"),APe.forEach(t),hEr=i(me),A4=n(me,"LI",{});var yPe=s(A4);$6e=n(yPe,"STRONG",{});var V4t=s($6e);pEr=r(V4t,"funnel"),V4t.forEach(t),_Er=r(yPe," \u2014 "),TU=n(yPe,"A",{href:!0});var X4t=s(TU);uEr=r(X4t,"TFFunnelForTokenClassification"),X4t.forEach(t),bEr=r(yPe," (Funnel Transformer model)"),yPe.forEach(t),vEr=i(me),y4=n(me,"LI",{});var LPe=s(y4);k6e=n(LPe,"STRONG",{});var z4t=s(k6e);FEr=r(z4t,"layoutlm"),z4t.forEach(t),TEr=r(LPe," \u2014 "),MU=n(LPe,"A",{href:!0});var W4t=s(MU);MEr=r(W4t,"TFLayoutLMForTokenClassification"),W4t.forEach(t),EEr=r(LPe," (LayoutLM model)"),LPe.forEach(t),CEr=i(me),L4=n(me,"LI",{});var xPe=s(L4);S6e=n(xPe,"STRONG",{});var Q4t=s(S6e);wEr=r(Q4t,"longformer"),Q4t.forEach(t),AEr=r(xPe," \u2014 "),EU=n(xPe,"A",{href:!0});var H4t=s(EU);yEr=r(H4t,"TFLongformerForTokenClassification"),H4t.forEach(t),LEr=r(xPe," (Longformer model)"),xPe.forEach(t),xEr=i(me),x4=n(me,"LI",{});var $Pe=s(x4);R6e=n($Pe,"STRONG",{});var U4t=s(R6e);$Er=r(U4t,"mobilebert"),U4t.forEach(t),kEr=r($Pe," \u2014 "),CU=n($Pe,"A",{href:!0});var J4t=s(CU);SEr=r(J4t,"TFMobileBertForTokenClassification"),J4t.forEach(t),REr=r($Pe," (MobileBERT model)"),$Pe.forEach(t),PEr=i(me),$4=n(me,"LI",{});var kPe=s($4);P6e=n(kPe,"STRONG",{});var Y4t=s(P6e);BEr=r(Y4t,"mpnet"),Y4t.forEach(t),IEr=r(kPe," \u2014 "),wU=n(kPe,"A",{href:!0});var K4t=s(wU);qEr=r(K4t,"TFMPNetForTokenClassification"),K4t.forEach(t),NEr=r(kPe," (MPNet model)"),kPe.forEach(t),jEr=i(me),k4=n(me,"LI",{});var SPe=s(k4);B6e=n(SPe,"STRONG",{});var Z4t=s(B6e);DEr=r(Z4t,"rembert"),Z4t.forEach(t),GEr=r(SPe," \u2014 "),AU=n(SPe,"A",{href:!0});var eEt=s(AU);OEr=r(eEt,"TFRemBertForTokenClassification"),eEt.forEach(t),VEr=r(SPe," (RemBERT model)"),SPe.forEach(t),XEr=i(me),S4=n(me,"LI",{});var RPe=s(S4);I6e=n(RPe,"STRONG",{});var oEt=s(I6e);zEr=r(oEt,"roberta"),oEt.forEach(t),WEr=r(RPe," \u2014 "),yU=n(RPe,"A",{href:!0});var rEt=s(yU);QEr=r(rEt,"TFRobertaForTokenClassification"),rEt.forEach(t),HEr=r(RPe," (RoBERTa model)"),RPe.forEach(t),UEr=i(me),R4=n(me,"LI",{});var PPe=s(R4);q6e=n(PPe,"STRONG",{});var tEt=s(q6e);JEr=r(tEt,"roformer"),tEt.forEach(t),YEr=r(PPe," \u2014 "),LU=n(PPe,"A",{href:!0});var aEt=s(LU);KEr=r(aEt,"TFRoFormerForTokenClassification"),aEt.forEach(t),ZEr=r(PPe," (RoFormer model)"),PPe.forEach(t),eCr=i(me),P4=n(me,"LI",{});var BPe=s(P4);N6e=n(BPe,"STRONG",{});var nEt=s(N6e);oCr=r(nEt,"xlm"),nEt.forEach(t),rCr=r(BPe," \u2014 "),xU=n(BPe,"A",{href:!0});var sEt=s(xU);tCr=r(sEt,"TFXLMForTokenClassification"),sEt.forEach(t),aCr=r(BPe," (XLM model)"),BPe.forEach(t),nCr=i(me),B4=n(me,"LI",{});var IPe=s(B4);j6e=n(IPe,"STRONG",{});var lEt=s(j6e);sCr=r(lEt,"xlm-roberta"),lEt.forEach(t),lCr=r(IPe," \u2014 "),$U=n(IPe,"A",{href:!0});var iEt=s($U);iCr=r(iEt,"TFXLMRobertaForTokenClassification"),iEt.forEach(t),dCr=r(IPe," (XLM-RoBERTa model)"),IPe.forEach(t),cCr=i(me),I4=n(me,"LI",{});var qPe=s(I4);D6e=n(qPe,"STRONG",{});var dEt=s(D6e);fCr=r(dEt,"xlnet"),dEt.forEach(t),mCr=r(qPe," \u2014 "),kU=n(qPe,"A",{href:!0});var cEt=s(kU);gCr=r(cEt,"TFXLNetForTokenClassification"),cEt.forEach(t),hCr=r(qPe," (XLNet model)"),qPe.forEach(t),me.forEach(t),pCr=i(Rl),T(q4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),$Ne=i(f),vc=n(f,"H2",{class:!0});var qDe=s(vc);N4=n(qDe,"A",{id:!0,class:!0,href:!0});var fEt=s(N4);G6e=n(fEt,"SPAN",{});var mEt=s(G6e);T(KL.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),_Cr=i(qDe),O6e=n(qDe,"SPAN",{});var gEt=s(O6e);uCr=r(gEt,"TFAutoModelForQuestionAnswering"),gEt.forEach(t),qDe.forEach(t),kNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(ZL.$$.fragment,Pl),bCr=i(Pl),Fc=n(Pl,"P",{});var aee=s(Fc);vCr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SU=n(aee,"A",{href:!0});var hEt=s(SU);FCr=r(hEt,"from_pretrained()"),hEt.forEach(t),TCr=r(aee," class method or the "),RU=n(aee,"A",{href:!0});var pEt=s(RU);MCr=r(pEt,"from_config()"),pEt.forEach(t),ECr=r(aee,` class
method.`),aee.forEach(t),CCr=i(Pl),e9=n(Pl,"P",{});var NDe=s(e9);wCr=r(NDe,"This class cannot be instantiated directly using "),V6e=n(NDe,"CODE",{});var _Et=s(V6e);ACr=r(_Et,"__init__()"),_Et.forEach(t),yCr=r(NDe," (throws an error)."),NDe.forEach(t),LCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Bw=s(Nt);T(o9.$$.fragment,Bw),xCr=i(Bw),X6e=n(Bw,"P",{});var uEt=s(X6e);$Cr=r(uEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uEt.forEach(t),kCr=i(Bw),Tc=n(Bw,"P",{});var nee=s(Tc);SCr=r(nee,`Note:
Loading a model from its configuration file does `),z6e=n(nee,"STRONG",{});var bEt=s(z6e);RCr=r(bEt,"not"),bEt.forEach(t),PCr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(nee,"A",{href:!0});var vEt=s(PU);BCr=r(vEt,"from_pretrained()"),vEt.forEach(t),ICr=r(nee," to load the model weights."),nee.forEach(t),qCr=i(Bw),T(j4.$$.fragment,Bw),Bw.forEach(t),NCr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(r9.$$.fragment,Bl),jCr=i(Bl),W6e=n(Bl,"P",{});var FEt=s(W6e);DCr=r(FEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FEt.forEach(t),GCr=i(Bl),fn=n(Bl,"P",{});var Iw=s(fn);OCr=r(Iw,"The model class to instantiate is selected based on the "),Q6e=n(Iw,"CODE",{});var TEt=s(Q6e);VCr=r(TEt,"model_type"),TEt.forEach(t),XCr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),H6e=n(Iw,"CODE",{});var MEt=s(H6e);zCr=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),WCr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(Iw,"CODE",{});var EEt=s(U6e);QCr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),HCr=r(Iw,":"),Iw.forEach(t),UCr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);D4=n(ge,"LI",{});var NPe=s(D4);J6e=n(NPe,"STRONG",{});var CEt=s(J6e);JCr=r(CEt,"albert"),CEt.forEach(t),YCr=r(NPe," \u2014 "),BU=n(NPe,"A",{href:!0});var wEt=s(BU);KCr=r(wEt,"TFAlbertForQuestionAnswering"),wEt.forEach(t),ZCr=r(NPe," (ALBERT model)"),NPe.forEach(t),e5r=i(ge),G4=n(ge,"LI",{});var jPe=s(G4);Y6e=n(jPe,"STRONG",{});var AEt=s(Y6e);o5r=r(AEt,"bert"),AEt.forEach(t),r5r=r(jPe," \u2014 "),IU=n(jPe,"A",{href:!0});var yEt=s(IU);t5r=r(yEt,"TFBertForQuestionAnswering"),yEt.forEach(t),a5r=r(jPe," (BERT model)"),jPe.forEach(t),n5r=i(ge),O4=n(ge,"LI",{});var DPe=s(O4);K6e=n(DPe,"STRONG",{});var LEt=s(K6e);s5r=r(LEt,"camembert"),LEt.forEach(t),l5r=r(DPe," \u2014 "),qU=n(DPe,"A",{href:!0});var xEt=s(qU);i5r=r(xEt,"TFCamembertForQuestionAnswering"),xEt.forEach(t),d5r=r(DPe," (CamemBERT model)"),DPe.forEach(t),c5r=i(ge),V4=n(ge,"LI",{});var GPe=s(V4);Z6e=n(GPe,"STRONG",{});var $Et=s(Z6e);f5r=r($Et,"convbert"),$Et.forEach(t),m5r=r(GPe," \u2014 "),NU=n(GPe,"A",{href:!0});var kEt=s(NU);g5r=r(kEt,"TFConvBertForQuestionAnswering"),kEt.forEach(t),h5r=r(GPe," (ConvBERT model)"),GPe.forEach(t),p5r=i(ge),X4=n(ge,"LI",{});var OPe=s(X4);eTe=n(OPe,"STRONG",{});var SEt=s(eTe);_5r=r(SEt,"deberta"),SEt.forEach(t),u5r=r(OPe," \u2014 "),jU=n(OPe,"A",{href:!0});var REt=s(jU);b5r=r(REt,"TFDebertaForQuestionAnswering"),REt.forEach(t),v5r=r(OPe," (DeBERTa model)"),OPe.forEach(t),F5r=i(ge),z4=n(ge,"LI",{});var VPe=s(z4);oTe=n(VPe,"STRONG",{});var PEt=s(oTe);T5r=r(PEt,"deberta-v2"),PEt.forEach(t),M5r=r(VPe," \u2014 "),DU=n(VPe,"A",{href:!0});var BEt=s(DU);E5r=r(BEt,"TFDebertaV2ForQuestionAnswering"),BEt.forEach(t),C5r=r(VPe," (DeBERTa-v2 model)"),VPe.forEach(t),w5r=i(ge),W4=n(ge,"LI",{});var XPe=s(W4);rTe=n(XPe,"STRONG",{});var IEt=s(rTe);A5r=r(IEt,"distilbert"),IEt.forEach(t),y5r=r(XPe," \u2014 "),GU=n(XPe,"A",{href:!0});var qEt=s(GU);L5r=r(qEt,"TFDistilBertForQuestionAnswering"),qEt.forEach(t),x5r=r(XPe," (DistilBERT model)"),XPe.forEach(t),$5r=i(ge),Q4=n(ge,"LI",{});var zPe=s(Q4);tTe=n(zPe,"STRONG",{});var NEt=s(tTe);k5r=r(NEt,"electra"),NEt.forEach(t),S5r=r(zPe," \u2014 "),OU=n(zPe,"A",{href:!0});var jEt=s(OU);R5r=r(jEt,"TFElectraForQuestionAnswering"),jEt.forEach(t),P5r=r(zPe," (ELECTRA model)"),zPe.forEach(t),B5r=i(ge),H4=n(ge,"LI",{});var WPe=s(H4);aTe=n(WPe,"STRONG",{});var DEt=s(aTe);I5r=r(DEt,"flaubert"),DEt.forEach(t),q5r=r(WPe," \u2014 "),VU=n(WPe,"A",{href:!0});var GEt=s(VU);N5r=r(GEt,"TFFlaubertForQuestionAnsweringSimple"),GEt.forEach(t),j5r=r(WPe," (FlauBERT model)"),WPe.forEach(t),D5r=i(ge),U4=n(ge,"LI",{});var QPe=s(U4);nTe=n(QPe,"STRONG",{});var OEt=s(nTe);G5r=r(OEt,"funnel"),OEt.forEach(t),O5r=r(QPe," \u2014 "),XU=n(QPe,"A",{href:!0});var VEt=s(XU);V5r=r(VEt,"TFFunnelForQuestionAnswering"),VEt.forEach(t),X5r=r(QPe," (Funnel Transformer model)"),QPe.forEach(t),z5r=i(ge),J4=n(ge,"LI",{});var HPe=s(J4);sTe=n(HPe,"STRONG",{});var XEt=s(sTe);W5r=r(XEt,"gptj"),XEt.forEach(t),Q5r=r(HPe," \u2014 "),zU=n(HPe,"A",{href:!0});var zEt=s(zU);H5r=r(zEt,"TFGPTJForQuestionAnswering"),zEt.forEach(t),U5r=r(HPe," (GPT-J model)"),HPe.forEach(t),J5r=i(ge),Y4=n(ge,"LI",{});var UPe=s(Y4);lTe=n(UPe,"STRONG",{});var WEt=s(lTe);Y5r=r(WEt,"longformer"),WEt.forEach(t),K5r=r(UPe," \u2014 "),WU=n(UPe,"A",{href:!0});var QEt=s(WU);Z5r=r(QEt,"TFLongformerForQuestionAnswering"),QEt.forEach(t),e3r=r(UPe," (Longformer model)"),UPe.forEach(t),o3r=i(ge),K4=n(ge,"LI",{});var JPe=s(K4);iTe=n(JPe,"STRONG",{});var HEt=s(iTe);r3r=r(HEt,"mobilebert"),HEt.forEach(t),t3r=r(JPe," \u2014 "),QU=n(JPe,"A",{href:!0});var UEt=s(QU);a3r=r(UEt,"TFMobileBertForQuestionAnswering"),UEt.forEach(t),n3r=r(JPe," (MobileBERT model)"),JPe.forEach(t),s3r=i(ge),Z4=n(ge,"LI",{});var YPe=s(Z4);dTe=n(YPe,"STRONG",{});var JEt=s(dTe);l3r=r(JEt,"mpnet"),JEt.forEach(t),i3r=r(YPe," \u2014 "),HU=n(YPe,"A",{href:!0});var YEt=s(HU);d3r=r(YEt,"TFMPNetForQuestionAnswering"),YEt.forEach(t),c3r=r(YPe," (MPNet model)"),YPe.forEach(t),f3r=i(ge),eE=n(ge,"LI",{});var KPe=s(eE);cTe=n(KPe,"STRONG",{});var KEt=s(cTe);m3r=r(KEt,"rembert"),KEt.forEach(t),g3r=r(KPe," \u2014 "),UU=n(KPe,"A",{href:!0});var ZEt=s(UU);h3r=r(ZEt,"TFRemBertForQuestionAnswering"),ZEt.forEach(t),p3r=r(KPe," (RemBERT model)"),KPe.forEach(t),_3r=i(ge),oE=n(ge,"LI",{});var ZPe=s(oE);fTe=n(ZPe,"STRONG",{});var eCt=s(fTe);u3r=r(eCt,"roberta"),eCt.forEach(t),b3r=r(ZPe," \u2014 "),JU=n(ZPe,"A",{href:!0});var oCt=s(JU);v3r=r(oCt,"TFRobertaForQuestionAnswering"),oCt.forEach(t),F3r=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),T3r=i(ge),rE=n(ge,"LI",{});var eBe=s(rE);mTe=n(eBe,"STRONG",{});var rCt=s(mTe);M3r=r(rCt,"roformer"),rCt.forEach(t),E3r=r(eBe," \u2014 "),YU=n(eBe,"A",{href:!0});var tCt=s(YU);C3r=r(tCt,"TFRoFormerForQuestionAnswering"),tCt.forEach(t),w3r=r(eBe," (RoFormer model)"),eBe.forEach(t),A3r=i(ge),tE=n(ge,"LI",{});var oBe=s(tE);gTe=n(oBe,"STRONG",{});var aCt=s(gTe);y3r=r(aCt,"xlm"),aCt.forEach(t),L3r=r(oBe," \u2014 "),KU=n(oBe,"A",{href:!0});var nCt=s(KU);x3r=r(nCt,"TFXLMForQuestionAnsweringSimple"),nCt.forEach(t),$3r=r(oBe," (XLM model)"),oBe.forEach(t),k3r=i(ge),aE=n(ge,"LI",{});var rBe=s(aE);hTe=n(rBe,"STRONG",{});var sCt=s(hTe);S3r=r(sCt,"xlm-roberta"),sCt.forEach(t),R3r=r(rBe," \u2014 "),ZU=n(rBe,"A",{href:!0});var lCt=s(ZU);P3r=r(lCt,"TFXLMRobertaForQuestionAnswering"),lCt.forEach(t),B3r=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),I3r=i(ge),nE=n(ge,"LI",{});var tBe=s(nE);pTe=n(tBe,"STRONG",{});var iCt=s(pTe);q3r=r(iCt,"xlnet"),iCt.forEach(t),N3r=r(tBe," \u2014 "),eJ=n(tBe,"A",{href:!0});var dCt=s(eJ);j3r=r(dCt,"TFXLNetForQuestionAnsweringSimple"),dCt.forEach(t),D3r=r(tBe," (XLNet model)"),tBe.forEach(t),ge.forEach(t),G3r=i(Bl),T(sE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),SNe=i(f),Mc=n(f,"H2",{class:!0});var jDe=s(Mc);lE=n(jDe,"A",{id:!0,class:!0,href:!0});var cCt=s(lE);_Te=n(cCt,"SPAN",{});var fCt=s(_Te);T(t9.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),O3r=i(jDe),uTe=n(jDe,"SPAN",{});var mCt=s(uTe);V3r=r(mCt,"TFAutoModelForVision2Seq"),mCt.forEach(t),jDe.forEach(t),RNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(a9.$$.fragment,Il),X3r=i(Il),Ec=n(Il,"P",{});var see=s(Ec);z3r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oJ=n(see,"A",{href:!0});var gCt=s(oJ);W3r=r(gCt,"from_pretrained()"),gCt.forEach(t),Q3r=r(see," class method or the "),rJ=n(see,"A",{href:!0});var hCt=s(rJ);H3r=r(hCt,"from_config()"),hCt.forEach(t),U3r=r(see,` class
method.`),see.forEach(t),J3r=i(Il),n9=n(Il,"P",{});var DDe=s(n9);Y3r=r(DDe,"This class cannot be instantiated directly using "),bTe=n(DDe,"CODE",{});var pCt=s(bTe);K3r=r(pCt,"__init__()"),pCt.forEach(t),Z3r=r(DDe," (throws an error)."),DDe.forEach(t),ewr=i(Il),jt=n(Il,"DIV",{class:!0});var qw=s(jt);T(s9.$$.fragment,qw),owr=i(qw),vTe=n(qw,"P",{});var _Ct=s(vTe);rwr=r(_Ct,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Ct.forEach(t),twr=i(qw),Cc=n(qw,"P",{});var lee=s(Cc);awr=r(lee,`Note:
Loading a model from its configuration file does `),FTe=n(lee,"STRONG",{});var uCt=s(FTe);nwr=r(uCt,"not"),uCt.forEach(t),swr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(lee,"A",{href:!0});var bCt=s(tJ);lwr=r(bCt,"from_pretrained()"),bCt.forEach(t),iwr=r(lee," to load the model weights."),lee.forEach(t),dwr=i(qw),T(iE.$$.fragment,qw),qw.forEach(t),cwr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(l9.$$.fragment,ql),fwr=i(ql),TTe=n(ql,"P",{});var vCt=s(TTe);mwr=r(vCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vCt.forEach(t),gwr=i(ql),mn=n(ql,"P",{});var Nw=s(mn);hwr=r(Nw,"The model class to instantiate is selected based on the "),MTe=n(Nw,"CODE",{});var FCt=s(MTe);pwr=r(FCt,"model_type"),FCt.forEach(t),_wr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),ETe=n(Nw,"CODE",{});var TCt=s(ETe);uwr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),bwr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(Nw,"CODE",{});var MCt=s(CTe);vwr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),Fwr=r(Nw,":"),Nw.forEach(t),Twr=i(ql),wTe=n(ql,"UL",{});var ECt=s(wTe);dE=n(ECt,"LI",{});var aBe=s(dE);ATe=n(aBe,"STRONG",{});var CCt=s(ATe);Mwr=r(CCt,"vision-encoder-decoder"),CCt.forEach(t),Ewr=r(aBe," \u2014 "),aJ=n(aBe,"A",{href:!0});var wCt=s(aJ);Cwr=r(wCt,"TFVisionEncoderDecoderModel"),wCt.forEach(t),wwr=r(aBe," (Vision Encoder decoder model)"),aBe.forEach(t),ECt.forEach(t),Awr=i(ql),T(cE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),PNe=i(f),wc=n(f,"H2",{class:!0});var GDe=s(wc);fE=n(GDe,"A",{id:!0,class:!0,href:!0});var ACt=s(fE);yTe=n(ACt,"SPAN",{});var yCt=s(yTe);T(i9.$$.fragment,yCt),yCt.forEach(t),ACt.forEach(t),ywr=i(GDe),LTe=n(GDe,"SPAN",{});var LCt=s(LTe);Lwr=r(LCt,"TFAutoModelForSpeechSeq2Seq"),LCt.forEach(t),GDe.forEach(t),BNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(d9.$$.fragment,Nl),xwr=i(Nl),Ac=n(Nl,"P",{});var iee=s(Ac);$wr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nJ=n(iee,"A",{href:!0});var xCt=s(nJ);kwr=r(xCt,"from_pretrained()"),xCt.forEach(t),Swr=r(iee," class method or the "),sJ=n(iee,"A",{href:!0});var $Ct=s(sJ);Rwr=r($Ct,"from_config()"),$Ct.forEach(t),Pwr=r(iee,` class
method.`),iee.forEach(t),Bwr=i(Nl),c9=n(Nl,"P",{});var ODe=s(c9);Iwr=r(ODe,"This class cannot be instantiated directly using "),xTe=n(ODe,"CODE",{});var kCt=s(xTe);qwr=r(kCt,"__init__()"),kCt.forEach(t),Nwr=r(ODe," (throws an error)."),ODe.forEach(t),jwr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var jw=s(Dt);T(f9.$$.fragment,jw),Dwr=i(jw),$Te=n(jw,"P",{});var SCt=s($Te);Gwr=r(SCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SCt.forEach(t),Owr=i(jw),yc=n(jw,"P",{});var dee=s(yc);Vwr=r(dee,`Note:
Loading a model from its configuration file does `),kTe=n(dee,"STRONG",{});var RCt=s(kTe);Xwr=r(RCt,"not"),RCt.forEach(t),zwr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(dee,"A",{href:!0});var PCt=s(lJ);Wwr=r(PCt,"from_pretrained()"),PCt.forEach(t),Qwr=r(dee," to load the model weights."),dee.forEach(t),Hwr=i(jw),T(mE.$$.fragment,jw),jw.forEach(t),Uwr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(m9.$$.fragment,jl),Jwr=i(jl),STe=n(jl,"P",{});var BCt=s(STe);Ywr=r(BCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BCt.forEach(t),Kwr=i(jl),gn=n(jl,"P",{});var Dw=s(gn);Zwr=r(Dw,"The model class to instantiate is selected based on the "),RTe=n(Dw,"CODE",{});var ICt=s(RTe);e0r=r(ICt,"model_type"),ICt.forEach(t),o0r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),PTe=n(Dw,"CODE",{});var qCt=s(PTe);r0r=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),t0r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(Dw,"CODE",{});var NCt=s(BTe);a0r=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),n0r=r(Dw,":"),Dw.forEach(t),s0r=i(jl),ITe=n(jl,"UL",{});var jCt=s(ITe);gE=n(jCt,"LI",{});var nBe=s(gE);qTe=n(nBe,"STRONG",{});var DCt=s(qTe);l0r=r(DCt,"speech_to_text"),DCt.forEach(t),i0r=r(nBe," \u2014 "),iJ=n(nBe,"A",{href:!0});var GCt=s(iJ);d0r=r(GCt,"TFSpeech2TextForConditionalGeneration"),GCt.forEach(t),c0r=r(nBe," (Speech2Text model)"),nBe.forEach(t),jCt.forEach(t),f0r=i(jl),T(hE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),INe=i(f),Lc=n(f,"H2",{class:!0});var VDe=s(Lc);pE=n(VDe,"A",{id:!0,class:!0,href:!0});var OCt=s(pE);NTe=n(OCt,"SPAN",{});var VCt=s(NTe);T(g9.$$.fragment,VCt),VCt.forEach(t),OCt.forEach(t),m0r=i(VDe),jTe=n(VDe,"SPAN",{});var XCt=s(jTe);g0r=r(XCt,"FlaxAutoModel"),XCt.forEach(t),VDe.forEach(t),qNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(h9.$$.fragment,Dl),h0r=i(Dl),xc=n(Dl,"P",{});var cee=s(xc);p0r=r(cee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dJ=n(cee,"A",{href:!0});var zCt=s(dJ);_0r=r(zCt,"from_pretrained()"),zCt.forEach(t),u0r=r(cee," class method or the "),cJ=n(cee,"A",{href:!0});var WCt=s(cJ);b0r=r(WCt,"from_config()"),WCt.forEach(t),v0r=r(cee,` class
method.`),cee.forEach(t),F0r=i(Dl),p9=n(Dl,"P",{});var XDe=s(p9);T0r=r(XDe,"This class cannot be instantiated directly using "),DTe=n(XDe,"CODE",{});var QCt=s(DTe);M0r=r(QCt,"__init__()"),QCt.forEach(t),E0r=r(XDe," (throws an error)."),XDe.forEach(t),C0r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var Gw=s(Gt);T(_9.$$.fragment,Gw),w0r=i(Gw),GTe=n(Gw,"P",{});var HCt=s(GTe);A0r=r(HCt,"Instantiates one of the base model classes of the library from a configuration."),HCt.forEach(t),y0r=i(Gw),$c=n(Gw,"P",{});var fee=s($c);L0r=r(fee,`Note:
Loading a model from its configuration file does `),OTe=n(fee,"STRONG",{});var UCt=s(OTe);x0r=r(UCt,"not"),UCt.forEach(t),$0r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(fee,"A",{href:!0});var JCt=s(fJ);k0r=r(JCt,"from_pretrained()"),JCt.forEach(t),S0r=r(fee," to load the model weights."),fee.forEach(t),R0r=i(Gw),T(_E.$$.fragment,Gw),Gw.forEach(t),P0r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(u9.$$.fragment,Gl),B0r=i(Gl),VTe=n(Gl,"P",{});var YCt=s(VTe);I0r=r(YCt,"Instantiate one of the base model classes of the library from a pretrained model."),YCt.forEach(t),q0r=i(Gl),hn=n(Gl,"P",{});var Ow=s(hn);N0r=r(Ow,"The model class to instantiate is selected based on the "),XTe=n(Ow,"CODE",{});var KCt=s(XTe);j0r=r(KCt,"model_type"),KCt.forEach(t),D0r=r(Ow,` property of the config object (either
passed as an argument or loaded from `),zTe=n(Ow,"CODE",{});var ZCt=s(zTe);G0r=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),O0r=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(Ow,"CODE",{});var e5t=s(WTe);V0r=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),X0r=r(Ow,":"),Ow.forEach(t),z0r=i(Gl),te=n(Gl,"UL",{});var ne=s(te);uE=n(ne,"LI",{});var sBe=s(uE);QTe=n(sBe,"STRONG",{});var o5t=s(QTe);W0r=r(o5t,"albert"),o5t.forEach(t),Q0r=r(sBe," \u2014 "),mJ=n(sBe,"A",{href:!0});var r5t=s(mJ);H0r=r(r5t,"FlaxAlbertModel"),r5t.forEach(t),U0r=r(sBe," (ALBERT model)"),sBe.forEach(t),J0r=i(ne),bE=n(ne,"LI",{});var lBe=s(bE);HTe=n(lBe,"STRONG",{});var t5t=s(HTe);Y0r=r(t5t,"bart"),t5t.forEach(t),K0r=r(lBe," \u2014 "),gJ=n(lBe,"A",{href:!0});var a5t=s(gJ);Z0r=r(a5t,"FlaxBartModel"),a5t.forEach(t),eAr=r(lBe," (BART model)"),lBe.forEach(t),oAr=i(ne),vE=n(ne,"LI",{});var iBe=s(vE);UTe=n(iBe,"STRONG",{});var n5t=s(UTe);rAr=r(n5t,"beit"),n5t.forEach(t),tAr=r(iBe," \u2014 "),hJ=n(iBe,"A",{href:!0});var s5t=s(hJ);aAr=r(s5t,"FlaxBeitModel"),s5t.forEach(t),nAr=r(iBe," (BEiT model)"),iBe.forEach(t),sAr=i(ne),FE=n(ne,"LI",{});var dBe=s(FE);JTe=n(dBe,"STRONG",{});var l5t=s(JTe);lAr=r(l5t,"bert"),l5t.forEach(t),iAr=r(dBe," \u2014 "),pJ=n(dBe,"A",{href:!0});var i5t=s(pJ);dAr=r(i5t,"FlaxBertModel"),i5t.forEach(t),cAr=r(dBe," (BERT model)"),dBe.forEach(t),fAr=i(ne),TE=n(ne,"LI",{});var cBe=s(TE);YTe=n(cBe,"STRONG",{});var d5t=s(YTe);mAr=r(d5t,"big_bird"),d5t.forEach(t),gAr=r(cBe," \u2014 "),_J=n(cBe,"A",{href:!0});var c5t=s(_J);hAr=r(c5t,"FlaxBigBirdModel"),c5t.forEach(t),pAr=r(cBe," (BigBird model)"),cBe.forEach(t),_Ar=i(ne),ME=n(ne,"LI",{});var fBe=s(ME);KTe=n(fBe,"STRONG",{});var f5t=s(KTe);uAr=r(f5t,"blenderbot"),f5t.forEach(t),bAr=r(fBe," \u2014 "),uJ=n(fBe,"A",{href:!0});var m5t=s(uJ);vAr=r(m5t,"FlaxBlenderbotModel"),m5t.forEach(t),FAr=r(fBe," (Blenderbot model)"),fBe.forEach(t),TAr=i(ne),EE=n(ne,"LI",{});var mBe=s(EE);ZTe=n(mBe,"STRONG",{});var g5t=s(ZTe);MAr=r(g5t,"blenderbot-small"),g5t.forEach(t),EAr=r(mBe," \u2014 "),bJ=n(mBe,"A",{href:!0});var h5t=s(bJ);CAr=r(h5t,"FlaxBlenderbotSmallModel"),h5t.forEach(t),wAr=r(mBe," (BlenderbotSmall model)"),mBe.forEach(t),AAr=i(ne),CE=n(ne,"LI",{});var gBe=s(CE);e8e=n(gBe,"STRONG",{});var p5t=s(e8e);yAr=r(p5t,"clip"),p5t.forEach(t),LAr=r(gBe," \u2014 "),vJ=n(gBe,"A",{href:!0});var _5t=s(vJ);xAr=r(_5t,"FlaxCLIPModel"),_5t.forEach(t),$Ar=r(gBe," (CLIP model)"),gBe.forEach(t),kAr=i(ne),wE=n(ne,"LI",{});var hBe=s(wE);o8e=n(hBe,"STRONG",{});var u5t=s(o8e);SAr=r(u5t,"distilbert"),u5t.forEach(t),RAr=r(hBe," \u2014 "),FJ=n(hBe,"A",{href:!0});var b5t=s(FJ);PAr=r(b5t,"FlaxDistilBertModel"),b5t.forEach(t),BAr=r(hBe," (DistilBERT model)"),hBe.forEach(t),IAr=i(ne),AE=n(ne,"LI",{});var pBe=s(AE);r8e=n(pBe,"STRONG",{});var v5t=s(r8e);qAr=r(v5t,"electra"),v5t.forEach(t),NAr=r(pBe," \u2014 "),TJ=n(pBe,"A",{href:!0});var F5t=s(TJ);jAr=r(F5t,"FlaxElectraModel"),F5t.forEach(t),DAr=r(pBe," (ELECTRA model)"),pBe.forEach(t),GAr=i(ne),yE=n(ne,"LI",{});var _Be=s(yE);t8e=n(_Be,"STRONG",{});var T5t=s(t8e);OAr=r(T5t,"gpt2"),T5t.forEach(t),VAr=r(_Be," \u2014 "),MJ=n(_Be,"A",{href:!0});var M5t=s(MJ);XAr=r(M5t,"FlaxGPT2Model"),M5t.forEach(t),zAr=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),WAr=i(ne),LE=n(ne,"LI",{});var uBe=s(LE);a8e=n(uBe,"STRONG",{});var E5t=s(a8e);QAr=r(E5t,"gpt_neo"),E5t.forEach(t),HAr=r(uBe," \u2014 "),EJ=n(uBe,"A",{href:!0});var C5t=s(EJ);UAr=r(C5t,"FlaxGPTNeoModel"),C5t.forEach(t),JAr=r(uBe," (GPT Neo model)"),uBe.forEach(t),YAr=i(ne),xE=n(ne,"LI",{});var bBe=s(xE);n8e=n(bBe,"STRONG",{});var w5t=s(n8e);KAr=r(w5t,"gptj"),w5t.forEach(t),ZAr=r(bBe," \u2014 "),CJ=n(bBe,"A",{href:!0});var A5t=s(CJ);eyr=r(A5t,"FlaxGPTJModel"),A5t.forEach(t),oyr=r(bBe," (GPT-J model)"),bBe.forEach(t),ryr=i(ne),$E=n(ne,"LI",{});var vBe=s($E);s8e=n(vBe,"STRONG",{});var y5t=s(s8e);tyr=r(y5t,"marian"),y5t.forEach(t),ayr=r(vBe," \u2014 "),wJ=n(vBe,"A",{href:!0});var L5t=s(wJ);nyr=r(L5t,"FlaxMarianModel"),L5t.forEach(t),syr=r(vBe," (Marian model)"),vBe.forEach(t),lyr=i(ne),kE=n(ne,"LI",{});var FBe=s(kE);l8e=n(FBe,"STRONG",{});var x5t=s(l8e);iyr=r(x5t,"mbart"),x5t.forEach(t),dyr=r(FBe," \u2014 "),AJ=n(FBe,"A",{href:!0});var $5t=s(AJ);cyr=r($5t,"FlaxMBartModel"),$5t.forEach(t),fyr=r(FBe," (mBART model)"),FBe.forEach(t),myr=i(ne),SE=n(ne,"LI",{});var TBe=s(SE);i8e=n(TBe,"STRONG",{});var k5t=s(i8e);gyr=r(k5t,"mt5"),k5t.forEach(t),hyr=r(TBe," \u2014 "),yJ=n(TBe,"A",{href:!0});var S5t=s(yJ);pyr=r(S5t,"FlaxMT5Model"),S5t.forEach(t),_yr=r(TBe," (mT5 model)"),TBe.forEach(t),uyr=i(ne),RE=n(ne,"LI",{});var MBe=s(RE);d8e=n(MBe,"STRONG",{});var R5t=s(d8e);byr=r(R5t,"pegasus"),R5t.forEach(t),vyr=r(MBe," \u2014 "),LJ=n(MBe,"A",{href:!0});var P5t=s(LJ);Fyr=r(P5t,"FlaxPegasusModel"),P5t.forEach(t),Tyr=r(MBe," (Pegasus model)"),MBe.forEach(t),Myr=i(ne),PE=n(ne,"LI",{});var EBe=s(PE);c8e=n(EBe,"STRONG",{});var B5t=s(c8e);Eyr=r(B5t,"roberta"),B5t.forEach(t),Cyr=r(EBe," \u2014 "),xJ=n(EBe,"A",{href:!0});var I5t=s(xJ);wyr=r(I5t,"FlaxRobertaModel"),I5t.forEach(t),Ayr=r(EBe," (RoBERTa model)"),EBe.forEach(t),yyr=i(ne),BE=n(ne,"LI",{});var CBe=s(BE);f8e=n(CBe,"STRONG",{});var q5t=s(f8e);Lyr=r(q5t,"roformer"),q5t.forEach(t),xyr=r(CBe," \u2014 "),$J=n(CBe,"A",{href:!0});var N5t=s($J);$yr=r(N5t,"FlaxRoFormerModel"),N5t.forEach(t),kyr=r(CBe," (RoFormer model)"),CBe.forEach(t),Syr=i(ne),IE=n(ne,"LI",{});var wBe=s(IE);m8e=n(wBe,"STRONG",{});var j5t=s(m8e);Ryr=r(j5t,"t5"),j5t.forEach(t),Pyr=r(wBe," \u2014 "),kJ=n(wBe,"A",{href:!0});var D5t=s(kJ);Byr=r(D5t,"FlaxT5Model"),D5t.forEach(t),Iyr=r(wBe," (T5 model)"),wBe.forEach(t),qyr=i(ne),qE=n(ne,"LI",{});var ABe=s(qE);g8e=n(ABe,"STRONG",{});var G5t=s(g8e);Nyr=r(G5t,"vision-text-dual-encoder"),G5t.forEach(t),jyr=r(ABe," \u2014 "),SJ=n(ABe,"A",{href:!0});var O5t=s(SJ);Dyr=r(O5t,"FlaxVisionTextDualEncoderModel"),O5t.forEach(t),Gyr=r(ABe," (VisionTextDualEncoder model)"),ABe.forEach(t),Oyr=i(ne),NE=n(ne,"LI",{});var yBe=s(NE);h8e=n(yBe,"STRONG",{});var V5t=s(h8e);Vyr=r(V5t,"vit"),V5t.forEach(t),Xyr=r(yBe," \u2014 "),RJ=n(yBe,"A",{href:!0});var X5t=s(RJ);zyr=r(X5t,"FlaxViTModel"),X5t.forEach(t),Wyr=r(yBe," (ViT model)"),yBe.forEach(t),Qyr=i(ne),jE=n(ne,"LI",{});var LBe=s(jE);p8e=n(LBe,"STRONG",{});var z5t=s(p8e);Hyr=r(z5t,"wav2vec2"),z5t.forEach(t),Uyr=r(LBe," \u2014 "),PJ=n(LBe,"A",{href:!0});var W5t=s(PJ);Jyr=r(W5t,"FlaxWav2Vec2Model"),W5t.forEach(t),Yyr=r(LBe," (Wav2Vec2 model)"),LBe.forEach(t),Kyr=i(ne),DE=n(ne,"LI",{});var xBe=s(DE);_8e=n(xBe,"STRONG",{});var Q5t=s(_8e);Zyr=r(Q5t,"xglm"),Q5t.forEach(t),eLr=r(xBe," \u2014 "),BJ=n(xBe,"A",{href:!0});var H5t=s(BJ);oLr=r(H5t,"FlaxXGLMModel"),H5t.forEach(t),rLr=r(xBe," (XGLM model)"),xBe.forEach(t),tLr=i(ne),GE=n(ne,"LI",{});var $Be=s(GE);u8e=n($Be,"STRONG",{});var U5t=s(u8e);aLr=r(U5t,"xlm-roberta"),U5t.forEach(t),nLr=r($Be," \u2014 "),IJ=n($Be,"A",{href:!0});var J5t=s(IJ);sLr=r(J5t,"FlaxXLMRobertaModel"),J5t.forEach(t),lLr=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),ne.forEach(t),iLr=i(Gl),T(OE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),NNe=i(f),kc=n(f,"H2",{class:!0});var zDe=s(kc);VE=n(zDe,"A",{id:!0,class:!0,href:!0});var Y5t=s(VE);b8e=n(Y5t,"SPAN",{});var K5t=s(b8e);T(b9.$$.fragment,K5t),K5t.forEach(t),Y5t.forEach(t),dLr=i(zDe),v8e=n(zDe,"SPAN",{});var Z5t=s(v8e);cLr=r(Z5t,"FlaxAutoModelForCausalLM"),Z5t.forEach(t),zDe.forEach(t),jNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(v9.$$.fragment,Ol),fLr=i(Ol),Sc=n(Ol,"P",{});var mee=s(Sc);mLr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=n(mee,"A",{href:!0});var e3t=s(qJ);gLr=r(e3t,"from_pretrained()"),e3t.forEach(t),hLr=r(mee," class method or the "),NJ=n(mee,"A",{href:!0});var o3t=s(NJ);pLr=r(o3t,"from_config()"),o3t.forEach(t),_Lr=r(mee,` class
method.`),mee.forEach(t),uLr=i(Ol),F9=n(Ol,"P",{});var WDe=s(F9);bLr=r(WDe,"This class cannot be instantiated directly using "),F8e=n(WDe,"CODE",{});var r3t=s(F8e);vLr=r(r3t,"__init__()"),r3t.forEach(t),FLr=r(WDe," (throws an error)."),WDe.forEach(t),TLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var Vw=s(Ot);T(T9.$$.fragment,Vw),MLr=i(Vw),T8e=n(Vw,"P",{});var t3t=s(T8e);ELr=r(t3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),t3t.forEach(t),CLr=i(Vw),Rc=n(Vw,"P",{});var gee=s(Rc);wLr=r(gee,`Note:
Loading a model from its configuration file does `),M8e=n(gee,"STRONG",{});var a3t=s(M8e);ALr=r(a3t,"not"),a3t.forEach(t),yLr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(gee,"A",{href:!0});var n3t=s(jJ);LLr=r(n3t,"from_pretrained()"),n3t.forEach(t),xLr=r(gee," to load the model weights."),gee.forEach(t),$Lr=i(Vw),T(XE.$$.fragment,Vw),Vw.forEach(t),kLr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(M9.$$.fragment,Vl),SLr=i(Vl),E8e=n(Vl,"P",{});var s3t=s(E8e);RLr=r(s3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s3t.forEach(t),PLr=i(Vl),pn=n(Vl,"P",{});var Xw=s(pn);BLr=r(Xw,"The model class to instantiate is selected based on the "),C8e=n(Xw,"CODE",{});var l3t=s(C8e);ILr=r(l3t,"model_type"),l3t.forEach(t),qLr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),w8e=n(Xw,"CODE",{});var i3t=s(w8e);NLr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),jLr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=n(Xw,"CODE",{});var d3t=s(A8e);DLr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),GLr=r(Xw,":"),Xw.forEach(t),OLr=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);zE=n(Xe,"LI",{});var kBe=s(zE);y8e=n(kBe,"STRONG",{});var c3t=s(y8e);VLr=r(c3t,"bart"),c3t.forEach(t),XLr=r(kBe," \u2014 "),DJ=n(kBe,"A",{href:!0});var f3t=s(DJ);zLr=r(f3t,"FlaxBartForCausalLM"),f3t.forEach(t),WLr=r(kBe," (BART model)"),kBe.forEach(t),QLr=i(Xe),WE=n(Xe,"LI",{});var SBe=s(WE);L8e=n(SBe,"STRONG",{});var m3t=s(L8e);HLr=r(m3t,"bert"),m3t.forEach(t),ULr=r(SBe," \u2014 "),GJ=n(SBe,"A",{href:!0});var g3t=s(GJ);JLr=r(g3t,"FlaxBertForCausalLM"),g3t.forEach(t),YLr=r(SBe," (BERT model)"),SBe.forEach(t),KLr=i(Xe),QE=n(Xe,"LI",{});var RBe=s(QE);x8e=n(RBe,"STRONG",{});var h3t=s(x8e);ZLr=r(h3t,"big_bird"),h3t.forEach(t),e9r=r(RBe," \u2014 "),OJ=n(RBe,"A",{href:!0});var p3t=s(OJ);o9r=r(p3t,"FlaxBigBirdForCausalLM"),p3t.forEach(t),r9r=r(RBe," (BigBird model)"),RBe.forEach(t),t9r=i(Xe),HE=n(Xe,"LI",{});var PBe=s(HE);$8e=n(PBe,"STRONG",{});var _3t=s($8e);a9r=r(_3t,"electra"),_3t.forEach(t),n9r=r(PBe," \u2014 "),VJ=n(PBe,"A",{href:!0});var u3t=s(VJ);s9r=r(u3t,"FlaxElectraForCausalLM"),u3t.forEach(t),l9r=r(PBe," (ELECTRA model)"),PBe.forEach(t),i9r=i(Xe),UE=n(Xe,"LI",{});var BBe=s(UE);k8e=n(BBe,"STRONG",{});var b3t=s(k8e);d9r=r(b3t,"gpt2"),b3t.forEach(t),c9r=r(BBe," \u2014 "),XJ=n(BBe,"A",{href:!0});var v3t=s(XJ);f9r=r(v3t,"FlaxGPT2LMHeadModel"),v3t.forEach(t),m9r=r(BBe," (OpenAI GPT-2 model)"),BBe.forEach(t),g9r=i(Xe),JE=n(Xe,"LI",{});var IBe=s(JE);S8e=n(IBe,"STRONG",{});var F3t=s(S8e);h9r=r(F3t,"gpt_neo"),F3t.forEach(t),p9r=r(IBe," \u2014 "),zJ=n(IBe,"A",{href:!0});var T3t=s(zJ);_9r=r(T3t,"FlaxGPTNeoForCausalLM"),T3t.forEach(t),u9r=r(IBe," (GPT Neo model)"),IBe.forEach(t),b9r=i(Xe),YE=n(Xe,"LI",{});var qBe=s(YE);R8e=n(qBe,"STRONG",{});var M3t=s(R8e);v9r=r(M3t,"gptj"),M3t.forEach(t),F9r=r(qBe," \u2014 "),WJ=n(qBe,"A",{href:!0});var E3t=s(WJ);T9r=r(E3t,"FlaxGPTJForCausalLM"),E3t.forEach(t),M9r=r(qBe," (GPT-J model)"),qBe.forEach(t),E9r=i(Xe),KE=n(Xe,"LI",{});var NBe=s(KE);P8e=n(NBe,"STRONG",{});var C3t=s(P8e);C9r=r(C3t,"roberta"),C3t.forEach(t),w9r=r(NBe," \u2014 "),QJ=n(NBe,"A",{href:!0});var w3t=s(QJ);A9r=r(w3t,"FlaxRobertaForCausalLM"),w3t.forEach(t),y9r=r(NBe," (RoBERTa model)"),NBe.forEach(t),L9r=i(Xe),ZE=n(Xe,"LI",{});var jBe=s(ZE);B8e=n(jBe,"STRONG",{});var A3t=s(B8e);x9r=r(A3t,"xglm"),A3t.forEach(t),$9r=r(jBe," \u2014 "),HJ=n(jBe,"A",{href:!0});var y3t=s(HJ);k9r=r(y3t,"FlaxXGLMForCausalLM"),y3t.forEach(t),S9r=r(jBe," (XGLM model)"),jBe.forEach(t),Xe.forEach(t),R9r=i(Vl),T(eC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),DNe=i(f),Pc=n(f,"H2",{class:!0});var QDe=s(Pc);oC=n(QDe,"A",{id:!0,class:!0,href:!0});var L3t=s(oC);I8e=n(L3t,"SPAN",{});var x3t=s(I8e);T(E9.$$.fragment,x3t),x3t.forEach(t),L3t.forEach(t),P9r=i(QDe),q8e=n(QDe,"SPAN",{});var $3t=s(q8e);B9r=r($3t,"FlaxAutoModelForPreTraining"),$3t.forEach(t),QDe.forEach(t),GNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(C9.$$.fragment,Xl),I9r=i(Xl),Bc=n(Xl,"P",{});var hee=s(Bc);q9r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=n(hee,"A",{href:!0});var k3t=s(UJ);N9r=r(k3t,"from_pretrained()"),k3t.forEach(t),j9r=r(hee," class method or the "),JJ=n(hee,"A",{href:!0});var S3t=s(JJ);D9r=r(S3t,"from_config()"),S3t.forEach(t),G9r=r(hee,` class
method.`),hee.forEach(t),O9r=i(Xl),w9=n(Xl,"P",{});var HDe=s(w9);V9r=r(HDe,"This class cannot be instantiated directly using "),N8e=n(HDe,"CODE",{});var R3t=s(N8e);X9r=r(R3t,"__init__()"),R3t.forEach(t),z9r=r(HDe," (throws an error)."),HDe.forEach(t),W9r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var zw=s(Vt);T(A9.$$.fragment,zw),Q9r=i(zw),j8e=n(zw,"P",{});var P3t=s(j8e);H9r=r(P3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P3t.forEach(t),U9r=i(zw),Ic=n(zw,"P",{});var pee=s(Ic);J9r=r(pee,`Note:
Loading a model from its configuration file does `),D8e=n(pee,"STRONG",{});var B3t=s(D8e);Y9r=r(B3t,"not"),B3t.forEach(t),K9r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(pee,"A",{href:!0});var I3t=s(YJ);Z9r=r(I3t,"from_pretrained()"),I3t.forEach(t),exr=r(pee," to load the model weights."),pee.forEach(t),oxr=i(zw),T(rC.$$.fragment,zw),zw.forEach(t),rxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(y9.$$.fragment,zl),txr=i(zl),G8e=n(zl,"P",{});var q3t=s(G8e);axr=r(q3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),q3t.forEach(t),nxr=i(zl),_n=n(zl,"P",{});var Ww=s(_n);sxr=r(Ww,"The model class to instantiate is selected based on the "),O8e=n(Ww,"CODE",{});var N3t=s(O8e);lxr=r(N3t,"model_type"),N3t.forEach(t),ixr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),V8e=n(Ww,"CODE",{});var j3t=s(V8e);dxr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),cxr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=n(Ww,"CODE",{});var D3t=s(X8e);fxr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),mxr=r(Ww,":"),Ww.forEach(t),gxr=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);tC=n(we,"LI",{});var DBe=s(tC);z8e=n(DBe,"STRONG",{});var G3t=s(z8e);hxr=r(G3t,"albert"),G3t.forEach(t),pxr=r(DBe," \u2014 "),KJ=n(DBe,"A",{href:!0});var O3t=s(KJ);_xr=r(O3t,"FlaxAlbertForPreTraining"),O3t.forEach(t),uxr=r(DBe," (ALBERT model)"),DBe.forEach(t),bxr=i(we),aC=n(we,"LI",{});var GBe=s(aC);W8e=n(GBe,"STRONG",{});var V3t=s(W8e);vxr=r(V3t,"bart"),V3t.forEach(t),Fxr=r(GBe," \u2014 "),ZJ=n(GBe,"A",{href:!0});var X3t=s(ZJ);Txr=r(X3t,"FlaxBartForConditionalGeneration"),X3t.forEach(t),Mxr=r(GBe," (BART model)"),GBe.forEach(t),Exr=i(we),nC=n(we,"LI",{});var OBe=s(nC);Q8e=n(OBe,"STRONG",{});var z3t=s(Q8e);Cxr=r(z3t,"bert"),z3t.forEach(t),wxr=r(OBe," \u2014 "),eY=n(OBe,"A",{href:!0});var W3t=s(eY);Axr=r(W3t,"FlaxBertForPreTraining"),W3t.forEach(t),yxr=r(OBe," (BERT model)"),OBe.forEach(t),Lxr=i(we),sC=n(we,"LI",{});var VBe=s(sC);H8e=n(VBe,"STRONG",{});var Q3t=s(H8e);xxr=r(Q3t,"big_bird"),Q3t.forEach(t),$xr=r(VBe," \u2014 "),oY=n(VBe,"A",{href:!0});var H3t=s(oY);kxr=r(H3t,"FlaxBigBirdForPreTraining"),H3t.forEach(t),Sxr=r(VBe," (BigBird model)"),VBe.forEach(t),Rxr=i(we),lC=n(we,"LI",{});var XBe=s(lC);U8e=n(XBe,"STRONG",{});var U3t=s(U8e);Pxr=r(U3t,"electra"),U3t.forEach(t),Bxr=r(XBe," \u2014 "),rY=n(XBe,"A",{href:!0});var J3t=s(rY);Ixr=r(J3t,"FlaxElectraForPreTraining"),J3t.forEach(t),qxr=r(XBe," (ELECTRA model)"),XBe.forEach(t),Nxr=i(we),iC=n(we,"LI",{});var zBe=s(iC);J8e=n(zBe,"STRONG",{});var Y3t=s(J8e);jxr=r(Y3t,"mbart"),Y3t.forEach(t),Dxr=r(zBe," \u2014 "),tY=n(zBe,"A",{href:!0});var K3t=s(tY);Gxr=r(K3t,"FlaxMBartForConditionalGeneration"),K3t.forEach(t),Oxr=r(zBe," (mBART model)"),zBe.forEach(t),Vxr=i(we),dC=n(we,"LI",{});var WBe=s(dC);Y8e=n(WBe,"STRONG",{});var Z3t=s(Y8e);Xxr=r(Z3t,"mt5"),Z3t.forEach(t),zxr=r(WBe," \u2014 "),aY=n(WBe,"A",{href:!0});var ewt=s(aY);Wxr=r(ewt,"FlaxMT5ForConditionalGeneration"),ewt.forEach(t),Qxr=r(WBe," (mT5 model)"),WBe.forEach(t),Hxr=i(we),cC=n(we,"LI",{});var QBe=s(cC);K8e=n(QBe,"STRONG",{});var owt=s(K8e);Uxr=r(owt,"roberta"),owt.forEach(t),Jxr=r(QBe," \u2014 "),nY=n(QBe,"A",{href:!0});var rwt=s(nY);Yxr=r(rwt,"FlaxRobertaForMaskedLM"),rwt.forEach(t),Kxr=r(QBe," (RoBERTa model)"),QBe.forEach(t),Zxr=i(we),fC=n(we,"LI",{});var HBe=s(fC);Z8e=n(HBe,"STRONG",{});var twt=s(Z8e);e$r=r(twt,"roformer"),twt.forEach(t),o$r=r(HBe," \u2014 "),sY=n(HBe,"A",{href:!0});var awt=s(sY);r$r=r(awt,"FlaxRoFormerForMaskedLM"),awt.forEach(t),t$r=r(HBe," (RoFormer model)"),HBe.forEach(t),a$r=i(we),mC=n(we,"LI",{});var UBe=s(mC);e7e=n(UBe,"STRONG",{});var nwt=s(e7e);n$r=r(nwt,"t5"),nwt.forEach(t),s$r=r(UBe," \u2014 "),lY=n(UBe,"A",{href:!0});var swt=s(lY);l$r=r(swt,"FlaxT5ForConditionalGeneration"),swt.forEach(t),i$r=r(UBe," (T5 model)"),UBe.forEach(t),d$r=i(we),gC=n(we,"LI",{});var JBe=s(gC);o7e=n(JBe,"STRONG",{});var lwt=s(o7e);c$r=r(lwt,"wav2vec2"),lwt.forEach(t),f$r=r(JBe," \u2014 "),iY=n(JBe,"A",{href:!0});var iwt=s(iY);m$r=r(iwt,"FlaxWav2Vec2ForPreTraining"),iwt.forEach(t),g$r=r(JBe," (Wav2Vec2 model)"),JBe.forEach(t),h$r=i(we),hC=n(we,"LI",{});var YBe=s(hC);r7e=n(YBe,"STRONG",{});var dwt=s(r7e);p$r=r(dwt,"xlm-roberta"),dwt.forEach(t),_$r=r(YBe," \u2014 "),dY=n(YBe,"A",{href:!0});var cwt=s(dY);u$r=r(cwt,"FlaxXLMRobertaForMaskedLM"),cwt.forEach(t),b$r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),we.forEach(t),v$r=i(zl),T(pC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),ONe=i(f),qc=n(f,"H2",{class:!0});var UDe=s(qc);_C=n(UDe,"A",{id:!0,class:!0,href:!0});var fwt=s(_C);t7e=n(fwt,"SPAN",{});var mwt=s(t7e);T(L9.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),F$r=i(UDe),a7e=n(UDe,"SPAN",{});var gwt=s(a7e);T$r=r(gwt,"FlaxAutoModelForMaskedLM"),gwt.forEach(t),UDe.forEach(t),VNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(x9.$$.fragment,Wl),M$r=i(Wl),Nc=n(Wl,"P",{});var _ee=s(Nc);E$r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=n(_ee,"A",{href:!0});var hwt=s(cY);C$r=r(hwt,"from_pretrained()"),hwt.forEach(t),w$r=r(_ee," class method or the "),fY=n(_ee,"A",{href:!0});var pwt=s(fY);A$r=r(pwt,"from_config()"),pwt.forEach(t),y$r=r(_ee,` class
method.`),_ee.forEach(t),L$r=i(Wl),$9=n(Wl,"P",{});var JDe=s($9);x$r=r(JDe,"This class cannot be instantiated directly using "),n7e=n(JDe,"CODE",{});var _wt=s(n7e);$$r=r(_wt,"__init__()"),_wt.forEach(t),k$r=r(JDe," (throws an error)."),JDe.forEach(t),S$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var Qw=s(Xt);T(k9.$$.fragment,Qw),R$r=i(Qw),s7e=n(Qw,"P",{});var uwt=s(s7e);P$r=r(uwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uwt.forEach(t),B$r=i(Qw),jc=n(Qw,"P",{});var uee=s(jc);I$r=r(uee,`Note:
Loading a model from its configuration file does `),l7e=n(uee,"STRONG",{});var bwt=s(l7e);q$r=r(bwt,"not"),bwt.forEach(t),N$r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(uee,"A",{href:!0});var vwt=s(mY);j$r=r(vwt,"from_pretrained()"),vwt.forEach(t),D$r=r(uee," to load the model weights."),uee.forEach(t),G$r=i(Qw),T(uC.$$.fragment,Qw),Qw.forEach(t),O$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(S9.$$.fragment,Ql),V$r=i(Ql),i7e=n(Ql,"P",{});var Fwt=s(i7e);X$r=r(Fwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fwt.forEach(t),z$r=i(Ql),un=n(Ql,"P",{});var Hw=s(un);W$r=r(Hw,"The model class to instantiate is selected based on the "),d7e=n(Hw,"CODE",{});var Twt=s(d7e);Q$r=r(Twt,"model_type"),Twt.forEach(t),H$r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),c7e=n(Hw,"CODE",{});var Mwt=s(c7e);U$r=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),J$r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(Hw,"CODE",{});var Ewt=s(f7e);Y$r=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),K$r=r(Hw,":"),Hw.forEach(t),Z$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);bC=n(Ie,"LI",{});var KBe=s(bC);m7e=n(KBe,"STRONG",{});var Cwt=s(m7e);ekr=r(Cwt,"albert"),Cwt.forEach(t),okr=r(KBe," \u2014 "),gY=n(KBe,"A",{href:!0});var wwt=s(gY);rkr=r(wwt,"FlaxAlbertForMaskedLM"),wwt.forEach(t),tkr=r(KBe," (ALBERT model)"),KBe.forEach(t),akr=i(Ie),vC=n(Ie,"LI",{});var ZBe=s(vC);g7e=n(ZBe,"STRONG",{});var Awt=s(g7e);nkr=r(Awt,"bart"),Awt.forEach(t),skr=r(ZBe," \u2014 "),hY=n(ZBe,"A",{href:!0});var ywt=s(hY);lkr=r(ywt,"FlaxBartForConditionalGeneration"),ywt.forEach(t),ikr=r(ZBe," (BART model)"),ZBe.forEach(t),dkr=i(Ie),FC=n(Ie,"LI",{});var eIe=s(FC);h7e=n(eIe,"STRONG",{});var Lwt=s(h7e);ckr=r(Lwt,"bert"),Lwt.forEach(t),fkr=r(eIe," \u2014 "),pY=n(eIe,"A",{href:!0});var xwt=s(pY);mkr=r(xwt,"FlaxBertForMaskedLM"),xwt.forEach(t),gkr=r(eIe," (BERT model)"),eIe.forEach(t),hkr=i(Ie),TC=n(Ie,"LI",{});var oIe=s(TC);p7e=n(oIe,"STRONG",{});var $wt=s(p7e);pkr=r($wt,"big_bird"),$wt.forEach(t),_kr=r(oIe," \u2014 "),_Y=n(oIe,"A",{href:!0});var kwt=s(_Y);ukr=r(kwt,"FlaxBigBirdForMaskedLM"),kwt.forEach(t),bkr=r(oIe," (BigBird model)"),oIe.forEach(t),vkr=i(Ie),MC=n(Ie,"LI",{});var rIe=s(MC);_7e=n(rIe,"STRONG",{});var Swt=s(_7e);Fkr=r(Swt,"distilbert"),Swt.forEach(t),Tkr=r(rIe," \u2014 "),uY=n(rIe,"A",{href:!0});var Rwt=s(uY);Mkr=r(Rwt,"FlaxDistilBertForMaskedLM"),Rwt.forEach(t),Ekr=r(rIe," (DistilBERT model)"),rIe.forEach(t),Ckr=i(Ie),EC=n(Ie,"LI",{});var tIe=s(EC);u7e=n(tIe,"STRONG",{});var Pwt=s(u7e);wkr=r(Pwt,"electra"),Pwt.forEach(t),Akr=r(tIe," \u2014 "),bY=n(tIe,"A",{href:!0});var Bwt=s(bY);ykr=r(Bwt,"FlaxElectraForMaskedLM"),Bwt.forEach(t),Lkr=r(tIe," (ELECTRA model)"),tIe.forEach(t),xkr=i(Ie),CC=n(Ie,"LI",{});var aIe=s(CC);b7e=n(aIe,"STRONG",{});var Iwt=s(b7e);$kr=r(Iwt,"mbart"),Iwt.forEach(t),kkr=r(aIe," \u2014 "),vY=n(aIe,"A",{href:!0});var qwt=s(vY);Skr=r(qwt,"FlaxMBartForConditionalGeneration"),qwt.forEach(t),Rkr=r(aIe," (mBART model)"),aIe.forEach(t),Pkr=i(Ie),wC=n(Ie,"LI",{});var nIe=s(wC);v7e=n(nIe,"STRONG",{});var Nwt=s(v7e);Bkr=r(Nwt,"roberta"),Nwt.forEach(t),Ikr=r(nIe," \u2014 "),FY=n(nIe,"A",{href:!0});var jwt=s(FY);qkr=r(jwt,"FlaxRobertaForMaskedLM"),jwt.forEach(t),Nkr=r(nIe," (RoBERTa model)"),nIe.forEach(t),jkr=i(Ie),AC=n(Ie,"LI",{});var sIe=s(AC);F7e=n(sIe,"STRONG",{});var Dwt=s(F7e);Dkr=r(Dwt,"roformer"),Dwt.forEach(t),Gkr=r(sIe," \u2014 "),TY=n(sIe,"A",{href:!0});var Gwt=s(TY);Okr=r(Gwt,"FlaxRoFormerForMaskedLM"),Gwt.forEach(t),Vkr=r(sIe," (RoFormer model)"),sIe.forEach(t),Xkr=i(Ie),yC=n(Ie,"LI",{});var lIe=s(yC);T7e=n(lIe,"STRONG",{});var Owt=s(T7e);zkr=r(Owt,"xlm-roberta"),Owt.forEach(t),Wkr=r(lIe," \u2014 "),MY=n(lIe,"A",{href:!0});var Vwt=s(MY);Qkr=r(Vwt,"FlaxXLMRobertaForMaskedLM"),Vwt.forEach(t),Hkr=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),Ie.forEach(t),Ukr=i(Ql),T(LC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),XNe=i(f),Dc=n(f,"H2",{class:!0});var YDe=s(Dc);xC=n(YDe,"A",{id:!0,class:!0,href:!0});var Xwt=s(xC);M7e=n(Xwt,"SPAN",{});var zwt=s(M7e);T(R9.$$.fragment,zwt),zwt.forEach(t),Xwt.forEach(t),Jkr=i(YDe),E7e=n(YDe,"SPAN",{});var Wwt=s(E7e);Ykr=r(Wwt,"FlaxAutoModelForSeq2SeqLM"),Wwt.forEach(t),YDe.forEach(t),zNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(P9.$$.fragment,Hl),Kkr=i(Hl),Gc=n(Hl,"P",{});var bee=s(Gc);Zkr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=n(bee,"A",{href:!0});var Qwt=s(EY);eSr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),oSr=r(bee," class method or the "),CY=n(bee,"A",{href:!0});var Hwt=s(CY);rSr=r(Hwt,"from_config()"),Hwt.forEach(t),tSr=r(bee,` class
method.`),bee.forEach(t),aSr=i(Hl),B9=n(Hl,"P",{});var KDe=s(B9);nSr=r(KDe,"This class cannot be instantiated directly using "),C7e=n(KDe,"CODE",{});var Uwt=s(C7e);sSr=r(Uwt,"__init__()"),Uwt.forEach(t),lSr=r(KDe," (throws an error)."),KDe.forEach(t),iSr=i(Hl),zt=n(Hl,"DIV",{class:!0});var Uw=s(zt);T(I9.$$.fragment,Uw),dSr=i(Uw),w7e=n(Uw,"P",{});var Jwt=s(w7e);cSr=r(Jwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jwt.forEach(t),fSr=i(Uw),Oc=n(Uw,"P",{});var vee=s(Oc);mSr=r(vee,`Note:
Loading a model from its configuration file does `),A7e=n(vee,"STRONG",{});var Ywt=s(A7e);gSr=r(Ywt,"not"),Ywt.forEach(t),hSr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(vee,"A",{href:!0});var Kwt=s(wY);pSr=r(Kwt,"from_pretrained()"),Kwt.forEach(t),_Sr=r(vee," to load the model weights."),vee.forEach(t),uSr=i(Uw),T($C.$$.fragment,Uw),Uw.forEach(t),bSr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(q9.$$.fragment,Ul),vSr=i(Ul),y7e=n(Ul,"P",{});var Zwt=s(y7e);FSr=r(Zwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zwt.forEach(t),TSr=i(Ul),bn=n(Ul,"P",{});var Jw=s(bn);MSr=r(Jw,"The model class to instantiate is selected based on the "),L7e=n(Jw,"CODE",{});var e0t=s(L7e);ESr=r(e0t,"model_type"),e0t.forEach(t),CSr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),x7e=n(Jw,"CODE",{});var o0t=s(x7e);wSr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),ASr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(Jw,"CODE",{});var r0t=s($7e);ySr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),LSr=r(Jw,":"),Jw.forEach(t),xSr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);kC=n(ze,"LI",{});var iIe=s(kC);k7e=n(iIe,"STRONG",{});var t0t=s(k7e);$Sr=r(t0t,"bart"),t0t.forEach(t),kSr=r(iIe," \u2014 "),AY=n(iIe,"A",{href:!0});var a0t=s(AY);SSr=r(a0t,"FlaxBartForConditionalGeneration"),a0t.forEach(t),RSr=r(iIe," (BART model)"),iIe.forEach(t),PSr=i(ze),SC=n(ze,"LI",{});var dIe=s(SC);S7e=n(dIe,"STRONG",{});var n0t=s(S7e);BSr=r(n0t,"blenderbot"),n0t.forEach(t),ISr=r(dIe," \u2014 "),yY=n(dIe,"A",{href:!0});var s0t=s(yY);qSr=r(s0t,"FlaxBlenderbotForConditionalGeneration"),s0t.forEach(t),NSr=r(dIe," (Blenderbot model)"),dIe.forEach(t),jSr=i(ze),RC=n(ze,"LI",{});var cIe=s(RC);R7e=n(cIe,"STRONG",{});var l0t=s(R7e);DSr=r(l0t,"blenderbot-small"),l0t.forEach(t),GSr=r(cIe," \u2014 "),LY=n(cIe,"A",{href:!0});var i0t=s(LY);OSr=r(i0t,"FlaxBlenderbotSmallForConditionalGeneration"),i0t.forEach(t),VSr=r(cIe," (BlenderbotSmall model)"),cIe.forEach(t),XSr=i(ze),PC=n(ze,"LI",{});var fIe=s(PC);P7e=n(fIe,"STRONG",{});var d0t=s(P7e);zSr=r(d0t,"encoder-decoder"),d0t.forEach(t),WSr=r(fIe," \u2014 "),xY=n(fIe,"A",{href:!0});var c0t=s(xY);QSr=r(c0t,"FlaxEncoderDecoderModel"),c0t.forEach(t),HSr=r(fIe," (Encoder decoder model)"),fIe.forEach(t),USr=i(ze),BC=n(ze,"LI",{});var mIe=s(BC);B7e=n(mIe,"STRONG",{});var f0t=s(B7e);JSr=r(f0t,"marian"),f0t.forEach(t),YSr=r(mIe," \u2014 "),$Y=n(mIe,"A",{href:!0});var m0t=s($Y);KSr=r(m0t,"FlaxMarianMTModel"),m0t.forEach(t),ZSr=r(mIe," (Marian model)"),mIe.forEach(t),eRr=i(ze),IC=n(ze,"LI",{});var gIe=s(IC);I7e=n(gIe,"STRONG",{});var g0t=s(I7e);oRr=r(g0t,"mbart"),g0t.forEach(t),rRr=r(gIe," \u2014 "),kY=n(gIe,"A",{href:!0});var h0t=s(kY);tRr=r(h0t,"FlaxMBartForConditionalGeneration"),h0t.forEach(t),aRr=r(gIe," (mBART model)"),gIe.forEach(t),nRr=i(ze),qC=n(ze,"LI",{});var hIe=s(qC);q7e=n(hIe,"STRONG",{});var p0t=s(q7e);sRr=r(p0t,"mt5"),p0t.forEach(t),lRr=r(hIe," \u2014 "),SY=n(hIe,"A",{href:!0});var _0t=s(SY);iRr=r(_0t,"FlaxMT5ForConditionalGeneration"),_0t.forEach(t),dRr=r(hIe," (mT5 model)"),hIe.forEach(t),cRr=i(ze),NC=n(ze,"LI",{});var pIe=s(NC);N7e=n(pIe,"STRONG",{});var u0t=s(N7e);fRr=r(u0t,"pegasus"),u0t.forEach(t),mRr=r(pIe," \u2014 "),RY=n(pIe,"A",{href:!0});var b0t=s(RY);gRr=r(b0t,"FlaxPegasusForConditionalGeneration"),b0t.forEach(t),hRr=r(pIe," (Pegasus model)"),pIe.forEach(t),pRr=i(ze),jC=n(ze,"LI",{});var _Ie=s(jC);j7e=n(_Ie,"STRONG",{});var v0t=s(j7e);_Rr=r(v0t,"t5"),v0t.forEach(t),uRr=r(_Ie," \u2014 "),PY=n(_Ie,"A",{href:!0});var F0t=s(PY);bRr=r(F0t,"FlaxT5ForConditionalGeneration"),F0t.forEach(t),vRr=r(_Ie," (T5 model)"),_Ie.forEach(t),ze.forEach(t),FRr=i(Ul),T(DC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),WNe=i(f),Vc=n(f,"H2",{class:!0});var ZDe=s(Vc);GC=n(ZDe,"A",{id:!0,class:!0,href:!0});var T0t=s(GC);D7e=n(T0t,"SPAN",{});var M0t=s(D7e);T(N9.$$.fragment,M0t),M0t.forEach(t),T0t.forEach(t),TRr=i(ZDe),G7e=n(ZDe,"SPAN",{});var E0t=s(G7e);MRr=r(E0t,"FlaxAutoModelForSequenceClassification"),E0t.forEach(t),ZDe.forEach(t),QNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(j9.$$.fragment,Jl),ERr=i(Jl),Xc=n(Jl,"P",{});var Fee=s(Xc);CRr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BY=n(Fee,"A",{href:!0});var C0t=s(BY);wRr=r(C0t,"from_pretrained()"),C0t.forEach(t),ARr=r(Fee," class method or the "),IY=n(Fee,"A",{href:!0});var w0t=s(IY);yRr=r(w0t,"from_config()"),w0t.forEach(t),LRr=r(Fee,` class
method.`),Fee.forEach(t),xRr=i(Jl),D9=n(Jl,"P",{});var eGe=s(D9);$Rr=r(eGe,"This class cannot be instantiated directly using "),O7e=n(eGe,"CODE",{});var A0t=s(O7e);kRr=r(A0t,"__init__()"),A0t.forEach(t),SRr=r(eGe," (throws an error)."),eGe.forEach(t),RRr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var Yw=s(Wt);T(G9.$$.fragment,Yw),PRr=i(Yw),V7e=n(Yw,"P",{});var y0t=s(V7e);BRr=r(y0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y0t.forEach(t),IRr=i(Yw),zc=n(Yw,"P",{});var Tee=s(zc);qRr=r(Tee,`Note:
Loading a model from its configuration file does `),X7e=n(Tee,"STRONG",{});var L0t=s(X7e);NRr=r(L0t,"not"),L0t.forEach(t),jRr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Tee,"A",{href:!0});var x0t=s(qY);DRr=r(x0t,"from_pretrained()"),x0t.forEach(t),GRr=r(Tee," to load the model weights."),Tee.forEach(t),ORr=i(Yw),T(OC.$$.fragment,Yw),Yw.forEach(t),VRr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(O9.$$.fragment,Yl),XRr=i(Yl),z7e=n(Yl,"P",{});var $0t=s(z7e);zRr=r($0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$0t.forEach(t),WRr=i(Yl),vn=n(Yl,"P",{});var Kw=s(vn);QRr=r(Kw,"The model class to instantiate is selected based on the "),W7e=n(Kw,"CODE",{});var k0t=s(W7e);HRr=r(k0t,"model_type"),k0t.forEach(t),URr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Q7e=n(Kw,"CODE",{});var S0t=s(Q7e);JRr=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),YRr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=n(Kw,"CODE",{});var R0t=s(H7e);KRr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),ZRr=r(Kw,":"),Kw.forEach(t),ePr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);VC=n(qe,"LI",{});var uIe=s(VC);U7e=n(uIe,"STRONG",{});var P0t=s(U7e);oPr=r(P0t,"albert"),P0t.forEach(t),rPr=r(uIe," \u2014 "),NY=n(uIe,"A",{href:!0});var B0t=s(NY);tPr=r(B0t,"FlaxAlbertForSequenceClassification"),B0t.forEach(t),aPr=r(uIe," (ALBERT model)"),uIe.forEach(t),nPr=i(qe),XC=n(qe,"LI",{});var bIe=s(XC);J7e=n(bIe,"STRONG",{});var I0t=s(J7e);sPr=r(I0t,"bart"),I0t.forEach(t),lPr=r(bIe," \u2014 "),jY=n(bIe,"A",{href:!0});var q0t=s(jY);iPr=r(q0t,"FlaxBartForSequenceClassification"),q0t.forEach(t),dPr=r(bIe," (BART model)"),bIe.forEach(t),cPr=i(qe),zC=n(qe,"LI",{});var vIe=s(zC);Y7e=n(vIe,"STRONG",{});var N0t=s(Y7e);fPr=r(N0t,"bert"),N0t.forEach(t),mPr=r(vIe," \u2014 "),DY=n(vIe,"A",{href:!0});var j0t=s(DY);gPr=r(j0t,"FlaxBertForSequenceClassification"),j0t.forEach(t),hPr=r(vIe," (BERT model)"),vIe.forEach(t),pPr=i(qe),WC=n(qe,"LI",{});var FIe=s(WC);K7e=n(FIe,"STRONG",{});var D0t=s(K7e);_Pr=r(D0t,"big_bird"),D0t.forEach(t),uPr=r(FIe," \u2014 "),GY=n(FIe,"A",{href:!0});var G0t=s(GY);bPr=r(G0t,"FlaxBigBirdForSequenceClassification"),G0t.forEach(t),vPr=r(FIe," (BigBird model)"),FIe.forEach(t),FPr=i(qe),QC=n(qe,"LI",{});var TIe=s(QC);Z7e=n(TIe,"STRONG",{});var O0t=s(Z7e);TPr=r(O0t,"distilbert"),O0t.forEach(t),MPr=r(TIe," \u2014 "),OY=n(TIe,"A",{href:!0});var V0t=s(OY);EPr=r(V0t,"FlaxDistilBertForSequenceClassification"),V0t.forEach(t),CPr=r(TIe," (DistilBERT model)"),TIe.forEach(t),wPr=i(qe),HC=n(qe,"LI",{});var MIe=s(HC);eMe=n(MIe,"STRONG",{});var X0t=s(eMe);APr=r(X0t,"electra"),X0t.forEach(t),yPr=r(MIe," \u2014 "),VY=n(MIe,"A",{href:!0});var z0t=s(VY);LPr=r(z0t,"FlaxElectraForSequenceClassification"),z0t.forEach(t),xPr=r(MIe," (ELECTRA model)"),MIe.forEach(t),$Pr=i(qe),UC=n(qe,"LI",{});var EIe=s(UC);oMe=n(EIe,"STRONG",{});var W0t=s(oMe);kPr=r(W0t,"mbart"),W0t.forEach(t),SPr=r(EIe," \u2014 "),XY=n(EIe,"A",{href:!0});var Q0t=s(XY);RPr=r(Q0t,"FlaxMBartForSequenceClassification"),Q0t.forEach(t),PPr=r(EIe," (mBART model)"),EIe.forEach(t),BPr=i(qe),JC=n(qe,"LI",{});var CIe=s(JC);rMe=n(CIe,"STRONG",{});var H0t=s(rMe);IPr=r(H0t,"roberta"),H0t.forEach(t),qPr=r(CIe," \u2014 "),zY=n(CIe,"A",{href:!0});var U0t=s(zY);NPr=r(U0t,"FlaxRobertaForSequenceClassification"),U0t.forEach(t),jPr=r(CIe," (RoBERTa model)"),CIe.forEach(t),DPr=i(qe),YC=n(qe,"LI",{});var wIe=s(YC);tMe=n(wIe,"STRONG",{});var J0t=s(tMe);GPr=r(J0t,"roformer"),J0t.forEach(t),OPr=r(wIe," \u2014 "),WY=n(wIe,"A",{href:!0});var Y0t=s(WY);VPr=r(Y0t,"FlaxRoFormerForSequenceClassification"),Y0t.forEach(t),XPr=r(wIe," (RoFormer model)"),wIe.forEach(t),zPr=i(qe),KC=n(qe,"LI",{});var AIe=s(KC);aMe=n(AIe,"STRONG",{});var K0t=s(aMe);WPr=r(K0t,"xlm-roberta"),K0t.forEach(t),QPr=r(AIe," \u2014 "),QY=n(AIe,"A",{href:!0});var Z0t=s(QY);HPr=r(Z0t,"FlaxXLMRobertaForSequenceClassification"),Z0t.forEach(t),UPr=r(AIe," (XLM-RoBERTa model)"),AIe.forEach(t),qe.forEach(t),JPr=i(Yl),T(ZC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),HNe=i(f),Wc=n(f,"H2",{class:!0});var oGe=s(Wc);e5=n(oGe,"A",{id:!0,class:!0,href:!0});var eAt=s(e5);nMe=n(eAt,"SPAN",{});var oAt=s(nMe);T(V9.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),YPr=i(oGe),sMe=n(oGe,"SPAN",{});var rAt=s(sMe);KPr=r(rAt,"FlaxAutoModelForQuestionAnswering"),rAt.forEach(t),oGe.forEach(t),UNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(X9.$$.fragment,Kl),ZPr=i(Kl),Qc=n(Kl,"P",{});var Mee=s(Qc);eBr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HY=n(Mee,"A",{href:!0});var tAt=s(HY);oBr=r(tAt,"from_pretrained()"),tAt.forEach(t),rBr=r(Mee," class method or the "),UY=n(Mee,"A",{href:!0});var aAt=s(UY);tBr=r(aAt,"from_config()"),aAt.forEach(t),aBr=r(Mee,` class
method.`),Mee.forEach(t),nBr=i(Kl),z9=n(Kl,"P",{});var rGe=s(z9);sBr=r(rGe,"This class cannot be instantiated directly using "),lMe=n(rGe,"CODE",{});var nAt=s(lMe);lBr=r(nAt,"__init__()"),nAt.forEach(t),iBr=r(rGe," (throws an error)."),rGe.forEach(t),dBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Zw=s(Qt);T(W9.$$.fragment,Zw),cBr=i(Zw),iMe=n(Zw,"P",{});var sAt=s(iMe);fBr=r(sAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sAt.forEach(t),mBr=i(Zw),Hc=n(Zw,"P",{});var Eee=s(Hc);gBr=r(Eee,`Note:
Loading a model from its configuration file does `),dMe=n(Eee,"STRONG",{});var lAt=s(dMe);hBr=r(lAt,"not"),lAt.forEach(t),pBr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Eee,"A",{href:!0});var iAt=s(JY);_Br=r(iAt,"from_pretrained()"),iAt.forEach(t),uBr=r(Eee," to load the model weights."),Eee.forEach(t),bBr=i(Zw),T(o5.$$.fragment,Zw),Zw.forEach(t),vBr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Q9.$$.fragment,Zl),FBr=i(Zl),cMe=n(Zl,"P",{});var dAt=s(cMe);TBr=r(dAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dAt.forEach(t),MBr=i(Zl),Fn=n(Zl,"P",{});var e0=s(Fn);EBr=r(e0,"The model class to instantiate is selected based on the "),fMe=n(e0,"CODE",{});var cAt=s(fMe);CBr=r(cAt,"model_type"),cAt.forEach(t),wBr=r(e0,` property of the config object (either
passed as an argument or loaded from `),mMe=n(e0,"CODE",{});var fAt=s(mMe);ABr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),yBr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(e0,"CODE",{});var mAt=s(gMe);LBr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),xBr=r(e0,":"),e0.forEach(t),$Br=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);r5=n(Ne,"LI",{});var yIe=s(r5);hMe=n(yIe,"STRONG",{});var gAt=s(hMe);kBr=r(gAt,"albert"),gAt.forEach(t),SBr=r(yIe," \u2014 "),YY=n(yIe,"A",{href:!0});var hAt=s(YY);RBr=r(hAt,"FlaxAlbertForQuestionAnswering"),hAt.forEach(t),PBr=r(yIe," (ALBERT model)"),yIe.forEach(t),BBr=i(Ne),t5=n(Ne,"LI",{});var LIe=s(t5);pMe=n(LIe,"STRONG",{});var pAt=s(pMe);IBr=r(pAt,"bart"),pAt.forEach(t),qBr=r(LIe," \u2014 "),KY=n(LIe,"A",{href:!0});var _At=s(KY);NBr=r(_At,"FlaxBartForQuestionAnswering"),_At.forEach(t),jBr=r(LIe," (BART model)"),LIe.forEach(t),DBr=i(Ne),a5=n(Ne,"LI",{});var xIe=s(a5);_Me=n(xIe,"STRONG",{});var uAt=s(_Me);GBr=r(uAt,"bert"),uAt.forEach(t),OBr=r(xIe," \u2014 "),ZY=n(xIe,"A",{href:!0});var bAt=s(ZY);VBr=r(bAt,"FlaxBertForQuestionAnswering"),bAt.forEach(t),XBr=r(xIe," (BERT model)"),xIe.forEach(t),zBr=i(Ne),n5=n(Ne,"LI",{});var $Ie=s(n5);uMe=n($Ie,"STRONG",{});var vAt=s(uMe);WBr=r(vAt,"big_bird"),vAt.forEach(t),QBr=r($Ie," \u2014 "),eK=n($Ie,"A",{href:!0});var FAt=s(eK);HBr=r(FAt,"FlaxBigBirdForQuestionAnswering"),FAt.forEach(t),UBr=r($Ie," (BigBird model)"),$Ie.forEach(t),JBr=i(Ne),s5=n(Ne,"LI",{});var kIe=s(s5);bMe=n(kIe,"STRONG",{});var TAt=s(bMe);YBr=r(TAt,"distilbert"),TAt.forEach(t),KBr=r(kIe," \u2014 "),oK=n(kIe,"A",{href:!0});var MAt=s(oK);ZBr=r(MAt,"FlaxDistilBertForQuestionAnswering"),MAt.forEach(t),eIr=r(kIe," (DistilBERT model)"),kIe.forEach(t),oIr=i(Ne),l5=n(Ne,"LI",{});var SIe=s(l5);vMe=n(SIe,"STRONG",{});var EAt=s(vMe);rIr=r(EAt,"electra"),EAt.forEach(t),tIr=r(SIe," \u2014 "),rK=n(SIe,"A",{href:!0});var CAt=s(rK);aIr=r(CAt,"FlaxElectraForQuestionAnswering"),CAt.forEach(t),nIr=r(SIe," (ELECTRA model)"),SIe.forEach(t),sIr=i(Ne),i5=n(Ne,"LI",{});var RIe=s(i5);FMe=n(RIe,"STRONG",{});var wAt=s(FMe);lIr=r(wAt,"mbart"),wAt.forEach(t),iIr=r(RIe," \u2014 "),tK=n(RIe,"A",{href:!0});var AAt=s(tK);dIr=r(AAt,"FlaxMBartForQuestionAnswering"),AAt.forEach(t),cIr=r(RIe," (mBART model)"),RIe.forEach(t),fIr=i(Ne),d5=n(Ne,"LI",{});var PIe=s(d5);TMe=n(PIe,"STRONG",{});var yAt=s(TMe);mIr=r(yAt,"roberta"),yAt.forEach(t),gIr=r(PIe," \u2014 "),aK=n(PIe,"A",{href:!0});var LAt=s(aK);hIr=r(LAt,"FlaxRobertaForQuestionAnswering"),LAt.forEach(t),pIr=r(PIe," (RoBERTa model)"),PIe.forEach(t),_Ir=i(Ne),c5=n(Ne,"LI",{});var BIe=s(c5);MMe=n(BIe,"STRONG",{});var xAt=s(MMe);uIr=r(xAt,"roformer"),xAt.forEach(t),bIr=r(BIe," \u2014 "),nK=n(BIe,"A",{href:!0});var $At=s(nK);vIr=r($At,"FlaxRoFormerForQuestionAnswering"),$At.forEach(t),FIr=r(BIe," (RoFormer model)"),BIe.forEach(t),TIr=i(Ne),f5=n(Ne,"LI",{});var IIe=s(f5);EMe=n(IIe,"STRONG",{});var kAt=s(EMe);MIr=r(kAt,"xlm-roberta"),kAt.forEach(t),EIr=r(IIe," \u2014 "),sK=n(IIe,"A",{href:!0});var SAt=s(sK);CIr=r(SAt,"FlaxXLMRobertaForQuestionAnswering"),SAt.forEach(t),wIr=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),Ne.forEach(t),AIr=i(Zl),T(m5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),JNe=i(f),Uc=n(f,"H2",{class:!0});var tGe=s(Uc);g5=n(tGe,"A",{id:!0,class:!0,href:!0});var RAt=s(g5);CMe=n(RAt,"SPAN",{});var PAt=s(CMe);T(H9.$$.fragment,PAt),PAt.forEach(t),RAt.forEach(t),yIr=i(tGe),wMe=n(tGe,"SPAN",{});var BAt=s(wMe);LIr=r(BAt,"FlaxAutoModelForTokenClassification"),BAt.forEach(t),tGe.forEach(t),YNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(U9.$$.fragment,ei),xIr=i(ei),Jc=n(ei,"P",{});var Cee=s(Jc);$Ir=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lK=n(Cee,"A",{href:!0});var IAt=s(lK);kIr=r(IAt,"from_pretrained()"),IAt.forEach(t),SIr=r(Cee," class method or the "),iK=n(Cee,"A",{href:!0});var qAt=s(iK);RIr=r(qAt,"from_config()"),qAt.forEach(t),PIr=r(Cee,` class
method.`),Cee.forEach(t),BIr=i(ei),J9=n(ei,"P",{});var aGe=s(J9);IIr=r(aGe,"This class cannot be instantiated directly using "),AMe=n(aGe,"CODE",{});var NAt=s(AMe);qIr=r(NAt,"__init__()"),NAt.forEach(t),NIr=r(aGe," (throws an error)."),aGe.forEach(t),jIr=i(ei),Ht=n(ei,"DIV",{class:!0});var o0=s(Ht);T(Y9.$$.fragment,o0),DIr=i(o0),yMe=n(o0,"P",{});var jAt=s(yMe);GIr=r(jAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jAt.forEach(t),OIr=i(o0),Yc=n(o0,"P",{});var wee=s(Yc);VIr=r(wee,`Note:
Loading a model from its configuration file does `),LMe=n(wee,"STRONG",{});var DAt=s(LMe);XIr=r(DAt,"not"),DAt.forEach(t),zIr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(wee,"A",{href:!0});var GAt=s(dK);WIr=r(GAt,"from_pretrained()"),GAt.forEach(t),QIr=r(wee," to load the model weights."),wee.forEach(t),HIr=i(o0),T(h5.$$.fragment,o0),o0.forEach(t),UIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(K9.$$.fragment,oi),JIr=i(oi),xMe=n(oi,"P",{});var OAt=s(xMe);YIr=r(OAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OAt.forEach(t),KIr=i(oi),Tn=n(oi,"P",{});var r0=s(Tn);ZIr=r(r0,"The model class to instantiate is selected based on the "),$Me=n(r0,"CODE",{});var VAt=s($Me);eqr=r(VAt,"model_type"),VAt.forEach(t),oqr=r(r0,` property of the config object (either
passed as an argument or loaded from `),kMe=n(r0,"CODE",{});var XAt=s(kMe);rqr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),tqr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(r0,"CODE",{});var zAt=s(SMe);aqr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),nqr=r(r0,":"),r0.forEach(t),sqr=i(oi),De=n(oi,"UL",{});var Fo=s(De);p5=n(Fo,"LI",{});var qIe=s(p5);RMe=n(qIe,"STRONG",{});var WAt=s(RMe);lqr=r(WAt,"albert"),WAt.forEach(t),iqr=r(qIe," \u2014 "),cK=n(qIe,"A",{href:!0});var QAt=s(cK);dqr=r(QAt,"FlaxAlbertForTokenClassification"),QAt.forEach(t),cqr=r(qIe," (ALBERT model)"),qIe.forEach(t),fqr=i(Fo),_5=n(Fo,"LI",{});var NIe=s(_5);PMe=n(NIe,"STRONG",{});var HAt=s(PMe);mqr=r(HAt,"bert"),HAt.forEach(t),gqr=r(NIe," \u2014 "),fK=n(NIe,"A",{href:!0});var UAt=s(fK);hqr=r(UAt,"FlaxBertForTokenClassification"),UAt.forEach(t),pqr=r(NIe," (BERT model)"),NIe.forEach(t),_qr=i(Fo),u5=n(Fo,"LI",{});var jIe=s(u5);BMe=n(jIe,"STRONG",{});var JAt=s(BMe);uqr=r(JAt,"big_bird"),JAt.forEach(t),bqr=r(jIe," \u2014 "),mK=n(jIe,"A",{href:!0});var YAt=s(mK);vqr=r(YAt,"FlaxBigBirdForTokenClassification"),YAt.forEach(t),Fqr=r(jIe," (BigBird model)"),jIe.forEach(t),Tqr=i(Fo),b5=n(Fo,"LI",{});var DIe=s(b5);IMe=n(DIe,"STRONG",{});var KAt=s(IMe);Mqr=r(KAt,"distilbert"),KAt.forEach(t),Eqr=r(DIe," \u2014 "),gK=n(DIe,"A",{href:!0});var ZAt=s(gK);Cqr=r(ZAt,"FlaxDistilBertForTokenClassification"),ZAt.forEach(t),wqr=r(DIe," (DistilBERT model)"),DIe.forEach(t),Aqr=i(Fo),v5=n(Fo,"LI",{});var GIe=s(v5);qMe=n(GIe,"STRONG",{});var eyt=s(qMe);yqr=r(eyt,"electra"),eyt.forEach(t),Lqr=r(GIe," \u2014 "),hK=n(GIe,"A",{href:!0});var oyt=s(hK);xqr=r(oyt,"FlaxElectraForTokenClassification"),oyt.forEach(t),$qr=r(GIe," (ELECTRA model)"),GIe.forEach(t),kqr=i(Fo),F5=n(Fo,"LI",{});var OIe=s(F5);NMe=n(OIe,"STRONG",{});var ryt=s(NMe);Sqr=r(ryt,"roberta"),ryt.forEach(t),Rqr=r(OIe," \u2014 "),pK=n(OIe,"A",{href:!0});var tyt=s(pK);Pqr=r(tyt,"FlaxRobertaForTokenClassification"),tyt.forEach(t),Bqr=r(OIe," (RoBERTa model)"),OIe.forEach(t),Iqr=i(Fo),T5=n(Fo,"LI",{});var VIe=s(T5);jMe=n(VIe,"STRONG",{});var ayt=s(jMe);qqr=r(ayt,"roformer"),ayt.forEach(t),Nqr=r(VIe," \u2014 "),_K=n(VIe,"A",{href:!0});var nyt=s(_K);jqr=r(nyt,"FlaxRoFormerForTokenClassification"),nyt.forEach(t),Dqr=r(VIe," (RoFormer model)"),VIe.forEach(t),Gqr=i(Fo),M5=n(Fo,"LI",{});var XIe=s(M5);DMe=n(XIe,"STRONG",{});var syt=s(DMe);Oqr=r(syt,"xlm-roberta"),syt.forEach(t),Vqr=r(XIe," \u2014 "),uK=n(XIe,"A",{href:!0});var lyt=s(uK);Xqr=r(lyt,"FlaxXLMRobertaForTokenClassification"),lyt.forEach(t),zqr=r(XIe," (XLM-RoBERTa model)"),XIe.forEach(t),Fo.forEach(t),Wqr=i(oi),T(E5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),KNe=i(f),Kc=n(f,"H2",{class:!0});var nGe=s(Kc);C5=n(nGe,"A",{id:!0,class:!0,href:!0});var iyt=s(C5);GMe=n(iyt,"SPAN",{});var dyt=s(GMe);T(Z9.$$.fragment,dyt),dyt.forEach(t),iyt.forEach(t),Qqr=i(nGe),OMe=n(nGe,"SPAN",{});var cyt=s(OMe);Hqr=r(cyt,"FlaxAutoModelForMultipleChoice"),cyt.forEach(t),nGe.forEach(t),ZNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(ex.$$.fragment,ri),Uqr=i(ri),Zc=n(ri,"P",{});var Aee=s(Zc);Jqr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bK=n(Aee,"A",{href:!0});var fyt=s(bK);Yqr=r(fyt,"from_pretrained()"),fyt.forEach(t),Kqr=r(Aee," class method or the "),vK=n(Aee,"A",{href:!0});var myt=s(vK);Zqr=r(myt,"from_config()"),myt.forEach(t),eNr=r(Aee,` class
method.`),Aee.forEach(t),oNr=i(ri),ox=n(ri,"P",{});var sGe=s(ox);rNr=r(sGe,"This class cannot be instantiated directly using "),VMe=n(sGe,"CODE",{});var gyt=s(VMe);tNr=r(gyt,"__init__()"),gyt.forEach(t),aNr=r(sGe," (throws an error)."),sGe.forEach(t),nNr=i(ri),Ut=n(ri,"DIV",{class:!0});var t0=s(Ut);T(rx.$$.fragment,t0),sNr=i(t0),XMe=n(t0,"P",{});var hyt=s(XMe);lNr=r(hyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hyt.forEach(t),iNr=i(t0),ef=n(t0,"P",{});var yee=s(ef);dNr=r(yee,`Note:
Loading a model from its configuration file does `),zMe=n(yee,"STRONG",{});var pyt=s(zMe);cNr=r(pyt,"not"),pyt.forEach(t),fNr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(yee,"A",{href:!0});var _yt=s(FK);mNr=r(_yt,"from_pretrained()"),_yt.forEach(t),gNr=r(yee," to load the model weights."),yee.forEach(t),hNr=i(t0),T(w5.$$.fragment,t0),t0.forEach(t),pNr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(tx.$$.fragment,ti),_Nr=i(ti),WMe=n(ti,"P",{});var uyt=s(WMe);uNr=r(uyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uyt.forEach(t),bNr=i(ti),Mn=n(ti,"P",{});var a0=s(Mn);vNr=r(a0,"The model class to instantiate is selected based on the "),QMe=n(a0,"CODE",{});var byt=s(QMe);FNr=r(byt,"model_type"),byt.forEach(t),TNr=r(a0,` property of the config object (either
passed as an argument or loaded from `),HMe=n(a0,"CODE",{});var vyt=s(HMe);MNr=r(vyt,"pretrained_model_name_or_path"),vyt.forEach(t),ENr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(a0,"CODE",{});var Fyt=s(UMe);CNr=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),wNr=r(a0,":"),a0.forEach(t),ANr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);A5=n(To,"LI",{});var zIe=s(A5);JMe=n(zIe,"STRONG",{});var Tyt=s(JMe);yNr=r(Tyt,"albert"),Tyt.forEach(t),LNr=r(zIe," \u2014 "),TK=n(zIe,"A",{href:!0});var Myt=s(TK);xNr=r(Myt,"FlaxAlbertForMultipleChoice"),Myt.forEach(t),$Nr=r(zIe," (ALBERT model)"),zIe.forEach(t),kNr=i(To),y5=n(To,"LI",{});var WIe=s(y5);YMe=n(WIe,"STRONG",{});var Eyt=s(YMe);SNr=r(Eyt,"bert"),Eyt.forEach(t),RNr=r(WIe," \u2014 "),MK=n(WIe,"A",{href:!0});var Cyt=s(MK);PNr=r(Cyt,"FlaxBertForMultipleChoice"),Cyt.forEach(t),BNr=r(WIe," (BERT model)"),WIe.forEach(t),INr=i(To),L5=n(To,"LI",{});var QIe=s(L5);KMe=n(QIe,"STRONG",{});var wyt=s(KMe);qNr=r(wyt,"big_bird"),wyt.forEach(t),NNr=r(QIe," \u2014 "),EK=n(QIe,"A",{href:!0});var Ayt=s(EK);jNr=r(Ayt,"FlaxBigBirdForMultipleChoice"),Ayt.forEach(t),DNr=r(QIe," (BigBird model)"),QIe.forEach(t),GNr=i(To),x5=n(To,"LI",{});var HIe=s(x5);ZMe=n(HIe,"STRONG",{});var yyt=s(ZMe);ONr=r(yyt,"distilbert"),yyt.forEach(t),VNr=r(HIe," \u2014 "),CK=n(HIe,"A",{href:!0});var Lyt=s(CK);XNr=r(Lyt,"FlaxDistilBertForMultipleChoice"),Lyt.forEach(t),zNr=r(HIe," (DistilBERT model)"),HIe.forEach(t),WNr=i(To),$5=n(To,"LI",{});var UIe=s($5);e4e=n(UIe,"STRONG",{});var xyt=s(e4e);QNr=r(xyt,"electra"),xyt.forEach(t),HNr=r(UIe," \u2014 "),wK=n(UIe,"A",{href:!0});var $yt=s(wK);UNr=r($yt,"FlaxElectraForMultipleChoice"),$yt.forEach(t),JNr=r(UIe," (ELECTRA model)"),UIe.forEach(t),YNr=i(To),k5=n(To,"LI",{});var JIe=s(k5);o4e=n(JIe,"STRONG",{});var kyt=s(o4e);KNr=r(kyt,"roberta"),kyt.forEach(t),ZNr=r(JIe," \u2014 "),AK=n(JIe,"A",{href:!0});var Syt=s(AK);ejr=r(Syt,"FlaxRobertaForMultipleChoice"),Syt.forEach(t),ojr=r(JIe," (RoBERTa model)"),JIe.forEach(t),rjr=i(To),S5=n(To,"LI",{});var YIe=s(S5);r4e=n(YIe,"STRONG",{});var Ryt=s(r4e);tjr=r(Ryt,"roformer"),Ryt.forEach(t),ajr=r(YIe," \u2014 "),yK=n(YIe,"A",{href:!0});var Pyt=s(yK);njr=r(Pyt,"FlaxRoFormerForMultipleChoice"),Pyt.forEach(t),sjr=r(YIe," (RoFormer model)"),YIe.forEach(t),ljr=i(To),R5=n(To,"LI",{});var KIe=s(R5);t4e=n(KIe,"STRONG",{});var Byt=s(t4e);ijr=r(Byt,"xlm-roberta"),Byt.forEach(t),djr=r(KIe," \u2014 "),LK=n(KIe,"A",{href:!0});var Iyt=s(LK);cjr=r(Iyt,"FlaxXLMRobertaForMultipleChoice"),Iyt.forEach(t),fjr=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),To.forEach(t),mjr=i(ti),T(P5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),eje=i(f),of=n(f,"H2",{class:!0});var lGe=s(of);B5=n(lGe,"A",{id:!0,class:!0,href:!0});var qyt=s(B5);a4e=n(qyt,"SPAN",{});var Nyt=s(a4e);T(ax.$$.fragment,Nyt),Nyt.forEach(t),qyt.forEach(t),gjr=i(lGe),n4e=n(lGe,"SPAN",{});var jyt=s(n4e);hjr=r(jyt,"FlaxAutoModelForNextSentencePrediction"),jyt.forEach(t),lGe.forEach(t),oje=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(nx.$$.fragment,ai),pjr=i(ai),rf=n(ai,"P",{});var Lee=s(rf);_jr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xK=n(Lee,"A",{href:!0});var Dyt=s(xK);ujr=r(Dyt,"from_pretrained()"),Dyt.forEach(t),bjr=r(Lee," class method or the "),$K=n(Lee,"A",{href:!0});var Gyt=s($K);vjr=r(Gyt,"from_config()"),Gyt.forEach(t),Fjr=r(Lee,` class
method.`),Lee.forEach(t),Tjr=i(ai),sx=n(ai,"P",{});var iGe=s(sx);Mjr=r(iGe,"This class cannot be instantiated directly using "),s4e=n(iGe,"CODE",{});var Oyt=s(s4e);Ejr=r(Oyt,"__init__()"),Oyt.forEach(t),Cjr=r(iGe," (throws an error)."),iGe.forEach(t),wjr=i(ai),Jt=n(ai,"DIV",{class:!0});var n0=s(Jt);T(lx.$$.fragment,n0),Ajr=i(n0),l4e=n(n0,"P",{});var Vyt=s(l4e);yjr=r(Vyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vyt.forEach(t),Ljr=i(n0),tf=n(n0,"P",{});var xee=s(tf);xjr=r(xee,`Note:
Loading a model from its configuration file does `),i4e=n(xee,"STRONG",{});var Xyt=s(i4e);$jr=r(Xyt,"not"),Xyt.forEach(t),kjr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(xee,"A",{href:!0});var zyt=s(kK);Sjr=r(zyt,"from_pretrained()"),zyt.forEach(t),Rjr=r(xee," to load the model weights."),xee.forEach(t),Pjr=i(n0),T(I5.$$.fragment,n0),n0.forEach(t),Bjr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(ix.$$.fragment,ni),Ijr=i(ni),d4e=n(ni,"P",{});var Wyt=s(d4e);qjr=r(Wyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wyt.forEach(t),Njr=i(ni),En=n(ni,"P",{});var s0=s(En);jjr=r(s0,"The model class to instantiate is selected based on the "),c4e=n(s0,"CODE",{});var Qyt=s(c4e);Djr=r(Qyt,"model_type"),Qyt.forEach(t),Gjr=r(s0,` property of the config object (either
passed as an argument or loaded from `),f4e=n(s0,"CODE",{});var Hyt=s(f4e);Ojr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),Vjr=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(s0,"CODE",{});var Uyt=s(m4e);Xjr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),zjr=r(s0,":"),s0.forEach(t),Wjr=i(ni),g4e=n(ni,"UL",{});var Jyt=s(g4e);q5=n(Jyt,"LI",{});var ZIe=s(q5);h4e=n(ZIe,"STRONG",{});var Yyt=s(h4e);Qjr=r(Yyt,"bert"),Yyt.forEach(t),Hjr=r(ZIe," \u2014 "),SK=n(ZIe,"A",{href:!0});var Kyt=s(SK);Ujr=r(Kyt,"FlaxBertForNextSentencePrediction"),Kyt.forEach(t),Jjr=r(ZIe," (BERT model)"),ZIe.forEach(t),Jyt.forEach(t),Yjr=i(ni),T(N5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),rje=i(f),af=n(f,"H2",{class:!0});var dGe=s(af);j5=n(dGe,"A",{id:!0,class:!0,href:!0});var Zyt=s(j5);p4e=n(Zyt,"SPAN",{});var eLt=s(p4e);T(dx.$$.fragment,eLt),eLt.forEach(t),Zyt.forEach(t),Kjr=i(dGe),_4e=n(dGe,"SPAN",{});var oLt=s(_4e);Zjr=r(oLt,"FlaxAutoModelForImageClassification"),oLt.forEach(t),dGe.forEach(t),tje=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(cx.$$.fragment,si),eDr=i(si),nf=n(si,"P",{});var $ee=s(nf);oDr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RK=n($ee,"A",{href:!0});var rLt=s(RK);rDr=r(rLt,"from_pretrained()"),rLt.forEach(t),tDr=r($ee," class method or the "),PK=n($ee,"A",{href:!0});var tLt=s(PK);aDr=r(tLt,"from_config()"),tLt.forEach(t),nDr=r($ee,` class
method.`),$ee.forEach(t),sDr=i(si),fx=n(si,"P",{});var cGe=s(fx);lDr=r(cGe,"This class cannot be instantiated directly using "),u4e=n(cGe,"CODE",{});var aLt=s(u4e);iDr=r(aLt,"__init__()"),aLt.forEach(t),dDr=r(cGe," (throws an error)."),cGe.forEach(t),cDr=i(si),Yt=n(si,"DIV",{class:!0});var l0=s(Yt);T(mx.$$.fragment,l0),fDr=i(l0),b4e=n(l0,"P",{});var nLt=s(b4e);mDr=r(nLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nLt.forEach(t),gDr=i(l0),sf=n(l0,"P",{});var kee=s(sf);hDr=r(kee,`Note:
Loading a model from its configuration file does `),v4e=n(kee,"STRONG",{});var sLt=s(v4e);pDr=r(sLt,"not"),sLt.forEach(t),_Dr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(kee,"A",{href:!0});var lLt=s(BK);uDr=r(lLt,"from_pretrained()"),lLt.forEach(t),bDr=r(kee," to load the model weights."),kee.forEach(t),vDr=i(l0),T(D5.$$.fragment,l0),l0.forEach(t),FDr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(gx.$$.fragment,li),TDr=i(li),F4e=n(li,"P",{});var iLt=s(F4e);MDr=r(iLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iLt.forEach(t),EDr=i(li),Cn=n(li,"P",{});var i0=s(Cn);CDr=r(i0,"The model class to instantiate is selected based on the "),T4e=n(i0,"CODE",{});var dLt=s(T4e);wDr=r(dLt,"model_type"),dLt.forEach(t),ADr=r(i0,` property of the config object (either
passed as an argument or loaded from `),M4e=n(i0,"CODE",{});var cLt=s(M4e);yDr=r(cLt,"pretrained_model_name_or_path"),cLt.forEach(t),LDr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(i0,"CODE",{});var fLt=s(E4e);xDr=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),$Dr=r(i0,":"),i0.forEach(t),kDr=i(li),hx=n(li,"UL",{});var fGe=s(hx);G5=n(fGe,"LI",{});var eqe=s(G5);C4e=n(eqe,"STRONG",{});var mLt=s(C4e);SDr=r(mLt,"beit"),mLt.forEach(t),RDr=r(eqe," \u2014 "),IK=n(eqe,"A",{href:!0});var gLt=s(IK);PDr=r(gLt,"FlaxBeitForImageClassification"),gLt.forEach(t),BDr=r(eqe," (BEiT model)"),eqe.forEach(t),IDr=i(fGe),O5=n(fGe,"LI",{});var oqe=s(O5);w4e=n(oqe,"STRONG",{});var hLt=s(w4e);qDr=r(hLt,"vit"),hLt.forEach(t),NDr=r(oqe," \u2014 "),qK=n(oqe,"A",{href:!0});var pLt=s(qK);jDr=r(pLt,"FlaxViTForImageClassification"),pLt.forEach(t),DDr=r(oqe," (ViT model)"),oqe.forEach(t),fGe.forEach(t),GDr=i(li),T(V5.$$.fragment,li),li.forEach(t),si.forEach(t),aje=i(f),lf=n(f,"H2",{class:!0});var mGe=s(lf);X5=n(mGe,"A",{id:!0,class:!0,href:!0});var _Lt=s(X5);A4e=n(_Lt,"SPAN",{});var uLt=s(A4e);T(px.$$.fragment,uLt),uLt.forEach(t),_Lt.forEach(t),ODr=i(mGe),y4e=n(mGe,"SPAN",{});var bLt=s(y4e);VDr=r(bLt,"FlaxAutoModelForVision2Seq"),bLt.forEach(t),mGe.forEach(t),nje=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(_x.$$.fragment,ii),XDr=i(ii),df=n(ii,"P",{});var See=s(df);zDr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=n(See,"A",{href:!0});var vLt=s(NK);WDr=r(vLt,"from_pretrained()"),vLt.forEach(t),QDr=r(See," class method or the "),jK=n(See,"A",{href:!0});var FLt=s(jK);HDr=r(FLt,"from_config()"),FLt.forEach(t),UDr=r(See,` class
method.`),See.forEach(t),JDr=i(ii),ux=n(ii,"P",{});var gGe=s(ux);YDr=r(gGe,"This class cannot be instantiated directly using "),L4e=n(gGe,"CODE",{});var TLt=s(L4e);KDr=r(TLt,"__init__()"),TLt.forEach(t),ZDr=r(gGe," (throws an error)."),gGe.forEach(t),eGr=i(ii),Kt=n(ii,"DIV",{class:!0});var d0=s(Kt);T(bx.$$.fragment,d0),oGr=i(d0),x4e=n(d0,"P",{});var MLt=s(x4e);rGr=r(MLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MLt.forEach(t),tGr=i(d0),cf=n(d0,"P",{});var Ree=s(cf);aGr=r(Ree,`Note:
Loading a model from its configuration file does `),$4e=n(Ree,"STRONG",{});var ELt=s($4e);nGr=r(ELt,"not"),ELt.forEach(t),sGr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(Ree,"A",{href:!0});var CLt=s(DK);lGr=r(CLt,"from_pretrained()"),CLt.forEach(t),iGr=r(Ree," to load the model weights."),Ree.forEach(t),dGr=i(d0),T(z5.$$.fragment,d0),d0.forEach(t),cGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(vx.$$.fragment,di),fGr=i(di),k4e=n(di,"P",{});var wLt=s(k4e);mGr=r(wLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wLt.forEach(t),gGr=i(di),wn=n(di,"P",{});var c0=s(wn);hGr=r(c0,"The model class to instantiate is selected based on the "),S4e=n(c0,"CODE",{});var ALt=s(S4e);pGr=r(ALt,"model_type"),ALt.forEach(t),_Gr=r(c0,` property of the config object (either
passed as an argument or loaded from `),R4e=n(c0,"CODE",{});var yLt=s(R4e);uGr=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),bGr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(c0,"CODE",{});var LLt=s(P4e);vGr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),FGr=r(c0,":"),c0.forEach(t),TGr=i(di),B4e=n(di,"UL",{});var xLt=s(B4e);W5=n(xLt,"LI",{});var rqe=s(W5);I4e=n(rqe,"STRONG",{});var $Lt=s(I4e);MGr=r($Lt,"vision-encoder-decoder"),$Lt.forEach(t),EGr=r(rqe," \u2014 "),GK=n(rqe,"A",{href:!0});var kLt=s(GK);CGr=r(kLt,"FlaxVisionEncoderDecoderModel"),kLt.forEach(t),wGr=r(rqe," (Vision Encoder decoder model)"),rqe.forEach(t),xLt.forEach(t),AGr=i(di),T(Q5.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Bxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(N$,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(j$,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig"),c(D$,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig"),c(G$,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig"),c(O$,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig"),c(V$,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(X$,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig"),c(z$,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(W$,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Q$,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(H$,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig"),c(U$,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig"),c(J$,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig"),c(Y$,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig"),c(K$,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig"),c(Z$,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig"),c(ek,"href","/docs/transformers/pr_16871/en/model_doc/cvt#transformers.CvtConfig"),c(ok,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rk,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tk,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ak,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig"),c(nk,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sk,"href","/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lk,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig"),c(ik,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig"),c(dk,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ck,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRConfig"),c(fk,"href","/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTConfig"),c(mk,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig"),c(gk,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig"),c(pk,"href","/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaConfig"),c(_k,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig"),c(uk,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig"),c(bk,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig"),c(vk,"href","/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNConfig"),c(Fk,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config"),c(Tk,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Mk,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig"),c(Ek,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig"),c(Ck,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig"),c(wk,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ak,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(yk,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Lk,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig"),c(xk,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig"),c($k,"href","/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeConfig"),c(kk,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig"),c(Sk,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Config"),c(Rk,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig"),c(Pk,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Bk,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig"),c(Ik,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(qk,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Nk,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig"),c(jk,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config"),c(Dk,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Gk,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ok,"href","/docs/transformers/pr_16871/en/model_doc/opt#transformers.OPTConfig"),c(Vk,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig"),c(Xk,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig"),c(zk,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig"),c(Wk,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Qk,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Hk,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Uk,"href","/docs/transformers/pr_16871/en/model_doc/rag#transformers.RagConfig"),c(Jk,"href","/docs/transformers/pr_16871/en/model_doc/realm#transformers.RealmConfig"),c(Yk,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig"),c(Kk,"href","/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetConfig"),c(Zk,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig"),c(eS,"href","/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetConfig"),c(oS,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertConfig"),c(rS,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig"),c(tS,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig"),c(aS,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig"),c(nS,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig"),c(sS,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig"),c(lS,"href","/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(iS,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(dS,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(cS,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterConfig"),c(fS,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(mS,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig"),c(gS,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config"),c(hS,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig"),c(pS,"href","/docs/transformers/pr_16871/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(_S,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uS,"href","/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRConfig"),c(bS,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(vS,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(FS,"href","/docs/transformers/pr_16871/en/model_doc/van#transformers.VanConfig"),c(TS,"href","/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltConfig"),c(MS,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(CS,"href","/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(wS,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig"),c(AS,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(yS,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(LS,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(xS,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig"),c($S,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig"),c(kS,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig"),c(SS,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(RS,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(PS,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(BS,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig"),c(IS,"href","/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosConfig"),c(qS,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(NS,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(jS,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizer"),c(DS,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(GS,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartTokenizer"),c(OS,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartTokenizerFast"),c(VS,"href","/docs/transformers/pr_16871/en/model_doc/barthez#transformers.BarthezTokenizer"),c(XS,"href","/docs/transformers/pr_16871/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(zS,"href","/docs/transformers/pr_16871/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(WS,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizer"),c(QS,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizerFast"),c(HS,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(US,"href","/docs/transformers/pr_16871/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(JS,"href","/docs/transformers/pr_16871/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(YS,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(KS,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eR,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oR,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(rR,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(tR,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(aR,"href","/docs/transformers/pr_16871/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(nR,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertTokenizer"),c(sR,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(lR,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineTokenizer"),c(iR,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPTokenizer"),c(dR,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cR,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(fR,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(mR,"href","/docs/transformers/pr_16871/en/model_doc/cpm#transformers.CpmTokenizer"),c(gR,"href","/docs/transformers/pr_16871/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(hR,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(pR,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_R,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uR,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaTokenizer"),c(bR,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(vR,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(FR,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(TR,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(MR,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(ER,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(CR,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(wR,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraTokenizer"),c(AR,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(yR,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(LR,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetTokenizer"),c(xR,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetTokenizerFast"),c($R,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(kR,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelTokenizer"),c(SR,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(RR,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PR,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BR,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IR,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(qR,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NR,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jR,"href","/docs/transformers/pr_16871/en/model_doc/herbert#transformers.HerbertTokenizer"),c(DR,"href","/docs/transformers/pr_16871/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(GR,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OR,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VR,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XR,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(zR,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(WR,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(QR,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(HR,"href","/docs/transformers/pr_16871/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(UR,"href","/docs/transformers/pr_16871/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JR,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDTokenizer"),c(YR,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDTokenizerFast"),c(KR,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZR,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eP,"href","/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeTokenizer"),c(oP,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(rP,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(tP,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(aP,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianTokenizer"),c(nP,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartTokenizer"),c(sP,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(lP,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(iP,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(dP,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizer"),c(cP,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizerFast"),c(fP,"href","/docs/transformers/pr_16871/en/model_doc/mluke#transformers.MLukeTokenizer"),c(mP,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(gP,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(hP,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(pP,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(_P,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Tokenizer"),c(uP,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5TokenizerFast"),c(bP,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizer"),c(vP,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(FP,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(TP,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(MP,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EP,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(CP,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(wP,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(AP,"href","/docs/transformers/pr_16871/en/model_doc/phobert#transformers.PhobertTokenizer"),c(yP,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartTokenizer"),c(LP,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(xP,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizer"),c($P,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizerFast"),c(kP,"href","/docs/transformers/pr_16871/en/model_doc/rag#transformers.RagTokenizer"),c(SP,"href","/docs/transformers/pr_16871/en/model_doc/realm#transformers.RealmTokenizer"),c(RP,"href","/docs/transformers/pr_16871/en/model_doc/realm#transformers.RealmTokenizerFast"),c(PP,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerTokenizer"),c(BP,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(IP,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertTokenizer"),c(qP,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(NP,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(jP,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(DP,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GP,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OP,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(VP,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(XP,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(zP,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(WP,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterTokenizer"),c(QP,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(HP,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(UP,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(JP,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Tokenizer"),c(YP,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5TokenizerFast"),c(KP,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasTokenizer"),c(ZP,"href","/docs/transformers/pr_16871/en/model_doc/tapex#transformers.TapexTokenizer"),c(eB,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(oB,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizer"),c(rB,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizerFast"),c(tB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(sB,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMTokenizer"),c(lB,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(iB,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMTokenizer"),c(dB,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(cB,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(fB,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gB,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(pB,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(_B,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizer"),c(uB,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(bB,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(vB,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CB,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c($B,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kB,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoProcessor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(QB,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(HB,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPProcessor"),c(UB,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(JB,"href","/docs/transformers/pr_16871/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(YB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(eI,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oI,"href","/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rI,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aI,"href","/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltProcessor"),c(nI,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(sI,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lI,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ep,"id","transformers.AutoModel"),c(ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ep,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(dI,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cI,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fI,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mI,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertModel"),c(gI,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartModel"),c(hI,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitModel"),c(pI,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertModel"),c(_I,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(uI,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdModel"),c(bI,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(vI,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(FI,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(TI,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertModel"),c(MI,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineModel"),c(EI,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPModel"),c(CI,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertModel"),c(wI,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextModel"),c(AI,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLModel"),c(yI,"href","/docs/transformers/pr_16871/en/model_doc/cvt#transformers.CvtModel"),c(LI,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(xI,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextModel"),c($I,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(kI,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaModel"),c(SI,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(RI,"href","/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(PI,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTModel"),c(BI,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrModel"),c(II,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertModel"),c(qI,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(NI,"href","/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTModel"),c(jI,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraModel"),c(DI,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertModel"),c(GI,"href","/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaModel"),c(OI,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetModel"),c(VI,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTModel"),c(XI,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelModel"),c(zI,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelBaseModel"),c(WI,"href","/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNModel"),c(QI,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Model"),c(HI,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(UI,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJModel"),c(JI,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertModel"),c(YI,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertModel"),c(KI,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(ZI,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(eq,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(oq,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDModel"),c(rq,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerModel"),c(tq,"href","/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeModel"),c(aq,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertModel"),c(nq,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Model"),c(sq,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianModel"),c(lq,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerModel"),c(iq,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartModel"),c(dq,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cq,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fq,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetModel"),c(mq,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Model"),c(gq,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hq,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pq,"href","/docs/transformers/pr_16871/en/model_doc/opt#transformers.OPTModel"),c(_q,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusModel"),c(uq,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverModel"),c(bq,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartModel"),c(vq,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Fq,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Tq,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Mq,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModel"),c(Eq,"href","/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetModel"),c(Cq,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertModel"),c(wq,"href","/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetModel"),c(Aq,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel"),c(yq,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaModel"),c(Lq,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerModel"),c(xq,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerModel"),c($q,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWModel"),c(kq,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDModel"),c(Sq,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Rq,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterModel"),c(Pq,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Bq,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinModel"),c(Iq,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Model"),c(qq,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasModel"),c(Nq,"href","/docs/transformers/pr_16871/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(jq,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Dq,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Gq,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Oq,"href","/docs/transformers/pr_16871/en/model_doc/van#transformers.VanModel"),c(Vq,"href","/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltModel"),c(Xq,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(zq,"href","/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Wq,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTModel"),c(Qq,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Hq,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Uq,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Jq,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMModel"),c(Yq,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMModel"),c(Kq,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMModel"),c(Zq,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(eN,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(oN,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(rN,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetModel"),c(tN,"href","/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosModel"),c(aN,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForPreTraining"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(nN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iN,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForPreTraining"),c(dN,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cN,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForPreTraining"),c(fN,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(mN,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gN,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hN,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pN,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uN,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bN,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vN,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FN,"href","/docs/transformers/pr_16871/en/model_doc/flava#transformers.FlavaForPreTraining"),c(TN,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForPreTraining"),c(MN,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(EN,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(CN,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wN,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AN,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yN,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LN,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xN,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($N,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kN,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SN,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RN,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel"),c(PN,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BN,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IN,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(NN,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jN,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DN,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GN,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ON,"href","/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VN,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XN,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zN,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(WN,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HN,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UN,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gu,"id","transformers.AutoModelForCausalLM"),c(Gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(JN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZN,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForCausalLM"),c(ej,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertLMHeadModel"),c(oj,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rj,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tj,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aj,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nj,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sj,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lj,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ij,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dj,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cj,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fj,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mj,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(gj,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianForCausalLM"),c(hj,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForCausalLM"),c(pj,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(_j,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uj,"href","/docs/transformers/pr_16871/en/model_doc/opt#transformers.OPTForCausalLM"),c(bj,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(vj,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Fj,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Tj,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Mj,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Ej,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Cj,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(wj,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Aj,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yj,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Lj,"href","/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(xj,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMForCausalLM"),c($j,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kj,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Sj,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Rj,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Pj,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForMaskedLM"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Bj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ij,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nj,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(jj,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zj,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Qj,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Uj,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Jj,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Yj,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Kj,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eD,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nD,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sD,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lD,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dD,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fD,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(mD,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hD,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pD,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_D,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(uD,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mb,"id","transformers.AutoModelForSeq2SeqLM"),c(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(bD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AD,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianMTModel"),c($D,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForSequenceClassification"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(qD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DD,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c($G,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L2,"id","transformers.AutoModelForMultipleChoice"),c(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L2,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(SG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(NG,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(DG,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(OG,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(QG,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(HG,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(JG,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(eO,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(tO,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(aO,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(sO,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(lO,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(iO,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(dO,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lv,"id","transformers.AutoModelForNextSentencePrediction"),c(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lv,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(cO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(hO,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(pO,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(_O,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(uO,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_v,"id","transformers.AutoModelForTokenClassification"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(bO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(MO,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForTokenClassification"),c(EO,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(CO,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wO,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AO,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(LO,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xO,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($O,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SO,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RO,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PO,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BO,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IO,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(NO,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jO,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(DO,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(OO,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(VO,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(XO,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(zO,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(WO,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(QO,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(HO,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(UO,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(JO,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(YO,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(KO,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ZO,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForQuestionAnswering"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(eV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uV,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c($V,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(NV,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(GV,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForTableQuestionAnswering"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(OV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForImageClassification"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(WV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForImageClassification"),c(JV,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(YV,"href","/docs/transformers/pr_16871/en/model_doc/cvt#transformers.CvtForImageClassification"),c(KV,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(ZV,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassification"),c(eX,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(oX,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(rX,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(tX,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(aX,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nX,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(sX,"href","/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(lX,"href","/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(iX,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(dX,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForImageClassification"),c(cX,"href","/docs/transformers/pr_16871/en/model_doc/van#transformers.VanForImageClassification"),c(fX,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForVision2Seq"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(mX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h6,"id","transformers.AutoModelForAudioClassification"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(_X,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(FX,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(MX,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(EX,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CX,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(wX,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(yX,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y6,"id","transformers.AutoModelForAudioFrameClassification"),c(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y6,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(LX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(SX,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(RX,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(PX,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(BX,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.AutoModelForCTC"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(IX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(DX,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForCTC"),c(GX,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForCTC"),c(OX,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForCTC"),c(VX,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(XX,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(zX,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(WX,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(QX,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(HX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(KX,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForAudioXVector"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(tz,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(az,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(nz,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(sz,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForMaskedImageModeling"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(lz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(fz,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(mz,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForObjectDetection"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(gz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForObjectDetection"),c(uz,"href","/docs/transformers/pr_16871/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForImageSegmentation"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(bz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForSemanticSegmentation"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Az,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(yz,"href","/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Lz,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForInstanceSegmentation"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(xz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModel"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertModel"),c(qz,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartModel"),c(Nz,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertModel"),c(jz,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Dz,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Gz,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertModel"),c(Oz,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.TFCLIPModel"),c(Vz,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertModel"),c(Xz,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextModel"),c(zz,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Wz,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Qz,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaModel"),c(Hz,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Uz,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Jz,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Yz,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraModel"),c(Kz,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Zz,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelModel"),c(eW,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(oW,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2Model"),c(rW,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJModel"),c(tW,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.TFHubertModel"),c(aW,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(nW,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDModel"),c(sW,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerModel"),c(lW,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertModel"),c(iW,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianModel"),c(dW,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartModel"),c(cW,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(fW,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetModel"),c(mW,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5Model"),c(gW,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(hW,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusModel"),c(pW,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertModel"),c(_W,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaModel"),c(uW,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerModel"),c(bW,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(vW,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.TFSwinModel"),c(FW,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5Model"),c(TW,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasModel"),c(MW,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(EW,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTModel"),c(CW,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(wW,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(AW,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMModel"),c(yW,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(LW,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B8,"id","transformers.TFAutoModelForPreTraining"),c(B8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B8,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(xW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(RW,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PW,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForPreTraining"),c(BW,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IW,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qW,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NW,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(jW,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DW,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(GW,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OW,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(VW,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(XW,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(zW,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(WW,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QW,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(HW,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(UW,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(JW,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YW,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(KW,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZW,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.TFAutoModelForCausalLM"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(nQ,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(sQ,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iQ,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(dQ,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cQ,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(fQ,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(mQ,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(gQ,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hQ,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.TFAutoModelForImageClassification"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(_Q,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(FQ,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(TQ,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(MQ,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForMaskedLM"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kQ,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BQ,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DQ,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VQ,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XQ,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(WQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZQ,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianMTModel"),c(oH,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tH,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForSequenceClassification"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(nH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dH,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mH,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gH,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hH,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pH,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uH,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(vH,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(FH,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TH,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MH,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EH,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CH,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wH,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AH,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(yH,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(LH,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xH,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($H,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kH,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SH,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RH,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForMultipleChoice"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(PH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(NH,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DH,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VH,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zH,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(WH,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HH,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JH,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YH,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KH,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(eU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aU,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(nU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForTokenClassification"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(dU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gU,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hU,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(pU,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(_U,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uU,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bU,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(FU,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TU,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MU,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EU,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CU,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wU,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AU,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(LU,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xU,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($U,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kU,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForQuestionAnswering"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(SU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XU,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZU,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForVision2Seq"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.FlaxAutoModel"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gJ,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartModel"),c(hJ,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitModel"),c(pJ,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertModel"),c(_J,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uJ,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bJ,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vJ,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.FlaxCLIPModel"),c(FJ,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TJ,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraModel"),c(MJ,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EJ,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CJ,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wJ,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianModel"),c(AJ,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yJ,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5Model"),c(LJ,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xJ,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($J,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kJ,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5Model"),c(SJ,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RJ,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTModel"),c(PJ,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(BJ,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(IJ,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.FlaxAutoModelForCausalLM"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(GJ,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(OJ,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(VJ,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(XJ,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zJ,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(WJ,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(QJ,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HJ,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForPreTraining"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZJ,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oY,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rY,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tY,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(sY,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lY,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dY,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.FlaxAutoModelForMaskedLM"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(cY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hY,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(uY,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vY,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TY,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MY,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(EY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($Y,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(kY,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(BY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jY,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DY,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(OY,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(XY,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zY,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(WY,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(QY,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(HY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForTokenClassification"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(lK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fK,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gK,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hK,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pK,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(_K,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(uK,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(bK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(CK,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(AK,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yK,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(LK,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(xK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForImageClassification"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(RK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(qK,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForVision2Seq"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(NK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,f0),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,m0),e(We,Ln),e(We,xn),e(xn,g0),e(We,hi),e(We,$n),e($n,h0),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,S$),e(Ae,_i),e(_i,R$),e(Ae,P$),b(f,Eo,u),b(f,wa,u),e(wa,B$),e(wa,uf),e(uf,I$),e(wa,hGe),b(f,tqe,u),b(f,ui,u),e(ui,bf),e(bf,Pee),M(p0,Pee,null),e(ui,pGe),e(ui,Bee),e(Bee,_Ge),b(f,aqe,u),b(f,kn,u),e(kn,uGe),e(kn,Iee),e(Iee,bGe),e(kn,vGe),e(kn,qee),e(qee,FGe),e(kn,TGe),b(f,nqe,u),M(_0,f,u),b(f,sqe,u),b(f,q$,u),e(q$,MGe),b(f,lqe,u),M(vf,f,u),b(f,iqe,u),b(f,bi,u),e(bi,Ff),e(Ff,Nee),M(u0,Nee,null),e(bi,EGe),e(bi,jee),e(jee,CGe),b(f,dqe,u),b(f,Co,u),M(b0,Co,null),e(Co,wGe),e(Co,v0),e(v0,AGe),e(v0,N$),e(N$,yGe),e(v0,LGe),e(Co,xGe),e(Co,F0),e(F0,$Ge),e(F0,Dee),e(Dee,kGe),e(F0,SGe),e(Co,RGe),e(Co,Er),M(T0,Er,null),e(Er,PGe),e(Er,Gee),e(Gee,BGe),e(Er,IGe),e(Er,vi),e(vi,qGe),e(vi,Oee),e(Oee,NGe),e(vi,jGe),e(vi,Vee),e(Vee,DGe),e(vi,GGe),e(Er,OGe),e(Er,A),e(A,Tf),e(Tf,Xee),e(Xee,VGe),e(Tf,XGe),e(Tf,j$),e(j$,zGe),e(Tf,WGe),e(A,QGe),e(A,Mf),e(Mf,zee),e(zee,HGe),e(Mf,UGe),e(Mf,D$),e(D$,JGe),e(Mf,YGe),e(A,KGe),e(A,Ef),e(Ef,Wee),e(Wee,ZGe),e(Ef,eOe),e(Ef,G$),e(G$,oOe),e(Ef,rOe),e(A,tOe),e(A,Cf),e(Cf,Qee),e(Qee,aOe),e(Cf,nOe),e(Cf,O$),e(O$,sOe),e(Cf,lOe),e(A,iOe),e(A,wf),e(wf,Hee),e(Hee,dOe),e(wf,cOe),e(wf,V$),e(V$,fOe),e(wf,mOe),e(A,gOe),e(A,Af),e(Af,Uee),e(Uee,hOe),e(Af,pOe),e(Af,X$),e(X$,_Oe),e(Af,uOe),e(A,bOe),e(A,yf),e(yf,Jee),e(Jee,vOe),e(yf,FOe),e(yf,z$),e(z$,TOe),e(yf,MOe),e(A,EOe),e(A,Lf),e(Lf,Yee),e(Yee,COe),e(Lf,wOe),e(Lf,W$),e(W$,AOe),e(Lf,yOe),e(A,LOe),e(A,xf),e(xf,Kee),e(Kee,xOe),e(xf,$Oe),e(xf,Q$),e(Q$,kOe),e(xf,SOe),e(A,ROe),e(A,$f),e($f,Zee),e(Zee,POe),e($f,BOe),e($f,H$),e(H$,IOe),e($f,qOe),e(A,NOe),e(A,kf),e(kf,eoe),e(eoe,jOe),e(kf,DOe),e(kf,U$),e(U$,GOe),e(kf,OOe),e(A,VOe),e(A,Sf),e(Sf,ooe),e(ooe,XOe),e(Sf,zOe),e(Sf,J$),e(J$,WOe),e(Sf,QOe),e(A,HOe),e(A,Rf),e(Rf,roe),e(roe,UOe),e(Rf,JOe),e(Rf,Y$),e(Y$,YOe),e(Rf,KOe),e(A,ZOe),e(A,Pf),e(Pf,toe),e(toe,eVe),e(Pf,oVe),e(Pf,K$),e(K$,rVe),e(Pf,tVe),e(A,aVe),e(A,Bf),e(Bf,aoe),e(aoe,nVe),e(Bf,sVe),e(Bf,Z$),e(Z$,lVe),e(Bf,iVe),e(A,dVe),e(A,If),e(If,noe),e(noe,cVe),e(If,fVe),e(If,ek),e(ek,mVe),e(If,gVe),e(A,hVe),e(A,qf),e(qf,soe),e(soe,pVe),e(qf,_Ve),e(qf,ok),e(ok,uVe),e(qf,bVe),e(A,vVe),e(A,Nf),e(Nf,loe),e(loe,FVe),e(Nf,TVe),e(Nf,rk),e(rk,MVe),e(Nf,EVe),e(A,CVe),e(A,jf),e(jf,ioe),e(ioe,wVe),e(jf,AVe),e(jf,tk),e(tk,yVe),e(jf,LVe),e(A,xVe),e(A,Df),e(Df,doe),e(doe,$Ve),e(Df,kVe),e(Df,ak),e(ak,SVe),e(Df,RVe),e(A,PVe),e(A,Gf),e(Gf,coe),e(coe,BVe),e(Gf,IVe),e(Gf,nk),e(nk,qVe),e(Gf,NVe),e(A,jVe),e(A,Of),e(Of,foe),e(foe,DVe),e(Of,GVe),e(Of,sk),e(sk,OVe),e(Of,VVe),e(A,XVe),e(A,Vf),e(Vf,moe),e(moe,zVe),e(Vf,WVe),e(Vf,lk),e(lk,QVe),e(Vf,HVe),e(A,UVe),e(A,Xf),e(Xf,goe),e(goe,JVe),e(Xf,YVe),e(Xf,ik),e(ik,KVe),e(Xf,ZVe),e(A,eXe),e(A,zf),e(zf,hoe),e(hoe,oXe),e(zf,rXe),e(zf,dk),e(dk,tXe),e(zf,aXe),e(A,nXe),e(A,Wf),e(Wf,poe),e(poe,sXe),e(Wf,lXe),e(Wf,ck),e(ck,iXe),e(Wf,dXe),e(A,cXe),e(A,Qf),e(Qf,_oe),e(_oe,fXe),e(Qf,mXe),e(Qf,fk),e(fk,gXe),e(Qf,hXe),e(A,pXe),e(A,Hf),e(Hf,uoe),e(uoe,_Xe),e(Hf,uXe),e(Hf,mk),e(mk,bXe),e(Hf,vXe),e(A,FXe),e(A,Uf),e(Uf,boe),e(boe,TXe),e(Uf,MXe),e(Uf,gk),e(gk,EXe),e(Uf,CXe),e(A,wXe),e(A,Jf),e(Jf,voe),e(voe,AXe),e(Jf,yXe),e(Jf,hk),e(hk,LXe),e(Jf,xXe),e(A,$Xe),e(A,Yf),e(Yf,Foe),e(Foe,kXe),e(Yf,SXe),e(Yf,pk),e(pk,RXe),e(Yf,PXe),e(A,BXe),e(A,Kf),e(Kf,Toe),e(Toe,IXe),e(Kf,qXe),e(Kf,_k),e(_k,NXe),e(Kf,jXe),e(A,DXe),e(A,Zf),e(Zf,Moe),e(Moe,GXe),e(Zf,OXe),e(Zf,uk),e(uk,VXe),e(Zf,XXe),e(A,zXe),e(A,em),e(em,Eoe),e(Eoe,WXe),e(em,QXe),e(em,bk),e(bk,HXe),e(em,UXe),e(A,JXe),e(A,om),e(om,Coe),e(Coe,YXe),e(om,KXe),e(om,vk),e(vk,ZXe),e(om,eze),e(A,oze),e(A,rm),e(rm,woe),e(woe,rze),e(rm,tze),e(rm,Fk),e(Fk,aze),e(rm,nze),e(A,sze),e(A,tm),e(tm,Aoe),e(Aoe,lze),e(tm,ize),e(tm,Tk),e(Tk,dze),e(tm,cze),e(A,fze),e(A,am),e(am,yoe),e(yoe,mze),e(am,gze),e(am,Mk),e(Mk,hze),e(am,pze),e(A,_ze),e(A,nm),e(nm,Loe),e(Loe,uze),e(nm,bze),e(nm,Ek),e(Ek,vze),e(nm,Fze),e(A,Tze),e(A,sm),e(sm,xoe),e(xoe,Mze),e(sm,Eze),e(sm,Ck),e(Ck,Cze),e(sm,wze),e(A,Aze),e(A,lm),e(lm,$oe),e($oe,yze),e(lm,Lze),e(lm,wk),e(wk,xze),e(lm,$ze),e(A,kze),e(A,im),e(im,koe),e(koe,Sze),e(im,Rze),e(im,Ak),e(Ak,Pze),e(im,Bze),e(A,Ize),e(A,dm),e(dm,Soe),e(Soe,qze),e(dm,Nze),e(dm,yk),e(yk,jze),e(dm,Dze),e(A,Gze),e(A,cm),e(cm,Roe),e(Roe,Oze),e(cm,Vze),e(cm,Lk),e(Lk,Xze),e(cm,zze),e(A,Wze),e(A,fm),e(fm,Poe),e(Poe,Qze),e(fm,Hze),e(fm,xk),e(xk,Uze),e(fm,Jze),e(A,Yze),e(A,mm),e(mm,Boe),e(Boe,Kze),e(mm,Zze),e(mm,$k),e($k,eWe),e(mm,oWe),e(A,rWe),e(A,gm),e(gm,Ioe),e(Ioe,tWe),e(gm,aWe),e(gm,kk),e(kk,nWe),e(gm,sWe),e(A,lWe),e(A,hm),e(hm,qoe),e(qoe,iWe),e(hm,dWe),e(hm,Sk),e(Sk,cWe),e(hm,fWe),e(A,mWe),e(A,pm),e(pm,Noe),e(Noe,gWe),e(pm,hWe),e(pm,Rk),e(Rk,pWe),e(pm,_We),e(A,uWe),e(A,_m),e(_m,joe),e(joe,bWe),e(_m,vWe),e(_m,Pk),e(Pk,FWe),e(_m,TWe),e(A,MWe),e(A,um),e(um,Doe),e(Doe,EWe),e(um,CWe),e(um,Bk),e(Bk,wWe),e(um,AWe),e(A,yWe),e(A,bm),e(bm,Goe),e(Goe,LWe),e(bm,xWe),e(bm,Ik),e(Ik,$We),e(bm,kWe),e(A,SWe),e(A,vm),e(vm,Ooe),e(Ooe,RWe),e(vm,PWe),e(vm,qk),e(qk,BWe),e(vm,IWe),e(A,qWe),e(A,Fm),e(Fm,Voe),e(Voe,NWe),e(Fm,jWe),e(Fm,Nk),e(Nk,DWe),e(Fm,GWe),e(A,OWe),e(A,Tm),e(Tm,Xoe),e(Xoe,VWe),e(Tm,XWe),e(Tm,jk),e(jk,zWe),e(Tm,WWe),e(A,QWe),e(A,Mm),e(Mm,zoe),e(zoe,HWe),e(Mm,UWe),e(Mm,Dk),e(Dk,JWe),e(Mm,YWe),e(A,KWe),e(A,Em),e(Em,Woe),e(Woe,ZWe),e(Em,eQe),e(Em,Gk),e(Gk,oQe),e(Em,rQe),e(A,tQe),e(A,Cm),e(Cm,Qoe),e(Qoe,aQe),e(Cm,nQe),e(Cm,Ok),e(Ok,sQe),e(Cm,lQe),e(A,iQe),e(A,wm),e(wm,Hoe),e(Hoe,dQe),e(wm,cQe),e(wm,Vk),e(Vk,fQe),e(wm,mQe),e(A,gQe),e(A,Am),e(Am,Uoe),e(Uoe,hQe),e(Am,pQe),e(Am,Xk),e(Xk,_Qe),e(Am,uQe),e(A,bQe),e(A,ym),e(ym,Joe),e(Joe,vQe),e(ym,FQe),e(ym,zk),e(zk,TQe),e(ym,MQe),e(A,EQe),e(A,Lm),e(Lm,Yoe),e(Yoe,CQe),e(Lm,wQe),e(Lm,Wk),e(Wk,AQe),e(Lm,yQe),e(A,LQe),e(A,xm),e(xm,Koe),e(Koe,xQe),e(xm,$Qe),e(xm,Qk),e(Qk,kQe),e(xm,SQe),e(A,RQe),e(A,$m),e($m,Zoe),e(Zoe,PQe),e($m,BQe),e($m,Hk),e(Hk,IQe),e($m,qQe),e(A,NQe),e(A,km),e(km,ere),e(ere,jQe),e(km,DQe),e(km,Uk),e(Uk,GQe),e(km,OQe),e(A,VQe),e(A,Sm),e(Sm,ore),e(ore,XQe),e(Sm,zQe),e(Sm,Jk),e(Jk,WQe),e(Sm,QQe),e(A,HQe),e(A,Rm),e(Rm,rre),e(rre,UQe),e(Rm,JQe),e(Rm,Yk),e(Yk,YQe),e(Rm,KQe),e(A,ZQe),e(A,Pm),e(Pm,tre),e(tre,eHe),e(Pm,oHe),e(Pm,Kk),e(Kk,rHe),e(Pm,tHe),e(A,aHe),e(A,Bm),e(Bm,are),e(are,nHe),e(Bm,sHe),e(Bm,Zk),e(Zk,lHe),e(Bm,iHe),e(A,dHe),e(A,Im),e(Im,nre),e(nre,cHe),e(Im,fHe),e(Im,eS),e(eS,mHe),e(Im,gHe),e(A,hHe),e(A,qm),e(qm,sre),e(sre,pHe),e(qm,_He),e(qm,oS),e(oS,uHe),e(qm,bHe),e(A,vHe),e(A,Nm),e(Nm,lre),e(lre,FHe),e(Nm,THe),e(Nm,rS),e(rS,MHe),e(Nm,EHe),e(A,CHe),e(A,jm),e(jm,ire),e(ire,wHe),e(jm,AHe),e(jm,tS),e(tS,yHe),e(jm,LHe),e(A,xHe),e(A,Dm),e(Dm,dre),e(dre,$He),e(Dm,kHe),e(Dm,aS),e(aS,SHe),e(Dm,RHe),e(A,PHe),e(A,Gm),e(Gm,cre),e(cre,BHe),e(Gm,IHe),e(Gm,nS),e(nS,qHe),e(Gm,NHe),e(A,jHe),e(A,Om),e(Om,fre),e(fre,DHe),e(Om,GHe),e(Om,sS),e(sS,OHe),e(Om,VHe),e(A,XHe),e(A,Vm),e(Vm,mre),e(mre,zHe),e(Vm,WHe),e(Vm,lS),e(lS,QHe),e(Vm,HHe),e(A,UHe),e(A,Xm),e(Xm,gre),e(gre,JHe),e(Xm,YHe),e(Xm,iS),e(iS,KHe),e(Xm,ZHe),e(A,eUe),e(A,zm),e(zm,hre),e(hre,oUe),e(zm,rUe),e(zm,dS),e(dS,tUe),e(zm,aUe),e(A,nUe),e(A,Wm),e(Wm,pre),e(pre,sUe),e(Wm,lUe),e(Wm,cS),e(cS,iUe),e(Wm,dUe),e(A,cUe),e(A,Qm),e(Qm,_re),e(_re,fUe),e(Qm,mUe),e(Qm,fS),e(fS,gUe),e(Qm,hUe),e(A,pUe),e(A,Hm),e(Hm,ure),e(ure,_Ue),e(Hm,uUe),e(Hm,mS),e(mS,bUe),e(Hm,vUe),e(A,FUe),e(A,Um),e(Um,bre),e(bre,TUe),e(Um,MUe),e(Um,gS),e(gS,EUe),e(Um,CUe),e(A,wUe),e(A,Jm),e(Jm,vre),e(vre,AUe),e(Jm,yUe),e(Jm,hS),e(hS,LUe),e(Jm,xUe),e(A,$Ue),e(A,Ym),e(Ym,Fre),e(Fre,kUe),e(Ym,SUe),e(Ym,pS),e(pS,RUe),e(Ym,PUe),e(A,BUe),e(A,Km),e(Km,Tre),e(Tre,IUe),e(Km,qUe),e(Km,_S),e(_S,NUe),e(Km,jUe),e(A,DUe),e(A,Zm),e(Zm,Mre),e(Mre,GUe),e(Zm,OUe),e(Zm,uS),e(uS,VUe),e(Zm,XUe),e(A,zUe),e(A,eg),e(eg,Ere),e(Ere,WUe),e(eg,QUe),e(eg,bS),e(bS,HUe),e(eg,UUe),e(A,JUe),e(A,og),e(og,Cre),e(Cre,YUe),e(og,KUe),e(og,vS),e(vS,ZUe),e(og,eJe),e(A,oJe),e(A,rg),e(rg,wre),e(wre,rJe),e(rg,tJe),e(rg,FS),e(FS,aJe),e(rg,nJe),e(A,sJe),e(A,tg),e(tg,Are),e(Are,lJe),e(tg,iJe),e(tg,TS),e(TS,dJe),e(tg,cJe),e(A,fJe),e(A,ag),e(ag,yre),e(yre,mJe),e(ag,gJe),e(ag,MS),e(MS,hJe),e(ag,pJe),e(A,_Je),e(A,ng),e(ng,Lre),e(Lre,uJe),e(ng,bJe),e(ng,ES),e(ES,vJe),e(ng,FJe),e(A,TJe),e(A,sg),e(sg,xre),e(xre,MJe),e(sg,EJe),e(sg,CS),e(CS,CJe),e(sg,wJe),e(A,AJe),e(A,lg),e(lg,$re),e($re,yJe),e(lg,LJe),e(lg,wS),e(wS,xJe),e(lg,$Je),e(A,kJe),e(A,ig),e(ig,kre),e(kre,SJe),e(ig,RJe),e(ig,AS),e(AS,PJe),e(ig,BJe),e(A,IJe),e(A,dg),e(dg,Sre),e(Sre,qJe),e(dg,NJe),e(dg,yS),e(yS,jJe),e(dg,DJe),e(A,GJe),e(A,cg),e(cg,Rre),e(Rre,OJe),e(cg,VJe),e(cg,LS),e(LS,XJe),e(cg,zJe),e(A,WJe),e(A,fg),e(fg,Pre),e(Pre,QJe),e(fg,HJe),e(fg,xS),e(xS,UJe),e(fg,JJe),e(A,YJe),e(A,mg),e(mg,Bre),e(Bre,KJe),e(mg,ZJe),e(mg,$S),e($S,eYe),e(mg,oYe),e(A,rYe),e(A,gg),e(gg,Ire),e(Ire,tYe),e(gg,aYe),e(gg,kS),e(kS,nYe),e(gg,sYe),e(A,lYe),e(A,hg),e(hg,qre),e(qre,iYe),e(hg,dYe),e(hg,SS),e(SS,cYe),e(hg,fYe),e(A,mYe),e(A,pg),e(pg,Nre),e(Nre,gYe),e(pg,hYe),e(pg,RS),e(RS,pYe),e(pg,_Ye),e(A,uYe),e(A,_g),e(_g,jre),e(jre,bYe),e(_g,vYe),e(_g,PS),e(PS,FYe),e(_g,TYe),e(A,MYe),e(A,ug),e(ug,Dre),e(Dre,EYe),e(ug,CYe),e(ug,BS),e(BS,wYe),e(ug,AYe),e(A,yYe),e(A,bg),e(bg,Gre),e(Gre,LYe),e(bg,xYe),e(bg,IS),e(IS,$Ye),e(bg,kYe),e(A,SYe),e(A,vg),e(vg,Ore),e(Ore,RYe),e(vg,PYe),e(vg,qS),e(qS,BYe),e(vg,IYe),e(Er,qYe),M(Fg,Er,null),e(Co,NYe),e(Co,Tg),M(M0,Tg,null),e(Tg,jYe),e(Tg,Vre),e(Vre,DYe),b(f,cqe,u),b(f,Fi,u),e(Fi,Mg),e(Mg,Xre),M(E0,Xre,null),e(Fi,GYe),e(Fi,zre),e(zre,OYe),b(f,fqe,u),b(f,wo,u),M(C0,wo,null),e(wo,VYe),e(wo,w0),e(w0,XYe),e(w0,NS),e(NS,zYe),e(w0,WYe),e(wo,QYe),e(wo,A0),e(A0,HYe),e(A0,Wre),e(Wre,UYe),e(A0,JYe),e(wo,YYe),e(wo,Cr),M(y0,Cr,null),e(Cr,KYe),e(Cr,Qre),e(Qre,ZYe),e(Cr,eKe),e(Cr,Aa),e(Aa,oKe),e(Aa,Hre),e(Hre,rKe),e(Aa,tKe),e(Aa,Ure),e(Ure,aKe),e(Aa,nKe),e(Aa,Jre),e(Jre,sKe),e(Aa,lKe),e(Cr,iKe),e(Cr,k),e(k,Sn),e(Sn,Yre),e(Yre,dKe),e(Sn,cKe),e(Sn,jS),e(jS,fKe),e(Sn,mKe),e(Sn,DS),e(DS,gKe),e(Sn,hKe),e(k,pKe),e(k,Rn),e(Rn,Kre),e(Kre,_Ke),e(Rn,uKe),e(Rn,GS),e(GS,bKe),e(Rn,vKe),e(Rn,OS),e(OS,FKe),e(Rn,TKe),e(k,MKe),e(k,Pn),e(Pn,Zre),e(Zre,EKe),e(Pn,CKe),e(Pn,VS),e(VS,wKe),e(Pn,AKe),e(Pn,XS),e(XS,yKe),e(Pn,LKe),e(k,xKe),e(k,Eg),e(Eg,ete),e(ete,$Ke),e(Eg,kKe),e(Eg,zS),e(zS,SKe),e(Eg,RKe),e(k,PKe),e(k,Bn),e(Bn,ote),e(ote,BKe),e(Bn,IKe),e(Bn,WS),e(WS,qKe),e(Bn,NKe),e(Bn,QS),e(QS,jKe),e(Bn,DKe),e(k,GKe),e(k,Cg),e(Cg,rte),e(rte,OKe),e(Cg,VKe),e(Cg,HS),e(HS,XKe),e(Cg,zKe),e(k,WKe),e(k,wg),e(wg,tte),e(tte,QKe),e(wg,HKe),e(wg,US),e(US,UKe),e(wg,JKe),e(k,YKe),e(k,Ag),e(Ag,ate),e(ate,KKe),e(Ag,ZKe),e(Ag,JS),e(JS,eZe),e(Ag,oZe),e(k,rZe),e(k,In),e(In,nte),e(nte,tZe),e(In,aZe),e(In,YS),e(YS,nZe),e(In,sZe),e(In,KS),e(KS,lZe),e(In,iZe),e(k,dZe),e(k,qn),e(qn,ste),e(ste,cZe),e(qn,fZe),e(qn,ZS),e(ZS,mZe),e(qn,gZe),e(qn,eR),e(eR,hZe),e(qn,pZe),e(k,_Ze),e(k,Nn),e(Nn,lte),e(lte,uZe),e(Nn,bZe),e(Nn,oR),e(oR,vZe),e(Nn,FZe),e(Nn,rR),e(rR,TZe),e(Nn,MZe),e(k,EZe),e(k,yg),e(yg,ite),e(ite,CZe),e(yg,wZe),e(yg,tR),e(tR,AZe),e(yg,yZe),e(k,LZe),e(k,Lg),e(Lg,dte),e(dte,xZe),e(Lg,$Ze),e(Lg,aR),e(aR,kZe),e(Lg,SZe),e(k,RZe),e(k,jn),e(jn,cte),e(cte,PZe),e(jn,BZe),e(jn,nR),e(nR,IZe),e(jn,qZe),e(jn,sR),e(sR,NZe),e(jn,jZe),e(k,DZe),e(k,xg),e(xg,fte),e(fte,GZe),e(xg,OZe),e(xg,lR),e(lR,VZe),e(xg,XZe),e(k,zZe),e(k,Dn),e(Dn,mte),e(mte,WZe),e(Dn,QZe),e(Dn,iR),e(iR,HZe),e(Dn,UZe),e(Dn,dR),e(dR,JZe),e(Dn,YZe),e(k,KZe),e(k,Gn),e(Gn,gte),e(gte,ZZe),e(Gn,eeo),e(Gn,cR),e(cR,oeo),e(Gn,reo),e(Gn,fR),e(fR,teo),e(Gn,aeo),e(k,neo),e(k,On),e(On,hte),e(hte,seo),e(On,leo),e(On,mR),e(mR,ieo),e(On,deo),e(On,gR),e(gR,ceo),e(On,feo),e(k,meo),e(k,$g),e($g,pte),e(pte,geo),e($g,heo),e($g,hR),e(hR,peo),e($g,_eo),e(k,ueo),e(k,Vn),e(Vn,_te),e(_te,beo),e(Vn,veo),e(Vn,pR),e(pR,Feo),e(Vn,Teo),e(Vn,_R),e(_R,Meo),e(Vn,Eeo),e(k,Ceo),e(k,Xn),e(Xn,ute),e(ute,weo),e(Xn,Aeo),e(Xn,uR),e(uR,yeo),e(Xn,Leo),e(Xn,bR),e(bR,xeo),e(Xn,$eo),e(k,keo),e(k,zn),e(zn,bte),e(bte,Seo),e(zn,Reo),e(zn,vR),e(vR,Peo),e(zn,Beo),e(zn,FR),e(FR,Ieo),e(zn,qeo),e(k,Neo),e(k,Wn),e(Wn,vte),e(vte,jeo),e(Wn,Deo),e(Wn,TR),e(TR,Geo),e(Wn,Oeo),e(Wn,MR),e(MR,Veo),e(Wn,Xeo),e(k,zeo),e(k,Qn),e(Qn,Fte),e(Fte,Weo),e(Qn,Qeo),e(Qn,ER),e(ER,Heo),e(Qn,Ueo),e(Qn,CR),e(CR,Jeo),e(Qn,Yeo),e(k,Keo),e(k,Hn),e(Hn,Tte),e(Tte,Zeo),e(Hn,eoo),e(Hn,wR),e(wR,ooo),e(Hn,roo),e(Hn,AR),e(AR,too),e(Hn,aoo),e(k,noo),e(k,kg),e(kg,Mte),e(Mte,soo),e(kg,loo),e(kg,yR),e(yR,ioo),e(kg,doo),e(k,coo),e(k,Un),e(Un,Ete),e(Ete,foo),e(Un,moo),e(Un,LR),e(LR,goo),e(Un,hoo),e(Un,xR),e(xR,poo),e(Un,_oo),e(k,uoo),e(k,Sg),e(Sg,Cte),e(Cte,boo),e(Sg,voo),e(Sg,$R),e($R,Foo),e(Sg,Too),e(k,Moo),e(k,Jn),e(Jn,wte),e(wte,Eoo),e(Jn,Coo),e(Jn,kR),e(kR,woo),e(Jn,Aoo),e(Jn,SR),e(SR,yoo),e(Jn,Loo),e(k,xoo),e(k,Yn),e(Yn,Ate),e(Ate,$oo),e(Yn,koo),e(Yn,RR),e(RR,Soo),e(Yn,Roo),e(Yn,PR),e(PR,Poo),e(Yn,Boo),e(k,Ioo),e(k,Kn),e(Kn,yte),e(yte,qoo),e(Kn,Noo),e(Kn,BR),e(BR,joo),e(Kn,Doo),e(Kn,IR),e(IR,Goo),e(Kn,Ooo),e(k,Voo),e(k,Zn),e(Zn,Lte),e(Lte,Xoo),e(Zn,zoo),e(Zn,qR),e(qR,Woo),e(Zn,Qoo),e(Zn,NR),e(NR,Hoo),e(Zn,Uoo),e(k,Joo),e(k,es),e(es,xte),e(xte,Yoo),e(es,Koo),e(es,jR),e(jR,Zoo),e(es,ero),e(es,DR),e(DR,oro),e(es,rro),e(k,tro),e(k,Rg),e(Rg,$te),e($te,aro),e(Rg,nro),e(Rg,GR),e(GR,sro),e(Rg,lro),e(k,iro),e(k,os),e(os,kte),e(kte,dro),e(os,cro),e(os,OR),e(OR,fro),e(os,mro),e(os,VR),e(VR,gro),e(os,hro),e(k,pro),e(k,rs),e(rs,Ste),e(Ste,_ro),e(rs,uro),e(rs,XR),e(XR,bro),e(rs,vro),e(rs,zR),e(zR,Fro),e(rs,Tro),e(k,Mro),e(k,ts),e(ts,Rte),e(Rte,Ero),e(ts,Cro),e(ts,WR),e(WR,wro),e(ts,Aro),e(ts,QR),e(QR,yro),e(ts,Lro),e(k,xro),e(k,as),e(as,Pte),e(Pte,$ro),e(as,kro),e(as,HR),e(HR,Sro),e(as,Rro),e(as,UR),e(UR,Pro),e(as,Bro),e(k,Iro),e(k,ns),e(ns,Bte),e(Bte,qro),e(ns,Nro),e(ns,JR),e(JR,jro),e(ns,Dro),e(ns,YR),e(YR,Gro),e(ns,Oro),e(k,Vro),e(k,ss),e(ss,Ite),e(Ite,Xro),e(ss,zro),e(ss,KR),e(KR,Wro),e(ss,Qro),e(ss,ZR),e(ZR,Hro),e(ss,Uro),e(k,Jro),e(k,Pg),e(Pg,qte),e(qte,Yro),e(Pg,Kro),e(Pg,eP),e(eP,Zro),e(Pg,eto),e(k,oto),e(k,ls),e(ls,Nte),e(Nte,rto),e(ls,tto),e(ls,oP),e(oP,ato),e(ls,nto),e(ls,rP),e(rP,sto),e(ls,lto),e(k,ito),e(k,Bg),e(Bg,jte),e(jte,dto),e(Bg,cto),e(Bg,tP),e(tP,fto),e(Bg,mto),e(k,gto),e(k,Ig),e(Ig,Dte),e(Dte,hto),e(Ig,pto),e(Ig,aP),e(aP,_to),e(Ig,uto),e(k,bto),e(k,is),e(is,Gte),e(Gte,vto),e(is,Fto),e(is,nP),e(nP,Tto),e(is,Mto),e(is,sP),e(sP,Eto),e(is,Cto),e(k,wto),e(k,ds),e(ds,Ote),e(Ote,Ato),e(ds,yto),e(ds,lP),e(lP,Lto),e(ds,xto),e(ds,iP),e(iP,$to),e(ds,kto),e(k,Sto),e(k,cs),e(cs,Vte),e(Vte,Rto),e(cs,Pto),e(cs,dP),e(dP,Bto),e(cs,Ito),e(cs,cP),e(cP,qto),e(cs,Nto),e(k,jto),e(k,qg),e(qg,Xte),e(Xte,Dto),e(qg,Gto),e(qg,fP),e(fP,Oto),e(qg,Vto),e(k,Xto),e(k,fs),e(fs,zte),e(zte,zto),e(fs,Wto),e(fs,mP),e(mP,Qto),e(fs,Hto),e(fs,gP),e(gP,Uto),e(fs,Jto),e(k,Yto),e(k,ms),e(ms,Wte),e(Wte,Kto),e(ms,Zto),e(ms,hP),e(hP,eao),e(ms,oao),e(ms,pP),e(pP,rao),e(ms,tao),e(k,aao),e(k,gs),e(gs,Qte),e(Qte,nao),e(gs,sao),e(gs,_P),e(_P,lao),e(gs,iao),e(gs,uP),e(uP,dao),e(gs,cao),e(k,fao),e(k,hs),e(hs,Hte),e(Hte,mao),e(hs,gao),e(hs,bP),e(bP,hao),e(hs,pao),e(hs,vP),e(vP,_ao),e(hs,uao),e(k,bao),e(k,ps),e(ps,Ute),e(Ute,vao),e(ps,Fao),e(ps,FP),e(FP,Tao),e(ps,Mao),e(ps,TP),e(TP,Eao),e(ps,Cao),e(k,wao),e(k,Ng),e(Ng,Jte),e(Jte,Aao),e(Ng,yao),e(Ng,MP),e(MP,Lao),e(Ng,xao),e(k,$ao),e(k,_s),e(_s,Yte),e(Yte,kao),e(_s,Sao),e(_s,EP),e(EP,Rao),e(_s,Pao),e(_s,CP),e(CP,Bao),e(_s,Iao),e(k,qao),e(k,jg),e(jg,Kte),e(Kte,Nao),e(jg,jao),e(jg,wP),e(wP,Dao),e(jg,Gao),e(k,Oao),e(k,Dg),e(Dg,Zte),e(Zte,Vao),e(Dg,Xao),e(Dg,AP),e(AP,zao),e(Dg,Wao),e(k,Qao),e(k,Gg),e(Gg,eae),e(eae,Hao),e(Gg,Uao),e(Gg,yP),e(yP,Jao),e(Gg,Yao),e(k,Kao),e(k,Og),e(Og,oae),e(oae,Zao),e(Og,eno),e(Og,LP),e(LP,ono),e(Og,rno),e(k,tno),e(k,us),e(us,rae),e(rae,ano),e(us,nno),e(us,xP),e(xP,sno),e(us,lno),e(us,$P),e($P,ino),e(us,dno),e(k,cno),e(k,Vg),e(Vg,tae),e(tae,fno),e(Vg,mno),e(Vg,kP),e(kP,gno),e(Vg,hno),e(k,pno),e(k,bs),e(bs,aae),e(aae,_no),e(bs,uno),e(bs,SP),e(SP,bno),e(bs,vno),e(bs,RP),e(RP,Fno),e(bs,Tno),e(k,Mno),e(k,vs),e(vs,nae),e(nae,Eno),e(vs,Cno),e(vs,PP),e(PP,wno),e(vs,Ano),e(vs,BP),e(BP,yno),e(vs,Lno),e(k,xno),e(k,Fs),e(Fs,sae),e(sae,$no),e(Fs,kno),e(Fs,IP),e(IP,Sno),e(Fs,Rno),e(Fs,qP),e(qP,Pno),e(Fs,Bno),e(k,Ino),e(k,Ts),e(Ts,lae),e(lae,qno),e(Ts,Nno),e(Ts,NP),e(NP,jno),e(Ts,Dno),e(Ts,jP),e(jP,Gno),e(Ts,Ono),e(k,Vno),e(k,Ms),e(Ms,iae),e(iae,Xno),e(Ms,zno),e(Ms,DP),e(DP,Wno),e(Ms,Qno),e(Ms,GP),e(GP,Hno),e(Ms,Uno),e(k,Jno),e(k,Es),e(Es,dae),e(dae,Yno),e(Es,Kno),e(Es,OP),e(OP,Zno),e(Es,eso),e(Es,VP),e(VP,oso),e(Es,rso),e(k,tso),e(k,Xg),e(Xg,cae),e(cae,aso),e(Xg,nso),e(Xg,XP),e(XP,sso),e(Xg,lso),e(k,iso),e(k,zg),e(zg,fae),e(fae,dso),e(zg,cso),e(zg,zP),e(zP,fso),e(zg,mso),e(k,gso),e(k,Cs),e(Cs,mae),e(mae,hso),e(Cs,pso),e(Cs,WP),e(WP,_so),e(Cs,uso),e(Cs,QP),e(QP,bso),e(Cs,vso),e(k,Fso),e(k,ws),e(ws,gae),e(gae,Tso),e(ws,Mso),e(ws,HP),e(HP,Eso),e(ws,Cso),e(ws,UP),e(UP,wso),e(ws,Aso),e(k,yso),e(k,As),e(As,hae),e(hae,Lso),e(As,xso),e(As,JP),e(JP,$so),e(As,kso),e(As,YP),e(YP,Sso),e(As,Rso),e(k,Pso),e(k,Wg),e(Wg,pae),e(pae,Bso),e(Wg,Iso),e(Wg,KP),e(KP,qso),e(Wg,Nso),e(k,jso),e(k,Qg),e(Qg,_ae),e(_ae,Dso),e(Qg,Gso),e(Qg,ZP),e(ZP,Oso),e(Qg,Vso),e(k,Xso),e(k,Hg),e(Hg,uae),e(uae,zso),e(Hg,Wso),e(Hg,eB),e(eB,Qso),e(Hg,Hso),e(k,Uso),e(k,ys),e(ys,bae),e(bae,Jso),e(ys,Yso),e(ys,oB),e(oB,Kso),e(ys,Zso),e(ys,rB),e(rB,elo),e(ys,olo),e(k,rlo),e(k,Ug),e(Ug,vae),e(vae,tlo),e(Ug,alo),e(Ug,tB),e(tB,nlo),e(Ug,slo),e(k,llo),e(k,Jg),e(Jg,Fae),e(Fae,ilo),e(Jg,dlo),e(Jg,aB),e(aB,clo),e(Jg,flo),e(k,mlo),e(k,Yg),e(Yg,Tae),e(Tae,glo),e(Yg,hlo),e(Yg,nB),e(nB,plo),e(Yg,_lo),e(k,ulo),e(k,Ls),e(Ls,Mae),e(Mae,blo),e(Ls,vlo),e(Ls,sB),e(sB,Flo),e(Ls,Tlo),e(Ls,lB),e(lB,Mlo),e(Ls,Elo),e(k,Clo),e(k,Kg),e(Kg,Eae),e(Eae,wlo),e(Kg,Alo),e(Kg,iB),e(iB,ylo),e(Kg,Llo),e(k,xlo),e(k,Zg),e(Zg,Cae),e(Cae,$lo),e(Zg,klo),e(Zg,dB),e(dB,Slo),e(Zg,Rlo),e(k,Plo),e(k,xs),e(xs,wae),e(wae,Blo),e(xs,Ilo),e(xs,cB),e(cB,qlo),e(xs,Nlo),e(xs,fB),e(fB,jlo),e(xs,Dlo),e(k,Glo),e(k,$s),e($s,Aae),e(Aae,Olo),e($s,Vlo),e($s,mB),e(mB,Xlo),e($s,zlo),e($s,gB),e(gB,Wlo),e($s,Qlo),e(k,Hlo),e(k,ks),e(ks,yae),e(yae,Ulo),e(ks,Jlo),e(ks,hB),e(hB,Ylo),e(ks,Klo),e(ks,pB),e(pB,Zlo),e(ks,eio),e(k,oio),e(k,Ss),e(Ss,Lae),e(Lae,rio),e(Ss,tio),e(Ss,_B),e(_B,aio),e(Ss,nio),e(Ss,uB),e(uB,sio),e(Ss,lio),e(Cr,iio),M(eh,Cr,null),e(wo,dio),e(wo,oh),M(L0,oh,null),e(oh,cio),e(oh,xae),e(xae,fio),b(f,mqe,u),b(f,Ti,u),e(Ti,rh),e(rh,$ae),M(x0,$ae,null),e(Ti,mio),e(Ti,kae),e(kae,gio),b(f,gqe,u),b(f,Ao,u),M($0,Ao,null),e(Ao,hio),e(Ao,k0),e(k0,pio),e(k0,bB),e(bB,_io),e(k0,uio),e(Ao,bio),e(Ao,S0),e(S0,vio),e(S0,Sae),e(Sae,Fio),e(S0,Tio),e(Ao,Mio),e(Ao,He),M(R0,He,null),e(He,Eio),e(He,Rae),e(Rae,Cio),e(He,wio),e(He,ya),e(ya,Aio),e(ya,Pae),e(Pae,yio),e(ya,Lio),e(ya,Bae),e(Bae,xio),e(ya,$io),e(ya,Iae),e(Iae,kio),e(ya,Sio),e(He,Rio),e(He,K),e(K,th),e(th,qae),e(qae,Pio),e(th,Bio),e(th,vB),e(vB,Iio),e(th,qio),e(K,Nio),e(K,ah),e(ah,Nae),e(Nae,jio),e(ah,Dio),e(ah,FB),e(FB,Gio),e(ah,Oio),e(K,Vio),e(K,nh),e(nh,jae),e(jae,Xio),e(nh,zio),e(nh,TB),e(TB,Wio),e(nh,Qio),e(K,Hio),e(K,sh),e(sh,Dae),e(Dae,Uio),e(sh,Jio),e(sh,MB),e(MB,Yio),e(sh,Kio),e(K,Zio),e(K,lh),e(lh,Gae),e(Gae,edo),e(lh,odo),e(lh,EB),e(EB,rdo),e(lh,tdo),e(K,ado),e(K,ih),e(ih,Oae),e(Oae,ndo),e(ih,sdo),e(ih,CB),e(CB,ldo),e(ih,ido),e(K,ddo),e(K,dh),e(dh,Vae),e(Vae,cdo),e(dh,fdo),e(dh,wB),e(wB,mdo),e(dh,gdo),e(K,hdo),e(K,ch),e(ch,Xae),e(Xae,pdo),e(ch,_do),e(ch,AB),e(AB,udo),e(ch,bdo),e(K,vdo),e(K,fh),e(fh,zae),e(zae,Fdo),e(fh,Tdo),e(fh,yB),e(yB,Mdo),e(fh,Edo),e(K,Cdo),e(K,mh),e(mh,Wae),e(Wae,wdo),e(mh,Ado),e(mh,LB),e(LB,ydo),e(mh,Ldo),e(K,xdo),e(K,gh),e(gh,Qae),e(Qae,$do),e(gh,kdo),e(gh,xB),e(xB,Sdo),e(gh,Rdo),e(K,Pdo),e(K,hh),e(hh,Hae),e(Hae,Bdo),e(hh,Ido),e(hh,$B),e($B,qdo),e(hh,Ndo),e(K,jdo),e(K,ph),e(ph,Uae),e(Uae,Ddo),e(ph,Gdo),e(ph,kB),e(kB,Odo),e(ph,Vdo),e(K,Xdo),e(K,_h),e(_h,Jae),e(Jae,zdo),e(_h,Wdo),e(_h,SB),e(SB,Qdo),e(_h,Hdo),e(K,Udo),e(K,uh),e(uh,Yae),e(Yae,Jdo),e(uh,Ydo),e(uh,RB),e(RB,Kdo),e(uh,Zdo),e(K,eco),e(K,bh),e(bh,Kae),e(Kae,oco),e(bh,rco),e(bh,PB),e(PB,tco),e(bh,aco),e(K,nco),e(K,vh),e(vh,Zae),e(Zae,sco),e(vh,lco),e(vh,BB),e(BB,ico),e(vh,dco),e(K,cco),e(K,Fh),e(Fh,ene),e(ene,fco),e(Fh,mco),e(Fh,IB),e(IB,gco),e(Fh,hco),e(K,pco),e(K,Th),e(Th,one),e(one,_co),e(Th,uco),e(Th,qB),e(qB,bco),e(Th,vco),e(K,Fco),e(K,Mh),e(Mh,rne),e(rne,Tco),e(Mh,Mco),e(Mh,NB),e(NB,Eco),e(Mh,Cco),e(K,wco),e(K,Eh),e(Eh,tne),e(tne,Aco),e(Eh,yco),e(Eh,jB),e(jB,Lco),e(Eh,xco),e(K,$co),e(K,Ch),e(Ch,ane),e(ane,kco),e(Ch,Sco),e(Ch,DB),e(DB,Rco),e(Ch,Pco),e(K,Bco),e(K,wh),e(wh,nne),e(nne,Ico),e(wh,qco),e(wh,GB),e(GB,Nco),e(wh,jco),e(K,Dco),e(K,Ah),e(Ah,sne),e(sne,Gco),e(Ah,Oco),e(Ah,OB),e(OB,Vco),e(Ah,Xco),e(K,zco),e(K,yh),e(yh,lne),e(lne,Wco),e(yh,Qco),e(yh,VB),e(VB,Hco),e(yh,Uco),e(K,Jco),e(K,Lh),e(Lh,ine),e(ine,Yco),e(Lh,Kco),e(Lh,XB),e(XB,Zco),e(Lh,efo),e(K,ofo),e(K,xh),e(xh,dne),e(dne,rfo),e(xh,tfo),e(xh,zB),e(zB,afo),e(xh,nfo),e(K,sfo),e(K,$h),e($h,cne),e(cne,lfo),e($h,ifo),e($h,WB),e(WB,dfo),e($h,cfo),e(He,ffo),M(kh,He,null),e(He,mfo),M(Sh,He,null),e(Ao,gfo),e(Ao,Rh),M(P0,Rh,null),e(Rh,hfo),e(Rh,fne),e(fne,pfo),b(f,hqe,u),b(f,Mi,u),e(Mi,Ph),e(Ph,mne),M(B0,mne,null),e(Mi,_fo),e(Mi,gne),e(gne,ufo),b(f,pqe,u),b(f,yo,u),M(I0,yo,null),e(yo,bfo),e(yo,q0),e(q0,vfo),e(q0,QB),e(QB,Ffo),e(q0,Tfo),e(yo,Mfo),e(yo,N0),e(N0,Efo),e(N0,hne),e(hne,Cfo),e(N0,wfo),e(yo,Afo),e(yo,Ue),M(j0,Ue,null),e(Ue,yfo),e(Ue,pne),e(pne,Lfo),e(Ue,xfo),e(Ue,Ei),e(Ei,$fo),e(Ei,_ne),e(_ne,kfo),e(Ei,Sfo),e(Ei,une),e(une,Rfo),e(Ei,Pfo),e(Ue,Bfo),e(Ue,pe),e(pe,Bh),e(Bh,bne),e(bne,Ifo),e(Bh,qfo),e(Bh,HB),e(HB,Nfo),e(Bh,jfo),e(pe,Dfo),e(pe,Ih),e(Ih,vne),e(vne,Gfo),e(Ih,Ofo),e(Ih,Fne),e(Fne,Vfo),e(Ih,Xfo),e(pe,zfo),e(pe,qh),e(qh,Tne),e(Tne,Wfo),e(qh,Qfo),e(qh,UB),e(UB,Hfo),e(qh,Ufo),e(pe,Jfo),e(pe,Nh),e(Nh,Mne),e(Mne,Yfo),e(Nh,Kfo),e(Nh,JB),e(JB,Zfo),e(Nh,emo),e(pe,omo),e(pe,jh),e(jh,Ene),e(Ene,rmo),e(jh,tmo),e(jh,YB),e(YB,amo),e(jh,nmo),e(pe,smo),e(pe,Dh),e(Dh,Cne),e(Cne,lmo),e(Dh,imo),e(Dh,KB),e(KB,dmo),e(Dh,cmo),e(pe,fmo),e(pe,Gh),e(Gh,wne),e(wne,mmo),e(Gh,gmo),e(Gh,ZB),e(ZB,hmo),e(Gh,pmo),e(pe,_mo),e(pe,Oh),e(Oh,Ane),e(Ane,umo),e(Oh,bmo),e(Oh,eI),e(eI,vmo),e(Oh,Fmo),e(pe,Tmo),e(pe,Vh),e(Vh,yne),e(yne,Mmo),e(Vh,Emo),e(Vh,oI),e(oI,Cmo),e(Vh,wmo),e(pe,Amo),e(pe,Xh),e(Xh,Lne),e(Lne,ymo),e(Xh,Lmo),e(Xh,rI),e(rI,xmo),e(Xh,$mo),e(pe,kmo),e(pe,zh),e(zh,xne),e(xne,Smo),e(zh,Rmo),e(zh,tI),e(tI,Pmo),e(zh,Bmo),e(pe,Imo),e(pe,Wh),e(Wh,$ne),e($ne,qmo),e(Wh,Nmo),e(Wh,aI),e(aI,jmo),e(Wh,Dmo),e(pe,Gmo),e(pe,Qh),e(Qh,kne),e(kne,Omo),e(Qh,Vmo),e(Qh,nI),e(nI,Xmo),e(Qh,zmo),e(pe,Wmo),e(pe,Hh),e(Hh,Sne),e(Sne,Qmo),e(Hh,Hmo),e(Hh,sI),e(sI,Umo),e(Hh,Jmo),e(pe,Ymo),e(pe,Uh),e(Uh,Rne),e(Rne,Kmo),e(Uh,Zmo),e(Uh,lI),e(lI,ego),e(Uh,ogo),e(pe,rgo),e(pe,Jh),e(Jh,Pne),e(Pne,tgo),e(Jh,ago),e(Jh,iI),e(iI,ngo),e(Jh,sgo),e(Ue,lgo),M(Yh,Ue,null),e(Ue,igo),M(Kh,Ue,null),e(yo,dgo),e(yo,Zh),M(D0,Zh,null),e(Zh,cgo),e(Zh,Bne),e(Bne,fgo),b(f,_qe,u),b(f,Ci,u),e(Ci,ep),e(ep,Ine),M(G0,Ine,null),e(Ci,mgo),e(Ci,qne),e(qne,ggo),b(f,uqe,u),b(f,Lo,u),M(O0,Lo,null),e(Lo,hgo),e(Lo,wi),e(wi,pgo),e(wi,dI),e(dI,_go),e(wi,ugo),e(wi,cI),e(cI,bgo),e(wi,vgo),e(Lo,Fgo),e(Lo,V0),e(V0,Tgo),e(V0,Nne),e(Nne,Mgo),e(V0,Ego),e(Lo,Cgo),e(Lo,tt),M(X0,tt,null),e(tt,wgo),e(tt,jne),e(jne,Ago),e(tt,ygo),e(tt,Ai),e(Ai,Lgo),e(Ai,Dne),e(Dne,xgo),e(Ai,$go),e(Ai,fI),e(fI,kgo),e(Ai,Sgo),e(tt,Rgo),M(op,tt,null),e(Lo,Pgo),e(Lo,Je),M(z0,Je,null),e(Je,Bgo),e(Je,Gne),e(Gne,Igo),e(Je,qgo),e(Je,La),e(La,Ngo),e(La,One),e(One,jgo),e(La,Dgo),e(La,Vne),e(Vne,Ggo),e(La,Ogo),e(La,Xne),e(Xne,Vgo),e(La,Xgo),e(Je,zgo),e(Je,x),e(x,rp),e(rp,zne),e(zne,Wgo),e(rp,Qgo),e(rp,mI),e(mI,Hgo),e(rp,Ugo),e(x,Jgo),e(x,tp),e(tp,Wne),e(Wne,Ygo),e(tp,Kgo),e(tp,gI),e(gI,Zgo),e(tp,eho),e(x,oho),e(x,ap),e(ap,Qne),e(Qne,rho),e(ap,tho),e(ap,hI),e(hI,aho),e(ap,nho),e(x,sho),e(x,np),e(np,Hne),e(Hne,lho),e(np,iho),e(np,pI),e(pI,dho),e(np,cho),e(x,fho),e(x,sp),e(sp,Une),e(Une,mho),e(sp,gho),e(sp,_I),e(_I,hho),e(sp,pho),e(x,_ho),e(x,lp),e(lp,Jne),e(Jne,uho),e(lp,bho),e(lp,uI),e(uI,vho),e(lp,Fho),e(x,Tho),e(x,ip),e(ip,Yne),e(Yne,Mho),e(ip,Eho),e(ip,bI),e(bI,Cho),e(ip,who),e(x,Aho),e(x,dp),e(dp,Kne),e(Kne,yho),e(dp,Lho),e(dp,vI),e(vI,xho),e(dp,$ho),e(x,kho),e(x,cp),e(cp,Zne),e(Zne,Sho),e(cp,Rho),e(cp,FI),e(FI,Pho),e(cp,Bho),e(x,Iho),e(x,fp),e(fp,ese),e(ese,qho),e(fp,Nho),e(fp,TI),e(TI,jho),e(fp,Dho),e(x,Gho),e(x,mp),e(mp,ose),e(ose,Oho),e(mp,Vho),e(mp,MI),e(MI,Xho),e(mp,zho),e(x,Who),e(x,gp),e(gp,rse),e(rse,Qho),e(gp,Hho),e(gp,EI),e(EI,Uho),e(gp,Jho),e(x,Yho),e(x,hp),e(hp,tse),e(tse,Kho),e(hp,Zho),e(hp,CI),e(CI,epo),e(hp,opo),e(x,rpo),e(x,pp),e(pp,ase),e(ase,tpo),e(pp,apo),e(pp,wI),e(wI,npo),e(pp,spo),e(x,lpo),e(x,_p),e(_p,nse),e(nse,ipo),e(_p,dpo),e(_p,AI),e(AI,cpo),e(_p,fpo),e(x,mpo),e(x,up),e(up,sse),e(sse,gpo),e(up,hpo),e(up,yI),e(yI,ppo),e(up,_po),e(x,upo),e(x,bp),e(bp,lse),e(lse,bpo),e(bp,vpo),e(bp,LI),e(LI,Fpo),e(bp,Tpo),e(x,Mpo),e(x,vp),e(vp,ise),e(ise,Epo),e(vp,Cpo),e(vp,xI),e(xI,wpo),e(vp,Apo),e(x,ypo),e(x,Fp),e(Fp,dse),e(dse,Lpo),e(Fp,xpo),e(Fp,$I),e($I,$po),e(Fp,kpo),e(x,Spo),e(x,Tp),e(Tp,cse),e(cse,Rpo),e(Tp,Ppo),e(Tp,kI),e(kI,Bpo),e(Tp,Ipo),e(x,qpo),e(x,Mp),e(Mp,fse),e(fse,Npo),e(Mp,jpo),e(Mp,SI),e(SI,Dpo),e(Mp,Gpo),e(x,Opo),e(x,Ep),e(Ep,mse),e(mse,Vpo),e(Ep,Xpo),e(Ep,RI),e(RI,zpo),e(Ep,Wpo),e(x,Qpo),e(x,Cp),e(Cp,gse),e(gse,Hpo),e(Cp,Upo),e(Cp,PI),e(PI,Jpo),e(Cp,Ypo),e(x,Kpo),e(x,wp),e(wp,hse),e(hse,Zpo),e(wp,e_o),e(wp,BI),e(BI,o_o),e(wp,r_o),e(x,t_o),e(x,Ap),e(Ap,pse),e(pse,a_o),e(Ap,n_o),e(Ap,II),e(II,s_o),e(Ap,l_o),e(x,i_o),e(x,yp),e(yp,_se),e(_se,d_o),e(yp,c_o),e(yp,qI),e(qI,f_o),e(yp,m_o),e(x,g_o),e(x,Lp),e(Lp,use),e(use,h_o),e(Lp,p_o),e(Lp,NI),e(NI,__o),e(Lp,u_o),e(x,b_o),e(x,xp),e(xp,bse),e(bse,v_o),e(xp,F_o),e(xp,jI),e(jI,T_o),e(xp,M_o),e(x,E_o),e(x,$p),e($p,vse),e(vse,C_o),e($p,w_o),e($p,DI),e(DI,A_o),e($p,y_o),e(x,L_o),e(x,kp),e(kp,Fse),e(Fse,x_o),e(kp,$_o),e(kp,GI),e(GI,k_o),e(kp,S_o),e(x,R_o),e(x,Sp),e(Sp,Tse),e(Tse,P_o),e(Sp,B_o),e(Sp,OI),e(OI,I_o),e(Sp,q_o),e(x,N_o),e(x,Rp),e(Rp,Mse),e(Mse,j_o),e(Rp,D_o),e(Rp,VI),e(VI,G_o),e(Rp,O_o),e(x,V_o),e(x,Rs),e(Rs,Ese),e(Ese,X_o),e(Rs,z_o),e(Rs,XI),e(XI,W_o),e(Rs,Q_o),e(Rs,zI),e(zI,H_o),e(Rs,U_o),e(x,J_o),e(x,Pp),e(Pp,Cse),e(Cse,Y_o),e(Pp,K_o),e(Pp,WI),e(WI,Z_o),e(Pp,euo),e(x,ouo),e(x,Bp),e(Bp,wse),e(wse,ruo),e(Bp,tuo),e(Bp,QI),e(QI,auo),e(Bp,nuo),e(x,suo),e(x,Ip),e(Ip,Ase),e(Ase,luo),e(Ip,iuo),e(Ip,HI),e(HI,duo),e(Ip,cuo),e(x,fuo),e(x,qp),e(qp,yse),e(yse,muo),e(qp,guo),e(qp,UI),e(UI,huo),e(qp,puo),e(x,_uo),e(x,Np),e(Np,Lse),e(Lse,uuo),e(Np,buo),e(Np,JI),e(JI,vuo),e(Np,Fuo),e(x,Tuo),e(x,jp),e(jp,xse),e(xse,Muo),e(jp,Euo),e(jp,YI),e(YI,Cuo),e(jp,wuo),e(x,Auo),e(x,Dp),e(Dp,$se),e($se,yuo),e(Dp,Luo),e(Dp,KI),e(KI,xuo),e(Dp,$uo),e(x,kuo),e(x,Gp),e(Gp,kse),e(kse,Suo),e(Gp,Ruo),e(Gp,ZI),e(ZI,Puo),e(Gp,Buo),e(x,Iuo),e(x,Op),e(Op,Sse),e(Sse,quo),e(Op,Nuo),e(Op,eq),e(eq,juo),e(Op,Duo),e(x,Guo),e(x,Vp),e(Vp,Rse),e(Rse,Ouo),e(Vp,Vuo),e(Vp,oq),e(oq,Xuo),e(Vp,zuo),e(x,Wuo),e(x,Xp),e(Xp,Pse),e(Pse,Quo),e(Xp,Huo),e(Xp,rq),e(rq,Uuo),e(Xp,Juo),e(x,Yuo),e(x,zp),e(zp,Bse),e(Bse,Kuo),e(zp,Zuo),e(zp,tq),e(tq,e1o),e(zp,o1o),e(x,r1o),e(x,Wp),e(Wp,Ise),e(Ise,t1o),e(Wp,a1o),e(Wp,aq),e(aq,n1o),e(Wp,s1o),e(x,l1o),e(x,Qp),e(Qp,qse),e(qse,i1o),e(Qp,d1o),e(Qp,nq),e(nq,c1o),e(Qp,f1o),e(x,m1o),e(x,Hp),e(Hp,Nse),e(Nse,g1o),e(Hp,h1o),e(Hp,sq),e(sq,p1o),e(Hp,_1o),e(x,u1o),e(x,Up),e(Up,jse),e(jse,b1o),e(Up,v1o),e(Up,lq),e(lq,F1o),e(Up,T1o),e(x,M1o),e(x,Jp),e(Jp,Dse),e(Dse,E1o),e(Jp,C1o),e(Jp,iq),e(iq,w1o),e(Jp,A1o),e(x,y1o),e(x,Yp),e(Yp,Gse),e(Gse,L1o),e(Yp,x1o),e(Yp,dq),e(dq,$1o),e(Yp,k1o),e(x,S1o),e(x,Kp),e(Kp,Ose),e(Ose,R1o),e(Kp,P1o),e(Kp,cq),e(cq,B1o),e(Kp,I1o),e(x,q1o),e(x,Zp),e(Zp,Vse),e(Vse,N1o),e(Zp,j1o),e(Zp,fq),e(fq,D1o),e(Zp,G1o),e(x,O1o),e(x,e_),e(e_,Xse),e(Xse,V1o),e(e_,X1o),e(e_,mq),e(mq,z1o),e(e_,W1o),e(x,Q1o),e(x,o_),e(o_,zse),e(zse,H1o),e(o_,U1o),e(o_,gq),e(gq,J1o),e(o_,Y1o),e(x,K1o),e(x,r_),e(r_,Wse),e(Wse,Z1o),e(r_,ebo),e(r_,hq),e(hq,obo),e(r_,rbo),e(x,tbo),e(x,t_),e(t_,Qse),e(Qse,abo),e(t_,nbo),e(t_,pq),e(pq,sbo),e(t_,lbo),e(x,ibo),e(x,a_),e(a_,Hse),e(Hse,dbo),e(a_,cbo),e(a_,_q),e(_q,fbo),e(a_,mbo),e(x,gbo),e(x,n_),e(n_,Use),e(Use,hbo),e(n_,pbo),e(n_,uq),e(uq,_bo),e(n_,ubo),e(x,bbo),e(x,s_),e(s_,Jse),e(Jse,vbo),e(s_,Fbo),e(s_,bq),e(bq,Tbo),e(s_,Mbo),e(x,Ebo),e(x,l_),e(l_,Yse),e(Yse,Cbo),e(l_,wbo),e(l_,vq),e(vq,Abo),e(l_,ybo),e(x,Lbo),e(x,i_),e(i_,Kse),e(Kse,xbo),e(i_,$bo),e(i_,Fq),e(Fq,kbo),e(i_,Sbo),e(x,Rbo),e(x,d_),e(d_,Zse),e(Zse,Pbo),e(d_,Bbo),e(d_,Tq),e(Tq,Ibo),e(d_,qbo),e(x,Nbo),e(x,c_),e(c_,ele),e(ele,jbo),e(c_,Dbo),e(c_,Mq),e(Mq,Gbo),e(c_,Obo),e(x,Vbo),e(x,f_),e(f_,ole),e(ole,Xbo),e(f_,zbo),e(f_,Eq),e(Eq,Wbo),e(f_,Qbo),e(x,Hbo),e(x,m_),e(m_,rle),e(rle,Ubo),e(m_,Jbo),e(m_,Cq),e(Cq,Ybo),e(m_,Kbo),e(x,Zbo),e(x,g_),e(g_,tle),e(tle,e2o),e(g_,o2o),e(g_,wq),e(wq,r2o),e(g_,t2o),e(x,a2o),e(x,h_),e(h_,ale),e(ale,n2o),e(h_,s2o),e(h_,Aq),e(Aq,l2o),e(h_,i2o),e(x,d2o),e(x,p_),e(p_,nle),e(nle,c2o),e(p_,f2o),e(p_,yq),e(yq,m2o),e(p_,g2o),e(x,h2o),e(x,__),e(__,sle),e(sle,p2o),e(__,_2o),e(__,Lq),e(Lq,u2o),e(__,b2o),e(x,v2o),e(x,u_),e(u_,lle),e(lle,F2o),e(u_,T2o),e(u_,xq),e(xq,M2o),e(u_,E2o),e(x,C2o),e(x,b_),e(b_,ile),e(ile,w2o),e(b_,A2o),e(b_,$q),e($q,y2o),e(b_,L2o),e(x,x2o),e(x,v_),e(v_,dle),e(dle,$2o),e(v_,k2o),e(v_,kq),e(kq,S2o),e(v_,R2o),e(x,P2o),e(x,F_),e(F_,cle),e(cle,B2o),e(F_,I2o),e(F_,Sq),e(Sq,q2o),e(F_,N2o),e(x,j2o),e(x,T_),e(T_,fle),e(fle,D2o),e(T_,G2o),e(T_,Rq),e(Rq,O2o),e(T_,V2o),e(x,X2o),e(x,M_),e(M_,mle),e(mle,z2o),e(M_,W2o),e(M_,Pq),e(Pq,Q2o),e(M_,H2o),e(x,U2o),e(x,E_),e(E_,gle),e(gle,J2o),e(E_,Y2o),e(E_,Bq),e(Bq,K2o),e(E_,Z2o),e(x,evo),e(x,C_),e(C_,hle),e(hle,ovo),e(C_,rvo),e(C_,Iq),e(Iq,tvo),e(C_,avo),e(x,nvo),e(x,w_),e(w_,ple),e(ple,svo),e(w_,lvo),e(w_,qq),e(qq,ivo),e(w_,dvo),e(x,cvo),e(x,A_),e(A_,_le),e(_le,fvo),e(A_,mvo),e(A_,Nq),e(Nq,gvo),e(A_,hvo),e(x,pvo),e(x,y_),e(y_,ule),e(ule,_vo),e(y_,uvo),e(y_,jq),e(jq,bvo),e(y_,vvo),e(x,Fvo),e(x,L_),e(L_,ble),e(ble,Tvo),e(L_,Mvo),e(L_,Dq),e(Dq,Evo),e(L_,Cvo),e(x,wvo),e(x,x_),e(x_,vle),e(vle,Avo),e(x_,yvo),e(x_,Gq),e(Gq,Lvo),e(x_,xvo),e(x,$vo),e(x,$_),e($_,Fle),e(Fle,kvo),e($_,Svo),e($_,Oq),e(Oq,Rvo),e($_,Pvo),e(x,Bvo),e(x,k_),e(k_,Tle),e(Tle,Ivo),e(k_,qvo),e(k_,Vq),e(Vq,Nvo),e(k_,jvo),e(x,Dvo),e(x,S_),e(S_,Mle),e(Mle,Gvo),e(S_,Ovo),e(S_,Xq),e(Xq,Vvo),e(S_,Xvo),e(x,zvo),e(x,R_),e(R_,Ele),e(Ele,Wvo),e(R_,Qvo),e(R_,zq),e(zq,Hvo),e(R_,Uvo),e(x,Jvo),e(x,P_),e(P_,Cle),e(Cle,Yvo),e(P_,Kvo),e(P_,Wq),e(Wq,Zvo),e(P_,eFo),e(x,oFo),e(x,B_),e(B_,wle),e(wle,rFo),e(B_,tFo),e(B_,Qq),e(Qq,aFo),e(B_,nFo),e(x,sFo),e(x,I_),e(I_,Ale),e(Ale,lFo),e(I_,iFo),e(I_,Hq),e(Hq,dFo),e(I_,cFo),e(x,fFo),e(x,q_),e(q_,yle),e(yle,mFo),e(q_,gFo),e(q_,Uq),e(Uq,hFo),e(q_,pFo),e(x,_Fo),e(x,N_),e(N_,Lle),e(Lle,uFo),e(N_,bFo),e(N_,Jq),e(Jq,vFo),e(N_,FFo),e(x,TFo),e(x,j_),e(j_,xle),e(xle,MFo),e(j_,EFo),e(j_,Yq),e(Yq,CFo),e(j_,wFo),e(x,AFo),e(x,D_),e(D_,$le),e($le,yFo),e(D_,LFo),e(D_,Kq),e(Kq,xFo),e(D_,$Fo),e(x,kFo),e(x,G_),e(G_,kle),e(kle,SFo),e(G_,RFo),e(G_,Zq),e(Zq,PFo),e(G_,BFo),e(x,IFo),e(x,O_),e(O_,Sle),e(Sle,qFo),e(O_,NFo),e(O_,eN),e(eN,jFo),e(O_,DFo),e(x,GFo),e(x,V_),e(V_,Rle),e(Rle,OFo),e(V_,VFo),e(V_,oN),e(oN,XFo),e(V_,zFo),e(x,WFo),e(x,X_),e(X_,Ple),e(Ple,QFo),e(X_,HFo),e(X_,rN),e(rN,UFo),e(X_,JFo),e(x,YFo),e(x,z_),e(z_,Ble),e(Ble,KFo),e(z_,ZFo),e(z_,tN),e(tN,e6o),e(z_,o6o),e(x,r6o),e(x,W_),e(W_,Ile),e(Ile,t6o),e(W_,a6o),e(W_,aN),e(aN,n6o),e(W_,s6o),e(Je,l6o),e(Je,Q_),e(Q_,i6o),e(Q_,qle),e(qle,d6o),e(Q_,c6o),e(Q_,Nle),e(Nle,f6o),e(Je,m6o),M(H_,Je,null),b(f,bqe,u),b(f,yi,u),e(yi,U_),e(U_,jle),M(W0,jle,null),e(yi,g6o),e(yi,Dle),e(Dle,h6o),b(f,vqe,u),b(f,xo,u),M(Q0,xo,null),e(xo,p6o),e(xo,Li),e(Li,_6o),e(Li,nN),e(nN,u6o),e(Li,b6o),e(Li,sN),e(sN,v6o),e(Li,F6o),e(xo,T6o),e(xo,H0),e(H0,M6o),e(H0,Gle),e(Gle,E6o),e(H0,C6o),e(xo,w6o),e(xo,at),M(U0,at,null),e(at,A6o),e(at,Ole),e(Ole,y6o),e(at,L6o),e(at,xi),e(xi,x6o),e(xi,Vle),e(Vle,$6o),e(xi,k6o),e(xi,lN),e(lN,S6o),e(xi,R6o),e(at,P6o),M(J_,at,null),e(xo,B6o),e(xo,Ye),M(J0,Ye,null),e(Ye,I6o),e(Ye,Xle),e(Xle,q6o),e(Ye,N6o),e(Ye,xa),e(xa,j6o),e(xa,zle),e(zle,D6o),e(xa,G6o),e(xa,Wle),e(Wle,O6o),e(xa,V6o),e(xa,Qle),e(Qle,X6o),e(xa,z6o),e(Ye,W6o),e(Ye,G),e(G,Y_),e(Y_,Hle),e(Hle,Q6o),e(Y_,H6o),e(Y_,iN),e(iN,U6o),e(Y_,J6o),e(G,Y6o),e(G,K_),e(K_,Ule),e(Ule,K6o),e(K_,Z6o),e(K_,dN),e(dN,eTo),e(K_,oTo),e(G,rTo),e(G,Z_),e(Z_,Jle),e(Jle,tTo),e(Z_,aTo),e(Z_,cN),e(cN,nTo),e(Z_,sTo),e(G,lTo),e(G,eu),e(eu,Yle),e(Yle,iTo),e(eu,dTo),e(eu,fN),e(fN,cTo),e(eu,fTo),e(G,mTo),e(G,ou),e(ou,Kle),e(Kle,gTo),e(ou,hTo),e(ou,mN),e(mN,pTo),e(ou,_To),e(G,uTo),e(G,ru),e(ru,Zle),e(Zle,bTo),e(ru,vTo),e(ru,gN),e(gN,FTo),e(ru,TTo),e(G,MTo),e(G,tu),e(tu,eie),e(eie,ETo),e(tu,CTo),e(tu,hN),e(hN,wTo),e(tu,ATo),e(G,yTo),e(G,au),e(au,oie),e(oie,LTo),e(au,xTo),e(au,pN),e(pN,$To),e(au,kTo),e(G,STo),e(G,nu),e(nu,rie),e(rie,RTo),e(nu,PTo),e(nu,_N),e(_N,BTo),e(nu,ITo),e(G,qTo),e(G,su),e(su,tie),e(tie,NTo),e(su,jTo),e(su,uN),e(uN,DTo),e(su,GTo),e(G,OTo),e(G,lu),e(lu,aie),e(aie,VTo),e(lu,XTo),e(lu,bN),e(bN,zTo),e(lu,WTo),e(G,QTo),e(G,iu),e(iu,nie),e(nie,HTo),e(iu,UTo),e(iu,vN),e(vN,JTo),e(iu,YTo),e(G,KTo),e(G,du),e(du,sie),e(sie,ZTo),e(du,e8o),e(du,FN),e(FN,o8o),e(du,r8o),e(G,t8o),e(G,cu),e(cu,lie),e(lie,a8o),e(cu,n8o),e(cu,TN),e(TN,s8o),e(cu,l8o),e(G,i8o),e(G,fu),e(fu,iie),e(iie,d8o),e(fu,c8o),e(fu,MN),e(MN,f8o),e(fu,m8o),e(G,g8o),e(G,mu),e(mu,die),e(die,h8o),e(mu,p8o),e(mu,EN),e(EN,_8o),e(mu,u8o),e(G,b8o),e(G,gu),e(gu,cie),e(cie,v8o),e(gu,F8o),e(gu,CN),e(CN,T8o),e(gu,M8o),e(G,E8o),e(G,hu),e(hu,fie),e(fie,C8o),e(hu,w8o),e(hu,wN),e(wN,A8o),e(hu,y8o),e(G,L8o),e(G,pu),e(pu,mie),e(mie,x8o),e(pu,$8o),e(pu,AN),e(AN,k8o),e(pu,S8o),e(G,R8o),e(G,_u),e(_u,gie),e(gie,P8o),e(_u,B8o),e(_u,yN),e(yN,I8o),e(_u,q8o),e(G,N8o),e(G,uu),e(uu,hie),e(hie,j8o),e(uu,D8o),e(uu,LN),e(LN,G8o),e(uu,O8o),e(G,V8o),e(G,bu),e(bu,pie),e(pie,X8o),e(bu,z8o),e(bu,xN),e(xN,W8o),e(bu,Q8o),e(G,H8o),e(G,vu),e(vu,_ie),e(_ie,U8o),e(vu,J8o),e(vu,$N),e($N,Y8o),e(vu,K8o),e(G,Z8o),e(G,Fu),e(Fu,uie),e(uie,e7o),e(Fu,o7o),e(Fu,kN),e(kN,r7o),e(Fu,t7o),e(G,a7o),e(G,Tu),e(Tu,bie),e(bie,n7o),e(Tu,s7o),e(Tu,SN),e(SN,l7o),e(Tu,i7o),e(G,d7o),e(G,Mu),e(Mu,vie),e(vie,c7o),e(Mu,f7o),e(Mu,RN),e(RN,m7o),e(Mu,g7o),e(G,h7o),e(G,Eu),e(Eu,Fie),e(Fie,p7o),e(Eu,_7o),e(Eu,PN),e(PN,u7o),e(Eu,b7o),e(G,v7o),e(G,Cu),e(Cu,Tie),e(Tie,F7o),e(Cu,T7o),e(Cu,BN),e(BN,M7o),e(Cu,E7o),e(G,C7o),e(G,wu),e(wu,Mie),e(Mie,w7o),e(wu,A7o),e(wu,IN),e(IN,y7o),e(wu,L7o),e(G,x7o),e(G,Au),e(Au,Eie),e(Eie,$7o),e(Au,k7o),e(Au,qN),e(qN,S7o),e(Au,R7o),e(G,P7o),e(G,yu),e(yu,Cie),e(Cie,B7o),e(yu,I7o),e(yu,NN),e(NN,q7o),e(yu,N7o),e(G,j7o),e(G,Lu),e(Lu,wie),e(wie,D7o),e(Lu,G7o),e(Lu,jN),e(jN,O7o),e(Lu,V7o),e(G,X7o),e(G,xu),e(xu,Aie),e(Aie,z7o),e(xu,W7o),e(xu,DN),e(DN,Q7o),e(xu,H7o),e(G,U7o),e(G,$u),e($u,yie),e(yie,J7o),e($u,Y7o),e($u,GN),e(GN,K7o),e($u,Z7o),e(G,eMo),e(G,ku),e(ku,Lie),e(Lie,oMo),e(ku,rMo),e(ku,ON),e(ON,tMo),e(ku,aMo),e(G,nMo),e(G,Su),e(Su,xie),e(xie,sMo),e(Su,lMo),e(Su,VN),e(VN,iMo),e(Su,dMo),e(G,cMo),e(G,Ru),e(Ru,$ie),e($ie,fMo),e(Ru,mMo),e(Ru,XN),e(XN,gMo),e(Ru,hMo),e(G,pMo),e(G,Pu),e(Pu,kie),e(kie,_Mo),e(Pu,uMo),e(Pu,zN),e(zN,bMo),e(Pu,vMo),e(G,FMo),e(G,Bu),e(Bu,Sie),e(Sie,TMo),e(Bu,MMo),e(Bu,WN),e(WN,EMo),e(Bu,CMo),e(G,wMo),e(G,Iu),e(Iu,Rie),e(Rie,AMo),e(Iu,yMo),e(Iu,QN),e(QN,LMo),e(Iu,xMo),e(G,$Mo),e(G,qu),e(qu,Pie),e(Pie,kMo),e(qu,SMo),e(qu,HN),e(HN,RMo),e(qu,PMo),e(G,BMo),e(G,Nu),e(Nu,Bie),e(Bie,IMo),e(Nu,qMo),e(Nu,UN),e(UN,NMo),e(Nu,jMo),e(Ye,DMo),e(Ye,ju),e(ju,GMo),e(ju,Iie),e(Iie,OMo),e(ju,VMo),e(ju,qie),e(qie,XMo),e(Ye,zMo),M(Du,Ye,null),b(f,Fqe,u),b(f,$i,u),e($i,Gu),e(Gu,Nie),M(Y0,Nie,null),e($i,WMo),e($i,jie),e(jie,QMo),b(f,Tqe,u),b(f,$o,u),M(K0,$o,null),e($o,HMo),e($o,ki),e(ki,UMo),e(ki,JN),e(JN,JMo),e(ki,YMo),e(ki,YN),e(YN,KMo),e(ki,ZMo),e($o,e4o),e($o,Z0),e(Z0,o4o),e(Z0,Die),e(Die,r4o),e(Z0,t4o),e($o,a4o),e($o,nt),M(eA,nt,null),e(nt,n4o),e(nt,Gie),e(Gie,s4o),e(nt,l4o),e(nt,Si),e(Si,i4o),e(Si,Oie),e(Oie,d4o),e(Si,c4o),e(Si,KN),e(KN,f4o),e(Si,m4o),e(nt,g4o),M(Ou,nt,null),e($o,h4o),e($o,Ke),M(oA,Ke,null),e(Ke,p4o),e(Ke,Vie),e(Vie,_4o),e(Ke,u4o),e(Ke,$a),e($a,b4o),e($a,Xie),e(Xie,v4o),e($a,F4o),e($a,zie),e(zie,T4o),e($a,M4o),e($a,Wie),e(Wie,E4o),e($a,C4o),e(Ke,w4o),e(Ke,z),e(z,Vu),e(Vu,Qie),e(Qie,A4o),e(Vu,y4o),e(Vu,ZN),e(ZN,L4o),e(Vu,x4o),e(z,$4o),e(z,Xu),e(Xu,Hie),e(Hie,k4o),e(Xu,S4o),e(Xu,ej),e(ej,R4o),e(Xu,P4o),e(z,B4o),e(z,zu),e(zu,Uie),e(Uie,I4o),e(zu,q4o),e(zu,oj),e(oj,N4o),e(zu,j4o),e(z,D4o),e(z,Wu),e(Wu,Jie),e(Jie,G4o),e(Wu,O4o),e(Wu,rj),e(rj,V4o),e(Wu,X4o),e(z,z4o),e(z,Qu),e(Qu,Yie),e(Yie,W4o),e(Qu,Q4o),e(Qu,tj),e(tj,H4o),e(Qu,U4o),e(z,J4o),e(z,Hu),e(Hu,Kie),e(Kie,Y4o),e(Hu,K4o),e(Hu,aj),e(aj,Z4o),e(Hu,eEo),e(z,oEo),e(z,Uu),e(Uu,Zie),e(Zie,rEo),e(Uu,tEo),e(Uu,nj),e(nj,aEo),e(Uu,nEo),e(z,sEo),e(z,Ju),e(Ju,ede),e(ede,lEo),e(Ju,iEo),e(Ju,sj),e(sj,dEo),e(Ju,cEo),e(z,fEo),e(z,Yu),e(Yu,ode),e(ode,mEo),e(Yu,gEo),e(Yu,lj),e(lj,hEo),e(Yu,pEo),e(z,_Eo),e(z,Ku),e(Ku,rde),e(rde,uEo),e(Ku,bEo),e(Ku,ij),e(ij,vEo),e(Ku,FEo),e(z,TEo),e(z,Zu),e(Zu,tde),e(tde,MEo),e(Zu,EEo),e(Zu,dj),e(dj,CEo),e(Zu,wEo),e(z,AEo),e(z,e1),e(e1,ade),e(ade,yEo),e(e1,LEo),e(e1,cj),e(cj,xEo),e(e1,$Eo),e(z,kEo),e(z,o1),e(o1,nde),e(nde,SEo),e(o1,REo),e(o1,fj),e(fj,PEo),e(o1,BEo),e(z,IEo),e(z,r1),e(r1,sde),e(sde,qEo),e(r1,NEo),e(r1,mj),e(mj,jEo),e(r1,DEo),e(z,GEo),e(z,t1),e(t1,lde),e(lde,OEo),e(t1,VEo),e(t1,gj),e(gj,XEo),e(t1,zEo),e(z,WEo),e(z,a1),e(a1,ide),e(ide,QEo),e(a1,HEo),e(a1,hj),e(hj,UEo),e(a1,JEo),e(z,YEo),e(z,n1),e(n1,dde),e(dde,KEo),e(n1,ZEo),e(n1,pj),e(pj,eCo),e(n1,oCo),e(z,rCo),e(z,s1),e(s1,cde),e(cde,tCo),e(s1,aCo),e(s1,_j),e(_j,nCo),e(s1,sCo),e(z,lCo),e(z,l1),e(l1,fde),e(fde,iCo),e(l1,dCo),e(l1,uj),e(uj,cCo),e(l1,fCo),e(z,mCo),e(z,i1),e(i1,mde),e(mde,gCo),e(i1,hCo),e(i1,bj),e(bj,pCo),e(i1,_Co),e(z,uCo),e(z,d1),e(d1,gde),e(gde,bCo),e(d1,vCo),e(d1,vj),e(vj,FCo),e(d1,TCo),e(z,MCo),e(z,c1),e(c1,hde),e(hde,ECo),e(c1,CCo),e(c1,Fj),e(Fj,wCo),e(c1,ACo),e(z,yCo),e(z,f1),e(f1,pde),e(pde,LCo),e(f1,xCo),e(f1,Tj),e(Tj,$Co),e(f1,kCo),e(z,SCo),e(z,m1),e(m1,_de),e(_de,RCo),e(m1,PCo),e(m1,Mj),e(Mj,BCo),e(m1,ICo),e(z,qCo),e(z,g1),e(g1,ude),e(ude,NCo),e(g1,jCo),e(g1,Ej),e(Ej,DCo),e(g1,GCo),e(z,OCo),e(z,h1),e(h1,bde),e(bde,VCo),e(h1,XCo),e(h1,Cj),e(Cj,zCo),e(h1,WCo),e(z,QCo),e(z,p1),e(p1,vde),e(vde,HCo),e(p1,UCo),e(p1,wj),e(wj,JCo),e(p1,YCo),e(z,KCo),e(z,_1),e(_1,Fde),e(Fde,ZCo),e(_1,e5o),e(_1,Aj),e(Aj,o5o),e(_1,r5o),e(z,t5o),e(z,u1),e(u1,Tde),e(Tde,a5o),e(u1,n5o),e(u1,yj),e(yj,s5o),e(u1,l5o),e(z,i5o),e(z,b1),e(b1,Mde),e(Mde,d5o),e(b1,c5o),e(b1,Lj),e(Lj,f5o),e(b1,m5o),e(z,g5o),e(z,v1),e(v1,Ede),e(Ede,h5o),e(v1,p5o),e(v1,xj),e(xj,_5o),e(v1,u5o),e(z,b5o),e(z,F1),e(F1,Cde),e(Cde,v5o),e(F1,F5o),e(F1,$j),e($j,T5o),e(F1,M5o),e(z,E5o),e(z,T1),e(T1,wde),e(wde,C5o),e(T1,w5o),e(T1,kj),e(kj,A5o),e(T1,y5o),e(z,L5o),e(z,M1),e(M1,Ade),e(Ade,x5o),e(M1,$5o),e(M1,Sj),e(Sj,k5o),e(M1,S5o),e(z,R5o),e(z,E1),e(E1,yde),e(yde,P5o),e(E1,B5o),e(E1,Rj),e(Rj,I5o),e(E1,q5o),e(z,N5o),e(z,C1),e(C1,Lde),e(Lde,j5o),e(C1,D5o),e(C1,Pj),e(Pj,G5o),e(C1,O5o),e(Ke,V5o),e(Ke,w1),e(w1,X5o),e(w1,xde),e(xde,z5o),e(w1,W5o),e(w1,$de),e($de,Q5o),e(Ke,H5o),M(A1,Ke,null),b(f,Mqe,u),b(f,Ri,u),e(Ri,y1),e(y1,kde),M(rA,kde,null),e(Ri,U5o),e(Ri,Sde),e(Sde,J5o),b(f,Eqe,u),b(f,ko,u),M(tA,ko,null),e(ko,Y5o),e(ko,Pi),e(Pi,K5o),e(Pi,Bj),e(Bj,Z5o),e(Pi,e3o),e(Pi,Ij),e(Ij,o3o),e(Pi,r3o),e(ko,t3o),e(ko,aA),e(aA,a3o),e(aA,Rde),e(Rde,n3o),e(aA,s3o),e(ko,l3o),e(ko,st),M(nA,st,null),e(st,i3o),e(st,Pde),e(Pde,d3o),e(st,c3o),e(st,Bi),e(Bi,f3o),e(Bi,Bde),e(Bde,m3o),e(Bi,g3o),e(Bi,qj),e(qj,h3o),e(Bi,p3o),e(st,_3o),M(L1,st,null),e(ko,u3o),e(ko,Ze),M(sA,Ze,null),e(Ze,b3o),e(Ze,Ide),e(Ide,v3o),e(Ze,F3o),e(Ze,ka),e(ka,T3o),e(ka,qde),e(qde,M3o),e(ka,E3o),e(ka,Nde),e(Nde,C3o),e(ka,w3o),e(ka,jde),e(jde,A3o),e(ka,y3o),e(Ze,L3o),e(Ze,W),e(W,x1),e(x1,Dde),e(Dde,x3o),e(x1,$3o),e(x1,Nj),e(Nj,k3o),e(x1,S3o),e(W,R3o),e(W,$1),e($1,Gde),e(Gde,P3o),e($1,B3o),e($1,jj),e(jj,I3o),e($1,q3o),e(W,N3o),e(W,k1),e(k1,Ode),e(Ode,j3o),e(k1,D3o),e(k1,Dj),e(Dj,G3o),e(k1,O3o),e(W,V3o),e(W,S1),e(S1,Vde),e(Vde,X3o),e(S1,z3o),e(S1,Gj),e(Gj,W3o),e(S1,Q3o),e(W,H3o),e(W,R1),e(R1,Xde),e(Xde,U3o),e(R1,J3o),e(R1,Oj),e(Oj,Y3o),e(R1,K3o),e(W,Z3o),e(W,P1),e(P1,zde),e(zde,ewo),e(P1,owo),e(P1,Vj),e(Vj,rwo),e(P1,two),e(W,awo),e(W,B1),e(B1,Wde),e(Wde,nwo),e(B1,swo),e(B1,Xj),e(Xj,lwo),e(B1,iwo),e(W,dwo),e(W,I1),e(I1,Qde),e(Qde,cwo),e(I1,fwo),e(I1,zj),e(zj,mwo),e(I1,gwo),e(W,hwo),e(W,q1),e(q1,Hde),e(Hde,pwo),e(q1,_wo),e(q1,Wj),e(Wj,uwo),e(q1,bwo),e(W,vwo),e(W,N1),e(N1,Ude),e(Ude,Fwo),e(N1,Two),e(N1,Qj),e(Qj,Mwo),e(N1,Ewo),e(W,Cwo),e(W,j1),e(j1,Jde),e(Jde,wwo),e(j1,Awo),e(j1,Hj),e(Hj,ywo),e(j1,Lwo),e(W,xwo),e(W,D1),e(D1,Yde),e(Yde,$wo),e(D1,kwo),e(D1,Uj),e(Uj,Swo),e(D1,Rwo),e(W,Pwo),e(W,G1),e(G1,Kde),e(Kde,Bwo),e(G1,Iwo),e(G1,Jj),e(Jj,qwo),e(G1,Nwo),e(W,jwo),e(W,O1),e(O1,Zde),e(Zde,Dwo),e(O1,Gwo),e(O1,Yj),e(Yj,Owo),e(O1,Vwo),e(W,Xwo),e(W,V1),e(V1,ece),e(ece,zwo),e(V1,Wwo),e(V1,Kj),e(Kj,Qwo),e(V1,Hwo),e(W,Uwo),e(W,X1),e(X1,oce),e(oce,Jwo),e(X1,Ywo),e(X1,Zj),e(Zj,Kwo),e(X1,Zwo),e(W,e0o),e(W,z1),e(z1,rce),e(rce,o0o),e(z1,r0o),e(z1,eD),e(eD,t0o),e(z1,a0o),e(W,n0o),e(W,W1),e(W1,tce),e(tce,s0o),e(W1,l0o),e(W1,oD),e(oD,i0o),e(W1,d0o),e(W,c0o),e(W,Q1),e(Q1,ace),e(ace,f0o),e(Q1,m0o),e(Q1,rD),e(rD,g0o),e(Q1,h0o),e(W,p0o),e(W,H1),e(H1,nce),e(nce,_0o),e(H1,u0o),e(H1,tD),e(tD,b0o),e(H1,v0o),e(W,F0o),e(W,U1),e(U1,sce),e(sce,T0o),e(U1,M0o),e(U1,aD),e(aD,E0o),e(U1,C0o),e(W,w0o),e(W,J1),e(J1,lce),e(lce,A0o),e(J1,y0o),e(J1,nD),e(nD,L0o),e(J1,x0o),e(W,$0o),e(W,Y1),e(Y1,ice),e(ice,k0o),e(Y1,S0o),e(Y1,sD),e(sD,R0o),e(Y1,P0o),e(W,B0o),e(W,K1),e(K1,dce),e(dce,I0o),e(K1,q0o),e(K1,lD),e(lD,N0o),e(K1,j0o),e(W,D0o),e(W,Z1),e(Z1,cce),e(cce,G0o),e(Z1,O0o),e(Z1,iD),e(iD,V0o),e(Z1,X0o),e(W,z0o),e(W,eb),e(eb,fce),e(fce,W0o),e(eb,Q0o),e(eb,dD),e(dD,H0o),e(eb,U0o),e(W,J0o),e(W,ob),e(ob,mce),e(mce,Y0o),e(ob,K0o),e(ob,cD),e(cD,Z0o),e(ob,eAo),e(W,oAo),e(W,rb),e(rb,gce),e(gce,rAo),e(rb,tAo),e(rb,fD),e(fD,aAo),e(rb,nAo),e(W,sAo),e(W,tb),e(tb,hce),e(hce,lAo),e(tb,iAo),e(tb,mD),e(mD,dAo),e(tb,cAo),e(W,fAo),e(W,ab),e(ab,pce),e(pce,mAo),e(ab,gAo),e(ab,gD),e(gD,hAo),e(ab,pAo),e(W,_Ao),e(W,nb),e(nb,_ce),e(_ce,uAo),e(nb,bAo),e(nb,uce),e(uce,vAo),e(nb,FAo),e(W,TAo),e(W,sb),e(sb,bce),e(bce,MAo),e(sb,EAo),e(sb,hD),e(hD,CAo),e(sb,wAo),e(W,AAo),e(W,lb),e(lb,vce),e(vce,yAo),e(lb,LAo),e(lb,pD),e(pD,xAo),e(lb,$Ao),e(W,kAo),e(W,ib),e(ib,Fce),e(Fce,SAo),e(ib,RAo),e(ib,_D),e(_D,PAo),e(ib,BAo),e(W,IAo),e(W,db),e(db,Tce),e(Tce,qAo),e(db,NAo),e(db,uD),e(uD,jAo),e(db,DAo),e(Ze,GAo),e(Ze,cb),e(cb,OAo),e(cb,Mce),e(Mce,VAo),e(cb,XAo),e(cb,Ece),e(Ece,zAo),e(Ze,WAo),M(fb,Ze,null),b(f,Cqe,u),b(f,Ii,u),e(Ii,mb),e(mb,Cce),M(lA,Cce,null),e(Ii,QAo),e(Ii,wce),e(wce,HAo),b(f,wqe,u),b(f,So,u),M(iA,So,null),e(So,UAo),e(So,qi),e(qi,JAo),e(qi,bD),e(bD,YAo),e(qi,KAo),e(qi,vD),e(vD,ZAo),e(qi,eyo),e(So,oyo),e(So,dA),e(dA,ryo),e(dA,Ace),e(Ace,tyo),e(dA,ayo),e(So,nyo),e(So,lt),M(cA,lt,null),e(lt,syo),e(lt,yce),e(yce,lyo),e(lt,iyo),e(lt,Ni),e(Ni,dyo),e(Ni,Lce),e(Lce,cyo),e(Ni,fyo),e(Ni,FD),e(FD,myo),e(Ni,gyo),e(lt,hyo),M(gb,lt,null),e(So,pyo),e(So,eo),M(fA,eo,null),e(eo,_yo),e(eo,xce),e(xce,uyo),e(eo,byo),e(eo,Sa),e(Sa,vyo),e(Sa,$ce),e($ce,Fyo),e(Sa,Tyo),e(Sa,kce),e(kce,Myo),e(Sa,Eyo),e(Sa,Sce),e(Sce,Cyo),e(Sa,wyo),e(eo,Ayo),e(eo,_e),e(_e,hb),e(hb,Rce),e(Rce,yyo),e(hb,Lyo),e(hb,TD),e(TD,xyo),e(hb,$yo),e(_e,kyo),e(_e,pb),e(pb,Pce),e(Pce,Syo),e(pb,Ryo),e(pb,MD),e(MD,Pyo),e(pb,Byo),e(_e,Iyo),e(_e,_b),e(_b,Bce),e(Bce,qyo),e(_b,Nyo),e(_b,ED),e(ED,jyo),e(_b,Dyo),e(_e,Gyo),e(_e,ub),e(ub,Ice),e(Ice,Oyo),e(ub,Vyo),e(ub,CD),e(CD,Xyo),e(ub,zyo),e(_e,Wyo),e(_e,bb),e(bb,qce),e(qce,Qyo),e(bb,Hyo),e(bb,wD),e(wD,Uyo),e(bb,Jyo),e(_e,Yyo),e(_e,vb),e(vb,Nce),e(Nce,Kyo),e(vb,Zyo),e(vb,AD),e(AD,eLo),e(vb,oLo),e(_e,rLo),e(_e,Fb),e(Fb,jce),e(jce,tLo),e(Fb,aLo),e(Fb,yD),e(yD,nLo),e(Fb,sLo),e(_e,lLo),e(_e,Tb),e(Tb,Dce),e(Dce,iLo),e(Tb,dLo),e(Tb,LD),e(LD,cLo),e(Tb,fLo),e(_e,mLo),e(_e,Mb),e(Mb,Gce),e(Gce,gLo),e(Mb,hLo),e(Mb,xD),e(xD,pLo),e(Mb,_Lo),e(_e,uLo),e(_e,Eb),e(Eb,Oce),e(Oce,bLo),e(Eb,vLo),e(Eb,$D),e($D,FLo),e(Eb,TLo),e(_e,MLo),e(_e,Cb),e(Cb,Vce),e(Vce,ELo),e(Cb,CLo),e(Cb,kD),e(kD,wLo),e(Cb,ALo),e(_e,yLo),e(_e,wb),e(wb,Xce),e(Xce,LLo),e(wb,xLo),e(wb,SD),e(SD,$Lo),e(wb,kLo),e(_e,SLo),e(_e,Ab),e(Ab,zce),e(zce,RLo),e(Ab,PLo),e(Ab,RD),e(RD,BLo),e(Ab,ILo),e(_e,qLo),e(_e,yb),e(yb,Wce),e(Wce,NLo),e(yb,jLo),e(yb,PD),e(PD,DLo),e(yb,GLo),e(_e,OLo),e(_e,Lb),e(Lb,Qce),e(Qce,VLo),e(Lb,XLo),e(Lb,BD),e(BD,zLo),e(Lb,WLo),e(_e,QLo),e(_e,xb),e(xb,Hce),e(Hce,HLo),e(xb,ULo),e(xb,ID),e(ID,JLo),e(xb,YLo),e(eo,KLo),e(eo,$b),e($b,ZLo),e($b,Uce),e(Uce,e9o),e($b,o9o),e($b,Jce),e(Jce,r9o),e(eo,t9o),M(kb,eo,null),b(f,Aqe,u),b(f,ji,u),e(ji,Sb),e(Sb,Yce),M(mA,Yce,null),e(ji,a9o),e(ji,Kce),e(Kce,n9o),b(f,yqe,u),b(f,Ro,u),M(gA,Ro,null),e(Ro,s9o),e(Ro,Di),e(Di,l9o),e(Di,qD),e(qD,i9o),e(Di,d9o),e(Di,ND),e(ND,c9o),e(Di,f9o),e(Ro,m9o),e(Ro,hA),e(hA,g9o),e(hA,Zce),e(Zce,h9o),e(hA,p9o),e(Ro,_9o),e(Ro,it),M(pA,it,null),e(it,u9o),e(it,efe),e(efe,b9o),e(it,v9o),e(it,Gi),e(Gi,F9o),e(Gi,ofe),e(ofe,T9o),e(Gi,M9o),e(Gi,jD),e(jD,E9o),e(Gi,C9o),e(it,w9o),M(Rb,it,null),e(Ro,A9o),e(Ro,oo),M(_A,oo,null),e(oo,y9o),e(oo,rfe),e(rfe,L9o),e(oo,x9o),e(oo,Ra),e(Ra,$9o),e(Ra,tfe),e(tfe,k9o),e(Ra,S9o),e(Ra,afe),e(afe,R9o),e(Ra,P9o),e(Ra,nfe),e(nfe,B9o),e(Ra,I9o),e(oo,q9o),e(oo,q),e(q,Pb),e(Pb,sfe),e(sfe,N9o),e(Pb,j9o),e(Pb,DD),e(DD,D9o),e(Pb,G9o),e(q,O9o),e(q,Bb),e(Bb,lfe),e(lfe,V9o),e(Bb,X9o),e(Bb,GD),e(GD,z9o),e(Bb,W9o),e(q,Q9o),e(q,Ib),e(Ib,ife),e(ife,H9o),e(Ib,U9o),e(Ib,OD),e(OD,J9o),e(Ib,Y9o),e(q,K9o),e(q,qb),e(qb,dfe),e(dfe,Z9o),e(qb,exo),e(qb,VD),e(VD,oxo),e(qb,rxo),e(q,txo),e(q,Nb),e(Nb,cfe),e(cfe,axo),e(Nb,nxo),e(Nb,XD),e(XD,sxo),e(Nb,lxo),e(q,ixo),e(q,jb),e(jb,ffe),e(ffe,dxo),e(jb,cxo),e(jb,zD),e(zD,fxo),e(jb,mxo),e(q,gxo),e(q,Db),e(Db,mfe),e(mfe,hxo),e(Db,pxo),e(Db,WD),e(WD,_xo),e(Db,uxo),e(q,bxo),e(q,Gb),e(Gb,gfe),e(gfe,vxo),e(Gb,Fxo),e(Gb,QD),e(QD,Txo),e(Gb,Mxo),e(q,Exo),e(q,Ob),e(Ob,hfe),e(hfe,Cxo),e(Ob,wxo),e(Ob,HD),e(HD,Axo),e(Ob,yxo),e(q,Lxo),e(q,Vb),e(Vb,pfe),e(pfe,xxo),e(Vb,$xo),e(Vb,UD),e(UD,kxo),e(Vb,Sxo),e(q,Rxo),e(q,Xb),e(Xb,_fe),e(_fe,Pxo),e(Xb,Bxo),e(Xb,JD),e(JD,Ixo),e(Xb,qxo),e(q,Nxo),e(q,zb),e(zb,ufe),e(ufe,jxo),e(zb,Dxo),e(zb,YD),e(YD,Gxo),e(zb,Oxo),e(q,Vxo),e(q,Wb),e(Wb,bfe),e(bfe,Xxo),e(Wb,zxo),e(Wb,KD),e(KD,Wxo),e(Wb,Qxo),e(q,Hxo),e(q,Qb),e(Qb,vfe),e(vfe,Uxo),e(Qb,Jxo),e(Qb,ZD),e(ZD,Yxo),e(Qb,Kxo),e(q,Zxo),e(q,Hb),e(Hb,Ffe),e(Ffe,e$o),e(Hb,o$o),e(Hb,eG),e(eG,r$o),e(Hb,t$o),e(q,a$o),e(q,Ub),e(Ub,Tfe),e(Tfe,n$o),e(Ub,s$o),e(Ub,oG),e(oG,l$o),e(Ub,i$o),e(q,d$o),e(q,Jb),e(Jb,Mfe),e(Mfe,c$o),e(Jb,f$o),e(Jb,rG),e(rG,m$o),e(Jb,g$o),e(q,h$o),e(q,Yb),e(Yb,Efe),e(Efe,p$o),e(Yb,_$o),e(Yb,tG),e(tG,u$o),e(Yb,b$o),e(q,v$o),e(q,Kb),e(Kb,Cfe),e(Cfe,F$o),e(Kb,T$o),e(Kb,aG),e(aG,M$o),e(Kb,E$o),e(q,C$o),e(q,Zb),e(Zb,wfe),e(wfe,w$o),e(Zb,A$o),e(Zb,nG),e(nG,y$o),e(Zb,L$o),e(q,x$o),e(q,e2),e(e2,Afe),e(Afe,$$o),e(e2,k$o),e(e2,sG),e(sG,S$o),e(e2,R$o),e(q,P$o),e(q,o2),e(o2,yfe),e(yfe,B$o),e(o2,I$o),e(o2,lG),e(lG,q$o),e(o2,N$o),e(q,j$o),e(q,r2),e(r2,Lfe),e(Lfe,D$o),e(r2,G$o),e(r2,iG),e(iG,O$o),e(r2,V$o),e(q,X$o),e(q,t2),e(t2,xfe),e(xfe,z$o),e(t2,W$o),e(t2,dG),e(dG,Q$o),e(t2,H$o),e(q,U$o),e(q,a2),e(a2,$fe),e($fe,J$o),e(a2,Y$o),e(a2,cG),e(cG,K$o),e(a2,Z$o),e(q,eko),e(q,n2),e(n2,kfe),e(kfe,oko),e(n2,rko),e(n2,fG),e(fG,tko),e(n2,ako),e(q,nko),e(q,s2),e(s2,Sfe),e(Sfe,sko),e(s2,lko),e(s2,mG),e(mG,iko),e(s2,dko),e(q,cko),e(q,l2),e(l2,Rfe),e(Rfe,fko),e(l2,mko),e(l2,gG),e(gG,gko),e(l2,hko),e(q,pko),e(q,i2),e(i2,Pfe),e(Pfe,_ko),e(i2,uko),e(i2,hG),e(hG,bko),e(i2,vko),e(q,Fko),e(q,d2),e(d2,Bfe),e(Bfe,Tko),e(d2,Mko),e(d2,pG),e(pG,Eko),e(d2,Cko),e(q,wko),e(q,c2),e(c2,Ife),e(Ife,Ako),e(c2,yko),e(c2,_G),e(_G,Lko),e(c2,xko),e(q,$ko),e(q,f2),e(f2,qfe),e(qfe,kko),e(f2,Sko),e(f2,uG),e(uG,Rko),e(f2,Pko),e(q,Bko),e(q,m2),e(m2,Nfe),e(Nfe,Iko),e(m2,qko),e(m2,bG),e(bG,Nko),e(m2,jko),e(q,Dko),e(q,g2),e(g2,jfe),e(jfe,Gko),e(g2,Oko),e(g2,vG),e(vG,Vko),e(g2,Xko),e(q,zko),e(q,h2),e(h2,Dfe),e(Dfe,Wko),e(h2,Qko),e(h2,FG),e(FG,Hko),e(h2,Uko),e(q,Jko),e(q,p2),e(p2,Gfe),e(Gfe,Yko),e(p2,Kko),e(p2,TG),e(TG,Zko),e(p2,eSo),e(q,oSo),e(q,_2),e(_2,Ofe),e(Ofe,rSo),e(_2,tSo),e(_2,MG),e(MG,aSo),e(_2,nSo),e(q,sSo),e(q,u2),e(u2,Vfe),e(Vfe,lSo),e(u2,iSo),e(u2,EG),e(EG,dSo),e(u2,cSo),e(q,fSo),e(q,b2),e(b2,Xfe),e(Xfe,mSo),e(b2,gSo),e(b2,CG),e(CG,hSo),e(b2,pSo),e(q,_So),e(q,v2),e(v2,zfe),e(zfe,uSo),e(v2,bSo),e(v2,wG),e(wG,vSo),e(v2,FSo),e(q,TSo),e(q,F2),e(F2,Wfe),e(Wfe,MSo),e(F2,ESo),e(F2,AG),e(AG,CSo),e(F2,wSo),e(q,ASo),e(q,T2),e(T2,Qfe),e(Qfe,ySo),e(T2,LSo),e(T2,yG),e(yG,xSo),e(T2,$So),e(q,kSo),e(q,M2),e(M2,Hfe),e(Hfe,SSo),e(M2,RSo),e(M2,LG),e(LG,PSo),e(M2,BSo),e(q,ISo),e(q,E2),e(E2,Ufe),e(Ufe,qSo),e(E2,NSo),e(E2,xG),e(xG,jSo),e(E2,DSo),e(q,GSo),e(q,C2),e(C2,Jfe),e(Jfe,OSo),e(C2,VSo),e(C2,$G),e($G,XSo),e(C2,zSo),e(q,WSo),e(q,w2),e(w2,Yfe),e(Yfe,QSo),e(w2,HSo),e(w2,kG),e(kG,USo),e(w2,JSo),e(oo,YSo),e(oo,A2),e(A2,KSo),e(A2,Kfe),e(Kfe,ZSo),e(A2,eRo),e(A2,Zfe),e(Zfe,oRo),e(oo,rRo),M(y2,oo,null),b(f,Lqe,u),b(f,Oi,u),e(Oi,L2),e(L2,eme),M(uA,eme,null),e(Oi,tRo),e(Oi,ome),e(ome,aRo),b(f,xqe,u),b(f,Po,u),M(bA,Po,null),e(Po,nRo),e(Po,Vi),e(Vi,sRo),e(Vi,SG),e(SG,lRo),e(Vi,iRo),e(Vi,RG),e(RG,dRo),e(Vi,cRo),e(Po,fRo),e(Po,vA),e(vA,mRo),e(vA,rme),e(rme,gRo),e(vA,hRo),e(Po,pRo),e(Po,dt),M(FA,dt,null),e(dt,_Ro),e(dt,tme),e(tme,uRo),e(dt,bRo),e(dt,Xi),e(Xi,vRo),e(Xi,ame),e(ame,FRo),e(Xi,TRo),e(Xi,PG),e(PG,MRo),e(Xi,ERo),e(dt,CRo),M(x2,dt,null),e(Po,wRo),e(Po,ro),M(TA,ro,null),e(ro,ARo),e(ro,nme),e(nme,yRo),e(ro,LRo),e(ro,Pa),e(Pa,xRo),e(Pa,sme),e(sme,$Ro),e(Pa,kRo),e(Pa,lme),e(lme,SRo),e(Pa,RRo),e(Pa,ime),e(ime,PRo),e(Pa,BRo),e(ro,IRo),e(ro,Y),e(Y,$2),e($2,dme),e(dme,qRo),e($2,NRo),e($2,BG),e(BG,jRo),e($2,DRo),e(Y,GRo),e(Y,k2),e(k2,cme),e(cme,ORo),e(k2,VRo),e(k2,IG),e(IG,XRo),e(k2,zRo),e(Y,WRo),e(Y,S2),e(S2,fme),e(fme,QRo),e(S2,HRo),e(S2,qG),e(qG,URo),e(S2,JRo),e(Y,YRo),e(Y,R2),e(R2,mme),e(mme,KRo),e(R2,ZRo),e(R2,NG),e(NG,ePo),e(R2,oPo),e(Y,rPo),e(Y,P2),e(P2,gme),e(gme,tPo),e(P2,aPo),e(P2,jG),e(jG,nPo),e(P2,sPo),e(Y,lPo),e(Y,B2),e(B2,hme),e(hme,iPo),e(B2,dPo),e(B2,DG),e(DG,cPo),e(B2,fPo),e(Y,mPo),e(Y,I2),e(I2,pme),e(pme,gPo),e(I2,hPo),e(I2,GG),e(GG,pPo),e(I2,_Po),e(Y,uPo),e(Y,q2),e(q2,_me),e(_me,bPo),e(q2,vPo),e(q2,OG),e(OG,FPo),e(q2,TPo),e(Y,MPo),e(Y,N2),e(N2,ume),e(ume,EPo),e(N2,CPo),e(N2,VG),e(VG,wPo),e(N2,APo),e(Y,yPo),e(Y,j2),e(j2,bme),e(bme,LPo),e(j2,xPo),e(j2,XG),e(XG,$Po),e(j2,kPo),e(Y,SPo),e(Y,D2),e(D2,vme),e(vme,RPo),e(D2,PPo),e(D2,zG),e(zG,BPo),e(D2,IPo),e(Y,qPo),e(Y,G2),e(G2,Fme),e(Fme,NPo),e(G2,jPo),e(G2,WG),e(WG,DPo),e(G2,GPo),e(Y,OPo),e(Y,O2),e(O2,Tme),e(Tme,VPo),e(O2,XPo),e(O2,QG),e(QG,zPo),e(O2,WPo),e(Y,QPo),e(Y,V2),e(V2,Mme),e(Mme,HPo),e(V2,UPo),e(V2,HG),e(HG,JPo),e(V2,YPo),e(Y,KPo),e(Y,X2),e(X2,Eme),e(Eme,ZPo),e(X2,eBo),e(X2,UG),e(UG,oBo),e(X2,rBo),e(Y,tBo),e(Y,z2),e(z2,Cme),e(Cme,aBo),e(z2,nBo),e(z2,JG),e(JG,sBo),e(z2,lBo),e(Y,iBo),e(Y,W2),e(W2,wme),e(wme,dBo),e(W2,cBo),e(W2,YG),e(YG,fBo),e(W2,mBo),e(Y,gBo),e(Y,Q2),e(Q2,Ame),e(Ame,hBo),e(Q2,pBo),e(Q2,KG),e(KG,_Bo),e(Q2,uBo),e(Y,bBo),e(Y,H2),e(H2,yme),e(yme,vBo),e(H2,FBo),e(H2,ZG),e(ZG,TBo),e(H2,MBo),e(Y,EBo),e(Y,U2),e(U2,Lme),e(Lme,CBo),e(U2,wBo),e(U2,eO),e(eO,ABo),e(U2,yBo),e(Y,LBo),e(Y,J2),e(J2,xme),e(xme,xBo),e(J2,$Bo),e(J2,oO),e(oO,kBo),e(J2,SBo),e(Y,RBo),e(Y,Y2),e(Y2,$me),e($me,PBo),e(Y2,BBo),e(Y2,rO),e(rO,IBo),e(Y2,qBo),e(Y,NBo),e(Y,K2),e(K2,kme),e(kme,jBo),e(K2,DBo),e(K2,tO),e(tO,GBo),e(K2,OBo),e(Y,VBo),e(Y,Z2),e(Z2,Sme),e(Sme,XBo),e(Z2,zBo),e(Z2,aO),e(aO,WBo),e(Z2,QBo),e(Y,HBo),e(Y,ev),e(ev,Rme),e(Rme,UBo),e(ev,JBo),e(ev,nO),e(nO,YBo),e(ev,KBo),e(Y,ZBo),e(Y,ov),e(ov,Pme),e(Pme,eIo),e(ov,oIo),e(ov,sO),e(sO,rIo),e(ov,tIo),e(Y,aIo),e(Y,rv),e(rv,Bme),e(Bme,nIo),e(rv,sIo),e(rv,lO),e(lO,lIo),e(rv,iIo),e(Y,dIo),e(Y,tv),e(tv,Ime),e(Ime,cIo),e(tv,fIo),e(tv,iO),e(iO,mIo),e(tv,gIo),e(Y,hIo),e(Y,av),e(av,qme),e(qme,pIo),e(av,_Io),e(av,dO),e(dO,uIo),e(av,bIo),e(ro,vIo),e(ro,nv),e(nv,FIo),e(nv,Nme),e(Nme,TIo),e(nv,MIo),e(nv,jme),e(jme,EIo),e(ro,CIo),M(sv,ro,null),b(f,$qe,u),b(f,zi,u),e(zi,lv),e(lv,Dme),M(MA,Dme,null),e(zi,wIo),e(zi,Gme),e(Gme,AIo),b(f,kqe,u),b(f,Bo,u),M(EA,Bo,null),e(Bo,yIo),e(Bo,Wi),e(Wi,LIo),e(Wi,cO),e(cO,xIo),e(Wi,$Io),e(Wi,fO),e(fO,kIo),e(Wi,SIo),e(Bo,RIo),e(Bo,CA),e(CA,PIo),e(CA,Ome),e(Ome,BIo),e(CA,IIo),e(Bo,qIo),e(Bo,ct),M(wA,ct,null),e(ct,NIo),e(ct,Vme),e(Vme,jIo),e(ct,DIo),e(ct,Qi),e(Qi,GIo),e(Qi,Xme),e(Xme,OIo),e(Qi,VIo),e(Qi,mO),e(mO,XIo),e(Qi,zIo),e(ct,WIo),M(iv,ct,null),e(Bo,QIo),e(Bo,to),M(AA,to,null),e(to,HIo),e(to,zme),e(zme,UIo),e(to,JIo),e(to,Ba),e(Ba,YIo),e(Ba,Wme),e(Wme,KIo),e(Ba,ZIo),e(Ba,Qme),e(Qme,eqo),e(Ba,oqo),e(Ba,Hme),e(Hme,rqo),e(Ba,tqo),e(to,aqo),e(to,Yr),e(Yr,dv),e(dv,Ume),e(Ume,nqo),e(dv,sqo),e(dv,gO),e(gO,lqo),e(dv,iqo),e(Yr,dqo),e(Yr,cv),e(cv,Jme),e(Jme,cqo),e(cv,fqo),e(cv,hO),e(hO,mqo),e(cv,gqo),e(Yr,hqo),e(Yr,fv),e(fv,Yme),e(Yme,pqo),e(fv,_qo),e(fv,pO),e(pO,uqo),e(fv,bqo),e(Yr,vqo),e(Yr,mv),e(mv,Kme),e(Kme,Fqo),e(mv,Tqo),e(mv,_O),e(_O,Mqo),e(mv,Eqo),e(Yr,Cqo),e(Yr,gv),e(gv,Zme),e(Zme,wqo),e(gv,Aqo),e(gv,uO),e(uO,yqo),e(gv,Lqo),e(to,xqo),e(to,hv),e(hv,$qo),e(hv,ege),e(ege,kqo),e(hv,Sqo),e(hv,oge),e(oge,Rqo),e(to,Pqo),M(pv,to,null),b(f,Sqe,u),b(f,Hi,u),e(Hi,_v),e(_v,rge),M(yA,rge,null),e(Hi,Bqo),e(Hi,tge),e(tge,Iqo),b(f,Rqe,u),b(f,Io,u),M(LA,Io,null),e(Io,qqo),e(Io,Ui),e(Ui,Nqo),e(Ui,bO),e(bO,jqo),e(Ui,Dqo),e(Ui,vO),e(vO,Gqo),e(Ui,Oqo),e(Io,Vqo),e(Io,xA),e(xA,Xqo),e(xA,age),e(age,zqo),e(xA,Wqo),e(Io,Qqo),e(Io,ft),M($A,ft,null),e(ft,Hqo),e(ft,nge),e(nge,Uqo),e(ft,Jqo),e(ft,Ji),e(Ji,Yqo),e(Ji,sge),e(sge,Kqo),e(Ji,Zqo),e(Ji,FO),e(FO,eNo),e(Ji,oNo),e(ft,rNo),M(uv,ft,null),e(Io,tNo),e(Io,ao),M(kA,ao,null),e(ao,aNo),e(ao,lge),e(lge,nNo),e(ao,sNo),e(ao,Ia),e(Ia,lNo),e(Ia,ige),e(ige,iNo),e(Ia,dNo),e(Ia,dge),e(dge,cNo),e(Ia,fNo),e(Ia,cge),e(cge,mNo),e(Ia,gNo),e(ao,hNo),e(ao,U),e(U,bv),e(bv,fge),e(fge,pNo),e(bv,_No),e(bv,TO),e(TO,uNo),e(bv,bNo),e(U,vNo),e(U,vv),e(vv,mge),e(mge,FNo),e(vv,TNo),e(vv,MO),e(MO,MNo),e(vv,ENo),e(U,CNo),e(U,Fv),e(Fv,gge),e(gge,wNo),e(Fv,ANo),e(Fv,EO),e(EO,yNo),e(Fv,LNo),e(U,xNo),e(U,Tv),e(Tv,hge),e(hge,$No),e(Tv,kNo),e(Tv,CO),e(CO,SNo),e(Tv,RNo),e(U,PNo),e(U,Mv),e(Mv,pge),e(pge,BNo),e(Mv,INo),e(Mv,wO),e(wO,qNo),e(Mv,NNo),e(U,jNo),e(U,Ev),e(Ev,_ge),e(_ge,DNo),e(Ev,GNo),e(Ev,AO),e(AO,ONo),e(Ev,VNo),e(U,XNo),e(U,Cv),e(Cv,uge),e(uge,zNo),e(Cv,WNo),e(Cv,yO),e(yO,QNo),e(Cv,HNo),e(U,UNo),e(U,wv),e(wv,bge),e(bge,JNo),e(wv,YNo),e(wv,LO),e(LO,KNo),e(wv,ZNo),e(U,ejo),e(U,Av),e(Av,vge),e(vge,ojo),e(Av,rjo),e(Av,xO),e(xO,tjo),e(Av,ajo),e(U,njo),e(U,yv),e(yv,Fge),e(Fge,sjo),e(yv,ljo),e(yv,$O),e($O,ijo),e(yv,djo),e(U,cjo),e(U,Lv),e(Lv,Tge),e(Tge,fjo),e(Lv,mjo),e(Lv,kO),e(kO,gjo),e(Lv,hjo),e(U,pjo),e(U,xv),e(xv,Mge),e(Mge,_jo),e(xv,ujo),e(xv,SO),e(SO,bjo),e(xv,vjo),e(U,Fjo),e(U,$v),e($v,Ege),e(Ege,Tjo),e($v,Mjo),e($v,RO),e(RO,Ejo),e($v,Cjo),e(U,wjo),e(U,kv),e(kv,Cge),e(Cge,Ajo),e(kv,yjo),e(kv,PO),e(PO,Ljo),e(kv,xjo),e(U,$jo),e(U,Sv),e(Sv,wge),e(wge,kjo),e(Sv,Sjo),e(Sv,BO),e(BO,Rjo),e(Sv,Pjo),e(U,Bjo),e(U,Rv),e(Rv,Age),e(Age,Ijo),e(Rv,qjo),e(Rv,IO),e(IO,Njo),e(Rv,jjo),e(U,Djo),e(U,Pv),e(Pv,yge),e(yge,Gjo),e(Pv,Ojo),e(Pv,qO),e(qO,Vjo),e(Pv,Xjo),e(U,zjo),e(U,Bv),e(Bv,Lge),e(Lge,Wjo),e(Bv,Qjo),e(Bv,NO),e(NO,Hjo),e(Bv,Ujo),e(U,Jjo),e(U,Iv),e(Iv,xge),e(xge,Yjo),e(Iv,Kjo),e(Iv,jO),e(jO,Zjo),e(Iv,eDo),e(U,oDo),e(U,qv),e(qv,$ge),e($ge,rDo),e(qv,tDo),e(qv,DO),e(DO,aDo),e(qv,nDo),e(U,sDo),e(U,Nv),e(Nv,kge),e(kge,lDo),e(Nv,iDo),e(Nv,GO),e(GO,dDo),e(Nv,cDo),e(U,fDo),e(U,jv),e(jv,Sge),e(Sge,mDo),e(jv,gDo),e(jv,OO),e(OO,hDo),e(jv,pDo),e(U,_Do),e(U,Dv),e(Dv,Rge),e(Rge,uDo),e(Dv,bDo),e(Dv,VO),e(VO,vDo),e(Dv,FDo),e(U,TDo),e(U,Gv),e(Gv,Pge),e(Pge,MDo),e(Gv,EDo),e(Gv,XO),e(XO,CDo),e(Gv,wDo),e(U,ADo),e(U,Ov),e(Ov,Bge),e(Bge,yDo),e(Ov,LDo),e(Ov,zO),e(zO,xDo),e(Ov,$Do),e(U,kDo),e(U,Vv),e(Vv,Ige),e(Ige,SDo),e(Vv,RDo),e(Vv,WO),e(WO,PDo),e(Vv,BDo),e(U,IDo),e(U,Xv),e(Xv,qge),e(qge,qDo),e(Xv,NDo),e(Xv,QO),e(QO,jDo),e(Xv,DDo),e(U,GDo),e(U,zv),e(zv,Nge),e(Nge,ODo),e(zv,VDo),e(zv,HO),e(HO,XDo),e(zv,zDo),e(U,WDo),e(U,Wv),e(Wv,jge),e(jge,QDo),e(Wv,HDo),e(Wv,UO),e(UO,UDo),e(Wv,JDo),e(U,YDo),e(U,Qv),e(Qv,Dge),e(Dge,KDo),e(Qv,ZDo),e(Qv,JO),e(JO,eGo),e(Qv,oGo),e(U,rGo),e(U,Hv),e(Hv,Gge),e(Gge,tGo),e(Hv,aGo),e(Hv,YO),e(YO,nGo),e(Hv,sGo),e(U,lGo),e(U,Uv),e(Uv,Oge),e(Oge,iGo),e(Uv,dGo),e(Uv,KO),e(KO,cGo),e(Uv,fGo),e(U,mGo),e(U,Jv),e(Jv,Vge),e(Vge,gGo),e(Jv,hGo),e(Jv,ZO),e(ZO,pGo),e(Jv,_Go),e(ao,uGo),e(ao,Yv),e(Yv,bGo),e(Yv,Xge),e(Xge,vGo),e(Yv,FGo),e(Yv,zge),e(zge,TGo),e(ao,MGo),M(Kv,ao,null),b(f,Pqe,u),b(f,Yi,u),e(Yi,Zv),e(Zv,Wge),M(SA,Wge,null),e(Yi,EGo),e(Yi,Qge),e(Qge,CGo),b(f,Bqe,u),b(f,qo,u),M(RA,qo,null),e(qo,wGo),e(qo,Ki),e(Ki,AGo),e(Ki,eV),e(eV,yGo),e(Ki,LGo),e(Ki,oV),e(oV,xGo),e(Ki,$Go),e(qo,kGo),e(qo,PA),e(PA,SGo),e(PA,Hge),e(Hge,RGo),e(PA,PGo),e(qo,BGo),e(qo,mt),M(BA,mt,null),e(mt,IGo),e(mt,Uge),e(Uge,qGo),e(mt,NGo),e(mt,Zi),e(Zi,jGo),e(Zi,Jge),e(Jge,DGo),e(Zi,GGo),e(Zi,rV),e(rV,OGo),e(Zi,VGo),e(mt,XGo),M(eF,mt,null),e(qo,zGo),e(qo,no),M(IA,no,null),e(no,WGo),e(no,Yge),e(Yge,QGo),e(no,HGo),e(no,qa),e(qa,UGo),e(qa,Kge),e(Kge,JGo),e(qa,YGo),e(qa,Zge),e(Zge,KGo),e(qa,ZGo),e(qa,ehe),e(ehe,eOo),e(qa,oOo),e(no,rOo),e(no,V),e(V,oF),e(oF,ohe),e(ohe,tOo),e(oF,aOo),e(oF,tV),e(tV,nOo),e(oF,sOo),e(V,lOo),e(V,rF),e(rF,rhe),e(rhe,iOo),e(rF,dOo),e(rF,aV),e(aV,cOo),e(rF,fOo),e(V,mOo),e(V,tF),e(tF,the),e(the,gOo),e(tF,hOo),e(tF,nV),e(nV,pOo),e(tF,_Oo),e(V,uOo),e(V,aF),e(aF,ahe),e(ahe,bOo),e(aF,vOo),e(aF,sV),e(sV,FOo),e(aF,TOo),e(V,MOo),e(V,nF),e(nF,nhe),e(nhe,EOo),e(nF,COo),e(nF,lV),e(lV,wOo),e(nF,AOo),e(V,yOo),e(V,sF),e(sF,she),e(she,LOo),e(sF,xOo),e(sF,iV),e(iV,$Oo),e(sF,kOo),e(V,SOo),e(V,lF),e(lF,lhe),e(lhe,ROo),e(lF,POo),e(lF,dV),e(dV,BOo),e(lF,IOo),e(V,qOo),e(V,iF),e(iF,ihe),e(ihe,NOo),e(iF,jOo),e(iF,cV),e(cV,DOo),e(iF,GOo),e(V,OOo),e(V,dF),e(dF,dhe),e(dhe,VOo),e(dF,XOo),e(dF,fV),e(fV,zOo),e(dF,WOo),e(V,QOo),e(V,cF),e(cF,che),e(che,HOo),e(cF,UOo),e(cF,mV),e(mV,JOo),e(cF,YOo),e(V,KOo),e(V,fF),e(fF,fhe),e(fhe,ZOo),e(fF,eVo),e(fF,gV),e(gV,oVo),e(fF,rVo),e(V,tVo),e(V,mF),e(mF,mhe),e(mhe,aVo),e(mF,nVo),e(mF,hV),e(hV,sVo),e(mF,lVo),e(V,iVo),e(V,gF),e(gF,ghe),e(ghe,dVo),e(gF,cVo),e(gF,pV),e(pV,fVo),e(gF,mVo),e(V,gVo),e(V,hF),e(hF,hhe),e(hhe,hVo),e(hF,pVo),e(hF,_V),e(_V,_Vo),e(hF,uVo),e(V,bVo),e(V,pF),e(pF,phe),e(phe,vVo),e(pF,FVo),e(pF,uV),e(uV,TVo),e(pF,MVo),e(V,EVo),e(V,_F),e(_F,_he),e(_he,CVo),e(_F,wVo),e(_F,bV),e(bV,AVo),e(_F,yVo),e(V,LVo),e(V,uF),e(uF,uhe),e(uhe,xVo),e(uF,$Vo),e(uF,vV),e(vV,kVo),e(uF,SVo),e(V,RVo),e(V,bF),e(bF,bhe),e(bhe,PVo),e(bF,BVo),e(bF,FV),e(FV,IVo),e(bF,qVo),e(V,NVo),e(V,vF),e(vF,vhe),e(vhe,jVo),e(vF,DVo),e(vF,TV),e(TV,GVo),e(vF,OVo),e(V,VVo),e(V,FF),e(FF,Fhe),e(Fhe,XVo),e(FF,zVo),e(FF,MV),e(MV,WVo),e(FF,QVo),e(V,HVo),e(V,TF),e(TF,The),e(The,UVo),e(TF,JVo),e(TF,EV),e(EV,YVo),e(TF,KVo),e(V,ZVo),e(V,MF),e(MF,Mhe),e(Mhe,eXo),e(MF,oXo),e(MF,CV),e(CV,rXo),e(MF,tXo),e(V,aXo),e(V,EF),e(EF,Ehe),e(Ehe,nXo),e(EF,sXo),e(EF,wV),e(wV,lXo),e(EF,iXo),e(V,dXo),e(V,CF),e(CF,Che),e(Che,cXo),e(CF,fXo),e(CF,AV),e(AV,mXo),e(CF,gXo),e(V,hXo),e(V,wF),e(wF,whe),e(whe,pXo),e(wF,_Xo),e(wF,yV),e(yV,uXo),e(wF,bXo),e(V,vXo),e(V,AF),e(AF,Ahe),e(Ahe,FXo),e(AF,TXo),e(AF,LV),e(LV,MXo),e(AF,EXo),e(V,CXo),e(V,yF),e(yF,yhe),e(yhe,wXo),e(yF,AXo),e(yF,xV),e(xV,yXo),e(yF,LXo),e(V,xXo),e(V,LF),e(LF,Lhe),e(Lhe,$Xo),e(LF,kXo),e(LF,$V),e($V,SXo),e(LF,RXo),e(V,PXo),e(V,xF),e(xF,xhe),e(xhe,BXo),e(xF,IXo),e(xF,kV),e(kV,qXo),e(xF,NXo),e(V,jXo),e(V,$F),e($F,$he),e($he,DXo),e($F,GXo),e($F,SV),e(SV,OXo),e($F,VXo),e(V,XXo),e(V,kF),e(kF,khe),e(khe,zXo),e(kF,WXo),e(kF,RV),e(RV,QXo),e(kF,HXo),e(V,UXo),e(V,SF),e(SF,She),e(She,JXo),e(SF,YXo),e(SF,PV),e(PV,KXo),e(SF,ZXo),e(V,ezo),e(V,RF),e(RF,Rhe),e(Rhe,ozo),e(RF,rzo),e(RF,BV),e(BV,tzo),e(RF,azo),e(V,nzo),e(V,PF),e(PF,Phe),e(Phe,szo),e(PF,lzo),e(PF,IV),e(IV,izo),e(PF,dzo),e(V,czo),e(V,BF),e(BF,Bhe),e(Bhe,fzo),e(BF,mzo),e(BF,qV),e(qV,gzo),e(BF,hzo),e(V,pzo),e(V,IF),e(IF,Ihe),e(Ihe,_zo),e(IF,uzo),e(IF,NV),e(NV,bzo),e(IF,vzo),e(V,Fzo),e(V,qF),e(qF,qhe),e(qhe,Tzo),e(qF,Mzo),e(qF,jV),e(jV,Ezo),e(qF,Czo),e(V,wzo),e(V,NF),e(NF,Nhe),e(Nhe,Azo),e(NF,yzo),e(NF,DV),e(DV,Lzo),e(NF,xzo),e(V,$zo),e(V,jF),e(jF,jhe),e(jhe,kzo),e(jF,Szo),e(jF,GV),e(GV,Rzo),e(jF,Pzo),e(no,Bzo),e(no,DF),e(DF,Izo),e(DF,Dhe),e(Dhe,qzo),e(DF,Nzo),e(DF,Ghe),e(Ghe,jzo),e(no,Dzo),M(GF,no,null),b(f,Iqe,u),b(f,ed,u),e(ed,OF),e(OF,Ohe),M(qA,Ohe,null),e(ed,Gzo),e(ed,Vhe),e(Vhe,Ozo),b(f,qqe,u),b(f,No,u),M(NA,No,null),e(No,Vzo),e(No,od),e(od,Xzo),e(od,OV),e(OV,zzo),e(od,Wzo),e(od,VV),e(VV,Qzo),e(od,Hzo),e(No,Uzo),e(No,jA),e(jA,Jzo),e(jA,Xhe),e(Xhe,Yzo),e(jA,Kzo),e(No,Zzo),e(No,gt),M(DA,gt,null),e(gt,eWo),e(gt,zhe),e(zhe,oWo),e(gt,rWo),e(gt,rd),e(rd,tWo),e(rd,Whe),e(Whe,aWo),e(rd,nWo),e(rd,XV),e(XV,sWo),e(rd,lWo),e(gt,iWo),M(VF,gt,null),e(No,dWo),e(No,so),M(GA,so,null),e(so,cWo),e(so,Qhe),e(Qhe,fWo),e(so,mWo),e(so,Na),e(Na,gWo),e(Na,Hhe),e(Hhe,hWo),e(Na,pWo),e(Na,Uhe),e(Uhe,_Wo),e(Na,uWo),e(Na,Jhe),e(Jhe,bWo),e(Na,vWo),e(so,FWo),e(so,Yhe),e(Yhe,XF),e(XF,Khe),e(Khe,TWo),e(XF,MWo),e(XF,zV),e(zV,EWo),e(XF,CWo),e(so,wWo),e(so,zF),e(zF,AWo),e(zF,Zhe),e(Zhe,yWo),e(zF,LWo),e(zF,epe),e(epe,xWo),e(so,$Wo),M(WF,so,null),b(f,Nqe,u),b(f,td,u),e(td,QF),e(QF,ope),M(OA,ope,null),e(td,kWo),e(td,rpe),e(rpe,SWo),b(f,jqe,u),b(f,jo,u),M(VA,jo,null),e(jo,RWo),e(jo,ad),e(ad,PWo),e(ad,WV),e(WV,BWo),e(ad,IWo),e(ad,QV),e(QV,qWo),e(ad,NWo),e(jo,jWo),e(jo,XA),e(XA,DWo),e(XA,tpe),e(tpe,GWo),e(XA,OWo),e(jo,VWo),e(jo,ht),M(zA,ht,null),e(ht,XWo),e(ht,ape),e(ape,zWo),e(ht,WWo),e(ht,nd),e(nd,QWo),e(nd,npe),e(npe,HWo),e(nd,UWo),e(nd,HV),e(HV,JWo),e(nd,YWo),e(ht,KWo),M(HF,ht,null),e(jo,ZWo),e(jo,lo),M(WA,lo,null),e(lo,eQo),e(lo,spe),e(spe,oQo),e(lo,rQo),e(lo,ja),e(ja,tQo),e(ja,lpe),e(lpe,aQo),e(ja,nQo),e(ja,ipe),e(ipe,sQo),e(ja,lQo),e(ja,dpe),e(dpe,iQo),e(ja,dQo),e(lo,cQo),e(lo,Fe),e(Fe,UF),e(UF,cpe),e(cpe,fQo),e(UF,mQo),e(UF,UV),e(UV,gQo),e(UF,hQo),e(Fe,pQo),e(Fe,JF),e(JF,fpe),e(fpe,_Qo),e(JF,uQo),e(JF,JV),e(JV,bQo),e(JF,vQo),e(Fe,FQo),e(Fe,YF),e(YF,mpe),e(mpe,TQo),e(YF,MQo),e(YF,YV),e(YV,EQo),e(YF,CQo),e(Fe,wQo),e(Fe,KF),e(KF,gpe),e(gpe,AQo),e(KF,yQo),e(KF,KV),e(KV,LQo),e(KF,xQo),e(Fe,$Qo),e(Fe,Ps),e(Ps,hpe),e(hpe,kQo),e(Ps,SQo),e(Ps,ZV),e(ZV,RQo),e(Ps,PQo),e(Ps,eX),e(eX,BQo),e(Ps,IQo),e(Fe,qQo),e(Fe,ZF),e(ZF,ppe),e(ppe,NQo),e(ZF,jQo),e(ZF,oX),e(oX,DQo),e(ZF,GQo),e(Fe,OQo),e(Fe,pt),e(pt,_pe),e(_pe,VQo),e(pt,XQo),e(pt,rX),e(rX,zQo),e(pt,WQo),e(pt,tX),e(tX,QQo),e(pt,HQo),e(pt,aX),e(aX,UQo),e(pt,JQo),e(Fe,YQo),e(Fe,e6),e(e6,upe),e(upe,KQo),e(e6,ZQo),e(e6,nX),e(nX,eHo),e(e6,oHo),e(Fe,rHo),e(Fe,o6),e(o6,bpe),e(bpe,tHo),e(o6,aHo),e(o6,sX),e(sX,nHo),e(o6,sHo),e(Fe,lHo),e(Fe,r6),e(r6,vpe),e(vpe,iHo),e(r6,dHo),e(r6,lX),e(lX,cHo),e(r6,fHo),e(Fe,mHo),e(Fe,t6),e(t6,Fpe),e(Fpe,gHo),e(t6,hHo),e(t6,iX),e(iX,pHo),e(t6,_Ho),e(Fe,uHo),e(Fe,a6),e(a6,Tpe),e(Tpe,bHo),e(a6,vHo),e(a6,dX),e(dX,FHo),e(a6,THo),e(Fe,MHo),e(Fe,n6),e(n6,Mpe),e(Mpe,EHo),e(n6,CHo),e(n6,cX),e(cX,wHo),e(n6,AHo),e(Fe,yHo),e(Fe,s6),e(s6,Epe),e(Epe,LHo),e(s6,xHo),e(s6,fX),e(fX,$Ho),e(s6,kHo),e(lo,SHo),e(lo,l6),e(l6,RHo),e(l6,Cpe),e(Cpe,PHo),e(l6,BHo),e(l6,wpe),e(wpe,IHo),e(lo,qHo),M(i6,lo,null),b(f,Dqe,u),b(f,sd,u),e(sd,d6),e(d6,Ape),M(QA,Ape,null),e(sd,NHo),e(sd,ype),e(ype,jHo),b(f,Gqe,u),b(f,Do,u),M(HA,Do,null),e(Do,DHo),e(Do,ld),e(ld,GHo),e(ld,mX),e(mX,OHo),e(ld,VHo),e(ld,gX),e(gX,XHo),e(ld,zHo),e(Do,WHo),e(Do,UA),e(UA,QHo),e(UA,Lpe),e(Lpe,HHo),e(UA,UHo),e(Do,JHo),e(Do,_t),M(JA,_t,null),e(_t,YHo),e(_t,xpe),e(xpe,KHo),e(_t,ZHo),e(_t,id),e(id,eUo),e(id,$pe),e($pe,oUo),e(id,rUo),e(id,hX),e(hX,tUo),e(id,aUo),e(_t,nUo),M(c6,_t,null),e(Do,sUo),e(Do,io),M(YA,io,null),e(io,lUo),e(io,kpe),e(kpe,iUo),e(io,dUo),e(io,Da),e(Da,cUo),e(Da,Spe),e(Spe,fUo),e(Da,mUo),e(Da,Rpe),e(Rpe,gUo),e(Da,hUo),e(Da,Ppe),e(Ppe,pUo),e(Da,_Uo),e(io,uUo),e(io,Bpe),e(Bpe,f6),e(f6,Ipe),e(Ipe,bUo),e(f6,vUo),e(f6,pX),e(pX,FUo),e(f6,TUo),e(io,MUo),e(io,m6),e(m6,EUo),e(m6,qpe),e(qpe,CUo),e(m6,wUo),e(m6,Npe),e(Npe,AUo),e(io,yUo),M(g6,io,null),b(f,Oqe,u),b(f,dd,u),e(dd,h6),e(h6,jpe),M(KA,jpe,null),e(dd,LUo),e(dd,Dpe),e(Dpe,xUo),b(f,Vqe,u),b(f,Go,u),M(ZA,Go,null),e(Go,$Uo),e(Go,cd),e(cd,kUo),e(cd,_X),e(_X,SUo),e(cd,RUo),e(cd,uX),e(uX,PUo),e(cd,BUo),e(Go,IUo),e(Go,ey),e(ey,qUo),e(ey,Gpe),e(Gpe,NUo),e(ey,jUo),e(Go,DUo),e(Go,ut),M(oy,ut,null),e(ut,GUo),e(ut,Ope),e(Ope,OUo),e(ut,VUo),e(ut,fd),e(fd,XUo),e(fd,Vpe),e(Vpe,zUo),e(fd,WUo),e(fd,bX),e(bX,QUo),e(fd,HUo),e(ut,UUo),M(p6,ut,null),e(Go,JUo),e(Go,co),M(ry,co,null),e(co,YUo),e(co,Xpe),e(Xpe,KUo),e(co,ZUo),e(co,Ga),e(Ga,eJo),e(Ga,zpe),e(zpe,oJo),e(Ga,rJo),e(Ga,Wpe),e(Wpe,tJo),e(Ga,aJo),e(Ga,Qpe),e(Qpe,nJo),e(Ga,sJo),e(co,lJo),e(co,ke),e(ke,_6),e(_6,Hpe),e(Hpe,iJo),e(_6,dJo),e(_6,vX),e(vX,cJo),e(_6,fJo),e(ke,mJo),e(ke,u6),e(u6,Upe),e(Upe,gJo),e(u6,hJo),e(u6,FX),e(FX,pJo),e(u6,_Jo),e(ke,uJo),e(ke,b6),e(b6,Jpe),e(Jpe,bJo),e(b6,vJo),e(b6,TX),e(TX,FJo),e(b6,TJo),e(ke,MJo),e(ke,v6),e(v6,Ype),e(Ype,EJo),e(v6,CJo),e(v6,MX),e(MX,wJo),e(v6,AJo),e(ke,yJo),e(ke,F6),e(F6,Kpe),e(Kpe,LJo),e(F6,xJo),e(F6,EX),e(EX,$Jo),e(F6,kJo),e(ke,SJo),e(ke,T6),e(T6,Zpe),e(Zpe,RJo),e(T6,PJo),e(T6,CX),e(CX,BJo),e(T6,IJo),e(ke,qJo),e(ke,M6),e(M6,e_e),e(e_e,NJo),e(M6,jJo),e(M6,wX),e(wX,DJo),e(M6,GJo),e(ke,OJo),e(ke,E6),e(E6,o_e),e(o_e,VJo),e(E6,XJo),e(E6,AX),e(AX,zJo),e(E6,WJo),e(ke,QJo),e(ke,C6),e(C6,r_e),e(r_e,HJo),e(C6,UJo),e(C6,yX),e(yX,JJo),e(C6,YJo),e(co,KJo),e(co,w6),e(w6,ZJo),e(w6,t_e),e(t_e,eYo),e(w6,oYo),e(w6,a_e),e(a_e,rYo),e(co,tYo),M(A6,co,null),b(f,Xqe,u),b(f,md,u),e(md,y6),e(y6,n_e),M(ty,n_e,null),e(md,aYo),e(md,s_e),e(s_e,nYo),b(f,zqe,u),b(f,Oo,u),M(ay,Oo,null),e(Oo,sYo),e(Oo,gd),e(gd,lYo),e(gd,LX),e(LX,iYo),e(gd,dYo),e(gd,xX),e(xX,cYo),e(gd,fYo),e(Oo,mYo),e(Oo,ny),e(ny,gYo),e(ny,l_e),e(l_e,hYo),e(ny,pYo),e(Oo,_Yo),e(Oo,bt),M(sy,bt,null),e(bt,uYo),e(bt,i_e),e(i_e,bYo),e(bt,vYo),e(bt,hd),e(hd,FYo),e(hd,d_e),e(d_e,TYo),e(hd,MYo),e(hd,$X),e($X,EYo),e(hd,CYo),e(bt,wYo),M(L6,bt,null),e(Oo,AYo),e(Oo,fo),M(ly,fo,null),e(fo,yYo),e(fo,c_e),e(c_e,LYo),e(fo,xYo),e(fo,Oa),e(Oa,$Yo),e(Oa,f_e),e(f_e,kYo),e(Oa,SYo),e(Oa,m_e),e(m_e,RYo),e(Oa,PYo),e(Oa,g_e),e(g_e,BYo),e(Oa,IYo),e(fo,qYo),e(fo,Kr),e(Kr,x6),e(x6,h_e),e(h_e,NYo),e(x6,jYo),e(x6,kX),e(kX,DYo),e(x6,GYo),e(Kr,OYo),e(Kr,$6),e($6,p_e),e(p_e,VYo),e($6,XYo),e($6,SX),e(SX,zYo),e($6,WYo),e(Kr,QYo),e(Kr,k6),e(k6,__e),e(__e,HYo),e(k6,UYo),e(k6,RX),e(RX,JYo),e(k6,YYo),e(Kr,KYo),e(Kr,S6),e(S6,u_e),e(u_e,ZYo),e(S6,eKo),e(S6,PX),e(PX,oKo),e(S6,rKo),e(Kr,tKo),e(Kr,R6),e(R6,b_e),e(b_e,aKo),e(R6,nKo),e(R6,BX),e(BX,sKo),e(R6,lKo),e(fo,iKo),e(fo,P6),e(P6,dKo),e(P6,v_e),e(v_e,cKo),e(P6,fKo),e(P6,F_e),e(F_e,mKo),e(fo,gKo),M(B6,fo,null),b(f,Wqe,u),b(f,pd,u),e(pd,I6),e(I6,T_e),M(iy,T_e,null),e(pd,hKo),e(pd,M_e),e(M_e,pKo),b(f,Qqe,u),b(f,Vo,u),M(dy,Vo,null),e(Vo,_Ko),e(Vo,_d),e(_d,uKo),e(_d,IX),e(IX,bKo),e(_d,vKo),e(_d,qX),e(qX,FKo),e(_d,TKo),e(Vo,MKo),e(Vo,cy),e(cy,EKo),e(cy,E_e),e(E_e,CKo),e(cy,wKo),e(Vo,AKo),e(Vo,vt),M(fy,vt,null),e(vt,yKo),e(vt,C_e),e(C_e,LKo),e(vt,xKo),e(vt,ud),e(ud,$Ko),e(ud,w_e),e(w_e,kKo),e(ud,SKo),e(ud,NX),e(NX,RKo),e(ud,PKo),e(vt,BKo),M(q6,vt,null),e(Vo,IKo),e(Vo,mo),M(my,mo,null),e(mo,qKo),e(mo,A_e),e(A_e,NKo),e(mo,jKo),e(mo,Va),e(Va,DKo),e(Va,y_e),e(y_e,GKo),e(Va,OKo),e(Va,L_e),e(L_e,VKo),e(Va,XKo),e(Va,x_e),e(x_e,zKo),e(Va,WKo),e(mo,QKo),e(mo,Se),e(Se,N6),e(N6,$_e),e($_e,HKo),e(N6,UKo),e(N6,jX),e(jX,JKo),e(N6,YKo),e(Se,KKo),e(Se,j6),e(j6,k_e),e(k_e,ZKo),e(j6,eZo),e(j6,DX),e(DX,oZo),e(j6,rZo),e(Se,tZo),e(Se,D6),e(D6,S_e),e(S_e,aZo),e(D6,nZo),e(D6,GX),e(GX,sZo),e(D6,lZo),e(Se,iZo),e(Se,G6),e(G6,R_e),e(R_e,dZo),e(G6,cZo),e(G6,OX),e(OX,fZo),e(G6,mZo),e(Se,gZo),e(Se,O6),e(O6,P_e),e(P_e,hZo),e(O6,pZo),e(O6,VX),e(VX,_Zo),e(O6,uZo),e(Se,bZo),e(Se,V6),e(V6,B_e),e(B_e,vZo),e(V6,FZo),e(V6,XX),e(XX,TZo),e(V6,MZo),e(Se,EZo),e(Se,X6),e(X6,I_e),e(I_e,CZo),e(X6,wZo),e(X6,zX),e(zX,AZo),e(X6,yZo),e(Se,LZo),e(Se,z6),e(z6,q_e),e(q_e,xZo),e(z6,$Zo),e(z6,WX),e(WX,kZo),e(z6,SZo),e(Se,RZo),e(Se,W6),e(W6,N_e),e(N_e,PZo),e(W6,BZo),e(W6,QX),e(QX,IZo),e(W6,qZo),e(mo,NZo),e(mo,Q6),e(Q6,jZo),e(Q6,j_e),e(j_e,DZo),e(Q6,GZo),e(Q6,D_e),e(D_e,OZo),e(mo,VZo),M(H6,mo,null),b(f,Hqe,u),b(f,bd,u),e(bd,U6),e(U6,G_e),M(gy,G_e,null),e(bd,XZo),e(bd,O_e),e(O_e,zZo),b(f,Uqe,u),b(f,Xo,u),M(hy,Xo,null),e(Xo,WZo),e(Xo,vd),e(vd,QZo),e(vd,HX),e(HX,HZo),e(vd,UZo),e(vd,UX),e(UX,JZo),e(vd,YZo),e(Xo,KZo),e(Xo,py),e(py,ZZo),e(py,V_e),e(V_e,eer),e(py,oer),e(Xo,rer),e(Xo,Ft),M(_y,Ft,null),e(Ft,ter),e(Ft,X_e),e(X_e,aer),e(Ft,ner),e(Ft,Fd),e(Fd,ser),e(Fd,z_e),e(z_e,ler),e(Fd,ier),e(Fd,JX),e(JX,der),e(Fd,cer),e(Ft,fer),M(J6,Ft,null),e(Xo,mer),e(Xo,go),M(uy,go,null),e(go,ger),e(go,W_e),e(W_e,her),e(go,per),e(go,Xa),e(Xa,_er),e(Xa,Q_e),e(Q_e,uer),e(Xa,ber),e(Xa,H_e),e(H_e,ver),e(Xa,Fer),e(Xa,U_e),e(U_e,Ter),e(Xa,Mer),e(go,Eer),e(go,by),e(by,Y6),e(Y6,J_e),e(J_e,Cer),e(Y6,wer),e(Y6,YX),e(YX,Aer),e(Y6,yer),e(by,Ler),e(by,K6),e(K6,Y_e),e(Y_e,xer),e(K6,$er),e(K6,KX),e(KX,ker),e(K6,Ser),e(go,Rer),e(go,Z6),e(Z6,Per),e(Z6,K_e),e(K_e,Ber),e(Z6,Ier),e(Z6,Z_e),e(Z_e,qer),e(go,Ner),M(eT,go,null),b(f,Jqe,u),b(f,Td,u),e(Td,oT),e(oT,eue),M(vy,eue,null),e(Td,jer),e(Td,oue),e(oue,Der),b(f,Yqe,u),b(f,zo,u),M(Fy,zo,null),e(zo,Ger),e(zo,Md),e(Md,Oer),e(Md,ZX),e(ZX,Ver),e(Md,Xer),e(Md,ez),e(ez,zer),e(Md,Wer),e(zo,Qer),e(zo,Ty),e(Ty,Her),e(Ty,rue),e(rue,Uer),e(Ty,Jer),e(zo,Yer),e(zo,Tt),M(My,Tt,null),e(Tt,Ker),e(Tt,tue),e(tue,Zer),e(Tt,eor),e(Tt,Ed),e(Ed,oor),e(Ed,aue),e(aue,ror),e(Ed,tor),e(Ed,oz),e(oz,aor),e(Ed,nor),e(Tt,sor),M(rT,Tt,null),e(zo,lor),e(zo,ho),M(Ey,ho,null),e(ho,ior),e(ho,nue),e(nue,dor),e(ho,cor),e(ho,za),e(za,mor),e(za,sue),e(sue,gor),e(za,hor),e(za,lue),e(lue,por),e(za,_or),e(za,iue),e(iue,uor),e(za,bor),e(ho,vor),e(ho,Zr),e(Zr,tT),e(tT,due),e(due,For),e(tT,Tor),e(tT,rz),e(rz,Mor),e(tT,Eor),e(Zr,Cor),e(Zr,aT),e(aT,cue),e(cue,wor),e(aT,Aor),e(aT,tz),e(tz,yor),e(aT,Lor),e(Zr,xor),e(Zr,nT),e(nT,fue),e(fue,$or),e(nT,kor),e(nT,az),e(az,Sor),e(nT,Ror),e(Zr,Por),e(Zr,sT),e(sT,mue),e(mue,Bor),e(sT,Ior),e(sT,nz),e(nz,qor),e(sT,Nor),e(Zr,jor),e(Zr,lT),e(lT,gue),e(gue,Dor),e(lT,Gor),e(lT,sz),e(sz,Oor),e(lT,Vor),e(ho,Xor),e(ho,iT),e(iT,zor),e(iT,hue),e(hue,Wor),e(iT,Qor),e(iT,pue),e(pue,Hor),e(ho,Uor),M(dT,ho,null),b(f,Kqe,u),b(f,Cd,u),e(Cd,cT),e(cT,_ue),M(Cy,_ue,null),e(Cd,Jor),e(Cd,uue),e(uue,Yor),b(f,Zqe,u),b(f,Wo,u),M(wy,Wo,null),e(Wo,Kor),e(Wo,wd),e(wd,Zor),e(wd,lz),e(lz,err),e(wd,orr),e(wd,iz),e(iz,rrr),e(wd,trr),e(Wo,arr),e(Wo,Ay),e(Ay,nrr),e(Ay,bue),e(bue,srr),e(Ay,lrr),e(Wo,irr),e(Wo,Mt),M(yy,Mt,null),e(Mt,drr),e(Mt,vue),e(vue,crr),e(Mt,frr),e(Mt,Ad),e(Ad,mrr),e(Ad,Fue),e(Fue,grr),e(Ad,hrr),e(Ad,dz),e(dz,prr),e(Ad,_rr),e(Mt,urr),M(fT,Mt,null),e(Wo,brr),e(Wo,po),M(Ly,po,null),e(po,vrr),e(po,Tue),e(Tue,Frr),e(po,Trr),e(po,Wa),e(Wa,Mrr),e(Wa,Mue),e(Mue,Err),e(Wa,Crr),e(Wa,Eue),e(Eue,wrr),e(Wa,Arr),e(Wa,Cue),e(Cue,yrr),e(Wa,Lrr),e(po,xrr),e(po,yd),e(yd,mT),e(mT,wue),e(wue,$rr),e(mT,krr),e(mT,cz),e(cz,Srr),e(mT,Rrr),e(yd,Prr),e(yd,gT),e(gT,Aue),e(Aue,Brr),e(gT,Irr),e(gT,fz),e(fz,qrr),e(gT,Nrr),e(yd,jrr),e(yd,hT),e(hT,yue),e(yue,Drr),e(hT,Grr),e(hT,mz),e(mz,Orr),e(hT,Vrr),e(po,Xrr),e(po,pT),e(pT,zrr),e(pT,Lue),e(Lue,Wrr),e(pT,Qrr),e(pT,xue),e(xue,Hrr),e(po,Urr),M(_T,po,null),b(f,eNe,u),b(f,Ld,u),e(Ld,uT),e(uT,$ue),M(xy,$ue,null),e(Ld,Jrr),e(Ld,kue),e(kue,Yrr),b(f,oNe,u),b(f,Qo,u),M($y,Qo,null),e(Qo,Krr),e(Qo,xd),e(xd,Zrr),e(xd,gz),e(gz,etr),e(xd,otr),e(xd,hz),e(hz,rtr),e(xd,ttr),e(Qo,atr),e(Qo,ky),e(ky,ntr),e(ky,Sue),e(Sue,str),e(ky,ltr),e(Qo,itr),e(Qo,Et),M(Sy,Et,null),e(Et,dtr),e(Et,Rue),e(Rue,ctr),e(Et,ftr),e(Et,$d),e($d,mtr),e($d,Pue),e(Pue,gtr),e($d,htr),e($d,pz),e(pz,ptr),e($d,_tr),e(Et,utr),M(bT,Et,null),e(Qo,btr),e(Qo,_o),M(Ry,_o,null),e(_o,vtr),e(_o,Bue),e(Bue,Ftr),e(_o,Ttr),e(_o,Qa),e(Qa,Mtr),e(Qa,Iue),e(Iue,Etr),e(Qa,Ctr),e(Qa,que),e(que,wtr),e(Qa,Atr),e(Qa,Nue),e(Nue,ytr),e(Qa,Ltr),e(_o,xtr),e(_o,Py),e(Py,vT),e(vT,jue),e(jue,$tr),e(vT,ktr),e(vT,_z),e(_z,Str),e(vT,Rtr),e(Py,Ptr),e(Py,FT),e(FT,Due),e(Due,Btr),e(FT,Itr),e(FT,uz),e(uz,qtr),e(FT,Ntr),e(_o,jtr),e(_o,TT),e(TT,Dtr),e(TT,Gue),e(Gue,Gtr),e(TT,Otr),e(TT,Oue),e(Oue,Vtr),e(_o,Xtr),M(MT,_o,null),b(f,rNe,u),b(f,kd,u),e(kd,ET),e(ET,Vue),M(By,Vue,null),e(kd,ztr),e(kd,Xue),e(Xue,Wtr),b(f,tNe,u),b(f,Ho,u),M(Iy,Ho,null),e(Ho,Qtr),e(Ho,Sd),e(Sd,Htr),e(Sd,bz),e(bz,Utr),e(Sd,Jtr),e(Sd,vz),e(vz,Ytr),e(Sd,Ktr),e(Ho,Ztr),e(Ho,qy),e(qy,ear),e(qy,zue),e(zue,oar),e(qy,rar),e(Ho,tar),e(Ho,Ct),M(Ny,Ct,null),e(Ct,aar),e(Ct,Wue),e(Wue,nar),e(Ct,sar),e(Ct,Rd),e(Rd,lar),e(Rd,Que),e(Que,iar),e(Rd,dar),e(Rd,Fz),e(Fz,car),e(Rd,far),e(Ct,mar),M(CT,Ct,null),e(Ho,gar),e(Ho,uo),M(jy,uo,null),e(uo,har),e(uo,Hue),e(Hue,par),e(uo,_ar),e(uo,Ha),e(Ha,uar),e(Ha,Uue),e(Uue,bar),e(Ha,Far),e(Ha,Jue),e(Jue,Tar),e(Ha,Mar),e(Ha,Yue),e(Yue,Ear),e(Ha,Car),e(uo,war),e(uo,Kue),e(Kue,wT),e(wT,Zue),e(Zue,Aar),e(wT,yar),e(wT,Tz),e(Tz,Lar),e(wT,xar),e(uo,$ar),e(uo,AT),e(AT,kar),e(AT,e1e),e(e1e,Sar),e(AT,Rar),e(AT,o1e),e(o1e,Par),e(uo,Bar),M(yT,uo,null),b(f,aNe,u),b(f,Pd,u),e(Pd,LT),e(LT,r1e),M(Dy,r1e,null),e(Pd,Iar),e(Pd,t1e),e(t1e,qar),b(f,nNe,u),b(f,Uo,u),M(Gy,Uo,null),e(Uo,Nar),e(Uo,Bd),e(Bd,jar),e(Bd,Mz),e(Mz,Dar),e(Bd,Gar),e(Bd,Ez),e(Ez,Oar),e(Bd,Var),e(Uo,Xar),e(Uo,Oy),e(Oy,zar),e(Oy,a1e),e(a1e,War),e(Oy,Qar),e(Uo,Har),e(Uo,wt),M(Vy,wt,null),e(wt,Uar),e(wt,n1e),e(n1e,Jar),e(wt,Yar),e(wt,Id),e(Id,Kar),e(Id,s1e),e(s1e,Zar),e(Id,enr),e(Id,Cz),e(Cz,onr),e(Id,rnr),e(wt,tnr),M(xT,wt,null),e(Uo,anr),e(Uo,bo),M(Xy,bo,null),e(bo,nnr),e(bo,l1e),e(l1e,snr),e(bo,lnr),e(bo,Ua),e(Ua,inr),e(Ua,i1e),e(i1e,dnr),e(Ua,cnr),e(Ua,d1e),e(d1e,fnr),e(Ua,mnr),e(Ua,c1e),e(c1e,gnr),e(Ua,hnr),e(bo,pnr),e(bo,Ja),e(Ja,$T),e($T,f1e),e(f1e,_nr),e($T,unr),e($T,wz),e(wz,bnr),e($T,vnr),e(Ja,Fnr),e(Ja,kT),e(kT,m1e),e(m1e,Tnr),e(kT,Mnr),e(kT,Az),e(Az,Enr),e(kT,Cnr),e(Ja,wnr),e(Ja,ST),e(ST,g1e),e(g1e,Anr),e(ST,ynr),e(ST,yz),e(yz,Lnr),e(ST,xnr),e(Ja,$nr),e(Ja,RT),e(RT,h1e),e(h1e,knr),e(RT,Snr),e(RT,Lz),e(Lz,Rnr),e(RT,Pnr),e(bo,Bnr),e(bo,PT),e(PT,Inr),e(PT,p1e),e(p1e,qnr),e(PT,Nnr),e(PT,_1e),e(_1e,jnr),e(bo,Dnr),M(BT,bo,null),b(f,sNe,u),b(f,qd,u),e(qd,IT),e(IT,u1e),M(zy,u1e,null),e(qd,Gnr),e(qd,b1e),e(b1e,Onr),b(f,lNe,u),b(f,Jo,u),M(Wy,Jo,null),e(Jo,Vnr),e(Jo,Nd),e(Nd,Xnr),e(Nd,xz),e(xz,znr),e(Nd,Wnr),e(Nd,$z),e($z,Qnr),e(Nd,Hnr),e(Jo,Unr),e(Jo,Qy),e(Qy,Jnr),e(Qy,v1e),e(v1e,Ynr),e(Qy,Knr),e(Jo,Znr),e(Jo,At),M(Hy,At,null),e(At,esr),e(At,F1e),e(F1e,osr),e(At,rsr),e(At,jd),e(jd,tsr),e(jd,T1e),e(T1e,asr),e(jd,nsr),e(jd,kz),e(kz,ssr),e(jd,lsr),e(At,isr),M(qT,At,null),e(Jo,dsr),e(Jo,vo),M(Uy,vo,null),e(vo,csr),e(vo,M1e),e(M1e,fsr),e(vo,msr),e(vo,Ya),e(Ya,gsr),e(Ya,E1e),e(E1e,hsr),e(Ya,psr),e(Ya,C1e),e(C1e,_sr),e(Ya,usr),e(Ya,w1e),e(w1e,bsr),e(Ya,vsr),e(vo,Fsr),e(vo,A1e),e(A1e,NT),e(NT,y1e),e(y1e,Tsr),e(NT,Msr),e(NT,Sz),e(Sz,Esr),e(NT,Csr),e(vo,wsr),e(vo,jT),e(jT,Asr),e(jT,L1e),e(L1e,ysr),e(jT,Lsr),e(jT,x1e),e(x1e,xsr),e(vo,$sr),M(DT,vo,null),b(f,iNe,u),b(f,Dd,u),e(Dd,GT),e(GT,$1e),M(Jy,$1e,null),e(Dd,ksr),e(Dd,k1e),e(k1e,Ssr),b(f,dNe,u),b(f,Yo,u),M(Yy,Yo,null),e(Yo,Rsr),e(Yo,Gd),e(Gd,Psr),e(Gd,Rz),e(Rz,Bsr),e(Gd,Isr),e(Gd,Pz),e(Pz,qsr),e(Gd,Nsr),e(Yo,jsr),e(Yo,Ky),e(Ky,Dsr),e(Ky,S1e),e(S1e,Gsr),e(Ky,Osr),e(Yo,Vsr),e(Yo,yt),M(Zy,yt,null),e(yt,Xsr),e(yt,R1e),e(R1e,zsr),e(yt,Wsr),e(yt,Od),e(Od,Qsr),e(Od,P1e),e(P1e,Hsr),e(Od,Usr),e(Od,Bz),e(Bz,Jsr),e(Od,Ysr),e(yt,Ksr),M(OT,yt,null),e(Yo,Zsr),e(Yo,wr),M(eL,wr,null),e(wr,elr),e(wr,B1e),e(B1e,olr),e(wr,rlr),e(wr,Ka),e(Ka,tlr),e(Ka,I1e),e(I1e,alr),e(Ka,nlr),e(Ka,q1e),e(q1e,slr),e(Ka,llr),e(Ka,N1e),e(N1e,ilr),e(Ka,dlr),e(wr,clr),e(wr,N),e(N,VT),e(VT,j1e),e(j1e,flr),e(VT,mlr),e(VT,Iz),e(Iz,glr),e(VT,hlr),e(N,plr),e(N,XT),e(XT,D1e),e(D1e,_lr),e(XT,ulr),e(XT,qz),e(qz,blr),e(XT,vlr),e(N,Flr),e(N,zT),e(zT,G1e),e(G1e,Tlr),e(zT,Mlr),e(zT,Nz),e(Nz,Elr),e(zT,Clr),e(N,wlr),e(N,WT),e(WT,O1e),e(O1e,Alr),e(WT,ylr),e(WT,jz),e(jz,Llr),e(WT,xlr),e(N,$lr),e(N,QT),e(QT,V1e),e(V1e,klr),e(QT,Slr),e(QT,Dz),e(Dz,Rlr),e(QT,Plr),e(N,Blr),e(N,HT),e(HT,X1e),e(X1e,Ilr),e(HT,qlr),e(HT,Gz),e(Gz,Nlr),e(HT,jlr),e(N,Dlr),e(N,UT),e(UT,z1e),e(z1e,Glr),e(UT,Olr),e(UT,Oz),e(Oz,Vlr),e(UT,Xlr),e(N,zlr),e(N,JT),e(JT,W1e),e(W1e,Wlr),e(JT,Qlr),e(JT,Vz),e(Vz,Hlr),e(JT,Ulr),e(N,Jlr),e(N,YT),e(YT,Q1e),e(Q1e,Ylr),e(YT,Klr),e(YT,Xz),e(Xz,Zlr),e(YT,eir),e(N,oir),e(N,KT),e(KT,H1e),e(H1e,rir),e(KT,tir),e(KT,zz),e(zz,air),e(KT,nir),e(N,sir),e(N,ZT),e(ZT,U1e),e(U1e,lir),e(ZT,iir),e(ZT,Wz),e(Wz,dir),e(ZT,cir),e(N,fir),e(N,e8),e(e8,J1e),e(J1e,mir),e(e8,gir),e(e8,Qz),e(Qz,hir),e(e8,pir),e(N,_ir),e(N,o8),e(o8,Y1e),e(Y1e,uir),e(o8,bir),e(o8,Hz),e(Hz,vir),e(o8,Fir),e(N,Tir),e(N,r8),e(r8,K1e),e(K1e,Mir),e(r8,Eir),e(r8,Uz),e(Uz,Cir),e(r8,wir),e(N,Air),e(N,t8),e(t8,Z1e),e(Z1e,yir),e(t8,Lir),e(t8,Jz),e(Jz,xir),e(t8,$ir),e(N,kir),e(N,a8),e(a8,ebe),e(ebe,Sir),e(a8,Rir),e(a8,Yz),e(Yz,Pir),e(a8,Bir),e(N,Iir),e(N,n8),e(n8,obe),e(obe,qir),e(n8,Nir),e(n8,Kz),e(Kz,jir),e(n8,Dir),e(N,Gir),e(N,Bs),e(Bs,rbe),e(rbe,Oir),e(Bs,Vir),e(Bs,Zz),e(Zz,Xir),e(Bs,zir),e(Bs,eW),e(eW,Wir),e(Bs,Qir),e(N,Hir),e(N,s8),e(s8,tbe),e(tbe,Uir),e(s8,Jir),e(s8,oW),e(oW,Yir),e(s8,Kir),e(N,Zir),e(N,l8),e(l8,abe),e(abe,edr),e(l8,odr),e(l8,rW),e(rW,rdr),e(l8,tdr),e(N,adr),e(N,i8),e(i8,nbe),e(nbe,ndr),e(i8,sdr),e(i8,tW),e(tW,ldr),e(i8,idr),e(N,ddr),e(N,d8),e(d8,sbe),e(sbe,cdr),e(d8,fdr),e(d8,aW),e(aW,mdr),e(d8,gdr),e(N,hdr),e(N,c8),e(c8,lbe),e(lbe,pdr),e(c8,_dr),e(c8,nW),e(nW,udr),e(c8,bdr),e(N,vdr),e(N,f8),e(f8,ibe),e(ibe,Fdr),e(f8,Tdr),e(f8,sW),e(sW,Mdr),e(f8,Edr),e(N,Cdr),e(N,m8),e(m8,dbe),e(dbe,wdr),e(m8,Adr),e(m8,lW),e(lW,ydr),e(m8,Ldr),e(N,xdr),e(N,g8),e(g8,cbe),e(cbe,$dr),e(g8,kdr),e(g8,iW),e(iW,Sdr),e(g8,Rdr),e(N,Pdr),e(N,h8),e(h8,fbe),e(fbe,Bdr),e(h8,Idr),e(h8,dW),e(dW,qdr),e(h8,Ndr),e(N,jdr),e(N,p8),e(p8,mbe),e(mbe,Ddr),e(p8,Gdr),e(p8,cW),e(cW,Odr),e(p8,Vdr),e(N,Xdr),e(N,_8),e(_8,gbe),e(gbe,zdr),e(_8,Wdr),e(_8,fW),e(fW,Qdr),e(_8,Hdr),e(N,Udr),e(N,u8),e(u8,hbe),e(hbe,Jdr),e(u8,Ydr),e(u8,mW),e(mW,Kdr),e(u8,Zdr),e(N,ecr),e(N,b8),e(b8,pbe),e(pbe,ocr),e(b8,rcr),e(b8,gW),e(gW,tcr),e(b8,acr),e(N,ncr),e(N,v8),e(v8,_be),e(_be,scr),e(v8,lcr),e(v8,hW),e(hW,icr),e(v8,dcr),e(N,ccr),e(N,F8),e(F8,ube),e(ube,fcr),e(F8,mcr),e(F8,pW),e(pW,gcr),e(F8,hcr),e(N,pcr),e(N,T8),e(T8,bbe),e(bbe,_cr),e(T8,ucr),e(T8,_W),e(_W,bcr),e(T8,vcr),e(N,Fcr),e(N,M8),e(M8,vbe),e(vbe,Tcr),e(M8,Mcr),e(M8,uW),e(uW,Ecr),e(M8,Ccr),e(N,wcr),e(N,E8),e(E8,Fbe),e(Fbe,Acr),e(E8,ycr),e(E8,bW),e(bW,Lcr),e(E8,xcr),e(N,$cr),e(N,C8),e(C8,Tbe),e(Tbe,kcr),e(C8,Scr),e(C8,vW),e(vW,Rcr),e(C8,Pcr),e(N,Bcr),e(N,w8),e(w8,Mbe),e(Mbe,Icr),e(w8,qcr),e(w8,FW),e(FW,Ncr),e(w8,jcr),e(N,Dcr),e(N,A8),e(A8,Ebe),e(Ebe,Gcr),e(A8,Ocr),e(A8,TW),e(TW,Vcr),e(A8,Xcr),e(N,zcr),e(N,y8),e(y8,Cbe),e(Cbe,Wcr),e(y8,Qcr),e(y8,MW),e(MW,Hcr),e(y8,Ucr),e(N,Jcr),e(N,L8),e(L8,wbe),e(wbe,Ycr),e(L8,Kcr),e(L8,EW),e(EW,Zcr),e(L8,efr),e(N,ofr),e(N,x8),e(x8,Abe),e(Abe,rfr),e(x8,tfr),e(x8,CW),e(CW,afr),e(x8,nfr),e(N,sfr),e(N,$8),e($8,ybe),e(ybe,lfr),e($8,ifr),e($8,wW),e(wW,dfr),e($8,cfr),e(N,ffr),e(N,k8),e(k8,Lbe),e(Lbe,mfr),e(k8,gfr),e(k8,AW),e(AW,hfr),e(k8,pfr),e(N,_fr),e(N,S8),e(S8,xbe),e(xbe,ufr),e(S8,bfr),e(S8,yW),e(yW,vfr),e(S8,Ffr),e(N,Tfr),e(N,R8),e(R8,$be),e($be,Mfr),e(R8,Efr),e(R8,LW),e(LW,Cfr),e(R8,wfr),e(wr,Afr),M(P8,wr,null),b(f,cNe,u),b(f,Vd,u),e(Vd,B8),e(B8,kbe),M(oL,kbe,null),e(Vd,yfr),e(Vd,Sbe),e(Sbe,Lfr),b(f,fNe,u),b(f,Ko,u),M(rL,Ko,null),e(Ko,xfr),e(Ko,Xd),e(Xd,$fr),e(Xd,xW),e(xW,kfr),e(Xd,Sfr),e(Xd,$W),e($W,Rfr),e(Xd,Pfr),e(Ko,Bfr),e(Ko,tL),e(tL,Ifr),e(tL,Rbe),e(Rbe,qfr),e(tL,Nfr),e(Ko,jfr),e(Ko,Lt),M(aL,Lt,null),e(Lt,Dfr),e(Lt,Pbe),e(Pbe,Gfr),e(Lt,Ofr),e(Lt,zd),e(zd,Vfr),e(zd,Bbe),e(Bbe,Xfr),e(zd,zfr),e(zd,kW),e(kW,Wfr),e(zd,Qfr),e(Lt,Hfr),M(I8,Lt,null),e(Ko,Ufr),e(Ko,Ar),M(nL,Ar,null),e(Ar,Jfr),e(Ar,Ibe),e(Ibe,Yfr),e(Ar,Kfr),e(Ar,Za),e(Za,Zfr),e(Za,qbe),e(qbe,emr),e(Za,omr),e(Za,Nbe),e(Nbe,rmr),e(Za,tmr),e(Za,jbe),e(jbe,amr),e(Za,nmr),e(Ar,smr),e(Ar,se),e(se,q8),e(q8,Dbe),e(Dbe,lmr),e(q8,imr),e(q8,SW),e(SW,dmr),e(q8,cmr),e(se,fmr),e(se,N8),e(N8,Gbe),e(Gbe,mmr),e(N8,gmr),e(N8,RW),e(RW,hmr),e(N8,pmr),e(se,_mr),e(se,j8),e(j8,Obe),e(Obe,umr),e(j8,bmr),e(j8,PW),e(PW,vmr),e(j8,Fmr),e(se,Tmr),e(se,D8),e(D8,Vbe),e(Vbe,Mmr),e(D8,Emr),e(D8,BW),e(BW,Cmr),e(D8,wmr),e(se,Amr),e(se,G8),e(G8,Xbe),e(Xbe,ymr),e(G8,Lmr),e(G8,IW),e(IW,xmr),e(G8,$mr),e(se,kmr),e(se,O8),e(O8,zbe),e(zbe,Smr),e(O8,Rmr),e(O8,qW),e(qW,Pmr),e(O8,Bmr),e(se,Imr),e(se,V8),e(V8,Wbe),e(Wbe,qmr),e(V8,Nmr),e(V8,NW),e(NW,jmr),e(V8,Dmr),e(se,Gmr),e(se,X8),e(X8,Qbe),e(Qbe,Omr),e(X8,Vmr),e(X8,jW),e(jW,Xmr),e(X8,zmr),e(se,Wmr),e(se,z8),e(z8,Hbe),e(Hbe,Qmr),e(z8,Hmr),e(z8,DW),e(DW,Umr),e(z8,Jmr),e(se,Ymr),e(se,W8),e(W8,Ube),e(Ube,Kmr),e(W8,Zmr),e(W8,GW),e(GW,egr),e(W8,ogr),e(se,rgr),e(se,Q8),e(Q8,Jbe),e(Jbe,tgr),e(Q8,agr),e(Q8,OW),e(OW,ngr),e(Q8,sgr),e(se,lgr),e(se,H8),e(H8,Ybe),e(Ybe,igr),e(H8,dgr),e(H8,VW),e(VW,cgr),e(H8,fgr),e(se,mgr),e(se,U8),e(U8,Kbe),e(Kbe,ggr),e(U8,hgr),e(U8,XW),e(XW,pgr),e(U8,_gr),e(se,ugr),e(se,J8),e(J8,Zbe),e(Zbe,bgr),e(J8,vgr),e(J8,zW),e(zW,Fgr),e(J8,Tgr),e(se,Mgr),e(se,Y8),e(Y8,e2e),e(e2e,Egr),e(Y8,Cgr),e(Y8,WW),e(WW,wgr),e(Y8,Agr),e(se,ygr),e(se,K8),e(K8,o2e),e(o2e,Lgr),e(K8,xgr),e(K8,QW),e(QW,$gr),e(K8,kgr),e(se,Sgr),e(se,Z8),e(Z8,r2e),e(r2e,Rgr),e(Z8,Pgr),e(Z8,HW),e(HW,Bgr),e(Z8,Igr),e(se,qgr),e(se,e7),e(e7,t2e),e(t2e,Ngr),e(e7,jgr),e(e7,UW),e(UW,Dgr),e(e7,Ggr),e(se,Ogr),e(se,o7),e(o7,a2e),e(a2e,Vgr),e(o7,Xgr),e(o7,JW),e(JW,zgr),e(o7,Wgr),e(se,Qgr),e(se,r7),e(r7,n2e),e(n2e,Hgr),e(r7,Ugr),e(r7,YW),e(YW,Jgr),e(r7,Ygr),e(se,Kgr),e(se,t7),e(t7,s2e),e(s2e,Zgr),e(t7,ehr),e(t7,KW),e(KW,ohr),e(t7,rhr),e(se,thr),e(se,a7),e(a7,l2e),e(l2e,ahr),e(a7,nhr),e(a7,ZW),e(ZW,shr),e(a7,lhr),e(se,ihr),e(se,n7),e(n7,i2e),e(i2e,dhr),e(n7,chr),e(n7,eQ),e(eQ,fhr),e(n7,mhr),e(Ar,ghr),M(s7,Ar,null),b(f,mNe,u),b(f,Wd,u),e(Wd,l7),e(l7,d2e),M(sL,d2e,null),e(Wd,hhr),e(Wd,c2e),e(c2e,phr),b(f,gNe,u),b(f,Zo,u),M(lL,Zo,null),e(Zo,_hr),e(Zo,Qd),e(Qd,uhr),e(Qd,oQ),e(oQ,bhr),e(Qd,vhr),e(Qd,rQ),e(rQ,Fhr),e(Qd,Thr),e(Zo,Mhr),e(Zo,iL),e(iL,Ehr),e(iL,f2e),e(f2e,Chr),e(iL,whr),e(Zo,Ahr),e(Zo,xt),M(dL,xt,null),e(xt,yhr),e(xt,m2e),e(m2e,Lhr),e(xt,xhr),e(xt,Hd),e(Hd,$hr),e(Hd,g2e),e(g2e,khr),e(Hd,Shr),e(Hd,tQ),e(tQ,Rhr),e(Hd,Phr),e(xt,Bhr),M(i7,xt,null),e(Zo,Ihr),e(Zo,yr),M(cL,yr,null),e(yr,qhr),e(yr,h2e),e(h2e,Nhr),e(yr,jhr),e(yr,en),e(en,Dhr),e(en,p2e),e(p2e,Ghr),e(en,Ohr),e(en,_2e),e(_2e,Vhr),e(en,Xhr),e(en,u2e),e(u2e,zhr),e(en,Whr),e(yr,Qhr),e(yr,Me),e(Me,d7),e(d7,b2e),e(b2e,Hhr),e(d7,Uhr),e(d7,aQ),e(aQ,Jhr),e(d7,Yhr),e(Me,Khr),e(Me,c7),e(c7,v2e),e(v2e,Zhr),e(c7,epr),e(c7,nQ),e(nQ,opr),e(c7,rpr),e(Me,tpr),e(Me,f7),e(f7,F2e),e(F2e,apr),e(f7,npr),e(f7,sQ),e(sQ,spr),e(f7,lpr),e(Me,ipr),e(Me,m7),e(m7,T2e),e(T2e,dpr),e(m7,cpr),e(m7,lQ),e(lQ,fpr),e(m7,mpr),e(Me,gpr),e(Me,g7),e(g7,M2e),e(M2e,hpr),e(g7,ppr),e(g7,iQ),e(iQ,_pr),e(g7,upr),e(Me,bpr),e(Me,h7),e(h7,E2e),e(E2e,vpr),e(h7,Fpr),e(h7,dQ),e(dQ,Tpr),e(h7,Mpr),e(Me,Epr),e(Me,p7),e(p7,C2e),e(C2e,Cpr),e(p7,wpr),e(p7,cQ),e(cQ,Apr),e(p7,ypr),e(Me,Lpr),e(Me,_7),e(_7,w2e),e(w2e,xpr),e(_7,$pr),e(_7,fQ),e(fQ,kpr),e(_7,Spr),e(Me,Rpr),e(Me,u7),e(u7,A2e),e(A2e,Ppr),e(u7,Bpr),e(u7,mQ),e(mQ,Ipr),e(u7,qpr),e(Me,Npr),e(Me,b7),e(b7,y2e),e(y2e,jpr),e(b7,Dpr),e(b7,gQ),e(gQ,Gpr),e(b7,Opr),e(Me,Vpr),e(Me,v7),e(v7,L2e),e(L2e,Xpr),e(v7,zpr),e(v7,hQ),e(hQ,Wpr),e(v7,Qpr),e(Me,Hpr),e(Me,F7),e(F7,x2e),e(x2e,Upr),e(F7,Jpr),e(F7,pQ),e(pQ,Ypr),e(F7,Kpr),e(yr,Zpr),M(T7,yr,null),b(f,hNe,u),b(f,Ud,u),e(Ud,M7),e(M7,$2e),M(fL,$2e,null),e(Ud,e_r),e(Ud,k2e),e(k2e,o_r),b(f,pNe,u),b(f,er,u),M(mL,er,null),e(er,r_r),e(er,Jd),e(Jd,t_r),e(Jd,_Q),e(_Q,a_r),e(Jd,n_r),e(Jd,uQ),e(uQ,s_r),e(Jd,l_r),e(er,i_r),e(er,gL),e(gL,d_r),e(gL,S2e),e(S2e,c_r),e(gL,f_r),e(er,m_r),e(er,$t),M(hL,$t,null),e($t,g_r),e($t,R2e),e(R2e,h_r),e($t,p_r),e($t,Yd),e(Yd,__r),e(Yd,P2e),e(P2e,u_r),e(Yd,b_r),e(Yd,bQ),e(bQ,v_r),e(Yd,F_r),e($t,T_r),M(E7,$t,null),e(er,M_r),e(er,Lr),M(pL,Lr,null),e(Lr,E_r),e(Lr,B2e),e(B2e,C_r),e(Lr,w_r),e(Lr,on),e(on,A_r),e(on,I2e),e(I2e,y_r),e(on,L_r),e(on,q2e),e(q2e,x_r),e(on,$_r),e(on,N2e),e(N2e,k_r),e(on,S_r),e(Lr,R_r),e(Lr,rn),e(rn,C7),e(C7,j2e),e(j2e,P_r),e(C7,B_r),e(C7,vQ),e(vQ,I_r),e(C7,q_r),e(rn,N_r),e(rn,w7),e(w7,D2e),e(D2e,j_r),e(w7,D_r),e(w7,FQ),e(FQ,G_r),e(w7,O_r),e(rn,V_r),e(rn,A7),e(A7,G2e),e(G2e,X_r),e(A7,z_r),e(A7,TQ),e(TQ,W_r),e(A7,Q_r),e(rn,H_r),e(rn,y7),e(y7,O2e),e(O2e,U_r),e(y7,J_r),e(y7,MQ),e(MQ,Y_r),e(y7,K_r),e(Lr,Z_r),M(L7,Lr,null),b(f,_Ne,u),b(f,Kd,u),e(Kd,x7),e(x7,V2e),M(_L,V2e,null),e(Kd,eur),e(Kd,X2e),e(X2e,our),b(f,uNe,u),b(f,or,u),M(uL,or,null),e(or,rur),e(or,Zd),e(Zd,tur),e(Zd,EQ),e(EQ,aur),e(Zd,nur),e(Zd,CQ),e(CQ,sur),e(Zd,lur),e(or,iur),e(or,bL),e(bL,dur),e(bL,z2e),e(z2e,cur),e(bL,fur),e(or,mur),e(or,kt),M(vL,kt,null),e(kt,gur),e(kt,W2e),e(W2e,hur),e(kt,pur),e(kt,ec),e(ec,_ur),e(ec,Q2e),e(Q2e,uur),e(ec,bur),e(ec,wQ),e(wQ,vur),e(ec,Fur),e(kt,Tur),M($7,kt,null),e(or,Mur),e(or,xr),M(FL,xr,null),e(xr,Eur),e(xr,H2e),e(H2e,Cur),e(xr,wur),e(xr,tn),e(tn,Aur),e(tn,U2e),e(U2e,yur),e(tn,Lur),e(tn,J2e),e(J2e,xur),e(tn,$ur),e(tn,Y2e),e(Y2e,kur),e(tn,Sur),e(xr,Rur),e(xr,ie),e(ie,k7),e(k7,K2e),e(K2e,Pur),e(k7,Bur),e(k7,AQ),e(AQ,Iur),e(k7,qur),e(ie,Nur),e(ie,S7),e(S7,Z2e),e(Z2e,jur),e(S7,Dur),e(S7,yQ),e(yQ,Gur),e(S7,Our),e(ie,Vur),e(ie,R7),e(R7,eve),e(eve,Xur),e(R7,zur),e(R7,LQ),e(LQ,Wur),e(R7,Qur),e(ie,Hur),e(ie,P7),e(P7,ove),e(ove,Uur),e(P7,Jur),e(P7,xQ),e(xQ,Yur),e(P7,Kur),e(ie,Zur),e(ie,B7),e(B7,rve),e(rve,e1r),e(B7,o1r),e(B7,$Q),e($Q,r1r),e(B7,t1r),e(ie,a1r),e(ie,I7),e(I7,tve),e(tve,n1r),e(I7,s1r),e(I7,kQ),e(kQ,l1r),e(I7,i1r),e(ie,d1r),e(ie,q7),e(q7,ave),e(ave,c1r),e(q7,f1r),e(q7,SQ),e(SQ,m1r),e(q7,g1r),e(ie,h1r),e(ie,N7),e(N7,nve),e(nve,p1r),e(N7,_1r),e(N7,RQ),e(RQ,u1r),e(N7,b1r),e(ie,v1r),e(ie,j7),e(j7,sve),e(sve,F1r),e(j7,T1r),e(j7,PQ),e(PQ,M1r),e(j7,E1r),e(ie,C1r),e(ie,D7),e(D7,lve),e(lve,w1r),e(D7,A1r),e(D7,BQ),e(BQ,y1r),e(D7,L1r),e(ie,x1r),e(ie,G7),e(G7,ive),e(ive,$1r),e(G7,k1r),e(G7,IQ),e(IQ,S1r),e(G7,R1r),e(ie,P1r),e(ie,O7),e(O7,dve),e(dve,B1r),e(O7,I1r),e(O7,qQ),e(qQ,q1r),e(O7,N1r),e(ie,j1r),e(ie,V7),e(V7,cve),e(cve,D1r),e(V7,G1r),e(V7,NQ),e(NQ,O1r),e(V7,V1r),e(ie,X1r),e(ie,X7),e(X7,fve),e(fve,z1r),e(X7,W1r),e(X7,jQ),e(jQ,Q1r),e(X7,H1r),e(ie,U1r),e(ie,z7),e(z7,mve),e(mve,J1r),e(z7,Y1r),e(z7,DQ),e(DQ,K1r),e(z7,Z1r),e(ie,ebr),e(ie,W7),e(W7,gve),e(gve,obr),e(W7,rbr),e(W7,GQ),e(GQ,tbr),e(W7,abr),e(ie,nbr),e(ie,Q7),e(Q7,hve),e(hve,sbr),e(Q7,lbr),e(Q7,OQ),e(OQ,ibr),e(Q7,dbr),e(ie,cbr),e(ie,H7),e(H7,pve),e(pve,fbr),e(H7,mbr),e(H7,VQ),e(VQ,gbr),e(H7,hbr),e(ie,pbr),e(ie,U7),e(U7,_ve),e(_ve,_br),e(U7,ubr),e(U7,XQ),e(XQ,bbr),e(U7,vbr),e(ie,Fbr),e(ie,J7),e(J7,uve),e(uve,Tbr),e(J7,Mbr),e(J7,zQ),e(zQ,Ebr),e(J7,Cbr),e(xr,wbr),M(Y7,xr,null),b(f,bNe,u),b(f,oc,u),e(oc,K7),e(K7,bve),M(TL,bve,null),e(oc,Abr),e(oc,vve),e(vve,ybr),b(f,vNe,u),b(f,rr,u),M(ML,rr,null),e(rr,Lbr),e(rr,rc),e(rc,xbr),e(rc,WQ),e(WQ,$br),e(rc,kbr),e(rc,QQ),e(QQ,Sbr),e(rc,Rbr),e(rr,Pbr),e(rr,EL),e(EL,Bbr),e(EL,Fve),e(Fve,Ibr),e(EL,qbr),e(rr,Nbr),e(rr,St),M(CL,St,null),e(St,jbr),e(St,Tve),e(Tve,Dbr),e(St,Gbr),e(St,tc),e(tc,Obr),e(tc,Mve),e(Mve,Vbr),e(tc,Xbr),e(tc,HQ),e(HQ,zbr),e(tc,Wbr),e(St,Qbr),M(Z7,St,null),e(rr,Hbr),e(rr,$r),M(wL,$r,null),e($r,Ubr),e($r,Eve),e(Eve,Jbr),e($r,Ybr),e($r,an),e(an,Kbr),e(an,Cve),e(Cve,Zbr),e(an,e2r),e(an,wve),e(wve,o2r),e(an,r2r),e(an,Ave),e(Ave,t2r),e(an,a2r),e($r,n2r),e($r,ye),e(ye,eM),e(eM,yve),e(yve,s2r),e(eM,l2r),e(eM,UQ),e(UQ,i2r),e(eM,d2r),e(ye,c2r),e(ye,oM),e(oM,Lve),e(Lve,f2r),e(oM,m2r),e(oM,JQ),e(JQ,g2r),e(oM,h2r),e(ye,p2r),e(ye,rM),e(rM,xve),e(xve,_2r),e(rM,u2r),e(rM,YQ),e(YQ,b2r),e(rM,v2r),e(ye,F2r),e(ye,tM),e(tM,$ve),e($ve,T2r),e(tM,M2r),e(tM,KQ),e(KQ,E2r),e(tM,C2r),e(ye,w2r),e(ye,aM),e(aM,kve),e(kve,A2r),e(aM,y2r),e(aM,ZQ),e(ZQ,L2r),e(aM,x2r),e(ye,$2r),e(ye,nM),e(nM,Sve),e(Sve,k2r),e(nM,S2r),e(nM,eH),e(eH,R2r),e(nM,P2r),e(ye,B2r),e(ye,sM),e(sM,Rve),e(Rve,I2r),e(sM,q2r),e(sM,oH),e(oH,N2r),e(sM,j2r),e(ye,D2r),e(ye,lM),e(lM,Pve),e(Pve,G2r),e(lM,O2r),e(lM,rH),e(rH,V2r),e(lM,X2r),e(ye,z2r),e(ye,iM),e(iM,Bve),e(Bve,W2r),e(iM,Q2r),e(iM,tH),e(tH,H2r),e(iM,U2r),e(ye,J2r),e(ye,dM),e(dM,Ive),e(Ive,Y2r),e(dM,K2r),e(dM,aH),e(aH,Z2r),e(dM,evr),e($r,ovr),M(cM,$r,null),b(f,FNe,u),b(f,ac,u),e(ac,fM),e(fM,qve),M(AL,qve,null),e(ac,rvr),e(ac,Nve),e(Nve,tvr),b(f,TNe,u),b(f,tr,u),M(yL,tr,null),e(tr,avr),e(tr,nc),e(nc,nvr),e(nc,nH),e(nH,svr),e(nc,lvr),e(nc,sH),e(sH,ivr),e(nc,dvr),e(tr,cvr),e(tr,LL),e(LL,fvr),e(LL,jve),e(jve,mvr),e(LL,gvr),e(tr,hvr),e(tr,Rt),M(xL,Rt,null),e(Rt,pvr),e(Rt,Dve),e(Dve,_vr),e(Rt,uvr),e(Rt,sc),e(sc,bvr),e(sc,Gve),e(Gve,vvr),e(sc,Fvr),e(sc,lH),e(lH,Tvr),e(sc,Mvr),e(Rt,Evr),M(mM,Rt,null),e(tr,Cvr),e(tr,kr),M($L,kr,null),e(kr,wvr),e(kr,Ove),e(Ove,Avr),e(kr,yvr),e(kr,nn),e(nn,Lvr),e(nn,Vve),e(Vve,xvr),e(nn,$vr),e(nn,Xve),e(Xve,kvr),e(nn,Svr),e(nn,zve),e(zve,Rvr),e(nn,Pvr),e(kr,Bvr),e(kr,oe),e(oe,gM),e(gM,Wve),e(Wve,Ivr),e(gM,qvr),e(gM,iH),e(iH,Nvr),e(gM,jvr),e(oe,Dvr),e(oe,hM),e(hM,Qve),e(Qve,Gvr),e(hM,Ovr),e(hM,dH),e(dH,Vvr),e(hM,Xvr),e(oe,zvr),e(oe,pM),e(pM,Hve),e(Hve,Wvr),e(pM,Qvr),e(pM,cH),e(cH,Hvr),e(pM,Uvr),e(oe,Jvr),e(oe,_M),e(_M,Uve),e(Uve,Yvr),e(_M,Kvr),e(_M,fH),e(fH,Zvr),e(_M,eFr),e(oe,oFr),e(oe,uM),e(uM,Jve),e(Jve,rFr),e(uM,tFr),e(uM,mH),e(mH,aFr),e(uM,nFr),e(oe,sFr),e(oe,bM),e(bM,Yve),e(Yve,lFr),e(bM,iFr),e(bM,gH),e(gH,dFr),e(bM,cFr),e(oe,fFr),e(oe,vM),e(vM,Kve),e(Kve,mFr),e(vM,gFr),e(vM,hH),e(hH,hFr),e(vM,pFr),e(oe,_Fr),e(oe,FM),e(FM,Zve),e(Zve,uFr),e(FM,bFr),e(FM,pH),e(pH,vFr),e(FM,FFr),e(oe,TFr),e(oe,TM),e(TM,eFe),e(eFe,MFr),e(TM,EFr),e(TM,_H),e(_H,CFr),e(TM,wFr),e(oe,AFr),e(oe,MM),e(MM,oFe),e(oFe,yFr),e(MM,LFr),e(MM,uH),e(uH,xFr),e(MM,$Fr),e(oe,kFr),e(oe,EM),e(EM,rFe),e(rFe,SFr),e(EM,RFr),e(EM,bH),e(bH,PFr),e(EM,BFr),e(oe,IFr),e(oe,CM),e(CM,tFe),e(tFe,qFr),e(CM,NFr),e(CM,vH),e(vH,jFr),e(CM,DFr),e(oe,GFr),e(oe,wM),e(wM,aFe),e(aFe,OFr),e(wM,VFr),e(wM,FH),e(FH,XFr),e(wM,zFr),e(oe,WFr),e(oe,AM),e(AM,nFe),e(nFe,QFr),e(AM,HFr),e(AM,TH),e(TH,UFr),e(AM,JFr),e(oe,YFr),e(oe,yM),e(yM,sFe),e(sFe,KFr),e(yM,ZFr),e(yM,MH),e(MH,e6r),e(yM,o6r),e(oe,r6r),e(oe,LM),e(LM,lFe),e(lFe,t6r),e(LM,a6r),e(LM,EH),e(EH,n6r),e(LM,s6r),e(oe,l6r),e(oe,xM),e(xM,iFe),e(iFe,i6r),e(xM,d6r),e(xM,CH),e(CH,c6r),e(xM,f6r),e(oe,m6r),e(oe,$M),e($M,dFe),e(dFe,g6r),e($M,h6r),e($M,wH),e(wH,p6r),e($M,_6r),e(oe,u6r),e(oe,kM),e(kM,cFe),e(cFe,b6r),e(kM,v6r),e(kM,AH),e(AH,F6r),e(kM,T6r),e(oe,M6r),e(oe,SM),e(SM,fFe),e(fFe,E6r),e(SM,C6r),e(SM,yH),e(yH,w6r),e(SM,A6r),e(oe,y6r),e(oe,RM),e(RM,mFe),e(mFe,L6r),e(RM,x6r),e(RM,LH),e(LH,$6r),e(RM,k6r),e(oe,S6r),e(oe,PM),e(PM,gFe),e(gFe,R6r),e(PM,P6r),e(PM,xH),e(xH,B6r),e(PM,I6r),e(oe,q6r),e(oe,BM),e(BM,hFe),e(hFe,N6r),e(BM,j6r),e(BM,$H),e($H,D6r),e(BM,G6r),e(oe,O6r),e(oe,IM),e(IM,pFe),e(pFe,V6r),e(IM,X6r),e(IM,kH),e(kH,z6r),e(IM,W6r),e(oe,Q6r),e(oe,qM),e(qM,_Fe),e(_Fe,H6r),e(qM,U6r),e(qM,SH),e(SH,J6r),e(qM,Y6r),e(oe,K6r),e(oe,NM),e(NM,uFe),e(uFe,Z6r),e(NM,eTr),e(NM,RH),e(RH,oTr),e(NM,rTr),e(kr,tTr),M(jM,kr,null),b(f,MNe,u),b(f,lc,u),e(lc,DM),e(DM,bFe),M(kL,bFe,null),e(lc,aTr),e(lc,vFe),e(vFe,nTr),b(f,ENe,u),b(f,ar,u),M(SL,ar,null),e(ar,sTr),e(ar,ic),e(ic,lTr),e(ic,PH),e(PH,iTr),e(ic,dTr),e(ic,BH),e(BH,cTr),e(ic,fTr),e(ar,mTr),e(ar,RL),e(RL,gTr),e(RL,FFe),e(FFe,hTr),e(RL,pTr),e(ar,_Tr),e(ar,Pt),M(PL,Pt,null),e(Pt,uTr),e(Pt,TFe),e(TFe,bTr),e(Pt,vTr),e(Pt,dc),e(dc,FTr),e(dc,MFe),e(MFe,TTr),e(dc,MTr),e(dc,IH),e(IH,ETr),e(dc,CTr),e(Pt,wTr),M(GM,Pt,null),e(ar,ATr),e(ar,Sr),M(BL,Sr,null),e(Sr,yTr),e(Sr,EFe),e(EFe,LTr),e(Sr,xTr),e(Sr,sn),e(sn,$Tr),e(sn,CFe),e(CFe,kTr),e(sn,STr),e(sn,wFe),e(wFe,RTr),e(sn,PTr),e(sn,AFe),e(AFe,BTr),e(sn,ITr),e(Sr,qTr),e(Sr,he),e(he,OM),e(OM,yFe),e(yFe,NTr),e(OM,jTr),e(OM,qH),e(qH,DTr),e(OM,GTr),e(he,OTr),e(he,VM),e(VM,LFe),e(LFe,VTr),e(VM,XTr),e(VM,NH),e(NH,zTr),e(VM,WTr),e(he,QTr),e(he,XM),e(XM,xFe),e(xFe,HTr),e(XM,UTr),e(XM,jH),e(jH,JTr),e(XM,YTr),e(he,KTr),e(he,zM),e(zM,$Fe),e($Fe,ZTr),e(zM,e8r),e(zM,DH),e(DH,o8r),e(zM,r8r),e(he,t8r),e(he,WM),e(WM,kFe),e(kFe,a8r),e(WM,n8r),e(WM,GH),e(GH,s8r),e(WM,l8r),e(he,i8r),e(he,QM),e(QM,SFe),e(SFe,d8r),e(QM,c8r),e(QM,OH),e(OH,f8r),e(QM,m8r),e(he,g8r),e(he,HM),e(HM,RFe),e(RFe,h8r),e(HM,p8r),e(HM,VH),e(VH,_8r),e(HM,u8r),e(he,b8r),e(he,UM),e(UM,PFe),e(PFe,v8r),e(UM,F8r),e(UM,XH),e(XH,T8r),e(UM,M8r),e(he,E8r),e(he,JM),e(JM,BFe),e(BFe,C8r),e(JM,w8r),e(JM,zH),e(zH,A8r),e(JM,y8r),e(he,L8r),e(he,YM),e(YM,IFe),e(IFe,x8r),e(YM,$8r),e(YM,WH),e(WH,k8r),e(YM,S8r),e(he,R8r),e(he,KM),e(KM,qFe),e(qFe,P8r),e(KM,B8r),e(KM,QH),e(QH,I8r),e(KM,q8r),e(he,N8r),e(he,ZM),e(ZM,NFe),e(NFe,j8r),e(ZM,D8r),e(ZM,HH),e(HH,G8r),e(ZM,O8r),e(he,V8r),e(he,e4),e(e4,jFe),e(jFe,X8r),e(e4,z8r),e(e4,UH),e(UH,W8r),e(e4,Q8r),e(he,H8r),e(he,o4),e(o4,DFe),e(DFe,U8r),e(o4,J8r),e(o4,JH),e(JH,Y8r),e(o4,K8r),e(he,Z8r),e(he,r4),e(r4,GFe),e(GFe,e7r),e(r4,o7r),e(r4,YH),e(YH,r7r),e(r4,t7r),e(he,a7r),e(he,t4),e(t4,OFe),e(OFe,n7r),e(t4,s7r),e(t4,KH),e(KH,l7r),e(t4,i7r),e(he,d7r),e(he,a4),e(a4,VFe),e(VFe,c7r),e(a4,f7r),e(a4,ZH),e(ZH,m7r),e(a4,g7r),e(Sr,h7r),M(n4,Sr,null),b(f,CNe,u),b(f,cc,u),e(cc,s4),e(s4,XFe),M(IL,XFe,null),e(cc,p7r),e(cc,zFe),e(zFe,_7r),b(f,wNe,u),b(f,nr,u),M(qL,nr,null),e(nr,u7r),e(nr,fc),e(fc,b7r),e(fc,eU),e(eU,v7r),e(fc,F7r),e(fc,oU),e(oU,T7r),e(fc,M7r),e(nr,E7r),e(nr,NL),e(NL,C7r),e(NL,WFe),e(WFe,w7r),e(NL,A7r),e(nr,y7r),e(nr,Bt),M(jL,Bt,null),e(Bt,L7r),e(Bt,QFe),e(QFe,x7r),e(Bt,$7r),e(Bt,mc),e(mc,k7r),e(mc,HFe),e(HFe,S7r),e(mc,R7r),e(mc,rU),e(rU,P7r),e(mc,B7r),e(Bt,I7r),M(l4,Bt,null),e(nr,q7r),e(nr,Rr),M(DL,Rr,null),e(Rr,N7r),e(Rr,UFe),e(UFe,j7r),e(Rr,D7r),e(Rr,ln),e(ln,G7r),e(ln,JFe),e(JFe,O7r),e(ln,V7r),e(ln,YFe),e(YFe,X7r),e(ln,z7r),e(ln,KFe),e(KFe,W7r),e(ln,Q7r),e(Rr,H7r),e(Rr,GL),e(GL,i4),e(i4,ZFe),e(ZFe,U7r),e(i4,J7r),e(i4,tU),e(tU,Y7r),e(i4,K7r),e(GL,Z7r),e(GL,d4),e(d4,e6e),e(e6e,eMr),e(d4,oMr),e(d4,aU),e(aU,rMr),e(d4,tMr),e(Rr,aMr),M(c4,Rr,null),b(f,ANe,u),b(f,gc,u),e(gc,f4),e(f4,o6e),M(OL,o6e,null),e(gc,nMr),e(gc,r6e),e(r6e,sMr),b(f,yNe,u),b(f,sr,u),M(VL,sr,null),e(sr,lMr),e(sr,hc),e(hc,iMr),e(hc,nU),e(nU,dMr),e(hc,cMr),e(hc,sU),e(sU,fMr),e(hc,mMr),e(sr,gMr),e(sr,XL),e(XL,hMr),e(XL,t6e),e(t6e,pMr),e(XL,_Mr),e(sr,uMr),e(sr,It),M(zL,It,null),e(It,bMr),e(It,a6e),e(a6e,vMr),e(It,FMr),e(It,pc),e(pc,TMr),e(pc,n6e),e(n6e,MMr),e(pc,EMr),e(pc,lU),e(lU,CMr),e(pc,wMr),e(It,AMr),M(m4,It,null),e(sr,yMr),e(sr,Pr),M(WL,Pr,null),e(Pr,LMr),e(Pr,s6e),e(s6e,xMr),e(Pr,$Mr),e(Pr,dn),e(dn,kMr),e(dn,l6e),e(l6e,SMr),e(dn,RMr),e(dn,i6e),e(i6e,PMr),e(dn,BMr),e(dn,d6e),e(d6e,IMr),e(dn,qMr),e(Pr,NMr),e(Pr,c6e),e(c6e,g4),e(g4,f6e),e(f6e,jMr),e(g4,DMr),e(g4,iU),e(iU,GMr),e(g4,OMr),e(Pr,VMr),M(h4,Pr,null),b(f,LNe,u),b(f,_c,u),e(_c,p4),e(p4,m6e),M(QL,m6e,null),e(_c,XMr),e(_c,g6e),e(g6e,zMr),b(f,xNe,u),b(f,lr,u),M(HL,lr,null),e(lr,WMr),e(lr,uc),e(uc,QMr),e(uc,dU),e(dU,HMr),e(uc,UMr),e(uc,cU),e(cU,JMr),e(uc,YMr),e(lr,KMr),e(lr,UL),e(UL,ZMr),e(UL,h6e),e(h6e,e4r),e(UL,o4r),e(lr,r4r),e(lr,qt),M(JL,qt,null),e(qt,t4r),e(qt,p6e),e(p6e,a4r),e(qt,n4r),e(qt,bc),e(bc,s4r),e(bc,_6e),e(_6e,l4r),e(bc,i4r),e(bc,fU),e(fU,d4r),e(bc,c4r),e(qt,f4r),M(_4,qt,null),e(lr,m4r),e(lr,Br),M(YL,Br,null),e(Br,g4r),e(Br,u6e),e(u6e,h4r),e(Br,p4r),e(Br,cn),e(cn,_4r),e(cn,b6e),e(b6e,u4r),e(cn,b4r),e(cn,v6e),e(v6e,v4r),e(cn,F4r),e(cn,F6e),e(F6e,T4r),e(cn,M4r),e(Br,E4r),e(Br,de),e(de,u4),e(u4,T6e),e(T6e,C4r),e(u4,w4r),e(u4,mU),e(mU,A4r),e(u4,y4r),e(de,L4r),e(de,b4),e(b4,M6e),e(M6e,x4r),e(b4,$4r),e(b4,gU),e(gU,k4r),e(b4,S4r),e(de,R4r),e(de,v4),e(v4,E6e),e(E6e,P4r),e(v4,B4r),e(v4,hU),e(hU,I4r),e(v4,q4r),e(de,N4r),e(de,F4),e(F4,C6e),e(C6e,j4r),e(F4,D4r),e(F4,pU),e(pU,G4r),e(F4,O4r),e(de,V4r),e(de,T4),e(T4,w6e),e(w6e,X4r),e(T4,z4r),e(T4,_U),e(_U,W4r),e(T4,Q4r),e(de,H4r),e(de,M4),e(M4,A6e),e(A6e,U4r),e(M4,J4r),e(M4,uU),e(uU,Y4r),e(M4,K4r),e(de,Z4r),e(de,E4),e(E4,y6e),e(y6e,eEr),e(E4,oEr),e(E4,bU),e(bU,rEr),e(E4,tEr),e(de,aEr),e(de,C4),e(C4,L6e),e(L6e,nEr),e(C4,sEr),e(C4,vU),e(vU,lEr),e(C4,iEr),e(de,dEr),e(de,w4),e(w4,x6e),e(x6e,cEr),e(w4,fEr),e(w4,FU),e(FU,mEr),e(w4,gEr),e(de,hEr),e(de,A4),e(A4,$6e),e($6e,pEr),e(A4,_Er),e(A4,TU),e(TU,uEr),e(A4,bEr),e(de,vEr),e(de,y4),e(y4,k6e),e(k6e,FEr),e(y4,TEr),e(y4,MU),e(MU,MEr),e(y4,EEr),e(de,CEr),e(de,L4),e(L4,S6e),e(S6e,wEr),e(L4,AEr),e(L4,EU),e(EU,yEr),e(L4,LEr),e(de,xEr),e(de,x4),e(x4,R6e),e(R6e,$Er),e(x4,kEr),e(x4,CU),e(CU,SEr),e(x4,REr),e(de,PEr),e(de,$4),e($4,P6e),e(P6e,BEr),e($4,IEr),e($4,wU),e(wU,qEr),e($4,NEr),e(de,jEr),e(de,k4),e(k4,B6e),e(B6e,DEr),e(k4,GEr),e(k4,AU),e(AU,OEr),e(k4,VEr),e(de,XEr),e(de,S4),e(S4,I6e),e(I6e,zEr),e(S4,WEr),e(S4,yU),e(yU,QEr),e(S4,HEr),e(de,UEr),e(de,R4),e(R4,q6e),e(q6e,JEr),e(R4,YEr),e(R4,LU),e(LU,KEr),e(R4,ZEr),e(de,eCr),e(de,P4),e(P4,N6e),e(N6e,oCr),e(P4,rCr),e(P4,xU),e(xU,tCr),e(P4,aCr),e(de,nCr),e(de,B4),e(B4,j6e),e(j6e,sCr),e(B4,lCr),e(B4,$U),e($U,iCr),e(B4,dCr),e(de,cCr),e(de,I4),e(I4,D6e),e(D6e,fCr),e(I4,mCr),e(I4,kU),e(kU,gCr),e(I4,hCr),e(Br,pCr),M(q4,Br,null),b(f,$Ne,u),b(f,vc,u),e(vc,N4),e(N4,G6e),M(KL,G6e,null),e(vc,_Cr),e(vc,O6e),e(O6e,uCr),b(f,kNe,u),b(f,ir,u),M(ZL,ir,null),e(ir,bCr),e(ir,Fc),e(Fc,vCr),e(Fc,SU),e(SU,FCr),e(Fc,TCr),e(Fc,RU),e(RU,MCr),e(Fc,ECr),e(ir,CCr),e(ir,e9),e(e9,wCr),e(e9,V6e),e(V6e,ACr),e(e9,yCr),e(ir,LCr),e(ir,Nt),M(o9,Nt,null),e(Nt,xCr),e(Nt,X6e),e(X6e,$Cr),e(Nt,kCr),e(Nt,Tc),e(Tc,SCr),e(Tc,z6e),e(z6e,RCr),e(Tc,PCr),e(Tc,PU),e(PU,BCr),e(Tc,ICr),e(Nt,qCr),M(j4,Nt,null),e(ir,NCr),e(ir,Ir),M(r9,Ir,null),e(Ir,jCr),e(Ir,W6e),e(W6e,DCr),e(Ir,GCr),e(Ir,fn),e(fn,OCr),e(fn,Q6e),e(Q6e,VCr),e(fn,XCr),e(fn,H6e),e(H6e,zCr),e(fn,WCr),e(fn,U6e),e(U6e,QCr),e(fn,HCr),e(Ir,UCr),e(Ir,ce),e(ce,D4),e(D4,J6e),e(J6e,JCr),e(D4,YCr),e(D4,BU),e(BU,KCr),e(D4,ZCr),e(ce,e5r),e(ce,G4),e(G4,Y6e),e(Y6e,o5r),e(G4,r5r),e(G4,IU),e(IU,t5r),e(G4,a5r),e(ce,n5r),e(ce,O4),e(O4,K6e),e(K6e,s5r),e(O4,l5r),e(O4,qU),e(qU,i5r),e(O4,d5r),e(ce,c5r),e(ce,V4),e(V4,Z6e),e(Z6e,f5r),e(V4,m5r),e(V4,NU),e(NU,g5r),e(V4,h5r),e(ce,p5r),e(ce,X4),e(X4,eTe),e(eTe,_5r),e(X4,u5r),e(X4,jU),e(jU,b5r),e(X4,v5r),e(ce,F5r),e(ce,z4),e(z4,oTe),e(oTe,T5r),e(z4,M5r),e(z4,DU),e(DU,E5r),e(z4,C5r),e(ce,w5r),e(ce,W4),e(W4,rTe),e(rTe,A5r),e(W4,y5r),e(W4,GU),e(GU,L5r),e(W4,x5r),e(ce,$5r),e(ce,Q4),e(Q4,tTe),e(tTe,k5r),e(Q4,S5r),e(Q4,OU),e(OU,R5r),e(Q4,P5r),e(ce,B5r),e(ce,H4),e(H4,aTe),e(aTe,I5r),e(H4,q5r),e(H4,VU),e(VU,N5r),e(H4,j5r),e(ce,D5r),e(ce,U4),e(U4,nTe),e(nTe,G5r),e(U4,O5r),e(U4,XU),e(XU,V5r),e(U4,X5r),e(ce,z5r),e(ce,J4),e(J4,sTe),e(sTe,W5r),e(J4,Q5r),e(J4,zU),e(zU,H5r),e(J4,U5r),e(ce,J5r),e(ce,Y4),e(Y4,lTe),e(lTe,Y5r),e(Y4,K5r),e(Y4,WU),e(WU,Z5r),e(Y4,e3r),e(ce,o3r),e(ce,K4),e(K4,iTe),e(iTe,r3r),e(K4,t3r),e(K4,QU),e(QU,a3r),e(K4,n3r),e(ce,s3r),e(ce,Z4),e(Z4,dTe),e(dTe,l3r),e(Z4,i3r),e(Z4,HU),e(HU,d3r),e(Z4,c3r),e(ce,f3r),e(ce,eE),e(eE,cTe),e(cTe,m3r),e(eE,g3r),e(eE,UU),e(UU,h3r),e(eE,p3r),e(ce,_3r),e(ce,oE),e(oE,fTe),e(fTe,u3r),e(oE,b3r),e(oE,JU),e(JU,v3r),e(oE,F3r),e(ce,T3r),e(ce,rE),e(rE,mTe),e(mTe,M3r),e(rE,E3r),e(rE,YU),e(YU,C3r),e(rE,w3r),e(ce,A3r),e(ce,tE),e(tE,gTe),e(gTe,y3r),e(tE,L3r),e(tE,KU),e(KU,x3r),e(tE,$3r),e(ce,k3r),e(ce,aE),e(aE,hTe),e(hTe,S3r),e(aE,R3r),e(aE,ZU),e(ZU,P3r),e(aE,B3r),e(ce,I3r),e(ce,nE),e(nE,pTe),e(pTe,q3r),e(nE,N3r),e(nE,eJ),e(eJ,j3r),e(nE,D3r),e(Ir,G3r),M(sE,Ir,null),b(f,SNe,u),b(f,Mc,u),e(Mc,lE),e(lE,_Te),M(t9,_Te,null),e(Mc,O3r),e(Mc,uTe),e(uTe,V3r),b(f,RNe,u),b(f,dr,u),M(a9,dr,null),e(dr,X3r),e(dr,Ec),e(Ec,z3r),e(Ec,oJ),e(oJ,W3r),e(Ec,Q3r),e(Ec,rJ),e(rJ,H3r),e(Ec,U3r),e(dr,J3r),e(dr,n9),e(n9,Y3r),e(n9,bTe),e(bTe,K3r),e(n9,Z3r),e(dr,ewr),e(dr,jt),M(s9,jt,null),e(jt,owr),e(jt,vTe),e(vTe,rwr),e(jt,twr),e(jt,Cc),e(Cc,awr),e(Cc,FTe),e(FTe,nwr),e(Cc,swr),e(Cc,tJ),e(tJ,lwr),e(Cc,iwr),e(jt,dwr),M(iE,jt,null),e(dr,cwr),e(dr,qr),M(l9,qr,null),e(qr,fwr),e(qr,TTe),e(TTe,mwr),e(qr,gwr),e(qr,mn),e(mn,hwr),e(mn,MTe),e(MTe,pwr),e(mn,_wr),e(mn,ETe),e(ETe,uwr),e(mn,bwr),e(mn,CTe),e(CTe,vwr),e(mn,Fwr),e(qr,Twr),e(qr,wTe),e(wTe,dE),e(dE,ATe),e(ATe,Mwr),e(dE,Ewr),e(dE,aJ),e(aJ,Cwr),e(dE,wwr),e(qr,Awr),M(cE,qr,null),b(f,PNe,u),b(f,wc,u),e(wc,fE),e(fE,yTe),M(i9,yTe,null),e(wc,ywr),e(wc,LTe),e(LTe,Lwr),b(f,BNe,u),b(f,cr,u),M(d9,cr,null),e(cr,xwr),e(cr,Ac),e(Ac,$wr),e(Ac,nJ),e(nJ,kwr),e(Ac,Swr),e(Ac,sJ),e(sJ,Rwr),e(Ac,Pwr),e(cr,Bwr),e(cr,c9),e(c9,Iwr),e(c9,xTe),e(xTe,qwr),e(c9,Nwr),e(cr,jwr),e(cr,Dt),M(f9,Dt,null),e(Dt,Dwr),e(Dt,$Te),e($Te,Gwr),e(Dt,Owr),e(Dt,yc),e(yc,Vwr),e(yc,kTe),e(kTe,Xwr),e(yc,zwr),e(yc,lJ),e(lJ,Wwr),e(yc,Qwr),e(Dt,Hwr),M(mE,Dt,null),e(cr,Uwr),e(cr,Nr),M(m9,Nr,null),e(Nr,Jwr),e(Nr,STe),e(STe,Ywr),e(Nr,Kwr),e(Nr,gn),e(gn,Zwr),e(gn,RTe),e(RTe,e0r),e(gn,o0r),e(gn,PTe),e(PTe,r0r),e(gn,t0r),e(gn,BTe),e(BTe,a0r),e(gn,n0r),e(Nr,s0r),e(Nr,ITe),e(ITe,gE),e(gE,qTe),e(qTe,l0r),e(gE,i0r),e(gE,iJ),e(iJ,d0r),e(gE,c0r),e(Nr,f0r),M(hE,Nr,null),b(f,INe,u),b(f,Lc,u),e(Lc,pE),e(pE,NTe),M(g9,NTe,null),e(Lc,m0r),e(Lc,jTe),e(jTe,g0r),b(f,qNe,u),b(f,fr,u),M(h9,fr,null),e(fr,h0r),e(fr,xc),e(xc,p0r),e(xc,dJ),e(dJ,_0r),e(xc,u0r),e(xc,cJ),e(cJ,b0r),e(xc,v0r),e(fr,F0r),e(fr,p9),e(p9,T0r),e(p9,DTe),e(DTe,M0r),e(p9,E0r),e(fr,C0r),e(fr,Gt),M(_9,Gt,null),e(Gt,w0r),e(Gt,GTe),e(GTe,A0r),e(Gt,y0r),e(Gt,$c),e($c,L0r),e($c,OTe),e(OTe,x0r),e($c,$0r),e($c,fJ),e(fJ,k0r),e($c,S0r),e(Gt,R0r),M(_E,Gt,null),e(fr,P0r),e(fr,jr),M(u9,jr,null),e(jr,B0r),e(jr,VTe),e(VTe,I0r),e(jr,q0r),e(jr,hn),e(hn,N0r),e(hn,XTe),e(XTe,j0r),e(hn,D0r),e(hn,zTe),e(zTe,G0r),e(hn,O0r),e(hn,WTe),e(WTe,V0r),e(hn,X0r),e(jr,z0r),e(jr,te),e(te,uE),e(uE,QTe),e(QTe,W0r),e(uE,Q0r),e(uE,mJ),e(mJ,H0r),e(uE,U0r),e(te,J0r),e(te,bE),e(bE,HTe),e(HTe,Y0r),e(bE,K0r),e(bE,gJ),e(gJ,Z0r),e(bE,eAr),e(te,oAr),e(te,vE),e(vE,UTe),e(UTe,rAr),e(vE,tAr),e(vE,hJ),e(hJ,aAr),e(vE,nAr),e(te,sAr),e(te,FE),e(FE,JTe),e(JTe,lAr),e(FE,iAr),e(FE,pJ),e(pJ,dAr),e(FE,cAr),e(te,fAr),e(te,TE),e(TE,YTe),e(YTe,mAr),e(TE,gAr),e(TE,_J),e(_J,hAr),e(TE,pAr),e(te,_Ar),e(te,ME),e(ME,KTe),e(KTe,uAr),e(ME,bAr),e(ME,uJ),e(uJ,vAr),e(ME,FAr),e(te,TAr),e(te,EE),e(EE,ZTe),e(ZTe,MAr),e(EE,EAr),e(EE,bJ),e(bJ,CAr),e(EE,wAr),e(te,AAr),e(te,CE),e(CE,e8e),e(e8e,yAr),e(CE,LAr),e(CE,vJ),e(vJ,xAr),e(CE,$Ar),e(te,kAr),e(te,wE),e(wE,o8e),e(o8e,SAr),e(wE,RAr),e(wE,FJ),e(FJ,PAr),e(wE,BAr),e(te,IAr),e(te,AE),e(AE,r8e),e(r8e,qAr),e(AE,NAr),e(AE,TJ),e(TJ,jAr),e(AE,DAr),e(te,GAr),e(te,yE),e(yE,t8e),e(t8e,OAr),e(yE,VAr),e(yE,MJ),e(MJ,XAr),e(yE,zAr),e(te,WAr),e(te,LE),e(LE,a8e),e(a8e,QAr),e(LE,HAr),e(LE,EJ),e(EJ,UAr),e(LE,JAr),e(te,YAr),e(te,xE),e(xE,n8e),e(n8e,KAr),e(xE,ZAr),e(xE,CJ),e(CJ,eyr),e(xE,oyr),e(te,ryr),e(te,$E),e($E,s8e),e(s8e,tyr),e($E,ayr),e($E,wJ),e(wJ,nyr),e($E,syr),e(te,lyr),e(te,kE),e(kE,l8e),e(l8e,iyr),e(kE,dyr),e(kE,AJ),e(AJ,cyr),e(kE,fyr),e(te,myr),e(te,SE),e(SE,i8e),e(i8e,gyr),e(SE,hyr),e(SE,yJ),e(yJ,pyr),e(SE,_yr),e(te,uyr),e(te,RE),e(RE,d8e),e(d8e,byr),e(RE,vyr),e(RE,LJ),e(LJ,Fyr),e(RE,Tyr),e(te,Myr),e(te,PE),e(PE,c8e),e(c8e,Eyr),e(PE,Cyr),e(PE,xJ),e(xJ,wyr),e(PE,Ayr),e(te,yyr),e(te,BE),e(BE,f8e),e(f8e,Lyr),e(BE,xyr),e(BE,$J),e($J,$yr),e(BE,kyr),e(te,Syr),e(te,IE),e(IE,m8e),e(m8e,Ryr),e(IE,Pyr),e(IE,kJ),e(kJ,Byr),e(IE,Iyr),e(te,qyr),e(te,qE),e(qE,g8e),e(g8e,Nyr),e(qE,jyr),e(qE,SJ),e(SJ,Dyr),e(qE,Gyr),e(te,Oyr),e(te,NE),e(NE,h8e),e(h8e,Vyr),e(NE,Xyr),e(NE,RJ),e(RJ,zyr),e(NE,Wyr),e(te,Qyr),e(te,jE),e(jE,p8e),e(p8e,Hyr),e(jE,Uyr),e(jE,PJ),e(PJ,Jyr),e(jE,Yyr),e(te,Kyr),e(te,DE),e(DE,_8e),e(_8e,Zyr),e(DE,eLr),e(DE,BJ),e(BJ,oLr),e(DE,rLr),e(te,tLr),e(te,GE),e(GE,u8e),e(u8e,aLr),e(GE,nLr),e(GE,IJ),e(IJ,sLr),e(GE,lLr),e(jr,iLr),M(OE,jr,null),b(f,NNe,u),b(f,kc,u),e(kc,VE),e(VE,b8e),M(b9,b8e,null),e(kc,dLr),e(kc,v8e),e(v8e,cLr),b(f,jNe,u),b(f,mr,u),M(v9,mr,null),e(mr,fLr),e(mr,Sc),e(Sc,mLr),e(Sc,qJ),e(qJ,gLr),e(Sc,hLr),e(Sc,NJ),e(NJ,pLr),e(Sc,_Lr),e(mr,uLr),e(mr,F9),e(F9,bLr),e(F9,F8e),e(F8e,vLr),e(F9,FLr),e(mr,TLr),e(mr,Ot),M(T9,Ot,null),e(Ot,MLr),e(Ot,T8e),e(T8e,ELr),e(Ot,CLr),e(Ot,Rc),e(Rc,wLr),e(Rc,M8e),e(M8e,ALr),e(Rc,yLr),e(Rc,jJ),e(jJ,LLr),e(Rc,xLr),e(Ot,$Lr),M(XE,Ot,null),e(mr,kLr),e(mr,Dr),M(M9,Dr,null),e(Dr,SLr),e(Dr,E8e),e(E8e,RLr),e(Dr,PLr),e(Dr,pn),e(pn,BLr),e(pn,C8e),e(C8e,ILr),e(pn,qLr),e(pn,w8e),e(w8e,NLr),e(pn,jLr),e(pn,A8e),e(A8e,DLr),e(pn,GLr),e(Dr,OLr),e(Dr,Re),e(Re,zE),e(zE,y8e),e(y8e,VLr),e(zE,XLr),e(zE,DJ),e(DJ,zLr),e(zE,WLr),e(Re,QLr),e(Re,WE),e(WE,L8e),e(L8e,HLr),e(WE,ULr),e(WE,GJ),e(GJ,JLr),e(WE,YLr),e(Re,KLr),e(Re,QE),e(QE,x8e),e(x8e,ZLr),e(QE,e9r),e(QE,OJ),e(OJ,o9r),e(QE,r9r),e(Re,t9r),e(Re,HE),e(HE,$8e),e($8e,a9r),e(HE,n9r),e(HE,VJ),e(VJ,s9r),e(HE,l9r),e(Re,i9r),e(Re,UE),e(UE,k8e),e(k8e,d9r),e(UE,c9r),e(UE,XJ),e(XJ,f9r),e(UE,m9r),e(Re,g9r),e(Re,JE),e(JE,S8e),e(S8e,h9r),e(JE,p9r),e(JE,zJ),e(zJ,_9r),e(JE,u9r),e(Re,b9r),e(Re,YE),e(YE,R8e),e(R8e,v9r),e(YE,F9r),e(YE,WJ),e(WJ,T9r),e(YE,M9r),e(Re,E9r),e(Re,KE),e(KE,P8e),e(P8e,C9r),e(KE,w9r),e(KE,QJ),e(QJ,A9r),e(KE,y9r),e(Re,L9r),e(Re,ZE),e(ZE,B8e),e(B8e,x9r),e(ZE,$9r),e(ZE,HJ),e(HJ,k9r),e(ZE,S9r),e(Dr,R9r),M(eC,Dr,null),b(f,DNe,u),b(f,Pc,u),e(Pc,oC),e(oC,I8e),M(E9,I8e,null),e(Pc,P9r),e(Pc,q8e),e(q8e,B9r),b(f,GNe,u),b(f,gr,u),M(C9,gr,null),e(gr,I9r),e(gr,Bc),e(Bc,q9r),e(Bc,UJ),e(UJ,N9r),e(Bc,j9r),e(Bc,JJ),e(JJ,D9r),e(Bc,G9r),e(gr,O9r),e(gr,w9),e(w9,V9r),e(w9,N8e),e(N8e,X9r),e(w9,z9r),e(gr,W9r),e(gr,Vt),M(A9,Vt,null),e(Vt,Q9r),e(Vt,j8e),e(j8e,H9r),e(Vt,U9r),e(Vt,Ic),e(Ic,J9r),e(Ic,D8e),e(D8e,Y9r),e(Ic,K9r),e(Ic,YJ),e(YJ,Z9r),e(Ic,exr),e(Vt,oxr),M(rC,Vt,null),e(gr,rxr),e(gr,Gr),M(y9,Gr,null),e(Gr,txr),e(Gr,G8e),e(G8e,axr),e(Gr,nxr),e(Gr,_n),e(_n,sxr),e(_n,O8e),e(O8e,lxr),e(_n,ixr),e(_n,V8e),e(V8e,dxr),e(_n,cxr),e(_n,X8e),e(X8e,fxr),e(_n,mxr),e(Gr,gxr),e(Gr,Ee),e(Ee,tC),e(tC,z8e),e(z8e,hxr),e(tC,pxr),e(tC,KJ),e(KJ,_xr),e(tC,uxr),e(Ee,bxr),e(Ee,aC),e(aC,W8e),e(W8e,vxr),e(aC,Fxr),e(aC,ZJ),e(ZJ,Txr),e(aC,Mxr),e(Ee,Exr),e(Ee,nC),e(nC,Q8e),e(Q8e,Cxr),e(nC,wxr),e(nC,eY),e(eY,Axr),e(nC,yxr),e(Ee,Lxr),e(Ee,sC),e(sC,H8e),e(H8e,xxr),e(sC,$xr),e(sC,oY),e(oY,kxr),e(sC,Sxr),e(Ee,Rxr),e(Ee,lC),e(lC,U8e),e(U8e,Pxr),e(lC,Bxr),e(lC,rY),e(rY,Ixr),e(lC,qxr),e(Ee,Nxr),e(Ee,iC),e(iC,J8e),e(J8e,jxr),e(iC,Dxr),e(iC,tY),e(tY,Gxr),e(iC,Oxr),e(Ee,Vxr),e(Ee,dC),e(dC,Y8e),e(Y8e,Xxr),e(dC,zxr),e(dC,aY),e(aY,Wxr),e(dC,Qxr),e(Ee,Hxr),e(Ee,cC),e(cC,K8e),e(K8e,Uxr),e(cC,Jxr),e(cC,nY),e(nY,Yxr),e(cC,Kxr),e(Ee,Zxr),e(Ee,fC),e(fC,Z8e),e(Z8e,e$r),e(fC,o$r),e(fC,sY),e(sY,r$r),e(fC,t$r),e(Ee,a$r),e(Ee,mC),e(mC,e7e),e(e7e,n$r),e(mC,s$r),e(mC,lY),e(lY,l$r),e(mC,i$r),e(Ee,d$r),e(Ee,gC),e(gC,o7e),e(o7e,c$r),e(gC,f$r),e(gC,iY),e(iY,m$r),e(gC,g$r),e(Ee,h$r),e(Ee,hC),e(hC,r7e),e(r7e,p$r),e(hC,_$r),e(hC,dY),e(dY,u$r),e(hC,b$r),e(Gr,v$r),M(pC,Gr,null),b(f,ONe,u),b(f,qc,u),e(qc,_C),e(_C,t7e),M(L9,t7e,null),e(qc,F$r),e(qc,a7e),e(a7e,T$r),b(f,VNe,u),b(f,hr,u),M(x9,hr,null),e(hr,M$r),e(hr,Nc),e(Nc,E$r),e(Nc,cY),e(cY,C$r),e(Nc,w$r),e(Nc,fY),e(fY,A$r),e(Nc,y$r),e(hr,L$r),e(hr,$9),e($9,x$r),e($9,n7e),e(n7e,$$r),e($9,k$r),e(hr,S$r),e(hr,Xt),M(k9,Xt,null),e(Xt,R$r),e(Xt,s7e),e(s7e,P$r),e(Xt,B$r),e(Xt,jc),e(jc,I$r),e(jc,l7e),e(l7e,q$r),e(jc,N$r),e(jc,mY),e(mY,j$r),e(jc,D$r),e(Xt,G$r),M(uC,Xt,null),e(hr,O$r),e(hr,Or),M(S9,Or,null),e(Or,V$r),e(Or,i7e),e(i7e,X$r),e(Or,z$r),e(Or,un),e(un,W$r),e(un,d7e),e(d7e,Q$r),e(un,H$r),e(un,c7e),e(c7e,U$r),e(un,J$r),e(un,f7e),e(f7e,Y$r),e(un,K$r),e(Or,Z$r),e(Or,Le),e(Le,bC),e(bC,m7e),e(m7e,ekr),e(bC,okr),e(bC,gY),e(gY,rkr),e(bC,tkr),e(Le,akr),e(Le,vC),e(vC,g7e),e(g7e,nkr),e(vC,skr),e(vC,hY),e(hY,lkr),e(vC,ikr),e(Le,dkr),e(Le,FC),e(FC,h7e),e(h7e,ckr),e(FC,fkr),e(FC,pY),e(pY,mkr),e(FC,gkr),e(Le,hkr),e(Le,TC),e(TC,p7e),e(p7e,pkr),e(TC,_kr),e(TC,_Y),e(_Y,ukr),e(TC,bkr),e(Le,vkr),e(Le,MC),e(MC,_7e),e(_7e,Fkr),e(MC,Tkr),e(MC,uY),e(uY,Mkr),e(MC,Ekr),e(Le,Ckr),e(Le,EC),e(EC,u7e),e(u7e,wkr),e(EC,Akr),e(EC,bY),e(bY,ykr),e(EC,Lkr),e(Le,xkr),e(Le,CC),e(CC,b7e),e(b7e,$kr),e(CC,kkr),e(CC,vY),e(vY,Skr),e(CC,Rkr),e(Le,Pkr),e(Le,wC),e(wC,v7e),e(v7e,Bkr),e(wC,Ikr),e(wC,FY),e(FY,qkr),e(wC,Nkr),e(Le,jkr),e(Le,AC),e(AC,F7e),e(F7e,Dkr),e(AC,Gkr),e(AC,TY),e(TY,Okr),e(AC,Vkr),e(Le,Xkr),e(Le,yC),e(yC,T7e),e(T7e,zkr),e(yC,Wkr),e(yC,MY),e(MY,Qkr),e(yC,Hkr),e(Or,Ukr),M(LC,Or,null),b(f,XNe,u),b(f,Dc,u),e(Dc,xC),e(xC,M7e),M(R9,M7e,null),e(Dc,Jkr),e(Dc,E7e),e(E7e,Ykr),b(f,zNe,u),b(f,pr,u),M(P9,pr,null),e(pr,Kkr),e(pr,Gc),e(Gc,Zkr),e(Gc,EY),e(EY,eSr),e(Gc,oSr),e(Gc,CY),e(CY,rSr),e(Gc,tSr),e(pr,aSr),e(pr,B9),e(B9,nSr),e(B9,C7e),e(C7e,sSr),e(B9,lSr),e(pr,iSr),e(pr,zt),M(I9,zt,null),e(zt,dSr),e(zt,w7e),e(w7e,cSr),e(zt,fSr),e(zt,Oc),e(Oc,mSr),e(Oc,A7e),e(A7e,gSr),e(Oc,hSr),e(Oc,wY),e(wY,pSr),e(Oc,_Sr),e(zt,uSr),M($C,zt,null),e(pr,bSr),e(pr,Vr),M(q9,Vr,null),e(Vr,vSr),e(Vr,y7e),e(y7e,FSr),e(Vr,TSr),e(Vr,bn),e(bn,MSr),e(bn,L7e),e(L7e,ESr),e(bn,CSr),e(bn,x7e),e(x7e,wSr),e(bn,ASr),e(bn,$7e),e($7e,ySr),e(bn,LSr),e(Vr,xSr),e(Vr,Pe),e(Pe,kC),e(kC,k7e),e(k7e,$Sr),e(kC,kSr),e(kC,AY),e(AY,SSr),e(kC,RSr),e(Pe,PSr),e(Pe,SC),e(SC,S7e),e(S7e,BSr),e(SC,ISr),e(SC,yY),e(yY,qSr),e(SC,NSr),e(Pe,jSr),e(Pe,RC),e(RC,R7e),e(R7e,DSr),e(RC,GSr),e(RC,LY),e(LY,OSr),e(RC,VSr),e(Pe,XSr),e(Pe,PC),e(PC,P7e),e(P7e,zSr),e(PC,WSr),e(PC,xY),e(xY,QSr),e(PC,HSr),e(Pe,USr),e(Pe,BC),e(BC,B7e),e(B7e,JSr),e(BC,YSr),e(BC,$Y),e($Y,KSr),e(BC,ZSr),e(Pe,eRr),e(Pe,IC),e(IC,I7e),e(I7e,oRr),e(IC,rRr),e(IC,kY),e(kY,tRr),e(IC,aRr),e(Pe,nRr),e(Pe,qC),e(qC,q7e),e(q7e,sRr),e(qC,lRr),e(qC,SY),e(SY,iRr),e(qC,dRr),e(Pe,cRr),e(Pe,NC),e(NC,N7e),e(N7e,fRr),e(NC,mRr),e(NC,RY),e(RY,gRr),e(NC,hRr),e(Pe,pRr),e(Pe,jC),e(jC,j7e),e(j7e,_Rr),e(jC,uRr),e(jC,PY),e(PY,bRr),e(jC,vRr),e(Vr,FRr),M(DC,Vr,null),b(f,WNe,u),b(f,Vc,u),e(Vc,GC),e(GC,D7e),M(N9,D7e,null),e(Vc,TRr),e(Vc,G7e),e(G7e,MRr),b(f,QNe,u),b(f,_r,u),M(j9,_r,null),e(_r,ERr),e(_r,Xc),e(Xc,CRr),e(Xc,BY),e(BY,wRr),e(Xc,ARr),e(Xc,IY),e(IY,yRr),e(Xc,LRr),e(_r,xRr),e(_r,D9),e(D9,$Rr),e(D9,O7e),e(O7e,kRr),e(D9,SRr),e(_r,RRr),e(_r,Wt),M(G9,Wt,null),e(Wt,PRr),e(Wt,V7e),e(V7e,BRr),e(Wt,IRr),e(Wt,zc),e(zc,qRr),e(zc,X7e),e(X7e,NRr),e(zc,jRr),e(zc,qY),e(qY,DRr),e(zc,GRr),e(Wt,ORr),M(OC,Wt,null),e(_r,VRr),e(_r,Xr),M(O9,Xr,null),e(Xr,XRr),e(Xr,z7e),e(z7e,zRr),e(Xr,WRr),e(Xr,vn),e(vn,QRr),e(vn,W7e),e(W7e,HRr),e(vn,URr),e(vn,Q7e),e(Q7e,JRr),e(vn,YRr),e(vn,H7e),e(H7e,KRr),e(vn,ZRr),e(Xr,ePr),e(Xr,xe),e(xe,VC),e(VC,U7e),e(U7e,oPr),e(VC,rPr),e(VC,NY),e(NY,tPr),e(VC,aPr),e(xe,nPr),e(xe,XC),e(XC,J7e),e(J7e,sPr),e(XC,lPr),e(XC,jY),e(jY,iPr),e(XC,dPr),e(xe,cPr),e(xe,zC),e(zC,Y7e),e(Y7e,fPr),e(zC,mPr),e(zC,DY),e(DY,gPr),e(zC,hPr),e(xe,pPr),e(xe,WC),e(WC,K7e),e(K7e,_Pr),e(WC,uPr),e(WC,GY),e(GY,bPr),e(WC,vPr),e(xe,FPr),e(xe,QC),e(QC,Z7e),e(Z7e,TPr),e(QC,MPr),e(QC,OY),e(OY,EPr),e(QC,CPr),e(xe,wPr),e(xe,HC),e(HC,eMe),e(eMe,APr),e(HC,yPr),e(HC,VY),e(VY,LPr),e(HC,xPr),e(xe,$Pr),e(xe,UC),e(UC,oMe),e(oMe,kPr),e(UC,SPr),e(UC,XY),e(XY,RPr),e(UC,PPr),e(xe,BPr),e(xe,JC),e(JC,rMe),e(rMe,IPr),e(JC,qPr),e(JC,zY),e(zY,NPr),e(JC,jPr),e(xe,DPr),e(xe,YC),e(YC,tMe),e(tMe,GPr),e(YC,OPr),e(YC,WY),e(WY,VPr),e(YC,XPr),e(xe,zPr),e(xe,KC),e(KC,aMe),e(aMe,WPr),e(KC,QPr),e(KC,QY),e(QY,HPr),e(KC,UPr),e(Xr,JPr),M(ZC,Xr,null),b(f,HNe,u),b(f,Wc,u),e(Wc,e5),e(e5,nMe),M(V9,nMe,null),e(Wc,YPr),e(Wc,sMe),e(sMe,KPr),b(f,UNe,u),b(f,ur,u),M(X9,ur,null),e(ur,ZPr),e(ur,Qc),e(Qc,eBr),e(Qc,HY),e(HY,oBr),e(Qc,rBr),e(Qc,UY),e(UY,tBr),e(Qc,aBr),e(ur,nBr),e(ur,z9),e(z9,sBr),e(z9,lMe),e(lMe,lBr),e(z9,iBr),e(ur,dBr),e(ur,Qt),M(W9,Qt,null),e(Qt,cBr),e(Qt,iMe),e(iMe,fBr),e(Qt,mBr),e(Qt,Hc),e(Hc,gBr),e(Hc,dMe),e(dMe,hBr),e(Hc,pBr),e(Hc,JY),e(JY,_Br),e(Hc,uBr),e(Qt,bBr),M(o5,Qt,null),e(ur,vBr),e(ur,zr),M(Q9,zr,null),e(zr,FBr),e(zr,cMe),e(cMe,TBr),e(zr,MBr),e(zr,Fn),e(Fn,EBr),e(Fn,fMe),e(fMe,CBr),e(Fn,wBr),e(Fn,mMe),e(mMe,ABr),e(Fn,yBr),e(Fn,gMe),e(gMe,LBr),e(Fn,xBr),e(zr,$Br),e(zr,$e),e($e,r5),e(r5,hMe),e(hMe,kBr),e(r5,SBr),e(r5,YY),e(YY,RBr),e(r5,PBr),e($e,BBr),e($e,t5),e(t5,pMe),e(pMe,IBr),e(t5,qBr),e(t5,KY),e(KY,NBr),e(t5,jBr),e($e,DBr),e($e,a5),e(a5,_Me),e(_Me,GBr),e(a5,OBr),e(a5,ZY),e(ZY,VBr),e(a5,XBr),e($e,zBr),e($e,n5),e(n5,uMe),e(uMe,WBr),e(n5,QBr),e(n5,eK),e(eK,HBr),e(n5,UBr),e($e,JBr),e($e,s5),e(s5,bMe),e(bMe,YBr),e(s5,KBr),e(s5,oK),e(oK,ZBr),e(s5,eIr),e($e,oIr),e($e,l5),e(l5,vMe),e(vMe,rIr),e(l5,tIr),e(l5,rK),e(rK,aIr),e(l5,nIr),e($e,sIr),e($e,i5),e(i5,FMe),e(FMe,lIr),e(i5,iIr),e(i5,tK),e(tK,dIr),e(i5,cIr),e($e,fIr),e($e,d5),e(d5,TMe),e(TMe,mIr),e(d5,gIr),e(d5,aK),e(aK,hIr),e(d5,pIr),e($e,_Ir),e($e,c5),e(c5,MMe),e(MMe,uIr),e(c5,bIr),e(c5,nK),e(nK,vIr),e(c5,FIr),e($e,TIr),e($e,f5),e(f5,EMe),e(EMe,MIr),e(f5,EIr),e(f5,sK),e(sK,CIr),e(f5,wIr),e(zr,AIr),M(m5,zr,null),b(f,JNe,u),b(f,Uc,u),e(Uc,g5),e(g5,CMe),M(H9,CMe,null),e(Uc,yIr),e(Uc,wMe),e(wMe,LIr),b(f,YNe,u),b(f,br,u),M(U9,br,null),e(br,xIr),e(br,Jc),e(Jc,$Ir),e(Jc,lK),e(lK,kIr),e(Jc,SIr),e(Jc,iK),e(iK,RIr),e(Jc,PIr),e(br,BIr),e(br,J9),e(J9,IIr),e(J9,AMe),e(AMe,qIr),e(J9,NIr),e(br,jIr),e(br,Ht),M(Y9,Ht,null),e(Ht,DIr),e(Ht,yMe),e(yMe,GIr),e(Ht,OIr),e(Ht,Yc),e(Yc,VIr),e(Yc,LMe),e(LMe,XIr),e(Yc,zIr),e(Yc,dK),e(dK,WIr),e(Yc,QIr),e(Ht,HIr),M(h5,Ht,null),e(br,UIr),e(br,Wr),M(K9,Wr,null),e(Wr,JIr),e(Wr,xMe),e(xMe,YIr),e(Wr,KIr),e(Wr,Tn),e(Tn,ZIr),e(Tn,$Me),e($Me,eqr),e(Tn,oqr),e(Tn,kMe),e(kMe,rqr),e(Tn,tqr),e(Tn,SMe),e(SMe,aqr),e(Tn,nqr),e(Wr,sqr),e(Wr,De),e(De,p5),e(p5,RMe),e(RMe,lqr),e(p5,iqr),e(p5,cK),e(cK,dqr),e(p5,cqr),e(De,fqr),e(De,_5),e(_5,PMe),e(PMe,mqr),e(_5,gqr),e(_5,fK),e(fK,hqr),e(_5,pqr),e(De,_qr),e(De,u5),e(u5,BMe),e(BMe,uqr),e(u5,bqr),e(u5,mK),e(mK,vqr),e(u5,Fqr),e(De,Tqr),e(De,b5),e(b5,IMe),e(IMe,Mqr),e(b5,Eqr),e(b5,gK),e(gK,Cqr),e(b5,wqr),e(De,Aqr),e(De,v5),e(v5,qMe),e(qMe,yqr),e(v5,Lqr),e(v5,hK),e(hK,xqr),e(v5,$qr),e(De,kqr),e(De,F5),e(F5,NMe),e(NMe,Sqr),e(F5,Rqr),e(F5,pK),e(pK,Pqr),e(F5,Bqr),e(De,Iqr),e(De,T5),e(T5,jMe),e(jMe,qqr),e(T5,Nqr),e(T5,_K),e(_K,jqr),e(T5,Dqr),e(De,Gqr),e(De,M5),e(M5,DMe),e(DMe,Oqr),e(M5,Vqr),e(M5,uK),e(uK,Xqr),e(M5,zqr),e(Wr,Wqr),M(E5,Wr,null),b(f,KNe,u),b(f,Kc,u),e(Kc,C5),e(C5,GMe),M(Z9,GMe,null),e(Kc,Qqr),e(Kc,OMe),e(OMe,Hqr),b(f,ZNe,u),b(f,vr,u),M(ex,vr,null),e(vr,Uqr),e(vr,Zc),e(Zc,Jqr),e(Zc,bK),e(bK,Yqr),e(Zc,Kqr),e(Zc,vK),e(vK,Zqr),e(Zc,eNr),e(vr,oNr),e(vr,ox),e(ox,rNr),e(ox,VMe),e(VMe,tNr),e(ox,aNr),e(vr,nNr),e(vr,Ut),M(rx,Ut,null),e(Ut,sNr),e(Ut,XMe),e(XMe,lNr),e(Ut,iNr),e(Ut,ef),e(ef,dNr),e(ef,zMe),e(zMe,cNr),e(ef,fNr),e(ef,FK),e(FK,mNr),e(ef,gNr),e(Ut,hNr),M(w5,Ut,null),e(vr,pNr),e(vr,Qr),M(tx,Qr,null),e(Qr,_Nr),e(Qr,WMe),e(WMe,uNr),e(Qr,bNr),e(Qr,Mn),e(Mn,vNr),e(Mn,QMe),e(QMe,FNr),e(Mn,TNr),e(Mn,HMe),e(HMe,MNr),e(Mn,ENr),e(Mn,UMe),e(UMe,CNr),e(Mn,wNr),e(Qr,ANr),e(Qr,Ge),e(Ge,A5),e(A5,JMe),e(JMe,yNr),e(A5,LNr),e(A5,TK),e(TK,xNr),e(A5,$Nr),e(Ge,kNr),e(Ge,y5),e(y5,YMe),e(YMe,SNr),e(y5,RNr),e(y5,MK),e(MK,PNr),e(y5,BNr),e(Ge,INr),e(Ge,L5),e(L5,KMe),e(KMe,qNr),e(L5,NNr),e(L5,EK),e(EK,jNr),e(L5,DNr),e(Ge,GNr),e(Ge,x5),e(x5,ZMe),e(ZMe,ONr),e(x5,VNr),e(x5,CK),e(CK,XNr),e(x5,zNr),e(Ge,WNr),e(Ge,$5),e($5,e4e),e(e4e,QNr),e($5,HNr),e($5,wK),e(wK,UNr),e($5,JNr),e(Ge,YNr),e(Ge,k5),e(k5,o4e),e(o4e,KNr),e(k5,ZNr),e(k5,AK),e(AK,ejr),e(k5,ojr),e(Ge,rjr),e(Ge,S5),e(S5,r4e),e(r4e,tjr),e(S5,ajr),e(S5,yK),e(yK,njr),e(S5,sjr),e(Ge,ljr),e(Ge,R5),e(R5,t4e),e(t4e,ijr),e(R5,djr),e(R5,LK),e(LK,cjr),e(R5,fjr),e(Qr,mjr),M(P5,Qr,null),b(f,eje,u),b(f,of,u),e(of,B5),e(B5,a4e),M(ax,a4e,null),e(of,gjr),e(of,n4e),e(n4e,hjr),b(f,oje,u),b(f,Fr,u),M(nx,Fr,null),e(Fr,pjr),e(Fr,rf),e(rf,_jr),e(rf,xK),e(xK,ujr),e(rf,bjr),e(rf,$K),e($K,vjr),e(rf,Fjr),e(Fr,Tjr),e(Fr,sx),e(sx,Mjr),e(sx,s4e),e(s4e,Ejr),e(sx,Cjr),e(Fr,wjr),e(Fr,Jt),M(lx,Jt,null),e(Jt,Ajr),e(Jt,l4e),e(l4e,yjr),e(Jt,Ljr),e(Jt,tf),e(tf,xjr),e(tf,i4e),e(i4e,$jr),e(tf,kjr),e(tf,kK),e(kK,Sjr),e(tf,Rjr),e(Jt,Pjr),M(I5,Jt,null),e(Fr,Bjr),e(Fr,Hr),M(ix,Hr,null),e(Hr,Ijr),e(Hr,d4e),e(d4e,qjr),e(Hr,Njr),e(Hr,En),e(En,jjr),e(En,c4e),e(c4e,Djr),e(En,Gjr),e(En,f4e),e(f4e,Ojr),e(En,Vjr),e(En,m4e),e(m4e,Xjr),e(En,zjr),e(Hr,Wjr),e(Hr,g4e),e(g4e,q5),e(q5,h4e),e(h4e,Qjr),e(q5,Hjr),e(q5,SK),e(SK,Ujr),e(q5,Jjr),e(Hr,Yjr),M(N5,Hr,null),b(f,rje,u),b(f,af,u),e(af,j5),e(j5,p4e),M(dx,p4e,null),e(af,Kjr),e(af,_4e),e(_4e,Zjr),b(f,tje,u),b(f,Tr,u),M(cx,Tr,null),e(Tr,eDr),e(Tr,nf),e(nf,oDr),e(nf,RK),e(RK,rDr),e(nf,tDr),e(nf,PK),e(PK,aDr),e(nf,nDr),e(Tr,sDr),e(Tr,fx),e(fx,lDr),e(fx,u4e),e(u4e,iDr),e(fx,dDr),e(Tr,cDr),e(Tr,Yt),M(mx,Yt,null),e(Yt,fDr),e(Yt,b4e),e(b4e,mDr),e(Yt,gDr),e(Yt,sf),e(sf,hDr),e(sf,v4e),e(v4e,pDr),e(sf,_Dr),e(sf,BK),e(BK,uDr),e(sf,bDr),e(Yt,vDr),M(D5,Yt,null),e(Tr,FDr),e(Tr,Ur),M(gx,Ur,null),e(Ur,TDr),e(Ur,F4e),e(F4e,MDr),e(Ur,EDr),e(Ur,Cn),e(Cn,CDr),e(Cn,T4e),e(T4e,wDr),e(Cn,ADr),e(Cn,M4e),e(M4e,yDr),e(Cn,LDr),e(Cn,E4e),e(E4e,xDr),e(Cn,$Dr),e(Ur,kDr),e(Ur,hx),e(hx,G5),e(G5,C4e),e(C4e,SDr),e(G5,RDr),e(G5,IK),e(IK,PDr),e(G5,BDr),e(hx,IDr),e(hx,O5),e(O5,w4e),e(w4e,qDr),e(O5,NDr),e(O5,qK),e(qK,jDr),e(O5,DDr),e(Ur,GDr),M(V5,Ur,null),b(f,aje,u),b(f,lf,u),e(lf,X5),e(X5,A4e),M(px,A4e,null),e(lf,ODr),e(lf,y4e),e(y4e,VDr),b(f,nje,u),b(f,Mr,u),M(_x,Mr,null),e(Mr,XDr),e(Mr,df),e(df,zDr),e(df,NK),e(NK,WDr),e(df,QDr),e(df,jK),e(jK,HDr),e(df,UDr),e(Mr,JDr),e(Mr,ux),e(ux,YDr),e(ux,L4e),e(L4e,KDr),e(ux,ZDr),e(Mr,eGr),e(Mr,Kt),M(bx,Kt,null),e(Kt,oGr),e(Kt,x4e),e(x4e,rGr),e(Kt,tGr),e(Kt,cf),e(cf,aGr),e(cf,$4e),e($4e,nGr),e(cf,sGr),e(cf,DK),e(DK,lGr),e(cf,iGr),e(Kt,dGr),M(z5,Kt,null),e(Mr,cGr),e(Mr,Jr),M(vx,Jr,null),e(Jr,fGr),e(Jr,k4e),e(k4e,mGr),e(Jr,gGr),e(Jr,wn),e(wn,hGr),e(wn,S4e),e(S4e,pGr),e(wn,_Gr),e(wn,R4e),e(R4e,uGr),e(wn,bGr),e(wn,P4e),e(P4e,vGr),e(wn,FGr),e(Jr,TGr),e(Jr,B4e),e(B4e,W5),e(W5,I4e),e(I4e,MGr),e(W5,EGr),e(W5,GK),e(GK,CGr),e(W5,wGr),e(Jr,AGr),M(Q5,Jr,null),sje=!0},p(f,[u]){const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),vf.$set(Fx);const q4e={};u&2&&(q4e.$$scope={dirty:u,ctx:f}),Fg.$set(q4e);const N4e={};u&2&&(N4e.$$scope={dirty:u,ctx:f}),eh.$set(N4e);const j4e={};u&2&&(j4e.$$scope={dirty:u,ctx:f}),kh.$set(j4e);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),Sh.$set(Tx);const D4e={};u&2&&(D4e.$$scope={dirty:u,ctx:f}),Yh.$set(D4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Kh.$set(An);const G4e={};u&2&&(G4e.$$scope={dirty:u,ctx:f}),op.$set(G4e);const O4e={};u&2&&(O4e.$$scope={dirty:u,ctx:f}),H_.$set(O4e);const V4e={};u&2&&(V4e.$$scope={dirty:u,ctx:f}),J_.$set(V4e);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),Du.$set(Mx);const X4e={};u&2&&(X4e.$$scope={dirty:u,ctx:f}),Ou.$set(X4e);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),A1.$set(Ex);const z4e={};u&2&&(z4e.$$scope={dirty:u,ctx:f}),L1.$set(z4e);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),fb.$set(Cx);const W4e={};u&2&&(W4e.$$scope={dirty:u,ctx:f}),gb.$set(W4e);const Q4e={};u&2&&(Q4e.$$scope={dirty:u,ctx:f}),kb.$set(Q4e);const H4e={};u&2&&(H4e.$$scope={dirty:u,ctx:f}),Rb.$set(H4e);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),y2.$set(ff);const U4e={};u&2&&(U4e.$$scope={dirty:u,ctx:f}),x2.$set(U4e);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),sv.$set(J4e);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),iv.$set(Y4e);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),pv.$set(wx);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),uv.$set(K4e);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),Kv.$set(Z4e);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),eF.$set(eEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),GF.$set(et);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),VF.$set(Ax);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),WF.$set(oEe);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),HF.$set(yx);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),i6.$set(rEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),c6.$set(ot);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),g6.$set(tEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),p6.$set(mf);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),A6.$set(aEe);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),L6.$set(nEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),B6.$set(y);const H5={};u&2&&(H5.$$scope={dirty:u,ctx:f}),q6.$set(H5);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),H6.$set(sEe);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),J6.$set(lEe);const U5={};u&2&&(U5.$$scope={dirty:u,ctx:f}),eT.$set(U5);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),rT.$set(iEe);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),dT.$set(dEe);const J5={};u&2&&(J5.$$scope={dirty:u,ctx:f}),fT.$set(J5);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),_T.$set(cEe);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),bT.$set(fEe);const Y5={};u&2&&(Y5.$$scope={dirty:u,ctx:f}),MT.$set(Y5);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),CT.$set(mEe);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),yT.$set(gEe);const K5={};u&2&&(K5.$$scope={dirty:u,ctx:f}),xT.$set(K5);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),BT.$set(hEe);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),qT.$set(pEe);const Z5={};u&2&&(Z5.$$scope={dirty:u,ctx:f}),DT.$set(Z5);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),OT.$set(_Ee);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),P8.$set(uEe);const e3={};u&2&&(e3.$$scope={dirty:u,ctx:f}),I8.$set(e3);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),s7.$set(bEe);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),i7.$set(vEe);const o3={};u&2&&(o3.$$scope={dirty:u,ctx:f}),T7.$set(o3);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),E7.$set(FEe);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),L7.$set(TEe);const r3={};u&2&&(r3.$$scope={dirty:u,ctx:f}),$7.$set(r3);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),Y7.$set(MEe);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),Z7.$set(EEe);const t3={};u&2&&(t3.$$scope={dirty:u,ctx:f}),cM.$set(t3);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),mM.$set(CEe);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),jM.$set(wEe);const a3={};u&2&&(a3.$$scope={dirty:u,ctx:f}),GM.$set(a3);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),n4.$set(AEe);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),l4.$set(yEe);const n3={};u&2&&(n3.$$scope={dirty:u,ctx:f}),c4.$set(n3);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),m4.$set(LEe);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),h4.$set(xEe);const s3={};u&2&&(s3.$$scope={dirty:u,ctx:f}),_4.$set(s3);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),q4.$set($Ee);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),j4.$set(kEe);const l3={};u&2&&(l3.$$scope={dirty:u,ctx:f}),sE.$set(l3);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),iE.$set(SEe);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),cE.$set(REe);const i3={};u&2&&(i3.$$scope={dirty:u,ctx:f}),mE.$set(i3);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),hE.$set(PEe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),_E.$set(BEe);const d3={};u&2&&(d3.$$scope={dirty:u,ctx:f}),OE.$set(d3);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),XE.$set(IEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),eC.$set(qEe);const c3={};u&2&&(c3.$$scope={dirty:u,ctx:f}),rC.$set(c3);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),pC.$set(NEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),uC.$set(jEe);const f3={};u&2&&(f3.$$scope={dirty:u,ctx:f}),LC.$set(f3);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),$C.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),DC.$set(GEe);const m3={};u&2&&(m3.$$scope={dirty:u,ctx:f}),OC.$set(m3);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),ZC.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),o5.$set(VEe);const g3={};u&2&&(g3.$$scope={dirty:u,ctx:f}),m5.$set(g3);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),h5.$set(XEe);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),E5.$set(zEe);const h3={};u&2&&(h3.$$scope={dirty:u,ctx:f}),w5.$set(h3);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),P5.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),I5.$set(QEe);const p3={};u&2&&(p3.$$scope={dirty:u,ctx:f}),N5.$set(p3);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),D5.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),V5.$set(UEe);const _3={};u&2&&(_3.$$scope={dirty:u,ctx:f}),z5.$set(_3);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),Q5.$set(JEe)},i(f){sje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(p0.$$.fragment,f),E(_0.$$.fragment,f),E(vf.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(T0.$$.fragment,f),E(Fg.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(y0.$$.fragment,f),E(eh.$$.fragment,f),E(L0.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(R0.$$.fragment,f),E(kh.$$.fragment,f),E(Sh.$$.fragment,f),E(P0.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(j0.$$.fragment,f),E(Yh.$$.fragment,f),E(Kh.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(op.$$.fragment,f),E(z0.$$.fragment,f),E(H_.$$.fragment,f),E(W0.$$.fragment,f),E(Q0.$$.fragment,f),E(U0.$$.fragment,f),E(J_.$$.fragment,f),E(J0.$$.fragment,f),E(Du.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(eA.$$.fragment,f),E(Ou.$$.fragment,f),E(oA.$$.fragment,f),E(A1.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(nA.$$.fragment,f),E(L1.$$.fragment,f),E(sA.$$.fragment,f),E(fb.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(cA.$$.fragment,f),E(gb.$$.fragment,f),E(fA.$$.fragment,f),E(kb.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(pA.$$.fragment,f),E(Rb.$$.fragment,f),E(_A.$$.fragment,f),E(y2.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(FA.$$.fragment,f),E(x2.$$.fragment,f),E(TA.$$.fragment,f),E(sv.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(wA.$$.fragment,f),E(iv.$$.fragment,f),E(AA.$$.fragment,f),E(pv.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E($A.$$.fragment,f),E(uv.$$.fragment,f),E(kA.$$.fragment,f),E(Kv.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(eF.$$.fragment,f),E(IA.$$.fragment,f),E(GF.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(DA.$$.fragment,f),E(VF.$$.fragment,f),E(GA.$$.fragment,f),E(WF.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E(HF.$$.fragment,f),E(WA.$$.fragment,f),E(i6.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(c6.$$.fragment,f),E(YA.$$.fragment,f),E(g6.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oy.$$.fragment,f),E(p6.$$.fragment,f),E(ry.$$.fragment,f),E(A6.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(L6.$$.fragment,f),E(ly.$$.fragment,f),E(B6.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(q6.$$.fragment,f),E(my.$$.fragment,f),E(H6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(J6.$$.fragment,f),E(uy.$$.fragment,f),E(eT.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(rT.$$.fragment,f),E(Ey.$$.fragment,f),E(dT.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(fT.$$.fragment,f),E(Ly.$$.fragment,f),E(_T.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(bT.$$.fragment,f),E(Ry.$$.fragment,f),E(MT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(CT.$$.fragment,f),E(jy.$$.fragment,f),E(yT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(xT.$$.fragment,f),E(Xy.$$.fragment,f),E(BT.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(qT.$$.fragment,f),E(Uy.$$.fragment,f),E(DT.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(OT.$$.fragment,f),E(eL.$$.fragment,f),E(P8.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(I8.$$.fragment,f),E(nL.$$.fragment,f),E(s7.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(i7.$$.fragment,f),E(cL.$$.fragment,f),E(T7.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(E7.$$.fragment,f),E(pL.$$.fragment,f),E(L7.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E($7.$$.fragment,f),E(FL.$$.fragment,f),E(Y7.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(Z7.$$.fragment,f),E(wL.$$.fragment,f),E(cM.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(mM.$$.fragment,f),E($L.$$.fragment,f),E(jM.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(GM.$$.fragment,f),E(BL.$$.fragment,f),E(n4.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(l4.$$.fragment,f),E(DL.$$.fragment,f),E(c4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(m4.$$.fragment,f),E(WL.$$.fragment,f),E(h4.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(_4.$$.fragment,f),E(YL.$$.fragment,f),E(q4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o9.$$.fragment,f),E(j4.$$.fragment,f),E(r9.$$.fragment,f),E(sE.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(iE.$$.fragment,f),E(l9.$$.fragment,f),E(cE.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(mE.$$.fragment,f),E(m9.$$.fragment,f),E(hE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(_E.$$.fragment,f),E(u9.$$.fragment,f),E(OE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(XE.$$.fragment,f),E(M9.$$.fragment,f),E(eC.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(rC.$$.fragment,f),E(y9.$$.fragment,f),E(pC.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(uC.$$.fragment,f),E(S9.$$.fragment,f),E(LC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E($C.$$.fragment,f),E(q9.$$.fragment,f),E(DC.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(OC.$$.fragment,f),E(O9.$$.fragment,f),E(ZC.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(o5.$$.fragment,f),E(Q9.$$.fragment,f),E(m5.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(h5.$$.fragment,f),E(K9.$$.fragment,f),E(E5.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(w5.$$.fragment,f),E(tx.$$.fragment,f),E(P5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(I5.$$.fragment,f),E(ix.$$.fragment,f),E(N5.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(D5.$$.fragment,f),E(gx.$$.fragment,f),E(V5.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(z5.$$.fragment,f),E(vx.$$.fragment,f),E(Q5.$$.fragment,f),sje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(p0.$$.fragment,f),C(_0.$$.fragment,f),C(vf.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(T0.$$.fragment,f),C(Fg.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(y0.$$.fragment,f),C(eh.$$.fragment,f),C(L0.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(R0.$$.fragment,f),C(kh.$$.fragment,f),C(Sh.$$.fragment,f),C(P0.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(j0.$$.fragment,f),C(Yh.$$.fragment,f),C(Kh.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(op.$$.fragment,f),C(z0.$$.fragment,f),C(H_.$$.fragment,f),C(W0.$$.fragment,f),C(Q0.$$.fragment,f),C(U0.$$.fragment,f),C(J_.$$.fragment,f),C(J0.$$.fragment,f),C(Du.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(eA.$$.fragment,f),C(Ou.$$.fragment,f),C(oA.$$.fragment,f),C(A1.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(nA.$$.fragment,f),C(L1.$$.fragment,f),C(sA.$$.fragment,f),C(fb.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(cA.$$.fragment,f),C(gb.$$.fragment,f),C(fA.$$.fragment,f),C(kb.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(pA.$$.fragment,f),C(Rb.$$.fragment,f),C(_A.$$.fragment,f),C(y2.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(FA.$$.fragment,f),C(x2.$$.fragment,f),C(TA.$$.fragment,f),C(sv.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(wA.$$.fragment,f),C(iv.$$.fragment,f),C(AA.$$.fragment,f),C(pv.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C($A.$$.fragment,f),C(uv.$$.fragment,f),C(kA.$$.fragment,f),C(Kv.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(eF.$$.fragment,f),C(IA.$$.fragment,f),C(GF.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(DA.$$.fragment,f),C(VF.$$.fragment,f),C(GA.$$.fragment,f),C(WF.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C(HF.$$.fragment,f),C(WA.$$.fragment,f),C(i6.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(c6.$$.fragment,f),C(YA.$$.fragment,f),C(g6.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oy.$$.fragment,f),C(p6.$$.fragment,f),C(ry.$$.fragment,f),C(A6.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(L6.$$.fragment,f),C(ly.$$.fragment,f),C(B6.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(q6.$$.fragment,f),C(my.$$.fragment,f),C(H6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(J6.$$.fragment,f),C(uy.$$.fragment,f),C(eT.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(rT.$$.fragment,f),C(Ey.$$.fragment,f),C(dT.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(fT.$$.fragment,f),C(Ly.$$.fragment,f),C(_T.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(bT.$$.fragment,f),C(Ry.$$.fragment,f),C(MT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(CT.$$.fragment,f),C(jy.$$.fragment,f),C(yT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(xT.$$.fragment,f),C(Xy.$$.fragment,f),C(BT.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(qT.$$.fragment,f),C(Uy.$$.fragment,f),C(DT.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(OT.$$.fragment,f),C(eL.$$.fragment,f),C(P8.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(I8.$$.fragment,f),C(nL.$$.fragment,f),C(s7.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(i7.$$.fragment,f),C(cL.$$.fragment,f),C(T7.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(E7.$$.fragment,f),C(pL.$$.fragment,f),C(L7.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C($7.$$.fragment,f),C(FL.$$.fragment,f),C(Y7.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(Z7.$$.fragment,f),C(wL.$$.fragment,f),C(cM.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(mM.$$.fragment,f),C($L.$$.fragment,f),C(jM.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(GM.$$.fragment,f),C(BL.$$.fragment,f),C(n4.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(l4.$$.fragment,f),C(DL.$$.fragment,f),C(c4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(m4.$$.fragment,f),C(WL.$$.fragment,f),C(h4.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(_4.$$.fragment,f),C(YL.$$.fragment,f),C(q4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o9.$$.fragment,f),C(j4.$$.fragment,f),C(r9.$$.fragment,f),C(sE.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(iE.$$.fragment,f),C(l9.$$.fragment,f),C(cE.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(mE.$$.fragment,f),C(m9.$$.fragment,f),C(hE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(_E.$$.fragment,f),C(u9.$$.fragment,f),C(OE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(XE.$$.fragment,f),C(M9.$$.fragment,f),C(eC.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(rC.$$.fragment,f),C(y9.$$.fragment,f),C(pC.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(uC.$$.fragment,f),C(S9.$$.fragment,f),C(LC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C($C.$$.fragment,f),C(q9.$$.fragment,f),C(DC.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(OC.$$.fragment,f),C(O9.$$.fragment,f),C(ZC.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(o5.$$.fragment,f),C(Q9.$$.fragment,f),C(m5.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(h5.$$.fragment,f),C(K9.$$.fragment,f),C(E5.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(w5.$$.fragment,f),C(tx.$$.fragment,f),C(P5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(I5.$$.fragment,f),C(ix.$$.fragment,f),C(N5.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(D5.$$.fragment,f),C(gx.$$.fragment,f),C(V5.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(z5.$$.fragment,f),C(vx.$$.fragment,f),C(Q5.$$.fragment,f),sje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(tqe),f&&t(ui),w(p0),f&&t(aqe),f&&t(kn),f&&t(nqe),w(_0,f),f&&t(sqe),f&&t(q$),f&&t(lqe),w(vf,f),f&&t(iqe),f&&t(bi),w(u0),f&&t(dqe),f&&t(Co),w(b0),w(T0),w(Fg),w(M0),f&&t(cqe),f&&t(Fi),w(E0),f&&t(fqe),f&&t(wo),w(C0),w(y0),w(eh),w(L0),f&&t(mqe),f&&t(Ti),w(x0),f&&t(gqe),f&&t(Ao),w($0),w(R0),w(kh),w(Sh),w(P0),f&&t(hqe),f&&t(Mi),w(B0),f&&t(pqe),f&&t(yo),w(I0),w(j0),w(Yh),w(Kh),w(D0),f&&t(_qe),f&&t(Ci),w(G0),f&&t(uqe),f&&t(Lo),w(O0),w(X0),w(op),w(z0),w(H_),f&&t(bqe),f&&t(yi),w(W0),f&&t(vqe),f&&t(xo),w(Q0),w(U0),w(J_),w(J0),w(Du),f&&t(Fqe),f&&t($i),w(Y0),f&&t(Tqe),f&&t($o),w(K0),w(eA),w(Ou),w(oA),w(A1),f&&t(Mqe),f&&t(Ri),w(rA),f&&t(Eqe),f&&t(ko),w(tA),w(nA),w(L1),w(sA),w(fb),f&&t(Cqe),f&&t(Ii),w(lA),f&&t(wqe),f&&t(So),w(iA),w(cA),w(gb),w(fA),w(kb),f&&t(Aqe),f&&t(ji),w(mA),f&&t(yqe),f&&t(Ro),w(gA),w(pA),w(Rb),w(_A),w(y2),f&&t(Lqe),f&&t(Oi),w(uA),f&&t(xqe),f&&t(Po),w(bA),w(FA),w(x2),w(TA),w(sv),f&&t($qe),f&&t(zi),w(MA),f&&t(kqe),f&&t(Bo),w(EA),w(wA),w(iv),w(AA),w(pv),f&&t(Sqe),f&&t(Hi),w(yA),f&&t(Rqe),f&&t(Io),w(LA),w($A),w(uv),w(kA),w(Kv),f&&t(Pqe),f&&t(Yi),w(SA),f&&t(Bqe),f&&t(qo),w(RA),w(BA),w(eF),w(IA),w(GF),f&&t(Iqe),f&&t(ed),w(qA),f&&t(qqe),f&&t(No),w(NA),w(DA),w(VF),w(GA),w(WF),f&&t(Nqe),f&&t(td),w(OA),f&&t(jqe),f&&t(jo),w(VA),w(zA),w(HF),w(WA),w(i6),f&&t(Dqe),f&&t(sd),w(QA),f&&t(Gqe),f&&t(Do),w(HA),w(JA),w(c6),w(YA),w(g6),f&&t(Oqe),f&&t(dd),w(KA),f&&t(Vqe),f&&t(Go),w(ZA),w(oy),w(p6),w(ry),w(A6),f&&t(Xqe),f&&t(md),w(ty),f&&t(zqe),f&&t(Oo),w(ay),w(sy),w(L6),w(ly),w(B6),f&&t(Wqe),f&&t(pd),w(iy),f&&t(Qqe),f&&t(Vo),w(dy),w(fy),w(q6),w(my),w(H6),f&&t(Hqe),f&&t(bd),w(gy),f&&t(Uqe),f&&t(Xo),w(hy),w(_y),w(J6),w(uy),w(eT),f&&t(Jqe),f&&t(Td),w(vy),f&&t(Yqe),f&&t(zo),w(Fy),w(My),w(rT),w(Ey),w(dT),f&&t(Kqe),f&&t(Cd),w(Cy),f&&t(Zqe),f&&t(Wo),w(wy),w(yy),w(fT),w(Ly),w(_T),f&&t(eNe),f&&t(Ld),w(xy),f&&t(oNe),f&&t(Qo),w($y),w(Sy),w(bT),w(Ry),w(MT),f&&t(rNe),f&&t(kd),w(By),f&&t(tNe),f&&t(Ho),w(Iy),w(Ny),w(CT),w(jy),w(yT),f&&t(aNe),f&&t(Pd),w(Dy),f&&t(nNe),f&&t(Uo),w(Gy),w(Vy),w(xT),w(Xy),w(BT),f&&t(sNe),f&&t(qd),w(zy),f&&t(lNe),f&&t(Jo),w(Wy),w(Hy),w(qT),w(Uy),w(DT),f&&t(iNe),f&&t(Dd),w(Jy),f&&t(dNe),f&&t(Yo),w(Yy),w(Zy),w(OT),w(eL),w(P8),f&&t(cNe),f&&t(Vd),w(oL),f&&t(fNe),f&&t(Ko),w(rL),w(aL),w(I8),w(nL),w(s7),f&&t(mNe),f&&t(Wd),w(sL),f&&t(gNe),f&&t(Zo),w(lL),w(dL),w(i7),w(cL),w(T7),f&&t(hNe),f&&t(Ud),w(fL),f&&t(pNe),f&&t(er),w(mL),w(hL),w(E7),w(pL),w(L7),f&&t(_Ne),f&&t(Kd),w(_L),f&&t(uNe),f&&t(or),w(uL),w(vL),w($7),w(FL),w(Y7),f&&t(bNe),f&&t(oc),w(TL),f&&t(vNe),f&&t(rr),w(ML),w(CL),w(Z7),w(wL),w(cM),f&&t(FNe),f&&t(ac),w(AL),f&&t(TNe),f&&t(tr),w(yL),w(xL),w(mM),w($L),w(jM),f&&t(MNe),f&&t(lc),w(kL),f&&t(ENe),f&&t(ar),w(SL),w(PL),w(GM),w(BL),w(n4),f&&t(CNe),f&&t(cc),w(IL),f&&t(wNe),f&&t(nr),w(qL),w(jL),w(l4),w(DL),w(c4),f&&t(ANe),f&&t(gc),w(OL),f&&t(yNe),f&&t(sr),w(VL),w(zL),w(m4),w(WL),w(h4),f&&t(LNe),f&&t(_c),w(QL),f&&t(xNe),f&&t(lr),w(HL),w(JL),w(_4),w(YL),w(q4),f&&t($Ne),f&&t(vc),w(KL),f&&t(kNe),f&&t(ir),w(ZL),w(o9),w(j4),w(r9),w(sE),f&&t(SNe),f&&t(Mc),w(t9),f&&t(RNe),f&&t(dr),w(a9),w(s9),w(iE),w(l9),w(cE),f&&t(PNe),f&&t(wc),w(i9),f&&t(BNe),f&&t(cr),w(d9),w(f9),w(mE),w(m9),w(hE),f&&t(INe),f&&t(Lc),w(g9),f&&t(qNe),f&&t(fr),w(h9),w(_9),w(_E),w(u9),w(OE),f&&t(NNe),f&&t(kc),w(b9),f&&t(jNe),f&&t(mr),w(v9),w(T9),w(XE),w(M9),w(eC),f&&t(DNe),f&&t(Pc),w(E9),f&&t(GNe),f&&t(gr),w(C9),w(A9),w(rC),w(y9),w(pC),f&&t(ONe),f&&t(qc),w(L9),f&&t(VNe),f&&t(hr),w(x9),w(k9),w(uC),w(S9),w(LC),f&&t(XNe),f&&t(Dc),w(R9),f&&t(zNe),f&&t(pr),w(P9),w(I9),w($C),w(q9),w(DC),f&&t(WNe),f&&t(Vc),w(N9),f&&t(QNe),f&&t(_r),w(j9),w(G9),w(OC),w(O9),w(ZC),f&&t(HNe),f&&t(Wc),w(V9),f&&t(UNe),f&&t(ur),w(X9),w(W9),w(o5),w(Q9),w(m5),f&&t(JNe),f&&t(Uc),w(H9),f&&t(YNe),f&&t(br),w(U9),w(Y9),w(h5),w(K9),w(E5),f&&t(KNe),f&&t(Kc),w(Z9),f&&t(ZNe),f&&t(vr),w(ex),w(rx),w(w5),w(tx),w(P5),f&&t(eje),f&&t(of),w(ax),f&&t(oje),f&&t(Fr),w(nx),w(lx),w(I5),w(ix),w(N5),f&&t(rje),f&&t(af),w(dx),f&&t(tje),f&&t(Tr),w(cx),w(mx),w(D5),w(gx),w(V5),f&&t(aje),f&&t(lf),w(px),f&&t(nje),f&&t(Mr),w(_x),w(bx),w(z5),w(vx),w(Q5)}}}const Bxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Ixt(L){return ILt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vxt extends SLt{constructor(g){super();RLt(this,g,Ixt,Pxt,PLt,{})}}export{Vxt as default,Bxt as metadata};
