import{S as BXt,i as IXt,s as NXt,e as a,k as l,w as F,t as o,M as qXt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as jXt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Aot}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function DXt($){let g,v,p,m,_,d,h,Eo,wi,Sf,nt,Ai,Li,zL,Rf,Oe,Qe,yi,Rn,QL,Pn,Bn,WL,xi,In,HL,$i,Pf,$a;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),wi=a("code"),Sf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Ai=a("code"),Li=o('"new-model"'),zL=o(")."),Rf=l(),Oe=a("p"),Qe=o("Likewise, if your "),yi=a("code"),Rn=o("NewModel"),QL=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),WL=o(`, make sure its
`),xi=a("code"),In=o("config_class"),HL=o(` attribute is set to the same class you use when registering the model (here
`),$i=a("code"),Pf=o("NewModelConfig"),$a=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var wS=s(p);m=r(wS,"NewModelConfig"),wS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ki=s(d);h=r(ki,"PretrainedConfig"),ki.forEach(t),Eo=r(Ae,`, make sure its
`),wi=n(Ae,"CODE",{});var AS=s(wi);Sf=r(AS,"model_type"),AS.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ai=n(Ae,"CODE",{});var LS=s(Ai);Li=r(LS,'"new-model"'),LS.forEach(t),zL=r(Ae,")."),Ae.forEach(t),Rf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),yi=n(Co,"CODE",{});var ka=s(yi);Rn=r(ka,"NewModel"),ka.forEach(t),QL=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var yS=s(Pn);Bn=r(yS,"PreTrainedModel"),yS.forEach(t),WL=r(Co,`, make sure its
`),xi=n(Co,"CODE",{});var Bf=s(xi);In=r(Bf,"config_class"),Bf.forEach(t),HL=r(Co,` attribute is set to the same class you use when registering the model (here
`),$i=n(Co,"CODE",{});var xS=s($i);Pf=r(xS,"NewModelConfig"),xS.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,wi),e(wi,Sf),e(g,nt),e(g,Ai),e(Ai,Li),e(g,zL),b(We,Rf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,yi),e(yi,Rn),e(Oe,QL),e(Oe,Pn),e(Pn,Bn),e(Oe,WL),e(Oe,xi),e(xi,In),e(Oe,HL),e(Oe,$i),e($i,Pf),e(Oe,$a)},d(We){We&&t(g),We&&t(Rf),We&&t(Oe)}}}function GXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VXt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function XXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zXt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function QXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ezt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ozt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function azt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function szt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function izt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function czt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _zt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ezt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Czt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Azt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $zt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Szt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Izt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ozt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_,d,h,Eo,wi,Sf,nt,Ai,Li,zL,Rf,Oe,Qe,yi,Rn,QL,Pn,Bn,WL,xi,In,HL,$i,Pf,$a,We,Ae,wS,ki,AS,LS,Co,ka,yS,Bf,xS,xWe,hVe,Si,If,aae,UL,$We,nae,kWe,pVe,Nn,SWe,sae,RWe,PWe,lae,BWe,IWe,_Ve,JL,uVe,$S,NWe,bVe,Nf,vVe,Ri,qf,iae,YL,qWe,dae,jWe,FVe,wo,KL,DWe,ZL,GWe,kS,OWe,VWe,XWe,ey,zWe,cae,QWe,WWe,HWe,Ar,oy,UWe,fae,JWe,YWe,Pi,KWe,mae,ZWe,eHe,gae,oHe,rHe,tHe,A,jf,hae,aHe,nHe,SS,sHe,lHe,iHe,Df,pae,dHe,cHe,RS,fHe,mHe,gHe,Gf,_ae,hHe,pHe,PS,_He,uHe,bHe,Of,uae,vHe,FHe,BS,THe,MHe,EHe,Vf,bae,CHe,wHe,IS,AHe,LHe,yHe,Xf,vae,xHe,$He,NS,kHe,SHe,RHe,zf,Fae,PHe,BHe,qS,IHe,NHe,qHe,Qf,Tae,jHe,DHe,jS,GHe,OHe,VHe,Wf,Mae,XHe,zHe,DS,QHe,WHe,HHe,Hf,Eae,UHe,JHe,GS,YHe,KHe,ZHe,Uf,Cae,eUe,oUe,OS,rUe,tUe,aUe,Jf,wae,nUe,sUe,VS,lUe,iUe,dUe,Yf,Aae,cUe,fUe,XS,mUe,gUe,hUe,Kf,Lae,pUe,_Ue,zS,uUe,bUe,vUe,Zf,yae,FUe,TUe,QS,MUe,EUe,CUe,em,xae,wUe,AUe,WS,LUe,yUe,xUe,om,$ae,$Ue,kUe,HS,SUe,RUe,PUe,rm,kae,BUe,IUe,US,NUe,qUe,jUe,tm,Sae,DUe,GUe,JS,OUe,VUe,XUe,am,Rae,zUe,QUe,YS,WUe,HUe,UUe,nm,Pae,JUe,YUe,KS,KUe,ZUe,eJe,sm,Bae,oJe,rJe,ZS,tJe,aJe,nJe,lm,Iae,sJe,lJe,eR,iJe,dJe,cJe,im,Nae,fJe,mJe,oR,gJe,hJe,pJe,dm,qae,_Je,uJe,rR,bJe,vJe,FJe,cm,jae,TJe,MJe,tR,EJe,CJe,wJe,fm,Dae,AJe,LJe,aR,yJe,xJe,$Je,mm,Gae,kJe,SJe,nR,RJe,PJe,BJe,gm,Oae,IJe,NJe,sR,qJe,jJe,DJe,hm,Vae,GJe,OJe,lR,VJe,XJe,zJe,pm,Xae,QJe,WJe,iR,HJe,UJe,JJe,_m,zae,YJe,KJe,dR,ZJe,eYe,oYe,um,Qae,rYe,tYe,cR,aYe,nYe,sYe,bm,Wae,lYe,iYe,fR,dYe,cYe,fYe,vm,Hae,mYe,gYe,mR,hYe,pYe,_Ye,Fm,Uae,uYe,bYe,gR,vYe,FYe,TYe,Tm,Jae,MYe,EYe,hR,CYe,wYe,AYe,Mm,Yae,LYe,yYe,pR,xYe,$Ye,kYe,Em,Kae,SYe,RYe,_R,PYe,BYe,IYe,Cm,Zae,NYe,qYe,uR,jYe,DYe,GYe,wm,ene,OYe,VYe,bR,XYe,zYe,QYe,Am,one,WYe,HYe,vR,UYe,JYe,YYe,Lm,rne,KYe,ZYe,FR,eKe,oKe,rKe,ym,tne,tKe,aKe,TR,nKe,sKe,lKe,xm,ane,iKe,dKe,MR,cKe,fKe,mKe,$m,nne,gKe,hKe,ER,pKe,_Ke,uKe,km,sne,bKe,vKe,CR,FKe,TKe,MKe,Sm,lne,EKe,CKe,wR,wKe,AKe,LKe,Rm,ine,yKe,xKe,AR,$Ke,kKe,SKe,Pm,dne,RKe,PKe,LR,BKe,IKe,NKe,Bm,cne,qKe,jKe,yR,DKe,GKe,OKe,Im,fne,VKe,XKe,xR,zKe,QKe,WKe,Nm,mne,HKe,UKe,$R,JKe,YKe,KKe,qm,gne,ZKe,eZe,kR,oZe,rZe,tZe,jm,hne,aZe,nZe,SR,sZe,lZe,iZe,Dm,pne,dZe,cZe,RR,fZe,mZe,gZe,Gm,_ne,hZe,pZe,PR,_Ze,uZe,bZe,Om,une,vZe,FZe,BR,TZe,MZe,EZe,Vm,bne,CZe,wZe,IR,AZe,LZe,yZe,Xm,vne,xZe,$Ze,NR,kZe,SZe,RZe,zm,Fne,PZe,BZe,qR,IZe,NZe,qZe,Qm,Tne,jZe,DZe,jR,GZe,OZe,VZe,Wm,Mne,XZe,zZe,DR,QZe,WZe,HZe,Hm,Ene,UZe,JZe,GR,YZe,KZe,ZZe,Um,Cne,eeo,oeo,OR,reo,teo,aeo,Jm,wne,neo,seo,VR,leo,ieo,deo,Ym,Ane,ceo,feo,XR,meo,geo,heo,Km,Lne,peo,_eo,zR,ueo,beo,veo,Zm,yne,Feo,Teo,QR,Meo,Eeo,Ceo,eg,xne,weo,Aeo,WR,Leo,yeo,xeo,og,$ne,$eo,keo,HR,Seo,Reo,Peo,rg,kne,Beo,Ieo,UR,Neo,qeo,jeo,tg,Sne,Deo,Geo,JR,Oeo,Veo,Xeo,ag,Rne,zeo,Qeo,YR,Weo,Heo,Ueo,ng,Pne,Jeo,Yeo,KR,Keo,Zeo,eoo,sg,Bne,ooo,roo,ZR,too,aoo,noo,lg,Ine,soo,loo,eP,ioo,doo,coo,ig,Nne,foo,moo,oP,goo,hoo,poo,dg,qne,_oo,uoo,rP,boo,voo,Foo,cg,jne,Too,Moo,tP,Eoo,Coo,woo,fg,Dne,Aoo,Loo,aP,yoo,xoo,$oo,mg,Gne,koo,Soo,nP,Roo,Poo,Boo,gg,One,Ioo,Noo,sP,qoo,joo,Doo,hg,Vne,Goo,Ooo,lP,Voo,Xoo,zoo,pg,Xne,Qoo,Woo,iP,Hoo,Uoo,Joo,_g,zne,Yoo,Koo,dP,Zoo,ero,oro,ug,Qne,rro,tro,cP,aro,nro,sro,bg,Wne,lro,iro,fP,dro,cro,fro,vg,Hne,mro,gro,mP,hro,pro,_ro,Fg,Une,uro,bro,gP,vro,Fro,Tro,Tg,Jne,Mro,Ero,hP,Cro,wro,Aro,Mg,Yne,Lro,yro,pP,xro,$ro,kro,Eg,Kne,Sro,Rro,_P,Pro,Bro,Iro,Cg,Zne,Nro,qro,uP,jro,Dro,Gro,wg,ese,Oro,Vro,bP,Xro,zro,Qro,Ag,ose,Wro,Hro,vP,Uro,Jro,Yro,Lg,rse,Kro,Zro,FP,eto,oto,rto,yg,tse,tto,ato,TP,nto,sto,lto,xg,ase,ito,dto,MP,cto,fto,mto,$g,nse,gto,hto,EP,pto,_to,uto,kg,sse,bto,vto,CP,Fto,Tto,Mto,Sg,lse,Eto,Cto,wP,wto,Ato,Lto,Rg,ise,yto,xto,AP,$to,kto,Sto,Pg,dse,Rto,Pto,LP,Bto,Ito,Nto,Bg,cse,qto,jto,yP,Dto,Gto,Oto,Ig,fse,Vto,Xto,xP,zto,Qto,Wto,Ng,mse,Hto,Uto,$P,Jto,Yto,Kto,qg,gse,Zto,eao,kP,oao,rao,tao,jg,hse,aao,nao,SP,sao,lao,iao,Dg,pse,dao,cao,RP,fao,mao,gao,Gg,_se,hao,pao,PP,_ao,uao,bao,Og,use,vao,Fao,BP,Tao,Mao,Eao,Vg,bse,Cao,wao,IP,Aao,Lao,yao,Xg,vse,xao,$ao,NP,kao,Sao,Rao,zg,Fse,Pao,Bao,qP,Iao,Nao,qao,Qg,Tse,jao,Dao,jP,Gao,Oao,Vao,Wg,Mse,Xao,zao,DP,Qao,Wao,Hao,Hg,Uao,Ug,ry,Jao,Ese,Yao,TVe,Bi,Jg,Cse,ty,Kao,wse,Zao,MVe,Ao,ay,eno,ny,ono,GP,rno,tno,ano,sy,nno,Ase,sno,lno,ino,Lr,ly,dno,Lse,cno,fno,Sa,mno,yse,gno,hno,xse,pno,_no,$se,uno,bno,vno,k,qn,kse,Fno,Tno,OP,Mno,Eno,VP,Cno,wno,Ano,jn,Sse,Lno,yno,XP,xno,$no,zP,kno,Sno,Rno,Dn,Rse,Pno,Bno,QP,Ino,Nno,WP,qno,jno,Dno,Yg,Pse,Gno,Ono,HP,Vno,Xno,zno,Gn,Bse,Qno,Wno,UP,Hno,Uno,JP,Jno,Yno,Kno,Kg,Ise,Zno,eso,YP,oso,rso,tso,Zg,Nse,aso,nso,KP,sso,lso,iso,eh,qse,dso,cso,ZP,fso,mso,gso,On,jse,hso,pso,eB,_so,uso,oB,bso,vso,Fso,Vn,Dse,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,Xn,Gse,yso,xso,aB,$so,kso,nB,Sso,Rso,Pso,oh,Ose,Bso,Iso,sB,Nso,qso,jso,rh,Vse,Dso,Gso,lB,Oso,Vso,Xso,th,Xse,zso,Qso,iB,Wso,Hso,Uso,zn,zse,Jso,Yso,dB,Kso,Zso,cB,elo,olo,rlo,ah,Qse,tlo,alo,fB,nlo,slo,llo,Qn,Wse,ilo,dlo,mB,clo,flo,gB,mlo,glo,hlo,Wn,Hse,plo,_lo,hB,ulo,blo,pB,vlo,Flo,Tlo,Hn,Use,Mlo,Elo,_B,Clo,wlo,uB,Alo,Llo,ylo,Un,Jse,xlo,$lo,bB,klo,Slo,vB,Rlo,Plo,Blo,nh,Yse,Ilo,Nlo,FB,qlo,jlo,Dlo,Jn,Kse,Glo,Olo,TB,Vlo,Xlo,MB,zlo,Qlo,Wlo,Yn,Zse,Hlo,Ulo,EB,Jlo,Ylo,CB,Klo,Zlo,eio,Kn,ele,oio,rio,wB,tio,aio,AB,nio,sio,lio,Zn,ole,iio,dio,LB,cio,fio,yB,mio,gio,hio,es,rle,pio,_io,xB,uio,bio,$B,vio,Fio,Tio,os,tle,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,sh,ale,xio,$io,RB,kio,Sio,Rio,rs,nle,Pio,Bio,PB,Iio,Nio,BB,qio,jio,Dio,lh,sle,Gio,Oio,IB,Vio,Xio,zio,ts,lle,Qio,Wio,NB,Hio,Uio,qB,Jio,Yio,Kio,as,ile,Zio,edo,jB,odo,rdo,DB,tdo,ado,ndo,ns,dle,sdo,ldo,GB,ido,ddo,OB,cdo,fdo,mdo,ih,cle,gdo,hdo,VB,pdo,_do,udo,ss,fle,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,ls,mle,wdo,Ado,QB,Ldo,ydo,WB,xdo,$do,kdo,is,gle,Sdo,Rdo,HB,Pdo,Bdo,UB,Ido,Ndo,qdo,dh,hle,jdo,Ddo,JB,Gdo,Odo,Vdo,ds,ple,Xdo,zdo,YB,Qdo,Wdo,KB,Hdo,Udo,Jdo,cs,_le,Ydo,Kdo,ZB,Zdo,eco,eI,oco,rco,tco,fs,ule,aco,nco,oI,sco,lco,rI,ico,dco,cco,ms,ble,fco,mco,tI,gco,hco,aI,pco,_co,uco,gs,vle,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,hs,Fle,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,ps,Tle,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,_s,Mle,jco,Dco,fI,Gco,Oco,mI,Vco,Xco,zco,ch,Ele,Qco,Wco,gI,Hco,Uco,Jco,us,Cle,Yco,Kco,hI,Zco,efo,pI,ofo,rfo,tfo,fh,wle,afo,nfo,_I,sfo,lfo,ifo,mh,Ale,dfo,cfo,uI,ffo,mfo,gfo,bs,Lle,hfo,pfo,bI,_fo,ufo,vI,bfo,vfo,Ffo,vs,yle,Tfo,Mfo,FI,Efo,Cfo,TI,wfo,Afo,Lfo,Fs,xle,yfo,xfo,MI,$fo,kfo,EI,Sfo,Rfo,Pfo,gh,$le,Bfo,Ifo,CI,Nfo,qfo,jfo,Ts,kle,Dfo,Gfo,wI,Ofo,Vfo,AI,Xfo,zfo,Qfo,Ms,Sle,Wfo,Hfo,LI,Ufo,Jfo,yI,Yfo,Kfo,Zfo,Es,Rle,emo,omo,xI,rmo,tmo,$I,amo,nmo,smo,Cs,Ple,lmo,imo,kI,dmo,cmo,SI,fmo,mmo,gmo,ws,Ble,hmo,pmo,RI,_mo,umo,PI,bmo,vmo,Fmo,As,Ile,Tmo,Mmo,BI,Emo,Cmo,II,wmo,Amo,Lmo,Ls,Nle,ymo,xmo,NI,$mo,kmo,qI,Smo,Rmo,Pmo,hh,qle,Bmo,Imo,jI,Nmo,qmo,jmo,ys,jle,Dmo,Gmo,DI,Omo,Vmo,GI,Xmo,zmo,Qmo,ph,Dle,Wmo,Hmo,OI,Umo,Jmo,Ymo,_h,Gle,Kmo,Zmo,VI,ego,ogo,rgo,uh,Ole,tgo,ago,XI,ngo,sgo,lgo,bh,Vle,igo,dgo,zI,cgo,fgo,mgo,xs,Xle,ggo,hgo,QI,pgo,_go,WI,ugo,bgo,vgo,vh,zle,Fgo,Tgo,HI,Mgo,Ego,Cgo,$s,Qle,wgo,Ago,UI,Lgo,ygo,JI,xgo,$go,kgo,ks,Wle,Sgo,Rgo,YI,Pgo,Bgo,KI,Igo,Ngo,qgo,Ss,Hle,jgo,Dgo,ZI,Ggo,Ogo,eN,Vgo,Xgo,zgo,Rs,Ule,Qgo,Wgo,oN,Hgo,Ugo,rN,Jgo,Ygo,Kgo,Ps,Jle,Zgo,eho,tN,oho,rho,aN,tho,aho,nho,Bs,Yle,sho,lho,nN,iho,dho,sN,cho,fho,mho,Fh,Kle,gho,hho,lN,pho,_ho,uho,Th,Zle,bho,vho,iN,Fho,Tho,Mho,Is,eie,Eho,Cho,dN,who,Aho,cN,Lho,yho,xho,Ns,oie,$ho,kho,fN,Sho,Rho,mN,Pho,Bho,Iho,qs,rie,Nho,qho,gN,jho,Dho,hN,Gho,Oho,Vho,Mh,tie,Xho,zho,pN,Qho,Who,Hho,Eh,aie,Uho,Jho,_N,Yho,Kho,Zho,Ch,nie,epo,opo,uN,rpo,tpo,apo,js,sie,npo,spo,bN,lpo,ipo,vN,dpo,cpo,fpo,Ds,lie,mpo,gpo,FN,hpo,ppo,TN,_po,upo,bpo,wh,iie,vpo,Fpo,MN,Tpo,Mpo,Epo,Ah,die,Cpo,wpo,EN,Apo,Lpo,ypo,Lh,cie,xpo,$po,CN,kpo,Spo,Rpo,Gs,fie,Ppo,Bpo,wN,Ipo,Npo,AN,qpo,jpo,Dpo,yh,mie,Gpo,Opo,LN,Vpo,Xpo,zpo,xh,gie,Qpo,Wpo,yN,Hpo,Upo,Jpo,Os,hie,Ypo,Kpo,xN,Zpo,e_o,$N,o_o,r_o,t_o,Vs,pie,a_o,n_o,kN,s_o,l_o,SN,i_o,d_o,c_o,Xs,_ie,f_o,m_o,RN,g_o,h_o,PN,p_o,__o,u_o,zs,uie,b_o,v_o,BN,F_o,T_o,IN,M_o,E_o,C_o,$h,w_o,kh,iy,A_o,bie,L_o,EVe,Ii,Sh,vie,dy,y_o,Fie,x_o,CVe,Lo,cy,$_o,fy,k_o,NN,S_o,R_o,P_o,my,B_o,Tie,I_o,N_o,q_o,He,gy,j_o,Mie,D_o,G_o,Ra,O_o,Eie,V_o,X_o,Cie,z_o,Q_o,wie,W_o,H_o,U_o,Y,Rh,Aie,J_o,Y_o,qN,K_o,Z_o,euo,Ph,Lie,ouo,ruo,jN,tuo,auo,nuo,Bh,yie,suo,luo,DN,iuo,duo,cuo,Ih,xie,fuo,muo,GN,guo,huo,puo,Nh,$ie,_uo,uuo,ON,buo,vuo,Fuo,qh,kie,Tuo,Muo,VN,Euo,Cuo,wuo,jh,Sie,Auo,Luo,XN,yuo,xuo,$uo,Dh,Rie,kuo,Suo,zN,Ruo,Puo,Buo,Gh,Pie,Iuo,Nuo,QN,quo,juo,Duo,Oh,Bie,Guo,Ouo,WN,Vuo,Xuo,zuo,Vh,Iie,Quo,Wuo,HN,Huo,Uuo,Juo,Xh,Nie,Yuo,Kuo,UN,Zuo,e1o,o1o,zh,qie,r1o,t1o,JN,a1o,n1o,s1o,Qh,jie,l1o,i1o,YN,d1o,c1o,f1o,Wh,Die,m1o,g1o,KN,h1o,p1o,_1o,Hh,Gie,u1o,b1o,ZN,v1o,F1o,T1o,Uh,Oie,M1o,E1o,eq,C1o,w1o,A1o,Jh,Vie,L1o,y1o,oq,x1o,$1o,k1o,Yh,Xie,S1o,R1o,rq,P1o,B1o,I1o,Kh,zie,N1o,q1o,tq,j1o,D1o,G1o,Zh,Qie,O1o,V1o,aq,X1o,z1o,Q1o,ep,Wie,W1o,H1o,nq,U1o,J1o,Y1o,op,Hie,K1o,Z1o,sq,e7o,o7o,r7o,rp,Uie,t7o,a7o,lq,n7o,s7o,l7o,tp,Jie,i7o,d7o,iq,c7o,f7o,m7o,ap,Yie,g7o,h7o,dq,p7o,_7o,u7o,np,Kie,b7o,v7o,cq,F7o,T7o,M7o,sp,Zie,E7o,C7o,fq,w7o,A7o,L7o,lp,ede,y7o,x7o,mq,$7o,k7o,S7o,ip,ode,R7o,P7o,gq,B7o,I7o,N7o,dp,rde,q7o,j7o,hq,D7o,G7o,O7o,cp,tde,V7o,X7o,pq,z7o,Q7o,W7o,fp,ade,H7o,U7o,_q,J7o,Y7o,K7o,mp,Z7o,gp,e4o,hp,hy,o4o,nde,r4o,wVe,Ni,pp,sde,py,t4o,lde,a4o,AVe,yo,_y,n4o,uy,s4o,uq,l4o,i4o,d4o,by,c4o,ide,f4o,m4o,g4o,Ue,vy,h4o,dde,p4o,_4o,qi,u4o,cde,b4o,v4o,fde,F4o,T4o,M4o,he,_p,mde,E4o,C4o,bq,w4o,A4o,L4o,up,gde,y4o,x4o,hde,$4o,k4o,S4o,bp,pde,R4o,P4o,vq,B4o,I4o,N4o,vp,_de,q4o,j4o,Fq,D4o,G4o,O4o,Fp,ude,V4o,X4o,Tq,z4o,Q4o,W4o,Tp,bde,H4o,U4o,Mq,J4o,Y4o,K4o,Mp,vde,Z4o,e2o,Eq,o2o,r2o,t2o,Ep,Fde,a2o,n2o,Cq,s2o,l2o,i2o,Cp,Tde,d2o,c2o,wq,f2o,m2o,g2o,wp,Mde,h2o,p2o,Aq,_2o,u2o,b2o,Ap,Ede,v2o,F2o,Lq,T2o,M2o,E2o,Lp,Cde,C2o,w2o,yq,A2o,L2o,y2o,yp,wde,x2o,$2o,xq,k2o,S2o,R2o,xp,Ade,P2o,B2o,$q,I2o,N2o,q2o,$p,Lde,j2o,D2o,kq,G2o,O2o,V2o,kp,yde,X2o,z2o,Sq,Q2o,W2o,H2o,Sp,xde,U2o,J2o,Rq,Y2o,K2o,Z2o,Rp,$de,ebo,obo,Pq,rbo,tbo,abo,Pp,nbo,Bp,sbo,Ip,Fy,lbo,kde,ibo,LVe,ji,Np,Sde,Ty,dbo,Rde,cbo,yVe,xo,My,fbo,Di,mbo,Bq,gbo,hbo,Iq,pbo,_bo,ubo,Ey,bbo,Pde,vbo,Fbo,Tbo,st,Cy,Mbo,Bde,Ebo,Cbo,Gi,wbo,Ide,Abo,Lbo,Nq,ybo,xbo,$bo,qp,kbo,Je,wy,Sbo,Nde,Rbo,Pbo,Pa,Bbo,qde,Ibo,Nbo,jde,qbo,jbo,Dde,Dbo,Gbo,Obo,y,jp,Gde,Vbo,Xbo,qq,zbo,Qbo,Wbo,Dp,Ode,Hbo,Ubo,jq,Jbo,Ybo,Kbo,Gp,Vde,Zbo,evo,Dq,ovo,rvo,tvo,Op,Xde,avo,nvo,Gq,svo,lvo,ivo,Vp,zde,dvo,cvo,Oq,fvo,mvo,gvo,Xp,Qde,hvo,pvo,Vq,_vo,uvo,bvo,zp,Wde,vvo,Fvo,Xq,Tvo,Mvo,Evo,Qp,Hde,Cvo,wvo,zq,Avo,Lvo,yvo,Wp,Ude,xvo,$vo,Qq,kvo,Svo,Rvo,Hp,Jde,Pvo,Bvo,Wq,Ivo,Nvo,qvo,Up,Yde,jvo,Dvo,Hq,Gvo,Ovo,Vvo,Jp,Kde,Xvo,zvo,Uq,Qvo,Wvo,Hvo,Yp,Zde,Uvo,Jvo,Jq,Yvo,Kvo,Zvo,Kp,ece,e3o,o3o,Yq,r3o,t3o,a3o,Zp,oce,n3o,s3o,Kq,l3o,i3o,d3o,e_,rce,c3o,f3o,Zq,m3o,g3o,h3o,o_,tce,p3o,_3o,ej,u3o,b3o,v3o,r_,ace,F3o,T3o,oj,M3o,E3o,C3o,t_,nce,w3o,A3o,rj,L3o,y3o,x3o,a_,sce,$3o,k3o,tj,S3o,R3o,P3o,n_,lce,B3o,I3o,aj,N3o,q3o,j3o,s_,ice,D3o,G3o,nj,O3o,V3o,X3o,l_,dce,z3o,Q3o,sj,W3o,H3o,U3o,i_,cce,J3o,Y3o,lj,K3o,Z3o,eFo,d_,fce,oFo,rFo,ij,tFo,aFo,nFo,c_,mce,sFo,lFo,dj,iFo,dFo,cFo,f_,gce,fFo,mFo,cj,gFo,hFo,pFo,m_,hce,_Fo,uFo,fj,bFo,vFo,FFo,g_,pce,TFo,MFo,mj,EFo,CFo,wFo,h_,_ce,AFo,LFo,gj,yFo,xFo,$Fo,p_,uce,kFo,SFo,hj,RFo,PFo,BFo,__,bce,IFo,NFo,pj,qFo,jFo,DFo,u_,vce,GFo,OFo,_j,VFo,XFo,zFo,b_,Fce,QFo,WFo,uj,HFo,UFo,JFo,Qs,Tce,YFo,KFo,bj,ZFo,eTo,vj,oTo,rTo,tTo,v_,Mce,aTo,nTo,Fj,sTo,lTo,iTo,F_,Ece,dTo,cTo,Tj,fTo,mTo,gTo,T_,Cce,hTo,pTo,Mj,_To,uTo,bTo,M_,wce,vTo,FTo,Ej,TTo,MTo,ETo,E_,Ace,CTo,wTo,Cj,ATo,LTo,yTo,C_,Lce,xTo,$To,wj,kTo,STo,RTo,w_,yce,PTo,BTo,Aj,ITo,NTo,qTo,A_,xce,jTo,DTo,Lj,GTo,OTo,VTo,L_,$ce,XTo,zTo,yj,QTo,WTo,HTo,y_,kce,UTo,JTo,xj,YTo,KTo,ZTo,x_,Sce,eMo,oMo,$j,rMo,tMo,aMo,$_,Rce,nMo,sMo,kj,lMo,iMo,dMo,k_,Pce,cMo,fMo,Sj,mMo,gMo,hMo,S_,Bce,pMo,_Mo,Rj,uMo,bMo,vMo,R_,Ice,FMo,TMo,Pj,MMo,EMo,CMo,P_,Nce,wMo,AMo,Bj,LMo,yMo,xMo,B_,qce,$Mo,kMo,Ij,SMo,RMo,PMo,I_,jce,BMo,IMo,Nj,NMo,qMo,jMo,N_,Dce,DMo,GMo,qj,OMo,VMo,XMo,q_,Gce,zMo,QMo,jj,WMo,HMo,UMo,j_,Oce,JMo,YMo,Dj,KMo,ZMo,eEo,D_,Vce,oEo,rEo,Gj,tEo,aEo,nEo,G_,Xce,sEo,lEo,Oj,iEo,dEo,cEo,O_,zce,fEo,mEo,Vj,gEo,hEo,pEo,V_,Qce,_Eo,uEo,Xj,bEo,vEo,FEo,X_,Wce,TEo,MEo,zj,EEo,CEo,wEo,z_,Hce,AEo,LEo,Qj,yEo,xEo,$Eo,Q_,Uce,kEo,SEo,Wj,REo,PEo,BEo,W_,Jce,IEo,NEo,Hj,qEo,jEo,DEo,H_,Yce,GEo,OEo,Uj,VEo,XEo,zEo,U_,Kce,QEo,WEo,Jj,HEo,UEo,JEo,J_,Zce,YEo,KEo,Yj,ZEo,eCo,oCo,Y_,efe,rCo,tCo,Kj,aCo,nCo,sCo,K_,ofe,lCo,iCo,Zj,dCo,cCo,fCo,Z_,rfe,mCo,gCo,eD,hCo,pCo,_Co,eu,tfe,uCo,bCo,oD,vCo,FCo,TCo,ou,afe,MCo,ECo,rD,CCo,wCo,ACo,ru,nfe,LCo,yCo,tD,xCo,$Co,kCo,tu,sfe,SCo,RCo,aD,PCo,BCo,ICo,au,lfe,NCo,qCo,nD,jCo,DCo,GCo,nu,ife,OCo,VCo,sD,XCo,zCo,QCo,su,dfe,WCo,HCo,lD,UCo,JCo,YCo,lu,cfe,KCo,ZCo,iD,e5o,o5o,r5o,iu,ffe,t5o,a5o,dD,n5o,s5o,l5o,du,mfe,i5o,d5o,cD,c5o,f5o,m5o,cu,gfe,g5o,h5o,fD,p5o,_5o,u5o,fu,hfe,b5o,v5o,mD,F5o,T5o,M5o,mu,pfe,E5o,C5o,gD,w5o,A5o,L5o,gu,_fe,y5o,x5o,hD,$5o,k5o,S5o,hu,ufe,R5o,P5o,pD,B5o,I5o,N5o,pu,bfe,q5o,j5o,_D,D5o,G5o,O5o,_u,vfe,V5o,X5o,uD,z5o,Q5o,W5o,uu,Ffe,H5o,U5o,bD,J5o,Y5o,K5o,bu,Tfe,Z5o,e0o,vD,o0o,r0o,t0o,vu,Mfe,a0o,n0o,FD,s0o,l0o,i0o,Fu,Efe,d0o,c0o,TD,f0o,m0o,g0o,Tu,Cfe,h0o,p0o,MD,_0o,u0o,b0o,Mu,wfe,v0o,F0o,ED,T0o,M0o,E0o,Eu,Afe,C0o,w0o,CD,A0o,L0o,y0o,Cu,Lfe,x0o,$0o,wD,k0o,S0o,R0o,wu,yfe,P0o,B0o,AD,I0o,N0o,q0o,Au,xfe,j0o,D0o,LD,G0o,O0o,V0o,Lu,$fe,X0o,z0o,yD,Q0o,W0o,H0o,yu,kfe,U0o,J0o,xD,Y0o,K0o,Z0o,xu,Sfe,ewo,owo,$D,rwo,two,awo,$u,Rfe,nwo,swo,kD,lwo,iwo,dwo,ku,Pfe,cwo,fwo,SD,mwo,gwo,hwo,Su,Bfe,pwo,_wo,RD,uwo,bwo,vwo,Ru,Ife,Fwo,Two,PD,Mwo,Ewo,Cwo,Pu,Nfe,wwo,Awo,BD,Lwo,ywo,xwo,Bu,qfe,$wo,kwo,ID,Swo,Rwo,Pwo,Iu,jfe,Bwo,Iwo,ND,Nwo,qwo,jwo,Nu,Dfe,Dwo,Gwo,qD,Owo,Vwo,Xwo,qu,Gfe,zwo,Qwo,jD,Wwo,Hwo,Uwo,ju,Ofe,Jwo,Ywo,DD,Kwo,Zwo,eAo,Du,oAo,Vfe,rAo,tAo,Xfe,aAo,nAo,Gu,xVe,Oi,Ou,zfe,Ay,sAo,Qfe,lAo,$Ve,$o,Ly,iAo,Vi,dAo,GD,cAo,fAo,OD,mAo,gAo,hAo,yy,pAo,Wfe,_Ao,uAo,bAo,lt,xy,vAo,Hfe,FAo,TAo,Xi,MAo,Ufe,EAo,CAo,VD,wAo,AAo,LAo,Vu,yAo,Ye,$y,xAo,Jfe,$Ao,kAo,Ba,SAo,Yfe,RAo,PAo,Kfe,BAo,IAo,Zfe,NAo,qAo,jAo,G,Xu,eme,DAo,GAo,XD,OAo,VAo,XAo,zu,ome,zAo,QAo,zD,WAo,HAo,UAo,Qu,rme,JAo,YAo,QD,KAo,ZAo,e6o,Wu,tme,o6o,r6o,WD,t6o,a6o,n6o,Hu,ame,s6o,l6o,HD,i6o,d6o,c6o,Uu,nme,f6o,m6o,UD,g6o,h6o,p6o,Ju,sme,_6o,u6o,JD,b6o,v6o,F6o,Yu,lme,T6o,M6o,YD,E6o,C6o,w6o,Ku,ime,A6o,L6o,KD,y6o,x6o,$6o,Zu,dme,k6o,S6o,ZD,R6o,P6o,B6o,e1,cme,I6o,N6o,eG,q6o,j6o,D6o,o1,fme,G6o,O6o,oG,V6o,X6o,z6o,r1,mme,Q6o,W6o,rG,H6o,U6o,J6o,t1,gme,Y6o,K6o,tG,Z6o,eLo,oLo,a1,hme,rLo,tLo,aG,aLo,nLo,sLo,n1,pme,lLo,iLo,nG,dLo,cLo,fLo,s1,_me,mLo,gLo,sG,hLo,pLo,_Lo,l1,ume,uLo,bLo,lG,vLo,FLo,TLo,i1,bme,MLo,ELo,iG,CLo,wLo,ALo,d1,vme,LLo,yLo,dG,xLo,$Lo,kLo,c1,Fme,SLo,RLo,cG,PLo,BLo,ILo,f1,Tme,NLo,qLo,fG,jLo,DLo,GLo,m1,Mme,OLo,VLo,mG,XLo,zLo,QLo,g1,Eme,WLo,HLo,gG,ULo,JLo,YLo,h1,Cme,KLo,ZLo,hG,eyo,oyo,ryo,p1,wme,tyo,ayo,pG,nyo,syo,lyo,_1,Ame,iyo,dyo,_G,cyo,fyo,myo,u1,Lme,gyo,hyo,uG,pyo,_yo,uyo,b1,yme,byo,vyo,bG,Fyo,Tyo,Myo,v1,xme,Eyo,Cyo,vG,wyo,Ayo,Lyo,F1,$me,yyo,xyo,FG,$yo,kyo,Syo,T1,kme,Ryo,Pyo,TG,Byo,Iyo,Nyo,M1,Sme,qyo,jyo,MG,Dyo,Gyo,Oyo,E1,Rme,Vyo,Xyo,EG,zyo,Qyo,Wyo,C1,Pme,Hyo,Uyo,CG,Jyo,Yyo,Kyo,w1,Bme,Zyo,e8o,wG,o8o,r8o,t8o,A1,Ime,a8o,n8o,AG,s8o,l8o,i8o,L1,Nme,d8o,c8o,LG,f8o,m8o,g8o,y1,qme,h8o,p8o,yG,_8o,u8o,b8o,x1,jme,v8o,F8o,xG,T8o,M8o,E8o,$1,Dme,C8o,w8o,$G,A8o,L8o,y8o,k1,Gme,x8o,$8o,kG,k8o,S8o,R8o,S1,Ome,P8o,B8o,SG,I8o,N8o,q8o,R1,Vme,j8o,D8o,RG,G8o,O8o,V8o,P1,Xme,X8o,z8o,PG,Q8o,W8o,H8o,B1,U8o,zme,J8o,Y8o,Qme,K8o,Z8o,I1,kVe,zi,N1,Wme,ky,e9o,Hme,o9o,SVe,ko,Sy,r9o,Qi,t9o,BG,a9o,n9o,IG,s9o,l9o,i9o,Ry,d9o,Ume,c9o,f9o,m9o,it,Py,g9o,Jme,h9o,p9o,Wi,_9o,Yme,u9o,b9o,NG,v9o,F9o,T9o,q1,M9o,Ke,By,E9o,Kme,C9o,w9o,Ia,A9o,Zme,L9o,y9o,ege,x9o,$9o,oge,k9o,S9o,R9o,z,j1,rge,P9o,B9o,qG,I9o,N9o,q9o,D1,tge,j9o,D9o,jG,G9o,O9o,V9o,G1,age,X9o,z9o,DG,Q9o,W9o,H9o,O1,nge,U9o,J9o,GG,Y9o,K9o,Z9o,V1,sge,exo,oxo,OG,rxo,txo,axo,X1,lge,nxo,sxo,VG,lxo,ixo,dxo,z1,ige,cxo,fxo,XG,mxo,gxo,hxo,Q1,dge,pxo,_xo,zG,uxo,bxo,vxo,W1,cge,Fxo,Txo,QG,Mxo,Exo,Cxo,H1,fge,wxo,Axo,WG,Lxo,yxo,xxo,U1,mge,$xo,kxo,HG,Sxo,Rxo,Pxo,J1,gge,Bxo,Ixo,UG,Nxo,qxo,jxo,Y1,hge,Dxo,Gxo,JG,Oxo,Vxo,Xxo,K1,pge,zxo,Qxo,YG,Wxo,Hxo,Uxo,Z1,_ge,Jxo,Yxo,KG,Kxo,Zxo,e$o,e7,uge,o$o,r$o,ZG,t$o,a$o,n$o,o7,bge,s$o,l$o,eO,i$o,d$o,c$o,r7,vge,f$o,m$o,oO,g$o,h$o,p$o,t7,Fge,_$o,u$o,rO,b$o,v$o,F$o,a7,Tge,T$o,M$o,tO,E$o,C$o,w$o,n7,Mge,A$o,L$o,aO,y$o,x$o,$$o,s7,Ege,k$o,S$o,nO,R$o,P$o,B$o,l7,Cge,I$o,N$o,sO,q$o,j$o,D$o,i7,wge,G$o,O$o,lO,V$o,X$o,z$o,d7,Age,Q$o,W$o,iO,H$o,U$o,J$o,c7,Lge,Y$o,K$o,dO,Z$o,eko,oko,f7,yge,rko,tko,cO,ako,nko,sko,m7,xge,lko,iko,fO,dko,cko,fko,g7,$ge,mko,gko,mO,hko,pko,_ko,h7,kge,uko,bko,gO,vko,Fko,Tko,p7,Sge,Mko,Eko,hO,Cko,wko,Ako,_7,Rge,Lko,yko,pO,xko,$ko,kko,u7,Pge,Sko,Rko,_O,Pko,Bko,Iko,b7,Bge,Nko,qko,uO,jko,Dko,Gko,v7,Ige,Oko,Vko,bO,Xko,zko,Qko,F7,Nge,Wko,Hko,vO,Uko,Jko,Yko,T7,qge,Kko,Zko,FO,eSo,oSo,rSo,M7,jge,tSo,aSo,TO,nSo,sSo,lSo,E7,Dge,iSo,dSo,MO,cSo,fSo,mSo,C7,Gge,gSo,hSo,EO,pSo,_So,uSo,w7,bSo,Oge,vSo,FSo,Vge,TSo,MSo,A7,RVe,Hi,L7,Xge,Iy,ESo,zge,CSo,PVe,So,Ny,wSo,Ui,ASo,CO,LSo,ySo,wO,xSo,$So,kSo,qy,SSo,Qge,RSo,PSo,BSo,dt,jy,ISo,Wge,NSo,qSo,Ji,jSo,Hge,DSo,GSo,AO,OSo,VSo,XSo,y7,zSo,Ze,Dy,QSo,Uge,WSo,HSo,Na,USo,Jge,JSo,YSo,Yge,KSo,ZSo,Kge,eRo,oRo,rRo,W,x7,Zge,tRo,aRo,LO,nRo,sRo,lRo,$7,ehe,iRo,dRo,yO,cRo,fRo,mRo,k7,ohe,gRo,hRo,xO,pRo,_Ro,uRo,S7,rhe,bRo,vRo,$O,FRo,TRo,MRo,R7,the,ERo,CRo,kO,wRo,ARo,LRo,P7,ahe,yRo,xRo,SO,$Ro,kRo,SRo,B7,nhe,RRo,PRo,RO,BRo,IRo,NRo,I7,she,qRo,jRo,PO,DRo,GRo,ORo,N7,lhe,VRo,XRo,BO,zRo,QRo,WRo,q7,ihe,HRo,URo,IO,JRo,YRo,KRo,j7,dhe,ZRo,ePo,NO,oPo,rPo,tPo,D7,che,aPo,nPo,qO,sPo,lPo,iPo,G7,fhe,dPo,cPo,jO,fPo,mPo,gPo,O7,mhe,hPo,pPo,DO,_Po,uPo,bPo,V7,ghe,vPo,FPo,GO,TPo,MPo,EPo,X7,hhe,CPo,wPo,OO,APo,LPo,yPo,z7,phe,xPo,$Po,VO,kPo,SPo,RPo,Q7,_he,PPo,BPo,XO,IPo,NPo,qPo,W7,uhe,jPo,DPo,zO,GPo,OPo,VPo,H7,bhe,XPo,zPo,QO,QPo,WPo,HPo,U7,vhe,UPo,JPo,WO,YPo,KPo,ZPo,J7,Fhe,eBo,oBo,HO,rBo,tBo,aBo,Y7,The,nBo,sBo,UO,lBo,iBo,dBo,K7,Mhe,cBo,fBo,JO,mBo,gBo,hBo,Z7,Ehe,pBo,_Bo,YO,uBo,bBo,vBo,e4,Che,FBo,TBo,KO,MBo,EBo,CBo,o4,whe,wBo,ABo,ZO,LBo,yBo,xBo,r4,Ahe,$Bo,kBo,eV,SBo,RBo,PBo,t4,Lhe,BBo,IBo,oV,NBo,qBo,jBo,a4,yhe,DBo,GBo,rV,OBo,VBo,XBo,n4,xhe,zBo,QBo,tV,WBo,HBo,UBo,s4,$he,JBo,YBo,aV,KBo,ZBo,eIo,l4,khe,oIo,rIo,nV,tIo,aIo,nIo,i4,She,sIo,lIo,Rhe,iIo,dIo,cIo,d4,Phe,fIo,mIo,sV,gIo,hIo,pIo,c4,Bhe,_Io,uIo,lV,bIo,vIo,FIo,f4,Ihe,TIo,MIo,iV,EIo,CIo,wIo,m4,Nhe,AIo,LIo,dV,yIo,xIo,$Io,g4,kIo,qhe,SIo,RIo,jhe,PIo,BIo,h4,BVe,Yi,p4,Dhe,Gy,IIo,Ghe,NIo,IVe,Ro,Oy,qIo,Ki,jIo,cV,DIo,GIo,fV,OIo,VIo,XIo,Vy,zIo,Ohe,QIo,WIo,HIo,ct,Xy,UIo,Vhe,JIo,YIo,Zi,KIo,Xhe,ZIo,eNo,mV,oNo,rNo,tNo,_4,aNo,eo,zy,nNo,zhe,sNo,lNo,qa,iNo,Qhe,dNo,cNo,Whe,fNo,mNo,Hhe,gNo,hNo,pNo,pe,u4,Uhe,_No,uNo,gV,bNo,vNo,FNo,b4,Jhe,TNo,MNo,hV,ENo,CNo,wNo,v4,Yhe,ANo,LNo,pV,yNo,xNo,$No,F4,Khe,kNo,SNo,_V,RNo,PNo,BNo,T4,Zhe,INo,NNo,uV,qNo,jNo,DNo,M4,epe,GNo,ONo,bV,VNo,XNo,zNo,E4,ope,QNo,WNo,vV,HNo,UNo,JNo,C4,rpe,YNo,KNo,FV,ZNo,eqo,oqo,w4,tpe,rqo,tqo,TV,aqo,nqo,sqo,A4,ape,lqo,iqo,MV,dqo,cqo,fqo,L4,npe,mqo,gqo,EV,hqo,pqo,_qo,y4,spe,uqo,bqo,CV,vqo,Fqo,Tqo,x4,lpe,Mqo,Eqo,wV,Cqo,wqo,Aqo,$4,ipe,Lqo,yqo,AV,xqo,$qo,kqo,k4,dpe,Sqo,Rqo,LV,Pqo,Bqo,Iqo,S4,cpe,Nqo,qqo,yV,jqo,Dqo,Gqo,R4,fpe,Oqo,Vqo,xV,Xqo,zqo,Qqo,P4,mpe,Wqo,Hqo,$V,Uqo,Jqo,Yqo,B4,Kqo,gpe,Zqo,ejo,hpe,ojo,rjo,I4,NVe,ed,N4,ppe,Qy,tjo,_pe,ajo,qVe,Po,Wy,njo,od,sjo,kV,ljo,ijo,SV,djo,cjo,fjo,Hy,mjo,upe,gjo,hjo,pjo,ft,Uy,_jo,bpe,ujo,bjo,rd,vjo,vpe,Fjo,Tjo,RV,Mjo,Ejo,Cjo,q4,wjo,oo,Jy,Ajo,Fpe,Ljo,yjo,ja,xjo,Tpe,$jo,kjo,Mpe,Sjo,Rjo,Epe,Pjo,Bjo,Ijo,N,j4,Cpe,Njo,qjo,PV,jjo,Djo,Gjo,D4,wpe,Ojo,Vjo,BV,Xjo,zjo,Qjo,G4,Ape,Wjo,Hjo,IV,Ujo,Jjo,Yjo,O4,Lpe,Kjo,Zjo,NV,eDo,oDo,rDo,V4,ype,tDo,aDo,qV,nDo,sDo,lDo,X4,xpe,iDo,dDo,jV,cDo,fDo,mDo,z4,$pe,gDo,hDo,DV,pDo,_Do,uDo,Q4,kpe,bDo,vDo,GV,FDo,TDo,MDo,W4,Spe,EDo,CDo,OV,wDo,ADo,LDo,H4,Rpe,yDo,xDo,VV,$Do,kDo,SDo,U4,Ppe,RDo,PDo,XV,BDo,IDo,NDo,J4,Bpe,qDo,jDo,zV,DDo,GDo,ODo,Y4,Ipe,VDo,XDo,QV,zDo,QDo,WDo,K4,Npe,HDo,UDo,WV,JDo,YDo,KDo,Z4,qpe,ZDo,eGo,HV,oGo,rGo,tGo,e2,jpe,aGo,nGo,UV,sGo,lGo,iGo,o2,Dpe,dGo,cGo,JV,fGo,mGo,gGo,r2,Gpe,hGo,pGo,YV,_Go,uGo,bGo,t2,Ope,vGo,FGo,KV,TGo,MGo,EGo,a2,Vpe,CGo,wGo,ZV,AGo,LGo,yGo,n2,Xpe,xGo,$Go,eX,kGo,SGo,RGo,s2,zpe,PGo,BGo,oX,IGo,NGo,qGo,l2,Qpe,jGo,DGo,rX,GGo,OGo,VGo,i2,Wpe,XGo,zGo,tX,QGo,WGo,HGo,d2,Hpe,UGo,JGo,aX,YGo,KGo,ZGo,c2,Upe,eOo,oOo,nX,rOo,tOo,aOo,f2,Jpe,nOo,sOo,sX,lOo,iOo,dOo,m2,Ype,cOo,fOo,lX,mOo,gOo,hOo,g2,Kpe,pOo,_Oo,iX,uOo,bOo,vOo,h2,Zpe,FOo,TOo,dX,MOo,EOo,COo,p2,e_e,wOo,AOo,cX,LOo,yOo,xOo,_2,o_e,$Oo,kOo,fX,SOo,ROo,POo,u2,r_e,BOo,IOo,mX,NOo,qOo,jOo,b2,t_e,DOo,GOo,gX,OOo,VOo,XOo,v2,a_e,zOo,QOo,hX,WOo,HOo,UOo,F2,n_e,JOo,YOo,pX,KOo,ZOo,eVo,T2,s_e,oVo,rVo,_X,tVo,aVo,nVo,M2,l_e,sVo,lVo,uX,iVo,dVo,cVo,E2,i_e,fVo,mVo,bX,gVo,hVo,pVo,C2,d_e,_Vo,uVo,vX,bVo,vVo,FVo,w2,c_e,TVo,MVo,FX,EVo,CVo,wVo,A2,f_e,AVo,LVo,TX,yVo,xVo,$Vo,L2,m_e,kVo,SVo,MX,RVo,PVo,BVo,y2,g_e,IVo,NVo,EX,qVo,jVo,DVo,x2,h_e,GVo,OVo,CX,VVo,XVo,zVo,$2,p_e,QVo,WVo,wX,HVo,UVo,JVo,k2,__e,YVo,KVo,AX,ZVo,eXo,oXo,S2,u_e,rXo,tXo,LX,aXo,nXo,sXo,R2,b_e,lXo,iXo,yX,dXo,cXo,fXo,P2,v_e,mXo,gXo,xX,hXo,pXo,_Xo,B2,uXo,F_e,bXo,vXo,T_e,FXo,TXo,I2,jVe,td,N2,M_e,Yy,MXo,E_e,EXo,DVe,Bo,Ky,CXo,ad,wXo,$X,AXo,LXo,kX,yXo,xXo,$Xo,Zy,kXo,C_e,SXo,RXo,PXo,mt,e8,BXo,w_e,IXo,NXo,nd,qXo,A_e,jXo,DXo,SX,GXo,OXo,VXo,q2,XXo,ro,o8,zXo,L_e,QXo,WXo,Da,HXo,y_e,UXo,JXo,x_e,YXo,KXo,$_e,ZXo,ezo,ozo,Z,j2,k_e,rzo,tzo,RX,azo,nzo,szo,D2,S_e,lzo,izo,PX,dzo,czo,fzo,G2,R_e,mzo,gzo,BX,hzo,pzo,_zo,O2,P_e,uzo,bzo,IX,vzo,Fzo,Tzo,V2,B_e,Mzo,Ezo,NX,Czo,wzo,Azo,X2,I_e,Lzo,yzo,qX,xzo,$zo,kzo,z2,N_e,Szo,Rzo,jX,Pzo,Bzo,Izo,Q2,q_e,Nzo,qzo,DX,jzo,Dzo,Gzo,W2,j_e,Ozo,Vzo,GX,Xzo,zzo,Qzo,H2,D_e,Wzo,Hzo,OX,Uzo,Jzo,Yzo,U2,G_e,Kzo,Zzo,VX,eQo,oQo,rQo,J2,O_e,tQo,aQo,XX,nQo,sQo,lQo,Y2,V_e,iQo,dQo,zX,cQo,fQo,mQo,K2,X_e,gQo,hQo,QX,pQo,_Qo,uQo,Z2,z_e,bQo,vQo,WX,FQo,TQo,MQo,eb,Q_e,EQo,CQo,HX,wQo,AQo,LQo,ob,W_e,yQo,xQo,UX,$Qo,kQo,SQo,rb,H_e,RQo,PQo,JX,BQo,IQo,NQo,tb,U_e,qQo,jQo,YX,DQo,GQo,OQo,ab,J_e,VQo,XQo,KX,zQo,QQo,WQo,nb,Y_e,HQo,UQo,ZX,JQo,YQo,KQo,sb,K_e,ZQo,eWo,ez,oWo,rWo,tWo,lb,Z_e,aWo,nWo,oz,sWo,lWo,iWo,ib,eue,dWo,cWo,rz,fWo,mWo,gWo,db,oue,hWo,pWo,tz,_Wo,uWo,bWo,cb,rue,vWo,FWo,az,TWo,MWo,EWo,fb,tue,CWo,wWo,nz,AWo,LWo,yWo,mb,aue,xWo,$Wo,sz,kWo,SWo,RWo,gb,nue,PWo,BWo,lz,IWo,NWo,qWo,hb,sue,jWo,DWo,iz,GWo,OWo,VWo,pb,XWo,lue,zWo,QWo,iue,WWo,HWo,_b,GVe,sd,ub,due,r8,UWo,cue,JWo,OVe,Io,t8,YWo,ld,KWo,dz,ZWo,eHo,cz,oHo,rHo,tHo,a8,aHo,fue,nHo,sHo,lHo,gt,n8,iHo,mue,dHo,cHo,id,fHo,gue,mHo,gHo,fz,hHo,pHo,_Ho,bb,uHo,to,s8,bHo,hue,vHo,FHo,Ga,THo,pue,MHo,EHo,_ue,CHo,wHo,uue,AHo,LHo,yHo,No,vb,bue,xHo,$Ho,mz,kHo,SHo,RHo,Fb,vue,PHo,BHo,gz,IHo,NHo,qHo,Tb,Fue,jHo,DHo,hz,GHo,OHo,VHo,Mb,Tue,XHo,zHo,pz,QHo,WHo,HHo,Eb,Mue,UHo,JHo,_z,YHo,KHo,ZHo,Cb,Eue,eUo,oUo,uz,rUo,tUo,aUo,wb,nUo,Cue,sUo,lUo,wue,iUo,dUo,Ab,VVe,dd,Lb,Aue,l8,cUo,Lue,fUo,XVe,qo,i8,mUo,cd,gUo,bz,hUo,pUo,vz,_Uo,uUo,bUo,d8,vUo,yue,FUo,TUo,MUo,ht,c8,EUo,xue,CUo,wUo,fd,AUo,$ue,LUo,yUo,Fz,xUo,$Uo,kUo,yb,SUo,ao,f8,RUo,kue,PUo,BUo,Oa,IUo,Sue,NUo,qUo,Rue,jUo,DUo,Pue,GUo,OUo,VUo,U,xb,Bue,XUo,zUo,Tz,QUo,WUo,HUo,$b,Iue,UUo,JUo,Mz,YUo,KUo,ZUo,kb,Nue,eJo,oJo,Ez,rJo,tJo,aJo,Sb,que,nJo,sJo,Cz,lJo,iJo,dJo,Rb,jue,cJo,fJo,wz,mJo,gJo,hJo,Pb,Due,pJo,_Jo,Az,uJo,bJo,vJo,Bb,Gue,FJo,TJo,Lz,MJo,EJo,CJo,Ib,Oue,wJo,AJo,yz,LJo,yJo,xJo,Nb,Vue,$Jo,kJo,xz,SJo,RJo,PJo,qb,Xue,BJo,IJo,$z,NJo,qJo,jJo,jb,zue,DJo,GJo,kz,OJo,VJo,XJo,Db,Que,zJo,QJo,Sz,WJo,HJo,UJo,Gb,Wue,JJo,YJo,Rz,KJo,ZJo,eYo,Ob,Hue,oYo,rYo,Pz,tYo,aYo,nYo,Vb,Uue,sYo,lYo,Bz,iYo,dYo,cYo,Xb,Jue,fYo,mYo,Iz,gYo,hYo,pYo,zb,Yue,_Yo,uYo,Nz,bYo,vYo,FYo,Qb,Kue,TYo,MYo,qz,EYo,CYo,wYo,Wb,Zue,AYo,LYo,jz,yYo,xYo,$Yo,Hb,e1e,kYo,SYo,Dz,RYo,PYo,BYo,Ub,o1e,IYo,NYo,Gz,qYo,jYo,DYo,Jb,r1e,GYo,OYo,Oz,VYo,XYo,zYo,Yb,t1e,QYo,WYo,Vz,HYo,UYo,JYo,Kb,a1e,YYo,KYo,Xz,ZYo,eKo,oKo,Zb,n1e,rKo,tKo,zz,aKo,nKo,sKo,ev,s1e,lKo,iKo,Qz,dKo,cKo,fKo,ov,l1e,mKo,gKo,Wz,hKo,pKo,_Ko,rv,i1e,uKo,bKo,Hz,vKo,FKo,TKo,tv,d1e,MKo,EKo,Uz,CKo,wKo,AKo,av,c1e,LKo,yKo,Jz,xKo,$Ko,kKo,nv,f1e,SKo,RKo,Yz,PKo,BKo,IKo,sv,m1e,NKo,qKo,Kz,jKo,DKo,GKo,lv,g1e,OKo,VKo,Zz,XKo,zKo,QKo,iv,h1e,WKo,HKo,eQ,UKo,JKo,YKo,dv,p1e,KKo,ZKo,oQ,eZo,oZo,rZo,cv,_1e,tZo,aZo,rQ,nZo,sZo,lZo,fv,iZo,u1e,dZo,cZo,b1e,fZo,mZo,mv,zVe,md,gv,v1e,m8,gZo,F1e,hZo,QVe,jo,g8,pZo,gd,_Zo,tQ,uZo,bZo,aQ,vZo,FZo,TZo,h8,MZo,T1e,EZo,CZo,wZo,pt,p8,AZo,M1e,LZo,yZo,hd,xZo,E1e,$Zo,kZo,nQ,SZo,RZo,PZo,hv,BZo,no,_8,IZo,C1e,NZo,qZo,Va,jZo,w1e,DZo,GZo,A1e,OZo,VZo,L1e,XZo,zZo,QZo,V,pv,y1e,WZo,HZo,sQ,UZo,JZo,YZo,_v,x1e,KZo,ZZo,lQ,eer,oer,rer,uv,$1e,ter,aer,iQ,ner,ser,ler,bv,k1e,ier,der,dQ,cer,fer,mer,vv,S1e,ger,her,cQ,per,_er,uer,Fv,R1e,ber,ver,fQ,Fer,Ter,Mer,Tv,P1e,Eer,Cer,mQ,wer,Aer,Ler,Mv,B1e,yer,xer,gQ,$er,ker,Ser,Ev,I1e,Rer,Per,hQ,Ber,Ier,Ner,Cv,N1e,qer,jer,pQ,Der,Ger,Oer,wv,q1e,Ver,Xer,_Q,zer,Qer,Wer,Av,j1e,Her,Uer,uQ,Jer,Yer,Ker,Lv,D1e,Zer,eor,bQ,oor,ror,tor,yv,G1e,aor,nor,vQ,sor,lor,ior,xv,O1e,dor,cor,FQ,mor,gor,hor,$v,V1e,por,_or,TQ,uor,bor,vor,kv,X1e,For,Tor,MQ,Mor,Eor,Cor,Sv,z1e,wor,Aor,EQ,Lor,yor,xor,Rv,Q1e,$or,kor,CQ,Sor,Ror,Por,Pv,W1e,Bor,Ior,wQ,Nor,qor,jor,Bv,H1e,Dor,Gor,AQ,Oor,Vor,Xor,Iv,U1e,zor,Qor,LQ,Wor,Hor,Uor,Nv,J1e,Jor,Yor,yQ,Kor,Zor,err,qv,Y1e,orr,rrr,xQ,trr,arr,nrr,jv,K1e,srr,lrr,$Q,irr,drr,crr,Dv,Z1e,frr,mrr,kQ,grr,hrr,prr,Gv,e7e,_rr,urr,SQ,brr,vrr,Frr,Ov,o7e,Trr,Mrr,RQ,Err,Crr,wrr,Vv,r7e,Arr,Lrr,PQ,yrr,xrr,$rr,Xv,t7e,krr,Srr,BQ,Rrr,Prr,Brr,zv,a7e,Irr,Nrr,IQ,qrr,jrr,Drr,Qv,n7e,Grr,Orr,NQ,Vrr,Xrr,zrr,Wv,s7e,Qrr,Wrr,qQ,Hrr,Urr,Jrr,Hv,l7e,Yrr,Krr,jQ,Zrr,etr,otr,Uv,i7e,rtr,ttr,DQ,atr,ntr,str,Jv,d7e,ltr,itr,GQ,dtr,ctr,ftr,Yv,c7e,mtr,gtr,OQ,htr,ptr,_tr,Kv,f7e,utr,btr,VQ,vtr,Ftr,Ttr,Zv,m7e,Mtr,Etr,XQ,Ctr,wtr,Atr,e3,g7e,Ltr,ytr,zQ,xtr,$tr,ktr,o3,h7e,Str,Rtr,QQ,Ptr,Btr,Itr,r3,p7e,Ntr,qtr,WQ,jtr,Dtr,Gtr,t3,Otr,_7e,Vtr,Xtr,u7e,ztr,Qtr,a3,WVe,pd,n3,b7e,u8,Wtr,v7e,Htr,HVe,Do,b8,Utr,_d,Jtr,HQ,Ytr,Ktr,UQ,Ztr,ear,oar,v8,rar,F7e,tar,aar,nar,_t,F8,sar,T7e,lar,iar,ud,dar,M7e,car,far,JQ,mar,gar,har,s3,par,so,T8,_ar,E7e,uar,bar,Xa,Far,C7e,Tar,Mar,w7e,Ear,Car,A7e,war,Aar,Lar,L7e,l3,y7e,yar,xar,YQ,$ar,kar,Sar,i3,Rar,x7e,Par,Bar,$7e,Iar,Nar,d3,UVe,bd,c3,k7e,M8,qar,S7e,jar,JVe,Go,E8,Dar,vd,Gar,KQ,Oar,Var,ZQ,Xar,zar,Qar,C8,War,R7e,Har,Uar,Jar,ut,w8,Yar,P7e,Kar,Zar,Fd,enr,B7e,onr,rnr,eW,tnr,anr,nnr,f3,snr,lo,A8,lnr,I7e,inr,dnr,za,cnr,N7e,fnr,mnr,q7e,gnr,hnr,j7e,pnr,_nr,unr,Fe,m3,D7e,bnr,vnr,oW,Fnr,Tnr,Mnr,g3,G7e,Enr,Cnr,rW,wnr,Anr,Lnr,h3,O7e,ynr,xnr,tW,$nr,knr,Snr,p3,V7e,Rnr,Pnr,aW,Bnr,Inr,Nnr,Ws,X7e,qnr,jnr,nW,Dnr,Gnr,sW,Onr,Vnr,Xnr,_3,z7e,znr,Qnr,lW,Wnr,Hnr,Unr,Hs,Q7e,Jnr,Ynr,iW,Knr,Znr,dW,esr,osr,rsr,bt,W7e,tsr,asr,cW,nsr,ssr,fW,lsr,isr,mW,dsr,csr,fsr,u3,H7e,msr,gsr,gW,hsr,psr,_sr,b3,U7e,usr,bsr,hW,vsr,Fsr,Tsr,v3,J7e,Msr,Esr,pW,Csr,wsr,Asr,F3,Y7e,Lsr,ysr,_W,xsr,$sr,ksr,T3,K7e,Ssr,Rsr,uW,Psr,Bsr,Isr,M3,Z7e,Nsr,qsr,bW,jsr,Dsr,Gsr,E3,e4e,Osr,Vsr,vW,Xsr,zsr,Qsr,C3,Wsr,o4e,Hsr,Usr,r4e,Jsr,Ysr,w3,YVe,Td,A3,t4e,L8,Ksr,a4e,Zsr,KVe,Oo,y8,elr,Md,olr,FW,rlr,tlr,TW,alr,nlr,slr,x8,llr,n4e,ilr,dlr,clr,vt,$8,flr,s4e,mlr,glr,Ed,hlr,l4e,plr,_lr,MW,ulr,blr,vlr,L3,Flr,io,k8,Tlr,i4e,Mlr,Elr,Qa,Clr,d4e,wlr,Alr,c4e,Llr,ylr,f4e,xlr,$lr,klr,m4e,y3,g4e,Slr,Rlr,EW,Plr,Blr,Ilr,x3,Nlr,h4e,qlr,jlr,p4e,Dlr,Glr,$3,ZVe,Cd,k3,_4e,S8,Olr,u4e,Vlr,eXe,Vo,R8,Xlr,wd,zlr,CW,Qlr,Wlr,wW,Hlr,Ulr,Jlr,P8,Ylr,b4e,Klr,Zlr,eir,Ft,B8,oir,v4e,rir,tir,Ad,air,F4e,nir,sir,AW,lir,iir,dir,S3,cir,co,I8,fir,T4e,mir,gir,Wa,hir,M4e,pir,_ir,E4e,uir,bir,C4e,vir,Fir,Tir,w4e,R3,A4e,Mir,Eir,LW,Cir,wir,Air,P3,Lir,L4e,yir,xir,y4e,$ir,kir,B3,oXe,Ld,I3,x4e,N8,Sir,$4e,Rir,rXe,Xo,q8,Pir,yd,Bir,yW,Iir,Nir,xW,qir,jir,Dir,j8,Gir,k4e,Oir,Vir,Xir,Tt,D8,zir,S4e,Qir,Wir,xd,Hir,R4e,Uir,Jir,$W,Yir,Kir,Zir,N3,edr,fo,G8,odr,P4e,rdr,tdr,Ha,adr,B4e,ndr,sdr,I4e,ldr,idr,N4e,ddr,cdr,fdr,Pe,q3,q4e,mdr,gdr,kW,hdr,pdr,_dr,j3,j4e,udr,bdr,SW,vdr,Fdr,Tdr,D3,D4e,Mdr,Edr,RW,Cdr,wdr,Adr,G3,G4e,Ldr,ydr,PW,xdr,$dr,kdr,O3,O4e,Sdr,Rdr,BW,Pdr,Bdr,Idr,V3,V4e,Ndr,qdr,IW,jdr,Ddr,Gdr,X3,X4e,Odr,Vdr,NW,Xdr,zdr,Qdr,z3,z4e,Wdr,Hdr,qW,Udr,Jdr,Ydr,Q3,Q4e,Kdr,Zdr,jW,ecr,ocr,rcr,W3,tcr,W4e,acr,ncr,H4e,scr,lcr,H3,tXe,$d,U3,U4e,O8,icr,J4e,dcr,aXe,zo,V8,ccr,kd,fcr,DW,mcr,gcr,GW,hcr,pcr,_cr,X8,ucr,Y4e,bcr,vcr,Fcr,Mt,z8,Tcr,K4e,Mcr,Ecr,Sd,Ccr,Z4e,wcr,Acr,OW,Lcr,ycr,xcr,J3,$cr,mo,Q8,kcr,e2e,Scr,Rcr,Ua,Pcr,o2e,Bcr,Icr,r2e,Ncr,qcr,t2e,jcr,Dcr,Gcr,et,Y3,a2e,Ocr,Vcr,VW,Xcr,zcr,Qcr,K3,n2e,Wcr,Hcr,XW,Ucr,Jcr,Ycr,Z3,s2e,Kcr,Zcr,zW,efr,ofr,rfr,eF,l2e,tfr,afr,QW,nfr,sfr,lfr,oF,i2e,ifr,dfr,WW,cfr,ffr,mfr,rF,gfr,d2e,hfr,pfr,c2e,_fr,ufr,tF,nXe,Rd,aF,f2e,W8,bfr,m2e,vfr,sXe,Qo,H8,Ffr,Pd,Tfr,HW,Mfr,Efr,UW,Cfr,wfr,Afr,U8,Lfr,g2e,yfr,xfr,$fr,Et,J8,kfr,h2e,Sfr,Rfr,Bd,Pfr,p2e,Bfr,Ifr,JW,Nfr,qfr,jfr,nF,Dfr,go,Y8,Gfr,_2e,Ofr,Vfr,Ja,Xfr,u2e,zfr,Qfr,b2e,Wfr,Hfr,v2e,Ufr,Jfr,Yfr,Le,sF,F2e,Kfr,Zfr,YW,emr,omr,rmr,lF,T2e,tmr,amr,KW,nmr,smr,lmr,iF,M2e,imr,dmr,ZW,cmr,fmr,mmr,dF,E2e,gmr,hmr,eH,pmr,_mr,umr,cF,C2e,bmr,vmr,oH,Fmr,Tmr,Mmr,fF,w2e,Emr,Cmr,rH,wmr,Amr,Lmr,mF,A2e,ymr,xmr,tH,$mr,kmr,Smr,gF,L2e,Rmr,Pmr,aH,Bmr,Imr,Nmr,hF,y2e,qmr,jmr,nH,Dmr,Gmr,Omr,pF,x2e,Vmr,Xmr,sH,zmr,Qmr,Wmr,_F,Hmr,$2e,Umr,Jmr,k2e,Ymr,Kmr,uF,lXe,Id,bF,S2e,K8,Zmr,R2e,egr,iXe,Wo,Z8,ogr,Nd,rgr,lH,tgr,agr,iH,ngr,sgr,lgr,e9,igr,P2e,dgr,cgr,fgr,Ct,o9,mgr,B2e,ggr,hgr,qd,pgr,I2e,_gr,ugr,dH,bgr,vgr,Fgr,vF,Tgr,ho,r9,Mgr,N2e,Egr,Cgr,Ya,wgr,q2e,Agr,Lgr,j2e,ygr,xgr,D2e,$gr,kgr,Sgr,t9,FF,G2e,Rgr,Pgr,cH,Bgr,Igr,Ngr,TF,O2e,qgr,jgr,fH,Dgr,Ggr,Ogr,MF,Vgr,V2e,Xgr,zgr,X2e,Qgr,Wgr,EF,dXe,jd,CF,z2e,a9,Hgr,Q2e,Ugr,cXe,Ho,n9,Jgr,Dd,Ygr,mH,Kgr,Zgr,gH,ehr,ohr,rhr,s9,thr,W2e,ahr,nhr,shr,wt,l9,lhr,H2e,ihr,dhr,Gd,chr,U2e,fhr,mhr,hH,ghr,hhr,phr,wF,_hr,po,i9,uhr,J2e,bhr,vhr,Ka,Fhr,Y2e,Thr,Mhr,K2e,Ehr,Chr,Z2e,whr,Ahr,Lhr,ot,AF,ebe,yhr,xhr,pH,$hr,khr,Shr,LF,obe,Rhr,Phr,_H,Bhr,Ihr,Nhr,yF,rbe,qhr,jhr,uH,Dhr,Ghr,Ohr,xF,tbe,Vhr,Xhr,bH,zhr,Qhr,Whr,$F,abe,Hhr,Uhr,vH,Jhr,Yhr,Khr,kF,Zhr,nbe,epr,opr,sbe,rpr,tpr,SF,fXe,Od,RF,lbe,d9,apr,ibe,npr,mXe,Uo,c9,spr,Vd,lpr,FH,ipr,dpr,TH,cpr,fpr,mpr,f9,gpr,dbe,hpr,ppr,_pr,At,m9,upr,cbe,bpr,vpr,Xd,Fpr,fbe,Tpr,Mpr,MH,Epr,Cpr,wpr,PF,Apr,_o,g9,Lpr,mbe,ypr,xpr,Za,$pr,gbe,kpr,Spr,hbe,Rpr,Ppr,pbe,Bpr,Ipr,Npr,zd,BF,_be,qpr,jpr,EH,Dpr,Gpr,Opr,IF,ube,Vpr,Xpr,CH,zpr,Qpr,Wpr,NF,bbe,Hpr,Upr,wH,Jpr,Ypr,Kpr,qF,Zpr,vbe,e_r,o_r,Fbe,r_r,t_r,jF,gXe,Qd,DF,Tbe,h9,a_r,Mbe,n_r,hXe,Jo,p9,s_r,Wd,l_r,AH,i_r,d_r,LH,c_r,f_r,m_r,_9,g_r,Ebe,h_r,p_r,__r,Lt,u9,u_r,Cbe,b_r,v_r,Hd,F_r,wbe,T_r,M_r,yH,E_r,C_r,w_r,GF,A_r,uo,b9,L_r,Abe,y_r,x_r,en,$_r,Lbe,k_r,S_r,ybe,R_r,P_r,xbe,B_r,I_r,N_r,v9,OF,$be,q_r,j_r,xH,D_r,G_r,O_r,VF,kbe,V_r,X_r,$H,z_r,Q_r,W_r,XF,H_r,Sbe,U_r,J_r,Rbe,Y_r,K_r,zF,pXe,Ud,QF,Pbe,F9,Z_r,Bbe,eur,_Xe,Yo,T9,our,Jd,rur,kH,tur,aur,SH,nur,sur,lur,M9,iur,Ibe,dur,cur,fur,yt,E9,mur,Nbe,gur,hur,Yd,pur,qbe,_ur,uur,RH,bur,vur,Fur,WF,Tur,bo,C9,Mur,jbe,Eur,Cur,on,wur,Dbe,Aur,Lur,Gbe,yur,xur,Obe,$ur,kur,Sur,Vbe,HF,Xbe,Rur,Pur,PH,Bur,Iur,Nur,UF,qur,zbe,jur,Dur,Qbe,Gur,Our,JF,uXe,Kd,YF,Wbe,w9,Vur,Hbe,Xur,bXe,Ko,A9,zur,Zd,Qur,BH,Wur,Hur,IH,Uur,Jur,Yur,L9,Kur,Ube,Zur,e1r,o1r,xt,y9,r1r,Jbe,t1r,a1r,ec,n1r,Ybe,s1r,l1r,NH,i1r,d1r,c1r,KF,f1r,vo,x9,m1r,Kbe,g1r,h1r,rn,p1r,Zbe,_1r,u1r,eve,b1r,v1r,ove,F1r,T1r,M1r,tn,ZF,rve,E1r,C1r,qH,w1r,A1r,L1r,eT,tve,y1r,x1r,jH,$1r,k1r,S1r,oT,ave,R1r,P1r,DH,B1r,I1r,N1r,rT,nve,q1r,j1r,GH,D1r,G1r,O1r,tT,V1r,sve,X1r,z1r,lve,Q1r,W1r,aT,vXe,oc,nT,ive,$9,H1r,dve,U1r,FXe,Zo,k9,J1r,rc,Y1r,OH,K1r,Z1r,VH,e7r,o7r,r7r,S9,t7r,cve,a7r,n7r,s7r,$t,R9,l7r,fve,i7r,d7r,tc,c7r,mve,f7r,m7r,XH,g7r,h7r,p7r,sT,_7r,Fo,P9,u7r,gve,b7r,v7r,an,F7r,hve,T7r,M7r,pve,E7r,C7r,_ve,w7r,A7r,L7r,uve,lT,bve,y7r,x7r,zH,$7r,k7r,S7r,iT,R7r,vve,P7r,B7r,Fve,I7r,N7r,dT,TXe,ac,cT,Tve,B9,q7r,Mve,j7r,MXe,er,I9,D7r,nc,G7r,QH,O7r,V7r,WH,X7r,z7r,Q7r,N9,W7r,Eve,H7r,U7r,J7r,kt,q9,Y7r,Cve,K7r,Z7r,sc,e4r,wve,o4r,r4r,HH,t4r,a4r,n4r,fT,s4r,yr,j9,l4r,Ave,i4r,d4r,nn,c4r,Lve,f4r,m4r,yve,g4r,h4r,xve,p4r,_4r,u4r,j,mT,$ve,b4r,v4r,UH,F4r,T4r,M4r,gT,kve,E4r,C4r,JH,w4r,A4r,L4r,hT,Sve,y4r,x4r,YH,$4r,k4r,S4r,pT,Rve,R4r,P4r,KH,B4r,I4r,N4r,_T,Pve,q4r,j4r,ZH,D4r,G4r,O4r,uT,Bve,V4r,X4r,eU,z4r,Q4r,W4r,bT,Ive,H4r,U4r,oU,J4r,Y4r,K4r,vT,Nve,Z4r,e2r,rU,o2r,r2r,t2r,FT,qve,a2r,n2r,tU,s2r,l2r,i2r,TT,jve,d2r,c2r,aU,f2r,m2r,g2r,MT,Dve,h2r,p2r,nU,_2r,u2r,b2r,ET,Gve,v2r,F2r,sU,T2r,M2r,E2r,CT,Ove,C2r,w2r,lU,A2r,L2r,y2r,wT,Vve,x2r,$2r,iU,k2r,S2r,R2r,AT,Xve,P2r,B2r,dU,I2r,N2r,q2r,LT,zve,j2r,D2r,cU,G2r,O2r,V2r,yT,Qve,X2r,z2r,fU,Q2r,W2r,H2r,Us,Wve,U2r,J2r,mU,Y2r,K2r,gU,Z2r,ebr,obr,xT,Hve,rbr,tbr,hU,abr,nbr,sbr,$T,Uve,lbr,ibr,pU,dbr,cbr,fbr,kT,Jve,mbr,gbr,_U,hbr,pbr,_br,ST,Yve,ubr,bbr,uU,vbr,Fbr,Tbr,RT,Kve,Mbr,Ebr,bU,Cbr,wbr,Abr,PT,Zve,Lbr,ybr,vU,xbr,$br,kbr,BT,e3e,Sbr,Rbr,FU,Pbr,Bbr,Ibr,IT,o3e,Nbr,qbr,TU,jbr,Dbr,Gbr,NT,r3e,Obr,Vbr,MU,Xbr,zbr,Qbr,qT,t3e,Wbr,Hbr,EU,Ubr,Jbr,Ybr,jT,a3e,Kbr,Zbr,CU,evr,ovr,rvr,DT,n3e,tvr,avr,wU,nvr,svr,lvr,GT,s3e,ivr,dvr,AU,cvr,fvr,mvr,OT,l3e,gvr,hvr,LU,pvr,_vr,uvr,VT,i3e,bvr,vvr,yU,Fvr,Tvr,Mvr,XT,d3e,Evr,Cvr,xU,wvr,Avr,Lvr,zT,c3e,yvr,xvr,$U,$vr,kvr,Svr,QT,f3e,Rvr,Pvr,kU,Bvr,Ivr,Nvr,WT,m3e,qvr,jvr,SU,Dvr,Gvr,Ovr,HT,g3e,Vvr,Xvr,RU,zvr,Qvr,Wvr,UT,h3e,Hvr,Uvr,PU,Jvr,Yvr,Kvr,JT,p3e,Zvr,e3r,BU,o3r,r3r,t3r,YT,_3e,a3r,n3r,IU,s3r,l3r,i3r,KT,u3e,d3r,c3r,NU,f3r,m3r,g3r,ZT,b3e,h3r,p3r,qU,_3r,u3r,b3r,eM,v3e,v3r,F3r,jU,T3r,M3r,E3r,oM,F3e,C3r,w3r,DU,A3r,L3r,y3r,rM,T3e,x3r,$3r,GU,k3r,S3r,R3r,tM,M3e,P3r,B3r,OU,I3r,N3r,q3r,aM,E3e,j3r,D3r,VU,G3r,O3r,V3r,nM,EXe,lc,sM,C3e,D9,X3r,w3e,z3r,CXe,or,G9,Q3r,ic,W3r,XU,H3r,U3r,zU,J3r,Y3r,K3r,O9,Z3r,A3e,eFr,oFr,rFr,St,V9,tFr,L3e,aFr,nFr,dc,sFr,y3e,lFr,iFr,QU,dFr,cFr,fFr,lM,mFr,xr,X9,gFr,x3e,hFr,pFr,sn,_Fr,$3e,uFr,bFr,k3e,vFr,FFr,S3e,TFr,MFr,EFr,se,iM,R3e,CFr,wFr,WU,AFr,LFr,yFr,dM,P3e,xFr,$Fr,HU,kFr,SFr,RFr,cM,B3e,PFr,BFr,UU,IFr,NFr,qFr,fM,I3e,jFr,DFr,JU,GFr,OFr,VFr,mM,N3e,XFr,zFr,YU,QFr,WFr,HFr,gM,q3e,UFr,JFr,KU,YFr,KFr,ZFr,hM,j3e,eTr,oTr,ZU,rTr,tTr,aTr,pM,D3e,nTr,sTr,eJ,lTr,iTr,dTr,_M,G3e,cTr,fTr,oJ,mTr,gTr,hTr,uM,O3e,pTr,_Tr,rJ,uTr,bTr,vTr,bM,V3e,FTr,TTr,tJ,MTr,ETr,CTr,vM,X3e,wTr,ATr,aJ,LTr,yTr,xTr,FM,z3e,$Tr,kTr,nJ,STr,RTr,PTr,TM,Q3e,BTr,ITr,sJ,NTr,qTr,jTr,MM,W3e,DTr,GTr,lJ,OTr,VTr,XTr,EM,H3e,zTr,QTr,iJ,WTr,HTr,UTr,CM,U3e,JTr,YTr,dJ,KTr,ZTr,eMr,wM,J3e,oMr,rMr,cJ,tMr,aMr,nMr,AM,Y3e,sMr,lMr,fJ,iMr,dMr,cMr,LM,K3e,fMr,mMr,mJ,gMr,hMr,pMr,yM,Z3e,_Mr,uMr,gJ,bMr,vMr,FMr,xM,eFe,TMr,MMr,hJ,EMr,CMr,wMr,$M,oFe,AMr,LMr,pJ,yMr,xMr,$Mr,kM,wXe,cc,SM,rFe,z9,kMr,tFe,SMr,AXe,rr,Q9,RMr,fc,PMr,_J,BMr,IMr,uJ,NMr,qMr,jMr,W9,DMr,aFe,GMr,OMr,VMr,Rt,H9,XMr,nFe,zMr,QMr,mc,WMr,sFe,HMr,UMr,bJ,JMr,YMr,KMr,RM,ZMr,$r,U9,eEr,lFe,oEr,rEr,ln,tEr,iFe,aEr,nEr,dFe,sEr,lEr,cFe,iEr,dEr,cEr,Me,PM,fFe,fEr,mEr,vJ,gEr,hEr,pEr,BM,mFe,_Er,uEr,FJ,bEr,vEr,FEr,IM,gFe,TEr,MEr,TJ,EEr,CEr,wEr,NM,hFe,AEr,LEr,MJ,yEr,xEr,$Er,qM,pFe,kEr,SEr,EJ,REr,PEr,BEr,jM,_Fe,IEr,NEr,CJ,qEr,jEr,DEr,DM,uFe,GEr,OEr,wJ,VEr,XEr,zEr,GM,bFe,QEr,WEr,AJ,HEr,UEr,JEr,OM,vFe,YEr,KEr,LJ,ZEr,eCr,oCr,VM,FFe,rCr,tCr,yJ,aCr,nCr,sCr,XM,TFe,lCr,iCr,xJ,dCr,cCr,fCr,zM,MFe,mCr,gCr,$J,hCr,pCr,_Cr,QM,EFe,uCr,bCr,kJ,vCr,FCr,TCr,WM,LXe,gc,HM,CFe,J9,MCr,wFe,ECr,yXe,tr,Y9,CCr,hc,wCr,SJ,ACr,LCr,RJ,yCr,xCr,$Cr,K9,kCr,AFe,SCr,RCr,PCr,Pt,Z9,BCr,LFe,ICr,NCr,pc,qCr,yFe,jCr,DCr,PJ,GCr,OCr,VCr,UM,XCr,kr,ex,zCr,xFe,QCr,WCr,dn,HCr,$Fe,UCr,JCr,kFe,YCr,KCr,SFe,ZCr,e5r,o5r,rt,JM,RFe,r5r,t5r,BJ,a5r,n5r,s5r,YM,PFe,l5r,i5r,IJ,d5r,c5r,f5r,KM,BFe,m5r,g5r,NJ,h5r,p5r,_5r,ZM,IFe,u5r,b5r,qJ,v5r,F5r,T5r,eE,NFe,M5r,E5r,jJ,C5r,w5r,A5r,oE,xXe,_c,rE,qFe,ox,L5r,jFe,y5r,$Xe,ar,rx,x5r,uc,$5r,DJ,k5r,S5r,GJ,R5r,P5r,B5r,tx,I5r,DFe,N5r,q5r,j5r,Bt,ax,D5r,GFe,G5r,O5r,bc,V5r,OFe,X5r,z5r,OJ,Q5r,W5r,H5r,tE,U5r,Sr,nx,J5r,VFe,Y5r,K5r,cn,Z5r,XFe,e0r,o0r,zFe,r0r,t0r,QFe,a0r,n0r,s0r,ie,aE,WFe,l0r,i0r,VJ,d0r,c0r,f0r,nE,HFe,m0r,g0r,XJ,h0r,p0r,_0r,sE,UFe,u0r,b0r,zJ,v0r,F0r,T0r,lE,JFe,M0r,E0r,QJ,C0r,w0r,A0r,iE,YFe,L0r,y0r,WJ,x0r,$0r,k0r,dE,KFe,S0r,R0r,HJ,P0r,B0r,I0r,cE,ZFe,N0r,q0r,UJ,j0r,D0r,G0r,fE,eTe,O0r,V0r,JJ,X0r,z0r,Q0r,mE,oTe,W0r,H0r,YJ,U0r,J0r,Y0r,gE,rTe,K0r,Z0r,KJ,ewr,owr,rwr,hE,tTe,twr,awr,ZJ,nwr,swr,lwr,pE,aTe,iwr,dwr,eY,cwr,fwr,mwr,_E,nTe,gwr,hwr,oY,pwr,_wr,uwr,uE,sTe,bwr,vwr,rY,Fwr,Twr,Mwr,bE,lTe,Ewr,Cwr,tY,wwr,Awr,Lwr,vE,iTe,ywr,xwr,aY,$wr,kwr,Swr,FE,dTe,Rwr,Pwr,nY,Bwr,Iwr,Nwr,TE,cTe,qwr,jwr,sY,Dwr,Gwr,Owr,ME,fTe,Vwr,Xwr,lY,zwr,Qwr,Wwr,EE,mTe,Hwr,Uwr,iY,Jwr,Ywr,Kwr,CE,kXe,vc,wE,gTe,sx,Zwr,hTe,eAr,SXe,nr,lx,oAr,Fc,rAr,dY,tAr,aAr,cY,nAr,sAr,lAr,ix,iAr,pTe,dAr,cAr,fAr,It,dx,mAr,_Te,gAr,hAr,Tc,pAr,uTe,_Ar,uAr,fY,bAr,vAr,FAr,AE,TAr,Rr,cx,MAr,bTe,EAr,CAr,fn,wAr,vTe,AAr,LAr,FTe,yAr,xAr,TTe,$Ar,kAr,SAr,ye,LE,MTe,RAr,PAr,mY,BAr,IAr,NAr,yE,ETe,qAr,jAr,gY,DAr,GAr,OAr,xE,CTe,VAr,XAr,hY,zAr,QAr,WAr,$E,wTe,HAr,UAr,pY,JAr,YAr,KAr,kE,ATe,ZAr,e6r,_Y,o6r,r6r,t6r,SE,LTe,a6r,n6r,uY,s6r,l6r,i6r,RE,yTe,d6r,c6r,bY,f6r,m6r,g6r,PE,xTe,h6r,p6r,vY,_6r,u6r,b6r,BE,$Te,v6r,F6r,FY,T6r,M6r,E6r,IE,kTe,C6r,w6r,TY,A6r,L6r,y6r,NE,RXe,Mc,qE,STe,fx,x6r,RTe,$6r,PXe,sr,mx,k6r,Ec,S6r,MY,R6r,P6r,EY,B6r,I6r,N6r,gx,q6r,PTe,j6r,D6r,G6r,Nt,hx,O6r,BTe,V6r,X6r,Cc,z6r,ITe,Q6r,W6r,CY,H6r,U6r,J6r,jE,Y6r,Pr,px,K6r,NTe,Z6r,eLr,mn,oLr,qTe,rLr,tLr,jTe,aLr,nLr,DTe,sLr,lLr,iLr,te,DE,GTe,dLr,cLr,wY,fLr,mLr,gLr,GE,OTe,hLr,pLr,AY,_Lr,uLr,bLr,OE,VTe,vLr,FLr,LY,TLr,MLr,ELr,VE,XTe,CLr,wLr,yY,ALr,LLr,yLr,XE,zTe,xLr,$Lr,xY,kLr,SLr,RLr,zE,QTe,PLr,BLr,$Y,ILr,NLr,qLr,QE,WTe,jLr,DLr,kY,GLr,OLr,VLr,WE,HTe,XLr,zLr,SY,QLr,WLr,HLr,HE,UTe,ULr,JLr,RY,YLr,KLr,ZLr,UE,JTe,eyr,oyr,PY,ryr,tyr,ayr,JE,YTe,nyr,syr,BY,lyr,iyr,dyr,YE,KTe,cyr,fyr,IY,myr,gyr,hyr,KE,ZTe,pyr,_yr,NY,uyr,byr,vyr,ZE,eMe,Fyr,Tyr,qY,Myr,Eyr,Cyr,eC,oMe,wyr,Ayr,jY,Lyr,yyr,xyr,oC,rMe,$yr,kyr,DY,Syr,Ryr,Pyr,rC,tMe,Byr,Iyr,GY,Nyr,qyr,jyr,tC,aMe,Dyr,Gyr,OY,Oyr,Vyr,Xyr,aC,nMe,zyr,Qyr,VY,Wyr,Hyr,Uyr,nC,sMe,Jyr,Yyr,XY,Kyr,Zyr,e8r,sC,lMe,o8r,r8r,zY,t8r,a8r,n8r,lC,iMe,s8r,l8r,QY,i8r,d8r,c8r,iC,dMe,f8r,m8r,WY,g8r,h8r,p8r,dC,cMe,_8r,u8r,HY,b8r,v8r,F8r,cC,fMe,T8r,M8r,UY,E8r,C8r,w8r,fC,mMe,A8r,L8r,JY,y8r,x8r,$8r,mC,BXe,wc,gC,gMe,_x,k8r,hMe,S8r,IXe,lr,ux,R8r,Ac,P8r,YY,B8r,I8r,KY,N8r,q8r,j8r,bx,D8r,pMe,G8r,O8r,V8r,qt,vx,X8r,_Me,z8r,Q8r,Lc,W8r,uMe,H8r,U8r,ZY,J8r,Y8r,K8r,hC,Z8r,Br,Fx,e9r,bMe,o9r,r9r,gn,t9r,vMe,a9r,n9r,FMe,s9r,l9r,TMe,i9r,d9r,c9r,_e,pC,MMe,f9r,m9r,eK,g9r,h9r,p9r,_C,EMe,_9r,u9r,oK,b9r,v9r,F9r,uC,CMe,T9r,M9r,rK,E9r,C9r,w9r,bC,wMe,A9r,L9r,tK,y9r,x9r,$9r,vC,AMe,k9r,S9r,aK,R9r,P9r,B9r,FC,LMe,I9r,N9r,nK,q9r,j9r,D9r,TC,yMe,G9r,O9r,sK,V9r,X9r,z9r,MC,xMe,Q9r,W9r,lK,H9r,U9r,J9r,EC,$Me,Y9r,K9r,iK,Z9r,exr,oxr,CC,kMe,rxr,txr,dK,axr,nxr,sxr,wC,SMe,lxr,ixr,cK,dxr,cxr,fxr,AC,RMe,mxr,gxr,fK,hxr,pxr,_xr,LC,PMe,uxr,bxr,mK,vxr,Fxr,Txr,yC,BMe,Mxr,Exr,gK,Cxr,wxr,Axr,xC,IMe,Lxr,yxr,hK,xxr,$xr,kxr,$C,NMe,Sxr,Rxr,pK,Pxr,Bxr,Ixr,kC,qMe,Nxr,qxr,_K,jxr,Dxr,Gxr,SC,NXe,yc,RC,jMe,Tx,Oxr,DMe,Vxr,qXe,ir,Mx,Xxr,xc,zxr,uK,Qxr,Wxr,bK,Hxr,Uxr,Jxr,Ex,Yxr,GMe,Kxr,Zxr,e$r,jt,Cx,o$r,OMe,r$r,t$r,$c,a$r,VMe,n$r,s$r,vK,l$r,i$r,d$r,PC,c$r,Ir,wx,f$r,XMe,m$r,g$r,hn,h$r,zMe,p$r,_$r,QMe,u$r,b$r,WMe,v$r,F$r,T$r,Ax,BC,HMe,M$r,E$r,FK,C$r,w$r,A$r,IC,UMe,L$r,y$r,TK,x$r,$$r,k$r,NC,jXe,kc,qC,JMe,Lx,S$r,YMe,R$r,DXe,dr,yx,P$r,Sc,B$r,MK,I$r,N$r,EK,q$r,j$r,D$r,xx,G$r,KMe,O$r,V$r,X$r,Dt,$x,z$r,ZMe,Q$r,W$r,Rc,H$r,eEe,U$r,J$r,CK,Y$r,K$r,Z$r,jC,ekr,Nr,kx,okr,oEe,rkr,tkr,pn,akr,rEe,nkr,skr,tEe,lkr,ikr,aEe,dkr,ckr,fkr,nEe,DC,sEe,mkr,gkr,wK,hkr,pkr,_kr,GC,GXe,Pc,OC,lEe,Sx,ukr,iEe,bkr,OXe,cr,Rx,vkr,Bc,Fkr,AK,Tkr,Mkr,LK,Ekr,Ckr,wkr,Px,Akr,dEe,Lkr,ykr,xkr,Gt,Bx,$kr,cEe,kkr,Skr,Ic,Rkr,fEe,Pkr,Bkr,yK,Ikr,Nkr,qkr,VC,jkr,qr,Ix,Dkr,mEe,Gkr,Okr,_n,Vkr,gEe,Xkr,zkr,hEe,Qkr,Wkr,pEe,Hkr,Ukr,Jkr,de,XC,_Ee,Ykr,Kkr,xK,Zkr,eSr,oSr,zC,uEe,rSr,tSr,$K,aSr,nSr,sSr,QC,bEe,lSr,iSr,kK,dSr,cSr,fSr,WC,vEe,mSr,gSr,SK,hSr,pSr,_Sr,HC,FEe,uSr,bSr,RK,vSr,FSr,TSr,UC,TEe,MSr,ESr,PK,CSr,wSr,ASr,JC,MEe,LSr,ySr,BK,xSr,$Sr,kSr,YC,EEe,SSr,RSr,IK,PSr,BSr,ISr,KC,CEe,NSr,qSr,NK,jSr,DSr,GSr,ZC,wEe,OSr,VSr,qK,XSr,zSr,QSr,e5,AEe,WSr,HSr,jK,USr,JSr,YSr,o5,LEe,KSr,ZSr,DK,eRr,oRr,rRr,r5,yEe,tRr,aRr,GK,nRr,sRr,lRr,t5,xEe,iRr,dRr,OK,cRr,fRr,mRr,a5,$Ee,gRr,hRr,VK,pRr,_Rr,uRr,n5,kEe,bRr,vRr,XK,FRr,TRr,MRr,s5,SEe,ERr,CRr,zK,wRr,ARr,LRr,l5,REe,yRr,xRr,QK,$Rr,kRr,SRr,i5,PEe,RRr,PRr,WK,BRr,IRr,NRr,d5,BEe,qRr,jRr,HK,DRr,GRr,ORr,c5,VXe,Nc,f5,IEe,Nx,VRr,NEe,XRr,XXe,fr,qx,zRr,qc,QRr,UK,WRr,HRr,JK,URr,JRr,YRr,jx,KRr,qEe,ZRr,ePr,oPr,Ot,Dx,rPr,jEe,tPr,aPr,jc,nPr,DEe,sPr,lPr,YK,iPr,dPr,cPr,m5,fPr,jr,Gx,mPr,GEe,gPr,hPr,un,pPr,OEe,_Pr,uPr,VEe,bPr,vPr,XEe,FPr,TPr,MPr,ce,g5,zEe,EPr,CPr,KK,wPr,APr,LPr,h5,QEe,yPr,xPr,ZK,$Pr,kPr,SPr,p5,WEe,RPr,PPr,eZ,BPr,IPr,NPr,_5,HEe,qPr,jPr,oZ,DPr,GPr,OPr,u5,UEe,VPr,XPr,rZ,zPr,QPr,WPr,b5,JEe,HPr,UPr,tZ,JPr,YPr,KPr,v5,YEe,ZPr,eBr,aZ,oBr,rBr,tBr,F5,KEe,aBr,nBr,nZ,sBr,lBr,iBr,T5,ZEe,dBr,cBr,sZ,fBr,mBr,gBr,M5,eCe,hBr,pBr,lZ,_Br,uBr,bBr,E5,oCe,vBr,FBr,iZ,TBr,MBr,EBr,C5,rCe,CBr,wBr,dZ,ABr,LBr,yBr,w5,tCe,xBr,$Br,cZ,kBr,SBr,RBr,A5,aCe,PBr,BBr,fZ,IBr,NBr,qBr,L5,nCe,jBr,DBr,mZ,GBr,OBr,VBr,y5,sCe,XBr,zBr,gZ,QBr,WBr,HBr,x5,lCe,UBr,JBr,hZ,YBr,KBr,ZBr,$5,iCe,eIr,oIr,pZ,rIr,tIr,aIr,k5,dCe,nIr,sIr,_Z,lIr,iIr,dIr,S5,cCe,cIr,fIr,uZ,mIr,gIr,hIr,R5,zXe,Dc,P5,fCe,Ox,pIr,mCe,_Ir,QXe,mr,Vx,uIr,Gc,bIr,bZ,vIr,FIr,vZ,TIr,MIr,EIr,Xx,CIr,gCe,wIr,AIr,LIr,Vt,zx,yIr,hCe,xIr,$Ir,Oc,kIr,pCe,SIr,RIr,FZ,PIr,BIr,IIr,B5,NIr,Dr,Qx,qIr,_Ce,jIr,DIr,bn,GIr,uCe,OIr,VIr,bCe,XIr,zIr,vCe,QIr,WIr,HIr,FCe,I5,TCe,UIr,JIr,TZ,YIr,KIr,ZIr,N5,WXe,Vc,q5,MCe,Wx,eNr,ECe,oNr,HXe,gr,Hx,rNr,Xc,tNr,MZ,aNr,nNr,EZ,sNr,lNr,iNr,Ux,dNr,CCe,cNr,fNr,mNr,Xt,Jx,gNr,wCe,hNr,pNr,zc,_Nr,ACe,uNr,bNr,CZ,vNr,FNr,TNr,j5,MNr,Gr,Yx,ENr,LCe,CNr,wNr,vn,ANr,yCe,LNr,yNr,xCe,xNr,$Nr,$Ce,kNr,SNr,RNr,kCe,D5,SCe,PNr,BNr,wZ,INr,NNr,qNr,G5,UXe,Qc,O5,RCe,Kx,jNr,PCe,DNr,JXe,hr,Zx,GNr,Wc,ONr,AZ,VNr,XNr,LZ,zNr,QNr,WNr,e$,HNr,BCe,UNr,JNr,YNr,zt,o$,KNr,ICe,ZNr,eqr,Hc,oqr,NCe,rqr,tqr,yZ,aqr,nqr,sqr,V5,lqr,Or,r$,iqr,qCe,dqr,cqr,Fn,fqr,jCe,mqr,gqr,DCe,hqr,pqr,GCe,_qr,uqr,bqr,oe,X5,OCe,vqr,Fqr,xZ,Tqr,Mqr,Eqr,z5,VCe,Cqr,wqr,$Z,Aqr,Lqr,yqr,Q5,XCe,xqr,$qr,kZ,kqr,Sqr,Rqr,W5,zCe,Pqr,Bqr,SZ,Iqr,Nqr,qqr,H5,QCe,jqr,Dqr,RZ,Gqr,Oqr,Vqr,U5,WCe,Xqr,zqr,PZ,Qqr,Wqr,Hqr,J5,HCe,Uqr,Jqr,BZ,Yqr,Kqr,Zqr,Y5,UCe,ejr,ojr,IZ,rjr,tjr,ajr,K5,JCe,njr,sjr,NZ,ljr,ijr,djr,Z5,YCe,cjr,fjr,qZ,mjr,gjr,hjr,e0,KCe,pjr,_jr,jZ,ujr,bjr,vjr,o0,ZCe,Fjr,Tjr,DZ,Mjr,Ejr,Cjr,r0,e5e,wjr,Ajr,GZ,Ljr,yjr,xjr,t0,o5e,$jr,kjr,OZ,Sjr,Rjr,Pjr,a0,r5e,Bjr,Ijr,VZ,Njr,qjr,jjr,n0,t5e,Djr,Gjr,XZ,Ojr,Vjr,Xjr,s0,a5e,zjr,Qjr,zZ,Wjr,Hjr,Ujr,l0,n5e,Jjr,Yjr,QZ,Kjr,Zjr,eDr,i0,s5e,oDr,rDr,WZ,tDr,aDr,nDr,d0,l5e,sDr,lDr,HZ,iDr,dDr,cDr,c0,i5e,fDr,mDr,UZ,gDr,hDr,pDr,f0,d5e,_Dr,uDr,JZ,bDr,vDr,FDr,m0,c5e,TDr,MDr,YZ,EDr,CDr,wDr,g0,f5e,ADr,LDr,KZ,yDr,xDr,$Dr,h0,m5e,kDr,SDr,ZZ,RDr,PDr,BDr,p0,g5e,IDr,NDr,eee,qDr,jDr,DDr,_0,h5e,GDr,ODr,oee,VDr,XDr,zDr,u0,YXe,Uc,b0,p5e,t$,QDr,_5e,WDr,KXe,pr,a$,HDr,Jc,UDr,ree,JDr,YDr,tee,KDr,ZDr,eGr,n$,oGr,u5e,rGr,tGr,aGr,Qt,s$,nGr,b5e,sGr,lGr,Yc,iGr,v5e,dGr,cGr,aee,fGr,mGr,gGr,v0,hGr,Vr,l$,pGr,F5e,_Gr,uGr,Tn,bGr,T5e,vGr,FGr,M5e,TGr,MGr,E5e,EGr,CGr,wGr,xe,F0,C5e,AGr,LGr,nee,yGr,xGr,$Gr,T0,w5e,kGr,SGr,see,RGr,PGr,BGr,M0,A5e,IGr,NGr,lee,qGr,jGr,DGr,E0,L5e,GGr,OGr,iee,VGr,XGr,zGr,C0,y5e,QGr,WGr,dee,HGr,UGr,JGr,w0,x5e,YGr,KGr,cee,ZGr,eOr,oOr,A0,$5e,rOr,tOr,fee,aOr,nOr,sOr,L0,k5e,lOr,iOr,mee,dOr,cOr,fOr,y0,S5e,mOr,gOr,gee,hOr,pOr,_Or,x0,R5e,uOr,bOr,hee,vOr,FOr,TOr,$0,ZXe,Kc,k0,P5e,i$,MOr,B5e,EOr,eze,_r,d$,COr,Zc,wOr,pee,AOr,LOr,_ee,yOr,xOr,$Or,c$,kOr,I5e,SOr,ROr,POr,Wt,f$,BOr,N5e,IOr,NOr,ef,qOr,q5e,jOr,DOr,uee,GOr,OOr,VOr,S0,XOr,Xr,m$,zOr,j5e,QOr,WOr,Mn,HOr,D5e,UOr,JOr,G5e,YOr,KOr,O5e,ZOr,eVr,oVr,Ee,R0,V5e,rVr,tVr,bee,aVr,nVr,sVr,P0,X5e,lVr,iVr,vee,dVr,cVr,fVr,B0,z5e,mVr,gVr,Fee,hVr,pVr,_Vr,I0,Q5e,uVr,bVr,Tee,vVr,FVr,TVr,N0,W5e,MVr,EVr,Mee,CVr,wVr,AVr,q0,H5e,LVr,yVr,Eee,xVr,$Vr,kVr,j0,U5e,SVr,RVr,Cee,PVr,BVr,IVr,D0,J5e,NVr,qVr,wee,jVr,DVr,GVr,G0,Y5e,OVr,VVr,Aee,XVr,zVr,QVr,O0,K5e,WVr,HVr,Lee,UVr,JVr,YVr,V0,Z5e,KVr,ZVr,yee,eXr,oXr,rXr,X0,e0e,tXr,aXr,xee,nXr,sXr,lXr,z0,o0e,iXr,dXr,$ee,cXr,fXr,mXr,Q0,oze,of,W0,r0e,g$,gXr,t0e,hXr,rze,ur,h$,pXr,rf,_Xr,kee,uXr,bXr,See,vXr,FXr,TXr,p$,MXr,a0e,EXr,CXr,wXr,Ht,_$,AXr,n0e,LXr,yXr,tf,xXr,s0e,$Xr,kXr,Ree,SXr,RXr,PXr,H0,BXr,zr,u$,IXr,l0e,NXr,qXr,En,jXr,i0e,DXr,GXr,d0e,OXr,VXr,c0e,XXr,zXr,QXr,$e,U0,f0e,WXr,HXr,Pee,UXr,JXr,YXr,J0,m0e,KXr,ZXr,Bee,ezr,ozr,rzr,Y0,g0e,tzr,azr,Iee,nzr,szr,lzr,K0,h0e,izr,dzr,Nee,czr,fzr,mzr,Z0,p0e,gzr,hzr,qee,pzr,_zr,uzr,ew,_0e,bzr,vzr,jee,Fzr,Tzr,Mzr,ow,u0e,Ezr,Czr,Dee,wzr,Azr,Lzr,rw,b0e,yzr,xzr,Gee,$zr,kzr,Szr,tw,v0e,Rzr,Pzr,Oee,Bzr,Izr,Nzr,aw,F0e,qzr,jzr,Vee,Dzr,Gzr,Ozr,nw,tze,af,sw,T0e,b$,Vzr,M0e,Xzr,aze,br,v$,zzr,nf,Qzr,Xee,Wzr,Hzr,zee,Uzr,Jzr,Yzr,F$,Kzr,E0e,Zzr,eQr,oQr,Ut,T$,rQr,C0e,tQr,aQr,sf,nQr,w0e,sQr,lQr,Qee,iQr,dQr,cQr,lw,fQr,Qr,M$,mQr,A0e,gQr,hQr,Cn,pQr,L0e,_Qr,uQr,y0e,bQr,vQr,x0e,FQr,TQr,MQr,ke,iw,$0e,EQr,CQr,Wee,wQr,AQr,LQr,dw,k0e,yQr,xQr,Hee,$Qr,kQr,SQr,cw,S0e,RQr,PQr,Uee,BQr,IQr,NQr,fw,R0e,qQr,jQr,Jee,DQr,GQr,OQr,mw,P0e,VQr,XQr,Yee,zQr,QQr,WQr,gw,B0e,HQr,UQr,Kee,JQr,YQr,KQr,hw,I0e,ZQr,eWr,Zee,oWr,rWr,tWr,pw,N0e,aWr,nWr,eoe,sWr,lWr,iWr,_w,q0e,dWr,cWr,ooe,fWr,mWr,gWr,uw,j0e,hWr,pWr,roe,_Wr,uWr,bWr,bw,nze,lf,vw,D0e,E$,vWr,G0e,FWr,sze,vr,C$,TWr,df,MWr,toe,EWr,CWr,aoe,wWr,AWr,LWr,w$,yWr,O0e,xWr,$Wr,kWr,Jt,A$,SWr,V0e,RWr,PWr,cf,BWr,X0e,IWr,NWr,noe,qWr,jWr,DWr,Fw,GWr,Wr,L$,OWr,z0e,VWr,XWr,wn,zWr,Q0e,QWr,WWr,W0e,HWr,UWr,H0e,JWr,YWr,KWr,Se,Tw,U0e,ZWr,eHr,soe,oHr,rHr,tHr,Mw,J0e,aHr,nHr,loe,sHr,lHr,iHr,Ew,Y0e,dHr,cHr,ioe,fHr,mHr,gHr,Cw,K0e,hHr,pHr,doe,_Hr,uHr,bHr,ww,Z0e,vHr,FHr,coe,THr,MHr,EHr,Aw,ewe,CHr,wHr,foe,AHr,LHr,yHr,Lw,owe,xHr,$Hr,moe,kHr,SHr,RHr,yw,rwe,PHr,BHr,goe,IHr,NHr,qHr,xw,twe,jHr,DHr,hoe,GHr,OHr,VHr,$w,awe,XHr,zHr,poe,QHr,WHr,HHr,kw,lze,ff,Sw,nwe,y$,UHr,swe,JHr,ize,Fr,x$,YHr,mf,KHr,_oe,ZHr,eUr,uoe,oUr,rUr,tUr,$$,aUr,lwe,nUr,sUr,lUr,Yt,k$,iUr,iwe,dUr,cUr,gf,fUr,dwe,mUr,gUr,boe,hUr,pUr,_Ur,Rw,uUr,Hr,S$,bUr,cwe,vUr,FUr,An,TUr,fwe,MUr,EUr,mwe,CUr,wUr,gwe,AUr,LUr,yUr,Re,Pw,hwe,xUr,$Ur,voe,kUr,SUr,RUr,Bw,pwe,PUr,BUr,Foe,IUr,NUr,qUr,Iw,_we,jUr,DUr,Toe,GUr,OUr,VUr,Nw,uwe,XUr,zUr,Moe,QUr,WUr,HUr,qw,bwe,UUr,JUr,Eoe,YUr,KUr,ZUr,jw,vwe,eJr,oJr,Coe,rJr,tJr,aJr,Dw,Fwe,nJr,sJr,woe,lJr,iJr,dJr,Gw,Twe,cJr,fJr,Aoe,mJr,gJr,hJr,Ow,Mwe,pJr,_Jr,Loe,uJr,bJr,vJr,Vw,Ewe,FJr,TJr,yoe,MJr,EJr,CJr,Xw,dze,hf,zw,Cwe,R$,wJr,wwe,AJr,cze,Tr,P$,LJr,pf,yJr,xoe,xJr,$Jr,$oe,kJr,SJr,RJr,B$,PJr,Awe,BJr,IJr,NJr,Kt,I$,qJr,Lwe,jJr,DJr,_f,GJr,ywe,OJr,VJr,koe,XJr,zJr,QJr,Qw,WJr,Ur,N$,HJr,xwe,UJr,JJr,Ln,YJr,$we,KJr,ZJr,kwe,eYr,oYr,Swe,rYr,tYr,aYr,Ve,Ww,Rwe,nYr,sYr,Soe,lYr,iYr,dYr,Hw,Pwe,cYr,fYr,Roe,mYr,gYr,hYr,Uw,Bwe,pYr,_Yr,Poe,uYr,bYr,vYr,Jw,Iwe,FYr,TYr,Boe,MYr,EYr,CYr,Yw,Nwe,wYr,AYr,Ioe,LYr,yYr,xYr,Kw,qwe,$Yr,kYr,Noe,SYr,RYr,PYr,Zw,jwe,BYr,IYr,qoe,NYr,qYr,jYr,eA,Dwe,DYr,GYr,joe,OYr,VYr,XYr,oA,fze,uf,rA,Gwe,q$,zYr,Owe,QYr,mze,Mr,j$,WYr,bf,HYr,Doe,UYr,JYr,Goe,YYr,KYr,ZYr,D$,eKr,Vwe,oKr,rKr,tKr,Zt,G$,aKr,Xwe,nKr,sKr,vf,lKr,zwe,iKr,dKr,Ooe,cKr,fKr,mKr,tA,gKr,Jr,O$,hKr,Qwe,pKr,_Kr,yn,uKr,Wwe,bKr,vKr,Hwe,FKr,TKr,Uwe,MKr,EKr,CKr,Xe,aA,Jwe,wKr,AKr,Voe,LKr,yKr,xKr,nA,Ywe,$Kr,kKr,Xoe,SKr,RKr,PKr,sA,Kwe,BKr,IKr,zoe,NKr,qKr,jKr,lA,Zwe,DKr,GKr,Qoe,OKr,VKr,XKr,iA,eAe,zKr,QKr,Woe,WKr,HKr,UKr,dA,oAe,JKr,YKr,Hoe,KKr,ZKr,eZr,cA,rAe,oZr,rZr,Uoe,tZr,aZr,nZr,fA,tAe,sZr,lZr,Joe,iZr,dZr,cZr,mA,gze,Ff,gA,aAe,V$,fZr,nAe,mZr,hze,Er,X$,gZr,Tf,hZr,Yoe,pZr,_Zr,Koe,uZr,bZr,vZr,z$,FZr,sAe,TZr,MZr,EZr,ea,Q$,CZr,lAe,wZr,AZr,Mf,LZr,iAe,yZr,xZr,Zoe,$Zr,kZr,SZr,hA,RZr,Yr,W$,PZr,dAe,BZr,IZr,xn,NZr,cAe,qZr,jZr,fAe,DZr,GZr,mAe,OZr,VZr,XZr,gAe,pA,hAe,zZr,QZr,ere,WZr,HZr,UZr,_A,pze,Ef,uA,pAe,H$,JZr,_Ae,YZr,_ze,Cr,U$,KZr,Cf,ZZr,ore,eet,oet,rre,ret,tet,aet,J$,net,uAe,set,iet,det,oa,Y$,cet,bAe,fet,met,wf,get,vAe,het,pet,tre,_et,uet,bet,bA,vet,Kr,K$,Fet,FAe,Tet,Met,$n,Eet,TAe,Cet,wet,MAe,Aet,Let,EAe,yet,xet,$et,Z$,vA,CAe,ket,Set,are,Ret,Pet,Bet,FA,wAe,Iet,Net,nre,qet,jet,Det,TA,uze,Af,MA,AAe,ek,Get,LAe,Oet,bze,wr,ok,Vet,Lf,Xet,sre,zet,Qet,lre,Wet,Het,Uet,rk,Jet,yAe,Yet,Ket,Zet,ra,tk,eot,xAe,oot,rot,yf,tot,$Ae,aot,not,ire,sot,lot,iot,EA,dot,Zr,ak,cot,kAe,fot,mot,kn,got,SAe,hot,pot,RAe,_ot,uot,PAe,bot,vot,Fot,BAe,CA,IAe,Tot,Mot,dre,Eot,Cot,wot,wA,vze;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),UL=new re({}),JL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Nf=new Aot({props:{warning:!0,$$slots:{default:[DXt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/configuration_auto.py#L607"}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/configuration_auto.py#L630"}}),Hg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[GXt]},$$scope:{ctx:$}}}),ry=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/configuration_auto.py#L753"}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/tokenization_auto.py#L403"}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17437/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/tokenization_auto.py#L417"}}),$h=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[OXt]},$$scope:{ctx:$}}}),iy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/tokenization_auto.py#L616"}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17437/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),mp=new Aot({props:{$$slots:{default:[VXt]},$$scope:{ctx:$}}}),gp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[XXt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/processing_auto.py#L89"}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/processing_auto.py#L103"}}),Pp=new Aot({props:{$$slots:{default:[zXt]},$$scope:{ctx:$}}}),Bp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[QXt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/processing_auto.py#L256"}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L779"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),qp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[WXt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Gu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[HXt]},$$scope:{ctx:$}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L786"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Vu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[UXt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),I1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[JXt]},$$scope:{ctx:$}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L801"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[YXt]},$$scope:{ctx:$}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KXt]},$$scope:{ctx:$}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L808"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),y7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ZXt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ezt]},$$scope:{ctx:$}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L815"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ozt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rzt]},$$scope:{ctx:$}}}),Qy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L824"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[tzt]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),I2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[azt]},$$scope:{ctx:$}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L869"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[nzt]},$$scope:{ctx:$}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[szt]},$$scope:{ctx:$}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L876"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),bb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lzt]},$$scope:{ctx:$}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[izt]},$$scope:{ctx:$}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L862"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[dzt]},$$scope:{ctx:$}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[czt]},$$scope:{ctx:$}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L833"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fzt]},$$scope:{ctx:$}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mzt]},$$scope:{ctx:$}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L840"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gzt]},$$scope:{ctx:$}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hzt]},$$scope:{ctx:$}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L885"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[pzt]},$$scope:{ctx:$}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_zt]},$$scope:{ctx:$}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L924"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uzt]},$$scope:{ctx:$}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bzt]},$$scope:{ctx:$}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L851"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vzt]},$$scope:{ctx:$}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Fzt]},$$scope:{ctx:$}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L931"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Tzt]},$$scope:{ctx:$}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Mzt]},$$scope:{ctx:$}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L954"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ezt]},$$scope:{ctx:$}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Czt]},$$scope:{ctx:$}}}),W8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L938"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wzt]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Azt]},$$scope:{ctx:$}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L945"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Lzt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yzt]},$$scope:{ctx:$}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L963"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xzt]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$zt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L970"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kzt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Szt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L917"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Rzt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Pzt]},$$scope:{ctx:$}}}),F9=new re({}),T9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L892"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Bzt]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Izt]},$$scope:{ctx:$}}}),w9=new re({}),A9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L899"}}),y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Nzt]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qzt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L908"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jzt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Dzt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Gzt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Ozt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),V9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Vzt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xzt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zzt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Qzt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Wzt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hzt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Uzt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jzt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Yzt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kzt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zzt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eQt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oQt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rQt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tQt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aQt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nQt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sQt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lQt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iQt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dQt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cQt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fQt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mQt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gQt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hQt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pQt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[_Qt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[uQt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bQt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[vQt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FQt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EQt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wQt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),mA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),wi=o("Auto Classes"),Sf=l(),nt=a("p"),Ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=a("code"),zL=o("from_pretrained()"),Rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),yi=o("Instantiating one of "),Rn=a("a"),QL=o("AutoConfig"),Pn=o(", "),Bn=a("a"),WL=o("AutoModel"),xi=o(`, and
`),In=a("a"),HL=o("AutoTokenizer"),$i=o(" will directly create a class of the relevant architecture. For instance"),Pf=l(),F($a.$$.fragment),We=l(),Ae=a("p"),wS=o("will create a model that is an instance of "),ki=a("a"),AS=o("BertModel"),LS=o("."),Co=l(),ka=a("p"),yS=o("There is one class of "),Bf=a("code"),xS=o("AutoModel"),xWe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hVe=l(),Si=a("h2"),If=a("a"),aae=a("span"),F(UL.$$.fragment),$We=l(),nae=a("span"),kWe=o("Extending the Auto Classes"),pVe=l(),Nn=a("p"),SWe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),sae=a("code"),RWe=o("NewModel"),PWe=o(", make sure you have a "),lae=a("code"),BWe=o("NewModelConfig"),IWe=o(` then you can add those to the auto
classes like this:`),_Ve=l(),F(JL.$$.fragment),uVe=l(),$S=a("p"),NWe=o("You will then be able to use the auto classes like you would usually do!"),bVe=l(),F(Nf.$$.fragment),vVe=l(),Ri=a("h2"),qf=a("a"),iae=a("span"),F(YL.$$.fragment),qWe=l(),dae=a("span"),jWe=o("AutoConfig"),FVe=l(),wo=a("div"),F(KL.$$.fragment),DWe=l(),ZL=a("p"),GWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),kS=a("a"),OWe=o("from_pretrained()"),VWe=o(" class method."),XWe=l(),ey=a("p"),zWe=o("This class cannot be instantiated directly using "),cae=a("code"),QWe=o("__init__()"),WWe=o(" (throws an error)."),HWe=l(),Ar=a("div"),F(oy.$$.fragment),UWe=l(),fae=a("p"),JWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YWe=l(),Pi=a("p"),KWe=o("The configuration class to instantiate is selected based on the "),mae=a("code"),ZWe=o("model_type"),eHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gae=a("code"),oHe=o("pretrained_model_name_or_path"),rHe=o(":"),tHe=l(),A=a("ul"),jf=a("li"),hae=a("strong"),aHe=o("albert"),nHe=o(" \u2014 "),SS=a("a"),sHe=o("AlbertConfig"),lHe=o(" (ALBERT model)"),iHe=l(),Df=a("li"),pae=a("strong"),dHe=o("bart"),cHe=o(" \u2014 "),RS=a("a"),fHe=o("BartConfig"),mHe=o(" (BART model)"),gHe=l(),Gf=a("li"),_ae=a("strong"),hHe=o("beit"),pHe=o(" \u2014 "),PS=a("a"),_He=o("BeitConfig"),uHe=o(" (BEiT model)"),bHe=l(),Of=a("li"),uae=a("strong"),vHe=o("bert"),FHe=o(" \u2014 "),BS=a("a"),THe=o("BertConfig"),MHe=o(" (BERT model)"),EHe=l(),Vf=a("li"),bae=a("strong"),CHe=o("bert-generation"),wHe=o(" \u2014 "),IS=a("a"),AHe=o("BertGenerationConfig"),LHe=o(" (Bert Generation model)"),yHe=l(),Xf=a("li"),vae=a("strong"),xHe=o("big_bird"),$He=o(" \u2014 "),NS=a("a"),kHe=o("BigBirdConfig"),SHe=o(" (BigBird model)"),RHe=l(),zf=a("li"),Fae=a("strong"),PHe=o("bigbird_pegasus"),BHe=o(" \u2014 "),qS=a("a"),IHe=o("BigBirdPegasusConfig"),NHe=o(" (BigBird-Pegasus model)"),qHe=l(),Qf=a("li"),Tae=a("strong"),jHe=o("blenderbot"),DHe=o(" \u2014 "),jS=a("a"),GHe=o("BlenderbotConfig"),OHe=o(" (Blenderbot model)"),VHe=l(),Wf=a("li"),Mae=a("strong"),XHe=o("blenderbot-small"),zHe=o(" \u2014 "),DS=a("a"),QHe=o("BlenderbotSmallConfig"),WHe=o(" (BlenderbotSmall model)"),HHe=l(),Hf=a("li"),Eae=a("strong"),UHe=o("bloom"),JHe=o(" \u2014 "),GS=a("a"),YHe=o("BloomConfig"),KHe=o(" (BLOOM model)"),ZHe=l(),Uf=a("li"),Cae=a("strong"),eUe=o("camembert"),oUe=o(" \u2014 "),OS=a("a"),rUe=o("CamembertConfig"),tUe=o(" (CamemBERT model)"),aUe=l(),Jf=a("li"),wae=a("strong"),nUe=o("canine"),sUe=o(" \u2014 "),VS=a("a"),lUe=o("CanineConfig"),iUe=o(" (CANINE model)"),dUe=l(),Yf=a("li"),Aae=a("strong"),cUe=o("clip"),fUe=o(" \u2014 "),XS=a("a"),mUe=o("CLIPConfig"),gUe=o(" (CLIP model)"),hUe=l(),Kf=a("li"),Lae=a("strong"),pUe=o("codegen"),_Ue=o(" \u2014 "),zS=a("a"),uUe=o("CodeGenConfig"),bUe=o(" (CodeGen model)"),vUe=l(),Zf=a("li"),yae=a("strong"),FUe=o("convbert"),TUe=o(" \u2014 "),QS=a("a"),MUe=o("ConvBertConfig"),EUe=o(" (ConvBERT model)"),CUe=l(),em=a("li"),xae=a("strong"),wUe=o("convnext"),AUe=o(" \u2014 "),WS=a("a"),LUe=o("ConvNextConfig"),yUe=o(" (ConvNeXT model)"),xUe=l(),om=a("li"),$ae=a("strong"),$Ue=o("ctrl"),kUe=o(" \u2014 "),HS=a("a"),SUe=o("CTRLConfig"),RUe=o(" (CTRL model)"),PUe=l(),rm=a("li"),kae=a("strong"),BUe=o("cvt"),IUe=o(" \u2014 "),US=a("a"),NUe=o("CvtConfig"),qUe=o(" (CvT model)"),jUe=l(),tm=a("li"),Sae=a("strong"),DUe=o("data2vec-audio"),GUe=o(" \u2014 "),JS=a("a"),OUe=o("Data2VecAudioConfig"),VUe=o(" (Data2VecAudio model)"),XUe=l(),am=a("li"),Rae=a("strong"),zUe=o("data2vec-text"),QUe=o(" \u2014 "),YS=a("a"),WUe=o("Data2VecTextConfig"),HUe=o(" (Data2VecText model)"),UUe=l(),nm=a("li"),Pae=a("strong"),JUe=o("data2vec-vision"),YUe=o(" \u2014 "),KS=a("a"),KUe=o("Data2VecVisionConfig"),ZUe=o(" (Data2VecVision model)"),eJe=l(),sm=a("li"),Bae=a("strong"),oJe=o("deberta"),rJe=o(" \u2014 "),ZS=a("a"),tJe=o("DebertaConfig"),aJe=o(" (DeBERTa model)"),nJe=l(),lm=a("li"),Iae=a("strong"),sJe=o("deberta-v2"),lJe=o(" \u2014 "),eR=a("a"),iJe=o("DebertaV2Config"),dJe=o(" (DeBERTa-v2 model)"),cJe=l(),im=a("li"),Nae=a("strong"),fJe=o("decision_transformer"),mJe=o(" \u2014 "),oR=a("a"),gJe=o("DecisionTransformerConfig"),hJe=o(" (Decision Transformer model)"),pJe=l(),dm=a("li"),qae=a("strong"),_Je=o("deit"),uJe=o(" \u2014 "),rR=a("a"),bJe=o("DeiTConfig"),vJe=o(" (DeiT model)"),FJe=l(),cm=a("li"),jae=a("strong"),TJe=o("detr"),MJe=o(" \u2014 "),tR=a("a"),EJe=o("DetrConfig"),CJe=o(" (DETR model)"),wJe=l(),fm=a("li"),Dae=a("strong"),AJe=o("distilbert"),LJe=o(" \u2014 "),aR=a("a"),yJe=o("DistilBertConfig"),xJe=o(" (DistilBERT model)"),$Je=l(),mm=a("li"),Gae=a("strong"),kJe=o("dpr"),SJe=o(" \u2014 "),nR=a("a"),RJe=o("DPRConfig"),PJe=o(" (DPR model)"),BJe=l(),gm=a("li"),Oae=a("strong"),IJe=o("dpt"),NJe=o(" \u2014 "),sR=a("a"),qJe=o("DPTConfig"),jJe=o(" (DPT model)"),DJe=l(),hm=a("li"),Vae=a("strong"),GJe=o("electra"),OJe=o(" \u2014 "),lR=a("a"),VJe=o("ElectraConfig"),XJe=o(" (ELECTRA model)"),zJe=l(),pm=a("li"),Xae=a("strong"),QJe=o("encoder-decoder"),WJe=o(" \u2014 "),iR=a("a"),HJe=o("EncoderDecoderConfig"),UJe=o(" (Encoder decoder model)"),JJe=l(),_m=a("li"),zae=a("strong"),YJe=o("flaubert"),KJe=o(" \u2014 "),dR=a("a"),ZJe=o("FlaubertConfig"),eYe=o(" (FlauBERT model)"),oYe=l(),um=a("li"),Qae=a("strong"),rYe=o("flava"),tYe=o(" \u2014 "),cR=a("a"),aYe=o("FlavaConfig"),nYe=o(" (FLAVA model)"),sYe=l(),bm=a("li"),Wae=a("strong"),lYe=o("fnet"),iYe=o(" \u2014 "),fR=a("a"),dYe=o("FNetConfig"),cYe=o(" (FNet model)"),fYe=l(),vm=a("li"),Hae=a("strong"),mYe=o("fsmt"),gYe=o(" \u2014 "),mR=a("a"),hYe=o("FSMTConfig"),pYe=o(" (FairSeq Machine-Translation model)"),_Ye=l(),Fm=a("li"),Uae=a("strong"),uYe=o("funnel"),bYe=o(" \u2014 "),gR=a("a"),vYe=o("FunnelConfig"),FYe=o(" (Funnel Transformer model)"),TYe=l(),Tm=a("li"),Jae=a("strong"),MYe=o("glpn"),EYe=o(" \u2014 "),hR=a("a"),CYe=o("GLPNConfig"),wYe=o(" (GLPN model)"),AYe=l(),Mm=a("li"),Yae=a("strong"),LYe=o("gpt2"),yYe=o(" \u2014 "),pR=a("a"),xYe=o("GPT2Config"),$Ye=o(" (OpenAI GPT-2 model)"),kYe=l(),Em=a("li"),Kae=a("strong"),SYe=o("gpt_neo"),RYe=o(" \u2014 "),_R=a("a"),PYe=o("GPTNeoConfig"),BYe=o(" (GPT Neo model)"),IYe=l(),Cm=a("li"),Zae=a("strong"),NYe=o("gpt_neox"),qYe=o(" \u2014 "),uR=a("a"),jYe=o("GPTNeoXConfig"),DYe=o(" (GPT NeoX model)"),GYe=l(),wm=a("li"),ene=a("strong"),OYe=o("gptj"),VYe=o(" \u2014 "),bR=a("a"),XYe=o("GPTJConfig"),zYe=o(" (GPT-J model)"),QYe=l(),Am=a("li"),one=a("strong"),WYe=o("groupvit"),HYe=o(" \u2014 "),vR=a("a"),UYe=o("GroupViTConfig"),JYe=o(" (GroupViT model)"),YYe=l(),Lm=a("li"),rne=a("strong"),KYe=o("hubert"),ZYe=o(" \u2014 "),FR=a("a"),eKe=o("HubertConfig"),oKe=o(" (Hubert model)"),rKe=l(),ym=a("li"),tne=a("strong"),tKe=o("ibert"),aKe=o(" \u2014 "),TR=a("a"),nKe=o("IBertConfig"),sKe=o(" (I-BERT model)"),lKe=l(),xm=a("li"),ane=a("strong"),iKe=o("imagegpt"),dKe=o(" \u2014 "),MR=a("a"),cKe=o("ImageGPTConfig"),fKe=o(" (ImageGPT model)"),mKe=l(),$m=a("li"),nne=a("strong"),gKe=o("layoutlm"),hKe=o(" \u2014 "),ER=a("a"),pKe=o("LayoutLMConfig"),_Ke=o(" (LayoutLM model)"),uKe=l(),km=a("li"),sne=a("strong"),bKe=o("layoutlmv2"),vKe=o(" \u2014 "),CR=a("a"),FKe=o("LayoutLMv2Config"),TKe=o(" (LayoutLMv2 model)"),MKe=l(),Sm=a("li"),lne=a("strong"),EKe=o("layoutlmv3"),CKe=o(" \u2014 "),wR=a("a"),wKe=o("LayoutLMv3Config"),AKe=o(" (LayoutLMv3 model)"),LKe=l(),Rm=a("li"),ine=a("strong"),yKe=o("led"),xKe=o(" \u2014 "),AR=a("a"),$Ke=o("LEDConfig"),kKe=o(" (LED model)"),SKe=l(),Pm=a("li"),dne=a("strong"),RKe=o("levit"),PKe=o(" \u2014 "),LR=a("a"),BKe=o("LevitConfig"),IKe=o(" (LeViT model)"),NKe=l(),Bm=a("li"),cne=a("strong"),qKe=o("longformer"),jKe=o(" \u2014 "),yR=a("a"),DKe=o("LongformerConfig"),GKe=o(" (Longformer model)"),OKe=l(),Im=a("li"),fne=a("strong"),VKe=o("longt5"),XKe=o(" \u2014 "),xR=a("a"),zKe=o("LongT5Config"),QKe=o(" (LongT5 model)"),WKe=l(),Nm=a("li"),mne=a("strong"),HKe=o("luke"),UKe=o(" \u2014 "),$R=a("a"),JKe=o("LukeConfig"),YKe=o(" (LUKE model)"),KKe=l(),qm=a("li"),gne=a("strong"),ZKe=o("lxmert"),eZe=o(" \u2014 "),kR=a("a"),oZe=o("LxmertConfig"),rZe=o(" (LXMERT model)"),tZe=l(),jm=a("li"),hne=a("strong"),aZe=o("m2m_100"),nZe=o(" \u2014 "),SR=a("a"),sZe=o("M2M100Config"),lZe=o(" (M2M100 model)"),iZe=l(),Dm=a("li"),pne=a("strong"),dZe=o("marian"),cZe=o(" \u2014 "),RR=a("a"),fZe=o("MarianConfig"),mZe=o(" (Marian model)"),gZe=l(),Gm=a("li"),_ne=a("strong"),hZe=o("maskformer"),pZe=o(" \u2014 "),PR=a("a"),_Ze=o("MaskFormerConfig"),uZe=o(" (MaskFormer model)"),bZe=l(),Om=a("li"),une=a("strong"),vZe=o("mbart"),FZe=o(" \u2014 "),BR=a("a"),TZe=o("MBartConfig"),MZe=o(" (mBART model)"),EZe=l(),Vm=a("li"),bne=a("strong"),CZe=o("mctct"),wZe=o(" \u2014 "),IR=a("a"),AZe=o("MCTCTConfig"),LZe=o(" (M-CTC-T model)"),yZe=l(),Xm=a("li"),vne=a("strong"),xZe=o("megatron-bert"),$Ze=o(" \u2014 "),NR=a("a"),kZe=o("MegatronBertConfig"),SZe=o(" (Megatron-BERT model)"),RZe=l(),zm=a("li"),Fne=a("strong"),PZe=o("mobilebert"),BZe=o(" \u2014 "),qR=a("a"),IZe=o("MobileBertConfig"),NZe=o(" (MobileBERT model)"),qZe=l(),Qm=a("li"),Tne=a("strong"),jZe=o("mpnet"),DZe=o(" \u2014 "),jR=a("a"),GZe=o("MPNetConfig"),OZe=o(" (MPNet model)"),VZe=l(),Wm=a("li"),Mne=a("strong"),XZe=o("mt5"),zZe=o(" \u2014 "),DR=a("a"),QZe=o("MT5Config"),WZe=o(" (MT5 model)"),HZe=l(),Hm=a("li"),Ene=a("strong"),UZe=o("mvp"),JZe=o(" \u2014 "),GR=a("a"),YZe=o("MvpConfig"),KZe=o(" (MVP model)"),ZZe=l(),Um=a("li"),Cne=a("strong"),eeo=o("nezha"),oeo=o(" \u2014 "),OR=a("a"),reo=o("NezhaConfig"),teo=o(" (Nezha model)"),aeo=l(),Jm=a("li"),wne=a("strong"),neo=o("nystromformer"),seo=o(" \u2014 "),VR=a("a"),leo=o("NystromformerConfig"),ieo=o(" (Nystr\xF6mformer model)"),deo=l(),Ym=a("li"),Ane=a("strong"),ceo=o("openai-gpt"),feo=o(" \u2014 "),XR=a("a"),meo=o("OpenAIGPTConfig"),geo=o(" (OpenAI GPT model)"),heo=l(),Km=a("li"),Lne=a("strong"),peo=o("opt"),_eo=o(" \u2014 "),zR=a("a"),ueo=o("OPTConfig"),beo=o(" (OPT model)"),veo=l(),Zm=a("li"),yne=a("strong"),Feo=o("pegasus"),Teo=o(" \u2014 "),QR=a("a"),Meo=o("PegasusConfig"),Eeo=o(" (Pegasus model)"),Ceo=l(),eg=a("li"),xne=a("strong"),weo=o("perceiver"),Aeo=o(" \u2014 "),WR=a("a"),Leo=o("PerceiverConfig"),yeo=o(" (Perceiver model)"),xeo=l(),og=a("li"),$ne=a("strong"),$eo=o("plbart"),keo=o(" \u2014 "),HR=a("a"),Seo=o("PLBartConfig"),Reo=o(" (PLBart model)"),Peo=l(),rg=a("li"),kne=a("strong"),Beo=o("poolformer"),Ieo=o(" \u2014 "),UR=a("a"),Neo=o("PoolFormerConfig"),qeo=o(" (PoolFormer model)"),jeo=l(),tg=a("li"),Sne=a("strong"),Deo=o("prophetnet"),Geo=o(" \u2014 "),JR=a("a"),Oeo=o("ProphetNetConfig"),Veo=o(" (ProphetNet model)"),Xeo=l(),ag=a("li"),Rne=a("strong"),zeo=o("qdqbert"),Qeo=o(" \u2014 "),YR=a("a"),Weo=o("QDQBertConfig"),Heo=o(" (QDQBert model)"),Ueo=l(),ng=a("li"),Pne=a("strong"),Jeo=o("rag"),Yeo=o(" \u2014 "),KR=a("a"),Keo=o("RagConfig"),Zeo=o(" (RAG model)"),eoo=l(),sg=a("li"),Bne=a("strong"),ooo=o("realm"),roo=o(" \u2014 "),ZR=a("a"),too=o("RealmConfig"),aoo=o(" (REALM model)"),noo=l(),lg=a("li"),Ine=a("strong"),soo=o("reformer"),loo=o(" \u2014 "),eP=a("a"),ioo=o("ReformerConfig"),doo=o(" (Reformer model)"),coo=l(),ig=a("li"),Nne=a("strong"),foo=o("regnet"),moo=o(" \u2014 "),oP=a("a"),goo=o("RegNetConfig"),hoo=o(" (RegNet model)"),poo=l(),dg=a("li"),qne=a("strong"),_oo=o("rembert"),uoo=o(" \u2014 "),rP=a("a"),boo=o("RemBertConfig"),voo=o(" (RemBERT model)"),Foo=l(),cg=a("li"),jne=a("strong"),Too=o("resnet"),Moo=o(" \u2014 "),tP=a("a"),Eoo=o("ResNetConfig"),Coo=o(" (ResNet model)"),woo=l(),fg=a("li"),Dne=a("strong"),Aoo=o("retribert"),Loo=o(" \u2014 "),aP=a("a"),yoo=o("RetriBertConfig"),xoo=o(" (RetriBERT model)"),$oo=l(),mg=a("li"),Gne=a("strong"),koo=o("roberta"),Soo=o(" \u2014 "),nP=a("a"),Roo=o("RobertaConfig"),Poo=o(" (RoBERTa model)"),Boo=l(),gg=a("li"),One=a("strong"),Ioo=o("roformer"),Noo=o(" \u2014 "),sP=a("a"),qoo=o("RoFormerConfig"),joo=o(" (RoFormer model)"),Doo=l(),hg=a("li"),Vne=a("strong"),Goo=o("segformer"),Ooo=o(" \u2014 "),lP=a("a"),Voo=o("SegformerConfig"),Xoo=o(" (SegFormer model)"),zoo=l(),pg=a("li"),Xne=a("strong"),Qoo=o("sew"),Woo=o(" \u2014 "),iP=a("a"),Hoo=o("SEWConfig"),Uoo=o(" (SEW model)"),Joo=l(),_g=a("li"),zne=a("strong"),Yoo=o("sew-d"),Koo=o(" \u2014 "),dP=a("a"),Zoo=o("SEWDConfig"),ero=o(" (SEW-D model)"),oro=l(),ug=a("li"),Qne=a("strong"),rro=o("speech-encoder-decoder"),tro=o(" \u2014 "),cP=a("a"),aro=o("SpeechEncoderDecoderConfig"),nro=o(" (Speech Encoder decoder model)"),sro=l(),bg=a("li"),Wne=a("strong"),lro=o("speech_to_text"),iro=o(" \u2014 "),fP=a("a"),dro=o("Speech2TextConfig"),cro=o(" (Speech2Text model)"),fro=l(),vg=a("li"),Hne=a("strong"),mro=o("speech_to_text_2"),gro=o(" \u2014 "),mP=a("a"),hro=o("Speech2Text2Config"),pro=o(" (Speech2Text2 model)"),_ro=l(),Fg=a("li"),Une=a("strong"),uro=o("splinter"),bro=o(" \u2014 "),gP=a("a"),vro=o("SplinterConfig"),Fro=o(" (Splinter model)"),Tro=l(),Tg=a("li"),Jne=a("strong"),Mro=o("squeezebert"),Ero=o(" \u2014 "),hP=a("a"),Cro=o("SqueezeBertConfig"),wro=o(" (SqueezeBERT model)"),Aro=l(),Mg=a("li"),Yne=a("strong"),Lro=o("swin"),yro=o(" \u2014 "),pP=a("a"),xro=o("SwinConfig"),$ro=o(" (Swin Transformer model)"),kro=l(),Eg=a("li"),Kne=a("strong"),Sro=o("t5"),Rro=o(" \u2014 "),_P=a("a"),Pro=o("T5Config"),Bro=o(" (T5 model)"),Iro=l(),Cg=a("li"),Zne=a("strong"),Nro=o("tapas"),qro=o(" \u2014 "),uP=a("a"),jro=o("TapasConfig"),Dro=o(" (TAPAS model)"),Gro=l(),wg=a("li"),ese=a("strong"),Oro=o("trajectory_transformer"),Vro=o(" \u2014 "),bP=a("a"),Xro=o("TrajectoryTransformerConfig"),zro=o(" (Trajectory Transformer model)"),Qro=l(),Ag=a("li"),ose=a("strong"),Wro=o("transfo-xl"),Hro=o(" \u2014 "),vP=a("a"),Uro=o("TransfoXLConfig"),Jro=o(" (Transformer-XL model)"),Yro=l(),Lg=a("li"),rse=a("strong"),Kro=o("trocr"),Zro=o(" \u2014 "),FP=a("a"),eto=o("TrOCRConfig"),oto=o(" (TrOCR model)"),rto=l(),yg=a("li"),tse=a("strong"),tto=o("unispeech"),ato=o(" \u2014 "),TP=a("a"),nto=o("UniSpeechConfig"),sto=o(" (UniSpeech model)"),lto=l(),xg=a("li"),ase=a("strong"),ito=o("unispeech-sat"),dto=o(" \u2014 "),MP=a("a"),cto=o("UniSpeechSatConfig"),fto=o(" (UniSpeechSat model)"),mto=l(),$g=a("li"),nse=a("strong"),gto=o("van"),hto=o(" \u2014 "),EP=a("a"),pto=o("VanConfig"),_to=o(" (VAN model)"),uto=l(),kg=a("li"),sse=a("strong"),bto=o("vilt"),vto=o(" \u2014 "),CP=a("a"),Fto=o("ViltConfig"),Tto=o(" (ViLT model)"),Mto=l(),Sg=a("li"),lse=a("strong"),Eto=o("vision-encoder-decoder"),Cto=o(" \u2014 "),wP=a("a"),wto=o("VisionEncoderDecoderConfig"),Ato=o(" (Vision Encoder decoder model)"),Lto=l(),Rg=a("li"),ise=a("strong"),yto=o("vision-text-dual-encoder"),xto=o(" \u2014 "),AP=a("a"),$to=o("VisionTextDualEncoderConfig"),kto=o(" (VisionTextDualEncoder model)"),Sto=l(),Pg=a("li"),dse=a("strong"),Rto=o("visual_bert"),Pto=o(" \u2014 "),LP=a("a"),Bto=o("VisualBertConfig"),Ito=o(" (VisualBERT model)"),Nto=l(),Bg=a("li"),cse=a("strong"),qto=o("vit"),jto=o(" \u2014 "),yP=a("a"),Dto=o("ViTConfig"),Gto=o(" (ViT model)"),Oto=l(),Ig=a("li"),fse=a("strong"),Vto=o("vit_mae"),Xto=o(" \u2014 "),xP=a("a"),zto=o("ViTMAEConfig"),Qto=o(" (ViTMAE model)"),Wto=l(),Ng=a("li"),mse=a("strong"),Hto=o("wav2vec2"),Uto=o(" \u2014 "),$P=a("a"),Jto=o("Wav2Vec2Config"),Yto=o(" (Wav2Vec2 model)"),Kto=l(),qg=a("li"),gse=a("strong"),Zto=o("wav2vec2-conformer"),eao=o(" \u2014 "),kP=a("a"),oao=o("Wav2Vec2ConformerConfig"),rao=o(" (Wav2Vec2-Conformer model)"),tao=l(),jg=a("li"),hse=a("strong"),aao=o("wavlm"),nao=o(" \u2014 "),SP=a("a"),sao=o("WavLMConfig"),lao=o(" (WavLM model)"),iao=l(),Dg=a("li"),pse=a("strong"),dao=o("xglm"),cao=o(" \u2014 "),RP=a("a"),fao=o("XGLMConfig"),mao=o(" (XGLM model)"),gao=l(),Gg=a("li"),_se=a("strong"),hao=o("xlm"),pao=o(" \u2014 "),PP=a("a"),_ao=o("XLMConfig"),uao=o(" (XLM model)"),bao=l(),Og=a("li"),use=a("strong"),vao=o("xlm-prophetnet"),Fao=o(" \u2014 "),BP=a("a"),Tao=o("XLMProphetNetConfig"),Mao=o(" (XLM-ProphetNet model)"),Eao=l(),Vg=a("li"),bse=a("strong"),Cao=o("xlm-roberta"),wao=o(" \u2014 "),IP=a("a"),Aao=o("XLMRobertaConfig"),Lao=o(" (XLM-RoBERTa model)"),yao=l(),Xg=a("li"),vse=a("strong"),xao=o("xlm-roberta-xl"),$ao=o(" \u2014 "),NP=a("a"),kao=o("XLMRobertaXLConfig"),Sao=o(" (XLM-RoBERTa-XL model)"),Rao=l(),zg=a("li"),Fse=a("strong"),Pao=o("xlnet"),Bao=o(" \u2014 "),qP=a("a"),Iao=o("XLNetConfig"),Nao=o(" (XLNet model)"),qao=l(),Qg=a("li"),Tse=a("strong"),jao=o("yolos"),Dao=o(" \u2014 "),jP=a("a"),Gao=o("YolosConfig"),Oao=o(" (YOLOS model)"),Vao=l(),Wg=a("li"),Mse=a("strong"),Xao=o("yoso"),zao=o(" \u2014 "),DP=a("a"),Qao=o("YosoConfig"),Wao=o(" (YOSO model)"),Hao=l(),F(Hg.$$.fragment),Uao=l(),Ug=a("div"),F(ry.$$.fragment),Jao=l(),Ese=a("p"),Yao=o("Register a new configuration for this class."),TVe=l(),Bi=a("h2"),Jg=a("a"),Cse=a("span"),F(ty.$$.fragment),Kao=l(),wse=a("span"),Zao=o("AutoTokenizer"),MVe=l(),Ao=a("div"),F(ay.$$.fragment),eno=l(),ny=a("p"),ono=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GP=a("a"),rno=o("AutoTokenizer.from_pretrained()"),tno=o(" class method."),ano=l(),sy=a("p"),nno=o("This class cannot be instantiated directly using "),Ase=a("code"),sno=o("__init__()"),lno=o(" (throws an error)."),ino=l(),Lr=a("div"),F(ly.$$.fragment),dno=l(),Lse=a("p"),cno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fno=l(),Sa=a("p"),mno=o("The tokenizer class to instantiate is selected based on the "),yse=a("code"),gno=o("model_type"),hno=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),pno=o("pretrained_model_name_or_path"),_no=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),uno=o("pretrained_model_name_or_path"),bno=o(":"),vno=l(),k=a("ul"),qn=a("li"),kse=a("strong"),Fno=o("albert"),Tno=o(" \u2014 "),OP=a("a"),Mno=o("AlbertTokenizer"),Eno=o(" or "),VP=a("a"),Cno=o("AlbertTokenizerFast"),wno=o(" (ALBERT model)"),Ano=l(),jn=a("li"),Sse=a("strong"),Lno=o("bart"),yno=o(" \u2014 "),XP=a("a"),xno=o("BartTokenizer"),$no=o(" or "),zP=a("a"),kno=o("BartTokenizerFast"),Sno=o(" (BART model)"),Rno=l(),Dn=a("li"),Rse=a("strong"),Pno=o("barthez"),Bno=o(" \u2014 "),QP=a("a"),Ino=o("BarthezTokenizer"),Nno=o(" or "),WP=a("a"),qno=o("BarthezTokenizerFast"),jno=o(" (BARThez model)"),Dno=l(),Yg=a("li"),Pse=a("strong"),Gno=o("bartpho"),Ono=o(" \u2014 "),HP=a("a"),Vno=o("BartphoTokenizer"),Xno=o(" (BARTpho model)"),zno=l(),Gn=a("li"),Bse=a("strong"),Qno=o("bert"),Wno=o(" \u2014 "),UP=a("a"),Hno=o("BertTokenizer"),Uno=o(" or "),JP=a("a"),Jno=o("BertTokenizerFast"),Yno=o(" (BERT model)"),Kno=l(),Kg=a("li"),Ise=a("strong"),Zno=o("bert-generation"),eso=o(" \u2014 "),YP=a("a"),oso=o("BertGenerationTokenizer"),rso=o(" (Bert Generation model)"),tso=l(),Zg=a("li"),Nse=a("strong"),aso=o("bert-japanese"),nso=o(" \u2014 "),KP=a("a"),sso=o("BertJapaneseTokenizer"),lso=o(" (BertJapanese model)"),iso=l(),eh=a("li"),qse=a("strong"),dso=o("bertweet"),cso=o(" \u2014 "),ZP=a("a"),fso=o("BertweetTokenizer"),mso=o(" (BERTweet model)"),gso=l(),On=a("li"),jse=a("strong"),hso=o("big_bird"),pso=o(" \u2014 "),eB=a("a"),_so=o("BigBirdTokenizer"),uso=o(" or "),oB=a("a"),bso=o("BigBirdTokenizerFast"),vso=o(" (BigBird model)"),Fso=l(),Vn=a("li"),Dse=a("strong"),Tso=o("bigbird_pegasus"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("PegasusTokenizer"),Cso=o(" or "),tB=a("a"),wso=o("PegasusTokenizerFast"),Aso=o(" (BigBird-Pegasus model)"),Lso=l(),Xn=a("li"),Gse=a("strong"),yso=o("blenderbot"),xso=o(" \u2014 "),aB=a("a"),$so=o("BlenderbotTokenizer"),kso=o(" or "),nB=a("a"),Sso=o("BlenderbotTokenizerFast"),Rso=o(" (Blenderbot model)"),Pso=l(),oh=a("li"),Ose=a("strong"),Bso=o("blenderbot-small"),Iso=o(" \u2014 "),sB=a("a"),Nso=o("BlenderbotSmallTokenizer"),qso=o(" (BlenderbotSmall model)"),jso=l(),rh=a("li"),Vse=a("strong"),Dso=o("bloom"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("BloomTokenizerFast"),Vso=o(" (BLOOM model)"),Xso=l(),th=a("li"),Xse=a("strong"),zso=o("byt5"),Qso=o(" \u2014 "),iB=a("a"),Wso=o("ByT5Tokenizer"),Hso=o(" (ByT5 model)"),Uso=l(),zn=a("li"),zse=a("strong"),Jso=o("camembert"),Yso=o(" \u2014 "),dB=a("a"),Kso=o("CamembertTokenizer"),Zso=o(" or "),cB=a("a"),elo=o("CamembertTokenizerFast"),olo=o(" (CamemBERT model)"),rlo=l(),ah=a("li"),Qse=a("strong"),tlo=o("canine"),alo=o(" \u2014 "),fB=a("a"),nlo=o("CanineTokenizer"),slo=o(" (CANINE model)"),llo=l(),Qn=a("li"),Wse=a("strong"),ilo=o("clip"),dlo=o(" \u2014 "),mB=a("a"),clo=o("CLIPTokenizer"),flo=o(" or "),gB=a("a"),mlo=o("CLIPTokenizerFast"),glo=o(" (CLIP model)"),hlo=l(),Wn=a("li"),Hse=a("strong"),plo=o("codegen"),_lo=o(" \u2014 "),hB=a("a"),ulo=o("CodeGenTokenizer"),blo=o(" or "),pB=a("a"),vlo=o("CodeGenTokenizerFast"),Flo=o(" (CodeGen model)"),Tlo=l(),Hn=a("li"),Use=a("strong"),Mlo=o("convbert"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("ConvBertTokenizer"),wlo=o(" or "),uB=a("a"),Alo=o("ConvBertTokenizerFast"),Llo=o(" (ConvBERT model)"),ylo=l(),Un=a("li"),Jse=a("strong"),xlo=o("cpm"),$lo=o(" \u2014 "),bB=a("a"),klo=o("CpmTokenizer"),Slo=o(" or "),vB=a("a"),Rlo=o("CpmTokenizerFast"),Plo=o(" (CPM model)"),Blo=l(),nh=a("li"),Yse=a("strong"),Ilo=o("ctrl"),Nlo=o(" \u2014 "),FB=a("a"),qlo=o("CTRLTokenizer"),jlo=o(" (CTRL model)"),Dlo=l(),Jn=a("li"),Kse=a("strong"),Glo=o("data2vec-text"),Olo=o(" \u2014 "),TB=a("a"),Vlo=o("RobertaTokenizer"),Xlo=o(" or "),MB=a("a"),zlo=o("RobertaTokenizerFast"),Qlo=o(" (Data2VecText model)"),Wlo=l(),Yn=a("li"),Zse=a("strong"),Hlo=o("deberta"),Ulo=o(" \u2014 "),EB=a("a"),Jlo=o("DebertaTokenizer"),Ylo=o(" or "),CB=a("a"),Klo=o("DebertaTokenizerFast"),Zlo=o(" (DeBERTa model)"),eio=l(),Kn=a("li"),ele=a("strong"),oio=o("deberta-v2"),rio=o(" \u2014 "),wB=a("a"),tio=o("DebertaV2Tokenizer"),aio=o(" or "),AB=a("a"),nio=o("DebertaV2TokenizerFast"),sio=o(" (DeBERTa-v2 model)"),lio=l(),Zn=a("li"),ole=a("strong"),iio=o("distilbert"),dio=o(" \u2014 "),LB=a("a"),cio=o("DistilBertTokenizer"),fio=o(" or "),yB=a("a"),mio=o("DistilBertTokenizerFast"),gio=o(" (DistilBERT model)"),hio=l(),es=a("li"),rle=a("strong"),pio=o("dpr"),_io=o(" \u2014 "),xB=a("a"),uio=o("DPRQuestionEncoderTokenizer"),bio=o(" or "),$B=a("a"),vio=o("DPRQuestionEncoderTokenizerFast"),Fio=o(" (DPR model)"),Tio=l(),os=a("li"),tle=a("strong"),Mio=o("electra"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("ElectraTokenizer"),wio=o(" or "),SB=a("a"),Aio=o("ElectraTokenizerFast"),Lio=o(" (ELECTRA model)"),yio=l(),sh=a("li"),ale=a("strong"),xio=o("flaubert"),$io=o(" \u2014 "),RB=a("a"),kio=o("FlaubertTokenizer"),Sio=o(" (FlauBERT model)"),Rio=l(),rs=a("li"),nle=a("strong"),Pio=o("fnet"),Bio=o(" \u2014 "),PB=a("a"),Iio=o("FNetTokenizer"),Nio=o(" or "),BB=a("a"),qio=o("FNetTokenizerFast"),jio=o(" (FNet model)"),Dio=l(),lh=a("li"),sle=a("strong"),Gio=o("fsmt"),Oio=o(" \u2014 "),IB=a("a"),Vio=o("FSMTTokenizer"),Xio=o(" (FairSeq Machine-Translation model)"),zio=l(),ts=a("li"),lle=a("strong"),Qio=o("funnel"),Wio=o(" \u2014 "),NB=a("a"),Hio=o("FunnelTokenizer"),Uio=o(" or "),qB=a("a"),Jio=o("FunnelTokenizerFast"),Yio=o(" (Funnel Transformer model)"),Kio=l(),as=a("li"),ile=a("strong"),Zio=o("gpt2"),edo=o(" \u2014 "),jB=a("a"),odo=o("GPT2Tokenizer"),rdo=o(" or "),DB=a("a"),tdo=o("GPT2TokenizerFast"),ado=o(" (OpenAI GPT-2 model)"),ndo=l(),ns=a("li"),dle=a("strong"),sdo=o("gpt_neo"),ldo=o(" \u2014 "),GB=a("a"),ido=o("GPT2Tokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("GPT2TokenizerFast"),fdo=o(" (GPT Neo model)"),mdo=l(),ih=a("li"),cle=a("strong"),gdo=o("gpt_neox"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("GPTNeoXTokenizerFast"),_do=o(" (GPT NeoX model)"),udo=l(),ss=a("li"),fle=a("strong"),bdo=o("gptj"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("GPT2Tokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("GPT2TokenizerFast"),Edo=o(" (GPT-J model)"),Cdo=l(),ls=a("li"),mle=a("strong"),wdo=o("groupvit"),Ado=o(" \u2014 "),QB=a("a"),Ldo=o("CLIPTokenizer"),ydo=o(" or "),WB=a("a"),xdo=o("CLIPTokenizerFast"),$do=o(" (GroupViT model)"),kdo=l(),is=a("li"),gle=a("strong"),Sdo=o("herbert"),Rdo=o(" \u2014 "),HB=a("a"),Pdo=o("HerbertTokenizer"),Bdo=o(" or "),UB=a("a"),Ido=o("HerbertTokenizerFast"),Ndo=o(" (HerBERT model)"),qdo=l(),dh=a("li"),hle=a("strong"),jdo=o("hubert"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("Wav2Vec2CTCTokenizer"),Odo=o(" (Hubert model)"),Vdo=l(),ds=a("li"),ple=a("strong"),Xdo=o("ibert"),zdo=o(" \u2014 "),YB=a("a"),Qdo=o("RobertaTokenizer"),Wdo=o(" or "),KB=a("a"),Hdo=o("RobertaTokenizerFast"),Udo=o(" (I-BERT model)"),Jdo=l(),cs=a("li"),_le=a("strong"),Ydo=o("layoutlm"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("LayoutLMTokenizer"),eco=o(" or "),eI=a("a"),oco=o("LayoutLMTokenizerFast"),rco=o(" (LayoutLM model)"),tco=l(),fs=a("li"),ule=a("strong"),aco=o("layoutlmv2"),nco=o(" \u2014 "),oI=a("a"),sco=o("LayoutLMv2Tokenizer"),lco=o(" or "),rI=a("a"),ico=o("LayoutLMv2TokenizerFast"),dco=o(" (LayoutLMv2 model)"),cco=l(),ms=a("li"),ble=a("strong"),fco=o("layoutlmv3"),mco=o(" \u2014 "),tI=a("a"),gco=o("LayoutLMv3Tokenizer"),hco=o(" or "),aI=a("a"),pco=o("LayoutLMv3TokenizerFast"),_co=o(" (LayoutLMv3 model)"),uco=l(),gs=a("li"),vle=a("strong"),bco=o("layoutxlm"),vco=o(" \u2014 "),nI=a("a"),Fco=o("LayoutXLMTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("LayoutXLMTokenizerFast"),Eco=o(" (LayoutXLM model)"),Cco=l(),hs=a("li"),Fle=a("strong"),wco=o("led"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("LEDTokenizer"),yco=o(" or "),iI=a("a"),xco=o("LEDTokenizerFast"),$co=o(" (LED model)"),kco=l(),ps=a("li"),Tle=a("strong"),Sco=o("longformer"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("LongformerTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("LongformerTokenizerFast"),Nco=o(" (Longformer model)"),qco=l(),_s=a("li"),Mle=a("strong"),jco=o("longt5"),Dco=o(" \u2014 "),fI=a("a"),Gco=o("T5Tokenizer"),Oco=o(" or "),mI=a("a"),Vco=o("T5TokenizerFast"),Xco=o(" (LongT5 model)"),zco=l(),ch=a("li"),Ele=a("strong"),Qco=o("luke"),Wco=o(" \u2014 "),gI=a("a"),Hco=o("LukeTokenizer"),Uco=o(" (LUKE model)"),Jco=l(),us=a("li"),Cle=a("strong"),Yco=o("lxmert"),Kco=o(" \u2014 "),hI=a("a"),Zco=o("LxmertTokenizer"),efo=o(" or "),pI=a("a"),ofo=o("LxmertTokenizerFast"),rfo=o(" (LXMERT model)"),tfo=l(),fh=a("li"),wle=a("strong"),afo=o("m2m_100"),nfo=o(" \u2014 "),_I=a("a"),sfo=o("M2M100Tokenizer"),lfo=o(" (M2M100 model)"),ifo=l(),mh=a("li"),Ale=a("strong"),dfo=o("marian"),cfo=o(" \u2014 "),uI=a("a"),ffo=o("MarianTokenizer"),mfo=o(" (Marian model)"),gfo=l(),bs=a("li"),Lle=a("strong"),hfo=o("mbart"),pfo=o(" \u2014 "),bI=a("a"),_fo=o("MBartTokenizer"),ufo=o(" or "),vI=a("a"),bfo=o("MBartTokenizerFast"),vfo=o(" (mBART model)"),Ffo=l(),vs=a("li"),yle=a("strong"),Tfo=o("mbart50"),Mfo=o(" \u2014 "),FI=a("a"),Efo=o("MBart50Tokenizer"),Cfo=o(" or "),TI=a("a"),wfo=o("MBart50TokenizerFast"),Afo=o(" (mBART-50 model)"),Lfo=l(),Fs=a("li"),xle=a("strong"),yfo=o("megatron-bert"),xfo=o(" \u2014 "),MI=a("a"),$fo=o("BertTokenizer"),kfo=o(" or "),EI=a("a"),Sfo=o("BertTokenizerFast"),Rfo=o(" (Megatron-BERT model)"),Pfo=l(),gh=a("li"),$le=a("strong"),Bfo=o("mluke"),Ifo=o(" \u2014 "),CI=a("a"),Nfo=o("MLukeTokenizer"),qfo=o(" (mLUKE model)"),jfo=l(),Ts=a("li"),kle=a("strong"),Dfo=o("mobilebert"),Gfo=o(" \u2014 "),wI=a("a"),Ofo=o("MobileBertTokenizer"),Vfo=o(" or "),AI=a("a"),Xfo=o("MobileBertTokenizerFast"),zfo=o(" (MobileBERT model)"),Qfo=l(),Ms=a("li"),Sle=a("strong"),Wfo=o("mpnet"),Hfo=o(" \u2014 "),LI=a("a"),Ufo=o("MPNetTokenizer"),Jfo=o(" or "),yI=a("a"),Yfo=o("MPNetTokenizerFast"),Kfo=o(" (MPNet model)"),Zfo=l(),Es=a("li"),Rle=a("strong"),emo=o("mt5"),omo=o(" \u2014 "),xI=a("a"),rmo=o("MT5Tokenizer"),tmo=o(" or "),$I=a("a"),amo=o("MT5TokenizerFast"),nmo=o(" (MT5 model)"),smo=l(),Cs=a("li"),Ple=a("strong"),lmo=o("mvp"),imo=o(" \u2014 "),kI=a("a"),dmo=o("MvpTokenizer"),cmo=o(" or "),SI=a("a"),fmo=o("MvpTokenizerFast"),mmo=o(" (MVP model)"),gmo=l(),ws=a("li"),Ble=a("strong"),hmo=o("nezha"),pmo=o(" \u2014 "),RI=a("a"),_mo=o("BertTokenizer"),umo=o(" or "),PI=a("a"),bmo=o("BertTokenizerFast"),vmo=o(" (Nezha model)"),Fmo=l(),As=a("li"),Ile=a("strong"),Tmo=o("nystromformer"),Mmo=o(" \u2014 "),BI=a("a"),Emo=o("AlbertTokenizer"),Cmo=o(" or "),II=a("a"),wmo=o("AlbertTokenizerFast"),Amo=o(" (Nystr\xF6mformer model)"),Lmo=l(),Ls=a("li"),Nle=a("strong"),ymo=o("openai-gpt"),xmo=o(" \u2014 "),NI=a("a"),$mo=o("OpenAIGPTTokenizer"),kmo=o(" or "),qI=a("a"),Smo=o("OpenAIGPTTokenizerFast"),Rmo=o(" (OpenAI GPT model)"),Pmo=l(),hh=a("li"),qle=a("strong"),Bmo=o("opt"),Imo=o(" \u2014 "),jI=a("a"),Nmo=o("GPT2Tokenizer"),qmo=o(" (OPT model)"),jmo=l(),ys=a("li"),jle=a("strong"),Dmo=o("pegasus"),Gmo=o(" \u2014 "),DI=a("a"),Omo=o("PegasusTokenizer"),Vmo=o(" or "),GI=a("a"),Xmo=o("PegasusTokenizerFast"),zmo=o(" (Pegasus model)"),Qmo=l(),ph=a("li"),Dle=a("strong"),Wmo=o("perceiver"),Hmo=o(" \u2014 "),OI=a("a"),Umo=o("PerceiverTokenizer"),Jmo=o(" (Perceiver model)"),Ymo=l(),_h=a("li"),Gle=a("strong"),Kmo=o("phobert"),Zmo=o(" \u2014 "),VI=a("a"),ego=o("PhobertTokenizer"),ogo=o(" (PhoBERT model)"),rgo=l(),uh=a("li"),Ole=a("strong"),tgo=o("plbart"),ago=o(" \u2014 "),XI=a("a"),ngo=o("PLBartTokenizer"),sgo=o(" (PLBart model)"),lgo=l(),bh=a("li"),Vle=a("strong"),igo=o("prophetnet"),dgo=o(" \u2014 "),zI=a("a"),cgo=o("ProphetNetTokenizer"),fgo=o(" (ProphetNet model)"),mgo=l(),xs=a("li"),Xle=a("strong"),ggo=o("qdqbert"),hgo=o(" \u2014 "),QI=a("a"),pgo=o("BertTokenizer"),_go=o(" or "),WI=a("a"),ugo=o("BertTokenizerFast"),bgo=o(" (QDQBert model)"),vgo=l(),vh=a("li"),zle=a("strong"),Fgo=o("rag"),Tgo=o(" \u2014 "),HI=a("a"),Mgo=o("RagTokenizer"),Ego=o(" (RAG model)"),Cgo=l(),$s=a("li"),Qle=a("strong"),wgo=o("realm"),Ago=o(" \u2014 "),UI=a("a"),Lgo=o("RealmTokenizer"),ygo=o(" or "),JI=a("a"),xgo=o("RealmTokenizerFast"),$go=o(" (REALM model)"),kgo=l(),ks=a("li"),Wle=a("strong"),Sgo=o("reformer"),Rgo=o(" \u2014 "),YI=a("a"),Pgo=o("ReformerTokenizer"),Bgo=o(" or "),KI=a("a"),Igo=o("ReformerTokenizerFast"),Ngo=o(" (Reformer model)"),qgo=l(),Ss=a("li"),Hle=a("strong"),jgo=o("rembert"),Dgo=o(" \u2014 "),ZI=a("a"),Ggo=o("RemBertTokenizer"),Ogo=o(" or "),eN=a("a"),Vgo=o("RemBertTokenizerFast"),Xgo=o(" (RemBERT model)"),zgo=l(),Rs=a("li"),Ule=a("strong"),Qgo=o("retribert"),Wgo=o(" \u2014 "),oN=a("a"),Hgo=o("RetriBertTokenizer"),Ugo=o(" or "),rN=a("a"),Jgo=o("RetriBertTokenizerFast"),Ygo=o(" (RetriBERT model)"),Kgo=l(),Ps=a("li"),Jle=a("strong"),Zgo=o("roberta"),eho=o(" \u2014 "),tN=a("a"),oho=o("RobertaTokenizer"),rho=o(" or "),aN=a("a"),tho=o("RobertaTokenizerFast"),aho=o(" (RoBERTa model)"),nho=l(),Bs=a("li"),Yle=a("strong"),sho=o("roformer"),lho=o(" \u2014 "),nN=a("a"),iho=o("RoFormerTokenizer"),dho=o(" or "),sN=a("a"),cho=o("RoFormerTokenizerFast"),fho=o(" (RoFormer model)"),mho=l(),Fh=a("li"),Kle=a("strong"),gho=o("speech_to_text"),hho=o(" \u2014 "),lN=a("a"),pho=o("Speech2TextTokenizer"),_ho=o(" (Speech2Text model)"),uho=l(),Th=a("li"),Zle=a("strong"),bho=o("speech_to_text_2"),vho=o(" \u2014 "),iN=a("a"),Fho=o("Speech2Text2Tokenizer"),Tho=o(" (Speech2Text2 model)"),Mho=l(),Is=a("li"),eie=a("strong"),Eho=o("splinter"),Cho=o(" \u2014 "),dN=a("a"),who=o("SplinterTokenizer"),Aho=o(" or "),cN=a("a"),Lho=o("SplinterTokenizerFast"),yho=o(" (Splinter model)"),xho=l(),Ns=a("li"),oie=a("strong"),$ho=o("squeezebert"),kho=o(" \u2014 "),fN=a("a"),Sho=o("SqueezeBertTokenizer"),Rho=o(" or "),mN=a("a"),Pho=o("SqueezeBertTokenizerFast"),Bho=o(" (SqueezeBERT model)"),Iho=l(),qs=a("li"),rie=a("strong"),Nho=o("t5"),qho=o(" \u2014 "),gN=a("a"),jho=o("T5Tokenizer"),Dho=o(" or "),hN=a("a"),Gho=o("T5TokenizerFast"),Oho=o(" (T5 model)"),Vho=l(),Mh=a("li"),tie=a("strong"),Xho=o("tapas"),zho=o(" \u2014 "),pN=a("a"),Qho=o("TapasTokenizer"),Who=o(" (TAPAS model)"),Hho=l(),Eh=a("li"),aie=a("strong"),Uho=o("tapex"),Jho=o(" \u2014 "),_N=a("a"),Yho=o("TapexTokenizer"),Kho=o(" (TAPEX model)"),Zho=l(),Ch=a("li"),nie=a("strong"),epo=o("transfo-xl"),opo=o(" \u2014 "),uN=a("a"),rpo=o("TransfoXLTokenizer"),tpo=o(" (Transformer-XL model)"),apo=l(),js=a("li"),sie=a("strong"),npo=o("vilt"),spo=o(" \u2014 "),bN=a("a"),lpo=o("BertTokenizer"),ipo=o(" or "),vN=a("a"),dpo=o("BertTokenizerFast"),cpo=o(" (ViLT model)"),fpo=l(),Ds=a("li"),lie=a("strong"),mpo=o("visual_bert"),gpo=o(" \u2014 "),FN=a("a"),hpo=o("BertTokenizer"),ppo=o(" or "),TN=a("a"),_po=o("BertTokenizerFast"),upo=o(" (VisualBERT model)"),bpo=l(),wh=a("li"),iie=a("strong"),vpo=o("wav2vec2"),Fpo=o(" \u2014 "),MN=a("a"),Tpo=o("Wav2Vec2CTCTokenizer"),Mpo=o(" (Wav2Vec2 model)"),Epo=l(),Ah=a("li"),die=a("strong"),Cpo=o("wav2vec2-conformer"),wpo=o(" \u2014 "),EN=a("a"),Apo=o("Wav2Vec2CTCTokenizer"),Lpo=o(" (Wav2Vec2-Conformer model)"),ypo=l(),Lh=a("li"),cie=a("strong"),xpo=o("wav2vec2_phoneme"),$po=o(" \u2014 "),CN=a("a"),kpo=o("Wav2Vec2PhonemeCTCTokenizer"),Spo=o(" (Wav2Vec2Phoneme model)"),Rpo=l(),Gs=a("li"),fie=a("strong"),Ppo=o("xglm"),Bpo=o(" \u2014 "),wN=a("a"),Ipo=o("XGLMTokenizer"),Npo=o(" or "),AN=a("a"),qpo=o("XGLMTokenizerFast"),jpo=o(" (XGLM model)"),Dpo=l(),yh=a("li"),mie=a("strong"),Gpo=o("xlm"),Opo=o(" \u2014 "),LN=a("a"),Vpo=o("XLMTokenizer"),Xpo=o(" (XLM model)"),zpo=l(),xh=a("li"),gie=a("strong"),Qpo=o("xlm-prophetnet"),Wpo=o(" \u2014 "),yN=a("a"),Hpo=o("XLMProphetNetTokenizer"),Upo=o(" (XLM-ProphetNet model)"),Jpo=l(),Os=a("li"),hie=a("strong"),Ypo=o("xlm-roberta"),Kpo=o(" \u2014 "),xN=a("a"),Zpo=o("XLMRobertaTokenizer"),e_o=o(" or "),$N=a("a"),o_o=o("XLMRobertaTokenizerFast"),r_o=o(" (XLM-RoBERTa model)"),t_o=l(),Vs=a("li"),pie=a("strong"),a_o=o("xlm-roberta-xl"),n_o=o(" \u2014 "),kN=a("a"),s_o=o("RobertaTokenizer"),l_o=o(" or "),SN=a("a"),i_o=o("RobertaTokenizerFast"),d_o=o(" (XLM-RoBERTa-XL model)"),c_o=l(),Xs=a("li"),_ie=a("strong"),f_o=o("xlnet"),m_o=o(" \u2014 "),RN=a("a"),g_o=o("XLNetTokenizer"),h_o=o(" or "),PN=a("a"),p_o=o("XLNetTokenizerFast"),__o=o(" (XLNet model)"),u_o=l(),zs=a("li"),uie=a("strong"),b_o=o("yoso"),v_o=o(" \u2014 "),BN=a("a"),F_o=o("AlbertTokenizer"),T_o=o(" or "),IN=a("a"),M_o=o("AlbertTokenizerFast"),E_o=o(" (YOSO model)"),C_o=l(),F($h.$$.fragment),w_o=l(),kh=a("div"),F(iy.$$.fragment),A_o=l(),bie=a("p"),L_o=o("Register a new tokenizer in this mapping."),EVe=l(),Ii=a("h2"),Sh=a("a"),vie=a("span"),F(dy.$$.fragment),y_o=l(),Fie=a("span"),x_o=o("AutoFeatureExtractor"),CVe=l(),Lo=a("div"),F(cy.$$.fragment),$_o=l(),fy=a("p"),k_o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NN=a("a"),S_o=o("AutoFeatureExtractor.from_pretrained()"),R_o=o(" class method."),P_o=l(),my=a("p"),B_o=o("This class cannot be instantiated directly using "),Tie=a("code"),I_o=o("__init__()"),N_o=o(" (throws an error)."),q_o=l(),He=a("div"),F(gy.$$.fragment),j_o=l(),Mie=a("p"),D_o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),G_o=l(),Ra=a("p"),O_o=o("The feature extractor class to instantiate is selected based on the "),Eie=a("code"),V_o=o("model_type"),X_o=o(` property of the config object
(either passed as an argument or loaded from `),Cie=a("code"),z_o=o("pretrained_model_name_or_path"),Q_o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wie=a("code"),W_o=o("pretrained_model_name_or_path"),H_o=o(":"),U_o=l(),Y=a("ul"),Rh=a("li"),Aie=a("strong"),J_o=o("beit"),Y_o=o(" \u2014 "),qN=a("a"),K_o=o("BeitFeatureExtractor"),Z_o=o(" (BEiT model)"),euo=l(),Ph=a("li"),Lie=a("strong"),ouo=o("clip"),ruo=o(" \u2014 "),jN=a("a"),tuo=o("CLIPFeatureExtractor"),auo=o(" (CLIP model)"),nuo=l(),Bh=a("li"),yie=a("strong"),suo=o("convnext"),luo=o(" \u2014 "),DN=a("a"),iuo=o("ConvNextFeatureExtractor"),duo=o(" (ConvNeXT model)"),cuo=l(),Ih=a("li"),xie=a("strong"),fuo=o("cvt"),muo=o(" \u2014 "),GN=a("a"),guo=o("ConvNextFeatureExtractor"),huo=o(" (CvT model)"),puo=l(),Nh=a("li"),$ie=a("strong"),_uo=o("data2vec-audio"),uuo=o(" \u2014 "),ON=a("a"),buo=o("Wav2Vec2FeatureExtractor"),vuo=o(" (Data2VecAudio model)"),Fuo=l(),qh=a("li"),kie=a("strong"),Tuo=o("data2vec-vision"),Muo=o(" \u2014 "),VN=a("a"),Euo=o("BeitFeatureExtractor"),Cuo=o(" (Data2VecVision model)"),wuo=l(),jh=a("li"),Sie=a("strong"),Auo=o("deit"),Luo=o(" \u2014 "),XN=a("a"),yuo=o("DeiTFeatureExtractor"),xuo=o(" (DeiT model)"),$uo=l(),Dh=a("li"),Rie=a("strong"),kuo=o("detr"),Suo=o(" \u2014 "),zN=a("a"),Ruo=o("DetrFeatureExtractor"),Puo=o(" (DETR model)"),Buo=l(),Gh=a("li"),Pie=a("strong"),Iuo=o("dpt"),Nuo=o(" \u2014 "),QN=a("a"),quo=o("DPTFeatureExtractor"),juo=o(" (DPT model)"),Duo=l(),Oh=a("li"),Bie=a("strong"),Guo=o("flava"),Ouo=o(" \u2014 "),WN=a("a"),Vuo=o("FlavaFeatureExtractor"),Xuo=o(" (FLAVA model)"),zuo=l(),Vh=a("li"),Iie=a("strong"),Quo=o("glpn"),Wuo=o(" \u2014 "),HN=a("a"),Huo=o("GLPNFeatureExtractor"),Uuo=o(" (GLPN model)"),Juo=l(),Xh=a("li"),Nie=a("strong"),Yuo=o("groupvit"),Kuo=o(" \u2014 "),UN=a("a"),Zuo=o("CLIPFeatureExtractor"),e1o=o(" (GroupViT model)"),o1o=l(),zh=a("li"),qie=a("strong"),r1o=o("hubert"),t1o=o(" \u2014 "),JN=a("a"),a1o=o("Wav2Vec2FeatureExtractor"),n1o=o(" (Hubert model)"),s1o=l(),Qh=a("li"),jie=a("strong"),l1o=o("imagegpt"),i1o=o(" \u2014 "),YN=a("a"),d1o=o("ImageGPTFeatureExtractor"),c1o=o(" (ImageGPT model)"),f1o=l(),Wh=a("li"),Die=a("strong"),m1o=o("layoutlmv2"),g1o=o(" \u2014 "),KN=a("a"),h1o=o("LayoutLMv2FeatureExtractor"),p1o=o(" (LayoutLMv2 model)"),_1o=l(),Hh=a("li"),Gie=a("strong"),u1o=o("layoutlmv3"),b1o=o(" \u2014 "),ZN=a("a"),v1o=o("LayoutLMv3FeatureExtractor"),F1o=o(" (LayoutLMv3 model)"),T1o=l(),Uh=a("li"),Oie=a("strong"),M1o=o("levit"),E1o=o(" \u2014 "),eq=a("a"),C1o=o("LevitFeatureExtractor"),w1o=o(" (LeViT model)"),A1o=l(),Jh=a("li"),Vie=a("strong"),L1o=o("maskformer"),y1o=o(" \u2014 "),oq=a("a"),x1o=o("MaskFormerFeatureExtractor"),$1o=o(" (MaskFormer model)"),k1o=l(),Yh=a("li"),Xie=a("strong"),S1o=o("mctct"),R1o=o(" \u2014 "),rq=a("a"),P1o=o("MCTCTFeatureExtractor"),B1o=o(" (M-CTC-T model)"),I1o=l(),Kh=a("li"),zie=a("strong"),N1o=o("perceiver"),q1o=o(" \u2014 "),tq=a("a"),j1o=o("PerceiverFeatureExtractor"),D1o=o(" (Perceiver model)"),G1o=l(),Zh=a("li"),Qie=a("strong"),O1o=o("poolformer"),V1o=o(" \u2014 "),aq=a("a"),X1o=o("PoolFormerFeatureExtractor"),z1o=o(" (PoolFormer model)"),Q1o=l(),ep=a("li"),Wie=a("strong"),W1o=o("regnet"),H1o=o(" \u2014 "),nq=a("a"),U1o=o("ConvNextFeatureExtractor"),J1o=o(" (RegNet model)"),Y1o=l(),op=a("li"),Hie=a("strong"),K1o=o("resnet"),Z1o=o(" \u2014 "),sq=a("a"),e7o=o("ConvNextFeatureExtractor"),o7o=o(" (ResNet model)"),r7o=l(),rp=a("li"),Uie=a("strong"),t7o=o("segformer"),a7o=o(" \u2014 "),lq=a("a"),n7o=o("SegformerFeatureExtractor"),s7o=o(" (SegFormer model)"),l7o=l(),tp=a("li"),Jie=a("strong"),i7o=o("speech_to_text"),d7o=o(" \u2014 "),iq=a("a"),c7o=o("Speech2TextFeatureExtractor"),f7o=o(" (Speech2Text model)"),m7o=l(),ap=a("li"),Yie=a("strong"),g7o=o("swin"),h7o=o(" \u2014 "),dq=a("a"),p7o=o("ViTFeatureExtractor"),_7o=o(" (Swin Transformer model)"),u7o=l(),np=a("li"),Kie=a("strong"),b7o=o("van"),v7o=o(" \u2014 "),cq=a("a"),F7o=o("ConvNextFeatureExtractor"),T7o=o(" (VAN model)"),M7o=l(),sp=a("li"),Zie=a("strong"),E7o=o("vilt"),C7o=o(" \u2014 "),fq=a("a"),w7o=o("ViltFeatureExtractor"),A7o=o(" (ViLT model)"),L7o=l(),lp=a("li"),ede=a("strong"),y7o=o("vit"),x7o=o(" \u2014 "),mq=a("a"),$7o=o("ViTFeatureExtractor"),k7o=o(" (ViT model)"),S7o=l(),ip=a("li"),ode=a("strong"),R7o=o("vit_mae"),P7o=o(" \u2014 "),gq=a("a"),B7o=o("ViTFeatureExtractor"),I7o=o(" (ViTMAE model)"),N7o=l(),dp=a("li"),rde=a("strong"),q7o=o("wav2vec2"),j7o=o(" \u2014 "),hq=a("a"),D7o=o("Wav2Vec2FeatureExtractor"),G7o=o(" (Wav2Vec2 model)"),O7o=l(),cp=a("li"),tde=a("strong"),V7o=o("wav2vec2-conformer"),X7o=o(" \u2014 "),pq=a("a"),z7o=o("Wav2Vec2FeatureExtractor"),Q7o=o(" (Wav2Vec2-Conformer model)"),W7o=l(),fp=a("li"),ade=a("strong"),H7o=o("yolos"),U7o=o(" \u2014 "),_q=a("a"),J7o=o("YolosFeatureExtractor"),Y7o=o(" (YOLOS model)"),K7o=l(),F(mp.$$.fragment),Z7o=l(),F(gp.$$.fragment),e4o=l(),hp=a("div"),F(hy.$$.fragment),o4o=l(),nde=a("p"),r4o=o("Register a new feature extractor for this class."),wVe=l(),Ni=a("h2"),pp=a("a"),sde=a("span"),F(py.$$.fragment),t4o=l(),lde=a("span"),a4o=o("AutoProcessor"),AVe=l(),yo=a("div"),F(_y.$$.fragment),n4o=l(),uy=a("p"),s4o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uq=a("a"),l4o=o("AutoProcessor.from_pretrained()"),i4o=o(" class method."),d4o=l(),by=a("p"),c4o=o("This class cannot be instantiated directly using "),ide=a("code"),f4o=o("__init__()"),m4o=o(" (throws an error)."),g4o=l(),Ue=a("div"),F(vy.$$.fragment),h4o=l(),dde=a("p"),p4o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_4o=l(),qi=a("p"),u4o=o("The processor class to instantiate is selected based on the "),cde=a("code"),b4o=o("model_type"),v4o=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),F4o=o("pretrained_model_name_or_path"),T4o=o(" if possible):"),M4o=l(),he=a("ul"),_p=a("li"),mde=a("strong"),E4o=o("clip"),C4o=o(" \u2014 "),bq=a("a"),w4o=o("CLIPProcessor"),A4o=o(" (CLIP model)"),L4o=l(),up=a("li"),gde=a("strong"),y4o=o("flava"),x4o=o(" \u2014 "),hde=a("code"),$4o=o("FLAVAProcessor"),k4o=o(" (FLAVA model)"),S4o=l(),bp=a("li"),pde=a("strong"),R4o=o("groupvit"),P4o=o(" \u2014 "),vq=a("a"),B4o=o("CLIPProcessor"),I4o=o(" (GroupViT model)"),N4o=l(),vp=a("li"),_de=a("strong"),q4o=o("layoutlmv2"),j4o=o(" \u2014 "),Fq=a("a"),D4o=o("LayoutLMv2Processor"),G4o=o(" (LayoutLMv2 model)"),O4o=l(),Fp=a("li"),ude=a("strong"),V4o=o("layoutlmv3"),X4o=o(" \u2014 "),Tq=a("a"),z4o=o("LayoutLMv3Processor"),Q4o=o(" (LayoutLMv3 model)"),W4o=l(),Tp=a("li"),bde=a("strong"),H4o=o("layoutxlm"),U4o=o(" \u2014 "),Mq=a("a"),J4o=o("LayoutXLMProcessor"),Y4o=o(" (LayoutXLM model)"),K4o=l(),Mp=a("li"),vde=a("strong"),Z4o=o("sew"),e2o=o(" \u2014 "),Eq=a("a"),o2o=o("Wav2Vec2Processor"),r2o=o(" (SEW model)"),t2o=l(),Ep=a("li"),Fde=a("strong"),a2o=o("sew-d"),n2o=o(" \u2014 "),Cq=a("a"),s2o=o("Wav2Vec2Processor"),l2o=o(" (SEW-D model)"),i2o=l(),Cp=a("li"),Tde=a("strong"),d2o=o("speech_to_text"),c2o=o(" \u2014 "),wq=a("a"),f2o=o("Speech2TextProcessor"),m2o=o(" (Speech2Text model)"),g2o=l(),wp=a("li"),Mde=a("strong"),h2o=o("speech_to_text_2"),p2o=o(" \u2014 "),Aq=a("a"),_2o=o("Speech2Text2Processor"),u2o=o(" (Speech2Text2 model)"),b2o=l(),Ap=a("li"),Ede=a("strong"),v2o=o("trocr"),F2o=o(" \u2014 "),Lq=a("a"),T2o=o("TrOCRProcessor"),M2o=o(" (TrOCR model)"),E2o=l(),Lp=a("li"),Cde=a("strong"),C2o=o("unispeech"),w2o=o(" \u2014 "),yq=a("a"),A2o=o("Wav2Vec2Processor"),L2o=o(" (UniSpeech model)"),y2o=l(),yp=a("li"),wde=a("strong"),x2o=o("unispeech-sat"),$2o=o(" \u2014 "),xq=a("a"),k2o=o("Wav2Vec2Processor"),S2o=o(" (UniSpeechSat model)"),R2o=l(),xp=a("li"),Ade=a("strong"),P2o=o("vilt"),B2o=o(" \u2014 "),$q=a("a"),I2o=o("ViltProcessor"),N2o=o(" (ViLT model)"),q2o=l(),$p=a("li"),Lde=a("strong"),j2o=o("vision-text-dual-encoder"),D2o=o(" \u2014 "),kq=a("a"),G2o=o("VisionTextDualEncoderProcessor"),O2o=o(" (VisionTextDualEncoder model)"),V2o=l(),kp=a("li"),yde=a("strong"),X2o=o("wav2vec2"),z2o=o(" \u2014 "),Sq=a("a"),Q2o=o("Wav2Vec2Processor"),W2o=o(" (Wav2Vec2 model)"),H2o=l(),Sp=a("li"),xde=a("strong"),U2o=o("wav2vec2-conformer"),J2o=o(" \u2014 "),Rq=a("a"),Y2o=o("Wav2Vec2Processor"),K2o=o(" (Wav2Vec2-Conformer model)"),Z2o=l(),Rp=a("li"),$de=a("strong"),ebo=o("wavlm"),obo=o(" \u2014 "),Pq=a("a"),rbo=o("Wav2Vec2Processor"),tbo=o(" (WavLM model)"),abo=l(),F(Pp.$$.fragment),nbo=l(),F(Bp.$$.fragment),sbo=l(),Ip=a("div"),F(Fy.$$.fragment),lbo=l(),kde=a("p"),ibo=o("Register a new processor for this class."),LVe=l(),ji=a("h2"),Np=a("a"),Sde=a("span"),F(Ty.$$.fragment),dbo=l(),Rde=a("span"),cbo=o("AutoModel"),yVe=l(),xo=a("div"),F(My.$$.fragment),fbo=l(),Di=a("p"),mbo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bq=a("a"),gbo=o("from_pretrained()"),hbo=o(" class method or the "),Iq=a("a"),pbo=o("from_config()"),_bo=o(` class
method.`),ubo=l(),Ey=a("p"),bbo=o("This class cannot be instantiated directly using "),Pde=a("code"),vbo=o("__init__()"),Fbo=o(" (throws an error)."),Tbo=l(),st=a("div"),F(Cy.$$.fragment),Mbo=l(),Bde=a("p"),Ebo=o("Instantiates one of the base model classes of the library from a configuration."),Cbo=l(),Gi=a("p"),wbo=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),Abo=o("not"),Lbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=a("a"),ybo=o("from_pretrained()"),xbo=o(" to load the model weights."),$bo=l(),F(qp.$$.fragment),kbo=l(),Je=a("div"),F(wy.$$.fragment),Sbo=l(),Nde=a("p"),Rbo=o("Instantiate one of the base model classes of the library from a pretrained model."),Pbo=l(),Pa=a("p"),Bbo=o("The model class to instantiate is selected based on the "),qde=a("code"),Ibo=o("model_type"),Nbo=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),qbo=o("pretrained_model_name_or_path"),jbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=a("code"),Dbo=o("pretrained_model_name_or_path"),Gbo=o(":"),Obo=l(),y=a("ul"),jp=a("li"),Gde=a("strong"),Vbo=o("albert"),Xbo=o(" \u2014 "),qq=a("a"),zbo=o("AlbertModel"),Qbo=o(" (ALBERT model)"),Wbo=l(),Dp=a("li"),Ode=a("strong"),Hbo=o("bart"),Ubo=o(" \u2014 "),jq=a("a"),Jbo=o("BartModel"),Ybo=o(" (BART model)"),Kbo=l(),Gp=a("li"),Vde=a("strong"),Zbo=o("beit"),evo=o(" \u2014 "),Dq=a("a"),ovo=o("BeitModel"),rvo=o(" (BEiT model)"),tvo=l(),Op=a("li"),Xde=a("strong"),avo=o("bert"),nvo=o(" \u2014 "),Gq=a("a"),svo=o("BertModel"),lvo=o(" (BERT model)"),ivo=l(),Vp=a("li"),zde=a("strong"),dvo=o("bert-generation"),cvo=o(" \u2014 "),Oq=a("a"),fvo=o("BertGenerationEncoder"),mvo=o(" (Bert Generation model)"),gvo=l(),Xp=a("li"),Qde=a("strong"),hvo=o("big_bird"),pvo=o(" \u2014 "),Vq=a("a"),_vo=o("BigBirdModel"),uvo=o(" (BigBird model)"),bvo=l(),zp=a("li"),Wde=a("strong"),vvo=o("bigbird_pegasus"),Fvo=o(" \u2014 "),Xq=a("a"),Tvo=o("BigBirdPegasusModel"),Mvo=o(" (BigBird-Pegasus model)"),Evo=l(),Qp=a("li"),Hde=a("strong"),Cvo=o("blenderbot"),wvo=o(" \u2014 "),zq=a("a"),Avo=o("BlenderbotModel"),Lvo=o(" (Blenderbot model)"),yvo=l(),Wp=a("li"),Ude=a("strong"),xvo=o("blenderbot-small"),$vo=o(" \u2014 "),Qq=a("a"),kvo=o("BlenderbotSmallModel"),Svo=o(" (BlenderbotSmall model)"),Rvo=l(),Hp=a("li"),Jde=a("strong"),Pvo=o("bloom"),Bvo=o(" \u2014 "),Wq=a("a"),Ivo=o("BloomModel"),Nvo=o(" (BLOOM model)"),qvo=l(),Up=a("li"),Yde=a("strong"),jvo=o("camembert"),Dvo=o(" \u2014 "),Hq=a("a"),Gvo=o("CamembertModel"),Ovo=o(" (CamemBERT model)"),Vvo=l(),Jp=a("li"),Kde=a("strong"),Xvo=o("canine"),zvo=o(" \u2014 "),Uq=a("a"),Qvo=o("CanineModel"),Wvo=o(" (CANINE model)"),Hvo=l(),Yp=a("li"),Zde=a("strong"),Uvo=o("clip"),Jvo=o(" \u2014 "),Jq=a("a"),Yvo=o("CLIPModel"),Kvo=o(" (CLIP model)"),Zvo=l(),Kp=a("li"),ece=a("strong"),e3o=o("codegen"),o3o=o(" \u2014 "),Yq=a("a"),r3o=o("CodeGenModel"),t3o=o(" (CodeGen model)"),a3o=l(),Zp=a("li"),oce=a("strong"),n3o=o("convbert"),s3o=o(" \u2014 "),Kq=a("a"),l3o=o("ConvBertModel"),i3o=o(" (ConvBERT model)"),d3o=l(),e_=a("li"),rce=a("strong"),c3o=o("convnext"),f3o=o(" \u2014 "),Zq=a("a"),m3o=o("ConvNextModel"),g3o=o(" (ConvNeXT model)"),h3o=l(),o_=a("li"),tce=a("strong"),p3o=o("ctrl"),_3o=o(" \u2014 "),ej=a("a"),u3o=o("CTRLModel"),b3o=o(" (CTRL model)"),v3o=l(),r_=a("li"),ace=a("strong"),F3o=o("cvt"),T3o=o(" \u2014 "),oj=a("a"),M3o=o("CvtModel"),E3o=o(" (CvT model)"),C3o=l(),t_=a("li"),nce=a("strong"),w3o=o("data2vec-audio"),A3o=o(" \u2014 "),rj=a("a"),L3o=o("Data2VecAudioModel"),y3o=o(" (Data2VecAudio model)"),x3o=l(),a_=a("li"),sce=a("strong"),$3o=o("data2vec-text"),k3o=o(" \u2014 "),tj=a("a"),S3o=o("Data2VecTextModel"),R3o=o(" (Data2VecText model)"),P3o=l(),n_=a("li"),lce=a("strong"),B3o=o("data2vec-vision"),I3o=o(" \u2014 "),aj=a("a"),N3o=o("Data2VecVisionModel"),q3o=o(" (Data2VecVision model)"),j3o=l(),s_=a("li"),ice=a("strong"),D3o=o("deberta"),G3o=o(" \u2014 "),nj=a("a"),O3o=o("DebertaModel"),V3o=o(" (DeBERTa model)"),X3o=l(),l_=a("li"),dce=a("strong"),z3o=o("deberta-v2"),Q3o=o(" \u2014 "),sj=a("a"),W3o=o("DebertaV2Model"),H3o=o(" (DeBERTa-v2 model)"),U3o=l(),i_=a("li"),cce=a("strong"),J3o=o("decision_transformer"),Y3o=o(" \u2014 "),lj=a("a"),K3o=o("DecisionTransformerModel"),Z3o=o(" (Decision Transformer model)"),eFo=l(),d_=a("li"),fce=a("strong"),oFo=o("deit"),rFo=o(" \u2014 "),ij=a("a"),tFo=o("DeiTModel"),aFo=o(" (DeiT model)"),nFo=l(),c_=a("li"),mce=a("strong"),sFo=o("detr"),lFo=o(" \u2014 "),dj=a("a"),iFo=o("DetrModel"),dFo=o(" (DETR model)"),cFo=l(),f_=a("li"),gce=a("strong"),fFo=o("distilbert"),mFo=o(" \u2014 "),cj=a("a"),gFo=o("DistilBertModel"),hFo=o(" (DistilBERT model)"),pFo=l(),m_=a("li"),hce=a("strong"),_Fo=o("dpr"),uFo=o(" \u2014 "),fj=a("a"),bFo=o("DPRQuestionEncoder"),vFo=o(" (DPR model)"),FFo=l(),g_=a("li"),pce=a("strong"),TFo=o("dpt"),MFo=o(" \u2014 "),mj=a("a"),EFo=o("DPTModel"),CFo=o(" (DPT model)"),wFo=l(),h_=a("li"),_ce=a("strong"),AFo=o("electra"),LFo=o(" \u2014 "),gj=a("a"),yFo=o("ElectraModel"),xFo=o(" (ELECTRA model)"),$Fo=l(),p_=a("li"),uce=a("strong"),kFo=o("flaubert"),SFo=o(" \u2014 "),hj=a("a"),RFo=o("FlaubertModel"),PFo=o(" (FlauBERT model)"),BFo=l(),__=a("li"),bce=a("strong"),IFo=o("flava"),NFo=o(" \u2014 "),pj=a("a"),qFo=o("FlavaModel"),jFo=o(" (FLAVA model)"),DFo=l(),u_=a("li"),vce=a("strong"),GFo=o("fnet"),OFo=o(" \u2014 "),_j=a("a"),VFo=o("FNetModel"),XFo=o(" (FNet model)"),zFo=l(),b_=a("li"),Fce=a("strong"),QFo=o("fsmt"),WFo=o(" \u2014 "),uj=a("a"),HFo=o("FSMTModel"),UFo=o(" (FairSeq Machine-Translation model)"),JFo=l(),Qs=a("li"),Tce=a("strong"),YFo=o("funnel"),KFo=o(" \u2014 "),bj=a("a"),ZFo=o("FunnelModel"),eTo=o(" or "),vj=a("a"),oTo=o("FunnelBaseModel"),rTo=o(" (Funnel Transformer model)"),tTo=l(),v_=a("li"),Mce=a("strong"),aTo=o("glpn"),nTo=o(" \u2014 "),Fj=a("a"),sTo=o("GLPNModel"),lTo=o(" (GLPN model)"),iTo=l(),F_=a("li"),Ece=a("strong"),dTo=o("gpt2"),cTo=o(" \u2014 "),Tj=a("a"),fTo=o("GPT2Model"),mTo=o(" (OpenAI GPT-2 model)"),gTo=l(),T_=a("li"),Cce=a("strong"),hTo=o("gpt_neo"),pTo=o(" \u2014 "),Mj=a("a"),_To=o("GPTNeoModel"),uTo=o(" (GPT Neo model)"),bTo=l(),M_=a("li"),wce=a("strong"),vTo=o("gpt_neox"),FTo=o(" \u2014 "),Ej=a("a"),TTo=o("GPTNeoXModel"),MTo=o(" (GPT NeoX model)"),ETo=l(),E_=a("li"),Ace=a("strong"),CTo=o("gptj"),wTo=o(" \u2014 "),Cj=a("a"),ATo=o("GPTJModel"),LTo=o(" (GPT-J model)"),yTo=l(),C_=a("li"),Lce=a("strong"),xTo=o("groupvit"),$To=o(" \u2014 "),wj=a("a"),kTo=o("GroupViTModel"),STo=o(" (GroupViT model)"),RTo=l(),w_=a("li"),yce=a("strong"),PTo=o("hubert"),BTo=o(" \u2014 "),Aj=a("a"),ITo=o("HubertModel"),NTo=o(" (Hubert model)"),qTo=l(),A_=a("li"),xce=a("strong"),jTo=o("ibert"),DTo=o(" \u2014 "),Lj=a("a"),GTo=o("IBertModel"),OTo=o(" (I-BERT model)"),VTo=l(),L_=a("li"),$ce=a("strong"),XTo=o("imagegpt"),zTo=o(" \u2014 "),yj=a("a"),QTo=o("ImageGPTModel"),WTo=o(" (ImageGPT model)"),HTo=l(),y_=a("li"),kce=a("strong"),UTo=o("layoutlm"),JTo=o(" \u2014 "),xj=a("a"),YTo=o("LayoutLMModel"),KTo=o(" (LayoutLM model)"),ZTo=l(),x_=a("li"),Sce=a("strong"),eMo=o("layoutlmv2"),oMo=o(" \u2014 "),$j=a("a"),rMo=o("LayoutLMv2Model"),tMo=o(" (LayoutLMv2 model)"),aMo=l(),$_=a("li"),Rce=a("strong"),nMo=o("layoutlmv3"),sMo=o(" \u2014 "),kj=a("a"),lMo=o("LayoutLMv3Model"),iMo=o(" (LayoutLMv3 model)"),dMo=l(),k_=a("li"),Pce=a("strong"),cMo=o("led"),fMo=o(" \u2014 "),Sj=a("a"),mMo=o("LEDModel"),gMo=o(" (LED model)"),hMo=l(),S_=a("li"),Bce=a("strong"),pMo=o("levit"),_Mo=o(" \u2014 "),Rj=a("a"),uMo=o("LevitModel"),bMo=o(" (LeViT model)"),vMo=l(),R_=a("li"),Ice=a("strong"),FMo=o("longformer"),TMo=o(" \u2014 "),Pj=a("a"),MMo=o("LongformerModel"),EMo=o(" (Longformer model)"),CMo=l(),P_=a("li"),Nce=a("strong"),wMo=o("longt5"),AMo=o(" \u2014 "),Bj=a("a"),LMo=o("LongT5Model"),yMo=o(" (LongT5 model)"),xMo=l(),B_=a("li"),qce=a("strong"),$Mo=o("luke"),kMo=o(" \u2014 "),Ij=a("a"),SMo=o("LukeModel"),RMo=o(" (LUKE model)"),PMo=l(),I_=a("li"),jce=a("strong"),BMo=o("lxmert"),IMo=o(" \u2014 "),Nj=a("a"),NMo=o("LxmertModel"),qMo=o(" (LXMERT model)"),jMo=l(),N_=a("li"),Dce=a("strong"),DMo=o("m2m_100"),GMo=o(" \u2014 "),qj=a("a"),OMo=o("M2M100Model"),VMo=o(" (M2M100 model)"),XMo=l(),q_=a("li"),Gce=a("strong"),zMo=o("marian"),QMo=o(" \u2014 "),jj=a("a"),WMo=o("MarianModel"),HMo=o(" (Marian model)"),UMo=l(),j_=a("li"),Oce=a("strong"),JMo=o("maskformer"),YMo=o(" \u2014 "),Dj=a("a"),KMo=o("MaskFormerModel"),ZMo=o(" (MaskFormer model)"),eEo=l(),D_=a("li"),Vce=a("strong"),oEo=o("mbart"),rEo=o(" \u2014 "),Gj=a("a"),tEo=o("MBartModel"),aEo=o(" (mBART model)"),nEo=l(),G_=a("li"),Xce=a("strong"),sEo=o("mctct"),lEo=o(" \u2014 "),Oj=a("a"),iEo=o("MCTCTModel"),dEo=o(" (M-CTC-T model)"),cEo=l(),O_=a("li"),zce=a("strong"),fEo=o("megatron-bert"),mEo=o(" \u2014 "),Vj=a("a"),gEo=o("MegatronBertModel"),hEo=o(" (Megatron-BERT model)"),pEo=l(),V_=a("li"),Qce=a("strong"),_Eo=o("mobilebert"),uEo=o(" \u2014 "),Xj=a("a"),bEo=o("MobileBertModel"),vEo=o(" (MobileBERT model)"),FEo=l(),X_=a("li"),Wce=a("strong"),TEo=o("mpnet"),MEo=o(" \u2014 "),zj=a("a"),EEo=o("MPNetModel"),CEo=o(" (MPNet model)"),wEo=l(),z_=a("li"),Hce=a("strong"),AEo=o("mt5"),LEo=o(" \u2014 "),Qj=a("a"),yEo=o("MT5Model"),xEo=o(" (MT5 model)"),$Eo=l(),Q_=a("li"),Uce=a("strong"),kEo=o("mvp"),SEo=o(" \u2014 "),Wj=a("a"),REo=o("MvpModel"),PEo=o(" (MVP model)"),BEo=l(),W_=a("li"),Jce=a("strong"),IEo=o("nezha"),NEo=o(" \u2014 "),Hj=a("a"),qEo=o("NezhaModel"),jEo=o(" (Nezha model)"),DEo=l(),H_=a("li"),Yce=a("strong"),GEo=o("nystromformer"),OEo=o(" \u2014 "),Uj=a("a"),VEo=o("NystromformerModel"),XEo=o(" (Nystr\xF6mformer model)"),zEo=l(),U_=a("li"),Kce=a("strong"),QEo=o("openai-gpt"),WEo=o(" \u2014 "),Jj=a("a"),HEo=o("OpenAIGPTModel"),UEo=o(" (OpenAI GPT model)"),JEo=l(),J_=a("li"),Zce=a("strong"),YEo=o("opt"),KEo=o(" \u2014 "),Yj=a("a"),ZEo=o("OPTModel"),eCo=o(" (OPT model)"),oCo=l(),Y_=a("li"),efe=a("strong"),rCo=o("pegasus"),tCo=o(" \u2014 "),Kj=a("a"),aCo=o("PegasusModel"),nCo=o(" (Pegasus model)"),sCo=l(),K_=a("li"),ofe=a("strong"),lCo=o("perceiver"),iCo=o(" \u2014 "),Zj=a("a"),dCo=o("PerceiverModel"),cCo=o(" (Perceiver model)"),fCo=l(),Z_=a("li"),rfe=a("strong"),mCo=o("plbart"),gCo=o(" \u2014 "),eD=a("a"),hCo=o("PLBartModel"),pCo=o(" (PLBart model)"),_Co=l(),eu=a("li"),tfe=a("strong"),uCo=o("poolformer"),bCo=o(" \u2014 "),oD=a("a"),vCo=o("PoolFormerModel"),FCo=o(" (PoolFormer model)"),TCo=l(),ou=a("li"),afe=a("strong"),MCo=o("prophetnet"),ECo=o(" \u2014 "),rD=a("a"),CCo=o("ProphetNetModel"),wCo=o(" (ProphetNet model)"),ACo=l(),ru=a("li"),nfe=a("strong"),LCo=o("qdqbert"),yCo=o(" \u2014 "),tD=a("a"),xCo=o("QDQBertModel"),$Co=o(" (QDQBert model)"),kCo=l(),tu=a("li"),sfe=a("strong"),SCo=o("reformer"),RCo=o(" \u2014 "),aD=a("a"),PCo=o("ReformerModel"),BCo=o(" (Reformer model)"),ICo=l(),au=a("li"),lfe=a("strong"),NCo=o("regnet"),qCo=o(" \u2014 "),nD=a("a"),jCo=o("RegNetModel"),DCo=o(" (RegNet model)"),GCo=l(),nu=a("li"),ife=a("strong"),OCo=o("rembert"),VCo=o(" \u2014 "),sD=a("a"),XCo=o("RemBertModel"),zCo=o(" (RemBERT model)"),QCo=l(),su=a("li"),dfe=a("strong"),WCo=o("resnet"),HCo=o(" \u2014 "),lD=a("a"),UCo=o("ResNetModel"),JCo=o(" (ResNet model)"),YCo=l(),lu=a("li"),cfe=a("strong"),KCo=o("retribert"),ZCo=o(" \u2014 "),iD=a("a"),e5o=o("RetriBertModel"),o5o=o(" (RetriBERT model)"),r5o=l(),iu=a("li"),ffe=a("strong"),t5o=o("roberta"),a5o=o(" \u2014 "),dD=a("a"),n5o=o("RobertaModel"),s5o=o(" (RoBERTa model)"),l5o=l(),du=a("li"),mfe=a("strong"),i5o=o("roformer"),d5o=o(" \u2014 "),cD=a("a"),c5o=o("RoFormerModel"),f5o=o(" (RoFormer model)"),m5o=l(),cu=a("li"),gfe=a("strong"),g5o=o("segformer"),h5o=o(" \u2014 "),fD=a("a"),p5o=o("SegformerModel"),_5o=o(" (SegFormer model)"),u5o=l(),fu=a("li"),hfe=a("strong"),b5o=o("sew"),v5o=o(" \u2014 "),mD=a("a"),F5o=o("SEWModel"),T5o=o(" (SEW model)"),M5o=l(),mu=a("li"),pfe=a("strong"),E5o=o("sew-d"),C5o=o(" \u2014 "),gD=a("a"),w5o=o("SEWDModel"),A5o=o(" (SEW-D model)"),L5o=l(),gu=a("li"),_fe=a("strong"),y5o=o("speech_to_text"),x5o=o(" \u2014 "),hD=a("a"),$5o=o("Speech2TextModel"),k5o=o(" (Speech2Text model)"),S5o=l(),hu=a("li"),ufe=a("strong"),R5o=o("splinter"),P5o=o(" \u2014 "),pD=a("a"),B5o=o("SplinterModel"),I5o=o(" (Splinter model)"),N5o=l(),pu=a("li"),bfe=a("strong"),q5o=o("squeezebert"),j5o=o(" \u2014 "),_D=a("a"),D5o=o("SqueezeBertModel"),G5o=o(" (SqueezeBERT model)"),O5o=l(),_u=a("li"),vfe=a("strong"),V5o=o("swin"),X5o=o(" \u2014 "),uD=a("a"),z5o=o("SwinModel"),Q5o=o(" (Swin Transformer model)"),W5o=l(),uu=a("li"),Ffe=a("strong"),H5o=o("t5"),U5o=o(" \u2014 "),bD=a("a"),J5o=o("T5Model"),Y5o=o(" (T5 model)"),K5o=l(),bu=a("li"),Tfe=a("strong"),Z5o=o("tapas"),e0o=o(" \u2014 "),vD=a("a"),o0o=o("TapasModel"),r0o=o(" (TAPAS model)"),t0o=l(),vu=a("li"),Mfe=a("strong"),a0o=o("trajectory_transformer"),n0o=o(" \u2014 "),FD=a("a"),s0o=o("TrajectoryTransformerModel"),l0o=o(" (Trajectory Transformer model)"),i0o=l(),Fu=a("li"),Efe=a("strong"),d0o=o("transfo-xl"),c0o=o(" \u2014 "),TD=a("a"),f0o=o("TransfoXLModel"),m0o=o(" (Transformer-XL model)"),g0o=l(),Tu=a("li"),Cfe=a("strong"),h0o=o("unispeech"),p0o=o(" \u2014 "),MD=a("a"),_0o=o("UniSpeechModel"),u0o=o(" (UniSpeech model)"),b0o=l(),Mu=a("li"),wfe=a("strong"),v0o=o("unispeech-sat"),F0o=o(" \u2014 "),ED=a("a"),T0o=o("UniSpeechSatModel"),M0o=o(" (UniSpeechSat model)"),E0o=l(),Eu=a("li"),Afe=a("strong"),C0o=o("van"),w0o=o(" \u2014 "),CD=a("a"),A0o=o("VanModel"),L0o=o(" (VAN model)"),y0o=l(),Cu=a("li"),Lfe=a("strong"),x0o=o("vilt"),$0o=o(" \u2014 "),wD=a("a"),k0o=o("ViltModel"),S0o=o(" (ViLT model)"),R0o=l(),wu=a("li"),yfe=a("strong"),P0o=o("vision-text-dual-encoder"),B0o=o(" \u2014 "),AD=a("a"),I0o=o("VisionTextDualEncoderModel"),N0o=o(" (VisionTextDualEncoder model)"),q0o=l(),Au=a("li"),xfe=a("strong"),j0o=o("visual_bert"),D0o=o(" \u2014 "),LD=a("a"),G0o=o("VisualBertModel"),O0o=o(" (VisualBERT model)"),V0o=l(),Lu=a("li"),$fe=a("strong"),X0o=o("vit"),z0o=o(" \u2014 "),yD=a("a"),Q0o=o("ViTModel"),W0o=o(" (ViT model)"),H0o=l(),yu=a("li"),kfe=a("strong"),U0o=o("vit_mae"),J0o=o(" \u2014 "),xD=a("a"),Y0o=o("ViTMAEModel"),K0o=o(" (ViTMAE model)"),Z0o=l(),xu=a("li"),Sfe=a("strong"),ewo=o("wav2vec2"),owo=o(" \u2014 "),$D=a("a"),rwo=o("Wav2Vec2Model"),two=o(" (Wav2Vec2 model)"),awo=l(),$u=a("li"),Rfe=a("strong"),nwo=o("wav2vec2-conformer"),swo=o(" \u2014 "),kD=a("a"),lwo=o("Wav2Vec2ConformerModel"),iwo=o(" (Wav2Vec2-Conformer model)"),dwo=l(),ku=a("li"),Pfe=a("strong"),cwo=o("wavlm"),fwo=o(" \u2014 "),SD=a("a"),mwo=o("WavLMModel"),gwo=o(" (WavLM model)"),hwo=l(),Su=a("li"),Bfe=a("strong"),pwo=o("xglm"),_wo=o(" \u2014 "),RD=a("a"),uwo=o("XGLMModel"),bwo=o(" (XGLM model)"),vwo=l(),Ru=a("li"),Ife=a("strong"),Fwo=o("xlm"),Two=o(" \u2014 "),PD=a("a"),Mwo=o("XLMModel"),Ewo=o(" (XLM model)"),Cwo=l(),Pu=a("li"),Nfe=a("strong"),wwo=o("xlm-prophetnet"),Awo=o(" \u2014 "),BD=a("a"),Lwo=o("XLMProphetNetModel"),ywo=o(" (XLM-ProphetNet model)"),xwo=l(),Bu=a("li"),qfe=a("strong"),$wo=o("xlm-roberta"),kwo=o(" \u2014 "),ID=a("a"),Swo=o("XLMRobertaModel"),Rwo=o(" (XLM-RoBERTa model)"),Pwo=l(),Iu=a("li"),jfe=a("strong"),Bwo=o("xlm-roberta-xl"),Iwo=o(" \u2014 "),ND=a("a"),Nwo=o("XLMRobertaXLModel"),qwo=o(" (XLM-RoBERTa-XL model)"),jwo=l(),Nu=a("li"),Dfe=a("strong"),Dwo=o("xlnet"),Gwo=o(" \u2014 "),qD=a("a"),Owo=o("XLNetModel"),Vwo=o(" (XLNet model)"),Xwo=l(),qu=a("li"),Gfe=a("strong"),zwo=o("yolos"),Qwo=o(" \u2014 "),jD=a("a"),Wwo=o("YolosModel"),Hwo=o(" (YOLOS model)"),Uwo=l(),ju=a("li"),Ofe=a("strong"),Jwo=o("yoso"),Ywo=o(" \u2014 "),DD=a("a"),Kwo=o("YosoModel"),Zwo=o(" (YOSO model)"),eAo=l(),Du=a("p"),oAo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),rAo=o("model.eval()"),tAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),aAo=o("model.train()"),nAo=l(),F(Gu.$$.fragment),xVe=l(),Oi=a("h2"),Ou=a("a"),zfe=a("span"),F(Ay.$$.fragment),sAo=l(),Qfe=a("span"),lAo=o("AutoModelForPreTraining"),$Ve=l(),$o=a("div"),F(Ly.$$.fragment),iAo=l(),Vi=a("p"),dAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GD=a("a"),cAo=o("from_pretrained()"),fAo=o(" class method or the "),OD=a("a"),mAo=o("from_config()"),gAo=o(` class
method.`),hAo=l(),yy=a("p"),pAo=o("This class cannot be instantiated directly using "),Wfe=a("code"),_Ao=o("__init__()"),uAo=o(" (throws an error)."),bAo=l(),lt=a("div"),F(xy.$$.fragment),vAo=l(),Hfe=a("p"),FAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TAo=l(),Xi=a("p"),MAo=o(`Note:
Loading a model from its configuration file does `),Ufe=a("strong"),EAo=o("not"),CAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),wAo=o("from_pretrained()"),AAo=o(" to load the model weights."),LAo=l(),F(Vu.$$.fragment),yAo=l(),Ye=a("div"),F($y.$$.fragment),xAo=l(),Jfe=a("p"),$Ao=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kAo=l(),Ba=a("p"),SAo=o("The model class to instantiate is selected based on the "),Yfe=a("code"),RAo=o("model_type"),PAo=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),BAo=o("pretrained_model_name_or_path"),IAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),NAo=o("pretrained_model_name_or_path"),qAo=o(":"),jAo=l(),G=a("ul"),Xu=a("li"),eme=a("strong"),DAo=o("albert"),GAo=o(" \u2014 "),XD=a("a"),OAo=o("AlbertForPreTraining"),VAo=o(" (ALBERT model)"),XAo=l(),zu=a("li"),ome=a("strong"),zAo=o("bart"),QAo=o(" \u2014 "),zD=a("a"),WAo=o("BartForConditionalGeneration"),HAo=o(" (BART model)"),UAo=l(),Qu=a("li"),rme=a("strong"),JAo=o("bert"),YAo=o(" \u2014 "),QD=a("a"),KAo=o("BertForPreTraining"),ZAo=o(" (BERT model)"),e6o=l(),Wu=a("li"),tme=a("strong"),o6o=o("big_bird"),r6o=o(" \u2014 "),WD=a("a"),t6o=o("BigBirdForPreTraining"),a6o=o(" (BigBird model)"),n6o=l(),Hu=a("li"),ame=a("strong"),s6o=o("bloom"),l6o=o(" \u2014 "),HD=a("a"),i6o=o("BloomForCausalLM"),d6o=o(" (BLOOM model)"),c6o=l(),Uu=a("li"),nme=a("strong"),f6o=o("camembert"),m6o=o(" \u2014 "),UD=a("a"),g6o=o("CamembertForMaskedLM"),h6o=o(" (CamemBERT model)"),p6o=l(),Ju=a("li"),sme=a("strong"),_6o=o("ctrl"),u6o=o(" \u2014 "),JD=a("a"),b6o=o("CTRLLMHeadModel"),v6o=o(" (CTRL model)"),F6o=l(),Yu=a("li"),lme=a("strong"),T6o=o("data2vec-text"),M6o=o(" \u2014 "),YD=a("a"),E6o=o("Data2VecTextForMaskedLM"),C6o=o(" (Data2VecText model)"),w6o=l(),Ku=a("li"),ime=a("strong"),A6o=o("deberta"),L6o=o(" \u2014 "),KD=a("a"),y6o=o("DebertaForMaskedLM"),x6o=o(" (DeBERTa model)"),$6o=l(),Zu=a("li"),dme=a("strong"),k6o=o("deberta-v2"),S6o=o(" \u2014 "),ZD=a("a"),R6o=o("DebertaV2ForMaskedLM"),P6o=o(" (DeBERTa-v2 model)"),B6o=l(),e1=a("li"),cme=a("strong"),I6o=o("distilbert"),N6o=o(" \u2014 "),eG=a("a"),q6o=o("DistilBertForMaskedLM"),j6o=o(" (DistilBERT model)"),D6o=l(),o1=a("li"),fme=a("strong"),G6o=o("electra"),O6o=o(" \u2014 "),oG=a("a"),V6o=o("ElectraForPreTraining"),X6o=o(" (ELECTRA model)"),z6o=l(),r1=a("li"),mme=a("strong"),Q6o=o("flaubert"),W6o=o(" \u2014 "),rG=a("a"),H6o=o("FlaubertWithLMHeadModel"),U6o=o(" (FlauBERT model)"),J6o=l(),t1=a("li"),gme=a("strong"),Y6o=o("flava"),K6o=o(" \u2014 "),tG=a("a"),Z6o=o("FlavaForPreTraining"),eLo=o(" (FLAVA model)"),oLo=l(),a1=a("li"),hme=a("strong"),rLo=o("fnet"),tLo=o(" \u2014 "),aG=a("a"),aLo=o("FNetForPreTraining"),nLo=o(" (FNet model)"),sLo=l(),n1=a("li"),pme=a("strong"),lLo=o("fsmt"),iLo=o(" \u2014 "),nG=a("a"),dLo=o("FSMTForConditionalGeneration"),cLo=o(" (FairSeq Machine-Translation model)"),fLo=l(),s1=a("li"),_me=a("strong"),mLo=o("funnel"),gLo=o(" \u2014 "),sG=a("a"),hLo=o("FunnelForPreTraining"),pLo=o(" (Funnel Transformer model)"),_Lo=l(),l1=a("li"),ume=a("strong"),uLo=o("gpt2"),bLo=o(" \u2014 "),lG=a("a"),vLo=o("GPT2LMHeadModel"),FLo=o(" (OpenAI GPT-2 model)"),TLo=l(),i1=a("li"),bme=a("strong"),MLo=o("ibert"),ELo=o(" \u2014 "),iG=a("a"),CLo=o("IBertForMaskedLM"),wLo=o(" (I-BERT model)"),ALo=l(),d1=a("li"),vme=a("strong"),LLo=o("layoutlm"),yLo=o(" \u2014 "),dG=a("a"),xLo=o("LayoutLMForMaskedLM"),$Lo=o(" (LayoutLM model)"),kLo=l(),c1=a("li"),Fme=a("strong"),SLo=o("longformer"),RLo=o(" \u2014 "),cG=a("a"),PLo=o("LongformerForMaskedLM"),BLo=o(" (Longformer model)"),ILo=l(),f1=a("li"),Tme=a("strong"),NLo=o("lxmert"),qLo=o(" \u2014 "),fG=a("a"),jLo=o("LxmertForPreTraining"),DLo=o(" (LXMERT model)"),GLo=l(),m1=a("li"),Mme=a("strong"),OLo=o("megatron-bert"),VLo=o(" \u2014 "),mG=a("a"),XLo=o("MegatronBertForPreTraining"),zLo=o(" (Megatron-BERT model)"),QLo=l(),g1=a("li"),Eme=a("strong"),WLo=o("mobilebert"),HLo=o(" \u2014 "),gG=a("a"),ULo=o("MobileBertForPreTraining"),JLo=o(" (MobileBERT model)"),YLo=l(),h1=a("li"),Cme=a("strong"),KLo=o("mpnet"),ZLo=o(" \u2014 "),hG=a("a"),eyo=o("MPNetForMaskedLM"),oyo=o(" (MPNet model)"),ryo=l(),p1=a("li"),wme=a("strong"),tyo=o("mvp"),ayo=o(" \u2014 "),pG=a("a"),nyo=o("MvpForConditionalGeneration"),syo=o(" (MVP model)"),lyo=l(),_1=a("li"),Ame=a("strong"),iyo=o("nezha"),dyo=o(" \u2014 "),_G=a("a"),cyo=o("NezhaForPreTraining"),fyo=o(" (Nezha model)"),myo=l(),u1=a("li"),Lme=a("strong"),gyo=o("openai-gpt"),hyo=o(" \u2014 "),uG=a("a"),pyo=o("OpenAIGPTLMHeadModel"),_yo=o(" (OpenAI GPT model)"),uyo=l(),b1=a("li"),yme=a("strong"),byo=o("retribert"),vyo=o(" \u2014 "),bG=a("a"),Fyo=o("RetriBertModel"),Tyo=o(" (RetriBERT model)"),Myo=l(),v1=a("li"),xme=a("strong"),Eyo=o("roberta"),Cyo=o(" \u2014 "),vG=a("a"),wyo=o("RobertaForMaskedLM"),Ayo=o(" (RoBERTa model)"),Lyo=l(),F1=a("li"),$me=a("strong"),yyo=o("splinter"),xyo=o(" \u2014 "),FG=a("a"),$yo=o("SplinterForPreTraining"),kyo=o(" (Splinter model)"),Syo=l(),T1=a("li"),kme=a("strong"),Ryo=o("squeezebert"),Pyo=o(" \u2014 "),TG=a("a"),Byo=o("SqueezeBertForMaskedLM"),Iyo=o(" (SqueezeBERT model)"),Nyo=l(),M1=a("li"),Sme=a("strong"),qyo=o("t5"),jyo=o(" \u2014 "),MG=a("a"),Dyo=o("T5ForConditionalGeneration"),Gyo=o(" (T5 model)"),Oyo=l(),E1=a("li"),Rme=a("strong"),Vyo=o("tapas"),Xyo=o(" \u2014 "),EG=a("a"),zyo=o("TapasForMaskedLM"),Qyo=o(" (TAPAS model)"),Wyo=l(),C1=a("li"),Pme=a("strong"),Hyo=o("transfo-xl"),Uyo=o(" \u2014 "),CG=a("a"),Jyo=o("TransfoXLLMHeadModel"),Yyo=o(" (Transformer-XL model)"),Kyo=l(),w1=a("li"),Bme=a("strong"),Zyo=o("unispeech"),e8o=o(" \u2014 "),wG=a("a"),o8o=o("UniSpeechForPreTraining"),r8o=o(" (UniSpeech model)"),t8o=l(),A1=a("li"),Ime=a("strong"),a8o=o("unispeech-sat"),n8o=o(" \u2014 "),AG=a("a"),s8o=o("UniSpeechSatForPreTraining"),l8o=o(" (UniSpeechSat model)"),i8o=l(),L1=a("li"),Nme=a("strong"),d8o=o("visual_bert"),c8o=o(" \u2014 "),LG=a("a"),f8o=o("VisualBertForPreTraining"),m8o=o(" (VisualBERT model)"),g8o=l(),y1=a("li"),qme=a("strong"),h8o=o("vit_mae"),p8o=o(" \u2014 "),yG=a("a"),_8o=o("ViTMAEForPreTraining"),u8o=o(" (ViTMAE model)"),b8o=l(),x1=a("li"),jme=a("strong"),v8o=o("wav2vec2"),F8o=o(" \u2014 "),xG=a("a"),T8o=o("Wav2Vec2ForPreTraining"),M8o=o(" (Wav2Vec2 model)"),E8o=l(),$1=a("li"),Dme=a("strong"),C8o=o("wav2vec2-conformer"),w8o=o(" \u2014 "),$G=a("a"),A8o=o("Wav2Vec2ConformerForPreTraining"),L8o=o(" (Wav2Vec2-Conformer model)"),y8o=l(),k1=a("li"),Gme=a("strong"),x8o=o("xlm"),$8o=o(" \u2014 "),kG=a("a"),k8o=o("XLMWithLMHeadModel"),S8o=o(" (XLM model)"),R8o=l(),S1=a("li"),Ome=a("strong"),P8o=o("xlm-roberta"),B8o=o(" \u2014 "),SG=a("a"),I8o=o("XLMRobertaForMaskedLM"),N8o=o(" (XLM-RoBERTa model)"),q8o=l(),R1=a("li"),Vme=a("strong"),j8o=o("xlm-roberta-xl"),D8o=o(" \u2014 "),RG=a("a"),G8o=o("XLMRobertaXLForMaskedLM"),O8o=o(" (XLM-RoBERTa-XL model)"),V8o=l(),P1=a("li"),Xme=a("strong"),X8o=o("xlnet"),z8o=o(" \u2014 "),PG=a("a"),Q8o=o("XLNetLMHeadModel"),W8o=o(" (XLNet model)"),H8o=l(),B1=a("p"),U8o=o("The model is set in evaluation mode by default using "),zme=a("code"),J8o=o("model.eval()"),Y8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=a("code"),K8o=o("model.train()"),Z8o=l(),F(I1.$$.fragment),kVe=l(),zi=a("h2"),N1=a("a"),Wme=a("span"),F(ky.$$.fragment),e9o=l(),Hme=a("span"),o9o=o("AutoModelForCausalLM"),SVe=l(),ko=a("div"),F(Sy.$$.fragment),r9o=l(),Qi=a("p"),t9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BG=a("a"),a9o=o("from_pretrained()"),n9o=o(" class method or the "),IG=a("a"),s9o=o("from_config()"),l9o=o(` class
method.`),i9o=l(),Ry=a("p"),d9o=o("This class cannot be instantiated directly using "),Ume=a("code"),c9o=o("__init__()"),f9o=o(" (throws an error)."),m9o=l(),it=a("div"),F(Py.$$.fragment),g9o=l(),Jme=a("p"),h9o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p9o=l(),Wi=a("p"),_9o=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),u9o=o("not"),b9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),v9o=o("from_pretrained()"),F9o=o(" to load the model weights."),T9o=l(),F(q1.$$.fragment),M9o=l(),Ke=a("div"),F(By.$$.fragment),E9o=l(),Kme=a("p"),C9o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w9o=l(),Ia=a("p"),A9o=o("The model class to instantiate is selected based on the "),Zme=a("code"),L9o=o("model_type"),y9o=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),x9o=o("pretrained_model_name_or_path"),$9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),k9o=o("pretrained_model_name_or_path"),S9o=o(":"),R9o=l(),z=a("ul"),j1=a("li"),rge=a("strong"),P9o=o("bart"),B9o=o(" \u2014 "),qG=a("a"),I9o=o("BartForCausalLM"),N9o=o(" (BART model)"),q9o=l(),D1=a("li"),tge=a("strong"),j9o=o("bert"),D9o=o(" \u2014 "),jG=a("a"),G9o=o("BertLMHeadModel"),O9o=o(" (BERT model)"),V9o=l(),G1=a("li"),age=a("strong"),X9o=o("bert-generation"),z9o=o(" \u2014 "),DG=a("a"),Q9o=o("BertGenerationDecoder"),W9o=o(" (Bert Generation model)"),H9o=l(),O1=a("li"),nge=a("strong"),U9o=o("big_bird"),J9o=o(" \u2014 "),GG=a("a"),Y9o=o("BigBirdForCausalLM"),K9o=o(" (BigBird model)"),Z9o=l(),V1=a("li"),sge=a("strong"),exo=o("bigbird_pegasus"),oxo=o(" \u2014 "),OG=a("a"),rxo=o("BigBirdPegasusForCausalLM"),txo=o(" (BigBird-Pegasus model)"),axo=l(),X1=a("li"),lge=a("strong"),nxo=o("blenderbot"),sxo=o(" \u2014 "),VG=a("a"),lxo=o("BlenderbotForCausalLM"),ixo=o(" (Blenderbot model)"),dxo=l(),z1=a("li"),ige=a("strong"),cxo=o("blenderbot-small"),fxo=o(" \u2014 "),XG=a("a"),mxo=o("BlenderbotSmallForCausalLM"),gxo=o(" (BlenderbotSmall model)"),hxo=l(),Q1=a("li"),dge=a("strong"),pxo=o("bloom"),_xo=o(" \u2014 "),zG=a("a"),uxo=o("BloomForCausalLM"),bxo=o(" (BLOOM model)"),vxo=l(),W1=a("li"),cge=a("strong"),Fxo=o("camembert"),Txo=o(" \u2014 "),QG=a("a"),Mxo=o("CamembertForCausalLM"),Exo=o(" (CamemBERT model)"),Cxo=l(),H1=a("li"),fge=a("strong"),wxo=o("codegen"),Axo=o(" \u2014 "),WG=a("a"),Lxo=o("CodeGenForCausalLM"),yxo=o(" (CodeGen model)"),xxo=l(),U1=a("li"),mge=a("strong"),$xo=o("ctrl"),kxo=o(" \u2014 "),HG=a("a"),Sxo=o("CTRLLMHeadModel"),Rxo=o(" (CTRL model)"),Pxo=l(),J1=a("li"),gge=a("strong"),Bxo=o("data2vec-text"),Ixo=o(" \u2014 "),UG=a("a"),Nxo=o("Data2VecTextForCausalLM"),qxo=o(" (Data2VecText model)"),jxo=l(),Y1=a("li"),hge=a("strong"),Dxo=o("electra"),Gxo=o(" \u2014 "),JG=a("a"),Oxo=o("ElectraForCausalLM"),Vxo=o(" (ELECTRA model)"),Xxo=l(),K1=a("li"),pge=a("strong"),zxo=o("gpt2"),Qxo=o(" \u2014 "),YG=a("a"),Wxo=o("GPT2LMHeadModel"),Hxo=o(" (OpenAI GPT-2 model)"),Uxo=l(),Z1=a("li"),_ge=a("strong"),Jxo=o("gpt_neo"),Yxo=o(" \u2014 "),KG=a("a"),Kxo=o("GPTNeoForCausalLM"),Zxo=o(" (GPT Neo model)"),e$o=l(),e7=a("li"),uge=a("strong"),o$o=o("gpt_neox"),r$o=o(" \u2014 "),ZG=a("a"),t$o=o("GPTNeoXForCausalLM"),a$o=o(" (GPT NeoX model)"),n$o=l(),o7=a("li"),bge=a("strong"),s$o=o("gptj"),l$o=o(" \u2014 "),eO=a("a"),i$o=o("GPTJForCausalLM"),d$o=o(" (GPT-J model)"),c$o=l(),r7=a("li"),vge=a("strong"),f$o=o("marian"),m$o=o(" \u2014 "),oO=a("a"),g$o=o("MarianForCausalLM"),h$o=o(" (Marian model)"),p$o=l(),t7=a("li"),Fge=a("strong"),_$o=o("mbart"),u$o=o(" \u2014 "),rO=a("a"),b$o=o("MBartForCausalLM"),v$o=o(" (mBART model)"),F$o=l(),a7=a("li"),Tge=a("strong"),T$o=o("megatron-bert"),M$o=o(" \u2014 "),tO=a("a"),E$o=o("MegatronBertForCausalLM"),C$o=o(" (Megatron-BERT model)"),w$o=l(),n7=a("li"),Mge=a("strong"),A$o=o("mvp"),L$o=o(" \u2014 "),aO=a("a"),y$o=o("MvpForCausalLM"),x$o=o(" (MVP model)"),$$o=l(),s7=a("li"),Ege=a("strong"),k$o=o("openai-gpt"),S$o=o(" \u2014 "),nO=a("a"),R$o=o("OpenAIGPTLMHeadModel"),P$o=o(" (OpenAI GPT model)"),B$o=l(),l7=a("li"),Cge=a("strong"),I$o=o("opt"),N$o=o(" \u2014 "),sO=a("a"),q$o=o("OPTForCausalLM"),j$o=o(" (OPT model)"),D$o=l(),i7=a("li"),wge=a("strong"),G$o=o("pegasus"),O$o=o(" \u2014 "),lO=a("a"),V$o=o("PegasusForCausalLM"),X$o=o(" (Pegasus model)"),z$o=l(),d7=a("li"),Age=a("strong"),Q$o=o("plbart"),W$o=o(" \u2014 "),iO=a("a"),H$o=o("PLBartForCausalLM"),U$o=o(" (PLBart model)"),J$o=l(),c7=a("li"),Lge=a("strong"),Y$o=o("prophetnet"),K$o=o(" \u2014 "),dO=a("a"),Z$o=o("ProphetNetForCausalLM"),eko=o(" (ProphetNet model)"),oko=l(),f7=a("li"),yge=a("strong"),rko=o("qdqbert"),tko=o(" \u2014 "),cO=a("a"),ako=o("QDQBertLMHeadModel"),nko=o(" (QDQBert model)"),sko=l(),m7=a("li"),xge=a("strong"),lko=o("reformer"),iko=o(" \u2014 "),fO=a("a"),dko=o("ReformerModelWithLMHead"),cko=o(" (Reformer model)"),fko=l(),g7=a("li"),$ge=a("strong"),mko=o("rembert"),gko=o(" \u2014 "),mO=a("a"),hko=o("RemBertForCausalLM"),pko=o(" (RemBERT model)"),_ko=l(),h7=a("li"),kge=a("strong"),uko=o("roberta"),bko=o(" \u2014 "),gO=a("a"),vko=o("RobertaForCausalLM"),Fko=o(" (RoBERTa model)"),Tko=l(),p7=a("li"),Sge=a("strong"),Mko=o("roformer"),Eko=o(" \u2014 "),hO=a("a"),Cko=o("RoFormerForCausalLM"),wko=o(" (RoFormer model)"),Ako=l(),_7=a("li"),Rge=a("strong"),Lko=o("speech_to_text_2"),yko=o(" \u2014 "),pO=a("a"),xko=o("Speech2Text2ForCausalLM"),$ko=o(" (Speech2Text2 model)"),kko=l(),u7=a("li"),Pge=a("strong"),Sko=o("transfo-xl"),Rko=o(" \u2014 "),_O=a("a"),Pko=o("TransfoXLLMHeadModel"),Bko=o(" (Transformer-XL model)"),Iko=l(),b7=a("li"),Bge=a("strong"),Nko=o("trocr"),qko=o(" \u2014 "),uO=a("a"),jko=o("TrOCRForCausalLM"),Dko=o(" (TrOCR model)"),Gko=l(),v7=a("li"),Ige=a("strong"),Oko=o("xglm"),Vko=o(" \u2014 "),bO=a("a"),Xko=o("XGLMForCausalLM"),zko=o(" (XGLM model)"),Qko=l(),F7=a("li"),Nge=a("strong"),Wko=o("xlm"),Hko=o(" \u2014 "),vO=a("a"),Uko=o("XLMWithLMHeadModel"),Jko=o(" (XLM model)"),Yko=l(),T7=a("li"),qge=a("strong"),Kko=o("xlm-prophetnet"),Zko=o(" \u2014 "),FO=a("a"),eSo=o("XLMProphetNetForCausalLM"),oSo=o(" (XLM-ProphetNet model)"),rSo=l(),M7=a("li"),jge=a("strong"),tSo=o("xlm-roberta"),aSo=o(" \u2014 "),TO=a("a"),nSo=o("XLMRobertaForCausalLM"),sSo=o(" (XLM-RoBERTa model)"),lSo=l(),E7=a("li"),Dge=a("strong"),iSo=o("xlm-roberta-xl"),dSo=o(" \u2014 "),MO=a("a"),cSo=o("XLMRobertaXLForCausalLM"),fSo=o(" (XLM-RoBERTa-XL model)"),mSo=l(),C7=a("li"),Gge=a("strong"),gSo=o("xlnet"),hSo=o(" \u2014 "),EO=a("a"),pSo=o("XLNetLMHeadModel"),_So=o(" (XLNet model)"),uSo=l(),w7=a("p"),bSo=o("The model is set in evaluation mode by default using "),Oge=a("code"),vSo=o("model.eval()"),FSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),TSo=o("model.train()"),MSo=l(),F(A7.$$.fragment),RVe=l(),Hi=a("h2"),L7=a("a"),Xge=a("span"),F(Iy.$$.fragment),ESo=l(),zge=a("span"),CSo=o("AutoModelForMaskedLM"),PVe=l(),So=a("div"),F(Ny.$$.fragment),wSo=l(),Ui=a("p"),ASo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CO=a("a"),LSo=o("from_pretrained()"),ySo=o(" class method or the "),wO=a("a"),xSo=o("from_config()"),$So=o(` class
method.`),kSo=l(),qy=a("p"),SSo=o("This class cannot be instantiated directly using "),Qge=a("code"),RSo=o("__init__()"),PSo=o(" (throws an error)."),BSo=l(),dt=a("div"),F(jy.$$.fragment),ISo=l(),Wge=a("p"),NSo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qSo=l(),Ji=a("p"),jSo=o(`Note:
Loading a model from its configuration file does `),Hge=a("strong"),DSo=o("not"),GSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),OSo=o("from_pretrained()"),VSo=o(" to load the model weights."),XSo=l(),F(y7.$$.fragment),zSo=l(),Ze=a("div"),F(Dy.$$.fragment),QSo=l(),Uge=a("p"),WSo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSo=l(),Na=a("p"),USo=o("The model class to instantiate is selected based on the "),Jge=a("code"),JSo=o("model_type"),YSo=o(` property of the config object (either
passed as an argument or loaded from `),Yge=a("code"),KSo=o("pretrained_model_name_or_path"),ZSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(":"),rRo=l(),W=a("ul"),x7=a("li"),Zge=a("strong"),tRo=o("albert"),aRo=o(" \u2014 "),LO=a("a"),nRo=o("AlbertForMaskedLM"),sRo=o(" (ALBERT model)"),lRo=l(),$7=a("li"),ehe=a("strong"),iRo=o("bart"),dRo=o(" \u2014 "),yO=a("a"),cRo=o("BartForConditionalGeneration"),fRo=o(" (BART model)"),mRo=l(),k7=a("li"),ohe=a("strong"),gRo=o("bert"),hRo=o(" \u2014 "),xO=a("a"),pRo=o("BertForMaskedLM"),_Ro=o(" (BERT model)"),uRo=l(),S7=a("li"),rhe=a("strong"),bRo=o("big_bird"),vRo=o(" \u2014 "),$O=a("a"),FRo=o("BigBirdForMaskedLM"),TRo=o(" (BigBird model)"),MRo=l(),R7=a("li"),the=a("strong"),ERo=o("camembert"),CRo=o(" \u2014 "),kO=a("a"),wRo=o("CamembertForMaskedLM"),ARo=o(" (CamemBERT model)"),LRo=l(),P7=a("li"),ahe=a("strong"),yRo=o("convbert"),xRo=o(" \u2014 "),SO=a("a"),$Ro=o("ConvBertForMaskedLM"),kRo=o(" (ConvBERT model)"),SRo=l(),B7=a("li"),nhe=a("strong"),RRo=o("data2vec-text"),PRo=o(" \u2014 "),RO=a("a"),BRo=o("Data2VecTextForMaskedLM"),IRo=o(" (Data2VecText model)"),NRo=l(),I7=a("li"),she=a("strong"),qRo=o("deberta"),jRo=o(" \u2014 "),PO=a("a"),DRo=o("DebertaForMaskedLM"),GRo=o(" (DeBERTa model)"),ORo=l(),N7=a("li"),lhe=a("strong"),VRo=o("deberta-v2"),XRo=o(" \u2014 "),BO=a("a"),zRo=o("DebertaV2ForMaskedLM"),QRo=o(" (DeBERTa-v2 model)"),WRo=l(),q7=a("li"),ihe=a("strong"),HRo=o("distilbert"),URo=o(" \u2014 "),IO=a("a"),JRo=o("DistilBertForMaskedLM"),YRo=o(" (DistilBERT model)"),KRo=l(),j7=a("li"),dhe=a("strong"),ZRo=o("electra"),ePo=o(" \u2014 "),NO=a("a"),oPo=o("ElectraForMaskedLM"),rPo=o(" (ELECTRA model)"),tPo=l(),D7=a("li"),che=a("strong"),aPo=o("flaubert"),nPo=o(" \u2014 "),qO=a("a"),sPo=o("FlaubertWithLMHeadModel"),lPo=o(" (FlauBERT model)"),iPo=l(),G7=a("li"),fhe=a("strong"),dPo=o("fnet"),cPo=o(" \u2014 "),jO=a("a"),fPo=o("FNetForMaskedLM"),mPo=o(" (FNet model)"),gPo=l(),O7=a("li"),mhe=a("strong"),hPo=o("funnel"),pPo=o(" \u2014 "),DO=a("a"),_Po=o("FunnelForMaskedLM"),uPo=o(" (Funnel Transformer model)"),bPo=l(),V7=a("li"),ghe=a("strong"),vPo=o("ibert"),FPo=o(" \u2014 "),GO=a("a"),TPo=o("IBertForMaskedLM"),MPo=o(" (I-BERT model)"),EPo=l(),X7=a("li"),hhe=a("strong"),CPo=o("layoutlm"),wPo=o(" \u2014 "),OO=a("a"),APo=o("LayoutLMForMaskedLM"),LPo=o(" (LayoutLM model)"),yPo=l(),z7=a("li"),phe=a("strong"),xPo=o("longformer"),$Po=o(" \u2014 "),VO=a("a"),kPo=o("LongformerForMaskedLM"),SPo=o(" (Longformer model)"),RPo=l(),Q7=a("li"),_he=a("strong"),PPo=o("luke"),BPo=o(" \u2014 "),XO=a("a"),IPo=o("LukeForMaskedLM"),NPo=o(" (LUKE model)"),qPo=l(),W7=a("li"),uhe=a("strong"),jPo=o("mbart"),DPo=o(" \u2014 "),zO=a("a"),GPo=o("MBartForConditionalGeneration"),OPo=o(" (mBART model)"),VPo=l(),H7=a("li"),bhe=a("strong"),XPo=o("megatron-bert"),zPo=o(" \u2014 "),QO=a("a"),QPo=o("MegatronBertForMaskedLM"),WPo=o(" (Megatron-BERT model)"),HPo=l(),U7=a("li"),vhe=a("strong"),UPo=o("mobilebert"),JPo=o(" \u2014 "),WO=a("a"),YPo=o("MobileBertForMaskedLM"),KPo=o(" (MobileBERT model)"),ZPo=l(),J7=a("li"),Fhe=a("strong"),eBo=o("mpnet"),oBo=o(" \u2014 "),HO=a("a"),rBo=o("MPNetForMaskedLM"),tBo=o(" (MPNet model)"),aBo=l(),Y7=a("li"),The=a("strong"),nBo=o("mvp"),sBo=o(" \u2014 "),UO=a("a"),lBo=o("MvpForConditionalGeneration"),iBo=o(" (MVP model)"),dBo=l(),K7=a("li"),Mhe=a("strong"),cBo=o("nezha"),fBo=o(" \u2014 "),JO=a("a"),mBo=o("NezhaForMaskedLM"),gBo=o(" (Nezha model)"),hBo=l(),Z7=a("li"),Ehe=a("strong"),pBo=o("nystromformer"),_Bo=o(" \u2014 "),YO=a("a"),uBo=o("NystromformerForMaskedLM"),bBo=o(" (Nystr\xF6mformer model)"),vBo=l(),e4=a("li"),Che=a("strong"),FBo=o("perceiver"),TBo=o(" \u2014 "),KO=a("a"),MBo=o("PerceiverForMaskedLM"),EBo=o(" (Perceiver model)"),CBo=l(),o4=a("li"),whe=a("strong"),wBo=o("qdqbert"),ABo=o(" \u2014 "),ZO=a("a"),LBo=o("QDQBertForMaskedLM"),yBo=o(" (QDQBert model)"),xBo=l(),r4=a("li"),Ahe=a("strong"),$Bo=o("reformer"),kBo=o(" \u2014 "),eV=a("a"),SBo=o("ReformerForMaskedLM"),RBo=o(" (Reformer model)"),PBo=l(),t4=a("li"),Lhe=a("strong"),BBo=o("rembert"),IBo=o(" \u2014 "),oV=a("a"),NBo=o("RemBertForMaskedLM"),qBo=o(" (RemBERT model)"),jBo=l(),a4=a("li"),yhe=a("strong"),DBo=o("roberta"),GBo=o(" \u2014 "),rV=a("a"),OBo=o("RobertaForMaskedLM"),VBo=o(" (RoBERTa model)"),XBo=l(),n4=a("li"),xhe=a("strong"),zBo=o("roformer"),QBo=o(" \u2014 "),tV=a("a"),WBo=o("RoFormerForMaskedLM"),HBo=o(" (RoFormer model)"),UBo=l(),s4=a("li"),$he=a("strong"),JBo=o("squeezebert"),YBo=o(" \u2014 "),aV=a("a"),KBo=o("SqueezeBertForMaskedLM"),ZBo=o(" (SqueezeBERT model)"),eIo=l(),l4=a("li"),khe=a("strong"),oIo=o("tapas"),rIo=o(" \u2014 "),nV=a("a"),tIo=o("TapasForMaskedLM"),aIo=o(" (TAPAS model)"),nIo=l(),i4=a("li"),She=a("strong"),sIo=o("wav2vec2"),lIo=o(" \u2014 "),Rhe=a("code"),iIo=o("Wav2Vec2ForMaskedLM"),dIo=o(" (Wav2Vec2 model)"),cIo=l(),d4=a("li"),Phe=a("strong"),fIo=o("xlm"),mIo=o(" \u2014 "),sV=a("a"),gIo=o("XLMWithLMHeadModel"),hIo=o(" (XLM model)"),pIo=l(),c4=a("li"),Bhe=a("strong"),_Io=o("xlm-roberta"),uIo=o(" \u2014 "),lV=a("a"),bIo=o("XLMRobertaForMaskedLM"),vIo=o(" (XLM-RoBERTa model)"),FIo=l(),f4=a("li"),Ihe=a("strong"),TIo=o("xlm-roberta-xl"),MIo=o(" \u2014 "),iV=a("a"),EIo=o("XLMRobertaXLForMaskedLM"),CIo=o(" (XLM-RoBERTa-XL model)"),wIo=l(),m4=a("li"),Nhe=a("strong"),AIo=o("yoso"),LIo=o(" \u2014 "),dV=a("a"),yIo=o("YosoForMaskedLM"),xIo=o(" (YOSO model)"),$Io=l(),g4=a("p"),kIo=o("The model is set in evaluation mode by default using "),qhe=a("code"),SIo=o("model.eval()"),RIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),PIo=o("model.train()"),BIo=l(),F(h4.$$.fragment),BVe=l(),Yi=a("h2"),p4=a("a"),Dhe=a("span"),F(Gy.$$.fragment),IIo=l(),Ghe=a("span"),NIo=o("AutoModelForSeq2SeqLM"),IVe=l(),Ro=a("div"),F(Oy.$$.fragment),qIo=l(),Ki=a("p"),jIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cV=a("a"),DIo=o("from_pretrained()"),GIo=o(" class method or the "),fV=a("a"),OIo=o("from_config()"),VIo=o(` class
method.`),XIo=l(),Vy=a("p"),zIo=o("This class cannot be instantiated directly using "),Ohe=a("code"),QIo=o("__init__()"),WIo=o(" (throws an error)."),HIo=l(),ct=a("div"),F(Xy.$$.fragment),UIo=l(),Vhe=a("p"),JIo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YIo=l(),Zi=a("p"),KIo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),ZIo=o("not"),eNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),oNo=o("from_pretrained()"),rNo=o(" to load the model weights."),tNo=l(),F(_4.$$.fragment),aNo=l(),eo=a("div"),F(zy.$$.fragment),nNo=l(),zhe=a("p"),sNo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lNo=l(),qa=a("p"),iNo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),dNo=o("model_type"),cNo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),gNo=o("pretrained_model_name_or_path"),hNo=o(":"),pNo=l(),pe=a("ul"),u4=a("li"),Uhe=a("strong"),_No=o("bart"),uNo=o(" \u2014 "),gV=a("a"),bNo=o("BartForConditionalGeneration"),vNo=o(" (BART model)"),FNo=l(),b4=a("li"),Jhe=a("strong"),TNo=o("bigbird_pegasus"),MNo=o(" \u2014 "),hV=a("a"),ENo=o("BigBirdPegasusForConditionalGeneration"),CNo=o(" (BigBird-Pegasus model)"),wNo=l(),v4=a("li"),Yhe=a("strong"),ANo=o("blenderbot"),LNo=o(" \u2014 "),pV=a("a"),yNo=o("BlenderbotForConditionalGeneration"),xNo=o(" (Blenderbot model)"),$No=l(),F4=a("li"),Khe=a("strong"),kNo=o("blenderbot-small"),SNo=o(" \u2014 "),_V=a("a"),RNo=o("BlenderbotSmallForConditionalGeneration"),PNo=o(" (BlenderbotSmall model)"),BNo=l(),T4=a("li"),Zhe=a("strong"),INo=o("encoder-decoder"),NNo=o(" \u2014 "),uV=a("a"),qNo=o("EncoderDecoderModel"),jNo=o(" (Encoder decoder model)"),DNo=l(),M4=a("li"),epe=a("strong"),GNo=o("fsmt"),ONo=o(" \u2014 "),bV=a("a"),VNo=o("FSMTForConditionalGeneration"),XNo=o(" (FairSeq Machine-Translation model)"),zNo=l(),E4=a("li"),ope=a("strong"),QNo=o("led"),WNo=o(" \u2014 "),vV=a("a"),HNo=o("LEDForConditionalGeneration"),UNo=o(" (LED model)"),JNo=l(),C4=a("li"),rpe=a("strong"),YNo=o("longt5"),KNo=o(" \u2014 "),FV=a("a"),ZNo=o("LongT5ForConditionalGeneration"),eqo=o(" (LongT5 model)"),oqo=l(),w4=a("li"),tpe=a("strong"),rqo=o("m2m_100"),tqo=o(" \u2014 "),TV=a("a"),aqo=o("M2M100ForConditionalGeneration"),nqo=o(" (M2M100 model)"),sqo=l(),A4=a("li"),ape=a("strong"),lqo=o("marian"),iqo=o(" \u2014 "),MV=a("a"),dqo=o("MarianMTModel"),cqo=o(" (Marian model)"),fqo=l(),L4=a("li"),npe=a("strong"),mqo=o("mbart"),gqo=o(" \u2014 "),EV=a("a"),hqo=o("MBartForConditionalGeneration"),pqo=o(" (mBART model)"),_qo=l(),y4=a("li"),spe=a("strong"),uqo=o("mt5"),bqo=o(" \u2014 "),CV=a("a"),vqo=o("MT5ForConditionalGeneration"),Fqo=o(" (MT5 model)"),Tqo=l(),x4=a("li"),lpe=a("strong"),Mqo=o("mvp"),Eqo=o(" \u2014 "),wV=a("a"),Cqo=o("MvpForConditionalGeneration"),wqo=o(" (MVP model)"),Aqo=l(),$4=a("li"),ipe=a("strong"),Lqo=o("pegasus"),yqo=o(" \u2014 "),AV=a("a"),xqo=o("PegasusForConditionalGeneration"),$qo=o(" (Pegasus model)"),kqo=l(),k4=a("li"),dpe=a("strong"),Sqo=o("plbart"),Rqo=o(" \u2014 "),LV=a("a"),Pqo=o("PLBartForConditionalGeneration"),Bqo=o(" (PLBart model)"),Iqo=l(),S4=a("li"),cpe=a("strong"),Nqo=o("prophetnet"),qqo=o(" \u2014 "),yV=a("a"),jqo=o("ProphetNetForConditionalGeneration"),Dqo=o(" (ProphetNet model)"),Gqo=l(),R4=a("li"),fpe=a("strong"),Oqo=o("t5"),Vqo=o(" \u2014 "),xV=a("a"),Xqo=o("T5ForConditionalGeneration"),zqo=o(" (T5 model)"),Qqo=l(),P4=a("li"),mpe=a("strong"),Wqo=o("xlm-prophetnet"),Hqo=o(" \u2014 "),$V=a("a"),Uqo=o("XLMProphetNetForConditionalGeneration"),Jqo=o(" (XLM-ProphetNet model)"),Yqo=l(),B4=a("p"),Kqo=o("The model is set in evaluation mode by default using "),gpe=a("code"),Zqo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),ojo=o("model.train()"),rjo=l(),F(I4.$$.fragment),NVe=l(),ed=a("h2"),N4=a("a"),ppe=a("span"),F(Qy.$$.fragment),tjo=l(),_pe=a("span"),ajo=o("AutoModelForSequenceClassification"),qVe=l(),Po=a("div"),F(Wy.$$.fragment),njo=l(),od=a("p"),sjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kV=a("a"),ljo=o("from_pretrained()"),ijo=o(" class method or the "),SV=a("a"),djo=o("from_config()"),cjo=o(` class
method.`),fjo=l(),Hy=a("p"),mjo=o("This class cannot be instantiated directly using "),upe=a("code"),gjo=o("__init__()"),hjo=o(" (throws an error)."),pjo=l(),ft=a("div"),F(Uy.$$.fragment),_jo=l(),bpe=a("p"),ujo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bjo=l(),rd=a("p"),vjo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),Fjo=o("not"),Tjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),Mjo=o("from_pretrained()"),Ejo=o(" to load the model weights."),Cjo=l(),F(q4.$$.fragment),wjo=l(),oo=a("div"),F(Jy.$$.fragment),Ajo=l(),Fpe=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yjo=l(),ja=a("p"),xjo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),$jo=o("model_type"),kjo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),Sjo=o("pretrained_model_name_or_path"),Rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),Pjo=o("pretrained_model_name_or_path"),Bjo=o(":"),Ijo=l(),N=a("ul"),j4=a("li"),Cpe=a("strong"),Njo=o("albert"),qjo=o(" \u2014 "),PV=a("a"),jjo=o("AlbertForSequenceClassification"),Djo=o(" (ALBERT model)"),Gjo=l(),D4=a("li"),wpe=a("strong"),Ojo=o("bart"),Vjo=o(" \u2014 "),BV=a("a"),Xjo=o("BartForSequenceClassification"),zjo=o(" (BART model)"),Qjo=l(),G4=a("li"),Ape=a("strong"),Wjo=o("bert"),Hjo=o(" \u2014 "),IV=a("a"),Ujo=o("BertForSequenceClassification"),Jjo=o(" (BERT model)"),Yjo=l(),O4=a("li"),Lpe=a("strong"),Kjo=o("big_bird"),Zjo=o(" \u2014 "),NV=a("a"),eDo=o("BigBirdForSequenceClassification"),oDo=o(" (BigBird model)"),rDo=l(),V4=a("li"),ype=a("strong"),tDo=o("bigbird_pegasus"),aDo=o(" \u2014 "),qV=a("a"),nDo=o("BigBirdPegasusForSequenceClassification"),sDo=o(" (BigBird-Pegasus model)"),lDo=l(),X4=a("li"),xpe=a("strong"),iDo=o("bloom"),dDo=o(" \u2014 "),jV=a("a"),cDo=o("BloomForSequenceClassification"),fDo=o(" (BLOOM model)"),mDo=l(),z4=a("li"),$pe=a("strong"),gDo=o("camembert"),hDo=o(" \u2014 "),DV=a("a"),pDo=o("CamembertForSequenceClassification"),_Do=o(" (CamemBERT model)"),uDo=l(),Q4=a("li"),kpe=a("strong"),bDo=o("canine"),vDo=o(" \u2014 "),GV=a("a"),FDo=o("CanineForSequenceClassification"),TDo=o(" (CANINE model)"),MDo=l(),W4=a("li"),Spe=a("strong"),EDo=o("convbert"),CDo=o(" \u2014 "),OV=a("a"),wDo=o("ConvBertForSequenceClassification"),ADo=o(" (ConvBERT model)"),LDo=l(),H4=a("li"),Rpe=a("strong"),yDo=o("ctrl"),xDo=o(" \u2014 "),VV=a("a"),$Do=o("CTRLForSequenceClassification"),kDo=o(" (CTRL model)"),SDo=l(),U4=a("li"),Ppe=a("strong"),RDo=o("data2vec-text"),PDo=o(" \u2014 "),XV=a("a"),BDo=o("Data2VecTextForSequenceClassification"),IDo=o(" (Data2VecText model)"),NDo=l(),J4=a("li"),Bpe=a("strong"),qDo=o("deberta"),jDo=o(" \u2014 "),zV=a("a"),DDo=o("DebertaForSequenceClassification"),GDo=o(" (DeBERTa model)"),ODo=l(),Y4=a("li"),Ipe=a("strong"),VDo=o("deberta-v2"),XDo=o(" \u2014 "),QV=a("a"),zDo=o("DebertaV2ForSequenceClassification"),QDo=o(" (DeBERTa-v2 model)"),WDo=l(),K4=a("li"),Npe=a("strong"),HDo=o("distilbert"),UDo=o(" \u2014 "),WV=a("a"),JDo=o("DistilBertForSequenceClassification"),YDo=o(" (DistilBERT model)"),KDo=l(),Z4=a("li"),qpe=a("strong"),ZDo=o("electra"),eGo=o(" \u2014 "),HV=a("a"),oGo=o("ElectraForSequenceClassification"),rGo=o(" (ELECTRA model)"),tGo=l(),e2=a("li"),jpe=a("strong"),aGo=o("flaubert"),nGo=o(" \u2014 "),UV=a("a"),sGo=o("FlaubertForSequenceClassification"),lGo=o(" (FlauBERT model)"),iGo=l(),o2=a("li"),Dpe=a("strong"),dGo=o("fnet"),cGo=o(" \u2014 "),JV=a("a"),fGo=o("FNetForSequenceClassification"),mGo=o(" (FNet model)"),gGo=l(),r2=a("li"),Gpe=a("strong"),hGo=o("funnel"),pGo=o(" \u2014 "),YV=a("a"),_Go=o("FunnelForSequenceClassification"),uGo=o(" (Funnel Transformer model)"),bGo=l(),t2=a("li"),Ope=a("strong"),vGo=o("gpt2"),FGo=o(" \u2014 "),KV=a("a"),TGo=o("GPT2ForSequenceClassification"),MGo=o(" (OpenAI GPT-2 model)"),EGo=l(),a2=a("li"),Vpe=a("strong"),CGo=o("gpt_neo"),wGo=o(" \u2014 "),ZV=a("a"),AGo=o("GPTNeoForSequenceClassification"),LGo=o(" (GPT Neo model)"),yGo=l(),n2=a("li"),Xpe=a("strong"),xGo=o("gptj"),$Go=o(" \u2014 "),eX=a("a"),kGo=o("GPTJForSequenceClassification"),SGo=o(" (GPT-J model)"),RGo=l(),s2=a("li"),zpe=a("strong"),PGo=o("ibert"),BGo=o(" \u2014 "),oX=a("a"),IGo=o("IBertForSequenceClassification"),NGo=o(" (I-BERT model)"),qGo=l(),l2=a("li"),Qpe=a("strong"),jGo=o("layoutlm"),DGo=o(" \u2014 "),rX=a("a"),GGo=o("LayoutLMForSequenceClassification"),OGo=o(" (LayoutLM model)"),VGo=l(),i2=a("li"),Wpe=a("strong"),XGo=o("layoutlmv2"),zGo=o(" \u2014 "),tX=a("a"),QGo=o("LayoutLMv2ForSequenceClassification"),WGo=o(" (LayoutLMv2 model)"),HGo=l(),d2=a("li"),Hpe=a("strong"),UGo=o("layoutlmv3"),JGo=o(" \u2014 "),aX=a("a"),YGo=o("LayoutLMv3ForSequenceClassification"),KGo=o(" (LayoutLMv3 model)"),ZGo=l(),c2=a("li"),Upe=a("strong"),eOo=o("led"),oOo=o(" \u2014 "),nX=a("a"),rOo=o("LEDForSequenceClassification"),tOo=o(" (LED model)"),aOo=l(),f2=a("li"),Jpe=a("strong"),nOo=o("longformer"),sOo=o(" \u2014 "),sX=a("a"),lOo=o("LongformerForSequenceClassification"),iOo=o(" (Longformer model)"),dOo=l(),m2=a("li"),Ype=a("strong"),cOo=o("mbart"),fOo=o(" \u2014 "),lX=a("a"),mOo=o("MBartForSequenceClassification"),gOo=o(" (mBART model)"),hOo=l(),g2=a("li"),Kpe=a("strong"),pOo=o("megatron-bert"),_Oo=o(" \u2014 "),iX=a("a"),uOo=o("MegatronBertForSequenceClassification"),bOo=o(" (Megatron-BERT model)"),vOo=l(),h2=a("li"),Zpe=a("strong"),FOo=o("mobilebert"),TOo=o(" \u2014 "),dX=a("a"),MOo=o("MobileBertForSequenceClassification"),EOo=o(" (MobileBERT model)"),COo=l(),p2=a("li"),e_e=a("strong"),wOo=o("mpnet"),AOo=o(" \u2014 "),cX=a("a"),LOo=o("MPNetForSequenceClassification"),yOo=o(" (MPNet model)"),xOo=l(),_2=a("li"),o_e=a("strong"),$Oo=o("mvp"),kOo=o(" \u2014 "),fX=a("a"),SOo=o("MvpForSequenceClassification"),ROo=o(" (MVP model)"),POo=l(),u2=a("li"),r_e=a("strong"),BOo=o("nezha"),IOo=o(" \u2014 "),mX=a("a"),NOo=o("NezhaForSequenceClassification"),qOo=o(" (Nezha model)"),jOo=l(),b2=a("li"),t_e=a("strong"),DOo=o("nystromformer"),GOo=o(" \u2014 "),gX=a("a"),OOo=o("NystromformerForSequenceClassification"),VOo=o(" (Nystr\xF6mformer model)"),XOo=l(),v2=a("li"),a_e=a("strong"),zOo=o("openai-gpt"),QOo=o(" \u2014 "),hX=a("a"),WOo=o("OpenAIGPTForSequenceClassification"),HOo=o(" (OpenAI GPT model)"),UOo=l(),F2=a("li"),n_e=a("strong"),JOo=o("perceiver"),YOo=o(" \u2014 "),pX=a("a"),KOo=o("PerceiverForSequenceClassification"),ZOo=o(" (Perceiver model)"),eVo=l(),T2=a("li"),s_e=a("strong"),oVo=o("plbart"),rVo=o(" \u2014 "),_X=a("a"),tVo=o("PLBartForSequenceClassification"),aVo=o(" (PLBart model)"),nVo=l(),M2=a("li"),l_e=a("strong"),sVo=o("qdqbert"),lVo=o(" \u2014 "),uX=a("a"),iVo=o("QDQBertForSequenceClassification"),dVo=o(" (QDQBert model)"),cVo=l(),E2=a("li"),i_e=a("strong"),fVo=o("reformer"),mVo=o(" \u2014 "),bX=a("a"),gVo=o("ReformerForSequenceClassification"),hVo=o(" (Reformer model)"),pVo=l(),C2=a("li"),d_e=a("strong"),_Vo=o("rembert"),uVo=o(" \u2014 "),vX=a("a"),bVo=o("RemBertForSequenceClassification"),vVo=o(" (RemBERT model)"),FVo=l(),w2=a("li"),c_e=a("strong"),TVo=o("roberta"),MVo=o(" \u2014 "),FX=a("a"),EVo=o("RobertaForSequenceClassification"),CVo=o(" (RoBERTa model)"),wVo=l(),A2=a("li"),f_e=a("strong"),AVo=o("roformer"),LVo=o(" \u2014 "),TX=a("a"),yVo=o("RoFormerForSequenceClassification"),xVo=o(" (RoFormer model)"),$Vo=l(),L2=a("li"),m_e=a("strong"),kVo=o("squeezebert"),SVo=o(" \u2014 "),MX=a("a"),RVo=o("SqueezeBertForSequenceClassification"),PVo=o(" (SqueezeBERT model)"),BVo=l(),y2=a("li"),g_e=a("strong"),IVo=o("tapas"),NVo=o(" \u2014 "),EX=a("a"),qVo=o("TapasForSequenceClassification"),jVo=o(" (TAPAS model)"),DVo=l(),x2=a("li"),h_e=a("strong"),GVo=o("transfo-xl"),OVo=o(" \u2014 "),CX=a("a"),VVo=o("TransfoXLForSequenceClassification"),XVo=o(" (Transformer-XL model)"),zVo=l(),$2=a("li"),p_e=a("strong"),QVo=o("xlm"),WVo=o(" \u2014 "),wX=a("a"),HVo=o("XLMForSequenceClassification"),UVo=o(" (XLM model)"),JVo=l(),k2=a("li"),__e=a("strong"),YVo=o("xlm-roberta"),KVo=o(" \u2014 "),AX=a("a"),ZVo=o("XLMRobertaForSequenceClassification"),eXo=o(" (XLM-RoBERTa model)"),oXo=l(),S2=a("li"),u_e=a("strong"),rXo=o("xlm-roberta-xl"),tXo=o(" \u2014 "),LX=a("a"),aXo=o("XLMRobertaXLForSequenceClassification"),nXo=o(" (XLM-RoBERTa-XL model)"),sXo=l(),R2=a("li"),b_e=a("strong"),lXo=o("xlnet"),iXo=o(" \u2014 "),yX=a("a"),dXo=o("XLNetForSequenceClassification"),cXo=o(" (XLNet model)"),fXo=l(),P2=a("li"),v_e=a("strong"),mXo=o("yoso"),gXo=o(" \u2014 "),xX=a("a"),hXo=o("YosoForSequenceClassification"),pXo=o(" (YOSO model)"),_Xo=l(),B2=a("p"),uXo=o("The model is set in evaluation mode by default using "),F_e=a("code"),bXo=o("model.eval()"),vXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),FXo=o("model.train()"),TXo=l(),F(I2.$$.fragment),jVe=l(),td=a("h2"),N2=a("a"),M_e=a("span"),F(Yy.$$.fragment),MXo=l(),E_e=a("span"),EXo=o("AutoModelForMultipleChoice"),DVe=l(),Bo=a("div"),F(Ky.$$.fragment),CXo=l(),ad=a("p"),wXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$X=a("a"),AXo=o("from_pretrained()"),LXo=o(" class method or the "),kX=a("a"),yXo=o("from_config()"),xXo=o(` class
method.`),$Xo=l(),Zy=a("p"),kXo=o("This class cannot be instantiated directly using "),C_e=a("code"),SXo=o("__init__()"),RXo=o(" (throws an error)."),PXo=l(),mt=a("div"),F(e8.$$.fragment),BXo=l(),w_e=a("p"),IXo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NXo=l(),nd=a("p"),qXo=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),jXo=o("not"),DXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),GXo=o("from_pretrained()"),OXo=o(" to load the model weights."),VXo=l(),F(q2.$$.fragment),XXo=l(),ro=a("div"),F(o8.$$.fragment),zXo=l(),L_e=a("p"),QXo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WXo=l(),Da=a("p"),HXo=o("The model class to instantiate is selected based on the "),y_e=a("code"),UXo=o("model_type"),JXo=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),YXo=o("pretrained_model_name_or_path"),KXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(":"),ozo=l(),Z=a("ul"),j2=a("li"),k_e=a("strong"),rzo=o("albert"),tzo=o(" \u2014 "),RX=a("a"),azo=o("AlbertForMultipleChoice"),nzo=o(" (ALBERT model)"),szo=l(),D2=a("li"),S_e=a("strong"),lzo=o("bert"),izo=o(" \u2014 "),PX=a("a"),dzo=o("BertForMultipleChoice"),czo=o(" (BERT model)"),fzo=l(),G2=a("li"),R_e=a("strong"),mzo=o("big_bird"),gzo=o(" \u2014 "),BX=a("a"),hzo=o("BigBirdForMultipleChoice"),pzo=o(" (BigBird model)"),_zo=l(),O2=a("li"),P_e=a("strong"),uzo=o("camembert"),bzo=o(" \u2014 "),IX=a("a"),vzo=o("CamembertForMultipleChoice"),Fzo=o(" (CamemBERT model)"),Tzo=l(),V2=a("li"),B_e=a("strong"),Mzo=o("canine"),Ezo=o(" \u2014 "),NX=a("a"),Czo=o("CanineForMultipleChoice"),wzo=o(" (CANINE model)"),Azo=l(),X2=a("li"),I_e=a("strong"),Lzo=o("convbert"),yzo=o(" \u2014 "),qX=a("a"),xzo=o("ConvBertForMultipleChoice"),$zo=o(" (ConvBERT model)"),kzo=l(),z2=a("li"),N_e=a("strong"),Szo=o("data2vec-text"),Rzo=o(" \u2014 "),jX=a("a"),Pzo=o("Data2VecTextForMultipleChoice"),Bzo=o(" (Data2VecText model)"),Izo=l(),Q2=a("li"),q_e=a("strong"),Nzo=o("deberta-v2"),qzo=o(" \u2014 "),DX=a("a"),jzo=o("DebertaV2ForMultipleChoice"),Dzo=o(" (DeBERTa-v2 model)"),Gzo=l(),W2=a("li"),j_e=a("strong"),Ozo=o("distilbert"),Vzo=o(" \u2014 "),GX=a("a"),Xzo=o("DistilBertForMultipleChoice"),zzo=o(" (DistilBERT model)"),Qzo=l(),H2=a("li"),D_e=a("strong"),Wzo=o("electra"),Hzo=o(" \u2014 "),OX=a("a"),Uzo=o("ElectraForMultipleChoice"),Jzo=o(" (ELECTRA model)"),Yzo=l(),U2=a("li"),G_e=a("strong"),Kzo=o("flaubert"),Zzo=o(" \u2014 "),VX=a("a"),eQo=o("FlaubertForMultipleChoice"),oQo=o(" (FlauBERT model)"),rQo=l(),J2=a("li"),O_e=a("strong"),tQo=o("fnet"),aQo=o(" \u2014 "),XX=a("a"),nQo=o("FNetForMultipleChoice"),sQo=o(" (FNet model)"),lQo=l(),Y2=a("li"),V_e=a("strong"),iQo=o("funnel"),dQo=o(" \u2014 "),zX=a("a"),cQo=o("FunnelForMultipleChoice"),fQo=o(" (Funnel Transformer model)"),mQo=l(),K2=a("li"),X_e=a("strong"),gQo=o("ibert"),hQo=o(" \u2014 "),QX=a("a"),pQo=o("IBertForMultipleChoice"),_Qo=o(" (I-BERT model)"),uQo=l(),Z2=a("li"),z_e=a("strong"),bQo=o("longformer"),vQo=o(" \u2014 "),WX=a("a"),FQo=o("LongformerForMultipleChoice"),TQo=o(" (Longformer model)"),MQo=l(),eb=a("li"),Q_e=a("strong"),EQo=o("megatron-bert"),CQo=o(" \u2014 "),HX=a("a"),wQo=o("MegatronBertForMultipleChoice"),AQo=o(" (Megatron-BERT model)"),LQo=l(),ob=a("li"),W_e=a("strong"),yQo=o("mobilebert"),xQo=o(" \u2014 "),UX=a("a"),$Qo=o("MobileBertForMultipleChoice"),kQo=o(" (MobileBERT model)"),SQo=l(),rb=a("li"),H_e=a("strong"),RQo=o("mpnet"),PQo=o(" \u2014 "),JX=a("a"),BQo=o("MPNetForMultipleChoice"),IQo=o(" (MPNet model)"),NQo=l(),tb=a("li"),U_e=a("strong"),qQo=o("nezha"),jQo=o(" \u2014 "),YX=a("a"),DQo=o("NezhaForMultipleChoice"),GQo=o(" (Nezha model)"),OQo=l(),ab=a("li"),J_e=a("strong"),VQo=o("nystromformer"),XQo=o(" \u2014 "),KX=a("a"),zQo=o("NystromformerForMultipleChoice"),QQo=o(" (Nystr\xF6mformer model)"),WQo=l(),nb=a("li"),Y_e=a("strong"),HQo=o("qdqbert"),UQo=o(" \u2014 "),ZX=a("a"),JQo=o("QDQBertForMultipleChoice"),YQo=o(" (QDQBert model)"),KQo=l(),sb=a("li"),K_e=a("strong"),ZQo=o("rembert"),eWo=o(" \u2014 "),ez=a("a"),oWo=o("RemBertForMultipleChoice"),rWo=o(" (RemBERT model)"),tWo=l(),lb=a("li"),Z_e=a("strong"),aWo=o("roberta"),nWo=o(" \u2014 "),oz=a("a"),sWo=o("RobertaForMultipleChoice"),lWo=o(" (RoBERTa model)"),iWo=l(),ib=a("li"),eue=a("strong"),dWo=o("roformer"),cWo=o(" \u2014 "),rz=a("a"),fWo=o("RoFormerForMultipleChoice"),mWo=o(" (RoFormer model)"),gWo=l(),db=a("li"),oue=a("strong"),hWo=o("squeezebert"),pWo=o(" \u2014 "),tz=a("a"),_Wo=o("SqueezeBertForMultipleChoice"),uWo=o(" (SqueezeBERT model)"),bWo=l(),cb=a("li"),rue=a("strong"),vWo=o("xlm"),FWo=o(" \u2014 "),az=a("a"),TWo=o("XLMForMultipleChoice"),MWo=o(" (XLM model)"),EWo=l(),fb=a("li"),tue=a("strong"),CWo=o("xlm-roberta"),wWo=o(" \u2014 "),nz=a("a"),AWo=o("XLMRobertaForMultipleChoice"),LWo=o(" (XLM-RoBERTa model)"),yWo=l(),mb=a("li"),aue=a("strong"),xWo=o("xlm-roberta-xl"),$Wo=o(" \u2014 "),sz=a("a"),kWo=o("XLMRobertaXLForMultipleChoice"),SWo=o(" (XLM-RoBERTa-XL model)"),RWo=l(),gb=a("li"),nue=a("strong"),PWo=o("xlnet"),BWo=o(" \u2014 "),lz=a("a"),IWo=o("XLNetForMultipleChoice"),NWo=o(" (XLNet model)"),qWo=l(),hb=a("li"),sue=a("strong"),jWo=o("yoso"),DWo=o(" \u2014 "),iz=a("a"),GWo=o("YosoForMultipleChoice"),OWo=o(" (YOSO model)"),VWo=l(),pb=a("p"),XWo=o("The model is set in evaluation mode by default using "),lue=a("code"),zWo=o("model.eval()"),QWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),WWo=o("model.train()"),HWo=l(),F(_b.$$.fragment),GVe=l(),sd=a("h2"),ub=a("a"),due=a("span"),F(r8.$$.fragment),UWo=l(),cue=a("span"),JWo=o("AutoModelForNextSentencePrediction"),OVe=l(),Io=a("div"),F(t8.$$.fragment),YWo=l(),ld=a("p"),KWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dz=a("a"),ZWo=o("from_pretrained()"),eHo=o(" class method or the "),cz=a("a"),oHo=o("from_config()"),rHo=o(` class
method.`),tHo=l(),a8=a("p"),aHo=o("This class cannot be instantiated directly using "),fue=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),gt=a("div"),F(n8.$$.fragment),iHo=l(),mue=a("p"),dHo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cHo=l(),id=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),hHo=o("from_pretrained()"),pHo=o(" to load the model weights."),_Ho=l(),F(bb.$$.fragment),uHo=l(),to=a("div"),F(s8.$$.fragment),bHo=l(),hue=a("p"),vHo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FHo=l(),Ga=a("p"),THo=o("The model class to instantiate is selected based on the "),pue=a("code"),MHo=o("model_type"),EHo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),AHo=o("pretrained_model_name_or_path"),LHo=o(":"),yHo=l(),No=a("ul"),vb=a("li"),bue=a("strong"),xHo=o("bert"),$Ho=o(" \u2014 "),mz=a("a"),kHo=o("BertForNextSentencePrediction"),SHo=o(" (BERT model)"),RHo=l(),Fb=a("li"),vue=a("strong"),PHo=o("fnet"),BHo=o(" \u2014 "),gz=a("a"),IHo=o("FNetForNextSentencePrediction"),NHo=o(" (FNet model)"),qHo=l(),Tb=a("li"),Fue=a("strong"),jHo=o("megatron-bert"),DHo=o(" \u2014 "),hz=a("a"),GHo=o("MegatronBertForNextSentencePrediction"),OHo=o(" (Megatron-BERT model)"),VHo=l(),Mb=a("li"),Tue=a("strong"),XHo=o("mobilebert"),zHo=o(" \u2014 "),pz=a("a"),QHo=o("MobileBertForNextSentencePrediction"),WHo=o(" (MobileBERT model)"),HHo=l(),Eb=a("li"),Mue=a("strong"),UHo=o("nezha"),JHo=o(" \u2014 "),_z=a("a"),YHo=o("NezhaForNextSentencePrediction"),KHo=o(" (Nezha model)"),ZHo=l(),Cb=a("li"),Eue=a("strong"),eUo=o("qdqbert"),oUo=o(" \u2014 "),uz=a("a"),rUo=o("QDQBertForNextSentencePrediction"),tUo=o(" (QDQBert model)"),aUo=l(),wb=a("p"),nUo=o("The model is set in evaluation mode by default using "),Cue=a("code"),sUo=o("model.eval()"),lUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),iUo=o("model.train()"),dUo=l(),F(Ab.$$.fragment),VVe=l(),dd=a("h2"),Lb=a("a"),Aue=a("span"),F(l8.$$.fragment),cUo=l(),Lue=a("span"),fUo=o("AutoModelForTokenClassification"),XVe=l(),qo=a("div"),F(i8.$$.fragment),mUo=l(),cd=a("p"),gUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=a("a"),hUo=o("from_pretrained()"),pUo=o(" class method or the "),vz=a("a"),_Uo=o("from_config()"),uUo=o(` class
method.`),bUo=l(),d8=a("p"),vUo=o("This class cannot be instantiated directly using "),yue=a("code"),FUo=o("__init__()"),TUo=o(" (throws an error)."),MUo=l(),ht=a("div"),F(c8.$$.fragment),EUo=l(),xue=a("p"),CUo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wUo=l(),fd=a("p"),AUo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),LUo=o("not"),yUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),xUo=o("from_pretrained()"),$Uo=o(" to load the model weights."),kUo=l(),F(yb.$$.fragment),SUo=l(),ao=a("div"),F(f8.$$.fragment),RUo=l(),kue=a("p"),PUo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BUo=l(),Oa=a("p"),IUo=o("The model class to instantiate is selected based on the "),Sue=a("code"),NUo=o("model_type"),qUo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),jUo=o("pretrained_model_name_or_path"),DUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),GUo=o("pretrained_model_name_or_path"),OUo=o(":"),VUo=l(),U=a("ul"),xb=a("li"),Bue=a("strong"),XUo=o("albert"),zUo=o(" \u2014 "),Tz=a("a"),QUo=o("AlbertForTokenClassification"),WUo=o(" (ALBERT model)"),HUo=l(),$b=a("li"),Iue=a("strong"),UUo=o("bert"),JUo=o(" \u2014 "),Mz=a("a"),YUo=o("BertForTokenClassification"),KUo=o(" (BERT model)"),ZUo=l(),kb=a("li"),Nue=a("strong"),eJo=o("big_bird"),oJo=o(" \u2014 "),Ez=a("a"),rJo=o("BigBirdForTokenClassification"),tJo=o(" (BigBird model)"),aJo=l(),Sb=a("li"),que=a("strong"),nJo=o("bloom"),sJo=o(" \u2014 "),Cz=a("a"),lJo=o("BloomForTokenClassification"),iJo=o(" (BLOOM model)"),dJo=l(),Rb=a("li"),jue=a("strong"),cJo=o("camembert"),fJo=o(" \u2014 "),wz=a("a"),mJo=o("CamembertForTokenClassification"),gJo=o(" (CamemBERT model)"),hJo=l(),Pb=a("li"),Due=a("strong"),pJo=o("canine"),_Jo=o(" \u2014 "),Az=a("a"),uJo=o("CanineForTokenClassification"),bJo=o(" (CANINE model)"),vJo=l(),Bb=a("li"),Gue=a("strong"),FJo=o("convbert"),TJo=o(" \u2014 "),Lz=a("a"),MJo=o("ConvBertForTokenClassification"),EJo=o(" (ConvBERT model)"),CJo=l(),Ib=a("li"),Oue=a("strong"),wJo=o("data2vec-text"),AJo=o(" \u2014 "),yz=a("a"),LJo=o("Data2VecTextForTokenClassification"),yJo=o(" (Data2VecText model)"),xJo=l(),Nb=a("li"),Vue=a("strong"),$Jo=o("deberta"),kJo=o(" \u2014 "),xz=a("a"),SJo=o("DebertaForTokenClassification"),RJo=o(" (DeBERTa model)"),PJo=l(),qb=a("li"),Xue=a("strong"),BJo=o("deberta-v2"),IJo=o(" \u2014 "),$z=a("a"),NJo=o("DebertaV2ForTokenClassification"),qJo=o(" (DeBERTa-v2 model)"),jJo=l(),jb=a("li"),zue=a("strong"),DJo=o("distilbert"),GJo=o(" \u2014 "),kz=a("a"),OJo=o("DistilBertForTokenClassification"),VJo=o(" (DistilBERT model)"),XJo=l(),Db=a("li"),Que=a("strong"),zJo=o("electra"),QJo=o(" \u2014 "),Sz=a("a"),WJo=o("ElectraForTokenClassification"),HJo=o(" (ELECTRA model)"),UJo=l(),Gb=a("li"),Wue=a("strong"),JJo=o("flaubert"),YJo=o(" \u2014 "),Rz=a("a"),KJo=o("FlaubertForTokenClassification"),ZJo=o(" (FlauBERT model)"),eYo=l(),Ob=a("li"),Hue=a("strong"),oYo=o("fnet"),rYo=o(" \u2014 "),Pz=a("a"),tYo=o("FNetForTokenClassification"),aYo=o(" (FNet model)"),nYo=l(),Vb=a("li"),Uue=a("strong"),sYo=o("funnel"),lYo=o(" \u2014 "),Bz=a("a"),iYo=o("FunnelForTokenClassification"),dYo=o(" (Funnel Transformer model)"),cYo=l(),Xb=a("li"),Jue=a("strong"),fYo=o("gpt2"),mYo=o(" \u2014 "),Iz=a("a"),gYo=o("GPT2ForTokenClassification"),hYo=o(" (OpenAI GPT-2 model)"),pYo=l(),zb=a("li"),Yue=a("strong"),_Yo=o("ibert"),uYo=o(" \u2014 "),Nz=a("a"),bYo=o("IBertForTokenClassification"),vYo=o(" (I-BERT model)"),FYo=l(),Qb=a("li"),Kue=a("strong"),TYo=o("layoutlm"),MYo=o(" \u2014 "),qz=a("a"),EYo=o("LayoutLMForTokenClassification"),CYo=o(" (LayoutLM model)"),wYo=l(),Wb=a("li"),Zue=a("strong"),AYo=o("layoutlmv2"),LYo=o(" \u2014 "),jz=a("a"),yYo=o("LayoutLMv2ForTokenClassification"),xYo=o(" (LayoutLMv2 model)"),$Yo=l(),Hb=a("li"),e1e=a("strong"),kYo=o("layoutlmv3"),SYo=o(" \u2014 "),Dz=a("a"),RYo=o("LayoutLMv3ForTokenClassification"),PYo=o(" (LayoutLMv3 model)"),BYo=l(),Ub=a("li"),o1e=a("strong"),IYo=o("longformer"),NYo=o(" \u2014 "),Gz=a("a"),qYo=o("LongformerForTokenClassification"),jYo=o(" (Longformer model)"),DYo=l(),Jb=a("li"),r1e=a("strong"),GYo=o("megatron-bert"),OYo=o(" \u2014 "),Oz=a("a"),VYo=o("MegatronBertForTokenClassification"),XYo=o(" (Megatron-BERT model)"),zYo=l(),Yb=a("li"),t1e=a("strong"),QYo=o("mobilebert"),WYo=o(" \u2014 "),Vz=a("a"),HYo=o("MobileBertForTokenClassification"),UYo=o(" (MobileBERT model)"),JYo=l(),Kb=a("li"),a1e=a("strong"),YYo=o("mpnet"),KYo=o(" \u2014 "),Xz=a("a"),ZYo=o("MPNetForTokenClassification"),eKo=o(" (MPNet model)"),oKo=l(),Zb=a("li"),n1e=a("strong"),rKo=o("nezha"),tKo=o(" \u2014 "),zz=a("a"),aKo=o("NezhaForTokenClassification"),nKo=o(" (Nezha model)"),sKo=l(),ev=a("li"),s1e=a("strong"),lKo=o("nystromformer"),iKo=o(" \u2014 "),Qz=a("a"),dKo=o("NystromformerForTokenClassification"),cKo=o(" (Nystr\xF6mformer model)"),fKo=l(),ov=a("li"),l1e=a("strong"),mKo=o("qdqbert"),gKo=o(" \u2014 "),Wz=a("a"),hKo=o("QDQBertForTokenClassification"),pKo=o(" (QDQBert model)"),_Ko=l(),rv=a("li"),i1e=a("strong"),uKo=o("rembert"),bKo=o(" \u2014 "),Hz=a("a"),vKo=o("RemBertForTokenClassification"),FKo=o(" (RemBERT model)"),TKo=l(),tv=a("li"),d1e=a("strong"),MKo=o("roberta"),EKo=o(" \u2014 "),Uz=a("a"),CKo=o("RobertaForTokenClassification"),wKo=o(" (RoBERTa model)"),AKo=l(),av=a("li"),c1e=a("strong"),LKo=o("roformer"),yKo=o(" \u2014 "),Jz=a("a"),xKo=o("RoFormerForTokenClassification"),$Ko=o(" (RoFormer model)"),kKo=l(),nv=a("li"),f1e=a("strong"),SKo=o("squeezebert"),RKo=o(" \u2014 "),Yz=a("a"),PKo=o("SqueezeBertForTokenClassification"),BKo=o(" (SqueezeBERT model)"),IKo=l(),sv=a("li"),m1e=a("strong"),NKo=o("xlm"),qKo=o(" \u2014 "),Kz=a("a"),jKo=o("XLMForTokenClassification"),DKo=o(" (XLM model)"),GKo=l(),lv=a("li"),g1e=a("strong"),OKo=o("xlm-roberta"),VKo=o(" \u2014 "),Zz=a("a"),XKo=o("XLMRobertaForTokenClassification"),zKo=o(" (XLM-RoBERTa model)"),QKo=l(),iv=a("li"),h1e=a("strong"),WKo=o("xlm-roberta-xl"),HKo=o(" \u2014 "),eQ=a("a"),UKo=o("XLMRobertaXLForTokenClassification"),JKo=o(" (XLM-RoBERTa-XL model)"),YKo=l(),dv=a("li"),p1e=a("strong"),KKo=o("xlnet"),ZKo=o(" \u2014 "),oQ=a("a"),eZo=o("XLNetForTokenClassification"),oZo=o(" (XLNet model)"),rZo=l(),cv=a("li"),_1e=a("strong"),tZo=o("yoso"),aZo=o(" \u2014 "),rQ=a("a"),nZo=o("YosoForTokenClassification"),sZo=o(" (YOSO model)"),lZo=l(),fv=a("p"),iZo=o("The model is set in evaluation mode by default using "),u1e=a("code"),dZo=o("model.eval()"),cZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=a("code"),fZo=o("model.train()"),mZo=l(),F(mv.$$.fragment),zVe=l(),md=a("h2"),gv=a("a"),v1e=a("span"),F(m8.$$.fragment),gZo=l(),F1e=a("span"),hZo=o("AutoModelForQuestionAnswering"),QVe=l(),jo=a("div"),F(g8.$$.fragment),pZo=l(),gd=a("p"),_Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tQ=a("a"),uZo=o("from_pretrained()"),bZo=o(" class method or the "),aQ=a("a"),vZo=o("from_config()"),FZo=o(` class
method.`),TZo=l(),h8=a("p"),MZo=o("This class cannot be instantiated directly using "),T1e=a("code"),EZo=o("__init__()"),CZo=o(" (throws an error)."),wZo=l(),pt=a("div"),F(p8.$$.fragment),AZo=l(),M1e=a("p"),LZo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yZo=l(),hd=a("p"),xZo=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),$Zo=o("not"),kZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),SZo=o("from_pretrained()"),RZo=o(" to load the model weights."),PZo=l(),F(hv.$$.fragment),BZo=l(),no=a("div"),F(_8.$$.fragment),IZo=l(),C1e=a("p"),NZo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qZo=l(),Va=a("p"),jZo=o("The model class to instantiate is selected based on the "),w1e=a("code"),DZo=o("model_type"),GZo=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),OZo=o("pretrained_model_name_or_path"),VZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(":"),QZo=l(),V=a("ul"),pv=a("li"),y1e=a("strong"),WZo=o("albert"),HZo=o(" \u2014 "),sQ=a("a"),UZo=o("AlbertForQuestionAnswering"),JZo=o(" (ALBERT model)"),YZo=l(),_v=a("li"),x1e=a("strong"),KZo=o("bart"),ZZo=o(" \u2014 "),lQ=a("a"),eer=o("BartForQuestionAnswering"),oer=o(" (BART model)"),rer=l(),uv=a("li"),$1e=a("strong"),ter=o("bert"),aer=o(" \u2014 "),iQ=a("a"),ner=o("BertForQuestionAnswering"),ser=o(" (BERT model)"),ler=l(),bv=a("li"),k1e=a("strong"),ier=o("big_bird"),der=o(" \u2014 "),dQ=a("a"),cer=o("BigBirdForQuestionAnswering"),fer=o(" (BigBird model)"),mer=l(),vv=a("li"),S1e=a("strong"),ger=o("bigbird_pegasus"),her=o(" \u2014 "),cQ=a("a"),per=o("BigBirdPegasusForQuestionAnswering"),_er=o(" (BigBird-Pegasus model)"),uer=l(),Fv=a("li"),R1e=a("strong"),ber=o("camembert"),ver=o(" \u2014 "),fQ=a("a"),Fer=o("CamembertForQuestionAnswering"),Ter=o(" (CamemBERT model)"),Mer=l(),Tv=a("li"),P1e=a("strong"),Eer=o("canine"),Cer=o(" \u2014 "),mQ=a("a"),wer=o("CanineForQuestionAnswering"),Aer=o(" (CANINE model)"),Ler=l(),Mv=a("li"),B1e=a("strong"),yer=o("convbert"),xer=o(" \u2014 "),gQ=a("a"),$er=o("ConvBertForQuestionAnswering"),ker=o(" (ConvBERT model)"),Ser=l(),Ev=a("li"),I1e=a("strong"),Rer=o("data2vec-text"),Per=o(" \u2014 "),hQ=a("a"),Ber=o("Data2VecTextForQuestionAnswering"),Ier=o(" (Data2VecText model)"),Ner=l(),Cv=a("li"),N1e=a("strong"),qer=o("deberta"),jer=o(" \u2014 "),pQ=a("a"),Der=o("DebertaForQuestionAnswering"),Ger=o(" (DeBERTa model)"),Oer=l(),wv=a("li"),q1e=a("strong"),Ver=o("deberta-v2"),Xer=o(" \u2014 "),_Q=a("a"),zer=o("DebertaV2ForQuestionAnswering"),Qer=o(" (DeBERTa-v2 model)"),Wer=l(),Av=a("li"),j1e=a("strong"),Her=o("distilbert"),Uer=o(" \u2014 "),uQ=a("a"),Jer=o("DistilBertForQuestionAnswering"),Yer=o(" (DistilBERT model)"),Ker=l(),Lv=a("li"),D1e=a("strong"),Zer=o("electra"),eor=o(" \u2014 "),bQ=a("a"),oor=o("ElectraForQuestionAnswering"),ror=o(" (ELECTRA model)"),tor=l(),yv=a("li"),G1e=a("strong"),aor=o("flaubert"),nor=o(" \u2014 "),vQ=a("a"),sor=o("FlaubertForQuestionAnsweringSimple"),lor=o(" (FlauBERT model)"),ior=l(),xv=a("li"),O1e=a("strong"),dor=o("fnet"),cor=o(" \u2014 "),FQ=a("a"),mor=o("FNetForQuestionAnswering"),gor=o(" (FNet model)"),hor=l(),$v=a("li"),V1e=a("strong"),por=o("funnel"),_or=o(" \u2014 "),TQ=a("a"),uor=o("FunnelForQuestionAnswering"),bor=o(" (Funnel Transformer model)"),vor=l(),kv=a("li"),X1e=a("strong"),For=o("gptj"),Tor=o(" \u2014 "),MQ=a("a"),Mor=o("GPTJForQuestionAnswering"),Eor=o(" (GPT-J model)"),Cor=l(),Sv=a("li"),z1e=a("strong"),wor=o("ibert"),Aor=o(" \u2014 "),EQ=a("a"),Lor=o("IBertForQuestionAnswering"),yor=o(" (I-BERT model)"),xor=l(),Rv=a("li"),Q1e=a("strong"),$or=o("layoutlmv2"),kor=o(" \u2014 "),CQ=a("a"),Sor=o("LayoutLMv2ForQuestionAnswering"),Ror=o(" (LayoutLMv2 model)"),Por=l(),Pv=a("li"),W1e=a("strong"),Bor=o("layoutlmv3"),Ior=o(" \u2014 "),wQ=a("a"),Nor=o("LayoutLMv3ForQuestionAnswering"),qor=o(" (LayoutLMv3 model)"),jor=l(),Bv=a("li"),H1e=a("strong"),Dor=o("led"),Gor=o(" \u2014 "),AQ=a("a"),Oor=o("LEDForQuestionAnswering"),Vor=o(" (LED model)"),Xor=l(),Iv=a("li"),U1e=a("strong"),zor=o("longformer"),Qor=o(" \u2014 "),LQ=a("a"),Wor=o("LongformerForQuestionAnswering"),Hor=o(" (Longformer model)"),Uor=l(),Nv=a("li"),J1e=a("strong"),Jor=o("lxmert"),Yor=o(" \u2014 "),yQ=a("a"),Kor=o("LxmertForQuestionAnswering"),Zor=o(" (LXMERT model)"),err=l(),qv=a("li"),Y1e=a("strong"),orr=o("mbart"),rrr=o(" \u2014 "),xQ=a("a"),trr=o("MBartForQuestionAnswering"),arr=o(" (mBART model)"),nrr=l(),jv=a("li"),K1e=a("strong"),srr=o("megatron-bert"),lrr=o(" \u2014 "),$Q=a("a"),irr=o("MegatronBertForQuestionAnswering"),drr=o(" (Megatron-BERT model)"),crr=l(),Dv=a("li"),Z1e=a("strong"),frr=o("mobilebert"),mrr=o(" \u2014 "),kQ=a("a"),grr=o("MobileBertForQuestionAnswering"),hrr=o(" (MobileBERT model)"),prr=l(),Gv=a("li"),e7e=a("strong"),_rr=o("mpnet"),urr=o(" \u2014 "),SQ=a("a"),brr=o("MPNetForQuestionAnswering"),vrr=o(" (MPNet model)"),Frr=l(),Ov=a("li"),o7e=a("strong"),Trr=o("mvp"),Mrr=o(" \u2014 "),RQ=a("a"),Err=o("MvpForQuestionAnswering"),Crr=o(" (MVP model)"),wrr=l(),Vv=a("li"),r7e=a("strong"),Arr=o("nezha"),Lrr=o(" \u2014 "),PQ=a("a"),yrr=o("NezhaForQuestionAnswering"),xrr=o(" (Nezha model)"),$rr=l(),Xv=a("li"),t7e=a("strong"),krr=o("nystromformer"),Srr=o(" \u2014 "),BQ=a("a"),Rrr=o("NystromformerForQuestionAnswering"),Prr=o(" (Nystr\xF6mformer model)"),Brr=l(),zv=a("li"),a7e=a("strong"),Irr=o("qdqbert"),Nrr=o(" \u2014 "),IQ=a("a"),qrr=o("QDQBertForQuestionAnswering"),jrr=o(" (QDQBert model)"),Drr=l(),Qv=a("li"),n7e=a("strong"),Grr=o("reformer"),Orr=o(" \u2014 "),NQ=a("a"),Vrr=o("ReformerForQuestionAnswering"),Xrr=o(" (Reformer model)"),zrr=l(),Wv=a("li"),s7e=a("strong"),Qrr=o("rembert"),Wrr=o(" \u2014 "),qQ=a("a"),Hrr=o("RemBertForQuestionAnswering"),Urr=o(" (RemBERT model)"),Jrr=l(),Hv=a("li"),l7e=a("strong"),Yrr=o("roberta"),Krr=o(" \u2014 "),jQ=a("a"),Zrr=o("RobertaForQuestionAnswering"),etr=o(" (RoBERTa model)"),otr=l(),Uv=a("li"),i7e=a("strong"),rtr=o("roformer"),ttr=o(" \u2014 "),DQ=a("a"),atr=o("RoFormerForQuestionAnswering"),ntr=o(" (RoFormer model)"),str=l(),Jv=a("li"),d7e=a("strong"),ltr=o("splinter"),itr=o(" \u2014 "),GQ=a("a"),dtr=o("SplinterForQuestionAnswering"),ctr=o(" (Splinter model)"),ftr=l(),Yv=a("li"),c7e=a("strong"),mtr=o("squeezebert"),gtr=o(" \u2014 "),OQ=a("a"),htr=o("SqueezeBertForQuestionAnswering"),ptr=o(" (SqueezeBERT model)"),_tr=l(),Kv=a("li"),f7e=a("strong"),utr=o("xlm"),btr=o(" \u2014 "),VQ=a("a"),vtr=o("XLMForQuestionAnsweringSimple"),Ftr=o(" (XLM model)"),Ttr=l(),Zv=a("li"),m7e=a("strong"),Mtr=o("xlm-roberta"),Etr=o(" \u2014 "),XQ=a("a"),Ctr=o("XLMRobertaForQuestionAnswering"),wtr=o(" (XLM-RoBERTa model)"),Atr=l(),e3=a("li"),g7e=a("strong"),Ltr=o("xlm-roberta-xl"),ytr=o(" \u2014 "),zQ=a("a"),xtr=o("XLMRobertaXLForQuestionAnswering"),$tr=o(" (XLM-RoBERTa-XL model)"),ktr=l(),o3=a("li"),h7e=a("strong"),Str=o("xlnet"),Rtr=o(" \u2014 "),QQ=a("a"),Ptr=o("XLNetForQuestionAnsweringSimple"),Btr=o(" (XLNet model)"),Itr=l(),r3=a("li"),p7e=a("strong"),Ntr=o("yoso"),qtr=o(" \u2014 "),WQ=a("a"),jtr=o("YosoForQuestionAnswering"),Dtr=o(" (YOSO model)"),Gtr=l(),t3=a("p"),Otr=o("The model is set in evaluation mode by default using "),_7e=a("code"),Vtr=o("model.eval()"),Xtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=a("code"),ztr=o("model.train()"),Qtr=l(),F(a3.$$.fragment),WVe=l(),pd=a("h2"),n3=a("a"),b7e=a("span"),F(u8.$$.fragment),Wtr=l(),v7e=a("span"),Htr=o("AutoModelForTableQuestionAnswering"),HVe=l(),Do=a("div"),F(b8.$$.fragment),Utr=l(),_d=a("p"),Jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HQ=a("a"),Ytr=o("from_pretrained()"),Ktr=o(" class method or the "),UQ=a("a"),Ztr=o("from_config()"),ear=o(` class
method.`),oar=l(),v8=a("p"),rar=o("This class cannot be instantiated directly using "),F7e=a("code"),tar=o("__init__()"),aar=o(" (throws an error)."),nar=l(),_t=a("div"),F(F8.$$.fragment),sar=l(),T7e=a("p"),lar=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iar=l(),ud=a("p"),dar=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),car=o("not"),far=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),mar=o("from_pretrained()"),gar=o(" to load the model weights."),har=l(),F(s3.$$.fragment),par=l(),so=a("div"),F(T8.$$.fragment),_ar=l(),E7e=a("p"),uar=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bar=l(),Xa=a("p"),Far=o("The model class to instantiate is selected based on the "),C7e=a("code"),Tar=o("model_type"),Mar=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(":"),Lar=l(),L7e=a("ul"),l3=a("li"),y7e=a("strong"),yar=o("tapas"),xar=o(" \u2014 "),YQ=a("a"),$ar=o("TapasForQuestionAnswering"),kar=o(" (TAPAS model)"),Sar=l(),i3=a("p"),Rar=o("The model is set in evaluation mode by default using "),x7e=a("code"),Par=o("model.eval()"),Bar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$7e=a("code"),Iar=o("model.train()"),Nar=l(),F(d3.$$.fragment),UVe=l(),bd=a("h2"),c3=a("a"),k7e=a("span"),F(M8.$$.fragment),qar=l(),S7e=a("span"),jar=o("AutoModelForImageClassification"),JVe=l(),Go=a("div"),F(E8.$$.fragment),Dar=l(),vd=a("p"),Gar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=a("a"),Oar=o("from_pretrained()"),Var=o(" class method or the "),ZQ=a("a"),Xar=o("from_config()"),zar=o(` class
method.`),Qar=l(),C8=a("p"),War=o("This class cannot be instantiated directly using "),R7e=a("code"),Har=o("__init__()"),Uar=o(" (throws an error)."),Jar=l(),ut=a("div"),F(w8.$$.fragment),Yar=l(),P7e=a("p"),Kar=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zar=l(),Fd=a("p"),enr=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),onr=o("not"),rnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),tnr=o("from_pretrained()"),anr=o(" to load the model weights."),nnr=l(),F(f3.$$.fragment),snr=l(),lo=a("div"),F(A8.$$.fragment),lnr=l(),I7e=a("p"),inr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dnr=l(),za=a("p"),cnr=o("The model class to instantiate is selected based on the "),N7e=a("code"),fnr=o("model_type"),mnr=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(":"),unr=l(),Fe=a("ul"),m3=a("li"),D7e=a("strong"),bnr=o("beit"),vnr=o(" \u2014 "),oW=a("a"),Fnr=o("BeitForImageClassification"),Tnr=o(" (BEiT model)"),Mnr=l(),g3=a("li"),G7e=a("strong"),Enr=o("convnext"),Cnr=o(" \u2014 "),rW=a("a"),wnr=o("ConvNextForImageClassification"),Anr=o(" (ConvNeXT model)"),Lnr=l(),h3=a("li"),O7e=a("strong"),ynr=o("cvt"),xnr=o(" \u2014 "),tW=a("a"),$nr=o("CvtForImageClassification"),knr=o(" (CvT model)"),Snr=l(),p3=a("li"),V7e=a("strong"),Rnr=o("data2vec-vision"),Pnr=o(" \u2014 "),aW=a("a"),Bnr=o("Data2VecVisionForImageClassification"),Inr=o(" (Data2VecVision model)"),Nnr=l(),Ws=a("li"),X7e=a("strong"),qnr=o("deit"),jnr=o(" \u2014 "),nW=a("a"),Dnr=o("DeiTForImageClassification"),Gnr=o(" or "),sW=a("a"),Onr=o("DeiTForImageClassificationWithTeacher"),Vnr=o(" (DeiT model)"),Xnr=l(),_3=a("li"),z7e=a("strong"),znr=o("imagegpt"),Qnr=o(" \u2014 "),lW=a("a"),Wnr=o("ImageGPTForImageClassification"),Hnr=o(" (ImageGPT model)"),Unr=l(),Hs=a("li"),Q7e=a("strong"),Jnr=o("levit"),Ynr=o(" \u2014 "),iW=a("a"),Knr=o("LevitForImageClassification"),Znr=o(" or "),dW=a("a"),esr=o("LevitForImageClassificationWithTeacher"),osr=o(" (LeViT model)"),rsr=l(),bt=a("li"),W7e=a("strong"),tsr=o("perceiver"),asr=o(" \u2014 "),cW=a("a"),nsr=o("PerceiverForImageClassificationLearned"),ssr=o(" or "),fW=a("a"),lsr=o("PerceiverForImageClassificationFourier"),isr=o(" or "),mW=a("a"),dsr=o("PerceiverForImageClassificationConvProcessing"),csr=o(" (Perceiver model)"),fsr=l(),u3=a("li"),H7e=a("strong"),msr=o("poolformer"),gsr=o(" \u2014 "),gW=a("a"),hsr=o("PoolFormerForImageClassification"),psr=o(" (PoolFormer model)"),_sr=l(),b3=a("li"),U7e=a("strong"),usr=o("regnet"),bsr=o(" \u2014 "),hW=a("a"),vsr=o("RegNetForImageClassification"),Fsr=o(" (RegNet model)"),Tsr=l(),v3=a("li"),J7e=a("strong"),Msr=o("resnet"),Esr=o(" \u2014 "),pW=a("a"),Csr=o("ResNetForImageClassification"),wsr=o(" (ResNet model)"),Asr=l(),F3=a("li"),Y7e=a("strong"),Lsr=o("segformer"),ysr=o(" \u2014 "),_W=a("a"),xsr=o("SegformerForImageClassification"),$sr=o(" (SegFormer model)"),ksr=l(),T3=a("li"),K7e=a("strong"),Ssr=o("swin"),Rsr=o(" \u2014 "),uW=a("a"),Psr=o("SwinForImageClassification"),Bsr=o(" (Swin Transformer model)"),Isr=l(),M3=a("li"),Z7e=a("strong"),Nsr=o("van"),qsr=o(" \u2014 "),bW=a("a"),jsr=o("VanForImageClassification"),Dsr=o(" (VAN model)"),Gsr=l(),E3=a("li"),e4e=a("strong"),Osr=o("vit"),Vsr=o(" \u2014 "),vW=a("a"),Xsr=o("ViTForImageClassification"),zsr=o(" (ViT model)"),Qsr=l(),C3=a("p"),Wsr=o("The model is set in evaluation mode by default using "),o4e=a("code"),Hsr=o("model.eval()"),Usr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=a("code"),Jsr=o("model.train()"),Ysr=l(),F(w3.$$.fragment),YVe=l(),Td=a("h2"),A3=a("a"),t4e=a("span"),F(L8.$$.fragment),Ksr=l(),a4e=a("span"),Zsr=o("AutoModelForVision2Seq"),KVe=l(),Oo=a("div"),F(y8.$$.fragment),elr=l(),Md=a("p"),olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FW=a("a"),rlr=o("from_pretrained()"),tlr=o(" class method or the "),TW=a("a"),alr=o("from_config()"),nlr=o(` class
method.`),slr=l(),x8=a("p"),llr=o("This class cannot be instantiated directly using "),n4e=a("code"),ilr=o("__init__()"),dlr=o(" (throws an error)."),clr=l(),vt=a("div"),F($8.$$.fragment),flr=l(),s4e=a("p"),mlr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),glr=l(),Ed=a("p"),hlr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),plr=o("not"),_lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),ulr=o("from_pretrained()"),blr=o(" to load the model weights."),vlr=l(),F(L3.$$.fragment),Flr=l(),io=a("div"),F(k8.$$.fragment),Tlr=l(),i4e=a("p"),Mlr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Elr=l(),Qa=a("p"),Clr=o("The model class to instantiate is selected based on the "),d4e=a("code"),wlr=o("model_type"),Alr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),Llr=o("pretrained_model_name_or_path"),ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),xlr=o("pretrained_model_name_or_path"),$lr=o(":"),klr=l(),m4e=a("ul"),y3=a("li"),g4e=a("strong"),Slr=o("vision-encoder-decoder"),Rlr=o(" \u2014 "),EW=a("a"),Plr=o("VisionEncoderDecoderModel"),Blr=o(" (Vision Encoder decoder model)"),Ilr=l(),x3=a("p"),Nlr=o("The model is set in evaluation mode by default using "),h4e=a("code"),qlr=o("model.eval()"),jlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p4e=a("code"),Dlr=o("model.train()"),Glr=l(),F($3.$$.fragment),ZVe=l(),Cd=a("h2"),k3=a("a"),_4e=a("span"),F(S8.$$.fragment),Olr=l(),u4e=a("span"),Vlr=o("AutoModelForVisualQuestionAnswering"),eXe=l(),Vo=a("div"),F(R8.$$.fragment),Xlr=l(),wd=a("p"),zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),CW=a("a"),Qlr=o("from_pretrained()"),Wlr=o(" class method or the "),wW=a("a"),Hlr=o("from_config()"),Ulr=o(` class
method.`),Jlr=l(),P8=a("p"),Ylr=o("This class cannot be instantiated directly using "),b4e=a("code"),Klr=o("__init__()"),Zlr=o(" (throws an error)."),eir=l(),Ft=a("div"),F(B8.$$.fragment),oir=l(),v4e=a("p"),rir=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),tir=l(),Ad=a("p"),air=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),nir=o("not"),sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),lir=o("from_pretrained()"),iir=o(" to load the model weights."),dir=l(),F(S3.$$.fragment),cir=l(),co=a("div"),F(I8.$$.fragment),fir=l(),T4e=a("p"),mir=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),gir=l(),Wa=a("p"),hir=o("The model class to instantiate is selected based on the "),M4e=a("code"),pir=o("model_type"),_ir=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),uir=o("pretrained_model_name_or_path"),bir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(":"),Tir=l(),w4e=a("ul"),R3=a("li"),A4e=a("strong"),Mir=o("vilt"),Eir=o(" \u2014 "),LW=a("a"),Cir=o("ViltForQuestionAnswering"),wir=o(" (ViLT model)"),Air=l(),P3=a("p"),Lir=o("The model is set in evaluation mode by default using "),L4e=a("code"),yir=o("model.eval()"),xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=a("code"),$ir=o("model.train()"),kir=l(),F(B3.$$.fragment),oXe=l(),Ld=a("h2"),I3=a("a"),x4e=a("span"),F(N8.$$.fragment),Sir=l(),$4e=a("span"),Rir=o("AutoModelForAudioClassification"),rXe=l(),Xo=a("div"),F(q8.$$.fragment),Pir=l(),yd=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),yW=a("a"),Iir=o("from_pretrained()"),Nir=o(" class method or the "),xW=a("a"),qir=o("from_config()"),jir=o(` class
method.`),Dir=l(),j8=a("p"),Gir=o("This class cannot be instantiated directly using "),k4e=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Tt=a("div"),F(D8.$$.fragment),zir=l(),S4e=a("p"),Qir=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Wir=l(),xd=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(N3.$$.fragment),edr=l(),fo=a("div"),F(G8.$$.fragment),odr=l(),P4e=a("p"),rdr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tdr=l(),Ha=a("p"),adr=o("The model class to instantiate is selected based on the "),B4e=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),Pe=a("ul"),q3=a("li"),q4e=a("strong"),mdr=o("data2vec-audio"),gdr=o(" \u2014 "),kW=a("a"),hdr=o("Data2VecAudioForSequenceClassification"),pdr=o(" (Data2VecAudio model)"),_dr=l(),j3=a("li"),j4e=a("strong"),udr=o("hubert"),bdr=o(" \u2014 "),SW=a("a"),vdr=o("HubertForSequenceClassification"),Fdr=o(" (Hubert model)"),Tdr=l(),D3=a("li"),D4e=a("strong"),Mdr=o("sew"),Edr=o(" \u2014 "),RW=a("a"),Cdr=o("SEWForSequenceClassification"),wdr=o(" (SEW model)"),Adr=l(),G3=a("li"),G4e=a("strong"),Ldr=o("sew-d"),ydr=o(" \u2014 "),PW=a("a"),xdr=o("SEWDForSequenceClassification"),$dr=o(" (SEW-D model)"),kdr=l(),O3=a("li"),O4e=a("strong"),Sdr=o("unispeech"),Rdr=o(" \u2014 "),BW=a("a"),Pdr=o("UniSpeechForSequenceClassification"),Bdr=o(" (UniSpeech model)"),Idr=l(),V3=a("li"),V4e=a("strong"),Ndr=o("unispeech-sat"),qdr=o(" \u2014 "),IW=a("a"),jdr=o("UniSpeechSatForSequenceClassification"),Ddr=o(" (UniSpeechSat model)"),Gdr=l(),X3=a("li"),X4e=a("strong"),Odr=o("wav2vec2"),Vdr=o(" \u2014 "),NW=a("a"),Xdr=o("Wav2Vec2ForSequenceClassification"),zdr=o(" (Wav2Vec2 model)"),Qdr=l(),z3=a("li"),z4e=a("strong"),Wdr=o("wav2vec2-conformer"),Hdr=o(" \u2014 "),qW=a("a"),Udr=o("Wav2Vec2ConformerForSequenceClassification"),Jdr=o(" (Wav2Vec2-Conformer model)"),Ydr=l(),Q3=a("li"),Q4e=a("strong"),Kdr=o("wavlm"),Zdr=o(" \u2014 "),jW=a("a"),ecr=o("WavLMForSequenceClassification"),ocr=o(" (WavLM model)"),rcr=l(),W3=a("p"),tcr=o("The model is set in evaluation mode by default using "),W4e=a("code"),acr=o("model.eval()"),ncr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H4e=a("code"),scr=o("model.train()"),lcr=l(),F(H3.$$.fragment),tXe=l(),$d=a("h2"),U3=a("a"),U4e=a("span"),F(O8.$$.fragment),icr=l(),J4e=a("span"),dcr=o("AutoModelForAudioFrameClassification"),aXe=l(),zo=a("div"),F(V8.$$.fragment),ccr=l(),kd=a("p"),fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DW=a("a"),mcr=o("from_pretrained()"),gcr=o(" class method or the "),GW=a("a"),hcr=o("from_config()"),pcr=o(` class
method.`),_cr=l(),X8=a("p"),ucr=o("This class cannot be instantiated directly using "),Y4e=a("code"),bcr=o("__init__()"),vcr=o(" (throws an error)."),Fcr=l(),Mt=a("div"),F(z8.$$.fragment),Tcr=l(),K4e=a("p"),Mcr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ecr=l(),Sd=a("p"),Ccr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),wcr=o("not"),Acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),Lcr=o("from_pretrained()"),ycr=o(" to load the model weights."),xcr=l(),F(J3.$$.fragment),$cr=l(),mo=a("div"),F(Q8.$$.fragment),kcr=l(),e2e=a("p"),Scr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Rcr=l(),Ua=a("p"),Pcr=o("The model class to instantiate is selected based on the "),o2e=a("code"),Bcr=o("model_type"),Icr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),Ncr=o("pretrained_model_name_or_path"),qcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),jcr=o("pretrained_model_name_or_path"),Dcr=o(":"),Gcr=l(),et=a("ul"),Y3=a("li"),a2e=a("strong"),Ocr=o("data2vec-audio"),Vcr=o(" \u2014 "),VW=a("a"),Xcr=o("Data2VecAudioForAudioFrameClassification"),zcr=o(" (Data2VecAudio model)"),Qcr=l(),K3=a("li"),n2e=a("strong"),Wcr=o("unispeech-sat"),Hcr=o(" \u2014 "),XW=a("a"),Ucr=o("UniSpeechSatForAudioFrameClassification"),Jcr=o(" (UniSpeechSat model)"),Ycr=l(),Z3=a("li"),s2e=a("strong"),Kcr=o("wav2vec2"),Zcr=o(" \u2014 "),zW=a("a"),efr=o("Wav2Vec2ForAudioFrameClassification"),ofr=o(" (Wav2Vec2 model)"),rfr=l(),eF=a("li"),l2e=a("strong"),tfr=o("wav2vec2-conformer"),afr=o(" \u2014 "),QW=a("a"),nfr=o("Wav2Vec2ConformerForAudioFrameClassification"),sfr=o(" (Wav2Vec2-Conformer model)"),lfr=l(),oF=a("li"),i2e=a("strong"),ifr=o("wavlm"),dfr=o(" \u2014 "),WW=a("a"),cfr=o("WavLMForAudioFrameClassification"),ffr=o(" (WavLM model)"),mfr=l(),rF=a("p"),gfr=o("The model is set in evaluation mode by default using "),d2e=a("code"),hfr=o("model.eval()"),pfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=a("code"),_fr=o("model.train()"),ufr=l(),F(tF.$$.fragment),nXe=l(),Rd=a("h2"),aF=a("a"),f2e=a("span"),F(W8.$$.fragment),bfr=l(),m2e=a("span"),vfr=o("AutoModelForCTC"),sXe=l(),Qo=a("div"),F(H8.$$.fragment),Ffr=l(),Pd=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),HW=a("a"),Mfr=o("from_pretrained()"),Efr=o(" class method or the "),UW=a("a"),Cfr=o("from_config()"),wfr=o(` class
method.`),Afr=l(),U8=a("p"),Lfr=o("This class cannot be instantiated directly using "),g2e=a("code"),yfr=o("__init__()"),xfr=o(" (throws an error)."),$fr=l(),Et=a("div"),F(J8.$$.fragment),kfr=l(),h2e=a("p"),Sfr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Rfr=l(),Bd=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),Bfr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Nfr=o("from_pretrained()"),qfr=o(" to load the model weights."),jfr=l(),F(nF.$$.fragment),Dfr=l(),go=a("div"),F(Y8.$$.fragment),Gfr=l(),_2e=a("p"),Ofr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vfr=l(),Ja=a("p"),Xfr=o("The model class to instantiate is selected based on the "),u2e=a("code"),zfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),b2e=a("code"),Wfr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(":"),Yfr=l(),Le=a("ul"),sF=a("li"),F2e=a("strong"),Kfr=o("data2vec-audio"),Zfr=o(" \u2014 "),YW=a("a"),emr=o("Data2VecAudioForCTC"),omr=o(" (Data2VecAudio model)"),rmr=l(),lF=a("li"),T2e=a("strong"),tmr=o("hubert"),amr=o(" \u2014 "),KW=a("a"),nmr=o("HubertForCTC"),smr=o(" (Hubert model)"),lmr=l(),iF=a("li"),M2e=a("strong"),imr=o("mctct"),dmr=o(" \u2014 "),ZW=a("a"),cmr=o("MCTCTForCTC"),fmr=o(" (M-CTC-T model)"),mmr=l(),dF=a("li"),E2e=a("strong"),gmr=o("sew"),hmr=o(" \u2014 "),eH=a("a"),pmr=o("SEWForCTC"),_mr=o(" (SEW model)"),umr=l(),cF=a("li"),C2e=a("strong"),bmr=o("sew-d"),vmr=o(" \u2014 "),oH=a("a"),Fmr=o("SEWDForCTC"),Tmr=o(" (SEW-D model)"),Mmr=l(),fF=a("li"),w2e=a("strong"),Emr=o("unispeech"),Cmr=o(" \u2014 "),rH=a("a"),wmr=o("UniSpeechForCTC"),Amr=o(" (UniSpeech model)"),Lmr=l(),mF=a("li"),A2e=a("strong"),ymr=o("unispeech-sat"),xmr=o(" \u2014 "),tH=a("a"),$mr=o("UniSpeechSatForCTC"),kmr=o(" (UniSpeechSat model)"),Smr=l(),gF=a("li"),L2e=a("strong"),Rmr=o("wav2vec2"),Pmr=o(" \u2014 "),aH=a("a"),Bmr=o("Wav2Vec2ForCTC"),Imr=o(" (Wav2Vec2 model)"),Nmr=l(),hF=a("li"),y2e=a("strong"),qmr=o("wav2vec2-conformer"),jmr=o(" \u2014 "),nH=a("a"),Dmr=o("Wav2Vec2ConformerForCTC"),Gmr=o(" (Wav2Vec2-Conformer model)"),Omr=l(),pF=a("li"),x2e=a("strong"),Vmr=o("wavlm"),Xmr=o(" \u2014 "),sH=a("a"),zmr=o("WavLMForCTC"),Qmr=o(" (WavLM model)"),Wmr=l(),_F=a("p"),Hmr=o("The model is set in evaluation mode by default using "),$2e=a("code"),Umr=o("model.eval()"),Jmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=a("code"),Ymr=o("model.train()"),Kmr=l(),F(uF.$$.fragment),lXe=l(),Id=a("h2"),bF=a("a"),S2e=a("span"),F(K8.$$.fragment),Zmr=l(),R2e=a("span"),egr=o("AutoModelForSpeechSeq2Seq"),iXe=l(),Wo=a("div"),F(Z8.$$.fragment),ogr=l(),Nd=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lH=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),iH=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),e9=a("p"),igr=o("This class cannot be instantiated directly using "),P2e=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),fgr=l(),Ct=a("div"),F(o9.$$.fragment),mgr=l(),B2e=a("p"),ggr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hgr=l(),qd=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),_gr=o("not"),ugr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(vF.$$.fragment),Tgr=l(),ho=a("div"),F(r9.$$.fragment),Mgr=l(),N2e=a("p"),Egr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cgr=l(),Ya=a("p"),wgr=o("The model class to instantiate is selected based on the "),q2e=a("code"),Agr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),t9=a("ul"),FF=a("li"),G2e=a("strong"),Rgr=o("speech-encoder-decoder"),Pgr=o(" \u2014 "),cH=a("a"),Bgr=o("SpeechEncoderDecoderModel"),Igr=o(" (Speech Encoder decoder model)"),Ngr=l(),TF=a("li"),O2e=a("strong"),qgr=o("speech_to_text"),jgr=o(" \u2014 "),fH=a("a"),Dgr=o("Speech2TextForConditionalGeneration"),Ggr=o(" (Speech2Text model)"),Ogr=l(),MF=a("p"),Vgr=o("The model is set in evaluation mode by default using "),V2e=a("code"),Xgr=o("model.eval()"),zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=a("code"),Qgr=o("model.train()"),Wgr=l(),F(EF.$$.fragment),dXe=l(),jd=a("h2"),CF=a("a"),z2e=a("span"),F(a9.$$.fragment),Hgr=l(),Q2e=a("span"),Ugr=o("AutoModelForAudioXVector"),cXe=l(),Ho=a("div"),F(n9.$$.fragment),Jgr=l(),Dd=a("p"),Ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mH=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" class method or the "),gH=a("a"),ehr=o("from_config()"),ohr=o(` class
method.`),rhr=l(),s9=a("p"),thr=o("This class cannot be instantiated directly using "),W2e=a("code"),ahr=o("__init__()"),nhr=o(" (throws an error)."),shr=l(),wt=a("div"),F(l9.$$.fragment),lhr=l(),H2e=a("p"),ihr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dhr=l(),Gd=a("p"),chr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),fhr=o("not"),mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),ghr=o("from_pretrained()"),hhr=o(" to load the model weights."),phr=l(),F(wF.$$.fragment),_hr=l(),po=a("div"),F(i9.$$.fragment),uhr=l(),J2e=a("p"),bhr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vhr=l(),Ka=a("p"),Fhr=o("The model class to instantiate is selected based on the "),Y2e=a("code"),Thr=o("model_type"),Mhr=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(":"),Lhr=l(),ot=a("ul"),AF=a("li"),ebe=a("strong"),yhr=o("data2vec-audio"),xhr=o(" \u2014 "),pH=a("a"),$hr=o("Data2VecAudioForXVector"),khr=o(" (Data2VecAudio model)"),Shr=l(),LF=a("li"),obe=a("strong"),Rhr=o("unispeech-sat"),Phr=o(" \u2014 "),_H=a("a"),Bhr=o("UniSpeechSatForXVector"),Ihr=o(" (UniSpeechSat model)"),Nhr=l(),yF=a("li"),rbe=a("strong"),qhr=o("wav2vec2"),jhr=o(" \u2014 "),uH=a("a"),Dhr=o("Wav2Vec2ForXVector"),Ghr=o(" (Wav2Vec2 model)"),Ohr=l(),xF=a("li"),tbe=a("strong"),Vhr=o("wav2vec2-conformer"),Xhr=o(" \u2014 "),bH=a("a"),zhr=o("Wav2Vec2ConformerForXVector"),Qhr=o(" (Wav2Vec2-Conformer model)"),Whr=l(),$F=a("li"),abe=a("strong"),Hhr=o("wavlm"),Uhr=o(" \u2014 "),vH=a("a"),Jhr=o("WavLMForXVector"),Yhr=o(" (WavLM model)"),Khr=l(),kF=a("p"),Zhr=o("The model is set in evaluation mode by default using "),nbe=a("code"),epr=o("model.eval()"),opr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=a("code"),rpr=o("model.train()"),tpr=l(),F(SF.$$.fragment),fXe=l(),Od=a("h2"),RF=a("a"),lbe=a("span"),F(d9.$$.fragment),apr=l(),ibe=a("span"),npr=o("AutoModelForMaskedImageModeling"),mXe=l(),Uo=a("div"),F(c9.$$.fragment),spr=l(),Vd=a("p"),lpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FH=a("a"),ipr=o("from_pretrained()"),dpr=o(" class method or the "),TH=a("a"),cpr=o("from_config()"),fpr=o(` class
method.`),mpr=l(),f9=a("p"),gpr=o("This class cannot be instantiated directly using "),dbe=a("code"),hpr=o("__init__()"),ppr=o(" (throws an error)."),_pr=l(),At=a("div"),F(m9.$$.fragment),upr=l(),cbe=a("p"),bpr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vpr=l(),Xd=a("p"),Fpr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),Tpr=o("not"),Mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Epr=o("from_pretrained()"),Cpr=o(" to load the model weights."),wpr=l(),F(PF.$$.fragment),Apr=l(),_o=a("div"),F(g9.$$.fragment),Lpr=l(),mbe=a("p"),ypr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xpr=l(),Za=a("p"),$pr=o("The model class to instantiate is selected based on the "),gbe=a("code"),kpr=o("model_type"),Spr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),Rpr=o("pretrained_model_name_or_path"),Ppr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Bpr=o("pretrained_model_name_or_path"),Ipr=o(":"),Npr=l(),zd=a("ul"),BF=a("li"),_be=a("strong"),qpr=o("deit"),jpr=o(" \u2014 "),EH=a("a"),Dpr=o("DeiTForMaskedImageModeling"),Gpr=o(" (DeiT model)"),Opr=l(),IF=a("li"),ube=a("strong"),Vpr=o("swin"),Xpr=o(" \u2014 "),CH=a("a"),zpr=o("SwinForMaskedImageModeling"),Qpr=o(" (Swin Transformer model)"),Wpr=l(),NF=a("li"),bbe=a("strong"),Hpr=o("vit"),Upr=o(" \u2014 "),wH=a("a"),Jpr=o("ViTForMaskedImageModeling"),Ypr=o(" (ViT model)"),Kpr=l(),qF=a("p"),Zpr=o("The model is set in evaluation mode by default using "),vbe=a("code"),e_r=o("model.eval()"),o_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),r_r=o("model.train()"),t_r=l(),F(jF.$$.fragment),gXe=l(),Qd=a("h2"),DF=a("a"),Tbe=a("span"),F(h9.$$.fragment),a_r=l(),Mbe=a("span"),n_r=o("AutoModelForObjectDetection"),hXe=l(),Jo=a("div"),F(p9.$$.fragment),s_r=l(),Wd=a("p"),l_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),AH=a("a"),i_r=o("from_pretrained()"),d_r=o(" class method or the "),LH=a("a"),c_r=o("from_config()"),f_r=o(` class
method.`),m_r=l(),_9=a("p"),g_r=o("This class cannot be instantiated directly using "),Ebe=a("code"),h_r=o("__init__()"),p_r=o(" (throws an error)."),__r=l(),Lt=a("div"),F(u9.$$.fragment),u_r=l(),Cbe=a("p"),b_r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),v_r=l(),Hd=a("p"),F_r=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),T_r=o("not"),M_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),E_r=o("from_pretrained()"),C_r=o(" to load the model weights."),w_r=l(),F(GF.$$.fragment),A_r=l(),uo=a("div"),F(b9.$$.fragment),L_r=l(),Abe=a("p"),y_r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),x_r=l(),en=a("p"),$_r=o("The model class to instantiate is selected based on the "),Lbe=a("code"),k_r=o("model_type"),S_r=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),R_r=o("pretrained_model_name_or_path"),P_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),B_r=o("pretrained_model_name_or_path"),I_r=o(":"),N_r=l(),v9=a("ul"),OF=a("li"),$be=a("strong"),q_r=o("detr"),j_r=o(" \u2014 "),xH=a("a"),D_r=o("DetrForObjectDetection"),G_r=o(" (DETR model)"),O_r=l(),VF=a("li"),kbe=a("strong"),V_r=o("yolos"),X_r=o(" \u2014 "),$H=a("a"),z_r=o("YolosForObjectDetection"),Q_r=o(" (YOLOS model)"),W_r=l(),XF=a("p"),H_r=o("The model is set in evaluation mode by default using "),Sbe=a("code"),U_r=o("model.eval()"),J_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=a("code"),Y_r=o("model.train()"),K_r=l(),F(zF.$$.fragment),pXe=l(),Ud=a("h2"),QF=a("a"),Pbe=a("span"),F(F9.$$.fragment),Z_r=l(),Bbe=a("span"),eur=o("AutoModelForImageSegmentation"),_Xe=l(),Yo=a("div"),F(T9.$$.fragment),our=l(),Jd=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kH=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),SH=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),M9=a("p"),iur=o("This class cannot be instantiated directly using "),Ibe=a("code"),dur=o("__init__()"),cur=o(" (throws an error)."),fur=l(),yt=a("div"),F(E9.$$.fragment),mur=l(),Nbe=a("p"),gur=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hur=l(),Yd=a("p"),pur=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),_ur=o("not"),uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),bur=o("from_pretrained()"),vur=o(" to load the model weights."),Fur=l(),F(WF.$$.fragment),Tur=l(),bo=a("div"),F(C9.$$.fragment),Mur=l(),jbe=a("p"),Eur=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Cur=l(),on=a("p"),wur=o("The model class to instantiate is selected based on the "),Dbe=a("code"),Aur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),yur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),Vbe=a("ul"),HF=a("li"),Xbe=a("strong"),Rur=o("detr"),Pur=o(" \u2014 "),PH=a("a"),Bur=o("DetrForSegmentation"),Iur=o(" (DETR model)"),Nur=l(),UF=a("p"),qur=o("The model is set in evaluation mode by default using "),zbe=a("code"),jur=o("model.eval()"),Dur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),Gur=o("model.train()"),Our=l(),F(JF.$$.fragment),uXe=l(),Kd=a("h2"),YF=a("a"),Wbe=a("span"),F(w9.$$.fragment),Vur=l(),Hbe=a("span"),Xur=o("AutoModelForSemanticSegmentation"),bXe=l(),Ko=a("div"),F(A9.$$.fragment),zur=l(),Zd=a("p"),Qur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),BH=a("a"),Wur=o("from_pretrained()"),Hur=o(" class method or the "),IH=a("a"),Uur=o("from_config()"),Jur=o(` class
method.`),Yur=l(),L9=a("p"),Kur=o("This class cannot be instantiated directly using "),Ube=a("code"),Zur=o("__init__()"),e1r=o(" (throws an error)."),o1r=l(),xt=a("div"),F(y9.$$.fragment),r1r=l(),Jbe=a("p"),t1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),a1r=l(),ec=a("p"),n1r=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),s1r=o("not"),l1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),i1r=o("from_pretrained()"),d1r=o(" to load the model weights."),c1r=l(),F(KF.$$.fragment),f1r=l(),vo=a("div"),F(x9.$$.fragment),m1r=l(),Kbe=a("p"),g1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),h1r=l(),rn=a("p"),p1r=o("The model class to instantiate is selected based on the "),Zbe=a("code"),_1r=o("model_type"),u1r=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),b1r=o("pretrained_model_name_or_path"),v1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),F1r=o("pretrained_model_name_or_path"),T1r=o(":"),M1r=l(),tn=a("ul"),ZF=a("li"),rve=a("strong"),E1r=o("beit"),C1r=o(" \u2014 "),qH=a("a"),w1r=o("BeitForSemanticSegmentation"),A1r=o(" (BEiT model)"),L1r=l(),eT=a("li"),tve=a("strong"),y1r=o("data2vec-vision"),x1r=o(" \u2014 "),jH=a("a"),$1r=o("Data2VecVisionForSemanticSegmentation"),k1r=o(" (Data2VecVision model)"),S1r=l(),oT=a("li"),ave=a("strong"),R1r=o("dpt"),P1r=o(" \u2014 "),DH=a("a"),B1r=o("DPTForSemanticSegmentation"),I1r=o(" (DPT model)"),N1r=l(),rT=a("li"),nve=a("strong"),q1r=o("segformer"),j1r=o(" \u2014 "),GH=a("a"),D1r=o("SegformerForSemanticSegmentation"),G1r=o(" (SegFormer model)"),O1r=l(),tT=a("p"),V1r=o("The model is set in evaluation mode by default using "),sve=a("code"),X1r=o("model.eval()"),z1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lve=a("code"),Q1r=o("model.train()"),W1r=l(),F(aT.$$.fragment),vXe=l(),oc=a("h2"),nT=a("a"),ive=a("span"),F($9.$$.fragment),H1r=l(),dve=a("span"),U1r=o("AutoModelForInstanceSegmentation"),FXe=l(),Zo=a("div"),F(k9.$$.fragment),J1r=l(),rc=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),OH=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),VH=a("a"),e7r=o("from_config()"),o7r=o(` class
method.`),r7r=l(),S9=a("p"),t7r=o("This class cannot be instantiated directly using "),cve=a("code"),a7r=o("__init__()"),n7r=o(" (throws an error)."),s7r=l(),$t=a("div"),F(R9.$$.fragment),l7r=l(),fve=a("p"),i7r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),d7r=l(),tc=a("p"),c7r=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),f7r=o("not"),m7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),g7r=o("from_pretrained()"),h7r=o(" to load the model weights."),p7r=l(),F(sT.$$.fragment),_7r=l(),Fo=a("div"),F(P9.$$.fragment),u7r=l(),gve=a("p"),b7r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),v7r=l(),an=a("p"),F7r=o("The model class to instantiate is selected based on the "),hve=a("code"),T7r=o("model_type"),M7r=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),E7r=o("pretrained_model_name_or_path"),C7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(":"),L7r=l(),uve=a("ul"),lT=a("li"),bve=a("strong"),y7r=o("maskformer"),x7r=o(" \u2014 "),zH=a("a"),$7r=o("MaskFormerForInstanceSegmentation"),k7r=o(" (MaskFormer model)"),S7r=l(),iT=a("p"),R7r=o("The model is set in evaluation mode by default using "),vve=a("code"),P7r=o("model.eval()"),B7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fve=a("code"),I7r=o("model.train()"),N7r=l(),F(dT.$$.fragment),TXe=l(),ac=a("h2"),cT=a("a"),Tve=a("span"),F(B9.$$.fragment),q7r=l(),Mve=a("span"),j7r=o("TFAutoModel"),MXe=l(),er=a("div"),F(I9.$$.fragment),D7r=l(),nc=a("p"),G7r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QH=a("a"),O7r=o("from_pretrained()"),V7r=o(" class method or the "),WH=a("a"),X7r=o("from_config()"),z7r=o(` class
method.`),Q7r=l(),N9=a("p"),W7r=o("This class cannot be instantiated directly using "),Eve=a("code"),H7r=o("__init__()"),U7r=o(" (throws an error)."),J7r=l(),kt=a("div"),F(q9.$$.fragment),Y7r=l(),Cve=a("p"),K7r=o("Instantiates one of the base model classes of the library from a configuration."),Z7r=l(),sc=a("p"),e4r=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),o4r=o("not"),r4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),t4r=o("from_pretrained()"),a4r=o(" to load the model weights."),n4r=l(),F(fT.$$.fragment),s4r=l(),yr=a("div"),F(j9.$$.fragment),l4r=l(),Ave=a("p"),i4r=o("Instantiate one of the base model classes of the library from a pretrained model."),d4r=l(),nn=a("p"),c4r=o("The model class to instantiate is selected based on the "),Lve=a("code"),f4r=o("model_type"),m4r=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),g4r=o("pretrained_model_name_or_path"),h4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),p4r=o("pretrained_model_name_or_path"),_4r=o(":"),u4r=l(),j=a("ul"),mT=a("li"),$ve=a("strong"),b4r=o("albert"),v4r=o(" \u2014 "),UH=a("a"),F4r=o("TFAlbertModel"),T4r=o(" (ALBERT model)"),M4r=l(),gT=a("li"),kve=a("strong"),E4r=o("bart"),C4r=o(" \u2014 "),JH=a("a"),w4r=o("TFBartModel"),A4r=o(" (BART model)"),L4r=l(),hT=a("li"),Sve=a("strong"),y4r=o("bert"),x4r=o(" \u2014 "),YH=a("a"),$4r=o("TFBertModel"),k4r=o(" (BERT model)"),S4r=l(),pT=a("li"),Rve=a("strong"),R4r=o("blenderbot"),P4r=o(" \u2014 "),KH=a("a"),B4r=o("TFBlenderbotModel"),I4r=o(" (Blenderbot model)"),N4r=l(),_T=a("li"),Pve=a("strong"),q4r=o("blenderbot-small"),j4r=o(" \u2014 "),ZH=a("a"),D4r=o("TFBlenderbotSmallModel"),G4r=o(" (BlenderbotSmall model)"),O4r=l(),uT=a("li"),Bve=a("strong"),V4r=o("camembert"),X4r=o(" \u2014 "),eU=a("a"),z4r=o("TFCamembertModel"),Q4r=o(" (CamemBERT model)"),W4r=l(),bT=a("li"),Ive=a("strong"),H4r=o("clip"),U4r=o(" \u2014 "),oU=a("a"),J4r=o("TFCLIPModel"),Y4r=o(" (CLIP model)"),K4r=l(),vT=a("li"),Nve=a("strong"),Z4r=o("convbert"),e2r=o(" \u2014 "),rU=a("a"),o2r=o("TFConvBertModel"),r2r=o(" (ConvBERT model)"),t2r=l(),FT=a("li"),qve=a("strong"),a2r=o("convnext"),n2r=o(" \u2014 "),tU=a("a"),s2r=o("TFConvNextModel"),l2r=o(" (ConvNeXT model)"),i2r=l(),TT=a("li"),jve=a("strong"),d2r=o("ctrl"),c2r=o(" \u2014 "),aU=a("a"),f2r=o("TFCTRLModel"),m2r=o(" (CTRL model)"),g2r=l(),MT=a("li"),Dve=a("strong"),h2r=o("data2vec-vision"),p2r=o(" \u2014 "),nU=a("a"),_2r=o("TFData2VecVisionModel"),u2r=o(" (Data2VecVision model)"),b2r=l(),ET=a("li"),Gve=a("strong"),v2r=o("deberta"),F2r=o(" \u2014 "),sU=a("a"),T2r=o("TFDebertaModel"),M2r=o(" (DeBERTa model)"),E2r=l(),CT=a("li"),Ove=a("strong"),C2r=o("deberta-v2"),w2r=o(" \u2014 "),lU=a("a"),A2r=o("TFDebertaV2Model"),L2r=o(" (DeBERTa-v2 model)"),y2r=l(),wT=a("li"),Vve=a("strong"),x2r=o("distilbert"),$2r=o(" \u2014 "),iU=a("a"),k2r=o("TFDistilBertModel"),S2r=o(" (DistilBERT model)"),R2r=l(),AT=a("li"),Xve=a("strong"),P2r=o("dpr"),B2r=o(" \u2014 "),dU=a("a"),I2r=o("TFDPRQuestionEncoder"),N2r=o(" (DPR model)"),q2r=l(),LT=a("li"),zve=a("strong"),j2r=o("electra"),D2r=o(" \u2014 "),cU=a("a"),G2r=o("TFElectraModel"),O2r=o(" (ELECTRA model)"),V2r=l(),yT=a("li"),Qve=a("strong"),X2r=o("flaubert"),z2r=o(" \u2014 "),fU=a("a"),Q2r=o("TFFlaubertModel"),W2r=o(" (FlauBERT model)"),H2r=l(),Us=a("li"),Wve=a("strong"),U2r=o("funnel"),J2r=o(" \u2014 "),mU=a("a"),Y2r=o("TFFunnelModel"),K2r=o(" or "),gU=a("a"),Z2r=o("TFFunnelBaseModel"),ebr=o(" (Funnel Transformer model)"),obr=l(),xT=a("li"),Hve=a("strong"),rbr=o("gpt2"),tbr=o(" \u2014 "),hU=a("a"),abr=o("TFGPT2Model"),nbr=o(" (OpenAI GPT-2 model)"),sbr=l(),$T=a("li"),Uve=a("strong"),lbr=o("gptj"),ibr=o(" \u2014 "),pU=a("a"),dbr=o("TFGPTJModel"),cbr=o(" (GPT-J model)"),fbr=l(),kT=a("li"),Jve=a("strong"),mbr=o("hubert"),gbr=o(" \u2014 "),_U=a("a"),hbr=o("TFHubertModel"),pbr=o(" (Hubert model)"),_br=l(),ST=a("li"),Yve=a("strong"),ubr=o("layoutlm"),bbr=o(" \u2014 "),uU=a("a"),vbr=o("TFLayoutLMModel"),Fbr=o(" (LayoutLM model)"),Tbr=l(),RT=a("li"),Kve=a("strong"),Mbr=o("led"),Ebr=o(" \u2014 "),bU=a("a"),Cbr=o("TFLEDModel"),wbr=o(" (LED model)"),Abr=l(),PT=a("li"),Zve=a("strong"),Lbr=o("longformer"),ybr=o(" \u2014 "),vU=a("a"),xbr=o("TFLongformerModel"),$br=o(" (Longformer model)"),kbr=l(),BT=a("li"),e3e=a("strong"),Sbr=o("lxmert"),Rbr=o(" \u2014 "),FU=a("a"),Pbr=o("TFLxmertModel"),Bbr=o(" (LXMERT model)"),Ibr=l(),IT=a("li"),o3e=a("strong"),Nbr=o("marian"),qbr=o(" \u2014 "),TU=a("a"),jbr=o("TFMarianModel"),Dbr=o(" (Marian model)"),Gbr=l(),NT=a("li"),r3e=a("strong"),Obr=o("mbart"),Vbr=o(" \u2014 "),MU=a("a"),Xbr=o("TFMBartModel"),zbr=o(" (mBART model)"),Qbr=l(),qT=a("li"),t3e=a("strong"),Wbr=o("mobilebert"),Hbr=o(" \u2014 "),EU=a("a"),Ubr=o("TFMobileBertModel"),Jbr=o(" (MobileBERT model)"),Ybr=l(),jT=a("li"),a3e=a("strong"),Kbr=o("mpnet"),Zbr=o(" \u2014 "),CU=a("a"),evr=o("TFMPNetModel"),ovr=o(" (MPNet model)"),rvr=l(),DT=a("li"),n3e=a("strong"),tvr=o("mt5"),avr=o(" \u2014 "),wU=a("a"),nvr=o("TFMT5Model"),svr=o(" (MT5 model)"),lvr=l(),GT=a("li"),s3e=a("strong"),ivr=o("openai-gpt"),dvr=o(" \u2014 "),AU=a("a"),cvr=o("TFOpenAIGPTModel"),fvr=o(" (OpenAI GPT model)"),mvr=l(),OT=a("li"),l3e=a("strong"),gvr=o("opt"),hvr=o(" \u2014 "),LU=a("a"),pvr=o("TFOPTModel"),_vr=o(" (OPT model)"),uvr=l(),VT=a("li"),i3e=a("strong"),bvr=o("pegasus"),vvr=o(" \u2014 "),yU=a("a"),Fvr=o("TFPegasusModel"),Tvr=o(" (Pegasus model)"),Mvr=l(),XT=a("li"),d3e=a("strong"),Evr=o("regnet"),Cvr=o(" \u2014 "),xU=a("a"),wvr=o("TFRegNetModel"),Avr=o(" (RegNet model)"),Lvr=l(),zT=a("li"),c3e=a("strong"),yvr=o("rembert"),xvr=o(" \u2014 "),$U=a("a"),$vr=o("TFRemBertModel"),kvr=o(" (RemBERT model)"),Svr=l(),QT=a("li"),f3e=a("strong"),Rvr=o("roberta"),Pvr=o(" \u2014 "),kU=a("a"),Bvr=o("TFRobertaModel"),Ivr=o(" (RoBERTa model)"),Nvr=l(),WT=a("li"),m3e=a("strong"),qvr=o("roformer"),jvr=o(" \u2014 "),SU=a("a"),Dvr=o("TFRoFormerModel"),Gvr=o(" (RoFormer model)"),Ovr=l(),HT=a("li"),g3e=a("strong"),Vvr=o("speech_to_text"),Xvr=o(" \u2014 "),RU=a("a"),zvr=o("TFSpeech2TextModel"),Qvr=o(" (Speech2Text model)"),Wvr=l(),UT=a("li"),h3e=a("strong"),Hvr=o("swin"),Uvr=o(" \u2014 "),PU=a("a"),Jvr=o("TFSwinModel"),Yvr=o(" (Swin Transformer model)"),Kvr=l(),JT=a("li"),p3e=a("strong"),Zvr=o("t5"),e3r=o(" \u2014 "),BU=a("a"),o3r=o("TFT5Model"),r3r=o(" (T5 model)"),t3r=l(),YT=a("li"),_3e=a("strong"),a3r=o("tapas"),n3r=o(" \u2014 "),IU=a("a"),s3r=o("TFTapasModel"),l3r=o(" (TAPAS model)"),i3r=l(),KT=a("li"),u3e=a("strong"),d3r=o("transfo-xl"),c3r=o(" \u2014 "),NU=a("a"),f3r=o("TFTransfoXLModel"),m3r=o(" (Transformer-XL model)"),g3r=l(),ZT=a("li"),b3e=a("strong"),h3r=o("vit"),p3r=o(" \u2014 "),qU=a("a"),_3r=o("TFViTModel"),u3r=o(" (ViT model)"),b3r=l(),eM=a("li"),v3e=a("strong"),v3r=o("vit_mae"),F3r=o(" \u2014 "),jU=a("a"),T3r=o("TFViTMAEModel"),M3r=o(" (ViTMAE model)"),E3r=l(),oM=a("li"),F3e=a("strong"),C3r=o("wav2vec2"),w3r=o(" \u2014 "),DU=a("a"),A3r=o("TFWav2Vec2Model"),L3r=o(" (Wav2Vec2 model)"),y3r=l(),rM=a("li"),T3e=a("strong"),x3r=o("xlm"),$3r=o(" \u2014 "),GU=a("a"),k3r=o("TFXLMModel"),S3r=o(" (XLM model)"),R3r=l(),tM=a("li"),M3e=a("strong"),P3r=o("xlm-roberta"),B3r=o(" \u2014 "),OU=a("a"),I3r=o("TFXLMRobertaModel"),N3r=o(" (XLM-RoBERTa model)"),q3r=l(),aM=a("li"),E3e=a("strong"),j3r=o("xlnet"),D3r=o(" \u2014 "),VU=a("a"),G3r=o("TFXLNetModel"),O3r=o(" (XLNet model)"),V3r=l(),F(nM.$$.fragment),EXe=l(),lc=a("h2"),sM=a("a"),C3e=a("span"),F(D9.$$.fragment),X3r=l(),w3e=a("span"),z3r=o("TFAutoModelForPreTraining"),CXe=l(),or=a("div"),F(G9.$$.fragment),Q3r=l(),ic=a("p"),W3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XU=a("a"),H3r=o("from_pretrained()"),U3r=o(" class method or the "),zU=a("a"),J3r=o("from_config()"),Y3r=o(` class
method.`),K3r=l(),O9=a("p"),Z3r=o("This class cannot be instantiated directly using "),A3e=a("code"),eFr=o("__init__()"),oFr=o(" (throws an error)."),rFr=l(),St=a("div"),F(V9.$$.fragment),tFr=l(),L3e=a("p"),aFr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nFr=l(),dc=a("p"),sFr=o(`Note:
Loading a model from its configuration file does `),y3e=a("strong"),lFr=o("not"),iFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),dFr=o("from_pretrained()"),cFr=o(" to load the model weights."),fFr=l(),F(lM.$$.fragment),mFr=l(),xr=a("div"),F(X9.$$.fragment),gFr=l(),x3e=a("p"),hFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pFr=l(),sn=a("p"),_Fr=o("The model class to instantiate is selected based on the "),$3e=a("code"),uFr=o("model_type"),bFr=o(` property of the config object (either
passed as an argument or loaded from `),k3e=a("code"),vFr=o("pretrained_model_name_or_path"),FFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=a("code"),TFr=o("pretrained_model_name_or_path"),MFr=o(":"),EFr=l(),se=a("ul"),iM=a("li"),R3e=a("strong"),CFr=o("albert"),wFr=o(" \u2014 "),WU=a("a"),AFr=o("TFAlbertForPreTraining"),LFr=o(" (ALBERT model)"),yFr=l(),dM=a("li"),P3e=a("strong"),xFr=o("bart"),$Fr=o(" \u2014 "),HU=a("a"),kFr=o("TFBartForConditionalGeneration"),SFr=o(" (BART model)"),RFr=l(),cM=a("li"),B3e=a("strong"),PFr=o("bert"),BFr=o(" \u2014 "),UU=a("a"),IFr=o("TFBertForPreTraining"),NFr=o(" (BERT model)"),qFr=l(),fM=a("li"),I3e=a("strong"),jFr=o("camembert"),DFr=o(" \u2014 "),JU=a("a"),GFr=o("TFCamembertForMaskedLM"),OFr=o(" (CamemBERT model)"),VFr=l(),mM=a("li"),N3e=a("strong"),XFr=o("ctrl"),zFr=o(" \u2014 "),YU=a("a"),QFr=o("TFCTRLLMHeadModel"),WFr=o(" (CTRL model)"),HFr=l(),gM=a("li"),q3e=a("strong"),UFr=o("distilbert"),JFr=o(" \u2014 "),KU=a("a"),YFr=o("TFDistilBertForMaskedLM"),KFr=o(" (DistilBERT model)"),ZFr=l(),hM=a("li"),j3e=a("strong"),eTr=o("electra"),oTr=o(" \u2014 "),ZU=a("a"),rTr=o("TFElectraForPreTraining"),tTr=o(" (ELECTRA model)"),aTr=l(),pM=a("li"),D3e=a("strong"),nTr=o("flaubert"),sTr=o(" \u2014 "),eJ=a("a"),lTr=o("TFFlaubertWithLMHeadModel"),iTr=o(" (FlauBERT model)"),dTr=l(),_M=a("li"),G3e=a("strong"),cTr=o("funnel"),fTr=o(" \u2014 "),oJ=a("a"),mTr=o("TFFunnelForPreTraining"),gTr=o(" (Funnel Transformer model)"),hTr=l(),uM=a("li"),O3e=a("strong"),pTr=o("gpt2"),_Tr=o(" \u2014 "),rJ=a("a"),uTr=o("TFGPT2LMHeadModel"),bTr=o(" (OpenAI GPT-2 model)"),vTr=l(),bM=a("li"),V3e=a("strong"),FTr=o("layoutlm"),TTr=o(" \u2014 "),tJ=a("a"),MTr=o("TFLayoutLMForMaskedLM"),ETr=o(" (LayoutLM model)"),CTr=l(),vM=a("li"),X3e=a("strong"),wTr=o("lxmert"),ATr=o(" \u2014 "),aJ=a("a"),LTr=o("TFLxmertForPreTraining"),yTr=o(" (LXMERT model)"),xTr=l(),FM=a("li"),z3e=a("strong"),$Tr=o("mobilebert"),kTr=o(" \u2014 "),nJ=a("a"),STr=o("TFMobileBertForPreTraining"),RTr=o(" (MobileBERT model)"),PTr=l(),TM=a("li"),Q3e=a("strong"),BTr=o("mpnet"),ITr=o(" \u2014 "),sJ=a("a"),NTr=o("TFMPNetForMaskedLM"),qTr=o(" (MPNet model)"),jTr=l(),MM=a("li"),W3e=a("strong"),DTr=o("openai-gpt"),GTr=o(" \u2014 "),lJ=a("a"),OTr=o("TFOpenAIGPTLMHeadModel"),VTr=o(" (OpenAI GPT model)"),XTr=l(),EM=a("li"),H3e=a("strong"),zTr=o("roberta"),QTr=o(" \u2014 "),iJ=a("a"),WTr=o("TFRobertaForMaskedLM"),HTr=o(" (RoBERTa model)"),UTr=l(),CM=a("li"),U3e=a("strong"),JTr=o("t5"),YTr=o(" \u2014 "),dJ=a("a"),KTr=o("TFT5ForConditionalGeneration"),ZTr=o(" (T5 model)"),eMr=l(),wM=a("li"),J3e=a("strong"),oMr=o("tapas"),rMr=o(" \u2014 "),cJ=a("a"),tMr=o("TFTapasForMaskedLM"),aMr=o(" (TAPAS model)"),nMr=l(),AM=a("li"),Y3e=a("strong"),sMr=o("transfo-xl"),lMr=o(" \u2014 "),fJ=a("a"),iMr=o("TFTransfoXLLMHeadModel"),dMr=o(" (Transformer-XL model)"),cMr=l(),LM=a("li"),K3e=a("strong"),fMr=o("vit_mae"),mMr=o(" \u2014 "),mJ=a("a"),gMr=o("TFViTMAEForPreTraining"),hMr=o(" (ViTMAE model)"),pMr=l(),yM=a("li"),Z3e=a("strong"),_Mr=o("xlm"),uMr=o(" \u2014 "),gJ=a("a"),bMr=o("TFXLMWithLMHeadModel"),vMr=o(" (XLM model)"),FMr=l(),xM=a("li"),eFe=a("strong"),TMr=o("xlm-roberta"),MMr=o(" \u2014 "),hJ=a("a"),EMr=o("TFXLMRobertaForMaskedLM"),CMr=o(" (XLM-RoBERTa model)"),wMr=l(),$M=a("li"),oFe=a("strong"),AMr=o("xlnet"),LMr=o(" \u2014 "),pJ=a("a"),yMr=o("TFXLNetLMHeadModel"),xMr=o(" (XLNet model)"),$Mr=l(),F(kM.$$.fragment),wXe=l(),cc=a("h2"),SM=a("a"),rFe=a("span"),F(z9.$$.fragment),kMr=l(),tFe=a("span"),SMr=o("TFAutoModelForCausalLM"),AXe=l(),rr=a("div"),F(Q9.$$.fragment),RMr=l(),fc=a("p"),PMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_J=a("a"),BMr=o("from_pretrained()"),IMr=o(" class method or the "),uJ=a("a"),NMr=o("from_config()"),qMr=o(` class
method.`),jMr=l(),W9=a("p"),DMr=o("This class cannot be instantiated directly using "),aFe=a("code"),GMr=o("__init__()"),OMr=o(" (throws an error)."),VMr=l(),Rt=a("div"),F(H9.$$.fragment),XMr=l(),nFe=a("p"),zMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QMr=l(),mc=a("p"),WMr=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),HMr=o("not"),UMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),JMr=o("from_pretrained()"),YMr=o(" to load the model weights."),KMr=l(),F(RM.$$.fragment),ZMr=l(),$r=a("div"),F(U9.$$.fragment),eEr=l(),lFe=a("p"),oEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rEr=l(),ln=a("p"),tEr=o("The model class to instantiate is selected based on the "),iFe=a("code"),aEr=o("model_type"),nEr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(":"),cEr=l(),Me=a("ul"),PM=a("li"),fFe=a("strong"),fEr=o("bert"),mEr=o(" \u2014 "),vJ=a("a"),gEr=o("TFBertLMHeadModel"),hEr=o(" (BERT model)"),pEr=l(),BM=a("li"),mFe=a("strong"),_Er=o("camembert"),uEr=o(" \u2014 "),FJ=a("a"),bEr=o("TFCamembertForCausalLM"),vEr=o(" (CamemBERT model)"),FEr=l(),IM=a("li"),gFe=a("strong"),TEr=o("ctrl"),MEr=o(" \u2014 "),TJ=a("a"),EEr=o("TFCTRLLMHeadModel"),CEr=o(" (CTRL model)"),wEr=l(),NM=a("li"),hFe=a("strong"),AEr=o("gpt2"),LEr=o(" \u2014 "),MJ=a("a"),yEr=o("TFGPT2LMHeadModel"),xEr=o(" (OpenAI GPT-2 model)"),$Er=l(),qM=a("li"),pFe=a("strong"),kEr=o("gptj"),SEr=o(" \u2014 "),EJ=a("a"),REr=o("TFGPTJForCausalLM"),PEr=o(" (GPT-J model)"),BEr=l(),jM=a("li"),_Fe=a("strong"),IEr=o("openai-gpt"),NEr=o(" \u2014 "),CJ=a("a"),qEr=o("TFOpenAIGPTLMHeadModel"),jEr=o(" (OpenAI GPT model)"),DEr=l(),DM=a("li"),uFe=a("strong"),GEr=o("opt"),OEr=o(" \u2014 "),wJ=a("a"),VEr=o("TFOPTForCausalLM"),XEr=o(" (OPT model)"),zEr=l(),GM=a("li"),bFe=a("strong"),QEr=o("rembert"),WEr=o(" \u2014 "),AJ=a("a"),HEr=o("TFRemBertForCausalLM"),UEr=o(" (RemBERT model)"),JEr=l(),OM=a("li"),vFe=a("strong"),YEr=o("roberta"),KEr=o(" \u2014 "),LJ=a("a"),ZEr=o("TFRobertaForCausalLM"),eCr=o(" (RoBERTa model)"),oCr=l(),VM=a("li"),FFe=a("strong"),rCr=o("roformer"),tCr=o(" \u2014 "),yJ=a("a"),aCr=o("TFRoFormerForCausalLM"),nCr=o(" (RoFormer model)"),sCr=l(),XM=a("li"),TFe=a("strong"),lCr=o("transfo-xl"),iCr=o(" \u2014 "),xJ=a("a"),dCr=o("TFTransfoXLLMHeadModel"),cCr=o(" (Transformer-XL model)"),fCr=l(),zM=a("li"),MFe=a("strong"),mCr=o("xlm"),gCr=o(" \u2014 "),$J=a("a"),hCr=o("TFXLMWithLMHeadModel"),pCr=o(" (XLM model)"),_Cr=l(),QM=a("li"),EFe=a("strong"),uCr=o("xlnet"),bCr=o(" \u2014 "),kJ=a("a"),vCr=o("TFXLNetLMHeadModel"),FCr=o(" (XLNet model)"),TCr=l(),F(WM.$$.fragment),LXe=l(),gc=a("h2"),HM=a("a"),CFe=a("span"),F(J9.$$.fragment),MCr=l(),wFe=a("span"),ECr=o("TFAutoModelForImageClassification"),yXe=l(),tr=a("div"),F(Y9.$$.fragment),CCr=l(),hc=a("p"),wCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SJ=a("a"),ACr=o("from_pretrained()"),LCr=o(" class method or the "),RJ=a("a"),yCr=o("from_config()"),xCr=o(` class
method.`),$Cr=l(),K9=a("p"),kCr=o("This class cannot be instantiated directly using "),AFe=a("code"),SCr=o("__init__()"),RCr=o(" (throws an error)."),PCr=l(),Pt=a("div"),F(Z9.$$.fragment),BCr=l(),LFe=a("p"),ICr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NCr=l(),pc=a("p"),qCr=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),jCr=o("not"),DCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),GCr=o("from_pretrained()"),OCr=o(" to load the model weights."),VCr=l(),F(UM.$$.fragment),XCr=l(),kr=a("div"),F(ex.$$.fragment),zCr=l(),xFe=a("p"),QCr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WCr=l(),dn=a("p"),HCr=o("The model class to instantiate is selected based on the "),$Fe=a("code"),UCr=o("model_type"),JCr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),ZCr=o("pretrained_model_name_or_path"),e5r=o(":"),o5r=l(),rt=a("ul"),JM=a("li"),RFe=a("strong"),r5r=o("convnext"),t5r=o(" \u2014 "),BJ=a("a"),a5r=o("TFConvNextForImageClassification"),n5r=o(" (ConvNeXT model)"),s5r=l(),YM=a("li"),PFe=a("strong"),l5r=o("data2vec-vision"),i5r=o(" \u2014 "),IJ=a("a"),d5r=o("TFData2VecVisionForImageClassification"),c5r=o(" (Data2VecVision model)"),f5r=l(),KM=a("li"),BFe=a("strong"),m5r=o("regnet"),g5r=o(" \u2014 "),NJ=a("a"),h5r=o("TFRegNetForImageClassification"),p5r=o(" (RegNet model)"),_5r=l(),ZM=a("li"),IFe=a("strong"),u5r=o("swin"),b5r=o(" \u2014 "),qJ=a("a"),v5r=o("TFSwinForImageClassification"),F5r=o(" (Swin Transformer model)"),T5r=l(),eE=a("li"),NFe=a("strong"),M5r=o("vit"),E5r=o(" \u2014 "),jJ=a("a"),C5r=o("TFViTForImageClassification"),w5r=o(" (ViT model)"),A5r=l(),F(oE.$$.fragment),xXe=l(),_c=a("h2"),rE=a("a"),qFe=a("span"),F(ox.$$.fragment),L5r=l(),jFe=a("span"),y5r=o("TFAutoModelForMaskedLM"),$Xe=l(),ar=a("div"),F(rx.$$.fragment),x5r=l(),uc=a("p"),$5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DJ=a("a"),k5r=o("from_pretrained()"),S5r=o(" class method or the "),GJ=a("a"),R5r=o("from_config()"),P5r=o(` class
method.`),B5r=l(),tx=a("p"),I5r=o("This class cannot be instantiated directly using "),DFe=a("code"),N5r=o("__init__()"),q5r=o(" (throws an error)."),j5r=l(),Bt=a("div"),F(ax.$$.fragment),D5r=l(),GFe=a("p"),G5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O5r=l(),bc=a("p"),V5r=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),X5r=o("not"),z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),Q5r=o("from_pretrained()"),W5r=o(" to load the model weights."),H5r=l(),F(tE.$$.fragment),U5r=l(),Sr=a("div"),F(nx.$$.fragment),J5r=l(),VFe=a("p"),Y5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K5r=l(),cn=a("p"),Z5r=o("The model class to instantiate is selected based on the "),XFe=a("code"),e0r=o("model_type"),o0r=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(":"),s0r=l(),ie=a("ul"),aE=a("li"),WFe=a("strong"),l0r=o("albert"),i0r=o(" \u2014 "),VJ=a("a"),d0r=o("TFAlbertForMaskedLM"),c0r=o(" (ALBERT model)"),f0r=l(),nE=a("li"),HFe=a("strong"),m0r=o("bert"),g0r=o(" \u2014 "),XJ=a("a"),h0r=o("TFBertForMaskedLM"),p0r=o(" (BERT model)"),_0r=l(),sE=a("li"),UFe=a("strong"),u0r=o("camembert"),b0r=o(" \u2014 "),zJ=a("a"),v0r=o("TFCamembertForMaskedLM"),F0r=o(" (CamemBERT model)"),T0r=l(),lE=a("li"),JFe=a("strong"),M0r=o("convbert"),E0r=o(" \u2014 "),QJ=a("a"),C0r=o("TFConvBertForMaskedLM"),w0r=o(" (ConvBERT model)"),A0r=l(),iE=a("li"),YFe=a("strong"),L0r=o("deberta"),y0r=o(" \u2014 "),WJ=a("a"),x0r=o("TFDebertaForMaskedLM"),$0r=o(" (DeBERTa model)"),k0r=l(),dE=a("li"),KFe=a("strong"),S0r=o("deberta-v2"),R0r=o(" \u2014 "),HJ=a("a"),P0r=o("TFDebertaV2ForMaskedLM"),B0r=o(" (DeBERTa-v2 model)"),I0r=l(),cE=a("li"),ZFe=a("strong"),N0r=o("distilbert"),q0r=o(" \u2014 "),UJ=a("a"),j0r=o("TFDistilBertForMaskedLM"),D0r=o(" (DistilBERT model)"),G0r=l(),fE=a("li"),eTe=a("strong"),O0r=o("electra"),V0r=o(" \u2014 "),JJ=a("a"),X0r=o("TFElectraForMaskedLM"),z0r=o(" (ELECTRA model)"),Q0r=l(),mE=a("li"),oTe=a("strong"),W0r=o("flaubert"),H0r=o(" \u2014 "),YJ=a("a"),U0r=o("TFFlaubertWithLMHeadModel"),J0r=o(" (FlauBERT model)"),Y0r=l(),gE=a("li"),rTe=a("strong"),K0r=o("funnel"),Z0r=o(" \u2014 "),KJ=a("a"),ewr=o("TFFunnelForMaskedLM"),owr=o(" (Funnel Transformer model)"),rwr=l(),hE=a("li"),tTe=a("strong"),twr=o("layoutlm"),awr=o(" \u2014 "),ZJ=a("a"),nwr=o("TFLayoutLMForMaskedLM"),swr=o(" (LayoutLM model)"),lwr=l(),pE=a("li"),aTe=a("strong"),iwr=o("longformer"),dwr=o(" \u2014 "),eY=a("a"),cwr=o("TFLongformerForMaskedLM"),fwr=o(" (Longformer model)"),mwr=l(),_E=a("li"),nTe=a("strong"),gwr=o("mobilebert"),hwr=o(" \u2014 "),oY=a("a"),pwr=o("TFMobileBertForMaskedLM"),_wr=o(" (MobileBERT model)"),uwr=l(),uE=a("li"),sTe=a("strong"),bwr=o("mpnet"),vwr=o(" \u2014 "),rY=a("a"),Fwr=o("TFMPNetForMaskedLM"),Twr=o(" (MPNet model)"),Mwr=l(),bE=a("li"),lTe=a("strong"),Ewr=o("rembert"),Cwr=o(" \u2014 "),tY=a("a"),wwr=o("TFRemBertForMaskedLM"),Awr=o(" (RemBERT model)"),Lwr=l(),vE=a("li"),iTe=a("strong"),ywr=o("roberta"),xwr=o(" \u2014 "),aY=a("a"),$wr=o("TFRobertaForMaskedLM"),kwr=o(" (RoBERTa model)"),Swr=l(),FE=a("li"),dTe=a("strong"),Rwr=o("roformer"),Pwr=o(" \u2014 "),nY=a("a"),Bwr=o("TFRoFormerForMaskedLM"),Iwr=o(" (RoFormer model)"),Nwr=l(),TE=a("li"),cTe=a("strong"),qwr=o("tapas"),jwr=o(" \u2014 "),sY=a("a"),Dwr=o("TFTapasForMaskedLM"),Gwr=o(" (TAPAS model)"),Owr=l(),ME=a("li"),fTe=a("strong"),Vwr=o("xlm"),Xwr=o(" \u2014 "),lY=a("a"),zwr=o("TFXLMWithLMHeadModel"),Qwr=o(" (XLM model)"),Wwr=l(),EE=a("li"),mTe=a("strong"),Hwr=o("xlm-roberta"),Uwr=o(" \u2014 "),iY=a("a"),Jwr=o("TFXLMRobertaForMaskedLM"),Ywr=o(" (XLM-RoBERTa model)"),Kwr=l(),F(CE.$$.fragment),kXe=l(),vc=a("h2"),wE=a("a"),gTe=a("span"),F(sx.$$.fragment),Zwr=l(),hTe=a("span"),eAr=o("TFAutoModelForSeq2SeqLM"),SXe=l(),nr=a("div"),F(lx.$$.fragment),oAr=l(),Fc=a("p"),rAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=a("a"),tAr=o("from_pretrained()"),aAr=o(" class method or the "),cY=a("a"),nAr=o("from_config()"),sAr=o(` class
method.`),lAr=l(),ix=a("p"),iAr=o("This class cannot be instantiated directly using "),pTe=a("code"),dAr=o("__init__()"),cAr=o(" (throws an error)."),fAr=l(),It=a("div"),F(dx.$$.fragment),mAr=l(),_Te=a("p"),gAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hAr=l(),Tc=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),_Ar=o("not"),uAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),bAr=o("from_pretrained()"),vAr=o(" to load the model weights."),FAr=l(),F(AE.$$.fragment),TAr=l(),Rr=a("div"),F(cx.$$.fragment),MAr=l(),bTe=a("p"),EAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CAr=l(),fn=a("p"),wAr=o("The model class to instantiate is selected based on the "),vTe=a("code"),AAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),yAr=o("pretrained_model_name_or_path"),xAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),$Ar=o("pretrained_model_name_or_path"),kAr=o(":"),SAr=l(),ye=a("ul"),LE=a("li"),MTe=a("strong"),RAr=o("bart"),PAr=o(" \u2014 "),mY=a("a"),BAr=o("TFBartForConditionalGeneration"),IAr=o(" (BART model)"),NAr=l(),yE=a("li"),ETe=a("strong"),qAr=o("blenderbot"),jAr=o(" \u2014 "),gY=a("a"),DAr=o("TFBlenderbotForConditionalGeneration"),GAr=o(" (Blenderbot model)"),OAr=l(),xE=a("li"),CTe=a("strong"),VAr=o("blenderbot-small"),XAr=o(" \u2014 "),hY=a("a"),zAr=o("TFBlenderbotSmallForConditionalGeneration"),QAr=o(" (BlenderbotSmall model)"),WAr=l(),$E=a("li"),wTe=a("strong"),HAr=o("encoder-decoder"),UAr=o(" \u2014 "),pY=a("a"),JAr=o("TFEncoderDecoderModel"),YAr=o(" (Encoder decoder model)"),KAr=l(),kE=a("li"),ATe=a("strong"),ZAr=o("led"),e6r=o(" \u2014 "),_Y=a("a"),o6r=o("TFLEDForConditionalGeneration"),r6r=o(" (LED model)"),t6r=l(),SE=a("li"),LTe=a("strong"),a6r=o("marian"),n6r=o(" \u2014 "),uY=a("a"),s6r=o("TFMarianMTModel"),l6r=o(" (Marian model)"),i6r=l(),RE=a("li"),yTe=a("strong"),d6r=o("mbart"),c6r=o(" \u2014 "),bY=a("a"),f6r=o("TFMBartForConditionalGeneration"),m6r=o(" (mBART model)"),g6r=l(),PE=a("li"),xTe=a("strong"),h6r=o("mt5"),p6r=o(" \u2014 "),vY=a("a"),_6r=o("TFMT5ForConditionalGeneration"),u6r=o(" (MT5 model)"),b6r=l(),BE=a("li"),$Te=a("strong"),v6r=o("pegasus"),F6r=o(" \u2014 "),FY=a("a"),T6r=o("TFPegasusForConditionalGeneration"),M6r=o(" (Pegasus model)"),E6r=l(),IE=a("li"),kTe=a("strong"),C6r=o("t5"),w6r=o(" \u2014 "),TY=a("a"),A6r=o("TFT5ForConditionalGeneration"),L6r=o(" (T5 model)"),y6r=l(),F(NE.$$.fragment),RXe=l(),Mc=a("h2"),qE=a("a"),STe=a("span"),F(fx.$$.fragment),x6r=l(),RTe=a("span"),$6r=o("TFAutoModelForSequenceClassification"),PXe=l(),sr=a("div"),F(mx.$$.fragment),k6r=l(),Ec=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MY=a("a"),R6r=o("from_pretrained()"),P6r=o(" class method or the "),EY=a("a"),B6r=o("from_config()"),I6r=o(` class
method.`),N6r=l(),gx=a("p"),q6r=o("This class cannot be instantiated directly using "),PTe=a("code"),j6r=o("__init__()"),D6r=o(" (throws an error)."),G6r=l(),Nt=a("div"),F(hx.$$.fragment),O6r=l(),BTe=a("p"),V6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X6r=l(),Cc=a("p"),z6r=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),Q6r=o("not"),W6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),H6r=o("from_pretrained()"),U6r=o(" to load the model weights."),J6r=l(),F(jE.$$.fragment),Y6r=l(),Pr=a("div"),F(px.$$.fragment),K6r=l(),NTe=a("p"),Z6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eLr=l(),mn=a("p"),oLr=o("The model class to instantiate is selected based on the "),qTe=a("code"),rLr=o("model_type"),tLr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),sLr=o("pretrained_model_name_or_path"),lLr=o(":"),iLr=l(),te=a("ul"),DE=a("li"),GTe=a("strong"),dLr=o("albert"),cLr=o(" \u2014 "),wY=a("a"),fLr=o("TFAlbertForSequenceClassification"),mLr=o(" (ALBERT model)"),gLr=l(),GE=a("li"),OTe=a("strong"),hLr=o("bert"),pLr=o(" \u2014 "),AY=a("a"),_Lr=o("TFBertForSequenceClassification"),uLr=o(" (BERT model)"),bLr=l(),OE=a("li"),VTe=a("strong"),vLr=o("camembert"),FLr=o(" \u2014 "),LY=a("a"),TLr=o("TFCamembertForSequenceClassification"),MLr=o(" (CamemBERT model)"),ELr=l(),VE=a("li"),XTe=a("strong"),CLr=o("convbert"),wLr=o(" \u2014 "),yY=a("a"),ALr=o("TFConvBertForSequenceClassification"),LLr=o(" (ConvBERT model)"),yLr=l(),XE=a("li"),zTe=a("strong"),xLr=o("ctrl"),$Lr=o(" \u2014 "),xY=a("a"),kLr=o("TFCTRLForSequenceClassification"),SLr=o(" (CTRL model)"),RLr=l(),zE=a("li"),QTe=a("strong"),PLr=o("deberta"),BLr=o(" \u2014 "),$Y=a("a"),ILr=o("TFDebertaForSequenceClassification"),NLr=o(" (DeBERTa model)"),qLr=l(),QE=a("li"),WTe=a("strong"),jLr=o("deberta-v2"),DLr=o(" \u2014 "),kY=a("a"),GLr=o("TFDebertaV2ForSequenceClassification"),OLr=o(" (DeBERTa-v2 model)"),VLr=l(),WE=a("li"),HTe=a("strong"),XLr=o("distilbert"),zLr=o(" \u2014 "),SY=a("a"),QLr=o("TFDistilBertForSequenceClassification"),WLr=o(" (DistilBERT model)"),HLr=l(),HE=a("li"),UTe=a("strong"),ULr=o("electra"),JLr=o(" \u2014 "),RY=a("a"),YLr=o("TFElectraForSequenceClassification"),KLr=o(" (ELECTRA model)"),ZLr=l(),UE=a("li"),JTe=a("strong"),eyr=o("flaubert"),oyr=o(" \u2014 "),PY=a("a"),ryr=o("TFFlaubertForSequenceClassification"),tyr=o(" (FlauBERT model)"),ayr=l(),JE=a("li"),YTe=a("strong"),nyr=o("funnel"),syr=o(" \u2014 "),BY=a("a"),lyr=o("TFFunnelForSequenceClassification"),iyr=o(" (Funnel Transformer model)"),dyr=l(),YE=a("li"),KTe=a("strong"),cyr=o("gpt2"),fyr=o(" \u2014 "),IY=a("a"),myr=o("TFGPT2ForSequenceClassification"),gyr=o(" (OpenAI GPT-2 model)"),hyr=l(),KE=a("li"),ZTe=a("strong"),pyr=o("gptj"),_yr=o(" \u2014 "),NY=a("a"),uyr=o("TFGPTJForSequenceClassification"),byr=o(" (GPT-J model)"),vyr=l(),ZE=a("li"),eMe=a("strong"),Fyr=o("layoutlm"),Tyr=o(" \u2014 "),qY=a("a"),Myr=o("TFLayoutLMForSequenceClassification"),Eyr=o(" (LayoutLM model)"),Cyr=l(),eC=a("li"),oMe=a("strong"),wyr=o("longformer"),Ayr=o(" \u2014 "),jY=a("a"),Lyr=o("TFLongformerForSequenceClassification"),yyr=o(" (Longformer model)"),xyr=l(),oC=a("li"),rMe=a("strong"),$yr=o("mobilebert"),kyr=o(" \u2014 "),DY=a("a"),Syr=o("TFMobileBertForSequenceClassification"),Ryr=o(" (MobileBERT model)"),Pyr=l(),rC=a("li"),tMe=a("strong"),Byr=o("mpnet"),Iyr=o(" \u2014 "),GY=a("a"),Nyr=o("TFMPNetForSequenceClassification"),qyr=o(" (MPNet model)"),jyr=l(),tC=a("li"),aMe=a("strong"),Dyr=o("openai-gpt"),Gyr=o(" \u2014 "),OY=a("a"),Oyr=o("TFOpenAIGPTForSequenceClassification"),Vyr=o(" (OpenAI GPT model)"),Xyr=l(),aC=a("li"),nMe=a("strong"),zyr=o("rembert"),Qyr=o(" \u2014 "),VY=a("a"),Wyr=o("TFRemBertForSequenceClassification"),Hyr=o(" (RemBERT model)"),Uyr=l(),nC=a("li"),sMe=a("strong"),Jyr=o("roberta"),Yyr=o(" \u2014 "),XY=a("a"),Kyr=o("TFRobertaForSequenceClassification"),Zyr=o(" (RoBERTa model)"),e8r=l(),sC=a("li"),lMe=a("strong"),o8r=o("roformer"),r8r=o(" \u2014 "),zY=a("a"),t8r=o("TFRoFormerForSequenceClassification"),a8r=o(" (RoFormer model)"),n8r=l(),lC=a("li"),iMe=a("strong"),s8r=o("tapas"),l8r=o(" \u2014 "),QY=a("a"),i8r=o("TFTapasForSequenceClassification"),d8r=o(" (TAPAS model)"),c8r=l(),iC=a("li"),dMe=a("strong"),f8r=o("transfo-xl"),m8r=o(" \u2014 "),WY=a("a"),g8r=o("TFTransfoXLForSequenceClassification"),h8r=o(" (Transformer-XL model)"),p8r=l(),dC=a("li"),cMe=a("strong"),_8r=o("xlm"),u8r=o(" \u2014 "),HY=a("a"),b8r=o("TFXLMForSequenceClassification"),v8r=o(" (XLM model)"),F8r=l(),cC=a("li"),fMe=a("strong"),T8r=o("xlm-roberta"),M8r=o(" \u2014 "),UY=a("a"),E8r=o("TFXLMRobertaForSequenceClassification"),C8r=o(" (XLM-RoBERTa model)"),w8r=l(),fC=a("li"),mMe=a("strong"),A8r=o("xlnet"),L8r=o(" \u2014 "),JY=a("a"),y8r=o("TFXLNetForSequenceClassification"),x8r=o(" (XLNet model)"),$8r=l(),F(mC.$$.fragment),BXe=l(),wc=a("h2"),gC=a("a"),gMe=a("span"),F(_x.$$.fragment),k8r=l(),hMe=a("span"),S8r=o("TFAutoModelForMultipleChoice"),IXe=l(),lr=a("div"),F(ux.$$.fragment),R8r=l(),Ac=a("p"),P8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YY=a("a"),B8r=o("from_pretrained()"),I8r=o(" class method or the "),KY=a("a"),N8r=o("from_config()"),q8r=o(` class
method.`),j8r=l(),bx=a("p"),D8r=o("This class cannot be instantiated directly using "),pMe=a("code"),G8r=o("__init__()"),O8r=o(" (throws an error)."),V8r=l(),qt=a("div"),F(vx.$$.fragment),X8r=l(),_Me=a("p"),z8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q8r=l(),Lc=a("p"),W8r=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),H8r=o("not"),U8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),J8r=o("from_pretrained()"),Y8r=o(" to load the model weights."),K8r=l(),F(hC.$$.fragment),Z8r=l(),Br=a("div"),F(Fx.$$.fragment),e9r=l(),bMe=a("p"),o9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r9r=l(),gn=a("p"),t9r=o("The model class to instantiate is selected based on the "),vMe=a("code"),a9r=o("model_type"),n9r=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),s9r=o("pretrained_model_name_or_path"),l9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),i9r=o("pretrained_model_name_or_path"),d9r=o(":"),c9r=l(),_e=a("ul"),pC=a("li"),MMe=a("strong"),f9r=o("albert"),m9r=o(" \u2014 "),eK=a("a"),g9r=o("TFAlbertForMultipleChoice"),h9r=o(" (ALBERT model)"),p9r=l(),_C=a("li"),EMe=a("strong"),_9r=o("bert"),u9r=o(" \u2014 "),oK=a("a"),b9r=o("TFBertForMultipleChoice"),v9r=o(" (BERT model)"),F9r=l(),uC=a("li"),CMe=a("strong"),T9r=o("camembert"),M9r=o(" \u2014 "),rK=a("a"),E9r=o("TFCamembertForMultipleChoice"),C9r=o(" (CamemBERT model)"),w9r=l(),bC=a("li"),wMe=a("strong"),A9r=o("convbert"),L9r=o(" \u2014 "),tK=a("a"),y9r=o("TFConvBertForMultipleChoice"),x9r=o(" (ConvBERT model)"),$9r=l(),vC=a("li"),AMe=a("strong"),k9r=o("distilbert"),S9r=o(" \u2014 "),aK=a("a"),R9r=o("TFDistilBertForMultipleChoice"),P9r=o(" (DistilBERT model)"),B9r=l(),FC=a("li"),LMe=a("strong"),I9r=o("electra"),N9r=o(" \u2014 "),nK=a("a"),q9r=o("TFElectraForMultipleChoice"),j9r=o(" (ELECTRA model)"),D9r=l(),TC=a("li"),yMe=a("strong"),G9r=o("flaubert"),O9r=o(" \u2014 "),sK=a("a"),V9r=o("TFFlaubertForMultipleChoice"),X9r=o(" (FlauBERT model)"),z9r=l(),MC=a("li"),xMe=a("strong"),Q9r=o("funnel"),W9r=o(" \u2014 "),lK=a("a"),H9r=o("TFFunnelForMultipleChoice"),U9r=o(" (Funnel Transformer model)"),J9r=l(),EC=a("li"),$Me=a("strong"),Y9r=o("longformer"),K9r=o(" \u2014 "),iK=a("a"),Z9r=o("TFLongformerForMultipleChoice"),exr=o(" (Longformer model)"),oxr=l(),CC=a("li"),kMe=a("strong"),rxr=o("mobilebert"),txr=o(" \u2014 "),dK=a("a"),axr=o("TFMobileBertForMultipleChoice"),nxr=o(" (MobileBERT model)"),sxr=l(),wC=a("li"),SMe=a("strong"),lxr=o("mpnet"),ixr=o(" \u2014 "),cK=a("a"),dxr=o("TFMPNetForMultipleChoice"),cxr=o(" (MPNet model)"),fxr=l(),AC=a("li"),RMe=a("strong"),mxr=o("rembert"),gxr=o(" \u2014 "),fK=a("a"),hxr=o("TFRemBertForMultipleChoice"),pxr=o(" (RemBERT model)"),_xr=l(),LC=a("li"),PMe=a("strong"),uxr=o("roberta"),bxr=o(" \u2014 "),mK=a("a"),vxr=o("TFRobertaForMultipleChoice"),Fxr=o(" (RoBERTa model)"),Txr=l(),yC=a("li"),BMe=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),gK=a("a"),Cxr=o("TFRoFormerForMultipleChoice"),wxr=o(" (RoFormer model)"),Axr=l(),xC=a("li"),IMe=a("strong"),Lxr=o("xlm"),yxr=o(" \u2014 "),hK=a("a"),xxr=o("TFXLMForMultipleChoice"),$xr=o(" (XLM model)"),kxr=l(),$C=a("li"),NMe=a("strong"),Sxr=o("xlm-roberta"),Rxr=o(" \u2014 "),pK=a("a"),Pxr=o("TFXLMRobertaForMultipleChoice"),Bxr=o(" (XLM-RoBERTa model)"),Ixr=l(),kC=a("li"),qMe=a("strong"),Nxr=o("xlnet"),qxr=o(" \u2014 "),_K=a("a"),jxr=o("TFXLNetForMultipleChoice"),Dxr=o(" (XLNet model)"),Gxr=l(),F(SC.$$.fragment),NXe=l(),yc=a("h2"),RC=a("a"),jMe=a("span"),F(Tx.$$.fragment),Oxr=l(),DMe=a("span"),Vxr=o("TFAutoModelForNextSentencePrediction"),qXe=l(),ir=a("div"),F(Mx.$$.fragment),Xxr=l(),xc=a("p"),zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uK=a("a"),Qxr=o("from_pretrained()"),Wxr=o(" class method or the "),bK=a("a"),Hxr=o("from_config()"),Uxr=o(` class
method.`),Jxr=l(),Ex=a("p"),Yxr=o("This class cannot be instantiated directly using "),GMe=a("code"),Kxr=o("__init__()"),Zxr=o(" (throws an error)."),e$r=l(),jt=a("div"),F(Cx.$$.fragment),o$r=l(),OMe=a("p"),r$r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t$r=l(),$c=a("p"),a$r=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),n$r=o("not"),s$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),l$r=o("from_pretrained()"),i$r=o(" to load the model weights."),d$r=l(),F(PC.$$.fragment),c$r=l(),Ir=a("div"),F(wx.$$.fragment),f$r=l(),XMe=a("p"),m$r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g$r=l(),hn=a("p"),h$r=o("The model class to instantiate is selected based on the "),zMe=a("code"),p$r=o("model_type"),_$r=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),u$r=o("pretrained_model_name_or_path"),b$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),v$r=o("pretrained_model_name_or_path"),F$r=o(":"),T$r=l(),Ax=a("ul"),BC=a("li"),HMe=a("strong"),M$r=o("bert"),E$r=o(" \u2014 "),FK=a("a"),C$r=o("TFBertForNextSentencePrediction"),w$r=o(" (BERT model)"),A$r=l(),IC=a("li"),UMe=a("strong"),L$r=o("mobilebert"),y$r=o(" \u2014 "),TK=a("a"),x$r=o("TFMobileBertForNextSentencePrediction"),$$r=o(" (MobileBERT model)"),k$r=l(),F(NC.$$.fragment),jXe=l(),kc=a("h2"),qC=a("a"),JMe=a("span"),F(Lx.$$.fragment),S$r=l(),YMe=a("span"),R$r=o("TFAutoModelForTableQuestionAnswering"),DXe=l(),dr=a("div"),F(yx.$$.fragment),P$r=l(),Sc=a("p"),B$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MK=a("a"),I$r=o("from_pretrained()"),N$r=o(" class method or the "),EK=a("a"),q$r=o("from_config()"),j$r=o(` class
method.`),D$r=l(),xx=a("p"),G$r=o("This class cannot be instantiated directly using "),KMe=a("code"),O$r=o("__init__()"),V$r=o(" (throws an error)."),X$r=l(),Dt=a("div"),F($x.$$.fragment),z$r=l(),ZMe=a("p"),Q$r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W$r=l(),Rc=a("p"),H$r=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),U$r=o("not"),J$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Y$r=o("from_pretrained()"),K$r=o(" to load the model weights."),Z$r=l(),F(jC.$$.fragment),ekr=l(),Nr=a("div"),F(kx.$$.fragment),okr=l(),oEe=a("p"),rkr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tkr=l(),pn=a("p"),akr=o("The model class to instantiate is selected based on the "),rEe=a("code"),nkr=o("model_type"),skr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(":"),fkr=l(),nEe=a("ul"),DC=a("li"),sEe=a("strong"),mkr=o("tapas"),gkr=o(" \u2014 "),wK=a("a"),hkr=o("TFTapasForQuestionAnswering"),pkr=o(" (TAPAS model)"),_kr=l(),F(GC.$$.fragment),GXe=l(),Pc=a("h2"),OC=a("a"),lEe=a("span"),F(Sx.$$.fragment),ukr=l(),iEe=a("span"),bkr=o("TFAutoModelForTokenClassification"),OXe=l(),cr=a("div"),F(Rx.$$.fragment),vkr=l(),Bc=a("p"),Fkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AK=a("a"),Tkr=o("from_pretrained()"),Mkr=o(" class method or the "),LK=a("a"),Ekr=o("from_config()"),Ckr=o(` class
method.`),wkr=l(),Px=a("p"),Akr=o("This class cannot be instantiated directly using "),dEe=a("code"),Lkr=o("__init__()"),ykr=o(" (throws an error)."),xkr=l(),Gt=a("div"),F(Bx.$$.fragment),$kr=l(),cEe=a("p"),kkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Skr=l(),Ic=a("p"),Rkr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),Pkr=o("not"),Bkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),Ikr=o("from_pretrained()"),Nkr=o(" to load the model weights."),qkr=l(),F(VC.$$.fragment),jkr=l(),qr=a("div"),F(Ix.$$.fragment),Dkr=l(),mEe=a("p"),Gkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Okr=l(),_n=a("p"),Vkr=o("The model class to instantiate is selected based on the "),gEe=a("code"),Xkr=o("model_type"),zkr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(":"),Jkr=l(),de=a("ul"),XC=a("li"),_Ee=a("strong"),Ykr=o("albert"),Kkr=o(" \u2014 "),xK=a("a"),Zkr=o("TFAlbertForTokenClassification"),eSr=o(" (ALBERT model)"),oSr=l(),zC=a("li"),uEe=a("strong"),rSr=o("bert"),tSr=o(" \u2014 "),$K=a("a"),aSr=o("TFBertForTokenClassification"),nSr=o(" (BERT model)"),sSr=l(),QC=a("li"),bEe=a("strong"),lSr=o("camembert"),iSr=o(" \u2014 "),kK=a("a"),dSr=o("TFCamembertForTokenClassification"),cSr=o(" (CamemBERT model)"),fSr=l(),WC=a("li"),vEe=a("strong"),mSr=o("convbert"),gSr=o(" \u2014 "),SK=a("a"),hSr=o("TFConvBertForTokenClassification"),pSr=o(" (ConvBERT model)"),_Sr=l(),HC=a("li"),FEe=a("strong"),uSr=o("deberta"),bSr=o(" \u2014 "),RK=a("a"),vSr=o("TFDebertaForTokenClassification"),FSr=o(" (DeBERTa model)"),TSr=l(),UC=a("li"),TEe=a("strong"),MSr=o("deberta-v2"),ESr=o(" \u2014 "),PK=a("a"),CSr=o("TFDebertaV2ForTokenClassification"),wSr=o(" (DeBERTa-v2 model)"),ASr=l(),JC=a("li"),MEe=a("strong"),LSr=o("distilbert"),ySr=o(" \u2014 "),BK=a("a"),xSr=o("TFDistilBertForTokenClassification"),$Sr=o(" (DistilBERT model)"),kSr=l(),YC=a("li"),EEe=a("strong"),SSr=o("electra"),RSr=o(" \u2014 "),IK=a("a"),PSr=o("TFElectraForTokenClassification"),BSr=o(" (ELECTRA model)"),ISr=l(),KC=a("li"),CEe=a("strong"),NSr=o("flaubert"),qSr=o(" \u2014 "),NK=a("a"),jSr=o("TFFlaubertForTokenClassification"),DSr=o(" (FlauBERT model)"),GSr=l(),ZC=a("li"),wEe=a("strong"),OSr=o("funnel"),VSr=o(" \u2014 "),qK=a("a"),XSr=o("TFFunnelForTokenClassification"),zSr=o(" (Funnel Transformer model)"),QSr=l(),e5=a("li"),AEe=a("strong"),WSr=o("layoutlm"),HSr=o(" \u2014 "),jK=a("a"),USr=o("TFLayoutLMForTokenClassification"),JSr=o(" (LayoutLM model)"),YSr=l(),o5=a("li"),LEe=a("strong"),KSr=o("longformer"),ZSr=o(" \u2014 "),DK=a("a"),eRr=o("TFLongformerForTokenClassification"),oRr=o(" (Longformer model)"),rRr=l(),r5=a("li"),yEe=a("strong"),tRr=o("mobilebert"),aRr=o(" \u2014 "),GK=a("a"),nRr=o("TFMobileBertForTokenClassification"),sRr=o(" (MobileBERT model)"),lRr=l(),t5=a("li"),xEe=a("strong"),iRr=o("mpnet"),dRr=o(" \u2014 "),OK=a("a"),cRr=o("TFMPNetForTokenClassification"),fRr=o(" (MPNet model)"),mRr=l(),a5=a("li"),$Ee=a("strong"),gRr=o("rembert"),hRr=o(" \u2014 "),VK=a("a"),pRr=o("TFRemBertForTokenClassification"),_Rr=o(" (RemBERT model)"),uRr=l(),n5=a("li"),kEe=a("strong"),bRr=o("roberta"),vRr=o(" \u2014 "),XK=a("a"),FRr=o("TFRobertaForTokenClassification"),TRr=o(" (RoBERTa model)"),MRr=l(),s5=a("li"),SEe=a("strong"),ERr=o("roformer"),CRr=o(" \u2014 "),zK=a("a"),wRr=o("TFRoFormerForTokenClassification"),ARr=o(" (RoFormer model)"),LRr=l(),l5=a("li"),REe=a("strong"),yRr=o("xlm"),xRr=o(" \u2014 "),QK=a("a"),$Rr=o("TFXLMForTokenClassification"),kRr=o(" (XLM model)"),SRr=l(),i5=a("li"),PEe=a("strong"),RRr=o("xlm-roberta"),PRr=o(" \u2014 "),WK=a("a"),BRr=o("TFXLMRobertaForTokenClassification"),IRr=o(" (XLM-RoBERTa model)"),NRr=l(),d5=a("li"),BEe=a("strong"),qRr=o("xlnet"),jRr=o(" \u2014 "),HK=a("a"),DRr=o("TFXLNetForTokenClassification"),GRr=o(" (XLNet model)"),ORr=l(),F(c5.$$.fragment),VXe=l(),Nc=a("h2"),f5=a("a"),IEe=a("span"),F(Nx.$$.fragment),VRr=l(),NEe=a("span"),XRr=o("TFAutoModelForQuestionAnswering"),XXe=l(),fr=a("div"),F(qx.$$.fragment),zRr=l(),qc=a("p"),QRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UK=a("a"),WRr=o("from_pretrained()"),HRr=o(" class method or the "),JK=a("a"),URr=o("from_config()"),JRr=o(` class
method.`),YRr=l(),jx=a("p"),KRr=o("This class cannot be instantiated directly using "),qEe=a("code"),ZRr=o("__init__()"),ePr=o(" (throws an error)."),oPr=l(),Ot=a("div"),F(Dx.$$.fragment),rPr=l(),jEe=a("p"),tPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aPr=l(),jc=a("p"),nPr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),sPr=o("not"),lPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),iPr=o("from_pretrained()"),dPr=o(" to load the model weights."),cPr=l(),F(m5.$$.fragment),fPr=l(),jr=a("div"),F(Gx.$$.fragment),mPr=l(),GEe=a("p"),gPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hPr=l(),un=a("p"),pPr=o("The model class to instantiate is selected based on the "),OEe=a("code"),_Pr=o("model_type"),uPr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),bPr=o("pretrained_model_name_or_path"),vPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),FPr=o("pretrained_model_name_or_path"),TPr=o(":"),MPr=l(),ce=a("ul"),g5=a("li"),zEe=a("strong"),EPr=o("albert"),CPr=o(" \u2014 "),KK=a("a"),wPr=o("TFAlbertForQuestionAnswering"),APr=o(" (ALBERT model)"),LPr=l(),h5=a("li"),QEe=a("strong"),yPr=o("bert"),xPr=o(" \u2014 "),ZK=a("a"),$Pr=o("TFBertForQuestionAnswering"),kPr=o(" (BERT model)"),SPr=l(),p5=a("li"),WEe=a("strong"),RPr=o("camembert"),PPr=o(" \u2014 "),eZ=a("a"),BPr=o("TFCamembertForQuestionAnswering"),IPr=o(" (CamemBERT model)"),NPr=l(),_5=a("li"),HEe=a("strong"),qPr=o("convbert"),jPr=o(" \u2014 "),oZ=a("a"),DPr=o("TFConvBertForQuestionAnswering"),GPr=o(" (ConvBERT model)"),OPr=l(),u5=a("li"),UEe=a("strong"),VPr=o("deberta"),XPr=o(" \u2014 "),rZ=a("a"),zPr=o("TFDebertaForQuestionAnswering"),QPr=o(" (DeBERTa model)"),WPr=l(),b5=a("li"),JEe=a("strong"),HPr=o("deberta-v2"),UPr=o(" \u2014 "),tZ=a("a"),JPr=o("TFDebertaV2ForQuestionAnswering"),YPr=o(" (DeBERTa-v2 model)"),KPr=l(),v5=a("li"),YEe=a("strong"),ZPr=o("distilbert"),eBr=o(" \u2014 "),aZ=a("a"),oBr=o("TFDistilBertForQuestionAnswering"),rBr=o(" (DistilBERT model)"),tBr=l(),F5=a("li"),KEe=a("strong"),aBr=o("electra"),nBr=o(" \u2014 "),nZ=a("a"),sBr=o("TFElectraForQuestionAnswering"),lBr=o(" (ELECTRA model)"),iBr=l(),T5=a("li"),ZEe=a("strong"),dBr=o("flaubert"),cBr=o(" \u2014 "),sZ=a("a"),fBr=o("TFFlaubertForQuestionAnsweringSimple"),mBr=o(" (FlauBERT model)"),gBr=l(),M5=a("li"),eCe=a("strong"),hBr=o("funnel"),pBr=o(" \u2014 "),lZ=a("a"),_Br=o("TFFunnelForQuestionAnswering"),uBr=o(" (Funnel Transformer model)"),bBr=l(),E5=a("li"),oCe=a("strong"),vBr=o("gptj"),FBr=o(" \u2014 "),iZ=a("a"),TBr=o("TFGPTJForQuestionAnswering"),MBr=o(" (GPT-J model)"),EBr=l(),C5=a("li"),rCe=a("strong"),CBr=o("longformer"),wBr=o(" \u2014 "),dZ=a("a"),ABr=o("TFLongformerForQuestionAnswering"),LBr=o(" (Longformer model)"),yBr=l(),w5=a("li"),tCe=a("strong"),xBr=o("mobilebert"),$Br=o(" \u2014 "),cZ=a("a"),kBr=o("TFMobileBertForQuestionAnswering"),SBr=o(" (MobileBERT model)"),RBr=l(),A5=a("li"),aCe=a("strong"),PBr=o("mpnet"),BBr=o(" \u2014 "),fZ=a("a"),IBr=o("TFMPNetForQuestionAnswering"),NBr=o(" (MPNet model)"),qBr=l(),L5=a("li"),nCe=a("strong"),jBr=o("rembert"),DBr=o(" \u2014 "),mZ=a("a"),GBr=o("TFRemBertForQuestionAnswering"),OBr=o(" (RemBERT model)"),VBr=l(),y5=a("li"),sCe=a("strong"),XBr=o("roberta"),zBr=o(" \u2014 "),gZ=a("a"),QBr=o("TFRobertaForQuestionAnswering"),WBr=o(" (RoBERTa model)"),HBr=l(),x5=a("li"),lCe=a("strong"),UBr=o("roformer"),JBr=o(" \u2014 "),hZ=a("a"),YBr=o("TFRoFormerForQuestionAnswering"),KBr=o(" (RoFormer model)"),ZBr=l(),$5=a("li"),iCe=a("strong"),eIr=o("xlm"),oIr=o(" \u2014 "),pZ=a("a"),rIr=o("TFXLMForQuestionAnsweringSimple"),tIr=o(" (XLM model)"),aIr=l(),k5=a("li"),dCe=a("strong"),nIr=o("xlm-roberta"),sIr=o(" \u2014 "),_Z=a("a"),lIr=o("TFXLMRobertaForQuestionAnswering"),iIr=o(" (XLM-RoBERTa model)"),dIr=l(),S5=a("li"),cCe=a("strong"),cIr=o("xlnet"),fIr=o(" \u2014 "),uZ=a("a"),mIr=o("TFXLNetForQuestionAnsweringSimple"),gIr=o(" (XLNet model)"),hIr=l(),F(R5.$$.fragment),zXe=l(),Dc=a("h2"),P5=a("a"),fCe=a("span"),F(Ox.$$.fragment),pIr=l(),mCe=a("span"),_Ir=o("TFAutoModelForVision2Seq"),QXe=l(),mr=a("div"),F(Vx.$$.fragment),uIr=l(),Gc=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),vZ=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),Xx=a("p"),CIr=o("This class cannot be instantiated directly using "),gCe=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),LIr=l(),Vt=a("div"),F(zx.$$.fragment),yIr=l(),hCe=a("p"),xIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Ir=l(),Oc=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),pCe=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=a("a"),PIr=o("from_pretrained()"),BIr=o(" to load the model weights."),IIr=l(),F(B5.$$.fragment),NIr=l(),Dr=a("div"),F(Qx.$$.fragment),qIr=l(),_Ce=a("p"),jIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DIr=l(),bn=a("p"),GIr=o("The model class to instantiate is selected based on the "),uCe=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),bCe=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=a("code"),QIr=o("pretrained_model_name_or_path"),WIr=o(":"),HIr=l(),FCe=a("ul"),I5=a("li"),TCe=a("strong"),UIr=o("vision-encoder-decoder"),JIr=o(" \u2014 "),TZ=a("a"),YIr=o("TFVisionEncoderDecoderModel"),KIr=o(" (Vision Encoder decoder model)"),ZIr=l(),F(N5.$$.fragment),WXe=l(),Vc=a("h2"),q5=a("a"),MCe=a("span"),F(Wx.$$.fragment),eNr=l(),ECe=a("span"),oNr=o("TFAutoModelForSpeechSeq2Seq"),HXe=l(),gr=a("div"),F(Hx.$$.fragment),rNr=l(),Xc=a("p"),tNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MZ=a("a"),aNr=o("from_pretrained()"),nNr=o(" class method or the "),EZ=a("a"),sNr=o("from_config()"),lNr=o(` class
method.`),iNr=l(),Ux=a("p"),dNr=o("This class cannot be instantiated directly using "),CCe=a("code"),cNr=o("__init__()"),fNr=o(" (throws an error)."),mNr=l(),Xt=a("div"),F(Jx.$$.fragment),gNr=l(),wCe=a("p"),hNr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pNr=l(),zc=a("p"),_Nr=o(`Note:
Loading a model from its configuration file does `),ACe=a("strong"),uNr=o("not"),bNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=a("a"),vNr=o("from_pretrained()"),FNr=o(" to load the model weights."),TNr=l(),F(j5.$$.fragment),MNr=l(),Gr=a("div"),F(Yx.$$.fragment),ENr=l(),LCe=a("p"),CNr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wNr=l(),vn=a("p"),ANr=o("The model class to instantiate is selected based on the "),yCe=a("code"),LNr=o("model_type"),yNr=o(` property of the config object (either
passed as an argument or loaded from `),xCe=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(":"),RNr=l(),kCe=a("ul"),D5=a("li"),SCe=a("strong"),PNr=o("speech_to_text"),BNr=o(" \u2014 "),wZ=a("a"),INr=o("TFSpeech2TextForConditionalGeneration"),NNr=o(" (Speech2Text model)"),qNr=l(),F(G5.$$.fragment),UXe=l(),Qc=a("h2"),O5=a("a"),RCe=a("span"),F(Kx.$$.fragment),jNr=l(),PCe=a("span"),DNr=o("FlaxAutoModel"),JXe=l(),hr=a("div"),F(Zx.$$.fragment),GNr=l(),Wc=a("p"),ONr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AZ=a("a"),VNr=o("from_pretrained()"),XNr=o(" class method or the "),LZ=a("a"),zNr=o("from_config()"),QNr=o(` class
method.`),WNr=l(),e$=a("p"),HNr=o("This class cannot be instantiated directly using "),BCe=a("code"),UNr=o("__init__()"),JNr=o(" (throws an error)."),YNr=l(),zt=a("div"),F(o$.$$.fragment),KNr=l(),ICe=a("p"),ZNr=o("Instantiates one of the base model classes of the library from a configuration."),eqr=l(),Hc=a("p"),oqr=o(`Note:
Loading a model from its configuration file does `),NCe=a("strong"),rqr=o("not"),tqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),aqr=o("from_pretrained()"),nqr=o(" to load the model weights."),sqr=l(),F(V5.$$.fragment),lqr=l(),Or=a("div"),F(r$.$$.fragment),iqr=l(),qCe=a("p"),dqr=o("Instantiate one of the base model classes of the library from a pretrained model."),cqr=l(),Fn=a("p"),fqr=o("The model class to instantiate is selected based on the "),jCe=a("code"),mqr=o("model_type"),gqr=o(` property of the config object (either
passed as an argument or loaded from `),DCe=a("code"),hqr=o("pretrained_model_name_or_path"),pqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=a("code"),_qr=o("pretrained_model_name_or_path"),uqr=o(":"),bqr=l(),oe=a("ul"),X5=a("li"),OCe=a("strong"),vqr=o("albert"),Fqr=o(" \u2014 "),xZ=a("a"),Tqr=o("FlaxAlbertModel"),Mqr=o(" (ALBERT model)"),Eqr=l(),z5=a("li"),VCe=a("strong"),Cqr=o("bart"),wqr=o(" \u2014 "),$Z=a("a"),Aqr=o("FlaxBartModel"),Lqr=o(" (BART model)"),yqr=l(),Q5=a("li"),XCe=a("strong"),xqr=o("beit"),$qr=o(" \u2014 "),kZ=a("a"),kqr=o("FlaxBeitModel"),Sqr=o(" (BEiT model)"),Rqr=l(),W5=a("li"),zCe=a("strong"),Pqr=o("bert"),Bqr=o(" \u2014 "),SZ=a("a"),Iqr=o("FlaxBertModel"),Nqr=o(" (BERT model)"),qqr=l(),H5=a("li"),QCe=a("strong"),jqr=o("big_bird"),Dqr=o(" \u2014 "),RZ=a("a"),Gqr=o("FlaxBigBirdModel"),Oqr=o(" (BigBird model)"),Vqr=l(),U5=a("li"),WCe=a("strong"),Xqr=o("blenderbot"),zqr=o(" \u2014 "),PZ=a("a"),Qqr=o("FlaxBlenderbotModel"),Wqr=o(" (Blenderbot model)"),Hqr=l(),J5=a("li"),HCe=a("strong"),Uqr=o("blenderbot-small"),Jqr=o(" \u2014 "),BZ=a("a"),Yqr=o("FlaxBlenderbotSmallModel"),Kqr=o(" (BlenderbotSmall model)"),Zqr=l(),Y5=a("li"),UCe=a("strong"),ejr=o("clip"),ojr=o(" \u2014 "),IZ=a("a"),rjr=o("FlaxCLIPModel"),tjr=o(" (CLIP model)"),ajr=l(),K5=a("li"),JCe=a("strong"),njr=o("distilbert"),sjr=o(" \u2014 "),NZ=a("a"),ljr=o("FlaxDistilBertModel"),ijr=o(" (DistilBERT model)"),djr=l(),Z5=a("li"),YCe=a("strong"),cjr=o("electra"),fjr=o(" \u2014 "),qZ=a("a"),mjr=o("FlaxElectraModel"),gjr=o(" (ELECTRA model)"),hjr=l(),e0=a("li"),KCe=a("strong"),pjr=o("gpt2"),_jr=o(" \u2014 "),jZ=a("a"),ujr=o("FlaxGPT2Model"),bjr=o(" (OpenAI GPT-2 model)"),vjr=l(),o0=a("li"),ZCe=a("strong"),Fjr=o("gpt_neo"),Tjr=o(" \u2014 "),DZ=a("a"),Mjr=o("FlaxGPTNeoModel"),Ejr=o(" (GPT Neo model)"),Cjr=l(),r0=a("li"),e5e=a("strong"),wjr=o("gptj"),Ajr=o(" \u2014 "),GZ=a("a"),Ljr=o("FlaxGPTJModel"),yjr=o(" (GPT-J model)"),xjr=l(),t0=a("li"),o5e=a("strong"),$jr=o("longt5"),kjr=o(" \u2014 "),OZ=a("a"),Sjr=o("FlaxLongT5Model"),Rjr=o(" (LongT5 model)"),Pjr=l(),a0=a("li"),r5e=a("strong"),Bjr=o("marian"),Ijr=o(" \u2014 "),VZ=a("a"),Njr=o("FlaxMarianModel"),qjr=o(" (Marian model)"),jjr=l(),n0=a("li"),t5e=a("strong"),Djr=o("mbart"),Gjr=o(" \u2014 "),XZ=a("a"),Ojr=o("FlaxMBartModel"),Vjr=o(" (mBART model)"),Xjr=l(),s0=a("li"),a5e=a("strong"),zjr=o("mt5"),Qjr=o(" \u2014 "),zZ=a("a"),Wjr=o("FlaxMT5Model"),Hjr=o(" (MT5 model)"),Ujr=l(),l0=a("li"),n5e=a("strong"),Jjr=o("opt"),Yjr=o(" \u2014 "),QZ=a("a"),Kjr=o("FlaxOPTModel"),Zjr=o(" (OPT model)"),eDr=l(),i0=a("li"),s5e=a("strong"),oDr=o("pegasus"),rDr=o(" \u2014 "),WZ=a("a"),tDr=o("FlaxPegasusModel"),aDr=o(" (Pegasus model)"),nDr=l(),d0=a("li"),l5e=a("strong"),sDr=o("roberta"),lDr=o(" \u2014 "),HZ=a("a"),iDr=o("FlaxRobertaModel"),dDr=o(" (RoBERTa model)"),cDr=l(),c0=a("li"),i5e=a("strong"),fDr=o("roformer"),mDr=o(" \u2014 "),UZ=a("a"),gDr=o("FlaxRoFormerModel"),hDr=o(" (RoFormer model)"),pDr=l(),f0=a("li"),d5e=a("strong"),_Dr=o("t5"),uDr=o(" \u2014 "),JZ=a("a"),bDr=o("FlaxT5Model"),vDr=o(" (T5 model)"),FDr=l(),m0=a("li"),c5e=a("strong"),TDr=o("vision-text-dual-encoder"),MDr=o(" \u2014 "),YZ=a("a"),EDr=o("FlaxVisionTextDualEncoderModel"),CDr=o(" (VisionTextDualEncoder model)"),wDr=l(),g0=a("li"),f5e=a("strong"),ADr=o("vit"),LDr=o(" \u2014 "),KZ=a("a"),yDr=o("FlaxViTModel"),xDr=o(" (ViT model)"),$Dr=l(),h0=a("li"),m5e=a("strong"),kDr=o("wav2vec2"),SDr=o(" \u2014 "),ZZ=a("a"),RDr=o("FlaxWav2Vec2Model"),PDr=o(" (Wav2Vec2 model)"),BDr=l(),p0=a("li"),g5e=a("strong"),IDr=o("xglm"),NDr=o(" \u2014 "),eee=a("a"),qDr=o("FlaxXGLMModel"),jDr=o(" (XGLM model)"),DDr=l(),_0=a("li"),h5e=a("strong"),GDr=o("xlm-roberta"),ODr=o(" \u2014 "),oee=a("a"),VDr=o("FlaxXLMRobertaModel"),XDr=o(" (XLM-RoBERTa model)"),zDr=l(),F(u0.$$.fragment),YXe=l(),Uc=a("h2"),b0=a("a"),p5e=a("span"),F(t$.$$.fragment),QDr=l(),_5e=a("span"),WDr=o("FlaxAutoModelForCausalLM"),KXe=l(),pr=a("div"),F(a$.$$.fragment),HDr=l(),Jc=a("p"),UDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ree=a("a"),JDr=o("from_pretrained()"),YDr=o(" class method or the "),tee=a("a"),KDr=o("from_config()"),ZDr=o(` class
method.`),eGr=l(),n$=a("p"),oGr=o("This class cannot be instantiated directly using "),u5e=a("code"),rGr=o("__init__()"),tGr=o(" (throws an error)."),aGr=l(),Qt=a("div"),F(s$.$$.fragment),nGr=l(),b5e=a("p"),sGr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lGr=l(),Yc=a("p"),iGr=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),dGr=o("not"),cGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),fGr=o("from_pretrained()"),mGr=o(" to load the model weights."),gGr=l(),F(v0.$$.fragment),hGr=l(),Vr=a("div"),F(l$.$$.fragment),pGr=l(),F5e=a("p"),_Gr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uGr=l(),Tn=a("p"),bGr=o("The model class to instantiate is selected based on the "),T5e=a("code"),vGr=o("model_type"),FGr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),TGr=o("pretrained_model_name_or_path"),MGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),EGr=o("pretrained_model_name_or_path"),CGr=o(":"),wGr=l(),xe=a("ul"),F0=a("li"),C5e=a("strong"),AGr=o("bart"),LGr=o(" \u2014 "),nee=a("a"),yGr=o("FlaxBartForCausalLM"),xGr=o(" (BART model)"),$Gr=l(),T0=a("li"),w5e=a("strong"),kGr=o("bert"),SGr=o(" \u2014 "),see=a("a"),RGr=o("FlaxBertForCausalLM"),PGr=o(" (BERT model)"),BGr=l(),M0=a("li"),A5e=a("strong"),IGr=o("big_bird"),NGr=o(" \u2014 "),lee=a("a"),qGr=o("FlaxBigBirdForCausalLM"),jGr=o(" (BigBird model)"),DGr=l(),E0=a("li"),L5e=a("strong"),GGr=o("electra"),OGr=o(" \u2014 "),iee=a("a"),VGr=o("FlaxElectraForCausalLM"),XGr=o(" (ELECTRA model)"),zGr=l(),C0=a("li"),y5e=a("strong"),QGr=o("gpt2"),WGr=o(" \u2014 "),dee=a("a"),HGr=o("FlaxGPT2LMHeadModel"),UGr=o(" (OpenAI GPT-2 model)"),JGr=l(),w0=a("li"),x5e=a("strong"),YGr=o("gpt_neo"),KGr=o(" \u2014 "),cee=a("a"),ZGr=o("FlaxGPTNeoForCausalLM"),eOr=o(" (GPT Neo model)"),oOr=l(),A0=a("li"),$5e=a("strong"),rOr=o("gptj"),tOr=o(" \u2014 "),fee=a("a"),aOr=o("FlaxGPTJForCausalLM"),nOr=o(" (GPT-J model)"),sOr=l(),L0=a("li"),k5e=a("strong"),lOr=o("opt"),iOr=o(" \u2014 "),mee=a("a"),dOr=o("FlaxOPTForCausalLM"),cOr=o(" (OPT model)"),fOr=l(),y0=a("li"),S5e=a("strong"),mOr=o("roberta"),gOr=o(" \u2014 "),gee=a("a"),hOr=o("FlaxRobertaForCausalLM"),pOr=o(" (RoBERTa model)"),_Or=l(),x0=a("li"),R5e=a("strong"),uOr=o("xglm"),bOr=o(" \u2014 "),hee=a("a"),vOr=o("FlaxXGLMForCausalLM"),FOr=o(" (XGLM model)"),TOr=l(),F($0.$$.fragment),ZXe=l(),Kc=a("h2"),k0=a("a"),P5e=a("span"),F(i$.$$.fragment),MOr=l(),B5e=a("span"),EOr=o("FlaxAutoModelForPreTraining"),eze=l(),_r=a("div"),F(d$.$$.fragment),COr=l(),Zc=a("p"),wOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pee=a("a"),AOr=o("from_pretrained()"),LOr=o(" class method or the "),_ee=a("a"),yOr=o("from_config()"),xOr=o(` class
method.`),$Or=l(),c$=a("p"),kOr=o("This class cannot be instantiated directly using "),I5e=a("code"),SOr=o("__init__()"),ROr=o(" (throws an error)."),POr=l(),Wt=a("div"),F(f$.$$.fragment),BOr=l(),N5e=a("p"),IOr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NOr=l(),ef=a("p"),qOr=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),jOr=o("not"),DOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),GOr=o("from_pretrained()"),OOr=o(" to load the model weights."),VOr=l(),F(S0.$$.fragment),XOr=l(),Xr=a("div"),F(m$.$$.fragment),zOr=l(),j5e=a("p"),QOr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WOr=l(),Mn=a("p"),HOr=o("The model class to instantiate is selected based on the "),D5e=a("code"),UOr=o("model_type"),JOr=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),YOr=o("pretrained_model_name_or_path"),KOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=a("code"),ZOr=o("pretrained_model_name_or_path"),eVr=o(":"),oVr=l(),Ee=a("ul"),R0=a("li"),V5e=a("strong"),rVr=o("albert"),tVr=o(" \u2014 "),bee=a("a"),aVr=o("FlaxAlbertForPreTraining"),nVr=o(" (ALBERT model)"),sVr=l(),P0=a("li"),X5e=a("strong"),lVr=o("bart"),iVr=o(" \u2014 "),vee=a("a"),dVr=o("FlaxBartForConditionalGeneration"),cVr=o(" (BART model)"),fVr=l(),B0=a("li"),z5e=a("strong"),mVr=o("bert"),gVr=o(" \u2014 "),Fee=a("a"),hVr=o("FlaxBertForPreTraining"),pVr=o(" (BERT model)"),_Vr=l(),I0=a("li"),Q5e=a("strong"),uVr=o("big_bird"),bVr=o(" \u2014 "),Tee=a("a"),vVr=o("FlaxBigBirdForPreTraining"),FVr=o(" (BigBird model)"),TVr=l(),N0=a("li"),W5e=a("strong"),MVr=o("electra"),EVr=o(" \u2014 "),Mee=a("a"),CVr=o("FlaxElectraForPreTraining"),wVr=o(" (ELECTRA model)"),AVr=l(),q0=a("li"),H5e=a("strong"),LVr=o("longt5"),yVr=o(" \u2014 "),Eee=a("a"),xVr=o("FlaxLongT5ForConditionalGeneration"),$Vr=o(" (LongT5 model)"),kVr=l(),j0=a("li"),U5e=a("strong"),SVr=o("mbart"),RVr=o(" \u2014 "),Cee=a("a"),PVr=o("FlaxMBartForConditionalGeneration"),BVr=o(" (mBART model)"),IVr=l(),D0=a("li"),J5e=a("strong"),NVr=o("mt5"),qVr=o(" \u2014 "),wee=a("a"),jVr=o("FlaxMT5ForConditionalGeneration"),DVr=o(" (MT5 model)"),GVr=l(),G0=a("li"),Y5e=a("strong"),OVr=o("roberta"),VVr=o(" \u2014 "),Aee=a("a"),XVr=o("FlaxRobertaForMaskedLM"),zVr=o(" (RoBERTa model)"),QVr=l(),O0=a("li"),K5e=a("strong"),WVr=o("roformer"),HVr=o(" \u2014 "),Lee=a("a"),UVr=o("FlaxRoFormerForMaskedLM"),JVr=o(" (RoFormer model)"),YVr=l(),V0=a("li"),Z5e=a("strong"),KVr=o("t5"),ZVr=o(" \u2014 "),yee=a("a"),eXr=o("FlaxT5ForConditionalGeneration"),oXr=o(" (T5 model)"),rXr=l(),X0=a("li"),e0e=a("strong"),tXr=o("wav2vec2"),aXr=o(" \u2014 "),xee=a("a"),nXr=o("FlaxWav2Vec2ForPreTraining"),sXr=o(" (Wav2Vec2 model)"),lXr=l(),z0=a("li"),o0e=a("strong"),iXr=o("xlm-roberta"),dXr=o(" \u2014 "),$ee=a("a"),cXr=o("FlaxXLMRobertaForMaskedLM"),fXr=o(" (XLM-RoBERTa model)"),mXr=l(),F(Q0.$$.fragment),oze=l(),of=a("h2"),W0=a("a"),r0e=a("span"),F(g$.$$.fragment),gXr=l(),t0e=a("span"),hXr=o("FlaxAutoModelForMaskedLM"),rze=l(),ur=a("div"),F(h$.$$.fragment),pXr=l(),rf=a("p"),_Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kee=a("a"),uXr=o("from_pretrained()"),bXr=o(" class method or the "),See=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),p$=a("p"),MXr=o("This class cannot be instantiated directly using "),a0e=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Ht=a("div"),F(_$.$$.fragment),AXr=l(),n0e=a("p"),LXr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yXr=l(),tf=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),s0e=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(H0.$$.fragment),BXr=l(),zr=a("div"),F(u$.$$.fragment),IXr=l(),l0e=a("p"),NXr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qXr=l(),En=a("p"),jXr=o("The model class to instantiate is selected based on the "),i0e=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),d0e=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),QXr=l(),$e=a("ul"),U0=a("li"),f0e=a("strong"),WXr=o("albert"),HXr=o(" \u2014 "),Pee=a("a"),UXr=o("FlaxAlbertForMaskedLM"),JXr=o(" (ALBERT model)"),YXr=l(),J0=a("li"),m0e=a("strong"),KXr=o("bart"),ZXr=o(" \u2014 "),Bee=a("a"),ezr=o("FlaxBartForConditionalGeneration"),ozr=o(" (BART model)"),rzr=l(),Y0=a("li"),g0e=a("strong"),tzr=o("bert"),azr=o(" \u2014 "),Iee=a("a"),nzr=o("FlaxBertForMaskedLM"),szr=o(" (BERT model)"),lzr=l(),K0=a("li"),h0e=a("strong"),izr=o("big_bird"),dzr=o(" \u2014 "),Nee=a("a"),czr=o("FlaxBigBirdForMaskedLM"),fzr=o(" (BigBird model)"),mzr=l(),Z0=a("li"),p0e=a("strong"),gzr=o("distilbert"),hzr=o(" \u2014 "),qee=a("a"),pzr=o("FlaxDistilBertForMaskedLM"),_zr=o(" (DistilBERT model)"),uzr=l(),ew=a("li"),_0e=a("strong"),bzr=o("electra"),vzr=o(" \u2014 "),jee=a("a"),Fzr=o("FlaxElectraForMaskedLM"),Tzr=o(" (ELECTRA model)"),Mzr=l(),ow=a("li"),u0e=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),Dee=a("a"),wzr=o("FlaxMBartForConditionalGeneration"),Azr=o(" (mBART model)"),Lzr=l(),rw=a("li"),b0e=a("strong"),yzr=o("roberta"),xzr=o(" \u2014 "),Gee=a("a"),$zr=o("FlaxRobertaForMaskedLM"),kzr=o(" (RoBERTa model)"),Szr=l(),tw=a("li"),v0e=a("strong"),Rzr=o("roformer"),Pzr=o(" \u2014 "),Oee=a("a"),Bzr=o("FlaxRoFormerForMaskedLM"),Izr=o(" (RoFormer model)"),Nzr=l(),aw=a("li"),F0e=a("strong"),qzr=o("xlm-roberta"),jzr=o(" \u2014 "),Vee=a("a"),Dzr=o("FlaxXLMRobertaForMaskedLM"),Gzr=o(" (XLM-RoBERTa model)"),Ozr=l(),F(nw.$$.fragment),tze=l(),af=a("h2"),sw=a("a"),T0e=a("span"),F(b$.$$.fragment),Vzr=l(),M0e=a("span"),Xzr=o("FlaxAutoModelForSeq2SeqLM"),aze=l(),br=a("div"),F(v$.$$.fragment),zzr=l(),nf=a("p"),Qzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xee=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" class method or the "),zee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),F$=a("p"),Kzr=o("This class cannot be instantiated directly using "),E0e=a("code"),Zzr=o("__init__()"),eQr=o(" (throws an error)."),oQr=l(),Ut=a("div"),F(T$.$$.fragment),rQr=l(),C0e=a("p"),tQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aQr=l(),sf=a("p"),nQr=o(`Note:
Loading a model from its configuration file does `),w0e=a("strong"),sQr=o("not"),lQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),iQr=o("from_pretrained()"),dQr=o(" to load the model weights."),cQr=l(),F(lw.$$.fragment),fQr=l(),Qr=a("div"),F(M$.$$.fragment),mQr=l(),A0e=a("p"),gQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hQr=l(),Cn=a("p"),pQr=o("The model class to instantiate is selected based on the "),L0e=a("code"),_Qr=o("model_type"),uQr=o(` property of the config object (either
passed as an argument or loaded from `),y0e=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(":"),MQr=l(),ke=a("ul"),iw=a("li"),$0e=a("strong"),EQr=o("bart"),CQr=o(" \u2014 "),Wee=a("a"),wQr=o("FlaxBartForConditionalGeneration"),AQr=o(" (BART model)"),LQr=l(),dw=a("li"),k0e=a("strong"),yQr=o("blenderbot"),xQr=o(" \u2014 "),Hee=a("a"),$Qr=o("FlaxBlenderbotForConditionalGeneration"),kQr=o(" (Blenderbot model)"),SQr=l(),cw=a("li"),S0e=a("strong"),RQr=o("blenderbot-small"),PQr=o(" \u2014 "),Uee=a("a"),BQr=o("FlaxBlenderbotSmallForConditionalGeneration"),IQr=o(" (BlenderbotSmall model)"),NQr=l(),fw=a("li"),R0e=a("strong"),qQr=o("encoder-decoder"),jQr=o(" \u2014 "),Jee=a("a"),DQr=o("FlaxEncoderDecoderModel"),GQr=o(" (Encoder decoder model)"),OQr=l(),mw=a("li"),P0e=a("strong"),VQr=o("longt5"),XQr=o(" \u2014 "),Yee=a("a"),zQr=o("FlaxLongT5ForConditionalGeneration"),QQr=o(" (LongT5 model)"),WQr=l(),gw=a("li"),B0e=a("strong"),HQr=o("marian"),UQr=o(" \u2014 "),Kee=a("a"),JQr=o("FlaxMarianMTModel"),YQr=o(" (Marian model)"),KQr=l(),hw=a("li"),I0e=a("strong"),ZQr=o("mbart"),eWr=o(" \u2014 "),Zee=a("a"),oWr=o("FlaxMBartForConditionalGeneration"),rWr=o(" (mBART model)"),tWr=l(),pw=a("li"),N0e=a("strong"),aWr=o("mt5"),nWr=o(" \u2014 "),eoe=a("a"),sWr=o("FlaxMT5ForConditionalGeneration"),lWr=o(" (MT5 model)"),iWr=l(),_w=a("li"),q0e=a("strong"),dWr=o("pegasus"),cWr=o(" \u2014 "),ooe=a("a"),fWr=o("FlaxPegasusForConditionalGeneration"),mWr=o(" (Pegasus model)"),gWr=l(),uw=a("li"),j0e=a("strong"),hWr=o("t5"),pWr=o(" \u2014 "),roe=a("a"),_Wr=o("FlaxT5ForConditionalGeneration"),uWr=o(" (T5 model)"),bWr=l(),F(bw.$$.fragment),nze=l(),lf=a("h2"),vw=a("a"),D0e=a("span"),F(E$.$$.fragment),vWr=l(),G0e=a("span"),FWr=o("FlaxAutoModelForSequenceClassification"),sze=l(),vr=a("div"),F(C$.$$.fragment),TWr=l(),df=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),toe=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),aoe=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),w$=a("p"),yWr=o("This class cannot be instantiated directly using "),O0e=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Jt=a("div"),F(A$.$$.fragment),SWr=l(),V0e=a("p"),RWr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PWr=l(),cf=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(Fw.$$.fragment),GWr=l(),Wr=a("div"),F(L$.$$.fragment),OWr=l(),z0e=a("p"),VWr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XWr=l(),wn=a("p"),zWr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),Se=a("ul"),Tw=a("li"),U0e=a("strong"),ZWr=o("albert"),eHr=o(" \u2014 "),soe=a("a"),oHr=o("FlaxAlbertForSequenceClassification"),rHr=o(" (ALBERT model)"),tHr=l(),Mw=a("li"),J0e=a("strong"),aHr=o("bart"),nHr=o(" \u2014 "),loe=a("a"),sHr=o("FlaxBartForSequenceClassification"),lHr=o(" (BART model)"),iHr=l(),Ew=a("li"),Y0e=a("strong"),dHr=o("bert"),cHr=o(" \u2014 "),ioe=a("a"),fHr=o("FlaxBertForSequenceClassification"),mHr=o(" (BERT model)"),gHr=l(),Cw=a("li"),K0e=a("strong"),hHr=o("big_bird"),pHr=o(" \u2014 "),doe=a("a"),_Hr=o("FlaxBigBirdForSequenceClassification"),uHr=o(" (BigBird model)"),bHr=l(),ww=a("li"),Z0e=a("strong"),vHr=o("distilbert"),FHr=o(" \u2014 "),coe=a("a"),THr=o("FlaxDistilBertForSequenceClassification"),MHr=o(" (DistilBERT model)"),EHr=l(),Aw=a("li"),ewe=a("strong"),CHr=o("electra"),wHr=o(" \u2014 "),foe=a("a"),AHr=o("FlaxElectraForSequenceClassification"),LHr=o(" (ELECTRA model)"),yHr=l(),Lw=a("li"),owe=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),moe=a("a"),kHr=o("FlaxMBartForSequenceClassification"),SHr=o(" (mBART model)"),RHr=l(),yw=a("li"),rwe=a("strong"),PHr=o("roberta"),BHr=o(" \u2014 "),goe=a("a"),IHr=o("FlaxRobertaForSequenceClassification"),NHr=o(" (RoBERTa model)"),qHr=l(),xw=a("li"),twe=a("strong"),jHr=o("roformer"),DHr=o(" \u2014 "),hoe=a("a"),GHr=o("FlaxRoFormerForSequenceClassification"),OHr=o(" (RoFormer model)"),VHr=l(),$w=a("li"),awe=a("strong"),XHr=o("xlm-roberta"),zHr=o(" \u2014 "),poe=a("a"),QHr=o("FlaxXLMRobertaForSequenceClassification"),WHr=o(" (XLM-RoBERTa model)"),HHr=l(),F(kw.$$.fragment),lze=l(),ff=a("h2"),Sw=a("a"),nwe=a("span"),F(y$.$$.fragment),UHr=l(),swe=a("span"),JHr=o("FlaxAutoModelForQuestionAnswering"),ize=l(),Fr=a("div"),F(x$.$$.fragment),YHr=l(),mf=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_oe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),uoe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),$$=a("p"),aUr=o("This class cannot be instantiated directly using "),lwe=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Yt=a("div"),F(k$.$$.fragment),iUr=l(),iwe=a("p"),dUr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cUr=l(),gf=a("p"),fUr=o(`Note:
Loading a model from its configuration file does `),dwe=a("strong"),mUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),hUr=o("from_pretrained()"),pUr=o(" to load the model weights."),_Ur=l(),F(Rw.$$.fragment),uUr=l(),Hr=a("div"),F(S$.$$.fragment),bUr=l(),cwe=a("p"),vUr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FUr=l(),An=a("p"),TUr=o("The model class to instantiate is selected based on the "),fwe=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),mwe=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),Re=a("ul"),Pw=a("li"),hwe=a("strong"),xUr=o("albert"),$Ur=o(" \u2014 "),voe=a("a"),kUr=o("FlaxAlbertForQuestionAnswering"),SUr=o(" (ALBERT model)"),RUr=l(),Bw=a("li"),pwe=a("strong"),PUr=o("bart"),BUr=o(" \u2014 "),Foe=a("a"),IUr=o("FlaxBartForQuestionAnswering"),NUr=o(" (BART model)"),qUr=l(),Iw=a("li"),_we=a("strong"),jUr=o("bert"),DUr=o(" \u2014 "),Toe=a("a"),GUr=o("FlaxBertForQuestionAnswering"),OUr=o(" (BERT model)"),VUr=l(),Nw=a("li"),uwe=a("strong"),XUr=o("big_bird"),zUr=o(" \u2014 "),Moe=a("a"),QUr=o("FlaxBigBirdForQuestionAnswering"),WUr=o(" (BigBird model)"),HUr=l(),qw=a("li"),bwe=a("strong"),UUr=o("distilbert"),JUr=o(" \u2014 "),Eoe=a("a"),YUr=o("FlaxDistilBertForQuestionAnswering"),KUr=o(" (DistilBERT model)"),ZUr=l(),jw=a("li"),vwe=a("strong"),eJr=o("electra"),oJr=o(" \u2014 "),Coe=a("a"),rJr=o("FlaxElectraForQuestionAnswering"),tJr=o(" (ELECTRA model)"),aJr=l(),Dw=a("li"),Fwe=a("strong"),nJr=o("mbart"),sJr=o(" \u2014 "),woe=a("a"),lJr=o("FlaxMBartForQuestionAnswering"),iJr=o(" (mBART model)"),dJr=l(),Gw=a("li"),Twe=a("strong"),cJr=o("roberta"),fJr=o(" \u2014 "),Aoe=a("a"),mJr=o("FlaxRobertaForQuestionAnswering"),gJr=o(" (RoBERTa model)"),hJr=l(),Ow=a("li"),Mwe=a("strong"),pJr=o("roformer"),_Jr=o(" \u2014 "),Loe=a("a"),uJr=o("FlaxRoFormerForQuestionAnswering"),bJr=o(" (RoFormer model)"),vJr=l(),Vw=a("li"),Ewe=a("strong"),FJr=o("xlm-roberta"),TJr=o(" \u2014 "),yoe=a("a"),MJr=o("FlaxXLMRobertaForQuestionAnswering"),EJr=o(" (XLM-RoBERTa model)"),CJr=l(),F(Xw.$$.fragment),dze=l(),hf=a("h2"),zw=a("a"),Cwe=a("span"),F(R$.$$.fragment),wJr=l(),wwe=a("span"),AJr=o("FlaxAutoModelForTokenClassification"),cze=l(),Tr=a("div"),F(P$.$$.fragment),LJr=l(),pf=a("p"),yJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xoe=a("a"),xJr=o("from_pretrained()"),$Jr=o(" class method or the "),$oe=a("a"),kJr=o("from_config()"),SJr=o(` class
method.`),RJr=l(),B$=a("p"),PJr=o("This class cannot be instantiated directly using "),Awe=a("code"),BJr=o("__init__()"),IJr=o(" (throws an error)."),NJr=l(),Kt=a("div"),F(I$.$$.fragment),qJr=l(),Lwe=a("p"),jJr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DJr=l(),_f=a("p"),GJr=o(`Note:
Loading a model from its configuration file does `),ywe=a("strong"),OJr=o("not"),VJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("a"),XJr=o("from_pretrained()"),zJr=o(" to load the model weights."),QJr=l(),F(Qw.$$.fragment),WJr=l(),Ur=a("div"),F(N$.$$.fragment),HJr=l(),xwe=a("p"),UJr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JJr=l(),Ln=a("p"),YJr=o("The model class to instantiate is selected based on the "),$we=a("code"),KJr=o("model_type"),ZJr=o(` property of the config object (either
passed as an argument or loaded from `),kwe=a("code"),eYr=o("pretrained_model_name_or_path"),oYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=a("code"),rYr=o("pretrained_model_name_or_path"),tYr=o(":"),aYr=l(),Ve=a("ul"),Ww=a("li"),Rwe=a("strong"),nYr=o("albert"),sYr=o(" \u2014 "),Soe=a("a"),lYr=o("FlaxAlbertForTokenClassification"),iYr=o(" (ALBERT model)"),dYr=l(),Hw=a("li"),Pwe=a("strong"),cYr=o("bert"),fYr=o(" \u2014 "),Roe=a("a"),mYr=o("FlaxBertForTokenClassification"),gYr=o(" (BERT model)"),hYr=l(),Uw=a("li"),Bwe=a("strong"),pYr=o("big_bird"),_Yr=o(" \u2014 "),Poe=a("a"),uYr=o("FlaxBigBirdForTokenClassification"),bYr=o(" (BigBird model)"),vYr=l(),Jw=a("li"),Iwe=a("strong"),FYr=o("distilbert"),TYr=o(" \u2014 "),Boe=a("a"),MYr=o("FlaxDistilBertForTokenClassification"),EYr=o(" (DistilBERT model)"),CYr=l(),Yw=a("li"),Nwe=a("strong"),wYr=o("electra"),AYr=o(" \u2014 "),Ioe=a("a"),LYr=o("FlaxElectraForTokenClassification"),yYr=o(" (ELECTRA model)"),xYr=l(),Kw=a("li"),qwe=a("strong"),$Yr=o("roberta"),kYr=o(" \u2014 "),Noe=a("a"),SYr=o("FlaxRobertaForTokenClassification"),RYr=o(" (RoBERTa model)"),PYr=l(),Zw=a("li"),jwe=a("strong"),BYr=o("roformer"),IYr=o(" \u2014 "),qoe=a("a"),NYr=o("FlaxRoFormerForTokenClassification"),qYr=o(" (RoFormer model)"),jYr=l(),eA=a("li"),Dwe=a("strong"),DYr=o("xlm-roberta"),GYr=o(" \u2014 "),joe=a("a"),OYr=o("FlaxXLMRobertaForTokenClassification"),VYr=o(" (XLM-RoBERTa model)"),XYr=l(),F(oA.$$.fragment),fze=l(),uf=a("h2"),rA=a("a"),Gwe=a("span"),F(q$.$$.fragment),zYr=l(),Owe=a("span"),QYr=o("FlaxAutoModelForMultipleChoice"),mze=l(),Mr=a("div"),F(j$.$$.fragment),WYr=l(),bf=a("p"),HYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Doe=a("a"),UYr=o("from_pretrained()"),JYr=o(" class method or the "),Goe=a("a"),YYr=o("from_config()"),KYr=o(` class
method.`),ZYr=l(),D$=a("p"),eKr=o("This class cannot be instantiated directly using "),Vwe=a("code"),oKr=o("__init__()"),rKr=o(" (throws an error)."),tKr=l(),Zt=a("div"),F(G$.$$.fragment),aKr=l(),Xwe=a("p"),nKr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sKr=l(),vf=a("p"),lKr=o(`Note:
Loading a model from its configuration file does `),zwe=a("strong"),iKr=o("not"),dKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),cKr=o("from_pretrained()"),fKr=o(" to load the model weights."),mKr=l(),F(tA.$$.fragment),gKr=l(),Jr=a("div"),F(O$.$$.fragment),hKr=l(),Qwe=a("p"),pKr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Kr=l(),yn=a("p"),uKr=o("The model class to instantiate is selected based on the "),Wwe=a("code"),bKr=o("model_type"),vKr=o(` property of the config object (either
passed as an argument or loaded from `),Hwe=a("code"),FKr=o("pretrained_model_name_or_path"),TKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=a("code"),MKr=o("pretrained_model_name_or_path"),EKr=o(":"),CKr=l(),Xe=a("ul"),aA=a("li"),Jwe=a("strong"),wKr=o("albert"),AKr=o(" \u2014 "),Voe=a("a"),LKr=o("FlaxAlbertForMultipleChoice"),yKr=o(" (ALBERT model)"),xKr=l(),nA=a("li"),Ywe=a("strong"),$Kr=o("bert"),kKr=o(" \u2014 "),Xoe=a("a"),SKr=o("FlaxBertForMultipleChoice"),RKr=o(" (BERT model)"),PKr=l(),sA=a("li"),Kwe=a("strong"),BKr=o("big_bird"),IKr=o(" \u2014 "),zoe=a("a"),NKr=o("FlaxBigBirdForMultipleChoice"),qKr=o(" (BigBird model)"),jKr=l(),lA=a("li"),Zwe=a("strong"),DKr=o("distilbert"),GKr=o(" \u2014 "),Qoe=a("a"),OKr=o("FlaxDistilBertForMultipleChoice"),VKr=o(" (DistilBERT model)"),XKr=l(),iA=a("li"),eAe=a("strong"),zKr=o("electra"),QKr=o(" \u2014 "),Woe=a("a"),WKr=o("FlaxElectraForMultipleChoice"),HKr=o(" (ELECTRA model)"),UKr=l(),dA=a("li"),oAe=a("strong"),JKr=o("roberta"),YKr=o(" \u2014 "),Hoe=a("a"),KKr=o("FlaxRobertaForMultipleChoice"),ZKr=o(" (RoBERTa model)"),eZr=l(),cA=a("li"),rAe=a("strong"),oZr=o("roformer"),rZr=o(" \u2014 "),Uoe=a("a"),tZr=o("FlaxRoFormerForMultipleChoice"),aZr=o(" (RoFormer model)"),nZr=l(),fA=a("li"),tAe=a("strong"),sZr=o("xlm-roberta"),lZr=o(" \u2014 "),Joe=a("a"),iZr=o("FlaxXLMRobertaForMultipleChoice"),dZr=o(" (XLM-RoBERTa model)"),cZr=l(),F(mA.$$.fragment),gze=l(),Ff=a("h2"),gA=a("a"),aAe=a("span"),F(V$.$$.fragment),fZr=l(),nAe=a("span"),mZr=o("FlaxAutoModelForNextSentencePrediction"),hze=l(),Er=a("div"),F(X$.$$.fragment),gZr=l(),Tf=a("p"),hZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yoe=a("a"),pZr=o("from_pretrained()"),_Zr=o(" class method or the "),Koe=a("a"),uZr=o("from_config()"),bZr=o(` class
method.`),vZr=l(),z$=a("p"),FZr=o("This class cannot be instantiated directly using "),sAe=a("code"),TZr=o("__init__()"),MZr=o(" (throws an error)."),EZr=l(),ea=a("div"),F(Q$.$$.fragment),CZr=l(),lAe=a("p"),wZr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),AZr=l(),Mf=a("p"),LZr=o(`Note:
Loading a model from its configuration file does `),iAe=a("strong"),yZr=o("not"),xZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),$Zr=o("from_pretrained()"),kZr=o(" to load the model weights."),SZr=l(),F(hA.$$.fragment),RZr=l(),Yr=a("div"),F(W$.$$.fragment),PZr=l(),dAe=a("p"),BZr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IZr=l(),xn=a("p"),NZr=o("The model class to instantiate is selected based on the "),cAe=a("code"),qZr=o("model_type"),jZr=o(` property of the config object (either
passed as an argument or loaded from `),fAe=a("code"),DZr=o("pretrained_model_name_or_path"),GZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mAe=a("code"),OZr=o("pretrained_model_name_or_path"),VZr=o(":"),XZr=l(),gAe=a("ul"),pA=a("li"),hAe=a("strong"),zZr=o("bert"),QZr=o(" \u2014 "),ere=a("a"),WZr=o("FlaxBertForNextSentencePrediction"),HZr=o(" (BERT model)"),UZr=l(),F(_A.$$.fragment),pze=l(),Ef=a("h2"),uA=a("a"),pAe=a("span"),F(H$.$$.fragment),JZr=l(),_Ae=a("span"),YZr=o("FlaxAutoModelForImageClassification"),_ze=l(),Cr=a("div"),F(U$.$$.fragment),KZr=l(),Cf=a("p"),ZZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ore=a("a"),eet=o("from_pretrained()"),oet=o(" class method or the "),rre=a("a"),ret=o("from_config()"),tet=o(` class
method.`),aet=l(),J$=a("p"),net=o("This class cannot be instantiated directly using "),uAe=a("code"),set=o("__init__()"),iet=o(" (throws an error)."),det=l(),oa=a("div"),F(Y$.$$.fragment),cet=l(),bAe=a("p"),fet=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),met=l(),wf=a("p"),get=o(`Note:
Loading a model from its configuration file does `),vAe=a("strong"),het=o("not"),pet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),_et=o("from_pretrained()"),uet=o(" to load the model weights."),bet=l(),F(bA.$$.fragment),vet=l(),Kr=a("div"),F(K$.$$.fragment),Fet=l(),FAe=a("p"),Tet=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Met=l(),$n=a("p"),Eet=o("The model class to instantiate is selected based on the "),TAe=a("code"),Cet=o("model_type"),wet=o(` property of the config object (either
passed as an argument or loaded from `),MAe=a("code"),Aet=o("pretrained_model_name_or_path"),Let=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=a("code"),yet=o("pretrained_model_name_or_path"),xet=o(":"),$et=l(),Z$=a("ul"),vA=a("li"),CAe=a("strong"),ket=o("beit"),Set=o(" \u2014 "),are=a("a"),Ret=o("FlaxBeitForImageClassification"),Pet=o(" (BEiT model)"),Bet=l(),FA=a("li"),wAe=a("strong"),Iet=o("vit"),Net=o(" \u2014 "),nre=a("a"),qet=o("FlaxViTForImageClassification"),jet=o(" (ViT model)"),Det=l(),F(TA.$$.fragment),uze=l(),Af=a("h2"),MA=a("a"),AAe=a("span"),F(ek.$$.fragment),Get=l(),LAe=a("span"),Oet=o("FlaxAutoModelForVision2Seq"),bze=l(),wr=a("div"),F(ok.$$.fragment),Vet=l(),Lf=a("p"),Xet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sre=a("a"),zet=o("from_pretrained()"),Qet=o(" class method or the "),lre=a("a"),Wet=o("from_config()"),Het=o(` class
method.`),Uet=l(),rk=a("p"),Jet=o("This class cannot be instantiated directly using "),yAe=a("code"),Yet=o("__init__()"),Ket=o(" (throws an error)."),Zet=l(),ra=a("div"),F(tk.$$.fragment),eot=l(),xAe=a("p"),oot=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rot=l(),yf=a("p"),tot=o(`Note:
Loading a model from its configuration file does `),$Ae=a("strong"),aot=o("not"),not=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=a("a"),sot=o("from_pretrained()"),lot=o(" to load the model weights."),iot=l(),F(EA.$$.fragment),dot=l(),Zr=a("div"),F(ak.$$.fragment),cot=l(),kAe=a("p"),fot=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mot=l(),kn=a("p"),got=o("The model class to instantiate is selected based on the "),SAe=a("code"),hot=o("model_type"),pot=o(` property of the config object (either
passed as an argument or loaded from `),RAe=a("code"),_ot=o("pretrained_model_name_or_path"),uot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=a("code"),bot=o("pretrained_model_name_or_path"),vot=o(":"),Fot=l(),BAe=a("ul"),CA=a("li"),IAe=a("strong"),Tot=o("vision-encoder-decoder"),Mot=o(" \u2014 "),dre=a("a"),Eot=o("FlaxVisionEncoderDecoderModel"),Cot=o(" (Vision Encoder decoder model)"),wot=l(),F(wA.$$.fragment),this.h()},l(f){const u=qXt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var nk=s(p);m=n(nk,"A",{id:!0,class:!0,href:!0});var NAe=s(m);_=n(NAe,"SPAN",{});var qAe=s(_);T(d.$$.fragment,qAe),qAe.forEach(t),NAe.forEach(t),h=i(nk),Eo=n(nk,"SPAN",{});var jAe=s(Eo);wi=r(jAe,"Auto Classes"),jAe.forEach(t),nk.forEach(t),Sf=i(f),nt=n(f,"P",{});var sk=s(nt);Ai=r(sk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=n(sk,"CODE",{});var DAe=s(Li);zL=r(DAe,"from_pretrained()"),DAe.forEach(t),Rf=r(sk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),sk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);yi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var GAe=s(Rn);QL=r(GAe,"AutoConfig"),GAe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var OAe=s(Bn);WL=r(OAe,"AutoModel"),OAe.forEach(t),xi=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var VAe=s(In);HL=r(VAe,"AutoTokenizer"),VAe.forEach(t),$i=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Pf=i(f),T($a.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var lk=s(Ae);wS=r(lk,"will create a model that is an instance of "),ki=n(lk,"A",{href:!0});var XAe=s(ki);AS=r(XAe,"BertModel"),XAe.forEach(t),LS=r(lk,"."),lk.forEach(t),Co=i(f),ka=n(f,"P",{});var ik=s(ka);yS=r(ik,"There is one class of "),Bf=n(ik,"CODE",{});var zAe=s(Bf);xS=r(zAe,"AutoModel"),zAe.forEach(t),xWe=r(ik," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ik.forEach(t),hVe=i(f),Si=n(f,"H2",{class:!0});var dk=s(Si);If=n(dk,"A",{id:!0,class:!0,href:!0});var QAe=s(If);aae=n(QAe,"SPAN",{});var WAe=s(aae);T(UL.$$.fragment,WAe),WAe.forEach(t),QAe.forEach(t),$We=i(dk),nae=n(dk,"SPAN",{});var HAe=s(nae);kWe=r(HAe,"Extending the Auto Classes"),HAe.forEach(t),dk.forEach(t),pVe=i(f),Nn=n(f,"P",{});var xf=s(Nn);SWe=r(xf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),sae=n(xf,"CODE",{});var UAe=s(sae);RWe=r(UAe,"NewModel"),UAe.forEach(t),PWe=r(xf,", make sure you have a "),lae=n(xf,"CODE",{});var JAe=s(lae);BWe=r(JAe,"NewModelConfig"),JAe.forEach(t),IWe=r(xf,` then you can add those to the auto
classes like this:`),xf.forEach(t),_Ve=i(f),T(JL.$$.fragment,f),uVe=i(f),$S=n(f,"P",{});var YAe=s($S);NWe=r(YAe,"You will then be able to use the auto classes like you would usually do!"),YAe.forEach(t),bVe=i(f),T(Nf.$$.fragment,f),vVe=i(f),Ri=n(f,"H2",{class:!0});var ck=s(Ri);qf=n(ck,"A",{id:!0,class:!0,href:!0});var KAe=s(qf);iae=n(KAe,"SPAN",{});var ZAe=s(iae);T(YL.$$.fragment,ZAe),ZAe.forEach(t),KAe.forEach(t),qWe=i(ck),dae=n(ck,"SPAN",{});var e6e=s(dae);jWe=r(e6e,"AutoConfig"),e6e.forEach(t),ck.forEach(t),FVe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(KL.$$.fragment,tt),DWe=i(tt),ZL=n(tt,"P",{});var fk=s(ZL);GWe=r(fk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),kS=n(fk,"A",{href:!0});var o6e=s(kS);OWe=r(o6e,"from_pretrained()"),o6e.forEach(t),VWe=r(fk," class method."),fk.forEach(t),XWe=i(tt),ey=n(tt,"P",{});var mk=s(ey);zWe=r(mk,"This class cannot be instantiated directly using "),cae=n(mk,"CODE",{});var r6e=s(cae);QWe=r(r6e,"__init__()"),r6e.forEach(t),WWe=r(mk," (throws an error)."),mk.forEach(t),HWe=i(tt),Ar=n(tt,"DIV",{class:!0});var at=s(Ar);T(oy.$$.fragment,at),UWe=i(at),fae=n(at,"P",{});var t6e=s(fae);JWe=r(t6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),t6e.forEach(t),YWe=i(at),Pi=n(at,"P",{});var $f=s(Pi);KWe=r($f,"The configuration class to instantiate is selected based on the "),mae=n($f,"CODE",{});var a6e=s(mae);ZWe=r(a6e,"model_type"),a6e.forEach(t),eHe=r($f,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gae=n($f,"CODE",{});var n6e=s(gae);oHe=r(n6e,"pretrained_model_name_or_path"),n6e.forEach(t),rHe=r($f,":"),$f.forEach(t),tHe=i(at),A=n(at,"UL",{});var L=s(A);jf=n(L,"LI",{});var AA=s(jf);hae=n(AA,"STRONG",{});var s6e=s(hae);aHe=r(s6e,"albert"),s6e.forEach(t),nHe=r(AA," \u2014 "),SS=n(AA,"A",{href:!0});var l6e=s(SS);sHe=r(l6e,"AlbertConfig"),l6e.forEach(t),lHe=r(AA," (ALBERT model)"),AA.forEach(t),iHe=i(L),Df=n(L,"LI",{});var LA=s(Df);pae=n(LA,"STRONG",{});var i6e=s(pae);dHe=r(i6e,"bart"),i6e.forEach(t),cHe=r(LA," \u2014 "),RS=n(LA,"A",{href:!0});var d6e=s(RS);fHe=r(d6e,"BartConfig"),d6e.forEach(t),mHe=r(LA," (BART model)"),LA.forEach(t),gHe=i(L),Gf=n(L,"LI",{});var yA=s(Gf);_ae=n(yA,"STRONG",{});var c6e=s(_ae);hHe=r(c6e,"beit"),c6e.forEach(t),pHe=r(yA," \u2014 "),PS=n(yA,"A",{href:!0});var f6e=s(PS);_He=r(f6e,"BeitConfig"),f6e.forEach(t),uHe=r(yA," (BEiT model)"),yA.forEach(t),bHe=i(L),Of=n(L,"LI",{});var xA=s(Of);uae=n(xA,"STRONG",{});var m6e=s(uae);vHe=r(m6e,"bert"),m6e.forEach(t),FHe=r(xA," \u2014 "),BS=n(xA,"A",{href:!0});var g6e=s(BS);THe=r(g6e,"BertConfig"),g6e.forEach(t),MHe=r(xA," (BERT model)"),xA.forEach(t),EHe=i(L),Vf=n(L,"LI",{});var $A=s(Vf);bae=n($A,"STRONG",{});var h6e=s(bae);CHe=r(h6e,"bert-generation"),h6e.forEach(t),wHe=r($A," \u2014 "),IS=n($A,"A",{href:!0});var p6e=s(IS);AHe=r(p6e,"BertGenerationConfig"),p6e.forEach(t),LHe=r($A," (Bert Generation model)"),$A.forEach(t),yHe=i(L),Xf=n(L,"LI",{});var kA=s(Xf);vae=n(kA,"STRONG",{});var _6e=s(vae);xHe=r(_6e,"big_bird"),_6e.forEach(t),$He=r(kA," \u2014 "),NS=n(kA,"A",{href:!0});var u6e=s(NS);kHe=r(u6e,"BigBirdConfig"),u6e.forEach(t),SHe=r(kA," (BigBird model)"),kA.forEach(t),RHe=i(L),zf=n(L,"LI",{});var SA=s(zf);Fae=n(SA,"STRONG",{});var b6e=s(Fae);PHe=r(b6e,"bigbird_pegasus"),b6e.forEach(t),BHe=r(SA," \u2014 "),qS=n(SA,"A",{href:!0});var v6e=s(qS);IHe=r(v6e,"BigBirdPegasusConfig"),v6e.forEach(t),NHe=r(SA," (BigBird-Pegasus model)"),SA.forEach(t),qHe=i(L),Qf=n(L,"LI",{});var RA=s(Qf);Tae=n(RA,"STRONG",{});var F6e=s(Tae);jHe=r(F6e,"blenderbot"),F6e.forEach(t),DHe=r(RA," \u2014 "),jS=n(RA,"A",{href:!0});var T6e=s(jS);GHe=r(T6e,"BlenderbotConfig"),T6e.forEach(t),OHe=r(RA," (Blenderbot model)"),RA.forEach(t),VHe=i(L),Wf=n(L,"LI",{});var PA=s(Wf);Mae=n(PA,"STRONG",{});var M6e=s(Mae);XHe=r(M6e,"blenderbot-small"),M6e.forEach(t),zHe=r(PA," \u2014 "),DS=n(PA,"A",{href:!0});var E6e=s(DS);QHe=r(E6e,"BlenderbotSmallConfig"),E6e.forEach(t),WHe=r(PA," (BlenderbotSmall model)"),PA.forEach(t),HHe=i(L),Hf=n(L,"LI",{});var BA=s(Hf);Eae=n(BA,"STRONG",{});var C6e=s(Eae);UHe=r(C6e,"bloom"),C6e.forEach(t),JHe=r(BA," \u2014 "),GS=n(BA,"A",{href:!0});var w6e=s(GS);YHe=r(w6e,"BloomConfig"),w6e.forEach(t),KHe=r(BA," (BLOOM model)"),BA.forEach(t),ZHe=i(L),Uf=n(L,"LI",{});var IA=s(Uf);Cae=n(IA,"STRONG",{});var A6e=s(Cae);eUe=r(A6e,"camembert"),A6e.forEach(t),oUe=r(IA," \u2014 "),OS=n(IA,"A",{href:!0});var L6e=s(OS);rUe=r(L6e,"CamembertConfig"),L6e.forEach(t),tUe=r(IA," (CamemBERT model)"),IA.forEach(t),aUe=i(L),Jf=n(L,"LI",{});var NA=s(Jf);wae=n(NA,"STRONG",{});var y6e=s(wae);nUe=r(y6e,"canine"),y6e.forEach(t),sUe=r(NA," \u2014 "),VS=n(NA,"A",{href:!0});var x6e=s(VS);lUe=r(x6e,"CanineConfig"),x6e.forEach(t),iUe=r(NA," (CANINE model)"),NA.forEach(t),dUe=i(L),Yf=n(L,"LI",{});var qA=s(Yf);Aae=n(qA,"STRONG",{});var $6e=s(Aae);cUe=r($6e,"clip"),$6e.forEach(t),fUe=r(qA," \u2014 "),XS=n(qA,"A",{href:!0});var k6e=s(XS);mUe=r(k6e,"CLIPConfig"),k6e.forEach(t),gUe=r(qA," (CLIP model)"),qA.forEach(t),hUe=i(L),Kf=n(L,"LI",{});var jA=s(Kf);Lae=n(jA,"STRONG",{});var S6e=s(Lae);pUe=r(S6e,"codegen"),S6e.forEach(t),_Ue=r(jA," \u2014 "),zS=n(jA,"A",{href:!0});var R6e=s(zS);uUe=r(R6e,"CodeGenConfig"),R6e.forEach(t),bUe=r(jA," (CodeGen model)"),jA.forEach(t),vUe=i(L),Zf=n(L,"LI",{});var DA=s(Zf);yae=n(DA,"STRONG",{});var P6e=s(yae);FUe=r(P6e,"convbert"),P6e.forEach(t),TUe=r(DA," \u2014 "),QS=n(DA,"A",{href:!0});var B6e=s(QS);MUe=r(B6e,"ConvBertConfig"),B6e.forEach(t),EUe=r(DA," (ConvBERT model)"),DA.forEach(t),CUe=i(L),em=n(L,"LI",{});var GA=s(em);xae=n(GA,"STRONG",{});var I6e=s(xae);wUe=r(I6e,"convnext"),I6e.forEach(t),AUe=r(GA," \u2014 "),WS=n(GA,"A",{href:!0});var N6e=s(WS);LUe=r(N6e,"ConvNextConfig"),N6e.forEach(t),yUe=r(GA," (ConvNeXT model)"),GA.forEach(t),xUe=i(L),om=n(L,"LI",{});var OA=s(om);$ae=n(OA,"STRONG",{});var q6e=s($ae);$Ue=r(q6e,"ctrl"),q6e.forEach(t),kUe=r(OA," \u2014 "),HS=n(OA,"A",{href:!0});var j6e=s(HS);SUe=r(j6e,"CTRLConfig"),j6e.forEach(t),RUe=r(OA," (CTRL model)"),OA.forEach(t),PUe=i(L),rm=n(L,"LI",{});var VA=s(rm);kae=n(VA,"STRONG",{});var D6e=s(kae);BUe=r(D6e,"cvt"),D6e.forEach(t),IUe=r(VA," \u2014 "),US=n(VA,"A",{href:!0});var G6e=s(US);NUe=r(G6e,"CvtConfig"),G6e.forEach(t),qUe=r(VA," (CvT model)"),VA.forEach(t),jUe=i(L),tm=n(L,"LI",{});var XA=s(tm);Sae=n(XA,"STRONG",{});var O6e=s(Sae);DUe=r(O6e,"data2vec-audio"),O6e.forEach(t),GUe=r(XA," \u2014 "),JS=n(XA,"A",{href:!0});var V6e=s(JS);OUe=r(V6e,"Data2VecAudioConfig"),V6e.forEach(t),VUe=r(XA," (Data2VecAudio model)"),XA.forEach(t),XUe=i(L),am=n(L,"LI",{});var zA=s(am);Rae=n(zA,"STRONG",{});var X6e=s(Rae);zUe=r(X6e,"data2vec-text"),X6e.forEach(t),QUe=r(zA," \u2014 "),YS=n(zA,"A",{href:!0});var z6e=s(YS);WUe=r(z6e,"Data2VecTextConfig"),z6e.forEach(t),HUe=r(zA," (Data2VecText model)"),zA.forEach(t),UUe=i(L),nm=n(L,"LI",{});var QA=s(nm);Pae=n(QA,"STRONG",{});var Q6e=s(Pae);JUe=r(Q6e,"data2vec-vision"),Q6e.forEach(t),YUe=r(QA," \u2014 "),KS=n(QA,"A",{href:!0});var W6e=s(KS);KUe=r(W6e,"Data2VecVisionConfig"),W6e.forEach(t),ZUe=r(QA," (Data2VecVision model)"),QA.forEach(t),eJe=i(L),sm=n(L,"LI",{});var WA=s(sm);Bae=n(WA,"STRONG",{});var H6e=s(Bae);oJe=r(H6e,"deberta"),H6e.forEach(t),rJe=r(WA," \u2014 "),ZS=n(WA,"A",{href:!0});var U6e=s(ZS);tJe=r(U6e,"DebertaConfig"),U6e.forEach(t),aJe=r(WA," (DeBERTa model)"),WA.forEach(t),nJe=i(L),lm=n(L,"LI",{});var HA=s(lm);Iae=n(HA,"STRONG",{});var J6e=s(Iae);sJe=r(J6e,"deberta-v2"),J6e.forEach(t),lJe=r(HA," \u2014 "),eR=n(HA,"A",{href:!0});var Y6e=s(eR);iJe=r(Y6e,"DebertaV2Config"),Y6e.forEach(t),dJe=r(HA," (DeBERTa-v2 model)"),HA.forEach(t),cJe=i(L),im=n(L,"LI",{});var UA=s(im);Nae=n(UA,"STRONG",{});var Lot=s(Nae);fJe=r(Lot,"decision_transformer"),Lot.forEach(t),mJe=r(UA," \u2014 "),oR=n(UA,"A",{href:!0});var yot=s(oR);gJe=r(yot,"DecisionTransformerConfig"),yot.forEach(t),hJe=r(UA," (Decision Transformer model)"),UA.forEach(t),pJe=i(L),dm=n(L,"LI",{});var K6e=s(dm);qae=n(K6e,"STRONG",{});var xot=s(qae);_Je=r(xot,"deit"),xot.forEach(t),uJe=r(K6e," \u2014 "),rR=n(K6e,"A",{href:!0});var $ot=s(rR);bJe=r($ot,"DeiTConfig"),$ot.forEach(t),vJe=r(K6e," (DeiT model)"),K6e.forEach(t),FJe=i(L),cm=n(L,"LI",{});var Z6e=s(cm);jae=n(Z6e,"STRONG",{});var kot=s(jae);TJe=r(kot,"detr"),kot.forEach(t),MJe=r(Z6e," \u2014 "),tR=n(Z6e,"A",{href:!0});var Sot=s(tR);EJe=r(Sot,"DetrConfig"),Sot.forEach(t),CJe=r(Z6e," (DETR model)"),Z6e.forEach(t),wJe=i(L),fm=n(L,"LI",{});var eLe=s(fm);Dae=n(eLe,"STRONG",{});var Rot=s(Dae);AJe=r(Rot,"distilbert"),Rot.forEach(t),LJe=r(eLe," \u2014 "),aR=n(eLe,"A",{href:!0});var Pot=s(aR);yJe=r(Pot,"DistilBertConfig"),Pot.forEach(t),xJe=r(eLe," (DistilBERT model)"),eLe.forEach(t),$Je=i(L),mm=n(L,"LI",{});var oLe=s(mm);Gae=n(oLe,"STRONG",{});var Bot=s(Gae);kJe=r(Bot,"dpr"),Bot.forEach(t),SJe=r(oLe," \u2014 "),nR=n(oLe,"A",{href:!0});var Iot=s(nR);RJe=r(Iot,"DPRConfig"),Iot.forEach(t),PJe=r(oLe," (DPR model)"),oLe.forEach(t),BJe=i(L),gm=n(L,"LI",{});var rLe=s(gm);Oae=n(rLe,"STRONG",{});var Not=s(Oae);IJe=r(Not,"dpt"),Not.forEach(t),NJe=r(rLe," \u2014 "),sR=n(rLe,"A",{href:!0});var qot=s(sR);qJe=r(qot,"DPTConfig"),qot.forEach(t),jJe=r(rLe," (DPT model)"),rLe.forEach(t),DJe=i(L),hm=n(L,"LI",{});var tLe=s(hm);Vae=n(tLe,"STRONG",{});var jot=s(Vae);GJe=r(jot,"electra"),jot.forEach(t),OJe=r(tLe," \u2014 "),lR=n(tLe,"A",{href:!0});var Dot=s(lR);VJe=r(Dot,"ElectraConfig"),Dot.forEach(t),XJe=r(tLe," (ELECTRA model)"),tLe.forEach(t),zJe=i(L),pm=n(L,"LI",{});var aLe=s(pm);Xae=n(aLe,"STRONG",{});var Got=s(Xae);QJe=r(Got,"encoder-decoder"),Got.forEach(t),WJe=r(aLe," \u2014 "),iR=n(aLe,"A",{href:!0});var Oot=s(iR);HJe=r(Oot,"EncoderDecoderConfig"),Oot.forEach(t),UJe=r(aLe," (Encoder decoder model)"),aLe.forEach(t),JJe=i(L),_m=n(L,"LI",{});var nLe=s(_m);zae=n(nLe,"STRONG",{});var Vot=s(zae);YJe=r(Vot,"flaubert"),Vot.forEach(t),KJe=r(nLe," \u2014 "),dR=n(nLe,"A",{href:!0});var Xot=s(dR);ZJe=r(Xot,"FlaubertConfig"),Xot.forEach(t),eYe=r(nLe," (FlauBERT model)"),nLe.forEach(t),oYe=i(L),um=n(L,"LI",{});var sLe=s(um);Qae=n(sLe,"STRONG",{});var zot=s(Qae);rYe=r(zot,"flava"),zot.forEach(t),tYe=r(sLe," \u2014 "),cR=n(sLe,"A",{href:!0});var Qot=s(cR);aYe=r(Qot,"FlavaConfig"),Qot.forEach(t),nYe=r(sLe," (FLAVA model)"),sLe.forEach(t),sYe=i(L),bm=n(L,"LI",{});var lLe=s(bm);Wae=n(lLe,"STRONG",{});var Wot=s(Wae);lYe=r(Wot,"fnet"),Wot.forEach(t),iYe=r(lLe," \u2014 "),fR=n(lLe,"A",{href:!0});var Hot=s(fR);dYe=r(Hot,"FNetConfig"),Hot.forEach(t),cYe=r(lLe," (FNet model)"),lLe.forEach(t),fYe=i(L),vm=n(L,"LI",{});var iLe=s(vm);Hae=n(iLe,"STRONG",{});var Uot=s(Hae);mYe=r(Uot,"fsmt"),Uot.forEach(t),gYe=r(iLe," \u2014 "),mR=n(iLe,"A",{href:!0});var Jot=s(mR);hYe=r(Jot,"FSMTConfig"),Jot.forEach(t),pYe=r(iLe," (FairSeq Machine-Translation model)"),iLe.forEach(t),_Ye=i(L),Fm=n(L,"LI",{});var dLe=s(Fm);Uae=n(dLe,"STRONG",{});var Yot=s(Uae);uYe=r(Yot,"funnel"),Yot.forEach(t),bYe=r(dLe," \u2014 "),gR=n(dLe,"A",{href:!0});var Kot=s(gR);vYe=r(Kot,"FunnelConfig"),Kot.forEach(t),FYe=r(dLe," (Funnel Transformer model)"),dLe.forEach(t),TYe=i(L),Tm=n(L,"LI",{});var cLe=s(Tm);Jae=n(cLe,"STRONG",{});var Zot=s(Jae);MYe=r(Zot,"glpn"),Zot.forEach(t),EYe=r(cLe," \u2014 "),hR=n(cLe,"A",{href:!0});var ert=s(hR);CYe=r(ert,"GLPNConfig"),ert.forEach(t),wYe=r(cLe," (GLPN model)"),cLe.forEach(t),AYe=i(L),Mm=n(L,"LI",{});var fLe=s(Mm);Yae=n(fLe,"STRONG",{});var ort=s(Yae);LYe=r(ort,"gpt2"),ort.forEach(t),yYe=r(fLe," \u2014 "),pR=n(fLe,"A",{href:!0});var rrt=s(pR);xYe=r(rrt,"GPT2Config"),rrt.forEach(t),$Ye=r(fLe," (OpenAI GPT-2 model)"),fLe.forEach(t),kYe=i(L),Em=n(L,"LI",{});var mLe=s(Em);Kae=n(mLe,"STRONG",{});var trt=s(Kae);SYe=r(trt,"gpt_neo"),trt.forEach(t),RYe=r(mLe," \u2014 "),_R=n(mLe,"A",{href:!0});var art=s(_R);PYe=r(art,"GPTNeoConfig"),art.forEach(t),BYe=r(mLe," (GPT Neo model)"),mLe.forEach(t),IYe=i(L),Cm=n(L,"LI",{});var gLe=s(Cm);Zae=n(gLe,"STRONG",{});var nrt=s(Zae);NYe=r(nrt,"gpt_neox"),nrt.forEach(t),qYe=r(gLe," \u2014 "),uR=n(gLe,"A",{href:!0});var srt=s(uR);jYe=r(srt,"GPTNeoXConfig"),srt.forEach(t),DYe=r(gLe," (GPT NeoX model)"),gLe.forEach(t),GYe=i(L),wm=n(L,"LI",{});var hLe=s(wm);ene=n(hLe,"STRONG",{});var lrt=s(ene);OYe=r(lrt,"gptj"),lrt.forEach(t),VYe=r(hLe," \u2014 "),bR=n(hLe,"A",{href:!0});var irt=s(bR);XYe=r(irt,"GPTJConfig"),irt.forEach(t),zYe=r(hLe," (GPT-J model)"),hLe.forEach(t),QYe=i(L),Am=n(L,"LI",{});var pLe=s(Am);one=n(pLe,"STRONG",{});var drt=s(one);WYe=r(drt,"groupvit"),drt.forEach(t),HYe=r(pLe," \u2014 "),vR=n(pLe,"A",{href:!0});var crt=s(vR);UYe=r(crt,"GroupViTConfig"),crt.forEach(t),JYe=r(pLe," (GroupViT model)"),pLe.forEach(t),YYe=i(L),Lm=n(L,"LI",{});var _Le=s(Lm);rne=n(_Le,"STRONG",{});var frt=s(rne);KYe=r(frt,"hubert"),frt.forEach(t),ZYe=r(_Le," \u2014 "),FR=n(_Le,"A",{href:!0});var mrt=s(FR);eKe=r(mrt,"HubertConfig"),mrt.forEach(t),oKe=r(_Le," (Hubert model)"),_Le.forEach(t),rKe=i(L),ym=n(L,"LI",{});var uLe=s(ym);tne=n(uLe,"STRONG",{});var grt=s(tne);tKe=r(grt,"ibert"),grt.forEach(t),aKe=r(uLe," \u2014 "),TR=n(uLe,"A",{href:!0});var hrt=s(TR);nKe=r(hrt,"IBertConfig"),hrt.forEach(t),sKe=r(uLe," (I-BERT model)"),uLe.forEach(t),lKe=i(L),xm=n(L,"LI",{});var bLe=s(xm);ane=n(bLe,"STRONG",{});var prt=s(ane);iKe=r(prt,"imagegpt"),prt.forEach(t),dKe=r(bLe," \u2014 "),MR=n(bLe,"A",{href:!0});var _rt=s(MR);cKe=r(_rt,"ImageGPTConfig"),_rt.forEach(t),fKe=r(bLe," (ImageGPT model)"),bLe.forEach(t),mKe=i(L),$m=n(L,"LI",{});var vLe=s($m);nne=n(vLe,"STRONG",{});var urt=s(nne);gKe=r(urt,"layoutlm"),urt.forEach(t),hKe=r(vLe," \u2014 "),ER=n(vLe,"A",{href:!0});var brt=s(ER);pKe=r(brt,"LayoutLMConfig"),brt.forEach(t),_Ke=r(vLe," (LayoutLM model)"),vLe.forEach(t),uKe=i(L),km=n(L,"LI",{});var FLe=s(km);sne=n(FLe,"STRONG",{});var vrt=s(sne);bKe=r(vrt,"layoutlmv2"),vrt.forEach(t),vKe=r(FLe," \u2014 "),CR=n(FLe,"A",{href:!0});var Frt=s(CR);FKe=r(Frt,"LayoutLMv2Config"),Frt.forEach(t),TKe=r(FLe," (LayoutLMv2 model)"),FLe.forEach(t),MKe=i(L),Sm=n(L,"LI",{});var TLe=s(Sm);lne=n(TLe,"STRONG",{});var Trt=s(lne);EKe=r(Trt,"layoutlmv3"),Trt.forEach(t),CKe=r(TLe," \u2014 "),wR=n(TLe,"A",{href:!0});var Mrt=s(wR);wKe=r(Mrt,"LayoutLMv3Config"),Mrt.forEach(t),AKe=r(TLe," (LayoutLMv3 model)"),TLe.forEach(t),LKe=i(L),Rm=n(L,"LI",{});var MLe=s(Rm);ine=n(MLe,"STRONG",{});var Ert=s(ine);yKe=r(Ert,"led"),Ert.forEach(t),xKe=r(MLe," \u2014 "),AR=n(MLe,"A",{href:!0});var Crt=s(AR);$Ke=r(Crt,"LEDConfig"),Crt.forEach(t),kKe=r(MLe," (LED model)"),MLe.forEach(t),SKe=i(L),Pm=n(L,"LI",{});var ELe=s(Pm);dne=n(ELe,"STRONG",{});var wrt=s(dne);RKe=r(wrt,"levit"),wrt.forEach(t),PKe=r(ELe," \u2014 "),LR=n(ELe,"A",{href:!0});var Art=s(LR);BKe=r(Art,"LevitConfig"),Art.forEach(t),IKe=r(ELe," (LeViT model)"),ELe.forEach(t),NKe=i(L),Bm=n(L,"LI",{});var CLe=s(Bm);cne=n(CLe,"STRONG",{});var Lrt=s(cne);qKe=r(Lrt,"longformer"),Lrt.forEach(t),jKe=r(CLe," \u2014 "),yR=n(CLe,"A",{href:!0});var yrt=s(yR);DKe=r(yrt,"LongformerConfig"),yrt.forEach(t),GKe=r(CLe," (Longformer model)"),CLe.forEach(t),OKe=i(L),Im=n(L,"LI",{});var wLe=s(Im);fne=n(wLe,"STRONG",{});var xrt=s(fne);VKe=r(xrt,"longt5"),xrt.forEach(t),XKe=r(wLe," \u2014 "),xR=n(wLe,"A",{href:!0});var $rt=s(xR);zKe=r($rt,"LongT5Config"),$rt.forEach(t),QKe=r(wLe," (LongT5 model)"),wLe.forEach(t),WKe=i(L),Nm=n(L,"LI",{});var ALe=s(Nm);mne=n(ALe,"STRONG",{});var krt=s(mne);HKe=r(krt,"luke"),krt.forEach(t),UKe=r(ALe," \u2014 "),$R=n(ALe,"A",{href:!0});var Srt=s($R);JKe=r(Srt,"LukeConfig"),Srt.forEach(t),YKe=r(ALe," (LUKE model)"),ALe.forEach(t),KKe=i(L),qm=n(L,"LI",{});var LLe=s(qm);gne=n(LLe,"STRONG",{});var Rrt=s(gne);ZKe=r(Rrt,"lxmert"),Rrt.forEach(t),eZe=r(LLe," \u2014 "),kR=n(LLe,"A",{href:!0});var Prt=s(kR);oZe=r(Prt,"LxmertConfig"),Prt.forEach(t),rZe=r(LLe," (LXMERT model)"),LLe.forEach(t),tZe=i(L),jm=n(L,"LI",{});var yLe=s(jm);hne=n(yLe,"STRONG",{});var Brt=s(hne);aZe=r(Brt,"m2m_100"),Brt.forEach(t),nZe=r(yLe," \u2014 "),SR=n(yLe,"A",{href:!0});var Irt=s(SR);sZe=r(Irt,"M2M100Config"),Irt.forEach(t),lZe=r(yLe," (M2M100 model)"),yLe.forEach(t),iZe=i(L),Dm=n(L,"LI",{});var xLe=s(Dm);pne=n(xLe,"STRONG",{});var Nrt=s(pne);dZe=r(Nrt,"marian"),Nrt.forEach(t),cZe=r(xLe," \u2014 "),RR=n(xLe,"A",{href:!0});var qrt=s(RR);fZe=r(qrt,"MarianConfig"),qrt.forEach(t),mZe=r(xLe," (Marian model)"),xLe.forEach(t),gZe=i(L),Gm=n(L,"LI",{});var $Le=s(Gm);_ne=n($Le,"STRONG",{});var jrt=s(_ne);hZe=r(jrt,"maskformer"),jrt.forEach(t),pZe=r($Le," \u2014 "),PR=n($Le,"A",{href:!0});var Drt=s(PR);_Ze=r(Drt,"MaskFormerConfig"),Drt.forEach(t),uZe=r($Le," (MaskFormer model)"),$Le.forEach(t),bZe=i(L),Om=n(L,"LI",{});var kLe=s(Om);une=n(kLe,"STRONG",{});var Grt=s(une);vZe=r(Grt,"mbart"),Grt.forEach(t),FZe=r(kLe," \u2014 "),BR=n(kLe,"A",{href:!0});var Ort=s(BR);TZe=r(Ort,"MBartConfig"),Ort.forEach(t),MZe=r(kLe," (mBART model)"),kLe.forEach(t),EZe=i(L),Vm=n(L,"LI",{});var SLe=s(Vm);bne=n(SLe,"STRONG",{});var Vrt=s(bne);CZe=r(Vrt,"mctct"),Vrt.forEach(t),wZe=r(SLe," \u2014 "),IR=n(SLe,"A",{href:!0});var Xrt=s(IR);AZe=r(Xrt,"MCTCTConfig"),Xrt.forEach(t),LZe=r(SLe," (M-CTC-T model)"),SLe.forEach(t),yZe=i(L),Xm=n(L,"LI",{});var RLe=s(Xm);vne=n(RLe,"STRONG",{});var zrt=s(vne);xZe=r(zrt,"megatron-bert"),zrt.forEach(t),$Ze=r(RLe," \u2014 "),NR=n(RLe,"A",{href:!0});var Qrt=s(NR);kZe=r(Qrt,"MegatronBertConfig"),Qrt.forEach(t),SZe=r(RLe," (Megatron-BERT model)"),RLe.forEach(t),RZe=i(L),zm=n(L,"LI",{});var PLe=s(zm);Fne=n(PLe,"STRONG",{});var Wrt=s(Fne);PZe=r(Wrt,"mobilebert"),Wrt.forEach(t),BZe=r(PLe," \u2014 "),qR=n(PLe,"A",{href:!0});var Hrt=s(qR);IZe=r(Hrt,"MobileBertConfig"),Hrt.forEach(t),NZe=r(PLe," (MobileBERT model)"),PLe.forEach(t),qZe=i(L),Qm=n(L,"LI",{});var BLe=s(Qm);Tne=n(BLe,"STRONG",{});var Urt=s(Tne);jZe=r(Urt,"mpnet"),Urt.forEach(t),DZe=r(BLe," \u2014 "),jR=n(BLe,"A",{href:!0});var Jrt=s(jR);GZe=r(Jrt,"MPNetConfig"),Jrt.forEach(t),OZe=r(BLe," (MPNet model)"),BLe.forEach(t),VZe=i(L),Wm=n(L,"LI",{});var ILe=s(Wm);Mne=n(ILe,"STRONG",{});var Yrt=s(Mne);XZe=r(Yrt,"mt5"),Yrt.forEach(t),zZe=r(ILe," \u2014 "),DR=n(ILe,"A",{href:!0});var Krt=s(DR);QZe=r(Krt,"MT5Config"),Krt.forEach(t),WZe=r(ILe," (MT5 model)"),ILe.forEach(t),HZe=i(L),Hm=n(L,"LI",{});var NLe=s(Hm);Ene=n(NLe,"STRONG",{});var Zrt=s(Ene);UZe=r(Zrt,"mvp"),Zrt.forEach(t),JZe=r(NLe," \u2014 "),GR=n(NLe,"A",{href:!0});var ett=s(GR);YZe=r(ett,"MvpConfig"),ett.forEach(t),KZe=r(NLe," (MVP model)"),NLe.forEach(t),ZZe=i(L),Um=n(L,"LI",{});var qLe=s(Um);Cne=n(qLe,"STRONG",{});var ott=s(Cne);eeo=r(ott,"nezha"),ott.forEach(t),oeo=r(qLe," \u2014 "),OR=n(qLe,"A",{href:!0});var rtt=s(OR);reo=r(rtt,"NezhaConfig"),rtt.forEach(t),teo=r(qLe," (Nezha model)"),qLe.forEach(t),aeo=i(L),Jm=n(L,"LI",{});var jLe=s(Jm);wne=n(jLe,"STRONG",{});var ttt=s(wne);neo=r(ttt,"nystromformer"),ttt.forEach(t),seo=r(jLe," \u2014 "),VR=n(jLe,"A",{href:!0});var att=s(VR);leo=r(att,"NystromformerConfig"),att.forEach(t),ieo=r(jLe," (Nystr\xF6mformer model)"),jLe.forEach(t),deo=i(L),Ym=n(L,"LI",{});var DLe=s(Ym);Ane=n(DLe,"STRONG",{});var ntt=s(Ane);ceo=r(ntt,"openai-gpt"),ntt.forEach(t),feo=r(DLe," \u2014 "),XR=n(DLe,"A",{href:!0});var stt=s(XR);meo=r(stt,"OpenAIGPTConfig"),stt.forEach(t),geo=r(DLe," (OpenAI GPT model)"),DLe.forEach(t),heo=i(L),Km=n(L,"LI",{});var GLe=s(Km);Lne=n(GLe,"STRONG",{});var ltt=s(Lne);peo=r(ltt,"opt"),ltt.forEach(t),_eo=r(GLe," \u2014 "),zR=n(GLe,"A",{href:!0});var itt=s(zR);ueo=r(itt,"OPTConfig"),itt.forEach(t),beo=r(GLe," (OPT model)"),GLe.forEach(t),veo=i(L),Zm=n(L,"LI",{});var OLe=s(Zm);yne=n(OLe,"STRONG",{});var dtt=s(yne);Feo=r(dtt,"pegasus"),dtt.forEach(t),Teo=r(OLe," \u2014 "),QR=n(OLe,"A",{href:!0});var ctt=s(QR);Meo=r(ctt,"PegasusConfig"),ctt.forEach(t),Eeo=r(OLe," (Pegasus model)"),OLe.forEach(t),Ceo=i(L),eg=n(L,"LI",{});var VLe=s(eg);xne=n(VLe,"STRONG",{});var ftt=s(xne);weo=r(ftt,"perceiver"),ftt.forEach(t),Aeo=r(VLe," \u2014 "),WR=n(VLe,"A",{href:!0});var mtt=s(WR);Leo=r(mtt,"PerceiverConfig"),mtt.forEach(t),yeo=r(VLe," (Perceiver model)"),VLe.forEach(t),xeo=i(L),og=n(L,"LI",{});var XLe=s(og);$ne=n(XLe,"STRONG",{});var gtt=s($ne);$eo=r(gtt,"plbart"),gtt.forEach(t),keo=r(XLe," \u2014 "),HR=n(XLe,"A",{href:!0});var htt=s(HR);Seo=r(htt,"PLBartConfig"),htt.forEach(t),Reo=r(XLe," (PLBart model)"),XLe.forEach(t),Peo=i(L),rg=n(L,"LI",{});var zLe=s(rg);kne=n(zLe,"STRONG",{});var ptt=s(kne);Beo=r(ptt,"poolformer"),ptt.forEach(t),Ieo=r(zLe," \u2014 "),UR=n(zLe,"A",{href:!0});var _tt=s(UR);Neo=r(_tt,"PoolFormerConfig"),_tt.forEach(t),qeo=r(zLe," (PoolFormer model)"),zLe.forEach(t),jeo=i(L),tg=n(L,"LI",{});var QLe=s(tg);Sne=n(QLe,"STRONG",{});var utt=s(Sne);Deo=r(utt,"prophetnet"),utt.forEach(t),Geo=r(QLe," \u2014 "),JR=n(QLe,"A",{href:!0});var btt=s(JR);Oeo=r(btt,"ProphetNetConfig"),btt.forEach(t),Veo=r(QLe," (ProphetNet model)"),QLe.forEach(t),Xeo=i(L),ag=n(L,"LI",{});var WLe=s(ag);Rne=n(WLe,"STRONG",{});var vtt=s(Rne);zeo=r(vtt,"qdqbert"),vtt.forEach(t),Qeo=r(WLe," \u2014 "),YR=n(WLe,"A",{href:!0});var Ftt=s(YR);Weo=r(Ftt,"QDQBertConfig"),Ftt.forEach(t),Heo=r(WLe," (QDQBert model)"),WLe.forEach(t),Ueo=i(L),ng=n(L,"LI",{});var HLe=s(ng);Pne=n(HLe,"STRONG",{});var Ttt=s(Pne);Jeo=r(Ttt,"rag"),Ttt.forEach(t),Yeo=r(HLe," \u2014 "),KR=n(HLe,"A",{href:!0});var Mtt=s(KR);Keo=r(Mtt,"RagConfig"),Mtt.forEach(t),Zeo=r(HLe," (RAG model)"),HLe.forEach(t),eoo=i(L),sg=n(L,"LI",{});var ULe=s(sg);Bne=n(ULe,"STRONG",{});var Ett=s(Bne);ooo=r(Ett,"realm"),Ett.forEach(t),roo=r(ULe," \u2014 "),ZR=n(ULe,"A",{href:!0});var Ctt=s(ZR);too=r(Ctt,"RealmConfig"),Ctt.forEach(t),aoo=r(ULe," (REALM model)"),ULe.forEach(t),noo=i(L),lg=n(L,"LI",{});var JLe=s(lg);Ine=n(JLe,"STRONG",{});var wtt=s(Ine);soo=r(wtt,"reformer"),wtt.forEach(t),loo=r(JLe," \u2014 "),eP=n(JLe,"A",{href:!0});var Att=s(eP);ioo=r(Att,"ReformerConfig"),Att.forEach(t),doo=r(JLe," (Reformer model)"),JLe.forEach(t),coo=i(L),ig=n(L,"LI",{});var YLe=s(ig);Nne=n(YLe,"STRONG",{});var Ltt=s(Nne);foo=r(Ltt,"regnet"),Ltt.forEach(t),moo=r(YLe," \u2014 "),oP=n(YLe,"A",{href:!0});var ytt=s(oP);goo=r(ytt,"RegNetConfig"),ytt.forEach(t),hoo=r(YLe," (RegNet model)"),YLe.forEach(t),poo=i(L),dg=n(L,"LI",{});var KLe=s(dg);qne=n(KLe,"STRONG",{});var xtt=s(qne);_oo=r(xtt,"rembert"),xtt.forEach(t),uoo=r(KLe," \u2014 "),rP=n(KLe,"A",{href:!0});var $tt=s(rP);boo=r($tt,"RemBertConfig"),$tt.forEach(t),voo=r(KLe," (RemBERT model)"),KLe.forEach(t),Foo=i(L),cg=n(L,"LI",{});var ZLe=s(cg);jne=n(ZLe,"STRONG",{});var ktt=s(jne);Too=r(ktt,"resnet"),ktt.forEach(t),Moo=r(ZLe," \u2014 "),tP=n(ZLe,"A",{href:!0});var Stt=s(tP);Eoo=r(Stt,"ResNetConfig"),Stt.forEach(t),Coo=r(ZLe," (ResNet model)"),ZLe.forEach(t),woo=i(L),fg=n(L,"LI",{});var eye=s(fg);Dne=n(eye,"STRONG",{});var Rtt=s(Dne);Aoo=r(Rtt,"retribert"),Rtt.forEach(t),Loo=r(eye," \u2014 "),aP=n(eye,"A",{href:!0});var Ptt=s(aP);yoo=r(Ptt,"RetriBertConfig"),Ptt.forEach(t),xoo=r(eye," (RetriBERT model)"),eye.forEach(t),$oo=i(L),mg=n(L,"LI",{});var oye=s(mg);Gne=n(oye,"STRONG",{});var Btt=s(Gne);koo=r(Btt,"roberta"),Btt.forEach(t),Soo=r(oye," \u2014 "),nP=n(oye,"A",{href:!0});var Itt=s(nP);Roo=r(Itt,"RobertaConfig"),Itt.forEach(t),Poo=r(oye," (RoBERTa model)"),oye.forEach(t),Boo=i(L),gg=n(L,"LI",{});var rye=s(gg);One=n(rye,"STRONG",{});var Ntt=s(One);Ioo=r(Ntt,"roformer"),Ntt.forEach(t),Noo=r(rye," \u2014 "),sP=n(rye,"A",{href:!0});var qtt=s(sP);qoo=r(qtt,"RoFormerConfig"),qtt.forEach(t),joo=r(rye," (RoFormer model)"),rye.forEach(t),Doo=i(L),hg=n(L,"LI",{});var tye=s(hg);Vne=n(tye,"STRONG",{});var jtt=s(Vne);Goo=r(jtt,"segformer"),jtt.forEach(t),Ooo=r(tye," \u2014 "),lP=n(tye,"A",{href:!0});var Dtt=s(lP);Voo=r(Dtt,"SegformerConfig"),Dtt.forEach(t),Xoo=r(tye," (SegFormer model)"),tye.forEach(t),zoo=i(L),pg=n(L,"LI",{});var aye=s(pg);Xne=n(aye,"STRONG",{});var Gtt=s(Xne);Qoo=r(Gtt,"sew"),Gtt.forEach(t),Woo=r(aye," \u2014 "),iP=n(aye,"A",{href:!0});var Ott=s(iP);Hoo=r(Ott,"SEWConfig"),Ott.forEach(t),Uoo=r(aye," (SEW model)"),aye.forEach(t),Joo=i(L),_g=n(L,"LI",{});var nye=s(_g);zne=n(nye,"STRONG",{});var Vtt=s(zne);Yoo=r(Vtt,"sew-d"),Vtt.forEach(t),Koo=r(nye," \u2014 "),dP=n(nye,"A",{href:!0});var Xtt=s(dP);Zoo=r(Xtt,"SEWDConfig"),Xtt.forEach(t),ero=r(nye," (SEW-D model)"),nye.forEach(t),oro=i(L),ug=n(L,"LI",{});var sye=s(ug);Qne=n(sye,"STRONG",{});var ztt=s(Qne);rro=r(ztt,"speech-encoder-decoder"),ztt.forEach(t),tro=r(sye," \u2014 "),cP=n(sye,"A",{href:!0});var Qtt=s(cP);aro=r(Qtt,"SpeechEncoderDecoderConfig"),Qtt.forEach(t),nro=r(sye," (Speech Encoder decoder model)"),sye.forEach(t),sro=i(L),bg=n(L,"LI",{});var lye=s(bg);Wne=n(lye,"STRONG",{});var Wtt=s(Wne);lro=r(Wtt,"speech_to_text"),Wtt.forEach(t),iro=r(lye," \u2014 "),fP=n(lye,"A",{href:!0});var Htt=s(fP);dro=r(Htt,"Speech2TextConfig"),Htt.forEach(t),cro=r(lye," (Speech2Text model)"),lye.forEach(t),fro=i(L),vg=n(L,"LI",{});var iye=s(vg);Hne=n(iye,"STRONG",{});var Utt=s(Hne);mro=r(Utt,"speech_to_text_2"),Utt.forEach(t),gro=r(iye," \u2014 "),mP=n(iye,"A",{href:!0});var Jtt=s(mP);hro=r(Jtt,"Speech2Text2Config"),Jtt.forEach(t),pro=r(iye," (Speech2Text2 model)"),iye.forEach(t),_ro=i(L),Fg=n(L,"LI",{});var dye=s(Fg);Une=n(dye,"STRONG",{});var Ytt=s(Une);uro=r(Ytt,"splinter"),Ytt.forEach(t),bro=r(dye," \u2014 "),gP=n(dye,"A",{href:!0});var Ktt=s(gP);vro=r(Ktt,"SplinterConfig"),Ktt.forEach(t),Fro=r(dye," (Splinter model)"),dye.forEach(t),Tro=i(L),Tg=n(L,"LI",{});var cye=s(Tg);Jne=n(cye,"STRONG",{});var Ztt=s(Jne);Mro=r(Ztt,"squeezebert"),Ztt.forEach(t),Ero=r(cye," \u2014 "),hP=n(cye,"A",{href:!0});var eat=s(hP);Cro=r(eat,"SqueezeBertConfig"),eat.forEach(t),wro=r(cye," (SqueezeBERT model)"),cye.forEach(t),Aro=i(L),Mg=n(L,"LI",{});var fye=s(Mg);Yne=n(fye,"STRONG",{});var oat=s(Yne);Lro=r(oat,"swin"),oat.forEach(t),yro=r(fye," \u2014 "),pP=n(fye,"A",{href:!0});var rat=s(pP);xro=r(rat,"SwinConfig"),rat.forEach(t),$ro=r(fye," (Swin Transformer model)"),fye.forEach(t),kro=i(L),Eg=n(L,"LI",{});var mye=s(Eg);Kne=n(mye,"STRONG",{});var tat=s(Kne);Sro=r(tat,"t5"),tat.forEach(t),Rro=r(mye," \u2014 "),_P=n(mye,"A",{href:!0});var aat=s(_P);Pro=r(aat,"T5Config"),aat.forEach(t),Bro=r(mye," (T5 model)"),mye.forEach(t),Iro=i(L),Cg=n(L,"LI",{});var gye=s(Cg);Zne=n(gye,"STRONG",{});var nat=s(Zne);Nro=r(nat,"tapas"),nat.forEach(t),qro=r(gye," \u2014 "),uP=n(gye,"A",{href:!0});var sat=s(uP);jro=r(sat,"TapasConfig"),sat.forEach(t),Dro=r(gye," (TAPAS model)"),gye.forEach(t),Gro=i(L),wg=n(L,"LI",{});var hye=s(wg);ese=n(hye,"STRONG",{});var lat=s(ese);Oro=r(lat,"trajectory_transformer"),lat.forEach(t),Vro=r(hye," \u2014 "),bP=n(hye,"A",{href:!0});var iat=s(bP);Xro=r(iat,"TrajectoryTransformerConfig"),iat.forEach(t),zro=r(hye," (Trajectory Transformer model)"),hye.forEach(t),Qro=i(L),Ag=n(L,"LI",{});var pye=s(Ag);ose=n(pye,"STRONG",{});var dat=s(ose);Wro=r(dat,"transfo-xl"),dat.forEach(t),Hro=r(pye," \u2014 "),vP=n(pye,"A",{href:!0});var cat=s(vP);Uro=r(cat,"TransfoXLConfig"),cat.forEach(t),Jro=r(pye," (Transformer-XL model)"),pye.forEach(t),Yro=i(L),Lg=n(L,"LI",{});var _ye=s(Lg);rse=n(_ye,"STRONG",{});var fat=s(rse);Kro=r(fat,"trocr"),fat.forEach(t),Zro=r(_ye," \u2014 "),FP=n(_ye,"A",{href:!0});var mat=s(FP);eto=r(mat,"TrOCRConfig"),mat.forEach(t),oto=r(_ye," (TrOCR model)"),_ye.forEach(t),rto=i(L),yg=n(L,"LI",{});var uye=s(yg);tse=n(uye,"STRONG",{});var gat=s(tse);tto=r(gat,"unispeech"),gat.forEach(t),ato=r(uye," \u2014 "),TP=n(uye,"A",{href:!0});var hat=s(TP);nto=r(hat,"UniSpeechConfig"),hat.forEach(t),sto=r(uye," (UniSpeech model)"),uye.forEach(t),lto=i(L),xg=n(L,"LI",{});var bye=s(xg);ase=n(bye,"STRONG",{});var pat=s(ase);ito=r(pat,"unispeech-sat"),pat.forEach(t),dto=r(bye," \u2014 "),MP=n(bye,"A",{href:!0});var _at=s(MP);cto=r(_at,"UniSpeechSatConfig"),_at.forEach(t),fto=r(bye," (UniSpeechSat model)"),bye.forEach(t),mto=i(L),$g=n(L,"LI",{});var vye=s($g);nse=n(vye,"STRONG",{});var uat=s(nse);gto=r(uat,"van"),uat.forEach(t),hto=r(vye," \u2014 "),EP=n(vye,"A",{href:!0});var bat=s(EP);pto=r(bat,"VanConfig"),bat.forEach(t),_to=r(vye," (VAN model)"),vye.forEach(t),uto=i(L),kg=n(L,"LI",{});var Fye=s(kg);sse=n(Fye,"STRONG",{});var vat=s(sse);bto=r(vat,"vilt"),vat.forEach(t),vto=r(Fye," \u2014 "),CP=n(Fye,"A",{href:!0});var Fat=s(CP);Fto=r(Fat,"ViltConfig"),Fat.forEach(t),Tto=r(Fye," (ViLT model)"),Fye.forEach(t),Mto=i(L),Sg=n(L,"LI",{});var Tye=s(Sg);lse=n(Tye,"STRONG",{});var Tat=s(lse);Eto=r(Tat,"vision-encoder-decoder"),Tat.forEach(t),Cto=r(Tye," \u2014 "),wP=n(Tye,"A",{href:!0});var Mat=s(wP);wto=r(Mat,"VisionEncoderDecoderConfig"),Mat.forEach(t),Ato=r(Tye," (Vision Encoder decoder model)"),Tye.forEach(t),Lto=i(L),Rg=n(L,"LI",{});var Mye=s(Rg);ise=n(Mye,"STRONG",{});var Eat=s(ise);yto=r(Eat,"vision-text-dual-encoder"),Eat.forEach(t),xto=r(Mye," \u2014 "),AP=n(Mye,"A",{href:!0});var Cat=s(AP);$to=r(Cat,"VisionTextDualEncoderConfig"),Cat.forEach(t),kto=r(Mye," (VisionTextDualEncoder model)"),Mye.forEach(t),Sto=i(L),Pg=n(L,"LI",{});var Eye=s(Pg);dse=n(Eye,"STRONG",{});var wat=s(dse);Rto=r(wat,"visual_bert"),wat.forEach(t),Pto=r(Eye," \u2014 "),LP=n(Eye,"A",{href:!0});var Aat=s(LP);Bto=r(Aat,"VisualBertConfig"),Aat.forEach(t),Ito=r(Eye," (VisualBERT model)"),Eye.forEach(t),Nto=i(L),Bg=n(L,"LI",{});var Cye=s(Bg);cse=n(Cye,"STRONG",{});var Lat=s(cse);qto=r(Lat,"vit"),Lat.forEach(t),jto=r(Cye," \u2014 "),yP=n(Cye,"A",{href:!0});var yat=s(yP);Dto=r(yat,"ViTConfig"),yat.forEach(t),Gto=r(Cye," (ViT model)"),Cye.forEach(t),Oto=i(L),Ig=n(L,"LI",{});var wye=s(Ig);fse=n(wye,"STRONG",{});var xat=s(fse);Vto=r(xat,"vit_mae"),xat.forEach(t),Xto=r(wye," \u2014 "),xP=n(wye,"A",{href:!0});var $at=s(xP);zto=r($at,"ViTMAEConfig"),$at.forEach(t),Qto=r(wye," (ViTMAE model)"),wye.forEach(t),Wto=i(L),Ng=n(L,"LI",{});var Aye=s(Ng);mse=n(Aye,"STRONG",{});var kat=s(mse);Hto=r(kat,"wav2vec2"),kat.forEach(t),Uto=r(Aye," \u2014 "),$P=n(Aye,"A",{href:!0});var Sat=s($P);Jto=r(Sat,"Wav2Vec2Config"),Sat.forEach(t),Yto=r(Aye," (Wav2Vec2 model)"),Aye.forEach(t),Kto=i(L),qg=n(L,"LI",{});var Lye=s(qg);gse=n(Lye,"STRONG",{});var Rat=s(gse);Zto=r(Rat,"wav2vec2-conformer"),Rat.forEach(t),eao=r(Lye," \u2014 "),kP=n(Lye,"A",{href:!0});var Pat=s(kP);oao=r(Pat,"Wav2Vec2ConformerConfig"),Pat.forEach(t),rao=r(Lye," (Wav2Vec2-Conformer model)"),Lye.forEach(t),tao=i(L),jg=n(L,"LI",{});var yye=s(jg);hse=n(yye,"STRONG",{});var Bat=s(hse);aao=r(Bat,"wavlm"),Bat.forEach(t),nao=r(yye," \u2014 "),SP=n(yye,"A",{href:!0});var Iat=s(SP);sao=r(Iat,"WavLMConfig"),Iat.forEach(t),lao=r(yye," (WavLM model)"),yye.forEach(t),iao=i(L),Dg=n(L,"LI",{});var xye=s(Dg);pse=n(xye,"STRONG",{});var Nat=s(pse);dao=r(Nat,"xglm"),Nat.forEach(t),cao=r(xye," \u2014 "),RP=n(xye,"A",{href:!0});var qat=s(RP);fao=r(qat,"XGLMConfig"),qat.forEach(t),mao=r(xye," (XGLM model)"),xye.forEach(t),gao=i(L),Gg=n(L,"LI",{});var $ye=s(Gg);_se=n($ye,"STRONG",{});var jat=s(_se);hao=r(jat,"xlm"),jat.forEach(t),pao=r($ye," \u2014 "),PP=n($ye,"A",{href:!0});var Dat=s(PP);_ao=r(Dat,"XLMConfig"),Dat.forEach(t),uao=r($ye," (XLM model)"),$ye.forEach(t),bao=i(L),Og=n(L,"LI",{});var kye=s(Og);use=n(kye,"STRONG",{});var Gat=s(use);vao=r(Gat,"xlm-prophetnet"),Gat.forEach(t),Fao=r(kye," \u2014 "),BP=n(kye,"A",{href:!0});var Oat=s(BP);Tao=r(Oat,"XLMProphetNetConfig"),Oat.forEach(t),Mao=r(kye," (XLM-ProphetNet model)"),kye.forEach(t),Eao=i(L),Vg=n(L,"LI",{});var Sye=s(Vg);bse=n(Sye,"STRONG",{});var Vat=s(bse);Cao=r(Vat,"xlm-roberta"),Vat.forEach(t),wao=r(Sye," \u2014 "),IP=n(Sye,"A",{href:!0});var Xat=s(IP);Aao=r(Xat,"XLMRobertaConfig"),Xat.forEach(t),Lao=r(Sye," (XLM-RoBERTa model)"),Sye.forEach(t),yao=i(L),Xg=n(L,"LI",{});var Rye=s(Xg);vse=n(Rye,"STRONG",{});var zat=s(vse);xao=r(zat,"xlm-roberta-xl"),zat.forEach(t),$ao=r(Rye," \u2014 "),NP=n(Rye,"A",{href:!0});var Qat=s(NP);kao=r(Qat,"XLMRobertaXLConfig"),Qat.forEach(t),Sao=r(Rye," (XLM-RoBERTa-XL model)"),Rye.forEach(t),Rao=i(L),zg=n(L,"LI",{});var Pye=s(zg);Fse=n(Pye,"STRONG",{});var Wat=s(Fse);Pao=r(Wat,"xlnet"),Wat.forEach(t),Bao=r(Pye," \u2014 "),qP=n(Pye,"A",{href:!0});var Hat=s(qP);Iao=r(Hat,"XLNetConfig"),Hat.forEach(t),Nao=r(Pye," (XLNet model)"),Pye.forEach(t),qao=i(L),Qg=n(L,"LI",{});var Bye=s(Qg);Tse=n(Bye,"STRONG",{});var Uat=s(Tse);jao=r(Uat,"yolos"),Uat.forEach(t),Dao=r(Bye," \u2014 "),jP=n(Bye,"A",{href:!0});var Jat=s(jP);Gao=r(Jat,"YolosConfig"),Jat.forEach(t),Oao=r(Bye," (YOLOS model)"),Bye.forEach(t),Vao=i(L),Wg=n(L,"LI",{});var Iye=s(Wg);Mse=n(Iye,"STRONG",{});var Yat=s(Mse);Xao=r(Yat,"yoso"),Yat.forEach(t),zao=r(Iye," \u2014 "),DP=n(Iye,"A",{href:!0});var Kat=s(DP);Qao=r(Kat,"YosoConfig"),Kat.forEach(t),Wao=r(Iye," (YOSO model)"),Iye.forEach(t),L.forEach(t),Hao=i(at),T(Hg.$$.fragment,at),at.forEach(t),Uao=i(tt),Ug=n(tt,"DIV",{class:!0});var Fze=s(Ug);T(ry.$$.fragment,Fze),Jao=i(Fze),Ese=n(Fze,"P",{});var Zat=s(Ese);Yao=r(Zat,"Register a new configuration for this class."),Zat.forEach(t),Fze.forEach(t),tt.forEach(t),TVe=i(f),Bi=n(f,"H2",{class:!0});var Tze=s(Bi);Jg=n(Tze,"A",{id:!0,class:!0,href:!0});var ent=s(Jg);Cse=n(ent,"SPAN",{});var ont=s(Cse);T(ty.$$.fragment,ont),ont.forEach(t),ent.forEach(t),Kao=i(Tze),wse=n(Tze,"SPAN",{});var rnt=s(wse);Zao=r(rnt,"AutoTokenizer"),rnt.forEach(t),Tze.forEach(t),MVe=i(f),Ao=n(f,"DIV",{class:!0});var Js=s(Ao);T(ay.$$.fragment,Js),eno=i(Js),ny=n(Js,"P",{});var Mze=s(ny);ono=r(Mze,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GP=n(Mze,"A",{href:!0});var tnt=s(GP);rno=r(tnt,"AutoTokenizer.from_pretrained()"),tnt.forEach(t),tno=r(Mze," class method."),Mze.forEach(t),ano=i(Js),sy=n(Js,"P",{});var Eze=s(sy);nno=r(Eze,"This class cannot be instantiated directly using "),Ase=n(Eze,"CODE",{});var ant=s(Ase);sno=r(ant,"__init__()"),ant.forEach(t),lno=r(Eze," (throws an error)."),Eze.forEach(t),ino=i(Js),Lr=n(Js,"DIV",{class:!0});var Ys=s(Lr);T(ly.$$.fragment,Ys),dno=i(Ys),Lse=n(Ys,"P",{});var nnt=s(Lse);cno=r(nnt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nnt.forEach(t),fno=i(Ys),Sa=n(Ys,"P",{});var JA=s(Sa);mno=r(JA,"The tokenizer class to instantiate is selected based on the "),yse=n(JA,"CODE",{});var snt=s(yse);gno=r(snt,"model_type"),snt.forEach(t),hno=r(JA,` property of the config object (either
passed as an argument or loaded from `),xse=n(JA,"CODE",{});var lnt=s(xse);pno=r(lnt,"pretrained_model_name_or_path"),lnt.forEach(t),_no=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(JA,"CODE",{});var int=s($se);uno=r(int,"pretrained_model_name_or_path"),int.forEach(t),bno=r(JA,":"),JA.forEach(t),vno=i(Ys),k=n(Ys,"UL",{});var S=s(k);qn=n(S,"LI",{});var gk=s(qn);kse=n(gk,"STRONG",{});var dnt=s(kse);Fno=r(dnt,"albert"),dnt.forEach(t),Tno=r(gk," \u2014 "),OP=n(gk,"A",{href:!0});var cnt=s(OP);Mno=r(cnt,"AlbertTokenizer"),cnt.forEach(t),Eno=r(gk," or "),VP=n(gk,"A",{href:!0});var fnt=s(VP);Cno=r(fnt,"AlbertTokenizerFast"),fnt.forEach(t),wno=r(gk," (ALBERT model)"),gk.forEach(t),Ano=i(S),jn=n(S,"LI",{});var hk=s(jn);Sse=n(hk,"STRONG",{});var mnt=s(Sse);Lno=r(mnt,"bart"),mnt.forEach(t),yno=r(hk," \u2014 "),XP=n(hk,"A",{href:!0});var gnt=s(XP);xno=r(gnt,"BartTokenizer"),gnt.forEach(t),$no=r(hk," or "),zP=n(hk,"A",{href:!0});var hnt=s(zP);kno=r(hnt,"BartTokenizerFast"),hnt.forEach(t),Sno=r(hk," (BART model)"),hk.forEach(t),Rno=i(S),Dn=n(S,"LI",{});var pk=s(Dn);Rse=n(pk,"STRONG",{});var pnt=s(Rse);Pno=r(pnt,"barthez"),pnt.forEach(t),Bno=r(pk," \u2014 "),QP=n(pk,"A",{href:!0});var _nt=s(QP);Ino=r(_nt,"BarthezTokenizer"),_nt.forEach(t),Nno=r(pk," or "),WP=n(pk,"A",{href:!0});var unt=s(WP);qno=r(unt,"BarthezTokenizerFast"),unt.forEach(t),jno=r(pk," (BARThez model)"),pk.forEach(t),Dno=i(S),Yg=n(S,"LI",{});var Nye=s(Yg);Pse=n(Nye,"STRONG",{});var bnt=s(Pse);Gno=r(bnt,"bartpho"),bnt.forEach(t),Ono=r(Nye," \u2014 "),HP=n(Nye,"A",{href:!0});var vnt=s(HP);Vno=r(vnt,"BartphoTokenizer"),vnt.forEach(t),Xno=r(Nye," (BARTpho model)"),Nye.forEach(t),zno=i(S),Gn=n(S,"LI",{});var _k=s(Gn);Bse=n(_k,"STRONG",{});var Fnt=s(Bse);Qno=r(Fnt,"bert"),Fnt.forEach(t),Wno=r(_k," \u2014 "),UP=n(_k,"A",{href:!0});var Tnt=s(UP);Hno=r(Tnt,"BertTokenizer"),Tnt.forEach(t),Uno=r(_k," or "),JP=n(_k,"A",{href:!0});var Mnt=s(JP);Jno=r(Mnt,"BertTokenizerFast"),Mnt.forEach(t),Yno=r(_k," (BERT model)"),_k.forEach(t),Kno=i(S),Kg=n(S,"LI",{});var qye=s(Kg);Ise=n(qye,"STRONG",{});var Ent=s(Ise);Zno=r(Ent,"bert-generation"),Ent.forEach(t),eso=r(qye," \u2014 "),YP=n(qye,"A",{href:!0});var Cnt=s(YP);oso=r(Cnt,"BertGenerationTokenizer"),Cnt.forEach(t),rso=r(qye," (Bert Generation model)"),qye.forEach(t),tso=i(S),Zg=n(S,"LI",{});var jye=s(Zg);Nse=n(jye,"STRONG",{});var wnt=s(Nse);aso=r(wnt,"bert-japanese"),wnt.forEach(t),nso=r(jye," \u2014 "),KP=n(jye,"A",{href:!0});var Ant=s(KP);sso=r(Ant,"BertJapaneseTokenizer"),Ant.forEach(t),lso=r(jye," (BertJapanese model)"),jye.forEach(t),iso=i(S),eh=n(S,"LI",{});var Dye=s(eh);qse=n(Dye,"STRONG",{});var Lnt=s(qse);dso=r(Lnt,"bertweet"),Lnt.forEach(t),cso=r(Dye," \u2014 "),ZP=n(Dye,"A",{href:!0});var ynt=s(ZP);fso=r(ynt,"BertweetTokenizer"),ynt.forEach(t),mso=r(Dye," (BERTweet model)"),Dye.forEach(t),gso=i(S),On=n(S,"LI",{});var uk=s(On);jse=n(uk,"STRONG",{});var xnt=s(jse);hso=r(xnt,"big_bird"),xnt.forEach(t),pso=r(uk," \u2014 "),eB=n(uk,"A",{href:!0});var $nt=s(eB);_so=r($nt,"BigBirdTokenizer"),$nt.forEach(t),uso=r(uk," or "),oB=n(uk,"A",{href:!0});var knt=s(oB);bso=r(knt,"BigBirdTokenizerFast"),knt.forEach(t),vso=r(uk," (BigBird model)"),uk.forEach(t),Fso=i(S),Vn=n(S,"LI",{});var bk=s(Vn);Dse=n(bk,"STRONG",{});var Snt=s(Dse);Tso=r(Snt,"bigbird_pegasus"),Snt.forEach(t),Mso=r(bk," \u2014 "),rB=n(bk,"A",{href:!0});var Rnt=s(rB);Eso=r(Rnt,"PegasusTokenizer"),Rnt.forEach(t),Cso=r(bk," or "),tB=n(bk,"A",{href:!0});var Pnt=s(tB);wso=r(Pnt,"PegasusTokenizerFast"),Pnt.forEach(t),Aso=r(bk," (BigBird-Pegasus model)"),bk.forEach(t),Lso=i(S),Xn=n(S,"LI",{});var vk=s(Xn);Gse=n(vk,"STRONG",{});var Bnt=s(Gse);yso=r(Bnt,"blenderbot"),Bnt.forEach(t),xso=r(vk," \u2014 "),aB=n(vk,"A",{href:!0});var Int=s(aB);$so=r(Int,"BlenderbotTokenizer"),Int.forEach(t),kso=r(vk," or "),nB=n(vk,"A",{href:!0});var Nnt=s(nB);Sso=r(Nnt,"BlenderbotTokenizerFast"),Nnt.forEach(t),Rso=r(vk," (Blenderbot model)"),vk.forEach(t),Pso=i(S),oh=n(S,"LI",{});var Gye=s(oh);Ose=n(Gye,"STRONG",{});var qnt=s(Ose);Bso=r(qnt,"blenderbot-small"),qnt.forEach(t),Iso=r(Gye," \u2014 "),sB=n(Gye,"A",{href:!0});var jnt=s(sB);Nso=r(jnt,"BlenderbotSmallTokenizer"),jnt.forEach(t),qso=r(Gye," (BlenderbotSmall model)"),Gye.forEach(t),jso=i(S),rh=n(S,"LI",{});var Oye=s(rh);Vse=n(Oye,"STRONG",{});var Dnt=s(Vse);Dso=r(Dnt,"bloom"),Dnt.forEach(t),Gso=r(Oye," \u2014 "),lB=n(Oye,"A",{href:!0});var Gnt=s(lB);Oso=r(Gnt,"BloomTokenizerFast"),Gnt.forEach(t),Vso=r(Oye," (BLOOM model)"),Oye.forEach(t),Xso=i(S),th=n(S,"LI",{});var Vye=s(th);Xse=n(Vye,"STRONG",{});var Ont=s(Xse);zso=r(Ont,"byt5"),Ont.forEach(t),Qso=r(Vye," \u2014 "),iB=n(Vye,"A",{href:!0});var Vnt=s(iB);Wso=r(Vnt,"ByT5Tokenizer"),Vnt.forEach(t),Hso=r(Vye," (ByT5 model)"),Vye.forEach(t),Uso=i(S),zn=n(S,"LI",{});var Fk=s(zn);zse=n(Fk,"STRONG",{});var Xnt=s(zse);Jso=r(Xnt,"camembert"),Xnt.forEach(t),Yso=r(Fk," \u2014 "),dB=n(Fk,"A",{href:!0});var znt=s(dB);Kso=r(znt,"CamembertTokenizer"),znt.forEach(t),Zso=r(Fk," or "),cB=n(Fk,"A",{href:!0});var Qnt=s(cB);elo=r(Qnt,"CamembertTokenizerFast"),Qnt.forEach(t),olo=r(Fk," (CamemBERT model)"),Fk.forEach(t),rlo=i(S),ah=n(S,"LI",{});var Xye=s(ah);Qse=n(Xye,"STRONG",{});var Wnt=s(Qse);tlo=r(Wnt,"canine"),Wnt.forEach(t),alo=r(Xye," \u2014 "),fB=n(Xye,"A",{href:!0});var Hnt=s(fB);nlo=r(Hnt,"CanineTokenizer"),Hnt.forEach(t),slo=r(Xye," (CANINE model)"),Xye.forEach(t),llo=i(S),Qn=n(S,"LI",{});var Tk=s(Qn);Wse=n(Tk,"STRONG",{});var Unt=s(Wse);ilo=r(Unt,"clip"),Unt.forEach(t),dlo=r(Tk," \u2014 "),mB=n(Tk,"A",{href:!0});var Jnt=s(mB);clo=r(Jnt,"CLIPTokenizer"),Jnt.forEach(t),flo=r(Tk," or "),gB=n(Tk,"A",{href:!0});var Ynt=s(gB);mlo=r(Ynt,"CLIPTokenizerFast"),Ynt.forEach(t),glo=r(Tk," (CLIP model)"),Tk.forEach(t),hlo=i(S),Wn=n(S,"LI",{});var Mk=s(Wn);Hse=n(Mk,"STRONG",{});var Knt=s(Hse);plo=r(Knt,"codegen"),Knt.forEach(t),_lo=r(Mk," \u2014 "),hB=n(Mk,"A",{href:!0});var Znt=s(hB);ulo=r(Znt,"CodeGenTokenizer"),Znt.forEach(t),blo=r(Mk," or "),pB=n(Mk,"A",{href:!0});var est=s(pB);vlo=r(est,"CodeGenTokenizerFast"),est.forEach(t),Flo=r(Mk," (CodeGen model)"),Mk.forEach(t),Tlo=i(S),Hn=n(S,"LI",{});var Ek=s(Hn);Use=n(Ek,"STRONG",{});var ost=s(Use);Mlo=r(ost,"convbert"),ost.forEach(t),Elo=r(Ek," \u2014 "),_B=n(Ek,"A",{href:!0});var rst=s(_B);Clo=r(rst,"ConvBertTokenizer"),rst.forEach(t),wlo=r(Ek," or "),uB=n(Ek,"A",{href:!0});var tst=s(uB);Alo=r(tst,"ConvBertTokenizerFast"),tst.forEach(t),Llo=r(Ek," (ConvBERT model)"),Ek.forEach(t),ylo=i(S),Un=n(S,"LI",{});var Ck=s(Un);Jse=n(Ck,"STRONG",{});var ast=s(Jse);xlo=r(ast,"cpm"),ast.forEach(t),$lo=r(Ck," \u2014 "),bB=n(Ck,"A",{href:!0});var nst=s(bB);klo=r(nst,"CpmTokenizer"),nst.forEach(t),Slo=r(Ck," or "),vB=n(Ck,"A",{href:!0});var sst=s(vB);Rlo=r(sst,"CpmTokenizerFast"),sst.forEach(t),Plo=r(Ck," (CPM model)"),Ck.forEach(t),Blo=i(S),nh=n(S,"LI",{});var zye=s(nh);Yse=n(zye,"STRONG",{});var lst=s(Yse);Ilo=r(lst,"ctrl"),lst.forEach(t),Nlo=r(zye," \u2014 "),FB=n(zye,"A",{href:!0});var ist=s(FB);qlo=r(ist,"CTRLTokenizer"),ist.forEach(t),jlo=r(zye," (CTRL model)"),zye.forEach(t),Dlo=i(S),Jn=n(S,"LI",{});var wk=s(Jn);Kse=n(wk,"STRONG",{});var dst=s(Kse);Glo=r(dst,"data2vec-text"),dst.forEach(t),Olo=r(wk," \u2014 "),TB=n(wk,"A",{href:!0});var cst=s(TB);Vlo=r(cst,"RobertaTokenizer"),cst.forEach(t),Xlo=r(wk," or "),MB=n(wk,"A",{href:!0});var fst=s(MB);zlo=r(fst,"RobertaTokenizerFast"),fst.forEach(t),Qlo=r(wk," (Data2VecText model)"),wk.forEach(t),Wlo=i(S),Yn=n(S,"LI",{});var Ak=s(Yn);Zse=n(Ak,"STRONG",{});var mst=s(Zse);Hlo=r(mst,"deberta"),mst.forEach(t),Ulo=r(Ak," \u2014 "),EB=n(Ak,"A",{href:!0});var gst=s(EB);Jlo=r(gst,"DebertaTokenizer"),gst.forEach(t),Ylo=r(Ak," or "),CB=n(Ak,"A",{href:!0});var hst=s(CB);Klo=r(hst,"DebertaTokenizerFast"),hst.forEach(t),Zlo=r(Ak," (DeBERTa model)"),Ak.forEach(t),eio=i(S),Kn=n(S,"LI",{});var Lk=s(Kn);ele=n(Lk,"STRONG",{});var pst=s(ele);oio=r(pst,"deberta-v2"),pst.forEach(t),rio=r(Lk," \u2014 "),wB=n(Lk,"A",{href:!0});var _st=s(wB);tio=r(_st,"DebertaV2Tokenizer"),_st.forEach(t),aio=r(Lk," or "),AB=n(Lk,"A",{href:!0});var ust=s(AB);nio=r(ust,"DebertaV2TokenizerFast"),ust.forEach(t),sio=r(Lk," (DeBERTa-v2 model)"),Lk.forEach(t),lio=i(S),Zn=n(S,"LI",{});var yk=s(Zn);ole=n(yk,"STRONG",{});var bst=s(ole);iio=r(bst,"distilbert"),bst.forEach(t),dio=r(yk," \u2014 "),LB=n(yk,"A",{href:!0});var vst=s(LB);cio=r(vst,"DistilBertTokenizer"),vst.forEach(t),fio=r(yk," or "),yB=n(yk,"A",{href:!0});var Fst=s(yB);mio=r(Fst,"DistilBertTokenizerFast"),Fst.forEach(t),gio=r(yk," (DistilBERT model)"),yk.forEach(t),hio=i(S),es=n(S,"LI",{});var xk=s(es);rle=n(xk,"STRONG",{});var Tst=s(rle);pio=r(Tst,"dpr"),Tst.forEach(t),_io=r(xk," \u2014 "),xB=n(xk,"A",{href:!0});var Mst=s(xB);uio=r(Mst,"DPRQuestionEncoderTokenizer"),Mst.forEach(t),bio=r(xk," or "),$B=n(xk,"A",{href:!0});var Est=s($B);vio=r(Est,"DPRQuestionEncoderTokenizerFast"),Est.forEach(t),Fio=r(xk," (DPR model)"),xk.forEach(t),Tio=i(S),os=n(S,"LI",{});var $k=s(os);tle=n($k,"STRONG",{});var Cst=s(tle);Mio=r(Cst,"electra"),Cst.forEach(t),Eio=r($k," \u2014 "),kB=n($k,"A",{href:!0});var wst=s(kB);Cio=r(wst,"ElectraTokenizer"),wst.forEach(t),wio=r($k," or "),SB=n($k,"A",{href:!0});var Ast=s(SB);Aio=r(Ast,"ElectraTokenizerFast"),Ast.forEach(t),Lio=r($k," (ELECTRA model)"),$k.forEach(t),yio=i(S),sh=n(S,"LI",{});var Qye=s(sh);ale=n(Qye,"STRONG",{});var Lst=s(ale);xio=r(Lst,"flaubert"),Lst.forEach(t),$io=r(Qye," \u2014 "),RB=n(Qye,"A",{href:!0});var yst=s(RB);kio=r(yst,"FlaubertTokenizer"),yst.forEach(t),Sio=r(Qye," (FlauBERT model)"),Qye.forEach(t),Rio=i(S),rs=n(S,"LI",{});var kk=s(rs);nle=n(kk,"STRONG",{});var xst=s(nle);Pio=r(xst,"fnet"),xst.forEach(t),Bio=r(kk," \u2014 "),PB=n(kk,"A",{href:!0});var $st=s(PB);Iio=r($st,"FNetTokenizer"),$st.forEach(t),Nio=r(kk," or "),BB=n(kk,"A",{href:!0});var kst=s(BB);qio=r(kst,"FNetTokenizerFast"),kst.forEach(t),jio=r(kk," (FNet model)"),kk.forEach(t),Dio=i(S),lh=n(S,"LI",{});var Wye=s(lh);sle=n(Wye,"STRONG",{});var Sst=s(sle);Gio=r(Sst,"fsmt"),Sst.forEach(t),Oio=r(Wye," \u2014 "),IB=n(Wye,"A",{href:!0});var Rst=s(IB);Vio=r(Rst,"FSMTTokenizer"),Rst.forEach(t),Xio=r(Wye," (FairSeq Machine-Translation model)"),Wye.forEach(t),zio=i(S),ts=n(S,"LI",{});var Sk=s(ts);lle=n(Sk,"STRONG",{});var Pst=s(lle);Qio=r(Pst,"funnel"),Pst.forEach(t),Wio=r(Sk," \u2014 "),NB=n(Sk,"A",{href:!0});var Bst=s(NB);Hio=r(Bst,"FunnelTokenizer"),Bst.forEach(t),Uio=r(Sk," or "),qB=n(Sk,"A",{href:!0});var Ist=s(qB);Jio=r(Ist,"FunnelTokenizerFast"),Ist.forEach(t),Yio=r(Sk," (Funnel Transformer model)"),Sk.forEach(t),Kio=i(S),as=n(S,"LI",{});var Rk=s(as);ile=n(Rk,"STRONG",{});var Nst=s(ile);Zio=r(Nst,"gpt2"),Nst.forEach(t),edo=r(Rk," \u2014 "),jB=n(Rk,"A",{href:!0});var qst=s(jB);odo=r(qst,"GPT2Tokenizer"),qst.forEach(t),rdo=r(Rk," or "),DB=n(Rk,"A",{href:!0});var jst=s(DB);tdo=r(jst,"GPT2TokenizerFast"),jst.forEach(t),ado=r(Rk," (OpenAI GPT-2 model)"),Rk.forEach(t),ndo=i(S),ns=n(S,"LI",{});var Pk=s(ns);dle=n(Pk,"STRONG",{});var Dst=s(dle);sdo=r(Dst,"gpt_neo"),Dst.forEach(t),ldo=r(Pk," \u2014 "),GB=n(Pk,"A",{href:!0});var Gst=s(GB);ido=r(Gst,"GPT2Tokenizer"),Gst.forEach(t),ddo=r(Pk," or "),OB=n(Pk,"A",{href:!0});var Ost=s(OB);cdo=r(Ost,"GPT2TokenizerFast"),Ost.forEach(t),fdo=r(Pk," (GPT Neo model)"),Pk.forEach(t),mdo=i(S),ih=n(S,"LI",{});var Hye=s(ih);cle=n(Hye,"STRONG",{});var Vst=s(cle);gdo=r(Vst,"gpt_neox"),Vst.forEach(t),hdo=r(Hye," \u2014 "),VB=n(Hye,"A",{href:!0});var Xst=s(VB);pdo=r(Xst,"GPTNeoXTokenizerFast"),Xst.forEach(t),_do=r(Hye," (GPT NeoX model)"),Hye.forEach(t),udo=i(S),ss=n(S,"LI",{});var Bk=s(ss);fle=n(Bk,"STRONG",{});var zst=s(fle);bdo=r(zst,"gptj"),zst.forEach(t),vdo=r(Bk," \u2014 "),XB=n(Bk,"A",{href:!0});var Qst=s(XB);Fdo=r(Qst,"GPT2Tokenizer"),Qst.forEach(t),Tdo=r(Bk," or "),zB=n(Bk,"A",{href:!0});var Wst=s(zB);Mdo=r(Wst,"GPT2TokenizerFast"),Wst.forEach(t),Edo=r(Bk," (GPT-J model)"),Bk.forEach(t),Cdo=i(S),ls=n(S,"LI",{});var Ik=s(ls);mle=n(Ik,"STRONG",{});var Hst=s(mle);wdo=r(Hst,"groupvit"),Hst.forEach(t),Ado=r(Ik," \u2014 "),QB=n(Ik,"A",{href:!0});var Ust=s(QB);Ldo=r(Ust,"CLIPTokenizer"),Ust.forEach(t),ydo=r(Ik," or "),WB=n(Ik,"A",{href:!0});var Jst=s(WB);xdo=r(Jst,"CLIPTokenizerFast"),Jst.forEach(t),$do=r(Ik," (GroupViT model)"),Ik.forEach(t),kdo=i(S),is=n(S,"LI",{});var Nk=s(is);gle=n(Nk,"STRONG",{});var Yst=s(gle);Sdo=r(Yst,"herbert"),Yst.forEach(t),Rdo=r(Nk," \u2014 "),HB=n(Nk,"A",{href:!0});var Kst=s(HB);Pdo=r(Kst,"HerbertTokenizer"),Kst.forEach(t),Bdo=r(Nk," or "),UB=n(Nk,"A",{href:!0});var Zst=s(UB);Ido=r(Zst,"HerbertTokenizerFast"),Zst.forEach(t),Ndo=r(Nk," (HerBERT model)"),Nk.forEach(t),qdo=i(S),dh=n(S,"LI",{});var Uye=s(dh);hle=n(Uye,"STRONG",{});var elt=s(hle);jdo=r(elt,"hubert"),elt.forEach(t),Ddo=r(Uye," \u2014 "),JB=n(Uye,"A",{href:!0});var olt=s(JB);Gdo=r(olt,"Wav2Vec2CTCTokenizer"),olt.forEach(t),Odo=r(Uye," (Hubert model)"),Uye.forEach(t),Vdo=i(S),ds=n(S,"LI",{});var qk=s(ds);ple=n(qk,"STRONG",{});var rlt=s(ple);Xdo=r(rlt,"ibert"),rlt.forEach(t),zdo=r(qk," \u2014 "),YB=n(qk,"A",{href:!0});var tlt=s(YB);Qdo=r(tlt,"RobertaTokenizer"),tlt.forEach(t),Wdo=r(qk," or "),KB=n(qk,"A",{href:!0});var alt=s(KB);Hdo=r(alt,"RobertaTokenizerFast"),alt.forEach(t),Udo=r(qk," (I-BERT model)"),qk.forEach(t),Jdo=i(S),cs=n(S,"LI",{});var jk=s(cs);_le=n(jk,"STRONG",{});var nlt=s(_le);Ydo=r(nlt,"layoutlm"),nlt.forEach(t),Kdo=r(jk," \u2014 "),ZB=n(jk,"A",{href:!0});var slt=s(ZB);Zdo=r(slt,"LayoutLMTokenizer"),slt.forEach(t),eco=r(jk," or "),eI=n(jk,"A",{href:!0});var llt=s(eI);oco=r(llt,"LayoutLMTokenizerFast"),llt.forEach(t),rco=r(jk," (LayoutLM model)"),jk.forEach(t),tco=i(S),fs=n(S,"LI",{});var Dk=s(fs);ule=n(Dk,"STRONG",{});var ilt=s(ule);aco=r(ilt,"layoutlmv2"),ilt.forEach(t),nco=r(Dk," \u2014 "),oI=n(Dk,"A",{href:!0});var dlt=s(oI);sco=r(dlt,"LayoutLMv2Tokenizer"),dlt.forEach(t),lco=r(Dk," or "),rI=n(Dk,"A",{href:!0});var clt=s(rI);ico=r(clt,"LayoutLMv2TokenizerFast"),clt.forEach(t),dco=r(Dk," (LayoutLMv2 model)"),Dk.forEach(t),cco=i(S),ms=n(S,"LI",{});var Gk=s(ms);ble=n(Gk,"STRONG",{});var flt=s(ble);fco=r(flt,"layoutlmv3"),flt.forEach(t),mco=r(Gk," \u2014 "),tI=n(Gk,"A",{href:!0});var mlt=s(tI);gco=r(mlt,"LayoutLMv3Tokenizer"),mlt.forEach(t),hco=r(Gk," or "),aI=n(Gk,"A",{href:!0});var glt=s(aI);pco=r(glt,"LayoutLMv3TokenizerFast"),glt.forEach(t),_co=r(Gk," (LayoutLMv3 model)"),Gk.forEach(t),uco=i(S),gs=n(S,"LI",{});var Ok=s(gs);vle=n(Ok,"STRONG",{});var hlt=s(vle);bco=r(hlt,"layoutxlm"),hlt.forEach(t),vco=r(Ok," \u2014 "),nI=n(Ok,"A",{href:!0});var plt=s(nI);Fco=r(plt,"LayoutXLMTokenizer"),plt.forEach(t),Tco=r(Ok," or "),sI=n(Ok,"A",{href:!0});var _lt=s(sI);Mco=r(_lt,"LayoutXLMTokenizerFast"),_lt.forEach(t),Eco=r(Ok," (LayoutXLM model)"),Ok.forEach(t),Cco=i(S),hs=n(S,"LI",{});var Vk=s(hs);Fle=n(Vk,"STRONG",{});var ult=s(Fle);wco=r(ult,"led"),ult.forEach(t),Aco=r(Vk," \u2014 "),lI=n(Vk,"A",{href:!0});var blt=s(lI);Lco=r(blt,"LEDTokenizer"),blt.forEach(t),yco=r(Vk," or "),iI=n(Vk,"A",{href:!0});var vlt=s(iI);xco=r(vlt,"LEDTokenizerFast"),vlt.forEach(t),$co=r(Vk," (LED model)"),Vk.forEach(t),kco=i(S),ps=n(S,"LI",{});var Xk=s(ps);Tle=n(Xk,"STRONG",{});var Flt=s(Tle);Sco=r(Flt,"longformer"),Flt.forEach(t),Rco=r(Xk," \u2014 "),dI=n(Xk,"A",{href:!0});var Tlt=s(dI);Pco=r(Tlt,"LongformerTokenizer"),Tlt.forEach(t),Bco=r(Xk," or "),cI=n(Xk,"A",{href:!0});var Mlt=s(cI);Ico=r(Mlt,"LongformerTokenizerFast"),Mlt.forEach(t),Nco=r(Xk," (Longformer model)"),Xk.forEach(t),qco=i(S),_s=n(S,"LI",{});var zk=s(_s);Mle=n(zk,"STRONG",{});var Elt=s(Mle);jco=r(Elt,"longt5"),Elt.forEach(t),Dco=r(zk," \u2014 "),fI=n(zk,"A",{href:!0});var Clt=s(fI);Gco=r(Clt,"T5Tokenizer"),Clt.forEach(t),Oco=r(zk," or "),mI=n(zk,"A",{href:!0});var wlt=s(mI);Vco=r(wlt,"T5TokenizerFast"),wlt.forEach(t),Xco=r(zk," (LongT5 model)"),zk.forEach(t),zco=i(S),ch=n(S,"LI",{});var Jye=s(ch);Ele=n(Jye,"STRONG",{});var Alt=s(Ele);Qco=r(Alt,"luke"),Alt.forEach(t),Wco=r(Jye," \u2014 "),gI=n(Jye,"A",{href:!0});var Llt=s(gI);Hco=r(Llt,"LukeTokenizer"),Llt.forEach(t),Uco=r(Jye," (LUKE model)"),Jye.forEach(t),Jco=i(S),us=n(S,"LI",{});var Qk=s(us);Cle=n(Qk,"STRONG",{});var ylt=s(Cle);Yco=r(ylt,"lxmert"),ylt.forEach(t),Kco=r(Qk," \u2014 "),hI=n(Qk,"A",{href:!0});var xlt=s(hI);Zco=r(xlt,"LxmertTokenizer"),xlt.forEach(t),efo=r(Qk," or "),pI=n(Qk,"A",{href:!0});var $lt=s(pI);ofo=r($lt,"LxmertTokenizerFast"),$lt.forEach(t),rfo=r(Qk," (LXMERT model)"),Qk.forEach(t),tfo=i(S),fh=n(S,"LI",{});var Yye=s(fh);wle=n(Yye,"STRONG",{});var klt=s(wle);afo=r(klt,"m2m_100"),klt.forEach(t),nfo=r(Yye," \u2014 "),_I=n(Yye,"A",{href:!0});var Slt=s(_I);sfo=r(Slt,"M2M100Tokenizer"),Slt.forEach(t),lfo=r(Yye," (M2M100 model)"),Yye.forEach(t),ifo=i(S),mh=n(S,"LI",{});var Kye=s(mh);Ale=n(Kye,"STRONG",{});var Rlt=s(Ale);dfo=r(Rlt,"marian"),Rlt.forEach(t),cfo=r(Kye," \u2014 "),uI=n(Kye,"A",{href:!0});var Plt=s(uI);ffo=r(Plt,"MarianTokenizer"),Plt.forEach(t),mfo=r(Kye," (Marian model)"),Kye.forEach(t),gfo=i(S),bs=n(S,"LI",{});var Wk=s(bs);Lle=n(Wk,"STRONG",{});var Blt=s(Lle);hfo=r(Blt,"mbart"),Blt.forEach(t),pfo=r(Wk," \u2014 "),bI=n(Wk,"A",{href:!0});var Ilt=s(bI);_fo=r(Ilt,"MBartTokenizer"),Ilt.forEach(t),ufo=r(Wk," or "),vI=n(Wk,"A",{href:!0});var Nlt=s(vI);bfo=r(Nlt,"MBartTokenizerFast"),Nlt.forEach(t),vfo=r(Wk," (mBART model)"),Wk.forEach(t),Ffo=i(S),vs=n(S,"LI",{});var Hk=s(vs);yle=n(Hk,"STRONG",{});var qlt=s(yle);Tfo=r(qlt,"mbart50"),qlt.forEach(t),Mfo=r(Hk," \u2014 "),FI=n(Hk,"A",{href:!0});var jlt=s(FI);Efo=r(jlt,"MBart50Tokenizer"),jlt.forEach(t),Cfo=r(Hk," or "),TI=n(Hk,"A",{href:!0});var Dlt=s(TI);wfo=r(Dlt,"MBart50TokenizerFast"),Dlt.forEach(t),Afo=r(Hk," (mBART-50 model)"),Hk.forEach(t),Lfo=i(S),Fs=n(S,"LI",{});var Uk=s(Fs);xle=n(Uk,"STRONG",{});var Glt=s(xle);yfo=r(Glt,"megatron-bert"),Glt.forEach(t),xfo=r(Uk," \u2014 "),MI=n(Uk,"A",{href:!0});var Olt=s(MI);$fo=r(Olt,"BertTokenizer"),Olt.forEach(t),kfo=r(Uk," or "),EI=n(Uk,"A",{href:!0});var Vlt=s(EI);Sfo=r(Vlt,"BertTokenizerFast"),Vlt.forEach(t),Rfo=r(Uk," (Megatron-BERT model)"),Uk.forEach(t),Pfo=i(S),gh=n(S,"LI",{});var Zye=s(gh);$le=n(Zye,"STRONG",{});var Xlt=s($le);Bfo=r(Xlt,"mluke"),Xlt.forEach(t),Ifo=r(Zye," \u2014 "),CI=n(Zye,"A",{href:!0});var zlt=s(CI);Nfo=r(zlt,"MLukeTokenizer"),zlt.forEach(t),qfo=r(Zye," (mLUKE model)"),Zye.forEach(t),jfo=i(S),Ts=n(S,"LI",{});var Jk=s(Ts);kle=n(Jk,"STRONG",{});var Qlt=s(kle);Dfo=r(Qlt,"mobilebert"),Qlt.forEach(t),Gfo=r(Jk," \u2014 "),wI=n(Jk,"A",{href:!0});var Wlt=s(wI);Ofo=r(Wlt,"MobileBertTokenizer"),Wlt.forEach(t),Vfo=r(Jk," or "),AI=n(Jk,"A",{href:!0});var Hlt=s(AI);Xfo=r(Hlt,"MobileBertTokenizerFast"),Hlt.forEach(t),zfo=r(Jk," (MobileBERT model)"),Jk.forEach(t),Qfo=i(S),Ms=n(S,"LI",{});var Yk=s(Ms);Sle=n(Yk,"STRONG",{});var Ult=s(Sle);Wfo=r(Ult,"mpnet"),Ult.forEach(t),Hfo=r(Yk," \u2014 "),LI=n(Yk,"A",{href:!0});var Jlt=s(LI);Ufo=r(Jlt,"MPNetTokenizer"),Jlt.forEach(t),Jfo=r(Yk," or "),yI=n(Yk,"A",{href:!0});var Ylt=s(yI);Yfo=r(Ylt,"MPNetTokenizerFast"),Ylt.forEach(t),Kfo=r(Yk," (MPNet model)"),Yk.forEach(t),Zfo=i(S),Es=n(S,"LI",{});var Kk=s(Es);Rle=n(Kk,"STRONG",{});var Klt=s(Rle);emo=r(Klt,"mt5"),Klt.forEach(t),omo=r(Kk," \u2014 "),xI=n(Kk,"A",{href:!0});var Zlt=s(xI);rmo=r(Zlt,"MT5Tokenizer"),Zlt.forEach(t),tmo=r(Kk," or "),$I=n(Kk,"A",{href:!0});var eit=s($I);amo=r(eit,"MT5TokenizerFast"),eit.forEach(t),nmo=r(Kk," (MT5 model)"),Kk.forEach(t),smo=i(S),Cs=n(S,"LI",{});var Zk=s(Cs);Ple=n(Zk,"STRONG",{});var oit=s(Ple);lmo=r(oit,"mvp"),oit.forEach(t),imo=r(Zk," \u2014 "),kI=n(Zk,"A",{href:!0});var rit=s(kI);dmo=r(rit,"MvpTokenizer"),rit.forEach(t),cmo=r(Zk," or "),SI=n(Zk,"A",{href:!0});var tit=s(SI);fmo=r(tit,"MvpTokenizerFast"),tit.forEach(t),mmo=r(Zk," (MVP model)"),Zk.forEach(t),gmo=i(S),ws=n(S,"LI",{});var eS=s(ws);Ble=n(eS,"STRONG",{});var ait=s(Ble);hmo=r(ait,"nezha"),ait.forEach(t),pmo=r(eS," \u2014 "),RI=n(eS,"A",{href:!0});var nit=s(RI);_mo=r(nit,"BertTokenizer"),nit.forEach(t),umo=r(eS," or "),PI=n(eS,"A",{href:!0});var sit=s(PI);bmo=r(sit,"BertTokenizerFast"),sit.forEach(t),vmo=r(eS," (Nezha model)"),eS.forEach(t),Fmo=i(S),As=n(S,"LI",{});var oS=s(As);Ile=n(oS,"STRONG",{});var lit=s(Ile);Tmo=r(lit,"nystromformer"),lit.forEach(t),Mmo=r(oS," \u2014 "),BI=n(oS,"A",{href:!0});var iit=s(BI);Emo=r(iit,"AlbertTokenizer"),iit.forEach(t),Cmo=r(oS," or "),II=n(oS,"A",{href:!0});var dit=s(II);wmo=r(dit,"AlbertTokenizerFast"),dit.forEach(t),Amo=r(oS," (Nystr\xF6mformer model)"),oS.forEach(t),Lmo=i(S),Ls=n(S,"LI",{});var rS=s(Ls);Nle=n(rS,"STRONG",{});var cit=s(Nle);ymo=r(cit,"openai-gpt"),cit.forEach(t),xmo=r(rS," \u2014 "),NI=n(rS,"A",{href:!0});var fit=s(NI);$mo=r(fit,"OpenAIGPTTokenizer"),fit.forEach(t),kmo=r(rS," or "),qI=n(rS,"A",{href:!0});var mit=s(qI);Smo=r(mit,"OpenAIGPTTokenizerFast"),mit.forEach(t),Rmo=r(rS," (OpenAI GPT model)"),rS.forEach(t),Pmo=i(S),hh=n(S,"LI",{});var e8e=s(hh);qle=n(e8e,"STRONG",{});var git=s(qle);Bmo=r(git,"opt"),git.forEach(t),Imo=r(e8e," \u2014 "),jI=n(e8e,"A",{href:!0});var hit=s(jI);Nmo=r(hit,"GPT2Tokenizer"),hit.forEach(t),qmo=r(e8e," (OPT model)"),e8e.forEach(t),jmo=i(S),ys=n(S,"LI",{});var tS=s(ys);jle=n(tS,"STRONG",{});var pit=s(jle);Dmo=r(pit,"pegasus"),pit.forEach(t),Gmo=r(tS," \u2014 "),DI=n(tS,"A",{href:!0});var _it=s(DI);Omo=r(_it,"PegasusTokenizer"),_it.forEach(t),Vmo=r(tS," or "),GI=n(tS,"A",{href:!0});var uit=s(GI);Xmo=r(uit,"PegasusTokenizerFast"),uit.forEach(t),zmo=r(tS," (Pegasus model)"),tS.forEach(t),Qmo=i(S),ph=n(S,"LI",{});var o8e=s(ph);Dle=n(o8e,"STRONG",{});var bit=s(Dle);Wmo=r(bit,"perceiver"),bit.forEach(t),Hmo=r(o8e," \u2014 "),OI=n(o8e,"A",{href:!0});var vit=s(OI);Umo=r(vit,"PerceiverTokenizer"),vit.forEach(t),Jmo=r(o8e," (Perceiver model)"),o8e.forEach(t),Ymo=i(S),_h=n(S,"LI",{});var r8e=s(_h);Gle=n(r8e,"STRONG",{});var Fit=s(Gle);Kmo=r(Fit,"phobert"),Fit.forEach(t),Zmo=r(r8e," \u2014 "),VI=n(r8e,"A",{href:!0});var Tit=s(VI);ego=r(Tit,"PhobertTokenizer"),Tit.forEach(t),ogo=r(r8e," (PhoBERT model)"),r8e.forEach(t),rgo=i(S),uh=n(S,"LI",{});var t8e=s(uh);Ole=n(t8e,"STRONG",{});var Mit=s(Ole);tgo=r(Mit,"plbart"),Mit.forEach(t),ago=r(t8e," \u2014 "),XI=n(t8e,"A",{href:!0});var Eit=s(XI);ngo=r(Eit,"PLBartTokenizer"),Eit.forEach(t),sgo=r(t8e," (PLBart model)"),t8e.forEach(t),lgo=i(S),bh=n(S,"LI",{});var a8e=s(bh);Vle=n(a8e,"STRONG",{});var Cit=s(Vle);igo=r(Cit,"prophetnet"),Cit.forEach(t),dgo=r(a8e," \u2014 "),zI=n(a8e,"A",{href:!0});var wit=s(zI);cgo=r(wit,"ProphetNetTokenizer"),wit.forEach(t),fgo=r(a8e," (ProphetNet model)"),a8e.forEach(t),mgo=i(S),xs=n(S,"LI",{});var aS=s(xs);Xle=n(aS,"STRONG",{});var Ait=s(Xle);ggo=r(Ait,"qdqbert"),Ait.forEach(t),hgo=r(aS," \u2014 "),QI=n(aS,"A",{href:!0});var Lit=s(QI);pgo=r(Lit,"BertTokenizer"),Lit.forEach(t),_go=r(aS," or "),WI=n(aS,"A",{href:!0});var yit=s(WI);ugo=r(yit,"BertTokenizerFast"),yit.forEach(t),bgo=r(aS," (QDQBert model)"),aS.forEach(t),vgo=i(S),vh=n(S,"LI",{});var n8e=s(vh);zle=n(n8e,"STRONG",{});var xit=s(zle);Fgo=r(xit,"rag"),xit.forEach(t),Tgo=r(n8e," \u2014 "),HI=n(n8e,"A",{href:!0});var $it=s(HI);Mgo=r($it,"RagTokenizer"),$it.forEach(t),Ego=r(n8e," (RAG model)"),n8e.forEach(t),Cgo=i(S),$s=n(S,"LI",{});var nS=s($s);Qle=n(nS,"STRONG",{});var kit=s(Qle);wgo=r(kit,"realm"),kit.forEach(t),Ago=r(nS," \u2014 "),UI=n(nS,"A",{href:!0});var Sit=s(UI);Lgo=r(Sit,"RealmTokenizer"),Sit.forEach(t),ygo=r(nS," or "),JI=n(nS,"A",{href:!0});var Rit=s(JI);xgo=r(Rit,"RealmTokenizerFast"),Rit.forEach(t),$go=r(nS," (REALM model)"),nS.forEach(t),kgo=i(S),ks=n(S,"LI",{});var sS=s(ks);Wle=n(sS,"STRONG",{});var Pit=s(Wle);Sgo=r(Pit,"reformer"),Pit.forEach(t),Rgo=r(sS," \u2014 "),YI=n(sS,"A",{href:!0});var Bit=s(YI);Pgo=r(Bit,"ReformerTokenizer"),Bit.forEach(t),Bgo=r(sS," or "),KI=n(sS,"A",{href:!0});var Iit=s(KI);Igo=r(Iit,"ReformerTokenizerFast"),Iit.forEach(t),Ngo=r(sS," (Reformer model)"),sS.forEach(t),qgo=i(S),Ss=n(S,"LI",{});var lS=s(Ss);Hle=n(lS,"STRONG",{});var Nit=s(Hle);jgo=r(Nit,"rembert"),Nit.forEach(t),Dgo=r(lS," \u2014 "),ZI=n(lS,"A",{href:!0});var qit=s(ZI);Ggo=r(qit,"RemBertTokenizer"),qit.forEach(t),Ogo=r(lS," or "),eN=n(lS,"A",{href:!0});var jit=s(eN);Vgo=r(jit,"RemBertTokenizerFast"),jit.forEach(t),Xgo=r(lS," (RemBERT model)"),lS.forEach(t),zgo=i(S),Rs=n(S,"LI",{});var iS=s(Rs);Ule=n(iS,"STRONG",{});var Dit=s(Ule);Qgo=r(Dit,"retribert"),Dit.forEach(t),Wgo=r(iS," \u2014 "),oN=n(iS,"A",{href:!0});var Git=s(oN);Hgo=r(Git,"RetriBertTokenizer"),Git.forEach(t),Ugo=r(iS," or "),rN=n(iS,"A",{href:!0});var Oit=s(rN);Jgo=r(Oit,"RetriBertTokenizerFast"),Oit.forEach(t),Ygo=r(iS," (RetriBERT model)"),iS.forEach(t),Kgo=i(S),Ps=n(S,"LI",{});var dS=s(Ps);Jle=n(dS,"STRONG",{});var Vit=s(Jle);Zgo=r(Vit,"roberta"),Vit.forEach(t),eho=r(dS," \u2014 "),tN=n(dS,"A",{href:!0});var Xit=s(tN);oho=r(Xit,"RobertaTokenizer"),Xit.forEach(t),rho=r(dS," or "),aN=n(dS,"A",{href:!0});var zit=s(aN);tho=r(zit,"RobertaTokenizerFast"),zit.forEach(t),aho=r(dS," (RoBERTa model)"),dS.forEach(t),nho=i(S),Bs=n(S,"LI",{});var cS=s(Bs);Yle=n(cS,"STRONG",{});var Qit=s(Yle);sho=r(Qit,"roformer"),Qit.forEach(t),lho=r(cS," \u2014 "),nN=n(cS,"A",{href:!0});var Wit=s(nN);iho=r(Wit,"RoFormerTokenizer"),Wit.forEach(t),dho=r(cS," or "),sN=n(cS,"A",{href:!0});var Hit=s(sN);cho=r(Hit,"RoFormerTokenizerFast"),Hit.forEach(t),fho=r(cS," (RoFormer model)"),cS.forEach(t),mho=i(S),Fh=n(S,"LI",{});var s8e=s(Fh);Kle=n(s8e,"STRONG",{});var Uit=s(Kle);gho=r(Uit,"speech_to_text"),Uit.forEach(t),hho=r(s8e," \u2014 "),lN=n(s8e,"A",{href:!0});var Jit=s(lN);pho=r(Jit,"Speech2TextTokenizer"),Jit.forEach(t),_ho=r(s8e," (Speech2Text model)"),s8e.forEach(t),uho=i(S),Th=n(S,"LI",{});var l8e=s(Th);Zle=n(l8e,"STRONG",{});var Yit=s(Zle);bho=r(Yit,"speech_to_text_2"),Yit.forEach(t),vho=r(l8e," \u2014 "),iN=n(l8e,"A",{href:!0});var Kit=s(iN);Fho=r(Kit,"Speech2Text2Tokenizer"),Kit.forEach(t),Tho=r(l8e," (Speech2Text2 model)"),l8e.forEach(t),Mho=i(S),Is=n(S,"LI",{});var fS=s(Is);eie=n(fS,"STRONG",{});var Zit=s(eie);Eho=r(Zit,"splinter"),Zit.forEach(t),Cho=r(fS," \u2014 "),dN=n(fS,"A",{href:!0});var edt=s(dN);who=r(edt,"SplinterTokenizer"),edt.forEach(t),Aho=r(fS," or "),cN=n(fS,"A",{href:!0});var odt=s(cN);Lho=r(odt,"SplinterTokenizerFast"),odt.forEach(t),yho=r(fS," (Splinter model)"),fS.forEach(t),xho=i(S),Ns=n(S,"LI",{});var mS=s(Ns);oie=n(mS,"STRONG",{});var rdt=s(oie);$ho=r(rdt,"squeezebert"),rdt.forEach(t),kho=r(mS," \u2014 "),fN=n(mS,"A",{href:!0});var tdt=s(fN);Sho=r(tdt,"SqueezeBertTokenizer"),tdt.forEach(t),Rho=r(mS," or "),mN=n(mS,"A",{href:!0});var adt=s(mN);Pho=r(adt,"SqueezeBertTokenizerFast"),adt.forEach(t),Bho=r(mS," (SqueezeBERT model)"),mS.forEach(t),Iho=i(S),qs=n(S,"LI",{});var gS=s(qs);rie=n(gS,"STRONG",{});var ndt=s(rie);Nho=r(ndt,"t5"),ndt.forEach(t),qho=r(gS," \u2014 "),gN=n(gS,"A",{href:!0});var sdt=s(gN);jho=r(sdt,"T5Tokenizer"),sdt.forEach(t),Dho=r(gS," or "),hN=n(gS,"A",{href:!0});var ldt=s(hN);Gho=r(ldt,"T5TokenizerFast"),ldt.forEach(t),Oho=r(gS," (T5 model)"),gS.forEach(t),Vho=i(S),Mh=n(S,"LI",{});var i8e=s(Mh);tie=n(i8e,"STRONG",{});var idt=s(tie);Xho=r(idt,"tapas"),idt.forEach(t),zho=r(i8e," \u2014 "),pN=n(i8e,"A",{href:!0});var ddt=s(pN);Qho=r(ddt,"TapasTokenizer"),ddt.forEach(t),Who=r(i8e," (TAPAS model)"),i8e.forEach(t),Hho=i(S),Eh=n(S,"LI",{});var d8e=s(Eh);aie=n(d8e,"STRONG",{});var cdt=s(aie);Uho=r(cdt,"tapex"),cdt.forEach(t),Jho=r(d8e," \u2014 "),_N=n(d8e,"A",{href:!0});var fdt=s(_N);Yho=r(fdt,"TapexTokenizer"),fdt.forEach(t),Kho=r(d8e," (TAPEX model)"),d8e.forEach(t),Zho=i(S),Ch=n(S,"LI",{});var c8e=s(Ch);nie=n(c8e,"STRONG",{});var mdt=s(nie);epo=r(mdt,"transfo-xl"),mdt.forEach(t),opo=r(c8e," \u2014 "),uN=n(c8e,"A",{href:!0});var gdt=s(uN);rpo=r(gdt,"TransfoXLTokenizer"),gdt.forEach(t),tpo=r(c8e," (Transformer-XL model)"),c8e.forEach(t),apo=i(S),js=n(S,"LI",{});var hS=s(js);sie=n(hS,"STRONG",{});var hdt=s(sie);npo=r(hdt,"vilt"),hdt.forEach(t),spo=r(hS," \u2014 "),bN=n(hS,"A",{href:!0});var pdt=s(bN);lpo=r(pdt,"BertTokenizer"),pdt.forEach(t),ipo=r(hS," or "),vN=n(hS,"A",{href:!0});var _dt=s(vN);dpo=r(_dt,"BertTokenizerFast"),_dt.forEach(t),cpo=r(hS," (ViLT model)"),hS.forEach(t),fpo=i(S),Ds=n(S,"LI",{});var pS=s(Ds);lie=n(pS,"STRONG",{});var udt=s(lie);mpo=r(udt,"visual_bert"),udt.forEach(t),gpo=r(pS," \u2014 "),FN=n(pS,"A",{href:!0});var bdt=s(FN);hpo=r(bdt,"BertTokenizer"),bdt.forEach(t),ppo=r(pS," or "),TN=n(pS,"A",{href:!0});var vdt=s(TN);_po=r(vdt,"BertTokenizerFast"),vdt.forEach(t),upo=r(pS," (VisualBERT model)"),pS.forEach(t),bpo=i(S),wh=n(S,"LI",{});var f8e=s(wh);iie=n(f8e,"STRONG",{});var Fdt=s(iie);vpo=r(Fdt,"wav2vec2"),Fdt.forEach(t),Fpo=r(f8e," \u2014 "),MN=n(f8e,"A",{href:!0});var Tdt=s(MN);Tpo=r(Tdt,"Wav2Vec2CTCTokenizer"),Tdt.forEach(t),Mpo=r(f8e," (Wav2Vec2 model)"),f8e.forEach(t),Epo=i(S),Ah=n(S,"LI",{});var m8e=s(Ah);die=n(m8e,"STRONG",{});var Mdt=s(die);Cpo=r(Mdt,"wav2vec2-conformer"),Mdt.forEach(t),wpo=r(m8e," \u2014 "),EN=n(m8e,"A",{href:!0});var Edt=s(EN);Apo=r(Edt,"Wav2Vec2CTCTokenizer"),Edt.forEach(t),Lpo=r(m8e," (Wav2Vec2-Conformer model)"),m8e.forEach(t),ypo=i(S),Lh=n(S,"LI",{});var g8e=s(Lh);cie=n(g8e,"STRONG",{});var Cdt=s(cie);xpo=r(Cdt,"wav2vec2_phoneme"),Cdt.forEach(t),$po=r(g8e," \u2014 "),CN=n(g8e,"A",{href:!0});var wdt=s(CN);kpo=r(wdt,"Wav2Vec2PhonemeCTCTokenizer"),wdt.forEach(t),Spo=r(g8e," (Wav2Vec2Phoneme model)"),g8e.forEach(t),Rpo=i(S),Gs=n(S,"LI",{});var _S=s(Gs);fie=n(_S,"STRONG",{});var Adt=s(fie);Ppo=r(Adt,"xglm"),Adt.forEach(t),Bpo=r(_S," \u2014 "),wN=n(_S,"A",{href:!0});var Ldt=s(wN);Ipo=r(Ldt,"XGLMTokenizer"),Ldt.forEach(t),Npo=r(_S," or "),AN=n(_S,"A",{href:!0});var ydt=s(AN);qpo=r(ydt,"XGLMTokenizerFast"),ydt.forEach(t),jpo=r(_S," (XGLM model)"),_S.forEach(t),Dpo=i(S),yh=n(S,"LI",{});var h8e=s(yh);mie=n(h8e,"STRONG",{});var xdt=s(mie);Gpo=r(xdt,"xlm"),xdt.forEach(t),Opo=r(h8e," \u2014 "),LN=n(h8e,"A",{href:!0});var $dt=s(LN);Vpo=r($dt,"XLMTokenizer"),$dt.forEach(t),Xpo=r(h8e," (XLM model)"),h8e.forEach(t),zpo=i(S),xh=n(S,"LI",{});var p8e=s(xh);gie=n(p8e,"STRONG",{});var kdt=s(gie);Qpo=r(kdt,"xlm-prophetnet"),kdt.forEach(t),Wpo=r(p8e," \u2014 "),yN=n(p8e,"A",{href:!0});var Sdt=s(yN);Hpo=r(Sdt,"XLMProphetNetTokenizer"),Sdt.forEach(t),Upo=r(p8e," (XLM-ProphetNet model)"),p8e.forEach(t),Jpo=i(S),Os=n(S,"LI",{});var uS=s(Os);hie=n(uS,"STRONG",{});var Rdt=s(hie);Ypo=r(Rdt,"xlm-roberta"),Rdt.forEach(t),Kpo=r(uS," \u2014 "),xN=n(uS,"A",{href:!0});var Pdt=s(xN);Zpo=r(Pdt,"XLMRobertaTokenizer"),Pdt.forEach(t),e_o=r(uS," or "),$N=n(uS,"A",{href:!0});var Bdt=s($N);o_o=r(Bdt,"XLMRobertaTokenizerFast"),Bdt.forEach(t),r_o=r(uS," (XLM-RoBERTa model)"),uS.forEach(t),t_o=i(S),Vs=n(S,"LI",{});var bS=s(Vs);pie=n(bS,"STRONG",{});var Idt=s(pie);a_o=r(Idt,"xlm-roberta-xl"),Idt.forEach(t),n_o=r(bS," \u2014 "),kN=n(bS,"A",{href:!0});var Ndt=s(kN);s_o=r(Ndt,"RobertaTokenizer"),Ndt.forEach(t),l_o=r(bS," or "),SN=n(bS,"A",{href:!0});var qdt=s(SN);i_o=r(qdt,"RobertaTokenizerFast"),qdt.forEach(t),d_o=r(bS," (XLM-RoBERTa-XL model)"),bS.forEach(t),c_o=i(S),Xs=n(S,"LI",{});var vS=s(Xs);_ie=n(vS,"STRONG",{});var jdt=s(_ie);f_o=r(jdt,"xlnet"),jdt.forEach(t),m_o=r(vS," \u2014 "),RN=n(vS,"A",{href:!0});var Ddt=s(RN);g_o=r(Ddt,"XLNetTokenizer"),Ddt.forEach(t),h_o=r(vS," or "),PN=n(vS,"A",{href:!0});var Gdt=s(PN);p_o=r(Gdt,"XLNetTokenizerFast"),Gdt.forEach(t),__o=r(vS," (XLNet model)"),vS.forEach(t),u_o=i(S),zs=n(S,"LI",{});var FS=s(zs);uie=n(FS,"STRONG",{});var Odt=s(uie);b_o=r(Odt,"yoso"),Odt.forEach(t),v_o=r(FS," \u2014 "),BN=n(FS,"A",{href:!0});var Vdt=s(BN);F_o=r(Vdt,"AlbertTokenizer"),Vdt.forEach(t),T_o=r(FS," or "),IN=n(FS,"A",{href:!0});var Xdt=s(IN);M_o=r(Xdt,"AlbertTokenizerFast"),Xdt.forEach(t),E_o=r(FS," (YOSO model)"),FS.forEach(t),S.forEach(t),C_o=i(Ys),T($h.$$.fragment,Ys),Ys.forEach(t),w_o=i(Js),kh=n(Js,"DIV",{class:!0});var Cze=s(kh);T(iy.$$.fragment,Cze),A_o=i(Cze),bie=n(Cze,"P",{});var zdt=s(bie);L_o=r(zdt,"Register a new tokenizer in this mapping."),zdt.forEach(t),Cze.forEach(t),Js.forEach(t),EVe=i(f),Ii=n(f,"H2",{class:!0});var wze=s(Ii);Sh=n(wze,"A",{id:!0,class:!0,href:!0});var Qdt=s(Sh);vie=n(Qdt,"SPAN",{});var Wdt=s(vie);T(dy.$$.fragment,Wdt),Wdt.forEach(t),Qdt.forEach(t),y_o=i(wze),Fie=n(wze,"SPAN",{});var Hdt=s(Fie);x_o=r(Hdt,"AutoFeatureExtractor"),Hdt.forEach(t),wze.forEach(t),CVe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(cy.$$.fragment,Ks),$_o=i(Ks),fy=n(Ks,"P",{});var Aze=s(fy);k_o=r(Aze,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NN=n(Aze,"A",{href:!0});var Udt=s(NN);S_o=r(Udt,"AutoFeatureExtractor.from_pretrained()"),Udt.forEach(t),R_o=r(Aze," class method."),Aze.forEach(t),P_o=i(Ks),my=n(Ks,"P",{});var Lze=s(my);B_o=r(Lze,"This class cannot be instantiated directly using "),Tie=n(Lze,"CODE",{});var Jdt=s(Tie);I_o=r(Jdt,"__init__()"),Jdt.forEach(t),N_o=r(Lze," (throws an error)."),Lze.forEach(t),q_o=i(Ks),He=n(Ks,"DIV",{class:!0});var ta=s(He);T(gy.$$.fragment,ta),j_o=i(ta),Mie=n(ta,"P",{});var Ydt=s(Mie);D_o=r(Ydt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ydt.forEach(t),G_o=i(ta),Ra=n(ta,"P",{});var YA=s(Ra);O_o=r(YA,"The feature extractor class to instantiate is selected based on the "),Eie=n(YA,"CODE",{});var Kdt=s(Eie);V_o=r(Kdt,"model_type"),Kdt.forEach(t),X_o=r(YA,` property of the config object
(either passed as an argument or loaded from `),Cie=n(YA,"CODE",{});var Zdt=s(Cie);z_o=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),Q_o=r(YA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wie=n(YA,"CODE",{});var ect=s(wie);W_o=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),H_o=r(YA,":"),YA.forEach(t),U_o=i(ta),Y=n(ta,"UL",{});var K=s(Y);Rh=n(K,"LI",{});var _8e=s(Rh);Aie=n(_8e,"STRONG",{});var oct=s(Aie);J_o=r(oct,"beit"),oct.forEach(t),Y_o=r(_8e," \u2014 "),qN=n(_8e,"A",{href:!0});var rct=s(qN);K_o=r(rct,"BeitFeatureExtractor"),rct.forEach(t),Z_o=r(_8e," (BEiT model)"),_8e.forEach(t),euo=i(K),Ph=n(K,"LI",{});var u8e=s(Ph);Lie=n(u8e,"STRONG",{});var tct=s(Lie);ouo=r(tct,"clip"),tct.forEach(t),ruo=r(u8e," \u2014 "),jN=n(u8e,"A",{href:!0});var act=s(jN);tuo=r(act,"CLIPFeatureExtractor"),act.forEach(t),auo=r(u8e," (CLIP model)"),u8e.forEach(t),nuo=i(K),Bh=n(K,"LI",{});var b8e=s(Bh);yie=n(b8e,"STRONG",{});var nct=s(yie);suo=r(nct,"convnext"),nct.forEach(t),luo=r(b8e," \u2014 "),DN=n(b8e,"A",{href:!0});var sct=s(DN);iuo=r(sct,"ConvNextFeatureExtractor"),sct.forEach(t),duo=r(b8e," (ConvNeXT model)"),b8e.forEach(t),cuo=i(K),Ih=n(K,"LI",{});var v8e=s(Ih);xie=n(v8e,"STRONG",{});var lct=s(xie);fuo=r(lct,"cvt"),lct.forEach(t),muo=r(v8e," \u2014 "),GN=n(v8e,"A",{href:!0});var ict=s(GN);guo=r(ict,"ConvNextFeatureExtractor"),ict.forEach(t),huo=r(v8e," (CvT model)"),v8e.forEach(t),puo=i(K),Nh=n(K,"LI",{});var F8e=s(Nh);$ie=n(F8e,"STRONG",{});var dct=s($ie);_uo=r(dct,"data2vec-audio"),dct.forEach(t),uuo=r(F8e," \u2014 "),ON=n(F8e,"A",{href:!0});var cct=s(ON);buo=r(cct,"Wav2Vec2FeatureExtractor"),cct.forEach(t),vuo=r(F8e," (Data2VecAudio model)"),F8e.forEach(t),Fuo=i(K),qh=n(K,"LI",{});var T8e=s(qh);kie=n(T8e,"STRONG",{});var fct=s(kie);Tuo=r(fct,"data2vec-vision"),fct.forEach(t),Muo=r(T8e," \u2014 "),VN=n(T8e,"A",{href:!0});var mct=s(VN);Euo=r(mct,"BeitFeatureExtractor"),mct.forEach(t),Cuo=r(T8e," (Data2VecVision model)"),T8e.forEach(t),wuo=i(K),jh=n(K,"LI",{});var M8e=s(jh);Sie=n(M8e,"STRONG",{});var gct=s(Sie);Auo=r(gct,"deit"),gct.forEach(t),Luo=r(M8e," \u2014 "),XN=n(M8e,"A",{href:!0});var hct=s(XN);yuo=r(hct,"DeiTFeatureExtractor"),hct.forEach(t),xuo=r(M8e," (DeiT model)"),M8e.forEach(t),$uo=i(K),Dh=n(K,"LI",{});var E8e=s(Dh);Rie=n(E8e,"STRONG",{});var pct=s(Rie);kuo=r(pct,"detr"),pct.forEach(t),Suo=r(E8e," \u2014 "),zN=n(E8e,"A",{href:!0});var _ct=s(zN);Ruo=r(_ct,"DetrFeatureExtractor"),_ct.forEach(t),Puo=r(E8e," (DETR model)"),E8e.forEach(t),Buo=i(K),Gh=n(K,"LI",{});var C8e=s(Gh);Pie=n(C8e,"STRONG",{});var uct=s(Pie);Iuo=r(uct,"dpt"),uct.forEach(t),Nuo=r(C8e," \u2014 "),QN=n(C8e,"A",{href:!0});var bct=s(QN);quo=r(bct,"DPTFeatureExtractor"),bct.forEach(t),juo=r(C8e," (DPT model)"),C8e.forEach(t),Duo=i(K),Oh=n(K,"LI",{});var w8e=s(Oh);Bie=n(w8e,"STRONG",{});var vct=s(Bie);Guo=r(vct,"flava"),vct.forEach(t),Ouo=r(w8e," \u2014 "),WN=n(w8e,"A",{href:!0});var Fct=s(WN);Vuo=r(Fct,"FlavaFeatureExtractor"),Fct.forEach(t),Xuo=r(w8e," (FLAVA model)"),w8e.forEach(t),zuo=i(K),Vh=n(K,"LI",{});var A8e=s(Vh);Iie=n(A8e,"STRONG",{});var Tct=s(Iie);Quo=r(Tct,"glpn"),Tct.forEach(t),Wuo=r(A8e," \u2014 "),HN=n(A8e,"A",{href:!0});var Mct=s(HN);Huo=r(Mct,"GLPNFeatureExtractor"),Mct.forEach(t),Uuo=r(A8e," (GLPN model)"),A8e.forEach(t),Juo=i(K),Xh=n(K,"LI",{});var L8e=s(Xh);Nie=n(L8e,"STRONG",{});var Ect=s(Nie);Yuo=r(Ect,"groupvit"),Ect.forEach(t),Kuo=r(L8e," \u2014 "),UN=n(L8e,"A",{href:!0});var Cct=s(UN);Zuo=r(Cct,"CLIPFeatureExtractor"),Cct.forEach(t),e1o=r(L8e," (GroupViT model)"),L8e.forEach(t),o1o=i(K),zh=n(K,"LI",{});var y8e=s(zh);qie=n(y8e,"STRONG",{});var wct=s(qie);r1o=r(wct,"hubert"),wct.forEach(t),t1o=r(y8e," \u2014 "),JN=n(y8e,"A",{href:!0});var Act=s(JN);a1o=r(Act,"Wav2Vec2FeatureExtractor"),Act.forEach(t),n1o=r(y8e," (Hubert model)"),y8e.forEach(t),s1o=i(K),Qh=n(K,"LI",{});var x8e=s(Qh);jie=n(x8e,"STRONG",{});var Lct=s(jie);l1o=r(Lct,"imagegpt"),Lct.forEach(t),i1o=r(x8e," \u2014 "),YN=n(x8e,"A",{href:!0});var yct=s(YN);d1o=r(yct,"ImageGPTFeatureExtractor"),yct.forEach(t),c1o=r(x8e," (ImageGPT model)"),x8e.forEach(t),f1o=i(K),Wh=n(K,"LI",{});var $8e=s(Wh);Die=n($8e,"STRONG",{});var xct=s(Die);m1o=r(xct,"layoutlmv2"),xct.forEach(t),g1o=r($8e," \u2014 "),KN=n($8e,"A",{href:!0});var $ct=s(KN);h1o=r($ct,"LayoutLMv2FeatureExtractor"),$ct.forEach(t),p1o=r($8e," (LayoutLMv2 model)"),$8e.forEach(t),_1o=i(K),Hh=n(K,"LI",{});var k8e=s(Hh);Gie=n(k8e,"STRONG",{});var kct=s(Gie);u1o=r(kct,"layoutlmv3"),kct.forEach(t),b1o=r(k8e," \u2014 "),ZN=n(k8e,"A",{href:!0});var Sct=s(ZN);v1o=r(Sct,"LayoutLMv3FeatureExtractor"),Sct.forEach(t),F1o=r(k8e," (LayoutLMv3 model)"),k8e.forEach(t),T1o=i(K),Uh=n(K,"LI",{});var S8e=s(Uh);Oie=n(S8e,"STRONG",{});var Rct=s(Oie);M1o=r(Rct,"levit"),Rct.forEach(t),E1o=r(S8e," \u2014 "),eq=n(S8e,"A",{href:!0});var Pct=s(eq);C1o=r(Pct,"LevitFeatureExtractor"),Pct.forEach(t),w1o=r(S8e," (LeViT model)"),S8e.forEach(t),A1o=i(K),Jh=n(K,"LI",{});var R8e=s(Jh);Vie=n(R8e,"STRONG",{});var Bct=s(Vie);L1o=r(Bct,"maskformer"),Bct.forEach(t),y1o=r(R8e," \u2014 "),oq=n(R8e,"A",{href:!0});var Ict=s(oq);x1o=r(Ict,"MaskFormerFeatureExtractor"),Ict.forEach(t),$1o=r(R8e," (MaskFormer model)"),R8e.forEach(t),k1o=i(K),Yh=n(K,"LI",{});var P8e=s(Yh);Xie=n(P8e,"STRONG",{});var Nct=s(Xie);S1o=r(Nct,"mctct"),Nct.forEach(t),R1o=r(P8e," \u2014 "),rq=n(P8e,"A",{href:!0});var qct=s(rq);P1o=r(qct,"MCTCTFeatureExtractor"),qct.forEach(t),B1o=r(P8e," (M-CTC-T model)"),P8e.forEach(t),I1o=i(K),Kh=n(K,"LI",{});var B8e=s(Kh);zie=n(B8e,"STRONG",{});var jct=s(zie);N1o=r(jct,"perceiver"),jct.forEach(t),q1o=r(B8e," \u2014 "),tq=n(B8e,"A",{href:!0});var Dct=s(tq);j1o=r(Dct,"PerceiverFeatureExtractor"),Dct.forEach(t),D1o=r(B8e," (Perceiver model)"),B8e.forEach(t),G1o=i(K),Zh=n(K,"LI",{});var I8e=s(Zh);Qie=n(I8e,"STRONG",{});var Gct=s(Qie);O1o=r(Gct,"poolformer"),Gct.forEach(t),V1o=r(I8e," \u2014 "),aq=n(I8e,"A",{href:!0});var Oct=s(aq);X1o=r(Oct,"PoolFormerFeatureExtractor"),Oct.forEach(t),z1o=r(I8e," (PoolFormer model)"),I8e.forEach(t),Q1o=i(K),ep=n(K,"LI",{});var N8e=s(ep);Wie=n(N8e,"STRONG",{});var Vct=s(Wie);W1o=r(Vct,"regnet"),Vct.forEach(t),H1o=r(N8e," \u2014 "),nq=n(N8e,"A",{href:!0});var Xct=s(nq);U1o=r(Xct,"ConvNextFeatureExtractor"),Xct.forEach(t),J1o=r(N8e," (RegNet model)"),N8e.forEach(t),Y1o=i(K),op=n(K,"LI",{});var q8e=s(op);Hie=n(q8e,"STRONG",{});var zct=s(Hie);K1o=r(zct,"resnet"),zct.forEach(t),Z1o=r(q8e," \u2014 "),sq=n(q8e,"A",{href:!0});var Qct=s(sq);e7o=r(Qct,"ConvNextFeatureExtractor"),Qct.forEach(t),o7o=r(q8e," (ResNet model)"),q8e.forEach(t),r7o=i(K),rp=n(K,"LI",{});var j8e=s(rp);Uie=n(j8e,"STRONG",{});var Wct=s(Uie);t7o=r(Wct,"segformer"),Wct.forEach(t),a7o=r(j8e," \u2014 "),lq=n(j8e,"A",{href:!0});var Hct=s(lq);n7o=r(Hct,"SegformerFeatureExtractor"),Hct.forEach(t),s7o=r(j8e," (SegFormer model)"),j8e.forEach(t),l7o=i(K),tp=n(K,"LI",{});var D8e=s(tp);Jie=n(D8e,"STRONG",{});var Uct=s(Jie);i7o=r(Uct,"speech_to_text"),Uct.forEach(t),d7o=r(D8e," \u2014 "),iq=n(D8e,"A",{href:!0});var Jct=s(iq);c7o=r(Jct,"Speech2TextFeatureExtractor"),Jct.forEach(t),f7o=r(D8e," (Speech2Text model)"),D8e.forEach(t),m7o=i(K),ap=n(K,"LI",{});var G8e=s(ap);Yie=n(G8e,"STRONG",{});var Yct=s(Yie);g7o=r(Yct,"swin"),Yct.forEach(t),h7o=r(G8e," \u2014 "),dq=n(G8e,"A",{href:!0});var Kct=s(dq);p7o=r(Kct,"ViTFeatureExtractor"),Kct.forEach(t),_7o=r(G8e," (Swin Transformer model)"),G8e.forEach(t),u7o=i(K),np=n(K,"LI",{});var O8e=s(np);Kie=n(O8e,"STRONG",{});var Zct=s(Kie);b7o=r(Zct,"van"),Zct.forEach(t),v7o=r(O8e," \u2014 "),cq=n(O8e,"A",{href:!0});var eft=s(cq);F7o=r(eft,"ConvNextFeatureExtractor"),eft.forEach(t),T7o=r(O8e," (VAN model)"),O8e.forEach(t),M7o=i(K),sp=n(K,"LI",{});var V8e=s(sp);Zie=n(V8e,"STRONG",{});var oft=s(Zie);E7o=r(oft,"vilt"),oft.forEach(t),C7o=r(V8e," \u2014 "),fq=n(V8e,"A",{href:!0});var rft=s(fq);w7o=r(rft,"ViltFeatureExtractor"),rft.forEach(t),A7o=r(V8e," (ViLT model)"),V8e.forEach(t),L7o=i(K),lp=n(K,"LI",{});var X8e=s(lp);ede=n(X8e,"STRONG",{});var tft=s(ede);y7o=r(tft,"vit"),tft.forEach(t),x7o=r(X8e," \u2014 "),mq=n(X8e,"A",{href:!0});var aft=s(mq);$7o=r(aft,"ViTFeatureExtractor"),aft.forEach(t),k7o=r(X8e," (ViT model)"),X8e.forEach(t),S7o=i(K),ip=n(K,"LI",{});var z8e=s(ip);ode=n(z8e,"STRONG",{});var nft=s(ode);R7o=r(nft,"vit_mae"),nft.forEach(t),P7o=r(z8e," \u2014 "),gq=n(z8e,"A",{href:!0});var sft=s(gq);B7o=r(sft,"ViTFeatureExtractor"),sft.forEach(t),I7o=r(z8e," (ViTMAE model)"),z8e.forEach(t),N7o=i(K),dp=n(K,"LI",{});var Q8e=s(dp);rde=n(Q8e,"STRONG",{});var lft=s(rde);q7o=r(lft,"wav2vec2"),lft.forEach(t),j7o=r(Q8e," \u2014 "),hq=n(Q8e,"A",{href:!0});var ift=s(hq);D7o=r(ift,"Wav2Vec2FeatureExtractor"),ift.forEach(t),G7o=r(Q8e," (Wav2Vec2 model)"),Q8e.forEach(t),O7o=i(K),cp=n(K,"LI",{});var W8e=s(cp);tde=n(W8e,"STRONG",{});var dft=s(tde);V7o=r(dft,"wav2vec2-conformer"),dft.forEach(t),X7o=r(W8e," \u2014 "),pq=n(W8e,"A",{href:!0});var cft=s(pq);z7o=r(cft,"Wav2Vec2FeatureExtractor"),cft.forEach(t),Q7o=r(W8e," (Wav2Vec2-Conformer model)"),W8e.forEach(t),W7o=i(K),fp=n(K,"LI",{});var H8e=s(fp);ade=n(H8e,"STRONG",{});var fft=s(ade);H7o=r(fft,"yolos"),fft.forEach(t),U7o=r(H8e," \u2014 "),_q=n(H8e,"A",{href:!0});var mft=s(_q);J7o=r(mft,"YolosFeatureExtractor"),mft.forEach(t),Y7o=r(H8e," (YOLOS model)"),H8e.forEach(t),K.forEach(t),K7o=i(ta),T(mp.$$.fragment,ta),Z7o=i(ta),T(gp.$$.fragment,ta),ta.forEach(t),e4o=i(Ks),hp=n(Ks,"DIV",{class:!0});var yze=s(hp);T(hy.$$.fragment,yze),o4o=i(yze),nde=n(yze,"P",{});var gft=s(nde);r4o=r(gft,"Register a new feature extractor for this class."),gft.forEach(t),yze.forEach(t),Ks.forEach(t),wVe=i(f),Ni=n(f,"H2",{class:!0});var xze=s(Ni);pp=n(xze,"A",{id:!0,class:!0,href:!0});var hft=s(pp);sde=n(hft,"SPAN",{});var pft=s(sde);T(py.$$.fragment,pft),pft.forEach(t),hft.forEach(t),t4o=i(xze),lde=n(xze,"SPAN",{});var _ft=s(lde);a4o=r(_ft,"AutoProcessor"),_ft.forEach(t),xze.forEach(t),AVe=i(f),yo=n(f,"DIV",{class:!0});var Zs=s(yo);T(_y.$$.fragment,Zs),n4o=i(Zs),uy=n(Zs,"P",{});var $ze=s(uy);s4o=r($ze,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uq=n($ze,"A",{href:!0});var uft=s(uq);l4o=r(uft,"AutoProcessor.from_pretrained()"),uft.forEach(t),i4o=r($ze," class method."),$ze.forEach(t),d4o=i(Zs),by=n(Zs,"P",{});var kze=s(by);c4o=r(kze,"This class cannot be instantiated directly using "),ide=n(kze,"CODE",{});var bft=s(ide);f4o=r(bft,"__init__()"),bft.forEach(t),m4o=r(kze," (throws an error)."),kze.forEach(t),g4o=i(Zs),Ue=n(Zs,"DIV",{class:!0});var aa=s(Ue);T(vy.$$.fragment,aa),h4o=i(aa),dde=n(aa,"P",{});var vft=s(dde);p4o=r(vft,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vft.forEach(t),_4o=i(aa),qi=n(aa,"P",{});var cre=s(qi);u4o=r(cre,"The processor class to instantiate is selected based on the "),cde=n(cre,"CODE",{});var Fft=s(cde);b4o=r(Fft,"model_type"),Fft.forEach(t),v4o=r(cre,` property of the config object (either
passed as an argument or loaded from `),fde=n(cre,"CODE",{});var Tft=s(fde);F4o=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),T4o=r(cre," if possible):"),cre.forEach(t),M4o=i(aa),he=n(aa,"UL",{});var ue=s(he);_p=n(ue,"LI",{});var U8e=s(_p);mde=n(U8e,"STRONG",{});var Mft=s(mde);E4o=r(Mft,"clip"),Mft.forEach(t),C4o=r(U8e," \u2014 "),bq=n(U8e,"A",{href:!0});var Eft=s(bq);w4o=r(Eft,"CLIPProcessor"),Eft.forEach(t),A4o=r(U8e," (CLIP model)"),U8e.forEach(t),L4o=i(ue),up=n(ue,"LI",{});var J8e=s(up);gde=n(J8e,"STRONG",{});var Cft=s(gde);y4o=r(Cft,"flava"),Cft.forEach(t),x4o=r(J8e," \u2014 "),hde=n(J8e,"CODE",{});var wft=s(hde);$4o=r(wft,"FLAVAProcessor"),wft.forEach(t),k4o=r(J8e," (FLAVA model)"),J8e.forEach(t),S4o=i(ue),bp=n(ue,"LI",{});var Y8e=s(bp);pde=n(Y8e,"STRONG",{});var Aft=s(pde);R4o=r(Aft,"groupvit"),Aft.forEach(t),P4o=r(Y8e," \u2014 "),vq=n(Y8e,"A",{href:!0});var Lft=s(vq);B4o=r(Lft,"CLIPProcessor"),Lft.forEach(t),I4o=r(Y8e," (GroupViT model)"),Y8e.forEach(t),N4o=i(ue),vp=n(ue,"LI",{});var K8e=s(vp);_de=n(K8e,"STRONG",{});var yft=s(_de);q4o=r(yft,"layoutlmv2"),yft.forEach(t),j4o=r(K8e," \u2014 "),Fq=n(K8e,"A",{href:!0});var xft=s(Fq);D4o=r(xft,"LayoutLMv2Processor"),xft.forEach(t),G4o=r(K8e," (LayoutLMv2 model)"),K8e.forEach(t),O4o=i(ue),Fp=n(ue,"LI",{});var Z8e=s(Fp);ude=n(Z8e,"STRONG",{});var $ft=s(ude);V4o=r($ft,"layoutlmv3"),$ft.forEach(t),X4o=r(Z8e," \u2014 "),Tq=n(Z8e,"A",{href:!0});var kft=s(Tq);z4o=r(kft,"LayoutLMv3Processor"),kft.forEach(t),Q4o=r(Z8e," (LayoutLMv3 model)"),Z8e.forEach(t),W4o=i(ue),Tp=n(ue,"LI",{});var e9e=s(Tp);bde=n(e9e,"STRONG",{});var Sft=s(bde);H4o=r(Sft,"layoutxlm"),Sft.forEach(t),U4o=r(e9e," \u2014 "),Mq=n(e9e,"A",{href:!0});var Rft=s(Mq);J4o=r(Rft,"LayoutXLMProcessor"),Rft.forEach(t),Y4o=r(e9e," (LayoutXLM model)"),e9e.forEach(t),K4o=i(ue),Mp=n(ue,"LI",{});var o9e=s(Mp);vde=n(o9e,"STRONG",{});var Pft=s(vde);Z4o=r(Pft,"sew"),Pft.forEach(t),e2o=r(o9e," \u2014 "),Eq=n(o9e,"A",{href:!0});var Bft=s(Eq);o2o=r(Bft,"Wav2Vec2Processor"),Bft.forEach(t),r2o=r(o9e," (SEW model)"),o9e.forEach(t),t2o=i(ue),Ep=n(ue,"LI",{});var r9e=s(Ep);Fde=n(r9e,"STRONG",{});var Ift=s(Fde);a2o=r(Ift,"sew-d"),Ift.forEach(t),n2o=r(r9e," \u2014 "),Cq=n(r9e,"A",{href:!0});var Nft=s(Cq);s2o=r(Nft,"Wav2Vec2Processor"),Nft.forEach(t),l2o=r(r9e," (SEW-D model)"),r9e.forEach(t),i2o=i(ue),Cp=n(ue,"LI",{});var t9e=s(Cp);Tde=n(t9e,"STRONG",{});var qft=s(Tde);d2o=r(qft,"speech_to_text"),qft.forEach(t),c2o=r(t9e," \u2014 "),wq=n(t9e,"A",{href:!0});var jft=s(wq);f2o=r(jft,"Speech2TextProcessor"),jft.forEach(t),m2o=r(t9e," (Speech2Text model)"),t9e.forEach(t),g2o=i(ue),wp=n(ue,"LI",{});var a9e=s(wp);Mde=n(a9e,"STRONG",{});var Dft=s(Mde);h2o=r(Dft,"speech_to_text_2"),Dft.forEach(t),p2o=r(a9e," \u2014 "),Aq=n(a9e,"A",{href:!0});var Gft=s(Aq);_2o=r(Gft,"Speech2Text2Processor"),Gft.forEach(t),u2o=r(a9e," (Speech2Text2 model)"),a9e.forEach(t),b2o=i(ue),Ap=n(ue,"LI",{});var n9e=s(Ap);Ede=n(n9e,"STRONG",{});var Oft=s(Ede);v2o=r(Oft,"trocr"),Oft.forEach(t),F2o=r(n9e," \u2014 "),Lq=n(n9e,"A",{href:!0});var Vft=s(Lq);T2o=r(Vft,"TrOCRProcessor"),Vft.forEach(t),M2o=r(n9e," (TrOCR model)"),n9e.forEach(t),E2o=i(ue),Lp=n(ue,"LI",{});var s9e=s(Lp);Cde=n(s9e,"STRONG",{});var Xft=s(Cde);C2o=r(Xft,"unispeech"),Xft.forEach(t),w2o=r(s9e," \u2014 "),yq=n(s9e,"A",{href:!0});var zft=s(yq);A2o=r(zft,"Wav2Vec2Processor"),zft.forEach(t),L2o=r(s9e," (UniSpeech model)"),s9e.forEach(t),y2o=i(ue),yp=n(ue,"LI",{});var l9e=s(yp);wde=n(l9e,"STRONG",{});var Qft=s(wde);x2o=r(Qft,"unispeech-sat"),Qft.forEach(t),$2o=r(l9e," \u2014 "),xq=n(l9e,"A",{href:!0});var Wft=s(xq);k2o=r(Wft,"Wav2Vec2Processor"),Wft.forEach(t),S2o=r(l9e," (UniSpeechSat model)"),l9e.forEach(t),R2o=i(ue),xp=n(ue,"LI",{});var i9e=s(xp);Ade=n(i9e,"STRONG",{});var Hft=s(Ade);P2o=r(Hft,"vilt"),Hft.forEach(t),B2o=r(i9e," \u2014 "),$q=n(i9e,"A",{href:!0});var Uft=s($q);I2o=r(Uft,"ViltProcessor"),Uft.forEach(t),N2o=r(i9e," (ViLT model)"),i9e.forEach(t),q2o=i(ue),$p=n(ue,"LI",{});var d9e=s($p);Lde=n(d9e,"STRONG",{});var Jft=s(Lde);j2o=r(Jft,"vision-text-dual-encoder"),Jft.forEach(t),D2o=r(d9e," \u2014 "),kq=n(d9e,"A",{href:!0});var Yft=s(kq);G2o=r(Yft,"VisionTextDualEncoderProcessor"),Yft.forEach(t),O2o=r(d9e," (VisionTextDualEncoder model)"),d9e.forEach(t),V2o=i(ue),kp=n(ue,"LI",{});var c9e=s(kp);yde=n(c9e,"STRONG",{});var Kft=s(yde);X2o=r(Kft,"wav2vec2"),Kft.forEach(t),z2o=r(c9e," \u2014 "),Sq=n(c9e,"A",{href:!0});var Zft=s(Sq);Q2o=r(Zft,"Wav2Vec2Processor"),Zft.forEach(t),W2o=r(c9e," (Wav2Vec2 model)"),c9e.forEach(t),H2o=i(ue),Sp=n(ue,"LI",{});var f9e=s(Sp);xde=n(f9e,"STRONG",{});var emt=s(xde);U2o=r(emt,"wav2vec2-conformer"),emt.forEach(t),J2o=r(f9e," \u2014 "),Rq=n(f9e,"A",{href:!0});var omt=s(Rq);Y2o=r(omt,"Wav2Vec2Processor"),omt.forEach(t),K2o=r(f9e," (Wav2Vec2-Conformer model)"),f9e.forEach(t),Z2o=i(ue),Rp=n(ue,"LI",{});var m9e=s(Rp);$de=n(m9e,"STRONG",{});var rmt=s($de);ebo=r(rmt,"wavlm"),rmt.forEach(t),obo=r(m9e," \u2014 "),Pq=n(m9e,"A",{href:!0});var tmt=s(Pq);rbo=r(tmt,"Wav2Vec2Processor"),tmt.forEach(t),tbo=r(m9e," (WavLM model)"),m9e.forEach(t),ue.forEach(t),abo=i(aa),T(Pp.$$.fragment,aa),nbo=i(aa),T(Bp.$$.fragment,aa),aa.forEach(t),sbo=i(Zs),Ip=n(Zs,"DIV",{class:!0});var Sze=s(Ip);T(Fy.$$.fragment,Sze),lbo=i(Sze),kde=n(Sze,"P",{});var amt=s(kde);ibo=r(amt,"Register a new processor for this class."),amt.forEach(t),Sze.forEach(t),Zs.forEach(t),LVe=i(f),ji=n(f,"H2",{class:!0});var Rze=s(ji);Np=n(Rze,"A",{id:!0,class:!0,href:!0});var nmt=s(Np);Sde=n(nmt,"SPAN",{});var smt=s(Sde);T(Ty.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),dbo=i(Rze),Rde=n(Rze,"SPAN",{});var lmt=s(Rde);cbo=r(lmt,"AutoModel"),lmt.forEach(t),Rze.forEach(t),yVe=i(f),xo=n(f,"DIV",{class:!0});var el=s(xo);T(My.$$.fragment,el),fbo=i(el),Di=n(el,"P",{});var fre=s(Di);mbo=r(fre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bq=n(fre,"A",{href:!0});var imt=s(Bq);gbo=r(imt,"from_pretrained()"),imt.forEach(t),hbo=r(fre," class method or the "),Iq=n(fre,"A",{href:!0});var dmt=s(Iq);pbo=r(dmt,"from_config()"),dmt.forEach(t),_bo=r(fre,` class
method.`),fre.forEach(t),ubo=i(el),Ey=n(el,"P",{});var Pze=s(Ey);bbo=r(Pze,"This class cannot be instantiated directly using "),Pde=n(Pze,"CODE",{});var cmt=s(Pde);vbo=r(cmt,"__init__()"),cmt.forEach(t),Fbo=r(Pze," (throws an error)."),Pze.forEach(t),Tbo=i(el),st=n(el,"DIV",{class:!0});var KA=s(st);T(Cy.$$.fragment,KA),Mbo=i(KA),Bde=n(KA,"P",{});var fmt=s(Bde);Ebo=r(fmt,"Instantiates one of the base model classes of the library from a configuration."),fmt.forEach(t),Cbo=i(KA),Gi=n(KA,"P",{});var mre=s(Gi);wbo=r(mre,`Note:
Loading a model from its configuration file does `),Ide=n(mre,"STRONG",{});var mmt=s(Ide);Abo=r(mmt,"not"),mmt.forEach(t),Lbo=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=n(mre,"A",{href:!0});var gmt=s(Nq);ybo=r(gmt,"from_pretrained()"),gmt.forEach(t),xbo=r(mre," to load the model weights."),mre.forEach(t),$bo=i(KA),T(qp.$$.fragment,KA),KA.forEach(t),kbo=i(el),Je=n(el,"DIV",{class:!0});var na=s(Je);T(wy.$$.fragment,na),Sbo=i(na),Nde=n(na,"P",{});var hmt=s(Nde);Rbo=r(hmt,"Instantiate one of the base model classes of the library from a pretrained model."),hmt.forEach(t),Pbo=i(na),Pa=n(na,"P",{});var ZA=s(Pa);Bbo=r(ZA,"The model class to instantiate is selected based on the "),qde=n(ZA,"CODE",{});var pmt=s(qde);Ibo=r(pmt,"model_type"),pmt.forEach(t),Nbo=r(ZA,` property of the config object (either
passed as an argument or loaded from `),jde=n(ZA,"CODE",{});var _mt=s(jde);qbo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),jbo=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=n(ZA,"CODE",{});var umt=s(Dde);Dbo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),Gbo=r(ZA,":"),ZA.forEach(t),Obo=i(na),y=n(na,"UL",{});var x=s(y);jp=n(x,"LI",{});var g9e=s(jp);Gde=n(g9e,"STRONG",{});var bmt=s(Gde);Vbo=r(bmt,"albert"),bmt.forEach(t),Xbo=r(g9e," \u2014 "),qq=n(g9e,"A",{href:!0});var vmt=s(qq);zbo=r(vmt,"AlbertModel"),vmt.forEach(t),Qbo=r(g9e," (ALBERT model)"),g9e.forEach(t),Wbo=i(x),Dp=n(x,"LI",{});var h9e=s(Dp);Ode=n(h9e,"STRONG",{});var Fmt=s(Ode);Hbo=r(Fmt,"bart"),Fmt.forEach(t),Ubo=r(h9e," \u2014 "),jq=n(h9e,"A",{href:!0});var Tmt=s(jq);Jbo=r(Tmt,"BartModel"),Tmt.forEach(t),Ybo=r(h9e," (BART model)"),h9e.forEach(t),Kbo=i(x),Gp=n(x,"LI",{});var p9e=s(Gp);Vde=n(p9e,"STRONG",{});var Mmt=s(Vde);Zbo=r(Mmt,"beit"),Mmt.forEach(t),evo=r(p9e," \u2014 "),Dq=n(p9e,"A",{href:!0});var Emt=s(Dq);ovo=r(Emt,"BeitModel"),Emt.forEach(t),rvo=r(p9e," (BEiT model)"),p9e.forEach(t),tvo=i(x),Op=n(x,"LI",{});var _9e=s(Op);Xde=n(_9e,"STRONG",{});var Cmt=s(Xde);avo=r(Cmt,"bert"),Cmt.forEach(t),nvo=r(_9e," \u2014 "),Gq=n(_9e,"A",{href:!0});var wmt=s(Gq);svo=r(wmt,"BertModel"),wmt.forEach(t),lvo=r(_9e," (BERT model)"),_9e.forEach(t),ivo=i(x),Vp=n(x,"LI",{});var u9e=s(Vp);zde=n(u9e,"STRONG",{});var Amt=s(zde);dvo=r(Amt,"bert-generation"),Amt.forEach(t),cvo=r(u9e," \u2014 "),Oq=n(u9e,"A",{href:!0});var Lmt=s(Oq);fvo=r(Lmt,"BertGenerationEncoder"),Lmt.forEach(t),mvo=r(u9e," (Bert Generation model)"),u9e.forEach(t),gvo=i(x),Xp=n(x,"LI",{});var b9e=s(Xp);Qde=n(b9e,"STRONG",{});var ymt=s(Qde);hvo=r(ymt,"big_bird"),ymt.forEach(t),pvo=r(b9e," \u2014 "),Vq=n(b9e,"A",{href:!0});var xmt=s(Vq);_vo=r(xmt,"BigBirdModel"),xmt.forEach(t),uvo=r(b9e," (BigBird model)"),b9e.forEach(t),bvo=i(x),zp=n(x,"LI",{});var v9e=s(zp);Wde=n(v9e,"STRONG",{});var $mt=s(Wde);vvo=r($mt,"bigbird_pegasus"),$mt.forEach(t),Fvo=r(v9e," \u2014 "),Xq=n(v9e,"A",{href:!0});var kmt=s(Xq);Tvo=r(kmt,"BigBirdPegasusModel"),kmt.forEach(t),Mvo=r(v9e," (BigBird-Pegasus model)"),v9e.forEach(t),Evo=i(x),Qp=n(x,"LI",{});var F9e=s(Qp);Hde=n(F9e,"STRONG",{});var Smt=s(Hde);Cvo=r(Smt,"blenderbot"),Smt.forEach(t),wvo=r(F9e," \u2014 "),zq=n(F9e,"A",{href:!0});var Rmt=s(zq);Avo=r(Rmt,"BlenderbotModel"),Rmt.forEach(t),Lvo=r(F9e," (Blenderbot model)"),F9e.forEach(t),yvo=i(x),Wp=n(x,"LI",{});var T9e=s(Wp);Ude=n(T9e,"STRONG",{});var Pmt=s(Ude);xvo=r(Pmt,"blenderbot-small"),Pmt.forEach(t),$vo=r(T9e," \u2014 "),Qq=n(T9e,"A",{href:!0});var Bmt=s(Qq);kvo=r(Bmt,"BlenderbotSmallModel"),Bmt.forEach(t),Svo=r(T9e," (BlenderbotSmall model)"),T9e.forEach(t),Rvo=i(x),Hp=n(x,"LI",{});var M9e=s(Hp);Jde=n(M9e,"STRONG",{});var Imt=s(Jde);Pvo=r(Imt,"bloom"),Imt.forEach(t),Bvo=r(M9e," \u2014 "),Wq=n(M9e,"A",{href:!0});var Nmt=s(Wq);Ivo=r(Nmt,"BloomModel"),Nmt.forEach(t),Nvo=r(M9e," (BLOOM model)"),M9e.forEach(t),qvo=i(x),Up=n(x,"LI",{});var E9e=s(Up);Yde=n(E9e,"STRONG",{});var qmt=s(Yde);jvo=r(qmt,"camembert"),qmt.forEach(t),Dvo=r(E9e," \u2014 "),Hq=n(E9e,"A",{href:!0});var jmt=s(Hq);Gvo=r(jmt,"CamembertModel"),jmt.forEach(t),Ovo=r(E9e," (CamemBERT model)"),E9e.forEach(t),Vvo=i(x),Jp=n(x,"LI",{});var C9e=s(Jp);Kde=n(C9e,"STRONG",{});var Dmt=s(Kde);Xvo=r(Dmt,"canine"),Dmt.forEach(t),zvo=r(C9e," \u2014 "),Uq=n(C9e,"A",{href:!0});var Gmt=s(Uq);Qvo=r(Gmt,"CanineModel"),Gmt.forEach(t),Wvo=r(C9e," (CANINE model)"),C9e.forEach(t),Hvo=i(x),Yp=n(x,"LI",{});var w9e=s(Yp);Zde=n(w9e,"STRONG",{});var Omt=s(Zde);Uvo=r(Omt,"clip"),Omt.forEach(t),Jvo=r(w9e," \u2014 "),Jq=n(w9e,"A",{href:!0});var Vmt=s(Jq);Yvo=r(Vmt,"CLIPModel"),Vmt.forEach(t),Kvo=r(w9e," (CLIP model)"),w9e.forEach(t),Zvo=i(x),Kp=n(x,"LI",{});var A9e=s(Kp);ece=n(A9e,"STRONG",{});var Xmt=s(ece);e3o=r(Xmt,"codegen"),Xmt.forEach(t),o3o=r(A9e," \u2014 "),Yq=n(A9e,"A",{href:!0});var zmt=s(Yq);r3o=r(zmt,"CodeGenModel"),zmt.forEach(t),t3o=r(A9e," (CodeGen model)"),A9e.forEach(t),a3o=i(x),Zp=n(x,"LI",{});var L9e=s(Zp);oce=n(L9e,"STRONG",{});var Qmt=s(oce);n3o=r(Qmt,"convbert"),Qmt.forEach(t),s3o=r(L9e," \u2014 "),Kq=n(L9e,"A",{href:!0});var Wmt=s(Kq);l3o=r(Wmt,"ConvBertModel"),Wmt.forEach(t),i3o=r(L9e," (ConvBERT model)"),L9e.forEach(t),d3o=i(x),e_=n(x,"LI",{});var y9e=s(e_);rce=n(y9e,"STRONG",{});var Hmt=s(rce);c3o=r(Hmt,"convnext"),Hmt.forEach(t),f3o=r(y9e," \u2014 "),Zq=n(y9e,"A",{href:!0});var Umt=s(Zq);m3o=r(Umt,"ConvNextModel"),Umt.forEach(t),g3o=r(y9e," (ConvNeXT model)"),y9e.forEach(t),h3o=i(x),o_=n(x,"LI",{});var x9e=s(o_);tce=n(x9e,"STRONG",{});var Jmt=s(tce);p3o=r(Jmt,"ctrl"),Jmt.forEach(t),_3o=r(x9e," \u2014 "),ej=n(x9e,"A",{href:!0});var Ymt=s(ej);u3o=r(Ymt,"CTRLModel"),Ymt.forEach(t),b3o=r(x9e," (CTRL model)"),x9e.forEach(t),v3o=i(x),r_=n(x,"LI",{});var $9e=s(r_);ace=n($9e,"STRONG",{});var Kmt=s(ace);F3o=r(Kmt,"cvt"),Kmt.forEach(t),T3o=r($9e," \u2014 "),oj=n($9e,"A",{href:!0});var Zmt=s(oj);M3o=r(Zmt,"CvtModel"),Zmt.forEach(t),E3o=r($9e," (CvT model)"),$9e.forEach(t),C3o=i(x),t_=n(x,"LI",{});var k9e=s(t_);nce=n(k9e,"STRONG",{});var egt=s(nce);w3o=r(egt,"data2vec-audio"),egt.forEach(t),A3o=r(k9e," \u2014 "),rj=n(k9e,"A",{href:!0});var ogt=s(rj);L3o=r(ogt,"Data2VecAudioModel"),ogt.forEach(t),y3o=r(k9e," (Data2VecAudio model)"),k9e.forEach(t),x3o=i(x),a_=n(x,"LI",{});var S9e=s(a_);sce=n(S9e,"STRONG",{});var rgt=s(sce);$3o=r(rgt,"data2vec-text"),rgt.forEach(t),k3o=r(S9e," \u2014 "),tj=n(S9e,"A",{href:!0});var tgt=s(tj);S3o=r(tgt,"Data2VecTextModel"),tgt.forEach(t),R3o=r(S9e," (Data2VecText model)"),S9e.forEach(t),P3o=i(x),n_=n(x,"LI",{});var R9e=s(n_);lce=n(R9e,"STRONG",{});var agt=s(lce);B3o=r(agt,"data2vec-vision"),agt.forEach(t),I3o=r(R9e," \u2014 "),aj=n(R9e,"A",{href:!0});var ngt=s(aj);N3o=r(ngt,"Data2VecVisionModel"),ngt.forEach(t),q3o=r(R9e," (Data2VecVision model)"),R9e.forEach(t),j3o=i(x),s_=n(x,"LI",{});var P9e=s(s_);ice=n(P9e,"STRONG",{});var sgt=s(ice);D3o=r(sgt,"deberta"),sgt.forEach(t),G3o=r(P9e," \u2014 "),nj=n(P9e,"A",{href:!0});var lgt=s(nj);O3o=r(lgt,"DebertaModel"),lgt.forEach(t),V3o=r(P9e," (DeBERTa model)"),P9e.forEach(t),X3o=i(x),l_=n(x,"LI",{});var B9e=s(l_);dce=n(B9e,"STRONG",{});var igt=s(dce);z3o=r(igt,"deberta-v2"),igt.forEach(t),Q3o=r(B9e," \u2014 "),sj=n(B9e,"A",{href:!0});var dgt=s(sj);W3o=r(dgt,"DebertaV2Model"),dgt.forEach(t),H3o=r(B9e," (DeBERTa-v2 model)"),B9e.forEach(t),U3o=i(x),i_=n(x,"LI",{});var I9e=s(i_);cce=n(I9e,"STRONG",{});var cgt=s(cce);J3o=r(cgt,"decision_transformer"),cgt.forEach(t),Y3o=r(I9e," \u2014 "),lj=n(I9e,"A",{href:!0});var fgt=s(lj);K3o=r(fgt,"DecisionTransformerModel"),fgt.forEach(t),Z3o=r(I9e," (Decision Transformer model)"),I9e.forEach(t),eFo=i(x),d_=n(x,"LI",{});var N9e=s(d_);fce=n(N9e,"STRONG",{});var mgt=s(fce);oFo=r(mgt,"deit"),mgt.forEach(t),rFo=r(N9e," \u2014 "),ij=n(N9e,"A",{href:!0});var ggt=s(ij);tFo=r(ggt,"DeiTModel"),ggt.forEach(t),aFo=r(N9e," (DeiT model)"),N9e.forEach(t),nFo=i(x),c_=n(x,"LI",{});var q9e=s(c_);mce=n(q9e,"STRONG",{});var hgt=s(mce);sFo=r(hgt,"detr"),hgt.forEach(t),lFo=r(q9e," \u2014 "),dj=n(q9e,"A",{href:!0});var pgt=s(dj);iFo=r(pgt,"DetrModel"),pgt.forEach(t),dFo=r(q9e," (DETR model)"),q9e.forEach(t),cFo=i(x),f_=n(x,"LI",{});var j9e=s(f_);gce=n(j9e,"STRONG",{});var _gt=s(gce);fFo=r(_gt,"distilbert"),_gt.forEach(t),mFo=r(j9e," \u2014 "),cj=n(j9e,"A",{href:!0});var ugt=s(cj);gFo=r(ugt,"DistilBertModel"),ugt.forEach(t),hFo=r(j9e," (DistilBERT model)"),j9e.forEach(t),pFo=i(x),m_=n(x,"LI",{});var D9e=s(m_);hce=n(D9e,"STRONG",{});var bgt=s(hce);_Fo=r(bgt,"dpr"),bgt.forEach(t),uFo=r(D9e," \u2014 "),fj=n(D9e,"A",{href:!0});var vgt=s(fj);bFo=r(vgt,"DPRQuestionEncoder"),vgt.forEach(t),vFo=r(D9e," (DPR model)"),D9e.forEach(t),FFo=i(x),g_=n(x,"LI",{});var G9e=s(g_);pce=n(G9e,"STRONG",{});var Fgt=s(pce);TFo=r(Fgt,"dpt"),Fgt.forEach(t),MFo=r(G9e," \u2014 "),mj=n(G9e,"A",{href:!0});var Tgt=s(mj);EFo=r(Tgt,"DPTModel"),Tgt.forEach(t),CFo=r(G9e," (DPT model)"),G9e.forEach(t),wFo=i(x),h_=n(x,"LI",{});var O9e=s(h_);_ce=n(O9e,"STRONG",{});var Mgt=s(_ce);AFo=r(Mgt,"electra"),Mgt.forEach(t),LFo=r(O9e," \u2014 "),gj=n(O9e,"A",{href:!0});var Egt=s(gj);yFo=r(Egt,"ElectraModel"),Egt.forEach(t),xFo=r(O9e," (ELECTRA model)"),O9e.forEach(t),$Fo=i(x),p_=n(x,"LI",{});var V9e=s(p_);uce=n(V9e,"STRONG",{});var Cgt=s(uce);kFo=r(Cgt,"flaubert"),Cgt.forEach(t),SFo=r(V9e," \u2014 "),hj=n(V9e,"A",{href:!0});var wgt=s(hj);RFo=r(wgt,"FlaubertModel"),wgt.forEach(t),PFo=r(V9e," (FlauBERT model)"),V9e.forEach(t),BFo=i(x),__=n(x,"LI",{});var X9e=s(__);bce=n(X9e,"STRONG",{});var Agt=s(bce);IFo=r(Agt,"flava"),Agt.forEach(t),NFo=r(X9e," \u2014 "),pj=n(X9e,"A",{href:!0});var Lgt=s(pj);qFo=r(Lgt,"FlavaModel"),Lgt.forEach(t),jFo=r(X9e," (FLAVA model)"),X9e.forEach(t),DFo=i(x),u_=n(x,"LI",{});var z9e=s(u_);vce=n(z9e,"STRONG",{});var ygt=s(vce);GFo=r(ygt,"fnet"),ygt.forEach(t),OFo=r(z9e," \u2014 "),_j=n(z9e,"A",{href:!0});var xgt=s(_j);VFo=r(xgt,"FNetModel"),xgt.forEach(t),XFo=r(z9e," (FNet model)"),z9e.forEach(t),zFo=i(x),b_=n(x,"LI",{});var Q9e=s(b_);Fce=n(Q9e,"STRONG",{});var $gt=s(Fce);QFo=r($gt,"fsmt"),$gt.forEach(t),WFo=r(Q9e," \u2014 "),uj=n(Q9e,"A",{href:!0});var kgt=s(uj);HFo=r(kgt,"FSMTModel"),kgt.forEach(t),UFo=r(Q9e," (FairSeq Machine-Translation model)"),Q9e.forEach(t),JFo=i(x),Qs=n(x,"LI",{});var TS=s(Qs);Tce=n(TS,"STRONG",{});var Sgt=s(Tce);YFo=r(Sgt,"funnel"),Sgt.forEach(t),KFo=r(TS," \u2014 "),bj=n(TS,"A",{href:!0});var Rgt=s(bj);ZFo=r(Rgt,"FunnelModel"),Rgt.forEach(t),eTo=r(TS," or "),vj=n(TS,"A",{href:!0});var Pgt=s(vj);oTo=r(Pgt,"FunnelBaseModel"),Pgt.forEach(t),rTo=r(TS," (Funnel Transformer model)"),TS.forEach(t),tTo=i(x),v_=n(x,"LI",{});var W9e=s(v_);Mce=n(W9e,"STRONG",{});var Bgt=s(Mce);aTo=r(Bgt,"glpn"),Bgt.forEach(t),nTo=r(W9e," \u2014 "),Fj=n(W9e,"A",{href:!0});var Igt=s(Fj);sTo=r(Igt,"GLPNModel"),Igt.forEach(t),lTo=r(W9e," (GLPN model)"),W9e.forEach(t),iTo=i(x),F_=n(x,"LI",{});var H9e=s(F_);Ece=n(H9e,"STRONG",{});var Ngt=s(Ece);dTo=r(Ngt,"gpt2"),Ngt.forEach(t),cTo=r(H9e," \u2014 "),Tj=n(H9e,"A",{href:!0});var qgt=s(Tj);fTo=r(qgt,"GPT2Model"),qgt.forEach(t),mTo=r(H9e," (OpenAI GPT-2 model)"),H9e.forEach(t),gTo=i(x),T_=n(x,"LI",{});var U9e=s(T_);Cce=n(U9e,"STRONG",{});var jgt=s(Cce);hTo=r(jgt,"gpt_neo"),jgt.forEach(t),pTo=r(U9e," \u2014 "),Mj=n(U9e,"A",{href:!0});var Dgt=s(Mj);_To=r(Dgt,"GPTNeoModel"),Dgt.forEach(t),uTo=r(U9e," (GPT Neo model)"),U9e.forEach(t),bTo=i(x),M_=n(x,"LI",{});var J9e=s(M_);wce=n(J9e,"STRONG",{});var Ggt=s(wce);vTo=r(Ggt,"gpt_neox"),Ggt.forEach(t),FTo=r(J9e," \u2014 "),Ej=n(J9e,"A",{href:!0});var Ogt=s(Ej);TTo=r(Ogt,"GPTNeoXModel"),Ogt.forEach(t),MTo=r(J9e," (GPT NeoX model)"),J9e.forEach(t),ETo=i(x),E_=n(x,"LI",{});var Y9e=s(E_);Ace=n(Y9e,"STRONG",{});var Vgt=s(Ace);CTo=r(Vgt,"gptj"),Vgt.forEach(t),wTo=r(Y9e," \u2014 "),Cj=n(Y9e,"A",{href:!0});var Xgt=s(Cj);ATo=r(Xgt,"GPTJModel"),Xgt.forEach(t),LTo=r(Y9e," (GPT-J model)"),Y9e.forEach(t),yTo=i(x),C_=n(x,"LI",{});var K9e=s(C_);Lce=n(K9e,"STRONG",{});var zgt=s(Lce);xTo=r(zgt,"groupvit"),zgt.forEach(t),$To=r(K9e," \u2014 "),wj=n(K9e,"A",{href:!0});var Qgt=s(wj);kTo=r(Qgt,"GroupViTModel"),Qgt.forEach(t),STo=r(K9e," (GroupViT model)"),K9e.forEach(t),RTo=i(x),w_=n(x,"LI",{});var Z9e=s(w_);yce=n(Z9e,"STRONG",{});var Wgt=s(yce);PTo=r(Wgt,"hubert"),Wgt.forEach(t),BTo=r(Z9e," \u2014 "),Aj=n(Z9e,"A",{href:!0});var Hgt=s(Aj);ITo=r(Hgt,"HubertModel"),Hgt.forEach(t),NTo=r(Z9e," (Hubert model)"),Z9e.forEach(t),qTo=i(x),A_=n(x,"LI",{});var exe=s(A_);xce=n(exe,"STRONG",{});var Ugt=s(xce);jTo=r(Ugt,"ibert"),Ugt.forEach(t),DTo=r(exe," \u2014 "),Lj=n(exe,"A",{href:!0});var Jgt=s(Lj);GTo=r(Jgt,"IBertModel"),Jgt.forEach(t),OTo=r(exe," (I-BERT model)"),exe.forEach(t),VTo=i(x),L_=n(x,"LI",{});var oxe=s(L_);$ce=n(oxe,"STRONG",{});var Ygt=s($ce);XTo=r(Ygt,"imagegpt"),Ygt.forEach(t),zTo=r(oxe," \u2014 "),yj=n(oxe,"A",{href:!0});var Kgt=s(yj);QTo=r(Kgt,"ImageGPTModel"),Kgt.forEach(t),WTo=r(oxe," (ImageGPT model)"),oxe.forEach(t),HTo=i(x),y_=n(x,"LI",{});var rxe=s(y_);kce=n(rxe,"STRONG",{});var Zgt=s(kce);UTo=r(Zgt,"layoutlm"),Zgt.forEach(t),JTo=r(rxe," \u2014 "),xj=n(rxe,"A",{href:!0});var eht=s(xj);YTo=r(eht,"LayoutLMModel"),eht.forEach(t),KTo=r(rxe," (LayoutLM model)"),rxe.forEach(t),ZTo=i(x),x_=n(x,"LI",{});var txe=s(x_);Sce=n(txe,"STRONG",{});var oht=s(Sce);eMo=r(oht,"layoutlmv2"),oht.forEach(t),oMo=r(txe," \u2014 "),$j=n(txe,"A",{href:!0});var rht=s($j);rMo=r(rht,"LayoutLMv2Model"),rht.forEach(t),tMo=r(txe," (LayoutLMv2 model)"),txe.forEach(t),aMo=i(x),$_=n(x,"LI",{});var axe=s($_);Rce=n(axe,"STRONG",{});var tht=s(Rce);nMo=r(tht,"layoutlmv3"),tht.forEach(t),sMo=r(axe," \u2014 "),kj=n(axe,"A",{href:!0});var aht=s(kj);lMo=r(aht,"LayoutLMv3Model"),aht.forEach(t),iMo=r(axe," (LayoutLMv3 model)"),axe.forEach(t),dMo=i(x),k_=n(x,"LI",{});var nxe=s(k_);Pce=n(nxe,"STRONG",{});var nht=s(Pce);cMo=r(nht,"led"),nht.forEach(t),fMo=r(nxe," \u2014 "),Sj=n(nxe,"A",{href:!0});var sht=s(Sj);mMo=r(sht,"LEDModel"),sht.forEach(t),gMo=r(nxe," (LED model)"),nxe.forEach(t),hMo=i(x),S_=n(x,"LI",{});var sxe=s(S_);Bce=n(sxe,"STRONG",{});var lht=s(Bce);pMo=r(lht,"levit"),lht.forEach(t),_Mo=r(sxe," \u2014 "),Rj=n(sxe,"A",{href:!0});var iht=s(Rj);uMo=r(iht,"LevitModel"),iht.forEach(t),bMo=r(sxe," (LeViT model)"),sxe.forEach(t),vMo=i(x),R_=n(x,"LI",{});var lxe=s(R_);Ice=n(lxe,"STRONG",{});var dht=s(Ice);FMo=r(dht,"longformer"),dht.forEach(t),TMo=r(lxe," \u2014 "),Pj=n(lxe,"A",{href:!0});var cht=s(Pj);MMo=r(cht,"LongformerModel"),cht.forEach(t),EMo=r(lxe," (Longformer model)"),lxe.forEach(t),CMo=i(x),P_=n(x,"LI",{});var ixe=s(P_);Nce=n(ixe,"STRONG",{});var fht=s(Nce);wMo=r(fht,"longt5"),fht.forEach(t),AMo=r(ixe," \u2014 "),Bj=n(ixe,"A",{href:!0});var mht=s(Bj);LMo=r(mht,"LongT5Model"),mht.forEach(t),yMo=r(ixe," (LongT5 model)"),ixe.forEach(t),xMo=i(x),B_=n(x,"LI",{});var dxe=s(B_);qce=n(dxe,"STRONG",{});var ght=s(qce);$Mo=r(ght,"luke"),ght.forEach(t),kMo=r(dxe," \u2014 "),Ij=n(dxe,"A",{href:!0});var hht=s(Ij);SMo=r(hht,"LukeModel"),hht.forEach(t),RMo=r(dxe," (LUKE model)"),dxe.forEach(t),PMo=i(x),I_=n(x,"LI",{});var cxe=s(I_);jce=n(cxe,"STRONG",{});var pht=s(jce);BMo=r(pht,"lxmert"),pht.forEach(t),IMo=r(cxe," \u2014 "),Nj=n(cxe,"A",{href:!0});var _ht=s(Nj);NMo=r(_ht,"LxmertModel"),_ht.forEach(t),qMo=r(cxe," (LXMERT model)"),cxe.forEach(t),jMo=i(x),N_=n(x,"LI",{});var fxe=s(N_);Dce=n(fxe,"STRONG",{});var uht=s(Dce);DMo=r(uht,"m2m_100"),uht.forEach(t),GMo=r(fxe," \u2014 "),qj=n(fxe,"A",{href:!0});var bht=s(qj);OMo=r(bht,"M2M100Model"),bht.forEach(t),VMo=r(fxe," (M2M100 model)"),fxe.forEach(t),XMo=i(x),q_=n(x,"LI",{});var mxe=s(q_);Gce=n(mxe,"STRONG",{});var vht=s(Gce);zMo=r(vht,"marian"),vht.forEach(t),QMo=r(mxe," \u2014 "),jj=n(mxe,"A",{href:!0});var Fht=s(jj);WMo=r(Fht,"MarianModel"),Fht.forEach(t),HMo=r(mxe," (Marian model)"),mxe.forEach(t),UMo=i(x),j_=n(x,"LI",{});var gxe=s(j_);Oce=n(gxe,"STRONG",{});var Tht=s(Oce);JMo=r(Tht,"maskformer"),Tht.forEach(t),YMo=r(gxe," \u2014 "),Dj=n(gxe,"A",{href:!0});var Mht=s(Dj);KMo=r(Mht,"MaskFormerModel"),Mht.forEach(t),ZMo=r(gxe," (MaskFormer model)"),gxe.forEach(t),eEo=i(x),D_=n(x,"LI",{});var hxe=s(D_);Vce=n(hxe,"STRONG",{});var Eht=s(Vce);oEo=r(Eht,"mbart"),Eht.forEach(t),rEo=r(hxe," \u2014 "),Gj=n(hxe,"A",{href:!0});var Cht=s(Gj);tEo=r(Cht,"MBartModel"),Cht.forEach(t),aEo=r(hxe," (mBART model)"),hxe.forEach(t),nEo=i(x),G_=n(x,"LI",{});var pxe=s(G_);Xce=n(pxe,"STRONG",{});var wht=s(Xce);sEo=r(wht,"mctct"),wht.forEach(t),lEo=r(pxe," \u2014 "),Oj=n(pxe,"A",{href:!0});var Aht=s(Oj);iEo=r(Aht,"MCTCTModel"),Aht.forEach(t),dEo=r(pxe," (M-CTC-T model)"),pxe.forEach(t),cEo=i(x),O_=n(x,"LI",{});var _xe=s(O_);zce=n(_xe,"STRONG",{});var Lht=s(zce);fEo=r(Lht,"megatron-bert"),Lht.forEach(t),mEo=r(_xe," \u2014 "),Vj=n(_xe,"A",{href:!0});var yht=s(Vj);gEo=r(yht,"MegatronBertModel"),yht.forEach(t),hEo=r(_xe," (Megatron-BERT model)"),_xe.forEach(t),pEo=i(x),V_=n(x,"LI",{});var uxe=s(V_);Qce=n(uxe,"STRONG",{});var xht=s(Qce);_Eo=r(xht,"mobilebert"),xht.forEach(t),uEo=r(uxe," \u2014 "),Xj=n(uxe,"A",{href:!0});var $ht=s(Xj);bEo=r($ht,"MobileBertModel"),$ht.forEach(t),vEo=r(uxe," (MobileBERT model)"),uxe.forEach(t),FEo=i(x),X_=n(x,"LI",{});var bxe=s(X_);Wce=n(bxe,"STRONG",{});var kht=s(Wce);TEo=r(kht,"mpnet"),kht.forEach(t),MEo=r(bxe," \u2014 "),zj=n(bxe,"A",{href:!0});var Sht=s(zj);EEo=r(Sht,"MPNetModel"),Sht.forEach(t),CEo=r(bxe," (MPNet model)"),bxe.forEach(t),wEo=i(x),z_=n(x,"LI",{});var vxe=s(z_);Hce=n(vxe,"STRONG",{});var Rht=s(Hce);AEo=r(Rht,"mt5"),Rht.forEach(t),LEo=r(vxe," \u2014 "),Qj=n(vxe,"A",{href:!0});var Pht=s(Qj);yEo=r(Pht,"MT5Model"),Pht.forEach(t),xEo=r(vxe," (MT5 model)"),vxe.forEach(t),$Eo=i(x),Q_=n(x,"LI",{});var Fxe=s(Q_);Uce=n(Fxe,"STRONG",{});var Bht=s(Uce);kEo=r(Bht,"mvp"),Bht.forEach(t),SEo=r(Fxe," \u2014 "),Wj=n(Fxe,"A",{href:!0});var Iht=s(Wj);REo=r(Iht,"MvpModel"),Iht.forEach(t),PEo=r(Fxe," (MVP model)"),Fxe.forEach(t),BEo=i(x),W_=n(x,"LI",{});var Txe=s(W_);Jce=n(Txe,"STRONG",{});var Nht=s(Jce);IEo=r(Nht,"nezha"),Nht.forEach(t),NEo=r(Txe," \u2014 "),Hj=n(Txe,"A",{href:!0});var qht=s(Hj);qEo=r(qht,"NezhaModel"),qht.forEach(t),jEo=r(Txe," (Nezha model)"),Txe.forEach(t),DEo=i(x),H_=n(x,"LI",{});var Mxe=s(H_);Yce=n(Mxe,"STRONG",{});var jht=s(Yce);GEo=r(jht,"nystromformer"),jht.forEach(t),OEo=r(Mxe," \u2014 "),Uj=n(Mxe,"A",{href:!0});var Dht=s(Uj);VEo=r(Dht,"NystromformerModel"),Dht.forEach(t),XEo=r(Mxe," (Nystr\xF6mformer model)"),Mxe.forEach(t),zEo=i(x),U_=n(x,"LI",{});var Exe=s(U_);Kce=n(Exe,"STRONG",{});var Ght=s(Kce);QEo=r(Ght,"openai-gpt"),Ght.forEach(t),WEo=r(Exe," \u2014 "),Jj=n(Exe,"A",{href:!0});var Oht=s(Jj);HEo=r(Oht,"OpenAIGPTModel"),Oht.forEach(t),UEo=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),JEo=i(x),J_=n(x,"LI",{});var Cxe=s(J_);Zce=n(Cxe,"STRONG",{});var Vht=s(Zce);YEo=r(Vht,"opt"),Vht.forEach(t),KEo=r(Cxe," \u2014 "),Yj=n(Cxe,"A",{href:!0});var Xht=s(Yj);ZEo=r(Xht,"OPTModel"),Xht.forEach(t),eCo=r(Cxe," (OPT model)"),Cxe.forEach(t),oCo=i(x),Y_=n(x,"LI",{});var wxe=s(Y_);efe=n(wxe,"STRONG",{});var zht=s(efe);rCo=r(zht,"pegasus"),zht.forEach(t),tCo=r(wxe," \u2014 "),Kj=n(wxe,"A",{href:!0});var Qht=s(Kj);aCo=r(Qht,"PegasusModel"),Qht.forEach(t),nCo=r(wxe," (Pegasus model)"),wxe.forEach(t),sCo=i(x),K_=n(x,"LI",{});var Axe=s(K_);ofe=n(Axe,"STRONG",{});var Wht=s(ofe);lCo=r(Wht,"perceiver"),Wht.forEach(t),iCo=r(Axe," \u2014 "),Zj=n(Axe,"A",{href:!0});var Hht=s(Zj);dCo=r(Hht,"PerceiverModel"),Hht.forEach(t),cCo=r(Axe," (Perceiver model)"),Axe.forEach(t),fCo=i(x),Z_=n(x,"LI",{});var Lxe=s(Z_);rfe=n(Lxe,"STRONG",{});var Uht=s(rfe);mCo=r(Uht,"plbart"),Uht.forEach(t),gCo=r(Lxe," \u2014 "),eD=n(Lxe,"A",{href:!0});var Jht=s(eD);hCo=r(Jht,"PLBartModel"),Jht.forEach(t),pCo=r(Lxe," (PLBart model)"),Lxe.forEach(t),_Co=i(x),eu=n(x,"LI",{});var yxe=s(eu);tfe=n(yxe,"STRONG",{});var Yht=s(tfe);uCo=r(Yht,"poolformer"),Yht.forEach(t),bCo=r(yxe," \u2014 "),oD=n(yxe,"A",{href:!0});var Kht=s(oD);vCo=r(Kht,"PoolFormerModel"),Kht.forEach(t),FCo=r(yxe," (PoolFormer model)"),yxe.forEach(t),TCo=i(x),ou=n(x,"LI",{});var xxe=s(ou);afe=n(xxe,"STRONG",{});var Zht=s(afe);MCo=r(Zht,"prophetnet"),Zht.forEach(t),ECo=r(xxe," \u2014 "),rD=n(xxe,"A",{href:!0});var ept=s(rD);CCo=r(ept,"ProphetNetModel"),ept.forEach(t),wCo=r(xxe," (ProphetNet model)"),xxe.forEach(t),ACo=i(x),ru=n(x,"LI",{});var $xe=s(ru);nfe=n($xe,"STRONG",{});var opt=s(nfe);LCo=r(opt,"qdqbert"),opt.forEach(t),yCo=r($xe," \u2014 "),tD=n($xe,"A",{href:!0});var rpt=s(tD);xCo=r(rpt,"QDQBertModel"),rpt.forEach(t),$Co=r($xe," (QDQBert model)"),$xe.forEach(t),kCo=i(x),tu=n(x,"LI",{});var kxe=s(tu);sfe=n(kxe,"STRONG",{});var tpt=s(sfe);SCo=r(tpt,"reformer"),tpt.forEach(t),RCo=r(kxe," \u2014 "),aD=n(kxe,"A",{href:!0});var apt=s(aD);PCo=r(apt,"ReformerModel"),apt.forEach(t),BCo=r(kxe," (Reformer model)"),kxe.forEach(t),ICo=i(x),au=n(x,"LI",{});var Sxe=s(au);lfe=n(Sxe,"STRONG",{});var npt=s(lfe);NCo=r(npt,"regnet"),npt.forEach(t),qCo=r(Sxe," \u2014 "),nD=n(Sxe,"A",{href:!0});var spt=s(nD);jCo=r(spt,"RegNetModel"),spt.forEach(t),DCo=r(Sxe," (RegNet model)"),Sxe.forEach(t),GCo=i(x),nu=n(x,"LI",{});var Rxe=s(nu);ife=n(Rxe,"STRONG",{});var lpt=s(ife);OCo=r(lpt,"rembert"),lpt.forEach(t),VCo=r(Rxe," \u2014 "),sD=n(Rxe,"A",{href:!0});var ipt=s(sD);XCo=r(ipt,"RemBertModel"),ipt.forEach(t),zCo=r(Rxe," (RemBERT model)"),Rxe.forEach(t),QCo=i(x),su=n(x,"LI",{});var Pxe=s(su);dfe=n(Pxe,"STRONG",{});var dpt=s(dfe);WCo=r(dpt,"resnet"),dpt.forEach(t),HCo=r(Pxe," \u2014 "),lD=n(Pxe,"A",{href:!0});var cpt=s(lD);UCo=r(cpt,"ResNetModel"),cpt.forEach(t),JCo=r(Pxe," (ResNet model)"),Pxe.forEach(t),YCo=i(x),lu=n(x,"LI",{});var Bxe=s(lu);cfe=n(Bxe,"STRONG",{});var fpt=s(cfe);KCo=r(fpt,"retribert"),fpt.forEach(t),ZCo=r(Bxe," \u2014 "),iD=n(Bxe,"A",{href:!0});var mpt=s(iD);e5o=r(mpt,"RetriBertModel"),mpt.forEach(t),o5o=r(Bxe," (RetriBERT model)"),Bxe.forEach(t),r5o=i(x),iu=n(x,"LI",{});var Ixe=s(iu);ffe=n(Ixe,"STRONG",{});var gpt=s(ffe);t5o=r(gpt,"roberta"),gpt.forEach(t),a5o=r(Ixe," \u2014 "),dD=n(Ixe,"A",{href:!0});var hpt=s(dD);n5o=r(hpt,"RobertaModel"),hpt.forEach(t),s5o=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),l5o=i(x),du=n(x,"LI",{});var Nxe=s(du);mfe=n(Nxe,"STRONG",{});var ppt=s(mfe);i5o=r(ppt,"roformer"),ppt.forEach(t),d5o=r(Nxe," \u2014 "),cD=n(Nxe,"A",{href:!0});var _pt=s(cD);c5o=r(_pt,"RoFormerModel"),_pt.forEach(t),f5o=r(Nxe," (RoFormer model)"),Nxe.forEach(t),m5o=i(x),cu=n(x,"LI",{});var qxe=s(cu);gfe=n(qxe,"STRONG",{});var upt=s(gfe);g5o=r(upt,"segformer"),upt.forEach(t),h5o=r(qxe," \u2014 "),fD=n(qxe,"A",{href:!0});var bpt=s(fD);p5o=r(bpt,"SegformerModel"),bpt.forEach(t),_5o=r(qxe," (SegFormer model)"),qxe.forEach(t),u5o=i(x),fu=n(x,"LI",{});var jxe=s(fu);hfe=n(jxe,"STRONG",{});var vpt=s(hfe);b5o=r(vpt,"sew"),vpt.forEach(t),v5o=r(jxe," \u2014 "),mD=n(jxe,"A",{href:!0});var Fpt=s(mD);F5o=r(Fpt,"SEWModel"),Fpt.forEach(t),T5o=r(jxe," (SEW model)"),jxe.forEach(t),M5o=i(x),mu=n(x,"LI",{});var Dxe=s(mu);pfe=n(Dxe,"STRONG",{});var Tpt=s(pfe);E5o=r(Tpt,"sew-d"),Tpt.forEach(t),C5o=r(Dxe," \u2014 "),gD=n(Dxe,"A",{href:!0});var Mpt=s(gD);w5o=r(Mpt,"SEWDModel"),Mpt.forEach(t),A5o=r(Dxe," (SEW-D model)"),Dxe.forEach(t),L5o=i(x),gu=n(x,"LI",{});var Gxe=s(gu);_fe=n(Gxe,"STRONG",{});var Ept=s(_fe);y5o=r(Ept,"speech_to_text"),Ept.forEach(t),x5o=r(Gxe," \u2014 "),hD=n(Gxe,"A",{href:!0});var Cpt=s(hD);$5o=r(Cpt,"Speech2TextModel"),Cpt.forEach(t),k5o=r(Gxe," (Speech2Text model)"),Gxe.forEach(t),S5o=i(x),hu=n(x,"LI",{});var Oxe=s(hu);ufe=n(Oxe,"STRONG",{});var wpt=s(ufe);R5o=r(wpt,"splinter"),wpt.forEach(t),P5o=r(Oxe," \u2014 "),pD=n(Oxe,"A",{href:!0});var Apt=s(pD);B5o=r(Apt,"SplinterModel"),Apt.forEach(t),I5o=r(Oxe," (Splinter model)"),Oxe.forEach(t),N5o=i(x),pu=n(x,"LI",{});var Vxe=s(pu);bfe=n(Vxe,"STRONG",{});var Lpt=s(bfe);q5o=r(Lpt,"squeezebert"),Lpt.forEach(t),j5o=r(Vxe," \u2014 "),_D=n(Vxe,"A",{href:!0});var ypt=s(_D);D5o=r(ypt,"SqueezeBertModel"),ypt.forEach(t),G5o=r(Vxe," (SqueezeBERT model)"),Vxe.forEach(t),O5o=i(x),_u=n(x,"LI",{});var Xxe=s(_u);vfe=n(Xxe,"STRONG",{});var xpt=s(vfe);V5o=r(xpt,"swin"),xpt.forEach(t),X5o=r(Xxe," \u2014 "),uD=n(Xxe,"A",{href:!0});var $pt=s(uD);z5o=r($pt,"SwinModel"),$pt.forEach(t),Q5o=r(Xxe," (Swin Transformer model)"),Xxe.forEach(t),W5o=i(x),uu=n(x,"LI",{});var zxe=s(uu);Ffe=n(zxe,"STRONG",{});var kpt=s(Ffe);H5o=r(kpt,"t5"),kpt.forEach(t),U5o=r(zxe," \u2014 "),bD=n(zxe,"A",{href:!0});var Spt=s(bD);J5o=r(Spt,"T5Model"),Spt.forEach(t),Y5o=r(zxe," (T5 model)"),zxe.forEach(t),K5o=i(x),bu=n(x,"LI",{});var Qxe=s(bu);Tfe=n(Qxe,"STRONG",{});var Rpt=s(Tfe);Z5o=r(Rpt,"tapas"),Rpt.forEach(t),e0o=r(Qxe," \u2014 "),vD=n(Qxe,"A",{href:!0});var Ppt=s(vD);o0o=r(Ppt,"TapasModel"),Ppt.forEach(t),r0o=r(Qxe," (TAPAS model)"),Qxe.forEach(t),t0o=i(x),vu=n(x,"LI",{});var Wxe=s(vu);Mfe=n(Wxe,"STRONG",{});var Bpt=s(Mfe);a0o=r(Bpt,"trajectory_transformer"),Bpt.forEach(t),n0o=r(Wxe," \u2014 "),FD=n(Wxe,"A",{href:!0});var Ipt=s(FD);s0o=r(Ipt,"TrajectoryTransformerModel"),Ipt.forEach(t),l0o=r(Wxe," (Trajectory Transformer model)"),Wxe.forEach(t),i0o=i(x),Fu=n(x,"LI",{});var Hxe=s(Fu);Efe=n(Hxe,"STRONG",{});var Npt=s(Efe);d0o=r(Npt,"transfo-xl"),Npt.forEach(t),c0o=r(Hxe," \u2014 "),TD=n(Hxe,"A",{href:!0});var qpt=s(TD);f0o=r(qpt,"TransfoXLModel"),qpt.forEach(t),m0o=r(Hxe," (Transformer-XL model)"),Hxe.forEach(t),g0o=i(x),Tu=n(x,"LI",{});var Uxe=s(Tu);Cfe=n(Uxe,"STRONG",{});var jpt=s(Cfe);h0o=r(jpt,"unispeech"),jpt.forEach(t),p0o=r(Uxe," \u2014 "),MD=n(Uxe,"A",{href:!0});var Dpt=s(MD);_0o=r(Dpt,"UniSpeechModel"),Dpt.forEach(t),u0o=r(Uxe," (UniSpeech model)"),Uxe.forEach(t),b0o=i(x),Mu=n(x,"LI",{});var Jxe=s(Mu);wfe=n(Jxe,"STRONG",{});var Gpt=s(wfe);v0o=r(Gpt,"unispeech-sat"),Gpt.forEach(t),F0o=r(Jxe," \u2014 "),ED=n(Jxe,"A",{href:!0});var Opt=s(ED);T0o=r(Opt,"UniSpeechSatModel"),Opt.forEach(t),M0o=r(Jxe," (UniSpeechSat model)"),Jxe.forEach(t),E0o=i(x),Eu=n(x,"LI",{});var Yxe=s(Eu);Afe=n(Yxe,"STRONG",{});var Vpt=s(Afe);C0o=r(Vpt,"van"),Vpt.forEach(t),w0o=r(Yxe," \u2014 "),CD=n(Yxe,"A",{href:!0});var Xpt=s(CD);A0o=r(Xpt,"VanModel"),Xpt.forEach(t),L0o=r(Yxe," (VAN model)"),Yxe.forEach(t),y0o=i(x),Cu=n(x,"LI",{});var Kxe=s(Cu);Lfe=n(Kxe,"STRONG",{});var zpt=s(Lfe);x0o=r(zpt,"vilt"),zpt.forEach(t),$0o=r(Kxe," \u2014 "),wD=n(Kxe,"A",{href:!0});var Qpt=s(wD);k0o=r(Qpt,"ViltModel"),Qpt.forEach(t),S0o=r(Kxe," (ViLT model)"),Kxe.forEach(t),R0o=i(x),wu=n(x,"LI",{});var Zxe=s(wu);yfe=n(Zxe,"STRONG",{});var Wpt=s(yfe);P0o=r(Wpt,"vision-text-dual-encoder"),Wpt.forEach(t),B0o=r(Zxe," \u2014 "),AD=n(Zxe,"A",{href:!0});var Hpt=s(AD);I0o=r(Hpt,"VisionTextDualEncoderModel"),Hpt.forEach(t),N0o=r(Zxe," (VisionTextDualEncoder model)"),Zxe.forEach(t),q0o=i(x),Au=n(x,"LI",{});var e$e=s(Au);xfe=n(e$e,"STRONG",{});var Upt=s(xfe);j0o=r(Upt,"visual_bert"),Upt.forEach(t),D0o=r(e$e," \u2014 "),LD=n(e$e,"A",{href:!0});var Jpt=s(LD);G0o=r(Jpt,"VisualBertModel"),Jpt.forEach(t),O0o=r(e$e," (VisualBERT model)"),e$e.forEach(t),V0o=i(x),Lu=n(x,"LI",{});var o$e=s(Lu);$fe=n(o$e,"STRONG",{});var Ypt=s($fe);X0o=r(Ypt,"vit"),Ypt.forEach(t),z0o=r(o$e," \u2014 "),yD=n(o$e,"A",{href:!0});var Kpt=s(yD);Q0o=r(Kpt,"ViTModel"),Kpt.forEach(t),W0o=r(o$e," (ViT model)"),o$e.forEach(t),H0o=i(x),yu=n(x,"LI",{});var r$e=s(yu);kfe=n(r$e,"STRONG",{});var Zpt=s(kfe);U0o=r(Zpt,"vit_mae"),Zpt.forEach(t),J0o=r(r$e," \u2014 "),xD=n(r$e,"A",{href:!0});var e_t=s(xD);Y0o=r(e_t,"ViTMAEModel"),e_t.forEach(t),K0o=r(r$e," (ViTMAE model)"),r$e.forEach(t),Z0o=i(x),xu=n(x,"LI",{});var t$e=s(xu);Sfe=n(t$e,"STRONG",{});var o_t=s(Sfe);ewo=r(o_t,"wav2vec2"),o_t.forEach(t),owo=r(t$e," \u2014 "),$D=n(t$e,"A",{href:!0});var r_t=s($D);rwo=r(r_t,"Wav2Vec2Model"),r_t.forEach(t),two=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),awo=i(x),$u=n(x,"LI",{});var a$e=s($u);Rfe=n(a$e,"STRONG",{});var t_t=s(Rfe);nwo=r(t_t,"wav2vec2-conformer"),t_t.forEach(t),swo=r(a$e," \u2014 "),kD=n(a$e,"A",{href:!0});var a_t=s(kD);lwo=r(a_t,"Wav2Vec2ConformerModel"),a_t.forEach(t),iwo=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),dwo=i(x),ku=n(x,"LI",{});var n$e=s(ku);Pfe=n(n$e,"STRONG",{});var n_t=s(Pfe);cwo=r(n_t,"wavlm"),n_t.forEach(t),fwo=r(n$e," \u2014 "),SD=n(n$e,"A",{href:!0});var s_t=s(SD);mwo=r(s_t,"WavLMModel"),s_t.forEach(t),gwo=r(n$e," (WavLM model)"),n$e.forEach(t),hwo=i(x),Su=n(x,"LI",{});var s$e=s(Su);Bfe=n(s$e,"STRONG",{});var l_t=s(Bfe);pwo=r(l_t,"xglm"),l_t.forEach(t),_wo=r(s$e," \u2014 "),RD=n(s$e,"A",{href:!0});var i_t=s(RD);uwo=r(i_t,"XGLMModel"),i_t.forEach(t),bwo=r(s$e," (XGLM model)"),s$e.forEach(t),vwo=i(x),Ru=n(x,"LI",{});var l$e=s(Ru);Ife=n(l$e,"STRONG",{});var d_t=s(Ife);Fwo=r(d_t,"xlm"),d_t.forEach(t),Two=r(l$e," \u2014 "),PD=n(l$e,"A",{href:!0});var c_t=s(PD);Mwo=r(c_t,"XLMModel"),c_t.forEach(t),Ewo=r(l$e," (XLM model)"),l$e.forEach(t),Cwo=i(x),Pu=n(x,"LI",{});var i$e=s(Pu);Nfe=n(i$e,"STRONG",{});var f_t=s(Nfe);wwo=r(f_t,"xlm-prophetnet"),f_t.forEach(t),Awo=r(i$e," \u2014 "),BD=n(i$e,"A",{href:!0});var m_t=s(BD);Lwo=r(m_t,"XLMProphetNetModel"),m_t.forEach(t),ywo=r(i$e," (XLM-ProphetNet model)"),i$e.forEach(t),xwo=i(x),Bu=n(x,"LI",{});var d$e=s(Bu);qfe=n(d$e,"STRONG",{});var g_t=s(qfe);$wo=r(g_t,"xlm-roberta"),g_t.forEach(t),kwo=r(d$e," \u2014 "),ID=n(d$e,"A",{href:!0});var h_t=s(ID);Swo=r(h_t,"XLMRobertaModel"),h_t.forEach(t),Rwo=r(d$e," (XLM-RoBERTa model)"),d$e.forEach(t),Pwo=i(x),Iu=n(x,"LI",{});var c$e=s(Iu);jfe=n(c$e,"STRONG",{});var p_t=s(jfe);Bwo=r(p_t,"xlm-roberta-xl"),p_t.forEach(t),Iwo=r(c$e," \u2014 "),ND=n(c$e,"A",{href:!0});var __t=s(ND);Nwo=r(__t,"XLMRobertaXLModel"),__t.forEach(t),qwo=r(c$e," (XLM-RoBERTa-XL model)"),c$e.forEach(t),jwo=i(x),Nu=n(x,"LI",{});var f$e=s(Nu);Dfe=n(f$e,"STRONG",{});var u_t=s(Dfe);Dwo=r(u_t,"xlnet"),u_t.forEach(t),Gwo=r(f$e," \u2014 "),qD=n(f$e,"A",{href:!0});var b_t=s(qD);Owo=r(b_t,"XLNetModel"),b_t.forEach(t),Vwo=r(f$e," (XLNet model)"),f$e.forEach(t),Xwo=i(x),qu=n(x,"LI",{});var m$e=s(qu);Gfe=n(m$e,"STRONG",{});var v_t=s(Gfe);zwo=r(v_t,"yolos"),v_t.forEach(t),Qwo=r(m$e," \u2014 "),jD=n(m$e,"A",{href:!0});var F_t=s(jD);Wwo=r(F_t,"YolosModel"),F_t.forEach(t),Hwo=r(m$e," (YOLOS model)"),m$e.forEach(t),Uwo=i(x),ju=n(x,"LI",{});var g$e=s(ju);Ofe=n(g$e,"STRONG",{});var T_t=s(Ofe);Jwo=r(T_t,"yoso"),T_t.forEach(t),Ywo=r(g$e," \u2014 "),DD=n(g$e,"A",{href:!0});var M_t=s(DD);Kwo=r(M_t,"YosoModel"),M_t.forEach(t),Zwo=r(g$e," (YOSO model)"),g$e.forEach(t),x.forEach(t),eAo=i(na),Du=n(na,"P",{});var h$e=s(Du);oAo=r(h$e,"The model is set in evaluation mode by default using "),Vfe=n(h$e,"CODE",{});var E_t=s(Vfe);rAo=r(E_t,"model.eval()"),E_t.forEach(t),tAo=r(h$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(h$e,"CODE",{});var C_t=s(Xfe);aAo=r(C_t,"model.train()"),C_t.forEach(t),h$e.forEach(t),nAo=i(na),T(Gu.$$.fragment,na),na.forEach(t),el.forEach(t),xVe=i(f),Oi=n(f,"H2",{class:!0});var Bze=s(Oi);Ou=n(Bze,"A",{id:!0,class:!0,href:!0});var w_t=s(Ou);zfe=n(w_t,"SPAN",{});var A_t=s(zfe);T(Ay.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),sAo=i(Bze),Qfe=n(Bze,"SPAN",{});var L_t=s(Qfe);lAo=r(L_t,"AutoModelForPreTraining"),L_t.forEach(t),Bze.forEach(t),$Ve=i(f),$o=n(f,"DIV",{class:!0});var ol=s($o);T(Ly.$$.fragment,ol),iAo=i(ol),Vi=n(ol,"P",{});var gre=s(Vi);dAo=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GD=n(gre,"A",{href:!0});var y_t=s(GD);cAo=r(y_t,"from_pretrained()"),y_t.forEach(t),fAo=r(gre," class method or the "),OD=n(gre,"A",{href:!0});var x_t=s(OD);mAo=r(x_t,"from_config()"),x_t.forEach(t),gAo=r(gre,` class
method.`),gre.forEach(t),hAo=i(ol),yy=n(ol,"P",{});var Ize=s(yy);pAo=r(Ize,"This class cannot be instantiated directly using "),Wfe=n(Ize,"CODE",{});var $_t=s(Wfe);_Ao=r($_t,"__init__()"),$_t.forEach(t),uAo=r(Ize," (throws an error)."),Ize.forEach(t),bAo=i(ol),lt=n(ol,"DIV",{class:!0});var e6=s(lt);T(xy.$$.fragment,e6),vAo=i(e6),Hfe=n(e6,"P",{});var k_t=s(Hfe);FAo=r(k_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k_t.forEach(t),TAo=i(e6),Xi=n(e6,"P",{});var hre=s(Xi);MAo=r(hre,`Note:
Loading a model from its configuration file does `),Ufe=n(hre,"STRONG",{});var S_t=s(Ufe);EAo=r(S_t,"not"),S_t.forEach(t),CAo=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(hre,"A",{href:!0});var R_t=s(VD);wAo=r(R_t,"from_pretrained()"),R_t.forEach(t),AAo=r(hre," to load the model weights."),hre.forEach(t),LAo=i(e6),T(Vu.$$.fragment,e6),e6.forEach(t),yAo=i(ol),Ye=n(ol,"DIV",{class:!0});var sa=s(Ye);T($y.$$.fragment,sa),xAo=i(sa),Jfe=n(sa,"P",{});var P_t=s(Jfe);$Ao=r(P_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P_t.forEach(t),kAo=i(sa),Ba=n(sa,"P",{});var o6=s(Ba);SAo=r(o6,"The model class to instantiate is selected based on the "),Yfe=n(o6,"CODE",{});var B_t=s(Yfe);RAo=r(B_t,"model_type"),B_t.forEach(t),PAo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(o6,"CODE",{});var I_t=s(Kfe);BAo=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),IAo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(o6,"CODE",{});var N_t=s(Zfe);NAo=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),qAo=r(o6,":"),o6.forEach(t),jAo=i(sa),G=n(sa,"UL",{});var O=s(G);Xu=n(O,"LI",{});var p$e=s(Xu);eme=n(p$e,"STRONG",{});var q_t=s(eme);DAo=r(q_t,"albert"),q_t.forEach(t),GAo=r(p$e," \u2014 "),XD=n(p$e,"A",{href:!0});var j_t=s(XD);OAo=r(j_t,"AlbertForPreTraining"),j_t.forEach(t),VAo=r(p$e," (ALBERT model)"),p$e.forEach(t),XAo=i(O),zu=n(O,"LI",{});var _$e=s(zu);ome=n(_$e,"STRONG",{});var D_t=s(ome);zAo=r(D_t,"bart"),D_t.forEach(t),QAo=r(_$e," \u2014 "),zD=n(_$e,"A",{href:!0});var G_t=s(zD);WAo=r(G_t,"BartForConditionalGeneration"),G_t.forEach(t),HAo=r(_$e," (BART model)"),_$e.forEach(t),UAo=i(O),Qu=n(O,"LI",{});var u$e=s(Qu);rme=n(u$e,"STRONG",{});var O_t=s(rme);JAo=r(O_t,"bert"),O_t.forEach(t),YAo=r(u$e," \u2014 "),QD=n(u$e,"A",{href:!0});var V_t=s(QD);KAo=r(V_t,"BertForPreTraining"),V_t.forEach(t),ZAo=r(u$e," (BERT model)"),u$e.forEach(t),e6o=i(O),Wu=n(O,"LI",{});var b$e=s(Wu);tme=n(b$e,"STRONG",{});var X_t=s(tme);o6o=r(X_t,"big_bird"),X_t.forEach(t),r6o=r(b$e," \u2014 "),WD=n(b$e,"A",{href:!0});var z_t=s(WD);t6o=r(z_t,"BigBirdForPreTraining"),z_t.forEach(t),a6o=r(b$e," (BigBird model)"),b$e.forEach(t),n6o=i(O),Hu=n(O,"LI",{});var v$e=s(Hu);ame=n(v$e,"STRONG",{});var Q_t=s(ame);s6o=r(Q_t,"bloom"),Q_t.forEach(t),l6o=r(v$e," \u2014 "),HD=n(v$e,"A",{href:!0});var W_t=s(HD);i6o=r(W_t,"BloomForCausalLM"),W_t.forEach(t),d6o=r(v$e," (BLOOM model)"),v$e.forEach(t),c6o=i(O),Uu=n(O,"LI",{});var F$e=s(Uu);nme=n(F$e,"STRONG",{});var H_t=s(nme);f6o=r(H_t,"camembert"),H_t.forEach(t),m6o=r(F$e," \u2014 "),UD=n(F$e,"A",{href:!0});var U_t=s(UD);g6o=r(U_t,"CamembertForMaskedLM"),U_t.forEach(t),h6o=r(F$e," (CamemBERT model)"),F$e.forEach(t),p6o=i(O),Ju=n(O,"LI",{});var T$e=s(Ju);sme=n(T$e,"STRONG",{});var J_t=s(sme);_6o=r(J_t,"ctrl"),J_t.forEach(t),u6o=r(T$e," \u2014 "),JD=n(T$e,"A",{href:!0});var Y_t=s(JD);b6o=r(Y_t,"CTRLLMHeadModel"),Y_t.forEach(t),v6o=r(T$e," (CTRL model)"),T$e.forEach(t),F6o=i(O),Yu=n(O,"LI",{});var M$e=s(Yu);lme=n(M$e,"STRONG",{});var K_t=s(lme);T6o=r(K_t,"data2vec-text"),K_t.forEach(t),M6o=r(M$e," \u2014 "),YD=n(M$e,"A",{href:!0});var Z_t=s(YD);E6o=r(Z_t,"Data2VecTextForMaskedLM"),Z_t.forEach(t),C6o=r(M$e," (Data2VecText model)"),M$e.forEach(t),w6o=i(O),Ku=n(O,"LI",{});var E$e=s(Ku);ime=n(E$e,"STRONG",{});var eut=s(ime);A6o=r(eut,"deberta"),eut.forEach(t),L6o=r(E$e," \u2014 "),KD=n(E$e,"A",{href:!0});var out=s(KD);y6o=r(out,"DebertaForMaskedLM"),out.forEach(t),x6o=r(E$e," (DeBERTa model)"),E$e.forEach(t),$6o=i(O),Zu=n(O,"LI",{});var C$e=s(Zu);dme=n(C$e,"STRONG",{});var rut=s(dme);k6o=r(rut,"deberta-v2"),rut.forEach(t),S6o=r(C$e," \u2014 "),ZD=n(C$e,"A",{href:!0});var tut=s(ZD);R6o=r(tut,"DebertaV2ForMaskedLM"),tut.forEach(t),P6o=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),B6o=i(O),e1=n(O,"LI",{});var w$e=s(e1);cme=n(w$e,"STRONG",{});var aut=s(cme);I6o=r(aut,"distilbert"),aut.forEach(t),N6o=r(w$e," \u2014 "),eG=n(w$e,"A",{href:!0});var nut=s(eG);q6o=r(nut,"DistilBertForMaskedLM"),nut.forEach(t),j6o=r(w$e," (DistilBERT model)"),w$e.forEach(t),D6o=i(O),o1=n(O,"LI",{});var A$e=s(o1);fme=n(A$e,"STRONG",{});var sut=s(fme);G6o=r(sut,"electra"),sut.forEach(t),O6o=r(A$e," \u2014 "),oG=n(A$e,"A",{href:!0});var lut=s(oG);V6o=r(lut,"ElectraForPreTraining"),lut.forEach(t),X6o=r(A$e," (ELECTRA model)"),A$e.forEach(t),z6o=i(O),r1=n(O,"LI",{});var L$e=s(r1);mme=n(L$e,"STRONG",{});var iut=s(mme);Q6o=r(iut,"flaubert"),iut.forEach(t),W6o=r(L$e," \u2014 "),rG=n(L$e,"A",{href:!0});var dut=s(rG);H6o=r(dut,"FlaubertWithLMHeadModel"),dut.forEach(t),U6o=r(L$e," (FlauBERT model)"),L$e.forEach(t),J6o=i(O),t1=n(O,"LI",{});var y$e=s(t1);gme=n(y$e,"STRONG",{});var cut=s(gme);Y6o=r(cut,"flava"),cut.forEach(t),K6o=r(y$e," \u2014 "),tG=n(y$e,"A",{href:!0});var fut=s(tG);Z6o=r(fut,"FlavaForPreTraining"),fut.forEach(t),eLo=r(y$e," (FLAVA model)"),y$e.forEach(t),oLo=i(O),a1=n(O,"LI",{});var x$e=s(a1);hme=n(x$e,"STRONG",{});var mut=s(hme);rLo=r(mut,"fnet"),mut.forEach(t),tLo=r(x$e," \u2014 "),aG=n(x$e,"A",{href:!0});var gut=s(aG);aLo=r(gut,"FNetForPreTraining"),gut.forEach(t),nLo=r(x$e," (FNet model)"),x$e.forEach(t),sLo=i(O),n1=n(O,"LI",{});var $$e=s(n1);pme=n($$e,"STRONG",{});var hut=s(pme);lLo=r(hut,"fsmt"),hut.forEach(t),iLo=r($$e," \u2014 "),nG=n($$e,"A",{href:!0});var put=s(nG);dLo=r(put,"FSMTForConditionalGeneration"),put.forEach(t),cLo=r($$e," (FairSeq Machine-Translation model)"),$$e.forEach(t),fLo=i(O),s1=n(O,"LI",{});var k$e=s(s1);_me=n(k$e,"STRONG",{});var _ut=s(_me);mLo=r(_ut,"funnel"),_ut.forEach(t),gLo=r(k$e," \u2014 "),sG=n(k$e,"A",{href:!0});var uut=s(sG);hLo=r(uut,"FunnelForPreTraining"),uut.forEach(t),pLo=r(k$e," (Funnel Transformer model)"),k$e.forEach(t),_Lo=i(O),l1=n(O,"LI",{});var S$e=s(l1);ume=n(S$e,"STRONG",{});var but=s(ume);uLo=r(but,"gpt2"),but.forEach(t),bLo=r(S$e," \u2014 "),lG=n(S$e,"A",{href:!0});var vut=s(lG);vLo=r(vut,"GPT2LMHeadModel"),vut.forEach(t),FLo=r(S$e," (OpenAI GPT-2 model)"),S$e.forEach(t),TLo=i(O),i1=n(O,"LI",{});var R$e=s(i1);bme=n(R$e,"STRONG",{});var Fut=s(bme);MLo=r(Fut,"ibert"),Fut.forEach(t),ELo=r(R$e," \u2014 "),iG=n(R$e,"A",{href:!0});var Tut=s(iG);CLo=r(Tut,"IBertForMaskedLM"),Tut.forEach(t),wLo=r(R$e," (I-BERT model)"),R$e.forEach(t),ALo=i(O),d1=n(O,"LI",{});var P$e=s(d1);vme=n(P$e,"STRONG",{});var Mut=s(vme);LLo=r(Mut,"layoutlm"),Mut.forEach(t),yLo=r(P$e," \u2014 "),dG=n(P$e,"A",{href:!0});var Eut=s(dG);xLo=r(Eut,"LayoutLMForMaskedLM"),Eut.forEach(t),$Lo=r(P$e," (LayoutLM model)"),P$e.forEach(t),kLo=i(O),c1=n(O,"LI",{});var B$e=s(c1);Fme=n(B$e,"STRONG",{});var Cut=s(Fme);SLo=r(Cut,"longformer"),Cut.forEach(t),RLo=r(B$e," \u2014 "),cG=n(B$e,"A",{href:!0});var wut=s(cG);PLo=r(wut,"LongformerForMaskedLM"),wut.forEach(t),BLo=r(B$e," (Longformer model)"),B$e.forEach(t),ILo=i(O),f1=n(O,"LI",{});var I$e=s(f1);Tme=n(I$e,"STRONG",{});var Aut=s(Tme);NLo=r(Aut,"lxmert"),Aut.forEach(t),qLo=r(I$e," \u2014 "),fG=n(I$e,"A",{href:!0});var Lut=s(fG);jLo=r(Lut,"LxmertForPreTraining"),Lut.forEach(t),DLo=r(I$e," (LXMERT model)"),I$e.forEach(t),GLo=i(O),m1=n(O,"LI",{});var N$e=s(m1);Mme=n(N$e,"STRONG",{});var yut=s(Mme);OLo=r(yut,"megatron-bert"),yut.forEach(t),VLo=r(N$e," \u2014 "),mG=n(N$e,"A",{href:!0});var xut=s(mG);XLo=r(xut,"MegatronBertForPreTraining"),xut.forEach(t),zLo=r(N$e," (Megatron-BERT model)"),N$e.forEach(t),QLo=i(O),g1=n(O,"LI",{});var q$e=s(g1);Eme=n(q$e,"STRONG",{});var $ut=s(Eme);WLo=r($ut,"mobilebert"),$ut.forEach(t),HLo=r(q$e," \u2014 "),gG=n(q$e,"A",{href:!0});var kut=s(gG);ULo=r(kut,"MobileBertForPreTraining"),kut.forEach(t),JLo=r(q$e," (MobileBERT model)"),q$e.forEach(t),YLo=i(O),h1=n(O,"LI",{});var j$e=s(h1);Cme=n(j$e,"STRONG",{});var Sut=s(Cme);KLo=r(Sut,"mpnet"),Sut.forEach(t),ZLo=r(j$e," \u2014 "),hG=n(j$e,"A",{href:!0});var Rut=s(hG);eyo=r(Rut,"MPNetForMaskedLM"),Rut.forEach(t),oyo=r(j$e," (MPNet model)"),j$e.forEach(t),ryo=i(O),p1=n(O,"LI",{});var D$e=s(p1);wme=n(D$e,"STRONG",{});var Put=s(wme);tyo=r(Put,"mvp"),Put.forEach(t),ayo=r(D$e," \u2014 "),pG=n(D$e,"A",{href:!0});var But=s(pG);nyo=r(But,"MvpForConditionalGeneration"),But.forEach(t),syo=r(D$e," (MVP model)"),D$e.forEach(t),lyo=i(O),_1=n(O,"LI",{});var G$e=s(_1);Ame=n(G$e,"STRONG",{});var Iut=s(Ame);iyo=r(Iut,"nezha"),Iut.forEach(t),dyo=r(G$e," \u2014 "),_G=n(G$e,"A",{href:!0});var Nut=s(_G);cyo=r(Nut,"NezhaForPreTraining"),Nut.forEach(t),fyo=r(G$e," (Nezha model)"),G$e.forEach(t),myo=i(O),u1=n(O,"LI",{});var O$e=s(u1);Lme=n(O$e,"STRONG",{});var qut=s(Lme);gyo=r(qut,"openai-gpt"),qut.forEach(t),hyo=r(O$e," \u2014 "),uG=n(O$e,"A",{href:!0});var jut=s(uG);pyo=r(jut,"OpenAIGPTLMHeadModel"),jut.forEach(t),_yo=r(O$e," (OpenAI GPT model)"),O$e.forEach(t),uyo=i(O),b1=n(O,"LI",{});var V$e=s(b1);yme=n(V$e,"STRONG",{});var Dut=s(yme);byo=r(Dut,"retribert"),Dut.forEach(t),vyo=r(V$e," \u2014 "),bG=n(V$e,"A",{href:!0});var Gut=s(bG);Fyo=r(Gut,"RetriBertModel"),Gut.forEach(t),Tyo=r(V$e," (RetriBERT model)"),V$e.forEach(t),Myo=i(O),v1=n(O,"LI",{});var X$e=s(v1);xme=n(X$e,"STRONG",{});var Out=s(xme);Eyo=r(Out,"roberta"),Out.forEach(t),Cyo=r(X$e," \u2014 "),vG=n(X$e,"A",{href:!0});var Vut=s(vG);wyo=r(Vut,"RobertaForMaskedLM"),Vut.forEach(t),Ayo=r(X$e," (RoBERTa model)"),X$e.forEach(t),Lyo=i(O),F1=n(O,"LI",{});var z$e=s(F1);$me=n(z$e,"STRONG",{});var Xut=s($me);yyo=r(Xut,"splinter"),Xut.forEach(t),xyo=r(z$e," \u2014 "),FG=n(z$e,"A",{href:!0});var zut=s(FG);$yo=r(zut,"SplinterForPreTraining"),zut.forEach(t),kyo=r(z$e," (Splinter model)"),z$e.forEach(t),Syo=i(O),T1=n(O,"LI",{});var Q$e=s(T1);kme=n(Q$e,"STRONG",{});var Qut=s(kme);Ryo=r(Qut,"squeezebert"),Qut.forEach(t),Pyo=r(Q$e," \u2014 "),TG=n(Q$e,"A",{href:!0});var Wut=s(TG);Byo=r(Wut,"SqueezeBertForMaskedLM"),Wut.forEach(t),Iyo=r(Q$e," (SqueezeBERT model)"),Q$e.forEach(t),Nyo=i(O),M1=n(O,"LI",{});var W$e=s(M1);Sme=n(W$e,"STRONG",{});var Hut=s(Sme);qyo=r(Hut,"t5"),Hut.forEach(t),jyo=r(W$e," \u2014 "),MG=n(W$e,"A",{href:!0});var Uut=s(MG);Dyo=r(Uut,"T5ForConditionalGeneration"),Uut.forEach(t),Gyo=r(W$e," (T5 model)"),W$e.forEach(t),Oyo=i(O),E1=n(O,"LI",{});var H$e=s(E1);Rme=n(H$e,"STRONG",{});var Jut=s(Rme);Vyo=r(Jut,"tapas"),Jut.forEach(t),Xyo=r(H$e," \u2014 "),EG=n(H$e,"A",{href:!0});var Yut=s(EG);zyo=r(Yut,"TapasForMaskedLM"),Yut.forEach(t),Qyo=r(H$e," (TAPAS model)"),H$e.forEach(t),Wyo=i(O),C1=n(O,"LI",{});var U$e=s(C1);Pme=n(U$e,"STRONG",{});var Kut=s(Pme);Hyo=r(Kut,"transfo-xl"),Kut.forEach(t),Uyo=r(U$e," \u2014 "),CG=n(U$e,"A",{href:!0});var Zut=s(CG);Jyo=r(Zut,"TransfoXLLMHeadModel"),Zut.forEach(t),Yyo=r(U$e," (Transformer-XL model)"),U$e.forEach(t),Kyo=i(O),w1=n(O,"LI",{});var J$e=s(w1);Bme=n(J$e,"STRONG",{});var e1t=s(Bme);Zyo=r(e1t,"unispeech"),e1t.forEach(t),e8o=r(J$e," \u2014 "),wG=n(J$e,"A",{href:!0});var o1t=s(wG);o8o=r(o1t,"UniSpeechForPreTraining"),o1t.forEach(t),r8o=r(J$e," (UniSpeech model)"),J$e.forEach(t),t8o=i(O),A1=n(O,"LI",{});var Y$e=s(A1);Ime=n(Y$e,"STRONG",{});var r1t=s(Ime);a8o=r(r1t,"unispeech-sat"),r1t.forEach(t),n8o=r(Y$e," \u2014 "),AG=n(Y$e,"A",{href:!0});var t1t=s(AG);s8o=r(t1t,"UniSpeechSatForPreTraining"),t1t.forEach(t),l8o=r(Y$e," (UniSpeechSat model)"),Y$e.forEach(t),i8o=i(O),L1=n(O,"LI",{});var K$e=s(L1);Nme=n(K$e,"STRONG",{});var a1t=s(Nme);d8o=r(a1t,"visual_bert"),a1t.forEach(t),c8o=r(K$e," \u2014 "),LG=n(K$e,"A",{href:!0});var n1t=s(LG);f8o=r(n1t,"VisualBertForPreTraining"),n1t.forEach(t),m8o=r(K$e," (VisualBERT model)"),K$e.forEach(t),g8o=i(O),y1=n(O,"LI",{});var Z$e=s(y1);qme=n(Z$e,"STRONG",{});var s1t=s(qme);h8o=r(s1t,"vit_mae"),s1t.forEach(t),p8o=r(Z$e," \u2014 "),yG=n(Z$e,"A",{href:!0});var l1t=s(yG);_8o=r(l1t,"ViTMAEForPreTraining"),l1t.forEach(t),u8o=r(Z$e," (ViTMAE model)"),Z$e.forEach(t),b8o=i(O),x1=n(O,"LI",{});var eke=s(x1);jme=n(eke,"STRONG",{});var i1t=s(jme);v8o=r(i1t,"wav2vec2"),i1t.forEach(t),F8o=r(eke," \u2014 "),xG=n(eke,"A",{href:!0});var d1t=s(xG);T8o=r(d1t,"Wav2Vec2ForPreTraining"),d1t.forEach(t),M8o=r(eke," (Wav2Vec2 model)"),eke.forEach(t),E8o=i(O),$1=n(O,"LI",{});var oke=s($1);Dme=n(oke,"STRONG",{});var c1t=s(Dme);C8o=r(c1t,"wav2vec2-conformer"),c1t.forEach(t),w8o=r(oke," \u2014 "),$G=n(oke,"A",{href:!0});var f1t=s($G);A8o=r(f1t,"Wav2Vec2ConformerForPreTraining"),f1t.forEach(t),L8o=r(oke," (Wav2Vec2-Conformer model)"),oke.forEach(t),y8o=i(O),k1=n(O,"LI",{});var rke=s(k1);Gme=n(rke,"STRONG",{});var m1t=s(Gme);x8o=r(m1t,"xlm"),m1t.forEach(t),$8o=r(rke," \u2014 "),kG=n(rke,"A",{href:!0});var g1t=s(kG);k8o=r(g1t,"XLMWithLMHeadModel"),g1t.forEach(t),S8o=r(rke," (XLM model)"),rke.forEach(t),R8o=i(O),S1=n(O,"LI",{});var tke=s(S1);Ome=n(tke,"STRONG",{});var h1t=s(Ome);P8o=r(h1t,"xlm-roberta"),h1t.forEach(t),B8o=r(tke," \u2014 "),SG=n(tke,"A",{href:!0});var p1t=s(SG);I8o=r(p1t,"XLMRobertaForMaskedLM"),p1t.forEach(t),N8o=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),q8o=i(O),R1=n(O,"LI",{});var ake=s(R1);Vme=n(ake,"STRONG",{});var _1t=s(Vme);j8o=r(_1t,"xlm-roberta-xl"),_1t.forEach(t),D8o=r(ake," \u2014 "),RG=n(ake,"A",{href:!0});var u1t=s(RG);G8o=r(u1t,"XLMRobertaXLForMaskedLM"),u1t.forEach(t),O8o=r(ake," (XLM-RoBERTa-XL model)"),ake.forEach(t),V8o=i(O),P1=n(O,"LI",{});var nke=s(P1);Xme=n(nke,"STRONG",{});var b1t=s(Xme);X8o=r(b1t,"xlnet"),b1t.forEach(t),z8o=r(nke," \u2014 "),PG=n(nke,"A",{href:!0});var v1t=s(PG);Q8o=r(v1t,"XLNetLMHeadModel"),v1t.forEach(t),W8o=r(nke," (XLNet model)"),nke.forEach(t),O.forEach(t),H8o=i(sa),B1=n(sa,"P",{});var ske=s(B1);U8o=r(ske,"The model is set in evaluation mode by default using "),zme=n(ske,"CODE",{});var F1t=s(zme);J8o=r(F1t,"model.eval()"),F1t.forEach(t),Y8o=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=n(ske,"CODE",{});var T1t=s(Qme);K8o=r(T1t,"model.train()"),T1t.forEach(t),ske.forEach(t),Z8o=i(sa),T(I1.$$.fragment,sa),sa.forEach(t),ol.forEach(t),kVe=i(f),zi=n(f,"H2",{class:!0});var Nze=s(zi);N1=n(Nze,"A",{id:!0,class:!0,href:!0});var M1t=s(N1);Wme=n(M1t,"SPAN",{});var E1t=s(Wme);T(ky.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),e9o=i(Nze),Hme=n(Nze,"SPAN",{});var C1t=s(Hme);o9o=r(C1t,"AutoModelForCausalLM"),C1t.forEach(t),Nze.forEach(t),SVe=i(f),ko=n(f,"DIV",{class:!0});var rl=s(ko);T(Sy.$$.fragment,rl),r9o=i(rl),Qi=n(rl,"P",{});var pre=s(Qi);t9o=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BG=n(pre,"A",{href:!0});var w1t=s(BG);a9o=r(w1t,"from_pretrained()"),w1t.forEach(t),n9o=r(pre," class method or the "),IG=n(pre,"A",{href:!0});var A1t=s(IG);s9o=r(A1t,"from_config()"),A1t.forEach(t),l9o=r(pre,` class
method.`),pre.forEach(t),i9o=i(rl),Ry=n(rl,"P",{});var qze=s(Ry);d9o=r(qze,"This class cannot be instantiated directly using "),Ume=n(qze,"CODE",{});var L1t=s(Ume);c9o=r(L1t,"__init__()"),L1t.forEach(t),f9o=r(qze," (throws an error)."),qze.forEach(t),m9o=i(rl),it=n(rl,"DIV",{class:!0});var r6=s(it);T(Py.$$.fragment,r6),g9o=i(r6),Jme=n(r6,"P",{});var y1t=s(Jme);h9o=r(y1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y1t.forEach(t),p9o=i(r6),Wi=n(r6,"P",{});var _re=s(Wi);_9o=r(_re,`Note:
Loading a model from its configuration file does `),Yme=n(_re,"STRONG",{});var x1t=s(Yme);u9o=r(x1t,"not"),x1t.forEach(t),b9o=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(_re,"A",{href:!0});var $1t=s(NG);v9o=r($1t,"from_pretrained()"),$1t.forEach(t),F9o=r(_re," to load the model weights."),_re.forEach(t),T9o=i(r6),T(q1.$$.fragment,r6),r6.forEach(t),M9o=i(rl),Ke=n(rl,"DIV",{class:!0});var la=s(Ke);T(By.$$.fragment,la),E9o=i(la),Kme=n(la,"P",{});var k1t=s(Kme);C9o=r(k1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k1t.forEach(t),w9o=i(la),Ia=n(la,"P",{});var t6=s(Ia);A9o=r(t6,"The model class to instantiate is selected based on the "),Zme=n(t6,"CODE",{});var S1t=s(Zme);L9o=r(S1t,"model_type"),S1t.forEach(t),y9o=r(t6,` property of the config object (either
passed as an argument or loaded from `),ege=n(t6,"CODE",{});var R1t=s(ege);x9o=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),$9o=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(t6,"CODE",{});var P1t=s(oge);k9o=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),S9o=r(t6,":"),t6.forEach(t),R9o=i(la),z=n(la,"UL",{});var Q=s(z);j1=n(Q,"LI",{});var lke=s(j1);rge=n(lke,"STRONG",{});var B1t=s(rge);P9o=r(B1t,"bart"),B1t.forEach(t),B9o=r(lke," \u2014 "),qG=n(lke,"A",{href:!0});var I1t=s(qG);I9o=r(I1t,"BartForCausalLM"),I1t.forEach(t),N9o=r(lke," (BART model)"),lke.forEach(t),q9o=i(Q),D1=n(Q,"LI",{});var ike=s(D1);tge=n(ike,"STRONG",{});var N1t=s(tge);j9o=r(N1t,"bert"),N1t.forEach(t),D9o=r(ike," \u2014 "),jG=n(ike,"A",{href:!0});var q1t=s(jG);G9o=r(q1t,"BertLMHeadModel"),q1t.forEach(t),O9o=r(ike," (BERT model)"),ike.forEach(t),V9o=i(Q),G1=n(Q,"LI",{});var dke=s(G1);age=n(dke,"STRONG",{});var j1t=s(age);X9o=r(j1t,"bert-generation"),j1t.forEach(t),z9o=r(dke," \u2014 "),DG=n(dke,"A",{href:!0});var D1t=s(DG);Q9o=r(D1t,"BertGenerationDecoder"),D1t.forEach(t),W9o=r(dke," (Bert Generation model)"),dke.forEach(t),H9o=i(Q),O1=n(Q,"LI",{});var cke=s(O1);nge=n(cke,"STRONG",{});var G1t=s(nge);U9o=r(G1t,"big_bird"),G1t.forEach(t),J9o=r(cke," \u2014 "),GG=n(cke,"A",{href:!0});var O1t=s(GG);Y9o=r(O1t,"BigBirdForCausalLM"),O1t.forEach(t),K9o=r(cke," (BigBird model)"),cke.forEach(t),Z9o=i(Q),V1=n(Q,"LI",{});var fke=s(V1);sge=n(fke,"STRONG",{});var V1t=s(sge);exo=r(V1t,"bigbird_pegasus"),V1t.forEach(t),oxo=r(fke," \u2014 "),OG=n(fke,"A",{href:!0});var X1t=s(OG);rxo=r(X1t,"BigBirdPegasusForCausalLM"),X1t.forEach(t),txo=r(fke," (BigBird-Pegasus model)"),fke.forEach(t),axo=i(Q),X1=n(Q,"LI",{});var mke=s(X1);lge=n(mke,"STRONG",{});var z1t=s(lge);nxo=r(z1t,"blenderbot"),z1t.forEach(t),sxo=r(mke," \u2014 "),VG=n(mke,"A",{href:!0});var Q1t=s(VG);lxo=r(Q1t,"BlenderbotForCausalLM"),Q1t.forEach(t),ixo=r(mke," (Blenderbot model)"),mke.forEach(t),dxo=i(Q),z1=n(Q,"LI",{});var gke=s(z1);ige=n(gke,"STRONG",{});var W1t=s(ige);cxo=r(W1t,"blenderbot-small"),W1t.forEach(t),fxo=r(gke," \u2014 "),XG=n(gke,"A",{href:!0});var H1t=s(XG);mxo=r(H1t,"BlenderbotSmallForCausalLM"),H1t.forEach(t),gxo=r(gke," (BlenderbotSmall model)"),gke.forEach(t),hxo=i(Q),Q1=n(Q,"LI",{});var hke=s(Q1);dge=n(hke,"STRONG",{});var U1t=s(dge);pxo=r(U1t,"bloom"),U1t.forEach(t),_xo=r(hke," \u2014 "),zG=n(hke,"A",{href:!0});var J1t=s(zG);uxo=r(J1t,"BloomForCausalLM"),J1t.forEach(t),bxo=r(hke," (BLOOM model)"),hke.forEach(t),vxo=i(Q),W1=n(Q,"LI",{});var pke=s(W1);cge=n(pke,"STRONG",{});var Y1t=s(cge);Fxo=r(Y1t,"camembert"),Y1t.forEach(t),Txo=r(pke," \u2014 "),QG=n(pke,"A",{href:!0});var K1t=s(QG);Mxo=r(K1t,"CamembertForCausalLM"),K1t.forEach(t),Exo=r(pke," (CamemBERT model)"),pke.forEach(t),Cxo=i(Q),H1=n(Q,"LI",{});var _ke=s(H1);fge=n(_ke,"STRONG",{});var Z1t=s(fge);wxo=r(Z1t,"codegen"),Z1t.forEach(t),Axo=r(_ke," \u2014 "),WG=n(_ke,"A",{href:!0});var e7t=s(WG);Lxo=r(e7t,"CodeGenForCausalLM"),e7t.forEach(t),yxo=r(_ke," (CodeGen model)"),_ke.forEach(t),xxo=i(Q),U1=n(Q,"LI",{});var uke=s(U1);mge=n(uke,"STRONG",{});var o7t=s(mge);$xo=r(o7t,"ctrl"),o7t.forEach(t),kxo=r(uke," \u2014 "),HG=n(uke,"A",{href:!0});var r7t=s(HG);Sxo=r(r7t,"CTRLLMHeadModel"),r7t.forEach(t),Rxo=r(uke," (CTRL model)"),uke.forEach(t),Pxo=i(Q),J1=n(Q,"LI",{});var bke=s(J1);gge=n(bke,"STRONG",{});var t7t=s(gge);Bxo=r(t7t,"data2vec-text"),t7t.forEach(t),Ixo=r(bke," \u2014 "),UG=n(bke,"A",{href:!0});var a7t=s(UG);Nxo=r(a7t,"Data2VecTextForCausalLM"),a7t.forEach(t),qxo=r(bke," (Data2VecText model)"),bke.forEach(t),jxo=i(Q),Y1=n(Q,"LI",{});var vke=s(Y1);hge=n(vke,"STRONG",{});var n7t=s(hge);Dxo=r(n7t,"electra"),n7t.forEach(t),Gxo=r(vke," \u2014 "),JG=n(vke,"A",{href:!0});var s7t=s(JG);Oxo=r(s7t,"ElectraForCausalLM"),s7t.forEach(t),Vxo=r(vke," (ELECTRA model)"),vke.forEach(t),Xxo=i(Q),K1=n(Q,"LI",{});var Fke=s(K1);pge=n(Fke,"STRONG",{});var l7t=s(pge);zxo=r(l7t,"gpt2"),l7t.forEach(t),Qxo=r(Fke," \u2014 "),YG=n(Fke,"A",{href:!0});var i7t=s(YG);Wxo=r(i7t,"GPT2LMHeadModel"),i7t.forEach(t),Hxo=r(Fke," (OpenAI GPT-2 model)"),Fke.forEach(t),Uxo=i(Q),Z1=n(Q,"LI",{});var Tke=s(Z1);_ge=n(Tke,"STRONG",{});var d7t=s(_ge);Jxo=r(d7t,"gpt_neo"),d7t.forEach(t),Yxo=r(Tke," \u2014 "),KG=n(Tke,"A",{href:!0});var c7t=s(KG);Kxo=r(c7t,"GPTNeoForCausalLM"),c7t.forEach(t),Zxo=r(Tke," (GPT Neo model)"),Tke.forEach(t),e$o=i(Q),e7=n(Q,"LI",{});var Mke=s(e7);uge=n(Mke,"STRONG",{});var f7t=s(uge);o$o=r(f7t,"gpt_neox"),f7t.forEach(t),r$o=r(Mke," \u2014 "),ZG=n(Mke,"A",{href:!0});var m7t=s(ZG);t$o=r(m7t,"GPTNeoXForCausalLM"),m7t.forEach(t),a$o=r(Mke," (GPT NeoX model)"),Mke.forEach(t),n$o=i(Q),o7=n(Q,"LI",{});var Eke=s(o7);bge=n(Eke,"STRONG",{});var g7t=s(bge);s$o=r(g7t,"gptj"),g7t.forEach(t),l$o=r(Eke," \u2014 "),eO=n(Eke,"A",{href:!0});var h7t=s(eO);i$o=r(h7t,"GPTJForCausalLM"),h7t.forEach(t),d$o=r(Eke," (GPT-J model)"),Eke.forEach(t),c$o=i(Q),r7=n(Q,"LI",{});var Cke=s(r7);vge=n(Cke,"STRONG",{});var p7t=s(vge);f$o=r(p7t,"marian"),p7t.forEach(t),m$o=r(Cke," \u2014 "),oO=n(Cke,"A",{href:!0});var _7t=s(oO);g$o=r(_7t,"MarianForCausalLM"),_7t.forEach(t),h$o=r(Cke," (Marian model)"),Cke.forEach(t),p$o=i(Q),t7=n(Q,"LI",{});var wke=s(t7);Fge=n(wke,"STRONG",{});var u7t=s(Fge);_$o=r(u7t,"mbart"),u7t.forEach(t),u$o=r(wke," \u2014 "),rO=n(wke,"A",{href:!0});var b7t=s(rO);b$o=r(b7t,"MBartForCausalLM"),b7t.forEach(t),v$o=r(wke," (mBART model)"),wke.forEach(t),F$o=i(Q),a7=n(Q,"LI",{});var Ake=s(a7);Tge=n(Ake,"STRONG",{});var v7t=s(Tge);T$o=r(v7t,"megatron-bert"),v7t.forEach(t),M$o=r(Ake," \u2014 "),tO=n(Ake,"A",{href:!0});var F7t=s(tO);E$o=r(F7t,"MegatronBertForCausalLM"),F7t.forEach(t),C$o=r(Ake," (Megatron-BERT model)"),Ake.forEach(t),w$o=i(Q),n7=n(Q,"LI",{});var Lke=s(n7);Mge=n(Lke,"STRONG",{});var T7t=s(Mge);A$o=r(T7t,"mvp"),T7t.forEach(t),L$o=r(Lke," \u2014 "),aO=n(Lke,"A",{href:!0});var M7t=s(aO);y$o=r(M7t,"MvpForCausalLM"),M7t.forEach(t),x$o=r(Lke," (MVP model)"),Lke.forEach(t),$$o=i(Q),s7=n(Q,"LI",{});var yke=s(s7);Ege=n(yke,"STRONG",{});var E7t=s(Ege);k$o=r(E7t,"openai-gpt"),E7t.forEach(t),S$o=r(yke," \u2014 "),nO=n(yke,"A",{href:!0});var C7t=s(nO);R$o=r(C7t,"OpenAIGPTLMHeadModel"),C7t.forEach(t),P$o=r(yke," (OpenAI GPT model)"),yke.forEach(t),B$o=i(Q),l7=n(Q,"LI",{});var xke=s(l7);Cge=n(xke,"STRONG",{});var w7t=s(Cge);I$o=r(w7t,"opt"),w7t.forEach(t),N$o=r(xke," \u2014 "),sO=n(xke,"A",{href:!0});var A7t=s(sO);q$o=r(A7t,"OPTForCausalLM"),A7t.forEach(t),j$o=r(xke," (OPT model)"),xke.forEach(t),D$o=i(Q),i7=n(Q,"LI",{});var $ke=s(i7);wge=n($ke,"STRONG",{});var L7t=s(wge);G$o=r(L7t,"pegasus"),L7t.forEach(t),O$o=r($ke," \u2014 "),lO=n($ke,"A",{href:!0});var y7t=s(lO);V$o=r(y7t,"PegasusForCausalLM"),y7t.forEach(t),X$o=r($ke," (Pegasus model)"),$ke.forEach(t),z$o=i(Q),d7=n(Q,"LI",{});var kke=s(d7);Age=n(kke,"STRONG",{});var x7t=s(Age);Q$o=r(x7t,"plbart"),x7t.forEach(t),W$o=r(kke," \u2014 "),iO=n(kke,"A",{href:!0});var $7t=s(iO);H$o=r($7t,"PLBartForCausalLM"),$7t.forEach(t),U$o=r(kke," (PLBart model)"),kke.forEach(t),J$o=i(Q),c7=n(Q,"LI",{});var Ske=s(c7);Lge=n(Ske,"STRONG",{});var k7t=s(Lge);Y$o=r(k7t,"prophetnet"),k7t.forEach(t),K$o=r(Ske," \u2014 "),dO=n(Ske,"A",{href:!0});var S7t=s(dO);Z$o=r(S7t,"ProphetNetForCausalLM"),S7t.forEach(t),eko=r(Ske," (ProphetNet model)"),Ske.forEach(t),oko=i(Q),f7=n(Q,"LI",{});var Rke=s(f7);yge=n(Rke,"STRONG",{});var R7t=s(yge);rko=r(R7t,"qdqbert"),R7t.forEach(t),tko=r(Rke," \u2014 "),cO=n(Rke,"A",{href:!0});var P7t=s(cO);ako=r(P7t,"QDQBertLMHeadModel"),P7t.forEach(t),nko=r(Rke," (QDQBert model)"),Rke.forEach(t),sko=i(Q),m7=n(Q,"LI",{});var Pke=s(m7);xge=n(Pke,"STRONG",{});var B7t=s(xge);lko=r(B7t,"reformer"),B7t.forEach(t),iko=r(Pke," \u2014 "),fO=n(Pke,"A",{href:!0});var I7t=s(fO);dko=r(I7t,"ReformerModelWithLMHead"),I7t.forEach(t),cko=r(Pke," (Reformer model)"),Pke.forEach(t),fko=i(Q),g7=n(Q,"LI",{});var Bke=s(g7);$ge=n(Bke,"STRONG",{});var N7t=s($ge);mko=r(N7t,"rembert"),N7t.forEach(t),gko=r(Bke," \u2014 "),mO=n(Bke,"A",{href:!0});var q7t=s(mO);hko=r(q7t,"RemBertForCausalLM"),q7t.forEach(t),pko=r(Bke," (RemBERT model)"),Bke.forEach(t),_ko=i(Q),h7=n(Q,"LI",{});var Ike=s(h7);kge=n(Ike,"STRONG",{});var j7t=s(kge);uko=r(j7t,"roberta"),j7t.forEach(t),bko=r(Ike," \u2014 "),gO=n(Ike,"A",{href:!0});var D7t=s(gO);vko=r(D7t,"RobertaForCausalLM"),D7t.forEach(t),Fko=r(Ike," (RoBERTa model)"),Ike.forEach(t),Tko=i(Q),p7=n(Q,"LI",{});var Nke=s(p7);Sge=n(Nke,"STRONG",{});var G7t=s(Sge);Mko=r(G7t,"roformer"),G7t.forEach(t),Eko=r(Nke," \u2014 "),hO=n(Nke,"A",{href:!0});var O7t=s(hO);Cko=r(O7t,"RoFormerForCausalLM"),O7t.forEach(t),wko=r(Nke," (RoFormer model)"),Nke.forEach(t),Ako=i(Q),_7=n(Q,"LI",{});var qke=s(_7);Rge=n(qke,"STRONG",{});var V7t=s(Rge);Lko=r(V7t,"speech_to_text_2"),V7t.forEach(t),yko=r(qke," \u2014 "),pO=n(qke,"A",{href:!0});var X7t=s(pO);xko=r(X7t,"Speech2Text2ForCausalLM"),X7t.forEach(t),$ko=r(qke," (Speech2Text2 model)"),qke.forEach(t),kko=i(Q),u7=n(Q,"LI",{});var jke=s(u7);Pge=n(jke,"STRONG",{});var z7t=s(Pge);Sko=r(z7t,"transfo-xl"),z7t.forEach(t),Rko=r(jke," \u2014 "),_O=n(jke,"A",{href:!0});var Q7t=s(_O);Pko=r(Q7t,"TransfoXLLMHeadModel"),Q7t.forEach(t),Bko=r(jke," (Transformer-XL model)"),jke.forEach(t),Iko=i(Q),b7=n(Q,"LI",{});var Dke=s(b7);Bge=n(Dke,"STRONG",{});var W7t=s(Bge);Nko=r(W7t,"trocr"),W7t.forEach(t),qko=r(Dke," \u2014 "),uO=n(Dke,"A",{href:!0});var H7t=s(uO);jko=r(H7t,"TrOCRForCausalLM"),H7t.forEach(t),Dko=r(Dke," (TrOCR model)"),Dke.forEach(t),Gko=i(Q),v7=n(Q,"LI",{});var Gke=s(v7);Ige=n(Gke,"STRONG",{});var U7t=s(Ige);Oko=r(U7t,"xglm"),U7t.forEach(t),Vko=r(Gke," \u2014 "),bO=n(Gke,"A",{href:!0});var J7t=s(bO);Xko=r(J7t,"XGLMForCausalLM"),J7t.forEach(t),zko=r(Gke," (XGLM model)"),Gke.forEach(t),Qko=i(Q),F7=n(Q,"LI",{});var Oke=s(F7);Nge=n(Oke,"STRONG",{});var Y7t=s(Nge);Wko=r(Y7t,"xlm"),Y7t.forEach(t),Hko=r(Oke," \u2014 "),vO=n(Oke,"A",{href:!0});var K7t=s(vO);Uko=r(K7t,"XLMWithLMHeadModel"),K7t.forEach(t),Jko=r(Oke," (XLM model)"),Oke.forEach(t),Yko=i(Q),T7=n(Q,"LI",{});var Vke=s(T7);qge=n(Vke,"STRONG",{});var Z7t=s(qge);Kko=r(Z7t,"xlm-prophetnet"),Z7t.forEach(t),Zko=r(Vke," \u2014 "),FO=n(Vke,"A",{href:!0});var e4t=s(FO);eSo=r(e4t,"XLMProphetNetForCausalLM"),e4t.forEach(t),oSo=r(Vke," (XLM-ProphetNet model)"),Vke.forEach(t),rSo=i(Q),M7=n(Q,"LI",{});var Xke=s(M7);jge=n(Xke,"STRONG",{});var o4t=s(jge);tSo=r(o4t,"xlm-roberta"),o4t.forEach(t),aSo=r(Xke," \u2014 "),TO=n(Xke,"A",{href:!0});var r4t=s(TO);nSo=r(r4t,"XLMRobertaForCausalLM"),r4t.forEach(t),sSo=r(Xke," (XLM-RoBERTa model)"),Xke.forEach(t),lSo=i(Q),E7=n(Q,"LI",{});var zke=s(E7);Dge=n(zke,"STRONG",{});var t4t=s(Dge);iSo=r(t4t,"xlm-roberta-xl"),t4t.forEach(t),dSo=r(zke," \u2014 "),MO=n(zke,"A",{href:!0});var a4t=s(MO);cSo=r(a4t,"XLMRobertaXLForCausalLM"),a4t.forEach(t),fSo=r(zke," (XLM-RoBERTa-XL model)"),zke.forEach(t),mSo=i(Q),C7=n(Q,"LI",{});var Qke=s(C7);Gge=n(Qke,"STRONG",{});var n4t=s(Gge);gSo=r(n4t,"xlnet"),n4t.forEach(t),hSo=r(Qke," \u2014 "),EO=n(Qke,"A",{href:!0});var s4t=s(EO);pSo=r(s4t,"XLNetLMHeadModel"),s4t.forEach(t),_So=r(Qke," (XLNet model)"),Qke.forEach(t),Q.forEach(t),uSo=i(la),w7=n(la,"P",{});var Wke=s(w7);bSo=r(Wke,"The model is set in evaluation mode by default using "),Oge=n(Wke,"CODE",{});var l4t=s(Oge);vSo=r(l4t,"model.eval()"),l4t.forEach(t),FSo=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(Wke,"CODE",{});var i4t=s(Vge);TSo=r(i4t,"model.train()"),i4t.forEach(t),Wke.forEach(t),MSo=i(la),T(A7.$$.fragment,la),la.forEach(t),rl.forEach(t),RVe=i(f),Hi=n(f,"H2",{class:!0});var jze=s(Hi);L7=n(jze,"A",{id:!0,class:!0,href:!0});var d4t=s(L7);Xge=n(d4t,"SPAN",{});var c4t=s(Xge);T(Iy.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),ESo=i(jze),zge=n(jze,"SPAN",{});var f4t=s(zge);CSo=r(f4t,"AutoModelForMaskedLM"),f4t.forEach(t),jze.forEach(t),PVe=i(f),So=n(f,"DIV",{class:!0});var tl=s(So);T(Ny.$$.fragment,tl),wSo=i(tl),Ui=n(tl,"P",{});var ure=s(Ui);ASo=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CO=n(ure,"A",{href:!0});var m4t=s(CO);LSo=r(m4t,"from_pretrained()"),m4t.forEach(t),ySo=r(ure," class method or the "),wO=n(ure,"A",{href:!0});var g4t=s(wO);xSo=r(g4t,"from_config()"),g4t.forEach(t),$So=r(ure,` class
method.`),ure.forEach(t),kSo=i(tl),qy=n(tl,"P",{});var Dze=s(qy);SSo=r(Dze,"This class cannot be instantiated directly using "),Qge=n(Dze,"CODE",{});var h4t=s(Qge);RSo=r(h4t,"__init__()"),h4t.forEach(t),PSo=r(Dze," (throws an error)."),Dze.forEach(t),BSo=i(tl),dt=n(tl,"DIV",{class:!0});var a6=s(dt);T(jy.$$.fragment,a6),ISo=i(a6),Wge=n(a6,"P",{});var p4t=s(Wge);NSo=r(p4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p4t.forEach(t),qSo=i(a6),Ji=n(a6,"P",{});var bre=s(Ji);jSo=r(bre,`Note:
Loading a model from its configuration file does `),Hge=n(bre,"STRONG",{});var _4t=s(Hge);DSo=r(_4t,"not"),_4t.forEach(t),GSo=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(bre,"A",{href:!0});var u4t=s(AO);OSo=r(u4t,"from_pretrained()"),u4t.forEach(t),VSo=r(bre," to load the model weights."),bre.forEach(t),XSo=i(a6),T(y7.$$.fragment,a6),a6.forEach(t),zSo=i(tl),Ze=n(tl,"DIV",{class:!0});var ia=s(Ze);T(Dy.$$.fragment,ia),QSo=i(ia),Uge=n(ia,"P",{});var b4t=s(Uge);WSo=r(b4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b4t.forEach(t),HSo=i(ia),Na=n(ia,"P",{});var n6=s(Na);USo=r(n6,"The model class to instantiate is selected based on the "),Jge=n(n6,"CODE",{});var v4t=s(Jge);JSo=r(v4t,"model_type"),v4t.forEach(t),YSo=r(n6,` property of the config object (either
passed as an argument or loaded from `),Yge=n(n6,"CODE",{});var F4t=s(Yge);KSo=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),ZSo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=n(n6,"CODE",{});var T4t=s(Kge);eRo=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),oRo=r(n6,":"),n6.forEach(t),rRo=i(ia),W=n(ia,"UL",{});var H=s(W);x7=n(H,"LI",{});var Hke=s(x7);Zge=n(Hke,"STRONG",{});var M4t=s(Zge);tRo=r(M4t,"albert"),M4t.forEach(t),aRo=r(Hke," \u2014 "),LO=n(Hke,"A",{href:!0});var E4t=s(LO);nRo=r(E4t,"AlbertForMaskedLM"),E4t.forEach(t),sRo=r(Hke," (ALBERT model)"),Hke.forEach(t),lRo=i(H),$7=n(H,"LI",{});var Uke=s($7);ehe=n(Uke,"STRONG",{});var C4t=s(ehe);iRo=r(C4t,"bart"),C4t.forEach(t),dRo=r(Uke," \u2014 "),yO=n(Uke,"A",{href:!0});var w4t=s(yO);cRo=r(w4t,"BartForConditionalGeneration"),w4t.forEach(t),fRo=r(Uke," (BART model)"),Uke.forEach(t),mRo=i(H),k7=n(H,"LI",{});var Jke=s(k7);ohe=n(Jke,"STRONG",{});var A4t=s(ohe);gRo=r(A4t,"bert"),A4t.forEach(t),hRo=r(Jke," \u2014 "),xO=n(Jke,"A",{href:!0});var L4t=s(xO);pRo=r(L4t,"BertForMaskedLM"),L4t.forEach(t),_Ro=r(Jke," (BERT model)"),Jke.forEach(t),uRo=i(H),S7=n(H,"LI",{});var Yke=s(S7);rhe=n(Yke,"STRONG",{});var y4t=s(rhe);bRo=r(y4t,"big_bird"),y4t.forEach(t),vRo=r(Yke," \u2014 "),$O=n(Yke,"A",{href:!0});var x4t=s($O);FRo=r(x4t,"BigBirdForMaskedLM"),x4t.forEach(t),TRo=r(Yke," (BigBird model)"),Yke.forEach(t),MRo=i(H),R7=n(H,"LI",{});var Kke=s(R7);the=n(Kke,"STRONG",{});var $4t=s(the);ERo=r($4t,"camembert"),$4t.forEach(t),CRo=r(Kke," \u2014 "),kO=n(Kke,"A",{href:!0});var k4t=s(kO);wRo=r(k4t,"CamembertForMaskedLM"),k4t.forEach(t),ARo=r(Kke," (CamemBERT model)"),Kke.forEach(t),LRo=i(H),P7=n(H,"LI",{});var Zke=s(P7);ahe=n(Zke,"STRONG",{});var S4t=s(ahe);yRo=r(S4t,"convbert"),S4t.forEach(t),xRo=r(Zke," \u2014 "),SO=n(Zke,"A",{href:!0});var R4t=s(SO);$Ro=r(R4t,"ConvBertForMaskedLM"),R4t.forEach(t),kRo=r(Zke," (ConvBERT model)"),Zke.forEach(t),SRo=i(H),B7=n(H,"LI",{});var eSe=s(B7);nhe=n(eSe,"STRONG",{});var P4t=s(nhe);RRo=r(P4t,"data2vec-text"),P4t.forEach(t),PRo=r(eSe," \u2014 "),RO=n(eSe,"A",{href:!0});var B4t=s(RO);BRo=r(B4t,"Data2VecTextForMaskedLM"),B4t.forEach(t),IRo=r(eSe," (Data2VecText model)"),eSe.forEach(t),NRo=i(H),I7=n(H,"LI",{});var oSe=s(I7);she=n(oSe,"STRONG",{});var I4t=s(she);qRo=r(I4t,"deberta"),I4t.forEach(t),jRo=r(oSe," \u2014 "),PO=n(oSe,"A",{href:!0});var N4t=s(PO);DRo=r(N4t,"DebertaForMaskedLM"),N4t.forEach(t),GRo=r(oSe," (DeBERTa model)"),oSe.forEach(t),ORo=i(H),N7=n(H,"LI",{});var rSe=s(N7);lhe=n(rSe,"STRONG",{});var q4t=s(lhe);VRo=r(q4t,"deberta-v2"),q4t.forEach(t),XRo=r(rSe," \u2014 "),BO=n(rSe,"A",{href:!0});var j4t=s(BO);zRo=r(j4t,"DebertaV2ForMaskedLM"),j4t.forEach(t),QRo=r(rSe," (DeBERTa-v2 model)"),rSe.forEach(t),WRo=i(H),q7=n(H,"LI",{});var tSe=s(q7);ihe=n(tSe,"STRONG",{});var D4t=s(ihe);HRo=r(D4t,"distilbert"),D4t.forEach(t),URo=r(tSe," \u2014 "),IO=n(tSe,"A",{href:!0});var G4t=s(IO);JRo=r(G4t,"DistilBertForMaskedLM"),G4t.forEach(t),YRo=r(tSe," (DistilBERT model)"),tSe.forEach(t),KRo=i(H),j7=n(H,"LI",{});var aSe=s(j7);dhe=n(aSe,"STRONG",{});var O4t=s(dhe);ZRo=r(O4t,"electra"),O4t.forEach(t),ePo=r(aSe," \u2014 "),NO=n(aSe,"A",{href:!0});var V4t=s(NO);oPo=r(V4t,"ElectraForMaskedLM"),V4t.forEach(t),rPo=r(aSe," (ELECTRA model)"),aSe.forEach(t),tPo=i(H),D7=n(H,"LI",{});var nSe=s(D7);che=n(nSe,"STRONG",{});var X4t=s(che);aPo=r(X4t,"flaubert"),X4t.forEach(t),nPo=r(nSe," \u2014 "),qO=n(nSe,"A",{href:!0});var z4t=s(qO);sPo=r(z4t,"FlaubertWithLMHeadModel"),z4t.forEach(t),lPo=r(nSe," (FlauBERT model)"),nSe.forEach(t),iPo=i(H),G7=n(H,"LI",{});var sSe=s(G7);fhe=n(sSe,"STRONG",{});var Q4t=s(fhe);dPo=r(Q4t,"fnet"),Q4t.forEach(t),cPo=r(sSe," \u2014 "),jO=n(sSe,"A",{href:!0});var W4t=s(jO);fPo=r(W4t,"FNetForMaskedLM"),W4t.forEach(t),mPo=r(sSe," (FNet model)"),sSe.forEach(t),gPo=i(H),O7=n(H,"LI",{});var lSe=s(O7);mhe=n(lSe,"STRONG",{});var H4t=s(mhe);hPo=r(H4t,"funnel"),H4t.forEach(t),pPo=r(lSe," \u2014 "),DO=n(lSe,"A",{href:!0});var U4t=s(DO);_Po=r(U4t,"FunnelForMaskedLM"),U4t.forEach(t),uPo=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),bPo=i(H),V7=n(H,"LI",{});var iSe=s(V7);ghe=n(iSe,"STRONG",{});var J4t=s(ghe);vPo=r(J4t,"ibert"),J4t.forEach(t),FPo=r(iSe," \u2014 "),GO=n(iSe,"A",{href:!0});var Y4t=s(GO);TPo=r(Y4t,"IBertForMaskedLM"),Y4t.forEach(t),MPo=r(iSe," (I-BERT model)"),iSe.forEach(t),EPo=i(H),X7=n(H,"LI",{});var dSe=s(X7);hhe=n(dSe,"STRONG",{});var K4t=s(hhe);CPo=r(K4t,"layoutlm"),K4t.forEach(t),wPo=r(dSe," \u2014 "),OO=n(dSe,"A",{href:!0});var Z4t=s(OO);APo=r(Z4t,"LayoutLMForMaskedLM"),Z4t.forEach(t),LPo=r(dSe," (LayoutLM model)"),dSe.forEach(t),yPo=i(H),z7=n(H,"LI",{});var cSe=s(z7);phe=n(cSe,"STRONG",{});var e2t=s(phe);xPo=r(e2t,"longformer"),e2t.forEach(t),$Po=r(cSe," \u2014 "),VO=n(cSe,"A",{href:!0});var o2t=s(VO);kPo=r(o2t,"LongformerForMaskedLM"),o2t.forEach(t),SPo=r(cSe," (Longformer model)"),cSe.forEach(t),RPo=i(H),Q7=n(H,"LI",{});var fSe=s(Q7);_he=n(fSe,"STRONG",{});var r2t=s(_he);PPo=r(r2t,"luke"),r2t.forEach(t),BPo=r(fSe," \u2014 "),XO=n(fSe,"A",{href:!0});var t2t=s(XO);IPo=r(t2t,"LukeForMaskedLM"),t2t.forEach(t),NPo=r(fSe," (LUKE model)"),fSe.forEach(t),qPo=i(H),W7=n(H,"LI",{});var mSe=s(W7);uhe=n(mSe,"STRONG",{});var a2t=s(uhe);jPo=r(a2t,"mbart"),a2t.forEach(t),DPo=r(mSe," \u2014 "),zO=n(mSe,"A",{href:!0});var n2t=s(zO);GPo=r(n2t,"MBartForConditionalGeneration"),n2t.forEach(t),OPo=r(mSe," (mBART model)"),mSe.forEach(t),VPo=i(H),H7=n(H,"LI",{});var gSe=s(H7);bhe=n(gSe,"STRONG",{});var s2t=s(bhe);XPo=r(s2t,"megatron-bert"),s2t.forEach(t),zPo=r(gSe," \u2014 "),QO=n(gSe,"A",{href:!0});var l2t=s(QO);QPo=r(l2t,"MegatronBertForMaskedLM"),l2t.forEach(t),WPo=r(gSe," (Megatron-BERT model)"),gSe.forEach(t),HPo=i(H),U7=n(H,"LI",{});var hSe=s(U7);vhe=n(hSe,"STRONG",{});var i2t=s(vhe);UPo=r(i2t,"mobilebert"),i2t.forEach(t),JPo=r(hSe," \u2014 "),WO=n(hSe,"A",{href:!0});var d2t=s(WO);YPo=r(d2t,"MobileBertForMaskedLM"),d2t.forEach(t),KPo=r(hSe," (MobileBERT model)"),hSe.forEach(t),ZPo=i(H),J7=n(H,"LI",{});var pSe=s(J7);Fhe=n(pSe,"STRONG",{});var c2t=s(Fhe);eBo=r(c2t,"mpnet"),c2t.forEach(t),oBo=r(pSe," \u2014 "),HO=n(pSe,"A",{href:!0});var f2t=s(HO);rBo=r(f2t,"MPNetForMaskedLM"),f2t.forEach(t),tBo=r(pSe," (MPNet model)"),pSe.forEach(t),aBo=i(H),Y7=n(H,"LI",{});var _Se=s(Y7);The=n(_Se,"STRONG",{});var m2t=s(The);nBo=r(m2t,"mvp"),m2t.forEach(t),sBo=r(_Se," \u2014 "),UO=n(_Se,"A",{href:!0});var g2t=s(UO);lBo=r(g2t,"MvpForConditionalGeneration"),g2t.forEach(t),iBo=r(_Se," (MVP model)"),_Se.forEach(t),dBo=i(H),K7=n(H,"LI",{});var uSe=s(K7);Mhe=n(uSe,"STRONG",{});var h2t=s(Mhe);cBo=r(h2t,"nezha"),h2t.forEach(t),fBo=r(uSe," \u2014 "),JO=n(uSe,"A",{href:!0});var p2t=s(JO);mBo=r(p2t,"NezhaForMaskedLM"),p2t.forEach(t),gBo=r(uSe," (Nezha model)"),uSe.forEach(t),hBo=i(H),Z7=n(H,"LI",{});var bSe=s(Z7);Ehe=n(bSe,"STRONG",{});var _2t=s(Ehe);pBo=r(_2t,"nystromformer"),_2t.forEach(t),_Bo=r(bSe," \u2014 "),YO=n(bSe,"A",{href:!0});var u2t=s(YO);uBo=r(u2t,"NystromformerForMaskedLM"),u2t.forEach(t),bBo=r(bSe," (Nystr\xF6mformer model)"),bSe.forEach(t),vBo=i(H),e4=n(H,"LI",{});var vSe=s(e4);Che=n(vSe,"STRONG",{});var b2t=s(Che);FBo=r(b2t,"perceiver"),b2t.forEach(t),TBo=r(vSe," \u2014 "),KO=n(vSe,"A",{href:!0});var v2t=s(KO);MBo=r(v2t,"PerceiverForMaskedLM"),v2t.forEach(t),EBo=r(vSe," (Perceiver model)"),vSe.forEach(t),CBo=i(H),o4=n(H,"LI",{});var FSe=s(o4);whe=n(FSe,"STRONG",{});var F2t=s(whe);wBo=r(F2t,"qdqbert"),F2t.forEach(t),ABo=r(FSe," \u2014 "),ZO=n(FSe,"A",{href:!0});var T2t=s(ZO);LBo=r(T2t,"QDQBertForMaskedLM"),T2t.forEach(t),yBo=r(FSe," (QDQBert model)"),FSe.forEach(t),xBo=i(H),r4=n(H,"LI",{});var TSe=s(r4);Ahe=n(TSe,"STRONG",{});var M2t=s(Ahe);$Bo=r(M2t,"reformer"),M2t.forEach(t),kBo=r(TSe," \u2014 "),eV=n(TSe,"A",{href:!0});var E2t=s(eV);SBo=r(E2t,"ReformerForMaskedLM"),E2t.forEach(t),RBo=r(TSe," (Reformer model)"),TSe.forEach(t),PBo=i(H),t4=n(H,"LI",{});var MSe=s(t4);Lhe=n(MSe,"STRONG",{});var C2t=s(Lhe);BBo=r(C2t,"rembert"),C2t.forEach(t),IBo=r(MSe," \u2014 "),oV=n(MSe,"A",{href:!0});var w2t=s(oV);NBo=r(w2t,"RemBertForMaskedLM"),w2t.forEach(t),qBo=r(MSe," (RemBERT model)"),MSe.forEach(t),jBo=i(H),a4=n(H,"LI",{});var ESe=s(a4);yhe=n(ESe,"STRONG",{});var A2t=s(yhe);DBo=r(A2t,"roberta"),A2t.forEach(t),GBo=r(ESe," \u2014 "),rV=n(ESe,"A",{href:!0});var L2t=s(rV);OBo=r(L2t,"RobertaForMaskedLM"),L2t.forEach(t),VBo=r(ESe," (RoBERTa model)"),ESe.forEach(t),XBo=i(H),n4=n(H,"LI",{});var CSe=s(n4);xhe=n(CSe,"STRONG",{});var y2t=s(xhe);zBo=r(y2t,"roformer"),y2t.forEach(t),QBo=r(CSe," \u2014 "),tV=n(CSe,"A",{href:!0});var x2t=s(tV);WBo=r(x2t,"RoFormerForMaskedLM"),x2t.forEach(t),HBo=r(CSe," (RoFormer model)"),CSe.forEach(t),UBo=i(H),s4=n(H,"LI",{});var wSe=s(s4);$he=n(wSe,"STRONG",{});var $2t=s($he);JBo=r($2t,"squeezebert"),$2t.forEach(t),YBo=r(wSe," \u2014 "),aV=n(wSe,"A",{href:!0});var k2t=s(aV);KBo=r(k2t,"SqueezeBertForMaskedLM"),k2t.forEach(t),ZBo=r(wSe," (SqueezeBERT model)"),wSe.forEach(t),eIo=i(H),l4=n(H,"LI",{});var ASe=s(l4);khe=n(ASe,"STRONG",{});var S2t=s(khe);oIo=r(S2t,"tapas"),S2t.forEach(t),rIo=r(ASe," \u2014 "),nV=n(ASe,"A",{href:!0});var R2t=s(nV);tIo=r(R2t,"TapasForMaskedLM"),R2t.forEach(t),aIo=r(ASe," (TAPAS model)"),ASe.forEach(t),nIo=i(H),i4=n(H,"LI",{});var LSe=s(i4);She=n(LSe,"STRONG",{});var P2t=s(She);sIo=r(P2t,"wav2vec2"),P2t.forEach(t),lIo=r(LSe," \u2014 "),Rhe=n(LSe,"CODE",{});var B2t=s(Rhe);iIo=r(B2t,"Wav2Vec2ForMaskedLM"),B2t.forEach(t),dIo=r(LSe," (Wav2Vec2 model)"),LSe.forEach(t),cIo=i(H),d4=n(H,"LI",{});var ySe=s(d4);Phe=n(ySe,"STRONG",{});var I2t=s(Phe);fIo=r(I2t,"xlm"),I2t.forEach(t),mIo=r(ySe," \u2014 "),sV=n(ySe,"A",{href:!0});var N2t=s(sV);gIo=r(N2t,"XLMWithLMHeadModel"),N2t.forEach(t),hIo=r(ySe," (XLM model)"),ySe.forEach(t),pIo=i(H),c4=n(H,"LI",{});var xSe=s(c4);Bhe=n(xSe,"STRONG",{});var q2t=s(Bhe);_Io=r(q2t,"xlm-roberta"),q2t.forEach(t),uIo=r(xSe," \u2014 "),lV=n(xSe,"A",{href:!0});var j2t=s(lV);bIo=r(j2t,"XLMRobertaForMaskedLM"),j2t.forEach(t),vIo=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),FIo=i(H),f4=n(H,"LI",{});var $Se=s(f4);Ihe=n($Se,"STRONG",{});var D2t=s(Ihe);TIo=r(D2t,"xlm-roberta-xl"),D2t.forEach(t),MIo=r($Se," \u2014 "),iV=n($Se,"A",{href:!0});var G2t=s(iV);EIo=r(G2t,"XLMRobertaXLForMaskedLM"),G2t.forEach(t),CIo=r($Se," (XLM-RoBERTa-XL model)"),$Se.forEach(t),wIo=i(H),m4=n(H,"LI",{});var kSe=s(m4);Nhe=n(kSe,"STRONG",{});var O2t=s(Nhe);AIo=r(O2t,"yoso"),O2t.forEach(t),LIo=r(kSe," \u2014 "),dV=n(kSe,"A",{href:!0});var V2t=s(dV);yIo=r(V2t,"YosoForMaskedLM"),V2t.forEach(t),xIo=r(kSe," (YOSO model)"),kSe.forEach(t),H.forEach(t),$Io=i(ia),g4=n(ia,"P",{});var SSe=s(g4);kIo=r(SSe,"The model is set in evaluation mode by default using "),qhe=n(SSe,"CODE",{});var X2t=s(qhe);SIo=r(X2t,"model.eval()"),X2t.forEach(t),RIo=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(SSe,"CODE",{});var z2t=s(jhe);PIo=r(z2t,"model.train()"),z2t.forEach(t),SSe.forEach(t),BIo=i(ia),T(h4.$$.fragment,ia),ia.forEach(t),tl.forEach(t),BVe=i(f),Yi=n(f,"H2",{class:!0});var Gze=s(Yi);p4=n(Gze,"A",{id:!0,class:!0,href:!0});var Q2t=s(p4);Dhe=n(Q2t,"SPAN",{});var W2t=s(Dhe);T(Gy.$$.fragment,W2t),W2t.forEach(t),Q2t.forEach(t),IIo=i(Gze),Ghe=n(Gze,"SPAN",{});var H2t=s(Ghe);NIo=r(H2t,"AutoModelForSeq2SeqLM"),H2t.forEach(t),Gze.forEach(t),IVe=i(f),Ro=n(f,"DIV",{class:!0});var al=s(Ro);T(Oy.$$.fragment,al),qIo=i(al),Ki=n(al,"P",{});var vre=s(Ki);jIo=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cV=n(vre,"A",{href:!0});var U2t=s(cV);DIo=r(U2t,"from_pretrained()"),U2t.forEach(t),GIo=r(vre," class method or the "),fV=n(vre,"A",{href:!0});var J2t=s(fV);OIo=r(J2t,"from_config()"),J2t.forEach(t),VIo=r(vre,` class
method.`),vre.forEach(t),XIo=i(al),Vy=n(al,"P",{});var Oze=s(Vy);zIo=r(Oze,"This class cannot be instantiated directly using "),Ohe=n(Oze,"CODE",{});var Y2t=s(Ohe);QIo=r(Y2t,"__init__()"),Y2t.forEach(t),WIo=r(Oze," (throws an error)."),Oze.forEach(t),HIo=i(al),ct=n(al,"DIV",{class:!0});var s6=s(ct);T(Xy.$$.fragment,s6),UIo=i(s6),Vhe=n(s6,"P",{});var K2t=s(Vhe);JIo=r(K2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K2t.forEach(t),YIo=i(s6),Zi=n(s6,"P",{});var Fre=s(Zi);KIo=r(Fre,`Note:
Loading a model from its configuration file does `),Xhe=n(Fre,"STRONG",{});var Z2t=s(Xhe);ZIo=r(Z2t,"not"),Z2t.forEach(t),eNo=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(Fre,"A",{href:!0});var ebt=s(mV);oNo=r(ebt,"from_pretrained()"),ebt.forEach(t),rNo=r(Fre," to load the model weights."),Fre.forEach(t),tNo=i(s6),T(_4.$$.fragment,s6),s6.forEach(t),aNo=i(al),eo=n(al,"DIV",{class:!0});var da=s(eo);T(zy.$$.fragment,da),nNo=i(da),zhe=n(da,"P",{});var obt=s(zhe);sNo=r(obt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),obt.forEach(t),lNo=i(da),qa=n(da,"P",{});var l6=s(qa);iNo=r(l6,"The model class to instantiate is selected based on the "),Qhe=n(l6,"CODE",{});var rbt=s(Qhe);dNo=r(rbt,"model_type"),rbt.forEach(t),cNo=r(l6,` property of the config object (either
passed as an argument or loaded from `),Whe=n(l6,"CODE",{});var tbt=s(Whe);fNo=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),mNo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(l6,"CODE",{});var abt=s(Hhe);gNo=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),hNo=r(l6,":"),l6.forEach(t),pNo=i(da),pe=n(da,"UL",{});var be=s(pe);u4=n(be,"LI",{});var RSe=s(u4);Uhe=n(RSe,"STRONG",{});var nbt=s(Uhe);_No=r(nbt,"bart"),nbt.forEach(t),uNo=r(RSe," \u2014 "),gV=n(RSe,"A",{href:!0});var sbt=s(gV);bNo=r(sbt,"BartForConditionalGeneration"),sbt.forEach(t),vNo=r(RSe," (BART model)"),RSe.forEach(t),FNo=i(be),b4=n(be,"LI",{});var PSe=s(b4);Jhe=n(PSe,"STRONG",{});var lbt=s(Jhe);TNo=r(lbt,"bigbird_pegasus"),lbt.forEach(t),MNo=r(PSe," \u2014 "),hV=n(PSe,"A",{href:!0});var ibt=s(hV);ENo=r(ibt,"BigBirdPegasusForConditionalGeneration"),ibt.forEach(t),CNo=r(PSe," (BigBird-Pegasus model)"),PSe.forEach(t),wNo=i(be),v4=n(be,"LI",{});var BSe=s(v4);Yhe=n(BSe,"STRONG",{});var dbt=s(Yhe);ANo=r(dbt,"blenderbot"),dbt.forEach(t),LNo=r(BSe," \u2014 "),pV=n(BSe,"A",{href:!0});var cbt=s(pV);yNo=r(cbt,"BlenderbotForConditionalGeneration"),cbt.forEach(t),xNo=r(BSe," (Blenderbot model)"),BSe.forEach(t),$No=i(be),F4=n(be,"LI",{});var ISe=s(F4);Khe=n(ISe,"STRONG",{});var fbt=s(Khe);kNo=r(fbt,"blenderbot-small"),fbt.forEach(t),SNo=r(ISe," \u2014 "),_V=n(ISe,"A",{href:!0});var mbt=s(_V);RNo=r(mbt,"BlenderbotSmallForConditionalGeneration"),mbt.forEach(t),PNo=r(ISe," (BlenderbotSmall model)"),ISe.forEach(t),BNo=i(be),T4=n(be,"LI",{});var NSe=s(T4);Zhe=n(NSe,"STRONG",{});var gbt=s(Zhe);INo=r(gbt,"encoder-decoder"),gbt.forEach(t),NNo=r(NSe," \u2014 "),uV=n(NSe,"A",{href:!0});var hbt=s(uV);qNo=r(hbt,"EncoderDecoderModel"),hbt.forEach(t),jNo=r(NSe," (Encoder decoder model)"),NSe.forEach(t),DNo=i(be),M4=n(be,"LI",{});var qSe=s(M4);epe=n(qSe,"STRONG",{});var pbt=s(epe);GNo=r(pbt,"fsmt"),pbt.forEach(t),ONo=r(qSe," \u2014 "),bV=n(qSe,"A",{href:!0});var _bt=s(bV);VNo=r(_bt,"FSMTForConditionalGeneration"),_bt.forEach(t),XNo=r(qSe," (FairSeq Machine-Translation model)"),qSe.forEach(t),zNo=i(be),E4=n(be,"LI",{});var jSe=s(E4);ope=n(jSe,"STRONG",{});var ubt=s(ope);QNo=r(ubt,"led"),ubt.forEach(t),WNo=r(jSe," \u2014 "),vV=n(jSe,"A",{href:!0});var bbt=s(vV);HNo=r(bbt,"LEDForConditionalGeneration"),bbt.forEach(t),UNo=r(jSe," (LED model)"),jSe.forEach(t),JNo=i(be),C4=n(be,"LI",{});var DSe=s(C4);rpe=n(DSe,"STRONG",{});var vbt=s(rpe);YNo=r(vbt,"longt5"),vbt.forEach(t),KNo=r(DSe," \u2014 "),FV=n(DSe,"A",{href:!0});var Fbt=s(FV);ZNo=r(Fbt,"LongT5ForConditionalGeneration"),Fbt.forEach(t),eqo=r(DSe," (LongT5 model)"),DSe.forEach(t),oqo=i(be),w4=n(be,"LI",{});var GSe=s(w4);tpe=n(GSe,"STRONG",{});var Tbt=s(tpe);rqo=r(Tbt,"m2m_100"),Tbt.forEach(t),tqo=r(GSe," \u2014 "),TV=n(GSe,"A",{href:!0});var Mbt=s(TV);aqo=r(Mbt,"M2M100ForConditionalGeneration"),Mbt.forEach(t),nqo=r(GSe," (M2M100 model)"),GSe.forEach(t),sqo=i(be),A4=n(be,"LI",{});var OSe=s(A4);ape=n(OSe,"STRONG",{});var Ebt=s(ape);lqo=r(Ebt,"marian"),Ebt.forEach(t),iqo=r(OSe," \u2014 "),MV=n(OSe,"A",{href:!0});var Cbt=s(MV);dqo=r(Cbt,"MarianMTModel"),Cbt.forEach(t),cqo=r(OSe," (Marian model)"),OSe.forEach(t),fqo=i(be),L4=n(be,"LI",{});var VSe=s(L4);npe=n(VSe,"STRONG",{});var wbt=s(npe);mqo=r(wbt,"mbart"),wbt.forEach(t),gqo=r(VSe," \u2014 "),EV=n(VSe,"A",{href:!0});var Abt=s(EV);hqo=r(Abt,"MBartForConditionalGeneration"),Abt.forEach(t),pqo=r(VSe," (mBART model)"),VSe.forEach(t),_qo=i(be),y4=n(be,"LI",{});var XSe=s(y4);spe=n(XSe,"STRONG",{});var Lbt=s(spe);uqo=r(Lbt,"mt5"),Lbt.forEach(t),bqo=r(XSe," \u2014 "),CV=n(XSe,"A",{href:!0});var ybt=s(CV);vqo=r(ybt,"MT5ForConditionalGeneration"),ybt.forEach(t),Fqo=r(XSe," (MT5 model)"),XSe.forEach(t),Tqo=i(be),x4=n(be,"LI",{});var zSe=s(x4);lpe=n(zSe,"STRONG",{});var xbt=s(lpe);Mqo=r(xbt,"mvp"),xbt.forEach(t),Eqo=r(zSe," \u2014 "),wV=n(zSe,"A",{href:!0});var $bt=s(wV);Cqo=r($bt,"MvpForConditionalGeneration"),$bt.forEach(t),wqo=r(zSe," (MVP model)"),zSe.forEach(t),Aqo=i(be),$4=n(be,"LI",{});var QSe=s($4);ipe=n(QSe,"STRONG",{});var kbt=s(ipe);Lqo=r(kbt,"pegasus"),kbt.forEach(t),yqo=r(QSe," \u2014 "),AV=n(QSe,"A",{href:!0});var Sbt=s(AV);xqo=r(Sbt,"PegasusForConditionalGeneration"),Sbt.forEach(t),$qo=r(QSe," (Pegasus model)"),QSe.forEach(t),kqo=i(be),k4=n(be,"LI",{});var WSe=s(k4);dpe=n(WSe,"STRONG",{});var Rbt=s(dpe);Sqo=r(Rbt,"plbart"),Rbt.forEach(t),Rqo=r(WSe," \u2014 "),LV=n(WSe,"A",{href:!0});var Pbt=s(LV);Pqo=r(Pbt,"PLBartForConditionalGeneration"),Pbt.forEach(t),Bqo=r(WSe," (PLBart model)"),WSe.forEach(t),Iqo=i(be),S4=n(be,"LI",{});var HSe=s(S4);cpe=n(HSe,"STRONG",{});var Bbt=s(cpe);Nqo=r(Bbt,"prophetnet"),Bbt.forEach(t),qqo=r(HSe," \u2014 "),yV=n(HSe,"A",{href:!0});var Ibt=s(yV);jqo=r(Ibt,"ProphetNetForConditionalGeneration"),Ibt.forEach(t),Dqo=r(HSe," (ProphetNet model)"),HSe.forEach(t),Gqo=i(be),R4=n(be,"LI",{});var USe=s(R4);fpe=n(USe,"STRONG",{});var Nbt=s(fpe);Oqo=r(Nbt,"t5"),Nbt.forEach(t),Vqo=r(USe," \u2014 "),xV=n(USe,"A",{href:!0});var qbt=s(xV);Xqo=r(qbt,"T5ForConditionalGeneration"),qbt.forEach(t),zqo=r(USe," (T5 model)"),USe.forEach(t),Qqo=i(be),P4=n(be,"LI",{});var JSe=s(P4);mpe=n(JSe,"STRONG",{});var jbt=s(mpe);Wqo=r(jbt,"xlm-prophetnet"),jbt.forEach(t),Hqo=r(JSe," \u2014 "),$V=n(JSe,"A",{href:!0});var Dbt=s($V);Uqo=r(Dbt,"XLMProphetNetForConditionalGeneration"),Dbt.forEach(t),Jqo=r(JSe," (XLM-ProphetNet model)"),JSe.forEach(t),be.forEach(t),Yqo=i(da),B4=n(da,"P",{});var YSe=s(B4);Kqo=r(YSe,"The model is set in evaluation mode by default using "),gpe=n(YSe,"CODE",{});var Gbt=s(gpe);Zqo=r(Gbt,"model.eval()"),Gbt.forEach(t),ejo=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(YSe,"CODE",{});var Obt=s(hpe);ojo=r(Obt,"model.train()"),Obt.forEach(t),YSe.forEach(t),rjo=i(da),T(I4.$$.fragment,da),da.forEach(t),al.forEach(t),NVe=i(f),ed=n(f,"H2",{class:!0});var Vze=s(ed);N4=n(Vze,"A",{id:!0,class:!0,href:!0});var Vbt=s(N4);ppe=n(Vbt,"SPAN",{});var Xbt=s(ppe);T(Qy.$$.fragment,Xbt),Xbt.forEach(t),Vbt.forEach(t),tjo=i(Vze),_pe=n(Vze,"SPAN",{});var zbt=s(_pe);ajo=r(zbt,"AutoModelForSequenceClassification"),zbt.forEach(t),Vze.forEach(t),qVe=i(f),Po=n(f,"DIV",{class:!0});var nl=s(Po);T(Wy.$$.fragment,nl),njo=i(nl),od=n(nl,"P",{});var Tre=s(od);sjo=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kV=n(Tre,"A",{href:!0});var Qbt=s(kV);ljo=r(Qbt,"from_pretrained()"),Qbt.forEach(t),ijo=r(Tre," class method or the "),SV=n(Tre,"A",{href:!0});var Wbt=s(SV);djo=r(Wbt,"from_config()"),Wbt.forEach(t),cjo=r(Tre,` class
method.`),Tre.forEach(t),fjo=i(nl),Hy=n(nl,"P",{});var Xze=s(Hy);mjo=r(Xze,"This class cannot be instantiated directly using "),upe=n(Xze,"CODE",{});var Hbt=s(upe);gjo=r(Hbt,"__init__()"),Hbt.forEach(t),hjo=r(Xze," (throws an error)."),Xze.forEach(t),pjo=i(nl),ft=n(nl,"DIV",{class:!0});var i6=s(ft);T(Uy.$$.fragment,i6),_jo=i(i6),bpe=n(i6,"P",{});var Ubt=s(bpe);ujo=r(Ubt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ubt.forEach(t),bjo=i(i6),rd=n(i6,"P",{});var Mre=s(rd);vjo=r(Mre,`Note:
Loading a model from its configuration file does `),vpe=n(Mre,"STRONG",{});var Jbt=s(vpe);Fjo=r(Jbt,"not"),Jbt.forEach(t),Tjo=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Mre,"A",{href:!0});var Ybt=s(RV);Mjo=r(Ybt,"from_pretrained()"),Ybt.forEach(t),Ejo=r(Mre," to load the model weights."),Mre.forEach(t),Cjo=i(i6),T(q4.$$.fragment,i6),i6.forEach(t),wjo=i(nl),oo=n(nl,"DIV",{class:!0});var ca=s(oo);T(Jy.$$.fragment,ca),Ajo=i(ca),Fpe=n(ca,"P",{});var Kbt=s(Fpe);Ljo=r(Kbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kbt.forEach(t),yjo=i(ca),ja=n(ca,"P",{});var d6=s(ja);xjo=r(d6,"The model class to instantiate is selected based on the "),Tpe=n(d6,"CODE",{});var Zbt=s(Tpe);$jo=r(Zbt,"model_type"),Zbt.forEach(t),kjo=r(d6,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(d6,"CODE",{});var evt=s(Mpe);Sjo=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),Rjo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(d6,"CODE",{});var ovt=s(Epe);Pjo=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),Bjo=r(d6,":"),d6.forEach(t),Ijo=i(ca),N=n(ca,"UL",{});var q=s(N);j4=n(q,"LI",{});var KSe=s(j4);Cpe=n(KSe,"STRONG",{});var rvt=s(Cpe);Njo=r(rvt,"albert"),rvt.forEach(t),qjo=r(KSe," \u2014 "),PV=n(KSe,"A",{href:!0});var tvt=s(PV);jjo=r(tvt,"AlbertForSequenceClassification"),tvt.forEach(t),Djo=r(KSe," (ALBERT model)"),KSe.forEach(t),Gjo=i(q),D4=n(q,"LI",{});var ZSe=s(D4);wpe=n(ZSe,"STRONG",{});var avt=s(wpe);Ojo=r(avt,"bart"),avt.forEach(t),Vjo=r(ZSe," \u2014 "),BV=n(ZSe,"A",{href:!0});var nvt=s(BV);Xjo=r(nvt,"BartForSequenceClassification"),nvt.forEach(t),zjo=r(ZSe," (BART model)"),ZSe.forEach(t),Qjo=i(q),G4=n(q,"LI",{});var eRe=s(G4);Ape=n(eRe,"STRONG",{});var svt=s(Ape);Wjo=r(svt,"bert"),svt.forEach(t),Hjo=r(eRe," \u2014 "),IV=n(eRe,"A",{href:!0});var lvt=s(IV);Ujo=r(lvt,"BertForSequenceClassification"),lvt.forEach(t),Jjo=r(eRe," (BERT model)"),eRe.forEach(t),Yjo=i(q),O4=n(q,"LI",{});var oRe=s(O4);Lpe=n(oRe,"STRONG",{});var ivt=s(Lpe);Kjo=r(ivt,"big_bird"),ivt.forEach(t),Zjo=r(oRe," \u2014 "),NV=n(oRe,"A",{href:!0});var dvt=s(NV);eDo=r(dvt,"BigBirdForSequenceClassification"),dvt.forEach(t),oDo=r(oRe," (BigBird model)"),oRe.forEach(t),rDo=i(q),V4=n(q,"LI",{});var rRe=s(V4);ype=n(rRe,"STRONG",{});var cvt=s(ype);tDo=r(cvt,"bigbird_pegasus"),cvt.forEach(t),aDo=r(rRe," \u2014 "),qV=n(rRe,"A",{href:!0});var fvt=s(qV);nDo=r(fvt,"BigBirdPegasusForSequenceClassification"),fvt.forEach(t),sDo=r(rRe," (BigBird-Pegasus model)"),rRe.forEach(t),lDo=i(q),X4=n(q,"LI",{});var tRe=s(X4);xpe=n(tRe,"STRONG",{});var mvt=s(xpe);iDo=r(mvt,"bloom"),mvt.forEach(t),dDo=r(tRe," \u2014 "),jV=n(tRe,"A",{href:!0});var gvt=s(jV);cDo=r(gvt,"BloomForSequenceClassification"),gvt.forEach(t),fDo=r(tRe," (BLOOM model)"),tRe.forEach(t),mDo=i(q),z4=n(q,"LI",{});var aRe=s(z4);$pe=n(aRe,"STRONG",{});var hvt=s($pe);gDo=r(hvt,"camembert"),hvt.forEach(t),hDo=r(aRe," \u2014 "),DV=n(aRe,"A",{href:!0});var pvt=s(DV);pDo=r(pvt,"CamembertForSequenceClassification"),pvt.forEach(t),_Do=r(aRe," (CamemBERT model)"),aRe.forEach(t),uDo=i(q),Q4=n(q,"LI",{});var nRe=s(Q4);kpe=n(nRe,"STRONG",{});var _vt=s(kpe);bDo=r(_vt,"canine"),_vt.forEach(t),vDo=r(nRe," \u2014 "),GV=n(nRe,"A",{href:!0});var uvt=s(GV);FDo=r(uvt,"CanineForSequenceClassification"),uvt.forEach(t),TDo=r(nRe," (CANINE model)"),nRe.forEach(t),MDo=i(q),W4=n(q,"LI",{});var sRe=s(W4);Spe=n(sRe,"STRONG",{});var bvt=s(Spe);EDo=r(bvt,"convbert"),bvt.forEach(t),CDo=r(sRe," \u2014 "),OV=n(sRe,"A",{href:!0});var vvt=s(OV);wDo=r(vvt,"ConvBertForSequenceClassification"),vvt.forEach(t),ADo=r(sRe," (ConvBERT model)"),sRe.forEach(t),LDo=i(q),H4=n(q,"LI",{});var lRe=s(H4);Rpe=n(lRe,"STRONG",{});var Fvt=s(Rpe);yDo=r(Fvt,"ctrl"),Fvt.forEach(t),xDo=r(lRe," \u2014 "),VV=n(lRe,"A",{href:!0});var Tvt=s(VV);$Do=r(Tvt,"CTRLForSequenceClassification"),Tvt.forEach(t),kDo=r(lRe," (CTRL model)"),lRe.forEach(t),SDo=i(q),U4=n(q,"LI",{});var iRe=s(U4);Ppe=n(iRe,"STRONG",{});var Mvt=s(Ppe);RDo=r(Mvt,"data2vec-text"),Mvt.forEach(t),PDo=r(iRe," \u2014 "),XV=n(iRe,"A",{href:!0});var Evt=s(XV);BDo=r(Evt,"Data2VecTextForSequenceClassification"),Evt.forEach(t),IDo=r(iRe," (Data2VecText model)"),iRe.forEach(t),NDo=i(q),J4=n(q,"LI",{});var dRe=s(J4);Bpe=n(dRe,"STRONG",{});var Cvt=s(Bpe);qDo=r(Cvt,"deberta"),Cvt.forEach(t),jDo=r(dRe," \u2014 "),zV=n(dRe,"A",{href:!0});var wvt=s(zV);DDo=r(wvt,"DebertaForSequenceClassification"),wvt.forEach(t),GDo=r(dRe," (DeBERTa model)"),dRe.forEach(t),ODo=i(q),Y4=n(q,"LI",{});var cRe=s(Y4);Ipe=n(cRe,"STRONG",{});var Avt=s(Ipe);VDo=r(Avt,"deberta-v2"),Avt.forEach(t),XDo=r(cRe," \u2014 "),QV=n(cRe,"A",{href:!0});var Lvt=s(QV);zDo=r(Lvt,"DebertaV2ForSequenceClassification"),Lvt.forEach(t),QDo=r(cRe," (DeBERTa-v2 model)"),cRe.forEach(t),WDo=i(q),K4=n(q,"LI",{});var fRe=s(K4);Npe=n(fRe,"STRONG",{});var yvt=s(Npe);HDo=r(yvt,"distilbert"),yvt.forEach(t),UDo=r(fRe," \u2014 "),WV=n(fRe,"A",{href:!0});var xvt=s(WV);JDo=r(xvt,"DistilBertForSequenceClassification"),xvt.forEach(t),YDo=r(fRe," (DistilBERT model)"),fRe.forEach(t),KDo=i(q),Z4=n(q,"LI",{});var mRe=s(Z4);qpe=n(mRe,"STRONG",{});var $vt=s(qpe);ZDo=r($vt,"electra"),$vt.forEach(t),eGo=r(mRe," \u2014 "),HV=n(mRe,"A",{href:!0});var kvt=s(HV);oGo=r(kvt,"ElectraForSequenceClassification"),kvt.forEach(t),rGo=r(mRe," (ELECTRA model)"),mRe.forEach(t),tGo=i(q),e2=n(q,"LI",{});var gRe=s(e2);jpe=n(gRe,"STRONG",{});var Svt=s(jpe);aGo=r(Svt,"flaubert"),Svt.forEach(t),nGo=r(gRe," \u2014 "),UV=n(gRe,"A",{href:!0});var Rvt=s(UV);sGo=r(Rvt,"FlaubertForSequenceClassification"),Rvt.forEach(t),lGo=r(gRe," (FlauBERT model)"),gRe.forEach(t),iGo=i(q),o2=n(q,"LI",{});var hRe=s(o2);Dpe=n(hRe,"STRONG",{});var Pvt=s(Dpe);dGo=r(Pvt,"fnet"),Pvt.forEach(t),cGo=r(hRe," \u2014 "),JV=n(hRe,"A",{href:!0});var Bvt=s(JV);fGo=r(Bvt,"FNetForSequenceClassification"),Bvt.forEach(t),mGo=r(hRe," (FNet model)"),hRe.forEach(t),gGo=i(q),r2=n(q,"LI",{});var pRe=s(r2);Gpe=n(pRe,"STRONG",{});var Ivt=s(Gpe);hGo=r(Ivt,"funnel"),Ivt.forEach(t),pGo=r(pRe," \u2014 "),YV=n(pRe,"A",{href:!0});var Nvt=s(YV);_Go=r(Nvt,"FunnelForSequenceClassification"),Nvt.forEach(t),uGo=r(pRe," (Funnel Transformer model)"),pRe.forEach(t),bGo=i(q),t2=n(q,"LI",{});var _Re=s(t2);Ope=n(_Re,"STRONG",{});var qvt=s(Ope);vGo=r(qvt,"gpt2"),qvt.forEach(t),FGo=r(_Re," \u2014 "),KV=n(_Re,"A",{href:!0});var jvt=s(KV);TGo=r(jvt,"GPT2ForSequenceClassification"),jvt.forEach(t),MGo=r(_Re," (OpenAI GPT-2 model)"),_Re.forEach(t),EGo=i(q),a2=n(q,"LI",{});var uRe=s(a2);Vpe=n(uRe,"STRONG",{});var Dvt=s(Vpe);CGo=r(Dvt,"gpt_neo"),Dvt.forEach(t),wGo=r(uRe," \u2014 "),ZV=n(uRe,"A",{href:!0});var Gvt=s(ZV);AGo=r(Gvt,"GPTNeoForSequenceClassification"),Gvt.forEach(t),LGo=r(uRe," (GPT Neo model)"),uRe.forEach(t),yGo=i(q),n2=n(q,"LI",{});var bRe=s(n2);Xpe=n(bRe,"STRONG",{});var Ovt=s(Xpe);xGo=r(Ovt,"gptj"),Ovt.forEach(t),$Go=r(bRe," \u2014 "),eX=n(bRe,"A",{href:!0});var Vvt=s(eX);kGo=r(Vvt,"GPTJForSequenceClassification"),Vvt.forEach(t),SGo=r(bRe," (GPT-J model)"),bRe.forEach(t),RGo=i(q),s2=n(q,"LI",{});var vRe=s(s2);zpe=n(vRe,"STRONG",{});var Xvt=s(zpe);PGo=r(Xvt,"ibert"),Xvt.forEach(t),BGo=r(vRe," \u2014 "),oX=n(vRe,"A",{href:!0});var zvt=s(oX);IGo=r(zvt,"IBertForSequenceClassification"),zvt.forEach(t),NGo=r(vRe," (I-BERT model)"),vRe.forEach(t),qGo=i(q),l2=n(q,"LI",{});var FRe=s(l2);Qpe=n(FRe,"STRONG",{});var Qvt=s(Qpe);jGo=r(Qvt,"layoutlm"),Qvt.forEach(t),DGo=r(FRe," \u2014 "),rX=n(FRe,"A",{href:!0});var Wvt=s(rX);GGo=r(Wvt,"LayoutLMForSequenceClassification"),Wvt.forEach(t),OGo=r(FRe," (LayoutLM model)"),FRe.forEach(t),VGo=i(q),i2=n(q,"LI",{});var TRe=s(i2);Wpe=n(TRe,"STRONG",{});var Hvt=s(Wpe);XGo=r(Hvt,"layoutlmv2"),Hvt.forEach(t),zGo=r(TRe," \u2014 "),tX=n(TRe,"A",{href:!0});var Uvt=s(tX);QGo=r(Uvt,"LayoutLMv2ForSequenceClassification"),Uvt.forEach(t),WGo=r(TRe," (LayoutLMv2 model)"),TRe.forEach(t),HGo=i(q),d2=n(q,"LI",{});var MRe=s(d2);Hpe=n(MRe,"STRONG",{});var Jvt=s(Hpe);UGo=r(Jvt,"layoutlmv3"),Jvt.forEach(t),JGo=r(MRe," \u2014 "),aX=n(MRe,"A",{href:!0});var Yvt=s(aX);YGo=r(Yvt,"LayoutLMv3ForSequenceClassification"),Yvt.forEach(t),KGo=r(MRe," (LayoutLMv3 model)"),MRe.forEach(t),ZGo=i(q),c2=n(q,"LI",{});var ERe=s(c2);Upe=n(ERe,"STRONG",{});var Kvt=s(Upe);eOo=r(Kvt,"led"),Kvt.forEach(t),oOo=r(ERe," \u2014 "),nX=n(ERe,"A",{href:!0});var Zvt=s(nX);rOo=r(Zvt,"LEDForSequenceClassification"),Zvt.forEach(t),tOo=r(ERe," (LED model)"),ERe.forEach(t),aOo=i(q),f2=n(q,"LI",{});var CRe=s(f2);Jpe=n(CRe,"STRONG",{});var e3t=s(Jpe);nOo=r(e3t,"longformer"),e3t.forEach(t),sOo=r(CRe," \u2014 "),sX=n(CRe,"A",{href:!0});var o3t=s(sX);lOo=r(o3t,"LongformerForSequenceClassification"),o3t.forEach(t),iOo=r(CRe," (Longformer model)"),CRe.forEach(t),dOo=i(q),m2=n(q,"LI",{});var wRe=s(m2);Ype=n(wRe,"STRONG",{});var r3t=s(Ype);cOo=r(r3t,"mbart"),r3t.forEach(t),fOo=r(wRe," \u2014 "),lX=n(wRe,"A",{href:!0});var t3t=s(lX);mOo=r(t3t,"MBartForSequenceClassification"),t3t.forEach(t),gOo=r(wRe," (mBART model)"),wRe.forEach(t),hOo=i(q),g2=n(q,"LI",{});var ARe=s(g2);Kpe=n(ARe,"STRONG",{});var a3t=s(Kpe);pOo=r(a3t,"megatron-bert"),a3t.forEach(t),_Oo=r(ARe," \u2014 "),iX=n(ARe,"A",{href:!0});var n3t=s(iX);uOo=r(n3t,"MegatronBertForSequenceClassification"),n3t.forEach(t),bOo=r(ARe," (Megatron-BERT model)"),ARe.forEach(t),vOo=i(q),h2=n(q,"LI",{});var LRe=s(h2);Zpe=n(LRe,"STRONG",{});var s3t=s(Zpe);FOo=r(s3t,"mobilebert"),s3t.forEach(t),TOo=r(LRe," \u2014 "),dX=n(LRe,"A",{href:!0});var l3t=s(dX);MOo=r(l3t,"MobileBertForSequenceClassification"),l3t.forEach(t),EOo=r(LRe," (MobileBERT model)"),LRe.forEach(t),COo=i(q),p2=n(q,"LI",{});var yRe=s(p2);e_e=n(yRe,"STRONG",{});var i3t=s(e_e);wOo=r(i3t,"mpnet"),i3t.forEach(t),AOo=r(yRe," \u2014 "),cX=n(yRe,"A",{href:!0});var d3t=s(cX);LOo=r(d3t,"MPNetForSequenceClassification"),d3t.forEach(t),yOo=r(yRe," (MPNet model)"),yRe.forEach(t),xOo=i(q),_2=n(q,"LI",{});var xRe=s(_2);o_e=n(xRe,"STRONG",{});var c3t=s(o_e);$Oo=r(c3t,"mvp"),c3t.forEach(t),kOo=r(xRe," \u2014 "),fX=n(xRe,"A",{href:!0});var f3t=s(fX);SOo=r(f3t,"MvpForSequenceClassification"),f3t.forEach(t),ROo=r(xRe," (MVP model)"),xRe.forEach(t),POo=i(q),u2=n(q,"LI",{});var $Re=s(u2);r_e=n($Re,"STRONG",{});var m3t=s(r_e);BOo=r(m3t,"nezha"),m3t.forEach(t),IOo=r($Re," \u2014 "),mX=n($Re,"A",{href:!0});var g3t=s(mX);NOo=r(g3t,"NezhaForSequenceClassification"),g3t.forEach(t),qOo=r($Re," (Nezha model)"),$Re.forEach(t),jOo=i(q),b2=n(q,"LI",{});var kRe=s(b2);t_e=n(kRe,"STRONG",{});var h3t=s(t_e);DOo=r(h3t,"nystromformer"),h3t.forEach(t),GOo=r(kRe," \u2014 "),gX=n(kRe,"A",{href:!0});var p3t=s(gX);OOo=r(p3t,"NystromformerForSequenceClassification"),p3t.forEach(t),VOo=r(kRe," (Nystr\xF6mformer model)"),kRe.forEach(t),XOo=i(q),v2=n(q,"LI",{});var SRe=s(v2);a_e=n(SRe,"STRONG",{});var _3t=s(a_e);zOo=r(_3t,"openai-gpt"),_3t.forEach(t),QOo=r(SRe," \u2014 "),hX=n(SRe,"A",{href:!0});var u3t=s(hX);WOo=r(u3t,"OpenAIGPTForSequenceClassification"),u3t.forEach(t),HOo=r(SRe," (OpenAI GPT model)"),SRe.forEach(t),UOo=i(q),F2=n(q,"LI",{});var RRe=s(F2);n_e=n(RRe,"STRONG",{});var b3t=s(n_e);JOo=r(b3t,"perceiver"),b3t.forEach(t),YOo=r(RRe," \u2014 "),pX=n(RRe,"A",{href:!0});var v3t=s(pX);KOo=r(v3t,"PerceiverForSequenceClassification"),v3t.forEach(t),ZOo=r(RRe," (Perceiver model)"),RRe.forEach(t),eVo=i(q),T2=n(q,"LI",{});var PRe=s(T2);s_e=n(PRe,"STRONG",{});var F3t=s(s_e);oVo=r(F3t,"plbart"),F3t.forEach(t),rVo=r(PRe," \u2014 "),_X=n(PRe,"A",{href:!0});var T3t=s(_X);tVo=r(T3t,"PLBartForSequenceClassification"),T3t.forEach(t),aVo=r(PRe," (PLBart model)"),PRe.forEach(t),nVo=i(q),M2=n(q,"LI",{});var BRe=s(M2);l_e=n(BRe,"STRONG",{});var M3t=s(l_e);sVo=r(M3t,"qdqbert"),M3t.forEach(t),lVo=r(BRe," \u2014 "),uX=n(BRe,"A",{href:!0});var E3t=s(uX);iVo=r(E3t,"QDQBertForSequenceClassification"),E3t.forEach(t),dVo=r(BRe," (QDQBert model)"),BRe.forEach(t),cVo=i(q),E2=n(q,"LI",{});var IRe=s(E2);i_e=n(IRe,"STRONG",{});var C3t=s(i_e);fVo=r(C3t,"reformer"),C3t.forEach(t),mVo=r(IRe," \u2014 "),bX=n(IRe,"A",{href:!0});var w3t=s(bX);gVo=r(w3t,"ReformerForSequenceClassification"),w3t.forEach(t),hVo=r(IRe," (Reformer model)"),IRe.forEach(t),pVo=i(q),C2=n(q,"LI",{});var NRe=s(C2);d_e=n(NRe,"STRONG",{});var A3t=s(d_e);_Vo=r(A3t,"rembert"),A3t.forEach(t),uVo=r(NRe," \u2014 "),vX=n(NRe,"A",{href:!0});var L3t=s(vX);bVo=r(L3t,"RemBertForSequenceClassification"),L3t.forEach(t),vVo=r(NRe," (RemBERT model)"),NRe.forEach(t),FVo=i(q),w2=n(q,"LI",{});var qRe=s(w2);c_e=n(qRe,"STRONG",{});var y3t=s(c_e);TVo=r(y3t,"roberta"),y3t.forEach(t),MVo=r(qRe," \u2014 "),FX=n(qRe,"A",{href:!0});var x3t=s(FX);EVo=r(x3t,"RobertaForSequenceClassification"),x3t.forEach(t),CVo=r(qRe," (RoBERTa model)"),qRe.forEach(t),wVo=i(q),A2=n(q,"LI",{});var jRe=s(A2);f_e=n(jRe,"STRONG",{});var $3t=s(f_e);AVo=r($3t,"roformer"),$3t.forEach(t),LVo=r(jRe," \u2014 "),TX=n(jRe,"A",{href:!0});var k3t=s(TX);yVo=r(k3t,"RoFormerForSequenceClassification"),k3t.forEach(t),xVo=r(jRe," (RoFormer model)"),jRe.forEach(t),$Vo=i(q),L2=n(q,"LI",{});var DRe=s(L2);m_e=n(DRe,"STRONG",{});var S3t=s(m_e);kVo=r(S3t,"squeezebert"),S3t.forEach(t),SVo=r(DRe," \u2014 "),MX=n(DRe,"A",{href:!0});var R3t=s(MX);RVo=r(R3t,"SqueezeBertForSequenceClassification"),R3t.forEach(t),PVo=r(DRe," (SqueezeBERT model)"),DRe.forEach(t),BVo=i(q),y2=n(q,"LI",{});var GRe=s(y2);g_e=n(GRe,"STRONG",{});var P3t=s(g_e);IVo=r(P3t,"tapas"),P3t.forEach(t),NVo=r(GRe," \u2014 "),EX=n(GRe,"A",{href:!0});var B3t=s(EX);qVo=r(B3t,"TapasForSequenceClassification"),B3t.forEach(t),jVo=r(GRe," (TAPAS model)"),GRe.forEach(t),DVo=i(q),x2=n(q,"LI",{});var ORe=s(x2);h_e=n(ORe,"STRONG",{});var I3t=s(h_e);GVo=r(I3t,"transfo-xl"),I3t.forEach(t),OVo=r(ORe," \u2014 "),CX=n(ORe,"A",{href:!0});var N3t=s(CX);VVo=r(N3t,"TransfoXLForSequenceClassification"),N3t.forEach(t),XVo=r(ORe," (Transformer-XL model)"),ORe.forEach(t),zVo=i(q),$2=n(q,"LI",{});var VRe=s($2);p_e=n(VRe,"STRONG",{});var q3t=s(p_e);QVo=r(q3t,"xlm"),q3t.forEach(t),WVo=r(VRe," \u2014 "),wX=n(VRe,"A",{href:!0});var j3t=s(wX);HVo=r(j3t,"XLMForSequenceClassification"),j3t.forEach(t),UVo=r(VRe," (XLM model)"),VRe.forEach(t),JVo=i(q),k2=n(q,"LI",{});var XRe=s(k2);__e=n(XRe,"STRONG",{});var D3t=s(__e);YVo=r(D3t,"xlm-roberta"),D3t.forEach(t),KVo=r(XRe," \u2014 "),AX=n(XRe,"A",{href:!0});var G3t=s(AX);ZVo=r(G3t,"XLMRobertaForSequenceClassification"),G3t.forEach(t),eXo=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),oXo=i(q),S2=n(q,"LI",{});var zRe=s(S2);u_e=n(zRe,"STRONG",{});var O3t=s(u_e);rXo=r(O3t,"xlm-roberta-xl"),O3t.forEach(t),tXo=r(zRe," \u2014 "),LX=n(zRe,"A",{href:!0});var V3t=s(LX);aXo=r(V3t,"XLMRobertaXLForSequenceClassification"),V3t.forEach(t),nXo=r(zRe," (XLM-RoBERTa-XL model)"),zRe.forEach(t),sXo=i(q),R2=n(q,"LI",{});var QRe=s(R2);b_e=n(QRe,"STRONG",{});var X3t=s(b_e);lXo=r(X3t,"xlnet"),X3t.forEach(t),iXo=r(QRe," \u2014 "),yX=n(QRe,"A",{href:!0});var z3t=s(yX);dXo=r(z3t,"XLNetForSequenceClassification"),z3t.forEach(t),cXo=r(QRe," (XLNet model)"),QRe.forEach(t),fXo=i(q),P2=n(q,"LI",{});var WRe=s(P2);v_e=n(WRe,"STRONG",{});var Q3t=s(v_e);mXo=r(Q3t,"yoso"),Q3t.forEach(t),gXo=r(WRe," \u2014 "),xX=n(WRe,"A",{href:!0});var W3t=s(xX);hXo=r(W3t,"YosoForSequenceClassification"),W3t.forEach(t),pXo=r(WRe," (YOSO model)"),WRe.forEach(t),q.forEach(t),_Xo=i(ca),B2=n(ca,"P",{});var HRe=s(B2);uXo=r(HRe,"The model is set in evaluation mode by default using "),F_e=n(HRe,"CODE",{});var H3t=s(F_e);bXo=r(H3t,"model.eval()"),H3t.forEach(t),vXo=r(HRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(HRe,"CODE",{});var U3t=s(T_e);FXo=r(U3t,"model.train()"),U3t.forEach(t),HRe.forEach(t),TXo=i(ca),T(I2.$$.fragment,ca),ca.forEach(t),nl.forEach(t),jVe=i(f),td=n(f,"H2",{class:!0});var zze=s(td);N2=n(zze,"A",{id:!0,class:!0,href:!0});var J3t=s(N2);M_e=n(J3t,"SPAN",{});var Y3t=s(M_e);T(Yy.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),MXo=i(zze),E_e=n(zze,"SPAN",{});var K3t=s(E_e);EXo=r(K3t,"AutoModelForMultipleChoice"),K3t.forEach(t),zze.forEach(t),DVe=i(f),Bo=n(f,"DIV",{class:!0});var sl=s(Bo);T(Ky.$$.fragment,sl),CXo=i(sl),ad=n(sl,"P",{});var Ere=s(ad);wXo=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$X=n(Ere,"A",{href:!0});var Z3t=s($X);AXo=r(Z3t,"from_pretrained()"),Z3t.forEach(t),LXo=r(Ere," class method or the "),kX=n(Ere,"A",{href:!0});var eFt=s(kX);yXo=r(eFt,"from_config()"),eFt.forEach(t),xXo=r(Ere,` class
method.`),Ere.forEach(t),$Xo=i(sl),Zy=n(sl,"P",{});var Qze=s(Zy);kXo=r(Qze,"This class cannot be instantiated directly using "),C_e=n(Qze,"CODE",{});var oFt=s(C_e);SXo=r(oFt,"__init__()"),oFt.forEach(t),RXo=r(Qze," (throws an error)."),Qze.forEach(t),PXo=i(sl),mt=n(sl,"DIV",{class:!0});var c6=s(mt);T(e8.$$.fragment,c6),BXo=i(c6),w_e=n(c6,"P",{});var rFt=s(w_e);IXo=r(rFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rFt.forEach(t),NXo=i(c6),nd=n(c6,"P",{});var Cre=s(nd);qXo=r(Cre,`Note:
Loading a model from its configuration file does `),A_e=n(Cre,"STRONG",{});var tFt=s(A_e);jXo=r(tFt,"not"),tFt.forEach(t),DXo=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Cre,"A",{href:!0});var aFt=s(SX);GXo=r(aFt,"from_pretrained()"),aFt.forEach(t),OXo=r(Cre," to load the model weights."),Cre.forEach(t),VXo=i(c6),T(q2.$$.fragment,c6),c6.forEach(t),XXo=i(sl),ro=n(sl,"DIV",{class:!0});var fa=s(ro);T(o8.$$.fragment,fa),zXo=i(fa),L_e=n(fa,"P",{});var nFt=s(L_e);QXo=r(nFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nFt.forEach(t),WXo=i(fa),Da=n(fa,"P",{});var f6=s(Da);HXo=r(f6,"The model class to instantiate is selected based on the "),y_e=n(f6,"CODE",{});var sFt=s(y_e);UXo=r(sFt,"model_type"),sFt.forEach(t),JXo=r(f6,` property of the config object (either
passed as an argument or loaded from `),x_e=n(f6,"CODE",{});var lFt=s(x_e);YXo=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),KXo=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(f6,"CODE",{});var iFt=s($_e);ZXo=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),ezo=r(f6,":"),f6.forEach(t),ozo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);j2=n(ee,"LI",{});var URe=s(j2);k_e=n(URe,"STRONG",{});var dFt=s(k_e);rzo=r(dFt,"albert"),dFt.forEach(t),tzo=r(URe," \u2014 "),RX=n(URe,"A",{href:!0});var cFt=s(RX);azo=r(cFt,"AlbertForMultipleChoice"),cFt.forEach(t),nzo=r(URe," (ALBERT model)"),URe.forEach(t),szo=i(ee),D2=n(ee,"LI",{});var JRe=s(D2);S_e=n(JRe,"STRONG",{});var fFt=s(S_e);lzo=r(fFt,"bert"),fFt.forEach(t),izo=r(JRe," \u2014 "),PX=n(JRe,"A",{href:!0});var mFt=s(PX);dzo=r(mFt,"BertForMultipleChoice"),mFt.forEach(t),czo=r(JRe," (BERT model)"),JRe.forEach(t),fzo=i(ee),G2=n(ee,"LI",{});var YRe=s(G2);R_e=n(YRe,"STRONG",{});var gFt=s(R_e);mzo=r(gFt,"big_bird"),gFt.forEach(t),gzo=r(YRe," \u2014 "),BX=n(YRe,"A",{href:!0});var hFt=s(BX);hzo=r(hFt,"BigBirdForMultipleChoice"),hFt.forEach(t),pzo=r(YRe," (BigBird model)"),YRe.forEach(t),_zo=i(ee),O2=n(ee,"LI",{});var KRe=s(O2);P_e=n(KRe,"STRONG",{});var pFt=s(P_e);uzo=r(pFt,"camembert"),pFt.forEach(t),bzo=r(KRe," \u2014 "),IX=n(KRe,"A",{href:!0});var _Ft=s(IX);vzo=r(_Ft,"CamembertForMultipleChoice"),_Ft.forEach(t),Fzo=r(KRe," (CamemBERT model)"),KRe.forEach(t),Tzo=i(ee),V2=n(ee,"LI",{});var ZRe=s(V2);B_e=n(ZRe,"STRONG",{});var uFt=s(B_e);Mzo=r(uFt,"canine"),uFt.forEach(t),Ezo=r(ZRe," \u2014 "),NX=n(ZRe,"A",{href:!0});var bFt=s(NX);Czo=r(bFt,"CanineForMultipleChoice"),bFt.forEach(t),wzo=r(ZRe," (CANINE model)"),ZRe.forEach(t),Azo=i(ee),X2=n(ee,"LI",{});var ePe=s(X2);I_e=n(ePe,"STRONG",{});var vFt=s(I_e);Lzo=r(vFt,"convbert"),vFt.forEach(t),yzo=r(ePe," \u2014 "),qX=n(ePe,"A",{href:!0});var FFt=s(qX);xzo=r(FFt,"ConvBertForMultipleChoice"),FFt.forEach(t),$zo=r(ePe," (ConvBERT model)"),ePe.forEach(t),kzo=i(ee),z2=n(ee,"LI",{});var oPe=s(z2);N_e=n(oPe,"STRONG",{});var TFt=s(N_e);Szo=r(TFt,"data2vec-text"),TFt.forEach(t),Rzo=r(oPe," \u2014 "),jX=n(oPe,"A",{href:!0});var MFt=s(jX);Pzo=r(MFt,"Data2VecTextForMultipleChoice"),MFt.forEach(t),Bzo=r(oPe," (Data2VecText model)"),oPe.forEach(t),Izo=i(ee),Q2=n(ee,"LI",{});var rPe=s(Q2);q_e=n(rPe,"STRONG",{});var EFt=s(q_e);Nzo=r(EFt,"deberta-v2"),EFt.forEach(t),qzo=r(rPe," \u2014 "),DX=n(rPe,"A",{href:!0});var CFt=s(DX);jzo=r(CFt,"DebertaV2ForMultipleChoice"),CFt.forEach(t),Dzo=r(rPe," (DeBERTa-v2 model)"),rPe.forEach(t),Gzo=i(ee),W2=n(ee,"LI",{});var tPe=s(W2);j_e=n(tPe,"STRONG",{});var wFt=s(j_e);Ozo=r(wFt,"distilbert"),wFt.forEach(t),Vzo=r(tPe," \u2014 "),GX=n(tPe,"A",{href:!0});var AFt=s(GX);Xzo=r(AFt,"DistilBertForMultipleChoice"),AFt.forEach(t),zzo=r(tPe," (DistilBERT model)"),tPe.forEach(t),Qzo=i(ee),H2=n(ee,"LI",{});var aPe=s(H2);D_e=n(aPe,"STRONG",{});var LFt=s(D_e);Wzo=r(LFt,"electra"),LFt.forEach(t),Hzo=r(aPe," \u2014 "),OX=n(aPe,"A",{href:!0});var yFt=s(OX);Uzo=r(yFt,"ElectraForMultipleChoice"),yFt.forEach(t),Jzo=r(aPe," (ELECTRA model)"),aPe.forEach(t),Yzo=i(ee),U2=n(ee,"LI",{});var nPe=s(U2);G_e=n(nPe,"STRONG",{});var xFt=s(G_e);Kzo=r(xFt,"flaubert"),xFt.forEach(t),Zzo=r(nPe," \u2014 "),VX=n(nPe,"A",{href:!0});var $Ft=s(VX);eQo=r($Ft,"FlaubertForMultipleChoice"),$Ft.forEach(t),oQo=r(nPe," (FlauBERT model)"),nPe.forEach(t),rQo=i(ee),J2=n(ee,"LI",{});var sPe=s(J2);O_e=n(sPe,"STRONG",{});var kFt=s(O_e);tQo=r(kFt,"fnet"),kFt.forEach(t),aQo=r(sPe," \u2014 "),XX=n(sPe,"A",{href:!0});var SFt=s(XX);nQo=r(SFt,"FNetForMultipleChoice"),SFt.forEach(t),sQo=r(sPe," (FNet model)"),sPe.forEach(t),lQo=i(ee),Y2=n(ee,"LI",{});var lPe=s(Y2);V_e=n(lPe,"STRONG",{});var RFt=s(V_e);iQo=r(RFt,"funnel"),RFt.forEach(t),dQo=r(lPe," \u2014 "),zX=n(lPe,"A",{href:!0});var PFt=s(zX);cQo=r(PFt,"FunnelForMultipleChoice"),PFt.forEach(t),fQo=r(lPe," (Funnel Transformer model)"),lPe.forEach(t),mQo=i(ee),K2=n(ee,"LI",{});var iPe=s(K2);X_e=n(iPe,"STRONG",{});var BFt=s(X_e);gQo=r(BFt,"ibert"),BFt.forEach(t),hQo=r(iPe," \u2014 "),QX=n(iPe,"A",{href:!0});var IFt=s(QX);pQo=r(IFt,"IBertForMultipleChoice"),IFt.forEach(t),_Qo=r(iPe," (I-BERT model)"),iPe.forEach(t),uQo=i(ee),Z2=n(ee,"LI",{});var dPe=s(Z2);z_e=n(dPe,"STRONG",{});var NFt=s(z_e);bQo=r(NFt,"longformer"),NFt.forEach(t),vQo=r(dPe," \u2014 "),WX=n(dPe,"A",{href:!0});var qFt=s(WX);FQo=r(qFt,"LongformerForMultipleChoice"),qFt.forEach(t),TQo=r(dPe," (Longformer model)"),dPe.forEach(t),MQo=i(ee),eb=n(ee,"LI",{});var cPe=s(eb);Q_e=n(cPe,"STRONG",{});var jFt=s(Q_e);EQo=r(jFt,"megatron-bert"),jFt.forEach(t),CQo=r(cPe," \u2014 "),HX=n(cPe,"A",{href:!0});var DFt=s(HX);wQo=r(DFt,"MegatronBertForMultipleChoice"),DFt.forEach(t),AQo=r(cPe," (Megatron-BERT model)"),cPe.forEach(t),LQo=i(ee),ob=n(ee,"LI",{});var fPe=s(ob);W_e=n(fPe,"STRONG",{});var GFt=s(W_e);yQo=r(GFt,"mobilebert"),GFt.forEach(t),xQo=r(fPe," \u2014 "),UX=n(fPe,"A",{href:!0});var OFt=s(UX);$Qo=r(OFt,"MobileBertForMultipleChoice"),OFt.forEach(t),kQo=r(fPe," (MobileBERT model)"),fPe.forEach(t),SQo=i(ee),rb=n(ee,"LI",{});var mPe=s(rb);H_e=n(mPe,"STRONG",{});var VFt=s(H_e);RQo=r(VFt,"mpnet"),VFt.forEach(t),PQo=r(mPe," \u2014 "),JX=n(mPe,"A",{href:!0});var XFt=s(JX);BQo=r(XFt,"MPNetForMultipleChoice"),XFt.forEach(t),IQo=r(mPe," (MPNet model)"),mPe.forEach(t),NQo=i(ee),tb=n(ee,"LI",{});var gPe=s(tb);U_e=n(gPe,"STRONG",{});var zFt=s(U_e);qQo=r(zFt,"nezha"),zFt.forEach(t),jQo=r(gPe," \u2014 "),YX=n(gPe,"A",{href:!0});var QFt=s(YX);DQo=r(QFt,"NezhaForMultipleChoice"),QFt.forEach(t),GQo=r(gPe," (Nezha model)"),gPe.forEach(t),OQo=i(ee),ab=n(ee,"LI",{});var hPe=s(ab);J_e=n(hPe,"STRONG",{});var WFt=s(J_e);VQo=r(WFt,"nystromformer"),WFt.forEach(t),XQo=r(hPe," \u2014 "),KX=n(hPe,"A",{href:!0});var HFt=s(KX);zQo=r(HFt,"NystromformerForMultipleChoice"),HFt.forEach(t),QQo=r(hPe," (Nystr\xF6mformer model)"),hPe.forEach(t),WQo=i(ee),nb=n(ee,"LI",{});var pPe=s(nb);Y_e=n(pPe,"STRONG",{});var UFt=s(Y_e);HQo=r(UFt,"qdqbert"),UFt.forEach(t),UQo=r(pPe," \u2014 "),ZX=n(pPe,"A",{href:!0});var JFt=s(ZX);JQo=r(JFt,"QDQBertForMultipleChoice"),JFt.forEach(t),YQo=r(pPe," (QDQBert model)"),pPe.forEach(t),KQo=i(ee),sb=n(ee,"LI",{});var _Pe=s(sb);K_e=n(_Pe,"STRONG",{});var YFt=s(K_e);ZQo=r(YFt,"rembert"),YFt.forEach(t),eWo=r(_Pe," \u2014 "),ez=n(_Pe,"A",{href:!0});var KFt=s(ez);oWo=r(KFt,"RemBertForMultipleChoice"),KFt.forEach(t),rWo=r(_Pe," (RemBERT model)"),_Pe.forEach(t),tWo=i(ee),lb=n(ee,"LI",{});var uPe=s(lb);Z_e=n(uPe,"STRONG",{});var ZFt=s(Z_e);aWo=r(ZFt,"roberta"),ZFt.forEach(t),nWo=r(uPe," \u2014 "),oz=n(uPe,"A",{href:!0});var eTt=s(oz);sWo=r(eTt,"RobertaForMultipleChoice"),eTt.forEach(t),lWo=r(uPe," (RoBERTa model)"),uPe.forEach(t),iWo=i(ee),ib=n(ee,"LI",{});var bPe=s(ib);eue=n(bPe,"STRONG",{});var oTt=s(eue);dWo=r(oTt,"roformer"),oTt.forEach(t),cWo=r(bPe," \u2014 "),rz=n(bPe,"A",{href:!0});var rTt=s(rz);fWo=r(rTt,"RoFormerForMultipleChoice"),rTt.forEach(t),mWo=r(bPe," (RoFormer model)"),bPe.forEach(t),gWo=i(ee),db=n(ee,"LI",{});var vPe=s(db);oue=n(vPe,"STRONG",{});var tTt=s(oue);hWo=r(tTt,"squeezebert"),tTt.forEach(t),pWo=r(vPe," \u2014 "),tz=n(vPe,"A",{href:!0});var aTt=s(tz);_Wo=r(aTt,"SqueezeBertForMultipleChoice"),aTt.forEach(t),uWo=r(vPe," (SqueezeBERT model)"),vPe.forEach(t),bWo=i(ee),cb=n(ee,"LI",{});var FPe=s(cb);rue=n(FPe,"STRONG",{});var nTt=s(rue);vWo=r(nTt,"xlm"),nTt.forEach(t),FWo=r(FPe," \u2014 "),az=n(FPe,"A",{href:!0});var sTt=s(az);TWo=r(sTt,"XLMForMultipleChoice"),sTt.forEach(t),MWo=r(FPe," (XLM model)"),FPe.forEach(t),EWo=i(ee),fb=n(ee,"LI",{});var TPe=s(fb);tue=n(TPe,"STRONG",{});var lTt=s(tue);CWo=r(lTt,"xlm-roberta"),lTt.forEach(t),wWo=r(TPe," \u2014 "),nz=n(TPe,"A",{href:!0});var iTt=s(nz);AWo=r(iTt,"XLMRobertaForMultipleChoice"),iTt.forEach(t),LWo=r(TPe," (XLM-RoBERTa model)"),TPe.forEach(t),yWo=i(ee),mb=n(ee,"LI",{});var MPe=s(mb);aue=n(MPe,"STRONG",{});var dTt=s(aue);xWo=r(dTt,"xlm-roberta-xl"),dTt.forEach(t),$Wo=r(MPe," \u2014 "),sz=n(MPe,"A",{href:!0});var cTt=s(sz);kWo=r(cTt,"XLMRobertaXLForMultipleChoice"),cTt.forEach(t),SWo=r(MPe," (XLM-RoBERTa-XL model)"),MPe.forEach(t),RWo=i(ee),gb=n(ee,"LI",{});var EPe=s(gb);nue=n(EPe,"STRONG",{});var fTt=s(nue);PWo=r(fTt,"xlnet"),fTt.forEach(t),BWo=r(EPe," \u2014 "),lz=n(EPe,"A",{href:!0});var mTt=s(lz);IWo=r(mTt,"XLNetForMultipleChoice"),mTt.forEach(t),NWo=r(EPe," (XLNet model)"),EPe.forEach(t),qWo=i(ee),hb=n(ee,"LI",{});var CPe=s(hb);sue=n(CPe,"STRONG",{});var gTt=s(sue);jWo=r(gTt,"yoso"),gTt.forEach(t),DWo=r(CPe," \u2014 "),iz=n(CPe,"A",{href:!0});var hTt=s(iz);GWo=r(hTt,"YosoForMultipleChoice"),hTt.forEach(t),OWo=r(CPe," (YOSO model)"),CPe.forEach(t),ee.forEach(t),VWo=i(fa),pb=n(fa,"P",{});var wPe=s(pb);XWo=r(wPe,"The model is set in evaluation mode by default using "),lue=n(wPe,"CODE",{});var pTt=s(lue);zWo=r(pTt,"model.eval()"),pTt.forEach(t),QWo=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(wPe,"CODE",{});var _Tt=s(iue);WWo=r(_Tt,"model.train()"),_Tt.forEach(t),wPe.forEach(t),HWo=i(fa),T(_b.$$.fragment,fa),fa.forEach(t),sl.forEach(t),GVe=i(f),sd=n(f,"H2",{class:!0});var Wze=s(sd);ub=n(Wze,"A",{id:!0,class:!0,href:!0});var uTt=s(ub);due=n(uTt,"SPAN",{});var bTt=s(due);T(r8.$$.fragment,bTt),bTt.forEach(t),uTt.forEach(t),UWo=i(Wze),cue=n(Wze,"SPAN",{});var vTt=s(cue);JWo=r(vTt,"AutoModelForNextSentencePrediction"),vTt.forEach(t),Wze.forEach(t),OVe=i(f),Io=n(f,"DIV",{class:!0});var ll=s(Io);T(t8.$$.fragment,ll),YWo=i(ll),ld=n(ll,"P",{});var wre=s(ld);KWo=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dz=n(wre,"A",{href:!0});var FTt=s(dz);ZWo=r(FTt,"from_pretrained()"),FTt.forEach(t),eHo=r(wre," class method or the "),cz=n(wre,"A",{href:!0});var TTt=s(cz);oHo=r(TTt,"from_config()"),TTt.forEach(t),rHo=r(wre,` class
method.`),wre.forEach(t),tHo=i(ll),a8=n(ll,"P",{});var Hze=s(a8);aHo=r(Hze,"This class cannot be instantiated directly using "),fue=n(Hze,"CODE",{});var MTt=s(fue);nHo=r(MTt,"__init__()"),MTt.forEach(t),sHo=r(Hze," (throws an error)."),Hze.forEach(t),lHo=i(ll),gt=n(ll,"DIV",{class:!0});var m6=s(gt);T(n8.$$.fragment,m6),iHo=i(m6),mue=n(m6,"P",{});var ETt=s(mue);dHo=r(ETt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ETt.forEach(t),cHo=i(m6),id=n(m6,"P",{});var Are=s(id);fHo=r(Are,`Note:
Loading a model from its configuration file does `),gue=n(Are,"STRONG",{});var CTt=s(gue);mHo=r(CTt,"not"),CTt.forEach(t),gHo=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(Are,"A",{href:!0});var wTt=s(fz);hHo=r(wTt,"from_pretrained()"),wTt.forEach(t),pHo=r(Are," to load the model weights."),Are.forEach(t),_Ho=i(m6),T(bb.$$.fragment,m6),m6.forEach(t),uHo=i(ll),to=n(ll,"DIV",{class:!0});var ma=s(to);T(s8.$$.fragment,ma),bHo=i(ma),hue=n(ma,"P",{});var ATt=s(hue);vHo=r(ATt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ATt.forEach(t),FHo=i(ma),Ga=n(ma,"P",{});var g6=s(Ga);THo=r(g6,"The model class to instantiate is selected based on the "),pue=n(g6,"CODE",{});var LTt=s(pue);MHo=r(LTt,"model_type"),LTt.forEach(t),EHo=r(g6,` property of the config object (either
passed as an argument or loaded from `),_ue=n(g6,"CODE",{});var yTt=s(_ue);CHo=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),wHo=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(g6,"CODE",{});var xTt=s(uue);AHo=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),LHo=r(g6,":"),g6.forEach(t),yHo=i(ma),No=n(ma,"UL",{});var ga=s(No);vb=n(ga,"LI",{});var APe=s(vb);bue=n(APe,"STRONG",{});var $Tt=s(bue);xHo=r($Tt,"bert"),$Tt.forEach(t),$Ho=r(APe," \u2014 "),mz=n(APe,"A",{href:!0});var kTt=s(mz);kHo=r(kTt,"BertForNextSentencePrediction"),kTt.forEach(t),SHo=r(APe," (BERT model)"),APe.forEach(t),RHo=i(ga),Fb=n(ga,"LI",{});var LPe=s(Fb);vue=n(LPe,"STRONG",{});var STt=s(vue);PHo=r(STt,"fnet"),STt.forEach(t),BHo=r(LPe," \u2014 "),gz=n(LPe,"A",{href:!0});var RTt=s(gz);IHo=r(RTt,"FNetForNextSentencePrediction"),RTt.forEach(t),NHo=r(LPe," (FNet model)"),LPe.forEach(t),qHo=i(ga),Tb=n(ga,"LI",{});var yPe=s(Tb);Fue=n(yPe,"STRONG",{});var PTt=s(Fue);jHo=r(PTt,"megatron-bert"),PTt.forEach(t),DHo=r(yPe," \u2014 "),hz=n(yPe,"A",{href:!0});var BTt=s(hz);GHo=r(BTt,"MegatronBertForNextSentencePrediction"),BTt.forEach(t),OHo=r(yPe," (Megatron-BERT model)"),yPe.forEach(t),VHo=i(ga),Mb=n(ga,"LI",{});var xPe=s(Mb);Tue=n(xPe,"STRONG",{});var ITt=s(Tue);XHo=r(ITt,"mobilebert"),ITt.forEach(t),zHo=r(xPe," \u2014 "),pz=n(xPe,"A",{href:!0});var NTt=s(pz);QHo=r(NTt,"MobileBertForNextSentencePrediction"),NTt.forEach(t),WHo=r(xPe," (MobileBERT model)"),xPe.forEach(t),HHo=i(ga),Eb=n(ga,"LI",{});var $Pe=s(Eb);Mue=n($Pe,"STRONG",{});var qTt=s(Mue);UHo=r(qTt,"nezha"),qTt.forEach(t),JHo=r($Pe," \u2014 "),_z=n($Pe,"A",{href:!0});var jTt=s(_z);YHo=r(jTt,"NezhaForNextSentencePrediction"),jTt.forEach(t),KHo=r($Pe," (Nezha model)"),$Pe.forEach(t),ZHo=i(ga),Cb=n(ga,"LI",{});var kPe=s(Cb);Eue=n(kPe,"STRONG",{});var DTt=s(Eue);eUo=r(DTt,"qdqbert"),DTt.forEach(t),oUo=r(kPe," \u2014 "),uz=n(kPe,"A",{href:!0});var GTt=s(uz);rUo=r(GTt,"QDQBertForNextSentencePrediction"),GTt.forEach(t),tUo=r(kPe," (QDQBert model)"),kPe.forEach(t),ga.forEach(t),aUo=i(ma),wb=n(ma,"P",{});var SPe=s(wb);nUo=r(SPe,"The model is set in evaluation mode by default using "),Cue=n(SPe,"CODE",{});var OTt=s(Cue);sUo=r(OTt,"model.eval()"),OTt.forEach(t),lUo=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(SPe,"CODE",{});var VTt=s(wue);iUo=r(VTt,"model.train()"),VTt.forEach(t),SPe.forEach(t),dUo=i(ma),T(Ab.$$.fragment,ma),ma.forEach(t),ll.forEach(t),VVe=i(f),dd=n(f,"H2",{class:!0});var Uze=s(dd);Lb=n(Uze,"A",{id:!0,class:!0,href:!0});var XTt=s(Lb);Aue=n(XTt,"SPAN",{});var zTt=s(Aue);T(l8.$$.fragment,zTt),zTt.forEach(t),XTt.forEach(t),cUo=i(Uze),Lue=n(Uze,"SPAN",{});var QTt=s(Lue);fUo=r(QTt,"AutoModelForTokenClassification"),QTt.forEach(t),Uze.forEach(t),XVe=i(f),qo=n(f,"DIV",{class:!0});var il=s(qo);T(i8.$$.fragment,il),mUo=i(il),cd=n(il,"P",{});var Lre=s(cd);gUo=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=n(Lre,"A",{href:!0});var WTt=s(bz);hUo=r(WTt,"from_pretrained()"),WTt.forEach(t),pUo=r(Lre," class method or the "),vz=n(Lre,"A",{href:!0});var HTt=s(vz);_Uo=r(HTt,"from_config()"),HTt.forEach(t),uUo=r(Lre,` class
method.`),Lre.forEach(t),bUo=i(il),d8=n(il,"P",{});var Jze=s(d8);vUo=r(Jze,"This class cannot be instantiated directly using "),yue=n(Jze,"CODE",{});var UTt=s(yue);FUo=r(UTt,"__init__()"),UTt.forEach(t),TUo=r(Jze," (throws an error)."),Jze.forEach(t),MUo=i(il),ht=n(il,"DIV",{class:!0});var h6=s(ht);T(c8.$$.fragment,h6),EUo=i(h6),xue=n(h6,"P",{});var JTt=s(xue);CUo=r(JTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JTt.forEach(t),wUo=i(h6),fd=n(h6,"P",{});var yre=s(fd);AUo=r(yre,`Note:
Loading a model from its configuration file does `),$ue=n(yre,"STRONG",{});var YTt=s($ue);LUo=r(YTt,"not"),YTt.forEach(t),yUo=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(yre,"A",{href:!0});var KTt=s(Fz);xUo=r(KTt,"from_pretrained()"),KTt.forEach(t),$Uo=r(yre," to load the model weights."),yre.forEach(t),kUo=i(h6),T(yb.$$.fragment,h6),h6.forEach(t),SUo=i(il),ao=n(il,"DIV",{class:!0});var ha=s(ao);T(f8.$$.fragment,ha),RUo=i(ha),kue=n(ha,"P",{});var ZTt=s(kue);PUo=r(ZTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZTt.forEach(t),BUo=i(ha),Oa=n(ha,"P",{});var p6=s(Oa);IUo=r(p6,"The model class to instantiate is selected based on the "),Sue=n(p6,"CODE",{});var eMt=s(Sue);NUo=r(eMt,"model_type"),eMt.forEach(t),qUo=r(p6,` property of the config object (either
passed as an argument or loaded from `),Rue=n(p6,"CODE",{});var oMt=s(Rue);jUo=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),DUo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(p6,"CODE",{});var rMt=s(Pue);GUo=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),OUo=r(p6,":"),p6.forEach(t),VUo=i(ha),U=n(ha,"UL",{});var J=s(U);xb=n(J,"LI",{});var RPe=s(xb);Bue=n(RPe,"STRONG",{});var tMt=s(Bue);XUo=r(tMt,"albert"),tMt.forEach(t),zUo=r(RPe," \u2014 "),Tz=n(RPe,"A",{href:!0});var aMt=s(Tz);QUo=r(aMt,"AlbertForTokenClassification"),aMt.forEach(t),WUo=r(RPe," (ALBERT model)"),RPe.forEach(t),HUo=i(J),$b=n(J,"LI",{});var PPe=s($b);Iue=n(PPe,"STRONG",{});var nMt=s(Iue);UUo=r(nMt,"bert"),nMt.forEach(t),JUo=r(PPe," \u2014 "),Mz=n(PPe,"A",{href:!0});var sMt=s(Mz);YUo=r(sMt,"BertForTokenClassification"),sMt.forEach(t),KUo=r(PPe," (BERT model)"),PPe.forEach(t),ZUo=i(J),kb=n(J,"LI",{});var BPe=s(kb);Nue=n(BPe,"STRONG",{});var lMt=s(Nue);eJo=r(lMt,"big_bird"),lMt.forEach(t),oJo=r(BPe," \u2014 "),Ez=n(BPe,"A",{href:!0});var iMt=s(Ez);rJo=r(iMt,"BigBirdForTokenClassification"),iMt.forEach(t),tJo=r(BPe," (BigBird model)"),BPe.forEach(t),aJo=i(J),Sb=n(J,"LI",{});var IPe=s(Sb);que=n(IPe,"STRONG",{});var dMt=s(que);nJo=r(dMt,"bloom"),dMt.forEach(t),sJo=r(IPe," \u2014 "),Cz=n(IPe,"A",{href:!0});var cMt=s(Cz);lJo=r(cMt,"BloomForTokenClassification"),cMt.forEach(t),iJo=r(IPe," (BLOOM model)"),IPe.forEach(t),dJo=i(J),Rb=n(J,"LI",{});var NPe=s(Rb);jue=n(NPe,"STRONG",{});var fMt=s(jue);cJo=r(fMt,"camembert"),fMt.forEach(t),fJo=r(NPe," \u2014 "),wz=n(NPe,"A",{href:!0});var mMt=s(wz);mJo=r(mMt,"CamembertForTokenClassification"),mMt.forEach(t),gJo=r(NPe," (CamemBERT model)"),NPe.forEach(t),hJo=i(J),Pb=n(J,"LI",{});var qPe=s(Pb);Due=n(qPe,"STRONG",{});var gMt=s(Due);pJo=r(gMt,"canine"),gMt.forEach(t),_Jo=r(qPe," \u2014 "),Az=n(qPe,"A",{href:!0});var hMt=s(Az);uJo=r(hMt,"CanineForTokenClassification"),hMt.forEach(t),bJo=r(qPe," (CANINE model)"),qPe.forEach(t),vJo=i(J),Bb=n(J,"LI",{});var jPe=s(Bb);Gue=n(jPe,"STRONG",{});var pMt=s(Gue);FJo=r(pMt,"convbert"),pMt.forEach(t),TJo=r(jPe," \u2014 "),Lz=n(jPe,"A",{href:!0});var _Mt=s(Lz);MJo=r(_Mt,"ConvBertForTokenClassification"),_Mt.forEach(t),EJo=r(jPe," (ConvBERT model)"),jPe.forEach(t),CJo=i(J),Ib=n(J,"LI",{});var DPe=s(Ib);Oue=n(DPe,"STRONG",{});var uMt=s(Oue);wJo=r(uMt,"data2vec-text"),uMt.forEach(t),AJo=r(DPe," \u2014 "),yz=n(DPe,"A",{href:!0});var bMt=s(yz);LJo=r(bMt,"Data2VecTextForTokenClassification"),bMt.forEach(t),yJo=r(DPe," (Data2VecText model)"),DPe.forEach(t),xJo=i(J),Nb=n(J,"LI",{});var GPe=s(Nb);Vue=n(GPe,"STRONG",{});var vMt=s(Vue);$Jo=r(vMt,"deberta"),vMt.forEach(t),kJo=r(GPe," \u2014 "),xz=n(GPe,"A",{href:!0});var FMt=s(xz);SJo=r(FMt,"DebertaForTokenClassification"),FMt.forEach(t),RJo=r(GPe," (DeBERTa model)"),GPe.forEach(t),PJo=i(J),qb=n(J,"LI",{});var OPe=s(qb);Xue=n(OPe,"STRONG",{});var TMt=s(Xue);BJo=r(TMt,"deberta-v2"),TMt.forEach(t),IJo=r(OPe," \u2014 "),$z=n(OPe,"A",{href:!0});var MMt=s($z);NJo=r(MMt,"DebertaV2ForTokenClassification"),MMt.forEach(t),qJo=r(OPe," (DeBERTa-v2 model)"),OPe.forEach(t),jJo=i(J),jb=n(J,"LI",{});var VPe=s(jb);zue=n(VPe,"STRONG",{});var EMt=s(zue);DJo=r(EMt,"distilbert"),EMt.forEach(t),GJo=r(VPe," \u2014 "),kz=n(VPe,"A",{href:!0});var CMt=s(kz);OJo=r(CMt,"DistilBertForTokenClassification"),CMt.forEach(t),VJo=r(VPe," (DistilBERT model)"),VPe.forEach(t),XJo=i(J),Db=n(J,"LI",{});var XPe=s(Db);Que=n(XPe,"STRONG",{});var wMt=s(Que);zJo=r(wMt,"electra"),wMt.forEach(t),QJo=r(XPe," \u2014 "),Sz=n(XPe,"A",{href:!0});var AMt=s(Sz);WJo=r(AMt,"ElectraForTokenClassification"),AMt.forEach(t),HJo=r(XPe," (ELECTRA model)"),XPe.forEach(t),UJo=i(J),Gb=n(J,"LI",{});var zPe=s(Gb);Wue=n(zPe,"STRONG",{});var LMt=s(Wue);JJo=r(LMt,"flaubert"),LMt.forEach(t),YJo=r(zPe," \u2014 "),Rz=n(zPe,"A",{href:!0});var yMt=s(Rz);KJo=r(yMt,"FlaubertForTokenClassification"),yMt.forEach(t),ZJo=r(zPe," (FlauBERT model)"),zPe.forEach(t),eYo=i(J),Ob=n(J,"LI",{});var QPe=s(Ob);Hue=n(QPe,"STRONG",{});var xMt=s(Hue);oYo=r(xMt,"fnet"),xMt.forEach(t),rYo=r(QPe," \u2014 "),Pz=n(QPe,"A",{href:!0});var $Mt=s(Pz);tYo=r($Mt,"FNetForTokenClassification"),$Mt.forEach(t),aYo=r(QPe," (FNet model)"),QPe.forEach(t),nYo=i(J),Vb=n(J,"LI",{});var WPe=s(Vb);Uue=n(WPe,"STRONG",{});var kMt=s(Uue);sYo=r(kMt,"funnel"),kMt.forEach(t),lYo=r(WPe," \u2014 "),Bz=n(WPe,"A",{href:!0});var SMt=s(Bz);iYo=r(SMt,"FunnelForTokenClassification"),SMt.forEach(t),dYo=r(WPe," (Funnel Transformer model)"),WPe.forEach(t),cYo=i(J),Xb=n(J,"LI",{});var HPe=s(Xb);Jue=n(HPe,"STRONG",{});var RMt=s(Jue);fYo=r(RMt,"gpt2"),RMt.forEach(t),mYo=r(HPe," \u2014 "),Iz=n(HPe,"A",{href:!0});var PMt=s(Iz);gYo=r(PMt,"GPT2ForTokenClassification"),PMt.forEach(t),hYo=r(HPe," (OpenAI GPT-2 model)"),HPe.forEach(t),pYo=i(J),zb=n(J,"LI",{});var UPe=s(zb);Yue=n(UPe,"STRONG",{});var BMt=s(Yue);_Yo=r(BMt,"ibert"),BMt.forEach(t),uYo=r(UPe," \u2014 "),Nz=n(UPe,"A",{href:!0});var IMt=s(Nz);bYo=r(IMt,"IBertForTokenClassification"),IMt.forEach(t),vYo=r(UPe," (I-BERT model)"),UPe.forEach(t),FYo=i(J),Qb=n(J,"LI",{});var JPe=s(Qb);Kue=n(JPe,"STRONG",{});var NMt=s(Kue);TYo=r(NMt,"layoutlm"),NMt.forEach(t),MYo=r(JPe," \u2014 "),qz=n(JPe,"A",{href:!0});var qMt=s(qz);EYo=r(qMt,"LayoutLMForTokenClassification"),qMt.forEach(t),CYo=r(JPe," (LayoutLM model)"),JPe.forEach(t),wYo=i(J),Wb=n(J,"LI",{});var YPe=s(Wb);Zue=n(YPe,"STRONG",{});var jMt=s(Zue);AYo=r(jMt,"layoutlmv2"),jMt.forEach(t),LYo=r(YPe," \u2014 "),jz=n(YPe,"A",{href:!0});var DMt=s(jz);yYo=r(DMt,"LayoutLMv2ForTokenClassification"),DMt.forEach(t),xYo=r(YPe," (LayoutLMv2 model)"),YPe.forEach(t),$Yo=i(J),Hb=n(J,"LI",{});var KPe=s(Hb);e1e=n(KPe,"STRONG",{});var GMt=s(e1e);kYo=r(GMt,"layoutlmv3"),GMt.forEach(t),SYo=r(KPe," \u2014 "),Dz=n(KPe,"A",{href:!0});var OMt=s(Dz);RYo=r(OMt,"LayoutLMv3ForTokenClassification"),OMt.forEach(t),PYo=r(KPe," (LayoutLMv3 model)"),KPe.forEach(t),BYo=i(J),Ub=n(J,"LI",{});var ZPe=s(Ub);o1e=n(ZPe,"STRONG",{});var VMt=s(o1e);IYo=r(VMt,"longformer"),VMt.forEach(t),NYo=r(ZPe," \u2014 "),Gz=n(ZPe,"A",{href:!0});var XMt=s(Gz);qYo=r(XMt,"LongformerForTokenClassification"),XMt.forEach(t),jYo=r(ZPe," (Longformer model)"),ZPe.forEach(t),DYo=i(J),Jb=n(J,"LI",{});var eBe=s(Jb);r1e=n(eBe,"STRONG",{});var zMt=s(r1e);GYo=r(zMt,"megatron-bert"),zMt.forEach(t),OYo=r(eBe," \u2014 "),Oz=n(eBe,"A",{href:!0});var QMt=s(Oz);VYo=r(QMt,"MegatronBertForTokenClassification"),QMt.forEach(t),XYo=r(eBe," (Megatron-BERT model)"),eBe.forEach(t),zYo=i(J),Yb=n(J,"LI",{});var oBe=s(Yb);t1e=n(oBe,"STRONG",{});var WMt=s(t1e);QYo=r(WMt,"mobilebert"),WMt.forEach(t),WYo=r(oBe," \u2014 "),Vz=n(oBe,"A",{href:!0});var HMt=s(Vz);HYo=r(HMt,"MobileBertForTokenClassification"),HMt.forEach(t),UYo=r(oBe," (MobileBERT model)"),oBe.forEach(t),JYo=i(J),Kb=n(J,"LI",{});var rBe=s(Kb);a1e=n(rBe,"STRONG",{});var UMt=s(a1e);YYo=r(UMt,"mpnet"),UMt.forEach(t),KYo=r(rBe," \u2014 "),Xz=n(rBe,"A",{href:!0});var JMt=s(Xz);ZYo=r(JMt,"MPNetForTokenClassification"),JMt.forEach(t),eKo=r(rBe," (MPNet model)"),rBe.forEach(t),oKo=i(J),Zb=n(J,"LI",{});var tBe=s(Zb);n1e=n(tBe,"STRONG",{});var YMt=s(n1e);rKo=r(YMt,"nezha"),YMt.forEach(t),tKo=r(tBe," \u2014 "),zz=n(tBe,"A",{href:!0});var KMt=s(zz);aKo=r(KMt,"NezhaForTokenClassification"),KMt.forEach(t),nKo=r(tBe," (Nezha model)"),tBe.forEach(t),sKo=i(J),ev=n(J,"LI",{});var aBe=s(ev);s1e=n(aBe,"STRONG",{});var ZMt=s(s1e);lKo=r(ZMt,"nystromformer"),ZMt.forEach(t),iKo=r(aBe," \u2014 "),Qz=n(aBe,"A",{href:!0});var eEt=s(Qz);dKo=r(eEt,"NystromformerForTokenClassification"),eEt.forEach(t),cKo=r(aBe," (Nystr\xF6mformer model)"),aBe.forEach(t),fKo=i(J),ov=n(J,"LI",{});var nBe=s(ov);l1e=n(nBe,"STRONG",{});var oEt=s(l1e);mKo=r(oEt,"qdqbert"),oEt.forEach(t),gKo=r(nBe," \u2014 "),Wz=n(nBe,"A",{href:!0});var rEt=s(Wz);hKo=r(rEt,"QDQBertForTokenClassification"),rEt.forEach(t),pKo=r(nBe," (QDQBert model)"),nBe.forEach(t),_Ko=i(J),rv=n(J,"LI",{});var sBe=s(rv);i1e=n(sBe,"STRONG",{});var tEt=s(i1e);uKo=r(tEt,"rembert"),tEt.forEach(t),bKo=r(sBe," \u2014 "),Hz=n(sBe,"A",{href:!0});var aEt=s(Hz);vKo=r(aEt,"RemBertForTokenClassification"),aEt.forEach(t),FKo=r(sBe," (RemBERT model)"),sBe.forEach(t),TKo=i(J),tv=n(J,"LI",{});var lBe=s(tv);d1e=n(lBe,"STRONG",{});var nEt=s(d1e);MKo=r(nEt,"roberta"),nEt.forEach(t),EKo=r(lBe," \u2014 "),Uz=n(lBe,"A",{href:!0});var sEt=s(Uz);CKo=r(sEt,"RobertaForTokenClassification"),sEt.forEach(t),wKo=r(lBe," (RoBERTa model)"),lBe.forEach(t),AKo=i(J),av=n(J,"LI",{});var iBe=s(av);c1e=n(iBe,"STRONG",{});var lEt=s(c1e);LKo=r(lEt,"roformer"),lEt.forEach(t),yKo=r(iBe," \u2014 "),Jz=n(iBe,"A",{href:!0});var iEt=s(Jz);xKo=r(iEt,"RoFormerForTokenClassification"),iEt.forEach(t),$Ko=r(iBe," (RoFormer model)"),iBe.forEach(t),kKo=i(J),nv=n(J,"LI",{});var dBe=s(nv);f1e=n(dBe,"STRONG",{});var dEt=s(f1e);SKo=r(dEt,"squeezebert"),dEt.forEach(t),RKo=r(dBe," \u2014 "),Yz=n(dBe,"A",{href:!0});var cEt=s(Yz);PKo=r(cEt,"SqueezeBertForTokenClassification"),cEt.forEach(t),BKo=r(dBe," (SqueezeBERT model)"),dBe.forEach(t),IKo=i(J),sv=n(J,"LI",{});var cBe=s(sv);m1e=n(cBe,"STRONG",{});var fEt=s(m1e);NKo=r(fEt,"xlm"),fEt.forEach(t),qKo=r(cBe," \u2014 "),Kz=n(cBe,"A",{href:!0});var mEt=s(Kz);jKo=r(mEt,"XLMForTokenClassification"),mEt.forEach(t),DKo=r(cBe," (XLM model)"),cBe.forEach(t),GKo=i(J),lv=n(J,"LI",{});var fBe=s(lv);g1e=n(fBe,"STRONG",{});var gEt=s(g1e);OKo=r(gEt,"xlm-roberta"),gEt.forEach(t),VKo=r(fBe," \u2014 "),Zz=n(fBe,"A",{href:!0});var hEt=s(Zz);XKo=r(hEt,"XLMRobertaForTokenClassification"),hEt.forEach(t),zKo=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),QKo=i(J),iv=n(J,"LI",{});var mBe=s(iv);h1e=n(mBe,"STRONG",{});var pEt=s(h1e);WKo=r(pEt,"xlm-roberta-xl"),pEt.forEach(t),HKo=r(mBe," \u2014 "),eQ=n(mBe,"A",{href:!0});var _Et=s(eQ);UKo=r(_Et,"XLMRobertaXLForTokenClassification"),_Et.forEach(t),JKo=r(mBe," (XLM-RoBERTa-XL model)"),mBe.forEach(t),YKo=i(J),dv=n(J,"LI",{});var gBe=s(dv);p1e=n(gBe,"STRONG",{});var uEt=s(p1e);KKo=r(uEt,"xlnet"),uEt.forEach(t),ZKo=r(gBe," \u2014 "),oQ=n(gBe,"A",{href:!0});var bEt=s(oQ);eZo=r(bEt,"XLNetForTokenClassification"),bEt.forEach(t),oZo=r(gBe," (XLNet model)"),gBe.forEach(t),rZo=i(J),cv=n(J,"LI",{});var hBe=s(cv);_1e=n(hBe,"STRONG",{});var vEt=s(_1e);tZo=r(vEt,"yoso"),vEt.forEach(t),aZo=r(hBe," \u2014 "),rQ=n(hBe,"A",{href:!0});var FEt=s(rQ);nZo=r(FEt,"YosoForTokenClassification"),FEt.forEach(t),sZo=r(hBe," (YOSO model)"),hBe.forEach(t),J.forEach(t),lZo=i(ha),fv=n(ha,"P",{});var pBe=s(fv);iZo=r(pBe,"The model is set in evaluation mode by default using "),u1e=n(pBe,"CODE",{});var TEt=s(u1e);dZo=r(TEt,"model.eval()"),TEt.forEach(t),cZo=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=n(pBe,"CODE",{});var MEt=s(b1e);fZo=r(MEt,"model.train()"),MEt.forEach(t),pBe.forEach(t),mZo=i(ha),T(mv.$$.fragment,ha),ha.forEach(t),il.forEach(t),zVe=i(f),md=n(f,"H2",{class:!0});var Yze=s(md);gv=n(Yze,"A",{id:!0,class:!0,href:!0});var EEt=s(gv);v1e=n(EEt,"SPAN",{});var CEt=s(v1e);T(m8.$$.fragment,CEt),CEt.forEach(t),EEt.forEach(t),gZo=i(Yze),F1e=n(Yze,"SPAN",{});var wEt=s(F1e);hZo=r(wEt,"AutoModelForQuestionAnswering"),wEt.forEach(t),Yze.forEach(t),QVe=i(f),jo=n(f,"DIV",{class:!0});var dl=s(jo);T(g8.$$.fragment,dl),pZo=i(dl),gd=n(dl,"P",{});var xre=s(gd);_Zo=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tQ=n(xre,"A",{href:!0});var AEt=s(tQ);uZo=r(AEt,"from_pretrained()"),AEt.forEach(t),bZo=r(xre," class method or the "),aQ=n(xre,"A",{href:!0});var LEt=s(aQ);vZo=r(LEt,"from_config()"),LEt.forEach(t),FZo=r(xre,` class
method.`),xre.forEach(t),TZo=i(dl),h8=n(dl,"P",{});var Kze=s(h8);MZo=r(Kze,"This class cannot be instantiated directly using "),T1e=n(Kze,"CODE",{});var yEt=s(T1e);EZo=r(yEt,"__init__()"),yEt.forEach(t),CZo=r(Kze," (throws an error)."),Kze.forEach(t),wZo=i(dl),pt=n(dl,"DIV",{class:!0});var _6=s(pt);T(p8.$$.fragment,_6),AZo=i(_6),M1e=n(_6,"P",{});var xEt=s(M1e);LZo=r(xEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xEt.forEach(t),yZo=i(_6),hd=n(_6,"P",{});var $re=s(hd);xZo=r($re,`Note:
Loading a model from its configuration file does `),E1e=n($re,"STRONG",{});var $Et=s(E1e);$Zo=r($Et,"not"),$Et.forEach(t),kZo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n($re,"A",{href:!0});var kEt=s(nQ);SZo=r(kEt,"from_pretrained()"),kEt.forEach(t),RZo=r($re," to load the model weights."),$re.forEach(t),PZo=i(_6),T(hv.$$.fragment,_6),_6.forEach(t),BZo=i(dl),no=n(dl,"DIV",{class:!0});var pa=s(no);T(_8.$$.fragment,pa),IZo=i(pa),C1e=n(pa,"P",{});var SEt=s(C1e);NZo=r(SEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SEt.forEach(t),qZo=i(pa),Va=n(pa,"P",{});var u6=s(Va);jZo=r(u6,"The model class to instantiate is selected based on the "),w1e=n(u6,"CODE",{});var REt=s(w1e);DZo=r(REt,"model_type"),REt.forEach(t),GZo=r(u6,` property of the config object (either
passed as an argument or loaded from `),A1e=n(u6,"CODE",{});var PEt=s(A1e);OZo=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),VZo=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(u6,"CODE",{});var BEt=s(L1e);XZo=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),zZo=r(u6,":"),u6.forEach(t),QZo=i(pa),V=n(pa,"UL",{});var X=s(V);pv=n(X,"LI",{});var _Be=s(pv);y1e=n(_Be,"STRONG",{});var IEt=s(y1e);WZo=r(IEt,"albert"),IEt.forEach(t),HZo=r(_Be," \u2014 "),sQ=n(_Be,"A",{href:!0});var NEt=s(sQ);UZo=r(NEt,"AlbertForQuestionAnswering"),NEt.forEach(t),JZo=r(_Be," (ALBERT model)"),_Be.forEach(t),YZo=i(X),_v=n(X,"LI",{});var uBe=s(_v);x1e=n(uBe,"STRONG",{});var qEt=s(x1e);KZo=r(qEt,"bart"),qEt.forEach(t),ZZo=r(uBe," \u2014 "),lQ=n(uBe,"A",{href:!0});var jEt=s(lQ);eer=r(jEt,"BartForQuestionAnswering"),jEt.forEach(t),oer=r(uBe," (BART model)"),uBe.forEach(t),rer=i(X),uv=n(X,"LI",{});var bBe=s(uv);$1e=n(bBe,"STRONG",{});var DEt=s($1e);ter=r(DEt,"bert"),DEt.forEach(t),aer=r(bBe," \u2014 "),iQ=n(bBe,"A",{href:!0});var GEt=s(iQ);ner=r(GEt,"BertForQuestionAnswering"),GEt.forEach(t),ser=r(bBe," (BERT model)"),bBe.forEach(t),ler=i(X),bv=n(X,"LI",{});var vBe=s(bv);k1e=n(vBe,"STRONG",{});var OEt=s(k1e);ier=r(OEt,"big_bird"),OEt.forEach(t),der=r(vBe," \u2014 "),dQ=n(vBe,"A",{href:!0});var VEt=s(dQ);cer=r(VEt,"BigBirdForQuestionAnswering"),VEt.forEach(t),fer=r(vBe," (BigBird model)"),vBe.forEach(t),mer=i(X),vv=n(X,"LI",{});var FBe=s(vv);S1e=n(FBe,"STRONG",{});var XEt=s(S1e);ger=r(XEt,"bigbird_pegasus"),XEt.forEach(t),her=r(FBe," \u2014 "),cQ=n(FBe,"A",{href:!0});var zEt=s(cQ);per=r(zEt,"BigBirdPegasusForQuestionAnswering"),zEt.forEach(t),_er=r(FBe," (BigBird-Pegasus model)"),FBe.forEach(t),uer=i(X),Fv=n(X,"LI",{});var TBe=s(Fv);R1e=n(TBe,"STRONG",{});var QEt=s(R1e);ber=r(QEt,"camembert"),QEt.forEach(t),ver=r(TBe," \u2014 "),fQ=n(TBe,"A",{href:!0});var WEt=s(fQ);Fer=r(WEt,"CamembertForQuestionAnswering"),WEt.forEach(t),Ter=r(TBe," (CamemBERT model)"),TBe.forEach(t),Mer=i(X),Tv=n(X,"LI",{});var MBe=s(Tv);P1e=n(MBe,"STRONG",{});var HEt=s(P1e);Eer=r(HEt,"canine"),HEt.forEach(t),Cer=r(MBe," \u2014 "),mQ=n(MBe,"A",{href:!0});var UEt=s(mQ);wer=r(UEt,"CanineForQuestionAnswering"),UEt.forEach(t),Aer=r(MBe," (CANINE model)"),MBe.forEach(t),Ler=i(X),Mv=n(X,"LI",{});var EBe=s(Mv);B1e=n(EBe,"STRONG",{});var JEt=s(B1e);yer=r(JEt,"convbert"),JEt.forEach(t),xer=r(EBe," \u2014 "),gQ=n(EBe,"A",{href:!0});var YEt=s(gQ);$er=r(YEt,"ConvBertForQuestionAnswering"),YEt.forEach(t),ker=r(EBe," (ConvBERT model)"),EBe.forEach(t),Ser=i(X),Ev=n(X,"LI",{});var CBe=s(Ev);I1e=n(CBe,"STRONG",{});var KEt=s(I1e);Rer=r(KEt,"data2vec-text"),KEt.forEach(t),Per=r(CBe," \u2014 "),hQ=n(CBe,"A",{href:!0});var ZEt=s(hQ);Ber=r(ZEt,"Data2VecTextForQuestionAnswering"),ZEt.forEach(t),Ier=r(CBe," (Data2VecText model)"),CBe.forEach(t),Ner=i(X),Cv=n(X,"LI",{});var wBe=s(Cv);N1e=n(wBe,"STRONG",{});var eCt=s(N1e);qer=r(eCt,"deberta"),eCt.forEach(t),jer=r(wBe," \u2014 "),pQ=n(wBe,"A",{href:!0});var oCt=s(pQ);Der=r(oCt,"DebertaForQuestionAnswering"),oCt.forEach(t),Ger=r(wBe," (DeBERTa model)"),wBe.forEach(t),Oer=i(X),wv=n(X,"LI",{});var ABe=s(wv);q1e=n(ABe,"STRONG",{});var rCt=s(q1e);Ver=r(rCt,"deberta-v2"),rCt.forEach(t),Xer=r(ABe," \u2014 "),_Q=n(ABe,"A",{href:!0});var tCt=s(_Q);zer=r(tCt,"DebertaV2ForQuestionAnswering"),tCt.forEach(t),Qer=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),Wer=i(X),Av=n(X,"LI",{});var LBe=s(Av);j1e=n(LBe,"STRONG",{});var aCt=s(j1e);Her=r(aCt,"distilbert"),aCt.forEach(t),Uer=r(LBe," \u2014 "),uQ=n(LBe,"A",{href:!0});var nCt=s(uQ);Jer=r(nCt,"DistilBertForQuestionAnswering"),nCt.forEach(t),Yer=r(LBe," (DistilBERT model)"),LBe.forEach(t),Ker=i(X),Lv=n(X,"LI",{});var yBe=s(Lv);D1e=n(yBe,"STRONG",{});var sCt=s(D1e);Zer=r(sCt,"electra"),sCt.forEach(t),eor=r(yBe," \u2014 "),bQ=n(yBe,"A",{href:!0});var lCt=s(bQ);oor=r(lCt,"ElectraForQuestionAnswering"),lCt.forEach(t),ror=r(yBe," (ELECTRA model)"),yBe.forEach(t),tor=i(X),yv=n(X,"LI",{});var xBe=s(yv);G1e=n(xBe,"STRONG",{});var iCt=s(G1e);aor=r(iCt,"flaubert"),iCt.forEach(t),nor=r(xBe," \u2014 "),vQ=n(xBe,"A",{href:!0});var dCt=s(vQ);sor=r(dCt,"FlaubertForQuestionAnsweringSimple"),dCt.forEach(t),lor=r(xBe," (FlauBERT model)"),xBe.forEach(t),ior=i(X),xv=n(X,"LI",{});var $Be=s(xv);O1e=n($Be,"STRONG",{});var cCt=s(O1e);dor=r(cCt,"fnet"),cCt.forEach(t),cor=r($Be," \u2014 "),FQ=n($Be,"A",{href:!0});var fCt=s(FQ);mor=r(fCt,"FNetForQuestionAnswering"),fCt.forEach(t),gor=r($Be," (FNet model)"),$Be.forEach(t),hor=i(X),$v=n(X,"LI",{});var kBe=s($v);V1e=n(kBe,"STRONG",{});var mCt=s(V1e);por=r(mCt,"funnel"),mCt.forEach(t),_or=r(kBe," \u2014 "),TQ=n(kBe,"A",{href:!0});var gCt=s(TQ);uor=r(gCt,"FunnelForQuestionAnswering"),gCt.forEach(t),bor=r(kBe," (Funnel Transformer model)"),kBe.forEach(t),vor=i(X),kv=n(X,"LI",{});var SBe=s(kv);X1e=n(SBe,"STRONG",{});var hCt=s(X1e);For=r(hCt,"gptj"),hCt.forEach(t),Tor=r(SBe," \u2014 "),MQ=n(SBe,"A",{href:!0});var pCt=s(MQ);Mor=r(pCt,"GPTJForQuestionAnswering"),pCt.forEach(t),Eor=r(SBe," (GPT-J model)"),SBe.forEach(t),Cor=i(X),Sv=n(X,"LI",{});var RBe=s(Sv);z1e=n(RBe,"STRONG",{});var _Ct=s(z1e);wor=r(_Ct,"ibert"),_Ct.forEach(t),Aor=r(RBe," \u2014 "),EQ=n(RBe,"A",{href:!0});var uCt=s(EQ);Lor=r(uCt,"IBertForQuestionAnswering"),uCt.forEach(t),yor=r(RBe," (I-BERT model)"),RBe.forEach(t),xor=i(X),Rv=n(X,"LI",{});var PBe=s(Rv);Q1e=n(PBe,"STRONG",{});var bCt=s(Q1e);$or=r(bCt,"layoutlmv2"),bCt.forEach(t),kor=r(PBe," \u2014 "),CQ=n(PBe,"A",{href:!0});var vCt=s(CQ);Sor=r(vCt,"LayoutLMv2ForQuestionAnswering"),vCt.forEach(t),Ror=r(PBe," (LayoutLMv2 model)"),PBe.forEach(t),Por=i(X),Pv=n(X,"LI",{});var BBe=s(Pv);W1e=n(BBe,"STRONG",{});var FCt=s(W1e);Bor=r(FCt,"layoutlmv3"),FCt.forEach(t),Ior=r(BBe," \u2014 "),wQ=n(BBe,"A",{href:!0});var TCt=s(wQ);Nor=r(TCt,"LayoutLMv3ForQuestionAnswering"),TCt.forEach(t),qor=r(BBe," (LayoutLMv3 model)"),BBe.forEach(t),jor=i(X),Bv=n(X,"LI",{});var IBe=s(Bv);H1e=n(IBe,"STRONG",{});var MCt=s(H1e);Dor=r(MCt,"led"),MCt.forEach(t),Gor=r(IBe," \u2014 "),AQ=n(IBe,"A",{href:!0});var ECt=s(AQ);Oor=r(ECt,"LEDForQuestionAnswering"),ECt.forEach(t),Vor=r(IBe," (LED model)"),IBe.forEach(t),Xor=i(X),Iv=n(X,"LI",{});var NBe=s(Iv);U1e=n(NBe,"STRONG",{});var CCt=s(U1e);zor=r(CCt,"longformer"),CCt.forEach(t),Qor=r(NBe," \u2014 "),LQ=n(NBe,"A",{href:!0});var wCt=s(LQ);Wor=r(wCt,"LongformerForQuestionAnswering"),wCt.forEach(t),Hor=r(NBe," (Longformer model)"),NBe.forEach(t),Uor=i(X),Nv=n(X,"LI",{});var qBe=s(Nv);J1e=n(qBe,"STRONG",{});var ACt=s(J1e);Jor=r(ACt,"lxmert"),ACt.forEach(t),Yor=r(qBe," \u2014 "),yQ=n(qBe,"A",{href:!0});var LCt=s(yQ);Kor=r(LCt,"LxmertForQuestionAnswering"),LCt.forEach(t),Zor=r(qBe," (LXMERT model)"),qBe.forEach(t),err=i(X),qv=n(X,"LI",{});var jBe=s(qv);Y1e=n(jBe,"STRONG",{});var yCt=s(Y1e);orr=r(yCt,"mbart"),yCt.forEach(t),rrr=r(jBe," \u2014 "),xQ=n(jBe,"A",{href:!0});var xCt=s(xQ);trr=r(xCt,"MBartForQuestionAnswering"),xCt.forEach(t),arr=r(jBe," (mBART model)"),jBe.forEach(t),nrr=i(X),jv=n(X,"LI",{});var DBe=s(jv);K1e=n(DBe,"STRONG",{});var $Ct=s(K1e);srr=r($Ct,"megatron-bert"),$Ct.forEach(t),lrr=r(DBe," \u2014 "),$Q=n(DBe,"A",{href:!0});var kCt=s($Q);irr=r(kCt,"MegatronBertForQuestionAnswering"),kCt.forEach(t),drr=r(DBe," (Megatron-BERT model)"),DBe.forEach(t),crr=i(X),Dv=n(X,"LI",{});var GBe=s(Dv);Z1e=n(GBe,"STRONG",{});var SCt=s(Z1e);frr=r(SCt,"mobilebert"),SCt.forEach(t),mrr=r(GBe," \u2014 "),kQ=n(GBe,"A",{href:!0});var RCt=s(kQ);grr=r(RCt,"MobileBertForQuestionAnswering"),RCt.forEach(t),hrr=r(GBe," (MobileBERT model)"),GBe.forEach(t),prr=i(X),Gv=n(X,"LI",{});var OBe=s(Gv);e7e=n(OBe,"STRONG",{});var PCt=s(e7e);_rr=r(PCt,"mpnet"),PCt.forEach(t),urr=r(OBe," \u2014 "),SQ=n(OBe,"A",{href:!0});var BCt=s(SQ);brr=r(BCt,"MPNetForQuestionAnswering"),BCt.forEach(t),vrr=r(OBe," (MPNet model)"),OBe.forEach(t),Frr=i(X),Ov=n(X,"LI",{});var VBe=s(Ov);o7e=n(VBe,"STRONG",{});var ICt=s(o7e);Trr=r(ICt,"mvp"),ICt.forEach(t),Mrr=r(VBe," \u2014 "),RQ=n(VBe,"A",{href:!0});var NCt=s(RQ);Err=r(NCt,"MvpForQuestionAnswering"),NCt.forEach(t),Crr=r(VBe," (MVP model)"),VBe.forEach(t),wrr=i(X),Vv=n(X,"LI",{});var XBe=s(Vv);r7e=n(XBe,"STRONG",{});var qCt=s(r7e);Arr=r(qCt,"nezha"),qCt.forEach(t),Lrr=r(XBe," \u2014 "),PQ=n(XBe,"A",{href:!0});var jCt=s(PQ);yrr=r(jCt,"NezhaForQuestionAnswering"),jCt.forEach(t),xrr=r(XBe," (Nezha model)"),XBe.forEach(t),$rr=i(X),Xv=n(X,"LI",{});var zBe=s(Xv);t7e=n(zBe,"STRONG",{});var DCt=s(t7e);krr=r(DCt,"nystromformer"),DCt.forEach(t),Srr=r(zBe," \u2014 "),BQ=n(zBe,"A",{href:!0});var GCt=s(BQ);Rrr=r(GCt,"NystromformerForQuestionAnswering"),GCt.forEach(t),Prr=r(zBe," (Nystr\xF6mformer model)"),zBe.forEach(t),Brr=i(X),zv=n(X,"LI",{});var QBe=s(zv);a7e=n(QBe,"STRONG",{});var OCt=s(a7e);Irr=r(OCt,"qdqbert"),OCt.forEach(t),Nrr=r(QBe," \u2014 "),IQ=n(QBe,"A",{href:!0});var VCt=s(IQ);qrr=r(VCt,"QDQBertForQuestionAnswering"),VCt.forEach(t),jrr=r(QBe," (QDQBert model)"),QBe.forEach(t),Drr=i(X),Qv=n(X,"LI",{});var WBe=s(Qv);n7e=n(WBe,"STRONG",{});var XCt=s(n7e);Grr=r(XCt,"reformer"),XCt.forEach(t),Orr=r(WBe," \u2014 "),NQ=n(WBe,"A",{href:!0});var zCt=s(NQ);Vrr=r(zCt,"ReformerForQuestionAnswering"),zCt.forEach(t),Xrr=r(WBe," (Reformer model)"),WBe.forEach(t),zrr=i(X),Wv=n(X,"LI",{});var HBe=s(Wv);s7e=n(HBe,"STRONG",{});var QCt=s(s7e);Qrr=r(QCt,"rembert"),QCt.forEach(t),Wrr=r(HBe," \u2014 "),qQ=n(HBe,"A",{href:!0});var WCt=s(qQ);Hrr=r(WCt,"RemBertForQuestionAnswering"),WCt.forEach(t),Urr=r(HBe," (RemBERT model)"),HBe.forEach(t),Jrr=i(X),Hv=n(X,"LI",{});var UBe=s(Hv);l7e=n(UBe,"STRONG",{});var HCt=s(l7e);Yrr=r(HCt,"roberta"),HCt.forEach(t),Krr=r(UBe," \u2014 "),jQ=n(UBe,"A",{href:!0});var UCt=s(jQ);Zrr=r(UCt,"RobertaForQuestionAnswering"),UCt.forEach(t),etr=r(UBe," (RoBERTa model)"),UBe.forEach(t),otr=i(X),Uv=n(X,"LI",{});var JBe=s(Uv);i7e=n(JBe,"STRONG",{});var JCt=s(i7e);rtr=r(JCt,"roformer"),JCt.forEach(t),ttr=r(JBe," \u2014 "),DQ=n(JBe,"A",{href:!0});var YCt=s(DQ);atr=r(YCt,"RoFormerForQuestionAnswering"),YCt.forEach(t),ntr=r(JBe," (RoFormer model)"),JBe.forEach(t),str=i(X),Jv=n(X,"LI",{});var YBe=s(Jv);d7e=n(YBe,"STRONG",{});var KCt=s(d7e);ltr=r(KCt,"splinter"),KCt.forEach(t),itr=r(YBe," \u2014 "),GQ=n(YBe,"A",{href:!0});var ZCt=s(GQ);dtr=r(ZCt,"SplinterForQuestionAnswering"),ZCt.forEach(t),ctr=r(YBe," (Splinter model)"),YBe.forEach(t),ftr=i(X),Yv=n(X,"LI",{});var KBe=s(Yv);c7e=n(KBe,"STRONG",{});var e5t=s(c7e);mtr=r(e5t,"squeezebert"),e5t.forEach(t),gtr=r(KBe," \u2014 "),OQ=n(KBe,"A",{href:!0});var o5t=s(OQ);htr=r(o5t,"SqueezeBertForQuestionAnswering"),o5t.forEach(t),ptr=r(KBe," (SqueezeBERT model)"),KBe.forEach(t),_tr=i(X),Kv=n(X,"LI",{});var ZBe=s(Kv);f7e=n(ZBe,"STRONG",{});var r5t=s(f7e);utr=r(r5t,"xlm"),r5t.forEach(t),btr=r(ZBe," \u2014 "),VQ=n(ZBe,"A",{href:!0});var t5t=s(VQ);vtr=r(t5t,"XLMForQuestionAnsweringSimple"),t5t.forEach(t),Ftr=r(ZBe," (XLM model)"),ZBe.forEach(t),Ttr=i(X),Zv=n(X,"LI",{});var eIe=s(Zv);m7e=n(eIe,"STRONG",{});var a5t=s(m7e);Mtr=r(a5t,"xlm-roberta"),a5t.forEach(t),Etr=r(eIe," \u2014 "),XQ=n(eIe,"A",{href:!0});var n5t=s(XQ);Ctr=r(n5t,"XLMRobertaForQuestionAnswering"),n5t.forEach(t),wtr=r(eIe," (XLM-RoBERTa model)"),eIe.forEach(t),Atr=i(X),e3=n(X,"LI",{});var oIe=s(e3);g7e=n(oIe,"STRONG",{});var s5t=s(g7e);Ltr=r(s5t,"xlm-roberta-xl"),s5t.forEach(t),ytr=r(oIe," \u2014 "),zQ=n(oIe,"A",{href:!0});var l5t=s(zQ);xtr=r(l5t,"XLMRobertaXLForQuestionAnswering"),l5t.forEach(t),$tr=r(oIe," (XLM-RoBERTa-XL model)"),oIe.forEach(t),ktr=i(X),o3=n(X,"LI",{});var rIe=s(o3);h7e=n(rIe,"STRONG",{});var i5t=s(h7e);Str=r(i5t,"xlnet"),i5t.forEach(t),Rtr=r(rIe," \u2014 "),QQ=n(rIe,"A",{href:!0});var d5t=s(QQ);Ptr=r(d5t,"XLNetForQuestionAnsweringSimple"),d5t.forEach(t),Btr=r(rIe," (XLNet model)"),rIe.forEach(t),Itr=i(X),r3=n(X,"LI",{});var tIe=s(r3);p7e=n(tIe,"STRONG",{});var c5t=s(p7e);Ntr=r(c5t,"yoso"),c5t.forEach(t),qtr=r(tIe," \u2014 "),WQ=n(tIe,"A",{href:!0});var f5t=s(WQ);jtr=r(f5t,"YosoForQuestionAnswering"),f5t.forEach(t),Dtr=r(tIe," (YOSO model)"),tIe.forEach(t),X.forEach(t),Gtr=i(pa),t3=n(pa,"P",{});var aIe=s(t3);Otr=r(aIe,"The model is set in evaluation mode by default using "),_7e=n(aIe,"CODE",{});var m5t=s(_7e);Vtr=r(m5t,"model.eval()"),m5t.forEach(t),Xtr=r(aIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=n(aIe,"CODE",{});var g5t=s(u7e);ztr=r(g5t,"model.train()"),g5t.forEach(t),aIe.forEach(t),Qtr=i(pa),T(a3.$$.fragment,pa),pa.forEach(t),dl.forEach(t),WVe=i(f),pd=n(f,"H2",{class:!0});var Zze=s(pd);n3=n(Zze,"A",{id:!0,class:!0,href:!0});var h5t=s(n3);b7e=n(h5t,"SPAN",{});var p5t=s(b7e);T(u8.$$.fragment,p5t),p5t.forEach(t),h5t.forEach(t),Wtr=i(Zze),v7e=n(Zze,"SPAN",{});var _5t=s(v7e);Htr=r(_5t,"AutoModelForTableQuestionAnswering"),_5t.forEach(t),Zze.forEach(t),HVe=i(f),Do=n(f,"DIV",{class:!0});var cl=s(Do);T(b8.$$.fragment,cl),Utr=i(cl),_d=n(cl,"P",{});var kre=s(_d);Jtr=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HQ=n(kre,"A",{href:!0});var u5t=s(HQ);Ytr=r(u5t,"from_pretrained()"),u5t.forEach(t),Ktr=r(kre," class method or the "),UQ=n(kre,"A",{href:!0});var b5t=s(UQ);Ztr=r(b5t,"from_config()"),b5t.forEach(t),ear=r(kre,` class
method.`),kre.forEach(t),oar=i(cl),v8=n(cl,"P",{});var eQe=s(v8);rar=r(eQe,"This class cannot be instantiated directly using "),F7e=n(eQe,"CODE",{});var v5t=s(F7e);tar=r(v5t,"__init__()"),v5t.forEach(t),aar=r(eQe," (throws an error)."),eQe.forEach(t),nar=i(cl),_t=n(cl,"DIV",{class:!0});var b6=s(_t);T(F8.$$.fragment,b6),sar=i(b6),T7e=n(b6,"P",{});var F5t=s(T7e);lar=r(F5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F5t.forEach(t),iar=i(b6),ud=n(b6,"P",{});var Sre=s(ud);dar=r(Sre,`Note:
Loading a model from its configuration file does `),M7e=n(Sre,"STRONG",{});var T5t=s(M7e);car=r(T5t,"not"),T5t.forEach(t),far=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(Sre,"A",{href:!0});var M5t=s(JQ);mar=r(M5t,"from_pretrained()"),M5t.forEach(t),gar=r(Sre," to load the model weights."),Sre.forEach(t),har=i(b6),T(s3.$$.fragment,b6),b6.forEach(t),par=i(cl),so=n(cl,"DIV",{class:!0});var _a=s(so);T(T8.$$.fragment,_a),_ar=i(_a),E7e=n(_a,"P",{});var E5t=s(E7e);uar=r(E5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E5t.forEach(t),bar=i(_a),Xa=n(_a,"P",{});var v6=s(Xa);Far=r(v6,"The model class to instantiate is selected based on the "),C7e=n(v6,"CODE",{});var C5t=s(C7e);Tar=r(C5t,"model_type"),C5t.forEach(t),Mar=r(v6,` property of the config object (either
passed as an argument or loaded from `),w7e=n(v6,"CODE",{});var w5t=s(w7e);Ear=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),Car=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(v6,"CODE",{});var A5t=s(A7e);war=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),Aar=r(v6,":"),v6.forEach(t),Lar=i(_a),L7e=n(_a,"UL",{});var L5t=s(L7e);l3=n(L5t,"LI",{});var nIe=s(l3);y7e=n(nIe,"STRONG",{});var y5t=s(y7e);yar=r(y5t,"tapas"),y5t.forEach(t),xar=r(nIe," \u2014 "),YQ=n(nIe,"A",{href:!0});var x5t=s(YQ);$ar=r(x5t,"TapasForQuestionAnswering"),x5t.forEach(t),kar=r(nIe," (TAPAS model)"),nIe.forEach(t),L5t.forEach(t),Sar=i(_a),i3=n(_a,"P",{});var sIe=s(i3);Rar=r(sIe,"The model is set in evaluation mode by default using "),x7e=n(sIe,"CODE",{});var $5t=s(x7e);Par=r($5t,"model.eval()"),$5t.forEach(t),Bar=r(sIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$7e=n(sIe,"CODE",{});var k5t=s($7e);Iar=r(k5t,"model.train()"),k5t.forEach(t),sIe.forEach(t),Nar=i(_a),T(d3.$$.fragment,_a),_a.forEach(t),cl.forEach(t),UVe=i(f),bd=n(f,"H2",{class:!0});var oQe=s(bd);c3=n(oQe,"A",{id:!0,class:!0,href:!0});var S5t=s(c3);k7e=n(S5t,"SPAN",{});var R5t=s(k7e);T(M8.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),qar=i(oQe),S7e=n(oQe,"SPAN",{});var P5t=s(S7e);jar=r(P5t,"AutoModelForImageClassification"),P5t.forEach(t),oQe.forEach(t),JVe=i(f),Go=n(f,"DIV",{class:!0});var fl=s(Go);T(E8.$$.fragment,fl),Dar=i(fl),vd=n(fl,"P",{});var Rre=s(vd);Gar=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=n(Rre,"A",{href:!0});var B5t=s(KQ);Oar=r(B5t,"from_pretrained()"),B5t.forEach(t),Var=r(Rre," class method or the "),ZQ=n(Rre,"A",{href:!0});var I5t=s(ZQ);Xar=r(I5t,"from_config()"),I5t.forEach(t),zar=r(Rre,` class
method.`),Rre.forEach(t),Qar=i(fl),C8=n(fl,"P",{});var rQe=s(C8);War=r(rQe,"This class cannot be instantiated directly using "),R7e=n(rQe,"CODE",{});var N5t=s(R7e);Har=r(N5t,"__init__()"),N5t.forEach(t),Uar=r(rQe," (throws an error)."),rQe.forEach(t),Jar=i(fl),ut=n(fl,"DIV",{class:!0});var F6=s(ut);T(w8.$$.fragment,F6),Yar=i(F6),P7e=n(F6,"P",{});var q5t=s(P7e);Kar=r(q5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q5t.forEach(t),Zar=i(F6),Fd=n(F6,"P",{});var Pre=s(Fd);enr=r(Pre,`Note:
Loading a model from its configuration file does `),B7e=n(Pre,"STRONG",{});var j5t=s(B7e);onr=r(j5t,"not"),j5t.forEach(t),rnr=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(Pre,"A",{href:!0});var D5t=s(eW);tnr=r(D5t,"from_pretrained()"),D5t.forEach(t),anr=r(Pre," to load the model weights."),Pre.forEach(t),nnr=i(F6),T(f3.$$.fragment,F6),F6.forEach(t),snr=i(fl),lo=n(fl,"DIV",{class:!0});var ua=s(lo);T(A8.$$.fragment,ua),lnr=i(ua),I7e=n(ua,"P",{});var G5t=s(I7e);inr=r(G5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G5t.forEach(t),dnr=i(ua),za=n(ua,"P",{});var T6=s(za);cnr=r(T6,"The model class to instantiate is selected based on the "),N7e=n(T6,"CODE",{});var O5t=s(N7e);fnr=r(O5t,"model_type"),O5t.forEach(t),mnr=r(T6,` property of the config object (either
passed as an argument or loaded from `),q7e=n(T6,"CODE",{});var V5t=s(q7e);gnr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),hnr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(T6,"CODE",{});var X5t=s(j7e);pnr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),_nr=r(T6,":"),T6.forEach(t),unr=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);m3=n(Te,"LI",{});var lIe=s(m3);D7e=n(lIe,"STRONG",{});var z5t=s(D7e);bnr=r(z5t,"beit"),z5t.forEach(t),vnr=r(lIe," \u2014 "),oW=n(lIe,"A",{href:!0});var Q5t=s(oW);Fnr=r(Q5t,"BeitForImageClassification"),Q5t.forEach(t),Tnr=r(lIe," (BEiT model)"),lIe.forEach(t),Mnr=i(Te),g3=n(Te,"LI",{});var iIe=s(g3);G7e=n(iIe,"STRONG",{});var W5t=s(G7e);Enr=r(W5t,"convnext"),W5t.forEach(t),Cnr=r(iIe," \u2014 "),rW=n(iIe,"A",{href:!0});var H5t=s(rW);wnr=r(H5t,"ConvNextForImageClassification"),H5t.forEach(t),Anr=r(iIe," (ConvNeXT model)"),iIe.forEach(t),Lnr=i(Te),h3=n(Te,"LI",{});var dIe=s(h3);O7e=n(dIe,"STRONG",{});var U5t=s(O7e);ynr=r(U5t,"cvt"),U5t.forEach(t),xnr=r(dIe," \u2014 "),tW=n(dIe,"A",{href:!0});var J5t=s(tW);$nr=r(J5t,"CvtForImageClassification"),J5t.forEach(t),knr=r(dIe," (CvT model)"),dIe.forEach(t),Snr=i(Te),p3=n(Te,"LI",{});var cIe=s(p3);V7e=n(cIe,"STRONG",{});var Y5t=s(V7e);Rnr=r(Y5t,"data2vec-vision"),Y5t.forEach(t),Pnr=r(cIe," \u2014 "),aW=n(cIe,"A",{href:!0});var K5t=s(aW);Bnr=r(K5t,"Data2VecVisionForImageClassification"),K5t.forEach(t),Inr=r(cIe," (Data2VecVision model)"),cIe.forEach(t),Nnr=i(Te),Ws=n(Te,"LI",{});var MS=s(Ws);X7e=n(MS,"STRONG",{});var Z5t=s(X7e);qnr=r(Z5t,"deit"),Z5t.forEach(t),jnr=r(MS," \u2014 "),nW=n(MS,"A",{href:!0});var e0t=s(nW);Dnr=r(e0t,"DeiTForImageClassification"),e0t.forEach(t),Gnr=r(MS," or "),sW=n(MS,"A",{href:!0});var o0t=s(sW);Onr=r(o0t,"DeiTForImageClassificationWithTeacher"),o0t.forEach(t),Vnr=r(MS," (DeiT model)"),MS.forEach(t),Xnr=i(Te),_3=n(Te,"LI",{});var fIe=s(_3);z7e=n(fIe,"STRONG",{});var r0t=s(z7e);znr=r(r0t,"imagegpt"),r0t.forEach(t),Qnr=r(fIe," \u2014 "),lW=n(fIe,"A",{href:!0});var t0t=s(lW);Wnr=r(t0t,"ImageGPTForImageClassification"),t0t.forEach(t),Hnr=r(fIe," (ImageGPT model)"),fIe.forEach(t),Unr=i(Te),Hs=n(Te,"LI",{});var ES=s(Hs);Q7e=n(ES,"STRONG",{});var a0t=s(Q7e);Jnr=r(a0t,"levit"),a0t.forEach(t),Ynr=r(ES," \u2014 "),iW=n(ES,"A",{href:!0});var n0t=s(iW);Knr=r(n0t,"LevitForImageClassification"),n0t.forEach(t),Znr=r(ES," or "),dW=n(ES,"A",{href:!0});var s0t=s(dW);esr=r(s0t,"LevitForImageClassificationWithTeacher"),s0t.forEach(t),osr=r(ES," (LeViT model)"),ES.forEach(t),rsr=i(Te),bt=n(Te,"LI",{});var kf=s(bt);W7e=n(kf,"STRONG",{});var l0t=s(W7e);tsr=r(l0t,"perceiver"),l0t.forEach(t),asr=r(kf," \u2014 "),cW=n(kf,"A",{href:!0});var i0t=s(cW);nsr=r(i0t,"PerceiverForImageClassificationLearned"),i0t.forEach(t),ssr=r(kf," or "),fW=n(kf,"A",{href:!0});var d0t=s(fW);lsr=r(d0t,"PerceiverForImageClassificationFourier"),d0t.forEach(t),isr=r(kf," or "),mW=n(kf,"A",{href:!0});var c0t=s(mW);dsr=r(c0t,"PerceiverForImageClassificationConvProcessing"),c0t.forEach(t),csr=r(kf," (Perceiver model)"),kf.forEach(t),fsr=i(Te),u3=n(Te,"LI",{});var mIe=s(u3);H7e=n(mIe,"STRONG",{});var f0t=s(H7e);msr=r(f0t,"poolformer"),f0t.forEach(t),gsr=r(mIe," \u2014 "),gW=n(mIe,"A",{href:!0});var m0t=s(gW);hsr=r(m0t,"PoolFormerForImageClassification"),m0t.forEach(t),psr=r(mIe," (PoolFormer model)"),mIe.forEach(t),_sr=i(Te),b3=n(Te,"LI",{});var gIe=s(b3);U7e=n(gIe,"STRONG",{});var g0t=s(U7e);usr=r(g0t,"regnet"),g0t.forEach(t),bsr=r(gIe," \u2014 "),hW=n(gIe,"A",{href:!0});var h0t=s(hW);vsr=r(h0t,"RegNetForImageClassification"),h0t.forEach(t),Fsr=r(gIe," (RegNet model)"),gIe.forEach(t),Tsr=i(Te),v3=n(Te,"LI",{});var hIe=s(v3);J7e=n(hIe,"STRONG",{});var p0t=s(J7e);Msr=r(p0t,"resnet"),p0t.forEach(t),Esr=r(hIe," \u2014 "),pW=n(hIe,"A",{href:!0});var _0t=s(pW);Csr=r(_0t,"ResNetForImageClassification"),_0t.forEach(t),wsr=r(hIe," (ResNet model)"),hIe.forEach(t),Asr=i(Te),F3=n(Te,"LI",{});var pIe=s(F3);Y7e=n(pIe,"STRONG",{});var u0t=s(Y7e);Lsr=r(u0t,"segformer"),u0t.forEach(t),ysr=r(pIe," \u2014 "),_W=n(pIe,"A",{href:!0});var b0t=s(_W);xsr=r(b0t,"SegformerForImageClassification"),b0t.forEach(t),$sr=r(pIe," (SegFormer model)"),pIe.forEach(t),ksr=i(Te),T3=n(Te,"LI",{});var _Ie=s(T3);K7e=n(_Ie,"STRONG",{});var v0t=s(K7e);Ssr=r(v0t,"swin"),v0t.forEach(t),Rsr=r(_Ie," \u2014 "),uW=n(_Ie,"A",{href:!0});var F0t=s(uW);Psr=r(F0t,"SwinForImageClassification"),F0t.forEach(t),Bsr=r(_Ie," (Swin Transformer model)"),_Ie.forEach(t),Isr=i(Te),M3=n(Te,"LI",{});var uIe=s(M3);Z7e=n(uIe,"STRONG",{});var T0t=s(Z7e);Nsr=r(T0t,"van"),T0t.forEach(t),qsr=r(uIe," \u2014 "),bW=n(uIe,"A",{href:!0});var M0t=s(bW);jsr=r(M0t,"VanForImageClassification"),M0t.forEach(t),Dsr=r(uIe," (VAN model)"),uIe.forEach(t),Gsr=i(Te),E3=n(Te,"LI",{});var bIe=s(E3);e4e=n(bIe,"STRONG",{});var E0t=s(e4e);Osr=r(E0t,"vit"),E0t.forEach(t),Vsr=r(bIe," \u2014 "),vW=n(bIe,"A",{href:!0});var C0t=s(vW);Xsr=r(C0t,"ViTForImageClassification"),C0t.forEach(t),zsr=r(bIe," (ViT model)"),bIe.forEach(t),Te.forEach(t),Qsr=i(ua),C3=n(ua,"P",{});var vIe=s(C3);Wsr=r(vIe,"The model is set in evaluation mode by default using "),o4e=n(vIe,"CODE",{});var w0t=s(o4e);Hsr=r(w0t,"model.eval()"),w0t.forEach(t),Usr=r(vIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=n(vIe,"CODE",{});var A0t=s(r4e);Jsr=r(A0t,"model.train()"),A0t.forEach(t),vIe.forEach(t),Ysr=i(ua),T(w3.$$.fragment,ua),ua.forEach(t),fl.forEach(t),YVe=i(f),Td=n(f,"H2",{class:!0});var tQe=s(Td);A3=n(tQe,"A",{id:!0,class:!0,href:!0});var L0t=s(A3);t4e=n(L0t,"SPAN",{});var y0t=s(t4e);T(L8.$$.fragment,y0t),y0t.forEach(t),L0t.forEach(t),Ksr=i(tQe),a4e=n(tQe,"SPAN",{});var x0t=s(a4e);Zsr=r(x0t,"AutoModelForVision2Seq"),x0t.forEach(t),tQe.forEach(t),KVe=i(f),Oo=n(f,"DIV",{class:!0});var ml=s(Oo);T(y8.$$.fragment,ml),elr=i(ml),Md=n(ml,"P",{});var Bre=s(Md);olr=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FW=n(Bre,"A",{href:!0});var $0t=s(FW);rlr=r($0t,"from_pretrained()"),$0t.forEach(t),tlr=r(Bre," class method or the "),TW=n(Bre,"A",{href:!0});var k0t=s(TW);alr=r(k0t,"from_config()"),k0t.forEach(t),nlr=r(Bre,` class
method.`),Bre.forEach(t),slr=i(ml),x8=n(ml,"P",{});var aQe=s(x8);llr=r(aQe,"This class cannot be instantiated directly using "),n4e=n(aQe,"CODE",{});var S0t=s(n4e);ilr=r(S0t,"__init__()"),S0t.forEach(t),dlr=r(aQe," (throws an error)."),aQe.forEach(t),clr=i(ml),vt=n(ml,"DIV",{class:!0});var M6=s(vt);T($8.$$.fragment,M6),flr=i(M6),s4e=n(M6,"P",{});var R0t=s(s4e);mlr=r(R0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),R0t.forEach(t),glr=i(M6),Ed=n(M6,"P",{});var Ire=s(Ed);hlr=r(Ire,`Note:
Loading a model from its configuration file does `),l4e=n(Ire,"STRONG",{});var P0t=s(l4e);plr=r(P0t,"not"),P0t.forEach(t),_lr=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Ire,"A",{href:!0});var B0t=s(MW);ulr=r(B0t,"from_pretrained()"),B0t.forEach(t),blr=r(Ire," to load the model weights."),Ire.forEach(t),vlr=i(M6),T(L3.$$.fragment,M6),M6.forEach(t),Flr=i(ml),io=n(ml,"DIV",{class:!0});var ba=s(io);T(k8.$$.fragment,ba),Tlr=i(ba),i4e=n(ba,"P",{});var I0t=s(i4e);Mlr=r(I0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),I0t.forEach(t),Elr=i(ba),Qa=n(ba,"P",{});var E6=s(Qa);Clr=r(E6,"The model class to instantiate is selected based on the "),d4e=n(E6,"CODE",{});var N0t=s(d4e);wlr=r(N0t,"model_type"),N0t.forEach(t),Alr=r(E6,` property of the config object (either
passed as an argument or loaded from `),c4e=n(E6,"CODE",{});var q0t=s(c4e);Llr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),ylr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(E6,"CODE",{});var j0t=s(f4e);xlr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),$lr=r(E6,":"),E6.forEach(t),klr=i(ba),m4e=n(ba,"UL",{});var D0t=s(m4e);y3=n(D0t,"LI",{});var FIe=s(y3);g4e=n(FIe,"STRONG",{});var G0t=s(g4e);Slr=r(G0t,"vision-encoder-decoder"),G0t.forEach(t),Rlr=r(FIe," \u2014 "),EW=n(FIe,"A",{href:!0});var O0t=s(EW);Plr=r(O0t,"VisionEncoderDecoderModel"),O0t.forEach(t),Blr=r(FIe," (Vision Encoder decoder model)"),FIe.forEach(t),D0t.forEach(t),Ilr=i(ba),x3=n(ba,"P",{});var TIe=s(x3);Nlr=r(TIe,"The model is set in evaluation mode by default using "),h4e=n(TIe,"CODE",{});var V0t=s(h4e);qlr=r(V0t,"model.eval()"),V0t.forEach(t),jlr=r(TIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p4e=n(TIe,"CODE",{});var X0t=s(p4e);Dlr=r(X0t,"model.train()"),X0t.forEach(t),TIe.forEach(t),Glr=i(ba),T($3.$$.fragment,ba),ba.forEach(t),ml.forEach(t),ZVe=i(f),Cd=n(f,"H2",{class:!0});var nQe=s(Cd);k3=n(nQe,"A",{id:!0,class:!0,href:!0});var z0t=s(k3);_4e=n(z0t,"SPAN",{});var Q0t=s(_4e);T(S8.$$.fragment,Q0t),Q0t.forEach(t),z0t.forEach(t),Olr=i(nQe),u4e=n(nQe,"SPAN",{});var W0t=s(u4e);Vlr=r(W0t,"AutoModelForVisualQuestionAnswering"),W0t.forEach(t),nQe.forEach(t),eXe=i(f),Vo=n(f,"DIV",{class:!0});var gl=s(Vo);T(R8.$$.fragment,gl),Xlr=i(gl),wd=n(gl,"P",{});var Nre=s(wd);zlr=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),CW=n(Nre,"A",{href:!0});var H0t=s(CW);Qlr=r(H0t,"from_pretrained()"),H0t.forEach(t),Wlr=r(Nre," class method or the "),wW=n(Nre,"A",{href:!0});var U0t=s(wW);Hlr=r(U0t,"from_config()"),U0t.forEach(t),Ulr=r(Nre,` class
method.`),Nre.forEach(t),Jlr=i(gl),P8=n(gl,"P",{});var sQe=s(P8);Ylr=r(sQe,"This class cannot be instantiated directly using "),b4e=n(sQe,"CODE",{});var J0t=s(b4e);Klr=r(J0t,"__init__()"),J0t.forEach(t),Zlr=r(sQe," (throws an error)."),sQe.forEach(t),eir=i(gl),Ft=n(gl,"DIV",{class:!0});var C6=s(Ft);T(B8.$$.fragment,C6),oir=i(C6),v4e=n(C6,"P",{});var Y0t=s(v4e);rir=r(Y0t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Y0t.forEach(t),tir=i(C6),Ad=n(C6,"P",{});var qre=s(Ad);air=r(qre,`Note:
Loading a model from its configuration file does `),F4e=n(qre,"STRONG",{});var K0t=s(F4e);nir=r(K0t,"not"),K0t.forEach(t),sir=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(qre,"A",{href:!0});var Z0t=s(AW);lir=r(Z0t,"from_pretrained()"),Z0t.forEach(t),iir=r(qre," to load the model weights."),qre.forEach(t),dir=i(C6),T(S3.$$.fragment,C6),C6.forEach(t),cir=i(gl),co=n(gl,"DIV",{class:!0});var va=s(co);T(I8.$$.fragment,va),fir=i(va),T4e=n(va,"P",{});var ewt=s(T4e);mir=r(ewt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ewt.forEach(t),gir=i(va),Wa=n(va,"P",{});var w6=s(Wa);hir=r(w6,"The model class to instantiate is selected based on the "),M4e=n(w6,"CODE",{});var owt=s(M4e);pir=r(owt,"model_type"),owt.forEach(t),_ir=r(w6,` property of the config object (either
passed as an argument or loaded from `),E4e=n(w6,"CODE",{});var rwt=s(E4e);uir=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),bir=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(w6,"CODE",{});var twt=s(C4e);vir=r(twt,"pretrained_model_name_or_path"),twt.forEach(t),Fir=r(w6,":"),w6.forEach(t),Tir=i(va),w4e=n(va,"UL",{});var awt=s(w4e);R3=n(awt,"LI",{});var MIe=s(R3);A4e=n(MIe,"STRONG",{});var nwt=s(A4e);Mir=r(nwt,"vilt"),nwt.forEach(t),Eir=r(MIe," \u2014 "),LW=n(MIe,"A",{href:!0});var swt=s(LW);Cir=r(swt,"ViltForQuestionAnswering"),swt.forEach(t),wir=r(MIe," (ViLT model)"),MIe.forEach(t),awt.forEach(t),Air=i(va),P3=n(va,"P",{});var EIe=s(P3);Lir=r(EIe,"The model is set in evaluation mode by default using "),L4e=n(EIe,"CODE",{});var lwt=s(L4e);yir=r(lwt,"model.eval()"),lwt.forEach(t),xir=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=n(EIe,"CODE",{});var iwt=s(y4e);$ir=r(iwt,"model.train()"),iwt.forEach(t),EIe.forEach(t),kir=i(va),T(B3.$$.fragment,va),va.forEach(t),gl.forEach(t),oXe=i(f),Ld=n(f,"H2",{class:!0});var lQe=s(Ld);I3=n(lQe,"A",{id:!0,class:!0,href:!0});var dwt=s(I3);x4e=n(dwt,"SPAN",{});var cwt=s(x4e);T(N8.$$.fragment,cwt),cwt.forEach(t),dwt.forEach(t),Sir=i(lQe),$4e=n(lQe,"SPAN",{});var fwt=s($4e);Rir=r(fwt,"AutoModelForAudioClassification"),fwt.forEach(t),lQe.forEach(t),rXe=i(f),Xo=n(f,"DIV",{class:!0});var hl=s(Xo);T(q8.$$.fragment,hl),Pir=i(hl),yd=n(hl,"P",{});var jre=s(yd);Bir=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),yW=n(jre,"A",{href:!0});var mwt=s(yW);Iir=r(mwt,"from_pretrained()"),mwt.forEach(t),Nir=r(jre," class method or the "),xW=n(jre,"A",{href:!0});var gwt=s(xW);qir=r(gwt,"from_config()"),gwt.forEach(t),jir=r(jre,` class
method.`),jre.forEach(t),Dir=i(hl),j8=n(hl,"P",{});var iQe=s(j8);Gir=r(iQe,"This class cannot be instantiated directly using "),k4e=n(iQe,"CODE",{});var hwt=s(k4e);Oir=r(hwt,"__init__()"),hwt.forEach(t),Vir=r(iQe," (throws an error)."),iQe.forEach(t),Xir=i(hl),Tt=n(hl,"DIV",{class:!0});var A6=s(Tt);T(D8.$$.fragment,A6),zir=i(A6),S4e=n(A6,"P",{});var pwt=s(S4e);Qir=r(pwt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pwt.forEach(t),Wir=i(A6),xd=n(A6,"P",{});var Dre=s(xd);Hir=r(Dre,`Note:
Loading a model from its configuration file does `),R4e=n(Dre,"STRONG",{});var _wt=s(R4e);Uir=r(_wt,"not"),_wt.forEach(t),Jir=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Dre,"A",{href:!0});var uwt=s($W);Yir=r(uwt,"from_pretrained()"),uwt.forEach(t),Kir=r(Dre," to load the model weights."),Dre.forEach(t),Zir=i(A6),T(N3.$$.fragment,A6),A6.forEach(t),edr=i(hl),fo=n(hl,"DIV",{class:!0});var Fa=s(fo);T(G8.$$.fragment,Fa),odr=i(Fa),P4e=n(Fa,"P",{});var bwt=s(P4e);rdr=r(bwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bwt.forEach(t),tdr=i(Fa),Ha=n(Fa,"P",{});var L6=s(Ha);adr=r(L6,"The model class to instantiate is selected based on the "),B4e=n(L6,"CODE",{});var vwt=s(B4e);ndr=r(vwt,"model_type"),vwt.forEach(t),sdr=r(L6,` property of the config object (either
passed as an argument or loaded from `),I4e=n(L6,"CODE",{});var Fwt=s(I4e);ldr=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),idr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(L6,"CODE",{});var Twt=s(N4e);ddr=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),cdr=r(L6,":"),L6.forEach(t),fdr=i(Fa),Pe=n(Fa,"UL",{});var ze=s(Pe);q3=n(ze,"LI",{});var CIe=s(q3);q4e=n(CIe,"STRONG",{});var Mwt=s(q4e);mdr=r(Mwt,"data2vec-audio"),Mwt.forEach(t),gdr=r(CIe," \u2014 "),kW=n(CIe,"A",{href:!0});var Ewt=s(kW);hdr=r(Ewt,"Data2VecAudioForSequenceClassification"),Ewt.forEach(t),pdr=r(CIe," (Data2VecAudio model)"),CIe.forEach(t),_dr=i(ze),j3=n(ze,"LI",{});var wIe=s(j3);j4e=n(wIe,"STRONG",{});var Cwt=s(j4e);udr=r(Cwt,"hubert"),Cwt.forEach(t),bdr=r(wIe," \u2014 "),SW=n(wIe,"A",{href:!0});var wwt=s(SW);vdr=r(wwt,"HubertForSequenceClassification"),wwt.forEach(t),Fdr=r(wIe," (Hubert model)"),wIe.forEach(t),Tdr=i(ze),D3=n(ze,"LI",{});var AIe=s(D3);D4e=n(AIe,"STRONG",{});var Awt=s(D4e);Mdr=r(Awt,"sew"),Awt.forEach(t),Edr=r(AIe," \u2014 "),RW=n(AIe,"A",{href:!0});var Lwt=s(RW);Cdr=r(Lwt,"SEWForSequenceClassification"),Lwt.forEach(t),wdr=r(AIe," (SEW model)"),AIe.forEach(t),Adr=i(ze),G3=n(ze,"LI",{});var LIe=s(G3);G4e=n(LIe,"STRONG",{});var ywt=s(G4e);Ldr=r(ywt,"sew-d"),ywt.forEach(t),ydr=r(LIe," \u2014 "),PW=n(LIe,"A",{href:!0});var xwt=s(PW);xdr=r(xwt,"SEWDForSequenceClassification"),xwt.forEach(t),$dr=r(LIe," (SEW-D model)"),LIe.forEach(t),kdr=i(ze),O3=n(ze,"LI",{});var yIe=s(O3);O4e=n(yIe,"STRONG",{});var $wt=s(O4e);Sdr=r($wt,"unispeech"),$wt.forEach(t),Rdr=r(yIe," \u2014 "),BW=n(yIe,"A",{href:!0});var kwt=s(BW);Pdr=r(kwt,"UniSpeechForSequenceClassification"),kwt.forEach(t),Bdr=r(yIe," (UniSpeech model)"),yIe.forEach(t),Idr=i(ze),V3=n(ze,"LI",{});var xIe=s(V3);V4e=n(xIe,"STRONG",{});var Swt=s(V4e);Ndr=r(Swt,"unispeech-sat"),Swt.forEach(t),qdr=r(xIe," \u2014 "),IW=n(xIe,"A",{href:!0});var Rwt=s(IW);jdr=r(Rwt,"UniSpeechSatForSequenceClassification"),Rwt.forEach(t),Ddr=r(xIe," (UniSpeechSat model)"),xIe.forEach(t),Gdr=i(ze),X3=n(ze,"LI",{});var $Ie=s(X3);X4e=n($Ie,"STRONG",{});var Pwt=s(X4e);Odr=r(Pwt,"wav2vec2"),Pwt.forEach(t),Vdr=r($Ie," \u2014 "),NW=n($Ie,"A",{href:!0});var Bwt=s(NW);Xdr=r(Bwt,"Wav2Vec2ForSequenceClassification"),Bwt.forEach(t),zdr=r($Ie," (Wav2Vec2 model)"),$Ie.forEach(t),Qdr=i(ze),z3=n(ze,"LI",{});var kIe=s(z3);z4e=n(kIe,"STRONG",{});var Iwt=s(z4e);Wdr=r(Iwt,"wav2vec2-conformer"),Iwt.forEach(t),Hdr=r(kIe," \u2014 "),qW=n(kIe,"A",{href:!0});var Nwt=s(qW);Udr=r(Nwt,"Wav2Vec2ConformerForSequenceClassification"),Nwt.forEach(t),Jdr=r(kIe," (Wav2Vec2-Conformer model)"),kIe.forEach(t),Ydr=i(ze),Q3=n(ze,"LI",{});var SIe=s(Q3);Q4e=n(SIe,"STRONG",{});var qwt=s(Q4e);Kdr=r(qwt,"wavlm"),qwt.forEach(t),Zdr=r(SIe," \u2014 "),jW=n(SIe,"A",{href:!0});var jwt=s(jW);ecr=r(jwt,"WavLMForSequenceClassification"),jwt.forEach(t),ocr=r(SIe," (WavLM model)"),SIe.forEach(t),ze.forEach(t),rcr=i(Fa),W3=n(Fa,"P",{});var RIe=s(W3);tcr=r(RIe,"The model is set in evaluation mode by default using "),W4e=n(RIe,"CODE",{});var Dwt=s(W4e);acr=r(Dwt,"model.eval()"),Dwt.forEach(t),ncr=r(RIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H4e=n(RIe,"CODE",{});var Gwt=s(H4e);scr=r(Gwt,"model.train()"),Gwt.forEach(t),RIe.forEach(t),lcr=i(Fa),T(H3.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),tXe=i(f),$d=n(f,"H2",{class:!0});var dQe=s($d);U3=n(dQe,"A",{id:!0,class:!0,href:!0});var Owt=s(U3);U4e=n(Owt,"SPAN",{});var Vwt=s(U4e);T(O8.$$.fragment,Vwt),Vwt.forEach(t),Owt.forEach(t),icr=i(dQe),J4e=n(dQe,"SPAN",{});var Xwt=s(J4e);dcr=r(Xwt,"AutoModelForAudioFrameClassification"),Xwt.forEach(t),dQe.forEach(t),aXe=i(f),zo=n(f,"DIV",{class:!0});var pl=s(zo);T(V8.$$.fragment,pl),ccr=i(pl),kd=n(pl,"P",{});var Gre=s(kd);fcr=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DW=n(Gre,"A",{href:!0});var zwt=s(DW);mcr=r(zwt,"from_pretrained()"),zwt.forEach(t),gcr=r(Gre," class method or the "),GW=n(Gre,"A",{href:!0});var Qwt=s(GW);hcr=r(Qwt,"from_config()"),Qwt.forEach(t),pcr=r(Gre,` class
method.`),Gre.forEach(t),_cr=i(pl),X8=n(pl,"P",{});var cQe=s(X8);ucr=r(cQe,"This class cannot be instantiated directly using "),Y4e=n(cQe,"CODE",{});var Wwt=s(Y4e);bcr=r(Wwt,"__init__()"),Wwt.forEach(t),vcr=r(cQe," (throws an error)."),cQe.forEach(t),Fcr=i(pl),Mt=n(pl,"DIV",{class:!0});var y6=s(Mt);T(z8.$$.fragment,y6),Tcr=i(y6),K4e=n(y6,"P",{});var Hwt=s(K4e);Mcr=r(Hwt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hwt.forEach(t),Ecr=i(y6),Sd=n(y6,"P",{});var Ore=s(Sd);Ccr=r(Ore,`Note:
Loading a model from its configuration file does `),Z4e=n(Ore,"STRONG",{});var Uwt=s(Z4e);wcr=r(Uwt,"not"),Uwt.forEach(t),Acr=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(Ore,"A",{href:!0});var Jwt=s(OW);Lcr=r(Jwt,"from_pretrained()"),Jwt.forEach(t),ycr=r(Ore," to load the model weights."),Ore.forEach(t),xcr=i(y6),T(J3.$$.fragment,y6),y6.forEach(t),$cr=i(pl),mo=n(pl,"DIV",{class:!0});var Ta=s(mo);T(Q8.$$.fragment,Ta),kcr=i(Ta),e2e=n(Ta,"P",{});var Ywt=s(e2e);Scr=r(Ywt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ywt.forEach(t),Rcr=i(Ta),Ua=n(Ta,"P",{});var x6=s(Ua);Pcr=r(x6,"The model class to instantiate is selected based on the "),o2e=n(x6,"CODE",{});var Kwt=s(o2e);Bcr=r(Kwt,"model_type"),Kwt.forEach(t),Icr=r(x6,` property of the config object (either
passed as an argument or loaded from `),r2e=n(x6,"CODE",{});var Zwt=s(r2e);Ncr=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),qcr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(x6,"CODE",{});var eAt=s(t2e);jcr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),Dcr=r(x6,":"),x6.forEach(t),Gcr=i(Ta),et=n(Ta,"UL",{});var _l=s(et);Y3=n(_l,"LI",{});var PIe=s(Y3);a2e=n(PIe,"STRONG",{});var oAt=s(a2e);Ocr=r(oAt,"data2vec-audio"),oAt.forEach(t),Vcr=r(PIe," \u2014 "),VW=n(PIe,"A",{href:!0});var rAt=s(VW);Xcr=r(rAt,"Data2VecAudioForAudioFrameClassification"),rAt.forEach(t),zcr=r(PIe," (Data2VecAudio model)"),PIe.forEach(t),Qcr=i(_l),K3=n(_l,"LI",{});var BIe=s(K3);n2e=n(BIe,"STRONG",{});var tAt=s(n2e);Wcr=r(tAt,"unispeech-sat"),tAt.forEach(t),Hcr=r(BIe," \u2014 "),XW=n(BIe,"A",{href:!0});var aAt=s(XW);Ucr=r(aAt,"UniSpeechSatForAudioFrameClassification"),aAt.forEach(t),Jcr=r(BIe," (UniSpeechSat model)"),BIe.forEach(t),Ycr=i(_l),Z3=n(_l,"LI",{});var IIe=s(Z3);s2e=n(IIe,"STRONG",{});var nAt=s(s2e);Kcr=r(nAt,"wav2vec2"),nAt.forEach(t),Zcr=r(IIe," \u2014 "),zW=n(IIe,"A",{href:!0});var sAt=s(zW);efr=r(sAt,"Wav2Vec2ForAudioFrameClassification"),sAt.forEach(t),ofr=r(IIe," (Wav2Vec2 model)"),IIe.forEach(t),rfr=i(_l),eF=n(_l,"LI",{});var NIe=s(eF);l2e=n(NIe,"STRONG",{});var lAt=s(l2e);tfr=r(lAt,"wav2vec2-conformer"),lAt.forEach(t),afr=r(NIe," \u2014 "),QW=n(NIe,"A",{href:!0});var iAt=s(QW);nfr=r(iAt,"Wav2Vec2ConformerForAudioFrameClassification"),iAt.forEach(t),sfr=r(NIe," (Wav2Vec2-Conformer model)"),NIe.forEach(t),lfr=i(_l),oF=n(_l,"LI",{});var qIe=s(oF);i2e=n(qIe,"STRONG",{});var dAt=s(i2e);ifr=r(dAt,"wavlm"),dAt.forEach(t),dfr=r(qIe," \u2014 "),WW=n(qIe,"A",{href:!0});var cAt=s(WW);cfr=r(cAt,"WavLMForAudioFrameClassification"),cAt.forEach(t),ffr=r(qIe," (WavLM model)"),qIe.forEach(t),_l.forEach(t),mfr=i(Ta),rF=n(Ta,"P",{});var jIe=s(rF);gfr=r(jIe,"The model is set in evaluation mode by default using "),d2e=n(jIe,"CODE",{});var fAt=s(d2e);hfr=r(fAt,"model.eval()"),fAt.forEach(t),pfr=r(jIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=n(jIe,"CODE",{});var mAt=s(c2e);_fr=r(mAt,"model.train()"),mAt.forEach(t),jIe.forEach(t),ufr=i(Ta),T(tF.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),nXe=i(f),Rd=n(f,"H2",{class:!0});var fQe=s(Rd);aF=n(fQe,"A",{id:!0,class:!0,href:!0});var gAt=s(aF);f2e=n(gAt,"SPAN",{});var hAt=s(f2e);T(W8.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),bfr=i(fQe),m2e=n(fQe,"SPAN",{});var pAt=s(m2e);vfr=r(pAt,"AutoModelForCTC"),pAt.forEach(t),fQe.forEach(t),sXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(H8.$$.fragment,ul),Ffr=i(ul),Pd=n(ul,"P",{});var Vre=s(Pd);Tfr=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),HW=n(Vre,"A",{href:!0});var _At=s(HW);Mfr=r(_At,"from_pretrained()"),_At.forEach(t),Efr=r(Vre," class method or the "),UW=n(Vre,"A",{href:!0});var uAt=s(UW);Cfr=r(uAt,"from_config()"),uAt.forEach(t),wfr=r(Vre,` class
method.`),Vre.forEach(t),Afr=i(ul),U8=n(ul,"P",{});var mQe=s(U8);Lfr=r(mQe,"This class cannot be instantiated directly using "),g2e=n(mQe,"CODE",{});var bAt=s(g2e);yfr=r(bAt,"__init__()"),bAt.forEach(t),xfr=r(mQe," (throws an error)."),mQe.forEach(t),$fr=i(ul),Et=n(ul,"DIV",{class:!0});var $6=s(Et);T(J8.$$.fragment,$6),kfr=i($6),h2e=n($6,"P",{});var vAt=s(h2e);Sfr=r(vAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vAt.forEach(t),Rfr=i($6),Bd=n($6,"P",{});var Xre=s(Bd);Pfr=r(Xre,`Note:
Loading a model from its configuration file does `),p2e=n(Xre,"STRONG",{});var FAt=s(p2e);Bfr=r(FAt,"not"),FAt.forEach(t),Ifr=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(Xre,"A",{href:!0});var TAt=s(JW);Nfr=r(TAt,"from_pretrained()"),TAt.forEach(t),qfr=r(Xre," to load the model weights."),Xre.forEach(t),jfr=i($6),T(nF.$$.fragment,$6),$6.forEach(t),Dfr=i(ul),go=n(ul,"DIV",{class:!0});var Ma=s(go);T(Y8.$$.fragment,Ma),Gfr=i(Ma),_2e=n(Ma,"P",{});var MAt=s(_2e);Ofr=r(MAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MAt.forEach(t),Vfr=i(Ma),Ja=n(Ma,"P",{});var k6=s(Ja);Xfr=r(k6,"The model class to instantiate is selected based on the "),u2e=n(k6,"CODE",{});var EAt=s(u2e);zfr=r(EAt,"model_type"),EAt.forEach(t),Qfr=r(k6,` property of the config object (either
passed as an argument or loaded from `),b2e=n(k6,"CODE",{});var CAt=s(b2e);Wfr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),Hfr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(k6,"CODE",{});var wAt=s(v2e);Ufr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),Jfr=r(k6,":"),k6.forEach(t),Yfr=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);sF=n(Be,"LI",{});var DIe=s(sF);F2e=n(DIe,"STRONG",{});var AAt=s(F2e);Kfr=r(AAt,"data2vec-audio"),AAt.forEach(t),Zfr=r(DIe," \u2014 "),YW=n(DIe,"A",{href:!0});var LAt=s(YW);emr=r(LAt,"Data2VecAudioForCTC"),LAt.forEach(t),omr=r(DIe," (Data2VecAudio model)"),DIe.forEach(t),rmr=i(Be),lF=n(Be,"LI",{});var GIe=s(lF);T2e=n(GIe,"STRONG",{});var yAt=s(T2e);tmr=r(yAt,"hubert"),yAt.forEach(t),amr=r(GIe," \u2014 "),KW=n(GIe,"A",{href:!0});var xAt=s(KW);nmr=r(xAt,"HubertForCTC"),xAt.forEach(t),smr=r(GIe," (Hubert model)"),GIe.forEach(t),lmr=i(Be),iF=n(Be,"LI",{});var OIe=s(iF);M2e=n(OIe,"STRONG",{});var $At=s(M2e);imr=r($At,"mctct"),$At.forEach(t),dmr=r(OIe," \u2014 "),ZW=n(OIe,"A",{href:!0});var kAt=s(ZW);cmr=r(kAt,"MCTCTForCTC"),kAt.forEach(t),fmr=r(OIe," (M-CTC-T model)"),OIe.forEach(t),mmr=i(Be),dF=n(Be,"LI",{});var VIe=s(dF);E2e=n(VIe,"STRONG",{});var SAt=s(E2e);gmr=r(SAt,"sew"),SAt.forEach(t),hmr=r(VIe," \u2014 "),eH=n(VIe,"A",{href:!0});var RAt=s(eH);pmr=r(RAt,"SEWForCTC"),RAt.forEach(t),_mr=r(VIe," (SEW model)"),VIe.forEach(t),umr=i(Be),cF=n(Be,"LI",{});var XIe=s(cF);C2e=n(XIe,"STRONG",{});var PAt=s(C2e);bmr=r(PAt,"sew-d"),PAt.forEach(t),vmr=r(XIe," \u2014 "),oH=n(XIe,"A",{href:!0});var BAt=s(oH);Fmr=r(BAt,"SEWDForCTC"),BAt.forEach(t),Tmr=r(XIe," (SEW-D model)"),XIe.forEach(t),Mmr=i(Be),fF=n(Be,"LI",{});var zIe=s(fF);w2e=n(zIe,"STRONG",{});var IAt=s(w2e);Emr=r(IAt,"unispeech"),IAt.forEach(t),Cmr=r(zIe," \u2014 "),rH=n(zIe,"A",{href:!0});var NAt=s(rH);wmr=r(NAt,"UniSpeechForCTC"),NAt.forEach(t),Amr=r(zIe," (UniSpeech model)"),zIe.forEach(t),Lmr=i(Be),mF=n(Be,"LI",{});var QIe=s(mF);A2e=n(QIe,"STRONG",{});var qAt=s(A2e);ymr=r(qAt,"unispeech-sat"),qAt.forEach(t),xmr=r(QIe," \u2014 "),tH=n(QIe,"A",{href:!0});var jAt=s(tH);$mr=r(jAt,"UniSpeechSatForCTC"),jAt.forEach(t),kmr=r(QIe," (UniSpeechSat model)"),QIe.forEach(t),Smr=i(Be),gF=n(Be,"LI",{});var WIe=s(gF);L2e=n(WIe,"STRONG",{});var DAt=s(L2e);Rmr=r(DAt,"wav2vec2"),DAt.forEach(t),Pmr=r(WIe," \u2014 "),aH=n(WIe,"A",{href:!0});var GAt=s(aH);Bmr=r(GAt,"Wav2Vec2ForCTC"),GAt.forEach(t),Imr=r(WIe," (Wav2Vec2 model)"),WIe.forEach(t),Nmr=i(Be),hF=n(Be,"LI",{});var HIe=s(hF);y2e=n(HIe,"STRONG",{});var OAt=s(y2e);qmr=r(OAt,"wav2vec2-conformer"),OAt.forEach(t),jmr=r(HIe," \u2014 "),nH=n(HIe,"A",{href:!0});var VAt=s(nH);Dmr=r(VAt,"Wav2Vec2ConformerForCTC"),VAt.forEach(t),Gmr=r(HIe," (Wav2Vec2-Conformer model)"),HIe.forEach(t),Omr=i(Be),pF=n(Be,"LI",{});var UIe=s(pF);x2e=n(UIe,"STRONG",{});var XAt=s(x2e);Vmr=r(XAt,"wavlm"),XAt.forEach(t),Xmr=r(UIe," \u2014 "),sH=n(UIe,"A",{href:!0});var zAt=s(sH);zmr=r(zAt,"WavLMForCTC"),zAt.forEach(t),Qmr=r(UIe," (WavLM model)"),UIe.forEach(t),Be.forEach(t),Wmr=i(Ma),_F=n(Ma,"P",{});var JIe=s(_F);Hmr=r(JIe,"The model is set in evaluation mode by default using "),$2e=n(JIe,"CODE",{});var QAt=s($2e);Umr=r(QAt,"model.eval()"),QAt.forEach(t),Jmr=r(JIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=n(JIe,"CODE",{});var WAt=s(k2e);Ymr=r(WAt,"model.train()"),WAt.forEach(t),JIe.forEach(t),Kmr=i(Ma),T(uF.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),lXe=i(f),Id=n(f,"H2",{class:!0});var gQe=s(Id);bF=n(gQe,"A",{id:!0,class:!0,href:!0});var HAt=s(bF);S2e=n(HAt,"SPAN",{});var UAt=s(S2e);T(K8.$$.fragment,UAt),UAt.forEach(t),HAt.forEach(t),Zmr=i(gQe),R2e=n(gQe,"SPAN",{});var JAt=s(R2e);egr=r(JAt,"AutoModelForSpeechSeq2Seq"),JAt.forEach(t),gQe.forEach(t),iXe=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(Z8.$$.fragment,bl),ogr=i(bl),Nd=n(bl,"P",{});var zre=s(Nd);rgr=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lH=n(zre,"A",{href:!0});var YAt=s(lH);tgr=r(YAt,"from_pretrained()"),YAt.forEach(t),agr=r(zre," class method or the "),iH=n(zre,"A",{href:!0});var KAt=s(iH);ngr=r(KAt,"from_config()"),KAt.forEach(t),sgr=r(zre,` class
method.`),zre.forEach(t),lgr=i(bl),e9=n(bl,"P",{});var hQe=s(e9);igr=r(hQe,"This class cannot be instantiated directly using "),P2e=n(hQe,"CODE",{});var ZAt=s(P2e);dgr=r(ZAt,"__init__()"),ZAt.forEach(t),cgr=r(hQe," (throws an error)."),hQe.forEach(t),fgr=i(bl),Ct=n(bl,"DIV",{class:!0});var S6=s(Ct);T(o9.$$.fragment,S6),mgr=i(S6),B2e=n(S6,"P",{});var e6t=s(B2e);ggr=r(e6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e6t.forEach(t),hgr=i(S6),qd=n(S6,"P",{});var Qre=s(qd);pgr=r(Qre,`Note:
Loading a model from its configuration file does `),I2e=n(Qre,"STRONG",{});var o6t=s(I2e);_gr=r(o6t,"not"),o6t.forEach(t),ugr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(Qre,"A",{href:!0});var r6t=s(dH);bgr=r(r6t,"from_pretrained()"),r6t.forEach(t),vgr=r(Qre," to load the model weights."),Qre.forEach(t),Fgr=i(S6),T(vF.$$.fragment,S6),S6.forEach(t),Tgr=i(bl),ho=n(bl,"DIV",{class:!0});var Ea=s(ho);T(r9.$$.fragment,Ea),Mgr=i(Ea),N2e=n(Ea,"P",{});var t6t=s(N2e);Egr=r(t6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),t6t.forEach(t),Cgr=i(Ea),Ya=n(Ea,"P",{});var R6=s(Ya);wgr=r(R6,"The model class to instantiate is selected based on the "),q2e=n(R6,"CODE",{});var a6t=s(q2e);Agr=r(a6t,"model_type"),a6t.forEach(t),Lgr=r(R6,` property of the config object (either
passed as an argument or loaded from `),j2e=n(R6,"CODE",{});var n6t=s(j2e);ygr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),xgr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(R6,"CODE",{});var s6t=s(D2e);$gr=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),kgr=r(R6,":"),R6.forEach(t),Sgr=i(Ea),t9=n(Ea,"UL",{});var pQe=s(t9);FF=n(pQe,"LI",{});var YIe=s(FF);G2e=n(YIe,"STRONG",{});var l6t=s(G2e);Rgr=r(l6t,"speech-encoder-decoder"),l6t.forEach(t),Pgr=r(YIe," \u2014 "),cH=n(YIe,"A",{href:!0});var i6t=s(cH);Bgr=r(i6t,"SpeechEncoderDecoderModel"),i6t.forEach(t),Igr=r(YIe," (Speech Encoder decoder model)"),YIe.forEach(t),Ngr=i(pQe),TF=n(pQe,"LI",{});var KIe=s(TF);O2e=n(KIe,"STRONG",{});var d6t=s(O2e);qgr=r(d6t,"speech_to_text"),d6t.forEach(t),jgr=r(KIe," \u2014 "),fH=n(KIe,"A",{href:!0});var c6t=s(fH);Dgr=r(c6t,"Speech2TextForConditionalGeneration"),c6t.forEach(t),Ggr=r(KIe," (Speech2Text model)"),KIe.forEach(t),pQe.forEach(t),Ogr=i(Ea),MF=n(Ea,"P",{});var ZIe=s(MF);Vgr=r(ZIe,"The model is set in evaluation mode by default using "),V2e=n(ZIe,"CODE",{});var f6t=s(V2e);Xgr=r(f6t,"model.eval()"),f6t.forEach(t),zgr=r(ZIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=n(ZIe,"CODE",{});var m6t=s(X2e);Qgr=r(m6t,"model.train()"),m6t.forEach(t),ZIe.forEach(t),Wgr=i(Ea),T(EF.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),dXe=i(f),jd=n(f,"H2",{class:!0});var _Qe=s(jd);CF=n(_Qe,"A",{id:!0,class:!0,href:!0});var g6t=s(CF);z2e=n(g6t,"SPAN",{});var h6t=s(z2e);T(a9.$$.fragment,h6t),h6t.forEach(t),g6t.forEach(t),Hgr=i(_Qe),Q2e=n(_Qe,"SPAN",{});var p6t=s(Q2e);Ugr=r(p6t,"AutoModelForAudioXVector"),p6t.forEach(t),_Qe.forEach(t),cXe=i(f),Ho=n(f,"DIV",{class:!0});var vl=s(Ho);T(n9.$$.fragment,vl),Jgr=i(vl),Dd=n(vl,"P",{});var Wre=s(Dd);Ygr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mH=n(Wre,"A",{href:!0});var _6t=s(mH);Kgr=r(_6t,"from_pretrained()"),_6t.forEach(t),Zgr=r(Wre," class method or the "),gH=n(Wre,"A",{href:!0});var u6t=s(gH);ehr=r(u6t,"from_config()"),u6t.forEach(t),ohr=r(Wre,` class
method.`),Wre.forEach(t),rhr=i(vl),s9=n(vl,"P",{});var uQe=s(s9);thr=r(uQe,"This class cannot be instantiated directly using "),W2e=n(uQe,"CODE",{});var b6t=s(W2e);ahr=r(b6t,"__init__()"),b6t.forEach(t),nhr=r(uQe," (throws an error)."),uQe.forEach(t),shr=i(vl),wt=n(vl,"DIV",{class:!0});var P6=s(wt);T(l9.$$.fragment,P6),lhr=i(P6),H2e=n(P6,"P",{});var v6t=s(H2e);ihr=r(v6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),v6t.forEach(t),dhr=i(P6),Gd=n(P6,"P",{});var Hre=s(Gd);chr=r(Hre,`Note:
Loading a model from its configuration file does `),U2e=n(Hre,"STRONG",{});var F6t=s(U2e);fhr=r(F6t,"not"),F6t.forEach(t),mhr=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(Hre,"A",{href:!0});var T6t=s(hH);ghr=r(T6t,"from_pretrained()"),T6t.forEach(t),hhr=r(Hre," to load the model weights."),Hre.forEach(t),phr=i(P6),T(wF.$$.fragment,P6),P6.forEach(t),_hr=i(vl),po=n(vl,"DIV",{class:!0});var Ca=s(po);T(i9.$$.fragment,Ca),uhr=i(Ca),J2e=n(Ca,"P",{});var M6t=s(J2e);bhr=r(M6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),M6t.forEach(t),vhr=i(Ca),Ka=n(Ca,"P",{});var B6=s(Ka);Fhr=r(B6,"The model class to instantiate is selected based on the "),Y2e=n(B6,"CODE",{});var E6t=s(Y2e);Thr=r(E6t,"model_type"),E6t.forEach(t),Mhr=r(B6,` property of the config object (either
passed as an argument or loaded from `),K2e=n(B6,"CODE",{});var C6t=s(K2e);Ehr=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),Chr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(B6,"CODE",{});var w6t=s(Z2e);whr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),Ahr=r(B6,":"),B6.forEach(t),Lhr=i(Ca),ot=n(Ca,"UL",{});var Fl=s(ot);AF=n(Fl,"LI",{});var eNe=s(AF);ebe=n(eNe,"STRONG",{});var A6t=s(ebe);yhr=r(A6t,"data2vec-audio"),A6t.forEach(t),xhr=r(eNe," \u2014 "),pH=n(eNe,"A",{href:!0});var L6t=s(pH);$hr=r(L6t,"Data2VecAudioForXVector"),L6t.forEach(t),khr=r(eNe," (Data2VecAudio model)"),eNe.forEach(t),Shr=i(Fl),LF=n(Fl,"LI",{});var oNe=s(LF);obe=n(oNe,"STRONG",{});var y6t=s(obe);Rhr=r(y6t,"unispeech-sat"),y6t.forEach(t),Phr=r(oNe," \u2014 "),_H=n(oNe,"A",{href:!0});var x6t=s(_H);Bhr=r(x6t,"UniSpeechSatForXVector"),x6t.forEach(t),Ihr=r(oNe," (UniSpeechSat model)"),oNe.forEach(t),Nhr=i(Fl),yF=n(Fl,"LI",{});var rNe=s(yF);rbe=n(rNe,"STRONG",{});var $6t=s(rbe);qhr=r($6t,"wav2vec2"),$6t.forEach(t),jhr=r(rNe," \u2014 "),uH=n(rNe,"A",{href:!0});var k6t=s(uH);Dhr=r(k6t,"Wav2Vec2ForXVector"),k6t.forEach(t),Ghr=r(rNe," (Wav2Vec2 model)"),rNe.forEach(t),Ohr=i(Fl),xF=n(Fl,"LI",{});var tNe=s(xF);tbe=n(tNe,"STRONG",{});var S6t=s(tbe);Vhr=r(S6t,"wav2vec2-conformer"),S6t.forEach(t),Xhr=r(tNe," \u2014 "),bH=n(tNe,"A",{href:!0});var R6t=s(bH);zhr=r(R6t,"Wav2Vec2ConformerForXVector"),R6t.forEach(t),Qhr=r(tNe," (Wav2Vec2-Conformer model)"),tNe.forEach(t),Whr=i(Fl),$F=n(Fl,"LI",{});var aNe=s($F);abe=n(aNe,"STRONG",{});var P6t=s(abe);Hhr=r(P6t,"wavlm"),P6t.forEach(t),Uhr=r(aNe," \u2014 "),vH=n(aNe,"A",{href:!0});var B6t=s(vH);Jhr=r(B6t,"WavLMForXVector"),B6t.forEach(t),Yhr=r(aNe," (WavLM model)"),aNe.forEach(t),Fl.forEach(t),Khr=i(Ca),kF=n(Ca,"P",{});var nNe=s(kF);Zhr=r(nNe,"The model is set in evaluation mode by default using "),nbe=n(nNe,"CODE",{});var I6t=s(nbe);epr=r(I6t,"model.eval()"),I6t.forEach(t),opr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=n(nNe,"CODE",{});var N6t=s(sbe);rpr=r(N6t,"model.train()"),N6t.forEach(t),nNe.forEach(t),tpr=i(Ca),T(SF.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),fXe=i(f),Od=n(f,"H2",{class:!0});var bQe=s(Od);RF=n(bQe,"A",{id:!0,class:!0,href:!0});var q6t=s(RF);lbe=n(q6t,"SPAN",{});var j6t=s(lbe);T(d9.$$.fragment,j6t),j6t.forEach(t),q6t.forEach(t),apr=i(bQe),ibe=n(bQe,"SPAN",{});var D6t=s(ibe);npr=r(D6t,"AutoModelForMaskedImageModeling"),D6t.forEach(t),bQe.forEach(t),mXe=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(c9.$$.fragment,Tl),spr=i(Tl),Vd=n(Tl,"P",{});var Ure=s(Vd);lpr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FH=n(Ure,"A",{href:!0});var G6t=s(FH);ipr=r(G6t,"from_pretrained()"),G6t.forEach(t),dpr=r(Ure," class method or the "),TH=n(Ure,"A",{href:!0});var O6t=s(TH);cpr=r(O6t,"from_config()"),O6t.forEach(t),fpr=r(Ure,` class
method.`),Ure.forEach(t),mpr=i(Tl),f9=n(Tl,"P",{});var vQe=s(f9);gpr=r(vQe,"This class cannot be instantiated directly using "),dbe=n(vQe,"CODE",{});var V6t=s(dbe);hpr=r(V6t,"__init__()"),V6t.forEach(t),ppr=r(vQe," (throws an error)."),vQe.forEach(t),_pr=i(Tl),At=n(Tl,"DIV",{class:!0});var I6=s(At);T(m9.$$.fragment,I6),upr=i(I6),cbe=n(I6,"P",{});var X6t=s(cbe);bpr=r(X6t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),X6t.forEach(t),vpr=i(I6),Xd=n(I6,"P",{});var Jre=s(Xd);Fpr=r(Jre,`Note:
Loading a model from its configuration file does `),fbe=n(Jre,"STRONG",{});var z6t=s(fbe);Tpr=r(z6t,"not"),z6t.forEach(t),Mpr=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Jre,"A",{href:!0});var Q6t=s(MH);Epr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),Cpr=r(Jre," to load the model weights."),Jre.forEach(t),wpr=i(I6),T(PF.$$.fragment,I6),I6.forEach(t),Apr=i(Tl),_o=n(Tl,"DIV",{class:!0});var wa=s(_o);T(g9.$$.fragment,wa),Lpr=i(wa),mbe=n(wa,"P",{});var W6t=s(mbe);ypr=r(W6t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),W6t.forEach(t),xpr=i(wa),Za=n(wa,"P",{});var N6=s(Za);$pr=r(N6,"The model class to instantiate is selected based on the "),gbe=n(N6,"CODE",{});var H6t=s(gbe);kpr=r(H6t,"model_type"),H6t.forEach(t),Spr=r(N6,` property of the config object (either
passed as an argument or loaded from `),hbe=n(N6,"CODE",{});var U6t=s(hbe);Rpr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),Ppr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(N6,"CODE",{});var J6t=s(pbe);Bpr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),Ipr=r(N6,":"),N6.forEach(t),Npr=i(wa),zd=n(wa,"UL",{});var Yre=s(zd);BF=n(Yre,"LI",{});var sNe=s(BF);_be=n(sNe,"STRONG",{});var Y6t=s(_be);qpr=r(Y6t,"deit"),Y6t.forEach(t),jpr=r(sNe," \u2014 "),EH=n(sNe,"A",{href:!0});var K6t=s(EH);Dpr=r(K6t,"DeiTForMaskedImageModeling"),K6t.forEach(t),Gpr=r(sNe," (DeiT model)"),sNe.forEach(t),Opr=i(Yre),IF=n(Yre,"LI",{});var lNe=s(IF);ube=n(lNe,"STRONG",{});var Z6t=s(ube);Vpr=r(Z6t,"swin"),Z6t.forEach(t),Xpr=r(lNe," \u2014 "),CH=n(lNe,"A",{href:!0});var eLt=s(CH);zpr=r(eLt,"SwinForMaskedImageModeling"),eLt.forEach(t),Qpr=r(lNe," (Swin Transformer model)"),lNe.forEach(t),Wpr=i(Yre),NF=n(Yre,"LI",{});var iNe=s(NF);bbe=n(iNe,"STRONG",{});var oLt=s(bbe);Hpr=r(oLt,"vit"),oLt.forEach(t),Upr=r(iNe," \u2014 "),wH=n(iNe,"A",{href:!0});var rLt=s(wH);Jpr=r(rLt,"ViTForMaskedImageModeling"),rLt.forEach(t),Ypr=r(iNe," (ViT model)"),iNe.forEach(t),Yre.forEach(t),Kpr=i(wa),qF=n(wa,"P",{});var dNe=s(qF);Zpr=r(dNe,"The model is set in evaluation mode by default using "),vbe=n(dNe,"CODE",{});var tLt=s(vbe);e_r=r(tLt,"model.eval()"),tLt.forEach(t),o_r=r(dNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(dNe,"CODE",{});var aLt=s(Fbe);r_r=r(aLt,"model.train()"),aLt.forEach(t),dNe.forEach(t),t_r=i(wa),T(jF.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),gXe=i(f),Qd=n(f,"H2",{class:!0});var FQe=s(Qd);DF=n(FQe,"A",{id:!0,class:!0,href:!0});var nLt=s(DF);Tbe=n(nLt,"SPAN",{});var sLt=s(Tbe);T(h9.$$.fragment,sLt),sLt.forEach(t),nLt.forEach(t),a_r=i(FQe),Mbe=n(FQe,"SPAN",{});var lLt=s(Mbe);n_r=r(lLt,"AutoModelForObjectDetection"),lLt.forEach(t),FQe.forEach(t),hXe=i(f),Jo=n(f,"DIV",{class:!0});var Ml=s(Jo);T(p9.$$.fragment,Ml),s_r=i(Ml),Wd=n(Ml,"P",{});var Kre=s(Wd);l_r=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),AH=n(Kre,"A",{href:!0});var iLt=s(AH);i_r=r(iLt,"from_pretrained()"),iLt.forEach(t),d_r=r(Kre," class method or the "),LH=n(Kre,"A",{href:!0});var dLt=s(LH);c_r=r(dLt,"from_config()"),dLt.forEach(t),f_r=r(Kre,` class
method.`),Kre.forEach(t),m_r=i(Ml),_9=n(Ml,"P",{});var TQe=s(_9);g_r=r(TQe,"This class cannot be instantiated directly using "),Ebe=n(TQe,"CODE",{});var cLt=s(Ebe);h_r=r(cLt,"__init__()"),cLt.forEach(t),p_r=r(TQe," (throws an error)."),TQe.forEach(t),__r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var q6=s(Lt);T(u9.$$.fragment,q6),u_r=i(q6),Cbe=n(q6,"P",{});var fLt=s(Cbe);b_r=r(fLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fLt.forEach(t),v_r=i(q6),Hd=n(q6,"P",{});var Zre=s(Hd);F_r=r(Zre,`Note:
Loading a model from its configuration file does `),wbe=n(Zre,"STRONG",{});var mLt=s(wbe);T_r=r(mLt,"not"),mLt.forEach(t),M_r=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(Zre,"A",{href:!0});var gLt=s(yH);E_r=r(gLt,"from_pretrained()"),gLt.forEach(t),C_r=r(Zre," to load the model weights."),Zre.forEach(t),w_r=i(q6),T(GF.$$.fragment,q6),q6.forEach(t),A_r=i(Ml),uo=n(Ml,"DIV",{class:!0});var Aa=s(uo);T(b9.$$.fragment,Aa),L_r=i(Aa),Abe=n(Aa,"P",{});var hLt=s(Abe);y_r=r(hLt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),hLt.forEach(t),x_r=i(Aa),en=n(Aa,"P",{});var j6=s(en);$_r=r(j6,"The model class to instantiate is selected based on the "),Lbe=n(j6,"CODE",{});var pLt=s(Lbe);k_r=r(pLt,"model_type"),pLt.forEach(t),S_r=r(j6,` property of the config object (either
passed as an argument or loaded from `),ybe=n(j6,"CODE",{});var _Lt=s(ybe);R_r=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),P_r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(j6,"CODE",{});var uLt=s(xbe);B_r=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),I_r=r(j6,":"),j6.forEach(t),N_r=i(Aa),v9=n(Aa,"UL",{});var MQe=s(v9);OF=n(MQe,"LI",{});var cNe=s(OF);$be=n(cNe,"STRONG",{});var bLt=s($be);q_r=r(bLt,"detr"),bLt.forEach(t),j_r=r(cNe," \u2014 "),xH=n(cNe,"A",{href:!0});var vLt=s(xH);D_r=r(vLt,"DetrForObjectDetection"),vLt.forEach(t),G_r=r(cNe," (DETR model)"),cNe.forEach(t),O_r=i(MQe),VF=n(MQe,"LI",{});var fNe=s(VF);kbe=n(fNe,"STRONG",{});var FLt=s(kbe);V_r=r(FLt,"yolos"),FLt.forEach(t),X_r=r(fNe," \u2014 "),$H=n(fNe,"A",{href:!0});var TLt=s($H);z_r=r(TLt,"YolosForObjectDetection"),TLt.forEach(t),Q_r=r(fNe," (YOLOS model)"),fNe.forEach(t),MQe.forEach(t),W_r=i(Aa),XF=n(Aa,"P",{});var mNe=s(XF);H_r=r(mNe,"The model is set in evaluation mode by default using "),Sbe=n(mNe,"CODE",{});var MLt=s(Sbe);U_r=r(MLt,"model.eval()"),MLt.forEach(t),J_r=r(mNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=n(mNe,"CODE",{});var ELt=s(Rbe);Y_r=r(ELt,"model.train()"),ELt.forEach(t),mNe.forEach(t),K_r=i(Aa),T(zF.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),pXe=i(f),Ud=n(f,"H2",{class:!0});var EQe=s(Ud);QF=n(EQe,"A",{id:!0,class:!0,href:!0});var CLt=s(QF);Pbe=n(CLt,"SPAN",{});var wLt=s(Pbe);T(F9.$$.fragment,wLt),wLt.forEach(t),CLt.forEach(t),Z_r=i(EQe),Bbe=n(EQe,"SPAN",{});var ALt=s(Bbe);eur=r(ALt,"AutoModelForImageSegmentation"),ALt.forEach(t),EQe.forEach(t),_Xe=i(f),Yo=n(f,"DIV",{class:!0});var El=s(Yo);T(T9.$$.fragment,El),our=i(El),Jd=n(El,"P",{});var ete=s(Jd);rur=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kH=n(ete,"A",{href:!0});var LLt=s(kH);tur=r(LLt,"from_pretrained()"),LLt.forEach(t),aur=r(ete," class method or the "),SH=n(ete,"A",{href:!0});var yLt=s(SH);nur=r(yLt,"from_config()"),yLt.forEach(t),sur=r(ete,` class
method.`),ete.forEach(t),lur=i(El),M9=n(El,"P",{});var CQe=s(M9);iur=r(CQe,"This class cannot be instantiated directly using "),Ibe=n(CQe,"CODE",{});var xLt=s(Ibe);dur=r(xLt,"__init__()"),xLt.forEach(t),cur=r(CQe," (throws an error)."),CQe.forEach(t),fur=i(El),yt=n(El,"DIV",{class:!0});var D6=s(yt);T(E9.$$.fragment,D6),mur=i(D6),Nbe=n(D6,"P",{});var $Lt=s(Nbe);gur=r($Lt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$Lt.forEach(t),hur=i(D6),Yd=n(D6,"P",{});var ote=s(Yd);pur=r(ote,`Note:
Loading a model from its configuration file does `),qbe=n(ote,"STRONG",{});var kLt=s(qbe);_ur=r(kLt,"not"),kLt.forEach(t),uur=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(ote,"A",{href:!0});var SLt=s(RH);bur=r(SLt,"from_pretrained()"),SLt.forEach(t),vur=r(ote," to load the model weights."),ote.forEach(t),Fur=i(D6),T(WF.$$.fragment,D6),D6.forEach(t),Tur=i(El),bo=n(El,"DIV",{class:!0});var La=s(bo);T(C9.$$.fragment,La),Mur=i(La),jbe=n(La,"P",{});var RLt=s(jbe);Eur=r(RLt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RLt.forEach(t),Cur=i(La),on=n(La,"P",{});var G6=s(on);wur=r(G6,"The model class to instantiate is selected based on the "),Dbe=n(G6,"CODE",{});var PLt=s(Dbe);Aur=r(PLt,"model_type"),PLt.forEach(t),Lur=r(G6,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(G6,"CODE",{});var BLt=s(Gbe);yur=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),xur=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(G6,"CODE",{});var ILt=s(Obe);$ur=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),kur=r(G6,":"),G6.forEach(t),Sur=i(La),Vbe=n(La,"UL",{});var NLt=s(Vbe);HF=n(NLt,"LI",{});var gNe=s(HF);Xbe=n(gNe,"STRONG",{});var qLt=s(Xbe);Rur=r(qLt,"detr"),qLt.forEach(t),Pur=r(gNe," \u2014 "),PH=n(gNe,"A",{href:!0});var jLt=s(PH);Bur=r(jLt,"DetrForSegmentation"),jLt.forEach(t),Iur=r(gNe," (DETR model)"),gNe.forEach(t),NLt.forEach(t),Nur=i(La),UF=n(La,"P",{});var hNe=s(UF);qur=r(hNe,"The model is set in evaluation mode by default using "),zbe=n(hNe,"CODE",{});var DLt=s(zbe);jur=r(DLt,"model.eval()"),DLt.forEach(t),Dur=r(hNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(hNe,"CODE",{});var GLt=s(Qbe);Gur=r(GLt,"model.train()"),GLt.forEach(t),hNe.forEach(t),Our=i(La),T(JF.$$.fragment,La),La.forEach(t),El.forEach(t),uXe=i(f),Kd=n(f,"H2",{class:!0});var wQe=s(Kd);YF=n(wQe,"A",{id:!0,class:!0,href:!0});var OLt=s(YF);Wbe=n(OLt,"SPAN",{});var VLt=s(Wbe);T(w9.$$.fragment,VLt),VLt.forEach(t),OLt.forEach(t),Vur=i(wQe),Hbe=n(wQe,"SPAN",{});var XLt=s(Hbe);Xur=r(XLt,"AutoModelForSemanticSegmentation"),XLt.forEach(t),wQe.forEach(t),bXe=i(f),Ko=n(f,"DIV",{class:!0});var Cl=s(Ko);T(A9.$$.fragment,Cl),zur=i(Cl),Zd=n(Cl,"P",{});var rte=s(Zd);Qur=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),BH=n(rte,"A",{href:!0});var zLt=s(BH);Wur=r(zLt,"from_pretrained()"),zLt.forEach(t),Hur=r(rte," class method or the "),IH=n(rte,"A",{href:!0});var QLt=s(IH);Uur=r(QLt,"from_config()"),QLt.forEach(t),Jur=r(rte,` class
method.`),rte.forEach(t),Yur=i(Cl),L9=n(Cl,"P",{});var AQe=s(L9);Kur=r(AQe,"This class cannot be instantiated directly using "),Ube=n(AQe,"CODE",{});var WLt=s(Ube);Zur=r(WLt,"__init__()"),WLt.forEach(t),e1r=r(AQe," (throws an error)."),AQe.forEach(t),o1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var O6=s(xt);T(y9.$$.fragment,O6),r1r=i(O6),Jbe=n(O6,"P",{});var HLt=s(Jbe);t1r=r(HLt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),HLt.forEach(t),a1r=i(O6),ec=n(O6,"P",{});var tte=s(ec);n1r=r(tte,`Note:
Loading a model from its configuration file does `),Ybe=n(tte,"STRONG",{});var ULt=s(Ybe);s1r=r(ULt,"not"),ULt.forEach(t),l1r=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(tte,"A",{href:!0});var JLt=s(NH);i1r=r(JLt,"from_pretrained()"),JLt.forEach(t),d1r=r(tte," to load the model weights."),tte.forEach(t),c1r=i(O6),T(KF.$$.fragment,O6),O6.forEach(t),f1r=i(Cl),vo=n(Cl,"DIV",{class:!0});var ya=s(vo);T(x9.$$.fragment,ya),m1r=i(ya),Kbe=n(ya,"P",{});var YLt=s(Kbe);g1r=r(YLt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),YLt.forEach(t),h1r=i(ya),rn=n(ya,"P",{});var V6=s(rn);p1r=r(V6,"The model class to instantiate is selected based on the "),Zbe=n(V6,"CODE",{});var KLt=s(Zbe);_1r=r(KLt,"model_type"),KLt.forEach(t),u1r=r(V6,` property of the config object (either
passed as an argument or loaded from `),eve=n(V6,"CODE",{});var ZLt=s(eve);b1r=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),v1r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(V6,"CODE",{});var eyt=s(ove);F1r=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),T1r=r(V6,":"),V6.forEach(t),M1r=i(ya),tn=n(ya,"UL",{});var X6=s(tn);ZF=n(X6,"LI",{});var pNe=s(ZF);rve=n(pNe,"STRONG",{});var oyt=s(rve);E1r=r(oyt,"beit"),oyt.forEach(t),C1r=r(pNe," \u2014 "),qH=n(pNe,"A",{href:!0});var ryt=s(qH);w1r=r(ryt,"BeitForSemanticSegmentation"),ryt.forEach(t),A1r=r(pNe," (BEiT model)"),pNe.forEach(t),L1r=i(X6),eT=n(X6,"LI",{});var _Ne=s(eT);tve=n(_Ne,"STRONG",{});var tyt=s(tve);y1r=r(tyt,"data2vec-vision"),tyt.forEach(t),x1r=r(_Ne," \u2014 "),jH=n(_Ne,"A",{href:!0});var ayt=s(jH);$1r=r(ayt,"Data2VecVisionForSemanticSegmentation"),ayt.forEach(t),k1r=r(_Ne," (Data2VecVision model)"),_Ne.forEach(t),S1r=i(X6),oT=n(X6,"LI",{});var uNe=s(oT);ave=n(uNe,"STRONG",{});var nyt=s(ave);R1r=r(nyt,"dpt"),nyt.forEach(t),P1r=r(uNe," \u2014 "),DH=n(uNe,"A",{href:!0});var syt=s(DH);B1r=r(syt,"DPTForSemanticSegmentation"),syt.forEach(t),I1r=r(uNe," (DPT model)"),uNe.forEach(t),N1r=i(X6),rT=n(X6,"LI",{});var bNe=s(rT);nve=n(bNe,"STRONG",{});var lyt=s(nve);q1r=r(lyt,"segformer"),lyt.forEach(t),j1r=r(bNe," \u2014 "),GH=n(bNe,"A",{href:!0});var iyt=s(GH);D1r=r(iyt,"SegformerForSemanticSegmentation"),iyt.forEach(t),G1r=r(bNe," (SegFormer model)"),bNe.forEach(t),X6.forEach(t),O1r=i(ya),tT=n(ya,"P",{});var vNe=s(tT);V1r=r(vNe,"The model is set in evaluation mode by default using "),sve=n(vNe,"CODE",{});var dyt=s(sve);X1r=r(dyt,"model.eval()"),dyt.forEach(t),z1r=r(vNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lve=n(vNe,"CODE",{});var cyt=s(lve);Q1r=r(cyt,"model.train()"),cyt.forEach(t),vNe.forEach(t),W1r=i(ya),T(aT.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),vXe=i(f),oc=n(f,"H2",{class:!0});var LQe=s(oc);nT=n(LQe,"A",{id:!0,class:!0,href:!0});var fyt=s(nT);ive=n(fyt,"SPAN",{});var myt=s(ive);T($9.$$.fragment,myt),myt.forEach(t),fyt.forEach(t),H1r=i(LQe),dve=n(LQe,"SPAN",{});var gyt=s(dve);U1r=r(gyt,"AutoModelForInstanceSegmentation"),gyt.forEach(t),LQe.forEach(t),FXe=i(f),Zo=n(f,"DIV",{class:!0});var wl=s(Zo);T(k9.$$.fragment,wl),J1r=i(wl),rc=n(wl,"P",{});var ate=s(rc);Y1r=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),OH=n(ate,"A",{href:!0});var hyt=s(OH);K1r=r(hyt,"from_pretrained()"),hyt.forEach(t),Z1r=r(ate," class method or the "),VH=n(ate,"A",{href:!0});var pyt=s(VH);e7r=r(pyt,"from_config()"),pyt.forEach(t),o7r=r(ate,` class
method.`),ate.forEach(t),r7r=i(wl),S9=n(wl,"P",{});var yQe=s(S9);t7r=r(yQe,"This class cannot be instantiated directly using "),cve=n(yQe,"CODE",{});var _yt=s(cve);a7r=r(_yt,"__init__()"),_yt.forEach(t),n7r=r(yQe," (throws an error)."),yQe.forEach(t),s7r=i(wl),$t=n(wl,"DIV",{class:!0});var z6=s($t);T(R9.$$.fragment,z6),l7r=i(z6),fve=n(z6,"P",{});var uyt=s(fve);i7r=r(uyt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),uyt.forEach(t),d7r=i(z6),tc=n(z6,"P",{});var nte=s(tc);c7r=r(nte,`Note:
Loading a model from its configuration file does `),mve=n(nte,"STRONG",{});var byt=s(mve);f7r=r(byt,"not"),byt.forEach(t),m7r=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(nte,"A",{href:!0});var vyt=s(XH);g7r=r(vyt,"from_pretrained()"),vyt.forEach(t),h7r=r(nte," to load the model weights."),nte.forEach(t),p7r=i(z6),T(sT.$$.fragment,z6),z6.forEach(t),_7r=i(wl),Fo=n(wl,"DIV",{class:!0});var xa=s(Fo);T(P9.$$.fragment,xa),u7r=i(xa),gve=n(xa,"P",{});var Fyt=s(gve);b7r=r(Fyt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Fyt.forEach(t),v7r=i(xa),an=n(xa,"P",{});var Q6=s(an);F7r=r(Q6,"The model class to instantiate is selected based on the "),hve=n(Q6,"CODE",{});var Tyt=s(hve);T7r=r(Tyt,"model_type"),Tyt.forEach(t),M7r=r(Q6,` property of the config object (either
passed as an argument or loaded from `),pve=n(Q6,"CODE",{});var Myt=s(pve);E7r=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),C7r=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(Q6,"CODE",{});var Eyt=s(_ve);w7r=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),A7r=r(Q6,":"),Q6.forEach(t),L7r=i(xa),uve=n(xa,"UL",{});var Cyt=s(uve);lT=n(Cyt,"LI",{});var FNe=s(lT);bve=n(FNe,"STRONG",{});var wyt=s(bve);y7r=r(wyt,"maskformer"),wyt.forEach(t),x7r=r(FNe," \u2014 "),zH=n(FNe,"A",{href:!0});var Ayt=s(zH);$7r=r(Ayt,"MaskFormerForInstanceSegmentation"),Ayt.forEach(t),k7r=r(FNe," (MaskFormer model)"),FNe.forEach(t),Cyt.forEach(t),S7r=i(xa),iT=n(xa,"P",{});var TNe=s(iT);R7r=r(TNe,"The model is set in evaluation mode by default using "),vve=n(TNe,"CODE",{});var Lyt=s(vve);P7r=r(Lyt,"model.eval()"),Lyt.forEach(t),B7r=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fve=n(TNe,"CODE",{});var yyt=s(Fve);I7r=r(yyt,"model.train()"),yyt.forEach(t),TNe.forEach(t),N7r=i(xa),T(dT.$$.fragment,xa),xa.forEach(t),wl.forEach(t),TXe=i(f),ac=n(f,"H2",{class:!0});var xQe=s(ac);cT=n(xQe,"A",{id:!0,class:!0,href:!0});var xyt=s(cT);Tve=n(xyt,"SPAN",{});var $yt=s(Tve);T(B9.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),q7r=i(xQe),Mve=n(xQe,"SPAN",{});var kyt=s(Mve);j7r=r(kyt,"TFAutoModel"),kyt.forEach(t),xQe.forEach(t),MXe=i(f),er=n(f,"DIV",{class:!0});var Al=s(er);T(I9.$$.fragment,Al),D7r=i(Al),nc=n(Al,"P",{});var ste=s(nc);G7r=r(ste,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QH=n(ste,"A",{href:!0});var Syt=s(QH);O7r=r(Syt,"from_pretrained()"),Syt.forEach(t),V7r=r(ste," class method or the "),WH=n(ste,"A",{href:!0});var Ryt=s(WH);X7r=r(Ryt,"from_config()"),Ryt.forEach(t),z7r=r(ste,` class
method.`),ste.forEach(t),Q7r=i(Al),N9=n(Al,"P",{});var $Qe=s(N9);W7r=r($Qe,"This class cannot be instantiated directly using "),Eve=n($Qe,"CODE",{});var Pyt=s(Eve);H7r=r(Pyt,"__init__()"),Pyt.forEach(t),U7r=r($Qe," (throws an error)."),$Qe.forEach(t),J7r=i(Al),kt=n(Al,"DIV",{class:!0});var W6=s(kt);T(q9.$$.fragment,W6),Y7r=i(W6),Cve=n(W6,"P",{});var Byt=s(Cve);K7r=r(Byt,"Instantiates one of the base model classes of the library from a configuration."),Byt.forEach(t),Z7r=i(W6),sc=n(W6,"P",{});var lte=s(sc);e4r=r(lte,`Note:
Loading a model from its configuration file does `),wve=n(lte,"STRONG",{});var Iyt=s(wve);o4r=r(Iyt,"not"),Iyt.forEach(t),r4r=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(lte,"A",{href:!0});var Nyt=s(HH);t4r=r(Nyt,"from_pretrained()"),Nyt.forEach(t),a4r=r(lte," to load the model weights."),lte.forEach(t),n4r=i(W6),T(fT.$$.fragment,W6),W6.forEach(t),s4r=i(Al),yr=n(Al,"DIV",{class:!0});var Ll=s(yr);T(j9.$$.fragment,Ll),l4r=i(Ll),Ave=n(Ll,"P",{});var qyt=s(Ave);i4r=r(qyt,"Instantiate one of the base model classes of the library from a pretrained model."),qyt.forEach(t),d4r=i(Ll),nn=n(Ll,"P",{});var H6=s(nn);c4r=r(H6,"The model class to instantiate is selected based on the "),Lve=n(H6,"CODE",{});var jyt=s(Lve);f4r=r(jyt,"model_type"),jyt.forEach(t),m4r=r(H6,` property of the config object (either
passed as an argument or loaded from `),yve=n(H6,"CODE",{});var Dyt=s(yve);g4r=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),h4r=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(H6,"CODE",{});var Gyt=s(xve);p4r=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),_4r=r(H6,":"),H6.forEach(t),u4r=i(Ll),j=n(Ll,"UL",{});var D=s(j);mT=n(D,"LI",{});var MNe=s(mT);$ve=n(MNe,"STRONG",{});var Oyt=s($ve);b4r=r(Oyt,"albert"),Oyt.forEach(t),v4r=r(MNe," \u2014 "),UH=n(MNe,"A",{href:!0});var Vyt=s(UH);F4r=r(Vyt,"TFAlbertModel"),Vyt.forEach(t),T4r=r(MNe," (ALBERT model)"),MNe.forEach(t),M4r=i(D),gT=n(D,"LI",{});var ENe=s(gT);kve=n(ENe,"STRONG",{});var Xyt=s(kve);E4r=r(Xyt,"bart"),Xyt.forEach(t),C4r=r(ENe," \u2014 "),JH=n(ENe,"A",{href:!0});var zyt=s(JH);w4r=r(zyt,"TFBartModel"),zyt.forEach(t),A4r=r(ENe," (BART model)"),ENe.forEach(t),L4r=i(D),hT=n(D,"LI",{});var CNe=s(hT);Sve=n(CNe,"STRONG",{});var Qyt=s(Sve);y4r=r(Qyt,"bert"),Qyt.forEach(t),x4r=r(CNe," \u2014 "),YH=n(CNe,"A",{href:!0});var Wyt=s(YH);$4r=r(Wyt,"TFBertModel"),Wyt.forEach(t),k4r=r(CNe," (BERT model)"),CNe.forEach(t),S4r=i(D),pT=n(D,"LI",{});var wNe=s(pT);Rve=n(wNe,"STRONG",{});var Hyt=s(Rve);R4r=r(Hyt,"blenderbot"),Hyt.forEach(t),P4r=r(wNe," \u2014 "),KH=n(wNe,"A",{href:!0});var Uyt=s(KH);B4r=r(Uyt,"TFBlenderbotModel"),Uyt.forEach(t),I4r=r(wNe," (Blenderbot model)"),wNe.forEach(t),N4r=i(D),_T=n(D,"LI",{});var ANe=s(_T);Pve=n(ANe,"STRONG",{});var Jyt=s(Pve);q4r=r(Jyt,"blenderbot-small"),Jyt.forEach(t),j4r=r(ANe," \u2014 "),ZH=n(ANe,"A",{href:!0});var Yyt=s(ZH);D4r=r(Yyt,"TFBlenderbotSmallModel"),Yyt.forEach(t),G4r=r(ANe," (BlenderbotSmall model)"),ANe.forEach(t),O4r=i(D),uT=n(D,"LI",{});var LNe=s(uT);Bve=n(LNe,"STRONG",{});var Kyt=s(Bve);V4r=r(Kyt,"camembert"),Kyt.forEach(t),X4r=r(LNe," \u2014 "),eU=n(LNe,"A",{href:!0});var Zyt=s(eU);z4r=r(Zyt,"TFCamembertModel"),Zyt.forEach(t),Q4r=r(LNe," (CamemBERT model)"),LNe.forEach(t),W4r=i(D),bT=n(D,"LI",{});var yNe=s(bT);Ive=n(yNe,"STRONG",{});var e8t=s(Ive);H4r=r(e8t,"clip"),e8t.forEach(t),U4r=r(yNe," \u2014 "),oU=n(yNe,"A",{href:!0});var o8t=s(oU);J4r=r(o8t,"TFCLIPModel"),o8t.forEach(t),Y4r=r(yNe," (CLIP model)"),yNe.forEach(t),K4r=i(D),vT=n(D,"LI",{});var xNe=s(vT);Nve=n(xNe,"STRONG",{});var r8t=s(Nve);Z4r=r(r8t,"convbert"),r8t.forEach(t),e2r=r(xNe," \u2014 "),rU=n(xNe,"A",{href:!0});var t8t=s(rU);o2r=r(t8t,"TFConvBertModel"),t8t.forEach(t),r2r=r(xNe," (ConvBERT model)"),xNe.forEach(t),t2r=i(D),FT=n(D,"LI",{});var $Ne=s(FT);qve=n($Ne,"STRONG",{});var a8t=s(qve);a2r=r(a8t,"convnext"),a8t.forEach(t),n2r=r($Ne," \u2014 "),tU=n($Ne,"A",{href:!0});var n8t=s(tU);s2r=r(n8t,"TFConvNextModel"),n8t.forEach(t),l2r=r($Ne," (ConvNeXT model)"),$Ne.forEach(t),i2r=i(D),TT=n(D,"LI",{});var kNe=s(TT);jve=n(kNe,"STRONG",{});var s8t=s(jve);d2r=r(s8t,"ctrl"),s8t.forEach(t),c2r=r(kNe," \u2014 "),aU=n(kNe,"A",{href:!0});var l8t=s(aU);f2r=r(l8t,"TFCTRLModel"),l8t.forEach(t),m2r=r(kNe," (CTRL model)"),kNe.forEach(t),g2r=i(D),MT=n(D,"LI",{});var SNe=s(MT);Dve=n(SNe,"STRONG",{});var i8t=s(Dve);h2r=r(i8t,"data2vec-vision"),i8t.forEach(t),p2r=r(SNe," \u2014 "),nU=n(SNe,"A",{href:!0});var d8t=s(nU);_2r=r(d8t,"TFData2VecVisionModel"),d8t.forEach(t),u2r=r(SNe," (Data2VecVision model)"),SNe.forEach(t),b2r=i(D),ET=n(D,"LI",{});var RNe=s(ET);Gve=n(RNe,"STRONG",{});var c8t=s(Gve);v2r=r(c8t,"deberta"),c8t.forEach(t),F2r=r(RNe," \u2014 "),sU=n(RNe,"A",{href:!0});var f8t=s(sU);T2r=r(f8t,"TFDebertaModel"),f8t.forEach(t),M2r=r(RNe," (DeBERTa model)"),RNe.forEach(t),E2r=i(D),CT=n(D,"LI",{});var PNe=s(CT);Ove=n(PNe,"STRONG",{});var m8t=s(Ove);C2r=r(m8t,"deberta-v2"),m8t.forEach(t),w2r=r(PNe," \u2014 "),lU=n(PNe,"A",{href:!0});var g8t=s(lU);A2r=r(g8t,"TFDebertaV2Model"),g8t.forEach(t),L2r=r(PNe," (DeBERTa-v2 model)"),PNe.forEach(t),y2r=i(D),wT=n(D,"LI",{});var BNe=s(wT);Vve=n(BNe,"STRONG",{});var h8t=s(Vve);x2r=r(h8t,"distilbert"),h8t.forEach(t),$2r=r(BNe," \u2014 "),iU=n(BNe,"A",{href:!0});var p8t=s(iU);k2r=r(p8t,"TFDistilBertModel"),p8t.forEach(t),S2r=r(BNe," (DistilBERT model)"),BNe.forEach(t),R2r=i(D),AT=n(D,"LI",{});var INe=s(AT);Xve=n(INe,"STRONG",{});var _8t=s(Xve);P2r=r(_8t,"dpr"),_8t.forEach(t),B2r=r(INe," \u2014 "),dU=n(INe,"A",{href:!0});var u8t=s(dU);I2r=r(u8t,"TFDPRQuestionEncoder"),u8t.forEach(t),N2r=r(INe," (DPR model)"),INe.forEach(t),q2r=i(D),LT=n(D,"LI",{});var NNe=s(LT);zve=n(NNe,"STRONG",{});var b8t=s(zve);j2r=r(b8t,"electra"),b8t.forEach(t),D2r=r(NNe," \u2014 "),cU=n(NNe,"A",{href:!0});var v8t=s(cU);G2r=r(v8t,"TFElectraModel"),v8t.forEach(t),O2r=r(NNe," (ELECTRA model)"),NNe.forEach(t),V2r=i(D),yT=n(D,"LI",{});var qNe=s(yT);Qve=n(qNe,"STRONG",{});var F8t=s(Qve);X2r=r(F8t,"flaubert"),F8t.forEach(t),z2r=r(qNe," \u2014 "),fU=n(qNe,"A",{href:!0});var T8t=s(fU);Q2r=r(T8t,"TFFlaubertModel"),T8t.forEach(t),W2r=r(qNe," (FlauBERT model)"),qNe.forEach(t),H2r=i(D),Us=n(D,"LI",{});var CS=s(Us);Wve=n(CS,"STRONG",{});var M8t=s(Wve);U2r=r(M8t,"funnel"),M8t.forEach(t),J2r=r(CS," \u2014 "),mU=n(CS,"A",{href:!0});var E8t=s(mU);Y2r=r(E8t,"TFFunnelModel"),E8t.forEach(t),K2r=r(CS," or "),gU=n(CS,"A",{href:!0});var C8t=s(gU);Z2r=r(C8t,"TFFunnelBaseModel"),C8t.forEach(t),ebr=r(CS," (Funnel Transformer model)"),CS.forEach(t),obr=i(D),xT=n(D,"LI",{});var jNe=s(xT);Hve=n(jNe,"STRONG",{});var w8t=s(Hve);rbr=r(w8t,"gpt2"),w8t.forEach(t),tbr=r(jNe," \u2014 "),hU=n(jNe,"A",{href:!0});var A8t=s(hU);abr=r(A8t,"TFGPT2Model"),A8t.forEach(t),nbr=r(jNe," (OpenAI GPT-2 model)"),jNe.forEach(t),sbr=i(D),$T=n(D,"LI",{});var DNe=s($T);Uve=n(DNe,"STRONG",{});var L8t=s(Uve);lbr=r(L8t,"gptj"),L8t.forEach(t),ibr=r(DNe," \u2014 "),pU=n(DNe,"A",{href:!0});var y8t=s(pU);dbr=r(y8t,"TFGPTJModel"),y8t.forEach(t),cbr=r(DNe," (GPT-J model)"),DNe.forEach(t),fbr=i(D),kT=n(D,"LI",{});var GNe=s(kT);Jve=n(GNe,"STRONG",{});var x8t=s(Jve);mbr=r(x8t,"hubert"),x8t.forEach(t),gbr=r(GNe," \u2014 "),_U=n(GNe,"A",{href:!0});var $8t=s(_U);hbr=r($8t,"TFHubertModel"),$8t.forEach(t),pbr=r(GNe," (Hubert model)"),GNe.forEach(t),_br=i(D),ST=n(D,"LI",{});var ONe=s(ST);Yve=n(ONe,"STRONG",{});var k8t=s(Yve);ubr=r(k8t,"layoutlm"),k8t.forEach(t),bbr=r(ONe," \u2014 "),uU=n(ONe,"A",{href:!0});var S8t=s(uU);vbr=r(S8t,"TFLayoutLMModel"),S8t.forEach(t),Fbr=r(ONe," (LayoutLM model)"),ONe.forEach(t),Tbr=i(D),RT=n(D,"LI",{});var VNe=s(RT);Kve=n(VNe,"STRONG",{});var R8t=s(Kve);Mbr=r(R8t,"led"),R8t.forEach(t),Ebr=r(VNe," \u2014 "),bU=n(VNe,"A",{href:!0});var P8t=s(bU);Cbr=r(P8t,"TFLEDModel"),P8t.forEach(t),wbr=r(VNe," (LED model)"),VNe.forEach(t),Abr=i(D),PT=n(D,"LI",{});var XNe=s(PT);Zve=n(XNe,"STRONG",{});var B8t=s(Zve);Lbr=r(B8t,"longformer"),B8t.forEach(t),ybr=r(XNe," \u2014 "),vU=n(XNe,"A",{href:!0});var I8t=s(vU);xbr=r(I8t,"TFLongformerModel"),I8t.forEach(t),$br=r(XNe," (Longformer model)"),XNe.forEach(t),kbr=i(D),BT=n(D,"LI",{});var zNe=s(BT);e3e=n(zNe,"STRONG",{});var N8t=s(e3e);Sbr=r(N8t,"lxmert"),N8t.forEach(t),Rbr=r(zNe," \u2014 "),FU=n(zNe,"A",{href:!0});var q8t=s(FU);Pbr=r(q8t,"TFLxmertModel"),q8t.forEach(t),Bbr=r(zNe," (LXMERT model)"),zNe.forEach(t),Ibr=i(D),IT=n(D,"LI",{});var QNe=s(IT);o3e=n(QNe,"STRONG",{});var j8t=s(o3e);Nbr=r(j8t,"marian"),j8t.forEach(t),qbr=r(QNe," \u2014 "),TU=n(QNe,"A",{href:!0});var D8t=s(TU);jbr=r(D8t,"TFMarianModel"),D8t.forEach(t),Dbr=r(QNe," (Marian model)"),QNe.forEach(t),Gbr=i(D),NT=n(D,"LI",{});var WNe=s(NT);r3e=n(WNe,"STRONG",{});var G8t=s(r3e);Obr=r(G8t,"mbart"),G8t.forEach(t),Vbr=r(WNe," \u2014 "),MU=n(WNe,"A",{href:!0});var O8t=s(MU);Xbr=r(O8t,"TFMBartModel"),O8t.forEach(t),zbr=r(WNe," (mBART model)"),WNe.forEach(t),Qbr=i(D),qT=n(D,"LI",{});var HNe=s(qT);t3e=n(HNe,"STRONG",{});var V8t=s(t3e);Wbr=r(V8t,"mobilebert"),V8t.forEach(t),Hbr=r(HNe," \u2014 "),EU=n(HNe,"A",{href:!0});var X8t=s(EU);Ubr=r(X8t,"TFMobileBertModel"),X8t.forEach(t),Jbr=r(HNe," (MobileBERT model)"),HNe.forEach(t),Ybr=i(D),jT=n(D,"LI",{});var UNe=s(jT);a3e=n(UNe,"STRONG",{});var z8t=s(a3e);Kbr=r(z8t,"mpnet"),z8t.forEach(t),Zbr=r(UNe," \u2014 "),CU=n(UNe,"A",{href:!0});var Q8t=s(CU);evr=r(Q8t,"TFMPNetModel"),Q8t.forEach(t),ovr=r(UNe," (MPNet model)"),UNe.forEach(t),rvr=i(D),DT=n(D,"LI",{});var JNe=s(DT);n3e=n(JNe,"STRONG",{});var W8t=s(n3e);tvr=r(W8t,"mt5"),W8t.forEach(t),avr=r(JNe," \u2014 "),wU=n(JNe,"A",{href:!0});var H8t=s(wU);nvr=r(H8t,"TFMT5Model"),H8t.forEach(t),svr=r(JNe," (MT5 model)"),JNe.forEach(t),lvr=i(D),GT=n(D,"LI",{});var YNe=s(GT);s3e=n(YNe,"STRONG",{});var U8t=s(s3e);ivr=r(U8t,"openai-gpt"),U8t.forEach(t),dvr=r(YNe," \u2014 "),AU=n(YNe,"A",{href:!0});var J8t=s(AU);cvr=r(J8t,"TFOpenAIGPTModel"),J8t.forEach(t),fvr=r(YNe," (OpenAI GPT model)"),YNe.forEach(t),mvr=i(D),OT=n(D,"LI",{});var KNe=s(OT);l3e=n(KNe,"STRONG",{});var Y8t=s(l3e);gvr=r(Y8t,"opt"),Y8t.forEach(t),hvr=r(KNe," \u2014 "),LU=n(KNe,"A",{href:!0});var K8t=s(LU);pvr=r(K8t,"TFOPTModel"),K8t.forEach(t),_vr=r(KNe," (OPT model)"),KNe.forEach(t),uvr=i(D),VT=n(D,"LI",{});var ZNe=s(VT);i3e=n(ZNe,"STRONG",{});var Z8t=s(i3e);bvr=r(Z8t,"pegasus"),Z8t.forEach(t),vvr=r(ZNe," \u2014 "),yU=n(ZNe,"A",{href:!0});var e9t=s(yU);Fvr=r(e9t,"TFPegasusModel"),e9t.forEach(t),Tvr=r(ZNe," (Pegasus model)"),ZNe.forEach(t),Mvr=i(D),XT=n(D,"LI",{});var eqe=s(XT);d3e=n(eqe,"STRONG",{});var o9t=s(d3e);Evr=r(o9t,"regnet"),o9t.forEach(t),Cvr=r(eqe," \u2014 "),xU=n(eqe,"A",{href:!0});var r9t=s(xU);wvr=r(r9t,"TFRegNetModel"),r9t.forEach(t),Avr=r(eqe," (RegNet model)"),eqe.forEach(t),Lvr=i(D),zT=n(D,"LI",{});var oqe=s(zT);c3e=n(oqe,"STRONG",{});var t9t=s(c3e);yvr=r(t9t,"rembert"),t9t.forEach(t),xvr=r(oqe," \u2014 "),$U=n(oqe,"A",{href:!0});var a9t=s($U);$vr=r(a9t,"TFRemBertModel"),a9t.forEach(t),kvr=r(oqe," (RemBERT model)"),oqe.forEach(t),Svr=i(D),QT=n(D,"LI",{});var rqe=s(QT);f3e=n(rqe,"STRONG",{});var n9t=s(f3e);Rvr=r(n9t,"roberta"),n9t.forEach(t),Pvr=r(rqe," \u2014 "),kU=n(rqe,"A",{href:!0});var s9t=s(kU);Bvr=r(s9t,"TFRobertaModel"),s9t.forEach(t),Ivr=r(rqe," (RoBERTa model)"),rqe.forEach(t),Nvr=i(D),WT=n(D,"LI",{});var tqe=s(WT);m3e=n(tqe,"STRONG",{});var l9t=s(m3e);qvr=r(l9t,"roformer"),l9t.forEach(t),jvr=r(tqe," \u2014 "),SU=n(tqe,"A",{href:!0});var i9t=s(SU);Dvr=r(i9t,"TFRoFormerModel"),i9t.forEach(t),Gvr=r(tqe," (RoFormer model)"),tqe.forEach(t),Ovr=i(D),HT=n(D,"LI",{});var aqe=s(HT);g3e=n(aqe,"STRONG",{});var d9t=s(g3e);Vvr=r(d9t,"speech_to_text"),d9t.forEach(t),Xvr=r(aqe," \u2014 "),RU=n(aqe,"A",{href:!0});var c9t=s(RU);zvr=r(c9t,"TFSpeech2TextModel"),c9t.forEach(t),Qvr=r(aqe," (Speech2Text model)"),aqe.forEach(t),Wvr=i(D),UT=n(D,"LI",{});var nqe=s(UT);h3e=n(nqe,"STRONG",{});var f9t=s(h3e);Hvr=r(f9t,"swin"),f9t.forEach(t),Uvr=r(nqe," \u2014 "),PU=n(nqe,"A",{href:!0});var m9t=s(PU);Jvr=r(m9t,"TFSwinModel"),m9t.forEach(t),Yvr=r(nqe," (Swin Transformer model)"),nqe.forEach(t),Kvr=i(D),JT=n(D,"LI",{});var sqe=s(JT);p3e=n(sqe,"STRONG",{});var g9t=s(p3e);Zvr=r(g9t,"t5"),g9t.forEach(t),e3r=r(sqe," \u2014 "),BU=n(sqe,"A",{href:!0});var h9t=s(BU);o3r=r(h9t,"TFT5Model"),h9t.forEach(t),r3r=r(sqe," (T5 model)"),sqe.forEach(t),t3r=i(D),YT=n(D,"LI",{});var lqe=s(YT);_3e=n(lqe,"STRONG",{});var p9t=s(_3e);a3r=r(p9t,"tapas"),p9t.forEach(t),n3r=r(lqe," \u2014 "),IU=n(lqe,"A",{href:!0});var _9t=s(IU);s3r=r(_9t,"TFTapasModel"),_9t.forEach(t),l3r=r(lqe," (TAPAS model)"),lqe.forEach(t),i3r=i(D),KT=n(D,"LI",{});var iqe=s(KT);u3e=n(iqe,"STRONG",{});var u9t=s(u3e);d3r=r(u9t,"transfo-xl"),u9t.forEach(t),c3r=r(iqe," \u2014 "),NU=n(iqe,"A",{href:!0});var b9t=s(NU);f3r=r(b9t,"TFTransfoXLModel"),b9t.forEach(t),m3r=r(iqe," (Transformer-XL model)"),iqe.forEach(t),g3r=i(D),ZT=n(D,"LI",{});var dqe=s(ZT);b3e=n(dqe,"STRONG",{});var v9t=s(b3e);h3r=r(v9t,"vit"),v9t.forEach(t),p3r=r(dqe," \u2014 "),qU=n(dqe,"A",{href:!0});var F9t=s(qU);_3r=r(F9t,"TFViTModel"),F9t.forEach(t),u3r=r(dqe," (ViT model)"),dqe.forEach(t),b3r=i(D),eM=n(D,"LI",{});var cqe=s(eM);v3e=n(cqe,"STRONG",{});var T9t=s(v3e);v3r=r(T9t,"vit_mae"),T9t.forEach(t),F3r=r(cqe," \u2014 "),jU=n(cqe,"A",{href:!0});var M9t=s(jU);T3r=r(M9t,"TFViTMAEModel"),M9t.forEach(t),M3r=r(cqe," (ViTMAE model)"),cqe.forEach(t),E3r=i(D),oM=n(D,"LI",{});var fqe=s(oM);F3e=n(fqe,"STRONG",{});var E9t=s(F3e);C3r=r(E9t,"wav2vec2"),E9t.forEach(t),w3r=r(fqe," \u2014 "),DU=n(fqe,"A",{href:!0});var C9t=s(DU);A3r=r(C9t,"TFWav2Vec2Model"),C9t.forEach(t),L3r=r(fqe," (Wav2Vec2 model)"),fqe.forEach(t),y3r=i(D),rM=n(D,"LI",{});var mqe=s(rM);T3e=n(mqe,"STRONG",{});var w9t=s(T3e);x3r=r(w9t,"xlm"),w9t.forEach(t),$3r=r(mqe," \u2014 "),GU=n(mqe,"A",{href:!0});var A9t=s(GU);k3r=r(A9t,"TFXLMModel"),A9t.forEach(t),S3r=r(mqe," (XLM model)"),mqe.forEach(t),R3r=i(D),tM=n(D,"LI",{});var gqe=s(tM);M3e=n(gqe,"STRONG",{});var L9t=s(M3e);P3r=r(L9t,"xlm-roberta"),L9t.forEach(t),B3r=r(gqe," \u2014 "),OU=n(gqe,"A",{href:!0});var y9t=s(OU);I3r=r(y9t,"TFXLMRobertaModel"),y9t.forEach(t),N3r=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),q3r=i(D),aM=n(D,"LI",{});var hqe=s(aM);E3e=n(hqe,"STRONG",{});var x9t=s(E3e);j3r=r(x9t,"xlnet"),x9t.forEach(t),D3r=r(hqe," \u2014 "),VU=n(hqe,"A",{href:!0});var $9t=s(VU);G3r=r($9t,"TFXLNetModel"),$9t.forEach(t),O3r=r(hqe," (XLNet model)"),hqe.forEach(t),D.forEach(t),V3r=i(Ll),T(nM.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),EXe=i(f),lc=n(f,"H2",{class:!0});var kQe=s(lc);sM=n(kQe,"A",{id:!0,class:!0,href:!0});var k9t=s(sM);C3e=n(k9t,"SPAN",{});var S9t=s(C3e);T(D9.$$.fragment,S9t),S9t.forEach(t),k9t.forEach(t),X3r=i(kQe),w3e=n(kQe,"SPAN",{});var R9t=s(w3e);z3r=r(R9t,"TFAutoModelForPreTraining"),R9t.forEach(t),kQe.forEach(t),CXe=i(f),or=n(f,"DIV",{class:!0});var yl=s(or);T(G9.$$.fragment,yl),Q3r=i(yl),ic=n(yl,"P",{});var ite=s(ic);W3r=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XU=n(ite,"A",{href:!0});var P9t=s(XU);H3r=r(P9t,"from_pretrained()"),P9t.forEach(t),U3r=r(ite," class method or the "),zU=n(ite,"A",{href:!0});var B9t=s(zU);J3r=r(B9t,"from_config()"),B9t.forEach(t),Y3r=r(ite,` class
method.`),ite.forEach(t),K3r=i(yl),O9=n(yl,"P",{});var SQe=s(O9);Z3r=r(SQe,"This class cannot be instantiated directly using "),A3e=n(SQe,"CODE",{});var I9t=s(A3e);eFr=r(I9t,"__init__()"),I9t.forEach(t),oFr=r(SQe," (throws an error)."),SQe.forEach(t),rFr=i(yl),St=n(yl,"DIV",{class:!0});var U6=s(St);T(V9.$$.fragment,U6),tFr=i(U6),L3e=n(U6,"P",{});var N9t=s(L3e);aFr=r(N9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N9t.forEach(t),nFr=i(U6),dc=n(U6,"P",{});var dte=s(dc);sFr=r(dte,`Note:
Loading a model from its configuration file does `),y3e=n(dte,"STRONG",{});var q9t=s(y3e);lFr=r(q9t,"not"),q9t.forEach(t),iFr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(dte,"A",{href:!0});var j9t=s(QU);dFr=r(j9t,"from_pretrained()"),j9t.forEach(t),cFr=r(dte," to load the model weights."),dte.forEach(t),fFr=i(U6),T(lM.$$.fragment,U6),U6.forEach(t),mFr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(X9.$$.fragment,xl),gFr=i(xl),x3e=n(xl,"P",{});var D9t=s(x3e);hFr=r(D9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),D9t.forEach(t),pFr=i(xl),sn=n(xl,"P",{});var J6=s(sn);_Fr=r(J6,"The model class to instantiate is selected based on the "),$3e=n(J6,"CODE",{});var G9t=s($3e);uFr=r(G9t,"model_type"),G9t.forEach(t),bFr=r(J6,` property of the config object (either
passed as an argument or loaded from `),k3e=n(J6,"CODE",{});var O9t=s(k3e);vFr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),FFr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=n(J6,"CODE",{});var V9t=s(S3e);TFr=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),MFr=r(J6,":"),J6.forEach(t),EFr=i(xl),se=n(xl,"UL",{});var le=s(se);iM=n(le,"LI",{});var pqe=s(iM);R3e=n(pqe,"STRONG",{});var X9t=s(R3e);CFr=r(X9t,"albert"),X9t.forEach(t),wFr=r(pqe," \u2014 "),WU=n(pqe,"A",{href:!0});var z9t=s(WU);AFr=r(z9t,"TFAlbertForPreTraining"),z9t.forEach(t),LFr=r(pqe," (ALBERT model)"),pqe.forEach(t),yFr=i(le),dM=n(le,"LI",{});var _qe=s(dM);P3e=n(_qe,"STRONG",{});var Q9t=s(P3e);xFr=r(Q9t,"bart"),Q9t.forEach(t),$Fr=r(_qe," \u2014 "),HU=n(_qe,"A",{href:!0});var W9t=s(HU);kFr=r(W9t,"TFBartForConditionalGeneration"),W9t.forEach(t),SFr=r(_qe," (BART model)"),_qe.forEach(t),RFr=i(le),cM=n(le,"LI",{});var uqe=s(cM);B3e=n(uqe,"STRONG",{});var H9t=s(B3e);PFr=r(H9t,"bert"),H9t.forEach(t),BFr=r(uqe," \u2014 "),UU=n(uqe,"A",{href:!0});var U9t=s(UU);IFr=r(U9t,"TFBertForPreTraining"),U9t.forEach(t),NFr=r(uqe," (BERT model)"),uqe.forEach(t),qFr=i(le),fM=n(le,"LI",{});var bqe=s(fM);I3e=n(bqe,"STRONG",{});var J9t=s(I3e);jFr=r(J9t,"camembert"),J9t.forEach(t),DFr=r(bqe," \u2014 "),JU=n(bqe,"A",{href:!0});var Y9t=s(JU);GFr=r(Y9t,"TFCamembertForMaskedLM"),Y9t.forEach(t),OFr=r(bqe," (CamemBERT model)"),bqe.forEach(t),VFr=i(le),mM=n(le,"LI",{});var vqe=s(mM);N3e=n(vqe,"STRONG",{});var K9t=s(N3e);XFr=r(K9t,"ctrl"),K9t.forEach(t),zFr=r(vqe," \u2014 "),YU=n(vqe,"A",{href:!0});var Z9t=s(YU);QFr=r(Z9t,"TFCTRLLMHeadModel"),Z9t.forEach(t),WFr=r(vqe," (CTRL model)"),vqe.forEach(t),HFr=i(le),gM=n(le,"LI",{});var Fqe=s(gM);q3e=n(Fqe,"STRONG",{});var ext=s(q3e);UFr=r(ext,"distilbert"),ext.forEach(t),JFr=r(Fqe," \u2014 "),KU=n(Fqe,"A",{href:!0});var oxt=s(KU);YFr=r(oxt,"TFDistilBertForMaskedLM"),oxt.forEach(t),KFr=r(Fqe," (DistilBERT model)"),Fqe.forEach(t),ZFr=i(le),hM=n(le,"LI",{});var Tqe=s(hM);j3e=n(Tqe,"STRONG",{});var rxt=s(j3e);eTr=r(rxt,"electra"),rxt.forEach(t),oTr=r(Tqe," \u2014 "),ZU=n(Tqe,"A",{href:!0});var txt=s(ZU);rTr=r(txt,"TFElectraForPreTraining"),txt.forEach(t),tTr=r(Tqe," (ELECTRA model)"),Tqe.forEach(t),aTr=i(le),pM=n(le,"LI",{});var Mqe=s(pM);D3e=n(Mqe,"STRONG",{});var axt=s(D3e);nTr=r(axt,"flaubert"),axt.forEach(t),sTr=r(Mqe," \u2014 "),eJ=n(Mqe,"A",{href:!0});var nxt=s(eJ);lTr=r(nxt,"TFFlaubertWithLMHeadModel"),nxt.forEach(t),iTr=r(Mqe," (FlauBERT model)"),Mqe.forEach(t),dTr=i(le),_M=n(le,"LI",{});var Eqe=s(_M);G3e=n(Eqe,"STRONG",{});var sxt=s(G3e);cTr=r(sxt,"funnel"),sxt.forEach(t),fTr=r(Eqe," \u2014 "),oJ=n(Eqe,"A",{href:!0});var lxt=s(oJ);mTr=r(lxt,"TFFunnelForPreTraining"),lxt.forEach(t),gTr=r(Eqe," (Funnel Transformer model)"),Eqe.forEach(t),hTr=i(le),uM=n(le,"LI",{});var Cqe=s(uM);O3e=n(Cqe,"STRONG",{});var ixt=s(O3e);pTr=r(ixt,"gpt2"),ixt.forEach(t),_Tr=r(Cqe," \u2014 "),rJ=n(Cqe,"A",{href:!0});var dxt=s(rJ);uTr=r(dxt,"TFGPT2LMHeadModel"),dxt.forEach(t),bTr=r(Cqe," (OpenAI GPT-2 model)"),Cqe.forEach(t),vTr=i(le),bM=n(le,"LI",{});var wqe=s(bM);V3e=n(wqe,"STRONG",{});var cxt=s(V3e);FTr=r(cxt,"layoutlm"),cxt.forEach(t),TTr=r(wqe," \u2014 "),tJ=n(wqe,"A",{href:!0});var fxt=s(tJ);MTr=r(fxt,"TFLayoutLMForMaskedLM"),fxt.forEach(t),ETr=r(wqe," (LayoutLM model)"),wqe.forEach(t),CTr=i(le),vM=n(le,"LI",{});var Aqe=s(vM);X3e=n(Aqe,"STRONG",{});var mxt=s(X3e);wTr=r(mxt,"lxmert"),mxt.forEach(t),ATr=r(Aqe," \u2014 "),aJ=n(Aqe,"A",{href:!0});var gxt=s(aJ);LTr=r(gxt,"TFLxmertForPreTraining"),gxt.forEach(t),yTr=r(Aqe," (LXMERT model)"),Aqe.forEach(t),xTr=i(le),FM=n(le,"LI",{});var Lqe=s(FM);z3e=n(Lqe,"STRONG",{});var hxt=s(z3e);$Tr=r(hxt,"mobilebert"),hxt.forEach(t),kTr=r(Lqe," \u2014 "),nJ=n(Lqe,"A",{href:!0});var pxt=s(nJ);STr=r(pxt,"TFMobileBertForPreTraining"),pxt.forEach(t),RTr=r(Lqe," (MobileBERT model)"),Lqe.forEach(t),PTr=i(le),TM=n(le,"LI",{});var yqe=s(TM);Q3e=n(yqe,"STRONG",{});var _xt=s(Q3e);BTr=r(_xt,"mpnet"),_xt.forEach(t),ITr=r(yqe," \u2014 "),sJ=n(yqe,"A",{href:!0});var uxt=s(sJ);NTr=r(uxt,"TFMPNetForMaskedLM"),uxt.forEach(t),qTr=r(yqe," (MPNet model)"),yqe.forEach(t),jTr=i(le),MM=n(le,"LI",{});var xqe=s(MM);W3e=n(xqe,"STRONG",{});var bxt=s(W3e);DTr=r(bxt,"openai-gpt"),bxt.forEach(t),GTr=r(xqe," \u2014 "),lJ=n(xqe,"A",{href:!0});var vxt=s(lJ);OTr=r(vxt,"TFOpenAIGPTLMHeadModel"),vxt.forEach(t),VTr=r(xqe," (OpenAI GPT model)"),xqe.forEach(t),XTr=i(le),EM=n(le,"LI",{});var $qe=s(EM);H3e=n($qe,"STRONG",{});var Fxt=s(H3e);zTr=r(Fxt,"roberta"),Fxt.forEach(t),QTr=r($qe," \u2014 "),iJ=n($qe,"A",{href:!0});var Txt=s(iJ);WTr=r(Txt,"TFRobertaForMaskedLM"),Txt.forEach(t),HTr=r($qe," (RoBERTa model)"),$qe.forEach(t),UTr=i(le),CM=n(le,"LI",{});var kqe=s(CM);U3e=n(kqe,"STRONG",{});var Mxt=s(U3e);JTr=r(Mxt,"t5"),Mxt.forEach(t),YTr=r(kqe," \u2014 "),dJ=n(kqe,"A",{href:!0});var Ext=s(dJ);KTr=r(Ext,"TFT5ForConditionalGeneration"),Ext.forEach(t),ZTr=r(kqe," (T5 model)"),kqe.forEach(t),eMr=i(le),wM=n(le,"LI",{});var Sqe=s(wM);J3e=n(Sqe,"STRONG",{});var Cxt=s(J3e);oMr=r(Cxt,"tapas"),Cxt.forEach(t),rMr=r(Sqe," \u2014 "),cJ=n(Sqe,"A",{href:!0});var wxt=s(cJ);tMr=r(wxt,"TFTapasForMaskedLM"),wxt.forEach(t),aMr=r(Sqe," (TAPAS model)"),Sqe.forEach(t),nMr=i(le),AM=n(le,"LI",{});var Rqe=s(AM);Y3e=n(Rqe,"STRONG",{});var Axt=s(Y3e);sMr=r(Axt,"transfo-xl"),Axt.forEach(t),lMr=r(Rqe," \u2014 "),fJ=n(Rqe,"A",{href:!0});var Lxt=s(fJ);iMr=r(Lxt,"TFTransfoXLLMHeadModel"),Lxt.forEach(t),dMr=r(Rqe," (Transformer-XL model)"),Rqe.forEach(t),cMr=i(le),LM=n(le,"LI",{});var Pqe=s(LM);K3e=n(Pqe,"STRONG",{});var yxt=s(K3e);fMr=r(yxt,"vit_mae"),yxt.forEach(t),mMr=r(Pqe," \u2014 "),mJ=n(Pqe,"A",{href:!0});var xxt=s(mJ);gMr=r(xxt,"TFViTMAEForPreTraining"),xxt.forEach(t),hMr=r(Pqe," (ViTMAE model)"),Pqe.forEach(t),pMr=i(le),yM=n(le,"LI",{});var Bqe=s(yM);Z3e=n(Bqe,"STRONG",{});var $xt=s(Z3e);_Mr=r($xt,"xlm"),$xt.forEach(t),uMr=r(Bqe," \u2014 "),gJ=n(Bqe,"A",{href:!0});var kxt=s(gJ);bMr=r(kxt,"TFXLMWithLMHeadModel"),kxt.forEach(t),vMr=r(Bqe," (XLM model)"),Bqe.forEach(t),FMr=i(le),xM=n(le,"LI",{});var Iqe=s(xM);eFe=n(Iqe,"STRONG",{});var Sxt=s(eFe);TMr=r(Sxt,"xlm-roberta"),Sxt.forEach(t),MMr=r(Iqe," \u2014 "),hJ=n(Iqe,"A",{href:!0});var Rxt=s(hJ);EMr=r(Rxt,"TFXLMRobertaForMaskedLM"),Rxt.forEach(t),CMr=r(Iqe," (XLM-RoBERTa model)"),Iqe.forEach(t),wMr=i(le),$M=n(le,"LI",{});var Nqe=s($M);oFe=n(Nqe,"STRONG",{});var Pxt=s(oFe);AMr=r(Pxt,"xlnet"),Pxt.forEach(t),LMr=r(Nqe," \u2014 "),pJ=n(Nqe,"A",{href:!0});var Bxt=s(pJ);yMr=r(Bxt,"TFXLNetLMHeadModel"),Bxt.forEach(t),xMr=r(Nqe," (XLNet model)"),Nqe.forEach(t),le.forEach(t),$Mr=i(xl),T(kM.$$.fragment,xl),xl.forEach(t),yl.forEach(t),wXe=i(f),cc=n(f,"H2",{class:!0});var RQe=s(cc);SM=n(RQe,"A",{id:!0,class:!0,href:!0});var Ixt=s(SM);rFe=n(Ixt,"SPAN",{});var Nxt=s(rFe);T(z9.$$.fragment,Nxt),Nxt.forEach(t),Ixt.forEach(t),kMr=i(RQe),tFe=n(RQe,"SPAN",{});var qxt=s(tFe);SMr=r(qxt,"TFAutoModelForCausalLM"),qxt.forEach(t),RQe.forEach(t),AXe=i(f),rr=n(f,"DIV",{class:!0});var $l=s(rr);T(Q9.$$.fragment,$l),RMr=i($l),fc=n($l,"P",{});var cte=s(fc);PMr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_J=n(cte,"A",{href:!0});var jxt=s(_J);BMr=r(jxt,"from_pretrained()"),jxt.forEach(t),IMr=r(cte," class method or the "),uJ=n(cte,"A",{href:!0});var Dxt=s(uJ);NMr=r(Dxt,"from_config()"),Dxt.forEach(t),qMr=r(cte,` class
method.`),cte.forEach(t),jMr=i($l),W9=n($l,"P",{});var PQe=s(W9);DMr=r(PQe,"This class cannot be instantiated directly using "),aFe=n(PQe,"CODE",{});var Gxt=s(aFe);GMr=r(Gxt,"__init__()"),Gxt.forEach(t),OMr=r(PQe," (throws an error)."),PQe.forEach(t),VMr=i($l),Rt=n($l,"DIV",{class:!0});var Y6=s(Rt);T(H9.$$.fragment,Y6),XMr=i(Y6),nFe=n(Y6,"P",{});var Oxt=s(nFe);zMr=r(Oxt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oxt.forEach(t),QMr=i(Y6),mc=n(Y6,"P",{});var fte=s(mc);WMr=r(fte,`Note:
Loading a model from its configuration file does `),sFe=n(fte,"STRONG",{});var Vxt=s(sFe);HMr=r(Vxt,"not"),Vxt.forEach(t),UMr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(fte,"A",{href:!0});var Xxt=s(bJ);JMr=r(Xxt,"from_pretrained()"),Xxt.forEach(t),YMr=r(fte," to load the model weights."),fte.forEach(t),KMr=i(Y6),T(RM.$$.fragment,Y6),Y6.forEach(t),ZMr=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(U9.$$.fragment,kl),eEr=i(kl),lFe=n(kl,"P",{});var zxt=s(lFe);oEr=r(zxt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zxt.forEach(t),rEr=i(kl),ln=n(kl,"P",{});var K6=s(ln);tEr=r(K6,"The model class to instantiate is selected based on the "),iFe=n(K6,"CODE",{});var Qxt=s(iFe);aEr=r(Qxt,"model_type"),Qxt.forEach(t),nEr=r(K6,` property of the config object (either
passed as an argument or loaded from `),dFe=n(K6,"CODE",{});var Wxt=s(dFe);sEr=r(Wxt,"pretrained_model_name_or_path"),Wxt.forEach(t),lEr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(K6,"CODE",{});var Hxt=s(cFe);iEr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),dEr=r(K6,":"),K6.forEach(t),cEr=i(kl),Me=n(kl,"UL",{});var Ce=s(Me);PM=n(Ce,"LI",{});var qqe=s(PM);fFe=n(qqe,"STRONG",{});var Uxt=s(fFe);fEr=r(Uxt,"bert"),Uxt.forEach(t),mEr=r(qqe," \u2014 "),vJ=n(qqe,"A",{href:!0});var Jxt=s(vJ);gEr=r(Jxt,"TFBertLMHeadModel"),Jxt.forEach(t),hEr=r(qqe," (BERT model)"),qqe.forEach(t),pEr=i(Ce),BM=n(Ce,"LI",{});var jqe=s(BM);mFe=n(jqe,"STRONG",{});var Yxt=s(mFe);_Er=r(Yxt,"camembert"),Yxt.forEach(t),uEr=r(jqe," \u2014 "),FJ=n(jqe,"A",{href:!0});var Kxt=s(FJ);bEr=r(Kxt,"TFCamembertForCausalLM"),Kxt.forEach(t),vEr=r(jqe," (CamemBERT model)"),jqe.forEach(t),FEr=i(Ce),IM=n(Ce,"LI",{});var Dqe=s(IM);gFe=n(Dqe,"STRONG",{});var Zxt=s(gFe);TEr=r(Zxt,"ctrl"),Zxt.forEach(t),MEr=r(Dqe," \u2014 "),TJ=n(Dqe,"A",{href:!0});var e$t=s(TJ);EEr=r(e$t,"TFCTRLLMHeadModel"),e$t.forEach(t),CEr=r(Dqe," (CTRL model)"),Dqe.forEach(t),wEr=i(Ce),NM=n(Ce,"LI",{});var Gqe=s(NM);hFe=n(Gqe,"STRONG",{});var o$t=s(hFe);AEr=r(o$t,"gpt2"),o$t.forEach(t),LEr=r(Gqe," \u2014 "),MJ=n(Gqe,"A",{href:!0});var r$t=s(MJ);yEr=r(r$t,"TFGPT2LMHeadModel"),r$t.forEach(t),xEr=r(Gqe," (OpenAI GPT-2 model)"),Gqe.forEach(t),$Er=i(Ce),qM=n(Ce,"LI",{});var Oqe=s(qM);pFe=n(Oqe,"STRONG",{});var t$t=s(pFe);kEr=r(t$t,"gptj"),t$t.forEach(t),SEr=r(Oqe," \u2014 "),EJ=n(Oqe,"A",{href:!0});var a$t=s(EJ);REr=r(a$t,"TFGPTJForCausalLM"),a$t.forEach(t),PEr=r(Oqe," (GPT-J model)"),Oqe.forEach(t),BEr=i(Ce),jM=n(Ce,"LI",{});var Vqe=s(jM);_Fe=n(Vqe,"STRONG",{});var n$t=s(_Fe);IEr=r(n$t,"openai-gpt"),n$t.forEach(t),NEr=r(Vqe," \u2014 "),CJ=n(Vqe,"A",{href:!0});var s$t=s(CJ);qEr=r(s$t,"TFOpenAIGPTLMHeadModel"),s$t.forEach(t),jEr=r(Vqe," (OpenAI GPT model)"),Vqe.forEach(t),DEr=i(Ce),DM=n(Ce,"LI",{});var Xqe=s(DM);uFe=n(Xqe,"STRONG",{});var l$t=s(uFe);GEr=r(l$t,"opt"),l$t.forEach(t),OEr=r(Xqe," \u2014 "),wJ=n(Xqe,"A",{href:!0});var i$t=s(wJ);VEr=r(i$t,"TFOPTForCausalLM"),i$t.forEach(t),XEr=r(Xqe," (OPT model)"),Xqe.forEach(t),zEr=i(Ce),GM=n(Ce,"LI",{});var zqe=s(GM);bFe=n(zqe,"STRONG",{});var d$t=s(bFe);QEr=r(d$t,"rembert"),d$t.forEach(t),WEr=r(zqe," \u2014 "),AJ=n(zqe,"A",{href:!0});var c$t=s(AJ);HEr=r(c$t,"TFRemBertForCausalLM"),c$t.forEach(t),UEr=r(zqe," (RemBERT model)"),zqe.forEach(t),JEr=i(Ce),OM=n(Ce,"LI",{});var Qqe=s(OM);vFe=n(Qqe,"STRONG",{});var f$t=s(vFe);YEr=r(f$t,"roberta"),f$t.forEach(t),KEr=r(Qqe," \u2014 "),LJ=n(Qqe,"A",{href:!0});var m$t=s(LJ);ZEr=r(m$t,"TFRobertaForCausalLM"),m$t.forEach(t),eCr=r(Qqe," (RoBERTa model)"),Qqe.forEach(t),oCr=i(Ce),VM=n(Ce,"LI",{});var Wqe=s(VM);FFe=n(Wqe,"STRONG",{});var g$t=s(FFe);rCr=r(g$t,"roformer"),g$t.forEach(t),tCr=r(Wqe," \u2014 "),yJ=n(Wqe,"A",{href:!0});var h$t=s(yJ);aCr=r(h$t,"TFRoFormerForCausalLM"),h$t.forEach(t),nCr=r(Wqe," (RoFormer model)"),Wqe.forEach(t),sCr=i(Ce),XM=n(Ce,"LI",{});var Hqe=s(XM);TFe=n(Hqe,"STRONG",{});var p$t=s(TFe);lCr=r(p$t,"transfo-xl"),p$t.forEach(t),iCr=r(Hqe," \u2014 "),xJ=n(Hqe,"A",{href:!0});var _$t=s(xJ);dCr=r(_$t,"TFTransfoXLLMHeadModel"),_$t.forEach(t),cCr=r(Hqe," (Transformer-XL model)"),Hqe.forEach(t),fCr=i(Ce),zM=n(Ce,"LI",{});var Uqe=s(zM);MFe=n(Uqe,"STRONG",{});var u$t=s(MFe);mCr=r(u$t,"xlm"),u$t.forEach(t),gCr=r(Uqe," \u2014 "),$J=n(Uqe,"A",{href:!0});var b$t=s($J);hCr=r(b$t,"TFXLMWithLMHeadModel"),b$t.forEach(t),pCr=r(Uqe," (XLM model)"),Uqe.forEach(t),_Cr=i(Ce),QM=n(Ce,"LI",{});var Jqe=s(QM);EFe=n(Jqe,"STRONG",{});var v$t=s(EFe);uCr=r(v$t,"xlnet"),v$t.forEach(t),bCr=r(Jqe," \u2014 "),kJ=n(Jqe,"A",{href:!0});var F$t=s(kJ);vCr=r(F$t,"TFXLNetLMHeadModel"),F$t.forEach(t),FCr=r(Jqe," (XLNet model)"),Jqe.forEach(t),Ce.forEach(t),TCr=i(kl),T(WM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),LXe=i(f),gc=n(f,"H2",{class:!0});var BQe=s(gc);HM=n(BQe,"A",{id:!0,class:!0,href:!0});var T$t=s(HM);CFe=n(T$t,"SPAN",{});var M$t=s(CFe);T(J9.$$.fragment,M$t),M$t.forEach(t),T$t.forEach(t),MCr=i(BQe),wFe=n(BQe,"SPAN",{});var E$t=s(wFe);ECr=r(E$t,"TFAutoModelForImageClassification"),E$t.forEach(t),BQe.forEach(t),yXe=i(f),tr=n(f,"DIV",{class:!0});var Sl=s(tr);T(Y9.$$.fragment,Sl),CCr=i(Sl),hc=n(Sl,"P",{});var mte=s(hc);wCr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SJ=n(mte,"A",{href:!0});var C$t=s(SJ);ACr=r(C$t,"from_pretrained()"),C$t.forEach(t),LCr=r(mte," class method or the "),RJ=n(mte,"A",{href:!0});var w$t=s(RJ);yCr=r(w$t,"from_config()"),w$t.forEach(t),xCr=r(mte,` class
method.`),mte.forEach(t),$Cr=i(Sl),K9=n(Sl,"P",{});var IQe=s(K9);kCr=r(IQe,"This class cannot be instantiated directly using "),AFe=n(IQe,"CODE",{});var A$t=s(AFe);SCr=r(A$t,"__init__()"),A$t.forEach(t),RCr=r(IQe," (throws an error)."),IQe.forEach(t),PCr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var Z6=s(Pt);T(Z9.$$.fragment,Z6),BCr=i(Z6),LFe=n(Z6,"P",{});var L$t=s(LFe);ICr=r(L$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),L$t.forEach(t),NCr=i(Z6),pc=n(Z6,"P",{});var gte=s(pc);qCr=r(gte,`Note:
Loading a model from its configuration file does `),yFe=n(gte,"STRONG",{});var y$t=s(yFe);jCr=r(y$t,"not"),y$t.forEach(t),DCr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(gte,"A",{href:!0});var x$t=s(PJ);GCr=r(x$t,"from_pretrained()"),x$t.forEach(t),OCr=r(gte," to load the model weights."),gte.forEach(t),VCr=i(Z6),T(UM.$$.fragment,Z6),Z6.forEach(t),XCr=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(ex.$$.fragment,Rl),zCr=i(Rl),xFe=n(Rl,"P",{});var $$t=s(xFe);QCr=r($$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$$t.forEach(t),WCr=i(Rl),dn=n(Rl,"P",{});var eL=s(dn);HCr=r(eL,"The model class to instantiate is selected based on the "),$Fe=n(eL,"CODE",{});var k$t=s($Fe);UCr=r(k$t,"model_type"),k$t.forEach(t),JCr=r(eL,` property of the config object (either
passed as an argument or loaded from `),kFe=n(eL,"CODE",{});var S$t=s(kFe);YCr=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),KCr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(eL,"CODE",{});var R$t=s(SFe);ZCr=r(R$t,"pretrained_model_name_or_path"),R$t.forEach(t),e5r=r(eL,":"),eL.forEach(t),o5r=i(Rl),rt=n(Rl,"UL",{});var Pl=s(rt);JM=n(Pl,"LI",{});var Yqe=s(JM);RFe=n(Yqe,"STRONG",{});var P$t=s(RFe);r5r=r(P$t,"convnext"),P$t.forEach(t),t5r=r(Yqe," \u2014 "),BJ=n(Yqe,"A",{href:!0});var B$t=s(BJ);a5r=r(B$t,"TFConvNextForImageClassification"),B$t.forEach(t),n5r=r(Yqe," (ConvNeXT model)"),Yqe.forEach(t),s5r=i(Pl),YM=n(Pl,"LI",{});var Kqe=s(YM);PFe=n(Kqe,"STRONG",{});var I$t=s(PFe);l5r=r(I$t,"data2vec-vision"),I$t.forEach(t),i5r=r(Kqe," \u2014 "),IJ=n(Kqe,"A",{href:!0});var N$t=s(IJ);d5r=r(N$t,"TFData2VecVisionForImageClassification"),N$t.forEach(t),c5r=r(Kqe," (Data2VecVision model)"),Kqe.forEach(t),f5r=i(Pl),KM=n(Pl,"LI",{});var Zqe=s(KM);BFe=n(Zqe,"STRONG",{});var q$t=s(BFe);m5r=r(q$t,"regnet"),q$t.forEach(t),g5r=r(Zqe," \u2014 "),NJ=n(Zqe,"A",{href:!0});var j$t=s(NJ);h5r=r(j$t,"TFRegNetForImageClassification"),j$t.forEach(t),p5r=r(Zqe," (RegNet model)"),Zqe.forEach(t),_5r=i(Pl),ZM=n(Pl,"LI",{});var eje=s(ZM);IFe=n(eje,"STRONG",{});var D$t=s(IFe);u5r=r(D$t,"swin"),D$t.forEach(t),b5r=r(eje," \u2014 "),qJ=n(eje,"A",{href:!0});var G$t=s(qJ);v5r=r(G$t,"TFSwinForImageClassification"),G$t.forEach(t),F5r=r(eje," (Swin Transformer model)"),eje.forEach(t),T5r=i(Pl),eE=n(Pl,"LI",{});var oje=s(eE);NFe=n(oje,"STRONG",{});var O$t=s(NFe);M5r=r(O$t,"vit"),O$t.forEach(t),E5r=r(oje," \u2014 "),jJ=n(oje,"A",{href:!0});var V$t=s(jJ);C5r=r(V$t,"TFViTForImageClassification"),V$t.forEach(t),w5r=r(oje," (ViT model)"),oje.forEach(t),Pl.forEach(t),A5r=i(Rl),T(oE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),xXe=i(f),_c=n(f,"H2",{class:!0});var NQe=s(_c);rE=n(NQe,"A",{id:!0,class:!0,href:!0});var X$t=s(rE);qFe=n(X$t,"SPAN",{});var z$t=s(qFe);T(ox.$$.fragment,z$t),z$t.forEach(t),X$t.forEach(t),L5r=i(NQe),jFe=n(NQe,"SPAN",{});var Q$t=s(jFe);y5r=r(Q$t,"TFAutoModelForMaskedLM"),Q$t.forEach(t),NQe.forEach(t),$Xe=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(rx.$$.fragment,Bl),x5r=i(Bl),uc=n(Bl,"P",{});var hte=s(uc);$5r=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DJ=n(hte,"A",{href:!0});var W$t=s(DJ);k5r=r(W$t,"from_pretrained()"),W$t.forEach(t),S5r=r(hte," class method or the "),GJ=n(hte,"A",{href:!0});var H$t=s(GJ);R5r=r(H$t,"from_config()"),H$t.forEach(t),P5r=r(hte,` class
method.`),hte.forEach(t),B5r=i(Bl),tx=n(Bl,"P",{});var qQe=s(tx);I5r=r(qQe,"This class cannot be instantiated directly using "),DFe=n(qQe,"CODE",{});var U$t=s(DFe);N5r=r(U$t,"__init__()"),U$t.forEach(t),q5r=r(qQe," (throws an error)."),qQe.forEach(t),j5r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var oL=s(Bt);T(ax.$$.fragment,oL),D5r=i(oL),GFe=n(oL,"P",{});var J$t=s(GFe);G5r=r(J$t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J$t.forEach(t),O5r=i(oL),bc=n(oL,"P",{});var pte=s(bc);V5r=r(pte,`Note:
Loading a model from its configuration file does `),OFe=n(pte,"STRONG",{});var Y$t=s(OFe);X5r=r(Y$t,"not"),Y$t.forEach(t),z5r=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(pte,"A",{href:!0});var K$t=s(OJ);Q5r=r(K$t,"from_pretrained()"),K$t.forEach(t),W5r=r(pte," to load the model weights."),pte.forEach(t),H5r=i(oL),T(tE.$$.fragment,oL),oL.forEach(t),U5r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(nx.$$.fragment,Il),J5r=i(Il),VFe=n(Il,"P",{});var Z$t=s(VFe);Y5r=r(Z$t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z$t.forEach(t),K5r=i(Il),cn=n(Il,"P",{});var rL=s(cn);Z5r=r(rL,"The model class to instantiate is selected based on the "),XFe=n(rL,"CODE",{});var ekt=s(XFe);e0r=r(ekt,"model_type"),ekt.forEach(t),o0r=r(rL,` property of the config object (either
passed as an argument or loaded from `),zFe=n(rL,"CODE",{});var okt=s(zFe);r0r=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),t0r=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(rL,"CODE",{});var rkt=s(QFe);a0r=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),n0r=r(rL,":"),rL.forEach(t),s0r=i(Il),ie=n(Il,"UL",{});var fe=s(ie);aE=n(fe,"LI",{});var rje=s(aE);WFe=n(rje,"STRONG",{});var tkt=s(WFe);l0r=r(tkt,"albert"),tkt.forEach(t),i0r=r(rje," \u2014 "),VJ=n(rje,"A",{href:!0});var akt=s(VJ);d0r=r(akt,"TFAlbertForMaskedLM"),akt.forEach(t),c0r=r(rje," (ALBERT model)"),rje.forEach(t),f0r=i(fe),nE=n(fe,"LI",{});var tje=s(nE);HFe=n(tje,"STRONG",{});var nkt=s(HFe);m0r=r(nkt,"bert"),nkt.forEach(t),g0r=r(tje," \u2014 "),XJ=n(tje,"A",{href:!0});var skt=s(XJ);h0r=r(skt,"TFBertForMaskedLM"),skt.forEach(t),p0r=r(tje," (BERT model)"),tje.forEach(t),_0r=i(fe),sE=n(fe,"LI",{});var aje=s(sE);UFe=n(aje,"STRONG",{});var lkt=s(UFe);u0r=r(lkt,"camembert"),lkt.forEach(t),b0r=r(aje," \u2014 "),zJ=n(aje,"A",{href:!0});var ikt=s(zJ);v0r=r(ikt,"TFCamembertForMaskedLM"),ikt.forEach(t),F0r=r(aje," (CamemBERT model)"),aje.forEach(t),T0r=i(fe),lE=n(fe,"LI",{});var nje=s(lE);JFe=n(nje,"STRONG",{});var dkt=s(JFe);M0r=r(dkt,"convbert"),dkt.forEach(t),E0r=r(nje," \u2014 "),QJ=n(nje,"A",{href:!0});var ckt=s(QJ);C0r=r(ckt,"TFConvBertForMaskedLM"),ckt.forEach(t),w0r=r(nje," (ConvBERT model)"),nje.forEach(t),A0r=i(fe),iE=n(fe,"LI",{});var sje=s(iE);YFe=n(sje,"STRONG",{});var fkt=s(YFe);L0r=r(fkt,"deberta"),fkt.forEach(t),y0r=r(sje," \u2014 "),WJ=n(sje,"A",{href:!0});var mkt=s(WJ);x0r=r(mkt,"TFDebertaForMaskedLM"),mkt.forEach(t),$0r=r(sje," (DeBERTa model)"),sje.forEach(t),k0r=i(fe),dE=n(fe,"LI",{});var lje=s(dE);KFe=n(lje,"STRONG",{});var gkt=s(KFe);S0r=r(gkt,"deberta-v2"),gkt.forEach(t),R0r=r(lje," \u2014 "),HJ=n(lje,"A",{href:!0});var hkt=s(HJ);P0r=r(hkt,"TFDebertaV2ForMaskedLM"),hkt.forEach(t),B0r=r(lje," (DeBERTa-v2 model)"),lje.forEach(t),I0r=i(fe),cE=n(fe,"LI",{});var ije=s(cE);ZFe=n(ije,"STRONG",{});var pkt=s(ZFe);N0r=r(pkt,"distilbert"),pkt.forEach(t),q0r=r(ije," \u2014 "),UJ=n(ije,"A",{href:!0});var _kt=s(UJ);j0r=r(_kt,"TFDistilBertForMaskedLM"),_kt.forEach(t),D0r=r(ije," (DistilBERT model)"),ije.forEach(t),G0r=i(fe),fE=n(fe,"LI",{});var dje=s(fE);eTe=n(dje,"STRONG",{});var ukt=s(eTe);O0r=r(ukt,"electra"),ukt.forEach(t),V0r=r(dje," \u2014 "),JJ=n(dje,"A",{href:!0});var bkt=s(JJ);X0r=r(bkt,"TFElectraForMaskedLM"),bkt.forEach(t),z0r=r(dje," (ELECTRA model)"),dje.forEach(t),Q0r=i(fe),mE=n(fe,"LI",{});var cje=s(mE);oTe=n(cje,"STRONG",{});var vkt=s(oTe);W0r=r(vkt,"flaubert"),vkt.forEach(t),H0r=r(cje," \u2014 "),YJ=n(cje,"A",{href:!0});var Fkt=s(YJ);U0r=r(Fkt,"TFFlaubertWithLMHeadModel"),Fkt.forEach(t),J0r=r(cje," (FlauBERT model)"),cje.forEach(t),Y0r=i(fe),gE=n(fe,"LI",{});var fje=s(gE);rTe=n(fje,"STRONG",{});var Tkt=s(rTe);K0r=r(Tkt,"funnel"),Tkt.forEach(t),Z0r=r(fje," \u2014 "),KJ=n(fje,"A",{href:!0});var Mkt=s(KJ);ewr=r(Mkt,"TFFunnelForMaskedLM"),Mkt.forEach(t),owr=r(fje," (Funnel Transformer model)"),fje.forEach(t),rwr=i(fe),hE=n(fe,"LI",{});var mje=s(hE);tTe=n(mje,"STRONG",{});var Ekt=s(tTe);twr=r(Ekt,"layoutlm"),Ekt.forEach(t),awr=r(mje," \u2014 "),ZJ=n(mje,"A",{href:!0});var Ckt=s(ZJ);nwr=r(Ckt,"TFLayoutLMForMaskedLM"),Ckt.forEach(t),swr=r(mje," (LayoutLM model)"),mje.forEach(t),lwr=i(fe),pE=n(fe,"LI",{});var gje=s(pE);aTe=n(gje,"STRONG",{});var wkt=s(aTe);iwr=r(wkt,"longformer"),wkt.forEach(t),dwr=r(gje," \u2014 "),eY=n(gje,"A",{href:!0});var Akt=s(eY);cwr=r(Akt,"TFLongformerForMaskedLM"),Akt.forEach(t),fwr=r(gje," (Longformer model)"),gje.forEach(t),mwr=i(fe),_E=n(fe,"LI",{});var hje=s(_E);nTe=n(hje,"STRONG",{});var Lkt=s(nTe);gwr=r(Lkt,"mobilebert"),Lkt.forEach(t),hwr=r(hje," \u2014 "),oY=n(hje,"A",{href:!0});var ykt=s(oY);pwr=r(ykt,"TFMobileBertForMaskedLM"),ykt.forEach(t),_wr=r(hje," (MobileBERT model)"),hje.forEach(t),uwr=i(fe),uE=n(fe,"LI",{});var pje=s(uE);sTe=n(pje,"STRONG",{});var xkt=s(sTe);bwr=r(xkt,"mpnet"),xkt.forEach(t),vwr=r(pje," \u2014 "),rY=n(pje,"A",{href:!0});var $kt=s(rY);Fwr=r($kt,"TFMPNetForMaskedLM"),$kt.forEach(t),Twr=r(pje," (MPNet model)"),pje.forEach(t),Mwr=i(fe),bE=n(fe,"LI",{});var _je=s(bE);lTe=n(_je,"STRONG",{});var kkt=s(lTe);Ewr=r(kkt,"rembert"),kkt.forEach(t),Cwr=r(_je," \u2014 "),tY=n(_je,"A",{href:!0});var Skt=s(tY);wwr=r(Skt,"TFRemBertForMaskedLM"),Skt.forEach(t),Awr=r(_je," (RemBERT model)"),_je.forEach(t),Lwr=i(fe),vE=n(fe,"LI",{});var uje=s(vE);iTe=n(uje,"STRONG",{});var Rkt=s(iTe);ywr=r(Rkt,"roberta"),Rkt.forEach(t),xwr=r(uje," \u2014 "),aY=n(uje,"A",{href:!0});var Pkt=s(aY);$wr=r(Pkt,"TFRobertaForMaskedLM"),Pkt.forEach(t),kwr=r(uje," (RoBERTa model)"),uje.forEach(t),Swr=i(fe),FE=n(fe,"LI",{});var bje=s(FE);dTe=n(bje,"STRONG",{});var Bkt=s(dTe);Rwr=r(Bkt,"roformer"),Bkt.forEach(t),Pwr=r(bje," \u2014 "),nY=n(bje,"A",{href:!0});var Ikt=s(nY);Bwr=r(Ikt,"TFRoFormerForMaskedLM"),Ikt.forEach(t),Iwr=r(bje," (RoFormer model)"),bje.forEach(t),Nwr=i(fe),TE=n(fe,"LI",{});var vje=s(TE);cTe=n(vje,"STRONG",{});var Nkt=s(cTe);qwr=r(Nkt,"tapas"),Nkt.forEach(t),jwr=r(vje," \u2014 "),sY=n(vje,"A",{href:!0});var qkt=s(sY);Dwr=r(qkt,"TFTapasForMaskedLM"),qkt.forEach(t),Gwr=r(vje," (TAPAS model)"),vje.forEach(t),Owr=i(fe),ME=n(fe,"LI",{});var Fje=s(ME);fTe=n(Fje,"STRONG",{});var jkt=s(fTe);Vwr=r(jkt,"xlm"),jkt.forEach(t),Xwr=r(Fje," \u2014 "),lY=n(Fje,"A",{href:!0});var Dkt=s(lY);zwr=r(Dkt,"TFXLMWithLMHeadModel"),Dkt.forEach(t),Qwr=r(Fje," (XLM model)"),Fje.forEach(t),Wwr=i(fe),EE=n(fe,"LI",{});var Tje=s(EE);mTe=n(Tje,"STRONG",{});var Gkt=s(mTe);Hwr=r(Gkt,"xlm-roberta"),Gkt.forEach(t),Uwr=r(Tje," \u2014 "),iY=n(Tje,"A",{href:!0});var Okt=s(iY);Jwr=r(Okt,"TFXLMRobertaForMaskedLM"),Okt.forEach(t),Ywr=r(Tje," (XLM-RoBERTa model)"),Tje.forEach(t),fe.forEach(t),Kwr=i(Il),T(CE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),kXe=i(f),vc=n(f,"H2",{class:!0});var jQe=s(vc);wE=n(jQe,"A",{id:!0,class:!0,href:!0});var Vkt=s(wE);gTe=n(Vkt,"SPAN",{});var Xkt=s(gTe);T(sx.$$.fragment,Xkt),Xkt.forEach(t),Vkt.forEach(t),Zwr=i(jQe),hTe=n(jQe,"SPAN",{});var zkt=s(hTe);eAr=r(zkt,"TFAutoModelForSeq2SeqLM"),zkt.forEach(t),jQe.forEach(t),SXe=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(lx.$$.fragment,Nl),oAr=i(Nl),Fc=n(Nl,"P",{});var _te=s(Fc);rAr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=n(_te,"A",{href:!0});var Qkt=s(dY);tAr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),aAr=r(_te," class method or the "),cY=n(_te,"A",{href:!0});var Wkt=s(cY);nAr=r(Wkt,"from_config()"),Wkt.forEach(t),sAr=r(_te,` class
method.`),_te.forEach(t),lAr=i(Nl),ix=n(Nl,"P",{});var DQe=s(ix);iAr=r(DQe,"This class cannot be instantiated directly using "),pTe=n(DQe,"CODE",{});var Hkt=s(pTe);dAr=r(Hkt,"__init__()"),Hkt.forEach(t),cAr=r(DQe," (throws an error)."),DQe.forEach(t),fAr=i(Nl),It=n(Nl,"DIV",{class:!0});var tL=s(It);T(dx.$$.fragment,tL),mAr=i(tL),_Te=n(tL,"P",{});var Ukt=s(_Te);gAr=r(Ukt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ukt.forEach(t),hAr=i(tL),Tc=n(tL,"P",{});var ute=s(Tc);pAr=r(ute,`Note:
Loading a model from its configuration file does `),uTe=n(ute,"STRONG",{});var Jkt=s(uTe);_Ar=r(Jkt,"not"),Jkt.forEach(t),uAr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(ute,"A",{href:!0});var Ykt=s(fY);bAr=r(Ykt,"from_pretrained()"),Ykt.forEach(t),vAr=r(ute," to load the model weights."),ute.forEach(t),FAr=i(tL),T(AE.$$.fragment,tL),tL.forEach(t),TAr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(cx.$$.fragment,ql),MAr=i(ql),bTe=n(ql,"P",{});var Kkt=s(bTe);EAr=r(Kkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kkt.forEach(t),CAr=i(ql),fn=n(ql,"P",{});var aL=s(fn);wAr=r(aL,"The model class to instantiate is selected based on the "),vTe=n(aL,"CODE",{});var Zkt=s(vTe);AAr=r(Zkt,"model_type"),Zkt.forEach(t),LAr=r(aL,` property of the config object (either
passed as an argument or loaded from `),FTe=n(aL,"CODE",{});var eSt=s(FTe);yAr=r(eSt,"pretrained_model_name_or_path"),eSt.forEach(t),xAr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(aL,"CODE",{});var oSt=s(TTe);$Ar=r(oSt,"pretrained_model_name_or_path"),oSt.forEach(t),kAr=r(aL,":"),aL.forEach(t),SAr=i(ql),ye=n(ql,"UL",{});var Ie=s(ye);LE=n(Ie,"LI",{});var Mje=s(LE);MTe=n(Mje,"STRONG",{});var rSt=s(MTe);RAr=r(rSt,"bart"),rSt.forEach(t),PAr=r(Mje," \u2014 "),mY=n(Mje,"A",{href:!0});var tSt=s(mY);BAr=r(tSt,"TFBartForConditionalGeneration"),tSt.forEach(t),IAr=r(Mje," (BART model)"),Mje.forEach(t),NAr=i(Ie),yE=n(Ie,"LI",{});var Eje=s(yE);ETe=n(Eje,"STRONG",{});var aSt=s(ETe);qAr=r(aSt,"blenderbot"),aSt.forEach(t),jAr=r(Eje," \u2014 "),gY=n(Eje,"A",{href:!0});var nSt=s(gY);DAr=r(nSt,"TFBlenderbotForConditionalGeneration"),nSt.forEach(t),GAr=r(Eje," (Blenderbot model)"),Eje.forEach(t),OAr=i(Ie),xE=n(Ie,"LI",{});var Cje=s(xE);CTe=n(Cje,"STRONG",{});var sSt=s(CTe);VAr=r(sSt,"blenderbot-small"),sSt.forEach(t),XAr=r(Cje," \u2014 "),hY=n(Cje,"A",{href:!0});var lSt=s(hY);zAr=r(lSt,"TFBlenderbotSmallForConditionalGeneration"),lSt.forEach(t),QAr=r(Cje," (BlenderbotSmall model)"),Cje.forEach(t),WAr=i(Ie),$E=n(Ie,"LI",{});var wje=s($E);wTe=n(wje,"STRONG",{});var iSt=s(wTe);HAr=r(iSt,"encoder-decoder"),iSt.forEach(t),UAr=r(wje," \u2014 "),pY=n(wje,"A",{href:!0});var dSt=s(pY);JAr=r(dSt,"TFEncoderDecoderModel"),dSt.forEach(t),YAr=r(wje," (Encoder decoder model)"),wje.forEach(t),KAr=i(Ie),kE=n(Ie,"LI",{});var Aje=s(kE);ATe=n(Aje,"STRONG",{});var cSt=s(ATe);ZAr=r(cSt,"led"),cSt.forEach(t),e6r=r(Aje," \u2014 "),_Y=n(Aje,"A",{href:!0});var fSt=s(_Y);o6r=r(fSt,"TFLEDForConditionalGeneration"),fSt.forEach(t),r6r=r(Aje," (LED model)"),Aje.forEach(t),t6r=i(Ie),SE=n(Ie,"LI",{});var Lje=s(SE);LTe=n(Lje,"STRONG",{});var mSt=s(LTe);a6r=r(mSt,"marian"),mSt.forEach(t),n6r=r(Lje," \u2014 "),uY=n(Lje,"A",{href:!0});var gSt=s(uY);s6r=r(gSt,"TFMarianMTModel"),gSt.forEach(t),l6r=r(Lje," (Marian model)"),Lje.forEach(t),i6r=i(Ie),RE=n(Ie,"LI",{});var yje=s(RE);yTe=n(yje,"STRONG",{});var hSt=s(yTe);d6r=r(hSt,"mbart"),hSt.forEach(t),c6r=r(yje," \u2014 "),bY=n(yje,"A",{href:!0});var pSt=s(bY);f6r=r(pSt,"TFMBartForConditionalGeneration"),pSt.forEach(t),m6r=r(yje," (mBART model)"),yje.forEach(t),g6r=i(Ie),PE=n(Ie,"LI",{});var xje=s(PE);xTe=n(xje,"STRONG",{});var _St=s(xTe);h6r=r(_St,"mt5"),_St.forEach(t),p6r=r(xje," \u2014 "),vY=n(xje,"A",{href:!0});var uSt=s(vY);_6r=r(uSt,"TFMT5ForConditionalGeneration"),uSt.forEach(t),u6r=r(xje," (MT5 model)"),xje.forEach(t),b6r=i(Ie),BE=n(Ie,"LI",{});var $je=s(BE);$Te=n($je,"STRONG",{});var bSt=s($Te);v6r=r(bSt,"pegasus"),bSt.forEach(t),F6r=r($je," \u2014 "),FY=n($je,"A",{href:!0});var vSt=s(FY);T6r=r(vSt,"TFPegasusForConditionalGeneration"),vSt.forEach(t),M6r=r($je," (Pegasus model)"),$je.forEach(t),E6r=i(Ie),IE=n(Ie,"LI",{});var kje=s(IE);kTe=n(kje,"STRONG",{});var FSt=s(kTe);C6r=r(FSt,"t5"),FSt.forEach(t),w6r=r(kje," \u2014 "),TY=n(kje,"A",{href:!0});var TSt=s(TY);A6r=r(TSt,"TFT5ForConditionalGeneration"),TSt.forEach(t),L6r=r(kje," (T5 model)"),kje.forEach(t),Ie.forEach(t),y6r=i(ql),T(NE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),RXe=i(f),Mc=n(f,"H2",{class:!0});var GQe=s(Mc);qE=n(GQe,"A",{id:!0,class:!0,href:!0});var MSt=s(qE);STe=n(MSt,"SPAN",{});var ESt=s(STe);T(fx.$$.fragment,ESt),ESt.forEach(t),MSt.forEach(t),x6r=i(GQe),RTe=n(GQe,"SPAN",{});var CSt=s(RTe);$6r=r(CSt,"TFAutoModelForSequenceClassification"),CSt.forEach(t),GQe.forEach(t),PXe=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(mx.$$.fragment,jl),k6r=i(jl),Ec=n(jl,"P",{});var bte=s(Ec);S6r=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MY=n(bte,"A",{href:!0});var wSt=s(MY);R6r=r(wSt,"from_pretrained()"),wSt.forEach(t),P6r=r(bte," class method or the "),EY=n(bte,"A",{href:!0});var ASt=s(EY);B6r=r(ASt,"from_config()"),ASt.forEach(t),I6r=r(bte,` class
method.`),bte.forEach(t),N6r=i(jl),gx=n(jl,"P",{});var OQe=s(gx);q6r=r(OQe,"This class cannot be instantiated directly using "),PTe=n(OQe,"CODE",{});var LSt=s(PTe);j6r=r(LSt,"__init__()"),LSt.forEach(t),D6r=r(OQe," (throws an error)."),OQe.forEach(t),G6r=i(jl),Nt=n(jl,"DIV",{class:!0});var nL=s(Nt);T(hx.$$.fragment,nL),O6r=i(nL),BTe=n(nL,"P",{});var ySt=s(BTe);V6r=r(ySt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ySt.forEach(t),X6r=i(nL),Cc=n(nL,"P",{});var vte=s(Cc);z6r=r(vte,`Note:
Loading a model from its configuration file does `),ITe=n(vte,"STRONG",{});var xSt=s(ITe);Q6r=r(xSt,"not"),xSt.forEach(t),W6r=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(vte,"A",{href:!0});var $St=s(CY);H6r=r($St,"from_pretrained()"),$St.forEach(t),U6r=r(vte," to load the model weights."),vte.forEach(t),J6r=i(nL),T(jE.$$.fragment,nL),nL.forEach(t),Y6r=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(px.$$.fragment,Dl),K6r=i(Dl),NTe=n(Dl,"P",{});var kSt=s(NTe);Z6r=r(kSt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kSt.forEach(t),eLr=i(Dl),mn=n(Dl,"P",{});var sL=s(mn);oLr=r(sL,"The model class to instantiate is selected based on the "),qTe=n(sL,"CODE",{});var SSt=s(qTe);rLr=r(SSt,"model_type"),SSt.forEach(t),tLr=r(sL,` property of the config object (either
passed as an argument or loaded from `),jTe=n(sL,"CODE",{});var RSt=s(jTe);aLr=r(RSt,"pretrained_model_name_or_path"),RSt.forEach(t),nLr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(sL,"CODE",{});var PSt=s(DTe);sLr=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),lLr=r(sL,":"),sL.forEach(t),iLr=i(Dl),te=n(Dl,"UL",{});var ne=s(te);DE=n(ne,"LI",{});var Sje=s(DE);GTe=n(Sje,"STRONG",{});var BSt=s(GTe);dLr=r(BSt,"albert"),BSt.forEach(t),cLr=r(Sje," \u2014 "),wY=n(Sje,"A",{href:!0});var ISt=s(wY);fLr=r(ISt,"TFAlbertForSequenceClassification"),ISt.forEach(t),mLr=r(Sje," (ALBERT model)"),Sje.forEach(t),gLr=i(ne),GE=n(ne,"LI",{});var Rje=s(GE);OTe=n(Rje,"STRONG",{});var NSt=s(OTe);hLr=r(NSt,"bert"),NSt.forEach(t),pLr=r(Rje," \u2014 "),AY=n(Rje,"A",{href:!0});var qSt=s(AY);_Lr=r(qSt,"TFBertForSequenceClassification"),qSt.forEach(t),uLr=r(Rje," (BERT model)"),Rje.forEach(t),bLr=i(ne),OE=n(ne,"LI",{});var Pje=s(OE);VTe=n(Pje,"STRONG",{});var jSt=s(VTe);vLr=r(jSt,"camembert"),jSt.forEach(t),FLr=r(Pje," \u2014 "),LY=n(Pje,"A",{href:!0});var DSt=s(LY);TLr=r(DSt,"TFCamembertForSequenceClassification"),DSt.forEach(t),MLr=r(Pje," (CamemBERT model)"),Pje.forEach(t),ELr=i(ne),VE=n(ne,"LI",{});var Bje=s(VE);XTe=n(Bje,"STRONG",{});var GSt=s(XTe);CLr=r(GSt,"convbert"),GSt.forEach(t),wLr=r(Bje," \u2014 "),yY=n(Bje,"A",{href:!0});var OSt=s(yY);ALr=r(OSt,"TFConvBertForSequenceClassification"),OSt.forEach(t),LLr=r(Bje," (ConvBERT model)"),Bje.forEach(t),yLr=i(ne),XE=n(ne,"LI",{});var Ije=s(XE);zTe=n(Ije,"STRONG",{});var VSt=s(zTe);xLr=r(VSt,"ctrl"),VSt.forEach(t),$Lr=r(Ije," \u2014 "),xY=n(Ije,"A",{href:!0});var XSt=s(xY);kLr=r(XSt,"TFCTRLForSequenceClassification"),XSt.forEach(t),SLr=r(Ije," (CTRL model)"),Ije.forEach(t),RLr=i(ne),zE=n(ne,"LI",{});var Nje=s(zE);QTe=n(Nje,"STRONG",{});var zSt=s(QTe);PLr=r(zSt,"deberta"),zSt.forEach(t),BLr=r(Nje," \u2014 "),$Y=n(Nje,"A",{href:!0});var QSt=s($Y);ILr=r(QSt,"TFDebertaForSequenceClassification"),QSt.forEach(t),NLr=r(Nje," (DeBERTa model)"),Nje.forEach(t),qLr=i(ne),QE=n(ne,"LI",{});var qje=s(QE);WTe=n(qje,"STRONG",{});var WSt=s(WTe);jLr=r(WSt,"deberta-v2"),WSt.forEach(t),DLr=r(qje," \u2014 "),kY=n(qje,"A",{href:!0});var HSt=s(kY);GLr=r(HSt,"TFDebertaV2ForSequenceClassification"),HSt.forEach(t),OLr=r(qje," (DeBERTa-v2 model)"),qje.forEach(t),VLr=i(ne),WE=n(ne,"LI",{});var jje=s(WE);HTe=n(jje,"STRONG",{});var USt=s(HTe);XLr=r(USt,"distilbert"),USt.forEach(t),zLr=r(jje," \u2014 "),SY=n(jje,"A",{href:!0});var JSt=s(SY);QLr=r(JSt,"TFDistilBertForSequenceClassification"),JSt.forEach(t),WLr=r(jje," (DistilBERT model)"),jje.forEach(t),HLr=i(ne),HE=n(ne,"LI",{});var Dje=s(HE);UTe=n(Dje,"STRONG",{});var YSt=s(UTe);ULr=r(YSt,"electra"),YSt.forEach(t),JLr=r(Dje," \u2014 "),RY=n(Dje,"A",{href:!0});var KSt=s(RY);YLr=r(KSt,"TFElectraForSequenceClassification"),KSt.forEach(t),KLr=r(Dje," (ELECTRA model)"),Dje.forEach(t),ZLr=i(ne),UE=n(ne,"LI",{});var Gje=s(UE);JTe=n(Gje,"STRONG",{});var ZSt=s(JTe);eyr=r(ZSt,"flaubert"),ZSt.forEach(t),oyr=r(Gje," \u2014 "),PY=n(Gje,"A",{href:!0});var eRt=s(PY);ryr=r(eRt,"TFFlaubertForSequenceClassification"),eRt.forEach(t),tyr=r(Gje," (FlauBERT model)"),Gje.forEach(t),ayr=i(ne),JE=n(ne,"LI",{});var Oje=s(JE);YTe=n(Oje,"STRONG",{});var oRt=s(YTe);nyr=r(oRt,"funnel"),oRt.forEach(t),syr=r(Oje," \u2014 "),BY=n(Oje,"A",{href:!0});var rRt=s(BY);lyr=r(rRt,"TFFunnelForSequenceClassification"),rRt.forEach(t),iyr=r(Oje," (Funnel Transformer model)"),Oje.forEach(t),dyr=i(ne),YE=n(ne,"LI",{});var Vje=s(YE);KTe=n(Vje,"STRONG",{});var tRt=s(KTe);cyr=r(tRt,"gpt2"),tRt.forEach(t),fyr=r(Vje," \u2014 "),IY=n(Vje,"A",{href:!0});var aRt=s(IY);myr=r(aRt,"TFGPT2ForSequenceClassification"),aRt.forEach(t),gyr=r(Vje," (OpenAI GPT-2 model)"),Vje.forEach(t),hyr=i(ne),KE=n(ne,"LI",{});var Xje=s(KE);ZTe=n(Xje,"STRONG",{});var nRt=s(ZTe);pyr=r(nRt,"gptj"),nRt.forEach(t),_yr=r(Xje," \u2014 "),NY=n(Xje,"A",{href:!0});var sRt=s(NY);uyr=r(sRt,"TFGPTJForSequenceClassification"),sRt.forEach(t),byr=r(Xje," (GPT-J model)"),Xje.forEach(t),vyr=i(ne),ZE=n(ne,"LI",{});var zje=s(ZE);eMe=n(zje,"STRONG",{});var lRt=s(eMe);Fyr=r(lRt,"layoutlm"),lRt.forEach(t),Tyr=r(zje," \u2014 "),qY=n(zje,"A",{href:!0});var iRt=s(qY);Myr=r(iRt,"TFLayoutLMForSequenceClassification"),iRt.forEach(t),Eyr=r(zje," (LayoutLM model)"),zje.forEach(t),Cyr=i(ne),eC=n(ne,"LI",{});var Qje=s(eC);oMe=n(Qje,"STRONG",{});var dRt=s(oMe);wyr=r(dRt,"longformer"),dRt.forEach(t),Ayr=r(Qje," \u2014 "),jY=n(Qje,"A",{href:!0});var cRt=s(jY);Lyr=r(cRt,"TFLongformerForSequenceClassification"),cRt.forEach(t),yyr=r(Qje," (Longformer model)"),Qje.forEach(t),xyr=i(ne),oC=n(ne,"LI",{});var Wje=s(oC);rMe=n(Wje,"STRONG",{});var fRt=s(rMe);$yr=r(fRt,"mobilebert"),fRt.forEach(t),kyr=r(Wje," \u2014 "),DY=n(Wje,"A",{href:!0});var mRt=s(DY);Syr=r(mRt,"TFMobileBertForSequenceClassification"),mRt.forEach(t),Ryr=r(Wje," (MobileBERT model)"),Wje.forEach(t),Pyr=i(ne),rC=n(ne,"LI",{});var Hje=s(rC);tMe=n(Hje,"STRONG",{});var gRt=s(tMe);Byr=r(gRt,"mpnet"),gRt.forEach(t),Iyr=r(Hje," \u2014 "),GY=n(Hje,"A",{href:!0});var hRt=s(GY);Nyr=r(hRt,"TFMPNetForSequenceClassification"),hRt.forEach(t),qyr=r(Hje," (MPNet model)"),Hje.forEach(t),jyr=i(ne),tC=n(ne,"LI",{});var Uje=s(tC);aMe=n(Uje,"STRONG",{});var pRt=s(aMe);Dyr=r(pRt,"openai-gpt"),pRt.forEach(t),Gyr=r(Uje," \u2014 "),OY=n(Uje,"A",{href:!0});var _Rt=s(OY);Oyr=r(_Rt,"TFOpenAIGPTForSequenceClassification"),_Rt.forEach(t),Vyr=r(Uje," (OpenAI GPT model)"),Uje.forEach(t),Xyr=i(ne),aC=n(ne,"LI",{});var Jje=s(aC);nMe=n(Jje,"STRONG",{});var uRt=s(nMe);zyr=r(uRt,"rembert"),uRt.forEach(t),Qyr=r(Jje," \u2014 "),VY=n(Jje,"A",{href:!0});var bRt=s(VY);Wyr=r(bRt,"TFRemBertForSequenceClassification"),bRt.forEach(t),Hyr=r(Jje," (RemBERT model)"),Jje.forEach(t),Uyr=i(ne),nC=n(ne,"LI",{});var Yje=s(nC);sMe=n(Yje,"STRONG",{});var vRt=s(sMe);Jyr=r(vRt,"roberta"),vRt.forEach(t),Yyr=r(Yje," \u2014 "),XY=n(Yje,"A",{href:!0});var FRt=s(XY);Kyr=r(FRt,"TFRobertaForSequenceClassification"),FRt.forEach(t),Zyr=r(Yje," (RoBERTa model)"),Yje.forEach(t),e8r=i(ne),sC=n(ne,"LI",{});var Kje=s(sC);lMe=n(Kje,"STRONG",{});var TRt=s(lMe);o8r=r(TRt,"roformer"),TRt.forEach(t),r8r=r(Kje," \u2014 "),zY=n(Kje,"A",{href:!0});var MRt=s(zY);t8r=r(MRt,"TFRoFormerForSequenceClassification"),MRt.forEach(t),a8r=r(Kje," (RoFormer model)"),Kje.forEach(t),n8r=i(ne),lC=n(ne,"LI",{});var Zje=s(lC);iMe=n(Zje,"STRONG",{});var ERt=s(iMe);s8r=r(ERt,"tapas"),ERt.forEach(t),l8r=r(Zje," \u2014 "),QY=n(Zje,"A",{href:!0});var CRt=s(QY);i8r=r(CRt,"TFTapasForSequenceClassification"),CRt.forEach(t),d8r=r(Zje," (TAPAS model)"),Zje.forEach(t),c8r=i(ne),iC=n(ne,"LI",{});var eDe=s(iC);dMe=n(eDe,"STRONG",{});var wRt=s(dMe);f8r=r(wRt,"transfo-xl"),wRt.forEach(t),m8r=r(eDe," \u2014 "),WY=n(eDe,"A",{href:!0});var ARt=s(WY);g8r=r(ARt,"TFTransfoXLForSequenceClassification"),ARt.forEach(t),h8r=r(eDe," (Transformer-XL model)"),eDe.forEach(t),p8r=i(ne),dC=n(ne,"LI",{});var oDe=s(dC);cMe=n(oDe,"STRONG",{});var LRt=s(cMe);_8r=r(LRt,"xlm"),LRt.forEach(t),u8r=r(oDe," \u2014 "),HY=n(oDe,"A",{href:!0});var yRt=s(HY);b8r=r(yRt,"TFXLMForSequenceClassification"),yRt.forEach(t),v8r=r(oDe," (XLM model)"),oDe.forEach(t),F8r=i(ne),cC=n(ne,"LI",{});var rDe=s(cC);fMe=n(rDe,"STRONG",{});var xRt=s(fMe);T8r=r(xRt,"xlm-roberta"),xRt.forEach(t),M8r=r(rDe," \u2014 "),UY=n(rDe,"A",{href:!0});var $Rt=s(UY);E8r=r($Rt,"TFXLMRobertaForSequenceClassification"),$Rt.forEach(t),C8r=r(rDe," (XLM-RoBERTa model)"),rDe.forEach(t),w8r=i(ne),fC=n(ne,"LI",{});var tDe=s(fC);mMe=n(tDe,"STRONG",{});var kRt=s(mMe);A8r=r(kRt,"xlnet"),kRt.forEach(t),L8r=r(tDe," \u2014 "),JY=n(tDe,"A",{href:!0});var SRt=s(JY);y8r=r(SRt,"TFXLNetForSequenceClassification"),SRt.forEach(t),x8r=r(tDe," (XLNet model)"),tDe.forEach(t),ne.forEach(t),$8r=i(Dl),T(mC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),BXe=i(f),wc=n(f,"H2",{class:!0});var VQe=s(wc);gC=n(VQe,"A",{id:!0,class:!0,href:!0});var RRt=s(gC);gMe=n(RRt,"SPAN",{});var PRt=s(gMe);T(_x.$$.fragment,PRt),PRt.forEach(t),RRt.forEach(t),k8r=i(VQe),hMe=n(VQe,"SPAN",{});var BRt=s(hMe);S8r=r(BRt,"TFAutoModelForMultipleChoice"),BRt.forEach(t),VQe.forEach(t),IXe=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(ux.$$.fragment,Gl),R8r=i(Gl),Ac=n(Gl,"P",{});var Fte=s(Ac);P8r=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YY=n(Fte,"A",{href:!0});var IRt=s(YY);B8r=r(IRt,"from_pretrained()"),IRt.forEach(t),I8r=r(Fte," class method or the "),KY=n(Fte,"A",{href:!0});var NRt=s(KY);N8r=r(NRt,"from_config()"),NRt.forEach(t),q8r=r(Fte,` class
method.`),Fte.forEach(t),j8r=i(Gl),bx=n(Gl,"P",{});var XQe=s(bx);D8r=r(XQe,"This class cannot be instantiated directly using "),pMe=n(XQe,"CODE",{});var qRt=s(pMe);G8r=r(qRt,"__init__()"),qRt.forEach(t),O8r=r(XQe," (throws an error)."),XQe.forEach(t),V8r=i(Gl),qt=n(Gl,"DIV",{class:!0});var lL=s(qt);T(vx.$$.fragment,lL),X8r=i(lL),_Me=n(lL,"P",{});var jRt=s(_Me);z8r=r(jRt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jRt.forEach(t),Q8r=i(lL),Lc=n(lL,"P",{});var Tte=s(Lc);W8r=r(Tte,`Note:
Loading a model from its configuration file does `),uMe=n(Tte,"STRONG",{});var DRt=s(uMe);H8r=r(DRt,"not"),DRt.forEach(t),U8r=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(Tte,"A",{href:!0});var GRt=s(ZY);J8r=r(GRt,"from_pretrained()"),GRt.forEach(t),Y8r=r(Tte," to load the model weights."),Tte.forEach(t),K8r=i(lL),T(hC.$$.fragment,lL),lL.forEach(t),Z8r=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(Fx.$$.fragment,Ol),e9r=i(Ol),bMe=n(Ol,"P",{});var ORt=s(bMe);o9r=r(ORt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ORt.forEach(t),r9r=i(Ol),gn=n(Ol,"P",{});var iL=s(gn);t9r=r(iL,"The model class to instantiate is selected based on the "),vMe=n(iL,"CODE",{});var VRt=s(vMe);a9r=r(VRt,"model_type"),VRt.forEach(t),n9r=r(iL,` property of the config object (either
passed as an argument or loaded from `),FMe=n(iL,"CODE",{});var XRt=s(FMe);s9r=r(XRt,"pretrained_model_name_or_path"),XRt.forEach(t),l9r=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(iL,"CODE",{});var zRt=s(TMe);i9r=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),d9r=r(iL,":"),iL.forEach(t),c9r=i(Ol),_e=n(Ol,"UL",{});var ve=s(_e);pC=n(ve,"LI",{});var aDe=s(pC);MMe=n(aDe,"STRONG",{});var QRt=s(MMe);f9r=r(QRt,"albert"),QRt.forEach(t),m9r=r(aDe," \u2014 "),eK=n(aDe,"A",{href:!0});var WRt=s(eK);g9r=r(WRt,"TFAlbertForMultipleChoice"),WRt.forEach(t),h9r=r(aDe," (ALBERT model)"),aDe.forEach(t),p9r=i(ve),_C=n(ve,"LI",{});var nDe=s(_C);EMe=n(nDe,"STRONG",{});var HRt=s(EMe);_9r=r(HRt,"bert"),HRt.forEach(t),u9r=r(nDe," \u2014 "),oK=n(nDe,"A",{href:!0});var URt=s(oK);b9r=r(URt,"TFBertForMultipleChoice"),URt.forEach(t),v9r=r(nDe," (BERT model)"),nDe.forEach(t),F9r=i(ve),uC=n(ve,"LI",{});var sDe=s(uC);CMe=n(sDe,"STRONG",{});var JRt=s(CMe);T9r=r(JRt,"camembert"),JRt.forEach(t),M9r=r(sDe," \u2014 "),rK=n(sDe,"A",{href:!0});var YRt=s(rK);E9r=r(YRt,"TFCamembertForMultipleChoice"),YRt.forEach(t),C9r=r(sDe," (CamemBERT model)"),sDe.forEach(t),w9r=i(ve),bC=n(ve,"LI",{});var lDe=s(bC);wMe=n(lDe,"STRONG",{});var KRt=s(wMe);A9r=r(KRt,"convbert"),KRt.forEach(t),L9r=r(lDe," \u2014 "),tK=n(lDe,"A",{href:!0});var ZRt=s(tK);y9r=r(ZRt,"TFConvBertForMultipleChoice"),ZRt.forEach(t),x9r=r(lDe," (ConvBERT model)"),lDe.forEach(t),$9r=i(ve),vC=n(ve,"LI",{});var iDe=s(vC);AMe=n(iDe,"STRONG",{});var ePt=s(AMe);k9r=r(ePt,"distilbert"),ePt.forEach(t),S9r=r(iDe," \u2014 "),aK=n(iDe,"A",{href:!0});var oPt=s(aK);R9r=r(oPt,"TFDistilBertForMultipleChoice"),oPt.forEach(t),P9r=r(iDe," (DistilBERT model)"),iDe.forEach(t),B9r=i(ve),FC=n(ve,"LI",{});var dDe=s(FC);LMe=n(dDe,"STRONG",{});var rPt=s(LMe);I9r=r(rPt,"electra"),rPt.forEach(t),N9r=r(dDe," \u2014 "),nK=n(dDe,"A",{href:!0});var tPt=s(nK);q9r=r(tPt,"TFElectraForMultipleChoice"),tPt.forEach(t),j9r=r(dDe," (ELECTRA model)"),dDe.forEach(t),D9r=i(ve),TC=n(ve,"LI",{});var cDe=s(TC);yMe=n(cDe,"STRONG",{});var aPt=s(yMe);G9r=r(aPt,"flaubert"),aPt.forEach(t),O9r=r(cDe," \u2014 "),sK=n(cDe,"A",{href:!0});var nPt=s(sK);V9r=r(nPt,"TFFlaubertForMultipleChoice"),nPt.forEach(t),X9r=r(cDe," (FlauBERT model)"),cDe.forEach(t),z9r=i(ve),MC=n(ve,"LI",{});var fDe=s(MC);xMe=n(fDe,"STRONG",{});var sPt=s(xMe);Q9r=r(sPt,"funnel"),sPt.forEach(t),W9r=r(fDe," \u2014 "),lK=n(fDe,"A",{href:!0});var lPt=s(lK);H9r=r(lPt,"TFFunnelForMultipleChoice"),lPt.forEach(t),U9r=r(fDe," (Funnel Transformer model)"),fDe.forEach(t),J9r=i(ve),EC=n(ve,"LI",{});var mDe=s(EC);$Me=n(mDe,"STRONG",{});var iPt=s($Me);Y9r=r(iPt,"longformer"),iPt.forEach(t),K9r=r(mDe," \u2014 "),iK=n(mDe,"A",{href:!0});var dPt=s(iK);Z9r=r(dPt,"TFLongformerForMultipleChoice"),dPt.forEach(t),exr=r(mDe," (Longformer model)"),mDe.forEach(t),oxr=i(ve),CC=n(ve,"LI",{});var gDe=s(CC);kMe=n(gDe,"STRONG",{});var cPt=s(kMe);rxr=r(cPt,"mobilebert"),cPt.forEach(t),txr=r(gDe," \u2014 "),dK=n(gDe,"A",{href:!0});var fPt=s(dK);axr=r(fPt,"TFMobileBertForMultipleChoice"),fPt.forEach(t),nxr=r(gDe," (MobileBERT model)"),gDe.forEach(t),sxr=i(ve),wC=n(ve,"LI",{});var hDe=s(wC);SMe=n(hDe,"STRONG",{});var mPt=s(SMe);lxr=r(mPt,"mpnet"),mPt.forEach(t),ixr=r(hDe," \u2014 "),cK=n(hDe,"A",{href:!0});var gPt=s(cK);dxr=r(gPt,"TFMPNetForMultipleChoice"),gPt.forEach(t),cxr=r(hDe," (MPNet model)"),hDe.forEach(t),fxr=i(ve),AC=n(ve,"LI",{});var pDe=s(AC);RMe=n(pDe,"STRONG",{});var hPt=s(RMe);mxr=r(hPt,"rembert"),hPt.forEach(t),gxr=r(pDe," \u2014 "),fK=n(pDe,"A",{href:!0});var pPt=s(fK);hxr=r(pPt,"TFRemBertForMultipleChoice"),pPt.forEach(t),pxr=r(pDe," (RemBERT model)"),pDe.forEach(t),_xr=i(ve),LC=n(ve,"LI",{});var _De=s(LC);PMe=n(_De,"STRONG",{});var _Pt=s(PMe);uxr=r(_Pt,"roberta"),_Pt.forEach(t),bxr=r(_De," \u2014 "),mK=n(_De,"A",{href:!0});var uPt=s(mK);vxr=r(uPt,"TFRobertaForMultipleChoice"),uPt.forEach(t),Fxr=r(_De," (RoBERTa model)"),_De.forEach(t),Txr=i(ve),yC=n(ve,"LI",{});var uDe=s(yC);BMe=n(uDe,"STRONG",{});var bPt=s(BMe);Mxr=r(bPt,"roformer"),bPt.forEach(t),Exr=r(uDe," \u2014 "),gK=n(uDe,"A",{href:!0});var vPt=s(gK);Cxr=r(vPt,"TFRoFormerForMultipleChoice"),vPt.forEach(t),wxr=r(uDe," (RoFormer model)"),uDe.forEach(t),Axr=i(ve),xC=n(ve,"LI",{});var bDe=s(xC);IMe=n(bDe,"STRONG",{});var FPt=s(IMe);Lxr=r(FPt,"xlm"),FPt.forEach(t),yxr=r(bDe," \u2014 "),hK=n(bDe,"A",{href:!0});var TPt=s(hK);xxr=r(TPt,"TFXLMForMultipleChoice"),TPt.forEach(t),$xr=r(bDe," (XLM model)"),bDe.forEach(t),kxr=i(ve),$C=n(ve,"LI",{});var vDe=s($C);NMe=n(vDe,"STRONG",{});var MPt=s(NMe);Sxr=r(MPt,"xlm-roberta"),MPt.forEach(t),Rxr=r(vDe," \u2014 "),pK=n(vDe,"A",{href:!0});var EPt=s(pK);Pxr=r(EPt,"TFXLMRobertaForMultipleChoice"),EPt.forEach(t),Bxr=r(vDe," (XLM-RoBERTa model)"),vDe.forEach(t),Ixr=i(ve),kC=n(ve,"LI",{});var FDe=s(kC);qMe=n(FDe,"STRONG",{});var CPt=s(qMe);Nxr=r(CPt,"xlnet"),CPt.forEach(t),qxr=r(FDe," \u2014 "),_K=n(FDe,"A",{href:!0});var wPt=s(_K);jxr=r(wPt,"TFXLNetForMultipleChoice"),wPt.forEach(t),Dxr=r(FDe," (XLNet model)"),FDe.forEach(t),ve.forEach(t),Gxr=i(Ol),T(SC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),NXe=i(f),yc=n(f,"H2",{class:!0});var zQe=s(yc);RC=n(zQe,"A",{id:!0,class:!0,href:!0});var APt=s(RC);jMe=n(APt,"SPAN",{});var LPt=s(jMe);T(Tx.$$.fragment,LPt),LPt.forEach(t),APt.forEach(t),Oxr=i(zQe),DMe=n(zQe,"SPAN",{});var yPt=s(DMe);Vxr=r(yPt,"TFAutoModelForNextSentencePrediction"),yPt.forEach(t),zQe.forEach(t),qXe=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(Mx.$$.fragment,Vl),Xxr=i(Vl),xc=n(Vl,"P",{});var Mte=s(xc);zxr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uK=n(Mte,"A",{href:!0});var xPt=s(uK);Qxr=r(xPt,"from_pretrained()"),xPt.forEach(t),Wxr=r(Mte," class method or the "),bK=n(Mte,"A",{href:!0});var $Pt=s(bK);Hxr=r($Pt,"from_config()"),$Pt.forEach(t),Uxr=r(Mte,` class
method.`),Mte.forEach(t),Jxr=i(Vl),Ex=n(Vl,"P",{});var QQe=s(Ex);Yxr=r(QQe,"This class cannot be instantiated directly using "),GMe=n(QQe,"CODE",{});var kPt=s(GMe);Kxr=r(kPt,"__init__()"),kPt.forEach(t),Zxr=r(QQe," (throws an error)."),QQe.forEach(t),e$r=i(Vl),jt=n(Vl,"DIV",{class:!0});var dL=s(jt);T(Cx.$$.fragment,dL),o$r=i(dL),OMe=n(dL,"P",{});var SPt=s(OMe);r$r=r(SPt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SPt.forEach(t),t$r=i(dL),$c=n(dL,"P",{});var Ete=s($c);a$r=r(Ete,`Note:
Loading a model from its configuration file does `),VMe=n(Ete,"STRONG",{});var RPt=s(VMe);n$r=r(RPt,"not"),RPt.forEach(t),s$r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Ete,"A",{href:!0});var PPt=s(vK);l$r=r(PPt,"from_pretrained()"),PPt.forEach(t),i$r=r(Ete," to load the model weights."),Ete.forEach(t),d$r=i(dL),T(PC.$$.fragment,dL),dL.forEach(t),c$r=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(wx.$$.fragment,Xl),f$r=i(Xl),XMe=n(Xl,"P",{});var BPt=s(XMe);m$r=r(BPt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BPt.forEach(t),g$r=i(Xl),hn=n(Xl,"P",{});var cL=s(hn);h$r=r(cL,"The model class to instantiate is selected based on the "),zMe=n(cL,"CODE",{});var IPt=s(zMe);p$r=r(IPt,"model_type"),IPt.forEach(t),_$r=r(cL,` property of the config object (either
passed as an argument or loaded from `),QMe=n(cL,"CODE",{});var NPt=s(QMe);u$r=r(NPt,"pretrained_model_name_or_path"),NPt.forEach(t),b$r=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(cL,"CODE",{});var qPt=s(WMe);v$r=r(qPt,"pretrained_model_name_or_path"),qPt.forEach(t),F$r=r(cL,":"),cL.forEach(t),T$r=i(Xl),Ax=n(Xl,"UL",{});var WQe=s(Ax);BC=n(WQe,"LI",{});var TDe=s(BC);HMe=n(TDe,"STRONG",{});var jPt=s(HMe);M$r=r(jPt,"bert"),jPt.forEach(t),E$r=r(TDe," \u2014 "),FK=n(TDe,"A",{href:!0});var DPt=s(FK);C$r=r(DPt,"TFBertForNextSentencePrediction"),DPt.forEach(t),w$r=r(TDe," (BERT model)"),TDe.forEach(t),A$r=i(WQe),IC=n(WQe,"LI",{});var MDe=s(IC);UMe=n(MDe,"STRONG",{});var GPt=s(UMe);L$r=r(GPt,"mobilebert"),GPt.forEach(t),y$r=r(MDe," \u2014 "),TK=n(MDe,"A",{href:!0});var OPt=s(TK);x$r=r(OPt,"TFMobileBertForNextSentencePrediction"),OPt.forEach(t),$$r=r(MDe," (MobileBERT model)"),MDe.forEach(t),WQe.forEach(t),k$r=i(Xl),T(NC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),jXe=i(f),kc=n(f,"H2",{class:!0});var HQe=s(kc);qC=n(HQe,"A",{id:!0,class:!0,href:!0});var VPt=s(qC);JMe=n(VPt,"SPAN",{});var XPt=s(JMe);T(Lx.$$.fragment,XPt),XPt.forEach(t),VPt.forEach(t),S$r=i(HQe),YMe=n(HQe,"SPAN",{});var zPt=s(YMe);R$r=r(zPt,"TFAutoModelForTableQuestionAnswering"),zPt.forEach(t),HQe.forEach(t),DXe=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(yx.$$.fragment,zl),P$r=i(zl),Sc=n(zl,"P",{});var Cte=s(Sc);B$r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MK=n(Cte,"A",{href:!0});var QPt=s(MK);I$r=r(QPt,"from_pretrained()"),QPt.forEach(t),N$r=r(Cte," class method or the "),EK=n(Cte,"A",{href:!0});var WPt=s(EK);q$r=r(WPt,"from_config()"),WPt.forEach(t),j$r=r(Cte,` class
method.`),Cte.forEach(t),D$r=i(zl),xx=n(zl,"P",{});var UQe=s(xx);G$r=r(UQe,"This class cannot be instantiated directly using "),KMe=n(UQe,"CODE",{});var HPt=s(KMe);O$r=r(HPt,"__init__()"),HPt.forEach(t),V$r=r(UQe," (throws an error)."),UQe.forEach(t),X$r=i(zl),Dt=n(zl,"DIV",{class:!0});var fL=s(Dt);T($x.$$.fragment,fL),z$r=i(fL),ZMe=n(fL,"P",{});var UPt=s(ZMe);Q$r=r(UPt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UPt.forEach(t),W$r=i(fL),Rc=n(fL,"P",{});var wte=s(Rc);H$r=r(wte,`Note:
Loading a model from its configuration file does `),eEe=n(wte,"STRONG",{});var JPt=s(eEe);U$r=r(JPt,"not"),JPt.forEach(t),J$r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(wte,"A",{href:!0});var YPt=s(CK);Y$r=r(YPt,"from_pretrained()"),YPt.forEach(t),K$r=r(wte," to load the model weights."),wte.forEach(t),Z$r=i(fL),T(jC.$$.fragment,fL),fL.forEach(t),ekr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(kx.$$.fragment,Ql),okr=i(Ql),oEe=n(Ql,"P",{});var KPt=s(oEe);rkr=r(KPt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KPt.forEach(t),tkr=i(Ql),pn=n(Ql,"P",{});var mL=s(pn);akr=r(mL,"The model class to instantiate is selected based on the "),rEe=n(mL,"CODE",{});var ZPt=s(rEe);nkr=r(ZPt,"model_type"),ZPt.forEach(t),skr=r(mL,` property of the config object (either
passed as an argument or loaded from `),tEe=n(mL,"CODE",{});var eBt=s(tEe);lkr=r(eBt,"pretrained_model_name_or_path"),eBt.forEach(t),ikr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(mL,"CODE",{});var oBt=s(aEe);dkr=r(oBt,"pretrained_model_name_or_path"),oBt.forEach(t),ckr=r(mL,":"),mL.forEach(t),fkr=i(Ql),nEe=n(Ql,"UL",{});var rBt=s(nEe);DC=n(rBt,"LI",{});var EDe=s(DC);sEe=n(EDe,"STRONG",{});var tBt=s(sEe);mkr=r(tBt,"tapas"),tBt.forEach(t),gkr=r(EDe," \u2014 "),wK=n(EDe,"A",{href:!0});var aBt=s(wK);hkr=r(aBt,"TFTapasForQuestionAnswering"),aBt.forEach(t),pkr=r(EDe," (TAPAS model)"),EDe.forEach(t),rBt.forEach(t),_kr=i(Ql),T(GC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),GXe=i(f),Pc=n(f,"H2",{class:!0});var JQe=s(Pc);OC=n(JQe,"A",{id:!0,class:!0,href:!0});var nBt=s(OC);lEe=n(nBt,"SPAN",{});var sBt=s(lEe);T(Sx.$$.fragment,sBt),sBt.forEach(t),nBt.forEach(t),ukr=i(JQe),iEe=n(JQe,"SPAN",{});var lBt=s(iEe);bkr=r(lBt,"TFAutoModelForTokenClassification"),lBt.forEach(t),JQe.forEach(t),OXe=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(Rx.$$.fragment,Wl),vkr=i(Wl),Bc=n(Wl,"P",{});var Ate=s(Bc);Fkr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AK=n(Ate,"A",{href:!0});var iBt=s(AK);Tkr=r(iBt,"from_pretrained()"),iBt.forEach(t),Mkr=r(Ate," class method or the "),LK=n(Ate,"A",{href:!0});var dBt=s(LK);Ekr=r(dBt,"from_config()"),dBt.forEach(t),Ckr=r(Ate,` class
method.`),Ate.forEach(t),wkr=i(Wl),Px=n(Wl,"P",{});var YQe=s(Px);Akr=r(YQe,"This class cannot be instantiated directly using "),dEe=n(YQe,"CODE",{});var cBt=s(dEe);Lkr=r(cBt,"__init__()"),cBt.forEach(t),ykr=r(YQe," (throws an error)."),YQe.forEach(t),xkr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var gL=s(Gt);T(Bx.$$.fragment,gL),$kr=i(gL),cEe=n(gL,"P",{});var fBt=s(cEe);kkr=r(fBt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fBt.forEach(t),Skr=i(gL),Ic=n(gL,"P",{});var Lte=s(Ic);Rkr=r(Lte,`Note:
Loading a model from its configuration file does `),fEe=n(Lte,"STRONG",{});var mBt=s(fEe);Pkr=r(mBt,"not"),mBt.forEach(t),Bkr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Lte,"A",{href:!0});var gBt=s(yK);Ikr=r(gBt,"from_pretrained()"),gBt.forEach(t),Nkr=r(Lte," to load the model weights."),Lte.forEach(t),qkr=i(gL),T(VC.$$.fragment,gL),gL.forEach(t),jkr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Ix.$$.fragment,Hl),Dkr=i(Hl),mEe=n(Hl,"P",{});var hBt=s(mEe);Gkr=r(hBt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hBt.forEach(t),Okr=i(Hl),_n=n(Hl,"P",{});var hL=s(_n);Vkr=r(hL,"The model class to instantiate is selected based on the "),gEe=n(hL,"CODE",{});var pBt=s(gEe);Xkr=r(pBt,"model_type"),pBt.forEach(t),zkr=r(hL,` property of the config object (either
passed as an argument or loaded from `),hEe=n(hL,"CODE",{});var _Bt=s(hEe);Qkr=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),Wkr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(hL,"CODE",{});var uBt=s(pEe);Hkr=r(uBt,"pretrained_model_name_or_path"),uBt.forEach(t),Ukr=r(hL,":"),hL.forEach(t),Jkr=i(Hl),de=n(Hl,"UL",{});var me=s(de);XC=n(me,"LI",{});var CDe=s(XC);_Ee=n(CDe,"STRONG",{});var bBt=s(_Ee);Ykr=r(bBt,"albert"),bBt.forEach(t),Kkr=r(CDe," \u2014 "),xK=n(CDe,"A",{href:!0});var vBt=s(xK);Zkr=r(vBt,"TFAlbertForTokenClassification"),vBt.forEach(t),eSr=r(CDe," (ALBERT model)"),CDe.forEach(t),oSr=i(me),zC=n(me,"LI",{});var wDe=s(zC);uEe=n(wDe,"STRONG",{});var FBt=s(uEe);rSr=r(FBt,"bert"),FBt.forEach(t),tSr=r(wDe," \u2014 "),$K=n(wDe,"A",{href:!0});var TBt=s($K);aSr=r(TBt,"TFBertForTokenClassification"),TBt.forEach(t),nSr=r(wDe," (BERT model)"),wDe.forEach(t),sSr=i(me),QC=n(me,"LI",{});var ADe=s(QC);bEe=n(ADe,"STRONG",{});var MBt=s(bEe);lSr=r(MBt,"camembert"),MBt.forEach(t),iSr=r(ADe," \u2014 "),kK=n(ADe,"A",{href:!0});var EBt=s(kK);dSr=r(EBt,"TFCamembertForTokenClassification"),EBt.forEach(t),cSr=r(ADe," (CamemBERT model)"),ADe.forEach(t),fSr=i(me),WC=n(me,"LI",{});var LDe=s(WC);vEe=n(LDe,"STRONG",{});var CBt=s(vEe);mSr=r(CBt,"convbert"),CBt.forEach(t),gSr=r(LDe," \u2014 "),SK=n(LDe,"A",{href:!0});var wBt=s(SK);hSr=r(wBt,"TFConvBertForTokenClassification"),wBt.forEach(t),pSr=r(LDe," (ConvBERT model)"),LDe.forEach(t),_Sr=i(me),HC=n(me,"LI",{});var yDe=s(HC);FEe=n(yDe,"STRONG",{});var ABt=s(FEe);uSr=r(ABt,"deberta"),ABt.forEach(t),bSr=r(yDe," \u2014 "),RK=n(yDe,"A",{href:!0});var LBt=s(RK);vSr=r(LBt,"TFDebertaForTokenClassification"),LBt.forEach(t),FSr=r(yDe," (DeBERTa model)"),yDe.forEach(t),TSr=i(me),UC=n(me,"LI",{});var xDe=s(UC);TEe=n(xDe,"STRONG",{});var yBt=s(TEe);MSr=r(yBt,"deberta-v2"),yBt.forEach(t),ESr=r(xDe," \u2014 "),PK=n(xDe,"A",{href:!0});var xBt=s(PK);CSr=r(xBt,"TFDebertaV2ForTokenClassification"),xBt.forEach(t),wSr=r(xDe," (DeBERTa-v2 model)"),xDe.forEach(t),ASr=i(me),JC=n(me,"LI",{});var $De=s(JC);MEe=n($De,"STRONG",{});var $Bt=s(MEe);LSr=r($Bt,"distilbert"),$Bt.forEach(t),ySr=r($De," \u2014 "),BK=n($De,"A",{href:!0});var kBt=s(BK);xSr=r(kBt,"TFDistilBertForTokenClassification"),kBt.forEach(t),$Sr=r($De," (DistilBERT model)"),$De.forEach(t),kSr=i(me),YC=n(me,"LI",{});var kDe=s(YC);EEe=n(kDe,"STRONG",{});var SBt=s(EEe);SSr=r(SBt,"electra"),SBt.forEach(t),RSr=r(kDe," \u2014 "),IK=n(kDe,"A",{href:!0});var RBt=s(IK);PSr=r(RBt,"TFElectraForTokenClassification"),RBt.forEach(t),BSr=r(kDe," (ELECTRA model)"),kDe.forEach(t),ISr=i(me),KC=n(me,"LI",{});var SDe=s(KC);CEe=n(SDe,"STRONG",{});var PBt=s(CEe);NSr=r(PBt,"flaubert"),PBt.forEach(t),qSr=r(SDe," \u2014 "),NK=n(SDe,"A",{href:!0});var BBt=s(NK);jSr=r(BBt,"TFFlaubertForTokenClassification"),BBt.forEach(t),DSr=r(SDe," (FlauBERT model)"),SDe.forEach(t),GSr=i(me),ZC=n(me,"LI",{});var RDe=s(ZC);wEe=n(RDe,"STRONG",{});var IBt=s(wEe);OSr=r(IBt,"funnel"),IBt.forEach(t),VSr=r(RDe," \u2014 "),qK=n(RDe,"A",{href:!0});var NBt=s(qK);XSr=r(NBt,"TFFunnelForTokenClassification"),NBt.forEach(t),zSr=r(RDe," (Funnel Transformer model)"),RDe.forEach(t),QSr=i(me),e5=n(me,"LI",{});var PDe=s(e5);AEe=n(PDe,"STRONG",{});var qBt=s(AEe);WSr=r(qBt,"layoutlm"),qBt.forEach(t),HSr=r(PDe," \u2014 "),jK=n(PDe,"A",{href:!0});var jBt=s(jK);USr=r(jBt,"TFLayoutLMForTokenClassification"),jBt.forEach(t),JSr=r(PDe," (LayoutLM model)"),PDe.forEach(t),YSr=i(me),o5=n(me,"LI",{});var BDe=s(o5);LEe=n(BDe,"STRONG",{});var DBt=s(LEe);KSr=r(DBt,"longformer"),DBt.forEach(t),ZSr=r(BDe," \u2014 "),DK=n(BDe,"A",{href:!0});var GBt=s(DK);eRr=r(GBt,"TFLongformerForTokenClassification"),GBt.forEach(t),oRr=r(BDe," (Longformer model)"),BDe.forEach(t),rRr=i(me),r5=n(me,"LI",{});var IDe=s(r5);yEe=n(IDe,"STRONG",{});var OBt=s(yEe);tRr=r(OBt,"mobilebert"),OBt.forEach(t),aRr=r(IDe," \u2014 "),GK=n(IDe,"A",{href:!0});var VBt=s(GK);nRr=r(VBt,"TFMobileBertForTokenClassification"),VBt.forEach(t),sRr=r(IDe," (MobileBERT model)"),IDe.forEach(t),lRr=i(me),t5=n(me,"LI",{});var NDe=s(t5);xEe=n(NDe,"STRONG",{});var XBt=s(xEe);iRr=r(XBt,"mpnet"),XBt.forEach(t),dRr=r(NDe," \u2014 "),OK=n(NDe,"A",{href:!0});var zBt=s(OK);cRr=r(zBt,"TFMPNetForTokenClassification"),zBt.forEach(t),fRr=r(NDe," (MPNet model)"),NDe.forEach(t),mRr=i(me),a5=n(me,"LI",{});var qDe=s(a5);$Ee=n(qDe,"STRONG",{});var QBt=s($Ee);gRr=r(QBt,"rembert"),QBt.forEach(t),hRr=r(qDe," \u2014 "),VK=n(qDe,"A",{href:!0});var WBt=s(VK);pRr=r(WBt,"TFRemBertForTokenClassification"),WBt.forEach(t),_Rr=r(qDe," (RemBERT model)"),qDe.forEach(t),uRr=i(me),n5=n(me,"LI",{});var jDe=s(n5);kEe=n(jDe,"STRONG",{});var HBt=s(kEe);bRr=r(HBt,"roberta"),HBt.forEach(t),vRr=r(jDe," \u2014 "),XK=n(jDe,"A",{href:!0});var UBt=s(XK);FRr=r(UBt,"TFRobertaForTokenClassification"),UBt.forEach(t),TRr=r(jDe," (RoBERTa model)"),jDe.forEach(t),MRr=i(me),s5=n(me,"LI",{});var DDe=s(s5);SEe=n(DDe,"STRONG",{});var JBt=s(SEe);ERr=r(JBt,"roformer"),JBt.forEach(t),CRr=r(DDe," \u2014 "),zK=n(DDe,"A",{href:!0});var YBt=s(zK);wRr=r(YBt,"TFRoFormerForTokenClassification"),YBt.forEach(t),ARr=r(DDe," (RoFormer model)"),DDe.forEach(t),LRr=i(me),l5=n(me,"LI",{});var GDe=s(l5);REe=n(GDe,"STRONG",{});var KBt=s(REe);yRr=r(KBt,"xlm"),KBt.forEach(t),xRr=r(GDe," \u2014 "),QK=n(GDe,"A",{href:!0});var ZBt=s(QK);$Rr=r(ZBt,"TFXLMForTokenClassification"),ZBt.forEach(t),kRr=r(GDe," (XLM model)"),GDe.forEach(t),SRr=i(me),i5=n(me,"LI",{});var ODe=s(i5);PEe=n(ODe,"STRONG",{});var eIt=s(PEe);RRr=r(eIt,"xlm-roberta"),eIt.forEach(t),PRr=r(ODe," \u2014 "),WK=n(ODe,"A",{href:!0});var oIt=s(WK);BRr=r(oIt,"TFXLMRobertaForTokenClassification"),oIt.forEach(t),IRr=r(ODe," (XLM-RoBERTa model)"),ODe.forEach(t),NRr=i(me),d5=n(me,"LI",{});var VDe=s(d5);BEe=n(VDe,"STRONG",{});var rIt=s(BEe);qRr=r(rIt,"xlnet"),rIt.forEach(t),jRr=r(VDe," \u2014 "),HK=n(VDe,"A",{href:!0});var tIt=s(HK);DRr=r(tIt,"TFXLNetForTokenClassification"),tIt.forEach(t),GRr=r(VDe," (XLNet model)"),VDe.forEach(t),me.forEach(t),ORr=i(Hl),T(c5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),VXe=i(f),Nc=n(f,"H2",{class:!0});var KQe=s(Nc);f5=n(KQe,"A",{id:!0,class:!0,href:!0});var aIt=s(f5);IEe=n(aIt,"SPAN",{});var nIt=s(IEe);T(Nx.$$.fragment,nIt),nIt.forEach(t),aIt.forEach(t),VRr=i(KQe),NEe=n(KQe,"SPAN",{});var sIt=s(NEe);XRr=r(sIt,"TFAutoModelForQuestionAnswering"),sIt.forEach(t),KQe.forEach(t),XXe=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(qx.$$.fragment,Ul),zRr=i(Ul),qc=n(Ul,"P",{});var yte=s(qc);QRr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UK=n(yte,"A",{href:!0});var lIt=s(UK);WRr=r(lIt,"from_pretrained()"),lIt.forEach(t),HRr=r(yte," class method or the "),JK=n(yte,"A",{href:!0});var iIt=s(JK);URr=r(iIt,"from_config()"),iIt.forEach(t),JRr=r(yte,` class
method.`),yte.forEach(t),YRr=i(Ul),jx=n(Ul,"P",{});var ZQe=s(jx);KRr=r(ZQe,"This class cannot be instantiated directly using "),qEe=n(ZQe,"CODE",{});var dIt=s(qEe);ZRr=r(dIt,"__init__()"),dIt.forEach(t),ePr=r(ZQe," (throws an error)."),ZQe.forEach(t),oPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var pL=s(Ot);T(Dx.$$.fragment,pL),rPr=i(pL),jEe=n(pL,"P",{});var cIt=s(jEe);tPr=r(cIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cIt.forEach(t),aPr=i(pL),jc=n(pL,"P",{});var xte=s(jc);nPr=r(xte,`Note:
Loading a model from its configuration file does `),DEe=n(xte,"STRONG",{});var fIt=s(DEe);sPr=r(fIt,"not"),fIt.forEach(t),lPr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(xte,"A",{href:!0});var mIt=s(YK);iPr=r(mIt,"from_pretrained()"),mIt.forEach(t),dPr=r(xte," to load the model weights."),xte.forEach(t),cPr=i(pL),T(m5.$$.fragment,pL),pL.forEach(t),fPr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Gx.$$.fragment,Jl),mPr=i(Jl),GEe=n(Jl,"P",{});var gIt=s(GEe);gPr=r(gIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gIt.forEach(t),hPr=i(Jl),un=n(Jl,"P",{});var _L=s(un);pPr=r(_L,"The model class to instantiate is selected based on the "),OEe=n(_L,"CODE",{});var hIt=s(OEe);_Pr=r(hIt,"model_type"),hIt.forEach(t),uPr=r(_L,` property of the config object (either
passed as an argument or loaded from `),VEe=n(_L,"CODE",{});var pIt=s(VEe);bPr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),vPr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(_L,"CODE",{});var _It=s(XEe);FPr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),TPr=r(_L,":"),_L.forEach(t),MPr=i(Jl),ce=n(Jl,"UL",{});var ge=s(ce);g5=n(ge,"LI",{});var XDe=s(g5);zEe=n(XDe,"STRONG",{});var uIt=s(zEe);EPr=r(uIt,"albert"),uIt.forEach(t),CPr=r(XDe," \u2014 "),KK=n(XDe,"A",{href:!0});var bIt=s(KK);wPr=r(bIt,"TFAlbertForQuestionAnswering"),bIt.forEach(t),APr=r(XDe," (ALBERT model)"),XDe.forEach(t),LPr=i(ge),h5=n(ge,"LI",{});var zDe=s(h5);QEe=n(zDe,"STRONG",{});var vIt=s(QEe);yPr=r(vIt,"bert"),vIt.forEach(t),xPr=r(zDe," \u2014 "),ZK=n(zDe,"A",{href:!0});var FIt=s(ZK);$Pr=r(FIt,"TFBertForQuestionAnswering"),FIt.forEach(t),kPr=r(zDe," (BERT model)"),zDe.forEach(t),SPr=i(ge),p5=n(ge,"LI",{});var QDe=s(p5);WEe=n(QDe,"STRONG",{});var TIt=s(WEe);RPr=r(TIt,"camembert"),TIt.forEach(t),PPr=r(QDe," \u2014 "),eZ=n(QDe,"A",{href:!0});var MIt=s(eZ);BPr=r(MIt,"TFCamembertForQuestionAnswering"),MIt.forEach(t),IPr=r(QDe," (CamemBERT model)"),QDe.forEach(t),NPr=i(ge),_5=n(ge,"LI",{});var WDe=s(_5);HEe=n(WDe,"STRONG",{});var EIt=s(HEe);qPr=r(EIt,"convbert"),EIt.forEach(t),jPr=r(WDe," \u2014 "),oZ=n(WDe,"A",{href:!0});var CIt=s(oZ);DPr=r(CIt,"TFConvBertForQuestionAnswering"),CIt.forEach(t),GPr=r(WDe," (ConvBERT model)"),WDe.forEach(t),OPr=i(ge),u5=n(ge,"LI",{});var HDe=s(u5);UEe=n(HDe,"STRONG",{});var wIt=s(UEe);VPr=r(wIt,"deberta"),wIt.forEach(t),XPr=r(HDe," \u2014 "),rZ=n(HDe,"A",{href:!0});var AIt=s(rZ);zPr=r(AIt,"TFDebertaForQuestionAnswering"),AIt.forEach(t),QPr=r(HDe," (DeBERTa model)"),HDe.forEach(t),WPr=i(ge),b5=n(ge,"LI",{});var UDe=s(b5);JEe=n(UDe,"STRONG",{});var LIt=s(JEe);HPr=r(LIt,"deberta-v2"),LIt.forEach(t),UPr=r(UDe," \u2014 "),tZ=n(UDe,"A",{href:!0});var yIt=s(tZ);JPr=r(yIt,"TFDebertaV2ForQuestionAnswering"),yIt.forEach(t),YPr=r(UDe," (DeBERTa-v2 model)"),UDe.forEach(t),KPr=i(ge),v5=n(ge,"LI",{});var JDe=s(v5);YEe=n(JDe,"STRONG",{});var xIt=s(YEe);ZPr=r(xIt,"distilbert"),xIt.forEach(t),eBr=r(JDe," \u2014 "),aZ=n(JDe,"A",{href:!0});var $It=s(aZ);oBr=r($It,"TFDistilBertForQuestionAnswering"),$It.forEach(t),rBr=r(JDe," (DistilBERT model)"),JDe.forEach(t),tBr=i(ge),F5=n(ge,"LI",{});var YDe=s(F5);KEe=n(YDe,"STRONG",{});var kIt=s(KEe);aBr=r(kIt,"electra"),kIt.forEach(t),nBr=r(YDe," \u2014 "),nZ=n(YDe,"A",{href:!0});var SIt=s(nZ);sBr=r(SIt,"TFElectraForQuestionAnswering"),SIt.forEach(t),lBr=r(YDe," (ELECTRA model)"),YDe.forEach(t),iBr=i(ge),T5=n(ge,"LI",{});var KDe=s(T5);ZEe=n(KDe,"STRONG",{});var RIt=s(ZEe);dBr=r(RIt,"flaubert"),RIt.forEach(t),cBr=r(KDe," \u2014 "),sZ=n(KDe,"A",{href:!0});var PIt=s(sZ);fBr=r(PIt,"TFFlaubertForQuestionAnsweringSimple"),PIt.forEach(t),mBr=r(KDe," (FlauBERT model)"),KDe.forEach(t),gBr=i(ge),M5=n(ge,"LI",{});var ZDe=s(M5);eCe=n(ZDe,"STRONG",{});var BIt=s(eCe);hBr=r(BIt,"funnel"),BIt.forEach(t),pBr=r(ZDe," \u2014 "),lZ=n(ZDe,"A",{href:!0});var IIt=s(lZ);_Br=r(IIt,"TFFunnelForQuestionAnswering"),IIt.forEach(t),uBr=r(ZDe," (Funnel Transformer model)"),ZDe.forEach(t),bBr=i(ge),E5=n(ge,"LI",{});var eGe=s(E5);oCe=n(eGe,"STRONG",{});var NIt=s(oCe);vBr=r(NIt,"gptj"),NIt.forEach(t),FBr=r(eGe," \u2014 "),iZ=n(eGe,"A",{href:!0});var qIt=s(iZ);TBr=r(qIt,"TFGPTJForQuestionAnswering"),qIt.forEach(t),MBr=r(eGe," (GPT-J model)"),eGe.forEach(t),EBr=i(ge),C5=n(ge,"LI",{});var oGe=s(C5);rCe=n(oGe,"STRONG",{});var jIt=s(rCe);CBr=r(jIt,"longformer"),jIt.forEach(t),wBr=r(oGe," \u2014 "),dZ=n(oGe,"A",{href:!0});var DIt=s(dZ);ABr=r(DIt,"TFLongformerForQuestionAnswering"),DIt.forEach(t),LBr=r(oGe," (Longformer model)"),oGe.forEach(t),yBr=i(ge),w5=n(ge,"LI",{});var rGe=s(w5);tCe=n(rGe,"STRONG",{});var GIt=s(tCe);xBr=r(GIt,"mobilebert"),GIt.forEach(t),$Br=r(rGe," \u2014 "),cZ=n(rGe,"A",{href:!0});var OIt=s(cZ);kBr=r(OIt,"TFMobileBertForQuestionAnswering"),OIt.forEach(t),SBr=r(rGe," (MobileBERT model)"),rGe.forEach(t),RBr=i(ge),A5=n(ge,"LI",{});var tGe=s(A5);aCe=n(tGe,"STRONG",{});var VIt=s(aCe);PBr=r(VIt,"mpnet"),VIt.forEach(t),BBr=r(tGe," \u2014 "),fZ=n(tGe,"A",{href:!0});var XIt=s(fZ);IBr=r(XIt,"TFMPNetForQuestionAnswering"),XIt.forEach(t),NBr=r(tGe," (MPNet model)"),tGe.forEach(t),qBr=i(ge),L5=n(ge,"LI",{});var aGe=s(L5);nCe=n(aGe,"STRONG",{});var zIt=s(nCe);jBr=r(zIt,"rembert"),zIt.forEach(t),DBr=r(aGe," \u2014 "),mZ=n(aGe,"A",{href:!0});var QIt=s(mZ);GBr=r(QIt,"TFRemBertForQuestionAnswering"),QIt.forEach(t),OBr=r(aGe," (RemBERT model)"),aGe.forEach(t),VBr=i(ge),y5=n(ge,"LI",{});var nGe=s(y5);sCe=n(nGe,"STRONG",{});var WIt=s(sCe);XBr=r(WIt,"roberta"),WIt.forEach(t),zBr=r(nGe," \u2014 "),gZ=n(nGe,"A",{href:!0});var HIt=s(gZ);QBr=r(HIt,"TFRobertaForQuestionAnswering"),HIt.forEach(t),WBr=r(nGe," (RoBERTa model)"),nGe.forEach(t),HBr=i(ge),x5=n(ge,"LI",{});var sGe=s(x5);lCe=n(sGe,"STRONG",{});var UIt=s(lCe);UBr=r(UIt,"roformer"),UIt.forEach(t),JBr=r(sGe," \u2014 "),hZ=n(sGe,"A",{href:!0});var JIt=s(hZ);YBr=r(JIt,"TFRoFormerForQuestionAnswering"),JIt.forEach(t),KBr=r(sGe," (RoFormer model)"),sGe.forEach(t),ZBr=i(ge),$5=n(ge,"LI",{});var lGe=s($5);iCe=n(lGe,"STRONG",{});var YIt=s(iCe);eIr=r(YIt,"xlm"),YIt.forEach(t),oIr=r(lGe," \u2014 "),pZ=n(lGe,"A",{href:!0});var KIt=s(pZ);rIr=r(KIt,"TFXLMForQuestionAnsweringSimple"),KIt.forEach(t),tIr=r(lGe," (XLM model)"),lGe.forEach(t),aIr=i(ge),k5=n(ge,"LI",{});var iGe=s(k5);dCe=n(iGe,"STRONG",{});var ZIt=s(dCe);nIr=r(ZIt,"xlm-roberta"),ZIt.forEach(t),sIr=r(iGe," \u2014 "),_Z=n(iGe,"A",{href:!0});var eNt=s(_Z);lIr=r(eNt,"TFXLMRobertaForQuestionAnswering"),eNt.forEach(t),iIr=r(iGe," (XLM-RoBERTa model)"),iGe.forEach(t),dIr=i(ge),S5=n(ge,"LI",{});var dGe=s(S5);cCe=n(dGe,"STRONG",{});var oNt=s(cCe);cIr=r(oNt,"xlnet"),oNt.forEach(t),fIr=r(dGe," \u2014 "),uZ=n(dGe,"A",{href:!0});var rNt=s(uZ);mIr=r(rNt,"TFXLNetForQuestionAnsweringSimple"),rNt.forEach(t),gIr=r(dGe," (XLNet model)"),dGe.forEach(t),ge.forEach(t),hIr=i(Jl),T(R5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),zXe=i(f),Dc=n(f,"H2",{class:!0});var eWe=s(Dc);P5=n(eWe,"A",{id:!0,class:!0,href:!0});var tNt=s(P5);fCe=n(tNt,"SPAN",{});var aNt=s(fCe);T(Ox.$$.fragment,aNt),aNt.forEach(t),tNt.forEach(t),pIr=i(eWe),mCe=n(eWe,"SPAN",{});var nNt=s(mCe);_Ir=r(nNt,"TFAutoModelForVision2Seq"),nNt.forEach(t),eWe.forEach(t),QXe=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Vx.$$.fragment,Yl),uIr=i(Yl),Gc=n(Yl,"P",{});var $te=s(Gc);bIr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=n($te,"A",{href:!0});var sNt=s(bZ);vIr=r(sNt,"from_pretrained()"),sNt.forEach(t),FIr=r($te," class method or the "),vZ=n($te,"A",{href:!0});var lNt=s(vZ);TIr=r(lNt,"from_config()"),lNt.forEach(t),MIr=r($te,` class
method.`),$te.forEach(t),EIr=i(Yl),Xx=n(Yl,"P",{});var oWe=s(Xx);CIr=r(oWe,"This class cannot be instantiated directly using "),gCe=n(oWe,"CODE",{});var iNt=s(gCe);wIr=r(iNt,"__init__()"),iNt.forEach(t),AIr=r(oWe," (throws an error)."),oWe.forEach(t),LIr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var uL=s(Vt);T(zx.$$.fragment,uL),yIr=i(uL),hCe=n(uL,"P",{});var dNt=s(hCe);xIr=r(dNt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dNt.forEach(t),$Ir=i(uL),Oc=n(uL,"P",{});var kte=s(Oc);kIr=r(kte,`Note:
Loading a model from its configuration file does `),pCe=n(kte,"STRONG",{});var cNt=s(pCe);SIr=r(cNt,"not"),cNt.forEach(t),RIr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=n(kte,"A",{href:!0});var fNt=s(FZ);PIr=r(fNt,"from_pretrained()"),fNt.forEach(t),BIr=r(kte," to load the model weights."),kte.forEach(t),IIr=i(uL),T(B5.$$.fragment,uL),uL.forEach(t),NIr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(Qx.$$.fragment,Kl),qIr=i(Kl),_Ce=n(Kl,"P",{});var mNt=s(_Ce);jIr=r(mNt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mNt.forEach(t),DIr=i(Kl),bn=n(Kl,"P",{});var bL=s(bn);GIr=r(bL,"The model class to instantiate is selected based on the "),uCe=n(bL,"CODE",{});var gNt=s(uCe);OIr=r(gNt,"model_type"),gNt.forEach(t),VIr=r(bL,` property of the config object (either
passed as an argument or loaded from `),bCe=n(bL,"CODE",{});var hNt=s(bCe);XIr=r(hNt,"pretrained_model_name_or_path"),hNt.forEach(t),zIr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=n(bL,"CODE",{});var pNt=s(vCe);QIr=r(pNt,"pretrained_model_name_or_path"),pNt.forEach(t),WIr=r(bL,":"),bL.forEach(t),HIr=i(Kl),FCe=n(Kl,"UL",{});var _Nt=s(FCe);I5=n(_Nt,"LI",{});var cGe=s(I5);TCe=n(cGe,"STRONG",{});var uNt=s(TCe);UIr=r(uNt,"vision-encoder-decoder"),uNt.forEach(t),JIr=r(cGe," \u2014 "),TZ=n(cGe,"A",{href:!0});var bNt=s(TZ);YIr=r(bNt,"TFVisionEncoderDecoderModel"),bNt.forEach(t),KIr=r(cGe," (Vision Encoder decoder model)"),cGe.forEach(t),_Nt.forEach(t),ZIr=i(Kl),T(N5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),WXe=i(f),Vc=n(f,"H2",{class:!0});var rWe=s(Vc);q5=n(rWe,"A",{id:!0,class:!0,href:!0});var vNt=s(q5);MCe=n(vNt,"SPAN",{});var FNt=s(MCe);T(Wx.$$.fragment,FNt),FNt.forEach(t),vNt.forEach(t),eNr=i(rWe),ECe=n(rWe,"SPAN",{});var TNt=s(ECe);oNr=r(TNt,"TFAutoModelForSpeechSeq2Seq"),TNt.forEach(t),rWe.forEach(t),HXe=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(Hx.$$.fragment,Zl),rNr=i(Zl),Xc=n(Zl,"P",{});var Ste=s(Xc);tNr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MZ=n(Ste,"A",{href:!0});var MNt=s(MZ);aNr=r(MNt,"from_pretrained()"),MNt.forEach(t),nNr=r(Ste," class method or the "),EZ=n(Ste,"A",{href:!0});var ENt=s(EZ);sNr=r(ENt,"from_config()"),ENt.forEach(t),lNr=r(Ste,` class
method.`),Ste.forEach(t),iNr=i(Zl),Ux=n(Zl,"P",{});var tWe=s(Ux);dNr=r(tWe,"This class cannot be instantiated directly using "),CCe=n(tWe,"CODE",{});var CNt=s(CCe);cNr=r(CNt,"__init__()"),CNt.forEach(t),fNr=r(tWe," (throws an error)."),tWe.forEach(t),mNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var vL=s(Xt);T(Jx.$$.fragment,vL),gNr=i(vL),wCe=n(vL,"P",{});var wNt=s(wCe);hNr=r(wNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wNt.forEach(t),pNr=i(vL),zc=n(vL,"P",{});var Rte=s(zc);_Nr=r(Rte,`Note:
Loading a model from its configuration file does `),ACe=n(Rte,"STRONG",{});var ANt=s(ACe);uNr=r(ANt,"not"),ANt.forEach(t),bNr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=n(Rte,"A",{href:!0});var LNt=s(CZ);vNr=r(LNt,"from_pretrained()"),LNt.forEach(t),FNr=r(Rte," to load the model weights."),Rte.forEach(t),TNr=i(vL),T(j5.$$.fragment,vL),vL.forEach(t),MNr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(Yx.$$.fragment,ei),ENr=i(ei),LCe=n(ei,"P",{});var yNt=s(LCe);CNr=r(yNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yNt.forEach(t),wNr=i(ei),vn=n(ei,"P",{});var FL=s(vn);ANr=r(FL,"The model class to instantiate is selected based on the "),yCe=n(FL,"CODE",{});var xNt=s(yCe);LNr=r(xNt,"model_type"),xNt.forEach(t),yNr=r(FL,` property of the config object (either
passed as an argument or loaded from `),xCe=n(FL,"CODE",{});var $Nt=s(xCe);xNr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),$Nr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=n(FL,"CODE",{});var kNt=s($Ce);kNr=r(kNt,"pretrained_model_name_or_path"),kNt.forEach(t),SNr=r(FL,":"),FL.forEach(t),RNr=i(ei),kCe=n(ei,"UL",{});var SNt=s(kCe);D5=n(SNt,"LI",{});var fGe=s(D5);SCe=n(fGe,"STRONG",{});var RNt=s(SCe);PNr=r(RNt,"speech_to_text"),RNt.forEach(t),BNr=r(fGe," \u2014 "),wZ=n(fGe,"A",{href:!0});var PNt=s(wZ);INr=r(PNt,"TFSpeech2TextForConditionalGeneration"),PNt.forEach(t),NNr=r(fGe," (Speech2Text model)"),fGe.forEach(t),SNt.forEach(t),qNr=i(ei),T(G5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),UXe=i(f),Qc=n(f,"H2",{class:!0});var aWe=s(Qc);O5=n(aWe,"A",{id:!0,class:!0,href:!0});var BNt=s(O5);RCe=n(BNt,"SPAN",{});var INt=s(RCe);T(Kx.$$.fragment,INt),INt.forEach(t),BNt.forEach(t),jNr=i(aWe),PCe=n(aWe,"SPAN",{});var NNt=s(PCe);DNr=r(NNt,"FlaxAutoModel"),NNt.forEach(t),aWe.forEach(t),JXe=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(Zx.$$.fragment,oi),GNr=i(oi),Wc=n(oi,"P",{});var Pte=s(Wc);ONr=r(Pte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AZ=n(Pte,"A",{href:!0});var qNt=s(AZ);VNr=r(qNt,"from_pretrained()"),qNt.forEach(t),XNr=r(Pte," class method or the "),LZ=n(Pte,"A",{href:!0});var jNt=s(LZ);zNr=r(jNt,"from_config()"),jNt.forEach(t),QNr=r(Pte,` class
method.`),Pte.forEach(t),WNr=i(oi),e$=n(oi,"P",{});var nWe=s(e$);HNr=r(nWe,"This class cannot be instantiated directly using "),BCe=n(nWe,"CODE",{});var DNt=s(BCe);UNr=r(DNt,"__init__()"),DNt.forEach(t),JNr=r(nWe," (throws an error)."),nWe.forEach(t),YNr=i(oi),zt=n(oi,"DIV",{class:!0});var TL=s(zt);T(o$.$$.fragment,TL),KNr=i(TL),ICe=n(TL,"P",{});var GNt=s(ICe);ZNr=r(GNt,"Instantiates one of the base model classes of the library from a configuration."),GNt.forEach(t),eqr=i(TL),Hc=n(TL,"P",{});var Bte=s(Hc);oqr=r(Bte,`Note:
Loading a model from its configuration file does `),NCe=n(Bte,"STRONG",{});var ONt=s(NCe);rqr=r(ONt,"not"),ONt.forEach(t),tqr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(Bte,"A",{href:!0});var VNt=s(yZ);aqr=r(VNt,"from_pretrained()"),VNt.forEach(t),nqr=r(Bte," to load the model weights."),Bte.forEach(t),sqr=i(TL),T(V5.$$.fragment,TL),TL.forEach(t),lqr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(r$.$$.fragment,ri),iqr=i(ri),qCe=n(ri,"P",{});var XNt=s(qCe);dqr=r(XNt,"Instantiate one of the base model classes of the library from a pretrained model."),XNt.forEach(t),cqr=i(ri),Fn=n(ri,"P",{});var ML=s(Fn);fqr=r(ML,"The model class to instantiate is selected based on the "),jCe=n(ML,"CODE",{});var zNt=s(jCe);mqr=r(zNt,"model_type"),zNt.forEach(t),gqr=r(ML,` property of the config object (either
passed as an argument or loaded from `),DCe=n(ML,"CODE",{});var QNt=s(DCe);hqr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),pqr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=n(ML,"CODE",{});var WNt=s(GCe);_qr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),uqr=r(ML,":"),ML.forEach(t),bqr=i(ri),oe=n(ri,"UL",{});var ae=s(oe);X5=n(ae,"LI",{});var mGe=s(X5);OCe=n(mGe,"STRONG",{});var HNt=s(OCe);vqr=r(HNt,"albert"),HNt.forEach(t),Fqr=r(mGe," \u2014 "),xZ=n(mGe,"A",{href:!0});var UNt=s(xZ);Tqr=r(UNt,"FlaxAlbertModel"),UNt.forEach(t),Mqr=r(mGe," (ALBERT model)"),mGe.forEach(t),Eqr=i(ae),z5=n(ae,"LI",{});var gGe=s(z5);VCe=n(gGe,"STRONG",{});var JNt=s(VCe);Cqr=r(JNt,"bart"),JNt.forEach(t),wqr=r(gGe," \u2014 "),$Z=n(gGe,"A",{href:!0});var YNt=s($Z);Aqr=r(YNt,"FlaxBartModel"),YNt.forEach(t),Lqr=r(gGe," (BART model)"),gGe.forEach(t),yqr=i(ae),Q5=n(ae,"LI",{});var hGe=s(Q5);XCe=n(hGe,"STRONG",{});var KNt=s(XCe);xqr=r(KNt,"beit"),KNt.forEach(t),$qr=r(hGe," \u2014 "),kZ=n(hGe,"A",{href:!0});var ZNt=s(kZ);kqr=r(ZNt,"FlaxBeitModel"),ZNt.forEach(t),Sqr=r(hGe," (BEiT model)"),hGe.forEach(t),Rqr=i(ae),W5=n(ae,"LI",{});var pGe=s(W5);zCe=n(pGe,"STRONG",{});var eqt=s(zCe);Pqr=r(eqt,"bert"),eqt.forEach(t),Bqr=r(pGe," \u2014 "),SZ=n(pGe,"A",{href:!0});var oqt=s(SZ);Iqr=r(oqt,"FlaxBertModel"),oqt.forEach(t),Nqr=r(pGe," (BERT model)"),pGe.forEach(t),qqr=i(ae),H5=n(ae,"LI",{});var _Ge=s(H5);QCe=n(_Ge,"STRONG",{});var rqt=s(QCe);jqr=r(rqt,"big_bird"),rqt.forEach(t),Dqr=r(_Ge," \u2014 "),RZ=n(_Ge,"A",{href:!0});var tqt=s(RZ);Gqr=r(tqt,"FlaxBigBirdModel"),tqt.forEach(t),Oqr=r(_Ge," (BigBird model)"),_Ge.forEach(t),Vqr=i(ae),U5=n(ae,"LI",{});var uGe=s(U5);WCe=n(uGe,"STRONG",{});var aqt=s(WCe);Xqr=r(aqt,"blenderbot"),aqt.forEach(t),zqr=r(uGe," \u2014 "),PZ=n(uGe,"A",{href:!0});var nqt=s(PZ);Qqr=r(nqt,"FlaxBlenderbotModel"),nqt.forEach(t),Wqr=r(uGe," (Blenderbot model)"),uGe.forEach(t),Hqr=i(ae),J5=n(ae,"LI",{});var bGe=s(J5);HCe=n(bGe,"STRONG",{});var sqt=s(HCe);Uqr=r(sqt,"blenderbot-small"),sqt.forEach(t),Jqr=r(bGe," \u2014 "),BZ=n(bGe,"A",{href:!0});var lqt=s(BZ);Yqr=r(lqt,"FlaxBlenderbotSmallModel"),lqt.forEach(t),Kqr=r(bGe," (BlenderbotSmall model)"),bGe.forEach(t),Zqr=i(ae),Y5=n(ae,"LI",{});var vGe=s(Y5);UCe=n(vGe,"STRONG",{});var iqt=s(UCe);ejr=r(iqt,"clip"),iqt.forEach(t),ojr=r(vGe," \u2014 "),IZ=n(vGe,"A",{href:!0});var dqt=s(IZ);rjr=r(dqt,"FlaxCLIPModel"),dqt.forEach(t),tjr=r(vGe," (CLIP model)"),vGe.forEach(t),ajr=i(ae),K5=n(ae,"LI",{});var FGe=s(K5);JCe=n(FGe,"STRONG",{});var cqt=s(JCe);njr=r(cqt,"distilbert"),cqt.forEach(t),sjr=r(FGe," \u2014 "),NZ=n(FGe,"A",{href:!0});var fqt=s(NZ);ljr=r(fqt,"FlaxDistilBertModel"),fqt.forEach(t),ijr=r(FGe," (DistilBERT model)"),FGe.forEach(t),djr=i(ae),Z5=n(ae,"LI",{});var TGe=s(Z5);YCe=n(TGe,"STRONG",{});var mqt=s(YCe);cjr=r(mqt,"electra"),mqt.forEach(t),fjr=r(TGe," \u2014 "),qZ=n(TGe,"A",{href:!0});var gqt=s(qZ);mjr=r(gqt,"FlaxElectraModel"),gqt.forEach(t),gjr=r(TGe," (ELECTRA model)"),TGe.forEach(t),hjr=i(ae),e0=n(ae,"LI",{});var MGe=s(e0);KCe=n(MGe,"STRONG",{});var hqt=s(KCe);pjr=r(hqt,"gpt2"),hqt.forEach(t),_jr=r(MGe," \u2014 "),jZ=n(MGe,"A",{href:!0});var pqt=s(jZ);ujr=r(pqt,"FlaxGPT2Model"),pqt.forEach(t),bjr=r(MGe," (OpenAI GPT-2 model)"),MGe.forEach(t),vjr=i(ae),o0=n(ae,"LI",{});var EGe=s(o0);ZCe=n(EGe,"STRONG",{});var _qt=s(ZCe);Fjr=r(_qt,"gpt_neo"),_qt.forEach(t),Tjr=r(EGe," \u2014 "),DZ=n(EGe,"A",{href:!0});var uqt=s(DZ);Mjr=r(uqt,"FlaxGPTNeoModel"),uqt.forEach(t),Ejr=r(EGe," (GPT Neo model)"),EGe.forEach(t),Cjr=i(ae),r0=n(ae,"LI",{});var CGe=s(r0);e5e=n(CGe,"STRONG",{});var bqt=s(e5e);wjr=r(bqt,"gptj"),bqt.forEach(t),Ajr=r(CGe," \u2014 "),GZ=n(CGe,"A",{href:!0});var vqt=s(GZ);Ljr=r(vqt,"FlaxGPTJModel"),vqt.forEach(t),yjr=r(CGe," (GPT-J model)"),CGe.forEach(t),xjr=i(ae),t0=n(ae,"LI",{});var wGe=s(t0);o5e=n(wGe,"STRONG",{});var Fqt=s(o5e);$jr=r(Fqt,"longt5"),Fqt.forEach(t),kjr=r(wGe," \u2014 "),OZ=n(wGe,"A",{href:!0});var Tqt=s(OZ);Sjr=r(Tqt,"FlaxLongT5Model"),Tqt.forEach(t),Rjr=r(wGe," (LongT5 model)"),wGe.forEach(t),Pjr=i(ae),a0=n(ae,"LI",{});var AGe=s(a0);r5e=n(AGe,"STRONG",{});var Mqt=s(r5e);Bjr=r(Mqt,"marian"),Mqt.forEach(t),Ijr=r(AGe," \u2014 "),VZ=n(AGe,"A",{href:!0});var Eqt=s(VZ);Njr=r(Eqt,"FlaxMarianModel"),Eqt.forEach(t),qjr=r(AGe," (Marian model)"),AGe.forEach(t),jjr=i(ae),n0=n(ae,"LI",{});var LGe=s(n0);t5e=n(LGe,"STRONG",{});var Cqt=s(t5e);Djr=r(Cqt,"mbart"),Cqt.forEach(t),Gjr=r(LGe," \u2014 "),XZ=n(LGe,"A",{href:!0});var wqt=s(XZ);Ojr=r(wqt,"FlaxMBartModel"),wqt.forEach(t),Vjr=r(LGe," (mBART model)"),LGe.forEach(t),Xjr=i(ae),s0=n(ae,"LI",{});var yGe=s(s0);a5e=n(yGe,"STRONG",{});var Aqt=s(a5e);zjr=r(Aqt,"mt5"),Aqt.forEach(t),Qjr=r(yGe," \u2014 "),zZ=n(yGe,"A",{href:!0});var Lqt=s(zZ);Wjr=r(Lqt,"FlaxMT5Model"),Lqt.forEach(t),Hjr=r(yGe," (MT5 model)"),yGe.forEach(t),Ujr=i(ae),l0=n(ae,"LI",{});var xGe=s(l0);n5e=n(xGe,"STRONG",{});var yqt=s(n5e);Jjr=r(yqt,"opt"),yqt.forEach(t),Yjr=r(xGe," \u2014 "),QZ=n(xGe,"A",{href:!0});var xqt=s(QZ);Kjr=r(xqt,"FlaxOPTModel"),xqt.forEach(t),Zjr=r(xGe," (OPT model)"),xGe.forEach(t),eDr=i(ae),i0=n(ae,"LI",{});var $Ge=s(i0);s5e=n($Ge,"STRONG",{});var $qt=s(s5e);oDr=r($qt,"pegasus"),$qt.forEach(t),rDr=r($Ge," \u2014 "),WZ=n($Ge,"A",{href:!0});var kqt=s(WZ);tDr=r(kqt,"FlaxPegasusModel"),kqt.forEach(t),aDr=r($Ge," (Pegasus model)"),$Ge.forEach(t),nDr=i(ae),d0=n(ae,"LI",{});var kGe=s(d0);l5e=n(kGe,"STRONG",{});var Sqt=s(l5e);sDr=r(Sqt,"roberta"),Sqt.forEach(t),lDr=r(kGe," \u2014 "),HZ=n(kGe,"A",{href:!0});var Rqt=s(HZ);iDr=r(Rqt,"FlaxRobertaModel"),Rqt.forEach(t),dDr=r(kGe," (RoBERTa model)"),kGe.forEach(t),cDr=i(ae),c0=n(ae,"LI",{});var SGe=s(c0);i5e=n(SGe,"STRONG",{});var Pqt=s(i5e);fDr=r(Pqt,"roformer"),Pqt.forEach(t),mDr=r(SGe," \u2014 "),UZ=n(SGe,"A",{href:!0});var Bqt=s(UZ);gDr=r(Bqt,"FlaxRoFormerModel"),Bqt.forEach(t),hDr=r(SGe," (RoFormer model)"),SGe.forEach(t),pDr=i(ae),f0=n(ae,"LI",{});var RGe=s(f0);d5e=n(RGe,"STRONG",{});var Iqt=s(d5e);_Dr=r(Iqt,"t5"),Iqt.forEach(t),uDr=r(RGe," \u2014 "),JZ=n(RGe,"A",{href:!0});var Nqt=s(JZ);bDr=r(Nqt,"FlaxT5Model"),Nqt.forEach(t),vDr=r(RGe," (T5 model)"),RGe.forEach(t),FDr=i(ae),m0=n(ae,"LI",{});var PGe=s(m0);c5e=n(PGe,"STRONG",{});var qqt=s(c5e);TDr=r(qqt,"vision-text-dual-encoder"),qqt.forEach(t),MDr=r(PGe," \u2014 "),YZ=n(PGe,"A",{href:!0});var jqt=s(YZ);EDr=r(jqt,"FlaxVisionTextDualEncoderModel"),jqt.forEach(t),CDr=r(PGe," (VisionTextDualEncoder model)"),PGe.forEach(t),wDr=i(ae),g0=n(ae,"LI",{});var BGe=s(g0);f5e=n(BGe,"STRONG",{});var Dqt=s(f5e);ADr=r(Dqt,"vit"),Dqt.forEach(t),LDr=r(BGe," \u2014 "),KZ=n(BGe,"A",{href:!0});var Gqt=s(KZ);yDr=r(Gqt,"FlaxViTModel"),Gqt.forEach(t),xDr=r(BGe," (ViT model)"),BGe.forEach(t),$Dr=i(ae),h0=n(ae,"LI",{});var IGe=s(h0);m5e=n(IGe,"STRONG",{});var Oqt=s(m5e);kDr=r(Oqt,"wav2vec2"),Oqt.forEach(t),SDr=r(IGe," \u2014 "),ZZ=n(IGe,"A",{href:!0});var Vqt=s(ZZ);RDr=r(Vqt,"FlaxWav2Vec2Model"),Vqt.forEach(t),PDr=r(IGe," (Wav2Vec2 model)"),IGe.forEach(t),BDr=i(ae),p0=n(ae,"LI",{});var NGe=s(p0);g5e=n(NGe,"STRONG",{});var Xqt=s(g5e);IDr=r(Xqt,"xglm"),Xqt.forEach(t),NDr=r(NGe," \u2014 "),eee=n(NGe,"A",{href:!0});var zqt=s(eee);qDr=r(zqt,"FlaxXGLMModel"),zqt.forEach(t),jDr=r(NGe," (XGLM model)"),NGe.forEach(t),DDr=i(ae),_0=n(ae,"LI",{});var qGe=s(_0);h5e=n(qGe,"STRONG",{});var Qqt=s(h5e);GDr=r(Qqt,"xlm-roberta"),Qqt.forEach(t),ODr=r(qGe," \u2014 "),oee=n(qGe,"A",{href:!0});var Wqt=s(oee);VDr=r(Wqt,"FlaxXLMRobertaModel"),Wqt.forEach(t),XDr=r(qGe," (XLM-RoBERTa model)"),qGe.forEach(t),ae.forEach(t),zDr=i(ri),T(u0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),YXe=i(f),Uc=n(f,"H2",{class:!0});var sWe=s(Uc);b0=n(sWe,"A",{id:!0,class:!0,href:!0});var Hqt=s(b0);p5e=n(Hqt,"SPAN",{});var Uqt=s(p5e);T(t$.$$.fragment,Uqt),Uqt.forEach(t),Hqt.forEach(t),QDr=i(sWe),_5e=n(sWe,"SPAN",{});var Jqt=s(_5e);WDr=r(Jqt,"FlaxAutoModelForCausalLM"),Jqt.forEach(t),sWe.forEach(t),KXe=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(a$.$$.fragment,ti),HDr=i(ti),Jc=n(ti,"P",{});var Ite=s(Jc);UDr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ree=n(Ite,"A",{href:!0});var Yqt=s(ree);JDr=r(Yqt,"from_pretrained()"),Yqt.forEach(t),YDr=r(Ite," class method or the "),tee=n(Ite,"A",{href:!0});var Kqt=s(tee);KDr=r(Kqt,"from_config()"),Kqt.forEach(t),ZDr=r(Ite,` class
method.`),Ite.forEach(t),eGr=i(ti),n$=n(ti,"P",{});var lWe=s(n$);oGr=r(lWe,"This class cannot be instantiated directly using "),u5e=n(lWe,"CODE",{});var Zqt=s(u5e);rGr=r(Zqt,"__init__()"),Zqt.forEach(t),tGr=r(lWe," (throws an error)."),lWe.forEach(t),aGr=i(ti),Qt=n(ti,"DIV",{class:!0});var EL=s(Qt);T(s$.$$.fragment,EL),nGr=i(EL),b5e=n(EL,"P",{});var ejt=s(b5e);sGr=r(ejt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ejt.forEach(t),lGr=i(EL),Yc=n(EL,"P",{});var Nte=s(Yc);iGr=r(Nte,`Note:
Loading a model from its configuration file does `),v5e=n(Nte,"STRONG",{});var ojt=s(v5e);dGr=r(ojt,"not"),ojt.forEach(t),cGr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(Nte,"A",{href:!0});var rjt=s(aee);fGr=r(rjt,"from_pretrained()"),rjt.forEach(t),mGr=r(Nte," to load the model weights."),Nte.forEach(t),gGr=i(EL),T(v0.$$.fragment,EL),EL.forEach(t),hGr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(l$.$$.fragment,ai),pGr=i(ai),F5e=n(ai,"P",{});var tjt=s(F5e);_Gr=r(tjt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tjt.forEach(t),uGr=i(ai),Tn=n(ai,"P",{});var CL=s(Tn);bGr=r(CL,"The model class to instantiate is selected based on the "),T5e=n(CL,"CODE",{});var ajt=s(T5e);vGr=r(ajt,"model_type"),ajt.forEach(t),FGr=r(CL,` property of the config object (either
passed as an argument or loaded from `),M5e=n(CL,"CODE",{});var njt=s(M5e);TGr=r(njt,"pretrained_model_name_or_path"),njt.forEach(t),MGr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(CL,"CODE",{});var sjt=s(E5e);EGr=r(sjt,"pretrained_model_name_or_path"),sjt.forEach(t),CGr=r(CL,":"),CL.forEach(t),wGr=i(ai),xe=n(ai,"UL",{});var Ne=s(xe);F0=n(Ne,"LI",{});var jGe=s(F0);C5e=n(jGe,"STRONG",{});var ljt=s(C5e);AGr=r(ljt,"bart"),ljt.forEach(t),LGr=r(jGe," \u2014 "),nee=n(jGe,"A",{href:!0});var ijt=s(nee);yGr=r(ijt,"FlaxBartForCausalLM"),ijt.forEach(t),xGr=r(jGe," (BART model)"),jGe.forEach(t),$Gr=i(Ne),T0=n(Ne,"LI",{});var DGe=s(T0);w5e=n(DGe,"STRONG",{});var djt=s(w5e);kGr=r(djt,"bert"),djt.forEach(t),SGr=r(DGe," \u2014 "),see=n(DGe,"A",{href:!0});var cjt=s(see);RGr=r(cjt,"FlaxBertForCausalLM"),cjt.forEach(t),PGr=r(DGe," (BERT model)"),DGe.forEach(t),BGr=i(Ne),M0=n(Ne,"LI",{});var GGe=s(M0);A5e=n(GGe,"STRONG",{});var fjt=s(A5e);IGr=r(fjt,"big_bird"),fjt.forEach(t),NGr=r(GGe," \u2014 "),lee=n(GGe,"A",{href:!0});var mjt=s(lee);qGr=r(mjt,"FlaxBigBirdForCausalLM"),mjt.forEach(t),jGr=r(GGe," (BigBird model)"),GGe.forEach(t),DGr=i(Ne),E0=n(Ne,"LI",{});var OGe=s(E0);L5e=n(OGe,"STRONG",{});var gjt=s(L5e);GGr=r(gjt,"electra"),gjt.forEach(t),OGr=r(OGe," \u2014 "),iee=n(OGe,"A",{href:!0});var hjt=s(iee);VGr=r(hjt,"FlaxElectraForCausalLM"),hjt.forEach(t),XGr=r(OGe," (ELECTRA model)"),OGe.forEach(t),zGr=i(Ne),C0=n(Ne,"LI",{});var VGe=s(C0);y5e=n(VGe,"STRONG",{});var pjt=s(y5e);QGr=r(pjt,"gpt2"),pjt.forEach(t),WGr=r(VGe," \u2014 "),dee=n(VGe,"A",{href:!0});var _jt=s(dee);HGr=r(_jt,"FlaxGPT2LMHeadModel"),_jt.forEach(t),UGr=r(VGe," (OpenAI GPT-2 model)"),VGe.forEach(t),JGr=i(Ne),w0=n(Ne,"LI",{});var XGe=s(w0);x5e=n(XGe,"STRONG",{});var ujt=s(x5e);YGr=r(ujt,"gpt_neo"),ujt.forEach(t),KGr=r(XGe," \u2014 "),cee=n(XGe,"A",{href:!0});var bjt=s(cee);ZGr=r(bjt,"FlaxGPTNeoForCausalLM"),bjt.forEach(t),eOr=r(XGe," (GPT Neo model)"),XGe.forEach(t),oOr=i(Ne),A0=n(Ne,"LI",{});var zGe=s(A0);$5e=n(zGe,"STRONG",{});var vjt=s($5e);rOr=r(vjt,"gptj"),vjt.forEach(t),tOr=r(zGe," \u2014 "),fee=n(zGe,"A",{href:!0});var Fjt=s(fee);aOr=r(Fjt,"FlaxGPTJForCausalLM"),Fjt.forEach(t),nOr=r(zGe," (GPT-J model)"),zGe.forEach(t),sOr=i(Ne),L0=n(Ne,"LI",{});var QGe=s(L0);k5e=n(QGe,"STRONG",{});var Tjt=s(k5e);lOr=r(Tjt,"opt"),Tjt.forEach(t),iOr=r(QGe," \u2014 "),mee=n(QGe,"A",{href:!0});var Mjt=s(mee);dOr=r(Mjt,"FlaxOPTForCausalLM"),Mjt.forEach(t),cOr=r(QGe," (OPT model)"),QGe.forEach(t),fOr=i(Ne),y0=n(Ne,"LI",{});var WGe=s(y0);S5e=n(WGe,"STRONG",{});var Ejt=s(S5e);mOr=r(Ejt,"roberta"),Ejt.forEach(t),gOr=r(WGe," \u2014 "),gee=n(WGe,"A",{href:!0});var Cjt=s(gee);hOr=r(Cjt,"FlaxRobertaForCausalLM"),Cjt.forEach(t),pOr=r(WGe," (RoBERTa model)"),WGe.forEach(t),_Or=i(Ne),x0=n(Ne,"LI",{});var HGe=s(x0);R5e=n(HGe,"STRONG",{});var wjt=s(R5e);uOr=r(wjt,"xglm"),wjt.forEach(t),bOr=r(HGe," \u2014 "),hee=n(HGe,"A",{href:!0});var Ajt=s(hee);vOr=r(Ajt,"FlaxXGLMForCausalLM"),Ajt.forEach(t),FOr=r(HGe," (XGLM model)"),HGe.forEach(t),Ne.forEach(t),TOr=i(ai),T($0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),ZXe=i(f),Kc=n(f,"H2",{class:!0});var iWe=s(Kc);k0=n(iWe,"A",{id:!0,class:!0,href:!0});var Ljt=s(k0);P5e=n(Ljt,"SPAN",{});var yjt=s(P5e);T(i$.$$.fragment,yjt),yjt.forEach(t),Ljt.forEach(t),MOr=i(iWe),B5e=n(iWe,"SPAN",{});var xjt=s(B5e);EOr=r(xjt,"FlaxAutoModelForPreTraining"),xjt.forEach(t),iWe.forEach(t),eze=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(d$.$$.fragment,ni),COr=i(ni),Zc=n(ni,"P",{});var qte=s(Zc);wOr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pee=n(qte,"A",{href:!0});var $jt=s(pee);AOr=r($jt,"from_pretrained()"),$jt.forEach(t),LOr=r(qte," class method or the "),_ee=n(qte,"A",{href:!0});var kjt=s(_ee);yOr=r(kjt,"from_config()"),kjt.forEach(t),xOr=r(qte,` class
method.`),qte.forEach(t),$Or=i(ni),c$=n(ni,"P",{});var dWe=s(c$);kOr=r(dWe,"This class cannot be instantiated directly using "),I5e=n(dWe,"CODE",{});var Sjt=s(I5e);SOr=r(Sjt,"__init__()"),Sjt.forEach(t),ROr=r(dWe," (throws an error)."),dWe.forEach(t),POr=i(ni),Wt=n(ni,"DIV",{class:!0});var wL=s(Wt);T(f$.$$.fragment,wL),BOr=i(wL),N5e=n(wL,"P",{});var Rjt=s(N5e);IOr=r(Rjt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rjt.forEach(t),NOr=i(wL),ef=n(wL,"P",{});var jte=s(ef);qOr=r(jte,`Note:
Loading a model from its configuration file does `),q5e=n(jte,"STRONG",{});var Pjt=s(q5e);jOr=r(Pjt,"not"),Pjt.forEach(t),DOr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(jte,"A",{href:!0});var Bjt=s(uee);GOr=r(Bjt,"from_pretrained()"),Bjt.forEach(t),OOr=r(jte," to load the model weights."),jte.forEach(t),VOr=i(wL),T(S0.$$.fragment,wL),wL.forEach(t),XOr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(m$.$$.fragment,si),zOr=i(si),j5e=n(si,"P",{});var Ijt=s(j5e);QOr=r(Ijt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ijt.forEach(t),WOr=i(si),Mn=n(si,"P",{});var AL=s(Mn);HOr=r(AL,"The model class to instantiate is selected based on the "),D5e=n(AL,"CODE",{});var Njt=s(D5e);UOr=r(Njt,"model_type"),Njt.forEach(t),JOr=r(AL,` property of the config object (either
passed as an argument or loaded from `),G5e=n(AL,"CODE",{});var qjt=s(G5e);YOr=r(qjt,"pretrained_model_name_or_path"),qjt.forEach(t),KOr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=n(AL,"CODE",{});var jjt=s(O5e);ZOr=r(jjt,"pretrained_model_name_or_path"),jjt.forEach(t),eVr=r(AL,":"),AL.forEach(t),oVr=i(si),Ee=n(si,"UL",{});var we=s(Ee);R0=n(we,"LI",{});var UGe=s(R0);V5e=n(UGe,"STRONG",{});var Djt=s(V5e);rVr=r(Djt,"albert"),Djt.forEach(t),tVr=r(UGe," \u2014 "),bee=n(UGe,"A",{href:!0});var Gjt=s(bee);aVr=r(Gjt,"FlaxAlbertForPreTraining"),Gjt.forEach(t),nVr=r(UGe," (ALBERT model)"),UGe.forEach(t),sVr=i(we),P0=n(we,"LI",{});var JGe=s(P0);X5e=n(JGe,"STRONG",{});var Ojt=s(X5e);lVr=r(Ojt,"bart"),Ojt.forEach(t),iVr=r(JGe," \u2014 "),vee=n(JGe,"A",{href:!0});var Vjt=s(vee);dVr=r(Vjt,"FlaxBartForConditionalGeneration"),Vjt.forEach(t),cVr=r(JGe," (BART model)"),JGe.forEach(t),fVr=i(we),B0=n(we,"LI",{});var YGe=s(B0);z5e=n(YGe,"STRONG",{});var Xjt=s(z5e);mVr=r(Xjt,"bert"),Xjt.forEach(t),gVr=r(YGe," \u2014 "),Fee=n(YGe,"A",{href:!0});var zjt=s(Fee);hVr=r(zjt,"FlaxBertForPreTraining"),zjt.forEach(t),pVr=r(YGe," (BERT model)"),YGe.forEach(t),_Vr=i(we),I0=n(we,"LI",{});var KGe=s(I0);Q5e=n(KGe,"STRONG",{});var Qjt=s(Q5e);uVr=r(Qjt,"big_bird"),Qjt.forEach(t),bVr=r(KGe," \u2014 "),Tee=n(KGe,"A",{href:!0});var Wjt=s(Tee);vVr=r(Wjt,"FlaxBigBirdForPreTraining"),Wjt.forEach(t),FVr=r(KGe," (BigBird model)"),KGe.forEach(t),TVr=i(we),N0=n(we,"LI",{});var ZGe=s(N0);W5e=n(ZGe,"STRONG",{});var Hjt=s(W5e);MVr=r(Hjt,"electra"),Hjt.forEach(t),EVr=r(ZGe," \u2014 "),Mee=n(ZGe,"A",{href:!0});var Ujt=s(Mee);CVr=r(Ujt,"FlaxElectraForPreTraining"),Ujt.forEach(t),wVr=r(ZGe," (ELECTRA model)"),ZGe.forEach(t),AVr=i(we),q0=n(we,"LI",{});var eOe=s(q0);H5e=n(eOe,"STRONG",{});var Jjt=s(H5e);LVr=r(Jjt,"longt5"),Jjt.forEach(t),yVr=r(eOe," \u2014 "),Eee=n(eOe,"A",{href:!0});var Yjt=s(Eee);xVr=r(Yjt,"FlaxLongT5ForConditionalGeneration"),Yjt.forEach(t),$Vr=r(eOe," (LongT5 model)"),eOe.forEach(t),kVr=i(we),j0=n(we,"LI",{});var oOe=s(j0);U5e=n(oOe,"STRONG",{});var Kjt=s(U5e);SVr=r(Kjt,"mbart"),Kjt.forEach(t),RVr=r(oOe," \u2014 "),Cee=n(oOe,"A",{href:!0});var Zjt=s(Cee);PVr=r(Zjt,"FlaxMBartForConditionalGeneration"),Zjt.forEach(t),BVr=r(oOe," (mBART model)"),oOe.forEach(t),IVr=i(we),D0=n(we,"LI",{});var rOe=s(D0);J5e=n(rOe,"STRONG",{});var eDt=s(J5e);NVr=r(eDt,"mt5"),eDt.forEach(t),qVr=r(rOe," \u2014 "),wee=n(rOe,"A",{href:!0});var oDt=s(wee);jVr=r(oDt,"FlaxMT5ForConditionalGeneration"),oDt.forEach(t),DVr=r(rOe," (MT5 model)"),rOe.forEach(t),GVr=i(we),G0=n(we,"LI",{});var tOe=s(G0);Y5e=n(tOe,"STRONG",{});var rDt=s(Y5e);OVr=r(rDt,"roberta"),rDt.forEach(t),VVr=r(tOe," \u2014 "),Aee=n(tOe,"A",{href:!0});var tDt=s(Aee);XVr=r(tDt,"FlaxRobertaForMaskedLM"),tDt.forEach(t),zVr=r(tOe," (RoBERTa model)"),tOe.forEach(t),QVr=i(we),O0=n(we,"LI",{});var aOe=s(O0);K5e=n(aOe,"STRONG",{});var aDt=s(K5e);WVr=r(aDt,"roformer"),aDt.forEach(t),HVr=r(aOe," \u2014 "),Lee=n(aOe,"A",{href:!0});var nDt=s(Lee);UVr=r(nDt,"FlaxRoFormerForMaskedLM"),nDt.forEach(t),JVr=r(aOe," (RoFormer model)"),aOe.forEach(t),YVr=i(we),V0=n(we,"LI",{});var nOe=s(V0);Z5e=n(nOe,"STRONG",{});var sDt=s(Z5e);KVr=r(sDt,"t5"),sDt.forEach(t),ZVr=r(nOe," \u2014 "),yee=n(nOe,"A",{href:!0});var lDt=s(yee);eXr=r(lDt,"FlaxT5ForConditionalGeneration"),lDt.forEach(t),oXr=r(nOe," (T5 model)"),nOe.forEach(t),rXr=i(we),X0=n(we,"LI",{});var sOe=s(X0);e0e=n(sOe,"STRONG",{});var iDt=s(e0e);tXr=r(iDt,"wav2vec2"),iDt.forEach(t),aXr=r(sOe," \u2014 "),xee=n(sOe,"A",{href:!0});var dDt=s(xee);nXr=r(dDt,"FlaxWav2Vec2ForPreTraining"),dDt.forEach(t),sXr=r(sOe," (Wav2Vec2 model)"),sOe.forEach(t),lXr=i(we),z0=n(we,"LI",{});var lOe=s(z0);o0e=n(lOe,"STRONG",{});var cDt=s(o0e);iXr=r(cDt,"xlm-roberta"),cDt.forEach(t),dXr=r(lOe," \u2014 "),$ee=n(lOe,"A",{href:!0});var fDt=s($ee);cXr=r(fDt,"FlaxXLMRobertaForMaskedLM"),fDt.forEach(t),fXr=r(lOe," (XLM-RoBERTa model)"),lOe.forEach(t),we.forEach(t),mXr=i(si),T(Q0.$$.fragment,si),si.forEach(t),ni.forEach(t),oze=i(f),of=n(f,"H2",{class:!0});var cWe=s(of);W0=n(cWe,"A",{id:!0,class:!0,href:!0});var mDt=s(W0);r0e=n(mDt,"SPAN",{});var gDt=s(r0e);T(g$.$$.fragment,gDt),gDt.forEach(t),mDt.forEach(t),gXr=i(cWe),t0e=n(cWe,"SPAN",{});var hDt=s(t0e);hXr=r(hDt,"FlaxAutoModelForMaskedLM"),hDt.forEach(t),cWe.forEach(t),rze=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(h$.$$.fragment,li),pXr=i(li),rf=n(li,"P",{});var Dte=s(rf);_Xr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kee=n(Dte,"A",{href:!0});var pDt=s(kee);uXr=r(pDt,"from_pretrained()"),pDt.forEach(t),bXr=r(Dte," class method or the "),See=n(Dte,"A",{href:!0});var _Dt=s(See);vXr=r(_Dt,"from_config()"),_Dt.forEach(t),FXr=r(Dte,` class
method.`),Dte.forEach(t),TXr=i(li),p$=n(li,"P",{});var fWe=s(p$);MXr=r(fWe,"This class cannot be instantiated directly using "),a0e=n(fWe,"CODE",{});var uDt=s(a0e);EXr=r(uDt,"__init__()"),uDt.forEach(t),CXr=r(fWe," (throws an error)."),fWe.forEach(t),wXr=i(li),Ht=n(li,"DIV",{class:!0});var LL=s(Ht);T(_$.$$.fragment,LL),AXr=i(LL),n0e=n(LL,"P",{});var bDt=s(n0e);LXr=r(bDt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bDt.forEach(t),yXr=i(LL),tf=n(LL,"P",{});var Gte=s(tf);xXr=r(Gte,`Note:
Loading a model from its configuration file does `),s0e=n(Gte,"STRONG",{});var vDt=s(s0e);$Xr=r(vDt,"not"),vDt.forEach(t),kXr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(Gte,"A",{href:!0});var FDt=s(Ree);SXr=r(FDt,"from_pretrained()"),FDt.forEach(t),RXr=r(Gte," to load the model weights."),Gte.forEach(t),PXr=i(LL),T(H0.$$.fragment,LL),LL.forEach(t),BXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(u$.$$.fragment,ii),IXr=i(ii),l0e=n(ii,"P",{});var TDt=s(l0e);NXr=r(TDt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TDt.forEach(t),qXr=i(ii),En=n(ii,"P",{});var yL=s(En);jXr=r(yL,"The model class to instantiate is selected based on the "),i0e=n(yL,"CODE",{});var MDt=s(i0e);DXr=r(MDt,"model_type"),MDt.forEach(t),GXr=r(yL,` property of the config object (either
passed as an argument or loaded from `),d0e=n(yL,"CODE",{});var EDt=s(d0e);OXr=r(EDt,"pretrained_model_name_or_path"),EDt.forEach(t),VXr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=n(yL,"CODE",{});var CDt=s(c0e);XXr=r(CDt,"pretrained_model_name_or_path"),CDt.forEach(t),zXr=r(yL,":"),yL.forEach(t),QXr=i(ii),$e=n(ii,"UL",{});var qe=s($e);U0=n(qe,"LI",{});var iOe=s(U0);f0e=n(iOe,"STRONG",{});var wDt=s(f0e);WXr=r(wDt,"albert"),wDt.forEach(t),HXr=r(iOe," \u2014 "),Pee=n(iOe,"A",{href:!0});var ADt=s(Pee);UXr=r(ADt,"FlaxAlbertForMaskedLM"),ADt.forEach(t),JXr=r(iOe," (ALBERT model)"),iOe.forEach(t),YXr=i(qe),J0=n(qe,"LI",{});var dOe=s(J0);m0e=n(dOe,"STRONG",{});var LDt=s(m0e);KXr=r(LDt,"bart"),LDt.forEach(t),ZXr=r(dOe," \u2014 "),Bee=n(dOe,"A",{href:!0});var yDt=s(Bee);ezr=r(yDt,"FlaxBartForConditionalGeneration"),yDt.forEach(t),ozr=r(dOe," (BART model)"),dOe.forEach(t),rzr=i(qe),Y0=n(qe,"LI",{});var cOe=s(Y0);g0e=n(cOe,"STRONG",{});var xDt=s(g0e);tzr=r(xDt,"bert"),xDt.forEach(t),azr=r(cOe," \u2014 "),Iee=n(cOe,"A",{href:!0});var $Dt=s(Iee);nzr=r($Dt,"FlaxBertForMaskedLM"),$Dt.forEach(t),szr=r(cOe," (BERT model)"),cOe.forEach(t),lzr=i(qe),K0=n(qe,"LI",{});var fOe=s(K0);h0e=n(fOe,"STRONG",{});var kDt=s(h0e);izr=r(kDt,"big_bird"),kDt.forEach(t),dzr=r(fOe," \u2014 "),Nee=n(fOe,"A",{href:!0});var SDt=s(Nee);czr=r(SDt,"FlaxBigBirdForMaskedLM"),SDt.forEach(t),fzr=r(fOe," (BigBird model)"),fOe.forEach(t),mzr=i(qe),Z0=n(qe,"LI",{});var mOe=s(Z0);p0e=n(mOe,"STRONG",{});var RDt=s(p0e);gzr=r(RDt,"distilbert"),RDt.forEach(t),hzr=r(mOe," \u2014 "),qee=n(mOe,"A",{href:!0});var PDt=s(qee);pzr=r(PDt,"FlaxDistilBertForMaskedLM"),PDt.forEach(t),_zr=r(mOe," (DistilBERT model)"),mOe.forEach(t),uzr=i(qe),ew=n(qe,"LI",{});var gOe=s(ew);_0e=n(gOe,"STRONG",{});var BDt=s(_0e);bzr=r(BDt,"electra"),BDt.forEach(t),vzr=r(gOe," \u2014 "),jee=n(gOe,"A",{href:!0});var IDt=s(jee);Fzr=r(IDt,"FlaxElectraForMaskedLM"),IDt.forEach(t),Tzr=r(gOe," (ELECTRA model)"),gOe.forEach(t),Mzr=i(qe),ow=n(qe,"LI",{});var hOe=s(ow);u0e=n(hOe,"STRONG",{});var NDt=s(u0e);Ezr=r(NDt,"mbart"),NDt.forEach(t),Czr=r(hOe," \u2014 "),Dee=n(hOe,"A",{href:!0});var qDt=s(Dee);wzr=r(qDt,"FlaxMBartForConditionalGeneration"),qDt.forEach(t),Azr=r(hOe," (mBART model)"),hOe.forEach(t),Lzr=i(qe),rw=n(qe,"LI",{});var pOe=s(rw);b0e=n(pOe,"STRONG",{});var jDt=s(b0e);yzr=r(jDt,"roberta"),jDt.forEach(t),xzr=r(pOe," \u2014 "),Gee=n(pOe,"A",{href:!0});var DDt=s(Gee);$zr=r(DDt,"FlaxRobertaForMaskedLM"),DDt.forEach(t),kzr=r(pOe," (RoBERTa model)"),pOe.forEach(t),Szr=i(qe),tw=n(qe,"LI",{});var _Oe=s(tw);v0e=n(_Oe,"STRONG",{});var GDt=s(v0e);Rzr=r(GDt,"roformer"),GDt.forEach(t),Pzr=r(_Oe," \u2014 "),Oee=n(_Oe,"A",{href:!0});var ODt=s(Oee);Bzr=r(ODt,"FlaxRoFormerForMaskedLM"),ODt.forEach(t),Izr=r(_Oe," (RoFormer model)"),_Oe.forEach(t),Nzr=i(qe),aw=n(qe,"LI",{});var uOe=s(aw);F0e=n(uOe,"STRONG",{});var VDt=s(F0e);qzr=r(VDt,"xlm-roberta"),VDt.forEach(t),jzr=r(uOe," \u2014 "),Vee=n(uOe,"A",{href:!0});var XDt=s(Vee);Dzr=r(XDt,"FlaxXLMRobertaForMaskedLM"),XDt.forEach(t),Gzr=r(uOe," (XLM-RoBERTa model)"),uOe.forEach(t),qe.forEach(t),Ozr=i(ii),T(nw.$$.fragment,ii),ii.forEach(t),li.forEach(t),tze=i(f),af=n(f,"H2",{class:!0});var mWe=s(af);sw=n(mWe,"A",{id:!0,class:!0,href:!0});var zDt=s(sw);T0e=n(zDt,"SPAN",{});var QDt=s(T0e);T(b$.$$.fragment,QDt),QDt.forEach(t),zDt.forEach(t),Vzr=i(mWe),M0e=n(mWe,"SPAN",{});var WDt=s(M0e);Xzr=r(WDt,"FlaxAutoModelForSeq2SeqLM"),WDt.forEach(t),mWe.forEach(t),aze=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(v$.$$.fragment,di),zzr=i(di),nf=n(di,"P",{});var Ote=s(nf);Qzr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xee=n(Ote,"A",{href:!0});var HDt=s(Xee);Wzr=r(HDt,"from_pretrained()"),HDt.forEach(t),Hzr=r(Ote," class method or the "),zee=n(Ote,"A",{href:!0});var UDt=s(zee);Uzr=r(UDt,"from_config()"),UDt.forEach(t),Jzr=r(Ote,` class
method.`),Ote.forEach(t),Yzr=i(di),F$=n(di,"P",{});var gWe=s(F$);Kzr=r(gWe,"This class cannot be instantiated directly using "),E0e=n(gWe,"CODE",{});var JDt=s(E0e);Zzr=r(JDt,"__init__()"),JDt.forEach(t),eQr=r(gWe," (throws an error)."),gWe.forEach(t),oQr=i(di),Ut=n(di,"DIV",{class:!0});var xL=s(Ut);T(T$.$$.fragment,xL),rQr=i(xL),C0e=n(xL,"P",{});var YDt=s(C0e);tQr=r(YDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YDt.forEach(t),aQr=i(xL),sf=n(xL,"P",{});var Vte=s(sf);nQr=r(Vte,`Note:
Loading a model from its configuration file does `),w0e=n(Vte,"STRONG",{});var KDt=s(w0e);sQr=r(KDt,"not"),KDt.forEach(t),lQr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Vte,"A",{href:!0});var ZDt=s(Qee);iQr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),dQr=r(Vte," to load the model weights."),Vte.forEach(t),cQr=i(xL),T(lw.$$.fragment,xL),xL.forEach(t),fQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(M$.$$.fragment,ci),mQr=i(ci),A0e=n(ci,"P",{});var eGt=s(A0e);gQr=r(eGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eGt.forEach(t),hQr=i(ci),Cn=n(ci,"P",{});var $L=s(Cn);pQr=r($L,"The model class to instantiate is selected based on the "),L0e=n($L,"CODE",{});var oGt=s(L0e);_Qr=r(oGt,"model_type"),oGt.forEach(t),uQr=r($L,` property of the config object (either
passed as an argument or loaded from `),y0e=n($L,"CODE",{});var rGt=s(y0e);bQr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),vQr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=n($L,"CODE",{});var tGt=s(x0e);FQr=r(tGt,"pretrained_model_name_or_path"),tGt.forEach(t),TQr=r($L,":"),$L.forEach(t),MQr=i(ci),ke=n(ci,"UL",{});var je=s(ke);iw=n(je,"LI",{});var bOe=s(iw);$0e=n(bOe,"STRONG",{});var aGt=s($0e);EQr=r(aGt,"bart"),aGt.forEach(t),CQr=r(bOe," \u2014 "),Wee=n(bOe,"A",{href:!0});var nGt=s(Wee);wQr=r(nGt,"FlaxBartForConditionalGeneration"),nGt.forEach(t),AQr=r(bOe," (BART model)"),bOe.forEach(t),LQr=i(je),dw=n(je,"LI",{});var vOe=s(dw);k0e=n(vOe,"STRONG",{});var sGt=s(k0e);yQr=r(sGt,"blenderbot"),sGt.forEach(t),xQr=r(vOe," \u2014 "),Hee=n(vOe,"A",{href:!0});var lGt=s(Hee);$Qr=r(lGt,"FlaxBlenderbotForConditionalGeneration"),lGt.forEach(t),kQr=r(vOe," (Blenderbot model)"),vOe.forEach(t),SQr=i(je),cw=n(je,"LI",{});var FOe=s(cw);S0e=n(FOe,"STRONG",{});var iGt=s(S0e);RQr=r(iGt,"blenderbot-small"),iGt.forEach(t),PQr=r(FOe," \u2014 "),Uee=n(FOe,"A",{href:!0});var dGt=s(Uee);BQr=r(dGt,"FlaxBlenderbotSmallForConditionalGeneration"),dGt.forEach(t),IQr=r(FOe," (BlenderbotSmall model)"),FOe.forEach(t),NQr=i(je),fw=n(je,"LI",{});var TOe=s(fw);R0e=n(TOe,"STRONG",{});var cGt=s(R0e);qQr=r(cGt,"encoder-decoder"),cGt.forEach(t),jQr=r(TOe," \u2014 "),Jee=n(TOe,"A",{href:!0});var fGt=s(Jee);DQr=r(fGt,"FlaxEncoderDecoderModel"),fGt.forEach(t),GQr=r(TOe," (Encoder decoder model)"),TOe.forEach(t),OQr=i(je),mw=n(je,"LI",{});var MOe=s(mw);P0e=n(MOe,"STRONG",{});var mGt=s(P0e);VQr=r(mGt,"longt5"),mGt.forEach(t),XQr=r(MOe," \u2014 "),Yee=n(MOe,"A",{href:!0});var gGt=s(Yee);zQr=r(gGt,"FlaxLongT5ForConditionalGeneration"),gGt.forEach(t),QQr=r(MOe," (LongT5 model)"),MOe.forEach(t),WQr=i(je),gw=n(je,"LI",{});var EOe=s(gw);B0e=n(EOe,"STRONG",{});var hGt=s(B0e);HQr=r(hGt,"marian"),hGt.forEach(t),UQr=r(EOe," \u2014 "),Kee=n(EOe,"A",{href:!0});var pGt=s(Kee);JQr=r(pGt,"FlaxMarianMTModel"),pGt.forEach(t),YQr=r(EOe," (Marian model)"),EOe.forEach(t),KQr=i(je),hw=n(je,"LI",{});var COe=s(hw);I0e=n(COe,"STRONG",{});var _Gt=s(I0e);ZQr=r(_Gt,"mbart"),_Gt.forEach(t),eWr=r(COe," \u2014 "),Zee=n(COe,"A",{href:!0});var uGt=s(Zee);oWr=r(uGt,"FlaxMBartForConditionalGeneration"),uGt.forEach(t),rWr=r(COe," (mBART model)"),COe.forEach(t),tWr=i(je),pw=n(je,"LI",{});var wOe=s(pw);N0e=n(wOe,"STRONG",{});var bGt=s(N0e);aWr=r(bGt,"mt5"),bGt.forEach(t),nWr=r(wOe," \u2014 "),eoe=n(wOe,"A",{href:!0});var vGt=s(eoe);sWr=r(vGt,"FlaxMT5ForConditionalGeneration"),vGt.forEach(t),lWr=r(wOe," (MT5 model)"),wOe.forEach(t),iWr=i(je),_w=n(je,"LI",{});var AOe=s(_w);q0e=n(AOe,"STRONG",{});var FGt=s(q0e);dWr=r(FGt,"pegasus"),FGt.forEach(t),cWr=r(AOe," \u2014 "),ooe=n(AOe,"A",{href:!0});var TGt=s(ooe);fWr=r(TGt,"FlaxPegasusForConditionalGeneration"),TGt.forEach(t),mWr=r(AOe," (Pegasus model)"),AOe.forEach(t),gWr=i(je),uw=n(je,"LI",{});var LOe=s(uw);j0e=n(LOe,"STRONG",{});var MGt=s(j0e);hWr=r(MGt,"t5"),MGt.forEach(t),pWr=r(LOe," \u2014 "),roe=n(LOe,"A",{href:!0});var EGt=s(roe);_Wr=r(EGt,"FlaxT5ForConditionalGeneration"),EGt.forEach(t),uWr=r(LOe," (T5 model)"),LOe.forEach(t),je.forEach(t),bWr=i(ci),T(bw.$$.fragment,ci),ci.forEach(t),di.forEach(t),nze=i(f),lf=n(f,"H2",{class:!0});var hWe=s(lf);vw=n(hWe,"A",{id:!0,class:!0,href:!0});var CGt=s(vw);D0e=n(CGt,"SPAN",{});var wGt=s(D0e);T(E$.$$.fragment,wGt),wGt.forEach(t),CGt.forEach(t),vWr=i(hWe),G0e=n(hWe,"SPAN",{});var AGt=s(G0e);FWr=r(AGt,"FlaxAutoModelForSequenceClassification"),AGt.forEach(t),hWe.forEach(t),sze=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(C$.$$.fragment,fi),TWr=i(fi),df=n(fi,"P",{});var Xte=s(df);MWr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),toe=n(Xte,"A",{href:!0});var LGt=s(toe);EWr=r(LGt,"from_pretrained()"),LGt.forEach(t),CWr=r(Xte," class method or the "),aoe=n(Xte,"A",{href:!0});var yGt=s(aoe);wWr=r(yGt,"from_config()"),yGt.forEach(t),AWr=r(Xte,` class
method.`),Xte.forEach(t),LWr=i(fi),w$=n(fi,"P",{});var pWe=s(w$);yWr=r(pWe,"This class cannot be instantiated directly using "),O0e=n(pWe,"CODE",{});var xGt=s(O0e);xWr=r(xGt,"__init__()"),xGt.forEach(t),$Wr=r(pWe," (throws an error)."),pWe.forEach(t),kWr=i(fi),Jt=n(fi,"DIV",{class:!0});var kL=s(Jt);T(A$.$$.fragment,kL),SWr=i(kL),V0e=n(kL,"P",{});var $Gt=s(V0e);RWr=r($Gt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Gt.forEach(t),PWr=i(kL),cf=n(kL,"P",{});var zte=s(cf);BWr=r(zte,`Note:
Loading a model from its configuration file does `),X0e=n(zte,"STRONG",{});var kGt=s(X0e);IWr=r(kGt,"not"),kGt.forEach(t),NWr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(zte,"A",{href:!0});var SGt=s(noe);qWr=r(SGt,"from_pretrained()"),SGt.forEach(t),jWr=r(zte," to load the model weights."),zte.forEach(t),DWr=i(kL),T(Fw.$$.fragment,kL),kL.forEach(t),GWr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(L$.$$.fragment,mi),OWr=i(mi),z0e=n(mi,"P",{});var RGt=s(z0e);VWr=r(RGt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RGt.forEach(t),XWr=i(mi),wn=n(mi,"P",{});var SL=s(wn);zWr=r(SL,"The model class to instantiate is selected based on the "),Q0e=n(SL,"CODE",{});var PGt=s(Q0e);QWr=r(PGt,"model_type"),PGt.forEach(t),WWr=r(SL,` property of the config object (either
passed as an argument or loaded from `),W0e=n(SL,"CODE",{});var BGt=s(W0e);HWr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),UWr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(SL,"CODE",{});var IGt=s(H0e);JWr=r(IGt,"pretrained_model_name_or_path"),IGt.forEach(t),YWr=r(SL,":"),SL.forEach(t),KWr=i(mi),Se=n(mi,"UL",{});var De=s(Se);Tw=n(De,"LI",{});var yOe=s(Tw);U0e=n(yOe,"STRONG",{});var NGt=s(U0e);ZWr=r(NGt,"albert"),NGt.forEach(t),eHr=r(yOe," \u2014 "),soe=n(yOe,"A",{href:!0});var qGt=s(soe);oHr=r(qGt,"FlaxAlbertForSequenceClassification"),qGt.forEach(t),rHr=r(yOe," (ALBERT model)"),yOe.forEach(t),tHr=i(De),Mw=n(De,"LI",{});var xOe=s(Mw);J0e=n(xOe,"STRONG",{});var jGt=s(J0e);aHr=r(jGt,"bart"),jGt.forEach(t),nHr=r(xOe," \u2014 "),loe=n(xOe,"A",{href:!0});var DGt=s(loe);sHr=r(DGt,"FlaxBartForSequenceClassification"),DGt.forEach(t),lHr=r(xOe," (BART model)"),xOe.forEach(t),iHr=i(De),Ew=n(De,"LI",{});var $Oe=s(Ew);Y0e=n($Oe,"STRONG",{});var GGt=s(Y0e);dHr=r(GGt,"bert"),GGt.forEach(t),cHr=r($Oe," \u2014 "),ioe=n($Oe,"A",{href:!0});var OGt=s(ioe);fHr=r(OGt,"FlaxBertForSequenceClassification"),OGt.forEach(t),mHr=r($Oe," (BERT model)"),$Oe.forEach(t),gHr=i(De),Cw=n(De,"LI",{});var kOe=s(Cw);K0e=n(kOe,"STRONG",{});var VGt=s(K0e);hHr=r(VGt,"big_bird"),VGt.forEach(t),pHr=r(kOe," \u2014 "),doe=n(kOe,"A",{href:!0});var XGt=s(doe);_Hr=r(XGt,"FlaxBigBirdForSequenceClassification"),XGt.forEach(t),uHr=r(kOe," (BigBird model)"),kOe.forEach(t),bHr=i(De),ww=n(De,"LI",{});var SOe=s(ww);Z0e=n(SOe,"STRONG",{});var zGt=s(Z0e);vHr=r(zGt,"distilbert"),zGt.forEach(t),FHr=r(SOe," \u2014 "),coe=n(SOe,"A",{href:!0});var QGt=s(coe);THr=r(QGt,"FlaxDistilBertForSequenceClassification"),QGt.forEach(t),MHr=r(SOe," (DistilBERT model)"),SOe.forEach(t),EHr=i(De),Aw=n(De,"LI",{});var ROe=s(Aw);ewe=n(ROe,"STRONG",{});var WGt=s(ewe);CHr=r(WGt,"electra"),WGt.forEach(t),wHr=r(ROe," \u2014 "),foe=n(ROe,"A",{href:!0});var HGt=s(foe);AHr=r(HGt,"FlaxElectraForSequenceClassification"),HGt.forEach(t),LHr=r(ROe," (ELECTRA model)"),ROe.forEach(t),yHr=i(De),Lw=n(De,"LI",{});var POe=s(Lw);owe=n(POe,"STRONG",{});var UGt=s(owe);xHr=r(UGt,"mbart"),UGt.forEach(t),$Hr=r(POe," \u2014 "),moe=n(POe,"A",{href:!0});var JGt=s(moe);kHr=r(JGt,"FlaxMBartForSequenceClassification"),JGt.forEach(t),SHr=r(POe," (mBART model)"),POe.forEach(t),RHr=i(De),yw=n(De,"LI",{});var BOe=s(yw);rwe=n(BOe,"STRONG",{});var YGt=s(rwe);PHr=r(YGt,"roberta"),YGt.forEach(t),BHr=r(BOe," \u2014 "),goe=n(BOe,"A",{href:!0});var KGt=s(goe);IHr=r(KGt,"FlaxRobertaForSequenceClassification"),KGt.forEach(t),NHr=r(BOe," (RoBERTa model)"),BOe.forEach(t),qHr=i(De),xw=n(De,"LI",{});var IOe=s(xw);twe=n(IOe,"STRONG",{});var ZGt=s(twe);jHr=r(ZGt,"roformer"),ZGt.forEach(t),DHr=r(IOe," \u2014 "),hoe=n(IOe,"A",{href:!0});var eOt=s(hoe);GHr=r(eOt,"FlaxRoFormerForSequenceClassification"),eOt.forEach(t),OHr=r(IOe," (RoFormer model)"),IOe.forEach(t),VHr=i(De),$w=n(De,"LI",{});var NOe=s($w);awe=n(NOe,"STRONG",{});var oOt=s(awe);XHr=r(oOt,"xlm-roberta"),oOt.forEach(t),zHr=r(NOe," \u2014 "),poe=n(NOe,"A",{href:!0});var rOt=s(poe);QHr=r(rOt,"FlaxXLMRobertaForSequenceClassification"),rOt.forEach(t),WHr=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),De.forEach(t),HHr=i(mi),T(kw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),lze=i(f),ff=n(f,"H2",{class:!0});var _We=s(ff);Sw=n(_We,"A",{id:!0,class:!0,href:!0});var tOt=s(Sw);nwe=n(tOt,"SPAN",{});var aOt=s(nwe);T(y$.$$.fragment,aOt),aOt.forEach(t),tOt.forEach(t),UHr=i(_We),swe=n(_We,"SPAN",{});var nOt=s(swe);JHr=r(nOt,"FlaxAutoModelForQuestionAnswering"),nOt.forEach(t),_We.forEach(t),ize=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(x$.$$.fragment,gi),YHr=i(gi),mf=n(gi,"P",{});var Qte=s(mf);KHr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_oe=n(Qte,"A",{href:!0});var sOt=s(_oe);ZHr=r(sOt,"from_pretrained()"),sOt.forEach(t),eUr=r(Qte," class method or the "),uoe=n(Qte,"A",{href:!0});var lOt=s(uoe);oUr=r(lOt,"from_config()"),lOt.forEach(t),rUr=r(Qte,` class
method.`),Qte.forEach(t),tUr=i(gi),$$=n(gi,"P",{});var uWe=s($$);aUr=r(uWe,"This class cannot be instantiated directly using "),lwe=n(uWe,"CODE",{});var iOt=s(lwe);nUr=r(iOt,"__init__()"),iOt.forEach(t),sUr=r(uWe," (throws an error)."),uWe.forEach(t),lUr=i(gi),Yt=n(gi,"DIV",{class:!0});var RL=s(Yt);T(k$.$$.fragment,RL),iUr=i(RL),iwe=n(RL,"P",{});var dOt=s(iwe);dUr=r(dOt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dOt.forEach(t),cUr=i(RL),gf=n(RL,"P",{});var Wte=s(gf);fUr=r(Wte,`Note:
Loading a model from its configuration file does `),dwe=n(Wte,"STRONG",{});var cOt=s(dwe);mUr=r(cOt,"not"),cOt.forEach(t),gUr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Wte,"A",{href:!0});var fOt=s(boe);hUr=r(fOt,"from_pretrained()"),fOt.forEach(t),pUr=r(Wte," to load the model weights."),Wte.forEach(t),_Ur=i(RL),T(Rw.$$.fragment,RL),RL.forEach(t),uUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(S$.$$.fragment,hi),bUr=i(hi),cwe=n(hi,"P",{});var mOt=s(cwe);vUr=r(mOt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mOt.forEach(t),FUr=i(hi),An=n(hi,"P",{});var PL=s(An);TUr=r(PL,"The model class to instantiate is selected based on the "),fwe=n(PL,"CODE",{});var gOt=s(fwe);MUr=r(gOt,"model_type"),gOt.forEach(t),EUr=r(PL,` property of the config object (either
passed as an argument or loaded from `),mwe=n(PL,"CODE",{});var hOt=s(mwe);CUr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),wUr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=n(PL,"CODE",{});var pOt=s(gwe);AUr=r(pOt,"pretrained_model_name_or_path"),pOt.forEach(t),LUr=r(PL,":"),PL.forEach(t),yUr=i(hi),Re=n(hi,"UL",{});var Ge=s(Re);Pw=n(Ge,"LI",{});var qOe=s(Pw);hwe=n(qOe,"STRONG",{});var _Ot=s(hwe);xUr=r(_Ot,"albert"),_Ot.forEach(t),$Ur=r(qOe," \u2014 "),voe=n(qOe,"A",{href:!0});var uOt=s(voe);kUr=r(uOt,"FlaxAlbertForQuestionAnswering"),uOt.forEach(t),SUr=r(qOe," (ALBERT model)"),qOe.forEach(t),RUr=i(Ge),Bw=n(Ge,"LI",{});var jOe=s(Bw);pwe=n(jOe,"STRONG",{});var bOt=s(pwe);PUr=r(bOt,"bart"),bOt.forEach(t),BUr=r(jOe," \u2014 "),Foe=n(jOe,"A",{href:!0});var vOt=s(Foe);IUr=r(vOt,"FlaxBartForQuestionAnswering"),vOt.forEach(t),NUr=r(jOe," (BART model)"),jOe.forEach(t),qUr=i(Ge),Iw=n(Ge,"LI",{});var DOe=s(Iw);_we=n(DOe,"STRONG",{});var FOt=s(_we);jUr=r(FOt,"bert"),FOt.forEach(t),DUr=r(DOe," \u2014 "),Toe=n(DOe,"A",{href:!0});var TOt=s(Toe);GUr=r(TOt,"FlaxBertForQuestionAnswering"),TOt.forEach(t),OUr=r(DOe," (BERT model)"),DOe.forEach(t),VUr=i(Ge),Nw=n(Ge,"LI",{});var GOe=s(Nw);uwe=n(GOe,"STRONG",{});var MOt=s(uwe);XUr=r(MOt,"big_bird"),MOt.forEach(t),zUr=r(GOe," \u2014 "),Moe=n(GOe,"A",{href:!0});var EOt=s(Moe);QUr=r(EOt,"FlaxBigBirdForQuestionAnswering"),EOt.forEach(t),WUr=r(GOe," (BigBird model)"),GOe.forEach(t),HUr=i(Ge),qw=n(Ge,"LI",{});var OOe=s(qw);bwe=n(OOe,"STRONG",{});var COt=s(bwe);UUr=r(COt,"distilbert"),COt.forEach(t),JUr=r(OOe," \u2014 "),Eoe=n(OOe,"A",{href:!0});var wOt=s(Eoe);YUr=r(wOt,"FlaxDistilBertForQuestionAnswering"),wOt.forEach(t),KUr=r(OOe," (DistilBERT model)"),OOe.forEach(t),ZUr=i(Ge),jw=n(Ge,"LI",{});var VOe=s(jw);vwe=n(VOe,"STRONG",{});var AOt=s(vwe);eJr=r(AOt,"electra"),AOt.forEach(t),oJr=r(VOe," \u2014 "),Coe=n(VOe,"A",{href:!0});var LOt=s(Coe);rJr=r(LOt,"FlaxElectraForQuestionAnswering"),LOt.forEach(t),tJr=r(VOe," (ELECTRA model)"),VOe.forEach(t),aJr=i(Ge),Dw=n(Ge,"LI",{});var XOe=s(Dw);Fwe=n(XOe,"STRONG",{});var yOt=s(Fwe);nJr=r(yOt,"mbart"),yOt.forEach(t),sJr=r(XOe," \u2014 "),woe=n(XOe,"A",{href:!0});var xOt=s(woe);lJr=r(xOt,"FlaxMBartForQuestionAnswering"),xOt.forEach(t),iJr=r(XOe," (mBART model)"),XOe.forEach(t),dJr=i(Ge),Gw=n(Ge,"LI",{});var zOe=s(Gw);Twe=n(zOe,"STRONG",{});var $Ot=s(Twe);cJr=r($Ot,"roberta"),$Ot.forEach(t),fJr=r(zOe," \u2014 "),Aoe=n(zOe,"A",{href:!0});var kOt=s(Aoe);mJr=r(kOt,"FlaxRobertaForQuestionAnswering"),kOt.forEach(t),gJr=r(zOe," (RoBERTa model)"),zOe.forEach(t),hJr=i(Ge),Ow=n(Ge,"LI",{});var QOe=s(Ow);Mwe=n(QOe,"STRONG",{});var SOt=s(Mwe);pJr=r(SOt,"roformer"),SOt.forEach(t),_Jr=r(QOe," \u2014 "),Loe=n(QOe,"A",{href:!0});var ROt=s(Loe);uJr=r(ROt,"FlaxRoFormerForQuestionAnswering"),ROt.forEach(t),bJr=r(QOe," (RoFormer model)"),QOe.forEach(t),vJr=i(Ge),Vw=n(Ge,"LI",{});var WOe=s(Vw);Ewe=n(WOe,"STRONG",{});var POt=s(Ewe);FJr=r(POt,"xlm-roberta"),POt.forEach(t),TJr=r(WOe," \u2014 "),yoe=n(WOe,"A",{href:!0});var BOt=s(yoe);MJr=r(BOt,"FlaxXLMRobertaForQuestionAnswering"),BOt.forEach(t),EJr=r(WOe," (XLM-RoBERTa model)"),WOe.forEach(t),Ge.forEach(t),CJr=i(hi),T(Xw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),dze=i(f),hf=n(f,"H2",{class:!0});var bWe=s(hf);zw=n(bWe,"A",{id:!0,class:!0,href:!0});var IOt=s(zw);Cwe=n(IOt,"SPAN",{});var NOt=s(Cwe);T(R$.$$.fragment,NOt),NOt.forEach(t),IOt.forEach(t),wJr=i(bWe),wwe=n(bWe,"SPAN",{});var qOt=s(wwe);AJr=r(qOt,"FlaxAutoModelForTokenClassification"),qOt.forEach(t),bWe.forEach(t),cze=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(P$.$$.fragment,pi),LJr=i(pi),pf=n(pi,"P",{});var Hte=s(pf);yJr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xoe=n(Hte,"A",{href:!0});var jOt=s(xoe);xJr=r(jOt,"from_pretrained()"),jOt.forEach(t),$Jr=r(Hte," class method or the "),$oe=n(Hte,"A",{href:!0});var DOt=s($oe);kJr=r(DOt,"from_config()"),DOt.forEach(t),SJr=r(Hte,` class
method.`),Hte.forEach(t),RJr=i(pi),B$=n(pi,"P",{});var vWe=s(B$);PJr=r(vWe,"This class cannot be instantiated directly using "),Awe=n(vWe,"CODE",{});var GOt=s(Awe);BJr=r(GOt,"__init__()"),GOt.forEach(t),IJr=r(vWe," (throws an error)."),vWe.forEach(t),NJr=i(pi),Kt=n(pi,"DIV",{class:!0});var BL=s(Kt);T(I$.$$.fragment,BL),qJr=i(BL),Lwe=n(BL,"P",{});var OOt=s(Lwe);jJr=r(OOt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OOt.forEach(t),DJr=i(BL),_f=n(BL,"P",{});var Ute=s(_f);GJr=r(Ute,`Note:
Loading a model from its configuration file does `),ywe=n(Ute,"STRONG",{});var VOt=s(ywe);OJr=r(VOt,"not"),VOt.forEach(t),VJr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(Ute,"A",{href:!0});var XOt=s(koe);XJr=r(XOt,"from_pretrained()"),XOt.forEach(t),zJr=r(Ute," to load the model weights."),Ute.forEach(t),QJr=i(BL),T(Qw.$$.fragment,BL),BL.forEach(t),WJr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(N$.$$.fragment,_i),HJr=i(_i),xwe=n(_i,"P",{});var zOt=s(xwe);UJr=r(zOt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zOt.forEach(t),JJr=i(_i),Ln=n(_i,"P",{});var IL=s(Ln);YJr=r(IL,"The model class to instantiate is selected based on the "),$we=n(IL,"CODE",{});var QOt=s($we);KJr=r(QOt,"model_type"),QOt.forEach(t),ZJr=r(IL,` property of the config object (either
passed as an argument or loaded from `),kwe=n(IL,"CODE",{});var WOt=s(kwe);eYr=r(WOt,"pretrained_model_name_or_path"),WOt.forEach(t),oYr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=n(IL,"CODE",{});var HOt=s(Swe);rYr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),tYr=r(IL,":"),IL.forEach(t),aYr=i(_i),Ve=n(_i,"UL",{});var To=s(Ve);Ww=n(To,"LI",{});var HOe=s(Ww);Rwe=n(HOe,"STRONG",{});var UOt=s(Rwe);nYr=r(UOt,"albert"),UOt.forEach(t),sYr=r(HOe," \u2014 "),Soe=n(HOe,"A",{href:!0});var JOt=s(Soe);lYr=r(JOt,"FlaxAlbertForTokenClassification"),JOt.forEach(t),iYr=r(HOe," (ALBERT model)"),HOe.forEach(t),dYr=i(To),Hw=n(To,"LI",{});var UOe=s(Hw);Pwe=n(UOe,"STRONG",{});var YOt=s(Pwe);cYr=r(YOt,"bert"),YOt.forEach(t),fYr=r(UOe," \u2014 "),Roe=n(UOe,"A",{href:!0});var KOt=s(Roe);mYr=r(KOt,"FlaxBertForTokenClassification"),KOt.forEach(t),gYr=r(UOe," (BERT model)"),UOe.forEach(t),hYr=i(To),Uw=n(To,"LI",{});var JOe=s(Uw);Bwe=n(JOe,"STRONG",{});var ZOt=s(Bwe);pYr=r(ZOt,"big_bird"),ZOt.forEach(t),_Yr=r(JOe," \u2014 "),Poe=n(JOe,"A",{href:!0});var eVt=s(Poe);uYr=r(eVt,"FlaxBigBirdForTokenClassification"),eVt.forEach(t),bYr=r(JOe," (BigBird model)"),JOe.forEach(t),vYr=i(To),Jw=n(To,"LI",{});var YOe=s(Jw);Iwe=n(YOe,"STRONG",{});var oVt=s(Iwe);FYr=r(oVt,"distilbert"),oVt.forEach(t),TYr=r(YOe," \u2014 "),Boe=n(YOe,"A",{href:!0});var rVt=s(Boe);MYr=r(rVt,"FlaxDistilBertForTokenClassification"),rVt.forEach(t),EYr=r(YOe," (DistilBERT model)"),YOe.forEach(t),CYr=i(To),Yw=n(To,"LI",{});var KOe=s(Yw);Nwe=n(KOe,"STRONG",{});var tVt=s(Nwe);wYr=r(tVt,"electra"),tVt.forEach(t),AYr=r(KOe," \u2014 "),Ioe=n(KOe,"A",{href:!0});var aVt=s(Ioe);LYr=r(aVt,"FlaxElectraForTokenClassification"),aVt.forEach(t),yYr=r(KOe," (ELECTRA model)"),KOe.forEach(t),xYr=i(To),Kw=n(To,"LI",{});var ZOe=s(Kw);qwe=n(ZOe,"STRONG",{});var nVt=s(qwe);$Yr=r(nVt,"roberta"),nVt.forEach(t),kYr=r(ZOe," \u2014 "),Noe=n(ZOe,"A",{href:!0});var sVt=s(Noe);SYr=r(sVt,"FlaxRobertaForTokenClassification"),sVt.forEach(t),RYr=r(ZOe," (RoBERTa model)"),ZOe.forEach(t),PYr=i(To),Zw=n(To,"LI",{});var eVe=s(Zw);jwe=n(eVe,"STRONG",{});var lVt=s(jwe);BYr=r(lVt,"roformer"),lVt.forEach(t),IYr=r(eVe," \u2014 "),qoe=n(eVe,"A",{href:!0});var iVt=s(qoe);NYr=r(iVt,"FlaxRoFormerForTokenClassification"),iVt.forEach(t),qYr=r(eVe," (RoFormer model)"),eVe.forEach(t),jYr=i(To),eA=n(To,"LI",{});var oVe=s(eA);Dwe=n(oVe,"STRONG",{});var dVt=s(Dwe);DYr=r(dVt,"xlm-roberta"),dVt.forEach(t),GYr=r(oVe," \u2014 "),joe=n(oVe,"A",{href:!0});var cVt=s(joe);OYr=r(cVt,"FlaxXLMRobertaForTokenClassification"),cVt.forEach(t),VYr=r(oVe," (XLM-RoBERTa model)"),oVe.forEach(t),To.forEach(t),XYr=i(_i),T(oA.$$.fragment,_i),_i.forEach(t),pi.forEach(t),fze=i(f),uf=n(f,"H2",{class:!0});var FWe=s(uf);rA=n(FWe,"A",{id:!0,class:!0,href:!0});var fVt=s(rA);Gwe=n(fVt,"SPAN",{});var mVt=s(Gwe);T(q$.$$.fragment,mVt),mVt.forEach(t),fVt.forEach(t),zYr=i(FWe),Owe=n(FWe,"SPAN",{});var gVt=s(Owe);QYr=r(gVt,"FlaxAutoModelForMultipleChoice"),gVt.forEach(t),FWe.forEach(t),mze=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(j$.$$.fragment,ui),WYr=i(ui),bf=n(ui,"P",{});var Jte=s(bf);HYr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Doe=n(Jte,"A",{href:!0});var hVt=s(Doe);UYr=r(hVt,"from_pretrained()"),hVt.forEach(t),JYr=r(Jte," class method or the "),Goe=n(Jte,"A",{href:!0});var pVt=s(Goe);YYr=r(pVt,"from_config()"),pVt.forEach(t),KYr=r(Jte,` class
method.`),Jte.forEach(t),ZYr=i(ui),D$=n(ui,"P",{});var TWe=s(D$);eKr=r(TWe,"This class cannot be instantiated directly using "),Vwe=n(TWe,"CODE",{});var _Vt=s(Vwe);oKr=r(_Vt,"__init__()"),_Vt.forEach(t),rKr=r(TWe," (throws an error)."),TWe.forEach(t),tKr=i(ui),Zt=n(ui,"DIV",{class:!0});var NL=s(Zt);T(G$.$$.fragment,NL),aKr=i(NL),Xwe=n(NL,"P",{});var uVt=s(Xwe);nKr=r(uVt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uVt.forEach(t),sKr=i(NL),vf=n(NL,"P",{});var Yte=s(vf);lKr=r(Yte,`Note:
Loading a model from its configuration file does `),zwe=n(Yte,"STRONG",{});var bVt=s(zwe);iKr=r(bVt,"not"),bVt.forEach(t),dKr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(Yte,"A",{href:!0});var vVt=s(Ooe);cKr=r(vVt,"from_pretrained()"),vVt.forEach(t),fKr=r(Yte," to load the model weights."),Yte.forEach(t),mKr=i(NL),T(tA.$$.fragment,NL),NL.forEach(t),gKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(O$.$$.fragment,bi),hKr=i(bi),Qwe=n(bi,"P",{});var FVt=s(Qwe);pKr=r(FVt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FVt.forEach(t),_Kr=i(bi),yn=n(bi,"P",{});var qL=s(yn);uKr=r(qL,"The model class to instantiate is selected based on the "),Wwe=n(qL,"CODE",{});var TVt=s(Wwe);bKr=r(TVt,"model_type"),TVt.forEach(t),vKr=r(qL,` property of the config object (either
passed as an argument or loaded from `),Hwe=n(qL,"CODE",{});var MVt=s(Hwe);FKr=r(MVt,"pretrained_model_name_or_path"),MVt.forEach(t),TKr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=n(qL,"CODE",{});var EVt=s(Uwe);MKr=r(EVt,"pretrained_model_name_or_path"),EVt.forEach(t),EKr=r(qL,":"),qL.forEach(t),CKr=i(bi),Xe=n(bi,"UL",{});var Mo=s(Xe);aA=n(Mo,"LI",{});var rVe=s(aA);Jwe=n(rVe,"STRONG",{});var CVt=s(Jwe);wKr=r(CVt,"albert"),CVt.forEach(t),AKr=r(rVe," \u2014 "),Voe=n(rVe,"A",{href:!0});var wVt=s(Voe);LKr=r(wVt,"FlaxAlbertForMultipleChoice"),wVt.forEach(t),yKr=r(rVe," (ALBERT model)"),rVe.forEach(t),xKr=i(Mo),nA=n(Mo,"LI",{});var tVe=s(nA);Ywe=n(tVe,"STRONG",{});var AVt=s(Ywe);$Kr=r(AVt,"bert"),AVt.forEach(t),kKr=r(tVe," \u2014 "),Xoe=n(tVe,"A",{href:!0});var LVt=s(Xoe);SKr=r(LVt,"FlaxBertForMultipleChoice"),LVt.forEach(t),RKr=r(tVe," (BERT model)"),tVe.forEach(t),PKr=i(Mo),sA=n(Mo,"LI",{});var aVe=s(sA);Kwe=n(aVe,"STRONG",{});var yVt=s(Kwe);BKr=r(yVt,"big_bird"),yVt.forEach(t),IKr=r(aVe," \u2014 "),zoe=n(aVe,"A",{href:!0});var xVt=s(zoe);NKr=r(xVt,"FlaxBigBirdForMultipleChoice"),xVt.forEach(t),qKr=r(aVe," (BigBird model)"),aVe.forEach(t),jKr=i(Mo),lA=n(Mo,"LI",{});var nVe=s(lA);Zwe=n(nVe,"STRONG",{});var $Vt=s(Zwe);DKr=r($Vt,"distilbert"),$Vt.forEach(t),GKr=r(nVe," \u2014 "),Qoe=n(nVe,"A",{href:!0});var kVt=s(Qoe);OKr=r(kVt,"FlaxDistilBertForMultipleChoice"),kVt.forEach(t),VKr=r(nVe," (DistilBERT model)"),nVe.forEach(t),XKr=i(Mo),iA=n(Mo,"LI",{});var sVe=s(iA);eAe=n(sVe,"STRONG",{});var SVt=s(eAe);zKr=r(SVt,"electra"),SVt.forEach(t),QKr=r(sVe," \u2014 "),Woe=n(sVe,"A",{href:!0});var RVt=s(Woe);WKr=r(RVt,"FlaxElectraForMultipleChoice"),RVt.forEach(t),HKr=r(sVe," (ELECTRA model)"),sVe.forEach(t),UKr=i(Mo),dA=n(Mo,"LI",{});var lVe=s(dA);oAe=n(lVe,"STRONG",{});var PVt=s(oAe);JKr=r(PVt,"roberta"),PVt.forEach(t),YKr=r(lVe," \u2014 "),Hoe=n(lVe,"A",{href:!0});var BVt=s(Hoe);KKr=r(BVt,"FlaxRobertaForMultipleChoice"),BVt.forEach(t),ZKr=r(lVe," (RoBERTa model)"),lVe.forEach(t),eZr=i(Mo),cA=n(Mo,"LI",{});var iVe=s(cA);rAe=n(iVe,"STRONG",{});var IVt=s(rAe);oZr=r(IVt,"roformer"),IVt.forEach(t),rZr=r(iVe," \u2014 "),Uoe=n(iVe,"A",{href:!0});var NVt=s(Uoe);tZr=r(NVt,"FlaxRoFormerForMultipleChoice"),NVt.forEach(t),aZr=r(iVe," (RoFormer model)"),iVe.forEach(t),nZr=i(Mo),fA=n(Mo,"LI",{});var dVe=s(fA);tAe=n(dVe,"STRONG",{});var qVt=s(tAe);sZr=r(qVt,"xlm-roberta"),qVt.forEach(t),lZr=r(dVe," \u2014 "),Joe=n(dVe,"A",{href:!0});var jVt=s(Joe);iZr=r(jVt,"FlaxXLMRobertaForMultipleChoice"),jVt.forEach(t),dZr=r(dVe," (XLM-RoBERTa model)"),dVe.forEach(t),Mo.forEach(t),cZr=i(bi),T(mA.$$.fragment,bi),bi.forEach(t),ui.forEach(t),gze=i(f),Ff=n(f,"H2",{class:!0});var MWe=s(Ff);gA=n(MWe,"A",{id:!0,class:!0,href:!0});var DVt=s(gA);aAe=n(DVt,"SPAN",{});var GVt=s(aAe);T(V$.$$.fragment,GVt),GVt.forEach(t),DVt.forEach(t),fZr=i(MWe),nAe=n(MWe,"SPAN",{});var OVt=s(nAe);mZr=r(OVt,"FlaxAutoModelForNextSentencePrediction"),OVt.forEach(t),MWe.forEach(t),hze=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(X$.$$.fragment,vi),gZr=i(vi),Tf=n(vi,"P",{});var Kte=s(Tf);hZr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yoe=n(Kte,"A",{href:!0});var VVt=s(Yoe);pZr=r(VVt,"from_pretrained()"),VVt.forEach(t),_Zr=r(Kte," class method or the "),Koe=n(Kte,"A",{href:!0});var XVt=s(Koe);uZr=r(XVt,"from_config()"),XVt.forEach(t),bZr=r(Kte,` class
method.`),Kte.forEach(t),vZr=i(vi),z$=n(vi,"P",{});var EWe=s(z$);FZr=r(EWe,"This class cannot be instantiated directly using "),sAe=n(EWe,"CODE",{});var zVt=s(sAe);TZr=r(zVt,"__init__()"),zVt.forEach(t),MZr=r(EWe," (throws an error)."),EWe.forEach(t),EZr=i(vi),ea=n(vi,"DIV",{class:!0});var jL=s(ea);T(Q$.$$.fragment,jL),CZr=i(jL),lAe=n(jL,"P",{});var QVt=s(lAe);wZr=r(QVt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QVt.forEach(t),AZr=i(jL),Mf=n(jL,"P",{});var Zte=s(Mf);LZr=r(Zte,`Note:
Loading a model from its configuration file does `),iAe=n(Zte,"STRONG",{});var WVt=s(iAe);yZr=r(WVt,"not"),WVt.forEach(t),xZr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(Zte,"A",{href:!0});var HVt=s(Zoe);$Zr=r(HVt,"from_pretrained()"),HVt.forEach(t),kZr=r(Zte," to load the model weights."),Zte.forEach(t),SZr=i(jL),T(hA.$$.fragment,jL),jL.forEach(t),RZr=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(W$.$$.fragment,Fi),PZr=i(Fi),dAe=n(Fi,"P",{});var UVt=s(dAe);BZr=r(UVt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UVt.forEach(t),IZr=i(Fi),xn=n(Fi,"P",{});var DL=s(xn);NZr=r(DL,"The model class to instantiate is selected based on the "),cAe=n(DL,"CODE",{});var JVt=s(cAe);qZr=r(JVt,"model_type"),JVt.forEach(t),jZr=r(DL,` property of the config object (either
passed as an argument or loaded from `),fAe=n(DL,"CODE",{});var YVt=s(fAe);DZr=r(YVt,"pretrained_model_name_or_path"),YVt.forEach(t),GZr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mAe=n(DL,"CODE",{});var KVt=s(mAe);OZr=r(KVt,"pretrained_model_name_or_path"),KVt.forEach(t),VZr=r(DL,":"),DL.forEach(t),XZr=i(Fi),gAe=n(Fi,"UL",{});var ZVt=s(gAe);pA=n(ZVt,"LI",{});var cVe=s(pA);hAe=n(cVe,"STRONG",{});var eXt=s(hAe);zZr=r(eXt,"bert"),eXt.forEach(t),QZr=r(cVe," \u2014 "),ere=n(cVe,"A",{href:!0});var oXt=s(ere);WZr=r(oXt,"FlaxBertForNextSentencePrediction"),oXt.forEach(t),HZr=r(cVe," (BERT model)"),cVe.forEach(t),ZVt.forEach(t),UZr=i(Fi),T(_A.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),pze=i(f),Ef=n(f,"H2",{class:!0});var CWe=s(Ef);uA=n(CWe,"A",{id:!0,class:!0,href:!0});var rXt=s(uA);pAe=n(rXt,"SPAN",{});var tXt=s(pAe);T(H$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),JZr=i(CWe),_Ae=n(CWe,"SPAN",{});var aXt=s(_Ae);YZr=r(aXt,"FlaxAutoModelForImageClassification"),aXt.forEach(t),CWe.forEach(t),_ze=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(U$.$$.fragment,Ti),KZr=i(Ti),Cf=n(Ti,"P",{});var eae=s(Cf);ZZr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ore=n(eae,"A",{href:!0});var nXt=s(ore);eet=r(nXt,"from_pretrained()"),nXt.forEach(t),oet=r(eae," class method or the "),rre=n(eae,"A",{href:!0});var sXt=s(rre);ret=r(sXt,"from_config()"),sXt.forEach(t),tet=r(eae,` class
method.`),eae.forEach(t),aet=i(Ti),J$=n(Ti,"P",{});var wWe=s(J$);net=r(wWe,"This class cannot be instantiated directly using "),uAe=n(wWe,"CODE",{});var lXt=s(uAe);set=r(lXt,"__init__()"),lXt.forEach(t),iet=r(wWe," (throws an error)."),wWe.forEach(t),det=i(Ti),oa=n(Ti,"DIV",{class:!0});var GL=s(oa);T(Y$.$$.fragment,GL),cet=i(GL),bAe=n(GL,"P",{});var iXt=s(bAe);fet=r(iXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iXt.forEach(t),met=i(GL),wf=n(GL,"P",{});var oae=s(wf);get=r(oae,`Note:
Loading a model from its configuration file does `),vAe=n(oae,"STRONG",{});var dXt=s(vAe);het=r(dXt,"not"),dXt.forEach(t),pet=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(oae,"A",{href:!0});var cXt=s(tre);_et=r(cXt,"from_pretrained()"),cXt.forEach(t),uet=r(oae," to load the model weights."),oae.forEach(t),bet=i(GL),T(bA.$$.fragment,GL),GL.forEach(t),vet=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(K$.$$.fragment,Mi),Fet=i(Mi),FAe=n(Mi,"P",{});var fXt=s(FAe);Tet=r(fXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fXt.forEach(t),Met=i(Mi),$n=n(Mi,"P",{});var OL=s($n);Eet=r(OL,"The model class to instantiate is selected based on the "),TAe=n(OL,"CODE",{});var mXt=s(TAe);Cet=r(mXt,"model_type"),mXt.forEach(t),wet=r(OL,` property of the config object (either
passed as an argument or loaded from `),MAe=n(OL,"CODE",{});var gXt=s(MAe);Aet=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),Let=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=n(OL,"CODE",{});var hXt=s(EAe);yet=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),xet=r(OL,":"),OL.forEach(t),$et=i(Mi),Z$=n(Mi,"UL",{});var AWe=s(Z$);vA=n(AWe,"LI",{});var fVe=s(vA);CAe=n(fVe,"STRONG",{});var pXt=s(CAe);ket=r(pXt,"beit"),pXt.forEach(t),Set=r(fVe," \u2014 "),are=n(fVe,"A",{href:!0});var _Xt=s(are);Ret=r(_Xt,"FlaxBeitForImageClassification"),_Xt.forEach(t),Pet=r(fVe," (BEiT model)"),fVe.forEach(t),Bet=i(AWe),FA=n(AWe,"LI",{});var mVe=s(FA);wAe=n(mVe,"STRONG",{});var uXt=s(wAe);Iet=r(uXt,"vit"),uXt.forEach(t),Net=r(mVe," \u2014 "),nre=n(mVe,"A",{href:!0});var bXt=s(nre);qet=r(bXt,"FlaxViTForImageClassification"),bXt.forEach(t),jet=r(mVe," (ViT model)"),mVe.forEach(t),AWe.forEach(t),Det=i(Mi),T(TA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),uze=i(f),Af=n(f,"H2",{class:!0});var LWe=s(Af);MA=n(LWe,"A",{id:!0,class:!0,href:!0});var vXt=s(MA);AAe=n(vXt,"SPAN",{});var FXt=s(AAe);T(ek.$$.fragment,FXt),FXt.forEach(t),vXt.forEach(t),Get=i(LWe),LAe=n(LWe,"SPAN",{});var TXt=s(LAe);Oet=r(TXt,"FlaxAutoModelForVision2Seq"),TXt.forEach(t),LWe.forEach(t),bze=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(ok.$$.fragment,Ei),Vet=i(Ei),Lf=n(Ei,"P",{});var rae=s(Lf);Xet=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sre=n(rae,"A",{href:!0});var MXt=s(sre);zet=r(MXt,"from_pretrained()"),MXt.forEach(t),Qet=r(rae," class method or the "),lre=n(rae,"A",{href:!0});var EXt=s(lre);Wet=r(EXt,"from_config()"),EXt.forEach(t),Het=r(rae,` class
method.`),rae.forEach(t),Uet=i(Ei),rk=n(Ei,"P",{});var yWe=s(rk);Jet=r(yWe,"This class cannot be instantiated directly using "),yAe=n(yWe,"CODE",{});var CXt=s(yAe);Yet=r(CXt,"__init__()"),CXt.forEach(t),Ket=r(yWe," (throws an error)."),yWe.forEach(t),Zet=i(Ei),ra=n(Ei,"DIV",{class:!0});var VL=s(ra);T(tk.$$.fragment,VL),eot=i(VL),xAe=n(VL,"P",{});var wXt=s(xAe);oot=r(wXt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wXt.forEach(t),rot=i(VL),yf=n(VL,"P",{});var tae=s(yf);tot=r(tae,`Note:
Loading a model from its configuration file does `),$Ae=n(tae,"STRONG",{});var AXt=s($Ae);aot=r(AXt,"not"),AXt.forEach(t),not=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=n(tae,"A",{href:!0});var LXt=s(ire);sot=r(LXt,"from_pretrained()"),LXt.forEach(t),lot=r(tae," to load the model weights."),tae.forEach(t),iot=i(VL),T(EA.$$.fragment,VL),VL.forEach(t),dot=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(ak.$$.fragment,Ci),cot=i(Ci),kAe=n(Ci,"P",{});var yXt=s(kAe);fot=r(yXt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yXt.forEach(t),mot=i(Ci),kn=n(Ci,"P",{});var XL=s(kn);got=r(XL,"The model class to instantiate is selected based on the "),SAe=n(XL,"CODE",{});var xXt=s(SAe);hot=r(xXt,"model_type"),xXt.forEach(t),pot=r(XL,` property of the config object (either
passed as an argument or loaded from `),RAe=n(XL,"CODE",{});var $Xt=s(RAe);_ot=r($Xt,"pretrained_model_name_or_path"),$Xt.forEach(t),uot=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=n(XL,"CODE",{});var kXt=s(PAe);bot=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),vot=r(XL,":"),XL.forEach(t),Fot=i(Ci),BAe=n(Ci,"UL",{});var SXt=s(BAe);CA=n(SXt,"LI",{});var gVe=s(CA);IAe=n(gVe,"STRONG",{});var RXt=s(IAe);Tot=r(RXt,"vision-encoder-decoder"),RXt.forEach(t),Mot=r(gVe," \u2014 "),dre=n(gVe,"A",{href:!0});var PXt=s(dre);Eot=r(PXt,"FlaxVisionEncoderDecoderModel"),PXt.forEach(t),Cot=r(gVe," (Vision Encoder decoder model)"),gVe.forEach(t),SXt.forEach(t),wot=i(Ci),T(wA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(DQt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoTokenizer"),c(ki,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertModel"),c(If,"id","extending-the-auto-classes"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#extending-the-auto-classes"),c(Si,"class","relative group"),c(qf,"id","transformers.AutoConfig"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#transformers.AutoConfig"),c(Ri,"class","relative group"),c(kS,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(SS,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig"),c(RS,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig"),c(PS,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig"),c(BS,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig"),c(IS,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(NS,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig"),c(qS,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(jS,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(DS,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(GS,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig"),c(OS,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig"),c(VS,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig"),c(XS,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig"),c(zS,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenConfig"),c(QS,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig"),c(WS,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig"),c(HS,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig"),c(US,"href","/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtConfig"),c(JS,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(YS,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(KS,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ZS,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig"),c(eR,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(oR,"href","/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(rR,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig"),c(tR,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig"),c(aR,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig"),c(nR,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRConfig"),c(sR,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTConfig"),c(lR,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig"),c(iR,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(dR,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig"),c(cR,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaConfig"),c(fR,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig"),c(mR,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig"),c(gR,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig"),c(hR,"href","/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNConfig"),c(pR,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config"),c(_R,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(uR,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(bR,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig"),c(vR,"href","/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTConfig"),c(FR,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig"),c(TR,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig"),c(MR,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ER,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(CR,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(wR,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(AR,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig"),c(LR,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitConfig"),c(yR,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig"),c(xR,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config"),c($R,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeConfig"),c(kR,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig"),c(SR,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Config"),c(RR,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig"),c(PR,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(BR,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig"),c(IR,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTConfig"),c(NR,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(qR,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(jR,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig"),c(DR,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config"),c(GR,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpConfig"),c(OR,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig"),c(VR,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(XR,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(zR,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig"),c(QR,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig"),c(WR,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig"),c(HR,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig"),c(UR,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(JR,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(YR,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(KR,"href","/docs/transformers/pr_17437/en/model_doc/rag#transformers.RagConfig"),c(ZR,"href","/docs/transformers/pr_17437/en/model_doc/realm#transformers.RealmConfig"),c(eP,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig"),c(oP,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig"),c(rP,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig"),c(tP,"href","/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetConfig"),c(aP,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertConfig"),c(nP,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig"),c(sP,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig"),c(lP,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig"),c(iP,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig"),c(dP,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig"),c(cP,"href","/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(fP,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(mP,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(gP,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig"),c(hP,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(pP,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig"),c(_P,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config"),c(uP,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig"),c(bP,"href","/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(vP,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(FP,"href","/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRConfig"),c(TP,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(MP,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(EP,"href","/docs/transformers/pr_17437/en/model_doc/van#transformers.VanConfig"),c(CP,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltConfig"),c(wP,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(AP,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(LP,"href","/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(yP,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig"),c(xP,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c($P,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(kP,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(SP,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig"),c(RP,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig"),c(PP,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig"),c(BP,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(IP,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(NP,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(qP,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig"),c(jP,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosConfig"),c(DP,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoTokenizer"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoTokenizer"),c(Bi,"class","relative group"),c(GP,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(OP,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizer"),c(VP,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartTokenizer"),c(zP,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartTokenizerFast"),c(QP,"href","/docs/transformers/pr_17437/en/model_doc/barthez#transformers.BarthezTokenizer"),c(WP,"href","/docs/transformers/pr_17437/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(HP,"href","/docs/transformers/pr_17437/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(UP,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(KP,"href","/docs/transformers/pr_17437/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(ZP,"href","/docs/transformers/pr_17437/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(eB,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(oB,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(rB,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tB,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aB,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(nB,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(sB,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(lB,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(iB,"href","/docs/transformers/pr_17437/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(dB,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertTokenizer"),c(cB,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineTokenizer"),c(mB,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizer"),c(gB,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hB,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(pB,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(_B,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(uB,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17437/en/model_doc/cpm#transformers.CpmTokenizer"),c(vB,"href","/docs/transformers/pr_17437/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(FB,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(TB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaTokenizer"),c(CB,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(AB,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(LB,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(yB,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c($B,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(kB,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraTokenizer"),c(SB,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(RB,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(PB,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetTokenizer"),c(BB,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(IB,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(NB,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelTokenizer"),c(qB,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(jB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VB,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(XB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QB,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizer"),c(WB,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HB,"href","/docs/transformers/pr_17437/en/model_doc/herbert#transformers.HerbertTokenizer"),c(UB,"href","/docs/transformers/pr_17437/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(JB,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(eI,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(oI,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rI,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tI,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(aI,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(nI,"href","/docs/transformers/pr_17437/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(sI,"href","/docs/transformers/pr_17437/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(lI,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDTokenizer"),c(iI,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDTokenizerFast"),c(dI,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerTokenizer"),c(cI,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(fI,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Tokenizer"),c(mI,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5TokenizerFast"),c(gI,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeTokenizer"),c(hI,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(pI,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(uI,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianTokenizer"),c(bI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartTokenizer"),c(vI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(FI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(TI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(MI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(EI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17437/en/model_doc/mluke#transformers.MLukeTokenizer"),c(wI,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(AI,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(LI,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(yI,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(xI,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Tokenizer"),c($I,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5TokenizerFast"),c(kI,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpTokenizer"),c(SI,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(RI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizer"),c(II,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(qI,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(jI,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DI,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(GI,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(OI,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(VI,"href","/docs/transformers/pr_17437/en/model_doc/phobert#transformers.PhobertTokenizer"),c(XI,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartTokenizer"),c(zI,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(QI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(WI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(HI,"href","/docs/transformers/pr_17437/en/model_doc/rag#transformers.RagTokenizer"),c(UI,"href","/docs/transformers/pr_17437/en/model_doc/realm#transformers.RealmTokenizer"),c(JI,"href","/docs/transformers/pr_17437/en/model_doc/realm#transformers.RealmTokenizerFast"),c(YI,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerTokenizer"),c(KI,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertTokenizer"),c(eN,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(oN,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(rN,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(tN,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aN,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nN,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(sN,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(lN,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(iN,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(dN,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterTokenizer"),c(cN,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(fN,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(mN,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(gN,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Tokenizer"),c(hN,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5TokenizerFast"),c(pN,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasTokenizer"),c(_N,"href","/docs/transformers/pr_17437/en/model_doc/tapex#transformers.TapexTokenizer"),c(uN,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(bN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(vN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(FN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(TN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(MN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(wN,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMTokenizer"),c(AN,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LN,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMTokenizer"),c(yN,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(xN,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c($N,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(kN,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SN,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RN,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(PN,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(BN,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizer"),c(IN,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoFeatureExtractor"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoFeatureExtractor"),c(Ii,"class","relative group"),c(NN,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qN,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VN,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YN,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(eq,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_q,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"id","transformers.AutoProcessor"),c(pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pp,"href","#transformers.AutoProcessor"),c(Ni,"class","relative group"),c(uq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(bq,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPProcessor"),c(vq,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPProcessor"),c(Fq,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Tq,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Mq,"href","/docs/transformers/pr_17437/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Eq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Cq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wq,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Aq,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Lq,"href","/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($q,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltProcessor"),c(kq,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Sq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Rq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Pq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Np,"id","transformers.AutoModel"),c(Np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Np,"href","#transformers.AutoModel"),c(ji,"class","relative group"),c(Bq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qq,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertModel"),c(jq,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartModel"),c(Dq,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitModel"),c(Gq,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertModel"),c(Oq,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Vq,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdModel"),c(Xq,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(zq,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Qq,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Wq,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomModel"),c(Hq,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertModel"),c(Uq,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineModel"),c(Jq,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPModel"),c(Yq,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenModel"),c(Kq,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertModel"),c(Zq,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextModel"),c(ej,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLModel"),c(oj,"href","/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtModel"),c(rj,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(tj,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(aj,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(nj,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaModel"),c(sj,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(lj,"href","/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(ij,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTModel"),c(dj,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrModel"),c(cj,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertModel"),c(fj,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mj,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTModel"),c(gj,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraModel"),c(hj,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertModel"),c(pj,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaModel"),c(_j,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetModel"),c(uj,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTModel"),c(bj,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelModel"),c(vj,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Fj,"href","/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNModel"),c(Tj,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Model"),c(Mj,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Ej,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Cj,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJModel"),c(wj,"href","/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTModel"),c(Aj,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertModel"),c(Lj,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertModel"),c(yj,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(xj,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMModel"),c($j,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(kj,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Sj,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDModel"),c(Rj,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitModel"),c(Pj,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerModel"),c(Bj,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Model"),c(Ij,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeModel"),c(Nj,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertModel"),c(qj,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Model"),c(jj,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianModel"),c(Dj,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Gj,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartModel"),c(Oj,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTModel"),c(Vj,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Xj,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zj,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetModel"),c(Qj,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Model"),c(Wj,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpModel"),c(Hj,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaModel"),c(Uj,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Jj,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Yj,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTModel"),c(Kj,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusModel"),c(Zj,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverModel"),c(eD,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartModel"),c(oD,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rD,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tD,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aD,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModel"),c(nD,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetModel"),c(sD,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertModel"),c(lD,"href","/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetModel"),c(iD,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel"),c(dD,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaModel"),c(cD,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerModel"),c(fD,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerModel"),c(mD,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWModel"),c(gD,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDModel"),c(hD,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pD,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterModel"),c(_D,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(uD,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinModel"),c(bD,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Model"),c(vD,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasModel"),c(FD,"href","/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(TD,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(MD,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ED,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(CD,"href","/docs/transformers/pr_17437/en/model_doc/van#transformers.VanModel"),c(wD,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltModel"),c(AD,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(LD,"href","/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yD,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTModel"),c(xD,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEModel"),c($D,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(kD,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(SD,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMModel"),c(RD,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMModel"),c(PD,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMModel"),c(BD,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(ID,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ND,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(qD,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetModel"),c(jD,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosModel"),c(DD,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ou,"id","transformers.AutoModelForPreTraining"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModelForPreTraining"),c(Oi,"class","relative group"),c(GD,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForPreTraining"),c(zD,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForPreTraining"),c(WD,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(HD,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM"),c(UD,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(YD,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(KD,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eG,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rG,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tG,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaForPreTraining"),c(aG,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nG,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lG,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iG,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dG,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cG,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fG,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mG,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gG,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hG,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pG,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(uG,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bG,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel"),c(vG,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FG,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(TG,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MG,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CG,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wG,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AG,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(LG,"href","/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yG,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xG,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($G,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kG,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SG,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RG,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PG,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForCausalLM"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForCausalLM"),c(zi,"class","relative group"),c(BG,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IG,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qG,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForCausalLM"),c(jG,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertLMHeadModel"),c(DG,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GG,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(OG,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VG,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XG,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zG,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM"),c(QG,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(WG,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(HG,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UG,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(JG,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForCausalLM"),c(YG,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KG,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ZG,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(eO,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(oO,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianForCausalLM"),c(rO,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForCausalLM"),c(tO,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(aO,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForCausalLM"),c(nO,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sO,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTForCausalLM"),c(lO,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(iO,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(dO,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(cO,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(fO,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(mO,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(gO,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(hO,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(pO,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(_O,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uO,"href","/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(bO,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(vO,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(TO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(MO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(EO,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.AutoModelForMaskedLM"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.AutoModelForMaskedLM"),c(Hi,"class","relative group"),c(CO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(yO,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMaskedLM"),c($O,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(kO,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(SO,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(RO,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(PO,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(BO,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(IO,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(NO,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(qO,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(jO,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(DO,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(GO,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(VO,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(XO,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeForMaskedLM"),c(zO,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(UO,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(YO,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(KO,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(oV,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tV,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(aV,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sV,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lV,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iV,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dV,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.AutoModelForSeq2SeqLM"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.AutoModelForSeq2SeqLM"),c(Yi,"class","relative group"),c(cV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hV,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(pV,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(bV,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vV,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(FV,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(MV,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianMTModel"),c(EV,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.AutoModelForSequenceClassification"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.AutoModelForSequenceClassification"),c(ed,"class","relative group"),c(kV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N2,"id","transformers.AutoModelForMultipleChoice"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForMultipleChoice"),c(td,"class","relative group"),c($X,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(IX,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(qX,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(jX,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(DX,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(GX,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(OX,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(VX,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(XX,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(zX,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(QX,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(HX,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(az,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ub,"id","transformers.AutoModelForNextSentencePrediction"),c(ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ub,"href","#transformers.AutoModelForNextSentencePrediction"),c(sd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(gz,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(hz,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(pz,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(_z,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(uz,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForTokenClassification"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForTokenClassification"),c(dd,"class","relative group"),c(bz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(wz,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Az,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yz,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(xz,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c($z,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(kz,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(jz,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zz,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForQuestionAnswering"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForQuestionAnswering"),c(md,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(FQ,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17437/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(XQ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(WQ,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.AutoModelForTableQuestionAnswering"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(pd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.AutoModelForImageClassification"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.AutoModelForImageClassification"),c(bd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForImageClassification"),c(rW,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(tW,"href","/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtForImageClassification"),c(aW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(nW,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassification"),c(sW,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(lW,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(iW,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassification"),c(dW,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(cW,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fW,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mW,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gW,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hW,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(pW,"href","/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(_W,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(uW,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForImageClassification"),c(bW,"href","/docs/transformers/pr_17437/en/model_doc/van#transformers.VanForImageClassification"),c(vW,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.AutoModelForVision2Seq"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.AutoModelForVision2Seq"),c(Td,"class","relative group"),c(FW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.AutoModelForVisualQuestionAnswering"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Cd,"class","relative group"),c(CW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.AutoModelForAudioClassification"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.AutoModelForAudioClassification"),c(Ld,"class","relative group"),c(yW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.AutoModelForAudioFrameClassification"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.AutoModelForAudioFrameClassification"),c($d,"class","relative group"),c(DW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(XW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(zW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(QW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(WW,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForCTC"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForCTC"),c(Rd,"class","relative group"),c(HW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(KW,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForCTC"),c(ZW,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTForCTC"),c(eH,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForCTC"),c(oH,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForCTC"),c(rH,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(tH,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(aH,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(nH,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(sH,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(lH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(fH,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForAudioXVector"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForAudioXVector"),c(jd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(_H,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(uH,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(bH,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(vH,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForMaskedImageModeling"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(FH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(CH,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(wH,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForObjectDetection"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForObjectDetection"),c(Qd,"class","relative group"),c(AH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForObjectDetection"),c($H,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForImageSegmentation"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(kH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForSemanticSegmentation"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(BH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(jH,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(DH,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(GH,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForInstanceSegmentation"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForInstanceSegmentation"),c(oc,"class","relative group"),c(OH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.TFAutoModel"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.TFAutoModel"),c(ac,"class","relative group"),c(QH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertModel"),c(JH,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartModel"),c(YH,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertModel"),c(KH,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(ZH,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(eU,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertModel"),c(oU,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.TFCLIPModel"),c(rU,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertModel"),c(tU,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextModel"),c(aU,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLModel"),c(nU,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(sU,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaModel"),c(lU,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(iU,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(dU,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(cU,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraModel"),c(fU,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(mU,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelModel"),c(gU,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(hU,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2Model"),c(pU,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJModel"),c(_U,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.TFHubertModel"),c(uU,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(bU,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDModel"),c(vU,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerModel"),c(FU,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertModel"),c(TU,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianModel"),c(MU,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartModel"),c(EU,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(CU,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetModel"),c(wU,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5Model"),c(AU,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(LU,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTModel"),c(yU,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusModel"),c(xU,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.TFRegNetModel"),c($U,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertModel"),c(kU,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaModel"),c(SU,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerModel"),c(RU,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(PU,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinModel"),c(BU,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5Model"),c(IU,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasModel"),c(NU,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(qU,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTModel"),c(jU,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(DU,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(GU,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMModel"),c(OU,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(VU,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForPreTraining"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForPreTraining"),c(lc,"class","relative group"),c(XU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(HU,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForPreTraining"),c(JU,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(YU,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(KU,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(eJ,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(oJ,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(rJ,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(tJ,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(nJ,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(sJ,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iJ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mJ,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(gJ,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hJ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForCausalLM"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForCausalLM"),c(cc,"class","relative group"),c(_J,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(FJ,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(TJ,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EJ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(CJ,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wJ,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(AJ,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(LJ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(yJ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(xJ,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($J,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kJ,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForImageClassification"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForImageClassification"),c(gc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(IJ,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(NJ,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(qJ,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(jJ,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForMaskedLM"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForMaskedLM"),c(_c,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(UJ,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(JJ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(YJ,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(KJ,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(ZJ,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(eY,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(oY,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(rY,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(tY,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(aY,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(nY,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(sY,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(lY,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iY,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(vc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(_Y,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianMTModel"),c(bY,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForSequenceClassification"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Mc,"class","relative group"),c(MY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(PY,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(BY,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.TFAutoModelForMultipleChoice"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForMultipleChoice"),c(wc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(oK,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(rK,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(tK,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(aK,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(nK,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(sK,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(lK,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(iK,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(dK,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(cK,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(fK,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(gK,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(yc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(TK,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(kc,"class","relative group"),c(MK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.TFAutoModelForTokenClassification"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForTokenClassification"),c(Pc,"class","relative group"),c(AK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c($K,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(kK,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(SK,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(RK,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(PK,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(BK,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(IK,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NK,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qK,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(jK,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(DK,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(GK,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(VK,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(XK,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(zK,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(QK,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(WK,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(HK,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.TFAutoModelForQuestionAnswering"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Nc,"class","relative group"),c(UK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(ZK,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(eZ,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(lZ,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(dZ,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(fZ,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_Z,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.TFAutoModelForVision2Seq"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.TFAutoModelForVision2Seq"),c(Dc,"class","relative group"),c(bZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TZ,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Vc,"class","relative group"),c(MZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wZ,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModel"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModel"),c(Qc,"class","relative group"),c(AZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertModel"),c($Z,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartModel"),c(kZ,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitModel"),c(SZ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertModel"),c(RZ,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PZ,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(BZ,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(IZ,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NZ,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qZ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraModel"),c(jZ,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(DZ,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(GZ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(OZ,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(VZ,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianModel"),c(XZ,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zZ,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QZ,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTModel"),c(WZ,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(HZ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(UZ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(JZ,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5Model"),c(YZ,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(KZ,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTModel"),c(ZZ,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(eee,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(oee,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.FlaxAutoModelForCausalLM"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Uc,"class","relative group"),c(ree,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(see,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(lee,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(iee,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(dee,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(cee,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(fee,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(mee,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(gee,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(hee,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForPreTraining"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Kc,"class","relative group"),c(pee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(vee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Tee,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Mee,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Eee,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wee,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Aee,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Lee,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(yee,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xee,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c($ee,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForMaskedLM"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(of,"class","relative group"),c(kee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(See,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ree,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pee,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Bee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Iee,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Nee,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(qee,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(jee,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Dee,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Gee,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Oee,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Vee,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(af,"class","relative group"),c(Xee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Yee,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Zee,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(lf,"class","relative group"),c(toe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(loe,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ioe,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(doe,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(coe,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(foe,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(moe,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(goe,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(hoe,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(poe,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(ff,"class","relative group"),c(_oe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(boe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(voe,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Foe,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Toe,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Moe,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Eoe,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Coe,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(woe,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Aoe,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Loe,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(yoe,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zw,"id","transformers.FlaxAutoModelForTokenClassification"),c(zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(hf,"class","relative group"),c(xoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($oe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(koe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Soe,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Roe,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Poe,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Boe,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Ioe,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Noe,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(qoe,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(joe,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(uf,"class","relative group"),c(Doe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Xoe,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(zoe,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Qoe,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Woe,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Hoe,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Uoe,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Joe,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(gA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ff,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uA,"id","transformers.FlaxAutoModelForImageClassification"),c(uA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ef,"class","relative group"),c(ore,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(nre,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MA,"id","transformers.FlaxAutoModelForVision2Seq"),c(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Af,"class","relative group"),c(sre,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lre,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ire,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dre,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,wi),b(f,Sf,u),b(f,nt,u),e(nt,Ai),e(nt,Li),e(Li,zL),e(nt,Rf),b(f,Oe,u),b(f,Qe,u),e(Qe,yi),e(Qe,Rn),e(Rn,QL),e(Qe,Pn),e(Qe,Bn),e(Bn,WL),e(Qe,xi),e(Qe,In),e(In,HL),e(Qe,$i),b(f,Pf,u),M($a,f,u),b(f,We,u),b(f,Ae,u),e(Ae,wS),e(Ae,ki),e(ki,AS),e(Ae,LS),b(f,Co,u),b(f,ka,u),e(ka,yS),e(ka,Bf),e(Bf,xS),e(ka,xWe),b(f,hVe,u),b(f,Si,u),e(Si,If),e(If,aae),M(UL,aae,null),e(Si,$We),e(Si,nae),e(nae,kWe),b(f,pVe,u),b(f,Nn,u),e(Nn,SWe),e(Nn,sae),e(sae,RWe),e(Nn,PWe),e(Nn,lae),e(lae,BWe),e(Nn,IWe),b(f,_Ve,u),M(JL,f,u),b(f,uVe,u),b(f,$S,u),e($S,NWe),b(f,bVe,u),M(Nf,f,u),b(f,vVe,u),b(f,Ri,u),e(Ri,qf),e(qf,iae),M(YL,iae,null),e(Ri,qWe),e(Ri,dae),e(dae,jWe),b(f,FVe,u),b(f,wo,u),M(KL,wo,null),e(wo,DWe),e(wo,ZL),e(ZL,GWe),e(ZL,kS),e(kS,OWe),e(ZL,VWe),e(wo,XWe),e(wo,ey),e(ey,zWe),e(ey,cae),e(cae,QWe),e(ey,WWe),e(wo,HWe),e(wo,Ar),M(oy,Ar,null),e(Ar,UWe),e(Ar,fae),e(fae,JWe),e(Ar,YWe),e(Ar,Pi),e(Pi,KWe),e(Pi,mae),e(mae,ZWe),e(Pi,eHe),e(Pi,gae),e(gae,oHe),e(Pi,rHe),e(Ar,tHe),e(Ar,A),e(A,jf),e(jf,hae),e(hae,aHe),e(jf,nHe),e(jf,SS),e(SS,sHe),e(jf,lHe),e(A,iHe),e(A,Df),e(Df,pae),e(pae,dHe),e(Df,cHe),e(Df,RS),e(RS,fHe),e(Df,mHe),e(A,gHe),e(A,Gf),e(Gf,_ae),e(_ae,hHe),e(Gf,pHe),e(Gf,PS),e(PS,_He),e(Gf,uHe),e(A,bHe),e(A,Of),e(Of,uae),e(uae,vHe),e(Of,FHe),e(Of,BS),e(BS,THe),e(Of,MHe),e(A,EHe),e(A,Vf),e(Vf,bae),e(bae,CHe),e(Vf,wHe),e(Vf,IS),e(IS,AHe),e(Vf,LHe),e(A,yHe),e(A,Xf),e(Xf,vae),e(vae,xHe),e(Xf,$He),e(Xf,NS),e(NS,kHe),e(Xf,SHe),e(A,RHe),e(A,zf),e(zf,Fae),e(Fae,PHe),e(zf,BHe),e(zf,qS),e(qS,IHe),e(zf,NHe),e(A,qHe),e(A,Qf),e(Qf,Tae),e(Tae,jHe),e(Qf,DHe),e(Qf,jS),e(jS,GHe),e(Qf,OHe),e(A,VHe),e(A,Wf),e(Wf,Mae),e(Mae,XHe),e(Wf,zHe),e(Wf,DS),e(DS,QHe),e(Wf,WHe),e(A,HHe),e(A,Hf),e(Hf,Eae),e(Eae,UHe),e(Hf,JHe),e(Hf,GS),e(GS,YHe),e(Hf,KHe),e(A,ZHe),e(A,Uf),e(Uf,Cae),e(Cae,eUe),e(Uf,oUe),e(Uf,OS),e(OS,rUe),e(Uf,tUe),e(A,aUe),e(A,Jf),e(Jf,wae),e(wae,nUe),e(Jf,sUe),e(Jf,VS),e(VS,lUe),e(Jf,iUe),e(A,dUe),e(A,Yf),e(Yf,Aae),e(Aae,cUe),e(Yf,fUe),e(Yf,XS),e(XS,mUe),e(Yf,gUe),e(A,hUe),e(A,Kf),e(Kf,Lae),e(Lae,pUe),e(Kf,_Ue),e(Kf,zS),e(zS,uUe),e(Kf,bUe),e(A,vUe),e(A,Zf),e(Zf,yae),e(yae,FUe),e(Zf,TUe),e(Zf,QS),e(QS,MUe),e(Zf,EUe),e(A,CUe),e(A,em),e(em,xae),e(xae,wUe),e(em,AUe),e(em,WS),e(WS,LUe),e(em,yUe),e(A,xUe),e(A,om),e(om,$ae),e($ae,$Ue),e(om,kUe),e(om,HS),e(HS,SUe),e(om,RUe),e(A,PUe),e(A,rm),e(rm,kae),e(kae,BUe),e(rm,IUe),e(rm,US),e(US,NUe),e(rm,qUe),e(A,jUe),e(A,tm),e(tm,Sae),e(Sae,DUe),e(tm,GUe),e(tm,JS),e(JS,OUe),e(tm,VUe),e(A,XUe),e(A,am),e(am,Rae),e(Rae,zUe),e(am,QUe),e(am,YS),e(YS,WUe),e(am,HUe),e(A,UUe),e(A,nm),e(nm,Pae),e(Pae,JUe),e(nm,YUe),e(nm,KS),e(KS,KUe),e(nm,ZUe),e(A,eJe),e(A,sm),e(sm,Bae),e(Bae,oJe),e(sm,rJe),e(sm,ZS),e(ZS,tJe),e(sm,aJe),e(A,nJe),e(A,lm),e(lm,Iae),e(Iae,sJe),e(lm,lJe),e(lm,eR),e(eR,iJe),e(lm,dJe),e(A,cJe),e(A,im),e(im,Nae),e(Nae,fJe),e(im,mJe),e(im,oR),e(oR,gJe),e(im,hJe),e(A,pJe),e(A,dm),e(dm,qae),e(qae,_Je),e(dm,uJe),e(dm,rR),e(rR,bJe),e(dm,vJe),e(A,FJe),e(A,cm),e(cm,jae),e(jae,TJe),e(cm,MJe),e(cm,tR),e(tR,EJe),e(cm,CJe),e(A,wJe),e(A,fm),e(fm,Dae),e(Dae,AJe),e(fm,LJe),e(fm,aR),e(aR,yJe),e(fm,xJe),e(A,$Je),e(A,mm),e(mm,Gae),e(Gae,kJe),e(mm,SJe),e(mm,nR),e(nR,RJe),e(mm,PJe),e(A,BJe),e(A,gm),e(gm,Oae),e(Oae,IJe),e(gm,NJe),e(gm,sR),e(sR,qJe),e(gm,jJe),e(A,DJe),e(A,hm),e(hm,Vae),e(Vae,GJe),e(hm,OJe),e(hm,lR),e(lR,VJe),e(hm,XJe),e(A,zJe),e(A,pm),e(pm,Xae),e(Xae,QJe),e(pm,WJe),e(pm,iR),e(iR,HJe),e(pm,UJe),e(A,JJe),e(A,_m),e(_m,zae),e(zae,YJe),e(_m,KJe),e(_m,dR),e(dR,ZJe),e(_m,eYe),e(A,oYe),e(A,um),e(um,Qae),e(Qae,rYe),e(um,tYe),e(um,cR),e(cR,aYe),e(um,nYe),e(A,sYe),e(A,bm),e(bm,Wae),e(Wae,lYe),e(bm,iYe),e(bm,fR),e(fR,dYe),e(bm,cYe),e(A,fYe),e(A,vm),e(vm,Hae),e(Hae,mYe),e(vm,gYe),e(vm,mR),e(mR,hYe),e(vm,pYe),e(A,_Ye),e(A,Fm),e(Fm,Uae),e(Uae,uYe),e(Fm,bYe),e(Fm,gR),e(gR,vYe),e(Fm,FYe),e(A,TYe),e(A,Tm),e(Tm,Jae),e(Jae,MYe),e(Tm,EYe),e(Tm,hR),e(hR,CYe),e(Tm,wYe),e(A,AYe),e(A,Mm),e(Mm,Yae),e(Yae,LYe),e(Mm,yYe),e(Mm,pR),e(pR,xYe),e(Mm,$Ye),e(A,kYe),e(A,Em),e(Em,Kae),e(Kae,SYe),e(Em,RYe),e(Em,_R),e(_R,PYe),e(Em,BYe),e(A,IYe),e(A,Cm),e(Cm,Zae),e(Zae,NYe),e(Cm,qYe),e(Cm,uR),e(uR,jYe),e(Cm,DYe),e(A,GYe),e(A,wm),e(wm,ene),e(ene,OYe),e(wm,VYe),e(wm,bR),e(bR,XYe),e(wm,zYe),e(A,QYe),e(A,Am),e(Am,one),e(one,WYe),e(Am,HYe),e(Am,vR),e(vR,UYe),e(Am,JYe),e(A,YYe),e(A,Lm),e(Lm,rne),e(rne,KYe),e(Lm,ZYe),e(Lm,FR),e(FR,eKe),e(Lm,oKe),e(A,rKe),e(A,ym),e(ym,tne),e(tne,tKe),e(ym,aKe),e(ym,TR),e(TR,nKe),e(ym,sKe),e(A,lKe),e(A,xm),e(xm,ane),e(ane,iKe),e(xm,dKe),e(xm,MR),e(MR,cKe),e(xm,fKe),e(A,mKe),e(A,$m),e($m,nne),e(nne,gKe),e($m,hKe),e($m,ER),e(ER,pKe),e($m,_Ke),e(A,uKe),e(A,km),e(km,sne),e(sne,bKe),e(km,vKe),e(km,CR),e(CR,FKe),e(km,TKe),e(A,MKe),e(A,Sm),e(Sm,lne),e(lne,EKe),e(Sm,CKe),e(Sm,wR),e(wR,wKe),e(Sm,AKe),e(A,LKe),e(A,Rm),e(Rm,ine),e(ine,yKe),e(Rm,xKe),e(Rm,AR),e(AR,$Ke),e(Rm,kKe),e(A,SKe),e(A,Pm),e(Pm,dne),e(dne,RKe),e(Pm,PKe),e(Pm,LR),e(LR,BKe),e(Pm,IKe),e(A,NKe),e(A,Bm),e(Bm,cne),e(cne,qKe),e(Bm,jKe),e(Bm,yR),e(yR,DKe),e(Bm,GKe),e(A,OKe),e(A,Im),e(Im,fne),e(fne,VKe),e(Im,XKe),e(Im,xR),e(xR,zKe),e(Im,QKe),e(A,WKe),e(A,Nm),e(Nm,mne),e(mne,HKe),e(Nm,UKe),e(Nm,$R),e($R,JKe),e(Nm,YKe),e(A,KKe),e(A,qm),e(qm,gne),e(gne,ZKe),e(qm,eZe),e(qm,kR),e(kR,oZe),e(qm,rZe),e(A,tZe),e(A,jm),e(jm,hne),e(hne,aZe),e(jm,nZe),e(jm,SR),e(SR,sZe),e(jm,lZe),e(A,iZe),e(A,Dm),e(Dm,pne),e(pne,dZe),e(Dm,cZe),e(Dm,RR),e(RR,fZe),e(Dm,mZe),e(A,gZe),e(A,Gm),e(Gm,_ne),e(_ne,hZe),e(Gm,pZe),e(Gm,PR),e(PR,_Ze),e(Gm,uZe),e(A,bZe),e(A,Om),e(Om,une),e(une,vZe),e(Om,FZe),e(Om,BR),e(BR,TZe),e(Om,MZe),e(A,EZe),e(A,Vm),e(Vm,bne),e(bne,CZe),e(Vm,wZe),e(Vm,IR),e(IR,AZe),e(Vm,LZe),e(A,yZe),e(A,Xm),e(Xm,vne),e(vne,xZe),e(Xm,$Ze),e(Xm,NR),e(NR,kZe),e(Xm,SZe),e(A,RZe),e(A,zm),e(zm,Fne),e(Fne,PZe),e(zm,BZe),e(zm,qR),e(qR,IZe),e(zm,NZe),e(A,qZe),e(A,Qm),e(Qm,Tne),e(Tne,jZe),e(Qm,DZe),e(Qm,jR),e(jR,GZe),e(Qm,OZe),e(A,VZe),e(A,Wm),e(Wm,Mne),e(Mne,XZe),e(Wm,zZe),e(Wm,DR),e(DR,QZe),e(Wm,WZe),e(A,HZe),e(A,Hm),e(Hm,Ene),e(Ene,UZe),e(Hm,JZe),e(Hm,GR),e(GR,YZe),e(Hm,KZe),e(A,ZZe),e(A,Um),e(Um,Cne),e(Cne,eeo),e(Um,oeo),e(Um,OR),e(OR,reo),e(Um,teo),e(A,aeo),e(A,Jm),e(Jm,wne),e(wne,neo),e(Jm,seo),e(Jm,VR),e(VR,leo),e(Jm,ieo),e(A,deo),e(A,Ym),e(Ym,Ane),e(Ane,ceo),e(Ym,feo),e(Ym,XR),e(XR,meo),e(Ym,geo),e(A,heo),e(A,Km),e(Km,Lne),e(Lne,peo),e(Km,_eo),e(Km,zR),e(zR,ueo),e(Km,beo),e(A,veo),e(A,Zm),e(Zm,yne),e(yne,Feo),e(Zm,Teo),e(Zm,QR),e(QR,Meo),e(Zm,Eeo),e(A,Ceo),e(A,eg),e(eg,xne),e(xne,weo),e(eg,Aeo),e(eg,WR),e(WR,Leo),e(eg,yeo),e(A,xeo),e(A,og),e(og,$ne),e($ne,$eo),e(og,keo),e(og,HR),e(HR,Seo),e(og,Reo),e(A,Peo),e(A,rg),e(rg,kne),e(kne,Beo),e(rg,Ieo),e(rg,UR),e(UR,Neo),e(rg,qeo),e(A,jeo),e(A,tg),e(tg,Sne),e(Sne,Deo),e(tg,Geo),e(tg,JR),e(JR,Oeo),e(tg,Veo),e(A,Xeo),e(A,ag),e(ag,Rne),e(Rne,zeo),e(ag,Qeo),e(ag,YR),e(YR,Weo),e(ag,Heo),e(A,Ueo),e(A,ng),e(ng,Pne),e(Pne,Jeo),e(ng,Yeo),e(ng,KR),e(KR,Keo),e(ng,Zeo),e(A,eoo),e(A,sg),e(sg,Bne),e(Bne,ooo),e(sg,roo),e(sg,ZR),e(ZR,too),e(sg,aoo),e(A,noo),e(A,lg),e(lg,Ine),e(Ine,soo),e(lg,loo),e(lg,eP),e(eP,ioo),e(lg,doo),e(A,coo),e(A,ig),e(ig,Nne),e(Nne,foo),e(ig,moo),e(ig,oP),e(oP,goo),e(ig,hoo),e(A,poo),e(A,dg),e(dg,qne),e(qne,_oo),e(dg,uoo),e(dg,rP),e(rP,boo),e(dg,voo),e(A,Foo),e(A,cg),e(cg,jne),e(jne,Too),e(cg,Moo),e(cg,tP),e(tP,Eoo),e(cg,Coo),e(A,woo),e(A,fg),e(fg,Dne),e(Dne,Aoo),e(fg,Loo),e(fg,aP),e(aP,yoo),e(fg,xoo),e(A,$oo),e(A,mg),e(mg,Gne),e(Gne,koo),e(mg,Soo),e(mg,nP),e(nP,Roo),e(mg,Poo),e(A,Boo),e(A,gg),e(gg,One),e(One,Ioo),e(gg,Noo),e(gg,sP),e(sP,qoo),e(gg,joo),e(A,Doo),e(A,hg),e(hg,Vne),e(Vne,Goo),e(hg,Ooo),e(hg,lP),e(lP,Voo),e(hg,Xoo),e(A,zoo),e(A,pg),e(pg,Xne),e(Xne,Qoo),e(pg,Woo),e(pg,iP),e(iP,Hoo),e(pg,Uoo),e(A,Joo),e(A,_g),e(_g,zne),e(zne,Yoo),e(_g,Koo),e(_g,dP),e(dP,Zoo),e(_g,ero),e(A,oro),e(A,ug),e(ug,Qne),e(Qne,rro),e(ug,tro),e(ug,cP),e(cP,aro),e(ug,nro),e(A,sro),e(A,bg),e(bg,Wne),e(Wne,lro),e(bg,iro),e(bg,fP),e(fP,dro),e(bg,cro),e(A,fro),e(A,vg),e(vg,Hne),e(Hne,mro),e(vg,gro),e(vg,mP),e(mP,hro),e(vg,pro),e(A,_ro),e(A,Fg),e(Fg,Une),e(Une,uro),e(Fg,bro),e(Fg,gP),e(gP,vro),e(Fg,Fro),e(A,Tro),e(A,Tg),e(Tg,Jne),e(Jne,Mro),e(Tg,Ero),e(Tg,hP),e(hP,Cro),e(Tg,wro),e(A,Aro),e(A,Mg),e(Mg,Yne),e(Yne,Lro),e(Mg,yro),e(Mg,pP),e(pP,xro),e(Mg,$ro),e(A,kro),e(A,Eg),e(Eg,Kne),e(Kne,Sro),e(Eg,Rro),e(Eg,_P),e(_P,Pro),e(Eg,Bro),e(A,Iro),e(A,Cg),e(Cg,Zne),e(Zne,Nro),e(Cg,qro),e(Cg,uP),e(uP,jro),e(Cg,Dro),e(A,Gro),e(A,wg),e(wg,ese),e(ese,Oro),e(wg,Vro),e(wg,bP),e(bP,Xro),e(wg,zro),e(A,Qro),e(A,Ag),e(Ag,ose),e(ose,Wro),e(Ag,Hro),e(Ag,vP),e(vP,Uro),e(Ag,Jro),e(A,Yro),e(A,Lg),e(Lg,rse),e(rse,Kro),e(Lg,Zro),e(Lg,FP),e(FP,eto),e(Lg,oto),e(A,rto),e(A,yg),e(yg,tse),e(tse,tto),e(yg,ato),e(yg,TP),e(TP,nto),e(yg,sto),e(A,lto),e(A,xg),e(xg,ase),e(ase,ito),e(xg,dto),e(xg,MP),e(MP,cto),e(xg,fto),e(A,mto),e(A,$g),e($g,nse),e(nse,gto),e($g,hto),e($g,EP),e(EP,pto),e($g,_to),e(A,uto),e(A,kg),e(kg,sse),e(sse,bto),e(kg,vto),e(kg,CP),e(CP,Fto),e(kg,Tto),e(A,Mto),e(A,Sg),e(Sg,lse),e(lse,Eto),e(Sg,Cto),e(Sg,wP),e(wP,wto),e(Sg,Ato),e(A,Lto),e(A,Rg),e(Rg,ise),e(ise,yto),e(Rg,xto),e(Rg,AP),e(AP,$to),e(Rg,kto),e(A,Sto),e(A,Pg),e(Pg,dse),e(dse,Rto),e(Pg,Pto),e(Pg,LP),e(LP,Bto),e(Pg,Ito),e(A,Nto),e(A,Bg),e(Bg,cse),e(cse,qto),e(Bg,jto),e(Bg,yP),e(yP,Dto),e(Bg,Gto),e(A,Oto),e(A,Ig),e(Ig,fse),e(fse,Vto),e(Ig,Xto),e(Ig,xP),e(xP,zto),e(Ig,Qto),e(A,Wto),e(A,Ng),e(Ng,mse),e(mse,Hto),e(Ng,Uto),e(Ng,$P),e($P,Jto),e(Ng,Yto),e(A,Kto),e(A,qg),e(qg,gse),e(gse,Zto),e(qg,eao),e(qg,kP),e(kP,oao),e(qg,rao),e(A,tao),e(A,jg),e(jg,hse),e(hse,aao),e(jg,nao),e(jg,SP),e(SP,sao),e(jg,lao),e(A,iao),e(A,Dg),e(Dg,pse),e(pse,dao),e(Dg,cao),e(Dg,RP),e(RP,fao),e(Dg,mao),e(A,gao),e(A,Gg),e(Gg,_se),e(_se,hao),e(Gg,pao),e(Gg,PP),e(PP,_ao),e(Gg,uao),e(A,bao),e(A,Og),e(Og,use),e(use,vao),e(Og,Fao),e(Og,BP),e(BP,Tao),e(Og,Mao),e(A,Eao),e(A,Vg),e(Vg,bse),e(bse,Cao),e(Vg,wao),e(Vg,IP),e(IP,Aao),e(Vg,Lao),e(A,yao),e(A,Xg),e(Xg,vse),e(vse,xao),e(Xg,$ao),e(Xg,NP),e(NP,kao),e(Xg,Sao),e(A,Rao),e(A,zg),e(zg,Fse),e(Fse,Pao),e(zg,Bao),e(zg,qP),e(qP,Iao),e(zg,Nao),e(A,qao),e(A,Qg),e(Qg,Tse),e(Tse,jao),e(Qg,Dao),e(Qg,jP),e(jP,Gao),e(Qg,Oao),e(A,Vao),e(A,Wg),e(Wg,Mse),e(Mse,Xao),e(Wg,zao),e(Wg,DP),e(DP,Qao),e(Wg,Wao),e(Ar,Hao),M(Hg,Ar,null),e(wo,Uao),e(wo,Ug),M(ry,Ug,null),e(Ug,Jao),e(Ug,Ese),e(Ese,Yao),b(f,TVe,u),b(f,Bi,u),e(Bi,Jg),e(Jg,Cse),M(ty,Cse,null),e(Bi,Kao),e(Bi,wse),e(wse,Zao),b(f,MVe,u),b(f,Ao,u),M(ay,Ao,null),e(Ao,eno),e(Ao,ny),e(ny,ono),e(ny,GP),e(GP,rno),e(ny,tno),e(Ao,ano),e(Ao,sy),e(sy,nno),e(sy,Ase),e(Ase,sno),e(sy,lno),e(Ao,ino),e(Ao,Lr),M(ly,Lr,null),e(Lr,dno),e(Lr,Lse),e(Lse,cno),e(Lr,fno),e(Lr,Sa),e(Sa,mno),e(Sa,yse),e(yse,gno),e(Sa,hno),e(Sa,xse),e(xse,pno),e(Sa,_no),e(Sa,$se),e($se,uno),e(Sa,bno),e(Lr,vno),e(Lr,k),e(k,qn),e(qn,kse),e(kse,Fno),e(qn,Tno),e(qn,OP),e(OP,Mno),e(qn,Eno),e(qn,VP),e(VP,Cno),e(qn,wno),e(k,Ano),e(k,jn),e(jn,Sse),e(Sse,Lno),e(jn,yno),e(jn,XP),e(XP,xno),e(jn,$no),e(jn,zP),e(zP,kno),e(jn,Sno),e(k,Rno),e(k,Dn),e(Dn,Rse),e(Rse,Pno),e(Dn,Bno),e(Dn,QP),e(QP,Ino),e(Dn,Nno),e(Dn,WP),e(WP,qno),e(Dn,jno),e(k,Dno),e(k,Yg),e(Yg,Pse),e(Pse,Gno),e(Yg,Ono),e(Yg,HP),e(HP,Vno),e(Yg,Xno),e(k,zno),e(k,Gn),e(Gn,Bse),e(Bse,Qno),e(Gn,Wno),e(Gn,UP),e(UP,Hno),e(Gn,Uno),e(Gn,JP),e(JP,Jno),e(Gn,Yno),e(k,Kno),e(k,Kg),e(Kg,Ise),e(Ise,Zno),e(Kg,eso),e(Kg,YP),e(YP,oso),e(Kg,rso),e(k,tso),e(k,Zg),e(Zg,Nse),e(Nse,aso),e(Zg,nso),e(Zg,KP),e(KP,sso),e(Zg,lso),e(k,iso),e(k,eh),e(eh,qse),e(qse,dso),e(eh,cso),e(eh,ZP),e(ZP,fso),e(eh,mso),e(k,gso),e(k,On),e(On,jse),e(jse,hso),e(On,pso),e(On,eB),e(eB,_so),e(On,uso),e(On,oB),e(oB,bso),e(On,vso),e(k,Fso),e(k,Vn),e(Vn,Dse),e(Dse,Tso),e(Vn,Mso),e(Vn,rB),e(rB,Eso),e(Vn,Cso),e(Vn,tB),e(tB,wso),e(Vn,Aso),e(k,Lso),e(k,Xn),e(Xn,Gse),e(Gse,yso),e(Xn,xso),e(Xn,aB),e(aB,$so),e(Xn,kso),e(Xn,nB),e(nB,Sso),e(Xn,Rso),e(k,Pso),e(k,oh),e(oh,Ose),e(Ose,Bso),e(oh,Iso),e(oh,sB),e(sB,Nso),e(oh,qso),e(k,jso),e(k,rh),e(rh,Vse),e(Vse,Dso),e(rh,Gso),e(rh,lB),e(lB,Oso),e(rh,Vso),e(k,Xso),e(k,th),e(th,Xse),e(Xse,zso),e(th,Qso),e(th,iB),e(iB,Wso),e(th,Hso),e(k,Uso),e(k,zn),e(zn,zse),e(zse,Jso),e(zn,Yso),e(zn,dB),e(dB,Kso),e(zn,Zso),e(zn,cB),e(cB,elo),e(zn,olo),e(k,rlo),e(k,ah),e(ah,Qse),e(Qse,tlo),e(ah,alo),e(ah,fB),e(fB,nlo),e(ah,slo),e(k,llo),e(k,Qn),e(Qn,Wse),e(Wse,ilo),e(Qn,dlo),e(Qn,mB),e(mB,clo),e(Qn,flo),e(Qn,gB),e(gB,mlo),e(Qn,glo),e(k,hlo),e(k,Wn),e(Wn,Hse),e(Hse,plo),e(Wn,_lo),e(Wn,hB),e(hB,ulo),e(Wn,blo),e(Wn,pB),e(pB,vlo),e(Wn,Flo),e(k,Tlo),e(k,Hn),e(Hn,Use),e(Use,Mlo),e(Hn,Elo),e(Hn,_B),e(_B,Clo),e(Hn,wlo),e(Hn,uB),e(uB,Alo),e(Hn,Llo),e(k,ylo),e(k,Un),e(Un,Jse),e(Jse,xlo),e(Un,$lo),e(Un,bB),e(bB,klo),e(Un,Slo),e(Un,vB),e(vB,Rlo),e(Un,Plo),e(k,Blo),e(k,nh),e(nh,Yse),e(Yse,Ilo),e(nh,Nlo),e(nh,FB),e(FB,qlo),e(nh,jlo),e(k,Dlo),e(k,Jn),e(Jn,Kse),e(Kse,Glo),e(Jn,Olo),e(Jn,TB),e(TB,Vlo),e(Jn,Xlo),e(Jn,MB),e(MB,zlo),e(Jn,Qlo),e(k,Wlo),e(k,Yn),e(Yn,Zse),e(Zse,Hlo),e(Yn,Ulo),e(Yn,EB),e(EB,Jlo),e(Yn,Ylo),e(Yn,CB),e(CB,Klo),e(Yn,Zlo),e(k,eio),e(k,Kn),e(Kn,ele),e(ele,oio),e(Kn,rio),e(Kn,wB),e(wB,tio),e(Kn,aio),e(Kn,AB),e(AB,nio),e(Kn,sio),e(k,lio),e(k,Zn),e(Zn,ole),e(ole,iio),e(Zn,dio),e(Zn,LB),e(LB,cio),e(Zn,fio),e(Zn,yB),e(yB,mio),e(Zn,gio),e(k,hio),e(k,es),e(es,rle),e(rle,pio),e(es,_io),e(es,xB),e(xB,uio),e(es,bio),e(es,$B),e($B,vio),e(es,Fio),e(k,Tio),e(k,os),e(os,tle),e(tle,Mio),e(os,Eio),e(os,kB),e(kB,Cio),e(os,wio),e(os,SB),e(SB,Aio),e(os,Lio),e(k,yio),e(k,sh),e(sh,ale),e(ale,xio),e(sh,$io),e(sh,RB),e(RB,kio),e(sh,Sio),e(k,Rio),e(k,rs),e(rs,nle),e(nle,Pio),e(rs,Bio),e(rs,PB),e(PB,Iio),e(rs,Nio),e(rs,BB),e(BB,qio),e(rs,jio),e(k,Dio),e(k,lh),e(lh,sle),e(sle,Gio),e(lh,Oio),e(lh,IB),e(IB,Vio),e(lh,Xio),e(k,zio),e(k,ts),e(ts,lle),e(lle,Qio),e(ts,Wio),e(ts,NB),e(NB,Hio),e(ts,Uio),e(ts,qB),e(qB,Jio),e(ts,Yio),e(k,Kio),e(k,as),e(as,ile),e(ile,Zio),e(as,edo),e(as,jB),e(jB,odo),e(as,rdo),e(as,DB),e(DB,tdo),e(as,ado),e(k,ndo),e(k,ns),e(ns,dle),e(dle,sdo),e(ns,ldo),e(ns,GB),e(GB,ido),e(ns,ddo),e(ns,OB),e(OB,cdo),e(ns,fdo),e(k,mdo),e(k,ih),e(ih,cle),e(cle,gdo),e(ih,hdo),e(ih,VB),e(VB,pdo),e(ih,_do),e(k,udo),e(k,ss),e(ss,fle),e(fle,bdo),e(ss,vdo),e(ss,XB),e(XB,Fdo),e(ss,Tdo),e(ss,zB),e(zB,Mdo),e(ss,Edo),e(k,Cdo),e(k,ls),e(ls,mle),e(mle,wdo),e(ls,Ado),e(ls,QB),e(QB,Ldo),e(ls,ydo),e(ls,WB),e(WB,xdo),e(ls,$do),e(k,kdo),e(k,is),e(is,gle),e(gle,Sdo),e(is,Rdo),e(is,HB),e(HB,Pdo),e(is,Bdo),e(is,UB),e(UB,Ido),e(is,Ndo),e(k,qdo),e(k,dh),e(dh,hle),e(hle,jdo),e(dh,Ddo),e(dh,JB),e(JB,Gdo),e(dh,Odo),e(k,Vdo),e(k,ds),e(ds,ple),e(ple,Xdo),e(ds,zdo),e(ds,YB),e(YB,Qdo),e(ds,Wdo),e(ds,KB),e(KB,Hdo),e(ds,Udo),e(k,Jdo),e(k,cs),e(cs,_le),e(_le,Ydo),e(cs,Kdo),e(cs,ZB),e(ZB,Zdo),e(cs,eco),e(cs,eI),e(eI,oco),e(cs,rco),e(k,tco),e(k,fs),e(fs,ule),e(ule,aco),e(fs,nco),e(fs,oI),e(oI,sco),e(fs,lco),e(fs,rI),e(rI,ico),e(fs,dco),e(k,cco),e(k,ms),e(ms,ble),e(ble,fco),e(ms,mco),e(ms,tI),e(tI,gco),e(ms,hco),e(ms,aI),e(aI,pco),e(ms,_co),e(k,uco),e(k,gs),e(gs,vle),e(vle,bco),e(gs,vco),e(gs,nI),e(nI,Fco),e(gs,Tco),e(gs,sI),e(sI,Mco),e(gs,Eco),e(k,Cco),e(k,hs),e(hs,Fle),e(Fle,wco),e(hs,Aco),e(hs,lI),e(lI,Lco),e(hs,yco),e(hs,iI),e(iI,xco),e(hs,$co),e(k,kco),e(k,ps),e(ps,Tle),e(Tle,Sco),e(ps,Rco),e(ps,dI),e(dI,Pco),e(ps,Bco),e(ps,cI),e(cI,Ico),e(ps,Nco),e(k,qco),e(k,_s),e(_s,Mle),e(Mle,jco),e(_s,Dco),e(_s,fI),e(fI,Gco),e(_s,Oco),e(_s,mI),e(mI,Vco),e(_s,Xco),e(k,zco),e(k,ch),e(ch,Ele),e(Ele,Qco),e(ch,Wco),e(ch,gI),e(gI,Hco),e(ch,Uco),e(k,Jco),e(k,us),e(us,Cle),e(Cle,Yco),e(us,Kco),e(us,hI),e(hI,Zco),e(us,efo),e(us,pI),e(pI,ofo),e(us,rfo),e(k,tfo),e(k,fh),e(fh,wle),e(wle,afo),e(fh,nfo),e(fh,_I),e(_I,sfo),e(fh,lfo),e(k,ifo),e(k,mh),e(mh,Ale),e(Ale,dfo),e(mh,cfo),e(mh,uI),e(uI,ffo),e(mh,mfo),e(k,gfo),e(k,bs),e(bs,Lle),e(Lle,hfo),e(bs,pfo),e(bs,bI),e(bI,_fo),e(bs,ufo),e(bs,vI),e(vI,bfo),e(bs,vfo),e(k,Ffo),e(k,vs),e(vs,yle),e(yle,Tfo),e(vs,Mfo),e(vs,FI),e(FI,Efo),e(vs,Cfo),e(vs,TI),e(TI,wfo),e(vs,Afo),e(k,Lfo),e(k,Fs),e(Fs,xle),e(xle,yfo),e(Fs,xfo),e(Fs,MI),e(MI,$fo),e(Fs,kfo),e(Fs,EI),e(EI,Sfo),e(Fs,Rfo),e(k,Pfo),e(k,gh),e(gh,$le),e($le,Bfo),e(gh,Ifo),e(gh,CI),e(CI,Nfo),e(gh,qfo),e(k,jfo),e(k,Ts),e(Ts,kle),e(kle,Dfo),e(Ts,Gfo),e(Ts,wI),e(wI,Ofo),e(Ts,Vfo),e(Ts,AI),e(AI,Xfo),e(Ts,zfo),e(k,Qfo),e(k,Ms),e(Ms,Sle),e(Sle,Wfo),e(Ms,Hfo),e(Ms,LI),e(LI,Ufo),e(Ms,Jfo),e(Ms,yI),e(yI,Yfo),e(Ms,Kfo),e(k,Zfo),e(k,Es),e(Es,Rle),e(Rle,emo),e(Es,omo),e(Es,xI),e(xI,rmo),e(Es,tmo),e(Es,$I),e($I,amo),e(Es,nmo),e(k,smo),e(k,Cs),e(Cs,Ple),e(Ple,lmo),e(Cs,imo),e(Cs,kI),e(kI,dmo),e(Cs,cmo),e(Cs,SI),e(SI,fmo),e(Cs,mmo),e(k,gmo),e(k,ws),e(ws,Ble),e(Ble,hmo),e(ws,pmo),e(ws,RI),e(RI,_mo),e(ws,umo),e(ws,PI),e(PI,bmo),e(ws,vmo),e(k,Fmo),e(k,As),e(As,Ile),e(Ile,Tmo),e(As,Mmo),e(As,BI),e(BI,Emo),e(As,Cmo),e(As,II),e(II,wmo),e(As,Amo),e(k,Lmo),e(k,Ls),e(Ls,Nle),e(Nle,ymo),e(Ls,xmo),e(Ls,NI),e(NI,$mo),e(Ls,kmo),e(Ls,qI),e(qI,Smo),e(Ls,Rmo),e(k,Pmo),e(k,hh),e(hh,qle),e(qle,Bmo),e(hh,Imo),e(hh,jI),e(jI,Nmo),e(hh,qmo),e(k,jmo),e(k,ys),e(ys,jle),e(jle,Dmo),e(ys,Gmo),e(ys,DI),e(DI,Omo),e(ys,Vmo),e(ys,GI),e(GI,Xmo),e(ys,zmo),e(k,Qmo),e(k,ph),e(ph,Dle),e(Dle,Wmo),e(ph,Hmo),e(ph,OI),e(OI,Umo),e(ph,Jmo),e(k,Ymo),e(k,_h),e(_h,Gle),e(Gle,Kmo),e(_h,Zmo),e(_h,VI),e(VI,ego),e(_h,ogo),e(k,rgo),e(k,uh),e(uh,Ole),e(Ole,tgo),e(uh,ago),e(uh,XI),e(XI,ngo),e(uh,sgo),e(k,lgo),e(k,bh),e(bh,Vle),e(Vle,igo),e(bh,dgo),e(bh,zI),e(zI,cgo),e(bh,fgo),e(k,mgo),e(k,xs),e(xs,Xle),e(Xle,ggo),e(xs,hgo),e(xs,QI),e(QI,pgo),e(xs,_go),e(xs,WI),e(WI,ugo),e(xs,bgo),e(k,vgo),e(k,vh),e(vh,zle),e(zle,Fgo),e(vh,Tgo),e(vh,HI),e(HI,Mgo),e(vh,Ego),e(k,Cgo),e(k,$s),e($s,Qle),e(Qle,wgo),e($s,Ago),e($s,UI),e(UI,Lgo),e($s,ygo),e($s,JI),e(JI,xgo),e($s,$go),e(k,kgo),e(k,ks),e(ks,Wle),e(Wle,Sgo),e(ks,Rgo),e(ks,YI),e(YI,Pgo),e(ks,Bgo),e(ks,KI),e(KI,Igo),e(ks,Ngo),e(k,qgo),e(k,Ss),e(Ss,Hle),e(Hle,jgo),e(Ss,Dgo),e(Ss,ZI),e(ZI,Ggo),e(Ss,Ogo),e(Ss,eN),e(eN,Vgo),e(Ss,Xgo),e(k,zgo),e(k,Rs),e(Rs,Ule),e(Ule,Qgo),e(Rs,Wgo),e(Rs,oN),e(oN,Hgo),e(Rs,Ugo),e(Rs,rN),e(rN,Jgo),e(Rs,Ygo),e(k,Kgo),e(k,Ps),e(Ps,Jle),e(Jle,Zgo),e(Ps,eho),e(Ps,tN),e(tN,oho),e(Ps,rho),e(Ps,aN),e(aN,tho),e(Ps,aho),e(k,nho),e(k,Bs),e(Bs,Yle),e(Yle,sho),e(Bs,lho),e(Bs,nN),e(nN,iho),e(Bs,dho),e(Bs,sN),e(sN,cho),e(Bs,fho),e(k,mho),e(k,Fh),e(Fh,Kle),e(Kle,gho),e(Fh,hho),e(Fh,lN),e(lN,pho),e(Fh,_ho),e(k,uho),e(k,Th),e(Th,Zle),e(Zle,bho),e(Th,vho),e(Th,iN),e(iN,Fho),e(Th,Tho),e(k,Mho),e(k,Is),e(Is,eie),e(eie,Eho),e(Is,Cho),e(Is,dN),e(dN,who),e(Is,Aho),e(Is,cN),e(cN,Lho),e(Is,yho),e(k,xho),e(k,Ns),e(Ns,oie),e(oie,$ho),e(Ns,kho),e(Ns,fN),e(fN,Sho),e(Ns,Rho),e(Ns,mN),e(mN,Pho),e(Ns,Bho),e(k,Iho),e(k,qs),e(qs,rie),e(rie,Nho),e(qs,qho),e(qs,gN),e(gN,jho),e(qs,Dho),e(qs,hN),e(hN,Gho),e(qs,Oho),e(k,Vho),e(k,Mh),e(Mh,tie),e(tie,Xho),e(Mh,zho),e(Mh,pN),e(pN,Qho),e(Mh,Who),e(k,Hho),e(k,Eh),e(Eh,aie),e(aie,Uho),e(Eh,Jho),e(Eh,_N),e(_N,Yho),e(Eh,Kho),e(k,Zho),e(k,Ch),e(Ch,nie),e(nie,epo),e(Ch,opo),e(Ch,uN),e(uN,rpo),e(Ch,tpo),e(k,apo),e(k,js),e(js,sie),e(sie,npo),e(js,spo),e(js,bN),e(bN,lpo),e(js,ipo),e(js,vN),e(vN,dpo),e(js,cpo),e(k,fpo),e(k,Ds),e(Ds,lie),e(lie,mpo),e(Ds,gpo),e(Ds,FN),e(FN,hpo),e(Ds,ppo),e(Ds,TN),e(TN,_po),e(Ds,upo),e(k,bpo),e(k,wh),e(wh,iie),e(iie,vpo),e(wh,Fpo),e(wh,MN),e(MN,Tpo),e(wh,Mpo),e(k,Epo),e(k,Ah),e(Ah,die),e(die,Cpo),e(Ah,wpo),e(Ah,EN),e(EN,Apo),e(Ah,Lpo),e(k,ypo),e(k,Lh),e(Lh,cie),e(cie,xpo),e(Lh,$po),e(Lh,CN),e(CN,kpo),e(Lh,Spo),e(k,Rpo),e(k,Gs),e(Gs,fie),e(fie,Ppo),e(Gs,Bpo),e(Gs,wN),e(wN,Ipo),e(Gs,Npo),e(Gs,AN),e(AN,qpo),e(Gs,jpo),e(k,Dpo),e(k,yh),e(yh,mie),e(mie,Gpo),e(yh,Opo),e(yh,LN),e(LN,Vpo),e(yh,Xpo),e(k,zpo),e(k,xh),e(xh,gie),e(gie,Qpo),e(xh,Wpo),e(xh,yN),e(yN,Hpo),e(xh,Upo),e(k,Jpo),e(k,Os),e(Os,hie),e(hie,Ypo),e(Os,Kpo),e(Os,xN),e(xN,Zpo),e(Os,e_o),e(Os,$N),e($N,o_o),e(Os,r_o),e(k,t_o),e(k,Vs),e(Vs,pie),e(pie,a_o),e(Vs,n_o),e(Vs,kN),e(kN,s_o),e(Vs,l_o),e(Vs,SN),e(SN,i_o),e(Vs,d_o),e(k,c_o),e(k,Xs),e(Xs,_ie),e(_ie,f_o),e(Xs,m_o),e(Xs,RN),e(RN,g_o),e(Xs,h_o),e(Xs,PN),e(PN,p_o),e(Xs,__o),e(k,u_o),e(k,zs),e(zs,uie),e(uie,b_o),e(zs,v_o),e(zs,BN),e(BN,F_o),e(zs,T_o),e(zs,IN),e(IN,M_o),e(zs,E_o),e(Lr,C_o),M($h,Lr,null),e(Ao,w_o),e(Ao,kh),M(iy,kh,null),e(kh,A_o),e(kh,bie),e(bie,L_o),b(f,EVe,u),b(f,Ii,u),e(Ii,Sh),e(Sh,vie),M(dy,vie,null),e(Ii,y_o),e(Ii,Fie),e(Fie,x_o),b(f,CVe,u),b(f,Lo,u),M(cy,Lo,null),e(Lo,$_o),e(Lo,fy),e(fy,k_o),e(fy,NN),e(NN,S_o),e(fy,R_o),e(Lo,P_o),e(Lo,my),e(my,B_o),e(my,Tie),e(Tie,I_o),e(my,N_o),e(Lo,q_o),e(Lo,He),M(gy,He,null),e(He,j_o),e(He,Mie),e(Mie,D_o),e(He,G_o),e(He,Ra),e(Ra,O_o),e(Ra,Eie),e(Eie,V_o),e(Ra,X_o),e(Ra,Cie),e(Cie,z_o),e(Ra,Q_o),e(Ra,wie),e(wie,W_o),e(Ra,H_o),e(He,U_o),e(He,Y),e(Y,Rh),e(Rh,Aie),e(Aie,J_o),e(Rh,Y_o),e(Rh,qN),e(qN,K_o),e(Rh,Z_o),e(Y,euo),e(Y,Ph),e(Ph,Lie),e(Lie,ouo),e(Ph,ruo),e(Ph,jN),e(jN,tuo),e(Ph,auo),e(Y,nuo),e(Y,Bh),e(Bh,yie),e(yie,suo),e(Bh,luo),e(Bh,DN),e(DN,iuo),e(Bh,duo),e(Y,cuo),e(Y,Ih),e(Ih,xie),e(xie,fuo),e(Ih,muo),e(Ih,GN),e(GN,guo),e(Ih,huo),e(Y,puo),e(Y,Nh),e(Nh,$ie),e($ie,_uo),e(Nh,uuo),e(Nh,ON),e(ON,buo),e(Nh,vuo),e(Y,Fuo),e(Y,qh),e(qh,kie),e(kie,Tuo),e(qh,Muo),e(qh,VN),e(VN,Euo),e(qh,Cuo),e(Y,wuo),e(Y,jh),e(jh,Sie),e(Sie,Auo),e(jh,Luo),e(jh,XN),e(XN,yuo),e(jh,xuo),e(Y,$uo),e(Y,Dh),e(Dh,Rie),e(Rie,kuo),e(Dh,Suo),e(Dh,zN),e(zN,Ruo),e(Dh,Puo),e(Y,Buo),e(Y,Gh),e(Gh,Pie),e(Pie,Iuo),e(Gh,Nuo),e(Gh,QN),e(QN,quo),e(Gh,juo),e(Y,Duo),e(Y,Oh),e(Oh,Bie),e(Bie,Guo),e(Oh,Ouo),e(Oh,WN),e(WN,Vuo),e(Oh,Xuo),e(Y,zuo),e(Y,Vh),e(Vh,Iie),e(Iie,Quo),e(Vh,Wuo),e(Vh,HN),e(HN,Huo),e(Vh,Uuo),e(Y,Juo),e(Y,Xh),e(Xh,Nie),e(Nie,Yuo),e(Xh,Kuo),e(Xh,UN),e(UN,Zuo),e(Xh,e1o),e(Y,o1o),e(Y,zh),e(zh,qie),e(qie,r1o),e(zh,t1o),e(zh,JN),e(JN,a1o),e(zh,n1o),e(Y,s1o),e(Y,Qh),e(Qh,jie),e(jie,l1o),e(Qh,i1o),e(Qh,YN),e(YN,d1o),e(Qh,c1o),e(Y,f1o),e(Y,Wh),e(Wh,Die),e(Die,m1o),e(Wh,g1o),e(Wh,KN),e(KN,h1o),e(Wh,p1o),e(Y,_1o),e(Y,Hh),e(Hh,Gie),e(Gie,u1o),e(Hh,b1o),e(Hh,ZN),e(ZN,v1o),e(Hh,F1o),e(Y,T1o),e(Y,Uh),e(Uh,Oie),e(Oie,M1o),e(Uh,E1o),e(Uh,eq),e(eq,C1o),e(Uh,w1o),e(Y,A1o),e(Y,Jh),e(Jh,Vie),e(Vie,L1o),e(Jh,y1o),e(Jh,oq),e(oq,x1o),e(Jh,$1o),e(Y,k1o),e(Y,Yh),e(Yh,Xie),e(Xie,S1o),e(Yh,R1o),e(Yh,rq),e(rq,P1o),e(Yh,B1o),e(Y,I1o),e(Y,Kh),e(Kh,zie),e(zie,N1o),e(Kh,q1o),e(Kh,tq),e(tq,j1o),e(Kh,D1o),e(Y,G1o),e(Y,Zh),e(Zh,Qie),e(Qie,O1o),e(Zh,V1o),e(Zh,aq),e(aq,X1o),e(Zh,z1o),e(Y,Q1o),e(Y,ep),e(ep,Wie),e(Wie,W1o),e(ep,H1o),e(ep,nq),e(nq,U1o),e(ep,J1o),e(Y,Y1o),e(Y,op),e(op,Hie),e(Hie,K1o),e(op,Z1o),e(op,sq),e(sq,e7o),e(op,o7o),e(Y,r7o),e(Y,rp),e(rp,Uie),e(Uie,t7o),e(rp,a7o),e(rp,lq),e(lq,n7o),e(rp,s7o),e(Y,l7o),e(Y,tp),e(tp,Jie),e(Jie,i7o),e(tp,d7o),e(tp,iq),e(iq,c7o),e(tp,f7o),e(Y,m7o),e(Y,ap),e(ap,Yie),e(Yie,g7o),e(ap,h7o),e(ap,dq),e(dq,p7o),e(ap,_7o),e(Y,u7o),e(Y,np),e(np,Kie),e(Kie,b7o),e(np,v7o),e(np,cq),e(cq,F7o),e(np,T7o),e(Y,M7o),e(Y,sp),e(sp,Zie),e(Zie,E7o),e(sp,C7o),e(sp,fq),e(fq,w7o),e(sp,A7o),e(Y,L7o),e(Y,lp),e(lp,ede),e(ede,y7o),e(lp,x7o),e(lp,mq),e(mq,$7o),e(lp,k7o),e(Y,S7o),e(Y,ip),e(ip,ode),e(ode,R7o),e(ip,P7o),e(ip,gq),e(gq,B7o),e(ip,I7o),e(Y,N7o),e(Y,dp),e(dp,rde),e(rde,q7o),e(dp,j7o),e(dp,hq),e(hq,D7o),e(dp,G7o),e(Y,O7o),e(Y,cp),e(cp,tde),e(tde,V7o),e(cp,X7o),e(cp,pq),e(pq,z7o),e(cp,Q7o),e(Y,W7o),e(Y,fp),e(fp,ade),e(ade,H7o),e(fp,U7o),e(fp,_q),e(_q,J7o),e(fp,Y7o),e(He,K7o),M(mp,He,null),e(He,Z7o),M(gp,He,null),e(Lo,e4o),e(Lo,hp),M(hy,hp,null),e(hp,o4o),e(hp,nde),e(nde,r4o),b(f,wVe,u),b(f,Ni,u),e(Ni,pp),e(pp,sde),M(py,sde,null),e(Ni,t4o),e(Ni,lde),e(lde,a4o),b(f,AVe,u),b(f,yo,u),M(_y,yo,null),e(yo,n4o),e(yo,uy),e(uy,s4o),e(uy,uq),e(uq,l4o),e(uy,i4o),e(yo,d4o),e(yo,by),e(by,c4o),e(by,ide),e(ide,f4o),e(by,m4o),e(yo,g4o),e(yo,Ue),M(vy,Ue,null),e(Ue,h4o),e(Ue,dde),e(dde,p4o),e(Ue,_4o),e(Ue,qi),e(qi,u4o),e(qi,cde),e(cde,b4o),e(qi,v4o),e(qi,fde),e(fde,F4o),e(qi,T4o),e(Ue,M4o),e(Ue,he),e(he,_p),e(_p,mde),e(mde,E4o),e(_p,C4o),e(_p,bq),e(bq,w4o),e(_p,A4o),e(he,L4o),e(he,up),e(up,gde),e(gde,y4o),e(up,x4o),e(up,hde),e(hde,$4o),e(up,k4o),e(he,S4o),e(he,bp),e(bp,pde),e(pde,R4o),e(bp,P4o),e(bp,vq),e(vq,B4o),e(bp,I4o),e(he,N4o),e(he,vp),e(vp,_de),e(_de,q4o),e(vp,j4o),e(vp,Fq),e(Fq,D4o),e(vp,G4o),e(he,O4o),e(he,Fp),e(Fp,ude),e(ude,V4o),e(Fp,X4o),e(Fp,Tq),e(Tq,z4o),e(Fp,Q4o),e(he,W4o),e(he,Tp),e(Tp,bde),e(bde,H4o),e(Tp,U4o),e(Tp,Mq),e(Mq,J4o),e(Tp,Y4o),e(he,K4o),e(he,Mp),e(Mp,vde),e(vde,Z4o),e(Mp,e2o),e(Mp,Eq),e(Eq,o2o),e(Mp,r2o),e(he,t2o),e(he,Ep),e(Ep,Fde),e(Fde,a2o),e(Ep,n2o),e(Ep,Cq),e(Cq,s2o),e(Ep,l2o),e(he,i2o),e(he,Cp),e(Cp,Tde),e(Tde,d2o),e(Cp,c2o),e(Cp,wq),e(wq,f2o),e(Cp,m2o),e(he,g2o),e(he,wp),e(wp,Mde),e(Mde,h2o),e(wp,p2o),e(wp,Aq),e(Aq,_2o),e(wp,u2o),e(he,b2o),e(he,Ap),e(Ap,Ede),e(Ede,v2o),e(Ap,F2o),e(Ap,Lq),e(Lq,T2o),e(Ap,M2o),e(he,E2o),e(he,Lp),e(Lp,Cde),e(Cde,C2o),e(Lp,w2o),e(Lp,yq),e(yq,A2o),e(Lp,L2o),e(he,y2o),e(he,yp),e(yp,wde),e(wde,x2o),e(yp,$2o),e(yp,xq),e(xq,k2o),e(yp,S2o),e(he,R2o),e(he,xp),e(xp,Ade),e(Ade,P2o),e(xp,B2o),e(xp,$q),e($q,I2o),e(xp,N2o),e(he,q2o),e(he,$p),e($p,Lde),e(Lde,j2o),e($p,D2o),e($p,kq),e(kq,G2o),e($p,O2o),e(he,V2o),e(he,kp),e(kp,yde),e(yde,X2o),e(kp,z2o),e(kp,Sq),e(Sq,Q2o),e(kp,W2o),e(he,H2o),e(he,Sp),e(Sp,xde),e(xde,U2o),e(Sp,J2o),e(Sp,Rq),e(Rq,Y2o),e(Sp,K2o),e(he,Z2o),e(he,Rp),e(Rp,$de),e($de,ebo),e(Rp,obo),e(Rp,Pq),e(Pq,rbo),e(Rp,tbo),e(Ue,abo),M(Pp,Ue,null),e(Ue,nbo),M(Bp,Ue,null),e(yo,sbo),e(yo,Ip),M(Fy,Ip,null),e(Ip,lbo),e(Ip,kde),e(kde,ibo),b(f,LVe,u),b(f,ji,u),e(ji,Np),e(Np,Sde),M(Ty,Sde,null),e(ji,dbo),e(ji,Rde),e(Rde,cbo),b(f,yVe,u),b(f,xo,u),M(My,xo,null),e(xo,fbo),e(xo,Di),e(Di,mbo),e(Di,Bq),e(Bq,gbo),e(Di,hbo),e(Di,Iq),e(Iq,pbo),e(Di,_bo),e(xo,ubo),e(xo,Ey),e(Ey,bbo),e(Ey,Pde),e(Pde,vbo),e(Ey,Fbo),e(xo,Tbo),e(xo,st),M(Cy,st,null),e(st,Mbo),e(st,Bde),e(Bde,Ebo),e(st,Cbo),e(st,Gi),e(Gi,wbo),e(Gi,Ide),e(Ide,Abo),e(Gi,Lbo),e(Gi,Nq),e(Nq,ybo),e(Gi,xbo),e(st,$bo),M(qp,st,null),e(xo,kbo),e(xo,Je),M(wy,Je,null),e(Je,Sbo),e(Je,Nde),e(Nde,Rbo),e(Je,Pbo),e(Je,Pa),e(Pa,Bbo),e(Pa,qde),e(qde,Ibo),e(Pa,Nbo),e(Pa,jde),e(jde,qbo),e(Pa,jbo),e(Pa,Dde),e(Dde,Dbo),e(Pa,Gbo),e(Je,Obo),e(Je,y),e(y,jp),e(jp,Gde),e(Gde,Vbo),e(jp,Xbo),e(jp,qq),e(qq,zbo),e(jp,Qbo),e(y,Wbo),e(y,Dp),e(Dp,Ode),e(Ode,Hbo),e(Dp,Ubo),e(Dp,jq),e(jq,Jbo),e(Dp,Ybo),e(y,Kbo),e(y,Gp),e(Gp,Vde),e(Vde,Zbo),e(Gp,evo),e(Gp,Dq),e(Dq,ovo),e(Gp,rvo),e(y,tvo),e(y,Op),e(Op,Xde),e(Xde,avo),e(Op,nvo),e(Op,Gq),e(Gq,svo),e(Op,lvo),e(y,ivo),e(y,Vp),e(Vp,zde),e(zde,dvo),e(Vp,cvo),e(Vp,Oq),e(Oq,fvo),e(Vp,mvo),e(y,gvo),e(y,Xp),e(Xp,Qde),e(Qde,hvo),e(Xp,pvo),e(Xp,Vq),e(Vq,_vo),e(Xp,uvo),e(y,bvo),e(y,zp),e(zp,Wde),e(Wde,vvo),e(zp,Fvo),e(zp,Xq),e(Xq,Tvo),e(zp,Mvo),e(y,Evo),e(y,Qp),e(Qp,Hde),e(Hde,Cvo),e(Qp,wvo),e(Qp,zq),e(zq,Avo),e(Qp,Lvo),e(y,yvo),e(y,Wp),e(Wp,Ude),e(Ude,xvo),e(Wp,$vo),e(Wp,Qq),e(Qq,kvo),e(Wp,Svo),e(y,Rvo),e(y,Hp),e(Hp,Jde),e(Jde,Pvo),e(Hp,Bvo),e(Hp,Wq),e(Wq,Ivo),e(Hp,Nvo),e(y,qvo),e(y,Up),e(Up,Yde),e(Yde,jvo),e(Up,Dvo),e(Up,Hq),e(Hq,Gvo),e(Up,Ovo),e(y,Vvo),e(y,Jp),e(Jp,Kde),e(Kde,Xvo),e(Jp,zvo),e(Jp,Uq),e(Uq,Qvo),e(Jp,Wvo),e(y,Hvo),e(y,Yp),e(Yp,Zde),e(Zde,Uvo),e(Yp,Jvo),e(Yp,Jq),e(Jq,Yvo),e(Yp,Kvo),e(y,Zvo),e(y,Kp),e(Kp,ece),e(ece,e3o),e(Kp,o3o),e(Kp,Yq),e(Yq,r3o),e(Kp,t3o),e(y,a3o),e(y,Zp),e(Zp,oce),e(oce,n3o),e(Zp,s3o),e(Zp,Kq),e(Kq,l3o),e(Zp,i3o),e(y,d3o),e(y,e_),e(e_,rce),e(rce,c3o),e(e_,f3o),e(e_,Zq),e(Zq,m3o),e(e_,g3o),e(y,h3o),e(y,o_),e(o_,tce),e(tce,p3o),e(o_,_3o),e(o_,ej),e(ej,u3o),e(o_,b3o),e(y,v3o),e(y,r_),e(r_,ace),e(ace,F3o),e(r_,T3o),e(r_,oj),e(oj,M3o),e(r_,E3o),e(y,C3o),e(y,t_),e(t_,nce),e(nce,w3o),e(t_,A3o),e(t_,rj),e(rj,L3o),e(t_,y3o),e(y,x3o),e(y,a_),e(a_,sce),e(sce,$3o),e(a_,k3o),e(a_,tj),e(tj,S3o),e(a_,R3o),e(y,P3o),e(y,n_),e(n_,lce),e(lce,B3o),e(n_,I3o),e(n_,aj),e(aj,N3o),e(n_,q3o),e(y,j3o),e(y,s_),e(s_,ice),e(ice,D3o),e(s_,G3o),e(s_,nj),e(nj,O3o),e(s_,V3o),e(y,X3o),e(y,l_),e(l_,dce),e(dce,z3o),e(l_,Q3o),e(l_,sj),e(sj,W3o),e(l_,H3o),e(y,U3o),e(y,i_),e(i_,cce),e(cce,J3o),e(i_,Y3o),e(i_,lj),e(lj,K3o),e(i_,Z3o),e(y,eFo),e(y,d_),e(d_,fce),e(fce,oFo),e(d_,rFo),e(d_,ij),e(ij,tFo),e(d_,aFo),e(y,nFo),e(y,c_),e(c_,mce),e(mce,sFo),e(c_,lFo),e(c_,dj),e(dj,iFo),e(c_,dFo),e(y,cFo),e(y,f_),e(f_,gce),e(gce,fFo),e(f_,mFo),e(f_,cj),e(cj,gFo),e(f_,hFo),e(y,pFo),e(y,m_),e(m_,hce),e(hce,_Fo),e(m_,uFo),e(m_,fj),e(fj,bFo),e(m_,vFo),e(y,FFo),e(y,g_),e(g_,pce),e(pce,TFo),e(g_,MFo),e(g_,mj),e(mj,EFo),e(g_,CFo),e(y,wFo),e(y,h_),e(h_,_ce),e(_ce,AFo),e(h_,LFo),e(h_,gj),e(gj,yFo),e(h_,xFo),e(y,$Fo),e(y,p_),e(p_,uce),e(uce,kFo),e(p_,SFo),e(p_,hj),e(hj,RFo),e(p_,PFo),e(y,BFo),e(y,__),e(__,bce),e(bce,IFo),e(__,NFo),e(__,pj),e(pj,qFo),e(__,jFo),e(y,DFo),e(y,u_),e(u_,vce),e(vce,GFo),e(u_,OFo),e(u_,_j),e(_j,VFo),e(u_,XFo),e(y,zFo),e(y,b_),e(b_,Fce),e(Fce,QFo),e(b_,WFo),e(b_,uj),e(uj,HFo),e(b_,UFo),e(y,JFo),e(y,Qs),e(Qs,Tce),e(Tce,YFo),e(Qs,KFo),e(Qs,bj),e(bj,ZFo),e(Qs,eTo),e(Qs,vj),e(vj,oTo),e(Qs,rTo),e(y,tTo),e(y,v_),e(v_,Mce),e(Mce,aTo),e(v_,nTo),e(v_,Fj),e(Fj,sTo),e(v_,lTo),e(y,iTo),e(y,F_),e(F_,Ece),e(Ece,dTo),e(F_,cTo),e(F_,Tj),e(Tj,fTo),e(F_,mTo),e(y,gTo),e(y,T_),e(T_,Cce),e(Cce,hTo),e(T_,pTo),e(T_,Mj),e(Mj,_To),e(T_,uTo),e(y,bTo),e(y,M_),e(M_,wce),e(wce,vTo),e(M_,FTo),e(M_,Ej),e(Ej,TTo),e(M_,MTo),e(y,ETo),e(y,E_),e(E_,Ace),e(Ace,CTo),e(E_,wTo),e(E_,Cj),e(Cj,ATo),e(E_,LTo),e(y,yTo),e(y,C_),e(C_,Lce),e(Lce,xTo),e(C_,$To),e(C_,wj),e(wj,kTo),e(C_,STo),e(y,RTo),e(y,w_),e(w_,yce),e(yce,PTo),e(w_,BTo),e(w_,Aj),e(Aj,ITo),e(w_,NTo),e(y,qTo),e(y,A_),e(A_,xce),e(xce,jTo),e(A_,DTo),e(A_,Lj),e(Lj,GTo),e(A_,OTo),e(y,VTo),e(y,L_),e(L_,$ce),e($ce,XTo),e(L_,zTo),e(L_,yj),e(yj,QTo),e(L_,WTo),e(y,HTo),e(y,y_),e(y_,kce),e(kce,UTo),e(y_,JTo),e(y_,xj),e(xj,YTo),e(y_,KTo),e(y,ZTo),e(y,x_),e(x_,Sce),e(Sce,eMo),e(x_,oMo),e(x_,$j),e($j,rMo),e(x_,tMo),e(y,aMo),e(y,$_),e($_,Rce),e(Rce,nMo),e($_,sMo),e($_,kj),e(kj,lMo),e($_,iMo),e(y,dMo),e(y,k_),e(k_,Pce),e(Pce,cMo),e(k_,fMo),e(k_,Sj),e(Sj,mMo),e(k_,gMo),e(y,hMo),e(y,S_),e(S_,Bce),e(Bce,pMo),e(S_,_Mo),e(S_,Rj),e(Rj,uMo),e(S_,bMo),e(y,vMo),e(y,R_),e(R_,Ice),e(Ice,FMo),e(R_,TMo),e(R_,Pj),e(Pj,MMo),e(R_,EMo),e(y,CMo),e(y,P_),e(P_,Nce),e(Nce,wMo),e(P_,AMo),e(P_,Bj),e(Bj,LMo),e(P_,yMo),e(y,xMo),e(y,B_),e(B_,qce),e(qce,$Mo),e(B_,kMo),e(B_,Ij),e(Ij,SMo),e(B_,RMo),e(y,PMo),e(y,I_),e(I_,jce),e(jce,BMo),e(I_,IMo),e(I_,Nj),e(Nj,NMo),e(I_,qMo),e(y,jMo),e(y,N_),e(N_,Dce),e(Dce,DMo),e(N_,GMo),e(N_,qj),e(qj,OMo),e(N_,VMo),e(y,XMo),e(y,q_),e(q_,Gce),e(Gce,zMo),e(q_,QMo),e(q_,jj),e(jj,WMo),e(q_,HMo),e(y,UMo),e(y,j_),e(j_,Oce),e(Oce,JMo),e(j_,YMo),e(j_,Dj),e(Dj,KMo),e(j_,ZMo),e(y,eEo),e(y,D_),e(D_,Vce),e(Vce,oEo),e(D_,rEo),e(D_,Gj),e(Gj,tEo),e(D_,aEo),e(y,nEo),e(y,G_),e(G_,Xce),e(Xce,sEo),e(G_,lEo),e(G_,Oj),e(Oj,iEo),e(G_,dEo),e(y,cEo),e(y,O_),e(O_,zce),e(zce,fEo),e(O_,mEo),e(O_,Vj),e(Vj,gEo),e(O_,hEo),e(y,pEo),e(y,V_),e(V_,Qce),e(Qce,_Eo),e(V_,uEo),e(V_,Xj),e(Xj,bEo),e(V_,vEo),e(y,FEo),e(y,X_),e(X_,Wce),e(Wce,TEo),e(X_,MEo),e(X_,zj),e(zj,EEo),e(X_,CEo),e(y,wEo),e(y,z_),e(z_,Hce),e(Hce,AEo),e(z_,LEo),e(z_,Qj),e(Qj,yEo),e(z_,xEo),e(y,$Eo),e(y,Q_),e(Q_,Uce),e(Uce,kEo),e(Q_,SEo),e(Q_,Wj),e(Wj,REo),e(Q_,PEo),e(y,BEo),e(y,W_),e(W_,Jce),e(Jce,IEo),e(W_,NEo),e(W_,Hj),e(Hj,qEo),e(W_,jEo),e(y,DEo),e(y,H_),e(H_,Yce),e(Yce,GEo),e(H_,OEo),e(H_,Uj),e(Uj,VEo),e(H_,XEo),e(y,zEo),e(y,U_),e(U_,Kce),e(Kce,QEo),e(U_,WEo),e(U_,Jj),e(Jj,HEo),e(U_,UEo),e(y,JEo),e(y,J_),e(J_,Zce),e(Zce,YEo),e(J_,KEo),e(J_,Yj),e(Yj,ZEo),e(J_,eCo),e(y,oCo),e(y,Y_),e(Y_,efe),e(efe,rCo),e(Y_,tCo),e(Y_,Kj),e(Kj,aCo),e(Y_,nCo),e(y,sCo),e(y,K_),e(K_,ofe),e(ofe,lCo),e(K_,iCo),e(K_,Zj),e(Zj,dCo),e(K_,cCo),e(y,fCo),e(y,Z_),e(Z_,rfe),e(rfe,mCo),e(Z_,gCo),e(Z_,eD),e(eD,hCo),e(Z_,pCo),e(y,_Co),e(y,eu),e(eu,tfe),e(tfe,uCo),e(eu,bCo),e(eu,oD),e(oD,vCo),e(eu,FCo),e(y,TCo),e(y,ou),e(ou,afe),e(afe,MCo),e(ou,ECo),e(ou,rD),e(rD,CCo),e(ou,wCo),e(y,ACo),e(y,ru),e(ru,nfe),e(nfe,LCo),e(ru,yCo),e(ru,tD),e(tD,xCo),e(ru,$Co),e(y,kCo),e(y,tu),e(tu,sfe),e(sfe,SCo),e(tu,RCo),e(tu,aD),e(aD,PCo),e(tu,BCo),e(y,ICo),e(y,au),e(au,lfe),e(lfe,NCo),e(au,qCo),e(au,nD),e(nD,jCo),e(au,DCo),e(y,GCo),e(y,nu),e(nu,ife),e(ife,OCo),e(nu,VCo),e(nu,sD),e(sD,XCo),e(nu,zCo),e(y,QCo),e(y,su),e(su,dfe),e(dfe,WCo),e(su,HCo),e(su,lD),e(lD,UCo),e(su,JCo),e(y,YCo),e(y,lu),e(lu,cfe),e(cfe,KCo),e(lu,ZCo),e(lu,iD),e(iD,e5o),e(lu,o5o),e(y,r5o),e(y,iu),e(iu,ffe),e(ffe,t5o),e(iu,a5o),e(iu,dD),e(dD,n5o),e(iu,s5o),e(y,l5o),e(y,du),e(du,mfe),e(mfe,i5o),e(du,d5o),e(du,cD),e(cD,c5o),e(du,f5o),e(y,m5o),e(y,cu),e(cu,gfe),e(gfe,g5o),e(cu,h5o),e(cu,fD),e(fD,p5o),e(cu,_5o),e(y,u5o),e(y,fu),e(fu,hfe),e(hfe,b5o),e(fu,v5o),e(fu,mD),e(mD,F5o),e(fu,T5o),e(y,M5o),e(y,mu),e(mu,pfe),e(pfe,E5o),e(mu,C5o),e(mu,gD),e(gD,w5o),e(mu,A5o),e(y,L5o),e(y,gu),e(gu,_fe),e(_fe,y5o),e(gu,x5o),e(gu,hD),e(hD,$5o),e(gu,k5o),e(y,S5o),e(y,hu),e(hu,ufe),e(ufe,R5o),e(hu,P5o),e(hu,pD),e(pD,B5o),e(hu,I5o),e(y,N5o),e(y,pu),e(pu,bfe),e(bfe,q5o),e(pu,j5o),e(pu,_D),e(_D,D5o),e(pu,G5o),e(y,O5o),e(y,_u),e(_u,vfe),e(vfe,V5o),e(_u,X5o),e(_u,uD),e(uD,z5o),e(_u,Q5o),e(y,W5o),e(y,uu),e(uu,Ffe),e(Ffe,H5o),e(uu,U5o),e(uu,bD),e(bD,J5o),e(uu,Y5o),e(y,K5o),e(y,bu),e(bu,Tfe),e(Tfe,Z5o),e(bu,e0o),e(bu,vD),e(vD,o0o),e(bu,r0o),e(y,t0o),e(y,vu),e(vu,Mfe),e(Mfe,a0o),e(vu,n0o),e(vu,FD),e(FD,s0o),e(vu,l0o),e(y,i0o),e(y,Fu),e(Fu,Efe),e(Efe,d0o),e(Fu,c0o),e(Fu,TD),e(TD,f0o),e(Fu,m0o),e(y,g0o),e(y,Tu),e(Tu,Cfe),e(Cfe,h0o),e(Tu,p0o),e(Tu,MD),e(MD,_0o),e(Tu,u0o),e(y,b0o),e(y,Mu),e(Mu,wfe),e(wfe,v0o),e(Mu,F0o),e(Mu,ED),e(ED,T0o),e(Mu,M0o),e(y,E0o),e(y,Eu),e(Eu,Afe),e(Afe,C0o),e(Eu,w0o),e(Eu,CD),e(CD,A0o),e(Eu,L0o),e(y,y0o),e(y,Cu),e(Cu,Lfe),e(Lfe,x0o),e(Cu,$0o),e(Cu,wD),e(wD,k0o),e(Cu,S0o),e(y,R0o),e(y,wu),e(wu,yfe),e(yfe,P0o),e(wu,B0o),e(wu,AD),e(AD,I0o),e(wu,N0o),e(y,q0o),e(y,Au),e(Au,xfe),e(xfe,j0o),e(Au,D0o),e(Au,LD),e(LD,G0o),e(Au,O0o),e(y,V0o),e(y,Lu),e(Lu,$fe),e($fe,X0o),e(Lu,z0o),e(Lu,yD),e(yD,Q0o),e(Lu,W0o),e(y,H0o),e(y,yu),e(yu,kfe),e(kfe,U0o),e(yu,J0o),e(yu,xD),e(xD,Y0o),e(yu,K0o),e(y,Z0o),e(y,xu),e(xu,Sfe),e(Sfe,ewo),e(xu,owo),e(xu,$D),e($D,rwo),e(xu,two),e(y,awo),e(y,$u),e($u,Rfe),e(Rfe,nwo),e($u,swo),e($u,kD),e(kD,lwo),e($u,iwo),e(y,dwo),e(y,ku),e(ku,Pfe),e(Pfe,cwo),e(ku,fwo),e(ku,SD),e(SD,mwo),e(ku,gwo),e(y,hwo),e(y,Su),e(Su,Bfe),e(Bfe,pwo),e(Su,_wo),e(Su,RD),e(RD,uwo),e(Su,bwo),e(y,vwo),e(y,Ru),e(Ru,Ife),e(Ife,Fwo),e(Ru,Two),e(Ru,PD),e(PD,Mwo),e(Ru,Ewo),e(y,Cwo),e(y,Pu),e(Pu,Nfe),e(Nfe,wwo),e(Pu,Awo),e(Pu,BD),e(BD,Lwo),e(Pu,ywo),e(y,xwo),e(y,Bu),e(Bu,qfe),e(qfe,$wo),e(Bu,kwo),e(Bu,ID),e(ID,Swo),e(Bu,Rwo),e(y,Pwo),e(y,Iu),e(Iu,jfe),e(jfe,Bwo),e(Iu,Iwo),e(Iu,ND),e(ND,Nwo),e(Iu,qwo),e(y,jwo),e(y,Nu),e(Nu,Dfe),e(Dfe,Dwo),e(Nu,Gwo),e(Nu,qD),e(qD,Owo),e(Nu,Vwo),e(y,Xwo),e(y,qu),e(qu,Gfe),e(Gfe,zwo),e(qu,Qwo),e(qu,jD),e(jD,Wwo),e(qu,Hwo),e(y,Uwo),e(y,ju),e(ju,Ofe),e(Ofe,Jwo),e(ju,Ywo),e(ju,DD),e(DD,Kwo),e(ju,Zwo),e(Je,eAo),e(Je,Du),e(Du,oAo),e(Du,Vfe),e(Vfe,rAo),e(Du,tAo),e(Du,Xfe),e(Xfe,aAo),e(Je,nAo),M(Gu,Je,null),b(f,xVe,u),b(f,Oi,u),e(Oi,Ou),e(Ou,zfe),M(Ay,zfe,null),e(Oi,sAo),e(Oi,Qfe),e(Qfe,lAo),b(f,$Ve,u),b(f,$o,u),M(Ly,$o,null),e($o,iAo),e($o,Vi),e(Vi,dAo),e(Vi,GD),e(GD,cAo),e(Vi,fAo),e(Vi,OD),e(OD,mAo),e(Vi,gAo),e($o,hAo),e($o,yy),e(yy,pAo),e(yy,Wfe),e(Wfe,_Ao),e(yy,uAo),e($o,bAo),e($o,lt),M(xy,lt,null),e(lt,vAo),e(lt,Hfe),e(Hfe,FAo),e(lt,TAo),e(lt,Xi),e(Xi,MAo),e(Xi,Ufe),e(Ufe,EAo),e(Xi,CAo),e(Xi,VD),e(VD,wAo),e(Xi,AAo),e(lt,LAo),M(Vu,lt,null),e($o,yAo),e($o,Ye),M($y,Ye,null),e(Ye,xAo),e(Ye,Jfe),e(Jfe,$Ao),e(Ye,kAo),e(Ye,Ba),e(Ba,SAo),e(Ba,Yfe),e(Yfe,RAo),e(Ba,PAo),e(Ba,Kfe),e(Kfe,BAo),e(Ba,IAo),e(Ba,Zfe),e(Zfe,NAo),e(Ba,qAo),e(Ye,jAo),e(Ye,G),e(G,Xu),e(Xu,eme),e(eme,DAo),e(Xu,GAo),e(Xu,XD),e(XD,OAo),e(Xu,VAo),e(G,XAo),e(G,zu),e(zu,ome),e(ome,zAo),e(zu,QAo),e(zu,zD),e(zD,WAo),e(zu,HAo),e(G,UAo),e(G,Qu),e(Qu,rme),e(rme,JAo),e(Qu,YAo),e(Qu,QD),e(QD,KAo),e(Qu,ZAo),e(G,e6o),e(G,Wu),e(Wu,tme),e(tme,o6o),e(Wu,r6o),e(Wu,WD),e(WD,t6o),e(Wu,a6o),e(G,n6o),e(G,Hu),e(Hu,ame),e(ame,s6o),e(Hu,l6o),e(Hu,HD),e(HD,i6o),e(Hu,d6o),e(G,c6o),e(G,Uu),e(Uu,nme),e(nme,f6o),e(Uu,m6o),e(Uu,UD),e(UD,g6o),e(Uu,h6o),e(G,p6o),e(G,Ju),e(Ju,sme),e(sme,_6o),e(Ju,u6o),e(Ju,JD),e(JD,b6o),e(Ju,v6o),e(G,F6o),e(G,Yu),e(Yu,lme),e(lme,T6o),e(Yu,M6o),e(Yu,YD),e(YD,E6o),e(Yu,C6o),e(G,w6o),e(G,Ku),e(Ku,ime),e(ime,A6o),e(Ku,L6o),e(Ku,KD),e(KD,y6o),e(Ku,x6o),e(G,$6o),e(G,Zu),e(Zu,dme),e(dme,k6o),e(Zu,S6o),e(Zu,ZD),e(ZD,R6o),e(Zu,P6o),e(G,B6o),e(G,e1),e(e1,cme),e(cme,I6o),e(e1,N6o),e(e1,eG),e(eG,q6o),e(e1,j6o),e(G,D6o),e(G,o1),e(o1,fme),e(fme,G6o),e(o1,O6o),e(o1,oG),e(oG,V6o),e(o1,X6o),e(G,z6o),e(G,r1),e(r1,mme),e(mme,Q6o),e(r1,W6o),e(r1,rG),e(rG,H6o),e(r1,U6o),e(G,J6o),e(G,t1),e(t1,gme),e(gme,Y6o),e(t1,K6o),e(t1,tG),e(tG,Z6o),e(t1,eLo),e(G,oLo),e(G,a1),e(a1,hme),e(hme,rLo),e(a1,tLo),e(a1,aG),e(aG,aLo),e(a1,nLo),e(G,sLo),e(G,n1),e(n1,pme),e(pme,lLo),e(n1,iLo),e(n1,nG),e(nG,dLo),e(n1,cLo),e(G,fLo),e(G,s1),e(s1,_me),e(_me,mLo),e(s1,gLo),e(s1,sG),e(sG,hLo),e(s1,pLo),e(G,_Lo),e(G,l1),e(l1,ume),e(ume,uLo),e(l1,bLo),e(l1,lG),e(lG,vLo),e(l1,FLo),e(G,TLo),e(G,i1),e(i1,bme),e(bme,MLo),e(i1,ELo),e(i1,iG),e(iG,CLo),e(i1,wLo),e(G,ALo),e(G,d1),e(d1,vme),e(vme,LLo),e(d1,yLo),e(d1,dG),e(dG,xLo),e(d1,$Lo),e(G,kLo),e(G,c1),e(c1,Fme),e(Fme,SLo),e(c1,RLo),e(c1,cG),e(cG,PLo),e(c1,BLo),e(G,ILo),e(G,f1),e(f1,Tme),e(Tme,NLo),e(f1,qLo),e(f1,fG),e(fG,jLo),e(f1,DLo),e(G,GLo),e(G,m1),e(m1,Mme),e(Mme,OLo),e(m1,VLo),e(m1,mG),e(mG,XLo),e(m1,zLo),e(G,QLo),e(G,g1),e(g1,Eme),e(Eme,WLo),e(g1,HLo),e(g1,gG),e(gG,ULo),e(g1,JLo),e(G,YLo),e(G,h1),e(h1,Cme),e(Cme,KLo),e(h1,ZLo),e(h1,hG),e(hG,eyo),e(h1,oyo),e(G,ryo),e(G,p1),e(p1,wme),e(wme,tyo),e(p1,ayo),e(p1,pG),e(pG,nyo),e(p1,syo),e(G,lyo),e(G,_1),e(_1,Ame),e(Ame,iyo),e(_1,dyo),e(_1,_G),e(_G,cyo),e(_1,fyo),e(G,myo),e(G,u1),e(u1,Lme),e(Lme,gyo),e(u1,hyo),e(u1,uG),e(uG,pyo),e(u1,_yo),e(G,uyo),e(G,b1),e(b1,yme),e(yme,byo),e(b1,vyo),e(b1,bG),e(bG,Fyo),e(b1,Tyo),e(G,Myo),e(G,v1),e(v1,xme),e(xme,Eyo),e(v1,Cyo),e(v1,vG),e(vG,wyo),e(v1,Ayo),e(G,Lyo),e(G,F1),e(F1,$me),e($me,yyo),e(F1,xyo),e(F1,FG),e(FG,$yo),e(F1,kyo),e(G,Syo),e(G,T1),e(T1,kme),e(kme,Ryo),e(T1,Pyo),e(T1,TG),e(TG,Byo),e(T1,Iyo),e(G,Nyo),e(G,M1),e(M1,Sme),e(Sme,qyo),e(M1,jyo),e(M1,MG),e(MG,Dyo),e(M1,Gyo),e(G,Oyo),e(G,E1),e(E1,Rme),e(Rme,Vyo),e(E1,Xyo),e(E1,EG),e(EG,zyo),e(E1,Qyo),e(G,Wyo),e(G,C1),e(C1,Pme),e(Pme,Hyo),e(C1,Uyo),e(C1,CG),e(CG,Jyo),e(C1,Yyo),e(G,Kyo),e(G,w1),e(w1,Bme),e(Bme,Zyo),e(w1,e8o),e(w1,wG),e(wG,o8o),e(w1,r8o),e(G,t8o),e(G,A1),e(A1,Ime),e(Ime,a8o),e(A1,n8o),e(A1,AG),e(AG,s8o),e(A1,l8o),e(G,i8o),e(G,L1),e(L1,Nme),e(Nme,d8o),e(L1,c8o),e(L1,LG),e(LG,f8o),e(L1,m8o),e(G,g8o),e(G,y1),e(y1,qme),e(qme,h8o),e(y1,p8o),e(y1,yG),e(yG,_8o),e(y1,u8o),e(G,b8o),e(G,x1),e(x1,jme),e(jme,v8o),e(x1,F8o),e(x1,xG),e(xG,T8o),e(x1,M8o),e(G,E8o),e(G,$1),e($1,Dme),e(Dme,C8o),e($1,w8o),e($1,$G),e($G,A8o),e($1,L8o),e(G,y8o),e(G,k1),e(k1,Gme),e(Gme,x8o),e(k1,$8o),e(k1,kG),e(kG,k8o),e(k1,S8o),e(G,R8o),e(G,S1),e(S1,Ome),e(Ome,P8o),e(S1,B8o),e(S1,SG),e(SG,I8o),e(S1,N8o),e(G,q8o),e(G,R1),e(R1,Vme),e(Vme,j8o),e(R1,D8o),e(R1,RG),e(RG,G8o),e(R1,O8o),e(G,V8o),e(G,P1),e(P1,Xme),e(Xme,X8o),e(P1,z8o),e(P1,PG),e(PG,Q8o),e(P1,W8o),e(Ye,H8o),e(Ye,B1),e(B1,U8o),e(B1,zme),e(zme,J8o),e(B1,Y8o),e(B1,Qme),e(Qme,K8o),e(Ye,Z8o),M(I1,Ye,null),b(f,kVe,u),b(f,zi,u),e(zi,N1),e(N1,Wme),M(ky,Wme,null),e(zi,e9o),e(zi,Hme),e(Hme,o9o),b(f,SVe,u),b(f,ko,u),M(Sy,ko,null),e(ko,r9o),e(ko,Qi),e(Qi,t9o),e(Qi,BG),e(BG,a9o),e(Qi,n9o),e(Qi,IG),e(IG,s9o),e(Qi,l9o),e(ko,i9o),e(ko,Ry),e(Ry,d9o),e(Ry,Ume),e(Ume,c9o),e(Ry,f9o),e(ko,m9o),e(ko,it),M(Py,it,null),e(it,g9o),e(it,Jme),e(Jme,h9o),e(it,p9o),e(it,Wi),e(Wi,_9o),e(Wi,Yme),e(Yme,u9o),e(Wi,b9o),e(Wi,NG),e(NG,v9o),e(Wi,F9o),e(it,T9o),M(q1,it,null),e(ko,M9o),e(ko,Ke),M(By,Ke,null),e(Ke,E9o),e(Ke,Kme),e(Kme,C9o),e(Ke,w9o),e(Ke,Ia),e(Ia,A9o),e(Ia,Zme),e(Zme,L9o),e(Ia,y9o),e(Ia,ege),e(ege,x9o),e(Ia,$9o),e(Ia,oge),e(oge,k9o),e(Ia,S9o),e(Ke,R9o),e(Ke,z),e(z,j1),e(j1,rge),e(rge,P9o),e(j1,B9o),e(j1,qG),e(qG,I9o),e(j1,N9o),e(z,q9o),e(z,D1),e(D1,tge),e(tge,j9o),e(D1,D9o),e(D1,jG),e(jG,G9o),e(D1,O9o),e(z,V9o),e(z,G1),e(G1,age),e(age,X9o),e(G1,z9o),e(G1,DG),e(DG,Q9o),e(G1,W9o),e(z,H9o),e(z,O1),e(O1,nge),e(nge,U9o),e(O1,J9o),e(O1,GG),e(GG,Y9o),e(O1,K9o),e(z,Z9o),e(z,V1),e(V1,sge),e(sge,exo),e(V1,oxo),e(V1,OG),e(OG,rxo),e(V1,txo),e(z,axo),e(z,X1),e(X1,lge),e(lge,nxo),e(X1,sxo),e(X1,VG),e(VG,lxo),e(X1,ixo),e(z,dxo),e(z,z1),e(z1,ige),e(ige,cxo),e(z1,fxo),e(z1,XG),e(XG,mxo),e(z1,gxo),e(z,hxo),e(z,Q1),e(Q1,dge),e(dge,pxo),e(Q1,_xo),e(Q1,zG),e(zG,uxo),e(Q1,bxo),e(z,vxo),e(z,W1),e(W1,cge),e(cge,Fxo),e(W1,Txo),e(W1,QG),e(QG,Mxo),e(W1,Exo),e(z,Cxo),e(z,H1),e(H1,fge),e(fge,wxo),e(H1,Axo),e(H1,WG),e(WG,Lxo),e(H1,yxo),e(z,xxo),e(z,U1),e(U1,mge),e(mge,$xo),e(U1,kxo),e(U1,HG),e(HG,Sxo),e(U1,Rxo),e(z,Pxo),e(z,J1),e(J1,gge),e(gge,Bxo),e(J1,Ixo),e(J1,UG),e(UG,Nxo),e(J1,qxo),e(z,jxo),e(z,Y1),e(Y1,hge),e(hge,Dxo),e(Y1,Gxo),e(Y1,JG),e(JG,Oxo),e(Y1,Vxo),e(z,Xxo),e(z,K1),e(K1,pge),e(pge,zxo),e(K1,Qxo),e(K1,YG),e(YG,Wxo),e(K1,Hxo),e(z,Uxo),e(z,Z1),e(Z1,_ge),e(_ge,Jxo),e(Z1,Yxo),e(Z1,KG),e(KG,Kxo),e(Z1,Zxo),e(z,e$o),e(z,e7),e(e7,uge),e(uge,o$o),e(e7,r$o),e(e7,ZG),e(ZG,t$o),e(e7,a$o),e(z,n$o),e(z,o7),e(o7,bge),e(bge,s$o),e(o7,l$o),e(o7,eO),e(eO,i$o),e(o7,d$o),e(z,c$o),e(z,r7),e(r7,vge),e(vge,f$o),e(r7,m$o),e(r7,oO),e(oO,g$o),e(r7,h$o),e(z,p$o),e(z,t7),e(t7,Fge),e(Fge,_$o),e(t7,u$o),e(t7,rO),e(rO,b$o),e(t7,v$o),e(z,F$o),e(z,a7),e(a7,Tge),e(Tge,T$o),e(a7,M$o),e(a7,tO),e(tO,E$o),e(a7,C$o),e(z,w$o),e(z,n7),e(n7,Mge),e(Mge,A$o),e(n7,L$o),e(n7,aO),e(aO,y$o),e(n7,x$o),e(z,$$o),e(z,s7),e(s7,Ege),e(Ege,k$o),e(s7,S$o),e(s7,nO),e(nO,R$o),e(s7,P$o),e(z,B$o),e(z,l7),e(l7,Cge),e(Cge,I$o),e(l7,N$o),e(l7,sO),e(sO,q$o),e(l7,j$o),e(z,D$o),e(z,i7),e(i7,wge),e(wge,G$o),e(i7,O$o),e(i7,lO),e(lO,V$o),e(i7,X$o),e(z,z$o),e(z,d7),e(d7,Age),e(Age,Q$o),e(d7,W$o),e(d7,iO),e(iO,H$o),e(d7,U$o),e(z,J$o),e(z,c7),e(c7,Lge),e(Lge,Y$o),e(c7,K$o),e(c7,dO),e(dO,Z$o),e(c7,eko),e(z,oko),e(z,f7),e(f7,yge),e(yge,rko),e(f7,tko),e(f7,cO),e(cO,ako),e(f7,nko),e(z,sko),e(z,m7),e(m7,xge),e(xge,lko),e(m7,iko),e(m7,fO),e(fO,dko),e(m7,cko),e(z,fko),e(z,g7),e(g7,$ge),e($ge,mko),e(g7,gko),e(g7,mO),e(mO,hko),e(g7,pko),e(z,_ko),e(z,h7),e(h7,kge),e(kge,uko),e(h7,bko),e(h7,gO),e(gO,vko),e(h7,Fko),e(z,Tko),e(z,p7),e(p7,Sge),e(Sge,Mko),e(p7,Eko),e(p7,hO),e(hO,Cko),e(p7,wko),e(z,Ako),e(z,_7),e(_7,Rge),e(Rge,Lko),e(_7,yko),e(_7,pO),e(pO,xko),e(_7,$ko),e(z,kko),e(z,u7),e(u7,Pge),e(Pge,Sko),e(u7,Rko),e(u7,_O),e(_O,Pko),e(u7,Bko),e(z,Iko),e(z,b7),e(b7,Bge),e(Bge,Nko),e(b7,qko),e(b7,uO),e(uO,jko),e(b7,Dko),e(z,Gko),e(z,v7),e(v7,Ige),e(Ige,Oko),e(v7,Vko),e(v7,bO),e(bO,Xko),e(v7,zko),e(z,Qko),e(z,F7),e(F7,Nge),e(Nge,Wko),e(F7,Hko),e(F7,vO),e(vO,Uko),e(F7,Jko),e(z,Yko),e(z,T7),e(T7,qge),e(qge,Kko),e(T7,Zko),e(T7,FO),e(FO,eSo),e(T7,oSo),e(z,rSo),e(z,M7),e(M7,jge),e(jge,tSo),e(M7,aSo),e(M7,TO),e(TO,nSo),e(M7,sSo),e(z,lSo),e(z,E7),e(E7,Dge),e(Dge,iSo),e(E7,dSo),e(E7,MO),e(MO,cSo),e(E7,fSo),e(z,mSo),e(z,C7),e(C7,Gge),e(Gge,gSo),e(C7,hSo),e(C7,EO),e(EO,pSo),e(C7,_So),e(Ke,uSo),e(Ke,w7),e(w7,bSo),e(w7,Oge),e(Oge,vSo),e(w7,FSo),e(w7,Vge),e(Vge,TSo),e(Ke,MSo),M(A7,Ke,null),b(f,RVe,u),b(f,Hi,u),e(Hi,L7),e(L7,Xge),M(Iy,Xge,null),e(Hi,ESo),e(Hi,zge),e(zge,CSo),b(f,PVe,u),b(f,So,u),M(Ny,So,null),e(So,wSo),e(So,Ui),e(Ui,ASo),e(Ui,CO),e(CO,LSo),e(Ui,ySo),e(Ui,wO),e(wO,xSo),e(Ui,$So),e(So,kSo),e(So,qy),e(qy,SSo),e(qy,Qge),e(Qge,RSo),e(qy,PSo),e(So,BSo),e(So,dt),M(jy,dt,null),e(dt,ISo),e(dt,Wge),e(Wge,NSo),e(dt,qSo),e(dt,Ji),e(Ji,jSo),e(Ji,Hge),e(Hge,DSo),e(Ji,GSo),e(Ji,AO),e(AO,OSo),e(Ji,VSo),e(dt,XSo),M(y7,dt,null),e(So,zSo),e(So,Ze),M(Dy,Ze,null),e(Ze,QSo),e(Ze,Uge),e(Uge,WSo),e(Ze,HSo),e(Ze,Na),e(Na,USo),e(Na,Jge),e(Jge,JSo),e(Na,YSo),e(Na,Yge),e(Yge,KSo),e(Na,ZSo),e(Na,Kge),e(Kge,eRo),e(Na,oRo),e(Ze,rRo),e(Ze,W),e(W,x7),e(x7,Zge),e(Zge,tRo),e(x7,aRo),e(x7,LO),e(LO,nRo),e(x7,sRo),e(W,lRo),e(W,$7),e($7,ehe),e(ehe,iRo),e($7,dRo),e($7,yO),e(yO,cRo),e($7,fRo),e(W,mRo),e(W,k7),e(k7,ohe),e(ohe,gRo),e(k7,hRo),e(k7,xO),e(xO,pRo),e(k7,_Ro),e(W,uRo),e(W,S7),e(S7,rhe),e(rhe,bRo),e(S7,vRo),e(S7,$O),e($O,FRo),e(S7,TRo),e(W,MRo),e(W,R7),e(R7,the),e(the,ERo),e(R7,CRo),e(R7,kO),e(kO,wRo),e(R7,ARo),e(W,LRo),e(W,P7),e(P7,ahe),e(ahe,yRo),e(P7,xRo),e(P7,SO),e(SO,$Ro),e(P7,kRo),e(W,SRo),e(W,B7),e(B7,nhe),e(nhe,RRo),e(B7,PRo),e(B7,RO),e(RO,BRo),e(B7,IRo),e(W,NRo),e(W,I7),e(I7,she),e(she,qRo),e(I7,jRo),e(I7,PO),e(PO,DRo),e(I7,GRo),e(W,ORo),e(W,N7),e(N7,lhe),e(lhe,VRo),e(N7,XRo),e(N7,BO),e(BO,zRo),e(N7,QRo),e(W,WRo),e(W,q7),e(q7,ihe),e(ihe,HRo),e(q7,URo),e(q7,IO),e(IO,JRo),e(q7,YRo),e(W,KRo),e(W,j7),e(j7,dhe),e(dhe,ZRo),e(j7,ePo),e(j7,NO),e(NO,oPo),e(j7,rPo),e(W,tPo),e(W,D7),e(D7,che),e(che,aPo),e(D7,nPo),e(D7,qO),e(qO,sPo),e(D7,lPo),e(W,iPo),e(W,G7),e(G7,fhe),e(fhe,dPo),e(G7,cPo),e(G7,jO),e(jO,fPo),e(G7,mPo),e(W,gPo),e(W,O7),e(O7,mhe),e(mhe,hPo),e(O7,pPo),e(O7,DO),e(DO,_Po),e(O7,uPo),e(W,bPo),e(W,V7),e(V7,ghe),e(ghe,vPo),e(V7,FPo),e(V7,GO),e(GO,TPo),e(V7,MPo),e(W,EPo),e(W,X7),e(X7,hhe),e(hhe,CPo),e(X7,wPo),e(X7,OO),e(OO,APo),e(X7,LPo),e(W,yPo),e(W,z7),e(z7,phe),e(phe,xPo),e(z7,$Po),e(z7,VO),e(VO,kPo),e(z7,SPo),e(W,RPo),e(W,Q7),e(Q7,_he),e(_he,PPo),e(Q7,BPo),e(Q7,XO),e(XO,IPo),e(Q7,NPo),e(W,qPo),e(W,W7),e(W7,uhe),e(uhe,jPo),e(W7,DPo),e(W7,zO),e(zO,GPo),e(W7,OPo),e(W,VPo),e(W,H7),e(H7,bhe),e(bhe,XPo),e(H7,zPo),e(H7,QO),e(QO,QPo),e(H7,WPo),e(W,HPo),e(W,U7),e(U7,vhe),e(vhe,UPo),e(U7,JPo),e(U7,WO),e(WO,YPo),e(U7,KPo),e(W,ZPo),e(W,J7),e(J7,Fhe),e(Fhe,eBo),e(J7,oBo),e(J7,HO),e(HO,rBo),e(J7,tBo),e(W,aBo),e(W,Y7),e(Y7,The),e(The,nBo),e(Y7,sBo),e(Y7,UO),e(UO,lBo),e(Y7,iBo),e(W,dBo),e(W,K7),e(K7,Mhe),e(Mhe,cBo),e(K7,fBo),e(K7,JO),e(JO,mBo),e(K7,gBo),e(W,hBo),e(W,Z7),e(Z7,Ehe),e(Ehe,pBo),e(Z7,_Bo),e(Z7,YO),e(YO,uBo),e(Z7,bBo),e(W,vBo),e(W,e4),e(e4,Che),e(Che,FBo),e(e4,TBo),e(e4,KO),e(KO,MBo),e(e4,EBo),e(W,CBo),e(W,o4),e(o4,whe),e(whe,wBo),e(o4,ABo),e(o4,ZO),e(ZO,LBo),e(o4,yBo),e(W,xBo),e(W,r4),e(r4,Ahe),e(Ahe,$Bo),e(r4,kBo),e(r4,eV),e(eV,SBo),e(r4,RBo),e(W,PBo),e(W,t4),e(t4,Lhe),e(Lhe,BBo),e(t4,IBo),e(t4,oV),e(oV,NBo),e(t4,qBo),e(W,jBo),e(W,a4),e(a4,yhe),e(yhe,DBo),e(a4,GBo),e(a4,rV),e(rV,OBo),e(a4,VBo),e(W,XBo),e(W,n4),e(n4,xhe),e(xhe,zBo),e(n4,QBo),e(n4,tV),e(tV,WBo),e(n4,HBo),e(W,UBo),e(W,s4),e(s4,$he),e($he,JBo),e(s4,YBo),e(s4,aV),e(aV,KBo),e(s4,ZBo),e(W,eIo),e(W,l4),e(l4,khe),e(khe,oIo),e(l4,rIo),e(l4,nV),e(nV,tIo),e(l4,aIo),e(W,nIo),e(W,i4),e(i4,She),e(She,sIo),e(i4,lIo),e(i4,Rhe),e(Rhe,iIo),e(i4,dIo),e(W,cIo),e(W,d4),e(d4,Phe),e(Phe,fIo),e(d4,mIo),e(d4,sV),e(sV,gIo),e(d4,hIo),e(W,pIo),e(W,c4),e(c4,Bhe),e(Bhe,_Io),e(c4,uIo),e(c4,lV),e(lV,bIo),e(c4,vIo),e(W,FIo),e(W,f4),e(f4,Ihe),e(Ihe,TIo),e(f4,MIo),e(f4,iV),e(iV,EIo),e(f4,CIo),e(W,wIo),e(W,m4),e(m4,Nhe),e(Nhe,AIo),e(m4,LIo),e(m4,dV),e(dV,yIo),e(m4,xIo),e(Ze,$Io),e(Ze,g4),e(g4,kIo),e(g4,qhe),e(qhe,SIo),e(g4,RIo),e(g4,jhe),e(jhe,PIo),e(Ze,BIo),M(h4,Ze,null),b(f,BVe,u),b(f,Yi,u),e(Yi,p4),e(p4,Dhe),M(Gy,Dhe,null),e(Yi,IIo),e(Yi,Ghe),e(Ghe,NIo),b(f,IVe,u),b(f,Ro,u),M(Oy,Ro,null),e(Ro,qIo),e(Ro,Ki),e(Ki,jIo),e(Ki,cV),e(cV,DIo),e(Ki,GIo),e(Ki,fV),e(fV,OIo),e(Ki,VIo),e(Ro,XIo),e(Ro,Vy),e(Vy,zIo),e(Vy,Ohe),e(Ohe,QIo),e(Vy,WIo),e(Ro,HIo),e(Ro,ct),M(Xy,ct,null),e(ct,UIo),e(ct,Vhe),e(Vhe,JIo),e(ct,YIo),e(ct,Zi),e(Zi,KIo),e(Zi,Xhe),e(Xhe,ZIo),e(Zi,eNo),e(Zi,mV),e(mV,oNo),e(Zi,rNo),e(ct,tNo),M(_4,ct,null),e(Ro,aNo),e(Ro,eo),M(zy,eo,null),e(eo,nNo),e(eo,zhe),e(zhe,sNo),e(eo,lNo),e(eo,qa),e(qa,iNo),e(qa,Qhe),e(Qhe,dNo),e(qa,cNo),e(qa,Whe),e(Whe,fNo),e(qa,mNo),e(qa,Hhe),e(Hhe,gNo),e(qa,hNo),e(eo,pNo),e(eo,pe),e(pe,u4),e(u4,Uhe),e(Uhe,_No),e(u4,uNo),e(u4,gV),e(gV,bNo),e(u4,vNo),e(pe,FNo),e(pe,b4),e(b4,Jhe),e(Jhe,TNo),e(b4,MNo),e(b4,hV),e(hV,ENo),e(b4,CNo),e(pe,wNo),e(pe,v4),e(v4,Yhe),e(Yhe,ANo),e(v4,LNo),e(v4,pV),e(pV,yNo),e(v4,xNo),e(pe,$No),e(pe,F4),e(F4,Khe),e(Khe,kNo),e(F4,SNo),e(F4,_V),e(_V,RNo),e(F4,PNo),e(pe,BNo),e(pe,T4),e(T4,Zhe),e(Zhe,INo),e(T4,NNo),e(T4,uV),e(uV,qNo),e(T4,jNo),e(pe,DNo),e(pe,M4),e(M4,epe),e(epe,GNo),e(M4,ONo),e(M4,bV),e(bV,VNo),e(M4,XNo),e(pe,zNo),e(pe,E4),e(E4,ope),e(ope,QNo),e(E4,WNo),e(E4,vV),e(vV,HNo),e(E4,UNo),e(pe,JNo),e(pe,C4),e(C4,rpe),e(rpe,YNo),e(C4,KNo),e(C4,FV),e(FV,ZNo),e(C4,eqo),e(pe,oqo),e(pe,w4),e(w4,tpe),e(tpe,rqo),e(w4,tqo),e(w4,TV),e(TV,aqo),e(w4,nqo),e(pe,sqo),e(pe,A4),e(A4,ape),e(ape,lqo),e(A4,iqo),e(A4,MV),e(MV,dqo),e(A4,cqo),e(pe,fqo),e(pe,L4),e(L4,npe),e(npe,mqo),e(L4,gqo),e(L4,EV),e(EV,hqo),e(L4,pqo),e(pe,_qo),e(pe,y4),e(y4,spe),e(spe,uqo),e(y4,bqo),e(y4,CV),e(CV,vqo),e(y4,Fqo),e(pe,Tqo),e(pe,x4),e(x4,lpe),e(lpe,Mqo),e(x4,Eqo),e(x4,wV),e(wV,Cqo),e(x4,wqo),e(pe,Aqo),e(pe,$4),e($4,ipe),e(ipe,Lqo),e($4,yqo),e($4,AV),e(AV,xqo),e($4,$qo),e(pe,kqo),e(pe,k4),e(k4,dpe),e(dpe,Sqo),e(k4,Rqo),e(k4,LV),e(LV,Pqo),e(k4,Bqo),e(pe,Iqo),e(pe,S4),e(S4,cpe),e(cpe,Nqo),e(S4,qqo),e(S4,yV),e(yV,jqo),e(S4,Dqo),e(pe,Gqo),e(pe,R4),e(R4,fpe),e(fpe,Oqo),e(R4,Vqo),e(R4,xV),e(xV,Xqo),e(R4,zqo),e(pe,Qqo),e(pe,P4),e(P4,mpe),e(mpe,Wqo),e(P4,Hqo),e(P4,$V),e($V,Uqo),e(P4,Jqo),e(eo,Yqo),e(eo,B4),e(B4,Kqo),e(B4,gpe),e(gpe,Zqo),e(B4,ejo),e(B4,hpe),e(hpe,ojo),e(eo,rjo),M(I4,eo,null),b(f,NVe,u),b(f,ed,u),e(ed,N4),e(N4,ppe),M(Qy,ppe,null),e(ed,tjo),e(ed,_pe),e(_pe,ajo),b(f,qVe,u),b(f,Po,u),M(Wy,Po,null),e(Po,njo),e(Po,od),e(od,sjo),e(od,kV),e(kV,ljo),e(od,ijo),e(od,SV),e(SV,djo),e(od,cjo),e(Po,fjo),e(Po,Hy),e(Hy,mjo),e(Hy,upe),e(upe,gjo),e(Hy,hjo),e(Po,pjo),e(Po,ft),M(Uy,ft,null),e(ft,_jo),e(ft,bpe),e(bpe,ujo),e(ft,bjo),e(ft,rd),e(rd,vjo),e(rd,vpe),e(vpe,Fjo),e(rd,Tjo),e(rd,RV),e(RV,Mjo),e(rd,Ejo),e(ft,Cjo),M(q4,ft,null),e(Po,wjo),e(Po,oo),M(Jy,oo,null),e(oo,Ajo),e(oo,Fpe),e(Fpe,Ljo),e(oo,yjo),e(oo,ja),e(ja,xjo),e(ja,Tpe),e(Tpe,$jo),e(ja,kjo),e(ja,Mpe),e(Mpe,Sjo),e(ja,Rjo),e(ja,Epe),e(Epe,Pjo),e(ja,Bjo),e(oo,Ijo),e(oo,N),e(N,j4),e(j4,Cpe),e(Cpe,Njo),e(j4,qjo),e(j4,PV),e(PV,jjo),e(j4,Djo),e(N,Gjo),e(N,D4),e(D4,wpe),e(wpe,Ojo),e(D4,Vjo),e(D4,BV),e(BV,Xjo),e(D4,zjo),e(N,Qjo),e(N,G4),e(G4,Ape),e(Ape,Wjo),e(G4,Hjo),e(G4,IV),e(IV,Ujo),e(G4,Jjo),e(N,Yjo),e(N,O4),e(O4,Lpe),e(Lpe,Kjo),e(O4,Zjo),e(O4,NV),e(NV,eDo),e(O4,oDo),e(N,rDo),e(N,V4),e(V4,ype),e(ype,tDo),e(V4,aDo),e(V4,qV),e(qV,nDo),e(V4,sDo),e(N,lDo),e(N,X4),e(X4,xpe),e(xpe,iDo),e(X4,dDo),e(X4,jV),e(jV,cDo),e(X4,fDo),e(N,mDo),e(N,z4),e(z4,$pe),e($pe,gDo),e(z4,hDo),e(z4,DV),e(DV,pDo),e(z4,_Do),e(N,uDo),e(N,Q4),e(Q4,kpe),e(kpe,bDo),e(Q4,vDo),e(Q4,GV),e(GV,FDo),e(Q4,TDo),e(N,MDo),e(N,W4),e(W4,Spe),e(Spe,EDo),e(W4,CDo),e(W4,OV),e(OV,wDo),e(W4,ADo),e(N,LDo),e(N,H4),e(H4,Rpe),e(Rpe,yDo),e(H4,xDo),e(H4,VV),e(VV,$Do),e(H4,kDo),e(N,SDo),e(N,U4),e(U4,Ppe),e(Ppe,RDo),e(U4,PDo),e(U4,XV),e(XV,BDo),e(U4,IDo),e(N,NDo),e(N,J4),e(J4,Bpe),e(Bpe,qDo),e(J4,jDo),e(J4,zV),e(zV,DDo),e(J4,GDo),e(N,ODo),e(N,Y4),e(Y4,Ipe),e(Ipe,VDo),e(Y4,XDo),e(Y4,QV),e(QV,zDo),e(Y4,QDo),e(N,WDo),e(N,K4),e(K4,Npe),e(Npe,HDo),e(K4,UDo),e(K4,WV),e(WV,JDo),e(K4,YDo),e(N,KDo),e(N,Z4),e(Z4,qpe),e(qpe,ZDo),e(Z4,eGo),e(Z4,HV),e(HV,oGo),e(Z4,rGo),e(N,tGo),e(N,e2),e(e2,jpe),e(jpe,aGo),e(e2,nGo),e(e2,UV),e(UV,sGo),e(e2,lGo),e(N,iGo),e(N,o2),e(o2,Dpe),e(Dpe,dGo),e(o2,cGo),e(o2,JV),e(JV,fGo),e(o2,mGo),e(N,gGo),e(N,r2),e(r2,Gpe),e(Gpe,hGo),e(r2,pGo),e(r2,YV),e(YV,_Go),e(r2,uGo),e(N,bGo),e(N,t2),e(t2,Ope),e(Ope,vGo),e(t2,FGo),e(t2,KV),e(KV,TGo),e(t2,MGo),e(N,EGo),e(N,a2),e(a2,Vpe),e(Vpe,CGo),e(a2,wGo),e(a2,ZV),e(ZV,AGo),e(a2,LGo),e(N,yGo),e(N,n2),e(n2,Xpe),e(Xpe,xGo),e(n2,$Go),e(n2,eX),e(eX,kGo),e(n2,SGo),e(N,RGo),e(N,s2),e(s2,zpe),e(zpe,PGo),e(s2,BGo),e(s2,oX),e(oX,IGo),e(s2,NGo),e(N,qGo),e(N,l2),e(l2,Qpe),e(Qpe,jGo),e(l2,DGo),e(l2,rX),e(rX,GGo),e(l2,OGo),e(N,VGo),e(N,i2),e(i2,Wpe),e(Wpe,XGo),e(i2,zGo),e(i2,tX),e(tX,QGo),e(i2,WGo),e(N,HGo),e(N,d2),e(d2,Hpe),e(Hpe,UGo),e(d2,JGo),e(d2,aX),e(aX,YGo),e(d2,KGo),e(N,ZGo),e(N,c2),e(c2,Upe),e(Upe,eOo),e(c2,oOo),e(c2,nX),e(nX,rOo),e(c2,tOo),e(N,aOo),e(N,f2),e(f2,Jpe),e(Jpe,nOo),e(f2,sOo),e(f2,sX),e(sX,lOo),e(f2,iOo),e(N,dOo),e(N,m2),e(m2,Ype),e(Ype,cOo),e(m2,fOo),e(m2,lX),e(lX,mOo),e(m2,gOo),e(N,hOo),e(N,g2),e(g2,Kpe),e(Kpe,pOo),e(g2,_Oo),e(g2,iX),e(iX,uOo),e(g2,bOo),e(N,vOo),e(N,h2),e(h2,Zpe),e(Zpe,FOo),e(h2,TOo),e(h2,dX),e(dX,MOo),e(h2,EOo),e(N,COo),e(N,p2),e(p2,e_e),e(e_e,wOo),e(p2,AOo),e(p2,cX),e(cX,LOo),e(p2,yOo),e(N,xOo),e(N,_2),e(_2,o_e),e(o_e,$Oo),e(_2,kOo),e(_2,fX),e(fX,SOo),e(_2,ROo),e(N,POo),e(N,u2),e(u2,r_e),e(r_e,BOo),e(u2,IOo),e(u2,mX),e(mX,NOo),e(u2,qOo),e(N,jOo),e(N,b2),e(b2,t_e),e(t_e,DOo),e(b2,GOo),e(b2,gX),e(gX,OOo),e(b2,VOo),e(N,XOo),e(N,v2),e(v2,a_e),e(a_e,zOo),e(v2,QOo),e(v2,hX),e(hX,WOo),e(v2,HOo),e(N,UOo),e(N,F2),e(F2,n_e),e(n_e,JOo),e(F2,YOo),e(F2,pX),e(pX,KOo),e(F2,ZOo),e(N,eVo),e(N,T2),e(T2,s_e),e(s_e,oVo),e(T2,rVo),e(T2,_X),e(_X,tVo),e(T2,aVo),e(N,nVo),e(N,M2),e(M2,l_e),e(l_e,sVo),e(M2,lVo),e(M2,uX),e(uX,iVo),e(M2,dVo),e(N,cVo),e(N,E2),e(E2,i_e),e(i_e,fVo),e(E2,mVo),e(E2,bX),e(bX,gVo),e(E2,hVo),e(N,pVo),e(N,C2),e(C2,d_e),e(d_e,_Vo),e(C2,uVo),e(C2,vX),e(vX,bVo),e(C2,vVo),e(N,FVo),e(N,w2),e(w2,c_e),e(c_e,TVo),e(w2,MVo),e(w2,FX),e(FX,EVo),e(w2,CVo),e(N,wVo),e(N,A2),e(A2,f_e),e(f_e,AVo),e(A2,LVo),e(A2,TX),e(TX,yVo),e(A2,xVo),e(N,$Vo),e(N,L2),e(L2,m_e),e(m_e,kVo),e(L2,SVo),e(L2,MX),e(MX,RVo),e(L2,PVo),e(N,BVo),e(N,y2),e(y2,g_e),e(g_e,IVo),e(y2,NVo),e(y2,EX),e(EX,qVo),e(y2,jVo),e(N,DVo),e(N,x2),e(x2,h_e),e(h_e,GVo),e(x2,OVo),e(x2,CX),e(CX,VVo),e(x2,XVo),e(N,zVo),e(N,$2),e($2,p_e),e(p_e,QVo),e($2,WVo),e($2,wX),e(wX,HVo),e($2,UVo),e(N,JVo),e(N,k2),e(k2,__e),e(__e,YVo),e(k2,KVo),e(k2,AX),e(AX,ZVo),e(k2,eXo),e(N,oXo),e(N,S2),e(S2,u_e),e(u_e,rXo),e(S2,tXo),e(S2,LX),e(LX,aXo),e(S2,nXo),e(N,sXo),e(N,R2),e(R2,b_e),e(b_e,lXo),e(R2,iXo),e(R2,yX),e(yX,dXo),e(R2,cXo),e(N,fXo),e(N,P2),e(P2,v_e),e(v_e,mXo),e(P2,gXo),e(P2,xX),e(xX,hXo),e(P2,pXo),e(oo,_Xo),e(oo,B2),e(B2,uXo),e(B2,F_e),e(F_e,bXo),e(B2,vXo),e(B2,T_e),e(T_e,FXo),e(oo,TXo),M(I2,oo,null),b(f,jVe,u),b(f,td,u),e(td,N2),e(N2,M_e),M(Yy,M_e,null),e(td,MXo),e(td,E_e),e(E_e,EXo),b(f,DVe,u),b(f,Bo,u),M(Ky,Bo,null),e(Bo,CXo),e(Bo,ad),e(ad,wXo),e(ad,$X),e($X,AXo),e(ad,LXo),e(ad,kX),e(kX,yXo),e(ad,xXo),e(Bo,$Xo),e(Bo,Zy),e(Zy,kXo),e(Zy,C_e),e(C_e,SXo),e(Zy,RXo),e(Bo,PXo),e(Bo,mt),M(e8,mt,null),e(mt,BXo),e(mt,w_e),e(w_e,IXo),e(mt,NXo),e(mt,nd),e(nd,qXo),e(nd,A_e),e(A_e,jXo),e(nd,DXo),e(nd,SX),e(SX,GXo),e(nd,OXo),e(mt,VXo),M(q2,mt,null),e(Bo,XXo),e(Bo,ro),M(o8,ro,null),e(ro,zXo),e(ro,L_e),e(L_e,QXo),e(ro,WXo),e(ro,Da),e(Da,HXo),e(Da,y_e),e(y_e,UXo),e(Da,JXo),e(Da,x_e),e(x_e,YXo),e(Da,KXo),e(Da,$_e),e($_e,ZXo),e(Da,ezo),e(ro,ozo),e(ro,Z),e(Z,j2),e(j2,k_e),e(k_e,rzo),e(j2,tzo),e(j2,RX),e(RX,azo),e(j2,nzo),e(Z,szo),e(Z,D2),e(D2,S_e),e(S_e,lzo),e(D2,izo),e(D2,PX),e(PX,dzo),e(D2,czo),e(Z,fzo),e(Z,G2),e(G2,R_e),e(R_e,mzo),e(G2,gzo),e(G2,BX),e(BX,hzo),e(G2,pzo),e(Z,_zo),e(Z,O2),e(O2,P_e),e(P_e,uzo),e(O2,bzo),e(O2,IX),e(IX,vzo),e(O2,Fzo),e(Z,Tzo),e(Z,V2),e(V2,B_e),e(B_e,Mzo),e(V2,Ezo),e(V2,NX),e(NX,Czo),e(V2,wzo),e(Z,Azo),e(Z,X2),e(X2,I_e),e(I_e,Lzo),e(X2,yzo),e(X2,qX),e(qX,xzo),e(X2,$zo),e(Z,kzo),e(Z,z2),e(z2,N_e),e(N_e,Szo),e(z2,Rzo),e(z2,jX),e(jX,Pzo),e(z2,Bzo),e(Z,Izo),e(Z,Q2),e(Q2,q_e),e(q_e,Nzo),e(Q2,qzo),e(Q2,DX),e(DX,jzo),e(Q2,Dzo),e(Z,Gzo),e(Z,W2),e(W2,j_e),e(j_e,Ozo),e(W2,Vzo),e(W2,GX),e(GX,Xzo),e(W2,zzo),e(Z,Qzo),e(Z,H2),e(H2,D_e),e(D_e,Wzo),e(H2,Hzo),e(H2,OX),e(OX,Uzo),e(H2,Jzo),e(Z,Yzo),e(Z,U2),e(U2,G_e),e(G_e,Kzo),e(U2,Zzo),e(U2,VX),e(VX,eQo),e(U2,oQo),e(Z,rQo),e(Z,J2),e(J2,O_e),e(O_e,tQo),e(J2,aQo),e(J2,XX),e(XX,nQo),e(J2,sQo),e(Z,lQo),e(Z,Y2),e(Y2,V_e),e(V_e,iQo),e(Y2,dQo),e(Y2,zX),e(zX,cQo),e(Y2,fQo),e(Z,mQo),e(Z,K2),e(K2,X_e),e(X_e,gQo),e(K2,hQo),e(K2,QX),e(QX,pQo),e(K2,_Qo),e(Z,uQo),e(Z,Z2),e(Z2,z_e),e(z_e,bQo),e(Z2,vQo),e(Z2,WX),e(WX,FQo),e(Z2,TQo),e(Z,MQo),e(Z,eb),e(eb,Q_e),e(Q_e,EQo),e(eb,CQo),e(eb,HX),e(HX,wQo),e(eb,AQo),e(Z,LQo),e(Z,ob),e(ob,W_e),e(W_e,yQo),e(ob,xQo),e(ob,UX),e(UX,$Qo),e(ob,kQo),e(Z,SQo),e(Z,rb),e(rb,H_e),e(H_e,RQo),e(rb,PQo),e(rb,JX),e(JX,BQo),e(rb,IQo),e(Z,NQo),e(Z,tb),e(tb,U_e),e(U_e,qQo),e(tb,jQo),e(tb,YX),e(YX,DQo),e(tb,GQo),e(Z,OQo),e(Z,ab),e(ab,J_e),e(J_e,VQo),e(ab,XQo),e(ab,KX),e(KX,zQo),e(ab,QQo),e(Z,WQo),e(Z,nb),e(nb,Y_e),e(Y_e,HQo),e(nb,UQo),e(nb,ZX),e(ZX,JQo),e(nb,YQo),e(Z,KQo),e(Z,sb),e(sb,K_e),e(K_e,ZQo),e(sb,eWo),e(sb,ez),e(ez,oWo),e(sb,rWo),e(Z,tWo),e(Z,lb),e(lb,Z_e),e(Z_e,aWo),e(lb,nWo),e(lb,oz),e(oz,sWo),e(lb,lWo),e(Z,iWo),e(Z,ib),e(ib,eue),e(eue,dWo),e(ib,cWo),e(ib,rz),e(rz,fWo),e(ib,mWo),e(Z,gWo),e(Z,db),e(db,oue),e(oue,hWo),e(db,pWo),e(db,tz),e(tz,_Wo),e(db,uWo),e(Z,bWo),e(Z,cb),e(cb,rue),e(rue,vWo),e(cb,FWo),e(cb,az),e(az,TWo),e(cb,MWo),e(Z,EWo),e(Z,fb),e(fb,tue),e(tue,CWo),e(fb,wWo),e(fb,nz),e(nz,AWo),e(fb,LWo),e(Z,yWo),e(Z,mb),e(mb,aue),e(aue,xWo),e(mb,$Wo),e(mb,sz),e(sz,kWo),e(mb,SWo),e(Z,RWo),e(Z,gb),e(gb,nue),e(nue,PWo),e(gb,BWo),e(gb,lz),e(lz,IWo),e(gb,NWo),e(Z,qWo),e(Z,hb),e(hb,sue),e(sue,jWo),e(hb,DWo),e(hb,iz),e(iz,GWo),e(hb,OWo),e(ro,VWo),e(ro,pb),e(pb,XWo),e(pb,lue),e(lue,zWo),e(pb,QWo),e(pb,iue),e(iue,WWo),e(ro,HWo),M(_b,ro,null),b(f,GVe,u),b(f,sd,u),e(sd,ub),e(ub,due),M(r8,due,null),e(sd,UWo),e(sd,cue),e(cue,JWo),b(f,OVe,u),b(f,Io,u),M(t8,Io,null),e(Io,YWo),e(Io,ld),e(ld,KWo),e(ld,dz),e(dz,ZWo),e(ld,eHo),e(ld,cz),e(cz,oHo),e(ld,rHo),e(Io,tHo),e(Io,a8),e(a8,aHo),e(a8,fue),e(fue,nHo),e(a8,sHo),e(Io,lHo),e(Io,gt),M(n8,gt,null),e(gt,iHo),e(gt,mue),e(mue,dHo),e(gt,cHo),e(gt,id),e(id,fHo),e(id,gue),e(gue,mHo),e(id,gHo),e(id,fz),e(fz,hHo),e(id,pHo),e(gt,_Ho),M(bb,gt,null),e(Io,uHo),e(Io,to),M(s8,to,null),e(to,bHo),e(to,hue),e(hue,vHo),e(to,FHo),e(to,Ga),e(Ga,THo),e(Ga,pue),e(pue,MHo),e(Ga,EHo),e(Ga,_ue),e(_ue,CHo),e(Ga,wHo),e(Ga,uue),e(uue,AHo),e(Ga,LHo),e(to,yHo),e(to,No),e(No,vb),e(vb,bue),e(bue,xHo),e(vb,$Ho),e(vb,mz),e(mz,kHo),e(vb,SHo),e(No,RHo),e(No,Fb),e(Fb,vue),e(vue,PHo),e(Fb,BHo),e(Fb,gz),e(gz,IHo),e(Fb,NHo),e(No,qHo),e(No,Tb),e(Tb,Fue),e(Fue,jHo),e(Tb,DHo),e(Tb,hz),e(hz,GHo),e(Tb,OHo),e(No,VHo),e(No,Mb),e(Mb,Tue),e(Tue,XHo),e(Mb,zHo),e(Mb,pz),e(pz,QHo),e(Mb,WHo),e(No,HHo),e(No,Eb),e(Eb,Mue),e(Mue,UHo),e(Eb,JHo),e(Eb,_z),e(_z,YHo),e(Eb,KHo),e(No,ZHo),e(No,Cb),e(Cb,Eue),e(Eue,eUo),e(Cb,oUo),e(Cb,uz),e(uz,rUo),e(Cb,tUo),e(to,aUo),e(to,wb),e(wb,nUo),e(wb,Cue),e(Cue,sUo),e(wb,lUo),e(wb,wue),e(wue,iUo),e(to,dUo),M(Ab,to,null),b(f,VVe,u),b(f,dd,u),e(dd,Lb),e(Lb,Aue),M(l8,Aue,null),e(dd,cUo),e(dd,Lue),e(Lue,fUo),b(f,XVe,u),b(f,qo,u),M(i8,qo,null),e(qo,mUo),e(qo,cd),e(cd,gUo),e(cd,bz),e(bz,hUo),e(cd,pUo),e(cd,vz),e(vz,_Uo),e(cd,uUo),e(qo,bUo),e(qo,d8),e(d8,vUo),e(d8,yue),e(yue,FUo),e(d8,TUo),e(qo,MUo),e(qo,ht),M(c8,ht,null),e(ht,EUo),e(ht,xue),e(xue,CUo),e(ht,wUo),e(ht,fd),e(fd,AUo),e(fd,$ue),e($ue,LUo),e(fd,yUo),e(fd,Fz),e(Fz,xUo),e(fd,$Uo),e(ht,kUo),M(yb,ht,null),e(qo,SUo),e(qo,ao),M(f8,ao,null),e(ao,RUo),e(ao,kue),e(kue,PUo),e(ao,BUo),e(ao,Oa),e(Oa,IUo),e(Oa,Sue),e(Sue,NUo),e(Oa,qUo),e(Oa,Rue),e(Rue,jUo),e(Oa,DUo),e(Oa,Pue),e(Pue,GUo),e(Oa,OUo),e(ao,VUo),e(ao,U),e(U,xb),e(xb,Bue),e(Bue,XUo),e(xb,zUo),e(xb,Tz),e(Tz,QUo),e(xb,WUo),e(U,HUo),e(U,$b),e($b,Iue),e(Iue,UUo),e($b,JUo),e($b,Mz),e(Mz,YUo),e($b,KUo),e(U,ZUo),e(U,kb),e(kb,Nue),e(Nue,eJo),e(kb,oJo),e(kb,Ez),e(Ez,rJo),e(kb,tJo),e(U,aJo),e(U,Sb),e(Sb,que),e(que,nJo),e(Sb,sJo),e(Sb,Cz),e(Cz,lJo),e(Sb,iJo),e(U,dJo),e(U,Rb),e(Rb,jue),e(jue,cJo),e(Rb,fJo),e(Rb,wz),e(wz,mJo),e(Rb,gJo),e(U,hJo),e(U,Pb),e(Pb,Due),e(Due,pJo),e(Pb,_Jo),e(Pb,Az),e(Az,uJo),e(Pb,bJo),e(U,vJo),e(U,Bb),e(Bb,Gue),e(Gue,FJo),e(Bb,TJo),e(Bb,Lz),e(Lz,MJo),e(Bb,EJo),e(U,CJo),e(U,Ib),e(Ib,Oue),e(Oue,wJo),e(Ib,AJo),e(Ib,yz),e(yz,LJo),e(Ib,yJo),e(U,xJo),e(U,Nb),e(Nb,Vue),e(Vue,$Jo),e(Nb,kJo),e(Nb,xz),e(xz,SJo),e(Nb,RJo),e(U,PJo),e(U,qb),e(qb,Xue),e(Xue,BJo),e(qb,IJo),e(qb,$z),e($z,NJo),e(qb,qJo),e(U,jJo),e(U,jb),e(jb,zue),e(zue,DJo),e(jb,GJo),e(jb,kz),e(kz,OJo),e(jb,VJo),e(U,XJo),e(U,Db),e(Db,Que),e(Que,zJo),e(Db,QJo),e(Db,Sz),e(Sz,WJo),e(Db,HJo),e(U,UJo),e(U,Gb),e(Gb,Wue),e(Wue,JJo),e(Gb,YJo),e(Gb,Rz),e(Rz,KJo),e(Gb,ZJo),e(U,eYo),e(U,Ob),e(Ob,Hue),e(Hue,oYo),e(Ob,rYo),e(Ob,Pz),e(Pz,tYo),e(Ob,aYo),e(U,nYo),e(U,Vb),e(Vb,Uue),e(Uue,sYo),e(Vb,lYo),e(Vb,Bz),e(Bz,iYo),e(Vb,dYo),e(U,cYo),e(U,Xb),e(Xb,Jue),e(Jue,fYo),e(Xb,mYo),e(Xb,Iz),e(Iz,gYo),e(Xb,hYo),e(U,pYo),e(U,zb),e(zb,Yue),e(Yue,_Yo),e(zb,uYo),e(zb,Nz),e(Nz,bYo),e(zb,vYo),e(U,FYo),e(U,Qb),e(Qb,Kue),e(Kue,TYo),e(Qb,MYo),e(Qb,qz),e(qz,EYo),e(Qb,CYo),e(U,wYo),e(U,Wb),e(Wb,Zue),e(Zue,AYo),e(Wb,LYo),e(Wb,jz),e(jz,yYo),e(Wb,xYo),e(U,$Yo),e(U,Hb),e(Hb,e1e),e(e1e,kYo),e(Hb,SYo),e(Hb,Dz),e(Dz,RYo),e(Hb,PYo),e(U,BYo),e(U,Ub),e(Ub,o1e),e(o1e,IYo),e(Ub,NYo),e(Ub,Gz),e(Gz,qYo),e(Ub,jYo),e(U,DYo),e(U,Jb),e(Jb,r1e),e(r1e,GYo),e(Jb,OYo),e(Jb,Oz),e(Oz,VYo),e(Jb,XYo),e(U,zYo),e(U,Yb),e(Yb,t1e),e(t1e,QYo),e(Yb,WYo),e(Yb,Vz),e(Vz,HYo),e(Yb,UYo),e(U,JYo),e(U,Kb),e(Kb,a1e),e(a1e,YYo),e(Kb,KYo),e(Kb,Xz),e(Xz,ZYo),e(Kb,eKo),e(U,oKo),e(U,Zb),e(Zb,n1e),e(n1e,rKo),e(Zb,tKo),e(Zb,zz),e(zz,aKo),e(Zb,nKo),e(U,sKo),e(U,ev),e(ev,s1e),e(s1e,lKo),e(ev,iKo),e(ev,Qz),e(Qz,dKo),e(ev,cKo),e(U,fKo),e(U,ov),e(ov,l1e),e(l1e,mKo),e(ov,gKo),e(ov,Wz),e(Wz,hKo),e(ov,pKo),e(U,_Ko),e(U,rv),e(rv,i1e),e(i1e,uKo),e(rv,bKo),e(rv,Hz),e(Hz,vKo),e(rv,FKo),e(U,TKo),e(U,tv),e(tv,d1e),e(d1e,MKo),e(tv,EKo),e(tv,Uz),e(Uz,CKo),e(tv,wKo),e(U,AKo),e(U,av),e(av,c1e),e(c1e,LKo),e(av,yKo),e(av,Jz),e(Jz,xKo),e(av,$Ko),e(U,kKo),e(U,nv),e(nv,f1e),e(f1e,SKo),e(nv,RKo),e(nv,Yz),e(Yz,PKo),e(nv,BKo),e(U,IKo),e(U,sv),e(sv,m1e),e(m1e,NKo),e(sv,qKo),e(sv,Kz),e(Kz,jKo),e(sv,DKo),e(U,GKo),e(U,lv),e(lv,g1e),e(g1e,OKo),e(lv,VKo),e(lv,Zz),e(Zz,XKo),e(lv,zKo),e(U,QKo),e(U,iv),e(iv,h1e),e(h1e,WKo),e(iv,HKo),e(iv,eQ),e(eQ,UKo),e(iv,JKo),e(U,YKo),e(U,dv),e(dv,p1e),e(p1e,KKo),e(dv,ZKo),e(dv,oQ),e(oQ,eZo),e(dv,oZo),e(U,rZo),e(U,cv),e(cv,_1e),e(_1e,tZo),e(cv,aZo),e(cv,rQ),e(rQ,nZo),e(cv,sZo),e(ao,lZo),e(ao,fv),e(fv,iZo),e(fv,u1e),e(u1e,dZo),e(fv,cZo),e(fv,b1e),e(b1e,fZo),e(ao,mZo),M(mv,ao,null),b(f,zVe,u),b(f,md,u),e(md,gv),e(gv,v1e),M(m8,v1e,null),e(md,gZo),e(md,F1e),e(F1e,hZo),b(f,QVe,u),b(f,jo,u),M(g8,jo,null),e(jo,pZo),e(jo,gd),e(gd,_Zo),e(gd,tQ),e(tQ,uZo),e(gd,bZo),e(gd,aQ),e(aQ,vZo),e(gd,FZo),e(jo,TZo),e(jo,h8),e(h8,MZo),e(h8,T1e),e(T1e,EZo),e(h8,CZo),e(jo,wZo),e(jo,pt),M(p8,pt,null),e(pt,AZo),e(pt,M1e),e(M1e,LZo),e(pt,yZo),e(pt,hd),e(hd,xZo),e(hd,E1e),e(E1e,$Zo),e(hd,kZo),e(hd,nQ),e(nQ,SZo),e(hd,RZo),e(pt,PZo),M(hv,pt,null),e(jo,BZo),e(jo,no),M(_8,no,null),e(no,IZo),e(no,C1e),e(C1e,NZo),e(no,qZo),e(no,Va),e(Va,jZo),e(Va,w1e),e(w1e,DZo),e(Va,GZo),e(Va,A1e),e(A1e,OZo),e(Va,VZo),e(Va,L1e),e(L1e,XZo),e(Va,zZo),e(no,QZo),e(no,V),e(V,pv),e(pv,y1e),e(y1e,WZo),e(pv,HZo),e(pv,sQ),e(sQ,UZo),e(pv,JZo),e(V,YZo),e(V,_v),e(_v,x1e),e(x1e,KZo),e(_v,ZZo),e(_v,lQ),e(lQ,eer),e(_v,oer),e(V,rer),e(V,uv),e(uv,$1e),e($1e,ter),e(uv,aer),e(uv,iQ),e(iQ,ner),e(uv,ser),e(V,ler),e(V,bv),e(bv,k1e),e(k1e,ier),e(bv,der),e(bv,dQ),e(dQ,cer),e(bv,fer),e(V,mer),e(V,vv),e(vv,S1e),e(S1e,ger),e(vv,her),e(vv,cQ),e(cQ,per),e(vv,_er),e(V,uer),e(V,Fv),e(Fv,R1e),e(R1e,ber),e(Fv,ver),e(Fv,fQ),e(fQ,Fer),e(Fv,Ter),e(V,Mer),e(V,Tv),e(Tv,P1e),e(P1e,Eer),e(Tv,Cer),e(Tv,mQ),e(mQ,wer),e(Tv,Aer),e(V,Ler),e(V,Mv),e(Mv,B1e),e(B1e,yer),e(Mv,xer),e(Mv,gQ),e(gQ,$er),e(Mv,ker),e(V,Ser),e(V,Ev),e(Ev,I1e),e(I1e,Rer),e(Ev,Per),e(Ev,hQ),e(hQ,Ber),e(Ev,Ier),e(V,Ner),e(V,Cv),e(Cv,N1e),e(N1e,qer),e(Cv,jer),e(Cv,pQ),e(pQ,Der),e(Cv,Ger),e(V,Oer),e(V,wv),e(wv,q1e),e(q1e,Ver),e(wv,Xer),e(wv,_Q),e(_Q,zer),e(wv,Qer),e(V,Wer),e(V,Av),e(Av,j1e),e(j1e,Her),e(Av,Uer),e(Av,uQ),e(uQ,Jer),e(Av,Yer),e(V,Ker),e(V,Lv),e(Lv,D1e),e(D1e,Zer),e(Lv,eor),e(Lv,bQ),e(bQ,oor),e(Lv,ror),e(V,tor),e(V,yv),e(yv,G1e),e(G1e,aor),e(yv,nor),e(yv,vQ),e(vQ,sor),e(yv,lor),e(V,ior),e(V,xv),e(xv,O1e),e(O1e,dor),e(xv,cor),e(xv,FQ),e(FQ,mor),e(xv,gor),e(V,hor),e(V,$v),e($v,V1e),e(V1e,por),e($v,_or),e($v,TQ),e(TQ,uor),e($v,bor),e(V,vor),e(V,kv),e(kv,X1e),e(X1e,For),e(kv,Tor),e(kv,MQ),e(MQ,Mor),e(kv,Eor),e(V,Cor),e(V,Sv),e(Sv,z1e),e(z1e,wor),e(Sv,Aor),e(Sv,EQ),e(EQ,Lor),e(Sv,yor),e(V,xor),e(V,Rv),e(Rv,Q1e),e(Q1e,$or),e(Rv,kor),e(Rv,CQ),e(CQ,Sor),e(Rv,Ror),e(V,Por),e(V,Pv),e(Pv,W1e),e(W1e,Bor),e(Pv,Ior),e(Pv,wQ),e(wQ,Nor),e(Pv,qor),e(V,jor),e(V,Bv),e(Bv,H1e),e(H1e,Dor),e(Bv,Gor),e(Bv,AQ),e(AQ,Oor),e(Bv,Vor),e(V,Xor),e(V,Iv),e(Iv,U1e),e(U1e,zor),e(Iv,Qor),e(Iv,LQ),e(LQ,Wor),e(Iv,Hor),e(V,Uor),e(V,Nv),e(Nv,J1e),e(J1e,Jor),e(Nv,Yor),e(Nv,yQ),e(yQ,Kor),e(Nv,Zor),e(V,err),e(V,qv),e(qv,Y1e),e(Y1e,orr),e(qv,rrr),e(qv,xQ),e(xQ,trr),e(qv,arr),e(V,nrr),e(V,jv),e(jv,K1e),e(K1e,srr),e(jv,lrr),e(jv,$Q),e($Q,irr),e(jv,drr),e(V,crr),e(V,Dv),e(Dv,Z1e),e(Z1e,frr),e(Dv,mrr),e(Dv,kQ),e(kQ,grr),e(Dv,hrr),e(V,prr),e(V,Gv),e(Gv,e7e),e(e7e,_rr),e(Gv,urr),e(Gv,SQ),e(SQ,brr),e(Gv,vrr),e(V,Frr),e(V,Ov),e(Ov,o7e),e(o7e,Trr),e(Ov,Mrr),e(Ov,RQ),e(RQ,Err),e(Ov,Crr),e(V,wrr),e(V,Vv),e(Vv,r7e),e(r7e,Arr),e(Vv,Lrr),e(Vv,PQ),e(PQ,yrr),e(Vv,xrr),e(V,$rr),e(V,Xv),e(Xv,t7e),e(t7e,krr),e(Xv,Srr),e(Xv,BQ),e(BQ,Rrr),e(Xv,Prr),e(V,Brr),e(V,zv),e(zv,a7e),e(a7e,Irr),e(zv,Nrr),e(zv,IQ),e(IQ,qrr),e(zv,jrr),e(V,Drr),e(V,Qv),e(Qv,n7e),e(n7e,Grr),e(Qv,Orr),e(Qv,NQ),e(NQ,Vrr),e(Qv,Xrr),e(V,zrr),e(V,Wv),e(Wv,s7e),e(s7e,Qrr),e(Wv,Wrr),e(Wv,qQ),e(qQ,Hrr),e(Wv,Urr),e(V,Jrr),e(V,Hv),e(Hv,l7e),e(l7e,Yrr),e(Hv,Krr),e(Hv,jQ),e(jQ,Zrr),e(Hv,etr),e(V,otr),e(V,Uv),e(Uv,i7e),e(i7e,rtr),e(Uv,ttr),e(Uv,DQ),e(DQ,atr),e(Uv,ntr),e(V,str),e(V,Jv),e(Jv,d7e),e(d7e,ltr),e(Jv,itr),e(Jv,GQ),e(GQ,dtr),e(Jv,ctr),e(V,ftr),e(V,Yv),e(Yv,c7e),e(c7e,mtr),e(Yv,gtr),e(Yv,OQ),e(OQ,htr),e(Yv,ptr),e(V,_tr),e(V,Kv),e(Kv,f7e),e(f7e,utr),e(Kv,btr),e(Kv,VQ),e(VQ,vtr),e(Kv,Ftr),e(V,Ttr),e(V,Zv),e(Zv,m7e),e(m7e,Mtr),e(Zv,Etr),e(Zv,XQ),e(XQ,Ctr),e(Zv,wtr),e(V,Atr),e(V,e3),e(e3,g7e),e(g7e,Ltr),e(e3,ytr),e(e3,zQ),e(zQ,xtr),e(e3,$tr),e(V,ktr),e(V,o3),e(o3,h7e),e(h7e,Str),e(o3,Rtr),e(o3,QQ),e(QQ,Ptr),e(o3,Btr),e(V,Itr),e(V,r3),e(r3,p7e),e(p7e,Ntr),e(r3,qtr),e(r3,WQ),e(WQ,jtr),e(r3,Dtr),e(no,Gtr),e(no,t3),e(t3,Otr),e(t3,_7e),e(_7e,Vtr),e(t3,Xtr),e(t3,u7e),e(u7e,ztr),e(no,Qtr),M(a3,no,null),b(f,WVe,u),b(f,pd,u),e(pd,n3),e(n3,b7e),M(u8,b7e,null),e(pd,Wtr),e(pd,v7e),e(v7e,Htr),b(f,HVe,u),b(f,Do,u),M(b8,Do,null),e(Do,Utr),e(Do,_d),e(_d,Jtr),e(_d,HQ),e(HQ,Ytr),e(_d,Ktr),e(_d,UQ),e(UQ,Ztr),e(_d,ear),e(Do,oar),e(Do,v8),e(v8,rar),e(v8,F7e),e(F7e,tar),e(v8,aar),e(Do,nar),e(Do,_t),M(F8,_t,null),e(_t,sar),e(_t,T7e),e(T7e,lar),e(_t,iar),e(_t,ud),e(ud,dar),e(ud,M7e),e(M7e,car),e(ud,far),e(ud,JQ),e(JQ,mar),e(ud,gar),e(_t,har),M(s3,_t,null),e(Do,par),e(Do,so),M(T8,so,null),e(so,_ar),e(so,E7e),e(E7e,uar),e(so,bar),e(so,Xa),e(Xa,Far),e(Xa,C7e),e(C7e,Tar),e(Xa,Mar),e(Xa,w7e),e(w7e,Ear),e(Xa,Car),e(Xa,A7e),e(A7e,war),e(Xa,Aar),e(so,Lar),e(so,L7e),e(L7e,l3),e(l3,y7e),e(y7e,yar),e(l3,xar),e(l3,YQ),e(YQ,$ar),e(l3,kar),e(so,Sar),e(so,i3),e(i3,Rar),e(i3,x7e),e(x7e,Par),e(i3,Bar),e(i3,$7e),e($7e,Iar),e(so,Nar),M(d3,so,null),b(f,UVe,u),b(f,bd,u),e(bd,c3),e(c3,k7e),M(M8,k7e,null),e(bd,qar),e(bd,S7e),e(S7e,jar),b(f,JVe,u),b(f,Go,u),M(E8,Go,null),e(Go,Dar),e(Go,vd),e(vd,Gar),e(vd,KQ),e(KQ,Oar),e(vd,Var),e(vd,ZQ),e(ZQ,Xar),e(vd,zar),e(Go,Qar),e(Go,C8),e(C8,War),e(C8,R7e),e(R7e,Har),e(C8,Uar),e(Go,Jar),e(Go,ut),M(w8,ut,null),e(ut,Yar),e(ut,P7e),e(P7e,Kar),e(ut,Zar),e(ut,Fd),e(Fd,enr),e(Fd,B7e),e(B7e,onr),e(Fd,rnr),e(Fd,eW),e(eW,tnr),e(Fd,anr),e(ut,nnr),M(f3,ut,null),e(Go,snr),e(Go,lo),M(A8,lo,null),e(lo,lnr),e(lo,I7e),e(I7e,inr),e(lo,dnr),e(lo,za),e(za,cnr),e(za,N7e),e(N7e,fnr),e(za,mnr),e(za,q7e),e(q7e,gnr),e(za,hnr),e(za,j7e),e(j7e,pnr),e(za,_nr),e(lo,unr),e(lo,Fe),e(Fe,m3),e(m3,D7e),e(D7e,bnr),e(m3,vnr),e(m3,oW),e(oW,Fnr),e(m3,Tnr),e(Fe,Mnr),e(Fe,g3),e(g3,G7e),e(G7e,Enr),e(g3,Cnr),e(g3,rW),e(rW,wnr),e(g3,Anr),e(Fe,Lnr),e(Fe,h3),e(h3,O7e),e(O7e,ynr),e(h3,xnr),e(h3,tW),e(tW,$nr),e(h3,knr),e(Fe,Snr),e(Fe,p3),e(p3,V7e),e(V7e,Rnr),e(p3,Pnr),e(p3,aW),e(aW,Bnr),e(p3,Inr),e(Fe,Nnr),e(Fe,Ws),e(Ws,X7e),e(X7e,qnr),e(Ws,jnr),e(Ws,nW),e(nW,Dnr),e(Ws,Gnr),e(Ws,sW),e(sW,Onr),e(Ws,Vnr),e(Fe,Xnr),e(Fe,_3),e(_3,z7e),e(z7e,znr),e(_3,Qnr),e(_3,lW),e(lW,Wnr),e(_3,Hnr),e(Fe,Unr),e(Fe,Hs),e(Hs,Q7e),e(Q7e,Jnr),e(Hs,Ynr),e(Hs,iW),e(iW,Knr),e(Hs,Znr),e(Hs,dW),e(dW,esr),e(Hs,osr),e(Fe,rsr),e(Fe,bt),e(bt,W7e),e(W7e,tsr),e(bt,asr),e(bt,cW),e(cW,nsr),e(bt,ssr),e(bt,fW),e(fW,lsr),e(bt,isr),e(bt,mW),e(mW,dsr),e(bt,csr),e(Fe,fsr),e(Fe,u3),e(u3,H7e),e(H7e,msr),e(u3,gsr),e(u3,gW),e(gW,hsr),e(u3,psr),e(Fe,_sr),e(Fe,b3),e(b3,U7e),e(U7e,usr),e(b3,bsr),e(b3,hW),e(hW,vsr),e(b3,Fsr),e(Fe,Tsr),e(Fe,v3),e(v3,J7e),e(J7e,Msr),e(v3,Esr),e(v3,pW),e(pW,Csr),e(v3,wsr),e(Fe,Asr),e(Fe,F3),e(F3,Y7e),e(Y7e,Lsr),e(F3,ysr),e(F3,_W),e(_W,xsr),e(F3,$sr),e(Fe,ksr),e(Fe,T3),e(T3,K7e),e(K7e,Ssr),e(T3,Rsr),e(T3,uW),e(uW,Psr),e(T3,Bsr),e(Fe,Isr),e(Fe,M3),e(M3,Z7e),e(Z7e,Nsr),e(M3,qsr),e(M3,bW),e(bW,jsr),e(M3,Dsr),e(Fe,Gsr),e(Fe,E3),e(E3,e4e),e(e4e,Osr),e(E3,Vsr),e(E3,vW),e(vW,Xsr),e(E3,zsr),e(lo,Qsr),e(lo,C3),e(C3,Wsr),e(C3,o4e),e(o4e,Hsr),e(C3,Usr),e(C3,r4e),e(r4e,Jsr),e(lo,Ysr),M(w3,lo,null),b(f,YVe,u),b(f,Td,u),e(Td,A3),e(A3,t4e),M(L8,t4e,null),e(Td,Ksr),e(Td,a4e),e(a4e,Zsr),b(f,KVe,u),b(f,Oo,u),M(y8,Oo,null),e(Oo,elr),e(Oo,Md),e(Md,olr),e(Md,FW),e(FW,rlr),e(Md,tlr),e(Md,TW),e(TW,alr),e(Md,nlr),e(Oo,slr),e(Oo,x8),e(x8,llr),e(x8,n4e),e(n4e,ilr),e(x8,dlr),e(Oo,clr),e(Oo,vt),M($8,vt,null),e(vt,flr),e(vt,s4e),e(s4e,mlr),e(vt,glr),e(vt,Ed),e(Ed,hlr),e(Ed,l4e),e(l4e,plr),e(Ed,_lr),e(Ed,MW),e(MW,ulr),e(Ed,blr),e(vt,vlr),M(L3,vt,null),e(Oo,Flr),e(Oo,io),M(k8,io,null),e(io,Tlr),e(io,i4e),e(i4e,Mlr),e(io,Elr),e(io,Qa),e(Qa,Clr),e(Qa,d4e),e(d4e,wlr),e(Qa,Alr),e(Qa,c4e),e(c4e,Llr),e(Qa,ylr),e(Qa,f4e),e(f4e,xlr),e(Qa,$lr),e(io,klr),e(io,m4e),e(m4e,y3),e(y3,g4e),e(g4e,Slr),e(y3,Rlr),e(y3,EW),e(EW,Plr),e(y3,Blr),e(io,Ilr),e(io,x3),e(x3,Nlr),e(x3,h4e),e(h4e,qlr),e(x3,jlr),e(x3,p4e),e(p4e,Dlr),e(io,Glr),M($3,io,null),b(f,ZVe,u),b(f,Cd,u),e(Cd,k3),e(k3,_4e),M(S8,_4e,null),e(Cd,Olr),e(Cd,u4e),e(u4e,Vlr),b(f,eXe,u),b(f,Vo,u),M(R8,Vo,null),e(Vo,Xlr),e(Vo,wd),e(wd,zlr),e(wd,CW),e(CW,Qlr),e(wd,Wlr),e(wd,wW),e(wW,Hlr),e(wd,Ulr),e(Vo,Jlr),e(Vo,P8),e(P8,Ylr),e(P8,b4e),e(b4e,Klr),e(P8,Zlr),e(Vo,eir),e(Vo,Ft),M(B8,Ft,null),e(Ft,oir),e(Ft,v4e),e(v4e,rir),e(Ft,tir),e(Ft,Ad),e(Ad,air),e(Ad,F4e),e(F4e,nir),e(Ad,sir),e(Ad,AW),e(AW,lir),e(Ad,iir),e(Ft,dir),M(S3,Ft,null),e(Vo,cir),e(Vo,co),M(I8,co,null),e(co,fir),e(co,T4e),e(T4e,mir),e(co,gir),e(co,Wa),e(Wa,hir),e(Wa,M4e),e(M4e,pir),e(Wa,_ir),e(Wa,E4e),e(E4e,uir),e(Wa,bir),e(Wa,C4e),e(C4e,vir),e(Wa,Fir),e(co,Tir),e(co,w4e),e(w4e,R3),e(R3,A4e),e(A4e,Mir),e(R3,Eir),e(R3,LW),e(LW,Cir),e(R3,wir),e(co,Air),e(co,P3),e(P3,Lir),e(P3,L4e),e(L4e,yir),e(P3,xir),e(P3,y4e),e(y4e,$ir),e(co,kir),M(B3,co,null),b(f,oXe,u),b(f,Ld,u),e(Ld,I3),e(I3,x4e),M(N8,x4e,null),e(Ld,Sir),e(Ld,$4e),e($4e,Rir),b(f,rXe,u),b(f,Xo,u),M(q8,Xo,null),e(Xo,Pir),e(Xo,yd),e(yd,Bir),e(yd,yW),e(yW,Iir),e(yd,Nir),e(yd,xW),e(xW,qir),e(yd,jir),e(Xo,Dir),e(Xo,j8),e(j8,Gir),e(j8,k4e),e(k4e,Oir),e(j8,Vir),e(Xo,Xir),e(Xo,Tt),M(D8,Tt,null),e(Tt,zir),e(Tt,S4e),e(S4e,Qir),e(Tt,Wir),e(Tt,xd),e(xd,Hir),e(xd,R4e),e(R4e,Uir),e(xd,Jir),e(xd,$W),e($W,Yir),e(xd,Kir),e(Tt,Zir),M(N3,Tt,null),e(Xo,edr),e(Xo,fo),M(G8,fo,null),e(fo,odr),e(fo,P4e),e(P4e,rdr),e(fo,tdr),e(fo,Ha),e(Ha,adr),e(Ha,B4e),e(B4e,ndr),e(Ha,sdr),e(Ha,I4e),e(I4e,ldr),e(Ha,idr),e(Ha,N4e),e(N4e,ddr),e(Ha,cdr),e(fo,fdr),e(fo,Pe),e(Pe,q3),e(q3,q4e),e(q4e,mdr),e(q3,gdr),e(q3,kW),e(kW,hdr),e(q3,pdr),e(Pe,_dr),e(Pe,j3),e(j3,j4e),e(j4e,udr),e(j3,bdr),e(j3,SW),e(SW,vdr),e(j3,Fdr),e(Pe,Tdr),e(Pe,D3),e(D3,D4e),e(D4e,Mdr),e(D3,Edr),e(D3,RW),e(RW,Cdr),e(D3,wdr),e(Pe,Adr),e(Pe,G3),e(G3,G4e),e(G4e,Ldr),e(G3,ydr),e(G3,PW),e(PW,xdr),e(G3,$dr),e(Pe,kdr),e(Pe,O3),e(O3,O4e),e(O4e,Sdr),e(O3,Rdr),e(O3,BW),e(BW,Pdr),e(O3,Bdr),e(Pe,Idr),e(Pe,V3),e(V3,V4e),e(V4e,Ndr),e(V3,qdr),e(V3,IW),e(IW,jdr),e(V3,Ddr),e(Pe,Gdr),e(Pe,X3),e(X3,X4e),e(X4e,Odr),e(X3,Vdr),e(X3,NW),e(NW,Xdr),e(X3,zdr),e(Pe,Qdr),e(Pe,z3),e(z3,z4e),e(z4e,Wdr),e(z3,Hdr),e(z3,qW),e(qW,Udr),e(z3,Jdr),e(Pe,Ydr),e(Pe,Q3),e(Q3,Q4e),e(Q4e,Kdr),e(Q3,Zdr),e(Q3,jW),e(jW,ecr),e(Q3,ocr),e(fo,rcr),e(fo,W3),e(W3,tcr),e(W3,W4e),e(W4e,acr),e(W3,ncr),e(W3,H4e),e(H4e,scr),e(fo,lcr),M(H3,fo,null),b(f,tXe,u),b(f,$d,u),e($d,U3),e(U3,U4e),M(O8,U4e,null),e($d,icr),e($d,J4e),e(J4e,dcr),b(f,aXe,u),b(f,zo,u),M(V8,zo,null),e(zo,ccr),e(zo,kd),e(kd,fcr),e(kd,DW),e(DW,mcr),e(kd,gcr),e(kd,GW),e(GW,hcr),e(kd,pcr),e(zo,_cr),e(zo,X8),e(X8,ucr),e(X8,Y4e),e(Y4e,bcr),e(X8,vcr),e(zo,Fcr),e(zo,Mt),M(z8,Mt,null),e(Mt,Tcr),e(Mt,K4e),e(K4e,Mcr),e(Mt,Ecr),e(Mt,Sd),e(Sd,Ccr),e(Sd,Z4e),e(Z4e,wcr),e(Sd,Acr),e(Sd,OW),e(OW,Lcr),e(Sd,ycr),e(Mt,xcr),M(J3,Mt,null),e(zo,$cr),e(zo,mo),M(Q8,mo,null),e(mo,kcr),e(mo,e2e),e(e2e,Scr),e(mo,Rcr),e(mo,Ua),e(Ua,Pcr),e(Ua,o2e),e(o2e,Bcr),e(Ua,Icr),e(Ua,r2e),e(r2e,Ncr),e(Ua,qcr),e(Ua,t2e),e(t2e,jcr),e(Ua,Dcr),e(mo,Gcr),e(mo,et),e(et,Y3),e(Y3,a2e),e(a2e,Ocr),e(Y3,Vcr),e(Y3,VW),e(VW,Xcr),e(Y3,zcr),e(et,Qcr),e(et,K3),e(K3,n2e),e(n2e,Wcr),e(K3,Hcr),e(K3,XW),e(XW,Ucr),e(K3,Jcr),e(et,Ycr),e(et,Z3),e(Z3,s2e),e(s2e,Kcr),e(Z3,Zcr),e(Z3,zW),e(zW,efr),e(Z3,ofr),e(et,rfr),e(et,eF),e(eF,l2e),e(l2e,tfr),e(eF,afr),e(eF,QW),e(QW,nfr),e(eF,sfr),e(et,lfr),e(et,oF),e(oF,i2e),e(i2e,ifr),e(oF,dfr),e(oF,WW),e(WW,cfr),e(oF,ffr),e(mo,mfr),e(mo,rF),e(rF,gfr),e(rF,d2e),e(d2e,hfr),e(rF,pfr),e(rF,c2e),e(c2e,_fr),e(mo,ufr),M(tF,mo,null),b(f,nXe,u),b(f,Rd,u),e(Rd,aF),e(aF,f2e),M(W8,f2e,null),e(Rd,bfr),e(Rd,m2e),e(m2e,vfr),b(f,sXe,u),b(f,Qo,u),M(H8,Qo,null),e(Qo,Ffr),e(Qo,Pd),e(Pd,Tfr),e(Pd,HW),e(HW,Mfr),e(Pd,Efr),e(Pd,UW),e(UW,Cfr),e(Pd,wfr),e(Qo,Afr),e(Qo,U8),e(U8,Lfr),e(U8,g2e),e(g2e,yfr),e(U8,xfr),e(Qo,$fr),e(Qo,Et),M(J8,Et,null),e(Et,kfr),e(Et,h2e),e(h2e,Sfr),e(Et,Rfr),e(Et,Bd),e(Bd,Pfr),e(Bd,p2e),e(p2e,Bfr),e(Bd,Ifr),e(Bd,JW),e(JW,Nfr),e(Bd,qfr),e(Et,jfr),M(nF,Et,null),e(Qo,Dfr),e(Qo,go),M(Y8,go,null),e(go,Gfr),e(go,_2e),e(_2e,Ofr),e(go,Vfr),e(go,Ja),e(Ja,Xfr),e(Ja,u2e),e(u2e,zfr),e(Ja,Qfr),e(Ja,b2e),e(b2e,Wfr),e(Ja,Hfr),e(Ja,v2e),e(v2e,Ufr),e(Ja,Jfr),e(go,Yfr),e(go,Le),e(Le,sF),e(sF,F2e),e(F2e,Kfr),e(sF,Zfr),e(sF,YW),e(YW,emr),e(sF,omr),e(Le,rmr),e(Le,lF),e(lF,T2e),e(T2e,tmr),e(lF,amr),e(lF,KW),e(KW,nmr),e(lF,smr),e(Le,lmr),e(Le,iF),e(iF,M2e),e(M2e,imr),e(iF,dmr),e(iF,ZW),e(ZW,cmr),e(iF,fmr),e(Le,mmr),e(Le,dF),e(dF,E2e),e(E2e,gmr),e(dF,hmr),e(dF,eH),e(eH,pmr),e(dF,_mr),e(Le,umr),e(Le,cF),e(cF,C2e),e(C2e,bmr),e(cF,vmr),e(cF,oH),e(oH,Fmr),e(cF,Tmr),e(Le,Mmr),e(Le,fF),e(fF,w2e),e(w2e,Emr),e(fF,Cmr),e(fF,rH),e(rH,wmr),e(fF,Amr),e(Le,Lmr),e(Le,mF),e(mF,A2e),e(A2e,ymr),e(mF,xmr),e(mF,tH),e(tH,$mr),e(mF,kmr),e(Le,Smr),e(Le,gF),e(gF,L2e),e(L2e,Rmr),e(gF,Pmr),e(gF,aH),e(aH,Bmr),e(gF,Imr),e(Le,Nmr),e(Le,hF),e(hF,y2e),e(y2e,qmr),e(hF,jmr),e(hF,nH),e(nH,Dmr),e(hF,Gmr),e(Le,Omr),e(Le,pF),e(pF,x2e),e(x2e,Vmr),e(pF,Xmr),e(pF,sH),e(sH,zmr),e(pF,Qmr),e(go,Wmr),e(go,_F),e(_F,Hmr),e(_F,$2e),e($2e,Umr),e(_F,Jmr),e(_F,k2e),e(k2e,Ymr),e(go,Kmr),M(uF,go,null),b(f,lXe,u),b(f,Id,u),e(Id,bF),e(bF,S2e),M(K8,S2e,null),e(Id,Zmr),e(Id,R2e),e(R2e,egr),b(f,iXe,u),b(f,Wo,u),M(Z8,Wo,null),e(Wo,ogr),e(Wo,Nd),e(Nd,rgr),e(Nd,lH),e(lH,tgr),e(Nd,agr),e(Nd,iH),e(iH,ngr),e(Nd,sgr),e(Wo,lgr),e(Wo,e9),e(e9,igr),e(e9,P2e),e(P2e,dgr),e(e9,cgr),e(Wo,fgr),e(Wo,Ct),M(o9,Ct,null),e(Ct,mgr),e(Ct,B2e),e(B2e,ggr),e(Ct,hgr),e(Ct,qd),e(qd,pgr),e(qd,I2e),e(I2e,_gr),e(qd,ugr),e(qd,dH),e(dH,bgr),e(qd,vgr),e(Ct,Fgr),M(vF,Ct,null),e(Wo,Tgr),e(Wo,ho),M(r9,ho,null),e(ho,Mgr),e(ho,N2e),e(N2e,Egr),e(ho,Cgr),e(ho,Ya),e(Ya,wgr),e(Ya,q2e),e(q2e,Agr),e(Ya,Lgr),e(Ya,j2e),e(j2e,ygr),e(Ya,xgr),e(Ya,D2e),e(D2e,$gr),e(Ya,kgr),e(ho,Sgr),e(ho,t9),e(t9,FF),e(FF,G2e),e(G2e,Rgr),e(FF,Pgr),e(FF,cH),e(cH,Bgr),e(FF,Igr),e(t9,Ngr),e(t9,TF),e(TF,O2e),e(O2e,qgr),e(TF,jgr),e(TF,fH),e(fH,Dgr),e(TF,Ggr),e(ho,Ogr),e(ho,MF),e(MF,Vgr),e(MF,V2e),e(V2e,Xgr),e(MF,zgr),e(MF,X2e),e(X2e,Qgr),e(ho,Wgr),M(EF,ho,null),b(f,dXe,u),b(f,jd,u),e(jd,CF),e(CF,z2e),M(a9,z2e,null),e(jd,Hgr),e(jd,Q2e),e(Q2e,Ugr),b(f,cXe,u),b(f,Ho,u),M(n9,Ho,null),e(Ho,Jgr),e(Ho,Dd),e(Dd,Ygr),e(Dd,mH),e(mH,Kgr),e(Dd,Zgr),e(Dd,gH),e(gH,ehr),e(Dd,ohr),e(Ho,rhr),e(Ho,s9),e(s9,thr),e(s9,W2e),e(W2e,ahr),e(s9,nhr),e(Ho,shr),e(Ho,wt),M(l9,wt,null),e(wt,lhr),e(wt,H2e),e(H2e,ihr),e(wt,dhr),e(wt,Gd),e(Gd,chr),e(Gd,U2e),e(U2e,fhr),e(Gd,mhr),e(Gd,hH),e(hH,ghr),e(Gd,hhr),e(wt,phr),M(wF,wt,null),e(Ho,_hr),e(Ho,po),M(i9,po,null),e(po,uhr),e(po,J2e),e(J2e,bhr),e(po,vhr),e(po,Ka),e(Ka,Fhr),e(Ka,Y2e),e(Y2e,Thr),e(Ka,Mhr),e(Ka,K2e),e(K2e,Ehr),e(Ka,Chr),e(Ka,Z2e),e(Z2e,whr),e(Ka,Ahr),e(po,Lhr),e(po,ot),e(ot,AF),e(AF,ebe),e(ebe,yhr),e(AF,xhr),e(AF,pH),e(pH,$hr),e(AF,khr),e(ot,Shr),e(ot,LF),e(LF,obe),e(obe,Rhr),e(LF,Phr),e(LF,_H),e(_H,Bhr),e(LF,Ihr),e(ot,Nhr),e(ot,yF),e(yF,rbe),e(rbe,qhr),e(yF,jhr),e(yF,uH),e(uH,Dhr),e(yF,Ghr),e(ot,Ohr),e(ot,xF),e(xF,tbe),e(tbe,Vhr),e(xF,Xhr),e(xF,bH),e(bH,zhr),e(xF,Qhr),e(ot,Whr),e(ot,$F),e($F,abe),e(abe,Hhr),e($F,Uhr),e($F,vH),e(vH,Jhr),e($F,Yhr),e(po,Khr),e(po,kF),e(kF,Zhr),e(kF,nbe),e(nbe,epr),e(kF,opr),e(kF,sbe),e(sbe,rpr),e(po,tpr),M(SF,po,null),b(f,fXe,u),b(f,Od,u),e(Od,RF),e(RF,lbe),M(d9,lbe,null),e(Od,apr),e(Od,ibe),e(ibe,npr),b(f,mXe,u),b(f,Uo,u),M(c9,Uo,null),e(Uo,spr),e(Uo,Vd),e(Vd,lpr),e(Vd,FH),e(FH,ipr),e(Vd,dpr),e(Vd,TH),e(TH,cpr),e(Vd,fpr),e(Uo,mpr),e(Uo,f9),e(f9,gpr),e(f9,dbe),e(dbe,hpr),e(f9,ppr),e(Uo,_pr),e(Uo,At),M(m9,At,null),e(At,upr),e(At,cbe),e(cbe,bpr),e(At,vpr),e(At,Xd),e(Xd,Fpr),e(Xd,fbe),e(fbe,Tpr),e(Xd,Mpr),e(Xd,MH),e(MH,Epr),e(Xd,Cpr),e(At,wpr),M(PF,At,null),e(Uo,Apr),e(Uo,_o),M(g9,_o,null),e(_o,Lpr),e(_o,mbe),e(mbe,ypr),e(_o,xpr),e(_o,Za),e(Za,$pr),e(Za,gbe),e(gbe,kpr),e(Za,Spr),e(Za,hbe),e(hbe,Rpr),e(Za,Ppr),e(Za,pbe),e(pbe,Bpr),e(Za,Ipr),e(_o,Npr),e(_o,zd),e(zd,BF),e(BF,_be),e(_be,qpr),e(BF,jpr),e(BF,EH),e(EH,Dpr),e(BF,Gpr),e(zd,Opr),e(zd,IF),e(IF,ube),e(ube,Vpr),e(IF,Xpr),e(IF,CH),e(CH,zpr),e(IF,Qpr),e(zd,Wpr),e(zd,NF),e(NF,bbe),e(bbe,Hpr),e(NF,Upr),e(NF,wH),e(wH,Jpr),e(NF,Ypr),e(_o,Kpr),e(_o,qF),e(qF,Zpr),e(qF,vbe),e(vbe,e_r),e(qF,o_r),e(qF,Fbe),e(Fbe,r_r),e(_o,t_r),M(jF,_o,null),b(f,gXe,u),b(f,Qd,u),e(Qd,DF),e(DF,Tbe),M(h9,Tbe,null),e(Qd,a_r),e(Qd,Mbe),e(Mbe,n_r),b(f,hXe,u),b(f,Jo,u),M(p9,Jo,null),e(Jo,s_r),e(Jo,Wd),e(Wd,l_r),e(Wd,AH),e(AH,i_r),e(Wd,d_r),e(Wd,LH),e(LH,c_r),e(Wd,f_r),e(Jo,m_r),e(Jo,_9),e(_9,g_r),e(_9,Ebe),e(Ebe,h_r),e(_9,p_r),e(Jo,__r),e(Jo,Lt),M(u9,Lt,null),e(Lt,u_r),e(Lt,Cbe),e(Cbe,b_r),e(Lt,v_r),e(Lt,Hd),e(Hd,F_r),e(Hd,wbe),e(wbe,T_r),e(Hd,M_r),e(Hd,yH),e(yH,E_r),e(Hd,C_r),e(Lt,w_r),M(GF,Lt,null),e(Jo,A_r),e(Jo,uo),M(b9,uo,null),e(uo,L_r),e(uo,Abe),e(Abe,y_r),e(uo,x_r),e(uo,en),e(en,$_r),e(en,Lbe),e(Lbe,k_r),e(en,S_r),e(en,ybe),e(ybe,R_r),e(en,P_r),e(en,xbe),e(xbe,B_r),e(en,I_r),e(uo,N_r),e(uo,v9),e(v9,OF),e(OF,$be),e($be,q_r),e(OF,j_r),e(OF,xH),e(xH,D_r),e(OF,G_r),e(v9,O_r),e(v9,VF),e(VF,kbe),e(kbe,V_r),e(VF,X_r),e(VF,$H),e($H,z_r),e(VF,Q_r),e(uo,W_r),e(uo,XF),e(XF,H_r),e(XF,Sbe),e(Sbe,U_r),e(XF,J_r),e(XF,Rbe),e(Rbe,Y_r),e(uo,K_r),M(zF,uo,null),b(f,pXe,u),b(f,Ud,u),e(Ud,QF),e(QF,Pbe),M(F9,Pbe,null),e(Ud,Z_r),e(Ud,Bbe),e(Bbe,eur),b(f,_Xe,u),b(f,Yo,u),M(T9,Yo,null),e(Yo,our),e(Yo,Jd),e(Jd,rur),e(Jd,kH),e(kH,tur),e(Jd,aur),e(Jd,SH),e(SH,nur),e(Jd,sur),e(Yo,lur),e(Yo,M9),e(M9,iur),e(M9,Ibe),e(Ibe,dur),e(M9,cur),e(Yo,fur),e(Yo,yt),M(E9,yt,null),e(yt,mur),e(yt,Nbe),e(Nbe,gur),e(yt,hur),e(yt,Yd),e(Yd,pur),e(Yd,qbe),e(qbe,_ur),e(Yd,uur),e(Yd,RH),e(RH,bur),e(Yd,vur),e(yt,Fur),M(WF,yt,null),e(Yo,Tur),e(Yo,bo),M(C9,bo,null),e(bo,Mur),e(bo,jbe),e(jbe,Eur),e(bo,Cur),e(bo,on),e(on,wur),e(on,Dbe),e(Dbe,Aur),e(on,Lur),e(on,Gbe),e(Gbe,yur),e(on,xur),e(on,Obe),e(Obe,$ur),e(on,kur),e(bo,Sur),e(bo,Vbe),e(Vbe,HF),e(HF,Xbe),e(Xbe,Rur),e(HF,Pur),e(HF,PH),e(PH,Bur),e(HF,Iur),e(bo,Nur),e(bo,UF),e(UF,qur),e(UF,zbe),e(zbe,jur),e(UF,Dur),e(UF,Qbe),e(Qbe,Gur),e(bo,Our),M(JF,bo,null),b(f,uXe,u),b(f,Kd,u),e(Kd,YF),e(YF,Wbe),M(w9,Wbe,null),e(Kd,Vur),e(Kd,Hbe),e(Hbe,Xur),b(f,bXe,u),b(f,Ko,u),M(A9,Ko,null),e(Ko,zur),e(Ko,Zd),e(Zd,Qur),e(Zd,BH),e(BH,Wur),e(Zd,Hur),e(Zd,IH),e(IH,Uur),e(Zd,Jur),e(Ko,Yur),e(Ko,L9),e(L9,Kur),e(L9,Ube),e(Ube,Zur),e(L9,e1r),e(Ko,o1r),e(Ko,xt),M(y9,xt,null),e(xt,r1r),e(xt,Jbe),e(Jbe,t1r),e(xt,a1r),e(xt,ec),e(ec,n1r),e(ec,Ybe),e(Ybe,s1r),e(ec,l1r),e(ec,NH),e(NH,i1r),e(ec,d1r),e(xt,c1r),M(KF,xt,null),e(Ko,f1r),e(Ko,vo),M(x9,vo,null),e(vo,m1r),e(vo,Kbe),e(Kbe,g1r),e(vo,h1r),e(vo,rn),e(rn,p1r),e(rn,Zbe),e(Zbe,_1r),e(rn,u1r),e(rn,eve),e(eve,b1r),e(rn,v1r),e(rn,ove),e(ove,F1r),e(rn,T1r),e(vo,M1r),e(vo,tn),e(tn,ZF),e(ZF,rve),e(rve,E1r),e(ZF,C1r),e(ZF,qH),e(qH,w1r),e(ZF,A1r),e(tn,L1r),e(tn,eT),e(eT,tve),e(tve,y1r),e(eT,x1r),e(eT,jH),e(jH,$1r),e(eT,k1r),e(tn,S1r),e(tn,oT),e(oT,ave),e(ave,R1r),e(oT,P1r),e(oT,DH),e(DH,B1r),e(oT,I1r),e(tn,N1r),e(tn,rT),e(rT,nve),e(nve,q1r),e(rT,j1r),e(rT,GH),e(GH,D1r),e(rT,G1r),e(vo,O1r),e(vo,tT),e(tT,V1r),e(tT,sve),e(sve,X1r),e(tT,z1r),e(tT,lve),e(lve,Q1r),e(vo,W1r),M(aT,vo,null),b(f,vXe,u),b(f,oc,u),e(oc,nT),e(nT,ive),M($9,ive,null),e(oc,H1r),e(oc,dve),e(dve,U1r),b(f,FXe,u),b(f,Zo,u),M(k9,Zo,null),e(Zo,J1r),e(Zo,rc),e(rc,Y1r),e(rc,OH),e(OH,K1r),e(rc,Z1r),e(rc,VH),e(VH,e7r),e(rc,o7r),e(Zo,r7r),e(Zo,S9),e(S9,t7r),e(S9,cve),e(cve,a7r),e(S9,n7r),e(Zo,s7r),e(Zo,$t),M(R9,$t,null),e($t,l7r),e($t,fve),e(fve,i7r),e($t,d7r),e($t,tc),e(tc,c7r),e(tc,mve),e(mve,f7r),e(tc,m7r),e(tc,XH),e(XH,g7r),e(tc,h7r),e($t,p7r),M(sT,$t,null),e(Zo,_7r),e(Zo,Fo),M(P9,Fo,null),e(Fo,u7r),e(Fo,gve),e(gve,b7r),e(Fo,v7r),e(Fo,an),e(an,F7r),e(an,hve),e(hve,T7r),e(an,M7r),e(an,pve),e(pve,E7r),e(an,C7r),e(an,_ve),e(_ve,w7r),e(an,A7r),e(Fo,L7r),e(Fo,uve),e(uve,lT),e(lT,bve),e(bve,y7r),e(lT,x7r),e(lT,zH),e(zH,$7r),e(lT,k7r),e(Fo,S7r),e(Fo,iT),e(iT,R7r),e(iT,vve),e(vve,P7r),e(iT,B7r),e(iT,Fve),e(Fve,I7r),e(Fo,N7r),M(dT,Fo,null),b(f,TXe,u),b(f,ac,u),e(ac,cT),e(cT,Tve),M(B9,Tve,null),e(ac,q7r),e(ac,Mve),e(Mve,j7r),b(f,MXe,u),b(f,er,u),M(I9,er,null),e(er,D7r),e(er,nc),e(nc,G7r),e(nc,QH),e(QH,O7r),e(nc,V7r),e(nc,WH),e(WH,X7r),e(nc,z7r),e(er,Q7r),e(er,N9),e(N9,W7r),e(N9,Eve),e(Eve,H7r),e(N9,U7r),e(er,J7r),e(er,kt),M(q9,kt,null),e(kt,Y7r),e(kt,Cve),e(Cve,K7r),e(kt,Z7r),e(kt,sc),e(sc,e4r),e(sc,wve),e(wve,o4r),e(sc,r4r),e(sc,HH),e(HH,t4r),e(sc,a4r),e(kt,n4r),M(fT,kt,null),e(er,s4r),e(er,yr),M(j9,yr,null),e(yr,l4r),e(yr,Ave),e(Ave,i4r),e(yr,d4r),e(yr,nn),e(nn,c4r),e(nn,Lve),e(Lve,f4r),e(nn,m4r),e(nn,yve),e(yve,g4r),e(nn,h4r),e(nn,xve),e(xve,p4r),e(nn,_4r),e(yr,u4r),e(yr,j),e(j,mT),e(mT,$ve),e($ve,b4r),e(mT,v4r),e(mT,UH),e(UH,F4r),e(mT,T4r),e(j,M4r),e(j,gT),e(gT,kve),e(kve,E4r),e(gT,C4r),e(gT,JH),e(JH,w4r),e(gT,A4r),e(j,L4r),e(j,hT),e(hT,Sve),e(Sve,y4r),e(hT,x4r),e(hT,YH),e(YH,$4r),e(hT,k4r),e(j,S4r),e(j,pT),e(pT,Rve),e(Rve,R4r),e(pT,P4r),e(pT,KH),e(KH,B4r),e(pT,I4r),e(j,N4r),e(j,_T),e(_T,Pve),e(Pve,q4r),e(_T,j4r),e(_T,ZH),e(ZH,D4r),e(_T,G4r),e(j,O4r),e(j,uT),e(uT,Bve),e(Bve,V4r),e(uT,X4r),e(uT,eU),e(eU,z4r),e(uT,Q4r),e(j,W4r),e(j,bT),e(bT,Ive),e(Ive,H4r),e(bT,U4r),e(bT,oU),e(oU,J4r),e(bT,Y4r),e(j,K4r),e(j,vT),e(vT,Nve),e(Nve,Z4r),e(vT,e2r),e(vT,rU),e(rU,o2r),e(vT,r2r),e(j,t2r),e(j,FT),e(FT,qve),e(qve,a2r),e(FT,n2r),e(FT,tU),e(tU,s2r),e(FT,l2r),e(j,i2r),e(j,TT),e(TT,jve),e(jve,d2r),e(TT,c2r),e(TT,aU),e(aU,f2r),e(TT,m2r),e(j,g2r),e(j,MT),e(MT,Dve),e(Dve,h2r),e(MT,p2r),e(MT,nU),e(nU,_2r),e(MT,u2r),e(j,b2r),e(j,ET),e(ET,Gve),e(Gve,v2r),e(ET,F2r),e(ET,sU),e(sU,T2r),e(ET,M2r),e(j,E2r),e(j,CT),e(CT,Ove),e(Ove,C2r),e(CT,w2r),e(CT,lU),e(lU,A2r),e(CT,L2r),e(j,y2r),e(j,wT),e(wT,Vve),e(Vve,x2r),e(wT,$2r),e(wT,iU),e(iU,k2r),e(wT,S2r),e(j,R2r),e(j,AT),e(AT,Xve),e(Xve,P2r),e(AT,B2r),e(AT,dU),e(dU,I2r),e(AT,N2r),e(j,q2r),e(j,LT),e(LT,zve),e(zve,j2r),e(LT,D2r),e(LT,cU),e(cU,G2r),e(LT,O2r),e(j,V2r),e(j,yT),e(yT,Qve),e(Qve,X2r),e(yT,z2r),e(yT,fU),e(fU,Q2r),e(yT,W2r),e(j,H2r),e(j,Us),e(Us,Wve),e(Wve,U2r),e(Us,J2r),e(Us,mU),e(mU,Y2r),e(Us,K2r),e(Us,gU),e(gU,Z2r),e(Us,ebr),e(j,obr),e(j,xT),e(xT,Hve),e(Hve,rbr),e(xT,tbr),e(xT,hU),e(hU,abr),e(xT,nbr),e(j,sbr),e(j,$T),e($T,Uve),e(Uve,lbr),e($T,ibr),e($T,pU),e(pU,dbr),e($T,cbr),e(j,fbr),e(j,kT),e(kT,Jve),e(Jve,mbr),e(kT,gbr),e(kT,_U),e(_U,hbr),e(kT,pbr),e(j,_br),e(j,ST),e(ST,Yve),e(Yve,ubr),e(ST,bbr),e(ST,uU),e(uU,vbr),e(ST,Fbr),e(j,Tbr),e(j,RT),e(RT,Kve),e(Kve,Mbr),e(RT,Ebr),e(RT,bU),e(bU,Cbr),e(RT,wbr),e(j,Abr),e(j,PT),e(PT,Zve),e(Zve,Lbr),e(PT,ybr),e(PT,vU),e(vU,xbr),e(PT,$br),e(j,kbr),e(j,BT),e(BT,e3e),e(e3e,Sbr),e(BT,Rbr),e(BT,FU),e(FU,Pbr),e(BT,Bbr),e(j,Ibr),e(j,IT),e(IT,o3e),e(o3e,Nbr),e(IT,qbr),e(IT,TU),e(TU,jbr),e(IT,Dbr),e(j,Gbr),e(j,NT),e(NT,r3e),e(r3e,Obr),e(NT,Vbr),e(NT,MU),e(MU,Xbr),e(NT,zbr),e(j,Qbr),e(j,qT),e(qT,t3e),e(t3e,Wbr),e(qT,Hbr),e(qT,EU),e(EU,Ubr),e(qT,Jbr),e(j,Ybr),e(j,jT),e(jT,a3e),e(a3e,Kbr),e(jT,Zbr),e(jT,CU),e(CU,evr),e(jT,ovr),e(j,rvr),e(j,DT),e(DT,n3e),e(n3e,tvr),e(DT,avr),e(DT,wU),e(wU,nvr),e(DT,svr),e(j,lvr),e(j,GT),e(GT,s3e),e(s3e,ivr),e(GT,dvr),e(GT,AU),e(AU,cvr),e(GT,fvr),e(j,mvr),e(j,OT),e(OT,l3e),e(l3e,gvr),e(OT,hvr),e(OT,LU),e(LU,pvr),e(OT,_vr),e(j,uvr),e(j,VT),e(VT,i3e),e(i3e,bvr),e(VT,vvr),e(VT,yU),e(yU,Fvr),e(VT,Tvr),e(j,Mvr),e(j,XT),e(XT,d3e),e(d3e,Evr),e(XT,Cvr),e(XT,xU),e(xU,wvr),e(XT,Avr),e(j,Lvr),e(j,zT),e(zT,c3e),e(c3e,yvr),e(zT,xvr),e(zT,$U),e($U,$vr),e(zT,kvr),e(j,Svr),e(j,QT),e(QT,f3e),e(f3e,Rvr),e(QT,Pvr),e(QT,kU),e(kU,Bvr),e(QT,Ivr),e(j,Nvr),e(j,WT),e(WT,m3e),e(m3e,qvr),e(WT,jvr),e(WT,SU),e(SU,Dvr),e(WT,Gvr),e(j,Ovr),e(j,HT),e(HT,g3e),e(g3e,Vvr),e(HT,Xvr),e(HT,RU),e(RU,zvr),e(HT,Qvr),e(j,Wvr),e(j,UT),e(UT,h3e),e(h3e,Hvr),e(UT,Uvr),e(UT,PU),e(PU,Jvr),e(UT,Yvr),e(j,Kvr),e(j,JT),e(JT,p3e),e(p3e,Zvr),e(JT,e3r),e(JT,BU),e(BU,o3r),e(JT,r3r),e(j,t3r),e(j,YT),e(YT,_3e),e(_3e,a3r),e(YT,n3r),e(YT,IU),e(IU,s3r),e(YT,l3r),e(j,i3r),e(j,KT),e(KT,u3e),e(u3e,d3r),e(KT,c3r),e(KT,NU),e(NU,f3r),e(KT,m3r),e(j,g3r),e(j,ZT),e(ZT,b3e),e(b3e,h3r),e(ZT,p3r),e(ZT,qU),e(qU,_3r),e(ZT,u3r),e(j,b3r),e(j,eM),e(eM,v3e),e(v3e,v3r),e(eM,F3r),e(eM,jU),e(jU,T3r),e(eM,M3r),e(j,E3r),e(j,oM),e(oM,F3e),e(F3e,C3r),e(oM,w3r),e(oM,DU),e(DU,A3r),e(oM,L3r),e(j,y3r),e(j,rM),e(rM,T3e),e(T3e,x3r),e(rM,$3r),e(rM,GU),e(GU,k3r),e(rM,S3r),e(j,R3r),e(j,tM),e(tM,M3e),e(M3e,P3r),e(tM,B3r),e(tM,OU),e(OU,I3r),e(tM,N3r),e(j,q3r),e(j,aM),e(aM,E3e),e(E3e,j3r),e(aM,D3r),e(aM,VU),e(VU,G3r),e(aM,O3r),e(yr,V3r),M(nM,yr,null),b(f,EXe,u),b(f,lc,u),e(lc,sM),e(sM,C3e),M(D9,C3e,null),e(lc,X3r),e(lc,w3e),e(w3e,z3r),b(f,CXe,u),b(f,or,u),M(G9,or,null),e(or,Q3r),e(or,ic),e(ic,W3r),e(ic,XU),e(XU,H3r),e(ic,U3r),e(ic,zU),e(zU,J3r),e(ic,Y3r),e(or,K3r),e(or,O9),e(O9,Z3r),e(O9,A3e),e(A3e,eFr),e(O9,oFr),e(or,rFr),e(or,St),M(V9,St,null),e(St,tFr),e(St,L3e),e(L3e,aFr),e(St,nFr),e(St,dc),e(dc,sFr),e(dc,y3e),e(y3e,lFr),e(dc,iFr),e(dc,QU),e(QU,dFr),e(dc,cFr),e(St,fFr),M(lM,St,null),e(or,mFr),e(or,xr),M(X9,xr,null),e(xr,gFr),e(xr,x3e),e(x3e,hFr),e(xr,pFr),e(xr,sn),e(sn,_Fr),e(sn,$3e),e($3e,uFr),e(sn,bFr),e(sn,k3e),e(k3e,vFr),e(sn,FFr),e(sn,S3e),e(S3e,TFr),e(sn,MFr),e(xr,EFr),e(xr,se),e(se,iM),e(iM,R3e),e(R3e,CFr),e(iM,wFr),e(iM,WU),e(WU,AFr),e(iM,LFr),e(se,yFr),e(se,dM),e(dM,P3e),e(P3e,xFr),e(dM,$Fr),e(dM,HU),e(HU,kFr),e(dM,SFr),e(se,RFr),e(se,cM),e(cM,B3e),e(B3e,PFr),e(cM,BFr),e(cM,UU),e(UU,IFr),e(cM,NFr),e(se,qFr),e(se,fM),e(fM,I3e),e(I3e,jFr),e(fM,DFr),e(fM,JU),e(JU,GFr),e(fM,OFr),e(se,VFr),e(se,mM),e(mM,N3e),e(N3e,XFr),e(mM,zFr),e(mM,YU),e(YU,QFr),e(mM,WFr),e(se,HFr),e(se,gM),e(gM,q3e),e(q3e,UFr),e(gM,JFr),e(gM,KU),e(KU,YFr),e(gM,KFr),e(se,ZFr),e(se,hM),e(hM,j3e),e(j3e,eTr),e(hM,oTr),e(hM,ZU),e(ZU,rTr),e(hM,tTr),e(se,aTr),e(se,pM),e(pM,D3e),e(D3e,nTr),e(pM,sTr),e(pM,eJ),e(eJ,lTr),e(pM,iTr),e(se,dTr),e(se,_M),e(_M,G3e),e(G3e,cTr),e(_M,fTr),e(_M,oJ),e(oJ,mTr),e(_M,gTr),e(se,hTr),e(se,uM),e(uM,O3e),e(O3e,pTr),e(uM,_Tr),e(uM,rJ),e(rJ,uTr),e(uM,bTr),e(se,vTr),e(se,bM),e(bM,V3e),e(V3e,FTr),e(bM,TTr),e(bM,tJ),e(tJ,MTr),e(bM,ETr),e(se,CTr),e(se,vM),e(vM,X3e),e(X3e,wTr),e(vM,ATr),e(vM,aJ),e(aJ,LTr),e(vM,yTr),e(se,xTr),e(se,FM),e(FM,z3e),e(z3e,$Tr),e(FM,kTr),e(FM,nJ),e(nJ,STr),e(FM,RTr),e(se,PTr),e(se,TM),e(TM,Q3e),e(Q3e,BTr),e(TM,ITr),e(TM,sJ),e(sJ,NTr),e(TM,qTr),e(se,jTr),e(se,MM),e(MM,W3e),e(W3e,DTr),e(MM,GTr),e(MM,lJ),e(lJ,OTr),e(MM,VTr),e(se,XTr),e(se,EM),e(EM,H3e),e(H3e,zTr),e(EM,QTr),e(EM,iJ),e(iJ,WTr),e(EM,HTr),e(se,UTr),e(se,CM),e(CM,U3e),e(U3e,JTr),e(CM,YTr),e(CM,dJ),e(dJ,KTr),e(CM,ZTr),e(se,eMr),e(se,wM),e(wM,J3e),e(J3e,oMr),e(wM,rMr),e(wM,cJ),e(cJ,tMr),e(wM,aMr),e(se,nMr),e(se,AM),e(AM,Y3e),e(Y3e,sMr),e(AM,lMr),e(AM,fJ),e(fJ,iMr),e(AM,dMr),e(se,cMr),e(se,LM),e(LM,K3e),e(K3e,fMr),e(LM,mMr),e(LM,mJ),e(mJ,gMr),e(LM,hMr),e(se,pMr),e(se,yM),e(yM,Z3e),e(Z3e,_Mr),e(yM,uMr),e(yM,gJ),e(gJ,bMr),e(yM,vMr),e(se,FMr),e(se,xM),e(xM,eFe),e(eFe,TMr),e(xM,MMr),e(xM,hJ),e(hJ,EMr),e(xM,CMr),e(se,wMr),e(se,$M),e($M,oFe),e(oFe,AMr),e($M,LMr),e($M,pJ),e(pJ,yMr),e($M,xMr),e(xr,$Mr),M(kM,xr,null),b(f,wXe,u),b(f,cc,u),e(cc,SM),e(SM,rFe),M(z9,rFe,null),e(cc,kMr),e(cc,tFe),e(tFe,SMr),b(f,AXe,u),b(f,rr,u),M(Q9,rr,null),e(rr,RMr),e(rr,fc),e(fc,PMr),e(fc,_J),e(_J,BMr),e(fc,IMr),e(fc,uJ),e(uJ,NMr),e(fc,qMr),e(rr,jMr),e(rr,W9),e(W9,DMr),e(W9,aFe),e(aFe,GMr),e(W9,OMr),e(rr,VMr),e(rr,Rt),M(H9,Rt,null),e(Rt,XMr),e(Rt,nFe),e(nFe,zMr),e(Rt,QMr),e(Rt,mc),e(mc,WMr),e(mc,sFe),e(sFe,HMr),e(mc,UMr),e(mc,bJ),e(bJ,JMr),e(mc,YMr),e(Rt,KMr),M(RM,Rt,null),e(rr,ZMr),e(rr,$r),M(U9,$r,null),e($r,eEr),e($r,lFe),e(lFe,oEr),e($r,rEr),e($r,ln),e(ln,tEr),e(ln,iFe),e(iFe,aEr),e(ln,nEr),e(ln,dFe),e(dFe,sEr),e(ln,lEr),e(ln,cFe),e(cFe,iEr),e(ln,dEr),e($r,cEr),e($r,Me),e(Me,PM),e(PM,fFe),e(fFe,fEr),e(PM,mEr),e(PM,vJ),e(vJ,gEr),e(PM,hEr),e(Me,pEr),e(Me,BM),e(BM,mFe),e(mFe,_Er),e(BM,uEr),e(BM,FJ),e(FJ,bEr),e(BM,vEr),e(Me,FEr),e(Me,IM),e(IM,gFe),e(gFe,TEr),e(IM,MEr),e(IM,TJ),e(TJ,EEr),e(IM,CEr),e(Me,wEr),e(Me,NM),e(NM,hFe),e(hFe,AEr),e(NM,LEr),e(NM,MJ),e(MJ,yEr),e(NM,xEr),e(Me,$Er),e(Me,qM),e(qM,pFe),e(pFe,kEr),e(qM,SEr),e(qM,EJ),e(EJ,REr),e(qM,PEr),e(Me,BEr),e(Me,jM),e(jM,_Fe),e(_Fe,IEr),e(jM,NEr),e(jM,CJ),e(CJ,qEr),e(jM,jEr),e(Me,DEr),e(Me,DM),e(DM,uFe),e(uFe,GEr),e(DM,OEr),e(DM,wJ),e(wJ,VEr),e(DM,XEr),e(Me,zEr),e(Me,GM),e(GM,bFe),e(bFe,QEr),e(GM,WEr),e(GM,AJ),e(AJ,HEr),e(GM,UEr),e(Me,JEr),e(Me,OM),e(OM,vFe),e(vFe,YEr),e(OM,KEr),e(OM,LJ),e(LJ,ZEr),e(OM,eCr),e(Me,oCr),e(Me,VM),e(VM,FFe),e(FFe,rCr),e(VM,tCr),e(VM,yJ),e(yJ,aCr),e(VM,nCr),e(Me,sCr),e(Me,XM),e(XM,TFe),e(TFe,lCr),e(XM,iCr),e(XM,xJ),e(xJ,dCr),e(XM,cCr),e(Me,fCr),e(Me,zM),e(zM,MFe),e(MFe,mCr),e(zM,gCr),e(zM,$J),e($J,hCr),e(zM,pCr),e(Me,_Cr),e(Me,QM),e(QM,EFe),e(EFe,uCr),e(QM,bCr),e(QM,kJ),e(kJ,vCr),e(QM,FCr),e($r,TCr),M(WM,$r,null),b(f,LXe,u),b(f,gc,u),e(gc,HM),e(HM,CFe),M(J9,CFe,null),e(gc,MCr),e(gc,wFe),e(wFe,ECr),b(f,yXe,u),b(f,tr,u),M(Y9,tr,null),e(tr,CCr),e(tr,hc),e(hc,wCr),e(hc,SJ),e(SJ,ACr),e(hc,LCr),e(hc,RJ),e(RJ,yCr),e(hc,xCr),e(tr,$Cr),e(tr,K9),e(K9,kCr),e(K9,AFe),e(AFe,SCr),e(K9,RCr),e(tr,PCr),e(tr,Pt),M(Z9,Pt,null),e(Pt,BCr),e(Pt,LFe),e(LFe,ICr),e(Pt,NCr),e(Pt,pc),e(pc,qCr),e(pc,yFe),e(yFe,jCr),e(pc,DCr),e(pc,PJ),e(PJ,GCr),e(pc,OCr),e(Pt,VCr),M(UM,Pt,null),e(tr,XCr),e(tr,kr),M(ex,kr,null),e(kr,zCr),e(kr,xFe),e(xFe,QCr),e(kr,WCr),e(kr,dn),e(dn,HCr),e(dn,$Fe),e($Fe,UCr),e(dn,JCr),e(dn,kFe),e(kFe,YCr),e(dn,KCr),e(dn,SFe),e(SFe,ZCr),e(dn,e5r),e(kr,o5r),e(kr,rt),e(rt,JM),e(JM,RFe),e(RFe,r5r),e(JM,t5r),e(JM,BJ),e(BJ,a5r),e(JM,n5r),e(rt,s5r),e(rt,YM),e(YM,PFe),e(PFe,l5r),e(YM,i5r),e(YM,IJ),e(IJ,d5r),e(YM,c5r),e(rt,f5r),e(rt,KM),e(KM,BFe),e(BFe,m5r),e(KM,g5r),e(KM,NJ),e(NJ,h5r),e(KM,p5r),e(rt,_5r),e(rt,ZM),e(ZM,IFe),e(IFe,u5r),e(ZM,b5r),e(ZM,qJ),e(qJ,v5r),e(ZM,F5r),e(rt,T5r),e(rt,eE),e(eE,NFe),e(NFe,M5r),e(eE,E5r),e(eE,jJ),e(jJ,C5r),e(eE,w5r),e(kr,A5r),M(oE,kr,null),b(f,xXe,u),b(f,_c,u),e(_c,rE),e(rE,qFe),M(ox,qFe,null),e(_c,L5r),e(_c,jFe),e(jFe,y5r),b(f,$Xe,u),b(f,ar,u),M(rx,ar,null),e(ar,x5r),e(ar,uc),e(uc,$5r),e(uc,DJ),e(DJ,k5r),e(uc,S5r),e(uc,GJ),e(GJ,R5r),e(uc,P5r),e(ar,B5r),e(ar,tx),e(tx,I5r),e(tx,DFe),e(DFe,N5r),e(tx,q5r),e(ar,j5r),e(ar,Bt),M(ax,Bt,null),e(Bt,D5r),e(Bt,GFe),e(GFe,G5r),e(Bt,O5r),e(Bt,bc),e(bc,V5r),e(bc,OFe),e(OFe,X5r),e(bc,z5r),e(bc,OJ),e(OJ,Q5r),e(bc,W5r),e(Bt,H5r),M(tE,Bt,null),e(ar,U5r),e(ar,Sr),M(nx,Sr,null),e(Sr,J5r),e(Sr,VFe),e(VFe,Y5r),e(Sr,K5r),e(Sr,cn),e(cn,Z5r),e(cn,XFe),e(XFe,e0r),e(cn,o0r),e(cn,zFe),e(zFe,r0r),e(cn,t0r),e(cn,QFe),e(QFe,a0r),e(cn,n0r),e(Sr,s0r),e(Sr,ie),e(ie,aE),e(aE,WFe),e(WFe,l0r),e(aE,i0r),e(aE,VJ),e(VJ,d0r),e(aE,c0r),e(ie,f0r),e(ie,nE),e(nE,HFe),e(HFe,m0r),e(nE,g0r),e(nE,XJ),e(XJ,h0r),e(nE,p0r),e(ie,_0r),e(ie,sE),e(sE,UFe),e(UFe,u0r),e(sE,b0r),e(sE,zJ),e(zJ,v0r),e(sE,F0r),e(ie,T0r),e(ie,lE),e(lE,JFe),e(JFe,M0r),e(lE,E0r),e(lE,QJ),e(QJ,C0r),e(lE,w0r),e(ie,A0r),e(ie,iE),e(iE,YFe),e(YFe,L0r),e(iE,y0r),e(iE,WJ),e(WJ,x0r),e(iE,$0r),e(ie,k0r),e(ie,dE),e(dE,KFe),e(KFe,S0r),e(dE,R0r),e(dE,HJ),e(HJ,P0r),e(dE,B0r),e(ie,I0r),e(ie,cE),e(cE,ZFe),e(ZFe,N0r),e(cE,q0r),e(cE,UJ),e(UJ,j0r),e(cE,D0r),e(ie,G0r),e(ie,fE),e(fE,eTe),e(eTe,O0r),e(fE,V0r),e(fE,JJ),e(JJ,X0r),e(fE,z0r),e(ie,Q0r),e(ie,mE),e(mE,oTe),e(oTe,W0r),e(mE,H0r),e(mE,YJ),e(YJ,U0r),e(mE,J0r),e(ie,Y0r),e(ie,gE),e(gE,rTe),e(rTe,K0r),e(gE,Z0r),e(gE,KJ),e(KJ,ewr),e(gE,owr),e(ie,rwr),e(ie,hE),e(hE,tTe),e(tTe,twr),e(hE,awr),e(hE,ZJ),e(ZJ,nwr),e(hE,swr),e(ie,lwr),e(ie,pE),e(pE,aTe),e(aTe,iwr),e(pE,dwr),e(pE,eY),e(eY,cwr),e(pE,fwr),e(ie,mwr),e(ie,_E),e(_E,nTe),e(nTe,gwr),e(_E,hwr),e(_E,oY),e(oY,pwr),e(_E,_wr),e(ie,uwr),e(ie,uE),e(uE,sTe),e(sTe,bwr),e(uE,vwr),e(uE,rY),e(rY,Fwr),e(uE,Twr),e(ie,Mwr),e(ie,bE),e(bE,lTe),e(lTe,Ewr),e(bE,Cwr),e(bE,tY),e(tY,wwr),e(bE,Awr),e(ie,Lwr),e(ie,vE),e(vE,iTe),e(iTe,ywr),e(vE,xwr),e(vE,aY),e(aY,$wr),e(vE,kwr),e(ie,Swr),e(ie,FE),e(FE,dTe),e(dTe,Rwr),e(FE,Pwr),e(FE,nY),e(nY,Bwr),e(FE,Iwr),e(ie,Nwr),e(ie,TE),e(TE,cTe),e(cTe,qwr),e(TE,jwr),e(TE,sY),e(sY,Dwr),e(TE,Gwr),e(ie,Owr),e(ie,ME),e(ME,fTe),e(fTe,Vwr),e(ME,Xwr),e(ME,lY),e(lY,zwr),e(ME,Qwr),e(ie,Wwr),e(ie,EE),e(EE,mTe),e(mTe,Hwr),e(EE,Uwr),e(EE,iY),e(iY,Jwr),e(EE,Ywr),e(Sr,Kwr),M(CE,Sr,null),b(f,kXe,u),b(f,vc,u),e(vc,wE),e(wE,gTe),M(sx,gTe,null),e(vc,Zwr),e(vc,hTe),e(hTe,eAr),b(f,SXe,u),b(f,nr,u),M(lx,nr,null),e(nr,oAr),e(nr,Fc),e(Fc,rAr),e(Fc,dY),e(dY,tAr),e(Fc,aAr),e(Fc,cY),e(cY,nAr),e(Fc,sAr),e(nr,lAr),e(nr,ix),e(ix,iAr),e(ix,pTe),e(pTe,dAr),e(ix,cAr),e(nr,fAr),e(nr,It),M(dx,It,null),e(It,mAr),e(It,_Te),e(_Te,gAr),e(It,hAr),e(It,Tc),e(Tc,pAr),e(Tc,uTe),e(uTe,_Ar),e(Tc,uAr),e(Tc,fY),e(fY,bAr),e(Tc,vAr),e(It,FAr),M(AE,It,null),e(nr,TAr),e(nr,Rr),M(cx,Rr,null),e(Rr,MAr),e(Rr,bTe),e(bTe,EAr),e(Rr,CAr),e(Rr,fn),e(fn,wAr),e(fn,vTe),e(vTe,AAr),e(fn,LAr),e(fn,FTe),e(FTe,yAr),e(fn,xAr),e(fn,TTe),e(TTe,$Ar),e(fn,kAr),e(Rr,SAr),e(Rr,ye),e(ye,LE),e(LE,MTe),e(MTe,RAr),e(LE,PAr),e(LE,mY),e(mY,BAr),e(LE,IAr),e(ye,NAr),e(ye,yE),e(yE,ETe),e(ETe,qAr),e(yE,jAr),e(yE,gY),e(gY,DAr),e(yE,GAr),e(ye,OAr),e(ye,xE),e(xE,CTe),e(CTe,VAr),e(xE,XAr),e(xE,hY),e(hY,zAr),e(xE,QAr),e(ye,WAr),e(ye,$E),e($E,wTe),e(wTe,HAr),e($E,UAr),e($E,pY),e(pY,JAr),e($E,YAr),e(ye,KAr),e(ye,kE),e(kE,ATe),e(ATe,ZAr),e(kE,e6r),e(kE,_Y),e(_Y,o6r),e(kE,r6r),e(ye,t6r),e(ye,SE),e(SE,LTe),e(LTe,a6r),e(SE,n6r),e(SE,uY),e(uY,s6r),e(SE,l6r),e(ye,i6r),e(ye,RE),e(RE,yTe),e(yTe,d6r),e(RE,c6r),e(RE,bY),e(bY,f6r),e(RE,m6r),e(ye,g6r),e(ye,PE),e(PE,xTe),e(xTe,h6r),e(PE,p6r),e(PE,vY),e(vY,_6r),e(PE,u6r),e(ye,b6r),e(ye,BE),e(BE,$Te),e($Te,v6r),e(BE,F6r),e(BE,FY),e(FY,T6r),e(BE,M6r),e(ye,E6r),e(ye,IE),e(IE,kTe),e(kTe,C6r),e(IE,w6r),e(IE,TY),e(TY,A6r),e(IE,L6r),e(Rr,y6r),M(NE,Rr,null),b(f,RXe,u),b(f,Mc,u),e(Mc,qE),e(qE,STe),M(fx,STe,null),e(Mc,x6r),e(Mc,RTe),e(RTe,$6r),b(f,PXe,u),b(f,sr,u),M(mx,sr,null),e(sr,k6r),e(sr,Ec),e(Ec,S6r),e(Ec,MY),e(MY,R6r),e(Ec,P6r),e(Ec,EY),e(EY,B6r),e(Ec,I6r),e(sr,N6r),e(sr,gx),e(gx,q6r),e(gx,PTe),e(PTe,j6r),e(gx,D6r),e(sr,G6r),e(sr,Nt),M(hx,Nt,null),e(Nt,O6r),e(Nt,BTe),e(BTe,V6r),e(Nt,X6r),e(Nt,Cc),e(Cc,z6r),e(Cc,ITe),e(ITe,Q6r),e(Cc,W6r),e(Cc,CY),e(CY,H6r),e(Cc,U6r),e(Nt,J6r),M(jE,Nt,null),e(sr,Y6r),e(sr,Pr),M(px,Pr,null),e(Pr,K6r),e(Pr,NTe),e(NTe,Z6r),e(Pr,eLr),e(Pr,mn),e(mn,oLr),e(mn,qTe),e(qTe,rLr),e(mn,tLr),e(mn,jTe),e(jTe,aLr),e(mn,nLr),e(mn,DTe),e(DTe,sLr),e(mn,lLr),e(Pr,iLr),e(Pr,te),e(te,DE),e(DE,GTe),e(GTe,dLr),e(DE,cLr),e(DE,wY),e(wY,fLr),e(DE,mLr),e(te,gLr),e(te,GE),e(GE,OTe),e(OTe,hLr),e(GE,pLr),e(GE,AY),e(AY,_Lr),e(GE,uLr),e(te,bLr),e(te,OE),e(OE,VTe),e(VTe,vLr),e(OE,FLr),e(OE,LY),e(LY,TLr),e(OE,MLr),e(te,ELr),e(te,VE),e(VE,XTe),e(XTe,CLr),e(VE,wLr),e(VE,yY),e(yY,ALr),e(VE,LLr),e(te,yLr),e(te,XE),e(XE,zTe),e(zTe,xLr),e(XE,$Lr),e(XE,xY),e(xY,kLr),e(XE,SLr),e(te,RLr),e(te,zE),e(zE,QTe),e(QTe,PLr),e(zE,BLr),e(zE,$Y),e($Y,ILr),e(zE,NLr),e(te,qLr),e(te,QE),e(QE,WTe),e(WTe,jLr),e(QE,DLr),e(QE,kY),e(kY,GLr),e(QE,OLr),e(te,VLr),e(te,WE),e(WE,HTe),e(HTe,XLr),e(WE,zLr),e(WE,SY),e(SY,QLr),e(WE,WLr),e(te,HLr),e(te,HE),e(HE,UTe),e(UTe,ULr),e(HE,JLr),e(HE,RY),e(RY,YLr),e(HE,KLr),e(te,ZLr),e(te,UE),e(UE,JTe),e(JTe,eyr),e(UE,oyr),e(UE,PY),e(PY,ryr),e(UE,tyr),e(te,ayr),e(te,JE),e(JE,YTe),e(YTe,nyr),e(JE,syr),e(JE,BY),e(BY,lyr),e(JE,iyr),e(te,dyr),e(te,YE),e(YE,KTe),e(KTe,cyr),e(YE,fyr),e(YE,IY),e(IY,myr),e(YE,gyr),e(te,hyr),e(te,KE),e(KE,ZTe),e(ZTe,pyr),e(KE,_yr),e(KE,NY),e(NY,uyr),e(KE,byr),e(te,vyr),e(te,ZE),e(ZE,eMe),e(eMe,Fyr),e(ZE,Tyr),e(ZE,qY),e(qY,Myr),e(ZE,Eyr),e(te,Cyr),e(te,eC),e(eC,oMe),e(oMe,wyr),e(eC,Ayr),e(eC,jY),e(jY,Lyr),e(eC,yyr),e(te,xyr),e(te,oC),e(oC,rMe),e(rMe,$yr),e(oC,kyr),e(oC,DY),e(DY,Syr),e(oC,Ryr),e(te,Pyr),e(te,rC),e(rC,tMe),e(tMe,Byr),e(rC,Iyr),e(rC,GY),e(GY,Nyr),e(rC,qyr),e(te,jyr),e(te,tC),e(tC,aMe),e(aMe,Dyr),e(tC,Gyr),e(tC,OY),e(OY,Oyr),e(tC,Vyr),e(te,Xyr),e(te,aC),e(aC,nMe),e(nMe,zyr),e(aC,Qyr),e(aC,VY),e(VY,Wyr),e(aC,Hyr),e(te,Uyr),e(te,nC),e(nC,sMe),e(sMe,Jyr),e(nC,Yyr),e(nC,XY),e(XY,Kyr),e(nC,Zyr),e(te,e8r),e(te,sC),e(sC,lMe),e(lMe,o8r),e(sC,r8r),e(sC,zY),e(zY,t8r),e(sC,a8r),e(te,n8r),e(te,lC),e(lC,iMe),e(iMe,s8r),e(lC,l8r),e(lC,QY),e(QY,i8r),e(lC,d8r),e(te,c8r),e(te,iC),e(iC,dMe),e(dMe,f8r),e(iC,m8r),e(iC,WY),e(WY,g8r),e(iC,h8r),e(te,p8r),e(te,dC),e(dC,cMe),e(cMe,_8r),e(dC,u8r),e(dC,HY),e(HY,b8r),e(dC,v8r),e(te,F8r),e(te,cC),e(cC,fMe),e(fMe,T8r),e(cC,M8r),e(cC,UY),e(UY,E8r),e(cC,C8r),e(te,w8r),e(te,fC),e(fC,mMe),e(mMe,A8r),e(fC,L8r),e(fC,JY),e(JY,y8r),e(fC,x8r),e(Pr,$8r),M(mC,Pr,null),b(f,BXe,u),b(f,wc,u),e(wc,gC),e(gC,gMe),M(_x,gMe,null),e(wc,k8r),e(wc,hMe),e(hMe,S8r),b(f,IXe,u),b(f,lr,u),M(ux,lr,null),e(lr,R8r),e(lr,Ac),e(Ac,P8r),e(Ac,YY),e(YY,B8r),e(Ac,I8r),e(Ac,KY),e(KY,N8r),e(Ac,q8r),e(lr,j8r),e(lr,bx),e(bx,D8r),e(bx,pMe),e(pMe,G8r),e(bx,O8r),e(lr,V8r),e(lr,qt),M(vx,qt,null),e(qt,X8r),e(qt,_Me),e(_Me,z8r),e(qt,Q8r),e(qt,Lc),e(Lc,W8r),e(Lc,uMe),e(uMe,H8r),e(Lc,U8r),e(Lc,ZY),e(ZY,J8r),e(Lc,Y8r),e(qt,K8r),M(hC,qt,null),e(lr,Z8r),e(lr,Br),M(Fx,Br,null),e(Br,e9r),e(Br,bMe),e(bMe,o9r),e(Br,r9r),e(Br,gn),e(gn,t9r),e(gn,vMe),e(vMe,a9r),e(gn,n9r),e(gn,FMe),e(FMe,s9r),e(gn,l9r),e(gn,TMe),e(TMe,i9r),e(gn,d9r),e(Br,c9r),e(Br,_e),e(_e,pC),e(pC,MMe),e(MMe,f9r),e(pC,m9r),e(pC,eK),e(eK,g9r),e(pC,h9r),e(_e,p9r),e(_e,_C),e(_C,EMe),e(EMe,_9r),e(_C,u9r),e(_C,oK),e(oK,b9r),e(_C,v9r),e(_e,F9r),e(_e,uC),e(uC,CMe),e(CMe,T9r),e(uC,M9r),e(uC,rK),e(rK,E9r),e(uC,C9r),e(_e,w9r),e(_e,bC),e(bC,wMe),e(wMe,A9r),e(bC,L9r),e(bC,tK),e(tK,y9r),e(bC,x9r),e(_e,$9r),e(_e,vC),e(vC,AMe),e(AMe,k9r),e(vC,S9r),e(vC,aK),e(aK,R9r),e(vC,P9r),e(_e,B9r),e(_e,FC),e(FC,LMe),e(LMe,I9r),e(FC,N9r),e(FC,nK),e(nK,q9r),e(FC,j9r),e(_e,D9r),e(_e,TC),e(TC,yMe),e(yMe,G9r),e(TC,O9r),e(TC,sK),e(sK,V9r),e(TC,X9r),e(_e,z9r),e(_e,MC),e(MC,xMe),e(xMe,Q9r),e(MC,W9r),e(MC,lK),e(lK,H9r),e(MC,U9r),e(_e,J9r),e(_e,EC),e(EC,$Me),e($Me,Y9r),e(EC,K9r),e(EC,iK),e(iK,Z9r),e(EC,exr),e(_e,oxr),e(_e,CC),e(CC,kMe),e(kMe,rxr),e(CC,txr),e(CC,dK),e(dK,axr),e(CC,nxr),e(_e,sxr),e(_e,wC),e(wC,SMe),e(SMe,lxr),e(wC,ixr),e(wC,cK),e(cK,dxr),e(wC,cxr),e(_e,fxr),e(_e,AC),e(AC,RMe),e(RMe,mxr),e(AC,gxr),e(AC,fK),e(fK,hxr),e(AC,pxr),e(_e,_xr),e(_e,LC),e(LC,PMe),e(PMe,uxr),e(LC,bxr),e(LC,mK),e(mK,vxr),e(LC,Fxr),e(_e,Txr),e(_e,yC),e(yC,BMe),e(BMe,Mxr),e(yC,Exr),e(yC,gK),e(gK,Cxr),e(yC,wxr),e(_e,Axr),e(_e,xC),e(xC,IMe),e(IMe,Lxr),e(xC,yxr),e(xC,hK),e(hK,xxr),e(xC,$xr),e(_e,kxr),e(_e,$C),e($C,NMe),e(NMe,Sxr),e($C,Rxr),e($C,pK),e(pK,Pxr),e($C,Bxr),e(_e,Ixr),e(_e,kC),e(kC,qMe),e(qMe,Nxr),e(kC,qxr),e(kC,_K),e(_K,jxr),e(kC,Dxr),e(Br,Gxr),M(SC,Br,null),b(f,NXe,u),b(f,yc,u),e(yc,RC),e(RC,jMe),M(Tx,jMe,null),e(yc,Oxr),e(yc,DMe),e(DMe,Vxr),b(f,qXe,u),b(f,ir,u),M(Mx,ir,null),e(ir,Xxr),e(ir,xc),e(xc,zxr),e(xc,uK),e(uK,Qxr),e(xc,Wxr),e(xc,bK),e(bK,Hxr),e(xc,Uxr),e(ir,Jxr),e(ir,Ex),e(Ex,Yxr),e(Ex,GMe),e(GMe,Kxr),e(Ex,Zxr),e(ir,e$r),e(ir,jt),M(Cx,jt,null),e(jt,o$r),e(jt,OMe),e(OMe,r$r),e(jt,t$r),e(jt,$c),e($c,a$r),e($c,VMe),e(VMe,n$r),e($c,s$r),e($c,vK),e(vK,l$r),e($c,i$r),e(jt,d$r),M(PC,jt,null),e(ir,c$r),e(ir,Ir),M(wx,Ir,null),e(Ir,f$r),e(Ir,XMe),e(XMe,m$r),e(Ir,g$r),e(Ir,hn),e(hn,h$r),e(hn,zMe),e(zMe,p$r),e(hn,_$r),e(hn,QMe),e(QMe,u$r),e(hn,b$r),e(hn,WMe),e(WMe,v$r),e(hn,F$r),e(Ir,T$r),e(Ir,Ax),e(Ax,BC),e(BC,HMe),e(HMe,M$r),e(BC,E$r),e(BC,FK),e(FK,C$r),e(BC,w$r),e(Ax,A$r),e(Ax,IC),e(IC,UMe),e(UMe,L$r),e(IC,y$r),e(IC,TK),e(TK,x$r),e(IC,$$r),e(Ir,k$r),M(NC,Ir,null),b(f,jXe,u),b(f,kc,u),e(kc,qC),e(qC,JMe),M(Lx,JMe,null),e(kc,S$r),e(kc,YMe),e(YMe,R$r),b(f,DXe,u),b(f,dr,u),M(yx,dr,null),e(dr,P$r),e(dr,Sc),e(Sc,B$r),e(Sc,MK),e(MK,I$r),e(Sc,N$r),e(Sc,EK),e(EK,q$r),e(Sc,j$r),e(dr,D$r),e(dr,xx),e(xx,G$r),e(xx,KMe),e(KMe,O$r),e(xx,V$r),e(dr,X$r),e(dr,Dt),M($x,Dt,null),e(Dt,z$r),e(Dt,ZMe),e(ZMe,Q$r),e(Dt,W$r),e(Dt,Rc),e(Rc,H$r),e(Rc,eEe),e(eEe,U$r),e(Rc,J$r),e(Rc,CK),e(CK,Y$r),e(Rc,K$r),e(Dt,Z$r),M(jC,Dt,null),e(dr,ekr),e(dr,Nr),M(kx,Nr,null),e(Nr,okr),e(Nr,oEe),e(oEe,rkr),e(Nr,tkr),e(Nr,pn),e(pn,akr),e(pn,rEe),e(rEe,nkr),e(pn,skr),e(pn,tEe),e(tEe,lkr),e(pn,ikr),e(pn,aEe),e(aEe,dkr),e(pn,ckr),e(Nr,fkr),e(Nr,nEe),e(nEe,DC),e(DC,sEe),e(sEe,mkr),e(DC,gkr),e(DC,wK),e(wK,hkr),e(DC,pkr),e(Nr,_kr),M(GC,Nr,null),b(f,GXe,u),b(f,Pc,u),e(Pc,OC),e(OC,lEe),M(Sx,lEe,null),e(Pc,ukr),e(Pc,iEe),e(iEe,bkr),b(f,OXe,u),b(f,cr,u),M(Rx,cr,null),e(cr,vkr),e(cr,Bc),e(Bc,Fkr),e(Bc,AK),e(AK,Tkr),e(Bc,Mkr),e(Bc,LK),e(LK,Ekr),e(Bc,Ckr),e(cr,wkr),e(cr,Px),e(Px,Akr),e(Px,dEe),e(dEe,Lkr),e(Px,ykr),e(cr,xkr),e(cr,Gt),M(Bx,Gt,null),e(Gt,$kr),e(Gt,cEe),e(cEe,kkr),e(Gt,Skr),e(Gt,Ic),e(Ic,Rkr),e(Ic,fEe),e(fEe,Pkr),e(Ic,Bkr),e(Ic,yK),e(yK,Ikr),e(Ic,Nkr),e(Gt,qkr),M(VC,Gt,null),e(cr,jkr),e(cr,qr),M(Ix,qr,null),e(qr,Dkr),e(qr,mEe),e(mEe,Gkr),e(qr,Okr),e(qr,_n),e(_n,Vkr),e(_n,gEe),e(gEe,Xkr),e(_n,zkr),e(_n,hEe),e(hEe,Qkr),e(_n,Wkr),e(_n,pEe),e(pEe,Hkr),e(_n,Ukr),e(qr,Jkr),e(qr,de),e(de,XC),e(XC,_Ee),e(_Ee,Ykr),e(XC,Kkr),e(XC,xK),e(xK,Zkr),e(XC,eSr),e(de,oSr),e(de,zC),e(zC,uEe),e(uEe,rSr),e(zC,tSr),e(zC,$K),e($K,aSr),e(zC,nSr),e(de,sSr),e(de,QC),e(QC,bEe),e(bEe,lSr),e(QC,iSr),e(QC,kK),e(kK,dSr),e(QC,cSr),e(de,fSr),e(de,WC),e(WC,vEe),e(vEe,mSr),e(WC,gSr),e(WC,SK),e(SK,hSr),e(WC,pSr),e(de,_Sr),e(de,HC),e(HC,FEe),e(FEe,uSr),e(HC,bSr),e(HC,RK),e(RK,vSr),e(HC,FSr),e(de,TSr),e(de,UC),e(UC,TEe),e(TEe,MSr),e(UC,ESr),e(UC,PK),e(PK,CSr),e(UC,wSr),e(de,ASr),e(de,JC),e(JC,MEe),e(MEe,LSr),e(JC,ySr),e(JC,BK),e(BK,xSr),e(JC,$Sr),e(de,kSr),e(de,YC),e(YC,EEe),e(EEe,SSr),e(YC,RSr),e(YC,IK),e(IK,PSr),e(YC,BSr),e(de,ISr),e(de,KC),e(KC,CEe),e(CEe,NSr),e(KC,qSr),e(KC,NK),e(NK,jSr),e(KC,DSr),e(de,GSr),e(de,ZC),e(ZC,wEe),e(wEe,OSr),e(ZC,VSr),e(ZC,qK),e(qK,XSr),e(ZC,zSr),e(de,QSr),e(de,e5),e(e5,AEe),e(AEe,WSr),e(e5,HSr),e(e5,jK),e(jK,USr),e(e5,JSr),e(de,YSr),e(de,o5),e(o5,LEe),e(LEe,KSr),e(o5,ZSr),e(o5,DK),e(DK,eRr),e(o5,oRr),e(de,rRr),e(de,r5),e(r5,yEe),e(yEe,tRr),e(r5,aRr),e(r5,GK),e(GK,nRr),e(r5,sRr),e(de,lRr),e(de,t5),e(t5,xEe),e(xEe,iRr),e(t5,dRr),e(t5,OK),e(OK,cRr),e(t5,fRr),e(de,mRr),e(de,a5),e(a5,$Ee),e($Ee,gRr),e(a5,hRr),e(a5,VK),e(VK,pRr),e(a5,_Rr),e(de,uRr),e(de,n5),e(n5,kEe),e(kEe,bRr),e(n5,vRr),e(n5,XK),e(XK,FRr),e(n5,TRr),e(de,MRr),e(de,s5),e(s5,SEe),e(SEe,ERr),e(s5,CRr),e(s5,zK),e(zK,wRr),e(s5,ARr),e(de,LRr),e(de,l5),e(l5,REe),e(REe,yRr),e(l5,xRr),e(l5,QK),e(QK,$Rr),e(l5,kRr),e(de,SRr),e(de,i5),e(i5,PEe),e(PEe,RRr),e(i5,PRr),e(i5,WK),e(WK,BRr),e(i5,IRr),e(de,NRr),e(de,d5),e(d5,BEe),e(BEe,qRr),e(d5,jRr),e(d5,HK),e(HK,DRr),e(d5,GRr),e(qr,ORr),M(c5,qr,null),b(f,VXe,u),b(f,Nc,u),e(Nc,f5),e(f5,IEe),M(Nx,IEe,null),e(Nc,VRr),e(Nc,NEe),e(NEe,XRr),b(f,XXe,u),b(f,fr,u),M(qx,fr,null),e(fr,zRr),e(fr,qc),e(qc,QRr),e(qc,UK),e(UK,WRr),e(qc,HRr),e(qc,JK),e(JK,URr),e(qc,JRr),e(fr,YRr),e(fr,jx),e(jx,KRr),e(jx,qEe),e(qEe,ZRr),e(jx,ePr),e(fr,oPr),e(fr,Ot),M(Dx,Ot,null),e(Ot,rPr),e(Ot,jEe),e(jEe,tPr),e(Ot,aPr),e(Ot,jc),e(jc,nPr),e(jc,DEe),e(DEe,sPr),e(jc,lPr),e(jc,YK),e(YK,iPr),e(jc,dPr),e(Ot,cPr),M(m5,Ot,null),e(fr,fPr),e(fr,jr),M(Gx,jr,null),e(jr,mPr),e(jr,GEe),e(GEe,gPr),e(jr,hPr),e(jr,un),e(un,pPr),e(un,OEe),e(OEe,_Pr),e(un,uPr),e(un,VEe),e(VEe,bPr),e(un,vPr),e(un,XEe),e(XEe,FPr),e(un,TPr),e(jr,MPr),e(jr,ce),e(ce,g5),e(g5,zEe),e(zEe,EPr),e(g5,CPr),e(g5,KK),e(KK,wPr),e(g5,APr),e(ce,LPr),e(ce,h5),e(h5,QEe),e(QEe,yPr),e(h5,xPr),e(h5,ZK),e(ZK,$Pr),e(h5,kPr),e(ce,SPr),e(ce,p5),e(p5,WEe),e(WEe,RPr),e(p5,PPr),e(p5,eZ),e(eZ,BPr),e(p5,IPr),e(ce,NPr),e(ce,_5),e(_5,HEe),e(HEe,qPr),e(_5,jPr),e(_5,oZ),e(oZ,DPr),e(_5,GPr),e(ce,OPr),e(ce,u5),e(u5,UEe),e(UEe,VPr),e(u5,XPr),e(u5,rZ),e(rZ,zPr),e(u5,QPr),e(ce,WPr),e(ce,b5),e(b5,JEe),e(JEe,HPr),e(b5,UPr),e(b5,tZ),e(tZ,JPr),e(b5,YPr),e(ce,KPr),e(ce,v5),e(v5,YEe),e(YEe,ZPr),e(v5,eBr),e(v5,aZ),e(aZ,oBr),e(v5,rBr),e(ce,tBr),e(ce,F5),e(F5,KEe),e(KEe,aBr),e(F5,nBr),e(F5,nZ),e(nZ,sBr),e(F5,lBr),e(ce,iBr),e(ce,T5),e(T5,ZEe),e(ZEe,dBr),e(T5,cBr),e(T5,sZ),e(sZ,fBr),e(T5,mBr),e(ce,gBr),e(ce,M5),e(M5,eCe),e(eCe,hBr),e(M5,pBr),e(M5,lZ),e(lZ,_Br),e(M5,uBr),e(ce,bBr),e(ce,E5),e(E5,oCe),e(oCe,vBr),e(E5,FBr),e(E5,iZ),e(iZ,TBr),e(E5,MBr),e(ce,EBr),e(ce,C5),e(C5,rCe),e(rCe,CBr),e(C5,wBr),e(C5,dZ),e(dZ,ABr),e(C5,LBr),e(ce,yBr),e(ce,w5),e(w5,tCe),e(tCe,xBr),e(w5,$Br),e(w5,cZ),e(cZ,kBr),e(w5,SBr),e(ce,RBr),e(ce,A5),e(A5,aCe),e(aCe,PBr),e(A5,BBr),e(A5,fZ),e(fZ,IBr),e(A5,NBr),e(ce,qBr),e(ce,L5),e(L5,nCe),e(nCe,jBr),e(L5,DBr),e(L5,mZ),e(mZ,GBr),e(L5,OBr),e(ce,VBr),e(ce,y5),e(y5,sCe),e(sCe,XBr),e(y5,zBr),e(y5,gZ),e(gZ,QBr),e(y5,WBr),e(ce,HBr),e(ce,x5),e(x5,lCe),e(lCe,UBr),e(x5,JBr),e(x5,hZ),e(hZ,YBr),e(x5,KBr),e(ce,ZBr),e(ce,$5),e($5,iCe),e(iCe,eIr),e($5,oIr),e($5,pZ),e(pZ,rIr),e($5,tIr),e(ce,aIr),e(ce,k5),e(k5,dCe),e(dCe,nIr),e(k5,sIr),e(k5,_Z),e(_Z,lIr),e(k5,iIr),e(ce,dIr),e(ce,S5),e(S5,cCe),e(cCe,cIr),e(S5,fIr),e(S5,uZ),e(uZ,mIr),e(S5,gIr),e(jr,hIr),M(R5,jr,null),b(f,zXe,u),b(f,Dc,u),e(Dc,P5),e(P5,fCe),M(Ox,fCe,null),e(Dc,pIr),e(Dc,mCe),e(mCe,_Ir),b(f,QXe,u),b(f,mr,u),M(Vx,mr,null),e(mr,uIr),e(mr,Gc),e(Gc,bIr),e(Gc,bZ),e(bZ,vIr),e(Gc,FIr),e(Gc,vZ),e(vZ,TIr),e(Gc,MIr),e(mr,EIr),e(mr,Xx),e(Xx,CIr),e(Xx,gCe),e(gCe,wIr),e(Xx,AIr),e(mr,LIr),e(mr,Vt),M(zx,Vt,null),e(Vt,yIr),e(Vt,hCe),e(hCe,xIr),e(Vt,$Ir),e(Vt,Oc),e(Oc,kIr),e(Oc,pCe),e(pCe,SIr),e(Oc,RIr),e(Oc,FZ),e(FZ,PIr),e(Oc,BIr),e(Vt,IIr),M(B5,Vt,null),e(mr,NIr),e(mr,Dr),M(Qx,Dr,null),e(Dr,qIr),e(Dr,_Ce),e(_Ce,jIr),e(Dr,DIr),e(Dr,bn),e(bn,GIr),e(bn,uCe),e(uCe,OIr),e(bn,VIr),e(bn,bCe),e(bCe,XIr),e(bn,zIr),e(bn,vCe),e(vCe,QIr),e(bn,WIr),e(Dr,HIr),e(Dr,FCe),e(FCe,I5),e(I5,TCe),e(TCe,UIr),e(I5,JIr),e(I5,TZ),e(TZ,YIr),e(I5,KIr),e(Dr,ZIr),M(N5,Dr,null),b(f,WXe,u),b(f,Vc,u),e(Vc,q5),e(q5,MCe),M(Wx,MCe,null),e(Vc,eNr),e(Vc,ECe),e(ECe,oNr),b(f,HXe,u),b(f,gr,u),M(Hx,gr,null),e(gr,rNr),e(gr,Xc),e(Xc,tNr),e(Xc,MZ),e(MZ,aNr),e(Xc,nNr),e(Xc,EZ),e(EZ,sNr),e(Xc,lNr),e(gr,iNr),e(gr,Ux),e(Ux,dNr),e(Ux,CCe),e(CCe,cNr),e(Ux,fNr),e(gr,mNr),e(gr,Xt),M(Jx,Xt,null),e(Xt,gNr),e(Xt,wCe),e(wCe,hNr),e(Xt,pNr),e(Xt,zc),e(zc,_Nr),e(zc,ACe),e(ACe,uNr),e(zc,bNr),e(zc,CZ),e(CZ,vNr),e(zc,FNr),e(Xt,TNr),M(j5,Xt,null),e(gr,MNr),e(gr,Gr),M(Yx,Gr,null),e(Gr,ENr),e(Gr,LCe),e(LCe,CNr),e(Gr,wNr),e(Gr,vn),e(vn,ANr),e(vn,yCe),e(yCe,LNr),e(vn,yNr),e(vn,xCe),e(xCe,xNr),e(vn,$Nr),e(vn,$Ce),e($Ce,kNr),e(vn,SNr),e(Gr,RNr),e(Gr,kCe),e(kCe,D5),e(D5,SCe),e(SCe,PNr),e(D5,BNr),e(D5,wZ),e(wZ,INr),e(D5,NNr),e(Gr,qNr),M(G5,Gr,null),b(f,UXe,u),b(f,Qc,u),e(Qc,O5),e(O5,RCe),M(Kx,RCe,null),e(Qc,jNr),e(Qc,PCe),e(PCe,DNr),b(f,JXe,u),b(f,hr,u),M(Zx,hr,null),e(hr,GNr),e(hr,Wc),e(Wc,ONr),e(Wc,AZ),e(AZ,VNr),e(Wc,XNr),e(Wc,LZ),e(LZ,zNr),e(Wc,QNr),e(hr,WNr),e(hr,e$),e(e$,HNr),e(e$,BCe),e(BCe,UNr),e(e$,JNr),e(hr,YNr),e(hr,zt),M(o$,zt,null),e(zt,KNr),e(zt,ICe),e(ICe,ZNr),e(zt,eqr),e(zt,Hc),e(Hc,oqr),e(Hc,NCe),e(NCe,rqr),e(Hc,tqr),e(Hc,yZ),e(yZ,aqr),e(Hc,nqr),e(zt,sqr),M(V5,zt,null),e(hr,lqr),e(hr,Or),M(r$,Or,null),e(Or,iqr),e(Or,qCe),e(qCe,dqr),e(Or,cqr),e(Or,Fn),e(Fn,fqr),e(Fn,jCe),e(jCe,mqr),e(Fn,gqr),e(Fn,DCe),e(DCe,hqr),e(Fn,pqr),e(Fn,GCe),e(GCe,_qr),e(Fn,uqr),e(Or,bqr),e(Or,oe),e(oe,X5),e(X5,OCe),e(OCe,vqr),e(X5,Fqr),e(X5,xZ),e(xZ,Tqr),e(X5,Mqr),e(oe,Eqr),e(oe,z5),e(z5,VCe),e(VCe,Cqr),e(z5,wqr),e(z5,$Z),e($Z,Aqr),e(z5,Lqr),e(oe,yqr),e(oe,Q5),e(Q5,XCe),e(XCe,xqr),e(Q5,$qr),e(Q5,kZ),e(kZ,kqr),e(Q5,Sqr),e(oe,Rqr),e(oe,W5),e(W5,zCe),e(zCe,Pqr),e(W5,Bqr),e(W5,SZ),e(SZ,Iqr),e(W5,Nqr),e(oe,qqr),e(oe,H5),e(H5,QCe),e(QCe,jqr),e(H5,Dqr),e(H5,RZ),e(RZ,Gqr),e(H5,Oqr),e(oe,Vqr),e(oe,U5),e(U5,WCe),e(WCe,Xqr),e(U5,zqr),e(U5,PZ),e(PZ,Qqr),e(U5,Wqr),e(oe,Hqr),e(oe,J5),e(J5,HCe),e(HCe,Uqr),e(J5,Jqr),e(J5,BZ),e(BZ,Yqr),e(J5,Kqr),e(oe,Zqr),e(oe,Y5),e(Y5,UCe),e(UCe,ejr),e(Y5,ojr),e(Y5,IZ),e(IZ,rjr),e(Y5,tjr),e(oe,ajr),e(oe,K5),e(K5,JCe),e(JCe,njr),e(K5,sjr),e(K5,NZ),e(NZ,ljr),e(K5,ijr),e(oe,djr),e(oe,Z5),e(Z5,YCe),e(YCe,cjr),e(Z5,fjr),e(Z5,qZ),e(qZ,mjr),e(Z5,gjr),e(oe,hjr),e(oe,e0),e(e0,KCe),e(KCe,pjr),e(e0,_jr),e(e0,jZ),e(jZ,ujr),e(e0,bjr),e(oe,vjr),e(oe,o0),e(o0,ZCe),e(ZCe,Fjr),e(o0,Tjr),e(o0,DZ),e(DZ,Mjr),e(o0,Ejr),e(oe,Cjr),e(oe,r0),e(r0,e5e),e(e5e,wjr),e(r0,Ajr),e(r0,GZ),e(GZ,Ljr),e(r0,yjr),e(oe,xjr),e(oe,t0),e(t0,o5e),e(o5e,$jr),e(t0,kjr),e(t0,OZ),e(OZ,Sjr),e(t0,Rjr),e(oe,Pjr),e(oe,a0),e(a0,r5e),e(r5e,Bjr),e(a0,Ijr),e(a0,VZ),e(VZ,Njr),e(a0,qjr),e(oe,jjr),e(oe,n0),e(n0,t5e),e(t5e,Djr),e(n0,Gjr),e(n0,XZ),e(XZ,Ojr),e(n0,Vjr),e(oe,Xjr),e(oe,s0),e(s0,a5e),e(a5e,zjr),e(s0,Qjr),e(s0,zZ),e(zZ,Wjr),e(s0,Hjr),e(oe,Ujr),e(oe,l0),e(l0,n5e),e(n5e,Jjr),e(l0,Yjr),e(l0,QZ),e(QZ,Kjr),e(l0,Zjr),e(oe,eDr),e(oe,i0),e(i0,s5e),e(s5e,oDr),e(i0,rDr),e(i0,WZ),e(WZ,tDr),e(i0,aDr),e(oe,nDr),e(oe,d0),e(d0,l5e),e(l5e,sDr),e(d0,lDr),e(d0,HZ),e(HZ,iDr),e(d0,dDr),e(oe,cDr),e(oe,c0),e(c0,i5e),e(i5e,fDr),e(c0,mDr),e(c0,UZ),e(UZ,gDr),e(c0,hDr),e(oe,pDr),e(oe,f0),e(f0,d5e),e(d5e,_Dr),e(f0,uDr),e(f0,JZ),e(JZ,bDr),e(f0,vDr),e(oe,FDr),e(oe,m0),e(m0,c5e),e(c5e,TDr),e(m0,MDr),e(m0,YZ),e(YZ,EDr),e(m0,CDr),e(oe,wDr),e(oe,g0),e(g0,f5e),e(f5e,ADr),e(g0,LDr),e(g0,KZ),e(KZ,yDr),e(g0,xDr),e(oe,$Dr),e(oe,h0),e(h0,m5e),e(m5e,kDr),e(h0,SDr),e(h0,ZZ),e(ZZ,RDr),e(h0,PDr),e(oe,BDr),e(oe,p0),e(p0,g5e),e(g5e,IDr),e(p0,NDr),e(p0,eee),e(eee,qDr),e(p0,jDr),e(oe,DDr),e(oe,_0),e(_0,h5e),e(h5e,GDr),e(_0,ODr),e(_0,oee),e(oee,VDr),e(_0,XDr),e(Or,zDr),M(u0,Or,null),b(f,YXe,u),b(f,Uc,u),e(Uc,b0),e(b0,p5e),M(t$,p5e,null),e(Uc,QDr),e(Uc,_5e),e(_5e,WDr),b(f,KXe,u),b(f,pr,u),M(a$,pr,null),e(pr,HDr),e(pr,Jc),e(Jc,UDr),e(Jc,ree),e(ree,JDr),e(Jc,YDr),e(Jc,tee),e(tee,KDr),e(Jc,ZDr),e(pr,eGr),e(pr,n$),e(n$,oGr),e(n$,u5e),e(u5e,rGr),e(n$,tGr),e(pr,aGr),e(pr,Qt),M(s$,Qt,null),e(Qt,nGr),e(Qt,b5e),e(b5e,sGr),e(Qt,lGr),e(Qt,Yc),e(Yc,iGr),e(Yc,v5e),e(v5e,dGr),e(Yc,cGr),e(Yc,aee),e(aee,fGr),e(Yc,mGr),e(Qt,gGr),M(v0,Qt,null),e(pr,hGr),e(pr,Vr),M(l$,Vr,null),e(Vr,pGr),e(Vr,F5e),e(F5e,_Gr),e(Vr,uGr),e(Vr,Tn),e(Tn,bGr),e(Tn,T5e),e(T5e,vGr),e(Tn,FGr),e(Tn,M5e),e(M5e,TGr),e(Tn,MGr),e(Tn,E5e),e(E5e,EGr),e(Tn,CGr),e(Vr,wGr),e(Vr,xe),e(xe,F0),e(F0,C5e),e(C5e,AGr),e(F0,LGr),e(F0,nee),e(nee,yGr),e(F0,xGr),e(xe,$Gr),e(xe,T0),e(T0,w5e),e(w5e,kGr),e(T0,SGr),e(T0,see),e(see,RGr),e(T0,PGr),e(xe,BGr),e(xe,M0),e(M0,A5e),e(A5e,IGr),e(M0,NGr),e(M0,lee),e(lee,qGr),e(M0,jGr),e(xe,DGr),e(xe,E0),e(E0,L5e),e(L5e,GGr),e(E0,OGr),e(E0,iee),e(iee,VGr),e(E0,XGr),e(xe,zGr),e(xe,C0),e(C0,y5e),e(y5e,QGr),e(C0,WGr),e(C0,dee),e(dee,HGr),e(C0,UGr),e(xe,JGr),e(xe,w0),e(w0,x5e),e(x5e,YGr),e(w0,KGr),e(w0,cee),e(cee,ZGr),e(w0,eOr),e(xe,oOr),e(xe,A0),e(A0,$5e),e($5e,rOr),e(A0,tOr),e(A0,fee),e(fee,aOr),e(A0,nOr),e(xe,sOr),e(xe,L0),e(L0,k5e),e(k5e,lOr),e(L0,iOr),e(L0,mee),e(mee,dOr),e(L0,cOr),e(xe,fOr),e(xe,y0),e(y0,S5e),e(S5e,mOr),e(y0,gOr),e(y0,gee),e(gee,hOr),e(y0,pOr),e(xe,_Or),e(xe,x0),e(x0,R5e),e(R5e,uOr),e(x0,bOr),e(x0,hee),e(hee,vOr),e(x0,FOr),e(Vr,TOr),M($0,Vr,null),b(f,ZXe,u),b(f,Kc,u),e(Kc,k0),e(k0,P5e),M(i$,P5e,null),e(Kc,MOr),e(Kc,B5e),e(B5e,EOr),b(f,eze,u),b(f,_r,u),M(d$,_r,null),e(_r,COr),e(_r,Zc),e(Zc,wOr),e(Zc,pee),e(pee,AOr),e(Zc,LOr),e(Zc,_ee),e(_ee,yOr),e(Zc,xOr),e(_r,$Or),e(_r,c$),e(c$,kOr),e(c$,I5e),e(I5e,SOr),e(c$,ROr),e(_r,POr),e(_r,Wt),M(f$,Wt,null),e(Wt,BOr),e(Wt,N5e),e(N5e,IOr),e(Wt,NOr),e(Wt,ef),e(ef,qOr),e(ef,q5e),e(q5e,jOr),e(ef,DOr),e(ef,uee),e(uee,GOr),e(ef,OOr),e(Wt,VOr),M(S0,Wt,null),e(_r,XOr),e(_r,Xr),M(m$,Xr,null),e(Xr,zOr),e(Xr,j5e),e(j5e,QOr),e(Xr,WOr),e(Xr,Mn),e(Mn,HOr),e(Mn,D5e),e(D5e,UOr),e(Mn,JOr),e(Mn,G5e),e(G5e,YOr),e(Mn,KOr),e(Mn,O5e),e(O5e,ZOr),e(Mn,eVr),e(Xr,oVr),e(Xr,Ee),e(Ee,R0),e(R0,V5e),e(V5e,rVr),e(R0,tVr),e(R0,bee),e(bee,aVr),e(R0,nVr),e(Ee,sVr),e(Ee,P0),e(P0,X5e),e(X5e,lVr),e(P0,iVr),e(P0,vee),e(vee,dVr),e(P0,cVr),e(Ee,fVr),e(Ee,B0),e(B0,z5e),e(z5e,mVr),e(B0,gVr),e(B0,Fee),e(Fee,hVr),e(B0,pVr),e(Ee,_Vr),e(Ee,I0),e(I0,Q5e),e(Q5e,uVr),e(I0,bVr),e(I0,Tee),e(Tee,vVr),e(I0,FVr),e(Ee,TVr),e(Ee,N0),e(N0,W5e),e(W5e,MVr),e(N0,EVr),e(N0,Mee),e(Mee,CVr),e(N0,wVr),e(Ee,AVr),e(Ee,q0),e(q0,H5e),e(H5e,LVr),e(q0,yVr),e(q0,Eee),e(Eee,xVr),e(q0,$Vr),e(Ee,kVr),e(Ee,j0),e(j0,U5e),e(U5e,SVr),e(j0,RVr),e(j0,Cee),e(Cee,PVr),e(j0,BVr),e(Ee,IVr),e(Ee,D0),e(D0,J5e),e(J5e,NVr),e(D0,qVr),e(D0,wee),e(wee,jVr),e(D0,DVr),e(Ee,GVr),e(Ee,G0),e(G0,Y5e),e(Y5e,OVr),e(G0,VVr),e(G0,Aee),e(Aee,XVr),e(G0,zVr),e(Ee,QVr),e(Ee,O0),e(O0,K5e),e(K5e,WVr),e(O0,HVr),e(O0,Lee),e(Lee,UVr),e(O0,JVr),e(Ee,YVr),e(Ee,V0),e(V0,Z5e),e(Z5e,KVr),e(V0,ZVr),e(V0,yee),e(yee,eXr),e(V0,oXr),e(Ee,rXr),e(Ee,X0),e(X0,e0e),e(e0e,tXr),e(X0,aXr),e(X0,xee),e(xee,nXr),e(X0,sXr),e(Ee,lXr),e(Ee,z0),e(z0,o0e),e(o0e,iXr),e(z0,dXr),e(z0,$ee),e($ee,cXr),e(z0,fXr),e(Xr,mXr),M(Q0,Xr,null),b(f,oze,u),b(f,of,u),e(of,W0),e(W0,r0e),M(g$,r0e,null),e(of,gXr),e(of,t0e),e(t0e,hXr),b(f,rze,u),b(f,ur,u),M(h$,ur,null),e(ur,pXr),e(ur,rf),e(rf,_Xr),e(rf,kee),e(kee,uXr),e(rf,bXr),e(rf,See),e(See,vXr),e(rf,FXr),e(ur,TXr),e(ur,p$),e(p$,MXr),e(p$,a0e),e(a0e,EXr),e(p$,CXr),e(ur,wXr),e(ur,Ht),M(_$,Ht,null),e(Ht,AXr),e(Ht,n0e),e(n0e,LXr),e(Ht,yXr),e(Ht,tf),e(tf,xXr),e(tf,s0e),e(s0e,$Xr),e(tf,kXr),e(tf,Ree),e(Ree,SXr),e(tf,RXr),e(Ht,PXr),M(H0,Ht,null),e(ur,BXr),e(ur,zr),M(u$,zr,null),e(zr,IXr),e(zr,l0e),e(l0e,NXr),e(zr,qXr),e(zr,En),e(En,jXr),e(En,i0e),e(i0e,DXr),e(En,GXr),e(En,d0e),e(d0e,OXr),e(En,VXr),e(En,c0e),e(c0e,XXr),e(En,zXr),e(zr,QXr),e(zr,$e),e($e,U0),e(U0,f0e),e(f0e,WXr),e(U0,HXr),e(U0,Pee),e(Pee,UXr),e(U0,JXr),e($e,YXr),e($e,J0),e(J0,m0e),e(m0e,KXr),e(J0,ZXr),e(J0,Bee),e(Bee,ezr),e(J0,ozr),e($e,rzr),e($e,Y0),e(Y0,g0e),e(g0e,tzr),e(Y0,azr),e(Y0,Iee),e(Iee,nzr),e(Y0,szr),e($e,lzr),e($e,K0),e(K0,h0e),e(h0e,izr),e(K0,dzr),e(K0,Nee),e(Nee,czr),e(K0,fzr),e($e,mzr),e($e,Z0),e(Z0,p0e),e(p0e,gzr),e(Z0,hzr),e(Z0,qee),e(qee,pzr),e(Z0,_zr),e($e,uzr),e($e,ew),e(ew,_0e),e(_0e,bzr),e(ew,vzr),e(ew,jee),e(jee,Fzr),e(ew,Tzr),e($e,Mzr),e($e,ow),e(ow,u0e),e(u0e,Ezr),e(ow,Czr),e(ow,Dee),e(Dee,wzr),e(ow,Azr),e($e,Lzr),e($e,rw),e(rw,b0e),e(b0e,yzr),e(rw,xzr),e(rw,Gee),e(Gee,$zr),e(rw,kzr),e($e,Szr),e($e,tw),e(tw,v0e),e(v0e,Rzr),e(tw,Pzr),e(tw,Oee),e(Oee,Bzr),e(tw,Izr),e($e,Nzr),e($e,aw),e(aw,F0e),e(F0e,qzr),e(aw,jzr),e(aw,Vee),e(Vee,Dzr),e(aw,Gzr),e(zr,Ozr),M(nw,zr,null),b(f,tze,u),b(f,af,u),e(af,sw),e(sw,T0e),M(b$,T0e,null),e(af,Vzr),e(af,M0e),e(M0e,Xzr),b(f,aze,u),b(f,br,u),M(v$,br,null),e(br,zzr),e(br,nf),e(nf,Qzr),e(nf,Xee),e(Xee,Wzr),e(nf,Hzr),e(nf,zee),e(zee,Uzr),e(nf,Jzr),e(br,Yzr),e(br,F$),e(F$,Kzr),e(F$,E0e),e(E0e,Zzr),e(F$,eQr),e(br,oQr),e(br,Ut),M(T$,Ut,null),e(Ut,rQr),e(Ut,C0e),e(C0e,tQr),e(Ut,aQr),e(Ut,sf),e(sf,nQr),e(sf,w0e),e(w0e,sQr),e(sf,lQr),e(sf,Qee),e(Qee,iQr),e(sf,dQr),e(Ut,cQr),M(lw,Ut,null),e(br,fQr),e(br,Qr),M(M$,Qr,null),e(Qr,mQr),e(Qr,A0e),e(A0e,gQr),e(Qr,hQr),e(Qr,Cn),e(Cn,pQr),e(Cn,L0e),e(L0e,_Qr),e(Cn,uQr),e(Cn,y0e),e(y0e,bQr),e(Cn,vQr),e(Cn,x0e),e(x0e,FQr),e(Cn,TQr),e(Qr,MQr),e(Qr,ke),e(ke,iw),e(iw,$0e),e($0e,EQr),e(iw,CQr),e(iw,Wee),e(Wee,wQr),e(iw,AQr),e(ke,LQr),e(ke,dw),e(dw,k0e),e(k0e,yQr),e(dw,xQr),e(dw,Hee),e(Hee,$Qr),e(dw,kQr),e(ke,SQr),e(ke,cw),e(cw,S0e),e(S0e,RQr),e(cw,PQr),e(cw,Uee),e(Uee,BQr),e(cw,IQr),e(ke,NQr),e(ke,fw),e(fw,R0e),e(R0e,qQr),e(fw,jQr),e(fw,Jee),e(Jee,DQr),e(fw,GQr),e(ke,OQr),e(ke,mw),e(mw,P0e),e(P0e,VQr),e(mw,XQr),e(mw,Yee),e(Yee,zQr),e(mw,QQr),e(ke,WQr),e(ke,gw),e(gw,B0e),e(B0e,HQr),e(gw,UQr),e(gw,Kee),e(Kee,JQr),e(gw,YQr),e(ke,KQr),e(ke,hw),e(hw,I0e),e(I0e,ZQr),e(hw,eWr),e(hw,Zee),e(Zee,oWr),e(hw,rWr),e(ke,tWr),e(ke,pw),e(pw,N0e),e(N0e,aWr),e(pw,nWr),e(pw,eoe),e(eoe,sWr),e(pw,lWr),e(ke,iWr),e(ke,_w),e(_w,q0e),e(q0e,dWr),e(_w,cWr),e(_w,ooe),e(ooe,fWr),e(_w,mWr),e(ke,gWr),e(ke,uw),e(uw,j0e),e(j0e,hWr),e(uw,pWr),e(uw,roe),e(roe,_Wr),e(uw,uWr),e(Qr,bWr),M(bw,Qr,null),b(f,nze,u),b(f,lf,u),e(lf,vw),e(vw,D0e),M(E$,D0e,null),e(lf,vWr),e(lf,G0e),e(G0e,FWr),b(f,sze,u),b(f,vr,u),M(C$,vr,null),e(vr,TWr),e(vr,df),e(df,MWr),e(df,toe),e(toe,EWr),e(df,CWr),e(df,aoe),e(aoe,wWr),e(df,AWr),e(vr,LWr),e(vr,w$),e(w$,yWr),e(w$,O0e),e(O0e,xWr),e(w$,$Wr),e(vr,kWr),e(vr,Jt),M(A$,Jt,null),e(Jt,SWr),e(Jt,V0e),e(V0e,RWr),e(Jt,PWr),e(Jt,cf),e(cf,BWr),e(cf,X0e),e(X0e,IWr),e(cf,NWr),e(cf,noe),e(noe,qWr),e(cf,jWr),e(Jt,DWr),M(Fw,Jt,null),e(vr,GWr),e(vr,Wr),M(L$,Wr,null),e(Wr,OWr),e(Wr,z0e),e(z0e,VWr),e(Wr,XWr),e(Wr,wn),e(wn,zWr),e(wn,Q0e),e(Q0e,QWr),e(wn,WWr),e(wn,W0e),e(W0e,HWr),e(wn,UWr),e(wn,H0e),e(H0e,JWr),e(wn,YWr),e(Wr,KWr),e(Wr,Se),e(Se,Tw),e(Tw,U0e),e(U0e,ZWr),e(Tw,eHr),e(Tw,soe),e(soe,oHr),e(Tw,rHr),e(Se,tHr),e(Se,Mw),e(Mw,J0e),e(J0e,aHr),e(Mw,nHr),e(Mw,loe),e(loe,sHr),e(Mw,lHr),e(Se,iHr),e(Se,Ew),e(Ew,Y0e),e(Y0e,dHr),e(Ew,cHr),e(Ew,ioe),e(ioe,fHr),e(Ew,mHr),e(Se,gHr),e(Se,Cw),e(Cw,K0e),e(K0e,hHr),e(Cw,pHr),e(Cw,doe),e(doe,_Hr),e(Cw,uHr),e(Se,bHr),e(Se,ww),e(ww,Z0e),e(Z0e,vHr),e(ww,FHr),e(ww,coe),e(coe,THr),e(ww,MHr),e(Se,EHr),e(Se,Aw),e(Aw,ewe),e(ewe,CHr),e(Aw,wHr),e(Aw,foe),e(foe,AHr),e(Aw,LHr),e(Se,yHr),e(Se,Lw),e(Lw,owe),e(owe,xHr),e(Lw,$Hr),e(Lw,moe),e(moe,kHr),e(Lw,SHr),e(Se,RHr),e(Se,yw),e(yw,rwe),e(rwe,PHr),e(yw,BHr),e(yw,goe),e(goe,IHr),e(yw,NHr),e(Se,qHr),e(Se,xw),e(xw,twe),e(twe,jHr),e(xw,DHr),e(xw,hoe),e(hoe,GHr),e(xw,OHr),e(Se,VHr),e(Se,$w),e($w,awe),e(awe,XHr),e($w,zHr),e($w,poe),e(poe,QHr),e($w,WHr),e(Wr,HHr),M(kw,Wr,null),b(f,lze,u),b(f,ff,u),e(ff,Sw),e(Sw,nwe),M(y$,nwe,null),e(ff,UHr),e(ff,swe),e(swe,JHr),b(f,ize,u),b(f,Fr,u),M(x$,Fr,null),e(Fr,YHr),e(Fr,mf),e(mf,KHr),e(mf,_oe),e(_oe,ZHr),e(mf,eUr),e(mf,uoe),e(uoe,oUr),e(mf,rUr),e(Fr,tUr),e(Fr,$$),e($$,aUr),e($$,lwe),e(lwe,nUr),e($$,sUr),e(Fr,lUr),e(Fr,Yt),M(k$,Yt,null),e(Yt,iUr),e(Yt,iwe),e(iwe,dUr),e(Yt,cUr),e(Yt,gf),e(gf,fUr),e(gf,dwe),e(dwe,mUr),e(gf,gUr),e(gf,boe),e(boe,hUr),e(gf,pUr),e(Yt,_Ur),M(Rw,Yt,null),e(Fr,uUr),e(Fr,Hr),M(S$,Hr,null),e(Hr,bUr),e(Hr,cwe),e(cwe,vUr),e(Hr,FUr),e(Hr,An),e(An,TUr),e(An,fwe),e(fwe,MUr),e(An,EUr),e(An,mwe),e(mwe,CUr),e(An,wUr),e(An,gwe),e(gwe,AUr),e(An,LUr),e(Hr,yUr),e(Hr,Re),e(Re,Pw),e(Pw,hwe),e(hwe,xUr),e(Pw,$Ur),e(Pw,voe),e(voe,kUr),e(Pw,SUr),e(Re,RUr),e(Re,Bw),e(Bw,pwe),e(pwe,PUr),e(Bw,BUr),e(Bw,Foe),e(Foe,IUr),e(Bw,NUr),e(Re,qUr),e(Re,Iw),e(Iw,_we),e(_we,jUr),e(Iw,DUr),e(Iw,Toe),e(Toe,GUr),e(Iw,OUr),e(Re,VUr),e(Re,Nw),e(Nw,uwe),e(uwe,XUr),e(Nw,zUr),e(Nw,Moe),e(Moe,QUr),e(Nw,WUr),e(Re,HUr),e(Re,qw),e(qw,bwe),e(bwe,UUr),e(qw,JUr),e(qw,Eoe),e(Eoe,YUr),e(qw,KUr),e(Re,ZUr),e(Re,jw),e(jw,vwe),e(vwe,eJr),e(jw,oJr),e(jw,Coe),e(Coe,rJr),e(jw,tJr),e(Re,aJr),e(Re,Dw),e(Dw,Fwe),e(Fwe,nJr),e(Dw,sJr),e(Dw,woe),e(woe,lJr),e(Dw,iJr),e(Re,dJr),e(Re,Gw),e(Gw,Twe),e(Twe,cJr),e(Gw,fJr),e(Gw,Aoe),e(Aoe,mJr),e(Gw,gJr),e(Re,hJr),e(Re,Ow),e(Ow,Mwe),e(Mwe,pJr),e(Ow,_Jr),e(Ow,Loe),e(Loe,uJr),e(Ow,bJr),e(Re,vJr),e(Re,Vw),e(Vw,Ewe),e(Ewe,FJr),e(Vw,TJr),e(Vw,yoe),e(yoe,MJr),e(Vw,EJr),e(Hr,CJr),M(Xw,Hr,null),b(f,dze,u),b(f,hf,u),e(hf,zw),e(zw,Cwe),M(R$,Cwe,null),e(hf,wJr),e(hf,wwe),e(wwe,AJr),b(f,cze,u),b(f,Tr,u),M(P$,Tr,null),e(Tr,LJr),e(Tr,pf),e(pf,yJr),e(pf,xoe),e(xoe,xJr),e(pf,$Jr),e(pf,$oe),e($oe,kJr),e(pf,SJr),e(Tr,RJr),e(Tr,B$),e(B$,PJr),e(B$,Awe),e(Awe,BJr),e(B$,IJr),e(Tr,NJr),e(Tr,Kt),M(I$,Kt,null),e(Kt,qJr),e(Kt,Lwe),e(Lwe,jJr),e(Kt,DJr),e(Kt,_f),e(_f,GJr),e(_f,ywe),e(ywe,OJr),e(_f,VJr),e(_f,koe),e(koe,XJr),e(_f,zJr),e(Kt,QJr),M(Qw,Kt,null),e(Tr,WJr),e(Tr,Ur),M(N$,Ur,null),e(Ur,HJr),e(Ur,xwe),e(xwe,UJr),e(Ur,JJr),e(Ur,Ln),e(Ln,YJr),e(Ln,$we),e($we,KJr),e(Ln,ZJr),e(Ln,kwe),e(kwe,eYr),e(Ln,oYr),e(Ln,Swe),e(Swe,rYr),e(Ln,tYr),e(Ur,aYr),e(Ur,Ve),e(Ve,Ww),e(Ww,Rwe),e(Rwe,nYr),e(Ww,sYr),e(Ww,Soe),e(Soe,lYr),e(Ww,iYr),e(Ve,dYr),e(Ve,Hw),e(Hw,Pwe),e(Pwe,cYr),e(Hw,fYr),e(Hw,Roe),e(Roe,mYr),e(Hw,gYr),e(Ve,hYr),e(Ve,Uw),e(Uw,Bwe),e(Bwe,pYr),e(Uw,_Yr),e(Uw,Poe),e(Poe,uYr),e(Uw,bYr),e(Ve,vYr),e(Ve,Jw),e(Jw,Iwe),e(Iwe,FYr),e(Jw,TYr),e(Jw,Boe),e(Boe,MYr),e(Jw,EYr),e(Ve,CYr),e(Ve,Yw),e(Yw,Nwe),e(Nwe,wYr),e(Yw,AYr),e(Yw,Ioe),e(Ioe,LYr),e(Yw,yYr),e(Ve,xYr),e(Ve,Kw),e(Kw,qwe),e(qwe,$Yr),e(Kw,kYr),e(Kw,Noe),e(Noe,SYr),e(Kw,RYr),e(Ve,PYr),e(Ve,Zw),e(Zw,jwe),e(jwe,BYr),e(Zw,IYr),e(Zw,qoe),e(qoe,NYr),e(Zw,qYr),e(Ve,jYr),e(Ve,eA),e(eA,Dwe),e(Dwe,DYr),e(eA,GYr),e(eA,joe),e(joe,OYr),e(eA,VYr),e(Ur,XYr),M(oA,Ur,null),b(f,fze,u),b(f,uf,u),e(uf,rA),e(rA,Gwe),M(q$,Gwe,null),e(uf,zYr),e(uf,Owe),e(Owe,QYr),b(f,mze,u),b(f,Mr,u),M(j$,Mr,null),e(Mr,WYr),e(Mr,bf),e(bf,HYr),e(bf,Doe),e(Doe,UYr),e(bf,JYr),e(bf,Goe),e(Goe,YYr),e(bf,KYr),e(Mr,ZYr),e(Mr,D$),e(D$,eKr),e(D$,Vwe),e(Vwe,oKr),e(D$,rKr),e(Mr,tKr),e(Mr,Zt),M(G$,Zt,null),e(Zt,aKr),e(Zt,Xwe),e(Xwe,nKr),e(Zt,sKr),e(Zt,vf),e(vf,lKr),e(vf,zwe),e(zwe,iKr),e(vf,dKr),e(vf,Ooe),e(Ooe,cKr),e(vf,fKr),e(Zt,mKr),M(tA,Zt,null),e(Mr,gKr),e(Mr,Jr),M(O$,Jr,null),e(Jr,hKr),e(Jr,Qwe),e(Qwe,pKr),e(Jr,_Kr),e(Jr,yn),e(yn,uKr),e(yn,Wwe),e(Wwe,bKr),e(yn,vKr),e(yn,Hwe),e(Hwe,FKr),e(yn,TKr),e(yn,Uwe),e(Uwe,MKr),e(yn,EKr),e(Jr,CKr),e(Jr,Xe),e(Xe,aA),e(aA,Jwe),e(Jwe,wKr),e(aA,AKr),e(aA,Voe),e(Voe,LKr),e(aA,yKr),e(Xe,xKr),e(Xe,nA),e(nA,Ywe),e(Ywe,$Kr),e(nA,kKr),e(nA,Xoe),e(Xoe,SKr),e(nA,RKr),e(Xe,PKr),e(Xe,sA),e(sA,Kwe),e(Kwe,BKr),e(sA,IKr),e(sA,zoe),e(zoe,NKr),e(sA,qKr),e(Xe,jKr),e(Xe,lA),e(lA,Zwe),e(Zwe,DKr),e(lA,GKr),e(lA,Qoe),e(Qoe,OKr),e(lA,VKr),e(Xe,XKr),e(Xe,iA),e(iA,eAe),e(eAe,zKr),e(iA,QKr),e(iA,Woe),e(Woe,WKr),e(iA,HKr),e(Xe,UKr),e(Xe,dA),e(dA,oAe),e(oAe,JKr),e(dA,YKr),e(dA,Hoe),e(Hoe,KKr),e(dA,ZKr),e(Xe,eZr),e(Xe,cA),e(cA,rAe),e(rAe,oZr),e(cA,rZr),e(cA,Uoe),e(Uoe,tZr),e(cA,aZr),e(Xe,nZr),e(Xe,fA),e(fA,tAe),e(tAe,sZr),e(fA,lZr),e(fA,Joe),e(Joe,iZr),e(fA,dZr),e(Jr,cZr),M(mA,Jr,null),b(f,gze,u),b(f,Ff,u),e(Ff,gA),e(gA,aAe),M(V$,aAe,null),e(Ff,fZr),e(Ff,nAe),e(nAe,mZr),b(f,hze,u),b(f,Er,u),M(X$,Er,null),e(Er,gZr),e(Er,Tf),e(Tf,hZr),e(Tf,Yoe),e(Yoe,pZr),e(Tf,_Zr),e(Tf,Koe),e(Koe,uZr),e(Tf,bZr),e(Er,vZr),e(Er,z$),e(z$,FZr),e(z$,sAe),e(sAe,TZr),e(z$,MZr),e(Er,EZr),e(Er,ea),M(Q$,ea,null),e(ea,CZr),e(ea,lAe),e(lAe,wZr),e(ea,AZr),e(ea,Mf),e(Mf,LZr),e(Mf,iAe),e(iAe,yZr),e(Mf,xZr),e(Mf,Zoe),e(Zoe,$Zr),e(Mf,kZr),e(ea,SZr),M(hA,ea,null),e(Er,RZr),e(Er,Yr),M(W$,Yr,null),e(Yr,PZr),e(Yr,dAe),e(dAe,BZr),e(Yr,IZr),e(Yr,xn),e(xn,NZr),e(xn,cAe),e(cAe,qZr),e(xn,jZr),e(xn,fAe),e(fAe,DZr),e(xn,GZr),e(xn,mAe),e(mAe,OZr),e(xn,VZr),e(Yr,XZr),e(Yr,gAe),e(gAe,pA),e(pA,hAe),e(hAe,zZr),e(pA,QZr),e(pA,ere),e(ere,WZr),e(pA,HZr),e(Yr,UZr),M(_A,Yr,null),b(f,pze,u),b(f,Ef,u),e(Ef,uA),e(uA,pAe),M(H$,pAe,null),e(Ef,JZr),e(Ef,_Ae),e(_Ae,YZr),b(f,_ze,u),b(f,Cr,u),M(U$,Cr,null),e(Cr,KZr),e(Cr,Cf),e(Cf,ZZr),e(Cf,ore),e(ore,eet),e(Cf,oet),e(Cf,rre),e(rre,ret),e(Cf,tet),e(Cr,aet),e(Cr,J$),e(J$,net),e(J$,uAe),e(uAe,set),e(J$,iet),e(Cr,det),e(Cr,oa),M(Y$,oa,null),e(oa,cet),e(oa,bAe),e(bAe,fet),e(oa,met),e(oa,wf),e(wf,get),e(wf,vAe),e(vAe,het),e(wf,pet),e(wf,tre),e(tre,_et),e(wf,uet),e(oa,bet),M(bA,oa,null),e(Cr,vet),e(Cr,Kr),M(K$,Kr,null),e(Kr,Fet),e(Kr,FAe),e(FAe,Tet),e(Kr,Met),e(Kr,$n),e($n,Eet),e($n,TAe),e(TAe,Cet),e($n,wet),e($n,MAe),e(MAe,Aet),e($n,Let),e($n,EAe),e(EAe,yet),e($n,xet),e(Kr,$et),e(Kr,Z$),e(Z$,vA),e(vA,CAe),e(CAe,ket),e(vA,Set),e(vA,are),e(are,Ret),e(vA,Pet),e(Z$,Bet),e(Z$,FA),e(FA,wAe),e(wAe,Iet),e(FA,Net),e(FA,nre),e(nre,qet),e(FA,jet),e(Kr,Det),M(TA,Kr,null),b(f,uze,u),b(f,Af,u),e(Af,MA),e(MA,AAe),M(ek,AAe,null),e(Af,Get),e(Af,LAe),e(LAe,Oet),b(f,bze,u),b(f,wr,u),M(ok,wr,null),e(wr,Vet),e(wr,Lf),e(Lf,Xet),e(Lf,sre),e(sre,zet),e(Lf,Qet),e(Lf,lre),e(lre,Wet),e(Lf,Het),e(wr,Uet),e(wr,rk),e(rk,Jet),e(rk,yAe),e(yAe,Yet),e(rk,Ket),e(wr,Zet),e(wr,ra),M(tk,ra,null),e(ra,eot),e(ra,xAe),e(xAe,oot),e(ra,rot),e(ra,yf),e(yf,tot),e(yf,$Ae),e($Ae,aot),e(yf,not),e(yf,ire),e(ire,sot),e(yf,lot),e(ra,iot),M(EA,ra,null),e(wr,dot),e(wr,Zr),M(ak,Zr,null),e(Zr,cot),e(Zr,kAe),e(kAe,fot),e(Zr,mot),e(Zr,kn),e(kn,got),e(kn,SAe),e(SAe,hot),e(kn,pot),e(kn,RAe),e(RAe,_ot),e(kn,uot),e(kn,PAe),e(PAe,bot),e(kn,vot),e(Zr,Fot),e(Zr,BAe),e(BAe,CA),e(CA,IAe),e(IAe,Tot),e(CA,Mot),e(CA,dre),e(dre,Eot),e(CA,Cot),e(Zr,wot),M(wA,Zr,null),vze=!0},p(f,[u]){const nk={};u&2&&(nk.$$scope={dirty:u,ctx:f}),Nf.$set(nk);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),Hg.$set(NAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),$h.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),mp.$set(jAe);const sk={};u&2&&(sk.$$scope={dirty:u,ctx:f}),gp.$set(sk);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),Pp.$set(DAe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),Bp.$set(Sn);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),qp.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),Gu.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),Vu.$set(VAe);const lk={};u&2&&(lk.$$scope={dirty:u,ctx:f}),I1.$set(lk);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),q1.$set(XAe);const ik={};u&2&&(ik.$$scope={dirty:u,ctx:f}),A7.$set(ik);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),y7.$set(zAe);const dk={};u&2&&(dk.$$scope={dirty:u,ctx:f}),h4.$set(dk);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),_4.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),I4.$set(WAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),q4.$set(HAe);const xf={};u&2&&(xf.$$scope={dirty:u,ctx:f}),I2.$set(xf);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),q2.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),_b.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),bb.$set(YAe);const ck={};u&2&&(ck.$$scope={dirty:u,ctx:f}),Ab.$set(ck);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),yb.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),mv.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),hv.$set(e6e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),a3.$set(tt);const fk={};u&2&&(fk.$$scope={dirty:u,ctx:f}),s3.$set(fk);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),d3.$set(o6e);const mk={};u&2&&(mk.$$scope={dirty:u,ctx:f}),f3.$set(mk);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),w3.$set(r6e);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),L3.$set(at);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),$3.$set(t6e);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),S3.$set($f);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),B3.$set(a6e);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),N3.$set(n6e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),H3.$set(L);const AA={};u&2&&(AA.$$scope={dirty:u,ctx:f}),J3.$set(AA);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),tF.$set(s6e);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),nF.$set(l6e);const LA={};u&2&&(LA.$$scope={dirty:u,ctx:f}),uF.$set(LA);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),vF.$set(i6e);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),EF.$set(d6e);const yA={};u&2&&(yA.$$scope={dirty:u,ctx:f}),wF.$set(yA);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),SF.$set(c6e);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),PF.$set(f6e);const xA={};u&2&&(xA.$$scope={dirty:u,ctx:f}),jF.$set(xA);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),GF.$set(m6e);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),zF.$set(g6e);const $A={};u&2&&($A.$$scope={dirty:u,ctx:f}),WF.$set($A);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),JF.$set(h6e);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),KF.$set(p6e);const kA={};u&2&&(kA.$$scope={dirty:u,ctx:f}),aT.$set(kA);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),sT.$set(_6e);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),dT.$set(u6e);const SA={};u&2&&(SA.$$scope={dirty:u,ctx:f}),fT.$set(SA);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),nM.$set(b6e);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),lM.$set(v6e);const RA={};u&2&&(RA.$$scope={dirty:u,ctx:f}),kM.$set(RA);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),RM.$set(F6e);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),WM.$set(T6e);const PA={};u&2&&(PA.$$scope={dirty:u,ctx:f}),UM.$set(PA);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),oE.$set(M6e);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),tE.$set(E6e);const BA={};u&2&&(BA.$$scope={dirty:u,ctx:f}),CE.$set(BA);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),AE.$set(C6e);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),NE.$set(w6e);const IA={};u&2&&(IA.$$scope={dirty:u,ctx:f}),jE.$set(IA);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),mC.$set(A6e);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),hC.$set(L6e);const NA={};u&2&&(NA.$$scope={dirty:u,ctx:f}),SC.$set(NA);const y6e={};u&2&&(y6e.$$scope={dirty:u,ctx:f}),PC.$set(y6e);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),NC.$set(x6e);const qA={};u&2&&(qA.$$scope={dirty:u,ctx:f}),jC.$set(qA);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),GC.$set($6e);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),VC.$set(k6e);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),c5.$set(jA);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),m5.$set(S6e);const R6e={};u&2&&(R6e.$$scope={dirty:u,ctx:f}),R5.$set(R6e);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),B5.$set(DA);const P6e={};u&2&&(P6e.$$scope={dirty:u,ctx:f}),N5.$set(P6e);const B6e={};u&2&&(B6e.$$scope={dirty:u,ctx:f}),j5.$set(B6e);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),G5.$set(GA);const I6e={};u&2&&(I6e.$$scope={dirty:u,ctx:f}),V5.$set(I6e);const N6e={};u&2&&(N6e.$$scope={dirty:u,ctx:f}),u0.$set(N6e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),v0.$set(OA);const q6e={};u&2&&(q6e.$$scope={dirty:u,ctx:f}),$0.$set(q6e);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:f}),S0.$set(j6e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),Q0.$set(VA);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:f}),H0.$set(D6e);const G6e={};u&2&&(G6e.$$scope={dirty:u,ctx:f}),nw.$set(G6e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),lw.$set(XA);const O6e={};u&2&&(O6e.$$scope={dirty:u,ctx:f}),bw.$set(O6e);const V6e={};u&2&&(V6e.$$scope={dirty:u,ctx:f}),Fw.$set(V6e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),kw.$set(zA);const X6e={};u&2&&(X6e.$$scope={dirty:u,ctx:f}),Rw.$set(X6e);const z6e={};u&2&&(z6e.$$scope={dirty:u,ctx:f}),Xw.$set(z6e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),Qw.$set(QA);const Q6e={};u&2&&(Q6e.$$scope={dirty:u,ctx:f}),oA.$set(Q6e);const W6e={};u&2&&(W6e.$$scope={dirty:u,ctx:f}),tA.$set(W6e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),mA.$set(WA);const H6e={};u&2&&(H6e.$$scope={dirty:u,ctx:f}),hA.$set(H6e);const U6e={};u&2&&(U6e.$$scope={dirty:u,ctx:f}),_A.$set(U6e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),bA.$set(HA);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:f}),TA.$set(J6e);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:f}),EA.$set(Y6e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),wA.$set(UA)},i(f){vze||(E(d.$$.fragment,f),E($a.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(Nf.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(oy.$$.fragment,f),E(Hg.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ly.$$.fragment,f),E($h.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(gy.$$.fragment,f),E(mp.$$.fragment,f),E(gp.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(Pp.$$.fragment,f),E(Bp.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(qp.$$.fragment,f),E(wy.$$.fragment,f),E(Gu.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(Vu.$$.fragment,f),E($y.$$.fragment,f),E(I1.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(q1.$$.fragment,f),E(By.$$.fragment,f),E(A7.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(y7.$$.fragment,f),E(Dy.$$.fragment,f),E(h4.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(_4.$$.fragment,f),E(zy.$$.fragment,f),E(I4.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(q4.$$.fragment,f),E(Jy.$$.fragment,f),E(I2.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(q2.$$.fragment,f),E(o8.$$.fragment,f),E(_b.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(bb.$$.fragment,f),E(s8.$$.fragment,f),E(Ab.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(yb.$$.fragment,f),E(f8.$$.fragment,f),E(mv.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(hv.$$.fragment,f),E(_8.$$.fragment,f),E(a3.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(s3.$$.fragment,f),E(T8.$$.fragment,f),E(d3.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(f3.$$.fragment,f),E(A8.$$.fragment,f),E(w3.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(L3.$$.fragment,f),E(k8.$$.fragment,f),E($3.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(S3.$$.fragment,f),E(I8.$$.fragment,f),E(B3.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(N3.$$.fragment,f),E(G8.$$.fragment,f),E(H3.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(J3.$$.fragment,f),E(Q8.$$.fragment,f),E(tF.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(nF.$$.fragment,f),E(Y8.$$.fragment,f),E(uF.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(vF.$$.fragment,f),E(r9.$$.fragment,f),E(EF.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(wF.$$.fragment,f),E(i9.$$.fragment,f),E(SF.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(PF.$$.fragment,f),E(g9.$$.fragment,f),E(jF.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(GF.$$.fragment,f),E(b9.$$.fragment,f),E(zF.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(WF.$$.fragment,f),E(C9.$$.fragment,f),E(JF.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(KF.$$.fragment,f),E(x9.$$.fragment,f),E(aT.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(sT.$$.fragment,f),E(P9.$$.fragment,f),E(dT.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(fT.$$.fragment,f),E(j9.$$.fragment,f),E(nM.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(lM.$$.fragment,f),E(X9.$$.fragment,f),E(kM.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(RM.$$.fragment,f),E(U9.$$.fragment,f),E(WM.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(UM.$$.fragment,f),E(ex.$$.fragment,f),E(oE.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(tE.$$.fragment,f),E(nx.$$.fragment,f),E(CE.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(AE.$$.fragment,f),E(cx.$$.fragment,f),E(NE.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(jE.$$.fragment,f),E(px.$$.fragment,f),E(mC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(hC.$$.fragment,f),E(Fx.$$.fragment,f),E(SC.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(PC.$$.fragment,f),E(wx.$$.fragment,f),E(NC.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(jC.$$.fragment,f),E(kx.$$.fragment,f),E(GC.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(VC.$$.fragment,f),E(Ix.$$.fragment,f),E(c5.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(m5.$$.fragment,f),E(Gx.$$.fragment,f),E(R5.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(B5.$$.fragment,f),E(Qx.$$.fragment,f),E(N5.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(j5.$$.fragment,f),E(Yx.$$.fragment,f),E(G5.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(V5.$$.fragment,f),E(r$.$$.fragment,f),E(u0.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(v0.$$.fragment,f),E(l$.$$.fragment,f),E($0.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(S0.$$.fragment,f),E(m$.$$.fragment,f),E(Q0.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(H0.$$.fragment,f),E(u$.$$.fragment,f),E(nw.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(lw.$$.fragment,f),E(M$.$$.fragment,f),E(bw.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(Fw.$$.fragment,f),E(L$.$$.fragment,f),E(kw.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(Rw.$$.fragment,f),E(S$.$$.fragment,f),E(Xw.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(Qw.$$.fragment,f),E(N$.$$.fragment,f),E(oA.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(tA.$$.fragment,f),E(O$.$$.fragment,f),E(mA.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(hA.$$.fragment,f),E(W$.$$.fragment,f),E(_A.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(bA.$$.fragment,f),E(K$.$$.fragment,f),E(TA.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(EA.$$.fragment,f),E(ak.$$.fragment,f),E(wA.$$.fragment,f),vze=!0)},o(f){C(d.$$.fragment,f),C($a.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(Nf.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(oy.$$.fragment,f),C(Hg.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ly.$$.fragment,f),C($h.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(gy.$$.fragment,f),C(mp.$$.fragment,f),C(gp.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(Pp.$$.fragment,f),C(Bp.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(qp.$$.fragment,f),C(wy.$$.fragment,f),C(Gu.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(Vu.$$.fragment,f),C($y.$$.fragment,f),C(I1.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(q1.$$.fragment,f),C(By.$$.fragment,f),C(A7.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(y7.$$.fragment,f),C(Dy.$$.fragment,f),C(h4.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(_4.$$.fragment,f),C(zy.$$.fragment,f),C(I4.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(q4.$$.fragment,f),C(Jy.$$.fragment,f),C(I2.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(q2.$$.fragment,f),C(o8.$$.fragment,f),C(_b.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(bb.$$.fragment,f),C(s8.$$.fragment,f),C(Ab.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(yb.$$.fragment,f),C(f8.$$.fragment,f),C(mv.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(hv.$$.fragment,f),C(_8.$$.fragment,f),C(a3.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(s3.$$.fragment,f),C(T8.$$.fragment,f),C(d3.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(f3.$$.fragment,f),C(A8.$$.fragment,f),C(w3.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(L3.$$.fragment,f),C(k8.$$.fragment,f),C($3.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(S3.$$.fragment,f),C(I8.$$.fragment,f),C(B3.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(N3.$$.fragment,f),C(G8.$$.fragment,f),C(H3.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(J3.$$.fragment,f),C(Q8.$$.fragment,f),C(tF.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(nF.$$.fragment,f),C(Y8.$$.fragment,f),C(uF.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(vF.$$.fragment,f),C(r9.$$.fragment,f),C(EF.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(wF.$$.fragment,f),C(i9.$$.fragment,f),C(SF.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(PF.$$.fragment,f),C(g9.$$.fragment,f),C(jF.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(GF.$$.fragment,f),C(b9.$$.fragment,f),C(zF.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(WF.$$.fragment,f),C(C9.$$.fragment,f),C(JF.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(KF.$$.fragment,f),C(x9.$$.fragment,f),C(aT.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(sT.$$.fragment,f),C(P9.$$.fragment,f),C(dT.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(fT.$$.fragment,f),C(j9.$$.fragment,f),C(nM.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(lM.$$.fragment,f),C(X9.$$.fragment,f),C(kM.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(RM.$$.fragment,f),C(U9.$$.fragment,f),C(WM.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(UM.$$.fragment,f),C(ex.$$.fragment,f),C(oE.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(tE.$$.fragment,f),C(nx.$$.fragment,f),C(CE.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(AE.$$.fragment,f),C(cx.$$.fragment,f),C(NE.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(jE.$$.fragment,f),C(px.$$.fragment,f),C(mC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(hC.$$.fragment,f),C(Fx.$$.fragment,f),C(SC.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(PC.$$.fragment,f),C(wx.$$.fragment,f),C(NC.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(jC.$$.fragment,f),C(kx.$$.fragment,f),C(GC.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(VC.$$.fragment,f),C(Ix.$$.fragment,f),C(c5.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(m5.$$.fragment,f),C(Gx.$$.fragment,f),C(R5.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(B5.$$.fragment,f),C(Qx.$$.fragment,f),C(N5.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(j5.$$.fragment,f),C(Yx.$$.fragment,f),C(G5.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(V5.$$.fragment,f),C(r$.$$.fragment,f),C(u0.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(v0.$$.fragment,f),C(l$.$$.fragment,f),C($0.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(S0.$$.fragment,f),C(m$.$$.fragment,f),C(Q0.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(H0.$$.fragment,f),C(u$.$$.fragment,f),C(nw.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(lw.$$.fragment,f),C(M$.$$.fragment,f),C(bw.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(Fw.$$.fragment,f),C(L$.$$.fragment,f),C(kw.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(Rw.$$.fragment,f),C(S$.$$.fragment,f),C(Xw.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(Qw.$$.fragment,f),C(N$.$$.fragment,f),C(oA.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(tA.$$.fragment,f),C(O$.$$.fragment,f),C(mA.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(hA.$$.fragment,f),C(W$.$$.fragment,f),C(_A.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(bA.$$.fragment,f),C(K$.$$.fragment,f),C(TA.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(EA.$$.fragment,f),C(ak.$$.fragment,f),C(wA.$$.fragment,f),vze=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Sf),f&&t(nt),f&&t(Oe),f&&t(Qe),f&&t(Pf),w($a,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(ka),f&&t(hVe),f&&t(Si),w(UL),f&&t(pVe),f&&t(Nn),f&&t(_Ve),w(JL,f),f&&t(uVe),f&&t($S),f&&t(bVe),w(Nf,f),f&&t(vVe),f&&t(Ri),w(YL),f&&t(FVe),f&&t(wo),w(KL),w(oy),w(Hg),w(ry),f&&t(TVe),f&&t(Bi),w(ty),f&&t(MVe),f&&t(Ao),w(ay),w(ly),w($h),w(iy),f&&t(EVe),f&&t(Ii),w(dy),f&&t(CVe),f&&t(Lo),w(cy),w(gy),w(mp),w(gp),w(hy),f&&t(wVe),f&&t(Ni),w(py),f&&t(AVe),f&&t(yo),w(_y),w(vy),w(Pp),w(Bp),w(Fy),f&&t(LVe),f&&t(ji),w(Ty),f&&t(yVe),f&&t(xo),w(My),w(Cy),w(qp),w(wy),w(Gu),f&&t(xVe),f&&t(Oi),w(Ay),f&&t($Ve),f&&t($o),w(Ly),w(xy),w(Vu),w($y),w(I1),f&&t(kVe),f&&t(zi),w(ky),f&&t(SVe),f&&t(ko),w(Sy),w(Py),w(q1),w(By),w(A7),f&&t(RVe),f&&t(Hi),w(Iy),f&&t(PVe),f&&t(So),w(Ny),w(jy),w(y7),w(Dy),w(h4),f&&t(BVe),f&&t(Yi),w(Gy),f&&t(IVe),f&&t(Ro),w(Oy),w(Xy),w(_4),w(zy),w(I4),f&&t(NVe),f&&t(ed),w(Qy),f&&t(qVe),f&&t(Po),w(Wy),w(Uy),w(q4),w(Jy),w(I2),f&&t(jVe),f&&t(td),w(Yy),f&&t(DVe),f&&t(Bo),w(Ky),w(e8),w(q2),w(o8),w(_b),f&&t(GVe),f&&t(sd),w(r8),f&&t(OVe),f&&t(Io),w(t8),w(n8),w(bb),w(s8),w(Ab),f&&t(VVe),f&&t(dd),w(l8),f&&t(XVe),f&&t(qo),w(i8),w(c8),w(yb),w(f8),w(mv),f&&t(zVe),f&&t(md),w(m8),f&&t(QVe),f&&t(jo),w(g8),w(p8),w(hv),w(_8),w(a3),f&&t(WVe),f&&t(pd),w(u8),f&&t(HVe),f&&t(Do),w(b8),w(F8),w(s3),w(T8),w(d3),f&&t(UVe),f&&t(bd),w(M8),f&&t(JVe),f&&t(Go),w(E8),w(w8),w(f3),w(A8),w(w3),f&&t(YVe),f&&t(Td),w(L8),f&&t(KVe),f&&t(Oo),w(y8),w($8),w(L3),w(k8),w($3),f&&t(ZVe),f&&t(Cd),w(S8),f&&t(eXe),f&&t(Vo),w(R8),w(B8),w(S3),w(I8),w(B3),f&&t(oXe),f&&t(Ld),w(N8),f&&t(rXe),f&&t(Xo),w(q8),w(D8),w(N3),w(G8),w(H3),f&&t(tXe),f&&t($d),w(O8),f&&t(aXe),f&&t(zo),w(V8),w(z8),w(J3),w(Q8),w(tF),f&&t(nXe),f&&t(Rd),w(W8),f&&t(sXe),f&&t(Qo),w(H8),w(J8),w(nF),w(Y8),w(uF),f&&t(lXe),f&&t(Id),w(K8),f&&t(iXe),f&&t(Wo),w(Z8),w(o9),w(vF),w(r9),w(EF),f&&t(dXe),f&&t(jd),w(a9),f&&t(cXe),f&&t(Ho),w(n9),w(l9),w(wF),w(i9),w(SF),f&&t(fXe),f&&t(Od),w(d9),f&&t(mXe),f&&t(Uo),w(c9),w(m9),w(PF),w(g9),w(jF),f&&t(gXe),f&&t(Qd),w(h9),f&&t(hXe),f&&t(Jo),w(p9),w(u9),w(GF),w(b9),w(zF),f&&t(pXe),f&&t(Ud),w(F9),f&&t(_Xe),f&&t(Yo),w(T9),w(E9),w(WF),w(C9),w(JF),f&&t(uXe),f&&t(Kd),w(w9),f&&t(bXe),f&&t(Ko),w(A9),w(y9),w(KF),w(x9),w(aT),f&&t(vXe),f&&t(oc),w($9),f&&t(FXe),f&&t(Zo),w(k9),w(R9),w(sT),w(P9),w(dT),f&&t(TXe),f&&t(ac),w(B9),f&&t(MXe),f&&t(er),w(I9),w(q9),w(fT),w(j9),w(nM),f&&t(EXe),f&&t(lc),w(D9),f&&t(CXe),f&&t(or),w(G9),w(V9),w(lM),w(X9),w(kM),f&&t(wXe),f&&t(cc),w(z9),f&&t(AXe),f&&t(rr),w(Q9),w(H9),w(RM),w(U9),w(WM),f&&t(LXe),f&&t(gc),w(J9),f&&t(yXe),f&&t(tr),w(Y9),w(Z9),w(UM),w(ex),w(oE),f&&t(xXe),f&&t(_c),w(ox),f&&t($Xe),f&&t(ar),w(rx),w(ax),w(tE),w(nx),w(CE),f&&t(kXe),f&&t(vc),w(sx),f&&t(SXe),f&&t(nr),w(lx),w(dx),w(AE),w(cx),w(NE),f&&t(RXe),f&&t(Mc),w(fx),f&&t(PXe),f&&t(sr),w(mx),w(hx),w(jE),w(px),w(mC),f&&t(BXe),f&&t(wc),w(_x),f&&t(IXe),f&&t(lr),w(ux),w(vx),w(hC),w(Fx),w(SC),f&&t(NXe),f&&t(yc),w(Tx),f&&t(qXe),f&&t(ir),w(Mx),w(Cx),w(PC),w(wx),w(NC),f&&t(jXe),f&&t(kc),w(Lx),f&&t(DXe),f&&t(dr),w(yx),w($x),w(jC),w(kx),w(GC),f&&t(GXe),f&&t(Pc),w(Sx),f&&t(OXe),f&&t(cr),w(Rx),w(Bx),w(VC),w(Ix),w(c5),f&&t(VXe),f&&t(Nc),w(Nx),f&&t(XXe),f&&t(fr),w(qx),w(Dx),w(m5),w(Gx),w(R5),f&&t(zXe),f&&t(Dc),w(Ox),f&&t(QXe),f&&t(mr),w(Vx),w(zx),w(B5),w(Qx),w(N5),f&&t(WXe),f&&t(Vc),w(Wx),f&&t(HXe),f&&t(gr),w(Hx),w(Jx),w(j5),w(Yx),w(G5),f&&t(UXe),f&&t(Qc),w(Kx),f&&t(JXe),f&&t(hr),w(Zx),w(o$),w(V5),w(r$),w(u0),f&&t(YXe),f&&t(Uc),w(t$),f&&t(KXe),f&&t(pr),w(a$),w(s$),w(v0),w(l$),w($0),f&&t(ZXe),f&&t(Kc),w(i$),f&&t(eze),f&&t(_r),w(d$),w(f$),w(S0),w(m$),w(Q0),f&&t(oze),f&&t(of),w(g$),f&&t(rze),f&&t(ur),w(h$),w(_$),w(H0),w(u$),w(nw),f&&t(tze),f&&t(af),w(b$),f&&t(aze),f&&t(br),w(v$),w(T$),w(lw),w(M$),w(bw),f&&t(nze),f&&t(lf),w(E$),f&&t(sze),f&&t(vr),w(C$),w(A$),w(Fw),w(L$),w(kw),f&&t(lze),f&&t(ff),w(y$),f&&t(ize),f&&t(Fr),w(x$),w(k$),w(Rw),w(S$),w(Xw),f&&t(dze),f&&t(hf),w(R$),f&&t(cze),f&&t(Tr),w(P$),w(I$),w(Qw),w(N$),w(oA),f&&t(fze),f&&t(uf),w(q$),f&&t(mze),f&&t(Mr),w(j$),w(G$),w(tA),w(O$),w(mA),f&&t(gze),f&&t(Ff),w(V$),f&&t(hze),f&&t(Er),w(X$),w(Q$),w(hA),w(W$),w(_A),f&&t(pze),f&&t(Ef),w(H$),f&&t(_ze),f&&t(Cr),w(U$),w(Y$),w(bA),w(K$),w(TA),f&&t(uze),f&&t(Af),w(ek),f&&t(bze),f&&t(wr),w(ok),w(tk),w(EA),w(ak),w(wA)}}}const DQt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function GQt($){return jXt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class HQt extends BXt{constructor(g){super();IXt(this,g,GQt,jQt,NXt,{})}}export{HQt as default,DQt as metadata};
