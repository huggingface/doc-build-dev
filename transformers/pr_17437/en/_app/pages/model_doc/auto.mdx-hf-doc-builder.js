import{S as bOt,i as vOt,s as FOt,e as a,k as l,w as F,t as o,M as TOt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as MOt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as kZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function EOt($){let g,v,p,m,_,d,h,Eo,Ei,$f,at,Ci,wi,PL,kf,Oe,Qe,Ai,Rn,BL,Pn,Bn,IL,Li,In,NL,yi,Sf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ei=a("code"),$f=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ci=a("code"),wi=o('"new-model"'),PL=o(")."),kf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ai=a("code"),Rn=o("NewModel"),BL=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),IL=o(`, make sure its
`),Li=a("code"),In=o("config_class"),NL=o(` attribute is set to the same class you use when registering the model (here
`),yi=a("code"),Sf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var gS=s(p);m=r(gS,"NewModelConfig"),gS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var xi=s(d);h=r(xi,"PretrainedConfig"),xi.forEach(t),Eo=r(Ae,`, make sure its
`),Ei=n(Ae,"CODE",{});var hS=s(Ei);$f=r(hS,"model_type"),hS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ci=n(Ae,"CODE",{});var pS=s(Ci);wi=r(pS,'"new-model"'),pS.forEach(t),PL=r(Ae,")."),Ae.forEach(t),kf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Ai=n(Co,"CODE",{});var $a=s(Ai);Rn=r($a,"NewModel"),$a.forEach(t),BL=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var _S=s(Pn);Bn=r(_S,"PreTrainedModel"),_S.forEach(t),IL=r(Co,`, make sure its
`),Li=n(Co,"CODE",{});var Rf=s(Li);In=r(Rf,"config_class"),Rf.forEach(t),NL=r(Co,` attribute is set to the same class you use when registering the model (here
`),yi=n(Co,"CODE",{});var uS=s(yi);Sf=r(uS,"NewModelConfig"),uS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ei),e(Ei,$f),e(g,at),e(g,Ci),e(Ci,wi),e(g,PL),b(We,kf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Ai),e(Ai,Rn),e(Oe,BL),e(Oe,Pn),e(Pn,Bn),e(Oe,IL),e(Oe,Li),e(Li,In),e(Oe,NL),e(Oe,yi),e(yi,Sf),e(Oe,xa)},d(We){We&&t(g),We&&t(kf),We&&t(Oe)}}}function COt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function LOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function xOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MXt($){let g,v,p,m,_,d,h,Eo,Ei,$f,at,Ci,wi,PL,kf,Oe,Qe,Ai,Rn,BL,Pn,Bn,IL,Li,In,NL,yi,Sf,xa,We,Ae,gS,xi,hS,pS,Co,$a,_S,Rf,uS,qQe,EOe,$i,Pf,Pte,qL,jQe,Bte,DQe,COe,Nn,GQe,Ite,OQe,VQe,Nte,XQe,zQe,wOe,jL,AOe,bS,QQe,LOe,Bf,yOe,ki,If,qte,DL,WQe,jte,HQe,xOe,wo,GL,UQe,OL,JQe,vS,YQe,KQe,ZQe,VL,eWe,Dte,oWe,rWe,tWe,Ar,XL,aWe,Gte,nWe,sWe,Si,lWe,Ote,iWe,dWe,Vte,cWe,fWe,mWe,A,Nf,Xte,gWe,hWe,FS,pWe,_We,uWe,qf,zte,bWe,vWe,TS,FWe,TWe,MWe,jf,Qte,EWe,CWe,MS,wWe,AWe,LWe,Df,Wte,yWe,xWe,ES,$We,kWe,SWe,Gf,Hte,RWe,PWe,CS,BWe,IWe,NWe,Of,Ute,qWe,jWe,wS,DWe,GWe,OWe,Vf,Jte,VWe,XWe,AS,zWe,QWe,WWe,Xf,Yte,HWe,UWe,LS,JWe,YWe,KWe,zf,Kte,ZWe,eHe,yS,oHe,rHe,tHe,Qf,Zte,aHe,nHe,xS,sHe,lHe,iHe,Wf,eae,dHe,cHe,$S,fHe,mHe,gHe,Hf,oae,hHe,pHe,kS,_He,uHe,bHe,Uf,rae,vHe,FHe,SS,THe,MHe,EHe,Jf,tae,CHe,wHe,RS,AHe,LHe,yHe,Yf,aae,xHe,$He,PS,kHe,SHe,RHe,Kf,nae,PHe,BHe,BS,IHe,NHe,qHe,Zf,sae,jHe,DHe,IS,GHe,OHe,VHe,em,lae,XHe,zHe,NS,QHe,WHe,HHe,om,iae,UHe,JHe,qS,YHe,KHe,ZHe,rm,dae,eUe,oUe,jS,rUe,tUe,aUe,tm,cae,nUe,sUe,DS,lUe,iUe,dUe,am,fae,cUe,fUe,GS,mUe,gUe,hUe,nm,mae,pUe,_Ue,OS,uUe,bUe,vUe,sm,gae,FUe,TUe,VS,MUe,EUe,CUe,lm,hae,wUe,AUe,XS,LUe,yUe,xUe,im,pae,$Ue,kUe,zS,SUe,RUe,PUe,dm,_ae,BUe,IUe,QS,NUe,qUe,jUe,cm,uae,DUe,GUe,WS,OUe,VUe,XUe,fm,bae,zUe,QUe,HS,WUe,HUe,UUe,mm,vae,JUe,YUe,US,KUe,ZUe,eJe,gm,Fae,oJe,rJe,JS,tJe,aJe,nJe,hm,Tae,sJe,lJe,YS,iJe,dJe,cJe,pm,Mae,fJe,mJe,KS,gJe,hJe,pJe,_m,Eae,_Je,uJe,ZS,bJe,vJe,FJe,um,Cae,TJe,MJe,eR,EJe,CJe,wJe,bm,wae,AJe,LJe,oR,yJe,xJe,$Je,vm,Aae,kJe,SJe,rR,RJe,PJe,BJe,Fm,Lae,IJe,NJe,tR,qJe,jJe,DJe,Tm,yae,GJe,OJe,aR,VJe,XJe,zJe,Mm,xae,QJe,WJe,nR,HJe,UJe,JJe,Em,$ae,YJe,KJe,sR,ZJe,eYe,oYe,Cm,kae,rYe,tYe,lR,aYe,nYe,sYe,wm,Sae,lYe,iYe,iR,dYe,cYe,fYe,Am,Rae,mYe,gYe,dR,hYe,pYe,_Ye,Lm,Pae,uYe,bYe,cR,vYe,FYe,TYe,ym,Bae,MYe,EYe,fR,CYe,wYe,AYe,xm,Iae,LYe,yYe,mR,xYe,$Ye,kYe,$m,Nae,SYe,RYe,gR,PYe,BYe,IYe,km,qae,NYe,qYe,hR,jYe,DYe,GYe,Sm,jae,OYe,VYe,pR,XYe,zYe,QYe,Rm,Dae,WYe,HYe,_R,UYe,JYe,YYe,Pm,Gae,KYe,ZYe,uR,eKe,oKe,rKe,Bm,Oae,tKe,aKe,bR,nKe,sKe,lKe,Im,Vae,iKe,dKe,vR,cKe,fKe,mKe,Nm,Xae,gKe,hKe,FR,pKe,_Ke,uKe,qm,zae,bKe,vKe,TR,FKe,TKe,MKe,jm,Qae,EKe,CKe,MR,wKe,AKe,LKe,Dm,Wae,yKe,xKe,ER,$Ke,kKe,SKe,Gm,Hae,RKe,PKe,CR,BKe,IKe,NKe,Om,Uae,qKe,jKe,wR,DKe,GKe,OKe,Vm,Jae,VKe,XKe,AR,zKe,QKe,WKe,Xm,Yae,HKe,UKe,LR,JKe,YKe,KKe,zm,Kae,ZKe,eZe,yR,oZe,rZe,tZe,Qm,Zae,aZe,nZe,xR,sZe,lZe,iZe,Wm,ene,dZe,cZe,$R,fZe,mZe,gZe,Hm,one,hZe,pZe,kR,_Ze,uZe,bZe,Um,rne,vZe,FZe,SR,TZe,MZe,EZe,Jm,tne,CZe,wZe,RR,AZe,LZe,yZe,Ym,ane,xZe,$Ze,PR,kZe,SZe,RZe,Km,nne,PZe,BZe,BR,IZe,NZe,qZe,Zm,sne,jZe,DZe,IR,GZe,OZe,VZe,eg,lne,XZe,zZe,NR,QZe,WZe,HZe,og,ine,UZe,JZe,qR,YZe,KZe,ZZe,rg,dne,eeo,oeo,jR,reo,teo,aeo,tg,cne,neo,seo,DR,leo,ieo,deo,ag,fne,ceo,feo,GR,meo,geo,heo,ng,mne,peo,_eo,OR,ueo,beo,veo,sg,gne,Feo,Teo,VR,Meo,Eeo,Ceo,lg,hne,weo,Aeo,XR,Leo,yeo,xeo,ig,pne,$eo,keo,zR,Seo,Reo,Peo,dg,_ne,Beo,Ieo,QR,Neo,qeo,jeo,cg,une,Deo,Geo,WR,Oeo,Veo,Xeo,fg,bne,zeo,Qeo,HR,Weo,Heo,Ueo,mg,vne,Jeo,Yeo,UR,Keo,Zeo,eoo,gg,Fne,ooo,roo,JR,too,aoo,noo,hg,Tne,soo,loo,YR,ioo,doo,coo,pg,Mne,foo,moo,KR,goo,hoo,poo,_g,Ene,_oo,uoo,ZR,boo,voo,Foo,ug,Cne,Too,Moo,eP,Eoo,Coo,woo,bg,wne,Aoo,Loo,oP,yoo,xoo,$oo,vg,Ane,koo,Soo,rP,Roo,Poo,Boo,Fg,Lne,Ioo,Noo,tP,qoo,joo,Doo,Tg,yne,Goo,Ooo,aP,Voo,Xoo,zoo,Mg,xne,Qoo,Woo,nP,Hoo,Uoo,Joo,Eg,$ne,Yoo,Koo,sP,Zoo,ero,oro,Cg,kne,rro,tro,lP,aro,nro,sro,wg,Sne,lro,iro,iP,dro,cro,fro,Ag,Rne,mro,gro,dP,hro,pro,_ro,Lg,Pne,uro,bro,cP,vro,Fro,Tro,yg,Bne,Mro,Ero,fP,Cro,wro,Aro,xg,Ine,Lro,yro,mP,xro,$ro,kro,$g,Nne,Sro,Rro,gP,Pro,Bro,Iro,kg,qne,Nro,qro,hP,jro,Dro,Gro,Sg,jne,Oro,Vro,pP,Xro,zro,Qro,Rg,Dne,Wro,Hro,_P,Uro,Jro,Yro,Pg,Gne,Kro,Zro,uP,eto,oto,rto,Bg,One,tto,ato,bP,nto,sto,lto,Ig,Vne,ito,dto,vP,cto,fto,mto,Ng,Xne,gto,hto,FP,pto,_to,uto,qg,zne,bto,vto,TP,Fto,Tto,Mto,jg,Qne,Eto,Cto,MP,wto,Ato,Lto,Dg,Wne,yto,xto,EP,$to,kto,Sto,Gg,Hne,Rto,Pto,CP,Bto,Ito,Nto,Og,Une,qto,jto,wP,Dto,Gto,Oto,Vg,Jne,Vto,Xto,AP,zto,Qto,Wto,Xg,Yne,Hto,Uto,LP,Jto,Yto,Kto,zg,Zto,Qg,zL,eao,Kne,oao,$Oe,Ri,Wg,Zne,QL,rao,ese,tao,kOe,Ao,WL,aao,HL,nao,yP,sao,lao,iao,UL,dao,ose,cao,fao,mao,Lr,JL,gao,rse,hao,pao,ka,_ao,tse,uao,bao,ase,vao,Fao,nse,Tao,Mao,Eao,k,qn,sse,Cao,wao,xP,Aao,Lao,$P,yao,xao,$ao,jn,lse,kao,Sao,kP,Rao,Pao,SP,Bao,Iao,Nao,Dn,ise,qao,jao,RP,Dao,Gao,PP,Oao,Vao,Xao,Hg,dse,zao,Qao,BP,Wao,Hao,Uao,Gn,cse,Jao,Yao,IP,Kao,Zao,NP,eno,ono,rno,Ug,fse,tno,ano,qP,nno,sno,lno,Jg,mse,ino,dno,jP,cno,fno,mno,Yg,gse,gno,hno,DP,pno,_no,uno,On,hse,bno,vno,GP,Fno,Tno,OP,Mno,Eno,Cno,Vn,pse,wno,Ano,VP,Lno,yno,XP,xno,$no,kno,Xn,_se,Sno,Rno,zP,Pno,Bno,QP,Ino,Nno,qno,Kg,use,jno,Dno,WP,Gno,Ono,Vno,Zg,bse,Xno,zno,HP,Qno,Wno,Hno,eh,vse,Uno,Jno,UP,Yno,Kno,Zno,zn,Fse,eso,oso,JP,rso,tso,YP,aso,nso,sso,oh,Tse,lso,iso,KP,dso,cso,fso,Qn,Mse,mso,gso,ZP,hso,pso,eB,_so,uso,bso,Wn,Ese,vso,Fso,oB,Tso,Mso,rB,Eso,Cso,wso,Hn,Cse,Aso,Lso,tB,yso,xso,aB,$so,kso,Sso,Un,wse,Rso,Pso,nB,Bso,Iso,sB,Nso,qso,jso,rh,Ase,Dso,Gso,lB,Oso,Vso,Xso,Jn,Lse,zso,Qso,iB,Wso,Hso,dB,Uso,Jso,Yso,Yn,yse,Kso,Zso,cB,elo,olo,fB,rlo,tlo,alo,Kn,xse,nlo,slo,mB,llo,ilo,gB,dlo,clo,flo,Zn,$se,mlo,glo,hB,hlo,plo,pB,_lo,ulo,blo,es,kse,vlo,Flo,_B,Tlo,Mlo,uB,Elo,Clo,wlo,os,Sse,Alo,Llo,bB,ylo,xlo,vB,$lo,klo,Slo,th,Rse,Rlo,Plo,FB,Blo,Ilo,Nlo,rs,Pse,qlo,jlo,TB,Dlo,Glo,MB,Olo,Vlo,Xlo,ah,Bse,zlo,Qlo,EB,Wlo,Hlo,Ulo,ts,Ise,Jlo,Ylo,CB,Klo,Zlo,wB,eio,oio,rio,as,Nse,tio,aio,AB,nio,sio,LB,lio,iio,dio,ns,qse,cio,fio,yB,mio,gio,xB,hio,pio,_io,nh,jse,uio,bio,$B,vio,Fio,Tio,ss,Dse,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,ls,Gse,xio,$io,RB,kio,Sio,PB,Rio,Pio,Bio,is,Ose,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,sh,Vse,Vio,Xio,NB,zio,Qio,Wio,ds,Xse,Hio,Uio,qB,Jio,Yio,jB,Kio,Zio,edo,cs,zse,odo,rdo,DB,tdo,ado,GB,ndo,sdo,ldo,fs,Qse,ido,ddo,OB,cdo,fdo,VB,mdo,gdo,hdo,ms,Wse,pdo,_do,XB,udo,bdo,zB,vdo,Fdo,Tdo,gs,Hse,Mdo,Edo,QB,Cdo,wdo,WB,Ado,Ldo,ydo,hs,Use,xdo,$do,HB,kdo,Sdo,UB,Rdo,Pdo,Bdo,ps,Jse,Ido,Ndo,JB,qdo,jdo,YB,Ddo,Gdo,Odo,_s,Yse,Vdo,Xdo,KB,zdo,Qdo,ZB,Wdo,Hdo,Udo,lh,Kse,Jdo,Ydo,eI,Kdo,Zdo,eco,us,Zse,oco,rco,oI,tco,aco,rI,nco,sco,lco,ih,ele,ico,dco,tI,cco,fco,mco,dh,ole,gco,hco,aI,pco,_co,uco,bs,rle,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,vs,tle,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,Fs,ale,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,ch,nle,jco,Dco,fI,Gco,Oco,Vco,Ts,sle,Xco,zco,mI,Qco,Wco,gI,Hco,Uco,Jco,Ms,lle,Yco,Kco,hI,Zco,efo,pI,ofo,rfo,tfo,Es,ile,afo,nfo,_I,sfo,lfo,uI,ifo,dfo,cfo,Cs,dle,ffo,mfo,bI,gfo,hfo,vI,pfo,_fo,ufo,ws,cle,bfo,vfo,FI,Ffo,Tfo,TI,Mfo,Efo,Cfo,As,fle,wfo,Afo,MI,Lfo,yfo,EI,xfo,$fo,kfo,fh,mle,Sfo,Rfo,CI,Pfo,Bfo,Ifo,Ls,gle,Nfo,qfo,wI,jfo,Dfo,AI,Gfo,Ofo,Vfo,mh,hle,Xfo,zfo,LI,Qfo,Wfo,Hfo,gh,ple,Ufo,Jfo,yI,Yfo,Kfo,Zfo,hh,_le,emo,omo,xI,rmo,tmo,amo,ph,ule,nmo,smo,$I,lmo,imo,dmo,ys,ble,cmo,fmo,kI,mmo,gmo,SI,hmo,pmo,_mo,_h,vle,umo,bmo,RI,vmo,Fmo,Tmo,xs,Fle,Mmo,Emo,PI,Cmo,wmo,BI,Amo,Lmo,ymo,$s,Tle,xmo,$mo,II,kmo,Smo,NI,Rmo,Pmo,Bmo,ks,Mle,Imo,Nmo,qI,qmo,jmo,jI,Dmo,Gmo,Omo,Ss,Ele,Vmo,Xmo,DI,zmo,Qmo,GI,Wmo,Hmo,Umo,Rs,Cle,Jmo,Ymo,OI,Kmo,Zmo,VI,ego,ogo,rgo,Ps,wle,tgo,ago,XI,ngo,sgo,zI,lgo,igo,dgo,uh,Ale,cgo,fgo,QI,mgo,ggo,hgo,bh,Lle,pgo,_go,WI,ugo,bgo,vgo,Bs,yle,Fgo,Tgo,HI,Mgo,Ego,UI,Cgo,wgo,Ago,Is,xle,Lgo,ygo,JI,xgo,$go,YI,kgo,Sgo,Rgo,Ns,$le,Pgo,Bgo,KI,Igo,Ngo,ZI,qgo,jgo,Dgo,vh,kle,Ggo,Ogo,eN,Vgo,Xgo,zgo,Fh,Sle,Qgo,Wgo,oN,Hgo,Ugo,Jgo,Th,Rle,Ygo,Kgo,rN,Zgo,eho,oho,qs,Ple,rho,tho,tN,aho,nho,aN,sho,lho,iho,js,Ble,dho,cho,nN,fho,mho,sN,gho,hho,pho,Mh,Ile,_ho,uho,lN,bho,vho,Fho,Eh,Nle,Tho,Mho,iN,Eho,Cho,who,Ch,qle,Aho,Lho,dN,yho,xho,$ho,Ds,jle,kho,Sho,cN,Rho,Pho,fN,Bho,Iho,Nho,wh,Dle,qho,jho,mN,Dho,Gho,Oho,Ah,Gle,Vho,Xho,gN,zho,Qho,Who,Gs,Ole,Hho,Uho,hN,Jho,Yho,pN,Kho,Zho,epo,Os,Vle,opo,rpo,_N,tpo,apo,uN,npo,spo,lpo,Vs,Xle,ipo,dpo,bN,cpo,fpo,vN,mpo,gpo,hpo,Xs,zle,ppo,_po,FN,upo,bpo,TN,vpo,Fpo,Tpo,Lh,Mpo,yh,YL,Epo,Qle,Cpo,SOe,Pi,xh,Wle,KL,wpo,Hle,Apo,ROe,Lo,ZL,Lpo,ey,ypo,MN,xpo,$po,kpo,oy,Spo,Ule,Rpo,Ppo,Bpo,He,ry,Ipo,Jle,Npo,qpo,Sa,jpo,Yle,Dpo,Gpo,Kle,Opo,Vpo,Zle,Xpo,zpo,Qpo,Y,$h,eie,Wpo,Hpo,EN,Upo,Jpo,Ypo,kh,oie,Kpo,Zpo,CN,e_o,o_o,r_o,Sh,rie,t_o,a_o,wN,n_o,s_o,l_o,Rh,tie,i_o,d_o,AN,c_o,f_o,m_o,Ph,aie,g_o,h_o,LN,p_o,__o,u_o,Bh,nie,b_o,v_o,yN,F_o,T_o,M_o,Ih,sie,E_o,C_o,xN,w_o,A_o,L_o,Nh,lie,y_o,x_o,$N,$_o,k_o,S_o,qh,iie,R_o,P_o,kN,B_o,I_o,N_o,jh,die,q_o,j_o,SN,D_o,G_o,O_o,Dh,cie,V_o,X_o,RN,z_o,Q_o,W_o,Gh,fie,H_o,U_o,PN,J_o,Y_o,K_o,Oh,mie,Z_o,euo,BN,ouo,ruo,tuo,Vh,gie,auo,nuo,IN,suo,luo,iuo,Xh,hie,duo,cuo,NN,fuo,muo,guo,zh,pie,huo,puo,qN,_uo,uuo,buo,Qh,_ie,vuo,Fuo,jN,Tuo,Muo,Euo,Wh,uie,Cuo,wuo,DN,Auo,Luo,yuo,Hh,bie,xuo,$uo,GN,kuo,Suo,Ruo,Uh,vie,Puo,Buo,ON,Iuo,Nuo,quo,Jh,Fie,juo,Duo,VN,Guo,Ouo,Vuo,Yh,Tie,Xuo,zuo,XN,Quo,Wuo,Huo,Kh,Mie,Uuo,Juo,zN,Yuo,Kuo,Zuo,Zh,Eie,e1o,o1o,QN,r1o,t1o,a1o,ep,Cie,n1o,s1o,WN,l1o,i1o,d1o,op,wie,c1o,f1o,HN,m1o,g1o,h1o,rp,Aie,p1o,_1o,UN,u1o,b1o,v1o,tp,Lie,F1o,T1o,JN,M1o,E1o,C1o,ap,yie,w1o,A1o,YN,L1o,y1o,x1o,np,xie,$1o,k1o,KN,S1o,R1o,P1o,sp,$ie,B1o,I1o,ZN,N1o,q1o,j1o,lp,kie,D1o,G1o,eq,O1o,V1o,X1o,ip,Sie,z1o,Q1o,oq,W1o,H1o,U1o,dp,J1o,cp,Y1o,fp,ty,K1o,Rie,Z1o,POe,Bi,mp,Pie,ay,e7o,Bie,o7o,BOe,yo,ny,r7o,sy,t7o,rq,a7o,n7o,s7o,ly,l7o,Iie,i7o,d7o,c7o,Ue,iy,f7o,Nie,m7o,g7o,Ii,h7o,qie,p7o,_7o,jie,u7o,b7o,v7o,he,gp,Die,F7o,T7o,tq,M7o,E7o,C7o,hp,Gie,w7o,A7o,Oie,L7o,y7o,x7o,pp,Vie,$7o,k7o,aq,S7o,R7o,P7o,_p,Xie,B7o,I7o,nq,N7o,q7o,j7o,up,zie,D7o,G7o,sq,O7o,V7o,X7o,bp,Qie,z7o,Q7o,lq,W7o,H7o,U7o,vp,Wie,J7o,Y7o,iq,K7o,Z7o,e2o,Fp,Hie,o2o,r2o,dq,t2o,a2o,n2o,Tp,Uie,s2o,l2o,cq,i2o,d2o,c2o,Mp,Jie,f2o,m2o,fq,g2o,h2o,p2o,Ep,Yie,_2o,u2o,mq,b2o,v2o,F2o,Cp,Kie,T2o,M2o,gq,E2o,C2o,w2o,wp,Zie,A2o,L2o,hq,y2o,x2o,$2o,Ap,ede,k2o,S2o,pq,R2o,P2o,B2o,Lp,ode,I2o,N2o,_q,q2o,j2o,D2o,yp,rde,G2o,O2o,uq,V2o,X2o,z2o,xp,tde,Q2o,W2o,bq,H2o,U2o,J2o,$p,ade,Y2o,K2o,vq,Z2o,ebo,obo,kp,rbo,Sp,tbo,Rp,dy,abo,nde,nbo,IOe,Ni,Pp,sde,cy,sbo,lde,lbo,NOe,xo,fy,ibo,qi,dbo,Fq,cbo,fbo,Tq,mbo,gbo,hbo,my,pbo,ide,_bo,ubo,bbo,nt,gy,vbo,dde,Fbo,Tbo,ji,Mbo,cde,Ebo,Cbo,Mq,wbo,Abo,Lbo,Bp,ybo,Je,hy,xbo,fde,$bo,kbo,Ra,Sbo,mde,Rbo,Pbo,gde,Bbo,Ibo,hde,Nbo,qbo,jbo,y,Ip,pde,Dbo,Gbo,Eq,Obo,Vbo,Xbo,Np,_de,zbo,Qbo,Cq,Wbo,Hbo,Ubo,qp,ude,Jbo,Ybo,wq,Kbo,Zbo,e4o,jp,bde,o4o,r4o,Aq,t4o,a4o,n4o,Dp,vde,s4o,l4o,Lq,i4o,d4o,c4o,Gp,Fde,f4o,m4o,yq,g4o,h4o,p4o,Op,Tde,_4o,u4o,xq,b4o,v4o,F4o,Vp,Mde,T4o,M4o,$q,E4o,C4o,w4o,Xp,Ede,A4o,L4o,kq,y4o,x4o,$4o,zp,Cde,k4o,S4o,Sq,R4o,P4o,B4o,Qp,wde,I4o,N4o,Rq,q4o,j4o,D4o,Wp,Ade,G4o,O4o,Pq,V4o,X4o,z4o,Hp,Lde,Q4o,W4o,Bq,H4o,U4o,J4o,Up,yde,Y4o,K4o,Iq,Z4o,e3o,o3o,Jp,xde,r3o,t3o,Nq,a3o,n3o,s3o,Yp,$de,l3o,i3o,qq,d3o,c3o,f3o,Kp,kde,m3o,g3o,jq,h3o,p3o,_3o,Zp,Sde,u3o,b3o,Dq,v3o,F3o,T3o,e_,Rde,M3o,E3o,Gq,C3o,w3o,A3o,o_,Pde,L3o,y3o,Oq,x3o,$3o,k3o,r_,Bde,S3o,R3o,Vq,P3o,B3o,I3o,t_,Ide,N3o,q3o,Xq,j3o,D3o,G3o,a_,Nde,O3o,V3o,zq,X3o,z3o,Q3o,n_,qde,W3o,H3o,Qq,U3o,J3o,Y3o,s_,jde,K3o,Z3o,Wq,evo,ovo,rvo,l_,Dde,tvo,avo,Hq,nvo,svo,lvo,i_,Gde,ivo,dvo,Uq,cvo,fvo,mvo,d_,Ode,gvo,hvo,Jq,pvo,_vo,uvo,c_,Vde,bvo,vvo,Yq,Fvo,Tvo,Mvo,f_,Xde,Evo,Cvo,Kq,wvo,Avo,Lvo,m_,zde,yvo,xvo,Zq,$vo,kvo,Svo,g_,Qde,Rvo,Pvo,ej,Bvo,Ivo,Nvo,h_,Wde,qvo,jvo,oj,Dvo,Gvo,Ovo,p_,Hde,Vvo,Xvo,rj,zvo,Qvo,Wvo,zs,Ude,Hvo,Uvo,tj,Jvo,Yvo,aj,Kvo,Zvo,eFo,__,Jde,oFo,rFo,nj,tFo,aFo,nFo,u_,Yde,sFo,lFo,sj,iFo,dFo,cFo,b_,Kde,fFo,mFo,lj,gFo,hFo,pFo,v_,Zde,_Fo,uFo,ij,bFo,vFo,FFo,F_,ece,TFo,MFo,dj,EFo,CFo,wFo,T_,oce,AFo,LFo,cj,yFo,xFo,$Fo,M_,rce,kFo,SFo,fj,RFo,PFo,BFo,E_,tce,IFo,NFo,mj,qFo,jFo,DFo,C_,ace,GFo,OFo,gj,VFo,XFo,zFo,w_,nce,QFo,WFo,hj,HFo,UFo,JFo,A_,sce,YFo,KFo,pj,ZFo,eTo,oTo,L_,lce,rTo,tTo,_j,aTo,nTo,sTo,y_,ice,lTo,iTo,uj,dTo,cTo,fTo,x_,dce,mTo,gTo,bj,hTo,pTo,_To,$_,cce,uTo,bTo,vj,vTo,FTo,TTo,k_,fce,MTo,ETo,Fj,CTo,wTo,ATo,S_,mce,LTo,yTo,Tj,xTo,$To,kTo,R_,gce,STo,RTo,Mj,PTo,BTo,ITo,P_,hce,NTo,qTo,Ej,jTo,DTo,GTo,B_,pce,OTo,VTo,Cj,XTo,zTo,QTo,I_,_ce,WTo,HTo,wj,UTo,JTo,YTo,N_,uce,KTo,ZTo,Aj,eMo,oMo,rMo,q_,bce,tMo,aMo,Lj,nMo,sMo,lMo,j_,vce,iMo,dMo,yj,cMo,fMo,mMo,D_,Fce,gMo,hMo,xj,pMo,_Mo,uMo,G_,Tce,bMo,vMo,$j,FMo,TMo,MMo,O_,Mce,EMo,CMo,kj,wMo,AMo,LMo,V_,Ece,yMo,xMo,Sj,$Mo,kMo,SMo,X_,Cce,RMo,PMo,Rj,BMo,IMo,NMo,z_,wce,qMo,jMo,Pj,DMo,GMo,OMo,Q_,Ace,VMo,XMo,Bj,zMo,QMo,WMo,W_,Lce,HMo,UMo,Ij,JMo,YMo,KMo,H_,yce,ZMo,eEo,Nj,oEo,rEo,tEo,U_,xce,aEo,nEo,qj,sEo,lEo,iEo,J_,$ce,dEo,cEo,jj,fEo,mEo,gEo,Y_,kce,hEo,pEo,Dj,_Eo,uEo,bEo,K_,Sce,vEo,FEo,Gj,TEo,MEo,EEo,Z_,Rce,CEo,wEo,Oj,AEo,LEo,yEo,eu,Pce,xEo,$Eo,Vj,kEo,SEo,REo,ou,Bce,PEo,BEo,Xj,IEo,NEo,qEo,ru,Ice,jEo,DEo,zj,GEo,OEo,VEo,tu,Nce,XEo,zEo,Qj,QEo,WEo,HEo,au,qce,UEo,JEo,Wj,YEo,KEo,ZEo,nu,jce,eCo,oCo,Hj,rCo,tCo,aCo,su,Dce,nCo,sCo,Uj,lCo,iCo,dCo,lu,Gce,cCo,fCo,Jj,mCo,gCo,hCo,iu,Oce,pCo,_Co,Yj,uCo,bCo,vCo,du,Vce,FCo,TCo,Kj,MCo,ECo,CCo,cu,Xce,wCo,ACo,Zj,LCo,yCo,xCo,fu,zce,$Co,kCo,eD,SCo,RCo,PCo,mu,Qce,BCo,ICo,oD,NCo,qCo,jCo,gu,Wce,DCo,GCo,rD,OCo,VCo,XCo,hu,Hce,zCo,QCo,tD,WCo,HCo,UCo,pu,Uce,JCo,YCo,aD,KCo,ZCo,e5o,_u,Jce,o5o,r5o,nD,t5o,a5o,n5o,uu,Yce,s5o,l5o,sD,i5o,d5o,c5o,bu,Kce,f5o,m5o,lD,g5o,h5o,p5o,vu,Zce,_5o,u5o,iD,b5o,v5o,F5o,Fu,efe,T5o,M5o,dD,E5o,C5o,w5o,Tu,ofe,A5o,L5o,cD,y5o,x5o,$5o,Mu,rfe,k5o,S5o,fD,R5o,P5o,B5o,Eu,tfe,I5o,N5o,mD,q5o,j5o,D5o,Cu,afe,G5o,O5o,gD,V5o,X5o,z5o,wu,nfe,Q5o,W5o,hD,H5o,U5o,J5o,Au,sfe,Y5o,K5o,pD,Z5o,e0o,o0o,Lu,lfe,r0o,t0o,_D,a0o,n0o,s0o,yu,ife,l0o,i0o,uD,d0o,c0o,f0o,xu,dfe,m0o,g0o,bD,h0o,p0o,_0o,$u,cfe,u0o,b0o,vD,v0o,F0o,T0o,ku,ffe,M0o,E0o,FD,C0o,w0o,A0o,Su,mfe,L0o,y0o,TD,x0o,$0o,k0o,Ru,gfe,S0o,R0o,MD,P0o,B0o,I0o,Pu,hfe,N0o,q0o,ED,j0o,D0o,G0o,Bu,pfe,O0o,V0o,CD,X0o,z0o,Q0o,Iu,W0o,_fe,H0o,U0o,ufe,J0o,Y0o,Nu,qOe,Di,qu,bfe,py,K0o,vfe,Z0o,jOe,$o,_y,ewo,Gi,owo,wD,rwo,two,AD,awo,nwo,swo,uy,lwo,Ffe,iwo,dwo,cwo,st,by,fwo,Tfe,mwo,gwo,Oi,hwo,Mfe,pwo,_wo,LD,uwo,bwo,vwo,ju,Fwo,Ye,vy,Two,Efe,Mwo,Ewo,Pa,Cwo,Cfe,wwo,Awo,wfe,Lwo,ywo,Afe,xwo,$wo,kwo,G,Du,Lfe,Swo,Rwo,yD,Pwo,Bwo,Iwo,Gu,yfe,Nwo,qwo,xD,jwo,Dwo,Gwo,Ou,xfe,Owo,Vwo,$D,Xwo,zwo,Qwo,Vu,$fe,Wwo,Hwo,kD,Uwo,Jwo,Ywo,Xu,kfe,Kwo,Zwo,SD,eAo,oAo,rAo,zu,Sfe,tAo,aAo,RD,nAo,sAo,lAo,Qu,Rfe,iAo,dAo,PD,cAo,fAo,mAo,Wu,Pfe,gAo,hAo,BD,pAo,_Ao,uAo,Hu,Bfe,bAo,vAo,ID,FAo,TAo,MAo,Uu,Ife,EAo,CAo,ND,wAo,AAo,LAo,Ju,Nfe,yAo,xAo,qD,$Ao,kAo,SAo,Yu,qfe,RAo,PAo,jD,BAo,IAo,NAo,Ku,jfe,qAo,jAo,DD,DAo,GAo,OAo,Zu,Dfe,VAo,XAo,GD,zAo,QAo,WAo,e1,Gfe,HAo,UAo,OD,JAo,YAo,KAo,o1,Ofe,ZAo,e6o,VD,o6o,r6o,t6o,r1,Vfe,a6o,n6o,XD,s6o,l6o,i6o,t1,Xfe,d6o,c6o,zD,f6o,m6o,g6o,a1,zfe,h6o,p6o,QD,_6o,u6o,b6o,n1,Qfe,v6o,F6o,WD,T6o,M6o,E6o,s1,Wfe,C6o,w6o,HD,A6o,L6o,y6o,l1,Hfe,x6o,$6o,UD,k6o,S6o,R6o,i1,Ufe,P6o,B6o,JD,I6o,N6o,q6o,d1,Jfe,j6o,D6o,YD,G6o,O6o,V6o,c1,Yfe,X6o,z6o,KD,Q6o,W6o,H6o,f1,Kfe,U6o,J6o,ZD,Y6o,K6o,Z6o,m1,Zfe,eLo,oLo,eG,rLo,tLo,aLo,g1,eme,nLo,sLo,oG,lLo,iLo,dLo,h1,ome,cLo,fLo,rG,mLo,gLo,hLo,p1,rme,pLo,_Lo,tG,uLo,bLo,vLo,_1,tme,FLo,TLo,aG,MLo,ELo,CLo,u1,ame,wLo,ALo,nG,LLo,yLo,xLo,b1,nme,$Lo,kLo,sG,SLo,RLo,PLo,v1,sme,BLo,ILo,lG,NLo,qLo,jLo,F1,lme,DLo,GLo,iG,OLo,VLo,XLo,T1,ime,zLo,QLo,dG,WLo,HLo,ULo,M1,dme,JLo,YLo,cG,KLo,ZLo,eyo,E1,cme,oyo,ryo,fG,tyo,ayo,nyo,C1,fme,syo,lyo,mG,iyo,dyo,cyo,w1,mme,fyo,myo,gG,gyo,hyo,pyo,A1,gme,_yo,uyo,hG,byo,vyo,Fyo,L1,hme,Tyo,Myo,pG,Eyo,Cyo,wyo,y1,pme,Ayo,Lyo,_G,yyo,xyo,$yo,x1,_me,kyo,Syo,uG,Ryo,Pyo,Byo,$1,Iyo,ume,Nyo,qyo,bme,jyo,Dyo,k1,DOe,Vi,S1,vme,Fy,Gyo,Fme,Oyo,GOe,ko,Ty,Vyo,Xi,Xyo,bG,zyo,Qyo,vG,Wyo,Hyo,Uyo,My,Jyo,Tme,Yyo,Kyo,Zyo,lt,Ey,e8o,Mme,o8o,r8o,zi,t8o,Eme,a8o,n8o,FG,s8o,l8o,i8o,R1,d8o,Ke,Cy,c8o,Cme,f8o,m8o,Ba,g8o,wme,h8o,p8o,Ame,_8o,u8o,Lme,b8o,v8o,F8o,z,P1,yme,T8o,M8o,TG,E8o,C8o,w8o,B1,xme,A8o,L8o,MG,y8o,x8o,$8o,I1,$me,k8o,S8o,EG,R8o,P8o,B8o,N1,kme,I8o,N8o,CG,q8o,j8o,D8o,q1,Sme,G8o,O8o,wG,V8o,X8o,z8o,j1,Rme,Q8o,W8o,AG,H8o,U8o,J8o,D1,Pme,Y8o,K8o,LG,Z8o,e9o,o9o,G1,Bme,r9o,t9o,yG,a9o,n9o,s9o,O1,Ime,l9o,i9o,xG,d9o,c9o,f9o,V1,Nme,m9o,g9o,$G,h9o,p9o,_9o,X1,qme,u9o,b9o,kG,v9o,F9o,T9o,z1,jme,M9o,E9o,SG,C9o,w9o,A9o,Q1,Dme,L9o,y9o,RG,x9o,$9o,k9o,W1,Gme,S9o,R9o,PG,P9o,B9o,I9o,H1,Ome,N9o,q9o,BG,j9o,D9o,G9o,U1,Vme,O9o,V9o,IG,X9o,z9o,Q9o,J1,Xme,W9o,H9o,NG,U9o,J9o,Y9o,Y1,zme,K9o,Z9o,qG,exo,oxo,rxo,K1,Qme,txo,axo,jG,nxo,sxo,lxo,Z1,Wme,ixo,dxo,DG,cxo,fxo,mxo,e7,Hme,gxo,hxo,GG,pxo,_xo,uxo,o7,Ume,bxo,vxo,OG,Fxo,Txo,Mxo,r7,Jme,Exo,Cxo,VG,wxo,Axo,Lxo,t7,Yme,yxo,xxo,XG,$xo,kxo,Sxo,a7,Kme,Rxo,Pxo,zG,Bxo,Ixo,Nxo,n7,Zme,qxo,jxo,QG,Dxo,Gxo,Oxo,s7,ege,Vxo,Xxo,WG,zxo,Qxo,Wxo,l7,oge,Hxo,Uxo,HG,Jxo,Yxo,Kxo,i7,rge,Zxo,e$o,UG,o$o,r$o,t$o,d7,tge,a$o,n$o,JG,s$o,l$o,i$o,c7,age,d$o,c$o,YG,f$o,m$o,g$o,f7,nge,h$o,p$o,KG,_$o,u$o,b$o,m7,sge,v$o,F$o,ZG,T$o,M$o,E$o,g7,lge,C$o,w$o,eO,A$o,L$o,y$o,h7,ige,x$o,$$o,oO,k$o,S$o,R$o,p7,dge,P$o,B$o,rO,I$o,N$o,q$o,_7,cge,j$o,D$o,tO,G$o,O$o,V$o,u7,fge,X$o,z$o,aO,Q$o,W$o,H$o,b7,mge,U$o,J$o,nO,Y$o,K$o,Z$o,v7,eko,gge,oko,rko,hge,tko,ako,F7,OOe,Qi,T7,pge,wy,nko,_ge,sko,VOe,So,Ay,lko,Wi,iko,sO,dko,cko,lO,fko,mko,gko,Ly,hko,uge,pko,_ko,uko,it,yy,bko,bge,vko,Fko,Hi,Tko,vge,Mko,Eko,iO,Cko,wko,Ako,M7,Lko,Ze,xy,yko,Fge,xko,$ko,Ia,kko,Tge,Sko,Rko,Mge,Pko,Bko,Ege,Iko,Nko,qko,W,E7,Cge,jko,Dko,dO,Gko,Oko,Vko,C7,wge,Xko,zko,cO,Qko,Wko,Hko,w7,Age,Uko,Jko,fO,Yko,Kko,Zko,A7,Lge,eSo,oSo,mO,rSo,tSo,aSo,L7,yge,nSo,sSo,gO,lSo,iSo,dSo,y7,xge,cSo,fSo,hO,mSo,gSo,hSo,x7,$ge,pSo,_So,pO,uSo,bSo,vSo,$7,kge,FSo,TSo,_O,MSo,ESo,CSo,k7,Sge,wSo,ASo,uO,LSo,ySo,xSo,S7,Rge,$So,kSo,bO,SSo,RSo,PSo,R7,Pge,BSo,ISo,vO,NSo,qSo,jSo,P7,Bge,DSo,GSo,FO,OSo,VSo,XSo,B7,Ige,zSo,QSo,TO,WSo,HSo,USo,I7,Nge,JSo,YSo,MO,KSo,ZSo,eRo,N7,qge,oRo,rRo,EO,tRo,aRo,nRo,q7,jge,sRo,lRo,CO,iRo,dRo,cRo,j7,Dge,fRo,mRo,wO,gRo,hRo,pRo,D7,Gge,_Ro,uRo,AO,bRo,vRo,FRo,G7,Oge,TRo,MRo,LO,ERo,CRo,wRo,O7,Vge,ARo,LRo,yO,yRo,xRo,$Ro,V7,Xge,kRo,SRo,xO,RRo,PRo,BRo,X7,zge,IRo,NRo,$O,qRo,jRo,DRo,z7,Qge,GRo,ORo,kO,VRo,XRo,zRo,Q7,Wge,QRo,WRo,SO,HRo,URo,JRo,W7,Hge,YRo,KRo,RO,ZRo,ePo,oPo,H7,Uge,rPo,tPo,PO,aPo,nPo,sPo,U7,Jge,lPo,iPo,BO,dPo,cPo,fPo,J7,Yge,mPo,gPo,IO,hPo,pPo,_Po,Y7,Kge,uPo,bPo,NO,vPo,FPo,TPo,K7,Zge,MPo,EPo,qO,CPo,wPo,APo,Z7,ehe,LPo,yPo,jO,xPo,$Po,kPo,e2,ohe,SPo,RPo,DO,PPo,BPo,IPo,o2,rhe,NPo,qPo,the,jPo,DPo,GPo,r2,ahe,OPo,VPo,GO,XPo,zPo,QPo,t2,nhe,WPo,HPo,OO,UPo,JPo,YPo,a2,she,KPo,ZPo,VO,eBo,oBo,rBo,n2,lhe,tBo,aBo,XO,nBo,sBo,lBo,s2,iBo,ihe,dBo,cBo,dhe,fBo,mBo,l2,XOe,Ui,i2,che,$y,gBo,fhe,hBo,zOe,Ro,ky,pBo,Ji,_Bo,zO,uBo,bBo,QO,vBo,FBo,TBo,Sy,MBo,mhe,EBo,CBo,wBo,dt,Ry,ABo,ghe,LBo,yBo,Yi,xBo,hhe,$Bo,kBo,WO,SBo,RBo,PBo,d2,BBo,eo,Py,IBo,phe,NBo,qBo,Na,jBo,_he,DBo,GBo,uhe,OBo,VBo,bhe,XBo,zBo,QBo,pe,c2,vhe,WBo,HBo,HO,UBo,JBo,YBo,f2,Fhe,KBo,ZBo,UO,eIo,oIo,rIo,m2,The,tIo,aIo,JO,nIo,sIo,lIo,g2,Mhe,iIo,dIo,YO,cIo,fIo,mIo,h2,Ehe,gIo,hIo,KO,pIo,_Io,uIo,p2,Che,bIo,vIo,ZO,FIo,TIo,MIo,_2,whe,EIo,CIo,eV,wIo,AIo,LIo,u2,Ahe,yIo,xIo,oV,$Io,kIo,SIo,b2,Lhe,RIo,PIo,rV,BIo,IIo,NIo,v2,yhe,qIo,jIo,tV,DIo,GIo,OIo,F2,xhe,VIo,XIo,aV,zIo,QIo,WIo,T2,$he,HIo,UIo,nV,JIo,YIo,KIo,M2,khe,ZIo,eNo,sV,oNo,rNo,tNo,E2,She,aNo,nNo,lV,sNo,lNo,iNo,C2,Rhe,dNo,cNo,iV,fNo,mNo,gNo,w2,Phe,hNo,pNo,dV,_No,uNo,bNo,A2,Bhe,vNo,FNo,cV,TNo,MNo,ENo,L2,CNo,Ihe,wNo,ANo,Nhe,LNo,yNo,y2,QOe,Ki,x2,qhe,By,xNo,jhe,$No,WOe,Po,Iy,kNo,Zi,SNo,fV,RNo,PNo,mV,BNo,INo,NNo,Ny,qNo,Dhe,jNo,DNo,GNo,ct,qy,ONo,Ghe,VNo,XNo,ed,zNo,Ohe,QNo,WNo,gV,HNo,UNo,JNo,$2,YNo,oo,jy,KNo,Vhe,ZNo,eqo,qa,oqo,Xhe,rqo,tqo,zhe,aqo,nqo,Qhe,sqo,lqo,iqo,N,k2,Whe,dqo,cqo,hV,fqo,mqo,gqo,S2,Hhe,hqo,pqo,pV,_qo,uqo,bqo,R2,Uhe,vqo,Fqo,_V,Tqo,Mqo,Eqo,P2,Jhe,Cqo,wqo,uV,Aqo,Lqo,yqo,B2,Yhe,xqo,$qo,bV,kqo,Sqo,Rqo,I2,Khe,Pqo,Bqo,vV,Iqo,Nqo,qqo,N2,Zhe,jqo,Dqo,FV,Gqo,Oqo,Vqo,q2,epe,Xqo,zqo,TV,Qqo,Wqo,Hqo,j2,ope,Uqo,Jqo,MV,Yqo,Kqo,Zqo,D2,rpe,ejo,ojo,EV,rjo,tjo,ajo,G2,tpe,njo,sjo,CV,ljo,ijo,djo,O2,ape,cjo,fjo,wV,mjo,gjo,hjo,V2,npe,pjo,_jo,AV,ujo,bjo,vjo,X2,spe,Fjo,Tjo,LV,Mjo,Ejo,Cjo,z2,lpe,wjo,Ajo,yV,Ljo,yjo,xjo,Q2,ipe,$jo,kjo,xV,Sjo,Rjo,Pjo,W2,dpe,Bjo,Ijo,$V,Njo,qjo,jjo,H2,cpe,Djo,Gjo,kV,Ojo,Vjo,Xjo,U2,fpe,zjo,Qjo,SV,Wjo,Hjo,Ujo,J2,mpe,Jjo,Yjo,RV,Kjo,Zjo,eDo,Y2,gpe,oDo,rDo,PV,tDo,aDo,nDo,K2,hpe,sDo,lDo,BV,iDo,dDo,cDo,Z2,ppe,fDo,mDo,IV,gDo,hDo,pDo,eb,_pe,_Do,uDo,NV,bDo,vDo,FDo,ob,upe,TDo,MDo,qV,EDo,CDo,wDo,rb,bpe,ADo,LDo,jV,yDo,xDo,$Do,tb,vpe,kDo,SDo,DV,RDo,PDo,BDo,ab,Fpe,IDo,NDo,GV,qDo,jDo,DDo,nb,Tpe,GDo,ODo,OV,VDo,XDo,zDo,sb,Mpe,QDo,WDo,VV,HDo,UDo,JDo,lb,Epe,YDo,KDo,XV,ZDo,eGo,oGo,ib,Cpe,rGo,tGo,zV,aGo,nGo,sGo,db,wpe,lGo,iGo,QV,dGo,cGo,fGo,cb,Ape,mGo,gGo,WV,hGo,pGo,_Go,fb,Lpe,uGo,bGo,HV,vGo,FGo,TGo,mb,ype,MGo,EGo,UV,CGo,wGo,AGo,gb,xpe,LGo,yGo,JV,xGo,$Go,kGo,hb,$pe,SGo,RGo,YV,PGo,BGo,IGo,pb,kpe,NGo,qGo,KV,jGo,DGo,GGo,_b,Spe,OGo,VGo,ZV,XGo,zGo,QGo,ub,Rpe,WGo,HGo,eX,UGo,JGo,YGo,bb,Ppe,KGo,ZGo,oX,eOo,oOo,rOo,vb,Bpe,tOo,aOo,rX,nOo,sOo,lOo,Fb,Ipe,iOo,dOo,tX,cOo,fOo,mOo,Tb,Npe,gOo,hOo,aX,pOo,_Oo,uOo,Mb,qpe,bOo,vOo,nX,FOo,TOo,MOo,Eb,jpe,EOo,COo,sX,wOo,AOo,LOo,Cb,Dpe,yOo,xOo,lX,$Oo,kOo,SOo,wb,Gpe,ROo,POo,iX,BOo,IOo,NOo,Ab,qOo,Ope,jOo,DOo,Vpe,GOo,OOo,Lb,HOe,od,yb,Xpe,Dy,VOo,zpe,XOo,UOe,Bo,Gy,zOo,rd,QOo,dX,WOo,HOo,cX,UOo,JOo,YOo,Oy,KOo,Qpe,ZOo,eVo,oVo,ft,Vy,rVo,Wpe,tVo,aVo,td,nVo,Hpe,sVo,lVo,fX,iVo,dVo,cVo,xb,fVo,ro,Xy,mVo,Upe,gVo,hVo,ja,pVo,Jpe,_Vo,uVo,Ype,bVo,vVo,Kpe,FVo,TVo,MVo,Z,$b,Zpe,EVo,CVo,mX,wVo,AVo,LVo,kb,e_e,yVo,xVo,gX,$Vo,kVo,SVo,Sb,o_e,RVo,PVo,hX,BVo,IVo,NVo,Rb,r_e,qVo,jVo,pX,DVo,GVo,OVo,Pb,t_e,VVo,XVo,_X,zVo,QVo,WVo,Bb,a_e,HVo,UVo,uX,JVo,YVo,KVo,Ib,n_e,ZVo,eXo,bX,oXo,rXo,tXo,Nb,s_e,aXo,nXo,vX,sXo,lXo,iXo,qb,l_e,dXo,cXo,FX,fXo,mXo,gXo,jb,i_e,hXo,pXo,TX,_Xo,uXo,bXo,Db,d_e,vXo,FXo,MX,TXo,MXo,EXo,Gb,c_e,CXo,wXo,EX,AXo,LXo,yXo,Ob,f_e,xXo,$Xo,CX,kXo,SXo,RXo,Vb,m_e,PXo,BXo,wX,IXo,NXo,qXo,Xb,g_e,jXo,DXo,AX,GXo,OXo,VXo,zb,h_e,XXo,zXo,LX,QXo,WXo,HXo,Qb,p_e,UXo,JXo,yX,YXo,KXo,ZXo,Wb,__e,ezo,ozo,xX,rzo,tzo,azo,Hb,u_e,nzo,szo,$X,lzo,izo,dzo,Ub,b_e,czo,fzo,kX,mzo,gzo,hzo,Jb,v_e,pzo,_zo,SX,uzo,bzo,vzo,Yb,F_e,Fzo,Tzo,RX,Mzo,Ezo,Czo,Kb,T_e,wzo,Azo,PX,Lzo,yzo,xzo,Zb,M_e,$zo,kzo,BX,Szo,Rzo,Pzo,e4,E_e,Bzo,Izo,IX,Nzo,qzo,jzo,o4,C_e,Dzo,Gzo,NX,Ozo,Vzo,Xzo,r4,w_e,zzo,Qzo,qX,Wzo,Hzo,Uzo,t4,A_e,Jzo,Yzo,jX,Kzo,Zzo,eQo,a4,L_e,oQo,rQo,DX,tQo,aQo,nQo,n4,y_e,sQo,lQo,GX,iQo,dQo,cQo,s4,fQo,x_e,mQo,gQo,$_e,hQo,pQo,l4,JOe,ad,i4,k_e,zy,_Qo,S_e,uQo,YOe,Io,Qy,bQo,nd,vQo,OX,FQo,TQo,VX,MQo,EQo,CQo,Wy,wQo,R_e,AQo,LQo,yQo,mt,Hy,xQo,P_e,$Qo,kQo,sd,SQo,B_e,RQo,PQo,XX,BQo,IQo,NQo,d4,qQo,to,Uy,jQo,I_e,DQo,GQo,Da,OQo,N_e,VQo,XQo,q_e,zQo,QQo,j_e,WQo,HQo,UQo,No,c4,D_e,JQo,YQo,zX,KQo,ZQo,eWo,f4,G_e,oWo,rWo,QX,tWo,aWo,nWo,m4,O_e,sWo,lWo,WX,iWo,dWo,cWo,g4,V_e,fWo,mWo,HX,gWo,hWo,pWo,h4,X_e,_Wo,uWo,UX,bWo,vWo,FWo,p4,z_e,TWo,MWo,JX,EWo,CWo,wWo,_4,AWo,Q_e,LWo,yWo,W_e,xWo,$Wo,u4,KOe,ld,b4,H_e,Jy,kWo,U_e,SWo,ZOe,qo,Yy,RWo,id,PWo,YX,BWo,IWo,KX,NWo,qWo,jWo,Ky,DWo,J_e,GWo,OWo,VWo,gt,Zy,XWo,Y_e,zWo,QWo,dd,WWo,K_e,HWo,UWo,ZX,JWo,YWo,KWo,v4,ZWo,ao,e8,eHo,Z_e,oHo,rHo,Ga,tHo,eue,aHo,nHo,oue,sHo,lHo,rue,iHo,dHo,cHo,H,F4,tue,fHo,mHo,ez,gHo,hHo,pHo,T4,aue,_Ho,uHo,oz,bHo,vHo,FHo,M4,nue,THo,MHo,rz,EHo,CHo,wHo,E4,sue,AHo,LHo,tz,yHo,xHo,$Ho,C4,lue,kHo,SHo,az,RHo,PHo,BHo,w4,iue,IHo,NHo,nz,qHo,jHo,DHo,A4,due,GHo,OHo,sz,VHo,XHo,zHo,L4,cue,QHo,WHo,lz,HHo,UHo,JHo,y4,fue,YHo,KHo,iz,ZHo,eUo,oUo,x4,mue,rUo,tUo,dz,aUo,nUo,sUo,$4,gue,lUo,iUo,cz,dUo,cUo,fUo,k4,hue,mUo,gUo,fz,hUo,pUo,_Uo,S4,pue,uUo,bUo,mz,vUo,FUo,TUo,R4,_ue,MUo,EUo,gz,CUo,wUo,AUo,P4,uue,LUo,yUo,hz,xUo,$Uo,kUo,B4,bue,SUo,RUo,pz,PUo,BUo,IUo,I4,vue,NUo,qUo,_z,jUo,DUo,GUo,N4,Fue,OUo,VUo,uz,XUo,zUo,QUo,q4,Tue,WUo,HUo,bz,UUo,JUo,YUo,j4,Mue,KUo,ZUo,vz,eJo,oJo,rJo,D4,Eue,tJo,aJo,Fz,nJo,sJo,lJo,G4,Cue,iJo,dJo,Tz,cJo,fJo,mJo,O4,wue,gJo,hJo,Mz,pJo,_Jo,uJo,V4,Aue,bJo,vJo,Ez,FJo,TJo,MJo,X4,Lue,EJo,CJo,Cz,wJo,AJo,LJo,z4,yue,yJo,xJo,wz,$Jo,kJo,SJo,Q4,xue,RJo,PJo,Az,BJo,IJo,NJo,W4,$ue,qJo,jJo,Lz,DJo,GJo,OJo,H4,kue,VJo,XJo,yz,zJo,QJo,WJo,U4,Sue,HJo,UJo,xz,JJo,YJo,KJo,J4,Rue,ZJo,eYo,$z,oYo,rYo,tYo,Y4,Pue,aYo,nYo,kz,sYo,lYo,iYo,K4,Bue,dYo,cYo,Sz,fYo,mYo,gYo,Z4,Iue,hYo,pYo,Rz,_Yo,uYo,bYo,e3,Nue,vYo,FYo,Pz,TYo,MYo,EYo,o3,que,CYo,wYo,Bz,AYo,LYo,yYo,r3,xYo,jue,$Yo,kYo,Due,SYo,RYo,t3,eVe,cd,a3,Gue,o8,PYo,Oue,BYo,oVe,jo,r8,IYo,fd,NYo,Iz,qYo,jYo,Nz,DYo,GYo,OYo,t8,VYo,Vue,XYo,zYo,QYo,ht,a8,WYo,Xue,HYo,UYo,md,JYo,zue,YYo,KYo,qz,ZYo,eKo,oKo,n3,rKo,no,n8,tKo,Que,aKo,nKo,Oa,sKo,Wue,lKo,iKo,Hue,dKo,cKo,Uue,fKo,mKo,gKo,V,s3,Jue,hKo,pKo,jz,_Ko,uKo,bKo,l3,Yue,vKo,FKo,Dz,TKo,MKo,EKo,i3,Kue,CKo,wKo,Gz,AKo,LKo,yKo,d3,Zue,xKo,$Ko,Oz,kKo,SKo,RKo,c3,e1e,PKo,BKo,Vz,IKo,NKo,qKo,f3,o1e,jKo,DKo,Xz,GKo,OKo,VKo,m3,r1e,XKo,zKo,zz,QKo,WKo,HKo,g3,t1e,UKo,JKo,Qz,YKo,KKo,ZKo,h3,a1e,eZo,oZo,Wz,rZo,tZo,aZo,p3,n1e,nZo,sZo,Hz,lZo,iZo,dZo,_3,s1e,cZo,fZo,Uz,mZo,gZo,hZo,u3,l1e,pZo,_Zo,Jz,uZo,bZo,vZo,b3,i1e,FZo,TZo,Yz,MZo,EZo,CZo,v3,d1e,wZo,AZo,Kz,LZo,yZo,xZo,F3,c1e,$Zo,kZo,Zz,SZo,RZo,PZo,T3,f1e,BZo,IZo,eQ,NZo,qZo,jZo,M3,m1e,DZo,GZo,oQ,OZo,VZo,XZo,E3,g1e,zZo,QZo,rQ,WZo,HZo,UZo,C3,h1e,JZo,YZo,tQ,KZo,ZZo,eer,w3,p1e,oer,rer,aQ,ter,aer,ner,A3,_1e,ser,ler,nQ,ier,der,cer,L3,u1e,fer,mer,sQ,ger,her,per,y3,b1e,_er,uer,lQ,ber,ver,Fer,x3,v1e,Ter,Mer,iQ,Eer,Cer,wer,$3,F1e,Aer,Ler,dQ,yer,xer,$er,k3,T1e,ker,Ser,cQ,Rer,Per,Ber,S3,M1e,Ier,Ner,fQ,qer,jer,Der,R3,E1e,Ger,Oer,mQ,Ver,Xer,zer,P3,C1e,Qer,Wer,gQ,Her,Uer,Jer,B3,w1e,Yer,Ker,hQ,Zer,eor,oor,I3,A1e,ror,tor,pQ,aor,nor,sor,N3,L1e,lor,ior,_Q,dor,cor,mor,q3,y1e,gor,hor,uQ,por,_or,uor,j3,x1e,bor,vor,bQ,For,Tor,Mor,D3,$1e,Eor,Cor,vQ,wor,Aor,Lor,G3,k1e,yor,xor,FQ,$or,kor,Sor,O3,S1e,Ror,Por,TQ,Bor,Ior,Nor,V3,R1e,qor,jor,MQ,Dor,Gor,Oor,X3,P1e,Vor,Xor,EQ,zor,Qor,Wor,z3,B1e,Hor,Uor,CQ,Jor,Yor,Kor,Q3,I1e,Zor,err,wQ,orr,rrr,trr,W3,arr,N1e,nrr,srr,q1e,lrr,irr,H3,rVe,gd,U3,j1e,s8,drr,D1e,crr,tVe,Do,l8,frr,hd,mrr,AQ,grr,hrr,LQ,prr,_rr,urr,i8,brr,G1e,vrr,Frr,Trr,pt,d8,Mrr,O1e,Err,Crr,pd,wrr,V1e,Arr,Lrr,yQ,yrr,xrr,$rr,J3,krr,so,c8,Srr,X1e,Rrr,Prr,Va,Brr,z1e,Irr,Nrr,Q1e,qrr,jrr,W1e,Drr,Grr,Orr,H1e,Y3,U1e,Vrr,Xrr,xQ,zrr,Qrr,Wrr,K3,Hrr,J1e,Urr,Jrr,Y1e,Yrr,Krr,Z3,aVe,_d,ev,K1e,f8,Zrr,Z1e,etr,nVe,Go,m8,otr,ud,rtr,$Q,ttr,atr,kQ,ntr,str,ltr,g8,itr,e7e,dtr,ctr,ftr,_t,h8,mtr,o7e,gtr,htr,bd,ptr,r7e,_tr,utr,SQ,btr,vtr,Ftr,ov,Ttr,lo,p8,Mtr,t7e,Etr,Ctr,Xa,wtr,a7e,Atr,Ltr,n7e,ytr,xtr,s7e,$tr,ktr,Str,Fe,rv,l7e,Rtr,Ptr,RQ,Btr,Itr,Ntr,tv,i7e,qtr,jtr,PQ,Dtr,Gtr,Otr,av,d7e,Vtr,Xtr,BQ,ztr,Qtr,Wtr,nv,c7e,Htr,Utr,IQ,Jtr,Ytr,Ktr,Qs,f7e,Ztr,ear,NQ,oar,rar,qQ,tar,aar,nar,sv,m7e,sar,lar,jQ,iar,dar,car,Ws,g7e,far,mar,DQ,gar,har,GQ,par,_ar,uar,ut,h7e,bar,Far,OQ,Tar,Mar,VQ,Ear,Car,XQ,war,Aar,Lar,lv,p7e,yar,xar,zQ,$ar,kar,Sar,iv,_7e,Rar,Par,QQ,Bar,Iar,Nar,dv,u7e,qar,jar,WQ,Dar,Gar,Oar,cv,b7e,Var,Xar,HQ,zar,Qar,War,fv,v7e,Har,Uar,UQ,Jar,Yar,Kar,mv,F7e,Zar,enr,JQ,onr,rnr,tnr,gv,T7e,anr,nnr,YQ,snr,lnr,inr,hv,dnr,M7e,cnr,fnr,E7e,mnr,gnr,pv,sVe,vd,_v,C7e,_8,hnr,w7e,pnr,lVe,Oo,u8,_nr,Fd,unr,KQ,bnr,vnr,ZQ,Fnr,Tnr,Mnr,b8,Enr,A7e,Cnr,wnr,Anr,bt,v8,Lnr,L7e,ynr,xnr,Td,$nr,y7e,knr,Snr,eW,Rnr,Pnr,Bnr,uv,Inr,io,F8,Nnr,x7e,qnr,jnr,za,Dnr,$7e,Gnr,Onr,k7e,Vnr,Xnr,S7e,znr,Qnr,Wnr,R7e,bv,P7e,Hnr,Unr,oW,Jnr,Ynr,Knr,vv,Znr,B7e,esr,osr,I7e,rsr,tsr,Fv,iVe,Md,Tv,N7e,T8,asr,q7e,nsr,dVe,Vo,M8,ssr,Ed,lsr,rW,isr,dsr,tW,csr,fsr,msr,E8,gsr,j7e,hsr,psr,_sr,vt,C8,usr,D7e,bsr,vsr,Cd,Fsr,G7e,Tsr,Msr,aW,Esr,Csr,wsr,Mv,Asr,co,w8,Lsr,O7e,ysr,xsr,Qa,$sr,V7e,ksr,Ssr,X7e,Rsr,Psr,z7e,Bsr,Isr,Nsr,Q7e,Ev,W7e,qsr,jsr,nW,Dsr,Gsr,Osr,Cv,Vsr,H7e,Xsr,zsr,U7e,Qsr,Wsr,wv,cVe,wd,Av,J7e,A8,Hsr,Y7e,Usr,fVe,Xo,L8,Jsr,Ad,Ysr,sW,Ksr,Zsr,lW,elr,olr,rlr,y8,tlr,K7e,alr,nlr,slr,Ft,x8,llr,Z7e,ilr,dlr,Ld,clr,e2e,flr,mlr,iW,glr,hlr,plr,Lv,_lr,fo,$8,ulr,o2e,blr,vlr,Wa,Flr,r2e,Tlr,Mlr,t2e,Elr,Clr,a2e,wlr,Alr,Llr,Pe,yv,n2e,ylr,xlr,dW,$lr,klr,Slr,xv,s2e,Rlr,Plr,cW,Blr,Ilr,Nlr,$v,l2e,qlr,jlr,fW,Dlr,Glr,Olr,kv,i2e,Vlr,Xlr,mW,zlr,Qlr,Wlr,Sv,d2e,Hlr,Ulr,gW,Jlr,Ylr,Klr,Rv,c2e,Zlr,eir,hW,oir,rir,tir,Pv,f2e,air,nir,pW,sir,lir,iir,Bv,m2e,dir,cir,_W,fir,mir,gir,Iv,g2e,hir,pir,uW,_ir,uir,bir,Nv,vir,h2e,Fir,Tir,p2e,Mir,Eir,qv,mVe,yd,jv,_2e,k8,Cir,u2e,wir,gVe,zo,S8,Air,xd,Lir,bW,yir,xir,vW,$ir,kir,Sir,R8,Rir,b2e,Pir,Bir,Iir,Tt,P8,Nir,v2e,qir,jir,$d,Dir,F2e,Gir,Oir,FW,Vir,Xir,zir,Dv,Qir,mo,B8,Wir,T2e,Hir,Uir,Ha,Jir,M2e,Yir,Kir,E2e,Zir,edr,C2e,odr,rdr,tdr,et,Gv,w2e,adr,ndr,TW,sdr,ldr,idr,Ov,A2e,ddr,cdr,MW,fdr,mdr,gdr,Vv,L2e,hdr,pdr,EW,_dr,udr,bdr,Xv,y2e,vdr,Fdr,CW,Tdr,Mdr,Edr,zv,x2e,Cdr,wdr,wW,Adr,Ldr,ydr,Qv,xdr,$2e,$dr,kdr,k2e,Sdr,Rdr,Wv,hVe,kd,Hv,S2e,I8,Pdr,R2e,Bdr,pVe,Qo,N8,Idr,Sd,Ndr,AW,qdr,jdr,LW,Ddr,Gdr,Odr,q8,Vdr,P2e,Xdr,zdr,Qdr,Mt,j8,Wdr,B2e,Hdr,Udr,Rd,Jdr,I2e,Ydr,Kdr,yW,Zdr,ecr,ocr,Uv,rcr,go,D8,tcr,N2e,acr,ncr,Ua,scr,q2e,lcr,icr,j2e,dcr,ccr,D2e,fcr,mcr,gcr,Le,Jv,G2e,hcr,pcr,xW,_cr,ucr,bcr,Yv,O2e,vcr,Fcr,$W,Tcr,Mcr,Ecr,Kv,V2e,Ccr,wcr,kW,Acr,Lcr,ycr,Zv,X2e,xcr,$cr,SW,kcr,Scr,Rcr,eF,z2e,Pcr,Bcr,RW,Icr,Ncr,qcr,oF,Q2e,jcr,Dcr,PW,Gcr,Ocr,Vcr,rF,W2e,Xcr,zcr,BW,Qcr,Wcr,Hcr,tF,H2e,Ucr,Jcr,IW,Ycr,Kcr,Zcr,aF,U2e,efr,ofr,NW,rfr,tfr,afr,nF,J2e,nfr,sfr,qW,lfr,ifr,dfr,sF,cfr,Y2e,ffr,mfr,K2e,gfr,hfr,lF,_Ve,Pd,iF,Z2e,G8,pfr,ebe,_fr,uVe,Wo,O8,ufr,Bd,bfr,jW,vfr,Ffr,DW,Tfr,Mfr,Efr,V8,Cfr,obe,wfr,Afr,Lfr,Et,X8,yfr,rbe,xfr,$fr,Id,kfr,tbe,Sfr,Rfr,GW,Pfr,Bfr,Ifr,dF,Nfr,ho,z8,qfr,abe,jfr,Dfr,Ja,Gfr,nbe,Ofr,Vfr,sbe,Xfr,zfr,lbe,Qfr,Wfr,Hfr,Q8,cF,ibe,Ufr,Jfr,OW,Yfr,Kfr,Zfr,fF,dbe,emr,omr,VW,rmr,tmr,amr,mF,nmr,cbe,smr,lmr,fbe,imr,dmr,gF,bVe,Nd,hF,mbe,W8,cmr,gbe,fmr,vVe,Ho,H8,mmr,qd,gmr,XW,hmr,pmr,zW,_mr,umr,bmr,U8,vmr,hbe,Fmr,Tmr,Mmr,Ct,J8,Emr,pbe,Cmr,wmr,jd,Amr,_be,Lmr,ymr,QW,xmr,$mr,kmr,pF,Smr,po,Y8,Rmr,ube,Pmr,Bmr,Ya,Imr,bbe,Nmr,qmr,vbe,jmr,Dmr,Fbe,Gmr,Omr,Vmr,ot,_F,Tbe,Xmr,zmr,WW,Qmr,Wmr,Hmr,uF,Mbe,Umr,Jmr,HW,Ymr,Kmr,Zmr,bF,Ebe,egr,ogr,UW,rgr,tgr,agr,vF,Cbe,ngr,sgr,JW,lgr,igr,dgr,FF,wbe,cgr,fgr,YW,mgr,ggr,hgr,TF,pgr,Abe,_gr,ugr,Lbe,bgr,vgr,MF,FVe,Dd,EF,ybe,K8,Fgr,xbe,Tgr,TVe,Uo,Z8,Mgr,Gd,Egr,KW,Cgr,wgr,ZW,Agr,Lgr,ygr,e9,xgr,$be,$gr,kgr,Sgr,wt,o9,Rgr,kbe,Pgr,Bgr,Od,Igr,Sbe,Ngr,qgr,eH,jgr,Dgr,Ggr,CF,Ogr,_o,r9,Vgr,Rbe,Xgr,zgr,Ka,Qgr,Pbe,Wgr,Hgr,Bbe,Ugr,Jgr,Ibe,Ygr,Kgr,Zgr,Vd,wF,Nbe,ehr,ohr,oH,rhr,thr,ahr,AF,qbe,nhr,shr,rH,lhr,ihr,dhr,LF,jbe,chr,fhr,tH,mhr,ghr,hhr,yF,phr,Dbe,_hr,uhr,Gbe,bhr,vhr,xF,MVe,Xd,$F,Obe,t9,Fhr,Vbe,Thr,EVe,Jo,a9,Mhr,zd,Ehr,aH,Chr,whr,nH,Ahr,Lhr,yhr,n9,xhr,Xbe,$hr,khr,Shr,At,s9,Rhr,zbe,Phr,Bhr,Qd,Ihr,Qbe,Nhr,qhr,sH,jhr,Dhr,Ghr,kF,Ohr,uo,l9,Vhr,Wbe,Xhr,zhr,Za,Qhr,Hbe,Whr,Hhr,Ube,Uhr,Jhr,Jbe,Yhr,Khr,Zhr,i9,SF,Ybe,epr,opr,lH,rpr,tpr,apr,RF,Kbe,npr,spr,iH,lpr,ipr,dpr,PF,cpr,Zbe,fpr,mpr,e4e,gpr,hpr,BF,CVe,Wd,IF,o4e,d9,ppr,r4e,_pr,wVe,Yo,c9,upr,Hd,bpr,dH,vpr,Fpr,cH,Tpr,Mpr,Epr,f9,Cpr,t4e,wpr,Apr,Lpr,Lt,m9,ypr,a4e,xpr,$pr,Ud,kpr,n4e,Spr,Rpr,fH,Ppr,Bpr,Ipr,NF,Npr,bo,g9,qpr,s4e,jpr,Dpr,en,Gpr,l4e,Opr,Vpr,i4e,Xpr,zpr,d4e,Qpr,Wpr,Hpr,c4e,qF,f4e,Upr,Jpr,mH,Ypr,Kpr,Zpr,jF,e_r,m4e,o_r,r_r,g4e,t_r,a_r,DF,AVe,Jd,GF,h4e,h9,n_r,p4e,s_r,LVe,Ko,p9,l_r,Yd,i_r,gH,d_r,c_r,hH,f_r,m_r,g_r,_9,h_r,_4e,p_r,__r,u_r,yt,u9,b_r,u4e,v_r,F_r,Kd,T_r,b4e,M_r,E_r,pH,C_r,w_r,A_r,OF,L_r,vo,b9,y_r,v4e,x_r,$_r,on,k_r,F4e,S_r,R_r,T4e,P_r,B_r,M4e,I_r,N_r,q_r,rn,VF,E4e,j_r,D_r,_H,G_r,O_r,V_r,XF,C4e,X_r,z_r,uH,Q_r,W_r,H_r,zF,w4e,U_r,J_r,bH,Y_r,K_r,Z_r,QF,A4e,eur,our,vH,rur,tur,aur,WF,nur,L4e,sur,lur,y4e,iur,dur,HF,yVe,Zd,UF,x4e,v9,cur,$4e,fur,xVe,Zo,F9,mur,ec,gur,FH,hur,pur,TH,_ur,uur,bur,T9,vur,k4e,Fur,Tur,Mur,xt,M9,Eur,S4e,Cur,wur,oc,Aur,R4e,Lur,yur,MH,xur,$ur,kur,JF,Sur,Fo,E9,Rur,P4e,Pur,Bur,tn,Iur,B4e,Nur,qur,I4e,jur,Dur,N4e,Gur,Our,Vur,q4e,YF,j4e,Xur,zur,EH,Qur,Wur,Hur,KF,Uur,D4e,Jur,Yur,G4e,Kur,Zur,ZF,$Ve,rc,eT,O4e,C9,e1r,V4e,o1r,kVe,er,w9,r1r,tc,t1r,CH,a1r,n1r,wH,s1r,l1r,i1r,A9,d1r,X4e,c1r,f1r,m1r,$t,L9,g1r,z4e,h1r,p1r,ac,_1r,Q4e,u1r,b1r,AH,v1r,F1r,T1r,oT,M1r,yr,y9,E1r,W4e,C1r,w1r,an,A1r,H4e,L1r,y1r,U4e,x1r,$1r,J4e,k1r,S1r,R1r,j,rT,Y4e,P1r,B1r,LH,I1r,N1r,q1r,tT,K4e,j1r,D1r,yH,G1r,O1r,V1r,aT,Z4e,X1r,z1r,xH,Q1r,W1r,H1r,nT,e3e,U1r,J1r,$H,Y1r,K1r,Z1r,sT,o3e,e7r,o7r,kH,r7r,t7r,a7r,lT,r3e,n7r,s7r,SH,l7r,i7r,d7r,iT,t3e,c7r,f7r,RH,m7r,g7r,h7r,dT,a3e,p7r,_7r,PH,u7r,b7r,v7r,cT,n3e,F7r,T7r,BH,M7r,E7r,C7r,fT,s3e,w7r,A7r,IH,L7r,y7r,x7r,mT,l3e,$7r,k7r,NH,S7r,R7r,P7r,gT,i3e,B7r,I7r,qH,N7r,q7r,j7r,hT,d3e,D7r,G7r,jH,O7r,V7r,X7r,pT,c3e,z7r,Q7r,DH,W7r,H7r,U7r,_T,f3e,J7r,Y7r,GH,K7r,Z7r,e2r,uT,m3e,o2r,r2r,OH,t2r,a2r,n2r,bT,g3e,s2r,l2r,VH,i2r,d2r,c2r,Hs,h3e,f2r,m2r,XH,g2r,h2r,zH,p2r,_2r,u2r,vT,p3e,b2r,v2r,QH,F2r,T2r,M2r,FT,_3e,E2r,C2r,WH,w2r,A2r,L2r,TT,u3e,y2r,x2r,HH,$2r,k2r,S2r,MT,b3e,R2r,P2r,UH,B2r,I2r,N2r,ET,v3e,q2r,j2r,JH,D2r,G2r,O2r,CT,F3e,V2r,X2r,YH,z2r,Q2r,W2r,wT,T3e,H2r,U2r,KH,J2r,Y2r,K2r,AT,M3e,Z2r,ebr,ZH,obr,rbr,tbr,LT,E3e,abr,nbr,eU,sbr,lbr,ibr,yT,C3e,dbr,cbr,oU,fbr,mbr,gbr,xT,w3e,hbr,pbr,rU,_br,ubr,bbr,$T,A3e,vbr,Fbr,tU,Tbr,Mbr,Ebr,kT,L3e,Cbr,wbr,aU,Abr,Lbr,ybr,ST,y3e,xbr,$br,nU,kbr,Sbr,Rbr,RT,x3e,Pbr,Bbr,sU,Ibr,Nbr,qbr,PT,$3e,jbr,Dbr,lU,Gbr,Obr,Vbr,BT,k3e,Xbr,zbr,iU,Qbr,Wbr,Hbr,IT,S3e,Ubr,Jbr,dU,Ybr,Kbr,Zbr,NT,R3e,e4r,o4r,cU,r4r,t4r,a4r,qT,P3e,n4r,s4r,fU,l4r,i4r,d4r,jT,B3e,c4r,f4r,mU,m4r,g4r,h4r,DT,I3e,p4r,_4r,gU,u4r,b4r,v4r,GT,N3e,F4r,T4r,hU,M4r,E4r,C4r,OT,q3e,w4r,A4r,pU,L4r,y4r,x4r,VT,j3e,$4r,k4r,_U,S4r,R4r,P4r,XT,D3e,B4r,I4r,uU,N4r,q4r,j4r,zT,G3e,D4r,G4r,bU,O4r,V4r,X4r,QT,O3e,z4r,Q4r,vU,W4r,H4r,U4r,WT,V3e,J4r,Y4r,FU,K4r,Z4r,e3r,HT,SVe,nc,UT,X3e,x9,o3r,z3e,r3r,RVe,or,$9,t3r,sc,a3r,TU,n3r,s3r,MU,l3r,i3r,d3r,k9,c3r,Q3e,f3r,m3r,g3r,kt,S9,h3r,W3e,p3r,_3r,lc,u3r,H3e,b3r,v3r,EU,F3r,T3r,M3r,JT,E3r,xr,R9,C3r,U3e,w3r,A3r,nn,L3r,J3e,y3r,x3r,Y3e,$3r,k3r,K3e,S3r,R3r,P3r,se,YT,Z3e,B3r,I3r,CU,N3r,q3r,j3r,KT,eve,D3r,G3r,wU,O3r,V3r,X3r,ZT,ove,z3r,Q3r,AU,W3r,H3r,U3r,eM,rve,J3r,Y3r,LU,K3r,Z3r,evr,oM,tve,ovr,rvr,yU,tvr,avr,nvr,rM,ave,svr,lvr,xU,ivr,dvr,cvr,tM,nve,fvr,mvr,$U,gvr,hvr,pvr,aM,sve,_vr,uvr,kU,bvr,vvr,Fvr,nM,lve,Tvr,Mvr,SU,Evr,Cvr,wvr,sM,ive,Avr,Lvr,RU,yvr,xvr,$vr,lM,dve,kvr,Svr,PU,Rvr,Pvr,Bvr,iM,cve,Ivr,Nvr,BU,qvr,jvr,Dvr,dM,fve,Gvr,Ovr,IU,Vvr,Xvr,zvr,cM,mve,Qvr,Wvr,NU,Hvr,Uvr,Jvr,fM,gve,Yvr,Kvr,qU,Zvr,eFr,oFr,mM,hve,rFr,tFr,jU,aFr,nFr,sFr,gM,pve,lFr,iFr,DU,dFr,cFr,fFr,hM,_ve,mFr,gFr,GU,hFr,pFr,_Fr,pM,uve,uFr,bFr,OU,vFr,FFr,TFr,_M,bve,MFr,EFr,VU,CFr,wFr,AFr,uM,vve,LFr,yFr,XU,xFr,$Fr,kFr,bM,Fve,SFr,RFr,zU,PFr,BFr,IFr,vM,Tve,NFr,qFr,QU,jFr,DFr,GFr,FM,PVe,ic,TM,Mve,P9,OFr,Eve,VFr,BVe,rr,B9,XFr,dc,zFr,WU,QFr,WFr,HU,HFr,UFr,JFr,I9,YFr,Cve,KFr,ZFr,eTr,St,N9,oTr,wve,rTr,tTr,cc,aTr,Ave,nTr,sTr,UU,lTr,iTr,dTr,MM,cTr,$r,q9,fTr,Lve,mTr,gTr,sn,hTr,yve,pTr,_Tr,xve,uTr,bTr,$ve,vTr,FTr,TTr,Me,EM,kve,MTr,ETr,JU,CTr,wTr,ATr,CM,Sve,LTr,yTr,YU,xTr,$Tr,kTr,wM,Rve,STr,RTr,KU,PTr,BTr,ITr,AM,Pve,NTr,qTr,ZU,jTr,DTr,GTr,LM,Bve,OTr,VTr,eJ,XTr,zTr,QTr,yM,Ive,WTr,HTr,oJ,UTr,JTr,YTr,xM,Nve,KTr,ZTr,rJ,eMr,oMr,rMr,$M,qve,tMr,aMr,tJ,nMr,sMr,lMr,kM,jve,iMr,dMr,aJ,cMr,fMr,mMr,SM,Dve,gMr,hMr,nJ,pMr,_Mr,uMr,RM,Gve,bMr,vMr,sJ,FMr,TMr,MMr,PM,Ove,EMr,CMr,lJ,wMr,AMr,LMr,BM,Vve,yMr,xMr,iJ,$Mr,kMr,SMr,IM,IVe,fc,NM,Xve,j9,RMr,zve,PMr,NVe,tr,D9,BMr,mc,IMr,dJ,NMr,qMr,cJ,jMr,DMr,GMr,G9,OMr,Qve,VMr,XMr,zMr,Rt,O9,QMr,Wve,WMr,HMr,gc,UMr,Hve,JMr,YMr,fJ,KMr,ZMr,eEr,qM,oEr,kr,V9,rEr,Uve,tEr,aEr,ln,nEr,Jve,sEr,lEr,Yve,iEr,dEr,Kve,cEr,fEr,mEr,dn,jM,Zve,gEr,hEr,mJ,pEr,_Er,uEr,DM,eFe,bEr,vEr,gJ,FEr,TEr,MEr,GM,oFe,EEr,CEr,hJ,wEr,AEr,LEr,OM,rFe,yEr,xEr,pJ,$Er,kEr,SEr,VM,qVe,hc,XM,tFe,X9,REr,aFe,PEr,jVe,ar,z9,BEr,pc,IEr,_J,NEr,qEr,uJ,jEr,DEr,GEr,Q9,OEr,nFe,VEr,XEr,zEr,Pt,W9,QEr,sFe,WEr,HEr,_c,UEr,lFe,JEr,YEr,bJ,KEr,ZEr,eCr,zM,oCr,Sr,H9,rCr,iFe,tCr,aCr,cn,nCr,dFe,sCr,lCr,cFe,iCr,dCr,fFe,cCr,fCr,mCr,ie,QM,mFe,gCr,hCr,vJ,pCr,_Cr,uCr,WM,gFe,bCr,vCr,FJ,FCr,TCr,MCr,HM,hFe,ECr,CCr,TJ,wCr,ACr,LCr,UM,pFe,yCr,xCr,MJ,$Cr,kCr,SCr,JM,_Fe,RCr,PCr,EJ,BCr,ICr,NCr,YM,uFe,qCr,jCr,CJ,DCr,GCr,OCr,KM,bFe,VCr,XCr,wJ,zCr,QCr,WCr,ZM,vFe,HCr,UCr,AJ,JCr,YCr,KCr,eE,FFe,ZCr,e5r,LJ,o5r,r5r,t5r,oE,TFe,a5r,n5r,yJ,s5r,l5r,i5r,rE,MFe,d5r,c5r,xJ,f5r,m5r,g5r,tE,EFe,h5r,p5r,$J,_5r,u5r,b5r,aE,CFe,v5r,F5r,kJ,T5r,M5r,E5r,nE,wFe,C5r,w5r,SJ,A5r,L5r,y5r,sE,AFe,x5r,$5r,RJ,k5r,S5r,R5r,lE,LFe,P5r,B5r,PJ,I5r,N5r,q5r,iE,yFe,j5r,D5r,BJ,G5r,O5r,V5r,dE,xFe,X5r,z5r,IJ,Q5r,W5r,H5r,cE,$Fe,U5r,J5r,NJ,Y5r,K5r,Z5r,fE,kFe,e0r,o0r,qJ,r0r,t0r,a0r,mE,DVe,uc,gE,SFe,U9,n0r,RFe,s0r,GVe,nr,J9,l0r,bc,i0r,jJ,d0r,c0r,DJ,f0r,m0r,g0r,Y9,h0r,PFe,p0r,_0r,u0r,Bt,K9,b0r,BFe,v0r,F0r,vc,T0r,IFe,M0r,E0r,GJ,C0r,w0r,A0r,hE,L0r,Rr,Z9,y0r,NFe,x0r,$0r,fn,k0r,qFe,S0r,R0r,jFe,P0r,B0r,DFe,I0r,N0r,q0r,ye,pE,GFe,j0r,D0r,OJ,G0r,O0r,V0r,_E,OFe,X0r,z0r,VJ,Q0r,W0r,H0r,uE,VFe,U0r,J0r,XJ,Y0r,K0r,Z0r,bE,XFe,ewr,owr,zJ,rwr,twr,awr,vE,zFe,nwr,swr,QJ,lwr,iwr,dwr,FE,QFe,cwr,fwr,WJ,mwr,gwr,hwr,TE,WFe,pwr,_wr,HJ,uwr,bwr,vwr,ME,HFe,Fwr,Twr,UJ,Mwr,Ewr,Cwr,EE,UFe,wwr,Awr,JJ,Lwr,ywr,xwr,CE,JFe,$wr,kwr,YJ,Swr,Rwr,Pwr,wE,OVe,Fc,AE,YFe,ex,Bwr,KFe,Iwr,VVe,sr,ox,Nwr,Tc,qwr,KJ,jwr,Dwr,ZJ,Gwr,Owr,Vwr,rx,Xwr,ZFe,zwr,Qwr,Wwr,It,tx,Hwr,eTe,Uwr,Jwr,Mc,Ywr,oTe,Kwr,Zwr,eY,eAr,oAr,rAr,LE,tAr,Pr,ax,aAr,rTe,nAr,sAr,mn,lAr,tTe,iAr,dAr,aTe,cAr,fAr,nTe,mAr,gAr,hAr,te,yE,sTe,pAr,_Ar,oY,uAr,bAr,vAr,xE,lTe,FAr,TAr,rY,MAr,EAr,CAr,$E,iTe,wAr,AAr,tY,LAr,yAr,xAr,kE,dTe,$Ar,kAr,aY,SAr,RAr,PAr,SE,cTe,BAr,IAr,nY,NAr,qAr,jAr,RE,fTe,DAr,GAr,sY,OAr,VAr,XAr,PE,mTe,zAr,QAr,lY,WAr,HAr,UAr,BE,gTe,JAr,YAr,iY,KAr,ZAr,e6r,IE,hTe,o6r,r6r,dY,t6r,a6r,n6r,NE,pTe,s6r,l6r,cY,i6r,d6r,c6r,qE,_Te,f6r,m6r,fY,g6r,h6r,p6r,jE,uTe,_6r,u6r,mY,b6r,v6r,F6r,DE,bTe,T6r,M6r,gY,E6r,C6r,w6r,GE,vTe,A6r,L6r,hY,y6r,x6r,$6r,OE,FTe,k6r,S6r,pY,R6r,P6r,B6r,VE,TTe,I6r,N6r,_Y,q6r,j6r,D6r,XE,MTe,G6r,O6r,uY,V6r,X6r,z6r,zE,ETe,Q6r,W6r,bY,H6r,U6r,J6r,QE,CTe,Y6r,K6r,vY,Z6r,eLr,oLr,WE,wTe,rLr,tLr,FY,aLr,nLr,sLr,HE,ATe,lLr,iLr,TY,dLr,cLr,fLr,UE,LTe,mLr,gLr,MY,hLr,pLr,_Lr,JE,yTe,uLr,bLr,EY,vLr,FLr,TLr,YE,xTe,MLr,ELr,CY,CLr,wLr,ALr,KE,$Te,LLr,yLr,wY,xLr,$Lr,kLr,ZE,kTe,SLr,RLr,AY,PLr,BLr,ILr,eC,XVe,Ec,oC,STe,nx,NLr,RTe,qLr,zVe,lr,sx,jLr,Cc,DLr,LY,GLr,OLr,yY,VLr,XLr,zLr,lx,QLr,PTe,WLr,HLr,ULr,Nt,ix,JLr,BTe,YLr,KLr,wc,ZLr,ITe,eyr,oyr,xY,ryr,tyr,ayr,rC,nyr,Br,dx,syr,NTe,lyr,iyr,gn,dyr,qTe,cyr,fyr,jTe,myr,gyr,DTe,hyr,pyr,_yr,_e,tC,GTe,uyr,byr,$Y,vyr,Fyr,Tyr,aC,OTe,Myr,Eyr,kY,Cyr,wyr,Ayr,nC,VTe,Lyr,yyr,SY,xyr,$yr,kyr,sC,XTe,Syr,Ryr,RY,Pyr,Byr,Iyr,lC,zTe,Nyr,qyr,PY,jyr,Dyr,Gyr,iC,QTe,Oyr,Vyr,BY,Xyr,zyr,Qyr,dC,WTe,Wyr,Hyr,IY,Uyr,Jyr,Yyr,cC,HTe,Kyr,Zyr,NY,e8r,o8r,r8r,fC,UTe,t8r,a8r,qY,n8r,s8r,l8r,mC,JTe,i8r,d8r,jY,c8r,f8r,m8r,gC,YTe,g8r,h8r,DY,p8r,_8r,u8r,hC,KTe,b8r,v8r,GY,F8r,T8r,M8r,pC,ZTe,E8r,C8r,OY,w8r,A8r,L8r,_C,eMe,y8r,x8r,VY,$8r,k8r,S8r,uC,oMe,R8r,P8r,XY,B8r,I8r,N8r,bC,rMe,q8r,j8r,zY,D8r,G8r,O8r,vC,tMe,V8r,X8r,QY,z8r,Q8r,W8r,FC,QVe,Ac,TC,aMe,cx,H8r,nMe,U8r,WVe,ir,fx,J8r,Lc,Y8r,WY,K8r,Z8r,HY,e9r,o9r,r9r,mx,t9r,sMe,a9r,n9r,s9r,qt,gx,l9r,lMe,i9r,d9r,yc,c9r,iMe,f9r,m9r,UY,g9r,h9r,p9r,MC,_9r,Ir,hx,u9r,dMe,b9r,v9r,hn,F9r,cMe,T9r,M9r,fMe,E9r,C9r,mMe,w9r,A9r,L9r,px,EC,gMe,y9r,x9r,JY,$9r,k9r,S9r,CC,hMe,R9r,P9r,YY,B9r,I9r,N9r,wC,HVe,xc,AC,pMe,_x,q9r,_Me,j9r,UVe,dr,ux,D9r,$c,G9r,KY,O9r,V9r,ZY,X9r,z9r,Q9r,bx,W9r,uMe,H9r,U9r,J9r,jt,vx,Y9r,bMe,K9r,Z9r,kc,exr,vMe,oxr,rxr,eK,txr,axr,nxr,LC,sxr,Nr,Fx,lxr,FMe,ixr,dxr,pn,cxr,TMe,fxr,mxr,MMe,gxr,hxr,EMe,pxr,_xr,uxr,CMe,yC,wMe,bxr,vxr,oK,Fxr,Txr,Mxr,xC,JVe,Sc,$C,AMe,Tx,Exr,LMe,Cxr,YVe,cr,Mx,wxr,Rc,Axr,rK,Lxr,yxr,tK,xxr,$xr,kxr,Ex,Sxr,yMe,Rxr,Pxr,Bxr,Dt,Cx,Ixr,xMe,Nxr,qxr,Pc,jxr,$Me,Dxr,Gxr,aK,Oxr,Vxr,Xxr,kC,zxr,qr,wx,Qxr,kMe,Wxr,Hxr,_n,Uxr,SMe,Jxr,Yxr,RMe,Kxr,Zxr,PMe,e$r,o$r,r$r,de,SC,BMe,t$r,a$r,nK,n$r,s$r,l$r,RC,IMe,i$r,d$r,sK,c$r,f$r,m$r,PC,NMe,g$r,h$r,lK,p$r,_$r,u$r,BC,qMe,b$r,v$r,iK,F$r,T$r,M$r,IC,jMe,E$r,C$r,dK,w$r,A$r,L$r,NC,DMe,y$r,x$r,cK,$$r,k$r,S$r,qC,GMe,R$r,P$r,fK,B$r,I$r,N$r,jC,OMe,q$r,j$r,mK,D$r,G$r,O$r,DC,VMe,V$r,X$r,gK,z$r,Q$r,W$r,GC,XMe,H$r,U$r,hK,J$r,Y$r,K$r,OC,zMe,Z$r,ekr,pK,okr,rkr,tkr,VC,QMe,akr,nkr,_K,skr,lkr,ikr,XC,WMe,dkr,ckr,uK,fkr,mkr,gkr,zC,HMe,hkr,pkr,bK,_kr,ukr,bkr,QC,UMe,vkr,Fkr,vK,Tkr,Mkr,Ekr,WC,JMe,Ckr,wkr,FK,Akr,Lkr,ykr,HC,YMe,xkr,$kr,TK,kkr,Skr,Rkr,UC,KMe,Pkr,Bkr,MK,Ikr,Nkr,qkr,JC,ZMe,jkr,Dkr,EK,Gkr,Okr,Vkr,YC,eEe,Xkr,zkr,CK,Qkr,Wkr,Hkr,KC,KVe,Bc,ZC,oEe,Ax,Ukr,rEe,Jkr,ZVe,fr,Lx,Ykr,Ic,Kkr,wK,Zkr,eSr,AK,oSr,rSr,tSr,yx,aSr,tEe,nSr,sSr,lSr,Gt,xx,iSr,aEe,dSr,cSr,Nc,fSr,nEe,mSr,gSr,LK,hSr,pSr,_Sr,e5,uSr,jr,$x,bSr,sEe,vSr,FSr,un,TSr,lEe,MSr,ESr,iEe,CSr,wSr,dEe,ASr,LSr,ySr,ce,o5,cEe,xSr,$Sr,yK,kSr,SSr,RSr,r5,fEe,PSr,BSr,xK,ISr,NSr,qSr,t5,mEe,jSr,DSr,$K,GSr,OSr,VSr,a5,gEe,XSr,zSr,kK,QSr,WSr,HSr,n5,hEe,USr,JSr,SK,YSr,KSr,ZSr,s5,pEe,eRr,oRr,RK,rRr,tRr,aRr,l5,_Ee,nRr,sRr,PK,lRr,iRr,dRr,i5,uEe,cRr,fRr,BK,mRr,gRr,hRr,d5,bEe,pRr,_Rr,IK,uRr,bRr,vRr,c5,vEe,FRr,TRr,NK,MRr,ERr,CRr,f5,FEe,wRr,ARr,qK,LRr,yRr,xRr,m5,TEe,$Rr,kRr,jK,SRr,RRr,PRr,g5,MEe,BRr,IRr,DK,NRr,qRr,jRr,h5,EEe,DRr,GRr,GK,ORr,VRr,XRr,p5,CEe,zRr,QRr,OK,WRr,HRr,URr,_5,wEe,JRr,YRr,VK,KRr,ZRr,ePr,u5,AEe,oPr,rPr,XK,tPr,aPr,nPr,b5,LEe,sPr,lPr,zK,iPr,dPr,cPr,v5,yEe,fPr,mPr,QK,gPr,hPr,pPr,F5,xEe,_Pr,uPr,WK,bPr,vPr,FPr,T5,eXe,qc,M5,$Ee,kx,TPr,kEe,MPr,oXe,mr,Sx,EPr,jc,CPr,HK,wPr,APr,UK,LPr,yPr,xPr,Rx,$Pr,SEe,kPr,SPr,RPr,Ot,Px,PPr,REe,BPr,IPr,Dc,NPr,PEe,qPr,jPr,JK,DPr,GPr,OPr,E5,VPr,Dr,Bx,XPr,BEe,zPr,QPr,bn,WPr,IEe,HPr,UPr,NEe,JPr,YPr,qEe,KPr,ZPr,eBr,jEe,C5,DEe,oBr,rBr,YK,tBr,aBr,nBr,w5,rXe,Gc,A5,GEe,Ix,sBr,OEe,lBr,tXe,gr,Nx,iBr,Oc,dBr,KK,cBr,fBr,ZK,mBr,gBr,hBr,qx,pBr,VEe,_Br,uBr,bBr,Vt,jx,vBr,XEe,FBr,TBr,Vc,MBr,zEe,EBr,CBr,eZ,wBr,ABr,LBr,L5,yBr,Gr,Dx,xBr,QEe,$Br,kBr,vn,SBr,WEe,RBr,PBr,HEe,BBr,IBr,UEe,NBr,qBr,jBr,JEe,y5,YEe,DBr,GBr,oZ,OBr,VBr,XBr,x5,aXe,Xc,$5,KEe,Gx,zBr,ZEe,QBr,nXe,hr,Ox,WBr,zc,HBr,rZ,UBr,JBr,tZ,YBr,KBr,ZBr,Vx,eIr,eCe,oIr,rIr,tIr,Xt,Xx,aIr,oCe,nIr,sIr,Qc,lIr,rCe,iIr,dIr,aZ,cIr,fIr,mIr,k5,gIr,Or,zx,hIr,tCe,pIr,_Ir,Fn,uIr,aCe,bIr,vIr,nCe,FIr,TIr,sCe,MIr,EIr,CIr,oe,S5,lCe,wIr,AIr,nZ,LIr,yIr,xIr,R5,iCe,$Ir,kIr,sZ,SIr,RIr,PIr,P5,dCe,BIr,IIr,lZ,NIr,qIr,jIr,B5,cCe,DIr,GIr,iZ,OIr,VIr,XIr,I5,fCe,zIr,QIr,dZ,WIr,HIr,UIr,N5,mCe,JIr,YIr,cZ,KIr,ZIr,eNr,q5,gCe,oNr,rNr,fZ,tNr,aNr,nNr,j5,hCe,sNr,lNr,mZ,iNr,dNr,cNr,D5,pCe,fNr,mNr,gZ,gNr,hNr,pNr,G5,_Ce,_Nr,uNr,hZ,bNr,vNr,FNr,O5,uCe,TNr,MNr,pZ,ENr,CNr,wNr,V5,bCe,ANr,LNr,_Z,yNr,xNr,$Nr,X5,vCe,kNr,SNr,uZ,RNr,PNr,BNr,z5,FCe,INr,NNr,bZ,qNr,jNr,DNr,Q5,TCe,GNr,ONr,vZ,VNr,XNr,zNr,W5,MCe,QNr,WNr,FZ,HNr,UNr,JNr,H5,ECe,YNr,KNr,TZ,ZNr,eqr,oqr,U5,CCe,rqr,tqr,MZ,aqr,nqr,sqr,J5,wCe,lqr,iqr,EZ,dqr,cqr,fqr,Y5,ACe,mqr,gqr,CZ,hqr,pqr,_qr,K5,LCe,uqr,bqr,wZ,vqr,Fqr,Tqr,Z5,yCe,Mqr,Eqr,AZ,Cqr,wqr,Aqr,e0,xCe,Lqr,yqr,LZ,xqr,$qr,kqr,o0,$Ce,Sqr,Rqr,yZ,Pqr,Bqr,Iqr,r0,kCe,Nqr,qqr,xZ,jqr,Dqr,Gqr,t0,SCe,Oqr,Vqr,$Z,Xqr,zqr,Qqr,a0,RCe,Wqr,Hqr,kZ,Uqr,Jqr,Yqr,n0,sXe,Wc,s0,PCe,Qx,Kqr,BCe,Zqr,lXe,pr,Wx,ejr,Hc,ojr,SZ,rjr,tjr,RZ,ajr,njr,sjr,Hx,ljr,ICe,ijr,djr,cjr,zt,Ux,fjr,NCe,mjr,gjr,Uc,hjr,qCe,pjr,_jr,PZ,ujr,bjr,vjr,l0,Fjr,Vr,Jx,Tjr,jCe,Mjr,Ejr,Tn,Cjr,DCe,wjr,Ajr,GCe,Ljr,yjr,OCe,xjr,$jr,kjr,xe,i0,VCe,Sjr,Rjr,BZ,Pjr,Bjr,Ijr,d0,XCe,Njr,qjr,IZ,jjr,Djr,Gjr,c0,zCe,Ojr,Vjr,NZ,Xjr,zjr,Qjr,f0,QCe,Wjr,Hjr,qZ,Ujr,Jjr,Yjr,m0,WCe,Kjr,Zjr,jZ,eDr,oDr,rDr,g0,HCe,tDr,aDr,DZ,nDr,sDr,lDr,h0,UCe,iDr,dDr,GZ,cDr,fDr,mDr,p0,JCe,gDr,hDr,OZ,pDr,_Dr,uDr,_0,YCe,bDr,vDr,VZ,FDr,TDr,MDr,u0,KCe,EDr,CDr,XZ,wDr,ADr,LDr,b0,iXe,Jc,v0,ZCe,Yx,yDr,e5e,xDr,dXe,_r,Kx,$Dr,Yc,kDr,zZ,SDr,RDr,QZ,PDr,BDr,IDr,Zx,NDr,o5e,qDr,jDr,DDr,Qt,e$,GDr,r5e,ODr,VDr,Kc,XDr,t5e,zDr,QDr,WZ,WDr,HDr,UDr,F0,JDr,Xr,o$,YDr,a5e,KDr,ZDr,Mn,eGr,n5e,oGr,rGr,s5e,tGr,aGr,l5e,nGr,sGr,lGr,Ee,T0,i5e,iGr,dGr,HZ,cGr,fGr,mGr,M0,d5e,gGr,hGr,UZ,pGr,_Gr,uGr,E0,c5e,bGr,vGr,JZ,FGr,TGr,MGr,C0,f5e,EGr,CGr,YZ,wGr,AGr,LGr,w0,m5e,yGr,xGr,KZ,$Gr,kGr,SGr,A0,g5e,RGr,PGr,ZZ,BGr,IGr,NGr,L0,h5e,qGr,jGr,eee,DGr,GGr,OGr,y0,p5e,VGr,XGr,oee,zGr,QGr,WGr,x0,_5e,HGr,UGr,ree,JGr,YGr,KGr,$0,u5e,ZGr,eOr,tee,oOr,rOr,tOr,k0,b5e,aOr,nOr,aee,sOr,lOr,iOr,S0,v5e,dOr,cOr,nee,fOr,mOr,gOr,R0,F5e,hOr,pOr,see,_Or,uOr,bOr,P0,cXe,Zc,B0,T5e,r$,vOr,M5e,FOr,fXe,ur,t$,TOr,ef,MOr,lee,EOr,COr,iee,wOr,AOr,LOr,a$,yOr,E5e,xOr,$Or,kOr,Wt,n$,SOr,C5e,ROr,POr,of,BOr,w5e,IOr,NOr,dee,qOr,jOr,DOr,I0,GOr,zr,s$,OOr,A5e,VOr,XOr,En,zOr,L5e,QOr,WOr,y5e,HOr,UOr,x5e,JOr,YOr,KOr,$e,N0,$5e,ZOr,eVr,cee,oVr,rVr,tVr,q0,k5e,aVr,nVr,fee,sVr,lVr,iVr,j0,S5e,dVr,cVr,mee,fVr,mVr,gVr,D0,R5e,hVr,pVr,gee,_Vr,uVr,bVr,G0,P5e,vVr,FVr,hee,TVr,MVr,EVr,O0,B5e,CVr,wVr,pee,AVr,LVr,yVr,V0,I5e,xVr,$Vr,_ee,kVr,SVr,RVr,X0,N5e,PVr,BVr,uee,IVr,NVr,qVr,z0,q5e,jVr,DVr,bee,GVr,OVr,VVr,Q0,j5e,XVr,zVr,vee,QVr,WVr,HVr,W0,mXe,rf,H0,D5e,l$,UVr,G5e,JVr,gXe,br,i$,YVr,tf,KVr,Fee,ZVr,eXr,Tee,oXr,rXr,tXr,d$,aXr,O5e,nXr,sXr,lXr,Ht,c$,iXr,V5e,dXr,cXr,af,fXr,X5e,mXr,gXr,Mee,hXr,pXr,_Xr,U0,uXr,Qr,f$,bXr,z5e,vXr,FXr,Cn,TXr,Q5e,MXr,EXr,W5e,CXr,wXr,H5e,AXr,LXr,yXr,ke,J0,U5e,xXr,$Xr,Eee,kXr,SXr,RXr,Y0,J5e,PXr,BXr,Cee,IXr,NXr,qXr,K0,Y5e,jXr,DXr,wee,GXr,OXr,VXr,Z0,K5e,XXr,zXr,Aee,QXr,WXr,HXr,ew,Z5e,UXr,JXr,Lee,YXr,KXr,ZXr,ow,e0e,ezr,ozr,yee,rzr,tzr,azr,rw,o0e,nzr,szr,xee,lzr,izr,dzr,tw,r0e,czr,fzr,$ee,mzr,gzr,hzr,aw,t0e,pzr,_zr,kee,uzr,bzr,vzr,nw,a0e,Fzr,Tzr,See,Mzr,Ezr,Czr,sw,hXe,nf,lw,n0e,m$,wzr,s0e,Azr,pXe,vr,g$,Lzr,sf,yzr,Ree,xzr,$zr,Pee,kzr,Szr,Rzr,h$,Pzr,l0e,Bzr,Izr,Nzr,Ut,p$,qzr,i0e,jzr,Dzr,lf,Gzr,d0e,Ozr,Vzr,Bee,Xzr,zzr,Qzr,iw,Wzr,Wr,_$,Hzr,c0e,Uzr,Jzr,wn,Yzr,f0e,Kzr,Zzr,m0e,eQr,oQr,g0e,rQr,tQr,aQr,Se,dw,h0e,nQr,sQr,Iee,lQr,iQr,dQr,cw,p0e,cQr,fQr,Nee,mQr,gQr,hQr,fw,_0e,pQr,_Qr,qee,uQr,bQr,vQr,mw,u0e,FQr,TQr,jee,MQr,EQr,CQr,gw,b0e,wQr,AQr,Dee,LQr,yQr,xQr,hw,v0e,$Qr,kQr,Gee,SQr,RQr,PQr,pw,F0e,BQr,IQr,Oee,NQr,qQr,jQr,_w,T0e,DQr,GQr,Vee,OQr,VQr,XQr,uw,M0e,zQr,QQr,Xee,WQr,HQr,UQr,bw,E0e,JQr,YQr,zee,KQr,ZQr,eWr,vw,_Xe,df,Fw,C0e,u$,oWr,w0e,rWr,uXe,Fr,b$,tWr,cf,aWr,Qee,nWr,sWr,Wee,lWr,iWr,dWr,v$,cWr,A0e,fWr,mWr,gWr,Jt,F$,hWr,L0e,pWr,_Wr,ff,uWr,y0e,bWr,vWr,Hee,FWr,TWr,MWr,Tw,EWr,Hr,T$,CWr,x0e,wWr,AWr,An,LWr,$0e,yWr,xWr,k0e,$Wr,kWr,S0e,SWr,RWr,PWr,Re,Mw,R0e,BWr,IWr,Uee,NWr,qWr,jWr,Ew,P0e,DWr,GWr,Jee,OWr,VWr,XWr,Cw,B0e,zWr,QWr,Yee,WWr,HWr,UWr,ww,I0e,JWr,YWr,Kee,KWr,ZWr,eHr,Aw,N0e,oHr,rHr,Zee,tHr,aHr,nHr,Lw,q0e,sHr,lHr,eoe,iHr,dHr,cHr,yw,j0e,fHr,mHr,ooe,gHr,hHr,pHr,xw,D0e,_Hr,uHr,roe,bHr,vHr,FHr,$w,G0e,THr,MHr,toe,EHr,CHr,wHr,kw,O0e,AHr,LHr,aoe,yHr,xHr,$Hr,Sw,bXe,mf,Rw,V0e,M$,kHr,X0e,SHr,vXe,Tr,E$,RHr,gf,PHr,noe,BHr,IHr,soe,NHr,qHr,jHr,C$,DHr,z0e,GHr,OHr,VHr,Yt,w$,XHr,Q0e,zHr,QHr,hf,WHr,W0e,HHr,UHr,loe,JHr,YHr,KHr,Pw,ZHr,Ur,A$,eUr,H0e,oUr,rUr,Ln,tUr,U0e,aUr,nUr,J0e,sUr,lUr,Y0e,iUr,dUr,cUr,Ve,Bw,K0e,fUr,mUr,ioe,gUr,hUr,pUr,Iw,Z0e,_Ur,uUr,doe,bUr,vUr,FUr,Nw,ewe,TUr,MUr,coe,EUr,CUr,wUr,qw,owe,AUr,LUr,foe,yUr,xUr,$Ur,jw,rwe,kUr,SUr,moe,RUr,PUr,BUr,Dw,twe,IUr,NUr,goe,qUr,jUr,DUr,Gw,awe,GUr,OUr,hoe,VUr,XUr,zUr,Ow,nwe,QUr,WUr,poe,HUr,UUr,JUr,Vw,FXe,pf,Xw,swe,L$,YUr,lwe,KUr,TXe,Mr,y$,ZUr,_f,eJr,_oe,oJr,rJr,uoe,tJr,aJr,nJr,x$,sJr,iwe,lJr,iJr,dJr,Kt,$$,cJr,dwe,fJr,mJr,uf,gJr,cwe,hJr,pJr,boe,_Jr,uJr,bJr,zw,vJr,Jr,k$,FJr,fwe,TJr,MJr,yn,EJr,mwe,CJr,wJr,gwe,AJr,LJr,hwe,yJr,xJr,$Jr,Xe,Qw,pwe,kJr,SJr,voe,RJr,PJr,BJr,Ww,_we,IJr,NJr,Foe,qJr,jJr,DJr,Hw,uwe,GJr,OJr,Toe,VJr,XJr,zJr,Uw,bwe,QJr,WJr,Moe,HJr,UJr,JJr,Jw,vwe,YJr,KJr,Eoe,ZJr,eYr,oYr,Yw,Fwe,rYr,tYr,Coe,aYr,nYr,sYr,Kw,Twe,lYr,iYr,woe,dYr,cYr,fYr,Zw,Mwe,mYr,gYr,Aoe,hYr,pYr,_Yr,eA,MXe,bf,oA,Ewe,S$,uYr,Cwe,bYr,EXe,Er,R$,vYr,vf,FYr,Loe,TYr,MYr,yoe,EYr,CYr,wYr,P$,AYr,wwe,LYr,yYr,xYr,Zt,B$,$Yr,Awe,kYr,SYr,Ff,RYr,Lwe,PYr,BYr,xoe,IYr,NYr,qYr,rA,jYr,Yr,I$,DYr,ywe,GYr,OYr,xn,VYr,xwe,XYr,zYr,$we,QYr,WYr,kwe,HYr,UYr,JYr,Swe,tA,Rwe,YYr,KYr,$oe,ZYr,eKr,oKr,aA,CXe,Tf,nA,Pwe,N$,rKr,Bwe,tKr,wXe,Cr,q$,aKr,Mf,nKr,koe,sKr,lKr,Soe,iKr,dKr,cKr,j$,fKr,Iwe,mKr,gKr,hKr,ea,D$,pKr,Nwe,_Kr,uKr,Ef,bKr,qwe,vKr,FKr,Roe,TKr,MKr,EKr,sA,CKr,Kr,G$,wKr,jwe,AKr,LKr,$n,yKr,Dwe,xKr,$Kr,Gwe,kKr,SKr,Owe,RKr,PKr,BKr,O$,lA,Vwe,IKr,NKr,Poe,qKr,jKr,DKr,iA,Xwe,GKr,OKr,Boe,VKr,XKr,zKr,dA,AXe,Cf,cA,zwe,V$,QKr,Qwe,WKr,LXe,wr,X$,HKr,wf,UKr,Ioe,JKr,YKr,Noe,KKr,ZKr,eZr,z$,oZr,Wwe,rZr,tZr,aZr,oa,Q$,nZr,Hwe,sZr,lZr,Af,iZr,Uwe,dZr,cZr,qoe,fZr,mZr,gZr,fA,hZr,Zr,W$,pZr,Jwe,_Zr,uZr,kn,bZr,Ywe,vZr,FZr,Kwe,TZr,MZr,Zwe,EZr,CZr,wZr,eAe,mA,oAe,AZr,LZr,joe,yZr,xZr,$Zr,gA,yXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),qL=new re({}),jL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new kZr({props:{warning:!0,$$slots:{default:[EOt]},$$scope:{ctx:$}}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/configuration_auto.py#L604"}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/configuration_auto.py#L627"}}),zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/configuration_auto.py#L750"}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/tokenization_auto.py#L402"}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17437/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/tokenization_auto.py#L416"}}),Lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[wOt]},$$scope:{ctx:$}}}),YL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/tokenization_auto.py#L615"}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17437/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),dp=new kZr({props:{$$slots:{default:[AOt]},$$scope:{ctx:$}}}),cp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[LOt]},$$scope:{ctx:$}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/processing_auto.py#L89"}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/processing_auto.py#L103"}}),kp=new kZr({props:{$$slots:{default:[yOt]},$$scope:{ctx:$}}}),Sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[xOt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/processing_auto.py#L256"}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L771"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Bp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[$Ot]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[kOt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L778"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[SOt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),k1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ROt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L793"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),R1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[POt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BOt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L800"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[IOt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),l2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[NOt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L807"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),d2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qOt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),y2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jOt]},$$scope:{ctx:$}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L816"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),$2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[DOt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[GOt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L861"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),xb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[OOt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VOt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L868"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XOt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zOt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L854"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L825"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[HOt]},$$scope:{ctx:$}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L832"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JOt]},$$scope:{ctx:$}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),f8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L877"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),_8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L916"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L843"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L923"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L946"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),I8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L930"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),G8=new re({}),O8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L937"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),W8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L955"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L962"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L909"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L884"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L891"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_auto.py#L900"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lXt]},$$scope:{ctx:$}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[iXt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dXt]},$$scope:{ctx:$}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cXt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fXt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[mXt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gXt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hXt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pXt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_Xt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uXt]},$$scope:{ctx:$}}}),N$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[bXt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vXt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L389"}}),fA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[FXt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17437/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17437/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17437/src/transformers/models/auto/auto_factory.py#L417"}}),gA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[TXt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ei=o("Auto Classes"),$f=l(),at=a("p"),Ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=a("code"),PL=o("from_pretrained()"),kf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ai=o("Instantiating one of "),Rn=a("a"),BL=o("AutoConfig"),Pn=o(", "),Bn=a("a"),IL=o("AutoModel"),Li=o(`, and
`),In=a("a"),NL=o("AutoTokenizer"),yi=o(" will directly create a class of the relevant architecture. For instance"),Sf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),gS=o("will create a model that is an instance of "),xi=a("a"),hS=o("BertModel"),pS=o("."),Co=l(),$a=a("p"),_S=o("There is one class of "),Rf=a("code"),uS=o("AutoModel"),qQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),EOe=l(),$i=a("h2"),Pf=a("a"),Pte=a("span"),F(qL.$$.fragment),jQe=l(),Bte=a("span"),DQe=o("Extending the Auto Classes"),COe=l(),Nn=a("p"),GQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ite=a("code"),OQe=o("NewModel"),VQe=o(", make sure you have a "),Nte=a("code"),XQe=o("NewModelConfig"),zQe=o(` then you can add those to the auto
classes like this:`),wOe=l(),F(jL.$$.fragment),AOe=l(),bS=a("p"),QQe=o("You will then be able to use the auto classes like you would usually do!"),LOe=l(),F(Bf.$$.fragment),yOe=l(),ki=a("h2"),If=a("a"),qte=a("span"),F(DL.$$.fragment),WQe=l(),jte=a("span"),HQe=o("AutoConfig"),xOe=l(),wo=a("div"),F(GL.$$.fragment),UQe=l(),OL=a("p"),JQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),vS=a("a"),YQe=o("from_pretrained()"),KQe=o(" class method."),ZQe=l(),VL=a("p"),eWe=o("This class cannot be instantiated directly using "),Dte=a("code"),oWe=o("__init__()"),rWe=o(" (throws an error)."),tWe=l(),Ar=a("div"),F(XL.$$.fragment),aWe=l(),Gte=a("p"),nWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sWe=l(),Si=a("p"),lWe=o("The configuration class to instantiate is selected based on the "),Ote=a("code"),iWe=o("model_type"),dWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vte=a("code"),cWe=o("pretrained_model_name_or_path"),fWe=o(":"),mWe=l(),A=a("ul"),Nf=a("li"),Xte=a("strong"),gWe=o("albert"),hWe=o(" \u2014 "),FS=a("a"),pWe=o("AlbertConfig"),_We=o(" (ALBERT model)"),uWe=l(),qf=a("li"),zte=a("strong"),bWe=o("bart"),vWe=o(" \u2014 "),TS=a("a"),FWe=o("BartConfig"),TWe=o(" (BART model)"),MWe=l(),jf=a("li"),Qte=a("strong"),EWe=o("beit"),CWe=o(" \u2014 "),MS=a("a"),wWe=o("BeitConfig"),AWe=o(" (BEiT model)"),LWe=l(),Df=a("li"),Wte=a("strong"),yWe=o("bert"),xWe=o(" \u2014 "),ES=a("a"),$We=o("BertConfig"),kWe=o(" (BERT model)"),SWe=l(),Gf=a("li"),Hte=a("strong"),RWe=o("bert-generation"),PWe=o(" \u2014 "),CS=a("a"),BWe=o("BertGenerationConfig"),IWe=o(" (Bert Generation model)"),NWe=l(),Of=a("li"),Ute=a("strong"),qWe=o("big_bird"),jWe=o(" \u2014 "),wS=a("a"),DWe=o("BigBirdConfig"),GWe=o(" (BigBird model)"),OWe=l(),Vf=a("li"),Jte=a("strong"),VWe=o("bigbird_pegasus"),XWe=o(" \u2014 "),AS=a("a"),zWe=o("BigBirdPegasusConfig"),QWe=o(" (BigBird-Pegasus model)"),WWe=l(),Xf=a("li"),Yte=a("strong"),HWe=o("blenderbot"),UWe=o(" \u2014 "),LS=a("a"),JWe=o("BlenderbotConfig"),YWe=o(" (Blenderbot model)"),KWe=l(),zf=a("li"),Kte=a("strong"),ZWe=o("blenderbot-small"),eHe=o(" \u2014 "),yS=a("a"),oHe=o("BlenderbotSmallConfig"),rHe=o(" (BlenderbotSmall model)"),tHe=l(),Qf=a("li"),Zte=a("strong"),aHe=o("bloom"),nHe=o(" \u2014 "),xS=a("a"),sHe=o("BloomConfig"),lHe=o(" (BLOOM model)"),iHe=l(),Wf=a("li"),eae=a("strong"),dHe=o("camembert"),cHe=o(" \u2014 "),$S=a("a"),fHe=o("CamembertConfig"),mHe=o(" (CamemBERT model)"),gHe=l(),Hf=a("li"),oae=a("strong"),hHe=o("canine"),pHe=o(" \u2014 "),kS=a("a"),_He=o("CanineConfig"),uHe=o(" (CANINE model)"),bHe=l(),Uf=a("li"),rae=a("strong"),vHe=o("clip"),FHe=o(" \u2014 "),SS=a("a"),THe=o("CLIPConfig"),MHe=o(" (CLIP model)"),EHe=l(),Jf=a("li"),tae=a("strong"),CHe=o("codegen"),wHe=o(" \u2014 "),RS=a("a"),AHe=o("CodeGenConfig"),LHe=o(" (CodeGen model)"),yHe=l(),Yf=a("li"),aae=a("strong"),xHe=o("convbert"),$He=o(" \u2014 "),PS=a("a"),kHe=o("ConvBertConfig"),SHe=o(" (ConvBERT model)"),RHe=l(),Kf=a("li"),nae=a("strong"),PHe=o("convnext"),BHe=o(" \u2014 "),BS=a("a"),IHe=o("ConvNextConfig"),NHe=o(" (ConvNeXT model)"),qHe=l(),Zf=a("li"),sae=a("strong"),jHe=o("ctrl"),DHe=o(" \u2014 "),IS=a("a"),GHe=o("CTRLConfig"),OHe=o(" (CTRL model)"),VHe=l(),em=a("li"),lae=a("strong"),XHe=o("cvt"),zHe=o(" \u2014 "),NS=a("a"),QHe=o("CvtConfig"),WHe=o(" (CvT model)"),HHe=l(),om=a("li"),iae=a("strong"),UHe=o("data2vec-audio"),JHe=o(" \u2014 "),qS=a("a"),YHe=o("Data2VecAudioConfig"),KHe=o(" (Data2VecAudio model)"),ZHe=l(),rm=a("li"),dae=a("strong"),eUe=o("data2vec-text"),oUe=o(" \u2014 "),jS=a("a"),rUe=o("Data2VecTextConfig"),tUe=o(" (Data2VecText model)"),aUe=l(),tm=a("li"),cae=a("strong"),nUe=o("data2vec-vision"),sUe=o(" \u2014 "),DS=a("a"),lUe=o("Data2VecVisionConfig"),iUe=o(" (Data2VecVision model)"),dUe=l(),am=a("li"),fae=a("strong"),cUe=o("deberta"),fUe=o(" \u2014 "),GS=a("a"),mUe=o("DebertaConfig"),gUe=o(" (DeBERTa model)"),hUe=l(),nm=a("li"),mae=a("strong"),pUe=o("deberta-v2"),_Ue=o(" \u2014 "),OS=a("a"),uUe=o("DebertaV2Config"),bUe=o(" (DeBERTa-v2 model)"),vUe=l(),sm=a("li"),gae=a("strong"),FUe=o("decision_transformer"),TUe=o(" \u2014 "),VS=a("a"),MUe=o("DecisionTransformerConfig"),EUe=o(" (Decision Transformer model)"),CUe=l(),lm=a("li"),hae=a("strong"),wUe=o("deit"),AUe=o(" \u2014 "),XS=a("a"),LUe=o("DeiTConfig"),yUe=o(" (DeiT model)"),xUe=l(),im=a("li"),pae=a("strong"),$Ue=o("detr"),kUe=o(" \u2014 "),zS=a("a"),SUe=o("DetrConfig"),RUe=o(" (DETR model)"),PUe=l(),dm=a("li"),_ae=a("strong"),BUe=o("distilbert"),IUe=o(" \u2014 "),QS=a("a"),NUe=o("DistilBertConfig"),qUe=o(" (DistilBERT model)"),jUe=l(),cm=a("li"),uae=a("strong"),DUe=o("dpr"),GUe=o(" \u2014 "),WS=a("a"),OUe=o("DPRConfig"),VUe=o(" (DPR model)"),XUe=l(),fm=a("li"),bae=a("strong"),zUe=o("dpt"),QUe=o(" \u2014 "),HS=a("a"),WUe=o("DPTConfig"),HUe=o(" (DPT model)"),UUe=l(),mm=a("li"),vae=a("strong"),JUe=o("electra"),YUe=o(" \u2014 "),US=a("a"),KUe=o("ElectraConfig"),ZUe=o(" (ELECTRA model)"),eJe=l(),gm=a("li"),Fae=a("strong"),oJe=o("encoder-decoder"),rJe=o(" \u2014 "),JS=a("a"),tJe=o("EncoderDecoderConfig"),aJe=o(" (Encoder decoder model)"),nJe=l(),hm=a("li"),Tae=a("strong"),sJe=o("flaubert"),lJe=o(" \u2014 "),YS=a("a"),iJe=o("FlaubertConfig"),dJe=o(" (FlauBERT model)"),cJe=l(),pm=a("li"),Mae=a("strong"),fJe=o("flava"),mJe=o(" \u2014 "),KS=a("a"),gJe=o("FlavaConfig"),hJe=o(" (FLAVA model)"),pJe=l(),_m=a("li"),Eae=a("strong"),_Je=o("fnet"),uJe=o(" \u2014 "),ZS=a("a"),bJe=o("FNetConfig"),vJe=o(" (FNet model)"),FJe=l(),um=a("li"),Cae=a("strong"),TJe=o("fsmt"),MJe=o(" \u2014 "),eR=a("a"),EJe=o("FSMTConfig"),CJe=o(" (FairSeq Machine-Translation model)"),wJe=l(),bm=a("li"),wae=a("strong"),AJe=o("funnel"),LJe=o(" \u2014 "),oR=a("a"),yJe=o("FunnelConfig"),xJe=o(" (Funnel Transformer model)"),$Je=l(),vm=a("li"),Aae=a("strong"),kJe=o("glpn"),SJe=o(" \u2014 "),rR=a("a"),RJe=o("GLPNConfig"),PJe=o(" (GLPN model)"),BJe=l(),Fm=a("li"),Lae=a("strong"),IJe=o("gpt2"),NJe=o(" \u2014 "),tR=a("a"),qJe=o("GPT2Config"),jJe=o(" (OpenAI GPT-2 model)"),DJe=l(),Tm=a("li"),yae=a("strong"),GJe=o("gpt_neo"),OJe=o(" \u2014 "),aR=a("a"),VJe=o("GPTNeoConfig"),XJe=o(" (GPT Neo model)"),zJe=l(),Mm=a("li"),xae=a("strong"),QJe=o("gpt_neox"),WJe=o(" \u2014 "),nR=a("a"),HJe=o("GPTNeoXConfig"),UJe=o(" (GPT NeoX model)"),JJe=l(),Em=a("li"),$ae=a("strong"),YJe=o("gptj"),KJe=o(" \u2014 "),sR=a("a"),ZJe=o("GPTJConfig"),eYe=o(" (GPT-J model)"),oYe=l(),Cm=a("li"),kae=a("strong"),rYe=o("groupvit"),tYe=o(" \u2014 "),lR=a("a"),aYe=o("GroupViTConfig"),nYe=o(" (GroupViT model)"),sYe=l(),wm=a("li"),Sae=a("strong"),lYe=o("hubert"),iYe=o(" \u2014 "),iR=a("a"),dYe=o("HubertConfig"),cYe=o(" (Hubert model)"),fYe=l(),Am=a("li"),Rae=a("strong"),mYe=o("ibert"),gYe=o(" \u2014 "),dR=a("a"),hYe=o("IBertConfig"),pYe=o(" (I-BERT model)"),_Ye=l(),Lm=a("li"),Pae=a("strong"),uYe=o("imagegpt"),bYe=o(" \u2014 "),cR=a("a"),vYe=o("ImageGPTConfig"),FYe=o(" (ImageGPT model)"),TYe=l(),ym=a("li"),Bae=a("strong"),MYe=o("layoutlm"),EYe=o(" \u2014 "),fR=a("a"),CYe=o("LayoutLMConfig"),wYe=o(" (LayoutLM model)"),AYe=l(),xm=a("li"),Iae=a("strong"),LYe=o("layoutlmv2"),yYe=o(" \u2014 "),mR=a("a"),xYe=o("LayoutLMv2Config"),$Ye=o(" (LayoutLMv2 model)"),kYe=l(),$m=a("li"),Nae=a("strong"),SYe=o("layoutlmv3"),RYe=o(" \u2014 "),gR=a("a"),PYe=o("LayoutLMv3Config"),BYe=o(" (LayoutLMv3 model)"),IYe=l(),km=a("li"),qae=a("strong"),NYe=o("led"),qYe=o(" \u2014 "),hR=a("a"),jYe=o("LEDConfig"),DYe=o(" (LED model)"),GYe=l(),Sm=a("li"),jae=a("strong"),OYe=o("levit"),VYe=o(" \u2014 "),pR=a("a"),XYe=o("LevitConfig"),zYe=o(" (LeViT model)"),QYe=l(),Rm=a("li"),Dae=a("strong"),WYe=o("longformer"),HYe=o(" \u2014 "),_R=a("a"),UYe=o("LongformerConfig"),JYe=o(" (Longformer model)"),YYe=l(),Pm=a("li"),Gae=a("strong"),KYe=o("longt5"),ZYe=o(" \u2014 "),uR=a("a"),eKe=o("LongT5Config"),oKe=o(" (LongT5 model)"),rKe=l(),Bm=a("li"),Oae=a("strong"),tKe=o("luke"),aKe=o(" \u2014 "),bR=a("a"),nKe=o("LukeConfig"),sKe=o(" (LUKE model)"),lKe=l(),Im=a("li"),Vae=a("strong"),iKe=o("lxmert"),dKe=o(" \u2014 "),vR=a("a"),cKe=o("LxmertConfig"),fKe=o(" (LXMERT model)"),mKe=l(),Nm=a("li"),Xae=a("strong"),gKe=o("m2m_100"),hKe=o(" \u2014 "),FR=a("a"),pKe=o("M2M100Config"),_Ke=o(" (M2M100 model)"),uKe=l(),qm=a("li"),zae=a("strong"),bKe=o("marian"),vKe=o(" \u2014 "),TR=a("a"),FKe=o("MarianConfig"),TKe=o(" (Marian model)"),MKe=l(),jm=a("li"),Qae=a("strong"),EKe=o("maskformer"),CKe=o(" \u2014 "),MR=a("a"),wKe=o("MaskFormerConfig"),AKe=o(" (MaskFormer model)"),LKe=l(),Dm=a("li"),Wae=a("strong"),yKe=o("mbart"),xKe=o(" \u2014 "),ER=a("a"),$Ke=o("MBartConfig"),kKe=o(" (mBART model)"),SKe=l(),Gm=a("li"),Hae=a("strong"),RKe=o("mctct"),PKe=o(" \u2014 "),CR=a("a"),BKe=o("MCTCTConfig"),IKe=o(" (M-CTC-T model)"),NKe=l(),Om=a("li"),Uae=a("strong"),qKe=o("megatron-bert"),jKe=o(" \u2014 "),wR=a("a"),DKe=o("MegatronBertConfig"),GKe=o(" (Megatron-BERT model)"),OKe=l(),Vm=a("li"),Jae=a("strong"),VKe=o("mobilebert"),XKe=o(" \u2014 "),AR=a("a"),zKe=o("MobileBertConfig"),QKe=o(" (MobileBERT model)"),WKe=l(),Xm=a("li"),Yae=a("strong"),HKe=o("mpnet"),UKe=o(" \u2014 "),LR=a("a"),JKe=o("MPNetConfig"),YKe=o(" (MPNet model)"),KKe=l(),zm=a("li"),Kae=a("strong"),ZKe=o("mt5"),eZe=o(" \u2014 "),yR=a("a"),oZe=o("MT5Config"),rZe=o(" (MT5 model)"),tZe=l(),Qm=a("li"),Zae=a("strong"),aZe=o("nezha"),nZe=o(" \u2014 "),xR=a("a"),sZe=o("NezhaConfig"),lZe=o(" (Nezha model)"),iZe=l(),Wm=a("li"),ene=a("strong"),dZe=o("nystromformer"),cZe=o(" \u2014 "),$R=a("a"),fZe=o("NystromformerConfig"),mZe=o(" (Nystr\xF6mformer model)"),gZe=l(),Hm=a("li"),one=a("strong"),hZe=o("openai-gpt"),pZe=o(" \u2014 "),kR=a("a"),_Ze=o("OpenAIGPTConfig"),uZe=o(" (OpenAI GPT model)"),bZe=l(),Um=a("li"),rne=a("strong"),vZe=o("opt"),FZe=o(" \u2014 "),SR=a("a"),TZe=o("OPTConfig"),MZe=o(" (OPT model)"),EZe=l(),Jm=a("li"),tne=a("strong"),CZe=o("pegasus"),wZe=o(" \u2014 "),RR=a("a"),AZe=o("PegasusConfig"),LZe=o(" (Pegasus model)"),yZe=l(),Ym=a("li"),ane=a("strong"),xZe=o("perceiver"),$Ze=o(" \u2014 "),PR=a("a"),kZe=o("PerceiverConfig"),SZe=o(" (Perceiver model)"),RZe=l(),Km=a("li"),nne=a("strong"),PZe=o("plbart"),BZe=o(" \u2014 "),BR=a("a"),IZe=o("PLBartConfig"),NZe=o(" (PLBart model)"),qZe=l(),Zm=a("li"),sne=a("strong"),jZe=o("poolformer"),DZe=o(" \u2014 "),IR=a("a"),GZe=o("PoolFormerConfig"),OZe=o(" (PoolFormer model)"),VZe=l(),eg=a("li"),lne=a("strong"),XZe=o("prophetnet"),zZe=o(" \u2014 "),NR=a("a"),QZe=o("ProphetNetConfig"),WZe=o(" (ProphetNet model)"),HZe=l(),og=a("li"),ine=a("strong"),UZe=o("qdqbert"),JZe=o(" \u2014 "),qR=a("a"),YZe=o("QDQBertConfig"),KZe=o(" (QDQBert model)"),ZZe=l(),rg=a("li"),dne=a("strong"),eeo=o("rag"),oeo=o(" \u2014 "),jR=a("a"),reo=o("RagConfig"),teo=o(" (RAG model)"),aeo=l(),tg=a("li"),cne=a("strong"),neo=o("realm"),seo=o(" \u2014 "),DR=a("a"),leo=o("RealmConfig"),ieo=o(" (REALM model)"),deo=l(),ag=a("li"),fne=a("strong"),ceo=o("reformer"),feo=o(" \u2014 "),GR=a("a"),meo=o("ReformerConfig"),geo=o(" (Reformer model)"),heo=l(),ng=a("li"),mne=a("strong"),peo=o("regnet"),_eo=o(" \u2014 "),OR=a("a"),ueo=o("RegNetConfig"),beo=o(" (RegNet model)"),veo=l(),sg=a("li"),gne=a("strong"),Feo=o("rembert"),Teo=o(" \u2014 "),VR=a("a"),Meo=o("RemBertConfig"),Eeo=o(" (RemBERT model)"),Ceo=l(),lg=a("li"),hne=a("strong"),weo=o("resnet"),Aeo=o(" \u2014 "),XR=a("a"),Leo=o("ResNetConfig"),yeo=o(" (ResNet model)"),xeo=l(),ig=a("li"),pne=a("strong"),$eo=o("retribert"),keo=o(" \u2014 "),zR=a("a"),Seo=o("RetriBertConfig"),Reo=o(" (RetriBERT model)"),Peo=l(),dg=a("li"),_ne=a("strong"),Beo=o("roberta"),Ieo=o(" \u2014 "),QR=a("a"),Neo=o("RobertaConfig"),qeo=o(" (RoBERTa model)"),jeo=l(),cg=a("li"),une=a("strong"),Deo=o("roformer"),Geo=o(" \u2014 "),WR=a("a"),Oeo=o("RoFormerConfig"),Veo=o(" (RoFormer model)"),Xeo=l(),fg=a("li"),bne=a("strong"),zeo=o("segformer"),Qeo=o(" \u2014 "),HR=a("a"),Weo=o("SegformerConfig"),Heo=o(" (SegFormer model)"),Ueo=l(),mg=a("li"),vne=a("strong"),Jeo=o("sew"),Yeo=o(" \u2014 "),UR=a("a"),Keo=o("SEWConfig"),Zeo=o(" (SEW model)"),eoo=l(),gg=a("li"),Fne=a("strong"),ooo=o("sew-d"),roo=o(" \u2014 "),JR=a("a"),too=o("SEWDConfig"),aoo=o(" (SEW-D model)"),noo=l(),hg=a("li"),Tne=a("strong"),soo=o("speech-encoder-decoder"),loo=o(" \u2014 "),YR=a("a"),ioo=o("SpeechEncoderDecoderConfig"),doo=o(" (Speech Encoder decoder model)"),coo=l(),pg=a("li"),Mne=a("strong"),foo=o("speech_to_text"),moo=o(" \u2014 "),KR=a("a"),goo=o("Speech2TextConfig"),hoo=o(" (Speech2Text model)"),poo=l(),_g=a("li"),Ene=a("strong"),_oo=o("speech_to_text_2"),uoo=o(" \u2014 "),ZR=a("a"),boo=o("Speech2Text2Config"),voo=o(" (Speech2Text2 model)"),Foo=l(),ug=a("li"),Cne=a("strong"),Too=o("splinter"),Moo=o(" \u2014 "),eP=a("a"),Eoo=o("SplinterConfig"),Coo=o(" (Splinter model)"),woo=l(),bg=a("li"),wne=a("strong"),Aoo=o("squeezebert"),Loo=o(" \u2014 "),oP=a("a"),yoo=o("SqueezeBertConfig"),xoo=o(" (SqueezeBERT model)"),$oo=l(),vg=a("li"),Ane=a("strong"),koo=o("swin"),Soo=o(" \u2014 "),rP=a("a"),Roo=o("SwinConfig"),Poo=o(" (Swin Transformer model)"),Boo=l(),Fg=a("li"),Lne=a("strong"),Ioo=o("t5"),Noo=o(" \u2014 "),tP=a("a"),qoo=o("T5Config"),joo=o(" (T5 model)"),Doo=l(),Tg=a("li"),yne=a("strong"),Goo=o("tapas"),Ooo=o(" \u2014 "),aP=a("a"),Voo=o("TapasConfig"),Xoo=o(" (TAPAS model)"),zoo=l(),Mg=a("li"),xne=a("strong"),Qoo=o("trajectory_transformer"),Woo=o(" \u2014 "),nP=a("a"),Hoo=o("TrajectoryTransformerConfig"),Uoo=o(" (Trajectory Transformer model)"),Joo=l(),Eg=a("li"),$ne=a("strong"),Yoo=o("transfo-xl"),Koo=o(" \u2014 "),sP=a("a"),Zoo=o("TransfoXLConfig"),ero=o(" (Transformer-XL model)"),oro=l(),Cg=a("li"),kne=a("strong"),rro=o("trocr"),tro=o(" \u2014 "),lP=a("a"),aro=o("TrOCRConfig"),nro=o(" (TrOCR model)"),sro=l(),wg=a("li"),Sne=a("strong"),lro=o("unispeech"),iro=o(" \u2014 "),iP=a("a"),dro=o("UniSpeechConfig"),cro=o(" (UniSpeech model)"),fro=l(),Ag=a("li"),Rne=a("strong"),mro=o("unispeech-sat"),gro=o(" \u2014 "),dP=a("a"),hro=o("UniSpeechSatConfig"),pro=o(" (UniSpeechSat model)"),_ro=l(),Lg=a("li"),Pne=a("strong"),uro=o("van"),bro=o(" \u2014 "),cP=a("a"),vro=o("VanConfig"),Fro=o(" (VAN model)"),Tro=l(),yg=a("li"),Bne=a("strong"),Mro=o("vilt"),Ero=o(" \u2014 "),fP=a("a"),Cro=o("ViltConfig"),wro=o(" (ViLT model)"),Aro=l(),xg=a("li"),Ine=a("strong"),Lro=o("vision-encoder-decoder"),yro=o(" \u2014 "),mP=a("a"),xro=o("VisionEncoderDecoderConfig"),$ro=o(" (Vision Encoder decoder model)"),kro=l(),$g=a("li"),Nne=a("strong"),Sro=o("vision-text-dual-encoder"),Rro=o(" \u2014 "),gP=a("a"),Pro=o("VisionTextDualEncoderConfig"),Bro=o(" (VisionTextDualEncoder model)"),Iro=l(),kg=a("li"),qne=a("strong"),Nro=o("visual_bert"),qro=o(" \u2014 "),hP=a("a"),jro=o("VisualBertConfig"),Dro=o(" (VisualBERT model)"),Gro=l(),Sg=a("li"),jne=a("strong"),Oro=o("vit"),Vro=o(" \u2014 "),pP=a("a"),Xro=o("ViTConfig"),zro=o(" (ViT model)"),Qro=l(),Rg=a("li"),Dne=a("strong"),Wro=o("vit_mae"),Hro=o(" \u2014 "),_P=a("a"),Uro=o("ViTMAEConfig"),Jro=o(" (ViTMAE model)"),Yro=l(),Pg=a("li"),Gne=a("strong"),Kro=o("wav2vec2"),Zro=o(" \u2014 "),uP=a("a"),eto=o("Wav2Vec2Config"),oto=o(" (Wav2Vec2 model)"),rto=l(),Bg=a("li"),One=a("strong"),tto=o("wav2vec2-conformer"),ato=o(" \u2014 "),bP=a("a"),nto=o("Wav2Vec2ConformerConfig"),sto=o(" (Wav2Vec2-Conformer model)"),lto=l(),Ig=a("li"),Vne=a("strong"),ito=o("wavlm"),dto=o(" \u2014 "),vP=a("a"),cto=o("WavLMConfig"),fto=o(" (WavLM model)"),mto=l(),Ng=a("li"),Xne=a("strong"),gto=o("xglm"),hto=o(" \u2014 "),FP=a("a"),pto=o("XGLMConfig"),_to=o(" (XGLM model)"),uto=l(),qg=a("li"),zne=a("strong"),bto=o("xlm"),vto=o(" \u2014 "),TP=a("a"),Fto=o("XLMConfig"),Tto=o(" (XLM model)"),Mto=l(),jg=a("li"),Qne=a("strong"),Eto=o("xlm-prophetnet"),Cto=o(" \u2014 "),MP=a("a"),wto=o("XLMProphetNetConfig"),Ato=o(" (XLM-ProphetNet model)"),Lto=l(),Dg=a("li"),Wne=a("strong"),yto=o("xlm-roberta"),xto=o(" \u2014 "),EP=a("a"),$to=o("XLMRobertaConfig"),kto=o(" (XLM-RoBERTa model)"),Sto=l(),Gg=a("li"),Hne=a("strong"),Rto=o("xlm-roberta-xl"),Pto=o(" \u2014 "),CP=a("a"),Bto=o("XLMRobertaXLConfig"),Ito=o(" (XLM-RoBERTa-XL model)"),Nto=l(),Og=a("li"),Une=a("strong"),qto=o("xlnet"),jto=o(" \u2014 "),wP=a("a"),Dto=o("XLNetConfig"),Gto=o(" (XLNet model)"),Oto=l(),Vg=a("li"),Jne=a("strong"),Vto=o("yolos"),Xto=o(" \u2014 "),AP=a("a"),zto=o("YolosConfig"),Qto=o(" (YOLOS model)"),Wto=l(),Xg=a("li"),Yne=a("strong"),Hto=o("yoso"),Uto=o(" \u2014 "),LP=a("a"),Jto=o("YosoConfig"),Yto=o(" (YOSO model)"),Kto=l(),F(zg.$$.fragment),Zto=l(),Qg=a("div"),F(zL.$$.fragment),eao=l(),Kne=a("p"),oao=o("Register a new configuration for this class."),$Oe=l(),Ri=a("h2"),Wg=a("a"),Zne=a("span"),F(QL.$$.fragment),rao=l(),ese=a("span"),tao=o("AutoTokenizer"),kOe=l(),Ao=a("div"),F(WL.$$.fragment),aao=l(),HL=a("p"),nao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yP=a("a"),sao=o("AutoTokenizer.from_pretrained()"),lao=o(" class method."),iao=l(),UL=a("p"),dao=o("This class cannot be instantiated directly using "),ose=a("code"),cao=o("__init__()"),fao=o(" (throws an error)."),mao=l(),Lr=a("div"),F(JL.$$.fragment),gao=l(),rse=a("p"),hao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pao=l(),ka=a("p"),_ao=o("The tokenizer class to instantiate is selected based on the "),tse=a("code"),uao=o("model_type"),bao=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),vao=o("pretrained_model_name_or_path"),Fao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=a("code"),Tao=o("pretrained_model_name_or_path"),Mao=o(":"),Eao=l(),k=a("ul"),qn=a("li"),sse=a("strong"),Cao=o("albert"),wao=o(" \u2014 "),xP=a("a"),Aao=o("AlbertTokenizer"),Lao=o(" or "),$P=a("a"),yao=o("AlbertTokenizerFast"),xao=o(" (ALBERT model)"),$ao=l(),jn=a("li"),lse=a("strong"),kao=o("bart"),Sao=o(" \u2014 "),kP=a("a"),Rao=o("BartTokenizer"),Pao=o(" or "),SP=a("a"),Bao=o("BartTokenizerFast"),Iao=o(" (BART model)"),Nao=l(),Dn=a("li"),ise=a("strong"),qao=o("barthez"),jao=o(" \u2014 "),RP=a("a"),Dao=o("BarthezTokenizer"),Gao=o(" or "),PP=a("a"),Oao=o("BarthezTokenizerFast"),Vao=o(" (BARThez model)"),Xao=l(),Hg=a("li"),dse=a("strong"),zao=o("bartpho"),Qao=o(" \u2014 "),BP=a("a"),Wao=o("BartphoTokenizer"),Hao=o(" (BARTpho model)"),Uao=l(),Gn=a("li"),cse=a("strong"),Jao=o("bert"),Yao=o(" \u2014 "),IP=a("a"),Kao=o("BertTokenizer"),Zao=o(" or "),NP=a("a"),eno=o("BertTokenizerFast"),ono=o(" (BERT model)"),rno=l(),Ug=a("li"),fse=a("strong"),tno=o("bert-generation"),ano=o(" \u2014 "),qP=a("a"),nno=o("BertGenerationTokenizer"),sno=o(" (Bert Generation model)"),lno=l(),Jg=a("li"),mse=a("strong"),ino=o("bert-japanese"),dno=o(" \u2014 "),jP=a("a"),cno=o("BertJapaneseTokenizer"),fno=o(" (BertJapanese model)"),mno=l(),Yg=a("li"),gse=a("strong"),gno=o("bertweet"),hno=o(" \u2014 "),DP=a("a"),pno=o("BertweetTokenizer"),_no=o(" (BERTweet model)"),uno=l(),On=a("li"),hse=a("strong"),bno=o("big_bird"),vno=o(" \u2014 "),GP=a("a"),Fno=o("BigBirdTokenizer"),Tno=o(" or "),OP=a("a"),Mno=o("BigBirdTokenizerFast"),Eno=o(" (BigBird model)"),Cno=l(),Vn=a("li"),pse=a("strong"),wno=o("bigbird_pegasus"),Ano=o(" \u2014 "),VP=a("a"),Lno=o("PegasusTokenizer"),yno=o(" or "),XP=a("a"),xno=o("PegasusTokenizerFast"),$no=o(" (BigBird-Pegasus model)"),kno=l(),Xn=a("li"),_se=a("strong"),Sno=o("blenderbot"),Rno=o(" \u2014 "),zP=a("a"),Pno=o("BlenderbotTokenizer"),Bno=o(" or "),QP=a("a"),Ino=o("BlenderbotTokenizerFast"),Nno=o(" (Blenderbot model)"),qno=l(),Kg=a("li"),use=a("strong"),jno=o("blenderbot-small"),Dno=o(" \u2014 "),WP=a("a"),Gno=o("BlenderbotSmallTokenizer"),Ono=o(" (BlenderbotSmall model)"),Vno=l(),Zg=a("li"),bse=a("strong"),Xno=o("bloom"),zno=o(" \u2014 "),HP=a("a"),Qno=o("BloomTokenizerFast"),Wno=o(" (BLOOM model)"),Hno=l(),eh=a("li"),vse=a("strong"),Uno=o("byt5"),Jno=o(" \u2014 "),UP=a("a"),Yno=o("ByT5Tokenizer"),Kno=o(" (ByT5 model)"),Zno=l(),zn=a("li"),Fse=a("strong"),eso=o("camembert"),oso=o(" \u2014 "),JP=a("a"),rso=o("CamembertTokenizer"),tso=o(" or "),YP=a("a"),aso=o("CamembertTokenizerFast"),nso=o(" (CamemBERT model)"),sso=l(),oh=a("li"),Tse=a("strong"),lso=o("canine"),iso=o(" \u2014 "),KP=a("a"),dso=o("CanineTokenizer"),cso=o(" (CANINE model)"),fso=l(),Qn=a("li"),Mse=a("strong"),mso=o("clip"),gso=o(" \u2014 "),ZP=a("a"),hso=o("CLIPTokenizer"),pso=o(" or "),eB=a("a"),_so=o("CLIPTokenizerFast"),uso=o(" (CLIP model)"),bso=l(),Wn=a("li"),Ese=a("strong"),vso=o("codegen"),Fso=o(" \u2014 "),oB=a("a"),Tso=o("CodeGenTokenizer"),Mso=o(" or "),rB=a("a"),Eso=o("CodeGenTokenizerFast"),Cso=o(" (CodeGen model)"),wso=l(),Hn=a("li"),Cse=a("strong"),Aso=o("convbert"),Lso=o(" \u2014 "),tB=a("a"),yso=o("ConvBertTokenizer"),xso=o(" or "),aB=a("a"),$so=o("ConvBertTokenizerFast"),kso=o(" (ConvBERT model)"),Sso=l(),Un=a("li"),wse=a("strong"),Rso=o("cpm"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("CpmTokenizer"),Iso=o(" or "),sB=a("a"),Nso=o("CpmTokenizerFast"),qso=o(" (CPM model)"),jso=l(),rh=a("li"),Ase=a("strong"),Dso=o("ctrl"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("CTRLTokenizer"),Vso=o(" (CTRL model)"),Xso=l(),Jn=a("li"),Lse=a("strong"),zso=o("data2vec-text"),Qso=o(" \u2014 "),iB=a("a"),Wso=o("RobertaTokenizer"),Hso=o(" or "),dB=a("a"),Uso=o("RobertaTokenizerFast"),Jso=o(" (Data2VecText model)"),Yso=l(),Yn=a("li"),yse=a("strong"),Kso=o("deberta"),Zso=o(" \u2014 "),cB=a("a"),elo=o("DebertaTokenizer"),olo=o(" or "),fB=a("a"),rlo=o("DebertaTokenizerFast"),tlo=o(" (DeBERTa model)"),alo=l(),Kn=a("li"),xse=a("strong"),nlo=o("deberta-v2"),slo=o(" \u2014 "),mB=a("a"),llo=o("DebertaV2Tokenizer"),ilo=o(" or "),gB=a("a"),dlo=o("DebertaV2TokenizerFast"),clo=o(" (DeBERTa-v2 model)"),flo=l(),Zn=a("li"),$se=a("strong"),mlo=o("distilbert"),glo=o(" \u2014 "),hB=a("a"),hlo=o("DistilBertTokenizer"),plo=o(" or "),pB=a("a"),_lo=o("DistilBertTokenizerFast"),ulo=o(" (DistilBERT model)"),blo=l(),es=a("li"),kse=a("strong"),vlo=o("dpr"),Flo=o(" \u2014 "),_B=a("a"),Tlo=o("DPRQuestionEncoderTokenizer"),Mlo=o(" or "),uB=a("a"),Elo=o("DPRQuestionEncoderTokenizerFast"),Clo=o(" (DPR model)"),wlo=l(),os=a("li"),Sse=a("strong"),Alo=o("electra"),Llo=o(" \u2014 "),bB=a("a"),ylo=o("ElectraTokenizer"),xlo=o(" or "),vB=a("a"),$lo=o("ElectraTokenizerFast"),klo=o(" (ELECTRA model)"),Slo=l(),th=a("li"),Rse=a("strong"),Rlo=o("flaubert"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("FlaubertTokenizer"),Ilo=o(" (FlauBERT model)"),Nlo=l(),rs=a("li"),Pse=a("strong"),qlo=o("fnet"),jlo=o(" \u2014 "),TB=a("a"),Dlo=o("FNetTokenizer"),Glo=o(" or "),MB=a("a"),Olo=o("FNetTokenizerFast"),Vlo=o(" (FNet model)"),Xlo=l(),ah=a("li"),Bse=a("strong"),zlo=o("fsmt"),Qlo=o(" \u2014 "),EB=a("a"),Wlo=o("FSMTTokenizer"),Hlo=o(" (FairSeq Machine-Translation model)"),Ulo=l(),ts=a("li"),Ise=a("strong"),Jlo=o("funnel"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("FunnelTokenizer"),Zlo=o(" or "),wB=a("a"),eio=o("FunnelTokenizerFast"),oio=o(" (Funnel Transformer model)"),rio=l(),as=a("li"),Nse=a("strong"),tio=o("gpt2"),aio=o(" \u2014 "),AB=a("a"),nio=o("GPT2Tokenizer"),sio=o(" or "),LB=a("a"),lio=o("GPT2TokenizerFast"),iio=o(" (OpenAI GPT-2 model)"),dio=l(),ns=a("li"),qse=a("strong"),cio=o("gpt_neo"),fio=o(" \u2014 "),yB=a("a"),mio=o("GPT2Tokenizer"),gio=o(" or "),xB=a("a"),hio=o("GPT2TokenizerFast"),pio=o(" (GPT Neo model)"),_io=l(),nh=a("li"),jse=a("strong"),uio=o("gpt_neox"),bio=o(" \u2014 "),$B=a("a"),vio=o("GPTNeoXTokenizerFast"),Fio=o(" (GPT NeoX model)"),Tio=l(),ss=a("li"),Dse=a("strong"),Mio=o("gptj"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("GPT2Tokenizer"),wio=o(" or "),SB=a("a"),Aio=o("GPT2TokenizerFast"),Lio=o(" (GPT-J model)"),yio=l(),ls=a("li"),Gse=a("strong"),xio=o("groupvit"),$io=o(" \u2014 "),RB=a("a"),kio=o("CLIPTokenizer"),Sio=o(" or "),PB=a("a"),Rio=o("CLIPTokenizerFast"),Pio=o(" (GroupViT model)"),Bio=l(),is=a("li"),Ose=a("strong"),Iio=o("herbert"),Nio=o(" \u2014 "),BB=a("a"),qio=o("HerbertTokenizer"),jio=o(" or "),IB=a("a"),Dio=o("HerbertTokenizerFast"),Gio=o(" (HerBERT model)"),Oio=l(),sh=a("li"),Vse=a("strong"),Vio=o("hubert"),Xio=o(" \u2014 "),NB=a("a"),zio=o("Wav2Vec2CTCTokenizer"),Qio=o(" (Hubert model)"),Wio=l(),ds=a("li"),Xse=a("strong"),Hio=o("ibert"),Uio=o(" \u2014 "),qB=a("a"),Jio=o("RobertaTokenizer"),Yio=o(" or "),jB=a("a"),Kio=o("RobertaTokenizerFast"),Zio=o(" (I-BERT model)"),edo=l(),cs=a("li"),zse=a("strong"),odo=o("layoutlm"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("LayoutLMTokenizer"),ado=o(" or "),GB=a("a"),ndo=o("LayoutLMTokenizerFast"),sdo=o(" (LayoutLM model)"),ldo=l(),fs=a("li"),Qse=a("strong"),ido=o("layoutlmv2"),ddo=o(" \u2014 "),OB=a("a"),cdo=o("LayoutLMv2Tokenizer"),fdo=o(" or "),VB=a("a"),mdo=o("LayoutLMv2TokenizerFast"),gdo=o(" (LayoutLMv2 model)"),hdo=l(),ms=a("li"),Wse=a("strong"),pdo=o("layoutlmv3"),_do=o(" \u2014 "),XB=a("a"),udo=o("LayoutLMv3Tokenizer"),bdo=o(" or "),zB=a("a"),vdo=o("LayoutLMv3TokenizerFast"),Fdo=o(" (LayoutLMv3 model)"),Tdo=l(),gs=a("li"),Hse=a("strong"),Mdo=o("layoutxlm"),Edo=o(" \u2014 "),QB=a("a"),Cdo=o("LayoutXLMTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("LayoutXLMTokenizerFast"),Ldo=o(" (LayoutXLM model)"),ydo=l(),hs=a("li"),Use=a("strong"),xdo=o("led"),$do=o(" \u2014 "),HB=a("a"),kdo=o("LEDTokenizer"),Sdo=o(" or "),UB=a("a"),Rdo=o("LEDTokenizerFast"),Pdo=o(" (LED model)"),Bdo=l(),ps=a("li"),Jse=a("strong"),Ido=o("longformer"),Ndo=o(" \u2014 "),JB=a("a"),qdo=o("LongformerTokenizer"),jdo=o(" or "),YB=a("a"),Ddo=o("LongformerTokenizerFast"),Gdo=o(" (Longformer model)"),Odo=l(),_s=a("li"),Yse=a("strong"),Vdo=o("longt5"),Xdo=o(" \u2014 "),KB=a("a"),zdo=o("T5Tokenizer"),Qdo=o(" or "),ZB=a("a"),Wdo=o("T5TokenizerFast"),Hdo=o(" (LongT5 model)"),Udo=l(),lh=a("li"),Kse=a("strong"),Jdo=o("luke"),Ydo=o(" \u2014 "),eI=a("a"),Kdo=o("LukeTokenizer"),Zdo=o(" (LUKE model)"),eco=l(),us=a("li"),Zse=a("strong"),oco=o("lxmert"),rco=o(" \u2014 "),oI=a("a"),tco=o("LxmertTokenizer"),aco=o(" or "),rI=a("a"),nco=o("LxmertTokenizerFast"),sco=o(" (LXMERT model)"),lco=l(),ih=a("li"),ele=a("strong"),ico=o("m2m_100"),dco=o(" \u2014 "),tI=a("a"),cco=o("M2M100Tokenizer"),fco=o(" (M2M100 model)"),mco=l(),dh=a("li"),ole=a("strong"),gco=o("marian"),hco=o(" \u2014 "),aI=a("a"),pco=o("MarianTokenizer"),_co=o(" (Marian model)"),uco=l(),bs=a("li"),rle=a("strong"),bco=o("mbart"),vco=o(" \u2014 "),nI=a("a"),Fco=o("MBartTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("MBartTokenizerFast"),Eco=o(" (mBART model)"),Cco=l(),vs=a("li"),tle=a("strong"),wco=o("mbart50"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("MBart50Tokenizer"),yco=o(" or "),iI=a("a"),xco=o("MBart50TokenizerFast"),$co=o(" (mBART-50 model)"),kco=l(),Fs=a("li"),ale=a("strong"),Sco=o("megatron-bert"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("BertTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("BertTokenizerFast"),Nco=o(" (Megatron-BERT model)"),qco=l(),ch=a("li"),nle=a("strong"),jco=o("mluke"),Dco=o(" \u2014 "),fI=a("a"),Gco=o("MLukeTokenizer"),Oco=o(" (mLUKE model)"),Vco=l(),Ts=a("li"),sle=a("strong"),Xco=o("mobilebert"),zco=o(" \u2014 "),mI=a("a"),Qco=o("MobileBertTokenizer"),Wco=o(" or "),gI=a("a"),Hco=o("MobileBertTokenizerFast"),Uco=o(" (MobileBERT model)"),Jco=l(),Ms=a("li"),lle=a("strong"),Yco=o("mpnet"),Kco=o(" \u2014 "),hI=a("a"),Zco=o("MPNetTokenizer"),efo=o(" or "),pI=a("a"),ofo=o("MPNetTokenizerFast"),rfo=o(" (MPNet model)"),tfo=l(),Es=a("li"),ile=a("strong"),afo=o("mt5"),nfo=o(" \u2014 "),_I=a("a"),sfo=o("MT5Tokenizer"),lfo=o(" or "),uI=a("a"),ifo=o("MT5TokenizerFast"),dfo=o(" (MT5 model)"),cfo=l(),Cs=a("li"),dle=a("strong"),ffo=o("nezha"),mfo=o(" \u2014 "),bI=a("a"),gfo=o("BertTokenizer"),hfo=o(" or "),vI=a("a"),pfo=o("BertTokenizerFast"),_fo=o(" (Nezha model)"),ufo=l(),ws=a("li"),cle=a("strong"),bfo=o("nystromformer"),vfo=o(" \u2014 "),FI=a("a"),Ffo=o("AlbertTokenizer"),Tfo=o(" or "),TI=a("a"),Mfo=o("AlbertTokenizerFast"),Efo=o(" (Nystr\xF6mformer model)"),Cfo=l(),As=a("li"),fle=a("strong"),wfo=o("openai-gpt"),Afo=o(" \u2014 "),MI=a("a"),Lfo=o("OpenAIGPTTokenizer"),yfo=o(" or "),EI=a("a"),xfo=o("OpenAIGPTTokenizerFast"),$fo=o(" (OpenAI GPT model)"),kfo=l(),fh=a("li"),mle=a("strong"),Sfo=o("opt"),Rfo=o(" \u2014 "),CI=a("a"),Pfo=o("GPT2Tokenizer"),Bfo=o(" (OPT model)"),Ifo=l(),Ls=a("li"),gle=a("strong"),Nfo=o("pegasus"),qfo=o(" \u2014 "),wI=a("a"),jfo=o("PegasusTokenizer"),Dfo=o(" or "),AI=a("a"),Gfo=o("PegasusTokenizerFast"),Ofo=o(" (Pegasus model)"),Vfo=l(),mh=a("li"),hle=a("strong"),Xfo=o("perceiver"),zfo=o(" \u2014 "),LI=a("a"),Qfo=o("PerceiverTokenizer"),Wfo=o(" (Perceiver model)"),Hfo=l(),gh=a("li"),ple=a("strong"),Ufo=o("phobert"),Jfo=o(" \u2014 "),yI=a("a"),Yfo=o("PhobertTokenizer"),Kfo=o(" (PhoBERT model)"),Zfo=l(),hh=a("li"),_le=a("strong"),emo=o("plbart"),omo=o(" \u2014 "),xI=a("a"),rmo=o("PLBartTokenizer"),tmo=o(" (PLBart model)"),amo=l(),ph=a("li"),ule=a("strong"),nmo=o("prophetnet"),smo=o(" \u2014 "),$I=a("a"),lmo=o("ProphetNetTokenizer"),imo=o(" (ProphetNet model)"),dmo=l(),ys=a("li"),ble=a("strong"),cmo=o("qdqbert"),fmo=o(" \u2014 "),kI=a("a"),mmo=o("BertTokenizer"),gmo=o(" or "),SI=a("a"),hmo=o("BertTokenizerFast"),pmo=o(" (QDQBert model)"),_mo=l(),_h=a("li"),vle=a("strong"),umo=o("rag"),bmo=o(" \u2014 "),RI=a("a"),vmo=o("RagTokenizer"),Fmo=o(" (RAG model)"),Tmo=l(),xs=a("li"),Fle=a("strong"),Mmo=o("realm"),Emo=o(" \u2014 "),PI=a("a"),Cmo=o("RealmTokenizer"),wmo=o(" or "),BI=a("a"),Amo=o("RealmTokenizerFast"),Lmo=o(" (REALM model)"),ymo=l(),$s=a("li"),Tle=a("strong"),xmo=o("reformer"),$mo=o(" \u2014 "),II=a("a"),kmo=o("ReformerTokenizer"),Smo=o(" or "),NI=a("a"),Rmo=o("ReformerTokenizerFast"),Pmo=o(" (Reformer model)"),Bmo=l(),ks=a("li"),Mle=a("strong"),Imo=o("rembert"),Nmo=o(" \u2014 "),qI=a("a"),qmo=o("RemBertTokenizer"),jmo=o(" or "),jI=a("a"),Dmo=o("RemBertTokenizerFast"),Gmo=o(" (RemBERT model)"),Omo=l(),Ss=a("li"),Ele=a("strong"),Vmo=o("retribert"),Xmo=o(" \u2014 "),DI=a("a"),zmo=o("RetriBertTokenizer"),Qmo=o(" or "),GI=a("a"),Wmo=o("RetriBertTokenizerFast"),Hmo=o(" (RetriBERT model)"),Umo=l(),Rs=a("li"),Cle=a("strong"),Jmo=o("roberta"),Ymo=o(" \u2014 "),OI=a("a"),Kmo=o("RobertaTokenizer"),Zmo=o(" or "),VI=a("a"),ego=o("RobertaTokenizerFast"),ogo=o(" (RoBERTa model)"),rgo=l(),Ps=a("li"),wle=a("strong"),tgo=o("roformer"),ago=o(" \u2014 "),XI=a("a"),ngo=o("RoFormerTokenizer"),sgo=o(" or "),zI=a("a"),lgo=o("RoFormerTokenizerFast"),igo=o(" (RoFormer model)"),dgo=l(),uh=a("li"),Ale=a("strong"),cgo=o("speech_to_text"),fgo=o(" \u2014 "),QI=a("a"),mgo=o("Speech2TextTokenizer"),ggo=o(" (Speech2Text model)"),hgo=l(),bh=a("li"),Lle=a("strong"),pgo=o("speech_to_text_2"),_go=o(" \u2014 "),WI=a("a"),ugo=o("Speech2Text2Tokenizer"),bgo=o(" (Speech2Text2 model)"),vgo=l(),Bs=a("li"),yle=a("strong"),Fgo=o("splinter"),Tgo=o(" \u2014 "),HI=a("a"),Mgo=o("SplinterTokenizer"),Ego=o(" or "),UI=a("a"),Cgo=o("SplinterTokenizerFast"),wgo=o(" (Splinter model)"),Ago=l(),Is=a("li"),xle=a("strong"),Lgo=o("squeezebert"),ygo=o(" \u2014 "),JI=a("a"),xgo=o("SqueezeBertTokenizer"),$go=o(" or "),YI=a("a"),kgo=o("SqueezeBertTokenizerFast"),Sgo=o(" (SqueezeBERT model)"),Rgo=l(),Ns=a("li"),$le=a("strong"),Pgo=o("t5"),Bgo=o(" \u2014 "),KI=a("a"),Igo=o("T5Tokenizer"),Ngo=o(" or "),ZI=a("a"),qgo=o("T5TokenizerFast"),jgo=o(" (T5 model)"),Dgo=l(),vh=a("li"),kle=a("strong"),Ggo=o("tapas"),Ogo=o(" \u2014 "),eN=a("a"),Vgo=o("TapasTokenizer"),Xgo=o(" (TAPAS model)"),zgo=l(),Fh=a("li"),Sle=a("strong"),Qgo=o("tapex"),Wgo=o(" \u2014 "),oN=a("a"),Hgo=o("TapexTokenizer"),Ugo=o(" (TAPEX model)"),Jgo=l(),Th=a("li"),Rle=a("strong"),Ygo=o("transfo-xl"),Kgo=o(" \u2014 "),rN=a("a"),Zgo=o("TransfoXLTokenizer"),eho=o(" (Transformer-XL model)"),oho=l(),qs=a("li"),Ple=a("strong"),rho=o("vilt"),tho=o(" \u2014 "),tN=a("a"),aho=o("BertTokenizer"),nho=o(" or "),aN=a("a"),sho=o("BertTokenizerFast"),lho=o(" (ViLT model)"),iho=l(),js=a("li"),Ble=a("strong"),dho=o("visual_bert"),cho=o(" \u2014 "),nN=a("a"),fho=o("BertTokenizer"),mho=o(" or "),sN=a("a"),gho=o("BertTokenizerFast"),hho=o(" (VisualBERT model)"),pho=l(),Mh=a("li"),Ile=a("strong"),_ho=o("wav2vec2"),uho=o(" \u2014 "),lN=a("a"),bho=o("Wav2Vec2CTCTokenizer"),vho=o(" (Wav2Vec2 model)"),Fho=l(),Eh=a("li"),Nle=a("strong"),Tho=o("wav2vec2-conformer"),Mho=o(" \u2014 "),iN=a("a"),Eho=o("Wav2Vec2CTCTokenizer"),Cho=o(" (Wav2Vec2-Conformer model)"),who=l(),Ch=a("li"),qle=a("strong"),Aho=o("wav2vec2_phoneme"),Lho=o(" \u2014 "),dN=a("a"),yho=o("Wav2Vec2PhonemeCTCTokenizer"),xho=o(" (Wav2Vec2Phoneme model)"),$ho=l(),Ds=a("li"),jle=a("strong"),kho=o("xglm"),Sho=o(" \u2014 "),cN=a("a"),Rho=o("XGLMTokenizer"),Pho=o(" or "),fN=a("a"),Bho=o("XGLMTokenizerFast"),Iho=o(" (XGLM model)"),Nho=l(),wh=a("li"),Dle=a("strong"),qho=o("xlm"),jho=o(" \u2014 "),mN=a("a"),Dho=o("XLMTokenizer"),Gho=o(" (XLM model)"),Oho=l(),Ah=a("li"),Gle=a("strong"),Vho=o("xlm-prophetnet"),Xho=o(" \u2014 "),gN=a("a"),zho=o("XLMProphetNetTokenizer"),Qho=o(" (XLM-ProphetNet model)"),Who=l(),Gs=a("li"),Ole=a("strong"),Hho=o("xlm-roberta"),Uho=o(" \u2014 "),hN=a("a"),Jho=o("XLMRobertaTokenizer"),Yho=o(" or "),pN=a("a"),Kho=o("XLMRobertaTokenizerFast"),Zho=o(" (XLM-RoBERTa model)"),epo=l(),Os=a("li"),Vle=a("strong"),opo=o("xlm-roberta-xl"),rpo=o(" \u2014 "),_N=a("a"),tpo=o("RobertaTokenizer"),apo=o(" or "),uN=a("a"),npo=o("RobertaTokenizerFast"),spo=o(" (XLM-RoBERTa-XL model)"),lpo=l(),Vs=a("li"),Xle=a("strong"),ipo=o("xlnet"),dpo=o(" \u2014 "),bN=a("a"),cpo=o("XLNetTokenizer"),fpo=o(" or "),vN=a("a"),mpo=o("XLNetTokenizerFast"),gpo=o(" (XLNet model)"),hpo=l(),Xs=a("li"),zle=a("strong"),ppo=o("yoso"),_po=o(" \u2014 "),FN=a("a"),upo=o("AlbertTokenizer"),bpo=o(" or "),TN=a("a"),vpo=o("AlbertTokenizerFast"),Fpo=o(" (YOSO model)"),Tpo=l(),F(Lh.$$.fragment),Mpo=l(),yh=a("div"),F(YL.$$.fragment),Epo=l(),Qle=a("p"),Cpo=o("Register a new tokenizer in this mapping."),SOe=l(),Pi=a("h2"),xh=a("a"),Wle=a("span"),F(KL.$$.fragment),wpo=l(),Hle=a("span"),Apo=o("AutoFeatureExtractor"),ROe=l(),Lo=a("div"),F(ZL.$$.fragment),Lpo=l(),ey=a("p"),ypo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MN=a("a"),xpo=o("AutoFeatureExtractor.from_pretrained()"),$po=o(" class method."),kpo=l(),oy=a("p"),Spo=o("This class cannot be instantiated directly using "),Ule=a("code"),Rpo=o("__init__()"),Ppo=o(" (throws an error)."),Bpo=l(),He=a("div"),F(ry.$$.fragment),Ipo=l(),Jle=a("p"),Npo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qpo=l(),Sa=a("p"),jpo=o("The feature extractor class to instantiate is selected based on the "),Yle=a("code"),Dpo=o("model_type"),Gpo=o(` property of the config object
(either passed as an argument or loaded from `),Kle=a("code"),Opo=o("pretrained_model_name_or_path"),Vpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zle=a("code"),Xpo=o("pretrained_model_name_or_path"),zpo=o(":"),Qpo=l(),Y=a("ul"),$h=a("li"),eie=a("strong"),Wpo=o("beit"),Hpo=o(" \u2014 "),EN=a("a"),Upo=o("BeitFeatureExtractor"),Jpo=o(" (BEiT model)"),Ypo=l(),kh=a("li"),oie=a("strong"),Kpo=o("clip"),Zpo=o(" \u2014 "),CN=a("a"),e_o=o("CLIPFeatureExtractor"),o_o=o(" (CLIP model)"),r_o=l(),Sh=a("li"),rie=a("strong"),t_o=o("convnext"),a_o=o(" \u2014 "),wN=a("a"),n_o=o("ConvNextFeatureExtractor"),s_o=o(" (ConvNeXT model)"),l_o=l(),Rh=a("li"),tie=a("strong"),i_o=o("cvt"),d_o=o(" \u2014 "),AN=a("a"),c_o=o("ConvNextFeatureExtractor"),f_o=o(" (CvT model)"),m_o=l(),Ph=a("li"),aie=a("strong"),g_o=o("data2vec-audio"),h_o=o(" \u2014 "),LN=a("a"),p_o=o("Wav2Vec2FeatureExtractor"),__o=o(" (Data2VecAudio model)"),u_o=l(),Bh=a("li"),nie=a("strong"),b_o=o("data2vec-vision"),v_o=o(" \u2014 "),yN=a("a"),F_o=o("BeitFeatureExtractor"),T_o=o(" (Data2VecVision model)"),M_o=l(),Ih=a("li"),sie=a("strong"),E_o=o("deit"),C_o=o(" \u2014 "),xN=a("a"),w_o=o("DeiTFeatureExtractor"),A_o=o(" (DeiT model)"),L_o=l(),Nh=a("li"),lie=a("strong"),y_o=o("detr"),x_o=o(" \u2014 "),$N=a("a"),$_o=o("DetrFeatureExtractor"),k_o=o(" (DETR model)"),S_o=l(),qh=a("li"),iie=a("strong"),R_o=o("dpt"),P_o=o(" \u2014 "),kN=a("a"),B_o=o("DPTFeatureExtractor"),I_o=o(" (DPT model)"),N_o=l(),jh=a("li"),die=a("strong"),q_o=o("flava"),j_o=o(" \u2014 "),SN=a("a"),D_o=o("FlavaFeatureExtractor"),G_o=o(" (FLAVA model)"),O_o=l(),Dh=a("li"),cie=a("strong"),V_o=o("glpn"),X_o=o(" \u2014 "),RN=a("a"),z_o=o("GLPNFeatureExtractor"),Q_o=o(" (GLPN model)"),W_o=l(),Gh=a("li"),fie=a("strong"),H_o=o("groupvit"),U_o=o(" \u2014 "),PN=a("a"),J_o=o("CLIPFeatureExtractor"),Y_o=o(" (GroupViT model)"),K_o=l(),Oh=a("li"),mie=a("strong"),Z_o=o("hubert"),euo=o(" \u2014 "),BN=a("a"),ouo=o("Wav2Vec2FeatureExtractor"),ruo=o(" (Hubert model)"),tuo=l(),Vh=a("li"),gie=a("strong"),auo=o("imagegpt"),nuo=o(" \u2014 "),IN=a("a"),suo=o("ImageGPTFeatureExtractor"),luo=o(" (ImageGPT model)"),iuo=l(),Xh=a("li"),hie=a("strong"),duo=o("layoutlmv2"),cuo=o(" \u2014 "),NN=a("a"),fuo=o("LayoutLMv2FeatureExtractor"),muo=o(" (LayoutLMv2 model)"),guo=l(),zh=a("li"),pie=a("strong"),huo=o("layoutlmv3"),puo=o(" \u2014 "),qN=a("a"),_uo=o("LayoutLMv3FeatureExtractor"),uuo=o(" (LayoutLMv3 model)"),buo=l(),Qh=a("li"),_ie=a("strong"),vuo=o("levit"),Fuo=o(" \u2014 "),jN=a("a"),Tuo=o("LevitFeatureExtractor"),Muo=o(" (LeViT model)"),Euo=l(),Wh=a("li"),uie=a("strong"),Cuo=o("maskformer"),wuo=o(" \u2014 "),DN=a("a"),Auo=o("MaskFormerFeatureExtractor"),Luo=o(" (MaskFormer model)"),yuo=l(),Hh=a("li"),bie=a("strong"),xuo=o("mctct"),$uo=o(" \u2014 "),GN=a("a"),kuo=o("MCTCTFeatureExtractor"),Suo=o(" (M-CTC-T model)"),Ruo=l(),Uh=a("li"),vie=a("strong"),Puo=o("perceiver"),Buo=o(" \u2014 "),ON=a("a"),Iuo=o("PerceiverFeatureExtractor"),Nuo=o(" (Perceiver model)"),quo=l(),Jh=a("li"),Fie=a("strong"),juo=o("poolformer"),Duo=o(" \u2014 "),VN=a("a"),Guo=o("PoolFormerFeatureExtractor"),Ouo=o(" (PoolFormer model)"),Vuo=l(),Yh=a("li"),Tie=a("strong"),Xuo=o("regnet"),zuo=o(" \u2014 "),XN=a("a"),Quo=o("ConvNextFeatureExtractor"),Wuo=o(" (RegNet model)"),Huo=l(),Kh=a("li"),Mie=a("strong"),Uuo=o("resnet"),Juo=o(" \u2014 "),zN=a("a"),Yuo=o("ConvNextFeatureExtractor"),Kuo=o(" (ResNet model)"),Zuo=l(),Zh=a("li"),Eie=a("strong"),e1o=o("segformer"),o1o=o(" \u2014 "),QN=a("a"),r1o=o("SegformerFeatureExtractor"),t1o=o(" (SegFormer model)"),a1o=l(),ep=a("li"),Cie=a("strong"),n1o=o("speech_to_text"),s1o=o(" \u2014 "),WN=a("a"),l1o=o("Speech2TextFeatureExtractor"),i1o=o(" (Speech2Text model)"),d1o=l(),op=a("li"),wie=a("strong"),c1o=o("swin"),f1o=o(" \u2014 "),HN=a("a"),m1o=o("ViTFeatureExtractor"),g1o=o(" (Swin Transformer model)"),h1o=l(),rp=a("li"),Aie=a("strong"),p1o=o("van"),_1o=o(" \u2014 "),UN=a("a"),u1o=o("ConvNextFeatureExtractor"),b1o=o(" (VAN model)"),v1o=l(),tp=a("li"),Lie=a("strong"),F1o=o("vilt"),T1o=o(" \u2014 "),JN=a("a"),M1o=o("ViltFeatureExtractor"),E1o=o(" (ViLT model)"),C1o=l(),ap=a("li"),yie=a("strong"),w1o=o("vit"),A1o=o(" \u2014 "),YN=a("a"),L1o=o("ViTFeatureExtractor"),y1o=o(" (ViT model)"),x1o=l(),np=a("li"),xie=a("strong"),$1o=o("vit_mae"),k1o=o(" \u2014 "),KN=a("a"),S1o=o("ViTFeatureExtractor"),R1o=o(" (ViTMAE model)"),P1o=l(),sp=a("li"),$ie=a("strong"),B1o=o("wav2vec2"),I1o=o(" \u2014 "),ZN=a("a"),N1o=o("Wav2Vec2FeatureExtractor"),q1o=o(" (Wav2Vec2 model)"),j1o=l(),lp=a("li"),kie=a("strong"),D1o=o("wav2vec2-conformer"),G1o=o(" \u2014 "),eq=a("a"),O1o=o("Wav2Vec2FeatureExtractor"),V1o=o(" (Wav2Vec2-Conformer model)"),X1o=l(),ip=a("li"),Sie=a("strong"),z1o=o("yolos"),Q1o=o(" \u2014 "),oq=a("a"),W1o=o("YolosFeatureExtractor"),H1o=o(" (YOLOS model)"),U1o=l(),F(dp.$$.fragment),J1o=l(),F(cp.$$.fragment),Y1o=l(),fp=a("div"),F(ty.$$.fragment),K1o=l(),Rie=a("p"),Z1o=o("Register a new feature extractor for this class."),POe=l(),Bi=a("h2"),mp=a("a"),Pie=a("span"),F(ay.$$.fragment),e7o=l(),Bie=a("span"),o7o=o("AutoProcessor"),BOe=l(),yo=a("div"),F(ny.$$.fragment),r7o=l(),sy=a("p"),t7o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rq=a("a"),a7o=o("AutoProcessor.from_pretrained()"),n7o=o(" class method."),s7o=l(),ly=a("p"),l7o=o("This class cannot be instantiated directly using "),Iie=a("code"),i7o=o("__init__()"),d7o=o(" (throws an error)."),c7o=l(),Ue=a("div"),F(iy.$$.fragment),f7o=l(),Nie=a("p"),m7o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),g7o=l(),Ii=a("p"),h7o=o("The processor class to instantiate is selected based on the "),qie=a("code"),p7o=o("model_type"),_7o=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),u7o=o("pretrained_model_name_or_path"),b7o=o(" if possible):"),v7o=l(),he=a("ul"),gp=a("li"),Die=a("strong"),F7o=o("clip"),T7o=o(" \u2014 "),tq=a("a"),M7o=o("CLIPProcessor"),E7o=o(" (CLIP model)"),C7o=l(),hp=a("li"),Gie=a("strong"),w7o=o("flava"),A7o=o(" \u2014 "),Oie=a("code"),L7o=o("FLAVAProcessor"),y7o=o(" (FLAVA model)"),x7o=l(),pp=a("li"),Vie=a("strong"),$7o=o("groupvit"),k7o=o(" \u2014 "),aq=a("a"),S7o=o("CLIPProcessor"),R7o=o(" (GroupViT model)"),P7o=l(),_p=a("li"),Xie=a("strong"),B7o=o("layoutlmv2"),I7o=o(" \u2014 "),nq=a("a"),N7o=o("LayoutLMv2Processor"),q7o=o(" (LayoutLMv2 model)"),j7o=l(),up=a("li"),zie=a("strong"),D7o=o("layoutlmv3"),G7o=o(" \u2014 "),sq=a("a"),O7o=o("LayoutLMv3Processor"),V7o=o(" (LayoutLMv3 model)"),X7o=l(),bp=a("li"),Qie=a("strong"),z7o=o("layoutxlm"),Q7o=o(" \u2014 "),lq=a("a"),W7o=o("LayoutXLMProcessor"),H7o=o(" (LayoutXLM model)"),U7o=l(),vp=a("li"),Wie=a("strong"),J7o=o("sew"),Y7o=o(" \u2014 "),iq=a("a"),K7o=o("Wav2Vec2Processor"),Z7o=o(" (SEW model)"),e2o=l(),Fp=a("li"),Hie=a("strong"),o2o=o("sew-d"),r2o=o(" \u2014 "),dq=a("a"),t2o=o("Wav2Vec2Processor"),a2o=o(" (SEW-D model)"),n2o=l(),Tp=a("li"),Uie=a("strong"),s2o=o("speech_to_text"),l2o=o(" \u2014 "),cq=a("a"),i2o=o("Speech2TextProcessor"),d2o=o(" (Speech2Text model)"),c2o=l(),Mp=a("li"),Jie=a("strong"),f2o=o("speech_to_text_2"),m2o=o(" \u2014 "),fq=a("a"),g2o=o("Speech2Text2Processor"),h2o=o(" (Speech2Text2 model)"),p2o=l(),Ep=a("li"),Yie=a("strong"),_2o=o("trocr"),u2o=o(" \u2014 "),mq=a("a"),b2o=o("TrOCRProcessor"),v2o=o(" (TrOCR model)"),F2o=l(),Cp=a("li"),Kie=a("strong"),T2o=o("unispeech"),M2o=o(" \u2014 "),gq=a("a"),E2o=o("Wav2Vec2Processor"),C2o=o(" (UniSpeech model)"),w2o=l(),wp=a("li"),Zie=a("strong"),A2o=o("unispeech-sat"),L2o=o(" \u2014 "),hq=a("a"),y2o=o("Wav2Vec2Processor"),x2o=o(" (UniSpeechSat model)"),$2o=l(),Ap=a("li"),ede=a("strong"),k2o=o("vilt"),S2o=o(" \u2014 "),pq=a("a"),R2o=o("ViltProcessor"),P2o=o(" (ViLT model)"),B2o=l(),Lp=a("li"),ode=a("strong"),I2o=o("vision-text-dual-encoder"),N2o=o(" \u2014 "),_q=a("a"),q2o=o("VisionTextDualEncoderProcessor"),j2o=o(" (VisionTextDualEncoder model)"),D2o=l(),yp=a("li"),rde=a("strong"),G2o=o("wav2vec2"),O2o=o(" \u2014 "),uq=a("a"),V2o=o("Wav2Vec2Processor"),X2o=o(" (Wav2Vec2 model)"),z2o=l(),xp=a("li"),tde=a("strong"),Q2o=o("wav2vec2-conformer"),W2o=o(" \u2014 "),bq=a("a"),H2o=o("Wav2Vec2Processor"),U2o=o(" (Wav2Vec2-Conformer model)"),J2o=l(),$p=a("li"),ade=a("strong"),Y2o=o("wavlm"),K2o=o(" \u2014 "),vq=a("a"),Z2o=o("Wav2Vec2Processor"),ebo=o(" (WavLM model)"),obo=l(),F(kp.$$.fragment),rbo=l(),F(Sp.$$.fragment),tbo=l(),Rp=a("div"),F(dy.$$.fragment),abo=l(),nde=a("p"),nbo=o("Register a new processor for this class."),IOe=l(),Ni=a("h2"),Pp=a("a"),sde=a("span"),F(cy.$$.fragment),sbo=l(),lde=a("span"),lbo=o("AutoModel"),NOe=l(),xo=a("div"),F(fy.$$.fragment),ibo=l(),qi=a("p"),dbo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Fq=a("a"),cbo=o("from_pretrained()"),fbo=o(" class method or the "),Tq=a("a"),mbo=o("from_config()"),gbo=o(` class
method.`),hbo=l(),my=a("p"),pbo=o("This class cannot be instantiated directly using "),ide=a("code"),_bo=o("__init__()"),ubo=o(" (throws an error)."),bbo=l(),nt=a("div"),F(gy.$$.fragment),vbo=l(),dde=a("p"),Fbo=o("Instantiates one of the base model classes of the library from a configuration."),Tbo=l(),ji=a("p"),Mbo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),Ebo=o("not"),Cbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mq=a("a"),wbo=o("from_pretrained()"),Abo=o(" to load the model weights."),Lbo=l(),F(Bp.$$.fragment),ybo=l(),Je=a("div"),F(hy.$$.fragment),xbo=l(),fde=a("p"),$bo=o("Instantiate one of the base model classes of the library from a pretrained model."),kbo=l(),Ra=a("p"),Sbo=o("The model class to instantiate is selected based on the "),mde=a("code"),Rbo=o("model_type"),Pbo=o(` property of the config object (either
passed as an argument or loaded from `),gde=a("code"),Bbo=o("pretrained_model_name_or_path"),Ibo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=a("code"),Nbo=o("pretrained_model_name_or_path"),qbo=o(":"),jbo=l(),y=a("ul"),Ip=a("li"),pde=a("strong"),Dbo=o("albert"),Gbo=o(" \u2014 "),Eq=a("a"),Obo=o("AlbertModel"),Vbo=o(" (ALBERT model)"),Xbo=l(),Np=a("li"),_de=a("strong"),zbo=o("bart"),Qbo=o(" \u2014 "),Cq=a("a"),Wbo=o("BartModel"),Hbo=o(" (BART model)"),Ubo=l(),qp=a("li"),ude=a("strong"),Jbo=o("beit"),Ybo=o(" \u2014 "),wq=a("a"),Kbo=o("BeitModel"),Zbo=o(" (BEiT model)"),e4o=l(),jp=a("li"),bde=a("strong"),o4o=o("bert"),r4o=o(" \u2014 "),Aq=a("a"),t4o=o("BertModel"),a4o=o(" (BERT model)"),n4o=l(),Dp=a("li"),vde=a("strong"),s4o=o("bert-generation"),l4o=o(" \u2014 "),Lq=a("a"),i4o=o("BertGenerationEncoder"),d4o=o(" (Bert Generation model)"),c4o=l(),Gp=a("li"),Fde=a("strong"),f4o=o("big_bird"),m4o=o(" \u2014 "),yq=a("a"),g4o=o("BigBirdModel"),h4o=o(" (BigBird model)"),p4o=l(),Op=a("li"),Tde=a("strong"),_4o=o("bigbird_pegasus"),u4o=o(" \u2014 "),xq=a("a"),b4o=o("BigBirdPegasusModel"),v4o=o(" (BigBird-Pegasus model)"),F4o=l(),Vp=a("li"),Mde=a("strong"),T4o=o("blenderbot"),M4o=o(" \u2014 "),$q=a("a"),E4o=o("BlenderbotModel"),C4o=o(" (Blenderbot model)"),w4o=l(),Xp=a("li"),Ede=a("strong"),A4o=o("blenderbot-small"),L4o=o(" \u2014 "),kq=a("a"),y4o=o("BlenderbotSmallModel"),x4o=o(" (BlenderbotSmall model)"),$4o=l(),zp=a("li"),Cde=a("strong"),k4o=o("bloom"),S4o=o(" \u2014 "),Sq=a("a"),R4o=o("BloomModel"),P4o=o(" (BLOOM model)"),B4o=l(),Qp=a("li"),wde=a("strong"),I4o=o("camembert"),N4o=o(" \u2014 "),Rq=a("a"),q4o=o("CamembertModel"),j4o=o(" (CamemBERT model)"),D4o=l(),Wp=a("li"),Ade=a("strong"),G4o=o("canine"),O4o=o(" \u2014 "),Pq=a("a"),V4o=o("CanineModel"),X4o=o(" (CANINE model)"),z4o=l(),Hp=a("li"),Lde=a("strong"),Q4o=o("clip"),W4o=o(" \u2014 "),Bq=a("a"),H4o=o("CLIPModel"),U4o=o(" (CLIP model)"),J4o=l(),Up=a("li"),yde=a("strong"),Y4o=o("codegen"),K4o=o(" \u2014 "),Iq=a("a"),Z4o=o("CodeGenModel"),e3o=o(" (CodeGen model)"),o3o=l(),Jp=a("li"),xde=a("strong"),r3o=o("convbert"),t3o=o(" \u2014 "),Nq=a("a"),a3o=o("ConvBertModel"),n3o=o(" (ConvBERT model)"),s3o=l(),Yp=a("li"),$de=a("strong"),l3o=o("convnext"),i3o=o(" \u2014 "),qq=a("a"),d3o=o("ConvNextModel"),c3o=o(" (ConvNeXT model)"),f3o=l(),Kp=a("li"),kde=a("strong"),m3o=o("ctrl"),g3o=o(" \u2014 "),jq=a("a"),h3o=o("CTRLModel"),p3o=o(" (CTRL model)"),_3o=l(),Zp=a("li"),Sde=a("strong"),u3o=o("cvt"),b3o=o(" \u2014 "),Dq=a("a"),v3o=o("CvtModel"),F3o=o(" (CvT model)"),T3o=l(),e_=a("li"),Rde=a("strong"),M3o=o("data2vec-audio"),E3o=o(" \u2014 "),Gq=a("a"),C3o=o("Data2VecAudioModel"),w3o=o(" (Data2VecAudio model)"),A3o=l(),o_=a("li"),Pde=a("strong"),L3o=o("data2vec-text"),y3o=o(" \u2014 "),Oq=a("a"),x3o=o("Data2VecTextModel"),$3o=o(" (Data2VecText model)"),k3o=l(),r_=a("li"),Bde=a("strong"),S3o=o("data2vec-vision"),R3o=o(" \u2014 "),Vq=a("a"),P3o=o("Data2VecVisionModel"),B3o=o(" (Data2VecVision model)"),I3o=l(),t_=a("li"),Ide=a("strong"),N3o=o("deberta"),q3o=o(" \u2014 "),Xq=a("a"),j3o=o("DebertaModel"),D3o=o(" (DeBERTa model)"),G3o=l(),a_=a("li"),Nde=a("strong"),O3o=o("deberta-v2"),V3o=o(" \u2014 "),zq=a("a"),X3o=o("DebertaV2Model"),z3o=o(" (DeBERTa-v2 model)"),Q3o=l(),n_=a("li"),qde=a("strong"),W3o=o("decision_transformer"),H3o=o(" \u2014 "),Qq=a("a"),U3o=o("DecisionTransformerModel"),J3o=o(" (Decision Transformer model)"),Y3o=l(),s_=a("li"),jde=a("strong"),K3o=o("deit"),Z3o=o(" \u2014 "),Wq=a("a"),evo=o("DeiTModel"),ovo=o(" (DeiT model)"),rvo=l(),l_=a("li"),Dde=a("strong"),tvo=o("detr"),avo=o(" \u2014 "),Hq=a("a"),nvo=o("DetrModel"),svo=o(" (DETR model)"),lvo=l(),i_=a("li"),Gde=a("strong"),ivo=o("distilbert"),dvo=o(" \u2014 "),Uq=a("a"),cvo=o("DistilBertModel"),fvo=o(" (DistilBERT model)"),mvo=l(),d_=a("li"),Ode=a("strong"),gvo=o("dpr"),hvo=o(" \u2014 "),Jq=a("a"),pvo=o("DPRQuestionEncoder"),_vo=o(" (DPR model)"),uvo=l(),c_=a("li"),Vde=a("strong"),bvo=o("dpt"),vvo=o(" \u2014 "),Yq=a("a"),Fvo=o("DPTModel"),Tvo=o(" (DPT model)"),Mvo=l(),f_=a("li"),Xde=a("strong"),Evo=o("electra"),Cvo=o(" \u2014 "),Kq=a("a"),wvo=o("ElectraModel"),Avo=o(" (ELECTRA model)"),Lvo=l(),m_=a("li"),zde=a("strong"),yvo=o("flaubert"),xvo=o(" \u2014 "),Zq=a("a"),$vo=o("FlaubertModel"),kvo=o(" (FlauBERT model)"),Svo=l(),g_=a("li"),Qde=a("strong"),Rvo=o("flava"),Pvo=o(" \u2014 "),ej=a("a"),Bvo=o("FlavaModel"),Ivo=o(" (FLAVA model)"),Nvo=l(),h_=a("li"),Wde=a("strong"),qvo=o("fnet"),jvo=o(" \u2014 "),oj=a("a"),Dvo=o("FNetModel"),Gvo=o(" (FNet model)"),Ovo=l(),p_=a("li"),Hde=a("strong"),Vvo=o("fsmt"),Xvo=o(" \u2014 "),rj=a("a"),zvo=o("FSMTModel"),Qvo=o(" (FairSeq Machine-Translation model)"),Wvo=l(),zs=a("li"),Ude=a("strong"),Hvo=o("funnel"),Uvo=o(" \u2014 "),tj=a("a"),Jvo=o("FunnelModel"),Yvo=o(" or "),aj=a("a"),Kvo=o("FunnelBaseModel"),Zvo=o(" (Funnel Transformer model)"),eFo=l(),__=a("li"),Jde=a("strong"),oFo=o("glpn"),rFo=o(" \u2014 "),nj=a("a"),tFo=o("GLPNModel"),aFo=o(" (GLPN model)"),nFo=l(),u_=a("li"),Yde=a("strong"),sFo=o("gpt2"),lFo=o(" \u2014 "),sj=a("a"),iFo=o("GPT2Model"),dFo=o(" (OpenAI GPT-2 model)"),cFo=l(),b_=a("li"),Kde=a("strong"),fFo=o("gpt_neo"),mFo=o(" \u2014 "),lj=a("a"),gFo=o("GPTNeoModel"),hFo=o(" (GPT Neo model)"),pFo=l(),v_=a("li"),Zde=a("strong"),_Fo=o("gpt_neox"),uFo=o(" \u2014 "),ij=a("a"),bFo=o("GPTNeoXModel"),vFo=o(" (GPT NeoX model)"),FFo=l(),F_=a("li"),ece=a("strong"),TFo=o("gptj"),MFo=o(" \u2014 "),dj=a("a"),EFo=o("GPTJModel"),CFo=o(" (GPT-J model)"),wFo=l(),T_=a("li"),oce=a("strong"),AFo=o("groupvit"),LFo=o(" \u2014 "),cj=a("a"),yFo=o("GroupViTModel"),xFo=o(" (GroupViT model)"),$Fo=l(),M_=a("li"),rce=a("strong"),kFo=o("hubert"),SFo=o(" \u2014 "),fj=a("a"),RFo=o("HubertModel"),PFo=o(" (Hubert model)"),BFo=l(),E_=a("li"),tce=a("strong"),IFo=o("ibert"),NFo=o(" \u2014 "),mj=a("a"),qFo=o("IBertModel"),jFo=o(" (I-BERT model)"),DFo=l(),C_=a("li"),ace=a("strong"),GFo=o("imagegpt"),OFo=o(" \u2014 "),gj=a("a"),VFo=o("ImageGPTModel"),XFo=o(" (ImageGPT model)"),zFo=l(),w_=a("li"),nce=a("strong"),QFo=o("layoutlm"),WFo=o(" \u2014 "),hj=a("a"),HFo=o("LayoutLMModel"),UFo=o(" (LayoutLM model)"),JFo=l(),A_=a("li"),sce=a("strong"),YFo=o("layoutlmv2"),KFo=o(" \u2014 "),pj=a("a"),ZFo=o("LayoutLMv2Model"),eTo=o(" (LayoutLMv2 model)"),oTo=l(),L_=a("li"),lce=a("strong"),rTo=o("layoutlmv3"),tTo=o(" \u2014 "),_j=a("a"),aTo=o("LayoutLMv3Model"),nTo=o(" (LayoutLMv3 model)"),sTo=l(),y_=a("li"),ice=a("strong"),lTo=o("led"),iTo=o(" \u2014 "),uj=a("a"),dTo=o("LEDModel"),cTo=o(" (LED model)"),fTo=l(),x_=a("li"),dce=a("strong"),mTo=o("levit"),gTo=o(" \u2014 "),bj=a("a"),hTo=o("LevitModel"),pTo=o(" (LeViT model)"),_To=l(),$_=a("li"),cce=a("strong"),uTo=o("longformer"),bTo=o(" \u2014 "),vj=a("a"),vTo=o("LongformerModel"),FTo=o(" (Longformer model)"),TTo=l(),k_=a("li"),fce=a("strong"),MTo=o("longt5"),ETo=o(" \u2014 "),Fj=a("a"),CTo=o("LongT5Model"),wTo=o(" (LongT5 model)"),ATo=l(),S_=a("li"),mce=a("strong"),LTo=o("luke"),yTo=o(" \u2014 "),Tj=a("a"),xTo=o("LukeModel"),$To=o(" (LUKE model)"),kTo=l(),R_=a("li"),gce=a("strong"),STo=o("lxmert"),RTo=o(" \u2014 "),Mj=a("a"),PTo=o("LxmertModel"),BTo=o(" (LXMERT model)"),ITo=l(),P_=a("li"),hce=a("strong"),NTo=o("m2m_100"),qTo=o(" \u2014 "),Ej=a("a"),jTo=o("M2M100Model"),DTo=o(" (M2M100 model)"),GTo=l(),B_=a("li"),pce=a("strong"),OTo=o("marian"),VTo=o(" \u2014 "),Cj=a("a"),XTo=o("MarianModel"),zTo=o(" (Marian model)"),QTo=l(),I_=a("li"),_ce=a("strong"),WTo=o("maskformer"),HTo=o(" \u2014 "),wj=a("a"),UTo=o("MaskFormerModel"),JTo=o(" (MaskFormer model)"),YTo=l(),N_=a("li"),uce=a("strong"),KTo=o("mbart"),ZTo=o(" \u2014 "),Aj=a("a"),eMo=o("MBartModel"),oMo=o(" (mBART model)"),rMo=l(),q_=a("li"),bce=a("strong"),tMo=o("mctct"),aMo=o(" \u2014 "),Lj=a("a"),nMo=o("MCTCTModel"),sMo=o(" (M-CTC-T model)"),lMo=l(),j_=a("li"),vce=a("strong"),iMo=o("megatron-bert"),dMo=o(" \u2014 "),yj=a("a"),cMo=o("MegatronBertModel"),fMo=o(" (Megatron-BERT model)"),mMo=l(),D_=a("li"),Fce=a("strong"),gMo=o("mobilebert"),hMo=o(" \u2014 "),xj=a("a"),pMo=o("MobileBertModel"),_Mo=o(" (MobileBERT model)"),uMo=l(),G_=a("li"),Tce=a("strong"),bMo=o("mpnet"),vMo=o(" \u2014 "),$j=a("a"),FMo=o("MPNetModel"),TMo=o(" (MPNet model)"),MMo=l(),O_=a("li"),Mce=a("strong"),EMo=o("mt5"),CMo=o(" \u2014 "),kj=a("a"),wMo=o("MT5Model"),AMo=o(" (MT5 model)"),LMo=l(),V_=a("li"),Ece=a("strong"),yMo=o("nezha"),xMo=o(" \u2014 "),Sj=a("a"),$Mo=o("NezhaModel"),kMo=o(" (Nezha model)"),SMo=l(),X_=a("li"),Cce=a("strong"),RMo=o("nystromformer"),PMo=o(" \u2014 "),Rj=a("a"),BMo=o("NystromformerModel"),IMo=o(" (Nystr\xF6mformer model)"),NMo=l(),z_=a("li"),wce=a("strong"),qMo=o("openai-gpt"),jMo=o(" \u2014 "),Pj=a("a"),DMo=o("OpenAIGPTModel"),GMo=o(" (OpenAI GPT model)"),OMo=l(),Q_=a("li"),Ace=a("strong"),VMo=o("opt"),XMo=o(" \u2014 "),Bj=a("a"),zMo=o("OPTModel"),QMo=o(" (OPT model)"),WMo=l(),W_=a("li"),Lce=a("strong"),HMo=o("pegasus"),UMo=o(" \u2014 "),Ij=a("a"),JMo=o("PegasusModel"),YMo=o(" (Pegasus model)"),KMo=l(),H_=a("li"),yce=a("strong"),ZMo=o("perceiver"),eEo=o(" \u2014 "),Nj=a("a"),oEo=o("PerceiverModel"),rEo=o(" (Perceiver model)"),tEo=l(),U_=a("li"),xce=a("strong"),aEo=o("plbart"),nEo=o(" \u2014 "),qj=a("a"),sEo=o("PLBartModel"),lEo=o(" (PLBart model)"),iEo=l(),J_=a("li"),$ce=a("strong"),dEo=o("poolformer"),cEo=o(" \u2014 "),jj=a("a"),fEo=o("PoolFormerModel"),mEo=o(" (PoolFormer model)"),gEo=l(),Y_=a("li"),kce=a("strong"),hEo=o("prophetnet"),pEo=o(" \u2014 "),Dj=a("a"),_Eo=o("ProphetNetModel"),uEo=o(" (ProphetNet model)"),bEo=l(),K_=a("li"),Sce=a("strong"),vEo=o("qdqbert"),FEo=o(" \u2014 "),Gj=a("a"),TEo=o("QDQBertModel"),MEo=o(" (QDQBert model)"),EEo=l(),Z_=a("li"),Rce=a("strong"),CEo=o("reformer"),wEo=o(" \u2014 "),Oj=a("a"),AEo=o("ReformerModel"),LEo=o(" (Reformer model)"),yEo=l(),eu=a("li"),Pce=a("strong"),xEo=o("regnet"),$Eo=o(" \u2014 "),Vj=a("a"),kEo=o("RegNetModel"),SEo=o(" (RegNet model)"),REo=l(),ou=a("li"),Bce=a("strong"),PEo=o("rembert"),BEo=o(" \u2014 "),Xj=a("a"),IEo=o("RemBertModel"),NEo=o(" (RemBERT model)"),qEo=l(),ru=a("li"),Ice=a("strong"),jEo=o("resnet"),DEo=o(" \u2014 "),zj=a("a"),GEo=o("ResNetModel"),OEo=o(" (ResNet model)"),VEo=l(),tu=a("li"),Nce=a("strong"),XEo=o("retribert"),zEo=o(" \u2014 "),Qj=a("a"),QEo=o("RetriBertModel"),WEo=o(" (RetriBERT model)"),HEo=l(),au=a("li"),qce=a("strong"),UEo=o("roberta"),JEo=o(" \u2014 "),Wj=a("a"),YEo=o("RobertaModel"),KEo=o(" (RoBERTa model)"),ZEo=l(),nu=a("li"),jce=a("strong"),eCo=o("roformer"),oCo=o(" \u2014 "),Hj=a("a"),rCo=o("RoFormerModel"),tCo=o(" (RoFormer model)"),aCo=l(),su=a("li"),Dce=a("strong"),nCo=o("segformer"),sCo=o(" \u2014 "),Uj=a("a"),lCo=o("SegformerModel"),iCo=o(" (SegFormer model)"),dCo=l(),lu=a("li"),Gce=a("strong"),cCo=o("sew"),fCo=o(" \u2014 "),Jj=a("a"),mCo=o("SEWModel"),gCo=o(" (SEW model)"),hCo=l(),iu=a("li"),Oce=a("strong"),pCo=o("sew-d"),_Co=o(" \u2014 "),Yj=a("a"),uCo=o("SEWDModel"),bCo=o(" (SEW-D model)"),vCo=l(),du=a("li"),Vce=a("strong"),FCo=o("speech_to_text"),TCo=o(" \u2014 "),Kj=a("a"),MCo=o("Speech2TextModel"),ECo=o(" (Speech2Text model)"),CCo=l(),cu=a("li"),Xce=a("strong"),wCo=o("splinter"),ACo=o(" \u2014 "),Zj=a("a"),LCo=o("SplinterModel"),yCo=o(" (Splinter model)"),xCo=l(),fu=a("li"),zce=a("strong"),$Co=o("squeezebert"),kCo=o(" \u2014 "),eD=a("a"),SCo=o("SqueezeBertModel"),RCo=o(" (SqueezeBERT model)"),PCo=l(),mu=a("li"),Qce=a("strong"),BCo=o("swin"),ICo=o(" \u2014 "),oD=a("a"),NCo=o("SwinModel"),qCo=o(" (Swin Transformer model)"),jCo=l(),gu=a("li"),Wce=a("strong"),DCo=o("t5"),GCo=o(" \u2014 "),rD=a("a"),OCo=o("T5Model"),VCo=o(" (T5 model)"),XCo=l(),hu=a("li"),Hce=a("strong"),zCo=o("tapas"),QCo=o(" \u2014 "),tD=a("a"),WCo=o("TapasModel"),HCo=o(" (TAPAS model)"),UCo=l(),pu=a("li"),Uce=a("strong"),JCo=o("trajectory_transformer"),YCo=o(" \u2014 "),aD=a("a"),KCo=o("TrajectoryTransformerModel"),ZCo=o(" (Trajectory Transformer model)"),e5o=l(),_u=a("li"),Jce=a("strong"),o5o=o("transfo-xl"),r5o=o(" \u2014 "),nD=a("a"),t5o=o("TransfoXLModel"),a5o=o(" (Transformer-XL model)"),n5o=l(),uu=a("li"),Yce=a("strong"),s5o=o("unispeech"),l5o=o(" \u2014 "),sD=a("a"),i5o=o("UniSpeechModel"),d5o=o(" (UniSpeech model)"),c5o=l(),bu=a("li"),Kce=a("strong"),f5o=o("unispeech-sat"),m5o=o(" \u2014 "),lD=a("a"),g5o=o("UniSpeechSatModel"),h5o=o(" (UniSpeechSat model)"),p5o=l(),vu=a("li"),Zce=a("strong"),_5o=o("van"),u5o=o(" \u2014 "),iD=a("a"),b5o=o("VanModel"),v5o=o(" (VAN model)"),F5o=l(),Fu=a("li"),efe=a("strong"),T5o=o("vilt"),M5o=o(" \u2014 "),dD=a("a"),E5o=o("ViltModel"),C5o=o(" (ViLT model)"),w5o=l(),Tu=a("li"),ofe=a("strong"),A5o=o("vision-text-dual-encoder"),L5o=o(" \u2014 "),cD=a("a"),y5o=o("VisionTextDualEncoderModel"),x5o=o(" (VisionTextDualEncoder model)"),$5o=l(),Mu=a("li"),rfe=a("strong"),k5o=o("visual_bert"),S5o=o(" \u2014 "),fD=a("a"),R5o=o("VisualBertModel"),P5o=o(" (VisualBERT model)"),B5o=l(),Eu=a("li"),tfe=a("strong"),I5o=o("vit"),N5o=o(" \u2014 "),mD=a("a"),q5o=o("ViTModel"),j5o=o(" (ViT model)"),D5o=l(),Cu=a("li"),afe=a("strong"),G5o=o("vit_mae"),O5o=o(" \u2014 "),gD=a("a"),V5o=o("ViTMAEModel"),X5o=o(" (ViTMAE model)"),z5o=l(),wu=a("li"),nfe=a("strong"),Q5o=o("wav2vec2"),W5o=o(" \u2014 "),hD=a("a"),H5o=o("Wav2Vec2Model"),U5o=o(" (Wav2Vec2 model)"),J5o=l(),Au=a("li"),sfe=a("strong"),Y5o=o("wav2vec2-conformer"),K5o=o(" \u2014 "),pD=a("a"),Z5o=o("Wav2Vec2ConformerModel"),e0o=o(" (Wav2Vec2-Conformer model)"),o0o=l(),Lu=a("li"),lfe=a("strong"),r0o=o("wavlm"),t0o=o(" \u2014 "),_D=a("a"),a0o=o("WavLMModel"),n0o=o(" (WavLM model)"),s0o=l(),yu=a("li"),ife=a("strong"),l0o=o("xglm"),i0o=o(" \u2014 "),uD=a("a"),d0o=o("XGLMModel"),c0o=o(" (XGLM model)"),f0o=l(),xu=a("li"),dfe=a("strong"),m0o=o("xlm"),g0o=o(" \u2014 "),bD=a("a"),h0o=o("XLMModel"),p0o=o(" (XLM model)"),_0o=l(),$u=a("li"),cfe=a("strong"),u0o=o("xlm-prophetnet"),b0o=o(" \u2014 "),vD=a("a"),v0o=o("XLMProphetNetModel"),F0o=o(" (XLM-ProphetNet model)"),T0o=l(),ku=a("li"),ffe=a("strong"),M0o=o("xlm-roberta"),E0o=o(" \u2014 "),FD=a("a"),C0o=o("XLMRobertaModel"),w0o=o(" (XLM-RoBERTa model)"),A0o=l(),Su=a("li"),mfe=a("strong"),L0o=o("xlm-roberta-xl"),y0o=o(" \u2014 "),TD=a("a"),x0o=o("XLMRobertaXLModel"),$0o=o(" (XLM-RoBERTa-XL model)"),k0o=l(),Ru=a("li"),gfe=a("strong"),S0o=o("xlnet"),R0o=o(" \u2014 "),MD=a("a"),P0o=o("XLNetModel"),B0o=o(" (XLNet model)"),I0o=l(),Pu=a("li"),hfe=a("strong"),N0o=o("yolos"),q0o=o(" \u2014 "),ED=a("a"),j0o=o("YolosModel"),D0o=o(" (YOLOS model)"),G0o=l(),Bu=a("li"),pfe=a("strong"),O0o=o("yoso"),V0o=o(" \u2014 "),CD=a("a"),X0o=o("YosoModel"),z0o=o(" (YOSO model)"),Q0o=l(),Iu=a("p"),W0o=o("The model is set in evaluation mode by default using "),_fe=a("code"),H0o=o("model.eval()"),U0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),J0o=o("model.train()"),Y0o=l(),F(Nu.$$.fragment),qOe=l(),Di=a("h2"),qu=a("a"),bfe=a("span"),F(py.$$.fragment),K0o=l(),vfe=a("span"),Z0o=o("AutoModelForPreTraining"),jOe=l(),$o=a("div"),F(_y.$$.fragment),ewo=l(),Gi=a("p"),owo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wD=a("a"),rwo=o("from_pretrained()"),two=o(" class method or the "),AD=a("a"),awo=o("from_config()"),nwo=o(` class
method.`),swo=l(),uy=a("p"),lwo=o("This class cannot be instantiated directly using "),Ffe=a("code"),iwo=o("__init__()"),dwo=o(" (throws an error)."),cwo=l(),st=a("div"),F(by.$$.fragment),fwo=l(),Tfe=a("p"),mwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gwo=l(),Oi=a("p"),hwo=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),pwo=o("not"),_wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=a("a"),uwo=o("from_pretrained()"),bwo=o(" to load the model weights."),vwo=l(),F(ju.$$.fragment),Fwo=l(),Ye=a("div"),F(vy.$$.fragment),Two=l(),Efe=a("p"),Mwo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ewo=l(),Pa=a("p"),Cwo=o("The model class to instantiate is selected based on the "),Cfe=a("code"),wwo=o("model_type"),Awo=o(` property of the config object (either
passed as an argument or loaded from `),wfe=a("code"),Lwo=o("pretrained_model_name_or_path"),ywo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=a("code"),xwo=o("pretrained_model_name_or_path"),$wo=o(":"),kwo=l(),G=a("ul"),Du=a("li"),Lfe=a("strong"),Swo=o("albert"),Rwo=o(" \u2014 "),yD=a("a"),Pwo=o("AlbertForPreTraining"),Bwo=o(" (ALBERT model)"),Iwo=l(),Gu=a("li"),yfe=a("strong"),Nwo=o("bart"),qwo=o(" \u2014 "),xD=a("a"),jwo=o("BartForConditionalGeneration"),Dwo=o(" (BART model)"),Gwo=l(),Ou=a("li"),xfe=a("strong"),Owo=o("bert"),Vwo=o(" \u2014 "),$D=a("a"),Xwo=o("BertForPreTraining"),zwo=o(" (BERT model)"),Qwo=l(),Vu=a("li"),$fe=a("strong"),Wwo=o("big_bird"),Hwo=o(" \u2014 "),kD=a("a"),Uwo=o("BigBirdForPreTraining"),Jwo=o(" (BigBird model)"),Ywo=l(),Xu=a("li"),kfe=a("strong"),Kwo=o("bloom"),Zwo=o(" \u2014 "),SD=a("a"),eAo=o("BloomForCausalLM"),oAo=o(" (BLOOM model)"),rAo=l(),zu=a("li"),Sfe=a("strong"),tAo=o("camembert"),aAo=o(" \u2014 "),RD=a("a"),nAo=o("CamembertForMaskedLM"),sAo=o(" (CamemBERT model)"),lAo=l(),Qu=a("li"),Rfe=a("strong"),iAo=o("ctrl"),dAo=o(" \u2014 "),PD=a("a"),cAo=o("CTRLLMHeadModel"),fAo=o(" (CTRL model)"),mAo=l(),Wu=a("li"),Pfe=a("strong"),gAo=o("data2vec-text"),hAo=o(" \u2014 "),BD=a("a"),pAo=o("Data2VecTextForMaskedLM"),_Ao=o(" (Data2VecText model)"),uAo=l(),Hu=a("li"),Bfe=a("strong"),bAo=o("deberta"),vAo=o(" \u2014 "),ID=a("a"),FAo=o("DebertaForMaskedLM"),TAo=o(" (DeBERTa model)"),MAo=l(),Uu=a("li"),Ife=a("strong"),EAo=o("deberta-v2"),CAo=o(" \u2014 "),ND=a("a"),wAo=o("DebertaV2ForMaskedLM"),AAo=o(" (DeBERTa-v2 model)"),LAo=l(),Ju=a("li"),Nfe=a("strong"),yAo=o("distilbert"),xAo=o(" \u2014 "),qD=a("a"),$Ao=o("DistilBertForMaskedLM"),kAo=o(" (DistilBERT model)"),SAo=l(),Yu=a("li"),qfe=a("strong"),RAo=o("electra"),PAo=o(" \u2014 "),jD=a("a"),BAo=o("ElectraForPreTraining"),IAo=o(" (ELECTRA model)"),NAo=l(),Ku=a("li"),jfe=a("strong"),qAo=o("flaubert"),jAo=o(" \u2014 "),DD=a("a"),DAo=o("FlaubertWithLMHeadModel"),GAo=o(" (FlauBERT model)"),OAo=l(),Zu=a("li"),Dfe=a("strong"),VAo=o("flava"),XAo=o(" \u2014 "),GD=a("a"),zAo=o("FlavaForPreTraining"),QAo=o(" (FLAVA model)"),WAo=l(),e1=a("li"),Gfe=a("strong"),HAo=o("fnet"),UAo=o(" \u2014 "),OD=a("a"),JAo=o("FNetForPreTraining"),YAo=o(" (FNet model)"),KAo=l(),o1=a("li"),Ofe=a("strong"),ZAo=o("fsmt"),e6o=o(" \u2014 "),VD=a("a"),o6o=o("FSMTForConditionalGeneration"),r6o=o(" (FairSeq Machine-Translation model)"),t6o=l(),r1=a("li"),Vfe=a("strong"),a6o=o("funnel"),n6o=o(" \u2014 "),XD=a("a"),s6o=o("FunnelForPreTraining"),l6o=o(" (Funnel Transformer model)"),i6o=l(),t1=a("li"),Xfe=a("strong"),d6o=o("gpt2"),c6o=o(" \u2014 "),zD=a("a"),f6o=o("GPT2LMHeadModel"),m6o=o(" (OpenAI GPT-2 model)"),g6o=l(),a1=a("li"),zfe=a("strong"),h6o=o("ibert"),p6o=o(" \u2014 "),QD=a("a"),_6o=o("IBertForMaskedLM"),u6o=o(" (I-BERT model)"),b6o=l(),n1=a("li"),Qfe=a("strong"),v6o=o("layoutlm"),F6o=o(" \u2014 "),WD=a("a"),T6o=o("LayoutLMForMaskedLM"),M6o=o(" (LayoutLM model)"),E6o=l(),s1=a("li"),Wfe=a("strong"),C6o=o("longformer"),w6o=o(" \u2014 "),HD=a("a"),A6o=o("LongformerForMaskedLM"),L6o=o(" (Longformer model)"),y6o=l(),l1=a("li"),Hfe=a("strong"),x6o=o("lxmert"),$6o=o(" \u2014 "),UD=a("a"),k6o=o("LxmertForPreTraining"),S6o=o(" (LXMERT model)"),R6o=l(),i1=a("li"),Ufe=a("strong"),P6o=o("megatron-bert"),B6o=o(" \u2014 "),JD=a("a"),I6o=o("MegatronBertForPreTraining"),N6o=o(" (Megatron-BERT model)"),q6o=l(),d1=a("li"),Jfe=a("strong"),j6o=o("mobilebert"),D6o=o(" \u2014 "),YD=a("a"),G6o=o("MobileBertForPreTraining"),O6o=o(" (MobileBERT model)"),V6o=l(),c1=a("li"),Yfe=a("strong"),X6o=o("mpnet"),z6o=o(" \u2014 "),KD=a("a"),Q6o=o("MPNetForMaskedLM"),W6o=o(" (MPNet model)"),H6o=l(),f1=a("li"),Kfe=a("strong"),U6o=o("nezha"),J6o=o(" \u2014 "),ZD=a("a"),Y6o=o("NezhaForPreTraining"),K6o=o(" (Nezha model)"),Z6o=l(),m1=a("li"),Zfe=a("strong"),eLo=o("openai-gpt"),oLo=o(" \u2014 "),eG=a("a"),rLo=o("OpenAIGPTLMHeadModel"),tLo=o(" (OpenAI GPT model)"),aLo=l(),g1=a("li"),eme=a("strong"),nLo=o("retribert"),sLo=o(" \u2014 "),oG=a("a"),lLo=o("RetriBertModel"),iLo=o(" (RetriBERT model)"),dLo=l(),h1=a("li"),ome=a("strong"),cLo=o("roberta"),fLo=o(" \u2014 "),rG=a("a"),mLo=o("RobertaForMaskedLM"),gLo=o(" (RoBERTa model)"),hLo=l(),p1=a("li"),rme=a("strong"),pLo=o("splinter"),_Lo=o(" \u2014 "),tG=a("a"),uLo=o("SplinterForPreTraining"),bLo=o(" (Splinter model)"),vLo=l(),_1=a("li"),tme=a("strong"),FLo=o("squeezebert"),TLo=o(" \u2014 "),aG=a("a"),MLo=o("SqueezeBertForMaskedLM"),ELo=o(" (SqueezeBERT model)"),CLo=l(),u1=a("li"),ame=a("strong"),wLo=o("t5"),ALo=o(" \u2014 "),nG=a("a"),LLo=o("T5ForConditionalGeneration"),yLo=o(" (T5 model)"),xLo=l(),b1=a("li"),nme=a("strong"),$Lo=o("tapas"),kLo=o(" \u2014 "),sG=a("a"),SLo=o("TapasForMaskedLM"),RLo=o(" (TAPAS model)"),PLo=l(),v1=a("li"),sme=a("strong"),BLo=o("transfo-xl"),ILo=o(" \u2014 "),lG=a("a"),NLo=o("TransfoXLLMHeadModel"),qLo=o(" (Transformer-XL model)"),jLo=l(),F1=a("li"),lme=a("strong"),DLo=o("unispeech"),GLo=o(" \u2014 "),iG=a("a"),OLo=o("UniSpeechForPreTraining"),VLo=o(" (UniSpeech model)"),XLo=l(),T1=a("li"),ime=a("strong"),zLo=o("unispeech-sat"),QLo=o(" \u2014 "),dG=a("a"),WLo=o("UniSpeechSatForPreTraining"),HLo=o(" (UniSpeechSat model)"),ULo=l(),M1=a("li"),dme=a("strong"),JLo=o("visual_bert"),YLo=o(" \u2014 "),cG=a("a"),KLo=o("VisualBertForPreTraining"),ZLo=o(" (VisualBERT model)"),eyo=l(),E1=a("li"),cme=a("strong"),oyo=o("vit_mae"),ryo=o(" \u2014 "),fG=a("a"),tyo=o("ViTMAEForPreTraining"),ayo=o(" (ViTMAE model)"),nyo=l(),C1=a("li"),fme=a("strong"),syo=o("wav2vec2"),lyo=o(" \u2014 "),mG=a("a"),iyo=o("Wav2Vec2ForPreTraining"),dyo=o(" (Wav2Vec2 model)"),cyo=l(),w1=a("li"),mme=a("strong"),fyo=o("wav2vec2-conformer"),myo=o(" \u2014 "),gG=a("a"),gyo=o("Wav2Vec2ConformerForPreTraining"),hyo=o(" (Wav2Vec2-Conformer model)"),pyo=l(),A1=a("li"),gme=a("strong"),_yo=o("xlm"),uyo=o(" \u2014 "),hG=a("a"),byo=o("XLMWithLMHeadModel"),vyo=o(" (XLM model)"),Fyo=l(),L1=a("li"),hme=a("strong"),Tyo=o("xlm-roberta"),Myo=o(" \u2014 "),pG=a("a"),Eyo=o("XLMRobertaForMaskedLM"),Cyo=o(" (XLM-RoBERTa model)"),wyo=l(),y1=a("li"),pme=a("strong"),Ayo=o("xlm-roberta-xl"),Lyo=o(" \u2014 "),_G=a("a"),yyo=o("XLMRobertaXLForMaskedLM"),xyo=o(" (XLM-RoBERTa-XL model)"),$yo=l(),x1=a("li"),_me=a("strong"),kyo=o("xlnet"),Syo=o(" \u2014 "),uG=a("a"),Ryo=o("XLNetLMHeadModel"),Pyo=o(" (XLNet model)"),Byo=l(),$1=a("p"),Iyo=o("The model is set in evaluation mode by default using "),ume=a("code"),Nyo=o("model.eval()"),qyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),jyo=o("model.train()"),Dyo=l(),F(k1.$$.fragment),DOe=l(),Vi=a("h2"),S1=a("a"),vme=a("span"),F(Fy.$$.fragment),Gyo=l(),Fme=a("span"),Oyo=o("AutoModelForCausalLM"),GOe=l(),ko=a("div"),F(Ty.$$.fragment),Vyo=l(),Xi=a("p"),Xyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bG=a("a"),zyo=o("from_pretrained()"),Qyo=o(" class method or the "),vG=a("a"),Wyo=o("from_config()"),Hyo=o(` class
method.`),Uyo=l(),My=a("p"),Jyo=o("This class cannot be instantiated directly using "),Tme=a("code"),Yyo=o("__init__()"),Kyo=o(" (throws an error)."),Zyo=l(),lt=a("div"),F(Ey.$$.fragment),e8o=l(),Mme=a("p"),o8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r8o=l(),zi=a("p"),t8o=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),a8o=o("not"),n8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),s8o=o("from_pretrained()"),l8o=o(" to load the model weights."),i8o=l(),F(R1.$$.fragment),d8o=l(),Ke=a("div"),F(Cy.$$.fragment),c8o=l(),Cme=a("p"),f8o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),m8o=l(),Ba=a("p"),g8o=o("The model class to instantiate is selected based on the "),wme=a("code"),h8o=o("model_type"),p8o=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),_8o=o("pretrained_model_name_or_path"),u8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),b8o=o("pretrained_model_name_or_path"),v8o=o(":"),F8o=l(),z=a("ul"),P1=a("li"),yme=a("strong"),T8o=o("bart"),M8o=o(" \u2014 "),TG=a("a"),E8o=o("BartForCausalLM"),C8o=o(" (BART model)"),w8o=l(),B1=a("li"),xme=a("strong"),A8o=o("bert"),L8o=o(" \u2014 "),MG=a("a"),y8o=o("BertLMHeadModel"),x8o=o(" (BERT model)"),$8o=l(),I1=a("li"),$me=a("strong"),k8o=o("bert-generation"),S8o=o(" \u2014 "),EG=a("a"),R8o=o("BertGenerationDecoder"),P8o=o(" (Bert Generation model)"),B8o=l(),N1=a("li"),kme=a("strong"),I8o=o("big_bird"),N8o=o(" \u2014 "),CG=a("a"),q8o=o("BigBirdForCausalLM"),j8o=o(" (BigBird model)"),D8o=l(),q1=a("li"),Sme=a("strong"),G8o=o("bigbird_pegasus"),O8o=o(" \u2014 "),wG=a("a"),V8o=o("BigBirdPegasusForCausalLM"),X8o=o(" (BigBird-Pegasus model)"),z8o=l(),j1=a("li"),Rme=a("strong"),Q8o=o("blenderbot"),W8o=o(" \u2014 "),AG=a("a"),H8o=o("BlenderbotForCausalLM"),U8o=o(" (Blenderbot model)"),J8o=l(),D1=a("li"),Pme=a("strong"),Y8o=o("blenderbot-small"),K8o=o(" \u2014 "),LG=a("a"),Z8o=o("BlenderbotSmallForCausalLM"),e9o=o(" (BlenderbotSmall model)"),o9o=l(),G1=a("li"),Bme=a("strong"),r9o=o("bloom"),t9o=o(" \u2014 "),yG=a("a"),a9o=o("BloomForCausalLM"),n9o=o(" (BLOOM model)"),s9o=l(),O1=a("li"),Ime=a("strong"),l9o=o("camembert"),i9o=o(" \u2014 "),xG=a("a"),d9o=o("CamembertForCausalLM"),c9o=o(" (CamemBERT model)"),f9o=l(),V1=a("li"),Nme=a("strong"),m9o=o("codegen"),g9o=o(" \u2014 "),$G=a("a"),h9o=o("CodeGenForCausalLM"),p9o=o(" (CodeGen model)"),_9o=l(),X1=a("li"),qme=a("strong"),u9o=o("ctrl"),b9o=o(" \u2014 "),kG=a("a"),v9o=o("CTRLLMHeadModel"),F9o=o(" (CTRL model)"),T9o=l(),z1=a("li"),jme=a("strong"),M9o=o("data2vec-text"),E9o=o(" \u2014 "),SG=a("a"),C9o=o("Data2VecTextForCausalLM"),w9o=o(" (Data2VecText model)"),A9o=l(),Q1=a("li"),Dme=a("strong"),L9o=o("electra"),y9o=o(" \u2014 "),RG=a("a"),x9o=o("ElectraForCausalLM"),$9o=o(" (ELECTRA model)"),k9o=l(),W1=a("li"),Gme=a("strong"),S9o=o("gpt2"),R9o=o(" \u2014 "),PG=a("a"),P9o=o("GPT2LMHeadModel"),B9o=o(" (OpenAI GPT-2 model)"),I9o=l(),H1=a("li"),Ome=a("strong"),N9o=o("gpt_neo"),q9o=o(" \u2014 "),BG=a("a"),j9o=o("GPTNeoForCausalLM"),D9o=o(" (GPT Neo model)"),G9o=l(),U1=a("li"),Vme=a("strong"),O9o=o("gpt_neox"),V9o=o(" \u2014 "),IG=a("a"),X9o=o("GPTNeoXForCausalLM"),z9o=o(" (GPT NeoX model)"),Q9o=l(),J1=a("li"),Xme=a("strong"),W9o=o("gptj"),H9o=o(" \u2014 "),NG=a("a"),U9o=o("GPTJForCausalLM"),J9o=o(" (GPT-J model)"),Y9o=l(),Y1=a("li"),zme=a("strong"),K9o=o("marian"),Z9o=o(" \u2014 "),qG=a("a"),exo=o("MarianForCausalLM"),oxo=o(" (Marian model)"),rxo=l(),K1=a("li"),Qme=a("strong"),txo=o("mbart"),axo=o(" \u2014 "),jG=a("a"),nxo=o("MBartForCausalLM"),sxo=o(" (mBART model)"),lxo=l(),Z1=a("li"),Wme=a("strong"),ixo=o("megatron-bert"),dxo=o(" \u2014 "),DG=a("a"),cxo=o("MegatronBertForCausalLM"),fxo=o(" (Megatron-BERT model)"),mxo=l(),e7=a("li"),Hme=a("strong"),gxo=o("openai-gpt"),hxo=o(" \u2014 "),GG=a("a"),pxo=o("OpenAIGPTLMHeadModel"),_xo=o(" (OpenAI GPT model)"),uxo=l(),o7=a("li"),Ume=a("strong"),bxo=o("opt"),vxo=o(" \u2014 "),OG=a("a"),Fxo=o("OPTForCausalLM"),Txo=o(" (OPT model)"),Mxo=l(),r7=a("li"),Jme=a("strong"),Exo=o("pegasus"),Cxo=o(" \u2014 "),VG=a("a"),wxo=o("PegasusForCausalLM"),Axo=o(" (Pegasus model)"),Lxo=l(),t7=a("li"),Yme=a("strong"),yxo=o("plbart"),xxo=o(" \u2014 "),XG=a("a"),$xo=o("PLBartForCausalLM"),kxo=o(" (PLBart model)"),Sxo=l(),a7=a("li"),Kme=a("strong"),Rxo=o("prophetnet"),Pxo=o(" \u2014 "),zG=a("a"),Bxo=o("ProphetNetForCausalLM"),Ixo=o(" (ProphetNet model)"),Nxo=l(),n7=a("li"),Zme=a("strong"),qxo=o("qdqbert"),jxo=o(" \u2014 "),QG=a("a"),Dxo=o("QDQBertLMHeadModel"),Gxo=o(" (QDQBert model)"),Oxo=l(),s7=a("li"),ege=a("strong"),Vxo=o("reformer"),Xxo=o(" \u2014 "),WG=a("a"),zxo=o("ReformerModelWithLMHead"),Qxo=o(" (Reformer model)"),Wxo=l(),l7=a("li"),oge=a("strong"),Hxo=o("rembert"),Uxo=o(" \u2014 "),HG=a("a"),Jxo=o("RemBertForCausalLM"),Yxo=o(" (RemBERT model)"),Kxo=l(),i7=a("li"),rge=a("strong"),Zxo=o("roberta"),e$o=o(" \u2014 "),UG=a("a"),o$o=o("RobertaForCausalLM"),r$o=o(" (RoBERTa model)"),t$o=l(),d7=a("li"),tge=a("strong"),a$o=o("roformer"),n$o=o(" \u2014 "),JG=a("a"),s$o=o("RoFormerForCausalLM"),l$o=o(" (RoFormer model)"),i$o=l(),c7=a("li"),age=a("strong"),d$o=o("speech_to_text_2"),c$o=o(" \u2014 "),YG=a("a"),f$o=o("Speech2Text2ForCausalLM"),m$o=o(" (Speech2Text2 model)"),g$o=l(),f7=a("li"),nge=a("strong"),h$o=o("transfo-xl"),p$o=o(" \u2014 "),KG=a("a"),_$o=o("TransfoXLLMHeadModel"),u$o=o(" (Transformer-XL model)"),b$o=l(),m7=a("li"),sge=a("strong"),v$o=o("trocr"),F$o=o(" \u2014 "),ZG=a("a"),T$o=o("TrOCRForCausalLM"),M$o=o(" (TrOCR model)"),E$o=l(),g7=a("li"),lge=a("strong"),C$o=o("xglm"),w$o=o(" \u2014 "),eO=a("a"),A$o=o("XGLMForCausalLM"),L$o=o(" (XGLM model)"),y$o=l(),h7=a("li"),ige=a("strong"),x$o=o("xlm"),$$o=o(" \u2014 "),oO=a("a"),k$o=o("XLMWithLMHeadModel"),S$o=o(" (XLM model)"),R$o=l(),p7=a("li"),dge=a("strong"),P$o=o("xlm-prophetnet"),B$o=o(" \u2014 "),rO=a("a"),I$o=o("XLMProphetNetForCausalLM"),N$o=o(" (XLM-ProphetNet model)"),q$o=l(),_7=a("li"),cge=a("strong"),j$o=o("xlm-roberta"),D$o=o(" \u2014 "),tO=a("a"),G$o=o("XLMRobertaForCausalLM"),O$o=o(" (XLM-RoBERTa model)"),V$o=l(),u7=a("li"),fge=a("strong"),X$o=o("xlm-roberta-xl"),z$o=o(" \u2014 "),aO=a("a"),Q$o=o("XLMRobertaXLForCausalLM"),W$o=o(" (XLM-RoBERTa-XL model)"),H$o=l(),b7=a("li"),mge=a("strong"),U$o=o("xlnet"),J$o=o(" \u2014 "),nO=a("a"),Y$o=o("XLNetLMHeadModel"),K$o=o(" (XLNet model)"),Z$o=l(),v7=a("p"),eko=o("The model is set in evaluation mode by default using "),gge=a("code"),oko=o("model.eval()"),rko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),tko=o("model.train()"),ako=l(),F(F7.$$.fragment),OOe=l(),Qi=a("h2"),T7=a("a"),pge=a("span"),F(wy.$$.fragment),nko=l(),_ge=a("span"),sko=o("AutoModelForMaskedLM"),VOe=l(),So=a("div"),F(Ay.$$.fragment),lko=l(),Wi=a("p"),iko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sO=a("a"),dko=o("from_pretrained()"),cko=o(" class method or the "),lO=a("a"),fko=o("from_config()"),mko=o(` class
method.`),gko=l(),Ly=a("p"),hko=o("This class cannot be instantiated directly using "),uge=a("code"),pko=o("__init__()"),_ko=o(" (throws an error)."),uko=l(),it=a("div"),F(yy.$$.fragment),bko=l(),bge=a("p"),vko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fko=l(),Hi=a("p"),Tko=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),Mko=o("not"),Eko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),Cko=o("from_pretrained()"),wko=o(" to load the model weights."),Ako=l(),F(M7.$$.fragment),Lko=l(),Ze=a("div"),F(xy.$$.fragment),yko=l(),Fge=a("p"),xko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$ko=l(),Ia=a("p"),kko=o("The model class to instantiate is selected based on the "),Tge=a("code"),Sko=o("model_type"),Rko=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),Pko=o("pretrained_model_name_or_path"),Bko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),Iko=o("pretrained_model_name_or_path"),Nko=o(":"),qko=l(),W=a("ul"),E7=a("li"),Cge=a("strong"),jko=o("albert"),Dko=o(" \u2014 "),dO=a("a"),Gko=o("AlbertForMaskedLM"),Oko=o(" (ALBERT model)"),Vko=l(),C7=a("li"),wge=a("strong"),Xko=o("bart"),zko=o(" \u2014 "),cO=a("a"),Qko=o("BartForConditionalGeneration"),Wko=o(" (BART model)"),Hko=l(),w7=a("li"),Age=a("strong"),Uko=o("bert"),Jko=o(" \u2014 "),fO=a("a"),Yko=o("BertForMaskedLM"),Kko=o(" (BERT model)"),Zko=l(),A7=a("li"),Lge=a("strong"),eSo=o("big_bird"),oSo=o(" \u2014 "),mO=a("a"),rSo=o("BigBirdForMaskedLM"),tSo=o(" (BigBird model)"),aSo=l(),L7=a("li"),yge=a("strong"),nSo=o("camembert"),sSo=o(" \u2014 "),gO=a("a"),lSo=o("CamembertForMaskedLM"),iSo=o(" (CamemBERT model)"),dSo=l(),y7=a("li"),xge=a("strong"),cSo=o("convbert"),fSo=o(" \u2014 "),hO=a("a"),mSo=o("ConvBertForMaskedLM"),gSo=o(" (ConvBERT model)"),hSo=l(),x7=a("li"),$ge=a("strong"),pSo=o("data2vec-text"),_So=o(" \u2014 "),pO=a("a"),uSo=o("Data2VecTextForMaskedLM"),bSo=o(" (Data2VecText model)"),vSo=l(),$7=a("li"),kge=a("strong"),FSo=o("deberta"),TSo=o(" \u2014 "),_O=a("a"),MSo=o("DebertaForMaskedLM"),ESo=o(" (DeBERTa model)"),CSo=l(),k7=a("li"),Sge=a("strong"),wSo=o("deberta-v2"),ASo=o(" \u2014 "),uO=a("a"),LSo=o("DebertaV2ForMaskedLM"),ySo=o(" (DeBERTa-v2 model)"),xSo=l(),S7=a("li"),Rge=a("strong"),$So=o("distilbert"),kSo=o(" \u2014 "),bO=a("a"),SSo=o("DistilBertForMaskedLM"),RSo=o(" (DistilBERT model)"),PSo=l(),R7=a("li"),Pge=a("strong"),BSo=o("electra"),ISo=o(" \u2014 "),vO=a("a"),NSo=o("ElectraForMaskedLM"),qSo=o(" (ELECTRA model)"),jSo=l(),P7=a("li"),Bge=a("strong"),DSo=o("flaubert"),GSo=o(" \u2014 "),FO=a("a"),OSo=o("FlaubertWithLMHeadModel"),VSo=o(" (FlauBERT model)"),XSo=l(),B7=a("li"),Ige=a("strong"),zSo=o("fnet"),QSo=o(" \u2014 "),TO=a("a"),WSo=o("FNetForMaskedLM"),HSo=o(" (FNet model)"),USo=l(),I7=a("li"),Nge=a("strong"),JSo=o("funnel"),YSo=o(" \u2014 "),MO=a("a"),KSo=o("FunnelForMaskedLM"),ZSo=o(" (Funnel Transformer model)"),eRo=l(),N7=a("li"),qge=a("strong"),oRo=o("ibert"),rRo=o(" \u2014 "),EO=a("a"),tRo=o("IBertForMaskedLM"),aRo=o(" (I-BERT model)"),nRo=l(),q7=a("li"),jge=a("strong"),sRo=o("layoutlm"),lRo=o(" \u2014 "),CO=a("a"),iRo=o("LayoutLMForMaskedLM"),dRo=o(" (LayoutLM model)"),cRo=l(),j7=a("li"),Dge=a("strong"),fRo=o("longformer"),mRo=o(" \u2014 "),wO=a("a"),gRo=o("LongformerForMaskedLM"),hRo=o(" (Longformer model)"),pRo=l(),D7=a("li"),Gge=a("strong"),_Ro=o("luke"),uRo=o(" \u2014 "),AO=a("a"),bRo=o("LukeForMaskedLM"),vRo=o(" (LUKE model)"),FRo=l(),G7=a("li"),Oge=a("strong"),TRo=o("mbart"),MRo=o(" \u2014 "),LO=a("a"),ERo=o("MBartForConditionalGeneration"),CRo=o(" (mBART model)"),wRo=l(),O7=a("li"),Vge=a("strong"),ARo=o("megatron-bert"),LRo=o(" \u2014 "),yO=a("a"),yRo=o("MegatronBertForMaskedLM"),xRo=o(" (Megatron-BERT model)"),$Ro=l(),V7=a("li"),Xge=a("strong"),kRo=o("mobilebert"),SRo=o(" \u2014 "),xO=a("a"),RRo=o("MobileBertForMaskedLM"),PRo=o(" (MobileBERT model)"),BRo=l(),X7=a("li"),zge=a("strong"),IRo=o("mpnet"),NRo=o(" \u2014 "),$O=a("a"),qRo=o("MPNetForMaskedLM"),jRo=o(" (MPNet model)"),DRo=l(),z7=a("li"),Qge=a("strong"),GRo=o("nezha"),ORo=o(" \u2014 "),kO=a("a"),VRo=o("NezhaForMaskedLM"),XRo=o(" (Nezha model)"),zRo=l(),Q7=a("li"),Wge=a("strong"),QRo=o("nystromformer"),WRo=o(" \u2014 "),SO=a("a"),HRo=o("NystromformerForMaskedLM"),URo=o(" (Nystr\xF6mformer model)"),JRo=l(),W7=a("li"),Hge=a("strong"),YRo=o("perceiver"),KRo=o(" \u2014 "),RO=a("a"),ZRo=o("PerceiverForMaskedLM"),ePo=o(" (Perceiver model)"),oPo=l(),H7=a("li"),Uge=a("strong"),rPo=o("qdqbert"),tPo=o(" \u2014 "),PO=a("a"),aPo=o("QDQBertForMaskedLM"),nPo=o(" (QDQBert model)"),sPo=l(),U7=a("li"),Jge=a("strong"),lPo=o("reformer"),iPo=o(" \u2014 "),BO=a("a"),dPo=o("ReformerForMaskedLM"),cPo=o(" (Reformer model)"),fPo=l(),J7=a("li"),Yge=a("strong"),mPo=o("rembert"),gPo=o(" \u2014 "),IO=a("a"),hPo=o("RemBertForMaskedLM"),pPo=o(" (RemBERT model)"),_Po=l(),Y7=a("li"),Kge=a("strong"),uPo=o("roberta"),bPo=o(" \u2014 "),NO=a("a"),vPo=o("RobertaForMaskedLM"),FPo=o(" (RoBERTa model)"),TPo=l(),K7=a("li"),Zge=a("strong"),MPo=o("roformer"),EPo=o(" \u2014 "),qO=a("a"),CPo=o("RoFormerForMaskedLM"),wPo=o(" (RoFormer model)"),APo=l(),Z7=a("li"),ehe=a("strong"),LPo=o("squeezebert"),yPo=o(" \u2014 "),jO=a("a"),xPo=o("SqueezeBertForMaskedLM"),$Po=o(" (SqueezeBERT model)"),kPo=l(),e2=a("li"),ohe=a("strong"),SPo=o("tapas"),RPo=o(" \u2014 "),DO=a("a"),PPo=o("TapasForMaskedLM"),BPo=o(" (TAPAS model)"),IPo=l(),o2=a("li"),rhe=a("strong"),NPo=o("wav2vec2"),qPo=o(" \u2014 "),the=a("code"),jPo=o("Wav2Vec2ForMaskedLM"),DPo=o(" (Wav2Vec2 model)"),GPo=l(),r2=a("li"),ahe=a("strong"),OPo=o("xlm"),VPo=o(" \u2014 "),GO=a("a"),XPo=o("XLMWithLMHeadModel"),zPo=o(" (XLM model)"),QPo=l(),t2=a("li"),nhe=a("strong"),WPo=o("xlm-roberta"),HPo=o(" \u2014 "),OO=a("a"),UPo=o("XLMRobertaForMaskedLM"),JPo=o(" (XLM-RoBERTa model)"),YPo=l(),a2=a("li"),she=a("strong"),KPo=o("xlm-roberta-xl"),ZPo=o(" \u2014 "),VO=a("a"),eBo=o("XLMRobertaXLForMaskedLM"),oBo=o(" (XLM-RoBERTa-XL model)"),rBo=l(),n2=a("li"),lhe=a("strong"),tBo=o("yoso"),aBo=o(" \u2014 "),XO=a("a"),nBo=o("YosoForMaskedLM"),sBo=o(" (YOSO model)"),lBo=l(),s2=a("p"),iBo=o("The model is set in evaluation mode by default using "),ihe=a("code"),dBo=o("model.eval()"),cBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),fBo=o("model.train()"),mBo=l(),F(l2.$$.fragment),XOe=l(),Ui=a("h2"),i2=a("a"),che=a("span"),F($y.$$.fragment),gBo=l(),fhe=a("span"),hBo=o("AutoModelForSeq2SeqLM"),zOe=l(),Ro=a("div"),F(ky.$$.fragment),pBo=l(),Ji=a("p"),_Bo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zO=a("a"),uBo=o("from_pretrained()"),bBo=o(" class method or the "),QO=a("a"),vBo=o("from_config()"),FBo=o(` class
method.`),TBo=l(),Sy=a("p"),MBo=o("This class cannot be instantiated directly using "),mhe=a("code"),EBo=o("__init__()"),CBo=o(" (throws an error)."),wBo=l(),dt=a("div"),F(Ry.$$.fragment),ABo=l(),ghe=a("p"),LBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yBo=l(),Yi=a("p"),xBo=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),$Bo=o("not"),kBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),SBo=o("from_pretrained()"),RBo=o(" to load the model weights."),PBo=l(),F(d2.$$.fragment),BBo=l(),eo=a("div"),F(Py.$$.fragment),IBo=l(),phe=a("p"),NBo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qBo=l(),Na=a("p"),jBo=o("The model class to instantiate is selected based on the "),_he=a("code"),DBo=o("model_type"),GBo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),OBo=o("pretrained_model_name_or_path"),VBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),XBo=o("pretrained_model_name_or_path"),zBo=o(":"),QBo=l(),pe=a("ul"),c2=a("li"),vhe=a("strong"),WBo=o("bart"),HBo=o(" \u2014 "),HO=a("a"),UBo=o("BartForConditionalGeneration"),JBo=o(" (BART model)"),YBo=l(),f2=a("li"),Fhe=a("strong"),KBo=o("bigbird_pegasus"),ZBo=o(" \u2014 "),UO=a("a"),eIo=o("BigBirdPegasusForConditionalGeneration"),oIo=o(" (BigBird-Pegasus model)"),rIo=l(),m2=a("li"),The=a("strong"),tIo=o("blenderbot"),aIo=o(" \u2014 "),JO=a("a"),nIo=o("BlenderbotForConditionalGeneration"),sIo=o(" (Blenderbot model)"),lIo=l(),g2=a("li"),Mhe=a("strong"),iIo=o("blenderbot-small"),dIo=o(" \u2014 "),YO=a("a"),cIo=o("BlenderbotSmallForConditionalGeneration"),fIo=o(" (BlenderbotSmall model)"),mIo=l(),h2=a("li"),Ehe=a("strong"),gIo=o("encoder-decoder"),hIo=o(" \u2014 "),KO=a("a"),pIo=o("EncoderDecoderModel"),_Io=o(" (Encoder decoder model)"),uIo=l(),p2=a("li"),Che=a("strong"),bIo=o("fsmt"),vIo=o(" \u2014 "),ZO=a("a"),FIo=o("FSMTForConditionalGeneration"),TIo=o(" (FairSeq Machine-Translation model)"),MIo=l(),_2=a("li"),whe=a("strong"),EIo=o("led"),CIo=o(" \u2014 "),eV=a("a"),wIo=o("LEDForConditionalGeneration"),AIo=o(" (LED model)"),LIo=l(),u2=a("li"),Ahe=a("strong"),yIo=o("longt5"),xIo=o(" \u2014 "),oV=a("a"),$Io=o("LongT5ForConditionalGeneration"),kIo=o(" (LongT5 model)"),SIo=l(),b2=a("li"),Lhe=a("strong"),RIo=o("m2m_100"),PIo=o(" \u2014 "),rV=a("a"),BIo=o("M2M100ForConditionalGeneration"),IIo=o(" (M2M100 model)"),NIo=l(),v2=a("li"),yhe=a("strong"),qIo=o("marian"),jIo=o(" \u2014 "),tV=a("a"),DIo=o("MarianMTModel"),GIo=o(" (Marian model)"),OIo=l(),F2=a("li"),xhe=a("strong"),VIo=o("mbart"),XIo=o(" \u2014 "),aV=a("a"),zIo=o("MBartForConditionalGeneration"),QIo=o(" (mBART model)"),WIo=l(),T2=a("li"),$he=a("strong"),HIo=o("mt5"),UIo=o(" \u2014 "),nV=a("a"),JIo=o("MT5ForConditionalGeneration"),YIo=o(" (MT5 model)"),KIo=l(),M2=a("li"),khe=a("strong"),ZIo=o("pegasus"),eNo=o(" \u2014 "),sV=a("a"),oNo=o("PegasusForConditionalGeneration"),rNo=o(" (Pegasus model)"),tNo=l(),E2=a("li"),She=a("strong"),aNo=o("plbart"),nNo=o(" \u2014 "),lV=a("a"),sNo=o("PLBartForConditionalGeneration"),lNo=o(" (PLBart model)"),iNo=l(),C2=a("li"),Rhe=a("strong"),dNo=o("prophetnet"),cNo=o(" \u2014 "),iV=a("a"),fNo=o("ProphetNetForConditionalGeneration"),mNo=o(" (ProphetNet model)"),gNo=l(),w2=a("li"),Phe=a("strong"),hNo=o("t5"),pNo=o(" \u2014 "),dV=a("a"),_No=o("T5ForConditionalGeneration"),uNo=o(" (T5 model)"),bNo=l(),A2=a("li"),Bhe=a("strong"),vNo=o("xlm-prophetnet"),FNo=o(" \u2014 "),cV=a("a"),TNo=o("XLMProphetNetForConditionalGeneration"),MNo=o(" (XLM-ProphetNet model)"),ENo=l(),L2=a("p"),CNo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),wNo=o("model.eval()"),ANo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),LNo=o("model.train()"),yNo=l(),F(y2.$$.fragment),QOe=l(),Ki=a("h2"),x2=a("a"),qhe=a("span"),F(By.$$.fragment),xNo=l(),jhe=a("span"),$No=o("AutoModelForSequenceClassification"),WOe=l(),Po=a("div"),F(Iy.$$.fragment),kNo=l(),Zi=a("p"),SNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fV=a("a"),RNo=o("from_pretrained()"),PNo=o(" class method or the "),mV=a("a"),BNo=o("from_config()"),INo=o(` class
method.`),NNo=l(),Ny=a("p"),qNo=o("This class cannot be instantiated directly using "),Dhe=a("code"),jNo=o("__init__()"),DNo=o(" (throws an error)."),GNo=l(),ct=a("div"),F(qy.$$.fragment),ONo=l(),Ghe=a("p"),VNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XNo=l(),ed=a("p"),zNo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),QNo=o("not"),WNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),HNo=o("from_pretrained()"),UNo=o(" to load the model weights."),JNo=l(),F($2.$$.fragment),YNo=l(),oo=a("div"),F(jy.$$.fragment),KNo=l(),Vhe=a("p"),ZNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eqo=l(),qa=a("p"),oqo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),rqo=o("model_type"),tqo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(":"),iqo=l(),N=a("ul"),k2=a("li"),Whe=a("strong"),dqo=o("albert"),cqo=o(" \u2014 "),hV=a("a"),fqo=o("AlbertForSequenceClassification"),mqo=o(" (ALBERT model)"),gqo=l(),S2=a("li"),Hhe=a("strong"),hqo=o("bart"),pqo=o(" \u2014 "),pV=a("a"),_qo=o("BartForSequenceClassification"),uqo=o(" (BART model)"),bqo=l(),R2=a("li"),Uhe=a("strong"),vqo=o("bert"),Fqo=o(" \u2014 "),_V=a("a"),Tqo=o("BertForSequenceClassification"),Mqo=o(" (BERT model)"),Eqo=l(),P2=a("li"),Jhe=a("strong"),Cqo=o("big_bird"),wqo=o(" \u2014 "),uV=a("a"),Aqo=o("BigBirdForSequenceClassification"),Lqo=o(" (BigBird model)"),yqo=l(),B2=a("li"),Yhe=a("strong"),xqo=o("bigbird_pegasus"),$qo=o(" \u2014 "),bV=a("a"),kqo=o("BigBirdPegasusForSequenceClassification"),Sqo=o(" (BigBird-Pegasus model)"),Rqo=l(),I2=a("li"),Khe=a("strong"),Pqo=o("bloom"),Bqo=o(" \u2014 "),vV=a("a"),Iqo=o("BloomForSequenceClassification"),Nqo=o(" (BLOOM model)"),qqo=l(),N2=a("li"),Zhe=a("strong"),jqo=o("camembert"),Dqo=o(" \u2014 "),FV=a("a"),Gqo=o("CamembertForSequenceClassification"),Oqo=o(" (CamemBERT model)"),Vqo=l(),q2=a("li"),epe=a("strong"),Xqo=o("canine"),zqo=o(" \u2014 "),TV=a("a"),Qqo=o("CanineForSequenceClassification"),Wqo=o(" (CANINE model)"),Hqo=l(),j2=a("li"),ope=a("strong"),Uqo=o("convbert"),Jqo=o(" \u2014 "),MV=a("a"),Yqo=o("ConvBertForSequenceClassification"),Kqo=o(" (ConvBERT model)"),Zqo=l(),D2=a("li"),rpe=a("strong"),ejo=o("ctrl"),ojo=o(" \u2014 "),EV=a("a"),rjo=o("CTRLForSequenceClassification"),tjo=o(" (CTRL model)"),ajo=l(),G2=a("li"),tpe=a("strong"),njo=o("data2vec-text"),sjo=o(" \u2014 "),CV=a("a"),ljo=o("Data2VecTextForSequenceClassification"),ijo=o(" (Data2VecText model)"),djo=l(),O2=a("li"),ape=a("strong"),cjo=o("deberta"),fjo=o(" \u2014 "),wV=a("a"),mjo=o("DebertaForSequenceClassification"),gjo=o(" (DeBERTa model)"),hjo=l(),V2=a("li"),npe=a("strong"),pjo=o("deberta-v2"),_jo=o(" \u2014 "),AV=a("a"),ujo=o("DebertaV2ForSequenceClassification"),bjo=o(" (DeBERTa-v2 model)"),vjo=l(),X2=a("li"),spe=a("strong"),Fjo=o("distilbert"),Tjo=o(" \u2014 "),LV=a("a"),Mjo=o("DistilBertForSequenceClassification"),Ejo=o(" (DistilBERT model)"),Cjo=l(),z2=a("li"),lpe=a("strong"),wjo=o("electra"),Ajo=o(" \u2014 "),yV=a("a"),Ljo=o("ElectraForSequenceClassification"),yjo=o(" (ELECTRA model)"),xjo=l(),Q2=a("li"),ipe=a("strong"),$jo=o("flaubert"),kjo=o(" \u2014 "),xV=a("a"),Sjo=o("FlaubertForSequenceClassification"),Rjo=o(" (FlauBERT model)"),Pjo=l(),W2=a("li"),dpe=a("strong"),Bjo=o("fnet"),Ijo=o(" \u2014 "),$V=a("a"),Njo=o("FNetForSequenceClassification"),qjo=o(" (FNet model)"),jjo=l(),H2=a("li"),cpe=a("strong"),Djo=o("funnel"),Gjo=o(" \u2014 "),kV=a("a"),Ojo=o("FunnelForSequenceClassification"),Vjo=o(" (Funnel Transformer model)"),Xjo=l(),U2=a("li"),fpe=a("strong"),zjo=o("gpt2"),Qjo=o(" \u2014 "),SV=a("a"),Wjo=o("GPT2ForSequenceClassification"),Hjo=o(" (OpenAI GPT-2 model)"),Ujo=l(),J2=a("li"),mpe=a("strong"),Jjo=o("gpt_neo"),Yjo=o(" \u2014 "),RV=a("a"),Kjo=o("GPTNeoForSequenceClassification"),Zjo=o(" (GPT Neo model)"),eDo=l(),Y2=a("li"),gpe=a("strong"),oDo=o("gptj"),rDo=o(" \u2014 "),PV=a("a"),tDo=o("GPTJForSequenceClassification"),aDo=o(" (GPT-J model)"),nDo=l(),K2=a("li"),hpe=a("strong"),sDo=o("ibert"),lDo=o(" \u2014 "),BV=a("a"),iDo=o("IBertForSequenceClassification"),dDo=o(" (I-BERT model)"),cDo=l(),Z2=a("li"),ppe=a("strong"),fDo=o("layoutlm"),mDo=o(" \u2014 "),IV=a("a"),gDo=o("LayoutLMForSequenceClassification"),hDo=o(" (LayoutLM model)"),pDo=l(),eb=a("li"),_pe=a("strong"),_Do=o("layoutlmv2"),uDo=o(" \u2014 "),NV=a("a"),bDo=o("LayoutLMv2ForSequenceClassification"),vDo=o(" (LayoutLMv2 model)"),FDo=l(),ob=a("li"),upe=a("strong"),TDo=o("layoutlmv3"),MDo=o(" \u2014 "),qV=a("a"),EDo=o("LayoutLMv3ForSequenceClassification"),CDo=o(" (LayoutLMv3 model)"),wDo=l(),rb=a("li"),bpe=a("strong"),ADo=o("led"),LDo=o(" \u2014 "),jV=a("a"),yDo=o("LEDForSequenceClassification"),xDo=o(" (LED model)"),$Do=l(),tb=a("li"),vpe=a("strong"),kDo=o("longformer"),SDo=o(" \u2014 "),DV=a("a"),RDo=o("LongformerForSequenceClassification"),PDo=o(" (Longformer model)"),BDo=l(),ab=a("li"),Fpe=a("strong"),IDo=o("mbart"),NDo=o(" \u2014 "),GV=a("a"),qDo=o("MBartForSequenceClassification"),jDo=o(" (mBART model)"),DDo=l(),nb=a("li"),Tpe=a("strong"),GDo=o("megatron-bert"),ODo=o(" \u2014 "),OV=a("a"),VDo=o("MegatronBertForSequenceClassification"),XDo=o(" (Megatron-BERT model)"),zDo=l(),sb=a("li"),Mpe=a("strong"),QDo=o("mobilebert"),WDo=o(" \u2014 "),VV=a("a"),HDo=o("MobileBertForSequenceClassification"),UDo=o(" (MobileBERT model)"),JDo=l(),lb=a("li"),Epe=a("strong"),YDo=o("mpnet"),KDo=o(" \u2014 "),XV=a("a"),ZDo=o("MPNetForSequenceClassification"),eGo=o(" (MPNet model)"),oGo=l(),ib=a("li"),Cpe=a("strong"),rGo=o("nezha"),tGo=o(" \u2014 "),zV=a("a"),aGo=o("NezhaForSequenceClassification"),nGo=o(" (Nezha model)"),sGo=l(),db=a("li"),wpe=a("strong"),lGo=o("nystromformer"),iGo=o(" \u2014 "),QV=a("a"),dGo=o("NystromformerForSequenceClassification"),cGo=o(" (Nystr\xF6mformer model)"),fGo=l(),cb=a("li"),Ape=a("strong"),mGo=o("openai-gpt"),gGo=o(" \u2014 "),WV=a("a"),hGo=o("OpenAIGPTForSequenceClassification"),pGo=o(" (OpenAI GPT model)"),_Go=l(),fb=a("li"),Lpe=a("strong"),uGo=o("perceiver"),bGo=o(" \u2014 "),HV=a("a"),vGo=o("PerceiverForSequenceClassification"),FGo=o(" (Perceiver model)"),TGo=l(),mb=a("li"),ype=a("strong"),MGo=o("plbart"),EGo=o(" \u2014 "),UV=a("a"),CGo=o("PLBartForSequenceClassification"),wGo=o(" (PLBart model)"),AGo=l(),gb=a("li"),xpe=a("strong"),LGo=o("qdqbert"),yGo=o(" \u2014 "),JV=a("a"),xGo=o("QDQBertForSequenceClassification"),$Go=o(" (QDQBert model)"),kGo=l(),hb=a("li"),$pe=a("strong"),SGo=o("reformer"),RGo=o(" \u2014 "),YV=a("a"),PGo=o("ReformerForSequenceClassification"),BGo=o(" (Reformer model)"),IGo=l(),pb=a("li"),kpe=a("strong"),NGo=o("rembert"),qGo=o(" \u2014 "),KV=a("a"),jGo=o("RemBertForSequenceClassification"),DGo=o(" (RemBERT model)"),GGo=l(),_b=a("li"),Spe=a("strong"),OGo=o("roberta"),VGo=o(" \u2014 "),ZV=a("a"),XGo=o("RobertaForSequenceClassification"),zGo=o(" (RoBERTa model)"),QGo=l(),ub=a("li"),Rpe=a("strong"),WGo=o("roformer"),HGo=o(" \u2014 "),eX=a("a"),UGo=o("RoFormerForSequenceClassification"),JGo=o(" (RoFormer model)"),YGo=l(),bb=a("li"),Ppe=a("strong"),KGo=o("squeezebert"),ZGo=o(" \u2014 "),oX=a("a"),eOo=o("SqueezeBertForSequenceClassification"),oOo=o(" (SqueezeBERT model)"),rOo=l(),vb=a("li"),Bpe=a("strong"),tOo=o("tapas"),aOo=o(" \u2014 "),rX=a("a"),nOo=o("TapasForSequenceClassification"),sOo=o(" (TAPAS model)"),lOo=l(),Fb=a("li"),Ipe=a("strong"),iOo=o("transfo-xl"),dOo=o(" \u2014 "),tX=a("a"),cOo=o("TransfoXLForSequenceClassification"),fOo=o(" (Transformer-XL model)"),mOo=l(),Tb=a("li"),Npe=a("strong"),gOo=o("xlm"),hOo=o(" \u2014 "),aX=a("a"),pOo=o("XLMForSequenceClassification"),_Oo=o(" (XLM model)"),uOo=l(),Mb=a("li"),qpe=a("strong"),bOo=o("xlm-roberta"),vOo=o(" \u2014 "),nX=a("a"),FOo=o("XLMRobertaForSequenceClassification"),TOo=o(" (XLM-RoBERTa model)"),MOo=l(),Eb=a("li"),jpe=a("strong"),EOo=o("xlm-roberta-xl"),COo=o(" \u2014 "),sX=a("a"),wOo=o("XLMRobertaXLForSequenceClassification"),AOo=o(" (XLM-RoBERTa-XL model)"),LOo=l(),Cb=a("li"),Dpe=a("strong"),yOo=o("xlnet"),xOo=o(" \u2014 "),lX=a("a"),$Oo=o("XLNetForSequenceClassification"),kOo=o(" (XLNet model)"),SOo=l(),wb=a("li"),Gpe=a("strong"),ROo=o("yoso"),POo=o(" \u2014 "),iX=a("a"),BOo=o("YosoForSequenceClassification"),IOo=o(" (YOSO model)"),NOo=l(),Ab=a("p"),qOo=o("The model is set in evaluation mode by default using "),Ope=a("code"),jOo=o("model.eval()"),DOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),GOo=o("model.train()"),OOo=l(),F(Lb.$$.fragment),HOe=l(),od=a("h2"),yb=a("a"),Xpe=a("span"),F(Dy.$$.fragment),VOo=l(),zpe=a("span"),XOo=o("AutoModelForMultipleChoice"),UOe=l(),Bo=a("div"),F(Gy.$$.fragment),zOo=l(),rd=a("p"),QOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dX=a("a"),WOo=o("from_pretrained()"),HOo=o(" class method or the "),cX=a("a"),UOo=o("from_config()"),JOo=o(` class
method.`),YOo=l(),Oy=a("p"),KOo=o("This class cannot be instantiated directly using "),Qpe=a("code"),ZOo=o("__init__()"),eVo=o(" (throws an error)."),oVo=l(),ft=a("div"),F(Vy.$$.fragment),rVo=l(),Wpe=a("p"),tVo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aVo=l(),td=a("p"),nVo=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),sVo=o("not"),lVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),iVo=o("from_pretrained()"),dVo=o(" to load the model weights."),cVo=l(),F(xb.$$.fragment),fVo=l(),ro=a("div"),F(Xy.$$.fragment),mVo=l(),Upe=a("p"),gVo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hVo=l(),ja=a("p"),pVo=o("The model class to instantiate is selected based on the "),Jpe=a("code"),_Vo=o("model_type"),uVo=o(` property of the config object (either
passed as an argument or loaded from `),Ype=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=a("code"),FVo=o("pretrained_model_name_or_path"),TVo=o(":"),MVo=l(),Z=a("ul"),$b=a("li"),Zpe=a("strong"),EVo=o("albert"),CVo=o(" \u2014 "),mX=a("a"),wVo=o("AlbertForMultipleChoice"),AVo=o(" (ALBERT model)"),LVo=l(),kb=a("li"),e_e=a("strong"),yVo=o("bert"),xVo=o(" \u2014 "),gX=a("a"),$Vo=o("BertForMultipleChoice"),kVo=o(" (BERT model)"),SVo=l(),Sb=a("li"),o_e=a("strong"),RVo=o("big_bird"),PVo=o(" \u2014 "),hX=a("a"),BVo=o("BigBirdForMultipleChoice"),IVo=o(" (BigBird model)"),NVo=l(),Rb=a("li"),r_e=a("strong"),qVo=o("camembert"),jVo=o(" \u2014 "),pX=a("a"),DVo=o("CamembertForMultipleChoice"),GVo=o(" (CamemBERT model)"),OVo=l(),Pb=a("li"),t_e=a("strong"),VVo=o("canine"),XVo=o(" \u2014 "),_X=a("a"),zVo=o("CanineForMultipleChoice"),QVo=o(" (CANINE model)"),WVo=l(),Bb=a("li"),a_e=a("strong"),HVo=o("convbert"),UVo=o(" \u2014 "),uX=a("a"),JVo=o("ConvBertForMultipleChoice"),YVo=o(" (ConvBERT model)"),KVo=l(),Ib=a("li"),n_e=a("strong"),ZVo=o("data2vec-text"),eXo=o(" \u2014 "),bX=a("a"),oXo=o("Data2VecTextForMultipleChoice"),rXo=o(" (Data2VecText model)"),tXo=l(),Nb=a("li"),s_e=a("strong"),aXo=o("deberta-v2"),nXo=o(" \u2014 "),vX=a("a"),sXo=o("DebertaV2ForMultipleChoice"),lXo=o(" (DeBERTa-v2 model)"),iXo=l(),qb=a("li"),l_e=a("strong"),dXo=o("distilbert"),cXo=o(" \u2014 "),FX=a("a"),fXo=o("DistilBertForMultipleChoice"),mXo=o(" (DistilBERT model)"),gXo=l(),jb=a("li"),i_e=a("strong"),hXo=o("electra"),pXo=o(" \u2014 "),TX=a("a"),_Xo=o("ElectraForMultipleChoice"),uXo=o(" (ELECTRA model)"),bXo=l(),Db=a("li"),d_e=a("strong"),vXo=o("flaubert"),FXo=o(" \u2014 "),MX=a("a"),TXo=o("FlaubertForMultipleChoice"),MXo=o(" (FlauBERT model)"),EXo=l(),Gb=a("li"),c_e=a("strong"),CXo=o("fnet"),wXo=o(" \u2014 "),EX=a("a"),AXo=o("FNetForMultipleChoice"),LXo=o(" (FNet model)"),yXo=l(),Ob=a("li"),f_e=a("strong"),xXo=o("funnel"),$Xo=o(" \u2014 "),CX=a("a"),kXo=o("FunnelForMultipleChoice"),SXo=o(" (Funnel Transformer model)"),RXo=l(),Vb=a("li"),m_e=a("strong"),PXo=o("ibert"),BXo=o(" \u2014 "),wX=a("a"),IXo=o("IBertForMultipleChoice"),NXo=o(" (I-BERT model)"),qXo=l(),Xb=a("li"),g_e=a("strong"),jXo=o("longformer"),DXo=o(" \u2014 "),AX=a("a"),GXo=o("LongformerForMultipleChoice"),OXo=o(" (Longformer model)"),VXo=l(),zb=a("li"),h_e=a("strong"),XXo=o("megatron-bert"),zXo=o(" \u2014 "),LX=a("a"),QXo=o("MegatronBertForMultipleChoice"),WXo=o(" (Megatron-BERT model)"),HXo=l(),Qb=a("li"),p_e=a("strong"),UXo=o("mobilebert"),JXo=o(" \u2014 "),yX=a("a"),YXo=o("MobileBertForMultipleChoice"),KXo=o(" (MobileBERT model)"),ZXo=l(),Wb=a("li"),__e=a("strong"),ezo=o("mpnet"),ozo=o(" \u2014 "),xX=a("a"),rzo=o("MPNetForMultipleChoice"),tzo=o(" (MPNet model)"),azo=l(),Hb=a("li"),u_e=a("strong"),nzo=o("nezha"),szo=o(" \u2014 "),$X=a("a"),lzo=o("NezhaForMultipleChoice"),izo=o(" (Nezha model)"),dzo=l(),Ub=a("li"),b_e=a("strong"),czo=o("nystromformer"),fzo=o(" \u2014 "),kX=a("a"),mzo=o("NystromformerForMultipleChoice"),gzo=o(" (Nystr\xF6mformer model)"),hzo=l(),Jb=a("li"),v_e=a("strong"),pzo=o("qdqbert"),_zo=o(" \u2014 "),SX=a("a"),uzo=o("QDQBertForMultipleChoice"),bzo=o(" (QDQBert model)"),vzo=l(),Yb=a("li"),F_e=a("strong"),Fzo=o("rembert"),Tzo=o(" \u2014 "),RX=a("a"),Mzo=o("RemBertForMultipleChoice"),Ezo=o(" (RemBERT model)"),Czo=l(),Kb=a("li"),T_e=a("strong"),wzo=o("roberta"),Azo=o(" \u2014 "),PX=a("a"),Lzo=o("RobertaForMultipleChoice"),yzo=o(" (RoBERTa model)"),xzo=l(),Zb=a("li"),M_e=a("strong"),$zo=o("roformer"),kzo=o(" \u2014 "),BX=a("a"),Szo=o("RoFormerForMultipleChoice"),Rzo=o(" (RoFormer model)"),Pzo=l(),e4=a("li"),E_e=a("strong"),Bzo=o("squeezebert"),Izo=o(" \u2014 "),IX=a("a"),Nzo=o("SqueezeBertForMultipleChoice"),qzo=o(" (SqueezeBERT model)"),jzo=l(),o4=a("li"),C_e=a("strong"),Dzo=o("xlm"),Gzo=o(" \u2014 "),NX=a("a"),Ozo=o("XLMForMultipleChoice"),Vzo=o(" (XLM model)"),Xzo=l(),r4=a("li"),w_e=a("strong"),zzo=o("xlm-roberta"),Qzo=o(" \u2014 "),qX=a("a"),Wzo=o("XLMRobertaForMultipleChoice"),Hzo=o(" (XLM-RoBERTa model)"),Uzo=l(),t4=a("li"),A_e=a("strong"),Jzo=o("xlm-roberta-xl"),Yzo=o(" \u2014 "),jX=a("a"),Kzo=o("XLMRobertaXLForMultipleChoice"),Zzo=o(" (XLM-RoBERTa-XL model)"),eQo=l(),a4=a("li"),L_e=a("strong"),oQo=o("xlnet"),rQo=o(" \u2014 "),DX=a("a"),tQo=o("XLNetForMultipleChoice"),aQo=o(" (XLNet model)"),nQo=l(),n4=a("li"),y_e=a("strong"),sQo=o("yoso"),lQo=o(" \u2014 "),GX=a("a"),iQo=o("YosoForMultipleChoice"),dQo=o(" (YOSO model)"),cQo=l(),s4=a("p"),fQo=o("The model is set in evaluation mode by default using "),x_e=a("code"),mQo=o("model.eval()"),gQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=a("code"),hQo=o("model.train()"),pQo=l(),F(l4.$$.fragment),JOe=l(),ad=a("h2"),i4=a("a"),k_e=a("span"),F(zy.$$.fragment),_Qo=l(),S_e=a("span"),uQo=o("AutoModelForNextSentencePrediction"),YOe=l(),Io=a("div"),F(Qy.$$.fragment),bQo=l(),nd=a("p"),vQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OX=a("a"),FQo=o("from_pretrained()"),TQo=o(" class method or the "),VX=a("a"),MQo=o("from_config()"),EQo=o(` class
method.`),CQo=l(),Wy=a("p"),wQo=o("This class cannot be instantiated directly using "),R_e=a("code"),AQo=o("__init__()"),LQo=o(" (throws an error)."),yQo=l(),mt=a("div"),F(Hy.$$.fragment),xQo=l(),P_e=a("p"),$Qo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kQo=l(),sd=a("p"),SQo=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),RQo=o("not"),PQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),BQo=o("from_pretrained()"),IQo=o(" to load the model weights."),NQo=l(),F(d4.$$.fragment),qQo=l(),to=a("div"),F(Uy.$$.fragment),jQo=l(),I_e=a("p"),DQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GQo=l(),Da=a("p"),OQo=o("The model class to instantiate is selected based on the "),N_e=a("code"),VQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),WQo=o("pretrained_model_name_or_path"),HQo=o(":"),UQo=l(),No=a("ul"),c4=a("li"),D_e=a("strong"),JQo=o("bert"),YQo=o(" \u2014 "),zX=a("a"),KQo=o("BertForNextSentencePrediction"),ZQo=o(" (BERT model)"),eWo=l(),f4=a("li"),G_e=a("strong"),oWo=o("fnet"),rWo=o(" \u2014 "),QX=a("a"),tWo=o("FNetForNextSentencePrediction"),aWo=o(" (FNet model)"),nWo=l(),m4=a("li"),O_e=a("strong"),sWo=o("megatron-bert"),lWo=o(" \u2014 "),WX=a("a"),iWo=o("MegatronBertForNextSentencePrediction"),dWo=o(" (Megatron-BERT model)"),cWo=l(),g4=a("li"),V_e=a("strong"),fWo=o("mobilebert"),mWo=o(" \u2014 "),HX=a("a"),gWo=o("MobileBertForNextSentencePrediction"),hWo=o(" (MobileBERT model)"),pWo=l(),h4=a("li"),X_e=a("strong"),_Wo=o("nezha"),uWo=o(" \u2014 "),UX=a("a"),bWo=o("NezhaForNextSentencePrediction"),vWo=o(" (Nezha model)"),FWo=l(),p4=a("li"),z_e=a("strong"),TWo=o("qdqbert"),MWo=o(" \u2014 "),JX=a("a"),EWo=o("QDQBertForNextSentencePrediction"),CWo=o(" (QDQBert model)"),wWo=l(),_4=a("p"),AWo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),LWo=o("model.eval()"),yWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),xWo=o("model.train()"),$Wo=l(),F(u4.$$.fragment),KOe=l(),ld=a("h2"),b4=a("a"),H_e=a("span"),F(Jy.$$.fragment),kWo=l(),U_e=a("span"),SWo=o("AutoModelForTokenClassification"),ZOe=l(),qo=a("div"),F(Yy.$$.fragment),RWo=l(),id=a("p"),PWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YX=a("a"),BWo=o("from_pretrained()"),IWo=o(" class method or the "),KX=a("a"),NWo=o("from_config()"),qWo=o(` class
method.`),jWo=l(),Ky=a("p"),DWo=o("This class cannot be instantiated directly using "),J_e=a("code"),GWo=o("__init__()"),OWo=o(" (throws an error)."),VWo=l(),gt=a("div"),F(Zy.$$.fragment),XWo=l(),Y_e=a("p"),zWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QWo=l(),dd=a("p"),WWo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),HWo=o("not"),UWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),JWo=o("from_pretrained()"),YWo=o(" to load the model weights."),KWo=l(),F(v4.$$.fragment),ZWo=l(),ao=a("div"),F(e8.$$.fragment),eHo=l(),Z_e=a("p"),oHo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rHo=l(),Ga=a("p"),tHo=o("The model class to instantiate is selected based on the "),eue=a("code"),aHo=o("model_type"),nHo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),iHo=o("pretrained_model_name_or_path"),dHo=o(":"),cHo=l(),H=a("ul"),F4=a("li"),tue=a("strong"),fHo=o("albert"),mHo=o(" \u2014 "),ez=a("a"),gHo=o("AlbertForTokenClassification"),hHo=o(" (ALBERT model)"),pHo=l(),T4=a("li"),aue=a("strong"),_Ho=o("bert"),uHo=o(" \u2014 "),oz=a("a"),bHo=o("BertForTokenClassification"),vHo=o(" (BERT model)"),FHo=l(),M4=a("li"),nue=a("strong"),THo=o("big_bird"),MHo=o(" \u2014 "),rz=a("a"),EHo=o("BigBirdForTokenClassification"),CHo=o(" (BigBird model)"),wHo=l(),E4=a("li"),sue=a("strong"),AHo=o("bloom"),LHo=o(" \u2014 "),tz=a("a"),yHo=o("BloomForTokenClassification"),xHo=o(" (BLOOM model)"),$Ho=l(),C4=a("li"),lue=a("strong"),kHo=o("camembert"),SHo=o(" \u2014 "),az=a("a"),RHo=o("CamembertForTokenClassification"),PHo=o(" (CamemBERT model)"),BHo=l(),w4=a("li"),iue=a("strong"),IHo=o("canine"),NHo=o(" \u2014 "),nz=a("a"),qHo=o("CanineForTokenClassification"),jHo=o(" (CANINE model)"),DHo=l(),A4=a("li"),due=a("strong"),GHo=o("convbert"),OHo=o(" \u2014 "),sz=a("a"),VHo=o("ConvBertForTokenClassification"),XHo=o(" (ConvBERT model)"),zHo=l(),L4=a("li"),cue=a("strong"),QHo=o("data2vec-text"),WHo=o(" \u2014 "),lz=a("a"),HHo=o("Data2VecTextForTokenClassification"),UHo=o(" (Data2VecText model)"),JHo=l(),y4=a("li"),fue=a("strong"),YHo=o("deberta"),KHo=o(" \u2014 "),iz=a("a"),ZHo=o("DebertaForTokenClassification"),eUo=o(" (DeBERTa model)"),oUo=l(),x4=a("li"),mue=a("strong"),rUo=o("deberta-v2"),tUo=o(" \u2014 "),dz=a("a"),aUo=o("DebertaV2ForTokenClassification"),nUo=o(" (DeBERTa-v2 model)"),sUo=l(),$4=a("li"),gue=a("strong"),lUo=o("distilbert"),iUo=o(" \u2014 "),cz=a("a"),dUo=o("DistilBertForTokenClassification"),cUo=o(" (DistilBERT model)"),fUo=l(),k4=a("li"),hue=a("strong"),mUo=o("electra"),gUo=o(" \u2014 "),fz=a("a"),hUo=o("ElectraForTokenClassification"),pUo=o(" (ELECTRA model)"),_Uo=l(),S4=a("li"),pue=a("strong"),uUo=o("flaubert"),bUo=o(" \u2014 "),mz=a("a"),vUo=o("FlaubertForTokenClassification"),FUo=o(" (FlauBERT model)"),TUo=l(),R4=a("li"),_ue=a("strong"),MUo=o("fnet"),EUo=o(" \u2014 "),gz=a("a"),CUo=o("FNetForTokenClassification"),wUo=o(" (FNet model)"),AUo=l(),P4=a("li"),uue=a("strong"),LUo=o("funnel"),yUo=o(" \u2014 "),hz=a("a"),xUo=o("FunnelForTokenClassification"),$Uo=o(" (Funnel Transformer model)"),kUo=l(),B4=a("li"),bue=a("strong"),SUo=o("gpt2"),RUo=o(" \u2014 "),pz=a("a"),PUo=o("GPT2ForTokenClassification"),BUo=o(" (OpenAI GPT-2 model)"),IUo=l(),I4=a("li"),vue=a("strong"),NUo=o("ibert"),qUo=o(" \u2014 "),_z=a("a"),jUo=o("IBertForTokenClassification"),DUo=o(" (I-BERT model)"),GUo=l(),N4=a("li"),Fue=a("strong"),OUo=o("layoutlm"),VUo=o(" \u2014 "),uz=a("a"),XUo=o("LayoutLMForTokenClassification"),zUo=o(" (LayoutLM model)"),QUo=l(),q4=a("li"),Tue=a("strong"),WUo=o("layoutlmv2"),HUo=o(" \u2014 "),bz=a("a"),UUo=o("LayoutLMv2ForTokenClassification"),JUo=o(" (LayoutLMv2 model)"),YUo=l(),j4=a("li"),Mue=a("strong"),KUo=o("layoutlmv3"),ZUo=o(" \u2014 "),vz=a("a"),eJo=o("LayoutLMv3ForTokenClassification"),oJo=o(" (LayoutLMv3 model)"),rJo=l(),D4=a("li"),Eue=a("strong"),tJo=o("longformer"),aJo=o(" \u2014 "),Fz=a("a"),nJo=o("LongformerForTokenClassification"),sJo=o(" (Longformer model)"),lJo=l(),G4=a("li"),Cue=a("strong"),iJo=o("megatron-bert"),dJo=o(" \u2014 "),Tz=a("a"),cJo=o("MegatronBertForTokenClassification"),fJo=o(" (Megatron-BERT model)"),mJo=l(),O4=a("li"),wue=a("strong"),gJo=o("mobilebert"),hJo=o(" \u2014 "),Mz=a("a"),pJo=o("MobileBertForTokenClassification"),_Jo=o(" (MobileBERT model)"),uJo=l(),V4=a("li"),Aue=a("strong"),bJo=o("mpnet"),vJo=o(" \u2014 "),Ez=a("a"),FJo=o("MPNetForTokenClassification"),TJo=o(" (MPNet model)"),MJo=l(),X4=a("li"),Lue=a("strong"),EJo=o("nezha"),CJo=o(" \u2014 "),Cz=a("a"),wJo=o("NezhaForTokenClassification"),AJo=o(" (Nezha model)"),LJo=l(),z4=a("li"),yue=a("strong"),yJo=o("nystromformer"),xJo=o(" \u2014 "),wz=a("a"),$Jo=o("NystromformerForTokenClassification"),kJo=o(" (Nystr\xF6mformer model)"),SJo=l(),Q4=a("li"),xue=a("strong"),RJo=o("qdqbert"),PJo=o(" \u2014 "),Az=a("a"),BJo=o("QDQBertForTokenClassification"),IJo=o(" (QDQBert model)"),NJo=l(),W4=a("li"),$ue=a("strong"),qJo=o("rembert"),jJo=o(" \u2014 "),Lz=a("a"),DJo=o("RemBertForTokenClassification"),GJo=o(" (RemBERT model)"),OJo=l(),H4=a("li"),kue=a("strong"),VJo=o("roberta"),XJo=o(" \u2014 "),yz=a("a"),zJo=o("RobertaForTokenClassification"),QJo=o(" (RoBERTa model)"),WJo=l(),U4=a("li"),Sue=a("strong"),HJo=o("roformer"),UJo=o(" \u2014 "),xz=a("a"),JJo=o("RoFormerForTokenClassification"),YJo=o(" (RoFormer model)"),KJo=l(),J4=a("li"),Rue=a("strong"),ZJo=o("squeezebert"),eYo=o(" \u2014 "),$z=a("a"),oYo=o("SqueezeBertForTokenClassification"),rYo=o(" (SqueezeBERT model)"),tYo=l(),Y4=a("li"),Pue=a("strong"),aYo=o("xlm"),nYo=o(" \u2014 "),kz=a("a"),sYo=o("XLMForTokenClassification"),lYo=o(" (XLM model)"),iYo=l(),K4=a("li"),Bue=a("strong"),dYo=o("xlm-roberta"),cYo=o(" \u2014 "),Sz=a("a"),fYo=o("XLMRobertaForTokenClassification"),mYo=o(" (XLM-RoBERTa model)"),gYo=l(),Z4=a("li"),Iue=a("strong"),hYo=o("xlm-roberta-xl"),pYo=o(" \u2014 "),Rz=a("a"),_Yo=o("XLMRobertaXLForTokenClassification"),uYo=o(" (XLM-RoBERTa-XL model)"),bYo=l(),e3=a("li"),Nue=a("strong"),vYo=o("xlnet"),FYo=o(" \u2014 "),Pz=a("a"),TYo=o("XLNetForTokenClassification"),MYo=o(" (XLNet model)"),EYo=l(),o3=a("li"),que=a("strong"),CYo=o("yoso"),wYo=o(" \u2014 "),Bz=a("a"),AYo=o("YosoForTokenClassification"),LYo=o(" (YOSO model)"),yYo=l(),r3=a("p"),xYo=o("The model is set in evaluation mode by default using "),jue=a("code"),$Yo=o("model.eval()"),kYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),SYo=o("model.train()"),RYo=l(),F(t3.$$.fragment),eVe=l(),cd=a("h2"),a3=a("a"),Gue=a("span"),F(o8.$$.fragment),PYo=l(),Oue=a("span"),BYo=o("AutoModelForQuestionAnswering"),oVe=l(),jo=a("div"),F(r8.$$.fragment),IYo=l(),fd=a("p"),NYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=a("a"),qYo=o("from_pretrained()"),jYo=o(" class method or the "),Nz=a("a"),DYo=o("from_config()"),GYo=o(` class
method.`),OYo=l(),t8=a("p"),VYo=o("This class cannot be instantiated directly using "),Vue=a("code"),XYo=o("__init__()"),zYo=o(" (throws an error)."),QYo=l(),ht=a("div"),F(a8.$$.fragment),WYo=l(),Xue=a("p"),HYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UYo=l(),md=a("p"),JYo=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),YYo=o("not"),KYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),ZYo=o("from_pretrained()"),eKo=o(" to load the model weights."),oKo=l(),F(n3.$$.fragment),rKo=l(),no=a("div"),F(n8.$$.fragment),tKo=l(),Que=a("p"),aKo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nKo=l(),Oa=a("p"),sKo=o("The model class to instantiate is selected based on the "),Wue=a("code"),lKo=o("model_type"),iKo=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),fKo=o("pretrained_model_name_or_path"),mKo=o(":"),gKo=l(),V=a("ul"),s3=a("li"),Jue=a("strong"),hKo=o("albert"),pKo=o(" \u2014 "),jz=a("a"),_Ko=o("AlbertForQuestionAnswering"),uKo=o(" (ALBERT model)"),bKo=l(),l3=a("li"),Yue=a("strong"),vKo=o("bart"),FKo=o(" \u2014 "),Dz=a("a"),TKo=o("BartForQuestionAnswering"),MKo=o(" (BART model)"),EKo=l(),i3=a("li"),Kue=a("strong"),CKo=o("bert"),wKo=o(" \u2014 "),Gz=a("a"),AKo=o("BertForQuestionAnswering"),LKo=o(" (BERT model)"),yKo=l(),d3=a("li"),Zue=a("strong"),xKo=o("big_bird"),$Ko=o(" \u2014 "),Oz=a("a"),kKo=o("BigBirdForQuestionAnswering"),SKo=o(" (BigBird model)"),RKo=l(),c3=a("li"),e1e=a("strong"),PKo=o("bigbird_pegasus"),BKo=o(" \u2014 "),Vz=a("a"),IKo=o("BigBirdPegasusForQuestionAnswering"),NKo=o(" (BigBird-Pegasus model)"),qKo=l(),f3=a("li"),o1e=a("strong"),jKo=o("camembert"),DKo=o(" \u2014 "),Xz=a("a"),GKo=o("CamembertForQuestionAnswering"),OKo=o(" (CamemBERT model)"),VKo=l(),m3=a("li"),r1e=a("strong"),XKo=o("canine"),zKo=o(" \u2014 "),zz=a("a"),QKo=o("CanineForQuestionAnswering"),WKo=o(" (CANINE model)"),HKo=l(),g3=a("li"),t1e=a("strong"),UKo=o("convbert"),JKo=o(" \u2014 "),Qz=a("a"),YKo=o("ConvBertForQuestionAnswering"),KKo=o(" (ConvBERT model)"),ZKo=l(),h3=a("li"),a1e=a("strong"),eZo=o("data2vec-text"),oZo=o(" \u2014 "),Wz=a("a"),rZo=o("Data2VecTextForQuestionAnswering"),tZo=o(" (Data2VecText model)"),aZo=l(),p3=a("li"),n1e=a("strong"),nZo=o("deberta"),sZo=o(" \u2014 "),Hz=a("a"),lZo=o("DebertaForQuestionAnswering"),iZo=o(" (DeBERTa model)"),dZo=l(),_3=a("li"),s1e=a("strong"),cZo=o("deberta-v2"),fZo=o(" \u2014 "),Uz=a("a"),mZo=o("DebertaV2ForQuestionAnswering"),gZo=o(" (DeBERTa-v2 model)"),hZo=l(),u3=a("li"),l1e=a("strong"),pZo=o("distilbert"),_Zo=o(" \u2014 "),Jz=a("a"),uZo=o("DistilBertForQuestionAnswering"),bZo=o(" (DistilBERT model)"),vZo=l(),b3=a("li"),i1e=a("strong"),FZo=o("electra"),TZo=o(" \u2014 "),Yz=a("a"),MZo=o("ElectraForQuestionAnswering"),EZo=o(" (ELECTRA model)"),CZo=l(),v3=a("li"),d1e=a("strong"),wZo=o("flaubert"),AZo=o(" \u2014 "),Kz=a("a"),LZo=o("FlaubertForQuestionAnsweringSimple"),yZo=o(" (FlauBERT model)"),xZo=l(),F3=a("li"),c1e=a("strong"),$Zo=o("fnet"),kZo=o(" \u2014 "),Zz=a("a"),SZo=o("FNetForQuestionAnswering"),RZo=o(" (FNet model)"),PZo=l(),T3=a("li"),f1e=a("strong"),BZo=o("funnel"),IZo=o(" \u2014 "),eQ=a("a"),NZo=o("FunnelForQuestionAnswering"),qZo=o(" (Funnel Transformer model)"),jZo=l(),M3=a("li"),m1e=a("strong"),DZo=o("gptj"),GZo=o(" \u2014 "),oQ=a("a"),OZo=o("GPTJForQuestionAnswering"),VZo=o(" (GPT-J model)"),XZo=l(),E3=a("li"),g1e=a("strong"),zZo=o("ibert"),QZo=o(" \u2014 "),rQ=a("a"),WZo=o("IBertForQuestionAnswering"),HZo=o(" (I-BERT model)"),UZo=l(),C3=a("li"),h1e=a("strong"),JZo=o("layoutlmv2"),YZo=o(" \u2014 "),tQ=a("a"),KZo=o("LayoutLMv2ForQuestionAnswering"),ZZo=o(" (LayoutLMv2 model)"),eer=l(),w3=a("li"),p1e=a("strong"),oer=o("layoutlmv3"),rer=o(" \u2014 "),aQ=a("a"),ter=o("LayoutLMv3ForQuestionAnswering"),aer=o(" (LayoutLMv3 model)"),ner=l(),A3=a("li"),_1e=a("strong"),ser=o("led"),ler=o(" \u2014 "),nQ=a("a"),ier=o("LEDForQuestionAnswering"),der=o(" (LED model)"),cer=l(),L3=a("li"),u1e=a("strong"),fer=o("longformer"),mer=o(" \u2014 "),sQ=a("a"),ger=o("LongformerForQuestionAnswering"),her=o(" (Longformer model)"),per=l(),y3=a("li"),b1e=a("strong"),_er=o("lxmert"),uer=o(" \u2014 "),lQ=a("a"),ber=o("LxmertForQuestionAnswering"),ver=o(" (LXMERT model)"),Fer=l(),x3=a("li"),v1e=a("strong"),Ter=o("mbart"),Mer=o(" \u2014 "),iQ=a("a"),Eer=o("MBartForQuestionAnswering"),Cer=o(" (mBART model)"),wer=l(),$3=a("li"),F1e=a("strong"),Aer=o("megatron-bert"),Ler=o(" \u2014 "),dQ=a("a"),yer=o("MegatronBertForQuestionAnswering"),xer=o(" (Megatron-BERT model)"),$er=l(),k3=a("li"),T1e=a("strong"),ker=o("mobilebert"),Ser=o(" \u2014 "),cQ=a("a"),Rer=o("MobileBertForQuestionAnswering"),Per=o(" (MobileBERT model)"),Ber=l(),S3=a("li"),M1e=a("strong"),Ier=o("mpnet"),Ner=o(" \u2014 "),fQ=a("a"),qer=o("MPNetForQuestionAnswering"),jer=o(" (MPNet model)"),Der=l(),R3=a("li"),E1e=a("strong"),Ger=o("nezha"),Oer=o(" \u2014 "),mQ=a("a"),Ver=o("NezhaForQuestionAnswering"),Xer=o(" (Nezha model)"),zer=l(),P3=a("li"),C1e=a("strong"),Qer=o("nystromformer"),Wer=o(" \u2014 "),gQ=a("a"),Her=o("NystromformerForQuestionAnswering"),Uer=o(" (Nystr\xF6mformer model)"),Jer=l(),B3=a("li"),w1e=a("strong"),Yer=o("qdqbert"),Ker=o(" \u2014 "),hQ=a("a"),Zer=o("QDQBertForQuestionAnswering"),eor=o(" (QDQBert model)"),oor=l(),I3=a("li"),A1e=a("strong"),ror=o("reformer"),tor=o(" \u2014 "),pQ=a("a"),aor=o("ReformerForQuestionAnswering"),nor=o(" (Reformer model)"),sor=l(),N3=a("li"),L1e=a("strong"),lor=o("rembert"),ior=o(" \u2014 "),_Q=a("a"),dor=o("RemBertForQuestionAnswering"),cor=o(" (RemBERT model)"),mor=l(),q3=a("li"),y1e=a("strong"),gor=o("roberta"),hor=o(" \u2014 "),uQ=a("a"),por=o("RobertaForQuestionAnswering"),_or=o(" (RoBERTa model)"),uor=l(),j3=a("li"),x1e=a("strong"),bor=o("roformer"),vor=o(" \u2014 "),bQ=a("a"),For=o("RoFormerForQuestionAnswering"),Tor=o(" (RoFormer model)"),Mor=l(),D3=a("li"),$1e=a("strong"),Eor=o("splinter"),Cor=o(" \u2014 "),vQ=a("a"),wor=o("SplinterForQuestionAnswering"),Aor=o(" (Splinter model)"),Lor=l(),G3=a("li"),k1e=a("strong"),yor=o("squeezebert"),xor=o(" \u2014 "),FQ=a("a"),$or=o("SqueezeBertForQuestionAnswering"),kor=o(" (SqueezeBERT model)"),Sor=l(),O3=a("li"),S1e=a("strong"),Ror=o("xlm"),Por=o(" \u2014 "),TQ=a("a"),Bor=o("XLMForQuestionAnsweringSimple"),Ior=o(" (XLM model)"),Nor=l(),V3=a("li"),R1e=a("strong"),qor=o("xlm-roberta"),jor=o(" \u2014 "),MQ=a("a"),Dor=o("XLMRobertaForQuestionAnswering"),Gor=o(" (XLM-RoBERTa model)"),Oor=l(),X3=a("li"),P1e=a("strong"),Vor=o("xlm-roberta-xl"),Xor=o(" \u2014 "),EQ=a("a"),zor=o("XLMRobertaXLForQuestionAnswering"),Qor=o(" (XLM-RoBERTa-XL model)"),Wor=l(),z3=a("li"),B1e=a("strong"),Hor=o("xlnet"),Uor=o(" \u2014 "),CQ=a("a"),Jor=o("XLNetForQuestionAnsweringSimple"),Yor=o(" (XLNet model)"),Kor=l(),Q3=a("li"),I1e=a("strong"),Zor=o("yoso"),err=o(" \u2014 "),wQ=a("a"),orr=o("YosoForQuestionAnswering"),rrr=o(" (YOSO model)"),trr=l(),W3=a("p"),arr=o("The model is set in evaluation mode by default using "),N1e=a("code"),nrr=o("model.eval()"),srr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),lrr=o("model.train()"),irr=l(),F(H3.$$.fragment),rVe=l(),gd=a("h2"),U3=a("a"),j1e=a("span"),F(s8.$$.fragment),drr=l(),D1e=a("span"),crr=o("AutoModelForTableQuestionAnswering"),tVe=l(),Do=a("div"),F(l8.$$.fragment),frr=l(),hd=a("p"),mrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AQ=a("a"),grr=o("from_pretrained()"),hrr=o(" class method or the "),LQ=a("a"),prr=o("from_config()"),_rr=o(` class
method.`),urr=l(),i8=a("p"),brr=o("This class cannot be instantiated directly using "),G1e=a("code"),vrr=o("__init__()"),Frr=o(" (throws an error)."),Trr=l(),pt=a("div"),F(d8.$$.fragment),Mrr=l(),O1e=a("p"),Err=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Crr=l(),pd=a("p"),wrr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),Arr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),yrr=o("from_pretrained()"),xrr=o(" to load the model weights."),$rr=l(),F(J3.$$.fragment),krr=l(),so=a("div"),F(c8.$$.fragment),Srr=l(),X1e=a("p"),Rrr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Prr=l(),Va=a("p"),Brr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Irr=o("model_type"),Nrr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),qrr=o("pretrained_model_name_or_path"),jrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),Drr=o("pretrained_model_name_or_path"),Grr=o(":"),Orr=l(),H1e=a("ul"),Y3=a("li"),U1e=a("strong"),Vrr=o("tapas"),Xrr=o(" \u2014 "),xQ=a("a"),zrr=o("TapasForQuestionAnswering"),Qrr=o(" (TAPAS model)"),Wrr=l(),K3=a("p"),Hrr=o("The model is set in evaluation mode by default using "),J1e=a("code"),Urr=o("model.eval()"),Jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=a("code"),Yrr=o("model.train()"),Krr=l(),F(Z3.$$.fragment),aVe=l(),_d=a("h2"),ev=a("a"),K1e=a("span"),F(f8.$$.fragment),Zrr=l(),Z1e=a("span"),etr=o("AutoModelForImageClassification"),nVe=l(),Go=a("div"),F(m8.$$.fragment),otr=l(),ud=a("p"),rtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=a("a"),ttr=o("from_pretrained()"),atr=o(" class method or the "),kQ=a("a"),ntr=o("from_config()"),str=o(` class
method.`),ltr=l(),g8=a("p"),itr=o("This class cannot be instantiated directly using "),e7e=a("code"),dtr=o("__init__()"),ctr=o(" (throws an error)."),ftr=l(),_t=a("div"),F(h8.$$.fragment),mtr=l(),o7e=a("p"),gtr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),htr=l(),bd=a("p"),ptr=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),_tr=o("not"),utr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),btr=o("from_pretrained()"),vtr=o(" to load the model weights."),Ftr=l(),F(ov.$$.fragment),Ttr=l(),lo=a("div"),F(p8.$$.fragment),Mtr=l(),t7e=a("p"),Etr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ctr=l(),Xa=a("p"),wtr=o("The model class to instantiate is selected based on the "),a7e=a("code"),Atr=o("model_type"),Ltr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),ytr=o("pretrained_model_name_or_path"),xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),$tr=o("pretrained_model_name_or_path"),ktr=o(":"),Str=l(),Fe=a("ul"),rv=a("li"),l7e=a("strong"),Rtr=o("beit"),Ptr=o(" \u2014 "),RQ=a("a"),Btr=o("BeitForImageClassification"),Itr=o(" (BEiT model)"),Ntr=l(),tv=a("li"),i7e=a("strong"),qtr=o("convnext"),jtr=o(" \u2014 "),PQ=a("a"),Dtr=o("ConvNextForImageClassification"),Gtr=o(" (ConvNeXT model)"),Otr=l(),av=a("li"),d7e=a("strong"),Vtr=o("cvt"),Xtr=o(" \u2014 "),BQ=a("a"),ztr=o("CvtForImageClassification"),Qtr=o(" (CvT model)"),Wtr=l(),nv=a("li"),c7e=a("strong"),Htr=o("data2vec-vision"),Utr=o(" \u2014 "),IQ=a("a"),Jtr=o("Data2VecVisionForImageClassification"),Ytr=o(" (Data2VecVision model)"),Ktr=l(),Qs=a("li"),f7e=a("strong"),Ztr=o("deit"),ear=o(" \u2014 "),NQ=a("a"),oar=o("DeiTForImageClassification"),rar=o(" or "),qQ=a("a"),tar=o("DeiTForImageClassificationWithTeacher"),aar=o(" (DeiT model)"),nar=l(),sv=a("li"),m7e=a("strong"),sar=o("imagegpt"),lar=o(" \u2014 "),jQ=a("a"),iar=o("ImageGPTForImageClassification"),dar=o(" (ImageGPT model)"),car=l(),Ws=a("li"),g7e=a("strong"),far=o("levit"),mar=o(" \u2014 "),DQ=a("a"),gar=o("LevitForImageClassification"),har=o(" or "),GQ=a("a"),par=o("LevitForImageClassificationWithTeacher"),_ar=o(" (LeViT model)"),uar=l(),ut=a("li"),h7e=a("strong"),bar=o("perceiver"),Far=o(" \u2014 "),OQ=a("a"),Tar=o("PerceiverForImageClassificationLearned"),Mar=o(" or "),VQ=a("a"),Ear=o("PerceiverForImageClassificationFourier"),Car=o(" or "),XQ=a("a"),war=o("PerceiverForImageClassificationConvProcessing"),Aar=o(" (Perceiver model)"),Lar=l(),lv=a("li"),p7e=a("strong"),yar=o("poolformer"),xar=o(" \u2014 "),zQ=a("a"),$ar=o("PoolFormerForImageClassification"),kar=o(" (PoolFormer model)"),Sar=l(),iv=a("li"),_7e=a("strong"),Rar=o("regnet"),Par=o(" \u2014 "),QQ=a("a"),Bar=o("RegNetForImageClassification"),Iar=o(" (RegNet model)"),Nar=l(),dv=a("li"),u7e=a("strong"),qar=o("resnet"),jar=o(" \u2014 "),WQ=a("a"),Dar=o("ResNetForImageClassification"),Gar=o(" (ResNet model)"),Oar=l(),cv=a("li"),b7e=a("strong"),Var=o("segformer"),Xar=o(" \u2014 "),HQ=a("a"),zar=o("SegformerForImageClassification"),Qar=o(" (SegFormer model)"),War=l(),fv=a("li"),v7e=a("strong"),Har=o("swin"),Uar=o(" \u2014 "),UQ=a("a"),Jar=o("SwinForImageClassification"),Yar=o(" (Swin Transformer model)"),Kar=l(),mv=a("li"),F7e=a("strong"),Zar=o("van"),enr=o(" \u2014 "),JQ=a("a"),onr=o("VanForImageClassification"),rnr=o(" (VAN model)"),tnr=l(),gv=a("li"),T7e=a("strong"),anr=o("vit"),nnr=o(" \u2014 "),YQ=a("a"),snr=o("ViTForImageClassification"),lnr=o(" (ViT model)"),inr=l(),hv=a("p"),dnr=o("The model is set in evaluation mode by default using "),M7e=a("code"),cnr=o("model.eval()"),fnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E7e=a("code"),mnr=o("model.train()"),gnr=l(),F(pv.$$.fragment),sVe=l(),vd=a("h2"),_v=a("a"),C7e=a("span"),F(_8.$$.fragment),hnr=l(),w7e=a("span"),pnr=o("AutoModelForVision2Seq"),lVe=l(),Oo=a("div"),F(u8.$$.fragment),_nr=l(),Fd=a("p"),unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KQ=a("a"),bnr=o("from_pretrained()"),vnr=o(" class method or the "),ZQ=a("a"),Fnr=o("from_config()"),Tnr=o(` class
method.`),Mnr=l(),b8=a("p"),Enr=o("This class cannot be instantiated directly using "),A7e=a("code"),Cnr=o("__init__()"),wnr=o(" (throws an error)."),Anr=l(),bt=a("div"),F(v8.$$.fragment),Lnr=l(),L7e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xnr=l(),Td=a("p"),$nr=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Rnr=o("from_pretrained()"),Pnr=o(" to load the model weights."),Bnr=l(),F(uv.$$.fragment),Inr=l(),io=a("div"),F(F8.$$.fragment),Nnr=l(),x7e=a("p"),qnr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jnr=l(),za=a("p"),Dnr=o("The model class to instantiate is selected based on the "),$7e=a("code"),Gnr=o("model_type"),Onr=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),znr=o("pretrained_model_name_or_path"),Qnr=o(":"),Wnr=l(),R7e=a("ul"),bv=a("li"),P7e=a("strong"),Hnr=o("vision-encoder-decoder"),Unr=o(" \u2014 "),oW=a("a"),Jnr=o("VisionEncoderDecoderModel"),Ynr=o(" (Vision Encoder decoder model)"),Knr=l(),vv=a("p"),Znr=o("The model is set in evaluation mode by default using "),B7e=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I7e=a("code"),rsr=o("model.train()"),tsr=l(),F(Fv.$$.fragment),iVe=l(),Md=a("h2"),Tv=a("a"),N7e=a("span"),F(T8.$$.fragment),asr=l(),q7e=a("span"),nsr=o("AutoModelForVisualQuestionAnswering"),dVe=l(),Vo=a("div"),F(M8.$$.fragment),ssr=l(),Ed=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),rW=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),tW=a("a"),csr=o("from_config()"),fsr=o(` class
method.`),msr=l(),E8=a("p"),gsr=o("This class cannot be instantiated directly using "),j7e=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),_sr=l(),vt=a("div"),F(C8.$$.fragment),usr=l(),D7e=a("p"),bsr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),vsr=l(),Cd=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(Mv.$$.fragment),Asr=l(),co=a("div"),F(w8.$$.fragment),Lsr=l(),O7e=a("p"),ysr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),xsr=l(),Qa=a("p"),$sr=o("The model class to instantiate is selected based on the "),V7e=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(":"),Nsr=l(),Q7e=a("ul"),Ev=a("li"),W7e=a("strong"),qsr=o("vilt"),jsr=o(" \u2014 "),nW=a("a"),Dsr=o("ViltForQuestionAnswering"),Gsr=o(" (ViLT model)"),Osr=l(),Cv=a("p"),Vsr=o("The model is set in evaluation mode by default using "),H7e=a("code"),Xsr=o("model.eval()"),zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U7e=a("code"),Qsr=o("model.train()"),Wsr=l(),F(wv.$$.fragment),cVe=l(),wd=a("h2"),Av=a("a"),J7e=a("span"),F(A8.$$.fragment),Hsr=l(),Y7e=a("span"),Usr=o("AutoModelForAudioClassification"),fVe=l(),Xo=a("div"),F(L8.$$.fragment),Jsr=l(),Ad=a("p"),Ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sW=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" class method or the "),lW=a("a"),elr=o("from_config()"),olr=o(` class
method.`),rlr=l(),y8=a("p"),tlr=o("This class cannot be instantiated directly using "),K7e=a("code"),alr=o("__init__()"),nlr=o(" (throws an error)."),slr=l(),Ft=a("div"),F(x8.$$.fragment),llr=l(),Z7e=a("p"),ilr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dlr=l(),Ld=a("p"),clr=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),flr=o("not"),mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),glr=o("from_pretrained()"),hlr=o(" to load the model weights."),plr=l(),F(Lv.$$.fragment),_lr=l(),fo=a("div"),F($8.$$.fragment),ulr=l(),o2e=a("p"),blr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vlr=l(),Wa=a("p"),Flr=o("The model class to instantiate is selected based on the "),r2e=a("code"),Tlr=o("model_type"),Mlr=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(":"),Llr=l(),Pe=a("ul"),yv=a("li"),n2e=a("strong"),ylr=o("data2vec-audio"),xlr=o(" \u2014 "),dW=a("a"),$lr=o("Data2VecAudioForSequenceClassification"),klr=o(" (Data2VecAudio model)"),Slr=l(),xv=a("li"),s2e=a("strong"),Rlr=o("hubert"),Plr=o(" \u2014 "),cW=a("a"),Blr=o("HubertForSequenceClassification"),Ilr=o(" (Hubert model)"),Nlr=l(),$v=a("li"),l2e=a("strong"),qlr=o("sew"),jlr=o(" \u2014 "),fW=a("a"),Dlr=o("SEWForSequenceClassification"),Glr=o(" (SEW model)"),Olr=l(),kv=a("li"),i2e=a("strong"),Vlr=o("sew-d"),Xlr=o(" \u2014 "),mW=a("a"),zlr=o("SEWDForSequenceClassification"),Qlr=o(" (SEW-D model)"),Wlr=l(),Sv=a("li"),d2e=a("strong"),Hlr=o("unispeech"),Ulr=o(" \u2014 "),gW=a("a"),Jlr=o("UniSpeechForSequenceClassification"),Ylr=o(" (UniSpeech model)"),Klr=l(),Rv=a("li"),c2e=a("strong"),Zlr=o("unispeech-sat"),eir=o(" \u2014 "),hW=a("a"),oir=o("UniSpeechSatForSequenceClassification"),rir=o(" (UniSpeechSat model)"),tir=l(),Pv=a("li"),f2e=a("strong"),air=o("wav2vec2"),nir=o(" \u2014 "),pW=a("a"),sir=o("Wav2Vec2ForSequenceClassification"),lir=o(" (Wav2Vec2 model)"),iir=l(),Bv=a("li"),m2e=a("strong"),dir=o("wav2vec2-conformer"),cir=o(" \u2014 "),_W=a("a"),fir=o("Wav2Vec2ConformerForSequenceClassification"),mir=o(" (Wav2Vec2-Conformer model)"),gir=l(),Iv=a("li"),g2e=a("strong"),hir=o("wavlm"),pir=o(" \u2014 "),uW=a("a"),_ir=o("WavLMForSequenceClassification"),uir=o(" (WavLM model)"),bir=l(),Nv=a("p"),vir=o("The model is set in evaluation mode by default using "),h2e=a("code"),Fir=o("model.eval()"),Tir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=a("code"),Mir=o("model.train()"),Eir=l(),F(qv.$$.fragment),mVe=l(),yd=a("h2"),jv=a("a"),_2e=a("span"),F(k8.$$.fragment),Cir=l(),u2e=a("span"),wir=o("AutoModelForAudioFrameClassification"),gVe=l(),zo=a("div"),F(S8.$$.fragment),Air=l(),xd=a("p"),Lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bW=a("a"),yir=o("from_pretrained()"),xir=o(" class method or the "),vW=a("a"),$ir=o("from_config()"),kir=o(` class
method.`),Sir=l(),R8=a("p"),Rir=o("This class cannot be instantiated directly using "),b2e=a("code"),Pir=o("__init__()"),Bir=o(" (throws an error)."),Iir=l(),Tt=a("div"),F(P8.$$.fragment),Nir=l(),v2e=a("p"),qir=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jir=l(),$d=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),Gir=o("not"),Oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Vir=o("from_pretrained()"),Xir=o(" to load the model weights."),zir=l(),F(Dv.$$.fragment),Qir=l(),mo=a("div"),F(B8.$$.fragment),Wir=l(),T2e=a("p"),Hir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Uir=l(),Ha=a("p"),Jir=o("The model class to instantiate is selected based on the "),M2e=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),et=a("ul"),Gv=a("li"),w2e=a("strong"),adr=o("data2vec-audio"),ndr=o(" \u2014 "),TW=a("a"),sdr=o("Data2VecAudioForAudioFrameClassification"),ldr=o(" (Data2VecAudio model)"),idr=l(),Ov=a("li"),A2e=a("strong"),ddr=o("unispeech-sat"),cdr=o(" \u2014 "),MW=a("a"),fdr=o("UniSpeechSatForAudioFrameClassification"),mdr=o(" (UniSpeechSat model)"),gdr=l(),Vv=a("li"),L2e=a("strong"),hdr=o("wav2vec2"),pdr=o(" \u2014 "),EW=a("a"),_dr=o("Wav2Vec2ForAudioFrameClassification"),udr=o(" (Wav2Vec2 model)"),bdr=l(),Xv=a("li"),y2e=a("strong"),vdr=o("wav2vec2-conformer"),Fdr=o(" \u2014 "),CW=a("a"),Tdr=o("Wav2Vec2ConformerForAudioFrameClassification"),Mdr=o(" (Wav2Vec2-Conformer model)"),Edr=l(),zv=a("li"),x2e=a("strong"),Cdr=o("wavlm"),wdr=o(" \u2014 "),wW=a("a"),Adr=o("WavLMForAudioFrameClassification"),Ldr=o(" (WavLM model)"),ydr=l(),Qv=a("p"),xdr=o("The model is set in evaluation mode by default using "),$2e=a("code"),$dr=o("model.eval()"),kdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=a("code"),Sdr=o("model.train()"),Rdr=l(),F(Wv.$$.fragment),hVe=l(),kd=a("h2"),Hv=a("a"),S2e=a("span"),F(I8.$$.fragment),Pdr=l(),R2e=a("span"),Bdr=o("AutoModelForCTC"),pVe=l(),Qo=a("div"),F(N8.$$.fragment),Idr=l(),Sd=a("p"),Ndr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AW=a("a"),qdr=o("from_pretrained()"),jdr=o(" class method or the "),LW=a("a"),Ddr=o("from_config()"),Gdr=o(` class
method.`),Odr=l(),q8=a("p"),Vdr=o("This class cannot be instantiated directly using "),P2e=a("code"),Xdr=o("__init__()"),zdr=o(" (throws an error)."),Qdr=l(),Mt=a("div"),F(j8.$$.fragment),Wdr=l(),B2e=a("p"),Hdr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Udr=l(),Rd=a("p"),Jdr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),Ydr=o("not"),Kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Zdr=o("from_pretrained()"),ecr=o(" to load the model weights."),ocr=l(),F(Uv.$$.fragment),rcr=l(),go=a("div"),F(D8.$$.fragment),tcr=l(),N2e=a("p"),acr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ncr=l(),Ua=a("p"),scr=o("The model class to instantiate is selected based on the "),q2e=a("code"),lcr=o("model_type"),icr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),fcr=o("pretrained_model_name_or_path"),mcr=o(":"),gcr=l(),Le=a("ul"),Jv=a("li"),G2e=a("strong"),hcr=o("data2vec-audio"),pcr=o(" \u2014 "),xW=a("a"),_cr=o("Data2VecAudioForCTC"),ucr=o(" (Data2VecAudio model)"),bcr=l(),Yv=a("li"),O2e=a("strong"),vcr=o("hubert"),Fcr=o(" \u2014 "),$W=a("a"),Tcr=o("HubertForCTC"),Mcr=o(" (Hubert model)"),Ecr=l(),Kv=a("li"),V2e=a("strong"),Ccr=o("mctct"),wcr=o(" \u2014 "),kW=a("a"),Acr=o("MCTCTForCTC"),Lcr=o(" (M-CTC-T model)"),ycr=l(),Zv=a("li"),X2e=a("strong"),xcr=o("sew"),$cr=o(" \u2014 "),SW=a("a"),kcr=o("SEWForCTC"),Scr=o(" (SEW model)"),Rcr=l(),eF=a("li"),z2e=a("strong"),Pcr=o("sew-d"),Bcr=o(" \u2014 "),RW=a("a"),Icr=o("SEWDForCTC"),Ncr=o(" (SEW-D model)"),qcr=l(),oF=a("li"),Q2e=a("strong"),jcr=o("unispeech"),Dcr=o(" \u2014 "),PW=a("a"),Gcr=o("UniSpeechForCTC"),Ocr=o(" (UniSpeech model)"),Vcr=l(),rF=a("li"),W2e=a("strong"),Xcr=o("unispeech-sat"),zcr=o(" \u2014 "),BW=a("a"),Qcr=o("UniSpeechSatForCTC"),Wcr=o(" (UniSpeechSat model)"),Hcr=l(),tF=a("li"),H2e=a("strong"),Ucr=o("wav2vec2"),Jcr=o(" \u2014 "),IW=a("a"),Ycr=o("Wav2Vec2ForCTC"),Kcr=o(" (Wav2Vec2 model)"),Zcr=l(),aF=a("li"),U2e=a("strong"),efr=o("wav2vec2-conformer"),ofr=o(" \u2014 "),NW=a("a"),rfr=o("Wav2Vec2ConformerForCTC"),tfr=o(" (Wav2Vec2-Conformer model)"),afr=l(),nF=a("li"),J2e=a("strong"),nfr=o("wavlm"),sfr=o(" \u2014 "),qW=a("a"),lfr=o("WavLMForCTC"),ifr=o(" (WavLM model)"),dfr=l(),sF=a("p"),cfr=o("The model is set in evaluation mode by default using "),Y2e=a("code"),ffr=o("model.eval()"),mfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K2e=a("code"),gfr=o("model.train()"),hfr=l(),F(lF.$$.fragment),_Ve=l(),Pd=a("h2"),iF=a("a"),Z2e=a("span"),F(G8.$$.fragment),pfr=l(),ebe=a("span"),_fr=o("AutoModelForSpeechSeq2Seq"),uVe=l(),Wo=a("div"),F(O8.$$.fragment),ufr=l(),Bd=a("p"),bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jW=a("a"),vfr=o("from_pretrained()"),Ffr=o(" class method or the "),DW=a("a"),Tfr=o("from_config()"),Mfr=o(` class
method.`),Efr=l(),V8=a("p"),Cfr=o("This class cannot be instantiated directly using "),obe=a("code"),wfr=o("__init__()"),Afr=o(" (throws an error)."),Lfr=l(),Et=a("div"),F(X8.$$.fragment),yfr=l(),rbe=a("p"),xfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$fr=l(),Id=a("p"),kfr=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),Sfr=o("not"),Rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),Pfr=o("from_pretrained()"),Bfr=o(" to load the model weights."),Ifr=l(),F(dF.$$.fragment),Nfr=l(),ho=a("div"),F(z8.$$.fragment),qfr=l(),abe=a("p"),jfr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dfr=l(),Ja=a("p"),Gfr=o("The model class to instantiate is selected based on the "),nbe=a("code"),Ofr=o("model_type"),Vfr=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),Xfr=o("pretrained_model_name_or_path"),zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),Qfr=o("pretrained_model_name_or_path"),Wfr=o(":"),Hfr=l(),Q8=a("ul"),cF=a("li"),ibe=a("strong"),Ufr=o("speech-encoder-decoder"),Jfr=o(" \u2014 "),OW=a("a"),Yfr=o("SpeechEncoderDecoderModel"),Kfr=o(" (Speech Encoder decoder model)"),Zfr=l(),fF=a("li"),dbe=a("strong"),emr=o("speech_to_text"),omr=o(" \u2014 "),VW=a("a"),rmr=o("Speech2TextForConditionalGeneration"),tmr=o(" (Speech2Text model)"),amr=l(),mF=a("p"),nmr=o("The model is set in evaluation mode by default using "),cbe=a("code"),smr=o("model.eval()"),lmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=a("code"),imr=o("model.train()"),dmr=l(),F(gF.$$.fragment),bVe=l(),Nd=a("h2"),hF=a("a"),mbe=a("span"),F(W8.$$.fragment),cmr=l(),gbe=a("span"),fmr=o("AutoModelForAudioXVector"),vVe=l(),Ho=a("div"),F(H8.$$.fragment),mmr=l(),qd=a("p"),gmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),XW=a("a"),hmr=o("from_pretrained()"),pmr=o(" class method or the "),zW=a("a"),_mr=o("from_config()"),umr=o(` class
method.`),bmr=l(),U8=a("p"),vmr=o("This class cannot be instantiated directly using "),hbe=a("code"),Fmr=o("__init__()"),Tmr=o(" (throws an error)."),Mmr=l(),Ct=a("div"),F(J8.$$.fragment),Emr=l(),pbe=a("p"),Cmr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),wmr=l(),jd=a("p"),Amr=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),Lmr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),xmr=o("from_pretrained()"),$mr=o(" to load the model weights."),kmr=l(),F(pF.$$.fragment),Smr=l(),po=a("div"),F(Y8.$$.fragment),Rmr=l(),ube=a("p"),Pmr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bmr=l(),Ya=a("p"),Imr=o("The model class to instantiate is selected based on the "),bbe=a("code"),Nmr=o("model_type"),qmr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),jmr=o("pretrained_model_name_or_path"),Dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Gmr=o("pretrained_model_name_or_path"),Omr=o(":"),Vmr=l(),ot=a("ul"),_F=a("li"),Tbe=a("strong"),Xmr=o("data2vec-audio"),zmr=o(" \u2014 "),WW=a("a"),Qmr=o("Data2VecAudioForXVector"),Wmr=o(" (Data2VecAudio model)"),Hmr=l(),uF=a("li"),Mbe=a("strong"),Umr=o("unispeech-sat"),Jmr=o(" \u2014 "),HW=a("a"),Ymr=o("UniSpeechSatForXVector"),Kmr=o(" (UniSpeechSat model)"),Zmr=l(),bF=a("li"),Ebe=a("strong"),egr=o("wav2vec2"),ogr=o(" \u2014 "),UW=a("a"),rgr=o("Wav2Vec2ForXVector"),tgr=o(" (Wav2Vec2 model)"),agr=l(),vF=a("li"),Cbe=a("strong"),ngr=o("wav2vec2-conformer"),sgr=o(" \u2014 "),JW=a("a"),lgr=o("Wav2Vec2ConformerForXVector"),igr=o(" (Wav2Vec2-Conformer model)"),dgr=l(),FF=a("li"),wbe=a("strong"),cgr=o("wavlm"),fgr=o(" \u2014 "),YW=a("a"),mgr=o("WavLMForXVector"),ggr=o(" (WavLM model)"),hgr=l(),TF=a("p"),pgr=o("The model is set in evaluation mode by default using "),Abe=a("code"),_gr=o("model.eval()"),ugr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=a("code"),bgr=o("model.train()"),vgr=l(),F(MF.$$.fragment),FVe=l(),Dd=a("h2"),EF=a("a"),ybe=a("span"),F(K8.$$.fragment),Fgr=l(),xbe=a("span"),Tgr=o("AutoModelForMaskedImageModeling"),TVe=l(),Uo=a("div"),F(Z8.$$.fragment),Mgr=l(),Gd=a("p"),Egr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KW=a("a"),Cgr=o("from_pretrained()"),wgr=o(" class method or the "),ZW=a("a"),Agr=o("from_config()"),Lgr=o(` class
method.`),ygr=l(),e9=a("p"),xgr=o("This class cannot be instantiated directly using "),$be=a("code"),$gr=o("__init__()"),kgr=o(" (throws an error)."),Sgr=l(),wt=a("div"),F(o9.$$.fragment),Rgr=l(),kbe=a("p"),Pgr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Bgr=l(),Od=a("p"),Igr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),Ngr=o("not"),qgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),jgr=o("from_pretrained()"),Dgr=o(" to load the model weights."),Ggr=l(),F(CF.$$.fragment),Ogr=l(),_o=a("div"),F(r9.$$.fragment),Vgr=l(),Rbe=a("p"),Xgr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),zgr=l(),Ka=a("p"),Qgr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),Wgr=o("model_type"),Hgr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),Ygr=o("pretrained_model_name_or_path"),Kgr=o(":"),Zgr=l(),Vd=a("ul"),wF=a("li"),Nbe=a("strong"),ehr=o("deit"),ohr=o(" \u2014 "),oH=a("a"),rhr=o("DeiTForMaskedImageModeling"),thr=o(" (DeiT model)"),ahr=l(),AF=a("li"),qbe=a("strong"),nhr=o("swin"),shr=o(" \u2014 "),rH=a("a"),lhr=o("SwinForMaskedImageModeling"),ihr=o(" (Swin Transformer model)"),dhr=l(),LF=a("li"),jbe=a("strong"),chr=o("vit"),fhr=o(" \u2014 "),tH=a("a"),mhr=o("ViTForMaskedImageModeling"),ghr=o(" (ViT model)"),hhr=l(),yF=a("p"),phr=o("The model is set in evaluation mode by default using "),Dbe=a("code"),_hr=o("model.eval()"),uhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=a("code"),bhr=o("model.train()"),vhr=l(),F(xF.$$.fragment),MVe=l(),Xd=a("h2"),$F=a("a"),Obe=a("span"),F(t9.$$.fragment),Fhr=l(),Vbe=a("span"),Thr=o("AutoModelForObjectDetection"),EVe=l(),Jo=a("div"),F(a9.$$.fragment),Mhr=l(),zd=a("p"),Ehr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),aH=a("a"),Chr=o("from_pretrained()"),whr=o(" class method or the "),nH=a("a"),Ahr=o("from_config()"),Lhr=o(` class
method.`),yhr=l(),n9=a("p"),xhr=o("This class cannot be instantiated directly using "),Xbe=a("code"),$hr=o("__init__()"),khr=o(" (throws an error)."),Shr=l(),At=a("div"),F(s9.$$.fragment),Rhr=l(),zbe=a("p"),Phr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Bhr=l(),Qd=a("p"),Ihr=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),Nhr=o("not"),qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),jhr=o("from_pretrained()"),Dhr=o(" to load the model weights."),Ghr=l(),F(kF.$$.fragment),Ohr=l(),uo=a("div"),F(l9.$$.fragment),Vhr=l(),Wbe=a("p"),Xhr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zhr=l(),Za=a("p"),Qhr=o("The model class to instantiate is selected based on the "),Hbe=a("code"),Whr=o("model_type"),Hhr=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(":"),Zhr=l(),i9=a("ul"),SF=a("li"),Ybe=a("strong"),epr=o("detr"),opr=o(" \u2014 "),lH=a("a"),rpr=o("DetrForObjectDetection"),tpr=o(" (DETR model)"),apr=l(),RF=a("li"),Kbe=a("strong"),npr=o("yolos"),spr=o(" \u2014 "),iH=a("a"),lpr=o("YolosForObjectDetection"),ipr=o(" (YOLOS model)"),dpr=l(),PF=a("p"),cpr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),fpr=o("model.eval()"),mpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=a("code"),gpr=o("model.train()"),hpr=l(),F(BF.$$.fragment),CVe=l(),Wd=a("h2"),IF=a("a"),o4e=a("span"),F(d9.$$.fragment),ppr=l(),r4e=a("span"),_pr=o("AutoModelForImageSegmentation"),wVe=l(),Yo=a("div"),F(c9.$$.fragment),upr=l(),Hd=a("p"),bpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dH=a("a"),vpr=o("from_pretrained()"),Fpr=o(" class method or the "),cH=a("a"),Tpr=o("from_config()"),Mpr=o(` class
method.`),Epr=l(),f9=a("p"),Cpr=o("This class cannot be instantiated directly using "),t4e=a("code"),wpr=o("__init__()"),Apr=o(" (throws an error)."),Lpr=l(),Lt=a("div"),F(m9.$$.fragment),ypr=l(),a4e=a("p"),xpr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$pr=l(),Ud=a("p"),kpr=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),Spr=o("not"),Rpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),Ppr=o("from_pretrained()"),Bpr=o(" to load the model weights."),Ipr=l(),F(NF.$$.fragment),Npr=l(),bo=a("div"),F(g9.$$.fragment),qpr=l(),s4e=a("p"),jpr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Dpr=l(),en=a("p"),Gpr=o("The model class to instantiate is selected based on the "),l4e=a("code"),Opr=o("model_type"),Vpr=o(` property of the config object (either
passed as an argument or loaded from `),i4e=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=a("code"),Qpr=o("pretrained_model_name_or_path"),Wpr=o(":"),Hpr=l(),c4e=a("ul"),qF=a("li"),f4e=a("strong"),Upr=o("detr"),Jpr=o(" \u2014 "),mH=a("a"),Ypr=o("DetrForSegmentation"),Kpr=o(" (DETR model)"),Zpr=l(),jF=a("p"),e_r=o("The model is set in evaluation mode by default using "),m4e=a("code"),o_r=o("model.eval()"),r_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g4e=a("code"),t_r=o("model.train()"),a_r=l(),F(DF.$$.fragment),AVe=l(),Jd=a("h2"),GF=a("a"),h4e=a("span"),F(h9.$$.fragment),n_r=l(),p4e=a("span"),s_r=o("AutoModelForSemanticSegmentation"),LVe=l(),Ko=a("div"),F(p9.$$.fragment),l_r=l(),Yd=a("p"),i_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gH=a("a"),d_r=o("from_pretrained()"),c_r=o(" class method or the "),hH=a("a"),f_r=o("from_config()"),m_r=o(` class
method.`),g_r=l(),_9=a("p"),h_r=o("This class cannot be instantiated directly using "),_4e=a("code"),p_r=o("__init__()"),__r=o(" (throws an error)."),u_r=l(),yt=a("div"),F(u9.$$.fragment),b_r=l(),u4e=a("p"),v_r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),F_r=l(),Kd=a("p"),T_r=o(`Note:
Loading a model from its configuration file does `),b4e=a("strong"),M_r=o("not"),E_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),C_r=o("from_pretrained()"),w_r=o(" to load the model weights."),A_r=l(),F(OF.$$.fragment),L_r=l(),vo=a("div"),F(b9.$$.fragment),y_r=l(),v4e=a("p"),x_r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$_r=l(),on=a("p"),k_r=o("The model class to instantiate is selected based on the "),F4e=a("code"),S_r=o("model_type"),R_r=o(` property of the config object (either
passed as an argument or loaded from `),T4e=a("code"),P_r=o("pretrained_model_name_or_path"),B_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=a("code"),I_r=o("pretrained_model_name_or_path"),N_r=o(":"),q_r=l(),rn=a("ul"),VF=a("li"),E4e=a("strong"),j_r=o("beit"),D_r=o(" \u2014 "),_H=a("a"),G_r=o("BeitForSemanticSegmentation"),O_r=o(" (BEiT model)"),V_r=l(),XF=a("li"),C4e=a("strong"),X_r=o("data2vec-vision"),z_r=o(" \u2014 "),uH=a("a"),Q_r=o("Data2VecVisionForSemanticSegmentation"),W_r=o(" (Data2VecVision model)"),H_r=l(),zF=a("li"),w4e=a("strong"),U_r=o("dpt"),J_r=o(" \u2014 "),bH=a("a"),Y_r=o("DPTForSemanticSegmentation"),K_r=o(" (DPT model)"),Z_r=l(),QF=a("li"),A4e=a("strong"),eur=o("segformer"),our=o(" \u2014 "),vH=a("a"),rur=o("SegformerForSemanticSegmentation"),tur=o(" (SegFormer model)"),aur=l(),WF=a("p"),nur=o("The model is set in evaluation mode by default using "),L4e=a("code"),sur=o("model.eval()"),lur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=a("code"),iur=o("model.train()"),dur=l(),F(HF.$$.fragment),yVe=l(),Zd=a("h2"),UF=a("a"),x4e=a("span"),F(v9.$$.fragment),cur=l(),$4e=a("span"),fur=o("AutoModelForInstanceSegmentation"),xVe=l(),Zo=a("div"),F(F9.$$.fragment),mur=l(),ec=a("p"),gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),FH=a("a"),hur=o("from_pretrained()"),pur=o(" class method or the "),TH=a("a"),_ur=o("from_config()"),uur=o(` class
method.`),bur=l(),T9=a("p"),vur=o("This class cannot be instantiated directly using "),k4e=a("code"),Fur=o("__init__()"),Tur=o(" (throws an error)."),Mur=l(),xt=a("div"),F(M9.$$.fragment),Eur=l(),S4e=a("p"),Cur=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),wur=l(),oc=a("p"),Aur=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Lur=o("not"),yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),xur=o("from_pretrained()"),$ur=o(" to load the model weights."),kur=l(),F(JF.$$.fragment),Sur=l(),Fo=a("div"),F(E9.$$.fragment),Rur=l(),P4e=a("p"),Pur=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Bur=l(),tn=a("p"),Iur=o("The model class to instantiate is selected based on the "),B4e=a("code"),Nur=o("model_type"),qur=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),Gur=o("pretrained_model_name_or_path"),Our=o(":"),Vur=l(),q4e=a("ul"),YF=a("li"),j4e=a("strong"),Xur=o("maskformer"),zur=o(" \u2014 "),EH=a("a"),Qur=o("MaskFormerForInstanceSegmentation"),Wur=o(" (MaskFormer model)"),Hur=l(),KF=a("p"),Uur=o("The model is set in evaluation mode by default using "),D4e=a("code"),Jur=o("model.eval()"),Yur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=a("code"),Kur=o("model.train()"),Zur=l(),F(ZF.$$.fragment),$Ve=l(),rc=a("h2"),eT=a("a"),O4e=a("span"),F(C9.$$.fragment),e1r=l(),V4e=a("span"),o1r=o("TFAutoModel"),kVe=l(),er=a("div"),F(w9.$$.fragment),r1r=l(),tc=a("p"),t1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CH=a("a"),a1r=o("from_pretrained()"),n1r=o(" class method or the "),wH=a("a"),s1r=o("from_config()"),l1r=o(` class
method.`),i1r=l(),A9=a("p"),d1r=o("This class cannot be instantiated directly using "),X4e=a("code"),c1r=o("__init__()"),f1r=o(" (throws an error)."),m1r=l(),$t=a("div"),F(L9.$$.fragment),g1r=l(),z4e=a("p"),h1r=o("Instantiates one of the base model classes of the library from a configuration."),p1r=l(),ac=a("p"),_1r=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),u1r=o("not"),b1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),v1r=o("from_pretrained()"),F1r=o(" to load the model weights."),T1r=l(),F(oT.$$.fragment),M1r=l(),yr=a("div"),F(y9.$$.fragment),E1r=l(),W4e=a("p"),C1r=o("Instantiate one of the base model classes of the library from a pretrained model."),w1r=l(),an=a("p"),A1r=o("The model class to instantiate is selected based on the "),H4e=a("code"),L1r=o("model_type"),y1r=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),x1r=o("pretrained_model_name_or_path"),$1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(":"),R1r=l(),j=a("ul"),rT=a("li"),Y4e=a("strong"),P1r=o("albert"),B1r=o(" \u2014 "),LH=a("a"),I1r=o("TFAlbertModel"),N1r=o(" (ALBERT model)"),q1r=l(),tT=a("li"),K4e=a("strong"),j1r=o("bart"),D1r=o(" \u2014 "),yH=a("a"),G1r=o("TFBartModel"),O1r=o(" (BART model)"),V1r=l(),aT=a("li"),Z4e=a("strong"),X1r=o("bert"),z1r=o(" \u2014 "),xH=a("a"),Q1r=o("TFBertModel"),W1r=o(" (BERT model)"),H1r=l(),nT=a("li"),e3e=a("strong"),U1r=o("blenderbot"),J1r=o(" \u2014 "),$H=a("a"),Y1r=o("TFBlenderbotModel"),K1r=o(" (Blenderbot model)"),Z1r=l(),sT=a("li"),o3e=a("strong"),e7r=o("blenderbot-small"),o7r=o(" \u2014 "),kH=a("a"),r7r=o("TFBlenderbotSmallModel"),t7r=o(" (BlenderbotSmall model)"),a7r=l(),lT=a("li"),r3e=a("strong"),n7r=o("camembert"),s7r=o(" \u2014 "),SH=a("a"),l7r=o("TFCamembertModel"),i7r=o(" (CamemBERT model)"),d7r=l(),iT=a("li"),t3e=a("strong"),c7r=o("clip"),f7r=o(" \u2014 "),RH=a("a"),m7r=o("TFCLIPModel"),g7r=o(" (CLIP model)"),h7r=l(),dT=a("li"),a3e=a("strong"),p7r=o("convbert"),_7r=o(" \u2014 "),PH=a("a"),u7r=o("TFConvBertModel"),b7r=o(" (ConvBERT model)"),v7r=l(),cT=a("li"),n3e=a("strong"),F7r=o("convnext"),T7r=o(" \u2014 "),BH=a("a"),M7r=o("TFConvNextModel"),E7r=o(" (ConvNeXT model)"),C7r=l(),fT=a("li"),s3e=a("strong"),w7r=o("ctrl"),A7r=o(" \u2014 "),IH=a("a"),L7r=o("TFCTRLModel"),y7r=o(" (CTRL model)"),x7r=l(),mT=a("li"),l3e=a("strong"),$7r=o("data2vec-vision"),k7r=o(" \u2014 "),NH=a("a"),S7r=o("TFData2VecVisionModel"),R7r=o(" (Data2VecVision model)"),P7r=l(),gT=a("li"),i3e=a("strong"),B7r=o("deberta"),I7r=o(" \u2014 "),qH=a("a"),N7r=o("TFDebertaModel"),q7r=o(" (DeBERTa model)"),j7r=l(),hT=a("li"),d3e=a("strong"),D7r=o("deberta-v2"),G7r=o(" \u2014 "),jH=a("a"),O7r=o("TFDebertaV2Model"),V7r=o(" (DeBERTa-v2 model)"),X7r=l(),pT=a("li"),c3e=a("strong"),z7r=o("distilbert"),Q7r=o(" \u2014 "),DH=a("a"),W7r=o("TFDistilBertModel"),H7r=o(" (DistilBERT model)"),U7r=l(),_T=a("li"),f3e=a("strong"),J7r=o("dpr"),Y7r=o(" \u2014 "),GH=a("a"),K7r=o("TFDPRQuestionEncoder"),Z7r=o(" (DPR model)"),e2r=l(),uT=a("li"),m3e=a("strong"),o2r=o("electra"),r2r=o(" \u2014 "),OH=a("a"),t2r=o("TFElectraModel"),a2r=o(" (ELECTRA model)"),n2r=l(),bT=a("li"),g3e=a("strong"),s2r=o("flaubert"),l2r=o(" \u2014 "),VH=a("a"),i2r=o("TFFlaubertModel"),d2r=o(" (FlauBERT model)"),c2r=l(),Hs=a("li"),h3e=a("strong"),f2r=o("funnel"),m2r=o(" \u2014 "),XH=a("a"),g2r=o("TFFunnelModel"),h2r=o(" or "),zH=a("a"),p2r=o("TFFunnelBaseModel"),_2r=o(" (Funnel Transformer model)"),u2r=l(),vT=a("li"),p3e=a("strong"),b2r=o("gpt2"),v2r=o(" \u2014 "),QH=a("a"),F2r=o("TFGPT2Model"),T2r=o(" (OpenAI GPT-2 model)"),M2r=l(),FT=a("li"),_3e=a("strong"),E2r=o("gptj"),C2r=o(" \u2014 "),WH=a("a"),w2r=o("TFGPTJModel"),A2r=o(" (GPT-J model)"),L2r=l(),TT=a("li"),u3e=a("strong"),y2r=o("hubert"),x2r=o(" \u2014 "),HH=a("a"),$2r=o("TFHubertModel"),k2r=o(" (Hubert model)"),S2r=l(),MT=a("li"),b3e=a("strong"),R2r=o("layoutlm"),P2r=o(" \u2014 "),UH=a("a"),B2r=o("TFLayoutLMModel"),I2r=o(" (LayoutLM model)"),N2r=l(),ET=a("li"),v3e=a("strong"),q2r=o("led"),j2r=o(" \u2014 "),JH=a("a"),D2r=o("TFLEDModel"),G2r=o(" (LED model)"),O2r=l(),CT=a("li"),F3e=a("strong"),V2r=o("longformer"),X2r=o(" \u2014 "),YH=a("a"),z2r=o("TFLongformerModel"),Q2r=o(" (Longformer model)"),W2r=l(),wT=a("li"),T3e=a("strong"),H2r=o("lxmert"),U2r=o(" \u2014 "),KH=a("a"),J2r=o("TFLxmertModel"),Y2r=o(" (LXMERT model)"),K2r=l(),AT=a("li"),M3e=a("strong"),Z2r=o("marian"),ebr=o(" \u2014 "),ZH=a("a"),obr=o("TFMarianModel"),rbr=o(" (Marian model)"),tbr=l(),LT=a("li"),E3e=a("strong"),abr=o("mbart"),nbr=o(" \u2014 "),eU=a("a"),sbr=o("TFMBartModel"),lbr=o(" (mBART model)"),ibr=l(),yT=a("li"),C3e=a("strong"),dbr=o("mobilebert"),cbr=o(" \u2014 "),oU=a("a"),fbr=o("TFMobileBertModel"),mbr=o(" (MobileBERT model)"),gbr=l(),xT=a("li"),w3e=a("strong"),hbr=o("mpnet"),pbr=o(" \u2014 "),rU=a("a"),_br=o("TFMPNetModel"),ubr=o(" (MPNet model)"),bbr=l(),$T=a("li"),A3e=a("strong"),vbr=o("mt5"),Fbr=o(" \u2014 "),tU=a("a"),Tbr=o("TFMT5Model"),Mbr=o(" (MT5 model)"),Ebr=l(),kT=a("li"),L3e=a("strong"),Cbr=o("openai-gpt"),wbr=o(" \u2014 "),aU=a("a"),Abr=o("TFOpenAIGPTModel"),Lbr=o(" (OpenAI GPT model)"),ybr=l(),ST=a("li"),y3e=a("strong"),xbr=o("opt"),$br=o(" \u2014 "),nU=a("a"),kbr=o("TFOPTModel"),Sbr=o(" (OPT model)"),Rbr=l(),RT=a("li"),x3e=a("strong"),Pbr=o("pegasus"),Bbr=o(" \u2014 "),sU=a("a"),Ibr=o("TFPegasusModel"),Nbr=o(" (Pegasus model)"),qbr=l(),PT=a("li"),$3e=a("strong"),jbr=o("rembert"),Dbr=o(" \u2014 "),lU=a("a"),Gbr=o("TFRemBertModel"),Obr=o(" (RemBERT model)"),Vbr=l(),BT=a("li"),k3e=a("strong"),Xbr=o("roberta"),zbr=o(" \u2014 "),iU=a("a"),Qbr=o("TFRobertaModel"),Wbr=o(" (RoBERTa model)"),Hbr=l(),IT=a("li"),S3e=a("strong"),Ubr=o("roformer"),Jbr=o(" \u2014 "),dU=a("a"),Ybr=o("TFRoFormerModel"),Kbr=o(" (RoFormer model)"),Zbr=l(),NT=a("li"),R3e=a("strong"),e4r=o("speech_to_text"),o4r=o(" \u2014 "),cU=a("a"),r4r=o("TFSpeech2TextModel"),t4r=o(" (Speech2Text model)"),a4r=l(),qT=a("li"),P3e=a("strong"),n4r=o("swin"),s4r=o(" \u2014 "),fU=a("a"),l4r=o("TFSwinModel"),i4r=o(" (Swin Transformer model)"),d4r=l(),jT=a("li"),B3e=a("strong"),c4r=o("t5"),f4r=o(" \u2014 "),mU=a("a"),m4r=o("TFT5Model"),g4r=o(" (T5 model)"),h4r=l(),DT=a("li"),I3e=a("strong"),p4r=o("tapas"),_4r=o(" \u2014 "),gU=a("a"),u4r=o("TFTapasModel"),b4r=o(" (TAPAS model)"),v4r=l(),GT=a("li"),N3e=a("strong"),F4r=o("transfo-xl"),T4r=o(" \u2014 "),hU=a("a"),M4r=o("TFTransfoXLModel"),E4r=o(" (Transformer-XL model)"),C4r=l(),OT=a("li"),q3e=a("strong"),w4r=o("vit"),A4r=o(" \u2014 "),pU=a("a"),L4r=o("TFViTModel"),y4r=o(" (ViT model)"),x4r=l(),VT=a("li"),j3e=a("strong"),$4r=o("vit_mae"),k4r=o(" \u2014 "),_U=a("a"),S4r=o("TFViTMAEModel"),R4r=o(" (ViTMAE model)"),P4r=l(),XT=a("li"),D3e=a("strong"),B4r=o("wav2vec2"),I4r=o(" \u2014 "),uU=a("a"),N4r=o("TFWav2Vec2Model"),q4r=o(" (Wav2Vec2 model)"),j4r=l(),zT=a("li"),G3e=a("strong"),D4r=o("xlm"),G4r=o(" \u2014 "),bU=a("a"),O4r=o("TFXLMModel"),V4r=o(" (XLM model)"),X4r=l(),QT=a("li"),O3e=a("strong"),z4r=o("xlm-roberta"),Q4r=o(" \u2014 "),vU=a("a"),W4r=o("TFXLMRobertaModel"),H4r=o(" (XLM-RoBERTa model)"),U4r=l(),WT=a("li"),V3e=a("strong"),J4r=o("xlnet"),Y4r=o(" \u2014 "),FU=a("a"),K4r=o("TFXLNetModel"),Z4r=o(" (XLNet model)"),e3r=l(),F(HT.$$.fragment),SVe=l(),nc=a("h2"),UT=a("a"),X3e=a("span"),F(x9.$$.fragment),o3r=l(),z3e=a("span"),r3r=o("TFAutoModelForPreTraining"),RVe=l(),or=a("div"),F($9.$$.fragment),t3r=l(),sc=a("p"),a3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TU=a("a"),n3r=o("from_pretrained()"),s3r=o(" class method or the "),MU=a("a"),l3r=o("from_config()"),i3r=o(` class
method.`),d3r=l(),k9=a("p"),c3r=o("This class cannot be instantiated directly using "),Q3e=a("code"),f3r=o("__init__()"),m3r=o(" (throws an error)."),g3r=l(),kt=a("div"),F(S9.$$.fragment),h3r=l(),W3e=a("p"),p3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_3r=l(),lc=a("p"),u3r=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),b3r=o("not"),v3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),F3r=o("from_pretrained()"),T3r=o(" to load the model weights."),M3r=l(),F(JT.$$.fragment),E3r=l(),xr=a("div"),F(R9.$$.fragment),C3r=l(),U3e=a("p"),w3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A3r=l(),nn=a("p"),L3r=o("The model class to instantiate is selected based on the "),J3e=a("code"),y3r=o("model_type"),x3r=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),S3r=o("pretrained_model_name_or_path"),R3r=o(":"),P3r=l(),se=a("ul"),YT=a("li"),Z3e=a("strong"),B3r=o("albert"),I3r=o(" \u2014 "),CU=a("a"),N3r=o("TFAlbertForPreTraining"),q3r=o(" (ALBERT model)"),j3r=l(),KT=a("li"),eve=a("strong"),D3r=o("bart"),G3r=o(" \u2014 "),wU=a("a"),O3r=o("TFBartForConditionalGeneration"),V3r=o(" (BART model)"),X3r=l(),ZT=a("li"),ove=a("strong"),z3r=o("bert"),Q3r=o(" \u2014 "),AU=a("a"),W3r=o("TFBertForPreTraining"),H3r=o(" (BERT model)"),U3r=l(),eM=a("li"),rve=a("strong"),J3r=o("camembert"),Y3r=o(" \u2014 "),LU=a("a"),K3r=o("TFCamembertForMaskedLM"),Z3r=o(" (CamemBERT model)"),evr=l(),oM=a("li"),tve=a("strong"),ovr=o("ctrl"),rvr=o(" \u2014 "),yU=a("a"),tvr=o("TFCTRLLMHeadModel"),avr=o(" (CTRL model)"),nvr=l(),rM=a("li"),ave=a("strong"),svr=o("distilbert"),lvr=o(" \u2014 "),xU=a("a"),ivr=o("TFDistilBertForMaskedLM"),dvr=o(" (DistilBERT model)"),cvr=l(),tM=a("li"),nve=a("strong"),fvr=o("electra"),mvr=o(" \u2014 "),$U=a("a"),gvr=o("TFElectraForPreTraining"),hvr=o(" (ELECTRA model)"),pvr=l(),aM=a("li"),sve=a("strong"),_vr=o("flaubert"),uvr=o(" \u2014 "),kU=a("a"),bvr=o("TFFlaubertWithLMHeadModel"),vvr=o(" (FlauBERT model)"),Fvr=l(),nM=a("li"),lve=a("strong"),Tvr=o("funnel"),Mvr=o(" \u2014 "),SU=a("a"),Evr=o("TFFunnelForPreTraining"),Cvr=o(" (Funnel Transformer model)"),wvr=l(),sM=a("li"),ive=a("strong"),Avr=o("gpt2"),Lvr=o(" \u2014 "),RU=a("a"),yvr=o("TFGPT2LMHeadModel"),xvr=o(" (OpenAI GPT-2 model)"),$vr=l(),lM=a("li"),dve=a("strong"),kvr=o("layoutlm"),Svr=o(" \u2014 "),PU=a("a"),Rvr=o("TFLayoutLMForMaskedLM"),Pvr=o(" (LayoutLM model)"),Bvr=l(),iM=a("li"),cve=a("strong"),Ivr=o("lxmert"),Nvr=o(" \u2014 "),BU=a("a"),qvr=o("TFLxmertForPreTraining"),jvr=o(" (LXMERT model)"),Dvr=l(),dM=a("li"),fve=a("strong"),Gvr=o("mobilebert"),Ovr=o(" \u2014 "),IU=a("a"),Vvr=o("TFMobileBertForPreTraining"),Xvr=o(" (MobileBERT model)"),zvr=l(),cM=a("li"),mve=a("strong"),Qvr=o("mpnet"),Wvr=o(" \u2014 "),NU=a("a"),Hvr=o("TFMPNetForMaskedLM"),Uvr=o(" (MPNet model)"),Jvr=l(),fM=a("li"),gve=a("strong"),Yvr=o("openai-gpt"),Kvr=o(" \u2014 "),qU=a("a"),Zvr=o("TFOpenAIGPTLMHeadModel"),eFr=o(" (OpenAI GPT model)"),oFr=l(),mM=a("li"),hve=a("strong"),rFr=o("roberta"),tFr=o(" \u2014 "),jU=a("a"),aFr=o("TFRobertaForMaskedLM"),nFr=o(" (RoBERTa model)"),sFr=l(),gM=a("li"),pve=a("strong"),lFr=o("t5"),iFr=o(" \u2014 "),DU=a("a"),dFr=o("TFT5ForConditionalGeneration"),cFr=o(" (T5 model)"),fFr=l(),hM=a("li"),_ve=a("strong"),mFr=o("tapas"),gFr=o(" \u2014 "),GU=a("a"),hFr=o("TFTapasForMaskedLM"),pFr=o(" (TAPAS model)"),_Fr=l(),pM=a("li"),uve=a("strong"),uFr=o("transfo-xl"),bFr=o(" \u2014 "),OU=a("a"),vFr=o("TFTransfoXLLMHeadModel"),FFr=o(" (Transformer-XL model)"),TFr=l(),_M=a("li"),bve=a("strong"),MFr=o("vit_mae"),EFr=o(" \u2014 "),VU=a("a"),CFr=o("TFViTMAEForPreTraining"),wFr=o(" (ViTMAE model)"),AFr=l(),uM=a("li"),vve=a("strong"),LFr=o("xlm"),yFr=o(" \u2014 "),XU=a("a"),xFr=o("TFXLMWithLMHeadModel"),$Fr=o(" (XLM model)"),kFr=l(),bM=a("li"),Fve=a("strong"),SFr=o("xlm-roberta"),RFr=o(" \u2014 "),zU=a("a"),PFr=o("TFXLMRobertaForMaskedLM"),BFr=o(" (XLM-RoBERTa model)"),IFr=l(),vM=a("li"),Tve=a("strong"),NFr=o("xlnet"),qFr=o(" \u2014 "),QU=a("a"),jFr=o("TFXLNetLMHeadModel"),DFr=o(" (XLNet model)"),GFr=l(),F(FM.$$.fragment),PVe=l(),ic=a("h2"),TM=a("a"),Mve=a("span"),F(P9.$$.fragment),OFr=l(),Eve=a("span"),VFr=o("TFAutoModelForCausalLM"),BVe=l(),rr=a("div"),F(B9.$$.fragment),XFr=l(),dc=a("p"),zFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WU=a("a"),QFr=o("from_pretrained()"),WFr=o(" class method or the "),HU=a("a"),HFr=o("from_config()"),UFr=o(` class
method.`),JFr=l(),I9=a("p"),YFr=o("This class cannot be instantiated directly using "),Cve=a("code"),KFr=o("__init__()"),ZFr=o(" (throws an error)."),eTr=l(),St=a("div"),F(N9.$$.fragment),oTr=l(),wve=a("p"),rTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tTr=l(),cc=a("p"),aTr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),nTr=o("not"),sTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),lTr=o("from_pretrained()"),iTr=o(" to load the model weights."),dTr=l(),F(MM.$$.fragment),cTr=l(),$r=a("div"),F(q9.$$.fragment),fTr=l(),Lve=a("p"),mTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gTr=l(),sn=a("p"),hTr=o("The model class to instantiate is selected based on the "),yve=a("code"),pTr=o("model_type"),_Tr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),uTr=o("pretrained_model_name_or_path"),bTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),vTr=o("pretrained_model_name_or_path"),FTr=o(":"),TTr=l(),Me=a("ul"),EM=a("li"),kve=a("strong"),MTr=o("bert"),ETr=o(" \u2014 "),JU=a("a"),CTr=o("TFBertLMHeadModel"),wTr=o(" (BERT model)"),ATr=l(),CM=a("li"),Sve=a("strong"),LTr=o("camembert"),yTr=o(" \u2014 "),YU=a("a"),xTr=o("TFCamembertForCausalLM"),$Tr=o(" (CamemBERT model)"),kTr=l(),wM=a("li"),Rve=a("strong"),STr=o("ctrl"),RTr=o(" \u2014 "),KU=a("a"),PTr=o("TFCTRLLMHeadModel"),BTr=o(" (CTRL model)"),ITr=l(),AM=a("li"),Pve=a("strong"),NTr=o("gpt2"),qTr=o(" \u2014 "),ZU=a("a"),jTr=o("TFGPT2LMHeadModel"),DTr=o(" (OpenAI GPT-2 model)"),GTr=l(),LM=a("li"),Bve=a("strong"),OTr=o("gptj"),VTr=o(" \u2014 "),eJ=a("a"),XTr=o("TFGPTJForCausalLM"),zTr=o(" (GPT-J model)"),QTr=l(),yM=a("li"),Ive=a("strong"),WTr=o("openai-gpt"),HTr=o(" \u2014 "),oJ=a("a"),UTr=o("TFOpenAIGPTLMHeadModel"),JTr=o(" (OpenAI GPT model)"),YTr=l(),xM=a("li"),Nve=a("strong"),KTr=o("opt"),ZTr=o(" \u2014 "),rJ=a("a"),eMr=o("TFOPTForCausalLM"),oMr=o(" (OPT model)"),rMr=l(),$M=a("li"),qve=a("strong"),tMr=o("rembert"),aMr=o(" \u2014 "),tJ=a("a"),nMr=o("TFRemBertForCausalLM"),sMr=o(" (RemBERT model)"),lMr=l(),kM=a("li"),jve=a("strong"),iMr=o("roberta"),dMr=o(" \u2014 "),aJ=a("a"),cMr=o("TFRobertaForCausalLM"),fMr=o(" (RoBERTa model)"),mMr=l(),SM=a("li"),Dve=a("strong"),gMr=o("roformer"),hMr=o(" \u2014 "),nJ=a("a"),pMr=o("TFRoFormerForCausalLM"),_Mr=o(" (RoFormer model)"),uMr=l(),RM=a("li"),Gve=a("strong"),bMr=o("transfo-xl"),vMr=o(" \u2014 "),sJ=a("a"),FMr=o("TFTransfoXLLMHeadModel"),TMr=o(" (Transformer-XL model)"),MMr=l(),PM=a("li"),Ove=a("strong"),EMr=o("xlm"),CMr=o(" \u2014 "),lJ=a("a"),wMr=o("TFXLMWithLMHeadModel"),AMr=o(" (XLM model)"),LMr=l(),BM=a("li"),Vve=a("strong"),yMr=o("xlnet"),xMr=o(" \u2014 "),iJ=a("a"),$Mr=o("TFXLNetLMHeadModel"),kMr=o(" (XLNet model)"),SMr=l(),F(IM.$$.fragment),IVe=l(),fc=a("h2"),NM=a("a"),Xve=a("span"),F(j9.$$.fragment),RMr=l(),zve=a("span"),PMr=o("TFAutoModelForImageClassification"),NVe=l(),tr=a("div"),F(D9.$$.fragment),BMr=l(),mc=a("p"),IMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dJ=a("a"),NMr=o("from_pretrained()"),qMr=o(" class method or the "),cJ=a("a"),jMr=o("from_config()"),DMr=o(` class
method.`),GMr=l(),G9=a("p"),OMr=o("This class cannot be instantiated directly using "),Qve=a("code"),VMr=o("__init__()"),XMr=o(" (throws an error)."),zMr=l(),Rt=a("div"),F(O9.$$.fragment),QMr=l(),Wve=a("p"),WMr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HMr=l(),gc=a("p"),UMr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),JMr=o("not"),YMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),KMr=o("from_pretrained()"),ZMr=o(" to load the model weights."),eEr=l(),F(qM.$$.fragment),oEr=l(),kr=a("div"),F(V9.$$.fragment),rEr=l(),Uve=a("p"),tEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aEr=l(),ln=a("p"),nEr=o("The model class to instantiate is selected based on the "),Jve=a("code"),sEr=o("model_type"),lEr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),cEr=o("pretrained_model_name_or_path"),fEr=o(":"),mEr=l(),dn=a("ul"),jM=a("li"),Zve=a("strong"),gEr=o("convnext"),hEr=o(" \u2014 "),mJ=a("a"),pEr=o("TFConvNextForImageClassification"),_Er=o(" (ConvNeXT model)"),uEr=l(),DM=a("li"),eFe=a("strong"),bEr=o("data2vec-vision"),vEr=o(" \u2014 "),gJ=a("a"),FEr=o("TFData2VecVisionForImageClassification"),TEr=o(" (Data2VecVision model)"),MEr=l(),GM=a("li"),oFe=a("strong"),EEr=o("swin"),CEr=o(" \u2014 "),hJ=a("a"),wEr=o("TFSwinForImageClassification"),AEr=o(" (Swin Transformer model)"),LEr=l(),OM=a("li"),rFe=a("strong"),yEr=o("vit"),xEr=o(" \u2014 "),pJ=a("a"),$Er=o("TFViTForImageClassification"),kEr=o(" (ViT model)"),SEr=l(),F(VM.$$.fragment),qVe=l(),hc=a("h2"),XM=a("a"),tFe=a("span"),F(X9.$$.fragment),REr=l(),aFe=a("span"),PEr=o("TFAutoModelForMaskedLM"),jVe=l(),ar=a("div"),F(z9.$$.fragment),BEr=l(),pc=a("p"),IEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_J=a("a"),NEr=o("from_pretrained()"),qEr=o(" class method or the "),uJ=a("a"),jEr=o("from_config()"),DEr=o(` class
method.`),GEr=l(),Q9=a("p"),OEr=o("This class cannot be instantiated directly using "),nFe=a("code"),VEr=o("__init__()"),XEr=o(" (throws an error)."),zEr=l(),Pt=a("div"),F(W9.$$.fragment),QEr=l(),sFe=a("p"),WEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HEr=l(),_c=a("p"),UEr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),JEr=o("not"),YEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),KEr=o("from_pretrained()"),ZEr=o(" to load the model weights."),eCr=l(),F(zM.$$.fragment),oCr=l(),Sr=a("div"),F(H9.$$.fragment),rCr=l(),iFe=a("p"),tCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aCr=l(),cn=a("p"),nCr=o("The model class to instantiate is selected based on the "),dFe=a("code"),sCr=o("model_type"),lCr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),cCr=o("pretrained_model_name_or_path"),fCr=o(":"),mCr=l(),ie=a("ul"),QM=a("li"),mFe=a("strong"),gCr=o("albert"),hCr=o(" \u2014 "),vJ=a("a"),pCr=o("TFAlbertForMaskedLM"),_Cr=o(" (ALBERT model)"),uCr=l(),WM=a("li"),gFe=a("strong"),bCr=o("bert"),vCr=o(" \u2014 "),FJ=a("a"),FCr=o("TFBertForMaskedLM"),TCr=o(" (BERT model)"),MCr=l(),HM=a("li"),hFe=a("strong"),ECr=o("camembert"),CCr=o(" \u2014 "),TJ=a("a"),wCr=o("TFCamembertForMaskedLM"),ACr=o(" (CamemBERT model)"),LCr=l(),UM=a("li"),pFe=a("strong"),yCr=o("convbert"),xCr=o(" \u2014 "),MJ=a("a"),$Cr=o("TFConvBertForMaskedLM"),kCr=o(" (ConvBERT model)"),SCr=l(),JM=a("li"),_Fe=a("strong"),RCr=o("deberta"),PCr=o(" \u2014 "),EJ=a("a"),BCr=o("TFDebertaForMaskedLM"),ICr=o(" (DeBERTa model)"),NCr=l(),YM=a("li"),uFe=a("strong"),qCr=o("deberta-v2"),jCr=o(" \u2014 "),CJ=a("a"),DCr=o("TFDebertaV2ForMaskedLM"),GCr=o(" (DeBERTa-v2 model)"),OCr=l(),KM=a("li"),bFe=a("strong"),VCr=o("distilbert"),XCr=o(" \u2014 "),wJ=a("a"),zCr=o("TFDistilBertForMaskedLM"),QCr=o(" (DistilBERT model)"),WCr=l(),ZM=a("li"),vFe=a("strong"),HCr=o("electra"),UCr=o(" \u2014 "),AJ=a("a"),JCr=o("TFElectraForMaskedLM"),YCr=o(" (ELECTRA model)"),KCr=l(),eE=a("li"),FFe=a("strong"),ZCr=o("flaubert"),e5r=o(" \u2014 "),LJ=a("a"),o5r=o("TFFlaubertWithLMHeadModel"),r5r=o(" (FlauBERT model)"),t5r=l(),oE=a("li"),TFe=a("strong"),a5r=o("funnel"),n5r=o(" \u2014 "),yJ=a("a"),s5r=o("TFFunnelForMaskedLM"),l5r=o(" (Funnel Transformer model)"),i5r=l(),rE=a("li"),MFe=a("strong"),d5r=o("layoutlm"),c5r=o(" \u2014 "),xJ=a("a"),f5r=o("TFLayoutLMForMaskedLM"),m5r=o(" (LayoutLM model)"),g5r=l(),tE=a("li"),EFe=a("strong"),h5r=o("longformer"),p5r=o(" \u2014 "),$J=a("a"),_5r=o("TFLongformerForMaskedLM"),u5r=o(" (Longformer model)"),b5r=l(),aE=a("li"),CFe=a("strong"),v5r=o("mobilebert"),F5r=o(" \u2014 "),kJ=a("a"),T5r=o("TFMobileBertForMaskedLM"),M5r=o(" (MobileBERT model)"),E5r=l(),nE=a("li"),wFe=a("strong"),C5r=o("mpnet"),w5r=o(" \u2014 "),SJ=a("a"),A5r=o("TFMPNetForMaskedLM"),L5r=o(" (MPNet model)"),y5r=l(),sE=a("li"),AFe=a("strong"),x5r=o("rembert"),$5r=o(" \u2014 "),RJ=a("a"),k5r=o("TFRemBertForMaskedLM"),S5r=o(" (RemBERT model)"),R5r=l(),lE=a("li"),LFe=a("strong"),P5r=o("roberta"),B5r=o(" \u2014 "),PJ=a("a"),I5r=o("TFRobertaForMaskedLM"),N5r=o(" (RoBERTa model)"),q5r=l(),iE=a("li"),yFe=a("strong"),j5r=o("roformer"),D5r=o(" \u2014 "),BJ=a("a"),G5r=o("TFRoFormerForMaskedLM"),O5r=o(" (RoFormer model)"),V5r=l(),dE=a("li"),xFe=a("strong"),X5r=o("tapas"),z5r=o(" \u2014 "),IJ=a("a"),Q5r=o("TFTapasForMaskedLM"),W5r=o(" (TAPAS model)"),H5r=l(),cE=a("li"),$Fe=a("strong"),U5r=o("xlm"),J5r=o(" \u2014 "),NJ=a("a"),Y5r=o("TFXLMWithLMHeadModel"),K5r=o(" (XLM model)"),Z5r=l(),fE=a("li"),kFe=a("strong"),e0r=o("xlm-roberta"),o0r=o(" \u2014 "),qJ=a("a"),r0r=o("TFXLMRobertaForMaskedLM"),t0r=o(" (XLM-RoBERTa model)"),a0r=l(),F(mE.$$.fragment),DVe=l(),uc=a("h2"),gE=a("a"),SFe=a("span"),F(U9.$$.fragment),n0r=l(),RFe=a("span"),s0r=o("TFAutoModelForSeq2SeqLM"),GVe=l(),nr=a("div"),F(J9.$$.fragment),l0r=l(),bc=a("p"),i0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jJ=a("a"),d0r=o("from_pretrained()"),c0r=o(" class method or the "),DJ=a("a"),f0r=o("from_config()"),m0r=o(` class
method.`),g0r=l(),Y9=a("p"),h0r=o("This class cannot be instantiated directly using "),PFe=a("code"),p0r=o("__init__()"),_0r=o(" (throws an error)."),u0r=l(),Bt=a("div"),F(K9.$$.fragment),b0r=l(),BFe=a("p"),v0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F0r=l(),vc=a("p"),T0r=o(`Note:
Loading a model from its configuration file does `),IFe=a("strong"),M0r=o("not"),E0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),C0r=o("from_pretrained()"),w0r=o(" to load the model weights."),A0r=l(),F(hE.$$.fragment),L0r=l(),Rr=a("div"),F(Z9.$$.fragment),y0r=l(),NFe=a("p"),x0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$0r=l(),fn=a("p"),k0r=o("The model class to instantiate is selected based on the "),qFe=a("code"),S0r=o("model_type"),R0r=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),P0r=o("pretrained_model_name_or_path"),B0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),I0r=o("pretrained_model_name_or_path"),N0r=o(":"),q0r=l(),ye=a("ul"),pE=a("li"),GFe=a("strong"),j0r=o("bart"),D0r=o(" \u2014 "),OJ=a("a"),G0r=o("TFBartForConditionalGeneration"),O0r=o(" (BART model)"),V0r=l(),_E=a("li"),OFe=a("strong"),X0r=o("blenderbot"),z0r=o(" \u2014 "),VJ=a("a"),Q0r=o("TFBlenderbotForConditionalGeneration"),W0r=o(" (Blenderbot model)"),H0r=l(),uE=a("li"),VFe=a("strong"),U0r=o("blenderbot-small"),J0r=o(" \u2014 "),XJ=a("a"),Y0r=o("TFBlenderbotSmallForConditionalGeneration"),K0r=o(" (BlenderbotSmall model)"),Z0r=l(),bE=a("li"),XFe=a("strong"),ewr=o("encoder-decoder"),owr=o(" \u2014 "),zJ=a("a"),rwr=o("TFEncoderDecoderModel"),twr=o(" (Encoder decoder model)"),awr=l(),vE=a("li"),zFe=a("strong"),nwr=o("led"),swr=o(" \u2014 "),QJ=a("a"),lwr=o("TFLEDForConditionalGeneration"),iwr=o(" (LED model)"),dwr=l(),FE=a("li"),QFe=a("strong"),cwr=o("marian"),fwr=o(" \u2014 "),WJ=a("a"),mwr=o("TFMarianMTModel"),gwr=o(" (Marian model)"),hwr=l(),TE=a("li"),WFe=a("strong"),pwr=o("mbart"),_wr=o(" \u2014 "),HJ=a("a"),uwr=o("TFMBartForConditionalGeneration"),bwr=o(" (mBART model)"),vwr=l(),ME=a("li"),HFe=a("strong"),Fwr=o("mt5"),Twr=o(" \u2014 "),UJ=a("a"),Mwr=o("TFMT5ForConditionalGeneration"),Ewr=o(" (MT5 model)"),Cwr=l(),EE=a("li"),UFe=a("strong"),wwr=o("pegasus"),Awr=o(" \u2014 "),JJ=a("a"),Lwr=o("TFPegasusForConditionalGeneration"),ywr=o(" (Pegasus model)"),xwr=l(),CE=a("li"),JFe=a("strong"),$wr=o("t5"),kwr=o(" \u2014 "),YJ=a("a"),Swr=o("TFT5ForConditionalGeneration"),Rwr=o(" (T5 model)"),Pwr=l(),F(wE.$$.fragment),OVe=l(),Fc=a("h2"),AE=a("a"),YFe=a("span"),F(ex.$$.fragment),Bwr=l(),KFe=a("span"),Iwr=o("TFAutoModelForSequenceClassification"),VVe=l(),sr=a("div"),F(ox.$$.fragment),Nwr=l(),Tc=a("p"),qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KJ=a("a"),jwr=o("from_pretrained()"),Dwr=o(" class method or the "),ZJ=a("a"),Gwr=o("from_config()"),Owr=o(` class
method.`),Vwr=l(),rx=a("p"),Xwr=o("This class cannot be instantiated directly using "),ZFe=a("code"),zwr=o("__init__()"),Qwr=o(" (throws an error)."),Wwr=l(),It=a("div"),F(tx.$$.fragment),Hwr=l(),eTe=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jwr=l(),Mc=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),eAr=o("from_pretrained()"),oAr=o(" to load the model weights."),rAr=l(),F(LE.$$.fragment),tAr=l(),Pr=a("div"),F(ax.$$.fragment),aAr=l(),rTe=a("p"),nAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sAr=l(),mn=a("p"),lAr=o("The model class to instantiate is selected based on the "),tTe=a("code"),iAr=o("model_type"),dAr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),cAr=o("pretrained_model_name_or_path"),fAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(":"),hAr=l(),te=a("ul"),yE=a("li"),sTe=a("strong"),pAr=o("albert"),_Ar=o(" \u2014 "),oY=a("a"),uAr=o("TFAlbertForSequenceClassification"),bAr=o(" (ALBERT model)"),vAr=l(),xE=a("li"),lTe=a("strong"),FAr=o("bert"),TAr=o(" \u2014 "),rY=a("a"),MAr=o("TFBertForSequenceClassification"),EAr=o(" (BERT model)"),CAr=l(),$E=a("li"),iTe=a("strong"),wAr=o("camembert"),AAr=o(" \u2014 "),tY=a("a"),LAr=o("TFCamembertForSequenceClassification"),yAr=o(" (CamemBERT model)"),xAr=l(),kE=a("li"),dTe=a("strong"),$Ar=o("convbert"),kAr=o(" \u2014 "),aY=a("a"),SAr=o("TFConvBertForSequenceClassification"),RAr=o(" (ConvBERT model)"),PAr=l(),SE=a("li"),cTe=a("strong"),BAr=o("ctrl"),IAr=o(" \u2014 "),nY=a("a"),NAr=o("TFCTRLForSequenceClassification"),qAr=o(" (CTRL model)"),jAr=l(),RE=a("li"),fTe=a("strong"),DAr=o("deberta"),GAr=o(" \u2014 "),sY=a("a"),OAr=o("TFDebertaForSequenceClassification"),VAr=o(" (DeBERTa model)"),XAr=l(),PE=a("li"),mTe=a("strong"),zAr=o("deberta-v2"),QAr=o(" \u2014 "),lY=a("a"),WAr=o("TFDebertaV2ForSequenceClassification"),HAr=o(" (DeBERTa-v2 model)"),UAr=l(),BE=a("li"),gTe=a("strong"),JAr=o("distilbert"),YAr=o(" \u2014 "),iY=a("a"),KAr=o("TFDistilBertForSequenceClassification"),ZAr=o(" (DistilBERT model)"),e6r=l(),IE=a("li"),hTe=a("strong"),o6r=o("electra"),r6r=o(" \u2014 "),dY=a("a"),t6r=o("TFElectraForSequenceClassification"),a6r=o(" (ELECTRA model)"),n6r=l(),NE=a("li"),pTe=a("strong"),s6r=o("flaubert"),l6r=o(" \u2014 "),cY=a("a"),i6r=o("TFFlaubertForSequenceClassification"),d6r=o(" (FlauBERT model)"),c6r=l(),qE=a("li"),_Te=a("strong"),f6r=o("funnel"),m6r=o(" \u2014 "),fY=a("a"),g6r=o("TFFunnelForSequenceClassification"),h6r=o(" (Funnel Transformer model)"),p6r=l(),jE=a("li"),uTe=a("strong"),_6r=o("gpt2"),u6r=o(" \u2014 "),mY=a("a"),b6r=o("TFGPT2ForSequenceClassification"),v6r=o(" (OpenAI GPT-2 model)"),F6r=l(),DE=a("li"),bTe=a("strong"),T6r=o("gptj"),M6r=o(" \u2014 "),gY=a("a"),E6r=o("TFGPTJForSequenceClassification"),C6r=o(" (GPT-J model)"),w6r=l(),GE=a("li"),vTe=a("strong"),A6r=o("layoutlm"),L6r=o(" \u2014 "),hY=a("a"),y6r=o("TFLayoutLMForSequenceClassification"),x6r=o(" (LayoutLM model)"),$6r=l(),OE=a("li"),FTe=a("strong"),k6r=o("longformer"),S6r=o(" \u2014 "),pY=a("a"),R6r=o("TFLongformerForSequenceClassification"),P6r=o(" (Longformer model)"),B6r=l(),VE=a("li"),TTe=a("strong"),I6r=o("mobilebert"),N6r=o(" \u2014 "),_Y=a("a"),q6r=o("TFMobileBertForSequenceClassification"),j6r=o(" (MobileBERT model)"),D6r=l(),XE=a("li"),MTe=a("strong"),G6r=o("mpnet"),O6r=o(" \u2014 "),uY=a("a"),V6r=o("TFMPNetForSequenceClassification"),X6r=o(" (MPNet model)"),z6r=l(),zE=a("li"),ETe=a("strong"),Q6r=o("openai-gpt"),W6r=o(" \u2014 "),bY=a("a"),H6r=o("TFOpenAIGPTForSequenceClassification"),U6r=o(" (OpenAI GPT model)"),J6r=l(),QE=a("li"),CTe=a("strong"),Y6r=o("rembert"),K6r=o(" \u2014 "),vY=a("a"),Z6r=o("TFRemBertForSequenceClassification"),eLr=o(" (RemBERT model)"),oLr=l(),WE=a("li"),wTe=a("strong"),rLr=o("roberta"),tLr=o(" \u2014 "),FY=a("a"),aLr=o("TFRobertaForSequenceClassification"),nLr=o(" (RoBERTa model)"),sLr=l(),HE=a("li"),ATe=a("strong"),lLr=o("roformer"),iLr=o(" \u2014 "),TY=a("a"),dLr=o("TFRoFormerForSequenceClassification"),cLr=o(" (RoFormer model)"),fLr=l(),UE=a("li"),LTe=a("strong"),mLr=o("tapas"),gLr=o(" \u2014 "),MY=a("a"),hLr=o("TFTapasForSequenceClassification"),pLr=o(" (TAPAS model)"),_Lr=l(),JE=a("li"),yTe=a("strong"),uLr=o("transfo-xl"),bLr=o(" \u2014 "),EY=a("a"),vLr=o("TFTransfoXLForSequenceClassification"),FLr=o(" (Transformer-XL model)"),TLr=l(),YE=a("li"),xTe=a("strong"),MLr=o("xlm"),ELr=o(" \u2014 "),CY=a("a"),CLr=o("TFXLMForSequenceClassification"),wLr=o(" (XLM model)"),ALr=l(),KE=a("li"),$Te=a("strong"),LLr=o("xlm-roberta"),yLr=o(" \u2014 "),wY=a("a"),xLr=o("TFXLMRobertaForSequenceClassification"),$Lr=o(" (XLM-RoBERTa model)"),kLr=l(),ZE=a("li"),kTe=a("strong"),SLr=o("xlnet"),RLr=o(" \u2014 "),AY=a("a"),PLr=o("TFXLNetForSequenceClassification"),BLr=o(" (XLNet model)"),ILr=l(),F(eC.$$.fragment),XVe=l(),Ec=a("h2"),oC=a("a"),STe=a("span"),F(nx.$$.fragment),NLr=l(),RTe=a("span"),qLr=o("TFAutoModelForMultipleChoice"),zVe=l(),lr=a("div"),F(sx.$$.fragment),jLr=l(),Cc=a("p"),DLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LY=a("a"),GLr=o("from_pretrained()"),OLr=o(" class method or the "),yY=a("a"),VLr=o("from_config()"),XLr=o(` class
method.`),zLr=l(),lx=a("p"),QLr=o("This class cannot be instantiated directly using "),PTe=a("code"),WLr=o("__init__()"),HLr=o(" (throws an error)."),ULr=l(),Nt=a("div"),F(ix.$$.fragment),JLr=l(),BTe=a("p"),YLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KLr=l(),wc=a("p"),ZLr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),ryr=o("from_pretrained()"),tyr=o(" to load the model weights."),ayr=l(),F(rC.$$.fragment),nyr=l(),Br=a("div"),F(dx.$$.fragment),syr=l(),NTe=a("p"),lyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iyr=l(),gn=a("p"),dyr=o("The model class to instantiate is selected based on the "),qTe=a("code"),cyr=o("model_type"),fyr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),myr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(":"),_yr=l(),_e=a("ul"),tC=a("li"),GTe=a("strong"),uyr=o("albert"),byr=o(" \u2014 "),$Y=a("a"),vyr=o("TFAlbertForMultipleChoice"),Fyr=o(" (ALBERT model)"),Tyr=l(),aC=a("li"),OTe=a("strong"),Myr=o("bert"),Eyr=o(" \u2014 "),kY=a("a"),Cyr=o("TFBertForMultipleChoice"),wyr=o(" (BERT model)"),Ayr=l(),nC=a("li"),VTe=a("strong"),Lyr=o("camembert"),yyr=o(" \u2014 "),SY=a("a"),xyr=o("TFCamembertForMultipleChoice"),$yr=o(" (CamemBERT model)"),kyr=l(),sC=a("li"),XTe=a("strong"),Syr=o("convbert"),Ryr=o(" \u2014 "),RY=a("a"),Pyr=o("TFConvBertForMultipleChoice"),Byr=o(" (ConvBERT model)"),Iyr=l(),lC=a("li"),zTe=a("strong"),Nyr=o("distilbert"),qyr=o(" \u2014 "),PY=a("a"),jyr=o("TFDistilBertForMultipleChoice"),Dyr=o(" (DistilBERT model)"),Gyr=l(),iC=a("li"),QTe=a("strong"),Oyr=o("electra"),Vyr=o(" \u2014 "),BY=a("a"),Xyr=o("TFElectraForMultipleChoice"),zyr=o(" (ELECTRA model)"),Qyr=l(),dC=a("li"),WTe=a("strong"),Wyr=o("flaubert"),Hyr=o(" \u2014 "),IY=a("a"),Uyr=o("TFFlaubertForMultipleChoice"),Jyr=o(" (FlauBERT model)"),Yyr=l(),cC=a("li"),HTe=a("strong"),Kyr=o("funnel"),Zyr=o(" \u2014 "),NY=a("a"),e8r=o("TFFunnelForMultipleChoice"),o8r=o(" (Funnel Transformer model)"),r8r=l(),fC=a("li"),UTe=a("strong"),t8r=o("longformer"),a8r=o(" \u2014 "),qY=a("a"),n8r=o("TFLongformerForMultipleChoice"),s8r=o(" (Longformer model)"),l8r=l(),mC=a("li"),JTe=a("strong"),i8r=o("mobilebert"),d8r=o(" \u2014 "),jY=a("a"),c8r=o("TFMobileBertForMultipleChoice"),f8r=o(" (MobileBERT model)"),m8r=l(),gC=a("li"),YTe=a("strong"),g8r=o("mpnet"),h8r=o(" \u2014 "),DY=a("a"),p8r=o("TFMPNetForMultipleChoice"),_8r=o(" (MPNet model)"),u8r=l(),hC=a("li"),KTe=a("strong"),b8r=o("rembert"),v8r=o(" \u2014 "),GY=a("a"),F8r=o("TFRemBertForMultipleChoice"),T8r=o(" (RemBERT model)"),M8r=l(),pC=a("li"),ZTe=a("strong"),E8r=o("roberta"),C8r=o(" \u2014 "),OY=a("a"),w8r=o("TFRobertaForMultipleChoice"),A8r=o(" (RoBERTa model)"),L8r=l(),_C=a("li"),eMe=a("strong"),y8r=o("roformer"),x8r=o(" \u2014 "),VY=a("a"),$8r=o("TFRoFormerForMultipleChoice"),k8r=o(" (RoFormer model)"),S8r=l(),uC=a("li"),oMe=a("strong"),R8r=o("xlm"),P8r=o(" \u2014 "),XY=a("a"),B8r=o("TFXLMForMultipleChoice"),I8r=o(" (XLM model)"),N8r=l(),bC=a("li"),rMe=a("strong"),q8r=o("xlm-roberta"),j8r=o(" \u2014 "),zY=a("a"),D8r=o("TFXLMRobertaForMultipleChoice"),G8r=o(" (XLM-RoBERTa model)"),O8r=l(),vC=a("li"),tMe=a("strong"),V8r=o("xlnet"),X8r=o(" \u2014 "),QY=a("a"),z8r=o("TFXLNetForMultipleChoice"),Q8r=o(" (XLNet model)"),W8r=l(),F(FC.$$.fragment),QVe=l(),Ac=a("h2"),TC=a("a"),aMe=a("span"),F(cx.$$.fragment),H8r=l(),nMe=a("span"),U8r=o("TFAutoModelForNextSentencePrediction"),WVe=l(),ir=a("div"),F(fx.$$.fragment),J8r=l(),Lc=a("p"),Y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=a("a"),K8r=o("from_pretrained()"),Z8r=o(" class method or the "),HY=a("a"),e9r=o("from_config()"),o9r=o(` class
method.`),r9r=l(),mx=a("p"),t9r=o("This class cannot be instantiated directly using "),sMe=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),qt=a("div"),F(gx.$$.fragment),l9r=l(),lMe=a("p"),i9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),d9r=l(),yc=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),f9r=o("not"),m9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),g9r=o("from_pretrained()"),h9r=o(" to load the model weights."),p9r=l(),F(MC.$$.fragment),_9r=l(),Ir=a("div"),F(hx.$$.fragment),u9r=l(),dMe=a("p"),b9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v9r=l(),hn=a("p"),F9r=o("The model class to instantiate is selected based on the "),cMe=a("code"),T9r=o("model_type"),M9r=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),E9r=o("pretrained_model_name_or_path"),C9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(":"),L9r=l(),px=a("ul"),EC=a("li"),gMe=a("strong"),y9r=o("bert"),x9r=o(" \u2014 "),JY=a("a"),$9r=o("TFBertForNextSentencePrediction"),k9r=o(" (BERT model)"),S9r=l(),CC=a("li"),hMe=a("strong"),R9r=o("mobilebert"),P9r=o(" \u2014 "),YY=a("a"),B9r=o("TFMobileBertForNextSentencePrediction"),I9r=o(" (MobileBERT model)"),N9r=l(),F(wC.$$.fragment),HVe=l(),xc=a("h2"),AC=a("a"),pMe=a("span"),F(_x.$$.fragment),q9r=l(),_Me=a("span"),j9r=o("TFAutoModelForTableQuestionAnswering"),UVe=l(),dr=a("div"),F(ux.$$.fragment),D9r=l(),$c=a("p"),G9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KY=a("a"),O9r=o("from_pretrained()"),V9r=o(" class method or the "),ZY=a("a"),X9r=o("from_config()"),z9r=o(` class
method.`),Q9r=l(),bx=a("p"),W9r=o("This class cannot be instantiated directly using "),uMe=a("code"),H9r=o("__init__()"),U9r=o(" (throws an error)."),J9r=l(),jt=a("div"),F(vx.$$.fragment),Y9r=l(),bMe=a("p"),K9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z9r=l(),kc=a("p"),exr=o(`Note:
Loading a model from its configuration file does `),vMe=a("strong"),oxr=o("not"),rxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),txr=o("from_pretrained()"),axr=o(" to load the model weights."),nxr=l(),F(LC.$$.fragment),sxr=l(),Nr=a("div"),F(Fx.$$.fragment),lxr=l(),FMe=a("p"),ixr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dxr=l(),pn=a("p"),cxr=o("The model class to instantiate is selected based on the "),TMe=a("code"),fxr=o("model_type"),mxr=o(` property of the config object (either
passed as an argument or loaded from `),MMe=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=a("code"),pxr=o("pretrained_model_name_or_path"),_xr=o(":"),uxr=l(),CMe=a("ul"),yC=a("li"),wMe=a("strong"),bxr=o("tapas"),vxr=o(" \u2014 "),oK=a("a"),Fxr=o("TFTapasForQuestionAnswering"),Txr=o(" (TAPAS model)"),Mxr=l(),F(xC.$$.fragment),JVe=l(),Sc=a("h2"),$C=a("a"),AMe=a("span"),F(Tx.$$.fragment),Exr=l(),LMe=a("span"),Cxr=o("TFAutoModelForTokenClassification"),YVe=l(),cr=a("div"),F(Mx.$$.fragment),wxr=l(),Rc=a("p"),Axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rK=a("a"),Lxr=o("from_pretrained()"),yxr=o(" class method or the "),tK=a("a"),xxr=o("from_config()"),$xr=o(` class
method.`),kxr=l(),Ex=a("p"),Sxr=o("This class cannot be instantiated directly using "),yMe=a("code"),Rxr=o("__init__()"),Pxr=o(" (throws an error)."),Bxr=l(),Dt=a("div"),F(Cx.$$.fragment),Ixr=l(),xMe=a("p"),Nxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qxr=l(),Pc=a("p"),jxr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),Dxr=o("not"),Gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" to load the model weights."),Xxr=l(),F(kC.$$.fragment),zxr=l(),qr=a("div"),F(wx.$$.fragment),Qxr=l(),kMe=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hxr=l(),_n=a("p"),Uxr=o("The model class to instantiate is selected based on the "),SMe=a("code"),Jxr=o("model_type"),Yxr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),e$r=o("pretrained_model_name_or_path"),o$r=o(":"),r$r=l(),de=a("ul"),SC=a("li"),BMe=a("strong"),t$r=o("albert"),a$r=o(" \u2014 "),nK=a("a"),n$r=o("TFAlbertForTokenClassification"),s$r=o(" (ALBERT model)"),l$r=l(),RC=a("li"),IMe=a("strong"),i$r=o("bert"),d$r=o(" \u2014 "),sK=a("a"),c$r=o("TFBertForTokenClassification"),f$r=o(" (BERT model)"),m$r=l(),PC=a("li"),NMe=a("strong"),g$r=o("camembert"),h$r=o(" \u2014 "),lK=a("a"),p$r=o("TFCamembertForTokenClassification"),_$r=o(" (CamemBERT model)"),u$r=l(),BC=a("li"),qMe=a("strong"),b$r=o("convbert"),v$r=o(" \u2014 "),iK=a("a"),F$r=o("TFConvBertForTokenClassification"),T$r=o(" (ConvBERT model)"),M$r=l(),IC=a("li"),jMe=a("strong"),E$r=o("deberta"),C$r=o(" \u2014 "),dK=a("a"),w$r=o("TFDebertaForTokenClassification"),A$r=o(" (DeBERTa model)"),L$r=l(),NC=a("li"),DMe=a("strong"),y$r=o("deberta-v2"),x$r=o(" \u2014 "),cK=a("a"),$$r=o("TFDebertaV2ForTokenClassification"),k$r=o(" (DeBERTa-v2 model)"),S$r=l(),qC=a("li"),GMe=a("strong"),R$r=o("distilbert"),P$r=o(" \u2014 "),fK=a("a"),B$r=o("TFDistilBertForTokenClassification"),I$r=o(" (DistilBERT model)"),N$r=l(),jC=a("li"),OMe=a("strong"),q$r=o("electra"),j$r=o(" \u2014 "),mK=a("a"),D$r=o("TFElectraForTokenClassification"),G$r=o(" (ELECTRA model)"),O$r=l(),DC=a("li"),VMe=a("strong"),V$r=o("flaubert"),X$r=o(" \u2014 "),gK=a("a"),z$r=o("TFFlaubertForTokenClassification"),Q$r=o(" (FlauBERT model)"),W$r=l(),GC=a("li"),XMe=a("strong"),H$r=o("funnel"),U$r=o(" \u2014 "),hK=a("a"),J$r=o("TFFunnelForTokenClassification"),Y$r=o(" (Funnel Transformer model)"),K$r=l(),OC=a("li"),zMe=a("strong"),Z$r=o("layoutlm"),ekr=o(" \u2014 "),pK=a("a"),okr=o("TFLayoutLMForTokenClassification"),rkr=o(" (LayoutLM model)"),tkr=l(),VC=a("li"),QMe=a("strong"),akr=o("longformer"),nkr=o(" \u2014 "),_K=a("a"),skr=o("TFLongformerForTokenClassification"),lkr=o(" (Longformer model)"),ikr=l(),XC=a("li"),WMe=a("strong"),dkr=o("mobilebert"),ckr=o(" \u2014 "),uK=a("a"),fkr=o("TFMobileBertForTokenClassification"),mkr=o(" (MobileBERT model)"),gkr=l(),zC=a("li"),HMe=a("strong"),hkr=o("mpnet"),pkr=o(" \u2014 "),bK=a("a"),_kr=o("TFMPNetForTokenClassification"),ukr=o(" (MPNet model)"),bkr=l(),QC=a("li"),UMe=a("strong"),vkr=o("rembert"),Fkr=o(" \u2014 "),vK=a("a"),Tkr=o("TFRemBertForTokenClassification"),Mkr=o(" (RemBERT model)"),Ekr=l(),WC=a("li"),JMe=a("strong"),Ckr=o("roberta"),wkr=o(" \u2014 "),FK=a("a"),Akr=o("TFRobertaForTokenClassification"),Lkr=o(" (RoBERTa model)"),ykr=l(),HC=a("li"),YMe=a("strong"),xkr=o("roformer"),$kr=o(" \u2014 "),TK=a("a"),kkr=o("TFRoFormerForTokenClassification"),Skr=o(" (RoFormer model)"),Rkr=l(),UC=a("li"),KMe=a("strong"),Pkr=o("xlm"),Bkr=o(" \u2014 "),MK=a("a"),Ikr=o("TFXLMForTokenClassification"),Nkr=o(" (XLM model)"),qkr=l(),JC=a("li"),ZMe=a("strong"),jkr=o("xlm-roberta"),Dkr=o(" \u2014 "),EK=a("a"),Gkr=o("TFXLMRobertaForTokenClassification"),Okr=o(" (XLM-RoBERTa model)"),Vkr=l(),YC=a("li"),eEe=a("strong"),Xkr=o("xlnet"),zkr=o(" \u2014 "),CK=a("a"),Qkr=o("TFXLNetForTokenClassification"),Wkr=o(" (XLNet model)"),Hkr=l(),F(KC.$$.fragment),KVe=l(),Bc=a("h2"),ZC=a("a"),oEe=a("span"),F(Ax.$$.fragment),Ukr=l(),rEe=a("span"),Jkr=o("TFAutoModelForQuestionAnswering"),ZVe=l(),fr=a("div"),F(Lx.$$.fragment),Ykr=l(),Ic=a("p"),Kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wK=a("a"),Zkr=o("from_pretrained()"),eSr=o(" class method or the "),AK=a("a"),oSr=o("from_config()"),rSr=o(` class
method.`),tSr=l(),yx=a("p"),aSr=o("This class cannot be instantiated directly using "),tEe=a("code"),nSr=o("__init__()"),sSr=o(" (throws an error)."),lSr=l(),Gt=a("div"),F(xx.$$.fragment),iSr=l(),aEe=a("p"),dSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cSr=l(),Nc=a("p"),fSr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),mSr=o("not"),gSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),hSr=o("from_pretrained()"),pSr=o(" to load the model weights."),_Sr=l(),F(e5.$$.fragment),uSr=l(),jr=a("div"),F($x.$$.fragment),bSr=l(),sEe=a("p"),vSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FSr=l(),un=a("p"),TSr=o("The model class to instantiate is selected based on the "),lEe=a("code"),MSr=o("model_type"),ESr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),CSr=o("pretrained_model_name_or_path"),wSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),ASr=o("pretrained_model_name_or_path"),LSr=o(":"),ySr=l(),ce=a("ul"),o5=a("li"),cEe=a("strong"),xSr=o("albert"),$Sr=o(" \u2014 "),yK=a("a"),kSr=o("TFAlbertForQuestionAnswering"),SSr=o(" (ALBERT model)"),RSr=l(),r5=a("li"),fEe=a("strong"),PSr=o("bert"),BSr=o(" \u2014 "),xK=a("a"),ISr=o("TFBertForQuestionAnswering"),NSr=o(" (BERT model)"),qSr=l(),t5=a("li"),mEe=a("strong"),jSr=o("camembert"),DSr=o(" \u2014 "),$K=a("a"),GSr=o("TFCamembertForQuestionAnswering"),OSr=o(" (CamemBERT model)"),VSr=l(),a5=a("li"),gEe=a("strong"),XSr=o("convbert"),zSr=o(" \u2014 "),kK=a("a"),QSr=o("TFConvBertForQuestionAnswering"),WSr=o(" (ConvBERT model)"),HSr=l(),n5=a("li"),hEe=a("strong"),USr=o("deberta"),JSr=o(" \u2014 "),SK=a("a"),YSr=o("TFDebertaForQuestionAnswering"),KSr=o(" (DeBERTa model)"),ZSr=l(),s5=a("li"),pEe=a("strong"),eRr=o("deberta-v2"),oRr=o(" \u2014 "),RK=a("a"),rRr=o("TFDebertaV2ForQuestionAnswering"),tRr=o(" (DeBERTa-v2 model)"),aRr=l(),l5=a("li"),_Ee=a("strong"),nRr=o("distilbert"),sRr=o(" \u2014 "),PK=a("a"),lRr=o("TFDistilBertForQuestionAnswering"),iRr=o(" (DistilBERT model)"),dRr=l(),i5=a("li"),uEe=a("strong"),cRr=o("electra"),fRr=o(" \u2014 "),BK=a("a"),mRr=o("TFElectraForQuestionAnswering"),gRr=o(" (ELECTRA model)"),hRr=l(),d5=a("li"),bEe=a("strong"),pRr=o("flaubert"),_Rr=o(" \u2014 "),IK=a("a"),uRr=o("TFFlaubertForQuestionAnsweringSimple"),bRr=o(" (FlauBERT model)"),vRr=l(),c5=a("li"),vEe=a("strong"),FRr=o("funnel"),TRr=o(" \u2014 "),NK=a("a"),MRr=o("TFFunnelForQuestionAnswering"),ERr=o(" (Funnel Transformer model)"),CRr=l(),f5=a("li"),FEe=a("strong"),wRr=o("gptj"),ARr=o(" \u2014 "),qK=a("a"),LRr=o("TFGPTJForQuestionAnswering"),yRr=o(" (GPT-J model)"),xRr=l(),m5=a("li"),TEe=a("strong"),$Rr=o("longformer"),kRr=o(" \u2014 "),jK=a("a"),SRr=o("TFLongformerForQuestionAnswering"),RRr=o(" (Longformer model)"),PRr=l(),g5=a("li"),MEe=a("strong"),BRr=o("mobilebert"),IRr=o(" \u2014 "),DK=a("a"),NRr=o("TFMobileBertForQuestionAnswering"),qRr=o(" (MobileBERT model)"),jRr=l(),h5=a("li"),EEe=a("strong"),DRr=o("mpnet"),GRr=o(" \u2014 "),GK=a("a"),ORr=o("TFMPNetForQuestionAnswering"),VRr=o(" (MPNet model)"),XRr=l(),p5=a("li"),CEe=a("strong"),zRr=o("rembert"),QRr=o(" \u2014 "),OK=a("a"),WRr=o("TFRemBertForQuestionAnswering"),HRr=o(" (RemBERT model)"),URr=l(),_5=a("li"),wEe=a("strong"),JRr=o("roberta"),YRr=o(" \u2014 "),VK=a("a"),KRr=o("TFRobertaForQuestionAnswering"),ZRr=o(" (RoBERTa model)"),ePr=l(),u5=a("li"),AEe=a("strong"),oPr=o("roformer"),rPr=o(" \u2014 "),XK=a("a"),tPr=o("TFRoFormerForQuestionAnswering"),aPr=o(" (RoFormer model)"),nPr=l(),b5=a("li"),LEe=a("strong"),sPr=o("xlm"),lPr=o(" \u2014 "),zK=a("a"),iPr=o("TFXLMForQuestionAnsweringSimple"),dPr=o(" (XLM model)"),cPr=l(),v5=a("li"),yEe=a("strong"),fPr=o("xlm-roberta"),mPr=o(" \u2014 "),QK=a("a"),gPr=o("TFXLMRobertaForQuestionAnswering"),hPr=o(" (XLM-RoBERTa model)"),pPr=l(),F5=a("li"),xEe=a("strong"),_Pr=o("xlnet"),uPr=o(" \u2014 "),WK=a("a"),bPr=o("TFXLNetForQuestionAnsweringSimple"),vPr=o(" (XLNet model)"),FPr=l(),F(T5.$$.fragment),eXe=l(),qc=a("h2"),M5=a("a"),$Ee=a("span"),F(kx.$$.fragment),TPr=l(),kEe=a("span"),MPr=o("TFAutoModelForVision2Seq"),oXe=l(),mr=a("div"),F(Sx.$$.fragment),EPr=l(),jc=a("p"),CPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HK=a("a"),wPr=o("from_pretrained()"),APr=o(" class method or the "),UK=a("a"),LPr=o("from_config()"),yPr=o(` class
method.`),xPr=l(),Rx=a("p"),$Pr=o("This class cannot be instantiated directly using "),SEe=a("code"),kPr=o("__init__()"),SPr=o(" (throws an error)."),RPr=l(),Ot=a("div"),F(Px.$$.fragment),PPr=l(),REe=a("p"),BPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IPr=l(),Dc=a("p"),NPr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),qPr=o("not"),jPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),DPr=o("from_pretrained()"),GPr=o(" to load the model weights."),OPr=l(),F(E5.$$.fragment),VPr=l(),Dr=a("div"),F(Bx.$$.fragment),XPr=l(),BEe=a("p"),zPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QPr=l(),bn=a("p"),WPr=o("The model class to instantiate is selected based on the "),IEe=a("code"),HPr=o("model_type"),UPr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),JPr=o("pretrained_model_name_or_path"),YPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),KPr=o("pretrained_model_name_or_path"),ZPr=o(":"),eBr=l(),jEe=a("ul"),C5=a("li"),DEe=a("strong"),oBr=o("vision-encoder-decoder"),rBr=o(" \u2014 "),YK=a("a"),tBr=o("TFVisionEncoderDecoderModel"),aBr=o(" (Vision Encoder decoder model)"),nBr=l(),F(w5.$$.fragment),rXe=l(),Gc=a("h2"),A5=a("a"),GEe=a("span"),F(Ix.$$.fragment),sBr=l(),OEe=a("span"),lBr=o("TFAutoModelForSpeechSeq2Seq"),tXe=l(),gr=a("div"),F(Nx.$$.fragment),iBr=l(),Oc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KK=a("a"),cBr=o("from_pretrained()"),fBr=o(" class method or the "),ZK=a("a"),mBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),qx=a("p"),pBr=o("This class cannot be instantiated directly using "),VEe=a("code"),_Br=o("__init__()"),uBr=o(" (throws an error)."),bBr=l(),Vt=a("div"),F(jx.$$.fragment),vBr=l(),XEe=a("p"),FBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TBr=l(),Vc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),LBr=l(),F(L5.$$.fragment),yBr=l(),Gr=a("div"),F(Dx.$$.fragment),xBr=l(),QEe=a("p"),$Br=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kBr=l(),vn=a("p"),SBr=o("The model class to instantiate is selected based on the "),WEe=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(":"),jBr=l(),JEe=a("ul"),y5=a("li"),YEe=a("strong"),DBr=o("speech_to_text"),GBr=o(" \u2014 "),oZ=a("a"),OBr=o("TFSpeech2TextForConditionalGeneration"),VBr=o(" (Speech2Text model)"),XBr=l(),F(x5.$$.fragment),aXe=l(),Xc=a("h2"),$5=a("a"),KEe=a("span"),F(Gx.$$.fragment),zBr=l(),ZEe=a("span"),QBr=o("FlaxAutoModel"),nXe=l(),hr=a("div"),F(Ox.$$.fragment),WBr=l(),zc=a("p"),HBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rZ=a("a"),UBr=o("from_pretrained()"),JBr=o(" class method or the "),tZ=a("a"),YBr=o("from_config()"),KBr=o(` class
method.`),ZBr=l(),Vx=a("p"),eIr=o("This class cannot be instantiated directly using "),eCe=a("code"),oIr=o("__init__()"),rIr=o(" (throws an error)."),tIr=l(),Xt=a("div"),F(Xx.$$.fragment),aIr=l(),oCe=a("p"),nIr=o("Instantiates one of the base model classes of the library from a configuration."),sIr=l(),Qc=a("p"),lIr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),iIr=o("not"),dIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),cIr=o("from_pretrained()"),fIr=o(" to load the model weights."),mIr=l(),F(k5.$$.fragment),gIr=l(),Or=a("div"),F(zx.$$.fragment),hIr=l(),tCe=a("p"),pIr=o("Instantiate one of the base model classes of the library from a pretrained model."),_Ir=l(),Fn=a("p"),uIr=o("The model class to instantiate is selected based on the "),aCe=a("code"),bIr=o("model_type"),vIr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),MIr=o("pretrained_model_name_or_path"),EIr=o(":"),CIr=l(),oe=a("ul"),S5=a("li"),lCe=a("strong"),wIr=o("albert"),AIr=o(" \u2014 "),nZ=a("a"),LIr=o("FlaxAlbertModel"),yIr=o(" (ALBERT model)"),xIr=l(),R5=a("li"),iCe=a("strong"),$Ir=o("bart"),kIr=o(" \u2014 "),sZ=a("a"),SIr=o("FlaxBartModel"),RIr=o(" (BART model)"),PIr=l(),P5=a("li"),dCe=a("strong"),BIr=o("beit"),IIr=o(" \u2014 "),lZ=a("a"),NIr=o("FlaxBeitModel"),qIr=o(" (BEiT model)"),jIr=l(),B5=a("li"),cCe=a("strong"),DIr=o("bert"),GIr=o(" \u2014 "),iZ=a("a"),OIr=o("FlaxBertModel"),VIr=o(" (BERT model)"),XIr=l(),I5=a("li"),fCe=a("strong"),zIr=o("big_bird"),QIr=o(" \u2014 "),dZ=a("a"),WIr=o("FlaxBigBirdModel"),HIr=o(" (BigBird model)"),UIr=l(),N5=a("li"),mCe=a("strong"),JIr=o("blenderbot"),YIr=o(" \u2014 "),cZ=a("a"),KIr=o("FlaxBlenderbotModel"),ZIr=o(" (Blenderbot model)"),eNr=l(),q5=a("li"),gCe=a("strong"),oNr=o("blenderbot-small"),rNr=o(" \u2014 "),fZ=a("a"),tNr=o("FlaxBlenderbotSmallModel"),aNr=o(" (BlenderbotSmall model)"),nNr=l(),j5=a("li"),hCe=a("strong"),sNr=o("clip"),lNr=o(" \u2014 "),mZ=a("a"),iNr=o("FlaxCLIPModel"),dNr=o(" (CLIP model)"),cNr=l(),D5=a("li"),pCe=a("strong"),fNr=o("distilbert"),mNr=o(" \u2014 "),gZ=a("a"),gNr=o("FlaxDistilBertModel"),hNr=o(" (DistilBERT model)"),pNr=l(),G5=a("li"),_Ce=a("strong"),_Nr=o("electra"),uNr=o(" \u2014 "),hZ=a("a"),bNr=o("FlaxElectraModel"),vNr=o(" (ELECTRA model)"),FNr=l(),O5=a("li"),uCe=a("strong"),TNr=o("gpt2"),MNr=o(" \u2014 "),pZ=a("a"),ENr=o("FlaxGPT2Model"),CNr=o(" (OpenAI GPT-2 model)"),wNr=l(),V5=a("li"),bCe=a("strong"),ANr=o("gpt_neo"),LNr=o(" \u2014 "),_Z=a("a"),yNr=o("FlaxGPTNeoModel"),xNr=o(" (GPT Neo model)"),$Nr=l(),X5=a("li"),vCe=a("strong"),kNr=o("gptj"),SNr=o(" \u2014 "),uZ=a("a"),RNr=o("FlaxGPTJModel"),PNr=o(" (GPT-J model)"),BNr=l(),z5=a("li"),FCe=a("strong"),INr=o("longt5"),NNr=o(" \u2014 "),bZ=a("a"),qNr=o("FlaxLongT5Model"),jNr=o(" (LongT5 model)"),DNr=l(),Q5=a("li"),TCe=a("strong"),GNr=o("marian"),ONr=o(" \u2014 "),vZ=a("a"),VNr=o("FlaxMarianModel"),XNr=o(" (Marian model)"),zNr=l(),W5=a("li"),MCe=a("strong"),QNr=o("mbart"),WNr=o(" \u2014 "),FZ=a("a"),HNr=o("FlaxMBartModel"),UNr=o(" (mBART model)"),JNr=l(),H5=a("li"),ECe=a("strong"),YNr=o("mt5"),KNr=o(" \u2014 "),TZ=a("a"),ZNr=o("FlaxMT5Model"),eqr=o(" (MT5 model)"),oqr=l(),U5=a("li"),CCe=a("strong"),rqr=o("opt"),tqr=o(" \u2014 "),MZ=a("a"),aqr=o("FlaxOPTModel"),nqr=o(" (OPT model)"),sqr=l(),J5=a("li"),wCe=a("strong"),lqr=o("pegasus"),iqr=o(" \u2014 "),EZ=a("a"),dqr=o("FlaxPegasusModel"),cqr=o(" (Pegasus model)"),fqr=l(),Y5=a("li"),ACe=a("strong"),mqr=o("roberta"),gqr=o(" \u2014 "),CZ=a("a"),hqr=o("FlaxRobertaModel"),pqr=o(" (RoBERTa model)"),_qr=l(),K5=a("li"),LCe=a("strong"),uqr=o("roformer"),bqr=o(" \u2014 "),wZ=a("a"),vqr=o("FlaxRoFormerModel"),Fqr=o(" (RoFormer model)"),Tqr=l(),Z5=a("li"),yCe=a("strong"),Mqr=o("t5"),Eqr=o(" \u2014 "),AZ=a("a"),Cqr=o("FlaxT5Model"),wqr=o(" (T5 model)"),Aqr=l(),e0=a("li"),xCe=a("strong"),Lqr=o("vision-text-dual-encoder"),yqr=o(" \u2014 "),LZ=a("a"),xqr=o("FlaxVisionTextDualEncoderModel"),$qr=o(" (VisionTextDualEncoder model)"),kqr=l(),o0=a("li"),$Ce=a("strong"),Sqr=o("vit"),Rqr=o(" \u2014 "),yZ=a("a"),Pqr=o("FlaxViTModel"),Bqr=o(" (ViT model)"),Iqr=l(),r0=a("li"),kCe=a("strong"),Nqr=o("wav2vec2"),qqr=o(" \u2014 "),xZ=a("a"),jqr=o("FlaxWav2Vec2Model"),Dqr=o(" (Wav2Vec2 model)"),Gqr=l(),t0=a("li"),SCe=a("strong"),Oqr=o("xglm"),Vqr=o(" \u2014 "),$Z=a("a"),Xqr=o("FlaxXGLMModel"),zqr=o(" (XGLM model)"),Qqr=l(),a0=a("li"),RCe=a("strong"),Wqr=o("xlm-roberta"),Hqr=o(" \u2014 "),kZ=a("a"),Uqr=o("FlaxXLMRobertaModel"),Jqr=o(" (XLM-RoBERTa model)"),Yqr=l(),F(n0.$$.fragment),sXe=l(),Wc=a("h2"),s0=a("a"),PCe=a("span"),F(Qx.$$.fragment),Kqr=l(),BCe=a("span"),Zqr=o("FlaxAutoModelForCausalLM"),lXe=l(),pr=a("div"),F(Wx.$$.fragment),ejr=l(),Hc=a("p"),ojr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=a("a"),rjr=o("from_pretrained()"),tjr=o(" class method or the "),RZ=a("a"),ajr=o("from_config()"),njr=o(` class
method.`),sjr=l(),Hx=a("p"),ljr=o("This class cannot be instantiated directly using "),ICe=a("code"),ijr=o("__init__()"),djr=o(" (throws an error)."),cjr=l(),zt=a("div"),F(Ux.$$.fragment),fjr=l(),NCe=a("p"),mjr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gjr=l(),Uc=a("p"),hjr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),pjr=o("not"),_jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),ujr=o("from_pretrained()"),bjr=o(" to load the model weights."),vjr=l(),F(l0.$$.fragment),Fjr=l(),Vr=a("div"),F(Jx.$$.fragment),Tjr=l(),jCe=a("p"),Mjr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ejr=l(),Tn=a("p"),Cjr=o("The model class to instantiate is selected based on the "),DCe=a("code"),wjr=o("model_type"),Ajr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),Ljr=o("pretrained_model_name_or_path"),yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),xjr=o("pretrained_model_name_or_path"),$jr=o(":"),kjr=l(),xe=a("ul"),i0=a("li"),VCe=a("strong"),Sjr=o("bart"),Rjr=o(" \u2014 "),BZ=a("a"),Pjr=o("FlaxBartForCausalLM"),Bjr=o(" (BART model)"),Ijr=l(),d0=a("li"),XCe=a("strong"),Njr=o("bert"),qjr=o(" \u2014 "),IZ=a("a"),jjr=o("FlaxBertForCausalLM"),Djr=o(" (BERT model)"),Gjr=l(),c0=a("li"),zCe=a("strong"),Ojr=o("big_bird"),Vjr=o(" \u2014 "),NZ=a("a"),Xjr=o("FlaxBigBirdForCausalLM"),zjr=o(" (BigBird model)"),Qjr=l(),f0=a("li"),QCe=a("strong"),Wjr=o("electra"),Hjr=o(" \u2014 "),qZ=a("a"),Ujr=o("FlaxElectraForCausalLM"),Jjr=o(" (ELECTRA model)"),Yjr=l(),m0=a("li"),WCe=a("strong"),Kjr=o("gpt2"),Zjr=o(" \u2014 "),jZ=a("a"),eDr=o("FlaxGPT2LMHeadModel"),oDr=o(" (OpenAI GPT-2 model)"),rDr=l(),g0=a("li"),HCe=a("strong"),tDr=o("gpt_neo"),aDr=o(" \u2014 "),DZ=a("a"),nDr=o("FlaxGPTNeoForCausalLM"),sDr=o(" (GPT Neo model)"),lDr=l(),h0=a("li"),UCe=a("strong"),iDr=o("gptj"),dDr=o(" \u2014 "),GZ=a("a"),cDr=o("FlaxGPTJForCausalLM"),fDr=o(" (GPT-J model)"),mDr=l(),p0=a("li"),JCe=a("strong"),gDr=o("opt"),hDr=o(" \u2014 "),OZ=a("a"),pDr=o("FlaxOPTForCausalLM"),_Dr=o(" (OPT model)"),uDr=l(),_0=a("li"),YCe=a("strong"),bDr=o("roberta"),vDr=o(" \u2014 "),VZ=a("a"),FDr=o("FlaxRobertaForCausalLM"),TDr=o(" (RoBERTa model)"),MDr=l(),u0=a("li"),KCe=a("strong"),EDr=o("xglm"),CDr=o(" \u2014 "),XZ=a("a"),wDr=o("FlaxXGLMForCausalLM"),ADr=o(" (XGLM model)"),LDr=l(),F(b0.$$.fragment),iXe=l(),Jc=a("h2"),v0=a("a"),ZCe=a("span"),F(Yx.$$.fragment),yDr=l(),e5e=a("span"),xDr=o("FlaxAutoModelForPreTraining"),dXe=l(),_r=a("div"),F(Kx.$$.fragment),$Dr=l(),Yc=a("p"),kDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zZ=a("a"),SDr=o("from_pretrained()"),RDr=o(" class method or the "),QZ=a("a"),PDr=o("from_config()"),BDr=o(` class
method.`),IDr=l(),Zx=a("p"),NDr=o("This class cannot be instantiated directly using "),o5e=a("code"),qDr=o("__init__()"),jDr=o(" (throws an error)."),DDr=l(),Qt=a("div"),F(e$.$$.fragment),GDr=l(),r5e=a("p"),ODr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VDr=l(),Kc=a("p"),XDr=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),zDr=o("not"),QDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),WDr=o("from_pretrained()"),HDr=o(" to load the model weights."),UDr=l(),F(F0.$$.fragment),JDr=l(),Xr=a("div"),F(o$.$$.fragment),YDr=l(),a5e=a("p"),KDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZDr=l(),Mn=a("p"),eGr=o("The model class to instantiate is selected based on the "),n5e=a("code"),oGr=o("model_type"),rGr=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),tGr=o("pretrained_model_name_or_path"),aGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),nGr=o("pretrained_model_name_or_path"),sGr=o(":"),lGr=l(),Ee=a("ul"),T0=a("li"),i5e=a("strong"),iGr=o("albert"),dGr=o(" \u2014 "),HZ=a("a"),cGr=o("FlaxAlbertForPreTraining"),fGr=o(" (ALBERT model)"),mGr=l(),M0=a("li"),d5e=a("strong"),gGr=o("bart"),hGr=o(" \u2014 "),UZ=a("a"),pGr=o("FlaxBartForConditionalGeneration"),_Gr=o(" (BART model)"),uGr=l(),E0=a("li"),c5e=a("strong"),bGr=o("bert"),vGr=o(" \u2014 "),JZ=a("a"),FGr=o("FlaxBertForPreTraining"),TGr=o(" (BERT model)"),MGr=l(),C0=a("li"),f5e=a("strong"),EGr=o("big_bird"),CGr=o(" \u2014 "),YZ=a("a"),wGr=o("FlaxBigBirdForPreTraining"),AGr=o(" (BigBird model)"),LGr=l(),w0=a("li"),m5e=a("strong"),yGr=o("electra"),xGr=o(" \u2014 "),KZ=a("a"),$Gr=o("FlaxElectraForPreTraining"),kGr=o(" (ELECTRA model)"),SGr=l(),A0=a("li"),g5e=a("strong"),RGr=o("longt5"),PGr=o(" \u2014 "),ZZ=a("a"),BGr=o("FlaxLongT5ForConditionalGeneration"),IGr=o(" (LongT5 model)"),NGr=l(),L0=a("li"),h5e=a("strong"),qGr=o("mbart"),jGr=o(" \u2014 "),eee=a("a"),DGr=o("FlaxMBartForConditionalGeneration"),GGr=o(" (mBART model)"),OGr=l(),y0=a("li"),p5e=a("strong"),VGr=o("mt5"),XGr=o(" \u2014 "),oee=a("a"),zGr=o("FlaxMT5ForConditionalGeneration"),QGr=o(" (MT5 model)"),WGr=l(),x0=a("li"),_5e=a("strong"),HGr=o("roberta"),UGr=o(" \u2014 "),ree=a("a"),JGr=o("FlaxRobertaForMaskedLM"),YGr=o(" (RoBERTa model)"),KGr=l(),$0=a("li"),u5e=a("strong"),ZGr=o("roformer"),eOr=o(" \u2014 "),tee=a("a"),oOr=o("FlaxRoFormerForMaskedLM"),rOr=o(" (RoFormer model)"),tOr=l(),k0=a("li"),b5e=a("strong"),aOr=o("t5"),nOr=o(" \u2014 "),aee=a("a"),sOr=o("FlaxT5ForConditionalGeneration"),lOr=o(" (T5 model)"),iOr=l(),S0=a("li"),v5e=a("strong"),dOr=o("wav2vec2"),cOr=o(" \u2014 "),nee=a("a"),fOr=o("FlaxWav2Vec2ForPreTraining"),mOr=o(" (Wav2Vec2 model)"),gOr=l(),R0=a("li"),F5e=a("strong"),hOr=o("xlm-roberta"),pOr=o(" \u2014 "),see=a("a"),_Or=o("FlaxXLMRobertaForMaskedLM"),uOr=o(" (XLM-RoBERTa model)"),bOr=l(),F(P0.$$.fragment),cXe=l(),Zc=a("h2"),B0=a("a"),T5e=a("span"),F(r$.$$.fragment),vOr=l(),M5e=a("span"),FOr=o("FlaxAutoModelForMaskedLM"),fXe=l(),ur=a("div"),F(t$.$$.fragment),TOr=l(),ef=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lee=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),iee=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),LOr=l(),a$=a("p"),yOr=o("This class cannot be instantiated directly using "),E5e=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Wt=a("div"),F(n$.$$.fragment),SOr=l(),C5e=a("p"),ROr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),POr=l(),of=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(I0.$$.fragment),GOr=l(),zr=a("div"),F(s$.$$.fragment),OOr=l(),A5e=a("p"),VOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XOr=l(),En=a("p"),zOr=o("The model class to instantiate is selected based on the "),L5e=a("code"),QOr=o("model_type"),WOr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),$e=a("ul"),N0=a("li"),$5e=a("strong"),ZOr=o("albert"),eVr=o(" \u2014 "),cee=a("a"),oVr=o("FlaxAlbertForMaskedLM"),rVr=o(" (ALBERT model)"),tVr=l(),q0=a("li"),k5e=a("strong"),aVr=o("bart"),nVr=o(" \u2014 "),fee=a("a"),sVr=o("FlaxBartForConditionalGeneration"),lVr=o(" (BART model)"),iVr=l(),j0=a("li"),S5e=a("strong"),dVr=o("bert"),cVr=o(" \u2014 "),mee=a("a"),fVr=o("FlaxBertForMaskedLM"),mVr=o(" (BERT model)"),gVr=l(),D0=a("li"),R5e=a("strong"),hVr=o("big_bird"),pVr=o(" \u2014 "),gee=a("a"),_Vr=o("FlaxBigBirdForMaskedLM"),uVr=o(" (BigBird model)"),bVr=l(),G0=a("li"),P5e=a("strong"),vVr=o("distilbert"),FVr=o(" \u2014 "),hee=a("a"),TVr=o("FlaxDistilBertForMaskedLM"),MVr=o(" (DistilBERT model)"),EVr=l(),O0=a("li"),B5e=a("strong"),CVr=o("electra"),wVr=o(" \u2014 "),pee=a("a"),AVr=o("FlaxElectraForMaskedLM"),LVr=o(" (ELECTRA model)"),yVr=l(),V0=a("li"),I5e=a("strong"),xVr=o("mbart"),$Vr=o(" \u2014 "),_ee=a("a"),kVr=o("FlaxMBartForConditionalGeneration"),SVr=o(" (mBART model)"),RVr=l(),X0=a("li"),N5e=a("strong"),PVr=o("roberta"),BVr=o(" \u2014 "),uee=a("a"),IVr=o("FlaxRobertaForMaskedLM"),NVr=o(" (RoBERTa model)"),qVr=l(),z0=a("li"),q5e=a("strong"),jVr=o("roformer"),DVr=o(" \u2014 "),bee=a("a"),GVr=o("FlaxRoFormerForMaskedLM"),OVr=o(" (RoFormer model)"),VVr=l(),Q0=a("li"),j5e=a("strong"),XVr=o("xlm-roberta"),zVr=o(" \u2014 "),vee=a("a"),QVr=o("FlaxXLMRobertaForMaskedLM"),WVr=o(" (XLM-RoBERTa model)"),HVr=l(),F(W0.$$.fragment),mXe=l(),rf=a("h2"),H0=a("a"),D5e=a("span"),F(l$.$$.fragment),UVr=l(),G5e=a("span"),JVr=o("FlaxAutoModelForSeq2SeqLM"),gXe=l(),br=a("div"),F(i$.$$.fragment),YVr=l(),tf=a("p"),KVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fee=a("a"),ZVr=o("from_pretrained()"),eXr=o(" class method or the "),Tee=a("a"),oXr=o("from_config()"),rXr=o(` class
method.`),tXr=l(),d$=a("p"),aXr=o("This class cannot be instantiated directly using "),O5e=a("code"),nXr=o("__init__()"),sXr=o(" (throws an error)."),lXr=l(),Ht=a("div"),F(c$.$$.fragment),iXr=l(),V5e=a("p"),dXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cXr=l(),af=a("p"),fXr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),mXr=o("not"),gXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),hXr=o("from_pretrained()"),pXr=o(" to load the model weights."),_Xr=l(),F(U0.$$.fragment),uXr=l(),Qr=a("div"),F(f$.$$.fragment),bXr=l(),z5e=a("p"),vXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FXr=l(),Cn=a("p"),TXr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),MXr=o("model_type"),EXr=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),AXr=o("pretrained_model_name_or_path"),LXr=o(":"),yXr=l(),ke=a("ul"),J0=a("li"),U5e=a("strong"),xXr=o("bart"),$Xr=o(" \u2014 "),Eee=a("a"),kXr=o("FlaxBartForConditionalGeneration"),SXr=o(" (BART model)"),RXr=l(),Y0=a("li"),J5e=a("strong"),PXr=o("blenderbot"),BXr=o(" \u2014 "),Cee=a("a"),IXr=o("FlaxBlenderbotForConditionalGeneration"),NXr=o(" (Blenderbot model)"),qXr=l(),K0=a("li"),Y5e=a("strong"),jXr=o("blenderbot-small"),DXr=o(" \u2014 "),wee=a("a"),GXr=o("FlaxBlenderbotSmallForConditionalGeneration"),OXr=o(" (BlenderbotSmall model)"),VXr=l(),Z0=a("li"),K5e=a("strong"),XXr=o("encoder-decoder"),zXr=o(" \u2014 "),Aee=a("a"),QXr=o("FlaxEncoderDecoderModel"),WXr=o(" (Encoder decoder model)"),HXr=l(),ew=a("li"),Z5e=a("strong"),UXr=o("longt5"),JXr=o(" \u2014 "),Lee=a("a"),YXr=o("FlaxLongT5ForConditionalGeneration"),KXr=o(" (LongT5 model)"),ZXr=l(),ow=a("li"),e0e=a("strong"),ezr=o("marian"),ozr=o(" \u2014 "),yee=a("a"),rzr=o("FlaxMarianMTModel"),tzr=o(" (Marian model)"),azr=l(),rw=a("li"),o0e=a("strong"),nzr=o("mbart"),szr=o(" \u2014 "),xee=a("a"),lzr=o("FlaxMBartForConditionalGeneration"),izr=o(" (mBART model)"),dzr=l(),tw=a("li"),r0e=a("strong"),czr=o("mt5"),fzr=o(" \u2014 "),$ee=a("a"),mzr=o("FlaxMT5ForConditionalGeneration"),gzr=o(" (MT5 model)"),hzr=l(),aw=a("li"),t0e=a("strong"),pzr=o("pegasus"),_zr=o(" \u2014 "),kee=a("a"),uzr=o("FlaxPegasusForConditionalGeneration"),bzr=o(" (Pegasus model)"),vzr=l(),nw=a("li"),a0e=a("strong"),Fzr=o("t5"),Tzr=o(" \u2014 "),See=a("a"),Mzr=o("FlaxT5ForConditionalGeneration"),Ezr=o(" (T5 model)"),Czr=l(),F(sw.$$.fragment),hXe=l(),nf=a("h2"),lw=a("a"),n0e=a("span"),F(m$.$$.fragment),wzr=l(),s0e=a("span"),Azr=o("FlaxAutoModelForSequenceClassification"),pXe=l(),vr=a("div"),F(g$.$$.fragment),Lzr=l(),sf=a("p"),yzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ree=a("a"),xzr=o("from_pretrained()"),$zr=o(" class method or the "),Pee=a("a"),kzr=o("from_config()"),Szr=o(` class
method.`),Rzr=l(),h$=a("p"),Pzr=o("This class cannot be instantiated directly using "),l0e=a("code"),Bzr=o("__init__()"),Izr=o(" (throws an error)."),Nzr=l(),Ut=a("div"),F(p$.$$.fragment),qzr=l(),i0e=a("p"),jzr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dzr=l(),lf=a("p"),Gzr=o(`Note:
Loading a model from its configuration file does `),d0e=a("strong"),Ozr=o("not"),Vzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),Xzr=o("from_pretrained()"),zzr=o(" to load the model weights."),Qzr=l(),F(iw.$$.fragment),Wzr=l(),Wr=a("div"),F(_$.$$.fragment),Hzr=l(),c0e=a("p"),Uzr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jzr=l(),wn=a("p"),Yzr=o("The model class to instantiate is selected based on the "),f0e=a("code"),Kzr=o("model_type"),Zzr=o(` property of the config object (either
passed as an argument or loaded from `),m0e=a("code"),eQr=o("pretrained_model_name_or_path"),oQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),rQr=o("pretrained_model_name_or_path"),tQr=o(":"),aQr=l(),Se=a("ul"),dw=a("li"),h0e=a("strong"),nQr=o("albert"),sQr=o(" \u2014 "),Iee=a("a"),lQr=o("FlaxAlbertForSequenceClassification"),iQr=o(" (ALBERT model)"),dQr=l(),cw=a("li"),p0e=a("strong"),cQr=o("bart"),fQr=o(" \u2014 "),Nee=a("a"),mQr=o("FlaxBartForSequenceClassification"),gQr=o(" (BART model)"),hQr=l(),fw=a("li"),_0e=a("strong"),pQr=o("bert"),_Qr=o(" \u2014 "),qee=a("a"),uQr=o("FlaxBertForSequenceClassification"),bQr=o(" (BERT model)"),vQr=l(),mw=a("li"),u0e=a("strong"),FQr=o("big_bird"),TQr=o(" \u2014 "),jee=a("a"),MQr=o("FlaxBigBirdForSequenceClassification"),EQr=o(" (BigBird model)"),CQr=l(),gw=a("li"),b0e=a("strong"),wQr=o("distilbert"),AQr=o(" \u2014 "),Dee=a("a"),LQr=o("FlaxDistilBertForSequenceClassification"),yQr=o(" (DistilBERT model)"),xQr=l(),hw=a("li"),v0e=a("strong"),$Qr=o("electra"),kQr=o(" \u2014 "),Gee=a("a"),SQr=o("FlaxElectraForSequenceClassification"),RQr=o(" (ELECTRA model)"),PQr=l(),pw=a("li"),F0e=a("strong"),BQr=o("mbart"),IQr=o(" \u2014 "),Oee=a("a"),NQr=o("FlaxMBartForSequenceClassification"),qQr=o(" (mBART model)"),jQr=l(),_w=a("li"),T0e=a("strong"),DQr=o("roberta"),GQr=o(" \u2014 "),Vee=a("a"),OQr=o("FlaxRobertaForSequenceClassification"),VQr=o(" (RoBERTa model)"),XQr=l(),uw=a("li"),M0e=a("strong"),zQr=o("roformer"),QQr=o(" \u2014 "),Xee=a("a"),WQr=o("FlaxRoFormerForSequenceClassification"),HQr=o(" (RoFormer model)"),UQr=l(),bw=a("li"),E0e=a("strong"),JQr=o("xlm-roberta"),YQr=o(" \u2014 "),zee=a("a"),KQr=o("FlaxXLMRobertaForSequenceClassification"),ZQr=o(" (XLM-RoBERTa model)"),eWr=l(),F(vw.$$.fragment),_Xe=l(),df=a("h2"),Fw=a("a"),C0e=a("span"),F(u$.$$.fragment),oWr=l(),w0e=a("span"),rWr=o("FlaxAutoModelForQuestionAnswering"),uXe=l(),Fr=a("div"),F(b$.$$.fragment),tWr=l(),cf=a("p"),aWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qee=a("a"),nWr=o("from_pretrained()"),sWr=o(" class method or the "),Wee=a("a"),lWr=o("from_config()"),iWr=o(` class
method.`),dWr=l(),v$=a("p"),cWr=o("This class cannot be instantiated directly using "),A0e=a("code"),fWr=o("__init__()"),mWr=o(" (throws an error)."),gWr=l(),Jt=a("div"),F(F$.$$.fragment),hWr=l(),L0e=a("p"),pWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Wr=l(),ff=a("p"),uWr=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),bWr=o("not"),vWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),FWr=o("from_pretrained()"),TWr=o(" to load the model weights."),MWr=l(),F(Tw.$$.fragment),EWr=l(),Hr=a("div"),F(T$.$$.fragment),CWr=l(),x0e=a("p"),wWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AWr=l(),An=a("p"),LWr=o("The model class to instantiate is selected based on the "),$0e=a("code"),yWr=o("model_type"),xWr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),$Wr=o("pretrained_model_name_or_path"),kWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),SWr=o("pretrained_model_name_or_path"),RWr=o(":"),PWr=l(),Re=a("ul"),Mw=a("li"),R0e=a("strong"),BWr=o("albert"),IWr=o(" \u2014 "),Uee=a("a"),NWr=o("FlaxAlbertForQuestionAnswering"),qWr=o(" (ALBERT model)"),jWr=l(),Ew=a("li"),P0e=a("strong"),DWr=o("bart"),GWr=o(" \u2014 "),Jee=a("a"),OWr=o("FlaxBartForQuestionAnswering"),VWr=o(" (BART model)"),XWr=l(),Cw=a("li"),B0e=a("strong"),zWr=o("bert"),QWr=o(" \u2014 "),Yee=a("a"),WWr=o("FlaxBertForQuestionAnswering"),HWr=o(" (BERT model)"),UWr=l(),ww=a("li"),I0e=a("strong"),JWr=o("big_bird"),YWr=o(" \u2014 "),Kee=a("a"),KWr=o("FlaxBigBirdForQuestionAnswering"),ZWr=o(" (BigBird model)"),eHr=l(),Aw=a("li"),N0e=a("strong"),oHr=o("distilbert"),rHr=o(" \u2014 "),Zee=a("a"),tHr=o("FlaxDistilBertForQuestionAnswering"),aHr=o(" (DistilBERT model)"),nHr=l(),Lw=a("li"),q0e=a("strong"),sHr=o("electra"),lHr=o(" \u2014 "),eoe=a("a"),iHr=o("FlaxElectraForQuestionAnswering"),dHr=o(" (ELECTRA model)"),cHr=l(),yw=a("li"),j0e=a("strong"),fHr=o("mbart"),mHr=o(" \u2014 "),ooe=a("a"),gHr=o("FlaxMBartForQuestionAnswering"),hHr=o(" (mBART model)"),pHr=l(),xw=a("li"),D0e=a("strong"),_Hr=o("roberta"),uHr=o(" \u2014 "),roe=a("a"),bHr=o("FlaxRobertaForQuestionAnswering"),vHr=o(" (RoBERTa model)"),FHr=l(),$w=a("li"),G0e=a("strong"),THr=o("roformer"),MHr=o(" \u2014 "),toe=a("a"),EHr=o("FlaxRoFormerForQuestionAnswering"),CHr=o(" (RoFormer model)"),wHr=l(),kw=a("li"),O0e=a("strong"),AHr=o("xlm-roberta"),LHr=o(" \u2014 "),aoe=a("a"),yHr=o("FlaxXLMRobertaForQuestionAnswering"),xHr=o(" (XLM-RoBERTa model)"),$Hr=l(),F(Sw.$$.fragment),bXe=l(),mf=a("h2"),Rw=a("a"),V0e=a("span"),F(M$.$$.fragment),kHr=l(),X0e=a("span"),SHr=o("FlaxAutoModelForTokenClassification"),vXe=l(),Tr=a("div"),F(E$.$$.fragment),RHr=l(),gf=a("p"),PHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=a("a"),BHr=o("from_pretrained()"),IHr=o(" class method or the "),soe=a("a"),NHr=o("from_config()"),qHr=o(` class
method.`),jHr=l(),C$=a("p"),DHr=o("This class cannot be instantiated directly using "),z0e=a("code"),GHr=o("__init__()"),OHr=o(" (throws an error)."),VHr=l(),Yt=a("div"),F(w$.$$.fragment),XHr=l(),Q0e=a("p"),zHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QHr=l(),hf=a("p"),WHr=o(`Note:
Loading a model from its configuration file does `),W0e=a("strong"),HHr=o("not"),UHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=a("a"),JHr=o("from_pretrained()"),YHr=o(" to load the model weights."),KHr=l(),F(Pw.$$.fragment),ZHr=l(),Ur=a("div"),F(A$.$$.fragment),eUr=l(),H0e=a("p"),oUr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rUr=l(),Ln=a("p"),tUr=o("The model class to instantiate is selected based on the "),U0e=a("code"),aUr=o("model_type"),nUr=o(` property of the config object (either
passed as an argument or loaded from `),J0e=a("code"),sUr=o("pretrained_model_name_or_path"),lUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=a("code"),iUr=o("pretrained_model_name_or_path"),dUr=o(":"),cUr=l(),Ve=a("ul"),Bw=a("li"),K0e=a("strong"),fUr=o("albert"),mUr=o(" \u2014 "),ioe=a("a"),gUr=o("FlaxAlbertForTokenClassification"),hUr=o(" (ALBERT model)"),pUr=l(),Iw=a("li"),Z0e=a("strong"),_Ur=o("bert"),uUr=o(" \u2014 "),doe=a("a"),bUr=o("FlaxBertForTokenClassification"),vUr=o(" (BERT model)"),FUr=l(),Nw=a("li"),ewe=a("strong"),TUr=o("big_bird"),MUr=o(" \u2014 "),coe=a("a"),EUr=o("FlaxBigBirdForTokenClassification"),CUr=o(" (BigBird model)"),wUr=l(),qw=a("li"),owe=a("strong"),AUr=o("distilbert"),LUr=o(" \u2014 "),foe=a("a"),yUr=o("FlaxDistilBertForTokenClassification"),xUr=o(" (DistilBERT model)"),$Ur=l(),jw=a("li"),rwe=a("strong"),kUr=o("electra"),SUr=o(" \u2014 "),moe=a("a"),RUr=o("FlaxElectraForTokenClassification"),PUr=o(" (ELECTRA model)"),BUr=l(),Dw=a("li"),twe=a("strong"),IUr=o("roberta"),NUr=o(" \u2014 "),goe=a("a"),qUr=o("FlaxRobertaForTokenClassification"),jUr=o(" (RoBERTa model)"),DUr=l(),Gw=a("li"),awe=a("strong"),GUr=o("roformer"),OUr=o(" \u2014 "),hoe=a("a"),VUr=o("FlaxRoFormerForTokenClassification"),XUr=o(" (RoFormer model)"),zUr=l(),Ow=a("li"),nwe=a("strong"),QUr=o("xlm-roberta"),WUr=o(" \u2014 "),poe=a("a"),HUr=o("FlaxXLMRobertaForTokenClassification"),UUr=o(" (XLM-RoBERTa model)"),JUr=l(),F(Vw.$$.fragment),FXe=l(),pf=a("h2"),Xw=a("a"),swe=a("span"),F(L$.$$.fragment),YUr=l(),lwe=a("span"),KUr=o("FlaxAutoModelForMultipleChoice"),TXe=l(),Mr=a("div"),F(y$.$$.fragment),ZUr=l(),_f=a("p"),eJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_oe=a("a"),oJr=o("from_pretrained()"),rJr=o(" class method or the "),uoe=a("a"),tJr=o("from_config()"),aJr=o(` class
method.`),nJr=l(),x$=a("p"),sJr=o("This class cannot be instantiated directly using "),iwe=a("code"),lJr=o("__init__()"),iJr=o(" (throws an error)."),dJr=l(),Kt=a("div"),F($$.$$.fragment),cJr=l(),dwe=a("p"),fJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mJr=l(),uf=a("p"),gJr=o(`Note:
Loading a model from its configuration file does `),cwe=a("strong"),hJr=o("not"),pJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),_Jr=o("from_pretrained()"),uJr=o(" to load the model weights."),bJr=l(),F(zw.$$.fragment),vJr=l(),Jr=a("div"),F(k$.$$.fragment),FJr=l(),fwe=a("p"),TJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MJr=l(),yn=a("p"),EJr=o("The model class to instantiate is selected based on the "),mwe=a("code"),CJr=o("model_type"),wJr=o(` property of the config object (either
passed as an argument or loaded from `),gwe=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=a("code"),yJr=o("pretrained_model_name_or_path"),xJr=o(":"),$Jr=l(),Xe=a("ul"),Qw=a("li"),pwe=a("strong"),kJr=o("albert"),SJr=o(" \u2014 "),voe=a("a"),RJr=o("FlaxAlbertForMultipleChoice"),PJr=o(" (ALBERT model)"),BJr=l(),Ww=a("li"),_we=a("strong"),IJr=o("bert"),NJr=o(" \u2014 "),Foe=a("a"),qJr=o("FlaxBertForMultipleChoice"),jJr=o(" (BERT model)"),DJr=l(),Hw=a("li"),uwe=a("strong"),GJr=o("big_bird"),OJr=o(" \u2014 "),Toe=a("a"),VJr=o("FlaxBigBirdForMultipleChoice"),XJr=o(" (BigBird model)"),zJr=l(),Uw=a("li"),bwe=a("strong"),QJr=o("distilbert"),WJr=o(" \u2014 "),Moe=a("a"),HJr=o("FlaxDistilBertForMultipleChoice"),UJr=o(" (DistilBERT model)"),JJr=l(),Jw=a("li"),vwe=a("strong"),YJr=o("electra"),KJr=o(" \u2014 "),Eoe=a("a"),ZJr=o("FlaxElectraForMultipleChoice"),eYr=o(" (ELECTRA model)"),oYr=l(),Yw=a("li"),Fwe=a("strong"),rYr=o("roberta"),tYr=o(" \u2014 "),Coe=a("a"),aYr=o("FlaxRobertaForMultipleChoice"),nYr=o(" (RoBERTa model)"),sYr=l(),Kw=a("li"),Twe=a("strong"),lYr=o("roformer"),iYr=o(" \u2014 "),woe=a("a"),dYr=o("FlaxRoFormerForMultipleChoice"),cYr=o(" (RoFormer model)"),fYr=l(),Zw=a("li"),Mwe=a("strong"),mYr=o("xlm-roberta"),gYr=o(" \u2014 "),Aoe=a("a"),hYr=o("FlaxXLMRobertaForMultipleChoice"),pYr=o(" (XLM-RoBERTa model)"),_Yr=l(),F(eA.$$.fragment),MXe=l(),bf=a("h2"),oA=a("a"),Ewe=a("span"),F(S$.$$.fragment),uYr=l(),Cwe=a("span"),bYr=o("FlaxAutoModelForNextSentencePrediction"),EXe=l(),Er=a("div"),F(R$.$$.fragment),vYr=l(),vf=a("p"),FYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Loe=a("a"),TYr=o("from_pretrained()"),MYr=o(" class method or the "),yoe=a("a"),EYr=o("from_config()"),CYr=o(` class
method.`),wYr=l(),P$=a("p"),AYr=o("This class cannot be instantiated directly using "),wwe=a("code"),LYr=o("__init__()"),yYr=o(" (throws an error)."),xYr=l(),Zt=a("div"),F(B$.$$.fragment),$Yr=l(),Awe=a("p"),kYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SYr=l(),Ff=a("p"),RYr=o(`Note:
Loading a model from its configuration file does `),Lwe=a("strong"),PYr=o("not"),BYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=a("a"),IYr=o("from_pretrained()"),NYr=o(" to load the model weights."),qYr=l(),F(rA.$$.fragment),jYr=l(),Yr=a("div"),F(I$.$$.fragment),DYr=l(),ywe=a("p"),GYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OYr=l(),xn=a("p"),VYr=o("The model class to instantiate is selected based on the "),xwe=a("code"),XYr=o("model_type"),zYr=o(` property of the config object (either
passed as an argument or loaded from `),$we=a("code"),QYr=o("pretrained_model_name_or_path"),WYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=a("code"),HYr=o("pretrained_model_name_or_path"),UYr=o(":"),JYr=l(),Swe=a("ul"),tA=a("li"),Rwe=a("strong"),YYr=o("bert"),KYr=o(" \u2014 "),$oe=a("a"),ZYr=o("FlaxBertForNextSentencePrediction"),eKr=o(" (BERT model)"),oKr=l(),F(aA.$$.fragment),CXe=l(),Tf=a("h2"),nA=a("a"),Pwe=a("span"),F(N$.$$.fragment),rKr=l(),Bwe=a("span"),tKr=o("FlaxAutoModelForImageClassification"),wXe=l(),Cr=a("div"),F(q$.$$.fragment),aKr=l(),Mf=a("p"),nKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),koe=a("a"),sKr=o("from_pretrained()"),lKr=o(" class method or the "),Soe=a("a"),iKr=o("from_config()"),dKr=o(` class
method.`),cKr=l(),j$=a("p"),fKr=o("This class cannot be instantiated directly using "),Iwe=a("code"),mKr=o("__init__()"),gKr=o(" (throws an error)."),hKr=l(),ea=a("div"),F(D$.$$.fragment),pKr=l(),Nwe=a("p"),_Kr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uKr=l(),Ef=a("p"),bKr=o(`Note:
Loading a model from its configuration file does `),qwe=a("strong"),vKr=o("not"),FKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),TKr=o("from_pretrained()"),MKr=o(" to load the model weights."),EKr=l(),F(sA.$$.fragment),CKr=l(),Kr=a("div"),F(G$.$$.fragment),wKr=l(),jwe=a("p"),AKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LKr=l(),$n=a("p"),yKr=o("The model class to instantiate is selected based on the "),Dwe=a("code"),xKr=o("model_type"),$Kr=o(` property of the config object (either
passed as an argument or loaded from `),Gwe=a("code"),kKr=o("pretrained_model_name_or_path"),SKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=a("code"),RKr=o("pretrained_model_name_or_path"),PKr=o(":"),BKr=l(),O$=a("ul"),lA=a("li"),Vwe=a("strong"),IKr=o("beit"),NKr=o(" \u2014 "),Poe=a("a"),qKr=o("FlaxBeitForImageClassification"),jKr=o(" (BEiT model)"),DKr=l(),iA=a("li"),Xwe=a("strong"),GKr=o("vit"),OKr=o(" \u2014 "),Boe=a("a"),VKr=o("FlaxViTForImageClassification"),XKr=o(" (ViT model)"),zKr=l(),F(dA.$$.fragment),AXe=l(),Cf=a("h2"),cA=a("a"),zwe=a("span"),F(V$.$$.fragment),QKr=l(),Qwe=a("span"),WKr=o("FlaxAutoModelForVision2Seq"),LXe=l(),wr=a("div"),F(X$.$$.fragment),HKr=l(),wf=a("p"),UKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ioe=a("a"),JKr=o("from_pretrained()"),YKr=o(" class method or the "),Noe=a("a"),KKr=o("from_config()"),ZKr=o(` class
method.`),eZr=l(),z$=a("p"),oZr=o("This class cannot be instantiated directly using "),Wwe=a("code"),rZr=o("__init__()"),tZr=o(" (throws an error)."),aZr=l(),oa=a("div"),F(Q$.$$.fragment),nZr=l(),Hwe=a("p"),sZr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lZr=l(),Af=a("p"),iZr=o(`Note:
Loading a model from its configuration file does `),Uwe=a("strong"),dZr=o("not"),cZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=a("a"),fZr=o("from_pretrained()"),mZr=o(" to load the model weights."),gZr=l(),F(fA.$$.fragment),hZr=l(),Zr=a("div"),F(W$.$$.fragment),pZr=l(),Jwe=a("p"),_Zr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uZr=l(),kn=a("p"),bZr=o("The model class to instantiate is selected based on the "),Ywe=a("code"),vZr=o("model_type"),FZr=o(` property of the config object (either
passed as an argument or loaded from `),Kwe=a("code"),TZr=o("pretrained_model_name_or_path"),MZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zwe=a("code"),EZr=o("pretrained_model_name_or_path"),CZr=o(":"),wZr=l(),eAe=a("ul"),mA=a("li"),oAe=a("strong"),AZr=o("vision-encoder-decoder"),LZr=o(" \u2014 "),joe=a("a"),yZr=o("FlaxVisionEncoderDecoderModel"),xZr=o(" (Vision Encoder decoder model)"),$Zr=l(),F(gA.$$.fragment),this.h()},l(f){const u=TOt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var H$=s(p);m=n(H$,"A",{id:!0,class:!0,href:!0});var rAe=s(m);_=n(rAe,"SPAN",{});var tAe=s(_);T(d.$$.fragment,tAe),tAe.forEach(t),rAe.forEach(t),h=i(H$),Eo=n(H$,"SPAN",{});var aAe=s(Eo);Ei=r(aAe,"Auto Classes"),aAe.forEach(t),H$.forEach(t),$f=i(f),at=n(f,"P",{});var U$=s(at);Ci=r(U$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=n(U$,"CODE",{});var nAe=s(wi);PL=r(nAe,"from_pretrained()"),nAe.forEach(t),kf=r(U$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),U$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);Ai=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var sAe=s(Rn);BL=r(sAe,"AutoConfig"),sAe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var lAe=s(Bn);IL=r(lAe,"AutoModel"),lAe.forEach(t),Li=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var iAe=s(In);NL=r(iAe,"AutoTokenizer"),iAe.forEach(t),yi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Sf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var J$=s(Ae);gS=r(J$,"will create a model that is an instance of "),xi=n(J$,"A",{href:!0});var dAe=s(xi);hS=r(dAe,"BertModel"),dAe.forEach(t),pS=r(J$,"."),J$.forEach(t),Co=i(f),$a=n(f,"P",{});var Y$=s($a);_S=r(Y$,"There is one class of "),Rf=n(Y$,"CODE",{});var cAe=s(Rf);uS=r(cAe,"AutoModel"),cAe.forEach(t),qQe=r(Y$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Y$.forEach(t),EOe=i(f),$i=n(f,"H2",{class:!0});var K$=s($i);Pf=n(K$,"A",{id:!0,class:!0,href:!0});var fAe=s(Pf);Pte=n(fAe,"SPAN",{});var mAe=s(Pte);T(qL.$$.fragment,mAe),mAe.forEach(t),fAe.forEach(t),jQe=i(K$),Bte=n(K$,"SPAN",{});var gAe=s(Bte);DQe=r(gAe,"Extending the Auto Classes"),gAe.forEach(t),K$.forEach(t),COe=i(f),Nn=n(f,"P",{});var Lf=s(Nn);GQe=r(Lf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ite=n(Lf,"CODE",{});var hAe=s(Ite);OQe=r(hAe,"NewModel"),hAe.forEach(t),VQe=r(Lf,", make sure you have a "),Nte=n(Lf,"CODE",{});var pAe=s(Nte);XQe=r(pAe,"NewModelConfig"),pAe.forEach(t),zQe=r(Lf,` then you can add those to the auto
classes like this:`),Lf.forEach(t),wOe=i(f),T(jL.$$.fragment,f),AOe=i(f),bS=n(f,"P",{});var _Ae=s(bS);QQe=r(_Ae,"You will then be able to use the auto classes like you would usually do!"),_Ae.forEach(t),LOe=i(f),T(Bf.$$.fragment,f),yOe=i(f),ki=n(f,"H2",{class:!0});var Z$=s(ki);If=n(Z$,"A",{id:!0,class:!0,href:!0});var uAe=s(If);qte=n(uAe,"SPAN",{});var bAe=s(qte);T(DL.$$.fragment,bAe),bAe.forEach(t),uAe.forEach(t),WQe=i(Z$),jte=n(Z$,"SPAN",{});var vAe=s(jte);HQe=r(vAe,"AutoConfig"),vAe.forEach(t),Z$.forEach(t),xOe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(GL.$$.fragment,rt),UQe=i(rt),OL=n(rt,"P",{});var ek=s(OL);JQe=r(ek,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),vS=n(ek,"A",{href:!0});var FAe=s(vS);YQe=r(FAe,"from_pretrained()"),FAe.forEach(t),KQe=r(ek," class method."),ek.forEach(t),ZQe=i(rt),VL=n(rt,"P",{});var ok=s(VL);eWe=r(ok,"This class cannot be instantiated directly using "),Dte=n(ok,"CODE",{});var TAe=s(Dte);oWe=r(TAe,"__init__()"),TAe.forEach(t),rWe=r(ok," (throws an error)."),ok.forEach(t),tWe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(XL.$$.fragment,tt),aWe=i(tt),Gte=n(tt,"P",{});var MAe=s(Gte);nWe=r(MAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),MAe.forEach(t),sWe=i(tt),Si=n(tt,"P",{});var yf=s(Si);lWe=r(yf,"The configuration class to instantiate is selected based on the "),Ote=n(yf,"CODE",{});var EAe=s(Ote);iWe=r(EAe,"model_type"),EAe.forEach(t),dWe=r(yf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vte=n(yf,"CODE",{});var CAe=s(Vte);cWe=r(CAe,"pretrained_model_name_or_path"),CAe.forEach(t),fWe=r(yf,":"),yf.forEach(t),mWe=i(tt),A=n(tt,"UL",{});var L=s(A);Nf=n(L,"LI",{});var hA=s(Nf);Xte=n(hA,"STRONG",{});var wAe=s(Xte);gWe=r(wAe,"albert"),wAe.forEach(t),hWe=r(hA," \u2014 "),FS=n(hA,"A",{href:!0});var AAe=s(FS);pWe=r(AAe,"AlbertConfig"),AAe.forEach(t),_We=r(hA," (ALBERT model)"),hA.forEach(t),uWe=i(L),qf=n(L,"LI",{});var pA=s(qf);zte=n(pA,"STRONG",{});var LAe=s(zte);bWe=r(LAe,"bart"),LAe.forEach(t),vWe=r(pA," \u2014 "),TS=n(pA,"A",{href:!0});var yAe=s(TS);FWe=r(yAe,"BartConfig"),yAe.forEach(t),TWe=r(pA," (BART model)"),pA.forEach(t),MWe=i(L),jf=n(L,"LI",{});var _A=s(jf);Qte=n(_A,"STRONG",{});var xAe=s(Qte);EWe=r(xAe,"beit"),xAe.forEach(t),CWe=r(_A," \u2014 "),MS=n(_A,"A",{href:!0});var $Ae=s(MS);wWe=r($Ae,"BeitConfig"),$Ae.forEach(t),AWe=r(_A," (BEiT model)"),_A.forEach(t),LWe=i(L),Df=n(L,"LI",{});var uA=s(Df);Wte=n(uA,"STRONG",{});var kAe=s(Wte);yWe=r(kAe,"bert"),kAe.forEach(t),xWe=r(uA," \u2014 "),ES=n(uA,"A",{href:!0});var SAe=s(ES);$We=r(SAe,"BertConfig"),SAe.forEach(t),kWe=r(uA," (BERT model)"),uA.forEach(t),SWe=i(L),Gf=n(L,"LI",{});var bA=s(Gf);Hte=n(bA,"STRONG",{});var RAe=s(Hte);RWe=r(RAe,"bert-generation"),RAe.forEach(t),PWe=r(bA," \u2014 "),CS=n(bA,"A",{href:!0});var PAe=s(CS);BWe=r(PAe,"BertGenerationConfig"),PAe.forEach(t),IWe=r(bA," (Bert Generation model)"),bA.forEach(t),NWe=i(L),Of=n(L,"LI",{});var vA=s(Of);Ute=n(vA,"STRONG",{});var BAe=s(Ute);qWe=r(BAe,"big_bird"),BAe.forEach(t),jWe=r(vA," \u2014 "),wS=n(vA,"A",{href:!0});var IAe=s(wS);DWe=r(IAe,"BigBirdConfig"),IAe.forEach(t),GWe=r(vA," (BigBird model)"),vA.forEach(t),OWe=i(L),Vf=n(L,"LI",{});var FA=s(Vf);Jte=n(FA,"STRONG",{});var NAe=s(Jte);VWe=r(NAe,"bigbird_pegasus"),NAe.forEach(t),XWe=r(FA," \u2014 "),AS=n(FA,"A",{href:!0});var qAe=s(AS);zWe=r(qAe,"BigBirdPegasusConfig"),qAe.forEach(t),QWe=r(FA," (BigBird-Pegasus model)"),FA.forEach(t),WWe=i(L),Xf=n(L,"LI",{});var TA=s(Xf);Yte=n(TA,"STRONG",{});var jAe=s(Yte);HWe=r(jAe,"blenderbot"),jAe.forEach(t),UWe=r(TA," \u2014 "),LS=n(TA,"A",{href:!0});var DAe=s(LS);JWe=r(DAe,"BlenderbotConfig"),DAe.forEach(t),YWe=r(TA," (Blenderbot model)"),TA.forEach(t),KWe=i(L),zf=n(L,"LI",{});var MA=s(zf);Kte=n(MA,"STRONG",{});var GAe=s(Kte);ZWe=r(GAe,"blenderbot-small"),GAe.forEach(t),eHe=r(MA," \u2014 "),yS=n(MA,"A",{href:!0});var OAe=s(yS);oHe=r(OAe,"BlenderbotSmallConfig"),OAe.forEach(t),rHe=r(MA," (BlenderbotSmall model)"),MA.forEach(t),tHe=i(L),Qf=n(L,"LI",{});var EA=s(Qf);Zte=n(EA,"STRONG",{});var VAe=s(Zte);aHe=r(VAe,"bloom"),VAe.forEach(t),nHe=r(EA," \u2014 "),xS=n(EA,"A",{href:!0});var XAe=s(xS);sHe=r(XAe,"BloomConfig"),XAe.forEach(t),lHe=r(EA," (BLOOM model)"),EA.forEach(t),iHe=i(L),Wf=n(L,"LI",{});var CA=s(Wf);eae=n(CA,"STRONG",{});var zAe=s(eae);dHe=r(zAe,"camembert"),zAe.forEach(t),cHe=r(CA," \u2014 "),$S=n(CA,"A",{href:!0});var QAe=s($S);fHe=r(QAe,"CamembertConfig"),QAe.forEach(t),mHe=r(CA," (CamemBERT model)"),CA.forEach(t),gHe=i(L),Hf=n(L,"LI",{});var wA=s(Hf);oae=n(wA,"STRONG",{});var WAe=s(oae);hHe=r(WAe,"canine"),WAe.forEach(t),pHe=r(wA," \u2014 "),kS=n(wA,"A",{href:!0});var HAe=s(kS);_He=r(HAe,"CanineConfig"),HAe.forEach(t),uHe=r(wA," (CANINE model)"),wA.forEach(t),bHe=i(L),Uf=n(L,"LI",{});var AA=s(Uf);rae=n(AA,"STRONG",{});var UAe=s(rae);vHe=r(UAe,"clip"),UAe.forEach(t),FHe=r(AA," \u2014 "),SS=n(AA,"A",{href:!0});var JAe=s(SS);THe=r(JAe,"CLIPConfig"),JAe.forEach(t),MHe=r(AA," (CLIP model)"),AA.forEach(t),EHe=i(L),Jf=n(L,"LI",{});var LA=s(Jf);tae=n(LA,"STRONG",{});var YAe=s(tae);CHe=r(YAe,"codegen"),YAe.forEach(t),wHe=r(LA," \u2014 "),RS=n(LA,"A",{href:!0});var KAe=s(RS);AHe=r(KAe,"CodeGenConfig"),KAe.forEach(t),LHe=r(LA," (CodeGen model)"),LA.forEach(t),yHe=i(L),Yf=n(L,"LI",{});var yA=s(Yf);aae=n(yA,"STRONG",{});var ZAe=s(aae);xHe=r(ZAe,"convbert"),ZAe.forEach(t),$He=r(yA," \u2014 "),PS=n(yA,"A",{href:!0});var e6e=s(PS);kHe=r(e6e,"ConvBertConfig"),e6e.forEach(t),SHe=r(yA," (ConvBERT model)"),yA.forEach(t),RHe=i(L),Kf=n(L,"LI",{});var xA=s(Kf);nae=n(xA,"STRONG",{});var o6e=s(nae);PHe=r(o6e,"convnext"),o6e.forEach(t),BHe=r(xA," \u2014 "),BS=n(xA,"A",{href:!0});var r6e=s(BS);IHe=r(r6e,"ConvNextConfig"),r6e.forEach(t),NHe=r(xA," (ConvNeXT model)"),xA.forEach(t),qHe=i(L),Zf=n(L,"LI",{});var $A=s(Zf);sae=n($A,"STRONG",{});var t6e=s(sae);jHe=r(t6e,"ctrl"),t6e.forEach(t),DHe=r($A," \u2014 "),IS=n($A,"A",{href:!0});var a6e=s(IS);GHe=r(a6e,"CTRLConfig"),a6e.forEach(t),OHe=r($A," (CTRL model)"),$A.forEach(t),VHe=i(L),em=n(L,"LI",{});var kA=s(em);lae=n(kA,"STRONG",{});var n6e=s(lae);XHe=r(n6e,"cvt"),n6e.forEach(t),zHe=r(kA," \u2014 "),NS=n(kA,"A",{href:!0});var s6e=s(NS);QHe=r(s6e,"CvtConfig"),s6e.forEach(t),WHe=r(kA," (CvT model)"),kA.forEach(t),HHe=i(L),om=n(L,"LI",{});var SA=s(om);iae=n(SA,"STRONG",{});var l6e=s(iae);UHe=r(l6e,"data2vec-audio"),l6e.forEach(t),JHe=r(SA," \u2014 "),qS=n(SA,"A",{href:!0});var i6e=s(qS);YHe=r(i6e,"Data2VecAudioConfig"),i6e.forEach(t),KHe=r(SA," (Data2VecAudio model)"),SA.forEach(t),ZHe=i(L),rm=n(L,"LI",{});var RA=s(rm);dae=n(RA,"STRONG",{});var d6e=s(dae);eUe=r(d6e,"data2vec-text"),d6e.forEach(t),oUe=r(RA," \u2014 "),jS=n(RA,"A",{href:!0});var c6e=s(jS);rUe=r(c6e,"Data2VecTextConfig"),c6e.forEach(t),tUe=r(RA," (Data2VecText model)"),RA.forEach(t),aUe=i(L),tm=n(L,"LI",{});var PA=s(tm);cae=n(PA,"STRONG",{});var f6e=s(cae);nUe=r(f6e,"data2vec-vision"),f6e.forEach(t),sUe=r(PA," \u2014 "),DS=n(PA,"A",{href:!0});var m6e=s(DS);lUe=r(m6e,"Data2VecVisionConfig"),m6e.forEach(t),iUe=r(PA," (Data2VecVision model)"),PA.forEach(t),dUe=i(L),am=n(L,"LI",{});var BA=s(am);fae=n(BA,"STRONG",{});var g6e=s(fae);cUe=r(g6e,"deberta"),g6e.forEach(t),fUe=r(BA," \u2014 "),GS=n(BA,"A",{href:!0});var h6e=s(GS);mUe=r(h6e,"DebertaConfig"),h6e.forEach(t),gUe=r(BA," (DeBERTa model)"),BA.forEach(t),hUe=i(L),nm=n(L,"LI",{});var IA=s(nm);mae=n(IA,"STRONG",{});var p6e=s(mae);pUe=r(p6e,"deberta-v2"),p6e.forEach(t),_Ue=r(IA," \u2014 "),OS=n(IA,"A",{href:!0});var _6e=s(OS);uUe=r(_6e,"DebertaV2Config"),_6e.forEach(t),bUe=r(IA," (DeBERTa-v2 model)"),IA.forEach(t),vUe=i(L),sm=n(L,"LI",{});var NA=s(sm);gae=n(NA,"STRONG",{});var SZr=s(gae);FUe=r(SZr,"decision_transformer"),SZr.forEach(t),TUe=r(NA," \u2014 "),VS=n(NA,"A",{href:!0});var RZr=s(VS);MUe=r(RZr,"DecisionTransformerConfig"),RZr.forEach(t),EUe=r(NA," (Decision Transformer model)"),NA.forEach(t),CUe=i(L),lm=n(L,"LI",{});var u6e=s(lm);hae=n(u6e,"STRONG",{});var PZr=s(hae);wUe=r(PZr,"deit"),PZr.forEach(t),AUe=r(u6e," \u2014 "),XS=n(u6e,"A",{href:!0});var BZr=s(XS);LUe=r(BZr,"DeiTConfig"),BZr.forEach(t),yUe=r(u6e," (DeiT model)"),u6e.forEach(t),xUe=i(L),im=n(L,"LI",{});var b6e=s(im);pae=n(b6e,"STRONG",{});var IZr=s(pae);$Ue=r(IZr,"detr"),IZr.forEach(t),kUe=r(b6e," \u2014 "),zS=n(b6e,"A",{href:!0});var NZr=s(zS);SUe=r(NZr,"DetrConfig"),NZr.forEach(t),RUe=r(b6e," (DETR model)"),b6e.forEach(t),PUe=i(L),dm=n(L,"LI",{});var v6e=s(dm);_ae=n(v6e,"STRONG",{});var qZr=s(_ae);BUe=r(qZr,"distilbert"),qZr.forEach(t),IUe=r(v6e," \u2014 "),QS=n(v6e,"A",{href:!0});var jZr=s(QS);NUe=r(jZr,"DistilBertConfig"),jZr.forEach(t),qUe=r(v6e," (DistilBERT model)"),v6e.forEach(t),jUe=i(L),cm=n(L,"LI",{});var F6e=s(cm);uae=n(F6e,"STRONG",{});var DZr=s(uae);DUe=r(DZr,"dpr"),DZr.forEach(t),GUe=r(F6e," \u2014 "),WS=n(F6e,"A",{href:!0});var GZr=s(WS);OUe=r(GZr,"DPRConfig"),GZr.forEach(t),VUe=r(F6e," (DPR model)"),F6e.forEach(t),XUe=i(L),fm=n(L,"LI",{});var T6e=s(fm);bae=n(T6e,"STRONG",{});var OZr=s(bae);zUe=r(OZr,"dpt"),OZr.forEach(t),QUe=r(T6e," \u2014 "),HS=n(T6e,"A",{href:!0});var VZr=s(HS);WUe=r(VZr,"DPTConfig"),VZr.forEach(t),HUe=r(T6e," (DPT model)"),T6e.forEach(t),UUe=i(L),mm=n(L,"LI",{});var M6e=s(mm);vae=n(M6e,"STRONG",{});var XZr=s(vae);JUe=r(XZr,"electra"),XZr.forEach(t),YUe=r(M6e," \u2014 "),US=n(M6e,"A",{href:!0});var zZr=s(US);KUe=r(zZr,"ElectraConfig"),zZr.forEach(t),ZUe=r(M6e," (ELECTRA model)"),M6e.forEach(t),eJe=i(L),gm=n(L,"LI",{});var E6e=s(gm);Fae=n(E6e,"STRONG",{});var QZr=s(Fae);oJe=r(QZr,"encoder-decoder"),QZr.forEach(t),rJe=r(E6e," \u2014 "),JS=n(E6e,"A",{href:!0});var WZr=s(JS);tJe=r(WZr,"EncoderDecoderConfig"),WZr.forEach(t),aJe=r(E6e," (Encoder decoder model)"),E6e.forEach(t),nJe=i(L),hm=n(L,"LI",{});var C6e=s(hm);Tae=n(C6e,"STRONG",{});var HZr=s(Tae);sJe=r(HZr,"flaubert"),HZr.forEach(t),lJe=r(C6e," \u2014 "),YS=n(C6e,"A",{href:!0});var UZr=s(YS);iJe=r(UZr,"FlaubertConfig"),UZr.forEach(t),dJe=r(C6e," (FlauBERT model)"),C6e.forEach(t),cJe=i(L),pm=n(L,"LI",{});var w6e=s(pm);Mae=n(w6e,"STRONG",{});var JZr=s(Mae);fJe=r(JZr,"flava"),JZr.forEach(t),mJe=r(w6e," \u2014 "),KS=n(w6e,"A",{href:!0});var YZr=s(KS);gJe=r(YZr,"FlavaConfig"),YZr.forEach(t),hJe=r(w6e," (FLAVA model)"),w6e.forEach(t),pJe=i(L),_m=n(L,"LI",{});var A6e=s(_m);Eae=n(A6e,"STRONG",{});var KZr=s(Eae);_Je=r(KZr,"fnet"),KZr.forEach(t),uJe=r(A6e," \u2014 "),ZS=n(A6e,"A",{href:!0});var ZZr=s(ZS);bJe=r(ZZr,"FNetConfig"),ZZr.forEach(t),vJe=r(A6e," (FNet model)"),A6e.forEach(t),FJe=i(L),um=n(L,"LI",{});var L6e=s(um);Cae=n(L6e,"STRONG",{});var eet=s(Cae);TJe=r(eet,"fsmt"),eet.forEach(t),MJe=r(L6e," \u2014 "),eR=n(L6e,"A",{href:!0});var oet=s(eR);EJe=r(oet,"FSMTConfig"),oet.forEach(t),CJe=r(L6e," (FairSeq Machine-Translation model)"),L6e.forEach(t),wJe=i(L),bm=n(L,"LI",{});var y6e=s(bm);wae=n(y6e,"STRONG",{});var ret=s(wae);AJe=r(ret,"funnel"),ret.forEach(t),LJe=r(y6e," \u2014 "),oR=n(y6e,"A",{href:!0});var tet=s(oR);yJe=r(tet,"FunnelConfig"),tet.forEach(t),xJe=r(y6e," (Funnel Transformer model)"),y6e.forEach(t),$Je=i(L),vm=n(L,"LI",{});var x6e=s(vm);Aae=n(x6e,"STRONG",{});var aet=s(Aae);kJe=r(aet,"glpn"),aet.forEach(t),SJe=r(x6e," \u2014 "),rR=n(x6e,"A",{href:!0});var net=s(rR);RJe=r(net,"GLPNConfig"),net.forEach(t),PJe=r(x6e," (GLPN model)"),x6e.forEach(t),BJe=i(L),Fm=n(L,"LI",{});var $6e=s(Fm);Lae=n($6e,"STRONG",{});var set=s(Lae);IJe=r(set,"gpt2"),set.forEach(t),NJe=r($6e," \u2014 "),tR=n($6e,"A",{href:!0});var iet=s(tR);qJe=r(iet,"GPT2Config"),iet.forEach(t),jJe=r($6e," (OpenAI GPT-2 model)"),$6e.forEach(t),DJe=i(L),Tm=n(L,"LI",{});var k6e=s(Tm);yae=n(k6e,"STRONG",{});var det=s(yae);GJe=r(det,"gpt_neo"),det.forEach(t),OJe=r(k6e," \u2014 "),aR=n(k6e,"A",{href:!0});var cet=s(aR);VJe=r(cet,"GPTNeoConfig"),cet.forEach(t),XJe=r(k6e," (GPT Neo model)"),k6e.forEach(t),zJe=i(L),Mm=n(L,"LI",{});var S6e=s(Mm);xae=n(S6e,"STRONG",{});var fet=s(xae);QJe=r(fet,"gpt_neox"),fet.forEach(t),WJe=r(S6e," \u2014 "),nR=n(S6e,"A",{href:!0});var met=s(nR);HJe=r(met,"GPTNeoXConfig"),met.forEach(t),UJe=r(S6e," (GPT NeoX model)"),S6e.forEach(t),JJe=i(L),Em=n(L,"LI",{});var R6e=s(Em);$ae=n(R6e,"STRONG",{});var get=s($ae);YJe=r(get,"gptj"),get.forEach(t),KJe=r(R6e," \u2014 "),sR=n(R6e,"A",{href:!0});var het=s(sR);ZJe=r(het,"GPTJConfig"),het.forEach(t),eYe=r(R6e," (GPT-J model)"),R6e.forEach(t),oYe=i(L),Cm=n(L,"LI",{});var P6e=s(Cm);kae=n(P6e,"STRONG",{});var pet=s(kae);rYe=r(pet,"groupvit"),pet.forEach(t),tYe=r(P6e," \u2014 "),lR=n(P6e,"A",{href:!0});var _et=s(lR);aYe=r(_et,"GroupViTConfig"),_et.forEach(t),nYe=r(P6e," (GroupViT model)"),P6e.forEach(t),sYe=i(L),wm=n(L,"LI",{});var B6e=s(wm);Sae=n(B6e,"STRONG",{});var uet=s(Sae);lYe=r(uet,"hubert"),uet.forEach(t),iYe=r(B6e," \u2014 "),iR=n(B6e,"A",{href:!0});var bet=s(iR);dYe=r(bet,"HubertConfig"),bet.forEach(t),cYe=r(B6e," (Hubert model)"),B6e.forEach(t),fYe=i(L),Am=n(L,"LI",{});var I6e=s(Am);Rae=n(I6e,"STRONG",{});var vet=s(Rae);mYe=r(vet,"ibert"),vet.forEach(t),gYe=r(I6e," \u2014 "),dR=n(I6e,"A",{href:!0});var Fet=s(dR);hYe=r(Fet,"IBertConfig"),Fet.forEach(t),pYe=r(I6e," (I-BERT model)"),I6e.forEach(t),_Ye=i(L),Lm=n(L,"LI",{});var N6e=s(Lm);Pae=n(N6e,"STRONG",{});var Tet=s(Pae);uYe=r(Tet,"imagegpt"),Tet.forEach(t),bYe=r(N6e," \u2014 "),cR=n(N6e,"A",{href:!0});var Met=s(cR);vYe=r(Met,"ImageGPTConfig"),Met.forEach(t),FYe=r(N6e," (ImageGPT model)"),N6e.forEach(t),TYe=i(L),ym=n(L,"LI",{});var q6e=s(ym);Bae=n(q6e,"STRONG",{});var Eet=s(Bae);MYe=r(Eet,"layoutlm"),Eet.forEach(t),EYe=r(q6e," \u2014 "),fR=n(q6e,"A",{href:!0});var Cet=s(fR);CYe=r(Cet,"LayoutLMConfig"),Cet.forEach(t),wYe=r(q6e," (LayoutLM model)"),q6e.forEach(t),AYe=i(L),xm=n(L,"LI",{});var j6e=s(xm);Iae=n(j6e,"STRONG",{});var wet=s(Iae);LYe=r(wet,"layoutlmv2"),wet.forEach(t),yYe=r(j6e," \u2014 "),mR=n(j6e,"A",{href:!0});var Aet=s(mR);xYe=r(Aet,"LayoutLMv2Config"),Aet.forEach(t),$Ye=r(j6e," (LayoutLMv2 model)"),j6e.forEach(t),kYe=i(L),$m=n(L,"LI",{});var D6e=s($m);Nae=n(D6e,"STRONG",{});var Let=s(Nae);SYe=r(Let,"layoutlmv3"),Let.forEach(t),RYe=r(D6e," \u2014 "),gR=n(D6e,"A",{href:!0});var yet=s(gR);PYe=r(yet,"LayoutLMv3Config"),yet.forEach(t),BYe=r(D6e," (LayoutLMv3 model)"),D6e.forEach(t),IYe=i(L),km=n(L,"LI",{});var G6e=s(km);qae=n(G6e,"STRONG",{});var xet=s(qae);NYe=r(xet,"led"),xet.forEach(t),qYe=r(G6e," \u2014 "),hR=n(G6e,"A",{href:!0});var $et=s(hR);jYe=r($et,"LEDConfig"),$et.forEach(t),DYe=r(G6e," (LED model)"),G6e.forEach(t),GYe=i(L),Sm=n(L,"LI",{});var O6e=s(Sm);jae=n(O6e,"STRONG",{});var ket=s(jae);OYe=r(ket,"levit"),ket.forEach(t),VYe=r(O6e," \u2014 "),pR=n(O6e,"A",{href:!0});var Set=s(pR);XYe=r(Set,"LevitConfig"),Set.forEach(t),zYe=r(O6e," (LeViT model)"),O6e.forEach(t),QYe=i(L),Rm=n(L,"LI",{});var V6e=s(Rm);Dae=n(V6e,"STRONG",{});var Ret=s(Dae);WYe=r(Ret,"longformer"),Ret.forEach(t),HYe=r(V6e," \u2014 "),_R=n(V6e,"A",{href:!0});var Pet=s(_R);UYe=r(Pet,"LongformerConfig"),Pet.forEach(t),JYe=r(V6e," (Longformer model)"),V6e.forEach(t),YYe=i(L),Pm=n(L,"LI",{});var X6e=s(Pm);Gae=n(X6e,"STRONG",{});var Bet=s(Gae);KYe=r(Bet,"longt5"),Bet.forEach(t),ZYe=r(X6e," \u2014 "),uR=n(X6e,"A",{href:!0});var Iet=s(uR);eKe=r(Iet,"LongT5Config"),Iet.forEach(t),oKe=r(X6e," (LongT5 model)"),X6e.forEach(t),rKe=i(L),Bm=n(L,"LI",{});var z6e=s(Bm);Oae=n(z6e,"STRONG",{});var Net=s(Oae);tKe=r(Net,"luke"),Net.forEach(t),aKe=r(z6e," \u2014 "),bR=n(z6e,"A",{href:!0});var qet=s(bR);nKe=r(qet,"LukeConfig"),qet.forEach(t),sKe=r(z6e," (LUKE model)"),z6e.forEach(t),lKe=i(L),Im=n(L,"LI",{});var Q6e=s(Im);Vae=n(Q6e,"STRONG",{});var jet=s(Vae);iKe=r(jet,"lxmert"),jet.forEach(t),dKe=r(Q6e," \u2014 "),vR=n(Q6e,"A",{href:!0});var Det=s(vR);cKe=r(Det,"LxmertConfig"),Det.forEach(t),fKe=r(Q6e," (LXMERT model)"),Q6e.forEach(t),mKe=i(L),Nm=n(L,"LI",{});var W6e=s(Nm);Xae=n(W6e,"STRONG",{});var Get=s(Xae);gKe=r(Get,"m2m_100"),Get.forEach(t),hKe=r(W6e," \u2014 "),FR=n(W6e,"A",{href:!0});var Oet=s(FR);pKe=r(Oet,"M2M100Config"),Oet.forEach(t),_Ke=r(W6e," (M2M100 model)"),W6e.forEach(t),uKe=i(L),qm=n(L,"LI",{});var H6e=s(qm);zae=n(H6e,"STRONG",{});var Vet=s(zae);bKe=r(Vet,"marian"),Vet.forEach(t),vKe=r(H6e," \u2014 "),TR=n(H6e,"A",{href:!0});var Xet=s(TR);FKe=r(Xet,"MarianConfig"),Xet.forEach(t),TKe=r(H6e," (Marian model)"),H6e.forEach(t),MKe=i(L),jm=n(L,"LI",{});var U6e=s(jm);Qae=n(U6e,"STRONG",{});var zet=s(Qae);EKe=r(zet,"maskformer"),zet.forEach(t),CKe=r(U6e," \u2014 "),MR=n(U6e,"A",{href:!0});var Qet=s(MR);wKe=r(Qet,"MaskFormerConfig"),Qet.forEach(t),AKe=r(U6e," (MaskFormer model)"),U6e.forEach(t),LKe=i(L),Dm=n(L,"LI",{});var J6e=s(Dm);Wae=n(J6e,"STRONG",{});var Wet=s(Wae);yKe=r(Wet,"mbart"),Wet.forEach(t),xKe=r(J6e," \u2014 "),ER=n(J6e,"A",{href:!0});var Het=s(ER);$Ke=r(Het,"MBartConfig"),Het.forEach(t),kKe=r(J6e," (mBART model)"),J6e.forEach(t),SKe=i(L),Gm=n(L,"LI",{});var Y6e=s(Gm);Hae=n(Y6e,"STRONG",{});var Uet=s(Hae);RKe=r(Uet,"mctct"),Uet.forEach(t),PKe=r(Y6e," \u2014 "),CR=n(Y6e,"A",{href:!0});var Jet=s(CR);BKe=r(Jet,"MCTCTConfig"),Jet.forEach(t),IKe=r(Y6e," (M-CTC-T model)"),Y6e.forEach(t),NKe=i(L),Om=n(L,"LI",{});var K6e=s(Om);Uae=n(K6e,"STRONG",{});var Yet=s(Uae);qKe=r(Yet,"megatron-bert"),Yet.forEach(t),jKe=r(K6e," \u2014 "),wR=n(K6e,"A",{href:!0});var Ket=s(wR);DKe=r(Ket,"MegatronBertConfig"),Ket.forEach(t),GKe=r(K6e," (Megatron-BERT model)"),K6e.forEach(t),OKe=i(L),Vm=n(L,"LI",{});var Z6e=s(Vm);Jae=n(Z6e,"STRONG",{});var Zet=s(Jae);VKe=r(Zet,"mobilebert"),Zet.forEach(t),XKe=r(Z6e," \u2014 "),AR=n(Z6e,"A",{href:!0});var eot=s(AR);zKe=r(eot,"MobileBertConfig"),eot.forEach(t),QKe=r(Z6e," (MobileBERT model)"),Z6e.forEach(t),WKe=i(L),Xm=n(L,"LI",{});var eLe=s(Xm);Yae=n(eLe,"STRONG",{});var oot=s(Yae);HKe=r(oot,"mpnet"),oot.forEach(t),UKe=r(eLe," \u2014 "),LR=n(eLe,"A",{href:!0});var rot=s(LR);JKe=r(rot,"MPNetConfig"),rot.forEach(t),YKe=r(eLe," (MPNet model)"),eLe.forEach(t),KKe=i(L),zm=n(L,"LI",{});var oLe=s(zm);Kae=n(oLe,"STRONG",{});var tot=s(Kae);ZKe=r(tot,"mt5"),tot.forEach(t),eZe=r(oLe," \u2014 "),yR=n(oLe,"A",{href:!0});var aot=s(yR);oZe=r(aot,"MT5Config"),aot.forEach(t),rZe=r(oLe," (MT5 model)"),oLe.forEach(t),tZe=i(L),Qm=n(L,"LI",{});var rLe=s(Qm);Zae=n(rLe,"STRONG",{});var not=s(Zae);aZe=r(not,"nezha"),not.forEach(t),nZe=r(rLe," \u2014 "),xR=n(rLe,"A",{href:!0});var sot=s(xR);sZe=r(sot,"NezhaConfig"),sot.forEach(t),lZe=r(rLe," (Nezha model)"),rLe.forEach(t),iZe=i(L),Wm=n(L,"LI",{});var tLe=s(Wm);ene=n(tLe,"STRONG",{});var lot=s(ene);dZe=r(lot,"nystromformer"),lot.forEach(t),cZe=r(tLe," \u2014 "),$R=n(tLe,"A",{href:!0});var iot=s($R);fZe=r(iot,"NystromformerConfig"),iot.forEach(t),mZe=r(tLe," (Nystr\xF6mformer model)"),tLe.forEach(t),gZe=i(L),Hm=n(L,"LI",{});var aLe=s(Hm);one=n(aLe,"STRONG",{});var dot=s(one);hZe=r(dot,"openai-gpt"),dot.forEach(t),pZe=r(aLe," \u2014 "),kR=n(aLe,"A",{href:!0});var cot=s(kR);_Ze=r(cot,"OpenAIGPTConfig"),cot.forEach(t),uZe=r(aLe," (OpenAI GPT model)"),aLe.forEach(t),bZe=i(L),Um=n(L,"LI",{});var nLe=s(Um);rne=n(nLe,"STRONG",{});var fot=s(rne);vZe=r(fot,"opt"),fot.forEach(t),FZe=r(nLe," \u2014 "),SR=n(nLe,"A",{href:!0});var mot=s(SR);TZe=r(mot,"OPTConfig"),mot.forEach(t),MZe=r(nLe," (OPT model)"),nLe.forEach(t),EZe=i(L),Jm=n(L,"LI",{});var sLe=s(Jm);tne=n(sLe,"STRONG",{});var got=s(tne);CZe=r(got,"pegasus"),got.forEach(t),wZe=r(sLe," \u2014 "),RR=n(sLe,"A",{href:!0});var hot=s(RR);AZe=r(hot,"PegasusConfig"),hot.forEach(t),LZe=r(sLe," (Pegasus model)"),sLe.forEach(t),yZe=i(L),Ym=n(L,"LI",{});var lLe=s(Ym);ane=n(lLe,"STRONG",{});var pot=s(ane);xZe=r(pot,"perceiver"),pot.forEach(t),$Ze=r(lLe," \u2014 "),PR=n(lLe,"A",{href:!0});var _ot=s(PR);kZe=r(_ot,"PerceiverConfig"),_ot.forEach(t),SZe=r(lLe," (Perceiver model)"),lLe.forEach(t),RZe=i(L),Km=n(L,"LI",{});var iLe=s(Km);nne=n(iLe,"STRONG",{});var uot=s(nne);PZe=r(uot,"plbart"),uot.forEach(t),BZe=r(iLe," \u2014 "),BR=n(iLe,"A",{href:!0});var bot=s(BR);IZe=r(bot,"PLBartConfig"),bot.forEach(t),NZe=r(iLe," (PLBart model)"),iLe.forEach(t),qZe=i(L),Zm=n(L,"LI",{});var dLe=s(Zm);sne=n(dLe,"STRONG",{});var vot=s(sne);jZe=r(vot,"poolformer"),vot.forEach(t),DZe=r(dLe," \u2014 "),IR=n(dLe,"A",{href:!0});var Fot=s(IR);GZe=r(Fot,"PoolFormerConfig"),Fot.forEach(t),OZe=r(dLe," (PoolFormer model)"),dLe.forEach(t),VZe=i(L),eg=n(L,"LI",{});var cLe=s(eg);lne=n(cLe,"STRONG",{});var Tot=s(lne);XZe=r(Tot,"prophetnet"),Tot.forEach(t),zZe=r(cLe," \u2014 "),NR=n(cLe,"A",{href:!0});var Mot=s(NR);QZe=r(Mot,"ProphetNetConfig"),Mot.forEach(t),WZe=r(cLe," (ProphetNet model)"),cLe.forEach(t),HZe=i(L),og=n(L,"LI",{});var fLe=s(og);ine=n(fLe,"STRONG",{});var Eot=s(ine);UZe=r(Eot,"qdqbert"),Eot.forEach(t),JZe=r(fLe," \u2014 "),qR=n(fLe,"A",{href:!0});var Cot=s(qR);YZe=r(Cot,"QDQBertConfig"),Cot.forEach(t),KZe=r(fLe," (QDQBert model)"),fLe.forEach(t),ZZe=i(L),rg=n(L,"LI",{});var mLe=s(rg);dne=n(mLe,"STRONG",{});var wot=s(dne);eeo=r(wot,"rag"),wot.forEach(t),oeo=r(mLe," \u2014 "),jR=n(mLe,"A",{href:!0});var Aot=s(jR);reo=r(Aot,"RagConfig"),Aot.forEach(t),teo=r(mLe," (RAG model)"),mLe.forEach(t),aeo=i(L),tg=n(L,"LI",{});var gLe=s(tg);cne=n(gLe,"STRONG",{});var Lot=s(cne);neo=r(Lot,"realm"),Lot.forEach(t),seo=r(gLe," \u2014 "),DR=n(gLe,"A",{href:!0});var yot=s(DR);leo=r(yot,"RealmConfig"),yot.forEach(t),ieo=r(gLe," (REALM model)"),gLe.forEach(t),deo=i(L),ag=n(L,"LI",{});var hLe=s(ag);fne=n(hLe,"STRONG",{});var xot=s(fne);ceo=r(xot,"reformer"),xot.forEach(t),feo=r(hLe," \u2014 "),GR=n(hLe,"A",{href:!0});var $ot=s(GR);meo=r($ot,"ReformerConfig"),$ot.forEach(t),geo=r(hLe," (Reformer model)"),hLe.forEach(t),heo=i(L),ng=n(L,"LI",{});var pLe=s(ng);mne=n(pLe,"STRONG",{});var kot=s(mne);peo=r(kot,"regnet"),kot.forEach(t),_eo=r(pLe," \u2014 "),OR=n(pLe,"A",{href:!0});var Sot=s(OR);ueo=r(Sot,"RegNetConfig"),Sot.forEach(t),beo=r(pLe," (RegNet model)"),pLe.forEach(t),veo=i(L),sg=n(L,"LI",{});var _Le=s(sg);gne=n(_Le,"STRONG",{});var Rot=s(gne);Feo=r(Rot,"rembert"),Rot.forEach(t),Teo=r(_Le," \u2014 "),VR=n(_Le,"A",{href:!0});var Pot=s(VR);Meo=r(Pot,"RemBertConfig"),Pot.forEach(t),Eeo=r(_Le," (RemBERT model)"),_Le.forEach(t),Ceo=i(L),lg=n(L,"LI",{});var uLe=s(lg);hne=n(uLe,"STRONG",{});var Bot=s(hne);weo=r(Bot,"resnet"),Bot.forEach(t),Aeo=r(uLe," \u2014 "),XR=n(uLe,"A",{href:!0});var Iot=s(XR);Leo=r(Iot,"ResNetConfig"),Iot.forEach(t),yeo=r(uLe," (ResNet model)"),uLe.forEach(t),xeo=i(L),ig=n(L,"LI",{});var bLe=s(ig);pne=n(bLe,"STRONG",{});var Not=s(pne);$eo=r(Not,"retribert"),Not.forEach(t),keo=r(bLe," \u2014 "),zR=n(bLe,"A",{href:!0});var qot=s(zR);Seo=r(qot,"RetriBertConfig"),qot.forEach(t),Reo=r(bLe," (RetriBERT model)"),bLe.forEach(t),Peo=i(L),dg=n(L,"LI",{});var vLe=s(dg);_ne=n(vLe,"STRONG",{});var jot=s(_ne);Beo=r(jot,"roberta"),jot.forEach(t),Ieo=r(vLe," \u2014 "),QR=n(vLe,"A",{href:!0});var Dot=s(QR);Neo=r(Dot,"RobertaConfig"),Dot.forEach(t),qeo=r(vLe," (RoBERTa model)"),vLe.forEach(t),jeo=i(L),cg=n(L,"LI",{});var FLe=s(cg);une=n(FLe,"STRONG",{});var Got=s(une);Deo=r(Got,"roformer"),Got.forEach(t),Geo=r(FLe," \u2014 "),WR=n(FLe,"A",{href:!0});var Oot=s(WR);Oeo=r(Oot,"RoFormerConfig"),Oot.forEach(t),Veo=r(FLe," (RoFormer model)"),FLe.forEach(t),Xeo=i(L),fg=n(L,"LI",{});var TLe=s(fg);bne=n(TLe,"STRONG",{});var Vot=s(bne);zeo=r(Vot,"segformer"),Vot.forEach(t),Qeo=r(TLe," \u2014 "),HR=n(TLe,"A",{href:!0});var Xot=s(HR);Weo=r(Xot,"SegformerConfig"),Xot.forEach(t),Heo=r(TLe," (SegFormer model)"),TLe.forEach(t),Ueo=i(L),mg=n(L,"LI",{});var MLe=s(mg);vne=n(MLe,"STRONG",{});var zot=s(vne);Jeo=r(zot,"sew"),zot.forEach(t),Yeo=r(MLe," \u2014 "),UR=n(MLe,"A",{href:!0});var Qot=s(UR);Keo=r(Qot,"SEWConfig"),Qot.forEach(t),Zeo=r(MLe," (SEW model)"),MLe.forEach(t),eoo=i(L),gg=n(L,"LI",{});var ELe=s(gg);Fne=n(ELe,"STRONG",{});var Wot=s(Fne);ooo=r(Wot,"sew-d"),Wot.forEach(t),roo=r(ELe," \u2014 "),JR=n(ELe,"A",{href:!0});var Hot=s(JR);too=r(Hot,"SEWDConfig"),Hot.forEach(t),aoo=r(ELe," (SEW-D model)"),ELe.forEach(t),noo=i(L),hg=n(L,"LI",{});var CLe=s(hg);Tne=n(CLe,"STRONG",{});var Uot=s(Tne);soo=r(Uot,"speech-encoder-decoder"),Uot.forEach(t),loo=r(CLe," \u2014 "),YR=n(CLe,"A",{href:!0});var Jot=s(YR);ioo=r(Jot,"SpeechEncoderDecoderConfig"),Jot.forEach(t),doo=r(CLe," (Speech Encoder decoder model)"),CLe.forEach(t),coo=i(L),pg=n(L,"LI",{});var wLe=s(pg);Mne=n(wLe,"STRONG",{});var Yot=s(Mne);foo=r(Yot,"speech_to_text"),Yot.forEach(t),moo=r(wLe," \u2014 "),KR=n(wLe,"A",{href:!0});var Kot=s(KR);goo=r(Kot,"Speech2TextConfig"),Kot.forEach(t),hoo=r(wLe," (Speech2Text model)"),wLe.forEach(t),poo=i(L),_g=n(L,"LI",{});var ALe=s(_g);Ene=n(ALe,"STRONG",{});var Zot=s(Ene);_oo=r(Zot,"speech_to_text_2"),Zot.forEach(t),uoo=r(ALe," \u2014 "),ZR=n(ALe,"A",{href:!0});var ert=s(ZR);boo=r(ert,"Speech2Text2Config"),ert.forEach(t),voo=r(ALe," (Speech2Text2 model)"),ALe.forEach(t),Foo=i(L),ug=n(L,"LI",{});var LLe=s(ug);Cne=n(LLe,"STRONG",{});var ort=s(Cne);Too=r(ort,"splinter"),ort.forEach(t),Moo=r(LLe," \u2014 "),eP=n(LLe,"A",{href:!0});var rrt=s(eP);Eoo=r(rrt,"SplinterConfig"),rrt.forEach(t),Coo=r(LLe," (Splinter model)"),LLe.forEach(t),woo=i(L),bg=n(L,"LI",{});var yLe=s(bg);wne=n(yLe,"STRONG",{});var trt=s(wne);Aoo=r(trt,"squeezebert"),trt.forEach(t),Loo=r(yLe," \u2014 "),oP=n(yLe,"A",{href:!0});var art=s(oP);yoo=r(art,"SqueezeBertConfig"),art.forEach(t),xoo=r(yLe," (SqueezeBERT model)"),yLe.forEach(t),$oo=i(L),vg=n(L,"LI",{});var xLe=s(vg);Ane=n(xLe,"STRONG",{});var nrt=s(Ane);koo=r(nrt,"swin"),nrt.forEach(t),Soo=r(xLe," \u2014 "),rP=n(xLe,"A",{href:!0});var srt=s(rP);Roo=r(srt,"SwinConfig"),srt.forEach(t),Poo=r(xLe," (Swin Transformer model)"),xLe.forEach(t),Boo=i(L),Fg=n(L,"LI",{});var $Le=s(Fg);Lne=n($Le,"STRONG",{});var lrt=s(Lne);Ioo=r(lrt,"t5"),lrt.forEach(t),Noo=r($Le," \u2014 "),tP=n($Le,"A",{href:!0});var irt=s(tP);qoo=r(irt,"T5Config"),irt.forEach(t),joo=r($Le," (T5 model)"),$Le.forEach(t),Doo=i(L),Tg=n(L,"LI",{});var kLe=s(Tg);yne=n(kLe,"STRONG",{});var drt=s(yne);Goo=r(drt,"tapas"),drt.forEach(t),Ooo=r(kLe," \u2014 "),aP=n(kLe,"A",{href:!0});var crt=s(aP);Voo=r(crt,"TapasConfig"),crt.forEach(t),Xoo=r(kLe," (TAPAS model)"),kLe.forEach(t),zoo=i(L),Mg=n(L,"LI",{});var SLe=s(Mg);xne=n(SLe,"STRONG",{});var frt=s(xne);Qoo=r(frt,"trajectory_transformer"),frt.forEach(t),Woo=r(SLe," \u2014 "),nP=n(SLe,"A",{href:!0});var mrt=s(nP);Hoo=r(mrt,"TrajectoryTransformerConfig"),mrt.forEach(t),Uoo=r(SLe," (Trajectory Transformer model)"),SLe.forEach(t),Joo=i(L),Eg=n(L,"LI",{});var RLe=s(Eg);$ne=n(RLe,"STRONG",{});var grt=s($ne);Yoo=r(grt,"transfo-xl"),grt.forEach(t),Koo=r(RLe," \u2014 "),sP=n(RLe,"A",{href:!0});var hrt=s(sP);Zoo=r(hrt,"TransfoXLConfig"),hrt.forEach(t),ero=r(RLe," (Transformer-XL model)"),RLe.forEach(t),oro=i(L),Cg=n(L,"LI",{});var PLe=s(Cg);kne=n(PLe,"STRONG",{});var prt=s(kne);rro=r(prt,"trocr"),prt.forEach(t),tro=r(PLe," \u2014 "),lP=n(PLe,"A",{href:!0});var _rt=s(lP);aro=r(_rt,"TrOCRConfig"),_rt.forEach(t),nro=r(PLe," (TrOCR model)"),PLe.forEach(t),sro=i(L),wg=n(L,"LI",{});var BLe=s(wg);Sne=n(BLe,"STRONG",{});var urt=s(Sne);lro=r(urt,"unispeech"),urt.forEach(t),iro=r(BLe," \u2014 "),iP=n(BLe,"A",{href:!0});var brt=s(iP);dro=r(brt,"UniSpeechConfig"),brt.forEach(t),cro=r(BLe," (UniSpeech model)"),BLe.forEach(t),fro=i(L),Ag=n(L,"LI",{});var ILe=s(Ag);Rne=n(ILe,"STRONG",{});var vrt=s(Rne);mro=r(vrt,"unispeech-sat"),vrt.forEach(t),gro=r(ILe," \u2014 "),dP=n(ILe,"A",{href:!0});var Frt=s(dP);hro=r(Frt,"UniSpeechSatConfig"),Frt.forEach(t),pro=r(ILe," (UniSpeechSat model)"),ILe.forEach(t),_ro=i(L),Lg=n(L,"LI",{});var NLe=s(Lg);Pne=n(NLe,"STRONG",{});var Trt=s(Pne);uro=r(Trt,"van"),Trt.forEach(t),bro=r(NLe," \u2014 "),cP=n(NLe,"A",{href:!0});var Mrt=s(cP);vro=r(Mrt,"VanConfig"),Mrt.forEach(t),Fro=r(NLe," (VAN model)"),NLe.forEach(t),Tro=i(L),yg=n(L,"LI",{});var qLe=s(yg);Bne=n(qLe,"STRONG",{});var Ert=s(Bne);Mro=r(Ert,"vilt"),Ert.forEach(t),Ero=r(qLe," \u2014 "),fP=n(qLe,"A",{href:!0});var Crt=s(fP);Cro=r(Crt,"ViltConfig"),Crt.forEach(t),wro=r(qLe," (ViLT model)"),qLe.forEach(t),Aro=i(L),xg=n(L,"LI",{});var jLe=s(xg);Ine=n(jLe,"STRONG",{});var wrt=s(Ine);Lro=r(wrt,"vision-encoder-decoder"),wrt.forEach(t),yro=r(jLe," \u2014 "),mP=n(jLe,"A",{href:!0});var Art=s(mP);xro=r(Art,"VisionEncoderDecoderConfig"),Art.forEach(t),$ro=r(jLe," (Vision Encoder decoder model)"),jLe.forEach(t),kro=i(L),$g=n(L,"LI",{});var DLe=s($g);Nne=n(DLe,"STRONG",{});var Lrt=s(Nne);Sro=r(Lrt,"vision-text-dual-encoder"),Lrt.forEach(t),Rro=r(DLe," \u2014 "),gP=n(DLe,"A",{href:!0});var yrt=s(gP);Pro=r(yrt,"VisionTextDualEncoderConfig"),yrt.forEach(t),Bro=r(DLe," (VisionTextDualEncoder model)"),DLe.forEach(t),Iro=i(L),kg=n(L,"LI",{});var GLe=s(kg);qne=n(GLe,"STRONG",{});var xrt=s(qne);Nro=r(xrt,"visual_bert"),xrt.forEach(t),qro=r(GLe," \u2014 "),hP=n(GLe,"A",{href:!0});var $rt=s(hP);jro=r($rt,"VisualBertConfig"),$rt.forEach(t),Dro=r(GLe," (VisualBERT model)"),GLe.forEach(t),Gro=i(L),Sg=n(L,"LI",{});var OLe=s(Sg);jne=n(OLe,"STRONG",{});var krt=s(jne);Oro=r(krt,"vit"),krt.forEach(t),Vro=r(OLe," \u2014 "),pP=n(OLe,"A",{href:!0});var Srt=s(pP);Xro=r(Srt,"ViTConfig"),Srt.forEach(t),zro=r(OLe," (ViT model)"),OLe.forEach(t),Qro=i(L),Rg=n(L,"LI",{});var VLe=s(Rg);Dne=n(VLe,"STRONG",{});var Rrt=s(Dne);Wro=r(Rrt,"vit_mae"),Rrt.forEach(t),Hro=r(VLe," \u2014 "),_P=n(VLe,"A",{href:!0});var Prt=s(_P);Uro=r(Prt,"ViTMAEConfig"),Prt.forEach(t),Jro=r(VLe," (ViTMAE model)"),VLe.forEach(t),Yro=i(L),Pg=n(L,"LI",{});var XLe=s(Pg);Gne=n(XLe,"STRONG",{});var Brt=s(Gne);Kro=r(Brt,"wav2vec2"),Brt.forEach(t),Zro=r(XLe," \u2014 "),uP=n(XLe,"A",{href:!0});var Irt=s(uP);eto=r(Irt,"Wav2Vec2Config"),Irt.forEach(t),oto=r(XLe," (Wav2Vec2 model)"),XLe.forEach(t),rto=i(L),Bg=n(L,"LI",{});var zLe=s(Bg);One=n(zLe,"STRONG",{});var Nrt=s(One);tto=r(Nrt,"wav2vec2-conformer"),Nrt.forEach(t),ato=r(zLe," \u2014 "),bP=n(zLe,"A",{href:!0});var qrt=s(bP);nto=r(qrt,"Wav2Vec2ConformerConfig"),qrt.forEach(t),sto=r(zLe," (Wav2Vec2-Conformer model)"),zLe.forEach(t),lto=i(L),Ig=n(L,"LI",{});var QLe=s(Ig);Vne=n(QLe,"STRONG",{});var jrt=s(Vne);ito=r(jrt,"wavlm"),jrt.forEach(t),dto=r(QLe," \u2014 "),vP=n(QLe,"A",{href:!0});var Drt=s(vP);cto=r(Drt,"WavLMConfig"),Drt.forEach(t),fto=r(QLe," (WavLM model)"),QLe.forEach(t),mto=i(L),Ng=n(L,"LI",{});var WLe=s(Ng);Xne=n(WLe,"STRONG",{});var Grt=s(Xne);gto=r(Grt,"xglm"),Grt.forEach(t),hto=r(WLe," \u2014 "),FP=n(WLe,"A",{href:!0});var Ort=s(FP);pto=r(Ort,"XGLMConfig"),Ort.forEach(t),_to=r(WLe," (XGLM model)"),WLe.forEach(t),uto=i(L),qg=n(L,"LI",{});var HLe=s(qg);zne=n(HLe,"STRONG",{});var Vrt=s(zne);bto=r(Vrt,"xlm"),Vrt.forEach(t),vto=r(HLe," \u2014 "),TP=n(HLe,"A",{href:!0});var Xrt=s(TP);Fto=r(Xrt,"XLMConfig"),Xrt.forEach(t),Tto=r(HLe," (XLM model)"),HLe.forEach(t),Mto=i(L),jg=n(L,"LI",{});var ULe=s(jg);Qne=n(ULe,"STRONG",{});var zrt=s(Qne);Eto=r(zrt,"xlm-prophetnet"),zrt.forEach(t),Cto=r(ULe," \u2014 "),MP=n(ULe,"A",{href:!0});var Qrt=s(MP);wto=r(Qrt,"XLMProphetNetConfig"),Qrt.forEach(t),Ato=r(ULe," (XLM-ProphetNet model)"),ULe.forEach(t),Lto=i(L),Dg=n(L,"LI",{});var JLe=s(Dg);Wne=n(JLe,"STRONG",{});var Wrt=s(Wne);yto=r(Wrt,"xlm-roberta"),Wrt.forEach(t),xto=r(JLe," \u2014 "),EP=n(JLe,"A",{href:!0});var Hrt=s(EP);$to=r(Hrt,"XLMRobertaConfig"),Hrt.forEach(t),kto=r(JLe," (XLM-RoBERTa model)"),JLe.forEach(t),Sto=i(L),Gg=n(L,"LI",{});var YLe=s(Gg);Hne=n(YLe,"STRONG",{});var Urt=s(Hne);Rto=r(Urt,"xlm-roberta-xl"),Urt.forEach(t),Pto=r(YLe," \u2014 "),CP=n(YLe,"A",{href:!0});var Jrt=s(CP);Bto=r(Jrt,"XLMRobertaXLConfig"),Jrt.forEach(t),Ito=r(YLe," (XLM-RoBERTa-XL model)"),YLe.forEach(t),Nto=i(L),Og=n(L,"LI",{});var KLe=s(Og);Une=n(KLe,"STRONG",{});var Yrt=s(Une);qto=r(Yrt,"xlnet"),Yrt.forEach(t),jto=r(KLe," \u2014 "),wP=n(KLe,"A",{href:!0});var Krt=s(wP);Dto=r(Krt,"XLNetConfig"),Krt.forEach(t),Gto=r(KLe," (XLNet model)"),KLe.forEach(t),Oto=i(L),Vg=n(L,"LI",{});var ZLe=s(Vg);Jne=n(ZLe,"STRONG",{});var Zrt=s(Jne);Vto=r(Zrt,"yolos"),Zrt.forEach(t),Xto=r(ZLe," \u2014 "),AP=n(ZLe,"A",{href:!0});var ett=s(AP);zto=r(ett,"YolosConfig"),ett.forEach(t),Qto=r(ZLe," (YOLOS model)"),ZLe.forEach(t),Wto=i(L),Xg=n(L,"LI",{});var eye=s(Xg);Yne=n(eye,"STRONG",{});var ott=s(Yne);Hto=r(ott,"yoso"),ott.forEach(t),Uto=r(eye," \u2014 "),LP=n(eye,"A",{href:!0});var rtt=s(LP);Jto=r(rtt,"YosoConfig"),rtt.forEach(t),Yto=r(eye," (YOSO model)"),eye.forEach(t),L.forEach(t),Kto=i(tt),T(zg.$$.fragment,tt),tt.forEach(t),Zto=i(rt),Qg=n(rt,"DIV",{class:!0});var xXe=s(Qg);T(zL.$$.fragment,xXe),eao=i(xXe),Kne=n(xXe,"P",{});var ttt=s(Kne);oao=r(ttt,"Register a new configuration for this class."),ttt.forEach(t),xXe.forEach(t),rt.forEach(t),$Oe=i(f),Ri=n(f,"H2",{class:!0});var $Xe=s(Ri);Wg=n($Xe,"A",{id:!0,class:!0,href:!0});var att=s(Wg);Zne=n(att,"SPAN",{});var ntt=s(Zne);T(QL.$$.fragment,ntt),ntt.forEach(t),att.forEach(t),rao=i($Xe),ese=n($Xe,"SPAN",{});var stt=s(ese);tao=r(stt,"AutoTokenizer"),stt.forEach(t),$Xe.forEach(t),kOe=i(f),Ao=n(f,"DIV",{class:!0});var Us=s(Ao);T(WL.$$.fragment,Us),aao=i(Us),HL=n(Us,"P",{});var kXe=s(HL);nao=r(kXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yP=n(kXe,"A",{href:!0});var ltt=s(yP);sao=r(ltt,"AutoTokenizer.from_pretrained()"),ltt.forEach(t),lao=r(kXe," class method."),kXe.forEach(t),iao=i(Us),UL=n(Us,"P",{});var SXe=s(UL);dao=r(SXe,"This class cannot be instantiated directly using "),ose=n(SXe,"CODE",{});var itt=s(ose);cao=r(itt,"__init__()"),itt.forEach(t),fao=r(SXe," (throws an error)."),SXe.forEach(t),mao=i(Us),Lr=n(Us,"DIV",{class:!0});var Js=s(Lr);T(JL.$$.fragment,Js),gao=i(Js),rse=n(Js,"P",{});var dtt=s(rse);hao=r(dtt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dtt.forEach(t),pao=i(Js),ka=n(Js,"P",{});var qA=s(ka);_ao=r(qA,"The tokenizer class to instantiate is selected based on the "),tse=n(qA,"CODE",{});var ctt=s(tse);uao=r(ctt,"model_type"),ctt.forEach(t),bao=r(qA,` property of the config object (either
passed as an argument or loaded from `),ase=n(qA,"CODE",{});var ftt=s(ase);vao=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),Fao=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=n(qA,"CODE",{});var mtt=s(nse);Tao=r(mtt,"pretrained_model_name_or_path"),mtt.forEach(t),Mao=r(qA,":"),qA.forEach(t),Eao=i(Js),k=n(Js,"UL",{});var S=s(k);qn=n(S,"LI",{});var rk=s(qn);sse=n(rk,"STRONG",{});var gtt=s(sse);Cao=r(gtt,"albert"),gtt.forEach(t),wao=r(rk," \u2014 "),xP=n(rk,"A",{href:!0});var htt=s(xP);Aao=r(htt,"AlbertTokenizer"),htt.forEach(t),Lao=r(rk," or "),$P=n(rk,"A",{href:!0});var ptt=s($P);yao=r(ptt,"AlbertTokenizerFast"),ptt.forEach(t),xao=r(rk," (ALBERT model)"),rk.forEach(t),$ao=i(S),jn=n(S,"LI",{});var tk=s(jn);lse=n(tk,"STRONG",{});var _tt=s(lse);kao=r(_tt,"bart"),_tt.forEach(t),Sao=r(tk," \u2014 "),kP=n(tk,"A",{href:!0});var utt=s(kP);Rao=r(utt,"BartTokenizer"),utt.forEach(t),Pao=r(tk," or "),SP=n(tk,"A",{href:!0});var btt=s(SP);Bao=r(btt,"BartTokenizerFast"),btt.forEach(t),Iao=r(tk," (BART model)"),tk.forEach(t),Nao=i(S),Dn=n(S,"LI",{});var ak=s(Dn);ise=n(ak,"STRONG",{});var vtt=s(ise);qao=r(vtt,"barthez"),vtt.forEach(t),jao=r(ak," \u2014 "),RP=n(ak,"A",{href:!0});var Ftt=s(RP);Dao=r(Ftt,"BarthezTokenizer"),Ftt.forEach(t),Gao=r(ak," or "),PP=n(ak,"A",{href:!0});var Ttt=s(PP);Oao=r(Ttt,"BarthezTokenizerFast"),Ttt.forEach(t),Vao=r(ak," (BARThez model)"),ak.forEach(t),Xao=i(S),Hg=n(S,"LI",{});var oye=s(Hg);dse=n(oye,"STRONG",{});var Mtt=s(dse);zao=r(Mtt,"bartpho"),Mtt.forEach(t),Qao=r(oye," \u2014 "),BP=n(oye,"A",{href:!0});var Ett=s(BP);Wao=r(Ett,"BartphoTokenizer"),Ett.forEach(t),Hao=r(oye," (BARTpho model)"),oye.forEach(t),Uao=i(S),Gn=n(S,"LI",{});var nk=s(Gn);cse=n(nk,"STRONG",{});var Ctt=s(cse);Jao=r(Ctt,"bert"),Ctt.forEach(t),Yao=r(nk," \u2014 "),IP=n(nk,"A",{href:!0});var wtt=s(IP);Kao=r(wtt,"BertTokenizer"),wtt.forEach(t),Zao=r(nk," or "),NP=n(nk,"A",{href:!0});var Att=s(NP);eno=r(Att,"BertTokenizerFast"),Att.forEach(t),ono=r(nk," (BERT model)"),nk.forEach(t),rno=i(S),Ug=n(S,"LI",{});var rye=s(Ug);fse=n(rye,"STRONG",{});var Ltt=s(fse);tno=r(Ltt,"bert-generation"),Ltt.forEach(t),ano=r(rye," \u2014 "),qP=n(rye,"A",{href:!0});var ytt=s(qP);nno=r(ytt,"BertGenerationTokenizer"),ytt.forEach(t),sno=r(rye," (Bert Generation model)"),rye.forEach(t),lno=i(S),Jg=n(S,"LI",{});var tye=s(Jg);mse=n(tye,"STRONG",{});var xtt=s(mse);ino=r(xtt,"bert-japanese"),xtt.forEach(t),dno=r(tye," \u2014 "),jP=n(tye,"A",{href:!0});var $tt=s(jP);cno=r($tt,"BertJapaneseTokenizer"),$tt.forEach(t),fno=r(tye," (BertJapanese model)"),tye.forEach(t),mno=i(S),Yg=n(S,"LI",{});var aye=s(Yg);gse=n(aye,"STRONG",{});var ktt=s(gse);gno=r(ktt,"bertweet"),ktt.forEach(t),hno=r(aye," \u2014 "),DP=n(aye,"A",{href:!0});var Stt=s(DP);pno=r(Stt,"BertweetTokenizer"),Stt.forEach(t),_no=r(aye," (BERTweet model)"),aye.forEach(t),uno=i(S),On=n(S,"LI",{});var sk=s(On);hse=n(sk,"STRONG",{});var Rtt=s(hse);bno=r(Rtt,"big_bird"),Rtt.forEach(t),vno=r(sk," \u2014 "),GP=n(sk,"A",{href:!0});var Ptt=s(GP);Fno=r(Ptt,"BigBirdTokenizer"),Ptt.forEach(t),Tno=r(sk," or "),OP=n(sk,"A",{href:!0});var Btt=s(OP);Mno=r(Btt,"BigBirdTokenizerFast"),Btt.forEach(t),Eno=r(sk," (BigBird model)"),sk.forEach(t),Cno=i(S),Vn=n(S,"LI",{});var lk=s(Vn);pse=n(lk,"STRONG",{});var Itt=s(pse);wno=r(Itt,"bigbird_pegasus"),Itt.forEach(t),Ano=r(lk," \u2014 "),VP=n(lk,"A",{href:!0});var Ntt=s(VP);Lno=r(Ntt,"PegasusTokenizer"),Ntt.forEach(t),yno=r(lk," or "),XP=n(lk,"A",{href:!0});var qtt=s(XP);xno=r(qtt,"PegasusTokenizerFast"),qtt.forEach(t),$no=r(lk," (BigBird-Pegasus model)"),lk.forEach(t),kno=i(S),Xn=n(S,"LI",{});var ik=s(Xn);_se=n(ik,"STRONG",{});var jtt=s(_se);Sno=r(jtt,"blenderbot"),jtt.forEach(t),Rno=r(ik," \u2014 "),zP=n(ik,"A",{href:!0});var Dtt=s(zP);Pno=r(Dtt,"BlenderbotTokenizer"),Dtt.forEach(t),Bno=r(ik," or "),QP=n(ik,"A",{href:!0});var Gtt=s(QP);Ino=r(Gtt,"BlenderbotTokenizerFast"),Gtt.forEach(t),Nno=r(ik," (Blenderbot model)"),ik.forEach(t),qno=i(S),Kg=n(S,"LI",{});var nye=s(Kg);use=n(nye,"STRONG",{});var Ott=s(use);jno=r(Ott,"blenderbot-small"),Ott.forEach(t),Dno=r(nye," \u2014 "),WP=n(nye,"A",{href:!0});var Vtt=s(WP);Gno=r(Vtt,"BlenderbotSmallTokenizer"),Vtt.forEach(t),Ono=r(nye," (BlenderbotSmall model)"),nye.forEach(t),Vno=i(S),Zg=n(S,"LI",{});var sye=s(Zg);bse=n(sye,"STRONG",{});var Xtt=s(bse);Xno=r(Xtt,"bloom"),Xtt.forEach(t),zno=r(sye," \u2014 "),HP=n(sye,"A",{href:!0});var ztt=s(HP);Qno=r(ztt,"BloomTokenizerFast"),ztt.forEach(t),Wno=r(sye," (BLOOM model)"),sye.forEach(t),Hno=i(S),eh=n(S,"LI",{});var lye=s(eh);vse=n(lye,"STRONG",{});var Qtt=s(vse);Uno=r(Qtt,"byt5"),Qtt.forEach(t),Jno=r(lye," \u2014 "),UP=n(lye,"A",{href:!0});var Wtt=s(UP);Yno=r(Wtt,"ByT5Tokenizer"),Wtt.forEach(t),Kno=r(lye," (ByT5 model)"),lye.forEach(t),Zno=i(S),zn=n(S,"LI",{});var dk=s(zn);Fse=n(dk,"STRONG",{});var Htt=s(Fse);eso=r(Htt,"camembert"),Htt.forEach(t),oso=r(dk," \u2014 "),JP=n(dk,"A",{href:!0});var Utt=s(JP);rso=r(Utt,"CamembertTokenizer"),Utt.forEach(t),tso=r(dk," or "),YP=n(dk,"A",{href:!0});var Jtt=s(YP);aso=r(Jtt,"CamembertTokenizerFast"),Jtt.forEach(t),nso=r(dk," (CamemBERT model)"),dk.forEach(t),sso=i(S),oh=n(S,"LI",{});var iye=s(oh);Tse=n(iye,"STRONG",{});var Ytt=s(Tse);lso=r(Ytt,"canine"),Ytt.forEach(t),iso=r(iye," \u2014 "),KP=n(iye,"A",{href:!0});var Ktt=s(KP);dso=r(Ktt,"CanineTokenizer"),Ktt.forEach(t),cso=r(iye," (CANINE model)"),iye.forEach(t),fso=i(S),Qn=n(S,"LI",{});var ck=s(Qn);Mse=n(ck,"STRONG",{});var Ztt=s(Mse);mso=r(Ztt,"clip"),Ztt.forEach(t),gso=r(ck," \u2014 "),ZP=n(ck,"A",{href:!0});var eat=s(ZP);hso=r(eat,"CLIPTokenizer"),eat.forEach(t),pso=r(ck," or "),eB=n(ck,"A",{href:!0});var oat=s(eB);_so=r(oat,"CLIPTokenizerFast"),oat.forEach(t),uso=r(ck," (CLIP model)"),ck.forEach(t),bso=i(S),Wn=n(S,"LI",{});var fk=s(Wn);Ese=n(fk,"STRONG",{});var rat=s(Ese);vso=r(rat,"codegen"),rat.forEach(t),Fso=r(fk," \u2014 "),oB=n(fk,"A",{href:!0});var tat=s(oB);Tso=r(tat,"CodeGenTokenizer"),tat.forEach(t),Mso=r(fk," or "),rB=n(fk,"A",{href:!0});var aat=s(rB);Eso=r(aat,"CodeGenTokenizerFast"),aat.forEach(t),Cso=r(fk," (CodeGen model)"),fk.forEach(t),wso=i(S),Hn=n(S,"LI",{});var mk=s(Hn);Cse=n(mk,"STRONG",{});var nat=s(Cse);Aso=r(nat,"convbert"),nat.forEach(t),Lso=r(mk," \u2014 "),tB=n(mk,"A",{href:!0});var sat=s(tB);yso=r(sat,"ConvBertTokenizer"),sat.forEach(t),xso=r(mk," or "),aB=n(mk,"A",{href:!0});var lat=s(aB);$so=r(lat,"ConvBertTokenizerFast"),lat.forEach(t),kso=r(mk," (ConvBERT model)"),mk.forEach(t),Sso=i(S),Un=n(S,"LI",{});var gk=s(Un);wse=n(gk,"STRONG",{});var iat=s(wse);Rso=r(iat,"cpm"),iat.forEach(t),Pso=r(gk," \u2014 "),nB=n(gk,"A",{href:!0});var dat=s(nB);Bso=r(dat,"CpmTokenizer"),dat.forEach(t),Iso=r(gk," or "),sB=n(gk,"A",{href:!0});var cat=s(sB);Nso=r(cat,"CpmTokenizerFast"),cat.forEach(t),qso=r(gk," (CPM model)"),gk.forEach(t),jso=i(S),rh=n(S,"LI",{});var dye=s(rh);Ase=n(dye,"STRONG",{});var fat=s(Ase);Dso=r(fat,"ctrl"),fat.forEach(t),Gso=r(dye," \u2014 "),lB=n(dye,"A",{href:!0});var mat=s(lB);Oso=r(mat,"CTRLTokenizer"),mat.forEach(t),Vso=r(dye," (CTRL model)"),dye.forEach(t),Xso=i(S),Jn=n(S,"LI",{});var hk=s(Jn);Lse=n(hk,"STRONG",{});var gat=s(Lse);zso=r(gat,"data2vec-text"),gat.forEach(t),Qso=r(hk," \u2014 "),iB=n(hk,"A",{href:!0});var hat=s(iB);Wso=r(hat,"RobertaTokenizer"),hat.forEach(t),Hso=r(hk," or "),dB=n(hk,"A",{href:!0});var pat=s(dB);Uso=r(pat,"RobertaTokenizerFast"),pat.forEach(t),Jso=r(hk," (Data2VecText model)"),hk.forEach(t),Yso=i(S),Yn=n(S,"LI",{});var pk=s(Yn);yse=n(pk,"STRONG",{});var _at=s(yse);Kso=r(_at,"deberta"),_at.forEach(t),Zso=r(pk," \u2014 "),cB=n(pk,"A",{href:!0});var uat=s(cB);elo=r(uat,"DebertaTokenizer"),uat.forEach(t),olo=r(pk," or "),fB=n(pk,"A",{href:!0});var bat=s(fB);rlo=r(bat,"DebertaTokenizerFast"),bat.forEach(t),tlo=r(pk," (DeBERTa model)"),pk.forEach(t),alo=i(S),Kn=n(S,"LI",{});var _k=s(Kn);xse=n(_k,"STRONG",{});var vat=s(xse);nlo=r(vat,"deberta-v2"),vat.forEach(t),slo=r(_k," \u2014 "),mB=n(_k,"A",{href:!0});var Fat=s(mB);llo=r(Fat,"DebertaV2Tokenizer"),Fat.forEach(t),ilo=r(_k," or "),gB=n(_k,"A",{href:!0});var Tat=s(gB);dlo=r(Tat,"DebertaV2TokenizerFast"),Tat.forEach(t),clo=r(_k," (DeBERTa-v2 model)"),_k.forEach(t),flo=i(S),Zn=n(S,"LI",{});var uk=s(Zn);$se=n(uk,"STRONG",{});var Mat=s($se);mlo=r(Mat,"distilbert"),Mat.forEach(t),glo=r(uk," \u2014 "),hB=n(uk,"A",{href:!0});var Eat=s(hB);hlo=r(Eat,"DistilBertTokenizer"),Eat.forEach(t),plo=r(uk," or "),pB=n(uk,"A",{href:!0});var Cat=s(pB);_lo=r(Cat,"DistilBertTokenizerFast"),Cat.forEach(t),ulo=r(uk," (DistilBERT model)"),uk.forEach(t),blo=i(S),es=n(S,"LI",{});var bk=s(es);kse=n(bk,"STRONG",{});var wat=s(kse);vlo=r(wat,"dpr"),wat.forEach(t),Flo=r(bk," \u2014 "),_B=n(bk,"A",{href:!0});var Aat=s(_B);Tlo=r(Aat,"DPRQuestionEncoderTokenizer"),Aat.forEach(t),Mlo=r(bk," or "),uB=n(bk,"A",{href:!0});var Lat=s(uB);Elo=r(Lat,"DPRQuestionEncoderTokenizerFast"),Lat.forEach(t),Clo=r(bk," (DPR model)"),bk.forEach(t),wlo=i(S),os=n(S,"LI",{});var vk=s(os);Sse=n(vk,"STRONG",{});var yat=s(Sse);Alo=r(yat,"electra"),yat.forEach(t),Llo=r(vk," \u2014 "),bB=n(vk,"A",{href:!0});var xat=s(bB);ylo=r(xat,"ElectraTokenizer"),xat.forEach(t),xlo=r(vk," or "),vB=n(vk,"A",{href:!0});var $at=s(vB);$lo=r($at,"ElectraTokenizerFast"),$at.forEach(t),klo=r(vk," (ELECTRA model)"),vk.forEach(t),Slo=i(S),th=n(S,"LI",{});var cye=s(th);Rse=n(cye,"STRONG",{});var kat=s(Rse);Rlo=r(kat,"flaubert"),kat.forEach(t),Plo=r(cye," \u2014 "),FB=n(cye,"A",{href:!0});var Sat=s(FB);Blo=r(Sat,"FlaubertTokenizer"),Sat.forEach(t),Ilo=r(cye," (FlauBERT model)"),cye.forEach(t),Nlo=i(S),rs=n(S,"LI",{});var Fk=s(rs);Pse=n(Fk,"STRONG",{});var Rat=s(Pse);qlo=r(Rat,"fnet"),Rat.forEach(t),jlo=r(Fk," \u2014 "),TB=n(Fk,"A",{href:!0});var Pat=s(TB);Dlo=r(Pat,"FNetTokenizer"),Pat.forEach(t),Glo=r(Fk," or "),MB=n(Fk,"A",{href:!0});var Bat=s(MB);Olo=r(Bat,"FNetTokenizerFast"),Bat.forEach(t),Vlo=r(Fk," (FNet model)"),Fk.forEach(t),Xlo=i(S),ah=n(S,"LI",{});var fye=s(ah);Bse=n(fye,"STRONG",{});var Iat=s(Bse);zlo=r(Iat,"fsmt"),Iat.forEach(t),Qlo=r(fye," \u2014 "),EB=n(fye,"A",{href:!0});var Nat=s(EB);Wlo=r(Nat,"FSMTTokenizer"),Nat.forEach(t),Hlo=r(fye," (FairSeq Machine-Translation model)"),fye.forEach(t),Ulo=i(S),ts=n(S,"LI",{});var Tk=s(ts);Ise=n(Tk,"STRONG",{});var qat=s(Ise);Jlo=r(qat,"funnel"),qat.forEach(t),Ylo=r(Tk," \u2014 "),CB=n(Tk,"A",{href:!0});var jat=s(CB);Klo=r(jat,"FunnelTokenizer"),jat.forEach(t),Zlo=r(Tk," or "),wB=n(Tk,"A",{href:!0});var Dat=s(wB);eio=r(Dat,"FunnelTokenizerFast"),Dat.forEach(t),oio=r(Tk," (Funnel Transformer model)"),Tk.forEach(t),rio=i(S),as=n(S,"LI",{});var Mk=s(as);Nse=n(Mk,"STRONG",{});var Gat=s(Nse);tio=r(Gat,"gpt2"),Gat.forEach(t),aio=r(Mk," \u2014 "),AB=n(Mk,"A",{href:!0});var Oat=s(AB);nio=r(Oat,"GPT2Tokenizer"),Oat.forEach(t),sio=r(Mk," or "),LB=n(Mk,"A",{href:!0});var Vat=s(LB);lio=r(Vat,"GPT2TokenizerFast"),Vat.forEach(t),iio=r(Mk," (OpenAI GPT-2 model)"),Mk.forEach(t),dio=i(S),ns=n(S,"LI",{});var Ek=s(ns);qse=n(Ek,"STRONG",{});var Xat=s(qse);cio=r(Xat,"gpt_neo"),Xat.forEach(t),fio=r(Ek," \u2014 "),yB=n(Ek,"A",{href:!0});var zat=s(yB);mio=r(zat,"GPT2Tokenizer"),zat.forEach(t),gio=r(Ek," or "),xB=n(Ek,"A",{href:!0});var Qat=s(xB);hio=r(Qat,"GPT2TokenizerFast"),Qat.forEach(t),pio=r(Ek," (GPT Neo model)"),Ek.forEach(t),_io=i(S),nh=n(S,"LI",{});var mye=s(nh);jse=n(mye,"STRONG",{});var Wat=s(jse);uio=r(Wat,"gpt_neox"),Wat.forEach(t),bio=r(mye," \u2014 "),$B=n(mye,"A",{href:!0});var Hat=s($B);vio=r(Hat,"GPTNeoXTokenizerFast"),Hat.forEach(t),Fio=r(mye," (GPT NeoX model)"),mye.forEach(t),Tio=i(S),ss=n(S,"LI",{});var Ck=s(ss);Dse=n(Ck,"STRONG",{});var Uat=s(Dse);Mio=r(Uat,"gptj"),Uat.forEach(t),Eio=r(Ck," \u2014 "),kB=n(Ck,"A",{href:!0});var Jat=s(kB);Cio=r(Jat,"GPT2Tokenizer"),Jat.forEach(t),wio=r(Ck," or "),SB=n(Ck,"A",{href:!0});var Yat=s(SB);Aio=r(Yat,"GPT2TokenizerFast"),Yat.forEach(t),Lio=r(Ck," (GPT-J model)"),Ck.forEach(t),yio=i(S),ls=n(S,"LI",{});var wk=s(ls);Gse=n(wk,"STRONG",{});var Kat=s(Gse);xio=r(Kat,"groupvit"),Kat.forEach(t),$io=r(wk," \u2014 "),RB=n(wk,"A",{href:!0});var Zat=s(RB);kio=r(Zat,"CLIPTokenizer"),Zat.forEach(t),Sio=r(wk," or "),PB=n(wk,"A",{href:!0});var ent=s(PB);Rio=r(ent,"CLIPTokenizerFast"),ent.forEach(t),Pio=r(wk," (GroupViT model)"),wk.forEach(t),Bio=i(S),is=n(S,"LI",{});var Ak=s(is);Ose=n(Ak,"STRONG",{});var ont=s(Ose);Iio=r(ont,"herbert"),ont.forEach(t),Nio=r(Ak," \u2014 "),BB=n(Ak,"A",{href:!0});var rnt=s(BB);qio=r(rnt,"HerbertTokenizer"),rnt.forEach(t),jio=r(Ak," or "),IB=n(Ak,"A",{href:!0});var tnt=s(IB);Dio=r(tnt,"HerbertTokenizerFast"),tnt.forEach(t),Gio=r(Ak," (HerBERT model)"),Ak.forEach(t),Oio=i(S),sh=n(S,"LI",{});var gye=s(sh);Vse=n(gye,"STRONG",{});var ant=s(Vse);Vio=r(ant,"hubert"),ant.forEach(t),Xio=r(gye," \u2014 "),NB=n(gye,"A",{href:!0});var nnt=s(NB);zio=r(nnt,"Wav2Vec2CTCTokenizer"),nnt.forEach(t),Qio=r(gye," (Hubert model)"),gye.forEach(t),Wio=i(S),ds=n(S,"LI",{});var Lk=s(ds);Xse=n(Lk,"STRONG",{});var snt=s(Xse);Hio=r(snt,"ibert"),snt.forEach(t),Uio=r(Lk," \u2014 "),qB=n(Lk,"A",{href:!0});var lnt=s(qB);Jio=r(lnt,"RobertaTokenizer"),lnt.forEach(t),Yio=r(Lk," or "),jB=n(Lk,"A",{href:!0});var int=s(jB);Kio=r(int,"RobertaTokenizerFast"),int.forEach(t),Zio=r(Lk," (I-BERT model)"),Lk.forEach(t),edo=i(S),cs=n(S,"LI",{});var yk=s(cs);zse=n(yk,"STRONG",{});var dnt=s(zse);odo=r(dnt,"layoutlm"),dnt.forEach(t),rdo=r(yk," \u2014 "),DB=n(yk,"A",{href:!0});var cnt=s(DB);tdo=r(cnt,"LayoutLMTokenizer"),cnt.forEach(t),ado=r(yk," or "),GB=n(yk,"A",{href:!0});var fnt=s(GB);ndo=r(fnt,"LayoutLMTokenizerFast"),fnt.forEach(t),sdo=r(yk," (LayoutLM model)"),yk.forEach(t),ldo=i(S),fs=n(S,"LI",{});var xk=s(fs);Qse=n(xk,"STRONG",{});var mnt=s(Qse);ido=r(mnt,"layoutlmv2"),mnt.forEach(t),ddo=r(xk," \u2014 "),OB=n(xk,"A",{href:!0});var gnt=s(OB);cdo=r(gnt,"LayoutLMv2Tokenizer"),gnt.forEach(t),fdo=r(xk," or "),VB=n(xk,"A",{href:!0});var hnt=s(VB);mdo=r(hnt,"LayoutLMv2TokenizerFast"),hnt.forEach(t),gdo=r(xk," (LayoutLMv2 model)"),xk.forEach(t),hdo=i(S),ms=n(S,"LI",{});var $k=s(ms);Wse=n($k,"STRONG",{});var pnt=s(Wse);pdo=r(pnt,"layoutlmv3"),pnt.forEach(t),_do=r($k," \u2014 "),XB=n($k,"A",{href:!0});var _nt=s(XB);udo=r(_nt,"LayoutLMv3Tokenizer"),_nt.forEach(t),bdo=r($k," or "),zB=n($k,"A",{href:!0});var unt=s(zB);vdo=r(unt,"LayoutLMv3TokenizerFast"),unt.forEach(t),Fdo=r($k," (LayoutLMv3 model)"),$k.forEach(t),Tdo=i(S),gs=n(S,"LI",{});var kk=s(gs);Hse=n(kk,"STRONG",{});var bnt=s(Hse);Mdo=r(bnt,"layoutxlm"),bnt.forEach(t),Edo=r(kk," \u2014 "),QB=n(kk,"A",{href:!0});var vnt=s(QB);Cdo=r(vnt,"LayoutXLMTokenizer"),vnt.forEach(t),wdo=r(kk," or "),WB=n(kk,"A",{href:!0});var Fnt=s(WB);Ado=r(Fnt,"LayoutXLMTokenizerFast"),Fnt.forEach(t),Ldo=r(kk," (LayoutXLM model)"),kk.forEach(t),ydo=i(S),hs=n(S,"LI",{});var Sk=s(hs);Use=n(Sk,"STRONG",{});var Tnt=s(Use);xdo=r(Tnt,"led"),Tnt.forEach(t),$do=r(Sk," \u2014 "),HB=n(Sk,"A",{href:!0});var Mnt=s(HB);kdo=r(Mnt,"LEDTokenizer"),Mnt.forEach(t),Sdo=r(Sk," or "),UB=n(Sk,"A",{href:!0});var Ent=s(UB);Rdo=r(Ent,"LEDTokenizerFast"),Ent.forEach(t),Pdo=r(Sk," (LED model)"),Sk.forEach(t),Bdo=i(S),ps=n(S,"LI",{});var Rk=s(ps);Jse=n(Rk,"STRONG",{});var Cnt=s(Jse);Ido=r(Cnt,"longformer"),Cnt.forEach(t),Ndo=r(Rk," \u2014 "),JB=n(Rk,"A",{href:!0});var wnt=s(JB);qdo=r(wnt,"LongformerTokenizer"),wnt.forEach(t),jdo=r(Rk," or "),YB=n(Rk,"A",{href:!0});var Ant=s(YB);Ddo=r(Ant,"LongformerTokenizerFast"),Ant.forEach(t),Gdo=r(Rk," (Longformer model)"),Rk.forEach(t),Odo=i(S),_s=n(S,"LI",{});var Pk=s(_s);Yse=n(Pk,"STRONG",{});var Lnt=s(Yse);Vdo=r(Lnt,"longt5"),Lnt.forEach(t),Xdo=r(Pk," \u2014 "),KB=n(Pk,"A",{href:!0});var ynt=s(KB);zdo=r(ynt,"T5Tokenizer"),ynt.forEach(t),Qdo=r(Pk," or "),ZB=n(Pk,"A",{href:!0});var xnt=s(ZB);Wdo=r(xnt,"T5TokenizerFast"),xnt.forEach(t),Hdo=r(Pk," (LongT5 model)"),Pk.forEach(t),Udo=i(S),lh=n(S,"LI",{});var hye=s(lh);Kse=n(hye,"STRONG",{});var $nt=s(Kse);Jdo=r($nt,"luke"),$nt.forEach(t),Ydo=r(hye," \u2014 "),eI=n(hye,"A",{href:!0});var knt=s(eI);Kdo=r(knt,"LukeTokenizer"),knt.forEach(t),Zdo=r(hye," (LUKE model)"),hye.forEach(t),eco=i(S),us=n(S,"LI",{});var Bk=s(us);Zse=n(Bk,"STRONG",{});var Snt=s(Zse);oco=r(Snt,"lxmert"),Snt.forEach(t),rco=r(Bk," \u2014 "),oI=n(Bk,"A",{href:!0});var Rnt=s(oI);tco=r(Rnt,"LxmertTokenizer"),Rnt.forEach(t),aco=r(Bk," or "),rI=n(Bk,"A",{href:!0});var Pnt=s(rI);nco=r(Pnt,"LxmertTokenizerFast"),Pnt.forEach(t),sco=r(Bk," (LXMERT model)"),Bk.forEach(t),lco=i(S),ih=n(S,"LI",{});var pye=s(ih);ele=n(pye,"STRONG",{});var Bnt=s(ele);ico=r(Bnt,"m2m_100"),Bnt.forEach(t),dco=r(pye," \u2014 "),tI=n(pye,"A",{href:!0});var Int=s(tI);cco=r(Int,"M2M100Tokenizer"),Int.forEach(t),fco=r(pye," (M2M100 model)"),pye.forEach(t),mco=i(S),dh=n(S,"LI",{});var _ye=s(dh);ole=n(_ye,"STRONG",{});var Nnt=s(ole);gco=r(Nnt,"marian"),Nnt.forEach(t),hco=r(_ye," \u2014 "),aI=n(_ye,"A",{href:!0});var qnt=s(aI);pco=r(qnt,"MarianTokenizer"),qnt.forEach(t),_co=r(_ye," (Marian model)"),_ye.forEach(t),uco=i(S),bs=n(S,"LI",{});var Ik=s(bs);rle=n(Ik,"STRONG",{});var jnt=s(rle);bco=r(jnt,"mbart"),jnt.forEach(t),vco=r(Ik," \u2014 "),nI=n(Ik,"A",{href:!0});var Dnt=s(nI);Fco=r(Dnt,"MBartTokenizer"),Dnt.forEach(t),Tco=r(Ik," or "),sI=n(Ik,"A",{href:!0});var Gnt=s(sI);Mco=r(Gnt,"MBartTokenizerFast"),Gnt.forEach(t),Eco=r(Ik," (mBART model)"),Ik.forEach(t),Cco=i(S),vs=n(S,"LI",{});var Nk=s(vs);tle=n(Nk,"STRONG",{});var Ont=s(tle);wco=r(Ont,"mbart50"),Ont.forEach(t),Aco=r(Nk," \u2014 "),lI=n(Nk,"A",{href:!0});var Vnt=s(lI);Lco=r(Vnt,"MBart50Tokenizer"),Vnt.forEach(t),yco=r(Nk," or "),iI=n(Nk,"A",{href:!0});var Xnt=s(iI);xco=r(Xnt,"MBart50TokenizerFast"),Xnt.forEach(t),$co=r(Nk," (mBART-50 model)"),Nk.forEach(t),kco=i(S),Fs=n(S,"LI",{});var qk=s(Fs);ale=n(qk,"STRONG",{});var znt=s(ale);Sco=r(znt,"megatron-bert"),znt.forEach(t),Rco=r(qk," \u2014 "),dI=n(qk,"A",{href:!0});var Qnt=s(dI);Pco=r(Qnt,"BertTokenizer"),Qnt.forEach(t),Bco=r(qk," or "),cI=n(qk,"A",{href:!0});var Wnt=s(cI);Ico=r(Wnt,"BertTokenizerFast"),Wnt.forEach(t),Nco=r(qk," (Megatron-BERT model)"),qk.forEach(t),qco=i(S),ch=n(S,"LI",{});var uye=s(ch);nle=n(uye,"STRONG",{});var Hnt=s(nle);jco=r(Hnt,"mluke"),Hnt.forEach(t),Dco=r(uye," \u2014 "),fI=n(uye,"A",{href:!0});var Unt=s(fI);Gco=r(Unt,"MLukeTokenizer"),Unt.forEach(t),Oco=r(uye," (mLUKE model)"),uye.forEach(t),Vco=i(S),Ts=n(S,"LI",{});var jk=s(Ts);sle=n(jk,"STRONG",{});var Jnt=s(sle);Xco=r(Jnt,"mobilebert"),Jnt.forEach(t),zco=r(jk," \u2014 "),mI=n(jk,"A",{href:!0});var Ynt=s(mI);Qco=r(Ynt,"MobileBertTokenizer"),Ynt.forEach(t),Wco=r(jk," or "),gI=n(jk,"A",{href:!0});var Knt=s(gI);Hco=r(Knt,"MobileBertTokenizerFast"),Knt.forEach(t),Uco=r(jk," (MobileBERT model)"),jk.forEach(t),Jco=i(S),Ms=n(S,"LI",{});var Dk=s(Ms);lle=n(Dk,"STRONG",{});var Znt=s(lle);Yco=r(Znt,"mpnet"),Znt.forEach(t),Kco=r(Dk," \u2014 "),hI=n(Dk,"A",{href:!0});var est=s(hI);Zco=r(est,"MPNetTokenizer"),est.forEach(t),efo=r(Dk," or "),pI=n(Dk,"A",{href:!0});var ost=s(pI);ofo=r(ost,"MPNetTokenizerFast"),ost.forEach(t),rfo=r(Dk," (MPNet model)"),Dk.forEach(t),tfo=i(S),Es=n(S,"LI",{});var Gk=s(Es);ile=n(Gk,"STRONG",{});var rst=s(ile);afo=r(rst,"mt5"),rst.forEach(t),nfo=r(Gk," \u2014 "),_I=n(Gk,"A",{href:!0});var tst=s(_I);sfo=r(tst,"MT5Tokenizer"),tst.forEach(t),lfo=r(Gk," or "),uI=n(Gk,"A",{href:!0});var ast=s(uI);ifo=r(ast,"MT5TokenizerFast"),ast.forEach(t),dfo=r(Gk," (MT5 model)"),Gk.forEach(t),cfo=i(S),Cs=n(S,"LI",{});var Ok=s(Cs);dle=n(Ok,"STRONG",{});var nst=s(dle);ffo=r(nst,"nezha"),nst.forEach(t),mfo=r(Ok," \u2014 "),bI=n(Ok,"A",{href:!0});var sst=s(bI);gfo=r(sst,"BertTokenizer"),sst.forEach(t),hfo=r(Ok," or "),vI=n(Ok,"A",{href:!0});var lst=s(vI);pfo=r(lst,"BertTokenizerFast"),lst.forEach(t),_fo=r(Ok," (Nezha model)"),Ok.forEach(t),ufo=i(S),ws=n(S,"LI",{});var Vk=s(ws);cle=n(Vk,"STRONG",{});var ist=s(cle);bfo=r(ist,"nystromformer"),ist.forEach(t),vfo=r(Vk," \u2014 "),FI=n(Vk,"A",{href:!0});var dst=s(FI);Ffo=r(dst,"AlbertTokenizer"),dst.forEach(t),Tfo=r(Vk," or "),TI=n(Vk,"A",{href:!0});var cst=s(TI);Mfo=r(cst,"AlbertTokenizerFast"),cst.forEach(t),Efo=r(Vk," (Nystr\xF6mformer model)"),Vk.forEach(t),Cfo=i(S),As=n(S,"LI",{});var Xk=s(As);fle=n(Xk,"STRONG",{});var fst=s(fle);wfo=r(fst,"openai-gpt"),fst.forEach(t),Afo=r(Xk," \u2014 "),MI=n(Xk,"A",{href:!0});var mst=s(MI);Lfo=r(mst,"OpenAIGPTTokenizer"),mst.forEach(t),yfo=r(Xk," or "),EI=n(Xk,"A",{href:!0});var gst=s(EI);xfo=r(gst,"OpenAIGPTTokenizerFast"),gst.forEach(t),$fo=r(Xk," (OpenAI GPT model)"),Xk.forEach(t),kfo=i(S),fh=n(S,"LI",{});var bye=s(fh);mle=n(bye,"STRONG",{});var hst=s(mle);Sfo=r(hst,"opt"),hst.forEach(t),Rfo=r(bye," \u2014 "),CI=n(bye,"A",{href:!0});var pst=s(CI);Pfo=r(pst,"GPT2Tokenizer"),pst.forEach(t),Bfo=r(bye," (OPT model)"),bye.forEach(t),Ifo=i(S),Ls=n(S,"LI",{});var zk=s(Ls);gle=n(zk,"STRONG",{});var _st=s(gle);Nfo=r(_st,"pegasus"),_st.forEach(t),qfo=r(zk," \u2014 "),wI=n(zk,"A",{href:!0});var ust=s(wI);jfo=r(ust,"PegasusTokenizer"),ust.forEach(t),Dfo=r(zk," or "),AI=n(zk,"A",{href:!0});var bst=s(AI);Gfo=r(bst,"PegasusTokenizerFast"),bst.forEach(t),Ofo=r(zk," (Pegasus model)"),zk.forEach(t),Vfo=i(S),mh=n(S,"LI",{});var vye=s(mh);hle=n(vye,"STRONG",{});var vst=s(hle);Xfo=r(vst,"perceiver"),vst.forEach(t),zfo=r(vye," \u2014 "),LI=n(vye,"A",{href:!0});var Fst=s(LI);Qfo=r(Fst,"PerceiverTokenizer"),Fst.forEach(t),Wfo=r(vye," (Perceiver model)"),vye.forEach(t),Hfo=i(S),gh=n(S,"LI",{});var Fye=s(gh);ple=n(Fye,"STRONG",{});var Tst=s(ple);Ufo=r(Tst,"phobert"),Tst.forEach(t),Jfo=r(Fye," \u2014 "),yI=n(Fye,"A",{href:!0});var Mst=s(yI);Yfo=r(Mst,"PhobertTokenizer"),Mst.forEach(t),Kfo=r(Fye," (PhoBERT model)"),Fye.forEach(t),Zfo=i(S),hh=n(S,"LI",{});var Tye=s(hh);_le=n(Tye,"STRONG",{});var Est=s(_le);emo=r(Est,"plbart"),Est.forEach(t),omo=r(Tye," \u2014 "),xI=n(Tye,"A",{href:!0});var Cst=s(xI);rmo=r(Cst,"PLBartTokenizer"),Cst.forEach(t),tmo=r(Tye," (PLBart model)"),Tye.forEach(t),amo=i(S),ph=n(S,"LI",{});var Mye=s(ph);ule=n(Mye,"STRONG",{});var wst=s(ule);nmo=r(wst,"prophetnet"),wst.forEach(t),smo=r(Mye," \u2014 "),$I=n(Mye,"A",{href:!0});var Ast=s($I);lmo=r(Ast,"ProphetNetTokenizer"),Ast.forEach(t),imo=r(Mye," (ProphetNet model)"),Mye.forEach(t),dmo=i(S),ys=n(S,"LI",{});var Qk=s(ys);ble=n(Qk,"STRONG",{});var Lst=s(ble);cmo=r(Lst,"qdqbert"),Lst.forEach(t),fmo=r(Qk," \u2014 "),kI=n(Qk,"A",{href:!0});var yst=s(kI);mmo=r(yst,"BertTokenizer"),yst.forEach(t),gmo=r(Qk," or "),SI=n(Qk,"A",{href:!0});var xst=s(SI);hmo=r(xst,"BertTokenizerFast"),xst.forEach(t),pmo=r(Qk," (QDQBert model)"),Qk.forEach(t),_mo=i(S),_h=n(S,"LI",{});var Eye=s(_h);vle=n(Eye,"STRONG",{});var $st=s(vle);umo=r($st,"rag"),$st.forEach(t),bmo=r(Eye," \u2014 "),RI=n(Eye,"A",{href:!0});var kst=s(RI);vmo=r(kst,"RagTokenizer"),kst.forEach(t),Fmo=r(Eye," (RAG model)"),Eye.forEach(t),Tmo=i(S),xs=n(S,"LI",{});var Wk=s(xs);Fle=n(Wk,"STRONG",{});var Sst=s(Fle);Mmo=r(Sst,"realm"),Sst.forEach(t),Emo=r(Wk," \u2014 "),PI=n(Wk,"A",{href:!0});var Rst=s(PI);Cmo=r(Rst,"RealmTokenizer"),Rst.forEach(t),wmo=r(Wk," or "),BI=n(Wk,"A",{href:!0});var Pst=s(BI);Amo=r(Pst,"RealmTokenizerFast"),Pst.forEach(t),Lmo=r(Wk," (REALM model)"),Wk.forEach(t),ymo=i(S),$s=n(S,"LI",{});var Hk=s($s);Tle=n(Hk,"STRONG",{});var Bst=s(Tle);xmo=r(Bst,"reformer"),Bst.forEach(t),$mo=r(Hk," \u2014 "),II=n(Hk,"A",{href:!0});var Ist=s(II);kmo=r(Ist,"ReformerTokenizer"),Ist.forEach(t),Smo=r(Hk," or "),NI=n(Hk,"A",{href:!0});var Nst=s(NI);Rmo=r(Nst,"ReformerTokenizerFast"),Nst.forEach(t),Pmo=r(Hk," (Reformer model)"),Hk.forEach(t),Bmo=i(S),ks=n(S,"LI",{});var Uk=s(ks);Mle=n(Uk,"STRONG",{});var qst=s(Mle);Imo=r(qst,"rembert"),qst.forEach(t),Nmo=r(Uk," \u2014 "),qI=n(Uk,"A",{href:!0});var jst=s(qI);qmo=r(jst,"RemBertTokenizer"),jst.forEach(t),jmo=r(Uk," or "),jI=n(Uk,"A",{href:!0});var Dst=s(jI);Dmo=r(Dst,"RemBertTokenizerFast"),Dst.forEach(t),Gmo=r(Uk," (RemBERT model)"),Uk.forEach(t),Omo=i(S),Ss=n(S,"LI",{});var Jk=s(Ss);Ele=n(Jk,"STRONG",{});var Gst=s(Ele);Vmo=r(Gst,"retribert"),Gst.forEach(t),Xmo=r(Jk," \u2014 "),DI=n(Jk,"A",{href:!0});var Ost=s(DI);zmo=r(Ost,"RetriBertTokenizer"),Ost.forEach(t),Qmo=r(Jk," or "),GI=n(Jk,"A",{href:!0});var Vst=s(GI);Wmo=r(Vst,"RetriBertTokenizerFast"),Vst.forEach(t),Hmo=r(Jk," (RetriBERT model)"),Jk.forEach(t),Umo=i(S),Rs=n(S,"LI",{});var Yk=s(Rs);Cle=n(Yk,"STRONG",{});var Xst=s(Cle);Jmo=r(Xst,"roberta"),Xst.forEach(t),Ymo=r(Yk," \u2014 "),OI=n(Yk,"A",{href:!0});var zst=s(OI);Kmo=r(zst,"RobertaTokenizer"),zst.forEach(t),Zmo=r(Yk," or "),VI=n(Yk,"A",{href:!0});var Qst=s(VI);ego=r(Qst,"RobertaTokenizerFast"),Qst.forEach(t),ogo=r(Yk," (RoBERTa model)"),Yk.forEach(t),rgo=i(S),Ps=n(S,"LI",{});var Kk=s(Ps);wle=n(Kk,"STRONG",{});var Wst=s(wle);tgo=r(Wst,"roformer"),Wst.forEach(t),ago=r(Kk," \u2014 "),XI=n(Kk,"A",{href:!0});var Hst=s(XI);ngo=r(Hst,"RoFormerTokenizer"),Hst.forEach(t),sgo=r(Kk," or "),zI=n(Kk,"A",{href:!0});var Ust=s(zI);lgo=r(Ust,"RoFormerTokenizerFast"),Ust.forEach(t),igo=r(Kk," (RoFormer model)"),Kk.forEach(t),dgo=i(S),uh=n(S,"LI",{});var Cye=s(uh);Ale=n(Cye,"STRONG",{});var Jst=s(Ale);cgo=r(Jst,"speech_to_text"),Jst.forEach(t),fgo=r(Cye," \u2014 "),QI=n(Cye,"A",{href:!0});var Yst=s(QI);mgo=r(Yst,"Speech2TextTokenizer"),Yst.forEach(t),ggo=r(Cye," (Speech2Text model)"),Cye.forEach(t),hgo=i(S),bh=n(S,"LI",{});var wye=s(bh);Lle=n(wye,"STRONG",{});var Kst=s(Lle);pgo=r(Kst,"speech_to_text_2"),Kst.forEach(t),_go=r(wye," \u2014 "),WI=n(wye,"A",{href:!0});var Zst=s(WI);ugo=r(Zst,"Speech2Text2Tokenizer"),Zst.forEach(t),bgo=r(wye," (Speech2Text2 model)"),wye.forEach(t),vgo=i(S),Bs=n(S,"LI",{});var Zk=s(Bs);yle=n(Zk,"STRONG",{});var elt=s(yle);Fgo=r(elt,"splinter"),elt.forEach(t),Tgo=r(Zk," \u2014 "),HI=n(Zk,"A",{href:!0});var olt=s(HI);Mgo=r(olt,"SplinterTokenizer"),olt.forEach(t),Ego=r(Zk," or "),UI=n(Zk,"A",{href:!0});var rlt=s(UI);Cgo=r(rlt,"SplinterTokenizerFast"),rlt.forEach(t),wgo=r(Zk," (Splinter model)"),Zk.forEach(t),Ago=i(S),Is=n(S,"LI",{});var eS=s(Is);xle=n(eS,"STRONG",{});var tlt=s(xle);Lgo=r(tlt,"squeezebert"),tlt.forEach(t),ygo=r(eS," \u2014 "),JI=n(eS,"A",{href:!0});var alt=s(JI);xgo=r(alt,"SqueezeBertTokenizer"),alt.forEach(t),$go=r(eS," or "),YI=n(eS,"A",{href:!0});var nlt=s(YI);kgo=r(nlt,"SqueezeBertTokenizerFast"),nlt.forEach(t),Sgo=r(eS," (SqueezeBERT model)"),eS.forEach(t),Rgo=i(S),Ns=n(S,"LI",{});var oS=s(Ns);$le=n(oS,"STRONG",{});var slt=s($le);Pgo=r(slt,"t5"),slt.forEach(t),Bgo=r(oS," \u2014 "),KI=n(oS,"A",{href:!0});var llt=s(KI);Igo=r(llt,"T5Tokenizer"),llt.forEach(t),Ngo=r(oS," or "),ZI=n(oS,"A",{href:!0});var ilt=s(ZI);qgo=r(ilt,"T5TokenizerFast"),ilt.forEach(t),jgo=r(oS," (T5 model)"),oS.forEach(t),Dgo=i(S),vh=n(S,"LI",{});var Aye=s(vh);kle=n(Aye,"STRONG",{});var dlt=s(kle);Ggo=r(dlt,"tapas"),dlt.forEach(t),Ogo=r(Aye," \u2014 "),eN=n(Aye,"A",{href:!0});var clt=s(eN);Vgo=r(clt,"TapasTokenizer"),clt.forEach(t),Xgo=r(Aye," (TAPAS model)"),Aye.forEach(t),zgo=i(S),Fh=n(S,"LI",{});var Lye=s(Fh);Sle=n(Lye,"STRONG",{});var flt=s(Sle);Qgo=r(flt,"tapex"),flt.forEach(t),Wgo=r(Lye," \u2014 "),oN=n(Lye,"A",{href:!0});var mlt=s(oN);Hgo=r(mlt,"TapexTokenizer"),mlt.forEach(t),Ugo=r(Lye," (TAPEX model)"),Lye.forEach(t),Jgo=i(S),Th=n(S,"LI",{});var yye=s(Th);Rle=n(yye,"STRONG",{});var glt=s(Rle);Ygo=r(glt,"transfo-xl"),glt.forEach(t),Kgo=r(yye," \u2014 "),rN=n(yye,"A",{href:!0});var hlt=s(rN);Zgo=r(hlt,"TransfoXLTokenizer"),hlt.forEach(t),eho=r(yye," (Transformer-XL model)"),yye.forEach(t),oho=i(S),qs=n(S,"LI",{});var rS=s(qs);Ple=n(rS,"STRONG",{});var plt=s(Ple);rho=r(plt,"vilt"),plt.forEach(t),tho=r(rS," \u2014 "),tN=n(rS,"A",{href:!0});var _lt=s(tN);aho=r(_lt,"BertTokenizer"),_lt.forEach(t),nho=r(rS," or "),aN=n(rS,"A",{href:!0});var ult=s(aN);sho=r(ult,"BertTokenizerFast"),ult.forEach(t),lho=r(rS," (ViLT model)"),rS.forEach(t),iho=i(S),js=n(S,"LI",{});var tS=s(js);Ble=n(tS,"STRONG",{});var blt=s(Ble);dho=r(blt,"visual_bert"),blt.forEach(t),cho=r(tS," \u2014 "),nN=n(tS,"A",{href:!0});var vlt=s(nN);fho=r(vlt,"BertTokenizer"),vlt.forEach(t),mho=r(tS," or "),sN=n(tS,"A",{href:!0});var Flt=s(sN);gho=r(Flt,"BertTokenizerFast"),Flt.forEach(t),hho=r(tS," (VisualBERT model)"),tS.forEach(t),pho=i(S),Mh=n(S,"LI",{});var xye=s(Mh);Ile=n(xye,"STRONG",{});var Tlt=s(Ile);_ho=r(Tlt,"wav2vec2"),Tlt.forEach(t),uho=r(xye," \u2014 "),lN=n(xye,"A",{href:!0});var Mlt=s(lN);bho=r(Mlt,"Wav2Vec2CTCTokenizer"),Mlt.forEach(t),vho=r(xye," (Wav2Vec2 model)"),xye.forEach(t),Fho=i(S),Eh=n(S,"LI",{});var $ye=s(Eh);Nle=n($ye,"STRONG",{});var Elt=s(Nle);Tho=r(Elt,"wav2vec2-conformer"),Elt.forEach(t),Mho=r($ye," \u2014 "),iN=n($ye,"A",{href:!0});var Clt=s(iN);Eho=r(Clt,"Wav2Vec2CTCTokenizer"),Clt.forEach(t),Cho=r($ye," (Wav2Vec2-Conformer model)"),$ye.forEach(t),who=i(S),Ch=n(S,"LI",{});var kye=s(Ch);qle=n(kye,"STRONG",{});var wlt=s(qle);Aho=r(wlt,"wav2vec2_phoneme"),wlt.forEach(t),Lho=r(kye," \u2014 "),dN=n(kye,"A",{href:!0});var Alt=s(dN);yho=r(Alt,"Wav2Vec2PhonemeCTCTokenizer"),Alt.forEach(t),xho=r(kye," (Wav2Vec2Phoneme model)"),kye.forEach(t),$ho=i(S),Ds=n(S,"LI",{});var aS=s(Ds);jle=n(aS,"STRONG",{});var Llt=s(jle);kho=r(Llt,"xglm"),Llt.forEach(t),Sho=r(aS," \u2014 "),cN=n(aS,"A",{href:!0});var ylt=s(cN);Rho=r(ylt,"XGLMTokenizer"),ylt.forEach(t),Pho=r(aS," or "),fN=n(aS,"A",{href:!0});var xlt=s(fN);Bho=r(xlt,"XGLMTokenizerFast"),xlt.forEach(t),Iho=r(aS," (XGLM model)"),aS.forEach(t),Nho=i(S),wh=n(S,"LI",{});var Sye=s(wh);Dle=n(Sye,"STRONG",{});var $lt=s(Dle);qho=r($lt,"xlm"),$lt.forEach(t),jho=r(Sye," \u2014 "),mN=n(Sye,"A",{href:!0});var klt=s(mN);Dho=r(klt,"XLMTokenizer"),klt.forEach(t),Gho=r(Sye," (XLM model)"),Sye.forEach(t),Oho=i(S),Ah=n(S,"LI",{});var Rye=s(Ah);Gle=n(Rye,"STRONG",{});var Slt=s(Gle);Vho=r(Slt,"xlm-prophetnet"),Slt.forEach(t),Xho=r(Rye," \u2014 "),gN=n(Rye,"A",{href:!0});var Rlt=s(gN);zho=r(Rlt,"XLMProphetNetTokenizer"),Rlt.forEach(t),Qho=r(Rye," (XLM-ProphetNet model)"),Rye.forEach(t),Who=i(S),Gs=n(S,"LI",{});var nS=s(Gs);Ole=n(nS,"STRONG",{});var Plt=s(Ole);Hho=r(Plt,"xlm-roberta"),Plt.forEach(t),Uho=r(nS," \u2014 "),hN=n(nS,"A",{href:!0});var Blt=s(hN);Jho=r(Blt,"XLMRobertaTokenizer"),Blt.forEach(t),Yho=r(nS," or "),pN=n(nS,"A",{href:!0});var Ilt=s(pN);Kho=r(Ilt,"XLMRobertaTokenizerFast"),Ilt.forEach(t),Zho=r(nS," (XLM-RoBERTa model)"),nS.forEach(t),epo=i(S),Os=n(S,"LI",{});var sS=s(Os);Vle=n(sS,"STRONG",{});var Nlt=s(Vle);opo=r(Nlt,"xlm-roberta-xl"),Nlt.forEach(t),rpo=r(sS," \u2014 "),_N=n(sS,"A",{href:!0});var qlt=s(_N);tpo=r(qlt,"RobertaTokenizer"),qlt.forEach(t),apo=r(sS," or "),uN=n(sS,"A",{href:!0});var jlt=s(uN);npo=r(jlt,"RobertaTokenizerFast"),jlt.forEach(t),spo=r(sS," (XLM-RoBERTa-XL model)"),sS.forEach(t),lpo=i(S),Vs=n(S,"LI",{});var lS=s(Vs);Xle=n(lS,"STRONG",{});var Dlt=s(Xle);ipo=r(Dlt,"xlnet"),Dlt.forEach(t),dpo=r(lS," \u2014 "),bN=n(lS,"A",{href:!0});var Glt=s(bN);cpo=r(Glt,"XLNetTokenizer"),Glt.forEach(t),fpo=r(lS," or "),vN=n(lS,"A",{href:!0});var Olt=s(vN);mpo=r(Olt,"XLNetTokenizerFast"),Olt.forEach(t),gpo=r(lS," (XLNet model)"),lS.forEach(t),hpo=i(S),Xs=n(S,"LI",{});var iS=s(Xs);zle=n(iS,"STRONG",{});var Vlt=s(zle);ppo=r(Vlt,"yoso"),Vlt.forEach(t),_po=r(iS," \u2014 "),FN=n(iS,"A",{href:!0});var Xlt=s(FN);upo=r(Xlt,"AlbertTokenizer"),Xlt.forEach(t),bpo=r(iS," or "),TN=n(iS,"A",{href:!0});var zlt=s(TN);vpo=r(zlt,"AlbertTokenizerFast"),zlt.forEach(t),Fpo=r(iS," (YOSO model)"),iS.forEach(t),S.forEach(t),Tpo=i(Js),T(Lh.$$.fragment,Js),Js.forEach(t),Mpo=i(Us),yh=n(Us,"DIV",{class:!0});var RXe=s(yh);T(YL.$$.fragment,RXe),Epo=i(RXe),Qle=n(RXe,"P",{});var Qlt=s(Qle);Cpo=r(Qlt,"Register a new tokenizer in this mapping."),Qlt.forEach(t),RXe.forEach(t),Us.forEach(t),SOe=i(f),Pi=n(f,"H2",{class:!0});var PXe=s(Pi);xh=n(PXe,"A",{id:!0,class:!0,href:!0});var Wlt=s(xh);Wle=n(Wlt,"SPAN",{});var Hlt=s(Wle);T(KL.$$.fragment,Hlt),Hlt.forEach(t),Wlt.forEach(t),wpo=i(PXe),Hle=n(PXe,"SPAN",{});var Ult=s(Hle);Apo=r(Ult,"AutoFeatureExtractor"),Ult.forEach(t),PXe.forEach(t),ROe=i(f),Lo=n(f,"DIV",{class:!0});var Ys=s(Lo);T(ZL.$$.fragment,Ys),Lpo=i(Ys),ey=n(Ys,"P",{});var BXe=s(ey);ypo=r(BXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MN=n(BXe,"A",{href:!0});var Jlt=s(MN);xpo=r(Jlt,"AutoFeatureExtractor.from_pretrained()"),Jlt.forEach(t),$po=r(BXe," class method."),BXe.forEach(t),kpo=i(Ys),oy=n(Ys,"P",{});var IXe=s(oy);Spo=r(IXe,"This class cannot be instantiated directly using "),Ule=n(IXe,"CODE",{});var Ylt=s(Ule);Rpo=r(Ylt,"__init__()"),Ylt.forEach(t),Ppo=r(IXe," (throws an error)."),IXe.forEach(t),Bpo=i(Ys),He=n(Ys,"DIV",{class:!0});var ra=s(He);T(ry.$$.fragment,ra),Ipo=i(ra),Jle=n(ra,"P",{});var Klt=s(Jle);Npo=r(Klt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Klt.forEach(t),qpo=i(ra),Sa=n(ra,"P",{});var jA=s(Sa);jpo=r(jA,"The feature extractor class to instantiate is selected based on the "),Yle=n(jA,"CODE",{});var Zlt=s(Yle);Dpo=r(Zlt,"model_type"),Zlt.forEach(t),Gpo=r(jA,` property of the config object
(either passed as an argument or loaded from `),Kle=n(jA,"CODE",{});var eit=s(Kle);Opo=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),Vpo=r(jA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zle=n(jA,"CODE",{});var oit=s(Zle);Xpo=r(oit,"pretrained_model_name_or_path"),oit.forEach(t),zpo=r(jA,":"),jA.forEach(t),Qpo=i(ra),Y=n(ra,"UL",{});var K=s(Y);$h=n(K,"LI",{});var Pye=s($h);eie=n(Pye,"STRONG",{});var rit=s(eie);Wpo=r(rit,"beit"),rit.forEach(t),Hpo=r(Pye," \u2014 "),EN=n(Pye,"A",{href:!0});var tit=s(EN);Upo=r(tit,"BeitFeatureExtractor"),tit.forEach(t),Jpo=r(Pye," (BEiT model)"),Pye.forEach(t),Ypo=i(K),kh=n(K,"LI",{});var Bye=s(kh);oie=n(Bye,"STRONG",{});var ait=s(oie);Kpo=r(ait,"clip"),ait.forEach(t),Zpo=r(Bye," \u2014 "),CN=n(Bye,"A",{href:!0});var nit=s(CN);e_o=r(nit,"CLIPFeatureExtractor"),nit.forEach(t),o_o=r(Bye," (CLIP model)"),Bye.forEach(t),r_o=i(K),Sh=n(K,"LI",{});var Iye=s(Sh);rie=n(Iye,"STRONG",{});var sit=s(rie);t_o=r(sit,"convnext"),sit.forEach(t),a_o=r(Iye," \u2014 "),wN=n(Iye,"A",{href:!0});var lit=s(wN);n_o=r(lit,"ConvNextFeatureExtractor"),lit.forEach(t),s_o=r(Iye," (ConvNeXT model)"),Iye.forEach(t),l_o=i(K),Rh=n(K,"LI",{});var Nye=s(Rh);tie=n(Nye,"STRONG",{});var iit=s(tie);i_o=r(iit,"cvt"),iit.forEach(t),d_o=r(Nye," \u2014 "),AN=n(Nye,"A",{href:!0});var dit=s(AN);c_o=r(dit,"ConvNextFeatureExtractor"),dit.forEach(t),f_o=r(Nye," (CvT model)"),Nye.forEach(t),m_o=i(K),Ph=n(K,"LI",{});var qye=s(Ph);aie=n(qye,"STRONG",{});var cit=s(aie);g_o=r(cit,"data2vec-audio"),cit.forEach(t),h_o=r(qye," \u2014 "),LN=n(qye,"A",{href:!0});var fit=s(LN);p_o=r(fit,"Wav2Vec2FeatureExtractor"),fit.forEach(t),__o=r(qye," (Data2VecAudio model)"),qye.forEach(t),u_o=i(K),Bh=n(K,"LI",{});var jye=s(Bh);nie=n(jye,"STRONG",{});var mit=s(nie);b_o=r(mit,"data2vec-vision"),mit.forEach(t),v_o=r(jye," \u2014 "),yN=n(jye,"A",{href:!0});var git=s(yN);F_o=r(git,"BeitFeatureExtractor"),git.forEach(t),T_o=r(jye," (Data2VecVision model)"),jye.forEach(t),M_o=i(K),Ih=n(K,"LI",{});var Dye=s(Ih);sie=n(Dye,"STRONG",{});var hit=s(sie);E_o=r(hit,"deit"),hit.forEach(t),C_o=r(Dye," \u2014 "),xN=n(Dye,"A",{href:!0});var pit=s(xN);w_o=r(pit,"DeiTFeatureExtractor"),pit.forEach(t),A_o=r(Dye," (DeiT model)"),Dye.forEach(t),L_o=i(K),Nh=n(K,"LI",{});var Gye=s(Nh);lie=n(Gye,"STRONG",{});var _it=s(lie);y_o=r(_it,"detr"),_it.forEach(t),x_o=r(Gye," \u2014 "),$N=n(Gye,"A",{href:!0});var uit=s($N);$_o=r(uit,"DetrFeatureExtractor"),uit.forEach(t),k_o=r(Gye," (DETR model)"),Gye.forEach(t),S_o=i(K),qh=n(K,"LI",{});var Oye=s(qh);iie=n(Oye,"STRONG",{});var bit=s(iie);R_o=r(bit,"dpt"),bit.forEach(t),P_o=r(Oye," \u2014 "),kN=n(Oye,"A",{href:!0});var vit=s(kN);B_o=r(vit,"DPTFeatureExtractor"),vit.forEach(t),I_o=r(Oye," (DPT model)"),Oye.forEach(t),N_o=i(K),jh=n(K,"LI",{});var Vye=s(jh);die=n(Vye,"STRONG",{});var Fit=s(die);q_o=r(Fit,"flava"),Fit.forEach(t),j_o=r(Vye," \u2014 "),SN=n(Vye,"A",{href:!0});var Tit=s(SN);D_o=r(Tit,"FlavaFeatureExtractor"),Tit.forEach(t),G_o=r(Vye," (FLAVA model)"),Vye.forEach(t),O_o=i(K),Dh=n(K,"LI",{});var Xye=s(Dh);cie=n(Xye,"STRONG",{});var Mit=s(cie);V_o=r(Mit,"glpn"),Mit.forEach(t),X_o=r(Xye," \u2014 "),RN=n(Xye,"A",{href:!0});var Eit=s(RN);z_o=r(Eit,"GLPNFeatureExtractor"),Eit.forEach(t),Q_o=r(Xye," (GLPN model)"),Xye.forEach(t),W_o=i(K),Gh=n(K,"LI",{});var zye=s(Gh);fie=n(zye,"STRONG",{});var Cit=s(fie);H_o=r(Cit,"groupvit"),Cit.forEach(t),U_o=r(zye," \u2014 "),PN=n(zye,"A",{href:!0});var wit=s(PN);J_o=r(wit,"CLIPFeatureExtractor"),wit.forEach(t),Y_o=r(zye," (GroupViT model)"),zye.forEach(t),K_o=i(K),Oh=n(K,"LI",{});var Qye=s(Oh);mie=n(Qye,"STRONG",{});var Ait=s(mie);Z_o=r(Ait,"hubert"),Ait.forEach(t),euo=r(Qye," \u2014 "),BN=n(Qye,"A",{href:!0});var Lit=s(BN);ouo=r(Lit,"Wav2Vec2FeatureExtractor"),Lit.forEach(t),ruo=r(Qye," (Hubert model)"),Qye.forEach(t),tuo=i(K),Vh=n(K,"LI",{});var Wye=s(Vh);gie=n(Wye,"STRONG",{});var yit=s(gie);auo=r(yit,"imagegpt"),yit.forEach(t),nuo=r(Wye," \u2014 "),IN=n(Wye,"A",{href:!0});var xit=s(IN);suo=r(xit,"ImageGPTFeatureExtractor"),xit.forEach(t),luo=r(Wye," (ImageGPT model)"),Wye.forEach(t),iuo=i(K),Xh=n(K,"LI",{});var Hye=s(Xh);hie=n(Hye,"STRONG",{});var $it=s(hie);duo=r($it,"layoutlmv2"),$it.forEach(t),cuo=r(Hye," \u2014 "),NN=n(Hye,"A",{href:!0});var kit=s(NN);fuo=r(kit,"LayoutLMv2FeatureExtractor"),kit.forEach(t),muo=r(Hye," (LayoutLMv2 model)"),Hye.forEach(t),guo=i(K),zh=n(K,"LI",{});var Uye=s(zh);pie=n(Uye,"STRONG",{});var Sit=s(pie);huo=r(Sit,"layoutlmv3"),Sit.forEach(t),puo=r(Uye," \u2014 "),qN=n(Uye,"A",{href:!0});var Rit=s(qN);_uo=r(Rit,"LayoutLMv3FeatureExtractor"),Rit.forEach(t),uuo=r(Uye," (LayoutLMv3 model)"),Uye.forEach(t),buo=i(K),Qh=n(K,"LI",{});var Jye=s(Qh);_ie=n(Jye,"STRONG",{});var Pit=s(_ie);vuo=r(Pit,"levit"),Pit.forEach(t),Fuo=r(Jye," \u2014 "),jN=n(Jye,"A",{href:!0});var Bit=s(jN);Tuo=r(Bit,"LevitFeatureExtractor"),Bit.forEach(t),Muo=r(Jye," (LeViT model)"),Jye.forEach(t),Euo=i(K),Wh=n(K,"LI",{});var Yye=s(Wh);uie=n(Yye,"STRONG",{});var Iit=s(uie);Cuo=r(Iit,"maskformer"),Iit.forEach(t),wuo=r(Yye," \u2014 "),DN=n(Yye,"A",{href:!0});var Nit=s(DN);Auo=r(Nit,"MaskFormerFeatureExtractor"),Nit.forEach(t),Luo=r(Yye," (MaskFormer model)"),Yye.forEach(t),yuo=i(K),Hh=n(K,"LI",{});var Kye=s(Hh);bie=n(Kye,"STRONG",{});var qit=s(bie);xuo=r(qit,"mctct"),qit.forEach(t),$uo=r(Kye," \u2014 "),GN=n(Kye,"A",{href:!0});var jit=s(GN);kuo=r(jit,"MCTCTFeatureExtractor"),jit.forEach(t),Suo=r(Kye," (M-CTC-T model)"),Kye.forEach(t),Ruo=i(K),Uh=n(K,"LI",{});var Zye=s(Uh);vie=n(Zye,"STRONG",{});var Dit=s(vie);Puo=r(Dit,"perceiver"),Dit.forEach(t),Buo=r(Zye," \u2014 "),ON=n(Zye,"A",{href:!0});var Git=s(ON);Iuo=r(Git,"PerceiverFeatureExtractor"),Git.forEach(t),Nuo=r(Zye," (Perceiver model)"),Zye.forEach(t),quo=i(K),Jh=n(K,"LI",{});var e8e=s(Jh);Fie=n(e8e,"STRONG",{});var Oit=s(Fie);juo=r(Oit,"poolformer"),Oit.forEach(t),Duo=r(e8e," \u2014 "),VN=n(e8e,"A",{href:!0});var Vit=s(VN);Guo=r(Vit,"PoolFormerFeatureExtractor"),Vit.forEach(t),Ouo=r(e8e," (PoolFormer model)"),e8e.forEach(t),Vuo=i(K),Yh=n(K,"LI",{});var o8e=s(Yh);Tie=n(o8e,"STRONG",{});var Xit=s(Tie);Xuo=r(Xit,"regnet"),Xit.forEach(t),zuo=r(o8e," \u2014 "),XN=n(o8e,"A",{href:!0});var zit=s(XN);Quo=r(zit,"ConvNextFeatureExtractor"),zit.forEach(t),Wuo=r(o8e," (RegNet model)"),o8e.forEach(t),Huo=i(K),Kh=n(K,"LI",{});var r8e=s(Kh);Mie=n(r8e,"STRONG",{});var Qit=s(Mie);Uuo=r(Qit,"resnet"),Qit.forEach(t),Juo=r(r8e," \u2014 "),zN=n(r8e,"A",{href:!0});var Wit=s(zN);Yuo=r(Wit,"ConvNextFeatureExtractor"),Wit.forEach(t),Kuo=r(r8e," (ResNet model)"),r8e.forEach(t),Zuo=i(K),Zh=n(K,"LI",{});var t8e=s(Zh);Eie=n(t8e,"STRONG",{});var Hit=s(Eie);e1o=r(Hit,"segformer"),Hit.forEach(t),o1o=r(t8e," \u2014 "),QN=n(t8e,"A",{href:!0});var Uit=s(QN);r1o=r(Uit,"SegformerFeatureExtractor"),Uit.forEach(t),t1o=r(t8e," (SegFormer model)"),t8e.forEach(t),a1o=i(K),ep=n(K,"LI",{});var a8e=s(ep);Cie=n(a8e,"STRONG",{});var Jit=s(Cie);n1o=r(Jit,"speech_to_text"),Jit.forEach(t),s1o=r(a8e," \u2014 "),WN=n(a8e,"A",{href:!0});var Yit=s(WN);l1o=r(Yit,"Speech2TextFeatureExtractor"),Yit.forEach(t),i1o=r(a8e," (Speech2Text model)"),a8e.forEach(t),d1o=i(K),op=n(K,"LI",{});var n8e=s(op);wie=n(n8e,"STRONG",{});var Kit=s(wie);c1o=r(Kit,"swin"),Kit.forEach(t),f1o=r(n8e," \u2014 "),HN=n(n8e,"A",{href:!0});var Zit=s(HN);m1o=r(Zit,"ViTFeatureExtractor"),Zit.forEach(t),g1o=r(n8e," (Swin Transformer model)"),n8e.forEach(t),h1o=i(K),rp=n(K,"LI",{});var s8e=s(rp);Aie=n(s8e,"STRONG",{});var edt=s(Aie);p1o=r(edt,"van"),edt.forEach(t),_1o=r(s8e," \u2014 "),UN=n(s8e,"A",{href:!0});var odt=s(UN);u1o=r(odt,"ConvNextFeatureExtractor"),odt.forEach(t),b1o=r(s8e," (VAN model)"),s8e.forEach(t),v1o=i(K),tp=n(K,"LI",{});var l8e=s(tp);Lie=n(l8e,"STRONG",{});var rdt=s(Lie);F1o=r(rdt,"vilt"),rdt.forEach(t),T1o=r(l8e," \u2014 "),JN=n(l8e,"A",{href:!0});var tdt=s(JN);M1o=r(tdt,"ViltFeatureExtractor"),tdt.forEach(t),E1o=r(l8e," (ViLT model)"),l8e.forEach(t),C1o=i(K),ap=n(K,"LI",{});var i8e=s(ap);yie=n(i8e,"STRONG",{});var adt=s(yie);w1o=r(adt,"vit"),adt.forEach(t),A1o=r(i8e," \u2014 "),YN=n(i8e,"A",{href:!0});var ndt=s(YN);L1o=r(ndt,"ViTFeatureExtractor"),ndt.forEach(t),y1o=r(i8e," (ViT model)"),i8e.forEach(t),x1o=i(K),np=n(K,"LI",{});var d8e=s(np);xie=n(d8e,"STRONG",{});var sdt=s(xie);$1o=r(sdt,"vit_mae"),sdt.forEach(t),k1o=r(d8e," \u2014 "),KN=n(d8e,"A",{href:!0});var ldt=s(KN);S1o=r(ldt,"ViTFeatureExtractor"),ldt.forEach(t),R1o=r(d8e," (ViTMAE model)"),d8e.forEach(t),P1o=i(K),sp=n(K,"LI",{});var c8e=s(sp);$ie=n(c8e,"STRONG",{});var idt=s($ie);B1o=r(idt,"wav2vec2"),idt.forEach(t),I1o=r(c8e," \u2014 "),ZN=n(c8e,"A",{href:!0});var ddt=s(ZN);N1o=r(ddt,"Wav2Vec2FeatureExtractor"),ddt.forEach(t),q1o=r(c8e," (Wav2Vec2 model)"),c8e.forEach(t),j1o=i(K),lp=n(K,"LI",{});var f8e=s(lp);kie=n(f8e,"STRONG",{});var cdt=s(kie);D1o=r(cdt,"wav2vec2-conformer"),cdt.forEach(t),G1o=r(f8e," \u2014 "),eq=n(f8e,"A",{href:!0});var fdt=s(eq);O1o=r(fdt,"Wav2Vec2FeatureExtractor"),fdt.forEach(t),V1o=r(f8e," (Wav2Vec2-Conformer model)"),f8e.forEach(t),X1o=i(K),ip=n(K,"LI",{});var m8e=s(ip);Sie=n(m8e,"STRONG",{});var mdt=s(Sie);z1o=r(mdt,"yolos"),mdt.forEach(t),Q1o=r(m8e," \u2014 "),oq=n(m8e,"A",{href:!0});var gdt=s(oq);W1o=r(gdt,"YolosFeatureExtractor"),gdt.forEach(t),H1o=r(m8e," (YOLOS model)"),m8e.forEach(t),K.forEach(t),U1o=i(ra),T(dp.$$.fragment,ra),J1o=i(ra),T(cp.$$.fragment,ra),ra.forEach(t),Y1o=i(Ys),fp=n(Ys,"DIV",{class:!0});var NXe=s(fp);T(ty.$$.fragment,NXe),K1o=i(NXe),Rie=n(NXe,"P",{});var hdt=s(Rie);Z1o=r(hdt,"Register a new feature extractor for this class."),hdt.forEach(t),NXe.forEach(t),Ys.forEach(t),POe=i(f),Bi=n(f,"H2",{class:!0});var qXe=s(Bi);mp=n(qXe,"A",{id:!0,class:!0,href:!0});var pdt=s(mp);Pie=n(pdt,"SPAN",{});var _dt=s(Pie);T(ay.$$.fragment,_dt),_dt.forEach(t),pdt.forEach(t),e7o=i(qXe),Bie=n(qXe,"SPAN",{});var udt=s(Bie);o7o=r(udt,"AutoProcessor"),udt.forEach(t),qXe.forEach(t),BOe=i(f),yo=n(f,"DIV",{class:!0});var Ks=s(yo);T(ny.$$.fragment,Ks),r7o=i(Ks),sy=n(Ks,"P",{});var jXe=s(sy);t7o=r(jXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rq=n(jXe,"A",{href:!0});var bdt=s(rq);a7o=r(bdt,"AutoProcessor.from_pretrained()"),bdt.forEach(t),n7o=r(jXe," class method."),jXe.forEach(t),s7o=i(Ks),ly=n(Ks,"P",{});var DXe=s(ly);l7o=r(DXe,"This class cannot be instantiated directly using "),Iie=n(DXe,"CODE",{});var vdt=s(Iie);i7o=r(vdt,"__init__()"),vdt.forEach(t),d7o=r(DXe," (throws an error)."),DXe.forEach(t),c7o=i(Ks),Ue=n(Ks,"DIV",{class:!0});var ta=s(Ue);T(iy.$$.fragment,ta),f7o=i(ta),Nie=n(ta,"P",{});var Fdt=s(Nie);m7o=r(Fdt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fdt.forEach(t),g7o=i(ta),Ii=n(ta,"P",{});var Doe=s(Ii);h7o=r(Doe,"The processor class to instantiate is selected based on the "),qie=n(Doe,"CODE",{});var Tdt=s(qie);p7o=r(Tdt,"model_type"),Tdt.forEach(t),_7o=r(Doe,` property of the config object (either
passed as an argument or loaded from `),jie=n(Doe,"CODE",{});var Mdt=s(jie);u7o=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),b7o=r(Doe," if possible):"),Doe.forEach(t),v7o=i(ta),he=n(ta,"UL",{});var ue=s(he);gp=n(ue,"LI",{});var g8e=s(gp);Die=n(g8e,"STRONG",{});var Edt=s(Die);F7o=r(Edt,"clip"),Edt.forEach(t),T7o=r(g8e," \u2014 "),tq=n(g8e,"A",{href:!0});var Cdt=s(tq);M7o=r(Cdt,"CLIPProcessor"),Cdt.forEach(t),E7o=r(g8e," (CLIP model)"),g8e.forEach(t),C7o=i(ue),hp=n(ue,"LI",{});var h8e=s(hp);Gie=n(h8e,"STRONG",{});var wdt=s(Gie);w7o=r(wdt,"flava"),wdt.forEach(t),A7o=r(h8e," \u2014 "),Oie=n(h8e,"CODE",{});var Adt=s(Oie);L7o=r(Adt,"FLAVAProcessor"),Adt.forEach(t),y7o=r(h8e," (FLAVA model)"),h8e.forEach(t),x7o=i(ue),pp=n(ue,"LI",{});var p8e=s(pp);Vie=n(p8e,"STRONG",{});var Ldt=s(Vie);$7o=r(Ldt,"groupvit"),Ldt.forEach(t),k7o=r(p8e," \u2014 "),aq=n(p8e,"A",{href:!0});var ydt=s(aq);S7o=r(ydt,"CLIPProcessor"),ydt.forEach(t),R7o=r(p8e," (GroupViT model)"),p8e.forEach(t),P7o=i(ue),_p=n(ue,"LI",{});var _8e=s(_p);Xie=n(_8e,"STRONG",{});var xdt=s(Xie);B7o=r(xdt,"layoutlmv2"),xdt.forEach(t),I7o=r(_8e," \u2014 "),nq=n(_8e,"A",{href:!0});var $dt=s(nq);N7o=r($dt,"LayoutLMv2Processor"),$dt.forEach(t),q7o=r(_8e," (LayoutLMv2 model)"),_8e.forEach(t),j7o=i(ue),up=n(ue,"LI",{});var u8e=s(up);zie=n(u8e,"STRONG",{});var kdt=s(zie);D7o=r(kdt,"layoutlmv3"),kdt.forEach(t),G7o=r(u8e," \u2014 "),sq=n(u8e,"A",{href:!0});var Sdt=s(sq);O7o=r(Sdt,"LayoutLMv3Processor"),Sdt.forEach(t),V7o=r(u8e," (LayoutLMv3 model)"),u8e.forEach(t),X7o=i(ue),bp=n(ue,"LI",{});var b8e=s(bp);Qie=n(b8e,"STRONG",{});var Rdt=s(Qie);z7o=r(Rdt,"layoutxlm"),Rdt.forEach(t),Q7o=r(b8e," \u2014 "),lq=n(b8e,"A",{href:!0});var Pdt=s(lq);W7o=r(Pdt,"LayoutXLMProcessor"),Pdt.forEach(t),H7o=r(b8e," (LayoutXLM model)"),b8e.forEach(t),U7o=i(ue),vp=n(ue,"LI",{});var v8e=s(vp);Wie=n(v8e,"STRONG",{});var Bdt=s(Wie);J7o=r(Bdt,"sew"),Bdt.forEach(t),Y7o=r(v8e," \u2014 "),iq=n(v8e,"A",{href:!0});var Idt=s(iq);K7o=r(Idt,"Wav2Vec2Processor"),Idt.forEach(t),Z7o=r(v8e," (SEW model)"),v8e.forEach(t),e2o=i(ue),Fp=n(ue,"LI",{});var F8e=s(Fp);Hie=n(F8e,"STRONG",{});var Ndt=s(Hie);o2o=r(Ndt,"sew-d"),Ndt.forEach(t),r2o=r(F8e," \u2014 "),dq=n(F8e,"A",{href:!0});var qdt=s(dq);t2o=r(qdt,"Wav2Vec2Processor"),qdt.forEach(t),a2o=r(F8e," (SEW-D model)"),F8e.forEach(t),n2o=i(ue),Tp=n(ue,"LI",{});var T8e=s(Tp);Uie=n(T8e,"STRONG",{});var jdt=s(Uie);s2o=r(jdt,"speech_to_text"),jdt.forEach(t),l2o=r(T8e," \u2014 "),cq=n(T8e,"A",{href:!0});var Ddt=s(cq);i2o=r(Ddt,"Speech2TextProcessor"),Ddt.forEach(t),d2o=r(T8e," (Speech2Text model)"),T8e.forEach(t),c2o=i(ue),Mp=n(ue,"LI",{});var M8e=s(Mp);Jie=n(M8e,"STRONG",{});var Gdt=s(Jie);f2o=r(Gdt,"speech_to_text_2"),Gdt.forEach(t),m2o=r(M8e," \u2014 "),fq=n(M8e,"A",{href:!0});var Odt=s(fq);g2o=r(Odt,"Speech2Text2Processor"),Odt.forEach(t),h2o=r(M8e," (Speech2Text2 model)"),M8e.forEach(t),p2o=i(ue),Ep=n(ue,"LI",{});var E8e=s(Ep);Yie=n(E8e,"STRONG",{});var Vdt=s(Yie);_2o=r(Vdt,"trocr"),Vdt.forEach(t),u2o=r(E8e," \u2014 "),mq=n(E8e,"A",{href:!0});var Xdt=s(mq);b2o=r(Xdt,"TrOCRProcessor"),Xdt.forEach(t),v2o=r(E8e," (TrOCR model)"),E8e.forEach(t),F2o=i(ue),Cp=n(ue,"LI",{});var C8e=s(Cp);Kie=n(C8e,"STRONG",{});var zdt=s(Kie);T2o=r(zdt,"unispeech"),zdt.forEach(t),M2o=r(C8e," \u2014 "),gq=n(C8e,"A",{href:!0});var Qdt=s(gq);E2o=r(Qdt,"Wav2Vec2Processor"),Qdt.forEach(t),C2o=r(C8e," (UniSpeech model)"),C8e.forEach(t),w2o=i(ue),wp=n(ue,"LI",{});var w8e=s(wp);Zie=n(w8e,"STRONG",{});var Wdt=s(Zie);A2o=r(Wdt,"unispeech-sat"),Wdt.forEach(t),L2o=r(w8e," \u2014 "),hq=n(w8e,"A",{href:!0});var Hdt=s(hq);y2o=r(Hdt,"Wav2Vec2Processor"),Hdt.forEach(t),x2o=r(w8e," (UniSpeechSat model)"),w8e.forEach(t),$2o=i(ue),Ap=n(ue,"LI",{});var A8e=s(Ap);ede=n(A8e,"STRONG",{});var Udt=s(ede);k2o=r(Udt,"vilt"),Udt.forEach(t),S2o=r(A8e," \u2014 "),pq=n(A8e,"A",{href:!0});var Jdt=s(pq);R2o=r(Jdt,"ViltProcessor"),Jdt.forEach(t),P2o=r(A8e," (ViLT model)"),A8e.forEach(t),B2o=i(ue),Lp=n(ue,"LI",{});var L8e=s(Lp);ode=n(L8e,"STRONG",{});var Ydt=s(ode);I2o=r(Ydt,"vision-text-dual-encoder"),Ydt.forEach(t),N2o=r(L8e," \u2014 "),_q=n(L8e,"A",{href:!0});var Kdt=s(_q);q2o=r(Kdt,"VisionTextDualEncoderProcessor"),Kdt.forEach(t),j2o=r(L8e," (VisionTextDualEncoder model)"),L8e.forEach(t),D2o=i(ue),yp=n(ue,"LI",{});var y8e=s(yp);rde=n(y8e,"STRONG",{});var Zdt=s(rde);G2o=r(Zdt,"wav2vec2"),Zdt.forEach(t),O2o=r(y8e," \u2014 "),uq=n(y8e,"A",{href:!0});var ect=s(uq);V2o=r(ect,"Wav2Vec2Processor"),ect.forEach(t),X2o=r(y8e," (Wav2Vec2 model)"),y8e.forEach(t),z2o=i(ue),xp=n(ue,"LI",{});var x8e=s(xp);tde=n(x8e,"STRONG",{});var oct=s(tde);Q2o=r(oct,"wav2vec2-conformer"),oct.forEach(t),W2o=r(x8e," \u2014 "),bq=n(x8e,"A",{href:!0});var rct=s(bq);H2o=r(rct,"Wav2Vec2Processor"),rct.forEach(t),U2o=r(x8e," (Wav2Vec2-Conformer model)"),x8e.forEach(t),J2o=i(ue),$p=n(ue,"LI",{});var $8e=s($p);ade=n($8e,"STRONG",{});var tct=s(ade);Y2o=r(tct,"wavlm"),tct.forEach(t),K2o=r($8e," \u2014 "),vq=n($8e,"A",{href:!0});var act=s(vq);Z2o=r(act,"Wav2Vec2Processor"),act.forEach(t),ebo=r($8e," (WavLM model)"),$8e.forEach(t),ue.forEach(t),obo=i(ta),T(kp.$$.fragment,ta),rbo=i(ta),T(Sp.$$.fragment,ta),ta.forEach(t),tbo=i(Ks),Rp=n(Ks,"DIV",{class:!0});var GXe=s(Rp);T(dy.$$.fragment,GXe),abo=i(GXe),nde=n(GXe,"P",{});var nct=s(nde);nbo=r(nct,"Register a new processor for this class."),nct.forEach(t),GXe.forEach(t),Ks.forEach(t),IOe=i(f),Ni=n(f,"H2",{class:!0});var OXe=s(Ni);Pp=n(OXe,"A",{id:!0,class:!0,href:!0});var sct=s(Pp);sde=n(sct,"SPAN",{});var lct=s(sde);T(cy.$$.fragment,lct),lct.forEach(t),sct.forEach(t),sbo=i(OXe),lde=n(OXe,"SPAN",{});var ict=s(lde);lbo=r(ict,"AutoModel"),ict.forEach(t),OXe.forEach(t),NOe=i(f),xo=n(f,"DIV",{class:!0});var Zs=s(xo);T(fy.$$.fragment,Zs),ibo=i(Zs),qi=n(Zs,"P",{});var Goe=s(qi);dbo=r(Goe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Fq=n(Goe,"A",{href:!0});var dct=s(Fq);cbo=r(dct,"from_pretrained()"),dct.forEach(t),fbo=r(Goe," class method or the "),Tq=n(Goe,"A",{href:!0});var cct=s(Tq);mbo=r(cct,"from_config()"),cct.forEach(t),gbo=r(Goe,` class
method.`),Goe.forEach(t),hbo=i(Zs),my=n(Zs,"P",{});var VXe=s(my);pbo=r(VXe,"This class cannot be instantiated directly using "),ide=n(VXe,"CODE",{});var fct=s(ide);_bo=r(fct,"__init__()"),fct.forEach(t),ubo=r(VXe," (throws an error)."),VXe.forEach(t),bbo=i(Zs),nt=n(Zs,"DIV",{class:!0});var DA=s(nt);T(gy.$$.fragment,DA),vbo=i(DA),dde=n(DA,"P",{});var mct=s(dde);Fbo=r(mct,"Instantiates one of the base model classes of the library from a configuration."),mct.forEach(t),Tbo=i(DA),ji=n(DA,"P",{});var Ooe=s(ji);Mbo=r(Ooe,`Note:
Loading a model from its configuration file does `),cde=n(Ooe,"STRONG",{});var gct=s(cde);Ebo=r(gct,"not"),gct.forEach(t),Cbo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mq=n(Ooe,"A",{href:!0});var hct=s(Mq);wbo=r(hct,"from_pretrained()"),hct.forEach(t),Abo=r(Ooe," to load the model weights."),Ooe.forEach(t),Lbo=i(DA),T(Bp.$$.fragment,DA),DA.forEach(t),ybo=i(Zs),Je=n(Zs,"DIV",{class:!0});var aa=s(Je);T(hy.$$.fragment,aa),xbo=i(aa),fde=n(aa,"P",{});var pct=s(fde);$bo=r(pct,"Instantiate one of the base model classes of the library from a pretrained model."),pct.forEach(t),kbo=i(aa),Ra=n(aa,"P",{});var GA=s(Ra);Sbo=r(GA,"The model class to instantiate is selected based on the "),mde=n(GA,"CODE",{});var _ct=s(mde);Rbo=r(_ct,"model_type"),_ct.forEach(t),Pbo=r(GA,` property of the config object (either
passed as an argument or loaded from `),gde=n(GA,"CODE",{});var uct=s(gde);Bbo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Ibo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=n(GA,"CODE",{});var bct=s(hde);Nbo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),qbo=r(GA,":"),GA.forEach(t),jbo=i(aa),y=n(aa,"UL",{});var x=s(y);Ip=n(x,"LI",{});var k8e=s(Ip);pde=n(k8e,"STRONG",{});var vct=s(pde);Dbo=r(vct,"albert"),vct.forEach(t),Gbo=r(k8e," \u2014 "),Eq=n(k8e,"A",{href:!0});var Fct=s(Eq);Obo=r(Fct,"AlbertModel"),Fct.forEach(t),Vbo=r(k8e," (ALBERT model)"),k8e.forEach(t),Xbo=i(x),Np=n(x,"LI",{});var S8e=s(Np);_de=n(S8e,"STRONG",{});var Tct=s(_de);zbo=r(Tct,"bart"),Tct.forEach(t),Qbo=r(S8e," \u2014 "),Cq=n(S8e,"A",{href:!0});var Mct=s(Cq);Wbo=r(Mct,"BartModel"),Mct.forEach(t),Hbo=r(S8e," (BART model)"),S8e.forEach(t),Ubo=i(x),qp=n(x,"LI",{});var R8e=s(qp);ude=n(R8e,"STRONG",{});var Ect=s(ude);Jbo=r(Ect,"beit"),Ect.forEach(t),Ybo=r(R8e," \u2014 "),wq=n(R8e,"A",{href:!0});var Cct=s(wq);Kbo=r(Cct,"BeitModel"),Cct.forEach(t),Zbo=r(R8e," (BEiT model)"),R8e.forEach(t),e4o=i(x),jp=n(x,"LI",{});var P8e=s(jp);bde=n(P8e,"STRONG",{});var wct=s(bde);o4o=r(wct,"bert"),wct.forEach(t),r4o=r(P8e," \u2014 "),Aq=n(P8e,"A",{href:!0});var Act=s(Aq);t4o=r(Act,"BertModel"),Act.forEach(t),a4o=r(P8e," (BERT model)"),P8e.forEach(t),n4o=i(x),Dp=n(x,"LI",{});var B8e=s(Dp);vde=n(B8e,"STRONG",{});var Lct=s(vde);s4o=r(Lct,"bert-generation"),Lct.forEach(t),l4o=r(B8e," \u2014 "),Lq=n(B8e,"A",{href:!0});var yct=s(Lq);i4o=r(yct,"BertGenerationEncoder"),yct.forEach(t),d4o=r(B8e," (Bert Generation model)"),B8e.forEach(t),c4o=i(x),Gp=n(x,"LI",{});var I8e=s(Gp);Fde=n(I8e,"STRONG",{});var xct=s(Fde);f4o=r(xct,"big_bird"),xct.forEach(t),m4o=r(I8e," \u2014 "),yq=n(I8e,"A",{href:!0});var $ct=s(yq);g4o=r($ct,"BigBirdModel"),$ct.forEach(t),h4o=r(I8e," (BigBird model)"),I8e.forEach(t),p4o=i(x),Op=n(x,"LI",{});var N8e=s(Op);Tde=n(N8e,"STRONG",{});var kct=s(Tde);_4o=r(kct,"bigbird_pegasus"),kct.forEach(t),u4o=r(N8e," \u2014 "),xq=n(N8e,"A",{href:!0});var Sct=s(xq);b4o=r(Sct,"BigBirdPegasusModel"),Sct.forEach(t),v4o=r(N8e," (BigBird-Pegasus model)"),N8e.forEach(t),F4o=i(x),Vp=n(x,"LI",{});var q8e=s(Vp);Mde=n(q8e,"STRONG",{});var Rct=s(Mde);T4o=r(Rct,"blenderbot"),Rct.forEach(t),M4o=r(q8e," \u2014 "),$q=n(q8e,"A",{href:!0});var Pct=s($q);E4o=r(Pct,"BlenderbotModel"),Pct.forEach(t),C4o=r(q8e," (Blenderbot model)"),q8e.forEach(t),w4o=i(x),Xp=n(x,"LI",{});var j8e=s(Xp);Ede=n(j8e,"STRONG",{});var Bct=s(Ede);A4o=r(Bct,"blenderbot-small"),Bct.forEach(t),L4o=r(j8e," \u2014 "),kq=n(j8e,"A",{href:!0});var Ict=s(kq);y4o=r(Ict,"BlenderbotSmallModel"),Ict.forEach(t),x4o=r(j8e," (BlenderbotSmall model)"),j8e.forEach(t),$4o=i(x),zp=n(x,"LI",{});var D8e=s(zp);Cde=n(D8e,"STRONG",{});var Nct=s(Cde);k4o=r(Nct,"bloom"),Nct.forEach(t),S4o=r(D8e," \u2014 "),Sq=n(D8e,"A",{href:!0});var qct=s(Sq);R4o=r(qct,"BloomModel"),qct.forEach(t),P4o=r(D8e," (BLOOM model)"),D8e.forEach(t),B4o=i(x),Qp=n(x,"LI",{});var G8e=s(Qp);wde=n(G8e,"STRONG",{});var jct=s(wde);I4o=r(jct,"camembert"),jct.forEach(t),N4o=r(G8e," \u2014 "),Rq=n(G8e,"A",{href:!0});var Dct=s(Rq);q4o=r(Dct,"CamembertModel"),Dct.forEach(t),j4o=r(G8e," (CamemBERT model)"),G8e.forEach(t),D4o=i(x),Wp=n(x,"LI",{});var O8e=s(Wp);Ade=n(O8e,"STRONG",{});var Gct=s(Ade);G4o=r(Gct,"canine"),Gct.forEach(t),O4o=r(O8e," \u2014 "),Pq=n(O8e,"A",{href:!0});var Oct=s(Pq);V4o=r(Oct,"CanineModel"),Oct.forEach(t),X4o=r(O8e," (CANINE model)"),O8e.forEach(t),z4o=i(x),Hp=n(x,"LI",{});var V8e=s(Hp);Lde=n(V8e,"STRONG",{});var Vct=s(Lde);Q4o=r(Vct,"clip"),Vct.forEach(t),W4o=r(V8e," \u2014 "),Bq=n(V8e,"A",{href:!0});var Xct=s(Bq);H4o=r(Xct,"CLIPModel"),Xct.forEach(t),U4o=r(V8e," (CLIP model)"),V8e.forEach(t),J4o=i(x),Up=n(x,"LI",{});var X8e=s(Up);yde=n(X8e,"STRONG",{});var zct=s(yde);Y4o=r(zct,"codegen"),zct.forEach(t),K4o=r(X8e," \u2014 "),Iq=n(X8e,"A",{href:!0});var Qct=s(Iq);Z4o=r(Qct,"CodeGenModel"),Qct.forEach(t),e3o=r(X8e," (CodeGen model)"),X8e.forEach(t),o3o=i(x),Jp=n(x,"LI",{});var z8e=s(Jp);xde=n(z8e,"STRONG",{});var Wct=s(xde);r3o=r(Wct,"convbert"),Wct.forEach(t),t3o=r(z8e," \u2014 "),Nq=n(z8e,"A",{href:!0});var Hct=s(Nq);a3o=r(Hct,"ConvBertModel"),Hct.forEach(t),n3o=r(z8e," (ConvBERT model)"),z8e.forEach(t),s3o=i(x),Yp=n(x,"LI",{});var Q8e=s(Yp);$de=n(Q8e,"STRONG",{});var Uct=s($de);l3o=r(Uct,"convnext"),Uct.forEach(t),i3o=r(Q8e," \u2014 "),qq=n(Q8e,"A",{href:!0});var Jct=s(qq);d3o=r(Jct,"ConvNextModel"),Jct.forEach(t),c3o=r(Q8e," (ConvNeXT model)"),Q8e.forEach(t),f3o=i(x),Kp=n(x,"LI",{});var W8e=s(Kp);kde=n(W8e,"STRONG",{});var Yct=s(kde);m3o=r(Yct,"ctrl"),Yct.forEach(t),g3o=r(W8e," \u2014 "),jq=n(W8e,"A",{href:!0});var Kct=s(jq);h3o=r(Kct,"CTRLModel"),Kct.forEach(t),p3o=r(W8e," (CTRL model)"),W8e.forEach(t),_3o=i(x),Zp=n(x,"LI",{});var H8e=s(Zp);Sde=n(H8e,"STRONG",{});var Zct=s(Sde);u3o=r(Zct,"cvt"),Zct.forEach(t),b3o=r(H8e," \u2014 "),Dq=n(H8e,"A",{href:!0});var eft=s(Dq);v3o=r(eft,"CvtModel"),eft.forEach(t),F3o=r(H8e," (CvT model)"),H8e.forEach(t),T3o=i(x),e_=n(x,"LI",{});var U8e=s(e_);Rde=n(U8e,"STRONG",{});var oft=s(Rde);M3o=r(oft,"data2vec-audio"),oft.forEach(t),E3o=r(U8e," \u2014 "),Gq=n(U8e,"A",{href:!0});var rft=s(Gq);C3o=r(rft,"Data2VecAudioModel"),rft.forEach(t),w3o=r(U8e," (Data2VecAudio model)"),U8e.forEach(t),A3o=i(x),o_=n(x,"LI",{});var J8e=s(o_);Pde=n(J8e,"STRONG",{});var tft=s(Pde);L3o=r(tft,"data2vec-text"),tft.forEach(t),y3o=r(J8e," \u2014 "),Oq=n(J8e,"A",{href:!0});var aft=s(Oq);x3o=r(aft,"Data2VecTextModel"),aft.forEach(t),$3o=r(J8e," (Data2VecText model)"),J8e.forEach(t),k3o=i(x),r_=n(x,"LI",{});var Y8e=s(r_);Bde=n(Y8e,"STRONG",{});var nft=s(Bde);S3o=r(nft,"data2vec-vision"),nft.forEach(t),R3o=r(Y8e," \u2014 "),Vq=n(Y8e,"A",{href:!0});var sft=s(Vq);P3o=r(sft,"Data2VecVisionModel"),sft.forEach(t),B3o=r(Y8e," (Data2VecVision model)"),Y8e.forEach(t),I3o=i(x),t_=n(x,"LI",{});var K8e=s(t_);Ide=n(K8e,"STRONG",{});var lft=s(Ide);N3o=r(lft,"deberta"),lft.forEach(t),q3o=r(K8e," \u2014 "),Xq=n(K8e,"A",{href:!0});var ift=s(Xq);j3o=r(ift,"DebertaModel"),ift.forEach(t),D3o=r(K8e," (DeBERTa model)"),K8e.forEach(t),G3o=i(x),a_=n(x,"LI",{});var Z8e=s(a_);Nde=n(Z8e,"STRONG",{});var dft=s(Nde);O3o=r(dft,"deberta-v2"),dft.forEach(t),V3o=r(Z8e," \u2014 "),zq=n(Z8e,"A",{href:!0});var cft=s(zq);X3o=r(cft,"DebertaV2Model"),cft.forEach(t),z3o=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),Q3o=i(x),n_=n(x,"LI",{});var e9e=s(n_);qde=n(e9e,"STRONG",{});var fft=s(qde);W3o=r(fft,"decision_transformer"),fft.forEach(t),H3o=r(e9e," \u2014 "),Qq=n(e9e,"A",{href:!0});var mft=s(Qq);U3o=r(mft,"DecisionTransformerModel"),mft.forEach(t),J3o=r(e9e," (Decision Transformer model)"),e9e.forEach(t),Y3o=i(x),s_=n(x,"LI",{});var o9e=s(s_);jde=n(o9e,"STRONG",{});var gft=s(jde);K3o=r(gft,"deit"),gft.forEach(t),Z3o=r(o9e," \u2014 "),Wq=n(o9e,"A",{href:!0});var hft=s(Wq);evo=r(hft,"DeiTModel"),hft.forEach(t),ovo=r(o9e," (DeiT model)"),o9e.forEach(t),rvo=i(x),l_=n(x,"LI",{});var r9e=s(l_);Dde=n(r9e,"STRONG",{});var pft=s(Dde);tvo=r(pft,"detr"),pft.forEach(t),avo=r(r9e," \u2014 "),Hq=n(r9e,"A",{href:!0});var _ft=s(Hq);nvo=r(_ft,"DetrModel"),_ft.forEach(t),svo=r(r9e," (DETR model)"),r9e.forEach(t),lvo=i(x),i_=n(x,"LI",{});var t9e=s(i_);Gde=n(t9e,"STRONG",{});var uft=s(Gde);ivo=r(uft,"distilbert"),uft.forEach(t),dvo=r(t9e," \u2014 "),Uq=n(t9e,"A",{href:!0});var bft=s(Uq);cvo=r(bft,"DistilBertModel"),bft.forEach(t),fvo=r(t9e," (DistilBERT model)"),t9e.forEach(t),mvo=i(x),d_=n(x,"LI",{});var a9e=s(d_);Ode=n(a9e,"STRONG",{});var vft=s(Ode);gvo=r(vft,"dpr"),vft.forEach(t),hvo=r(a9e," \u2014 "),Jq=n(a9e,"A",{href:!0});var Fft=s(Jq);pvo=r(Fft,"DPRQuestionEncoder"),Fft.forEach(t),_vo=r(a9e," (DPR model)"),a9e.forEach(t),uvo=i(x),c_=n(x,"LI",{});var n9e=s(c_);Vde=n(n9e,"STRONG",{});var Tft=s(Vde);bvo=r(Tft,"dpt"),Tft.forEach(t),vvo=r(n9e," \u2014 "),Yq=n(n9e,"A",{href:!0});var Mft=s(Yq);Fvo=r(Mft,"DPTModel"),Mft.forEach(t),Tvo=r(n9e," (DPT model)"),n9e.forEach(t),Mvo=i(x),f_=n(x,"LI",{});var s9e=s(f_);Xde=n(s9e,"STRONG",{});var Eft=s(Xde);Evo=r(Eft,"electra"),Eft.forEach(t),Cvo=r(s9e," \u2014 "),Kq=n(s9e,"A",{href:!0});var Cft=s(Kq);wvo=r(Cft,"ElectraModel"),Cft.forEach(t),Avo=r(s9e," (ELECTRA model)"),s9e.forEach(t),Lvo=i(x),m_=n(x,"LI",{});var l9e=s(m_);zde=n(l9e,"STRONG",{});var wft=s(zde);yvo=r(wft,"flaubert"),wft.forEach(t),xvo=r(l9e," \u2014 "),Zq=n(l9e,"A",{href:!0});var Aft=s(Zq);$vo=r(Aft,"FlaubertModel"),Aft.forEach(t),kvo=r(l9e," (FlauBERT model)"),l9e.forEach(t),Svo=i(x),g_=n(x,"LI",{});var i9e=s(g_);Qde=n(i9e,"STRONG",{});var Lft=s(Qde);Rvo=r(Lft,"flava"),Lft.forEach(t),Pvo=r(i9e," \u2014 "),ej=n(i9e,"A",{href:!0});var yft=s(ej);Bvo=r(yft,"FlavaModel"),yft.forEach(t),Ivo=r(i9e," (FLAVA model)"),i9e.forEach(t),Nvo=i(x),h_=n(x,"LI",{});var d9e=s(h_);Wde=n(d9e,"STRONG",{});var xft=s(Wde);qvo=r(xft,"fnet"),xft.forEach(t),jvo=r(d9e," \u2014 "),oj=n(d9e,"A",{href:!0});var $ft=s(oj);Dvo=r($ft,"FNetModel"),$ft.forEach(t),Gvo=r(d9e," (FNet model)"),d9e.forEach(t),Ovo=i(x),p_=n(x,"LI",{});var c9e=s(p_);Hde=n(c9e,"STRONG",{});var kft=s(Hde);Vvo=r(kft,"fsmt"),kft.forEach(t),Xvo=r(c9e," \u2014 "),rj=n(c9e,"A",{href:!0});var Sft=s(rj);zvo=r(Sft,"FSMTModel"),Sft.forEach(t),Qvo=r(c9e," (FairSeq Machine-Translation model)"),c9e.forEach(t),Wvo=i(x),zs=n(x,"LI",{});var dS=s(zs);Ude=n(dS,"STRONG",{});var Rft=s(Ude);Hvo=r(Rft,"funnel"),Rft.forEach(t),Uvo=r(dS," \u2014 "),tj=n(dS,"A",{href:!0});var Pft=s(tj);Jvo=r(Pft,"FunnelModel"),Pft.forEach(t),Yvo=r(dS," or "),aj=n(dS,"A",{href:!0});var Bft=s(aj);Kvo=r(Bft,"FunnelBaseModel"),Bft.forEach(t),Zvo=r(dS," (Funnel Transformer model)"),dS.forEach(t),eFo=i(x),__=n(x,"LI",{});var f9e=s(__);Jde=n(f9e,"STRONG",{});var Ift=s(Jde);oFo=r(Ift,"glpn"),Ift.forEach(t),rFo=r(f9e," \u2014 "),nj=n(f9e,"A",{href:!0});var Nft=s(nj);tFo=r(Nft,"GLPNModel"),Nft.forEach(t),aFo=r(f9e," (GLPN model)"),f9e.forEach(t),nFo=i(x),u_=n(x,"LI",{});var m9e=s(u_);Yde=n(m9e,"STRONG",{});var qft=s(Yde);sFo=r(qft,"gpt2"),qft.forEach(t),lFo=r(m9e," \u2014 "),sj=n(m9e,"A",{href:!0});var jft=s(sj);iFo=r(jft,"GPT2Model"),jft.forEach(t),dFo=r(m9e," (OpenAI GPT-2 model)"),m9e.forEach(t),cFo=i(x),b_=n(x,"LI",{});var g9e=s(b_);Kde=n(g9e,"STRONG",{});var Dft=s(Kde);fFo=r(Dft,"gpt_neo"),Dft.forEach(t),mFo=r(g9e," \u2014 "),lj=n(g9e,"A",{href:!0});var Gft=s(lj);gFo=r(Gft,"GPTNeoModel"),Gft.forEach(t),hFo=r(g9e," (GPT Neo model)"),g9e.forEach(t),pFo=i(x),v_=n(x,"LI",{});var h9e=s(v_);Zde=n(h9e,"STRONG",{});var Oft=s(Zde);_Fo=r(Oft,"gpt_neox"),Oft.forEach(t),uFo=r(h9e," \u2014 "),ij=n(h9e,"A",{href:!0});var Vft=s(ij);bFo=r(Vft,"GPTNeoXModel"),Vft.forEach(t),vFo=r(h9e," (GPT NeoX model)"),h9e.forEach(t),FFo=i(x),F_=n(x,"LI",{});var p9e=s(F_);ece=n(p9e,"STRONG",{});var Xft=s(ece);TFo=r(Xft,"gptj"),Xft.forEach(t),MFo=r(p9e," \u2014 "),dj=n(p9e,"A",{href:!0});var zft=s(dj);EFo=r(zft,"GPTJModel"),zft.forEach(t),CFo=r(p9e," (GPT-J model)"),p9e.forEach(t),wFo=i(x),T_=n(x,"LI",{});var _9e=s(T_);oce=n(_9e,"STRONG",{});var Qft=s(oce);AFo=r(Qft,"groupvit"),Qft.forEach(t),LFo=r(_9e," \u2014 "),cj=n(_9e,"A",{href:!0});var Wft=s(cj);yFo=r(Wft,"GroupViTModel"),Wft.forEach(t),xFo=r(_9e," (GroupViT model)"),_9e.forEach(t),$Fo=i(x),M_=n(x,"LI",{});var u9e=s(M_);rce=n(u9e,"STRONG",{});var Hft=s(rce);kFo=r(Hft,"hubert"),Hft.forEach(t),SFo=r(u9e," \u2014 "),fj=n(u9e,"A",{href:!0});var Uft=s(fj);RFo=r(Uft,"HubertModel"),Uft.forEach(t),PFo=r(u9e," (Hubert model)"),u9e.forEach(t),BFo=i(x),E_=n(x,"LI",{});var b9e=s(E_);tce=n(b9e,"STRONG",{});var Jft=s(tce);IFo=r(Jft,"ibert"),Jft.forEach(t),NFo=r(b9e," \u2014 "),mj=n(b9e,"A",{href:!0});var Yft=s(mj);qFo=r(Yft,"IBertModel"),Yft.forEach(t),jFo=r(b9e," (I-BERT model)"),b9e.forEach(t),DFo=i(x),C_=n(x,"LI",{});var v9e=s(C_);ace=n(v9e,"STRONG",{});var Kft=s(ace);GFo=r(Kft,"imagegpt"),Kft.forEach(t),OFo=r(v9e," \u2014 "),gj=n(v9e,"A",{href:!0});var Zft=s(gj);VFo=r(Zft,"ImageGPTModel"),Zft.forEach(t),XFo=r(v9e," (ImageGPT model)"),v9e.forEach(t),zFo=i(x),w_=n(x,"LI",{});var F9e=s(w_);nce=n(F9e,"STRONG",{});var emt=s(nce);QFo=r(emt,"layoutlm"),emt.forEach(t),WFo=r(F9e," \u2014 "),hj=n(F9e,"A",{href:!0});var omt=s(hj);HFo=r(omt,"LayoutLMModel"),omt.forEach(t),UFo=r(F9e," (LayoutLM model)"),F9e.forEach(t),JFo=i(x),A_=n(x,"LI",{});var T9e=s(A_);sce=n(T9e,"STRONG",{});var rmt=s(sce);YFo=r(rmt,"layoutlmv2"),rmt.forEach(t),KFo=r(T9e," \u2014 "),pj=n(T9e,"A",{href:!0});var tmt=s(pj);ZFo=r(tmt,"LayoutLMv2Model"),tmt.forEach(t),eTo=r(T9e," (LayoutLMv2 model)"),T9e.forEach(t),oTo=i(x),L_=n(x,"LI",{});var M9e=s(L_);lce=n(M9e,"STRONG",{});var amt=s(lce);rTo=r(amt,"layoutlmv3"),amt.forEach(t),tTo=r(M9e," \u2014 "),_j=n(M9e,"A",{href:!0});var nmt=s(_j);aTo=r(nmt,"LayoutLMv3Model"),nmt.forEach(t),nTo=r(M9e," (LayoutLMv3 model)"),M9e.forEach(t),sTo=i(x),y_=n(x,"LI",{});var E9e=s(y_);ice=n(E9e,"STRONG",{});var smt=s(ice);lTo=r(smt,"led"),smt.forEach(t),iTo=r(E9e," \u2014 "),uj=n(E9e,"A",{href:!0});var lmt=s(uj);dTo=r(lmt,"LEDModel"),lmt.forEach(t),cTo=r(E9e," (LED model)"),E9e.forEach(t),fTo=i(x),x_=n(x,"LI",{});var C9e=s(x_);dce=n(C9e,"STRONG",{});var imt=s(dce);mTo=r(imt,"levit"),imt.forEach(t),gTo=r(C9e," \u2014 "),bj=n(C9e,"A",{href:!0});var dmt=s(bj);hTo=r(dmt,"LevitModel"),dmt.forEach(t),pTo=r(C9e," (LeViT model)"),C9e.forEach(t),_To=i(x),$_=n(x,"LI",{});var w9e=s($_);cce=n(w9e,"STRONG",{});var cmt=s(cce);uTo=r(cmt,"longformer"),cmt.forEach(t),bTo=r(w9e," \u2014 "),vj=n(w9e,"A",{href:!0});var fmt=s(vj);vTo=r(fmt,"LongformerModel"),fmt.forEach(t),FTo=r(w9e," (Longformer model)"),w9e.forEach(t),TTo=i(x),k_=n(x,"LI",{});var A9e=s(k_);fce=n(A9e,"STRONG",{});var mmt=s(fce);MTo=r(mmt,"longt5"),mmt.forEach(t),ETo=r(A9e," \u2014 "),Fj=n(A9e,"A",{href:!0});var gmt=s(Fj);CTo=r(gmt,"LongT5Model"),gmt.forEach(t),wTo=r(A9e," (LongT5 model)"),A9e.forEach(t),ATo=i(x),S_=n(x,"LI",{});var L9e=s(S_);mce=n(L9e,"STRONG",{});var hmt=s(mce);LTo=r(hmt,"luke"),hmt.forEach(t),yTo=r(L9e," \u2014 "),Tj=n(L9e,"A",{href:!0});var pmt=s(Tj);xTo=r(pmt,"LukeModel"),pmt.forEach(t),$To=r(L9e," (LUKE model)"),L9e.forEach(t),kTo=i(x),R_=n(x,"LI",{});var y9e=s(R_);gce=n(y9e,"STRONG",{});var _mt=s(gce);STo=r(_mt,"lxmert"),_mt.forEach(t),RTo=r(y9e," \u2014 "),Mj=n(y9e,"A",{href:!0});var umt=s(Mj);PTo=r(umt,"LxmertModel"),umt.forEach(t),BTo=r(y9e," (LXMERT model)"),y9e.forEach(t),ITo=i(x),P_=n(x,"LI",{});var x9e=s(P_);hce=n(x9e,"STRONG",{});var bmt=s(hce);NTo=r(bmt,"m2m_100"),bmt.forEach(t),qTo=r(x9e," \u2014 "),Ej=n(x9e,"A",{href:!0});var vmt=s(Ej);jTo=r(vmt,"M2M100Model"),vmt.forEach(t),DTo=r(x9e," (M2M100 model)"),x9e.forEach(t),GTo=i(x),B_=n(x,"LI",{});var $9e=s(B_);pce=n($9e,"STRONG",{});var Fmt=s(pce);OTo=r(Fmt,"marian"),Fmt.forEach(t),VTo=r($9e," \u2014 "),Cj=n($9e,"A",{href:!0});var Tmt=s(Cj);XTo=r(Tmt,"MarianModel"),Tmt.forEach(t),zTo=r($9e," (Marian model)"),$9e.forEach(t),QTo=i(x),I_=n(x,"LI",{});var k9e=s(I_);_ce=n(k9e,"STRONG",{});var Mmt=s(_ce);WTo=r(Mmt,"maskformer"),Mmt.forEach(t),HTo=r(k9e," \u2014 "),wj=n(k9e,"A",{href:!0});var Emt=s(wj);UTo=r(Emt,"MaskFormerModel"),Emt.forEach(t),JTo=r(k9e," (MaskFormer model)"),k9e.forEach(t),YTo=i(x),N_=n(x,"LI",{});var S9e=s(N_);uce=n(S9e,"STRONG",{});var Cmt=s(uce);KTo=r(Cmt,"mbart"),Cmt.forEach(t),ZTo=r(S9e," \u2014 "),Aj=n(S9e,"A",{href:!0});var wmt=s(Aj);eMo=r(wmt,"MBartModel"),wmt.forEach(t),oMo=r(S9e," (mBART model)"),S9e.forEach(t),rMo=i(x),q_=n(x,"LI",{});var R9e=s(q_);bce=n(R9e,"STRONG",{});var Amt=s(bce);tMo=r(Amt,"mctct"),Amt.forEach(t),aMo=r(R9e," \u2014 "),Lj=n(R9e,"A",{href:!0});var Lmt=s(Lj);nMo=r(Lmt,"MCTCTModel"),Lmt.forEach(t),sMo=r(R9e," (M-CTC-T model)"),R9e.forEach(t),lMo=i(x),j_=n(x,"LI",{});var P9e=s(j_);vce=n(P9e,"STRONG",{});var ymt=s(vce);iMo=r(ymt,"megatron-bert"),ymt.forEach(t),dMo=r(P9e," \u2014 "),yj=n(P9e,"A",{href:!0});var xmt=s(yj);cMo=r(xmt,"MegatronBertModel"),xmt.forEach(t),fMo=r(P9e," (Megatron-BERT model)"),P9e.forEach(t),mMo=i(x),D_=n(x,"LI",{});var B9e=s(D_);Fce=n(B9e,"STRONG",{});var $mt=s(Fce);gMo=r($mt,"mobilebert"),$mt.forEach(t),hMo=r(B9e," \u2014 "),xj=n(B9e,"A",{href:!0});var kmt=s(xj);pMo=r(kmt,"MobileBertModel"),kmt.forEach(t),_Mo=r(B9e," (MobileBERT model)"),B9e.forEach(t),uMo=i(x),G_=n(x,"LI",{});var I9e=s(G_);Tce=n(I9e,"STRONG",{});var Smt=s(Tce);bMo=r(Smt,"mpnet"),Smt.forEach(t),vMo=r(I9e," \u2014 "),$j=n(I9e,"A",{href:!0});var Rmt=s($j);FMo=r(Rmt,"MPNetModel"),Rmt.forEach(t),TMo=r(I9e," (MPNet model)"),I9e.forEach(t),MMo=i(x),O_=n(x,"LI",{});var N9e=s(O_);Mce=n(N9e,"STRONG",{});var Pmt=s(Mce);EMo=r(Pmt,"mt5"),Pmt.forEach(t),CMo=r(N9e," \u2014 "),kj=n(N9e,"A",{href:!0});var Bmt=s(kj);wMo=r(Bmt,"MT5Model"),Bmt.forEach(t),AMo=r(N9e," (MT5 model)"),N9e.forEach(t),LMo=i(x),V_=n(x,"LI",{});var q9e=s(V_);Ece=n(q9e,"STRONG",{});var Imt=s(Ece);yMo=r(Imt,"nezha"),Imt.forEach(t),xMo=r(q9e," \u2014 "),Sj=n(q9e,"A",{href:!0});var Nmt=s(Sj);$Mo=r(Nmt,"NezhaModel"),Nmt.forEach(t),kMo=r(q9e," (Nezha model)"),q9e.forEach(t),SMo=i(x),X_=n(x,"LI",{});var j9e=s(X_);Cce=n(j9e,"STRONG",{});var qmt=s(Cce);RMo=r(qmt,"nystromformer"),qmt.forEach(t),PMo=r(j9e," \u2014 "),Rj=n(j9e,"A",{href:!0});var jmt=s(Rj);BMo=r(jmt,"NystromformerModel"),jmt.forEach(t),IMo=r(j9e," (Nystr\xF6mformer model)"),j9e.forEach(t),NMo=i(x),z_=n(x,"LI",{});var D9e=s(z_);wce=n(D9e,"STRONG",{});var Dmt=s(wce);qMo=r(Dmt,"openai-gpt"),Dmt.forEach(t),jMo=r(D9e," \u2014 "),Pj=n(D9e,"A",{href:!0});var Gmt=s(Pj);DMo=r(Gmt,"OpenAIGPTModel"),Gmt.forEach(t),GMo=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),OMo=i(x),Q_=n(x,"LI",{});var G9e=s(Q_);Ace=n(G9e,"STRONG",{});var Omt=s(Ace);VMo=r(Omt,"opt"),Omt.forEach(t),XMo=r(G9e," \u2014 "),Bj=n(G9e,"A",{href:!0});var Vmt=s(Bj);zMo=r(Vmt,"OPTModel"),Vmt.forEach(t),QMo=r(G9e," (OPT model)"),G9e.forEach(t),WMo=i(x),W_=n(x,"LI",{});var O9e=s(W_);Lce=n(O9e,"STRONG",{});var Xmt=s(Lce);HMo=r(Xmt,"pegasus"),Xmt.forEach(t),UMo=r(O9e," \u2014 "),Ij=n(O9e,"A",{href:!0});var zmt=s(Ij);JMo=r(zmt,"PegasusModel"),zmt.forEach(t),YMo=r(O9e," (Pegasus model)"),O9e.forEach(t),KMo=i(x),H_=n(x,"LI",{});var V9e=s(H_);yce=n(V9e,"STRONG",{});var Qmt=s(yce);ZMo=r(Qmt,"perceiver"),Qmt.forEach(t),eEo=r(V9e," \u2014 "),Nj=n(V9e,"A",{href:!0});var Wmt=s(Nj);oEo=r(Wmt,"PerceiverModel"),Wmt.forEach(t),rEo=r(V9e," (Perceiver model)"),V9e.forEach(t),tEo=i(x),U_=n(x,"LI",{});var X9e=s(U_);xce=n(X9e,"STRONG",{});var Hmt=s(xce);aEo=r(Hmt,"plbart"),Hmt.forEach(t),nEo=r(X9e," \u2014 "),qj=n(X9e,"A",{href:!0});var Umt=s(qj);sEo=r(Umt,"PLBartModel"),Umt.forEach(t),lEo=r(X9e," (PLBart model)"),X9e.forEach(t),iEo=i(x),J_=n(x,"LI",{});var z9e=s(J_);$ce=n(z9e,"STRONG",{});var Jmt=s($ce);dEo=r(Jmt,"poolformer"),Jmt.forEach(t),cEo=r(z9e," \u2014 "),jj=n(z9e,"A",{href:!0});var Ymt=s(jj);fEo=r(Ymt,"PoolFormerModel"),Ymt.forEach(t),mEo=r(z9e," (PoolFormer model)"),z9e.forEach(t),gEo=i(x),Y_=n(x,"LI",{});var Q9e=s(Y_);kce=n(Q9e,"STRONG",{});var Kmt=s(kce);hEo=r(Kmt,"prophetnet"),Kmt.forEach(t),pEo=r(Q9e," \u2014 "),Dj=n(Q9e,"A",{href:!0});var Zmt=s(Dj);_Eo=r(Zmt,"ProphetNetModel"),Zmt.forEach(t),uEo=r(Q9e," (ProphetNet model)"),Q9e.forEach(t),bEo=i(x),K_=n(x,"LI",{});var W9e=s(K_);Sce=n(W9e,"STRONG",{});var egt=s(Sce);vEo=r(egt,"qdqbert"),egt.forEach(t),FEo=r(W9e," \u2014 "),Gj=n(W9e,"A",{href:!0});var ogt=s(Gj);TEo=r(ogt,"QDQBertModel"),ogt.forEach(t),MEo=r(W9e," (QDQBert model)"),W9e.forEach(t),EEo=i(x),Z_=n(x,"LI",{});var H9e=s(Z_);Rce=n(H9e,"STRONG",{});var rgt=s(Rce);CEo=r(rgt,"reformer"),rgt.forEach(t),wEo=r(H9e," \u2014 "),Oj=n(H9e,"A",{href:!0});var tgt=s(Oj);AEo=r(tgt,"ReformerModel"),tgt.forEach(t),LEo=r(H9e," (Reformer model)"),H9e.forEach(t),yEo=i(x),eu=n(x,"LI",{});var U9e=s(eu);Pce=n(U9e,"STRONG",{});var agt=s(Pce);xEo=r(agt,"regnet"),agt.forEach(t),$Eo=r(U9e," \u2014 "),Vj=n(U9e,"A",{href:!0});var ngt=s(Vj);kEo=r(ngt,"RegNetModel"),ngt.forEach(t),SEo=r(U9e," (RegNet model)"),U9e.forEach(t),REo=i(x),ou=n(x,"LI",{});var J9e=s(ou);Bce=n(J9e,"STRONG",{});var sgt=s(Bce);PEo=r(sgt,"rembert"),sgt.forEach(t),BEo=r(J9e," \u2014 "),Xj=n(J9e,"A",{href:!0});var lgt=s(Xj);IEo=r(lgt,"RemBertModel"),lgt.forEach(t),NEo=r(J9e," (RemBERT model)"),J9e.forEach(t),qEo=i(x),ru=n(x,"LI",{});var Y9e=s(ru);Ice=n(Y9e,"STRONG",{});var igt=s(Ice);jEo=r(igt,"resnet"),igt.forEach(t),DEo=r(Y9e," \u2014 "),zj=n(Y9e,"A",{href:!0});var dgt=s(zj);GEo=r(dgt,"ResNetModel"),dgt.forEach(t),OEo=r(Y9e," (ResNet model)"),Y9e.forEach(t),VEo=i(x),tu=n(x,"LI",{});var K9e=s(tu);Nce=n(K9e,"STRONG",{});var cgt=s(Nce);XEo=r(cgt,"retribert"),cgt.forEach(t),zEo=r(K9e," \u2014 "),Qj=n(K9e,"A",{href:!0});var fgt=s(Qj);QEo=r(fgt,"RetriBertModel"),fgt.forEach(t),WEo=r(K9e," (RetriBERT model)"),K9e.forEach(t),HEo=i(x),au=n(x,"LI",{});var Z9e=s(au);qce=n(Z9e,"STRONG",{});var mgt=s(qce);UEo=r(mgt,"roberta"),mgt.forEach(t),JEo=r(Z9e," \u2014 "),Wj=n(Z9e,"A",{href:!0});var ggt=s(Wj);YEo=r(ggt,"RobertaModel"),ggt.forEach(t),KEo=r(Z9e," (RoBERTa model)"),Z9e.forEach(t),ZEo=i(x),nu=n(x,"LI",{});var exe=s(nu);jce=n(exe,"STRONG",{});var hgt=s(jce);eCo=r(hgt,"roformer"),hgt.forEach(t),oCo=r(exe," \u2014 "),Hj=n(exe,"A",{href:!0});var pgt=s(Hj);rCo=r(pgt,"RoFormerModel"),pgt.forEach(t),tCo=r(exe," (RoFormer model)"),exe.forEach(t),aCo=i(x),su=n(x,"LI",{});var oxe=s(su);Dce=n(oxe,"STRONG",{});var _gt=s(Dce);nCo=r(_gt,"segformer"),_gt.forEach(t),sCo=r(oxe," \u2014 "),Uj=n(oxe,"A",{href:!0});var ugt=s(Uj);lCo=r(ugt,"SegformerModel"),ugt.forEach(t),iCo=r(oxe," (SegFormer model)"),oxe.forEach(t),dCo=i(x),lu=n(x,"LI",{});var rxe=s(lu);Gce=n(rxe,"STRONG",{});var bgt=s(Gce);cCo=r(bgt,"sew"),bgt.forEach(t),fCo=r(rxe," \u2014 "),Jj=n(rxe,"A",{href:!0});var vgt=s(Jj);mCo=r(vgt,"SEWModel"),vgt.forEach(t),gCo=r(rxe," (SEW model)"),rxe.forEach(t),hCo=i(x),iu=n(x,"LI",{});var txe=s(iu);Oce=n(txe,"STRONG",{});var Fgt=s(Oce);pCo=r(Fgt,"sew-d"),Fgt.forEach(t),_Co=r(txe," \u2014 "),Yj=n(txe,"A",{href:!0});var Tgt=s(Yj);uCo=r(Tgt,"SEWDModel"),Tgt.forEach(t),bCo=r(txe," (SEW-D model)"),txe.forEach(t),vCo=i(x),du=n(x,"LI",{});var axe=s(du);Vce=n(axe,"STRONG",{});var Mgt=s(Vce);FCo=r(Mgt,"speech_to_text"),Mgt.forEach(t),TCo=r(axe," \u2014 "),Kj=n(axe,"A",{href:!0});var Egt=s(Kj);MCo=r(Egt,"Speech2TextModel"),Egt.forEach(t),ECo=r(axe," (Speech2Text model)"),axe.forEach(t),CCo=i(x),cu=n(x,"LI",{});var nxe=s(cu);Xce=n(nxe,"STRONG",{});var Cgt=s(Xce);wCo=r(Cgt,"splinter"),Cgt.forEach(t),ACo=r(nxe," \u2014 "),Zj=n(nxe,"A",{href:!0});var wgt=s(Zj);LCo=r(wgt,"SplinterModel"),wgt.forEach(t),yCo=r(nxe," (Splinter model)"),nxe.forEach(t),xCo=i(x),fu=n(x,"LI",{});var sxe=s(fu);zce=n(sxe,"STRONG",{});var Agt=s(zce);$Co=r(Agt,"squeezebert"),Agt.forEach(t),kCo=r(sxe," \u2014 "),eD=n(sxe,"A",{href:!0});var Lgt=s(eD);SCo=r(Lgt,"SqueezeBertModel"),Lgt.forEach(t),RCo=r(sxe," (SqueezeBERT model)"),sxe.forEach(t),PCo=i(x),mu=n(x,"LI",{});var lxe=s(mu);Qce=n(lxe,"STRONG",{});var ygt=s(Qce);BCo=r(ygt,"swin"),ygt.forEach(t),ICo=r(lxe," \u2014 "),oD=n(lxe,"A",{href:!0});var xgt=s(oD);NCo=r(xgt,"SwinModel"),xgt.forEach(t),qCo=r(lxe," (Swin Transformer model)"),lxe.forEach(t),jCo=i(x),gu=n(x,"LI",{});var ixe=s(gu);Wce=n(ixe,"STRONG",{});var $gt=s(Wce);DCo=r($gt,"t5"),$gt.forEach(t),GCo=r(ixe," \u2014 "),rD=n(ixe,"A",{href:!0});var kgt=s(rD);OCo=r(kgt,"T5Model"),kgt.forEach(t),VCo=r(ixe," (T5 model)"),ixe.forEach(t),XCo=i(x),hu=n(x,"LI",{});var dxe=s(hu);Hce=n(dxe,"STRONG",{});var Sgt=s(Hce);zCo=r(Sgt,"tapas"),Sgt.forEach(t),QCo=r(dxe," \u2014 "),tD=n(dxe,"A",{href:!0});var Rgt=s(tD);WCo=r(Rgt,"TapasModel"),Rgt.forEach(t),HCo=r(dxe," (TAPAS model)"),dxe.forEach(t),UCo=i(x),pu=n(x,"LI",{});var cxe=s(pu);Uce=n(cxe,"STRONG",{});var Pgt=s(Uce);JCo=r(Pgt,"trajectory_transformer"),Pgt.forEach(t),YCo=r(cxe," \u2014 "),aD=n(cxe,"A",{href:!0});var Bgt=s(aD);KCo=r(Bgt,"TrajectoryTransformerModel"),Bgt.forEach(t),ZCo=r(cxe," (Trajectory Transformer model)"),cxe.forEach(t),e5o=i(x),_u=n(x,"LI",{});var fxe=s(_u);Jce=n(fxe,"STRONG",{});var Igt=s(Jce);o5o=r(Igt,"transfo-xl"),Igt.forEach(t),r5o=r(fxe," \u2014 "),nD=n(fxe,"A",{href:!0});var Ngt=s(nD);t5o=r(Ngt,"TransfoXLModel"),Ngt.forEach(t),a5o=r(fxe," (Transformer-XL model)"),fxe.forEach(t),n5o=i(x),uu=n(x,"LI",{});var mxe=s(uu);Yce=n(mxe,"STRONG",{});var qgt=s(Yce);s5o=r(qgt,"unispeech"),qgt.forEach(t),l5o=r(mxe," \u2014 "),sD=n(mxe,"A",{href:!0});var jgt=s(sD);i5o=r(jgt,"UniSpeechModel"),jgt.forEach(t),d5o=r(mxe," (UniSpeech model)"),mxe.forEach(t),c5o=i(x),bu=n(x,"LI",{});var gxe=s(bu);Kce=n(gxe,"STRONG",{});var Dgt=s(Kce);f5o=r(Dgt,"unispeech-sat"),Dgt.forEach(t),m5o=r(gxe," \u2014 "),lD=n(gxe,"A",{href:!0});var Ggt=s(lD);g5o=r(Ggt,"UniSpeechSatModel"),Ggt.forEach(t),h5o=r(gxe," (UniSpeechSat model)"),gxe.forEach(t),p5o=i(x),vu=n(x,"LI",{});var hxe=s(vu);Zce=n(hxe,"STRONG",{});var Ogt=s(Zce);_5o=r(Ogt,"van"),Ogt.forEach(t),u5o=r(hxe," \u2014 "),iD=n(hxe,"A",{href:!0});var Vgt=s(iD);b5o=r(Vgt,"VanModel"),Vgt.forEach(t),v5o=r(hxe," (VAN model)"),hxe.forEach(t),F5o=i(x),Fu=n(x,"LI",{});var pxe=s(Fu);efe=n(pxe,"STRONG",{});var Xgt=s(efe);T5o=r(Xgt,"vilt"),Xgt.forEach(t),M5o=r(pxe," \u2014 "),dD=n(pxe,"A",{href:!0});var zgt=s(dD);E5o=r(zgt,"ViltModel"),zgt.forEach(t),C5o=r(pxe," (ViLT model)"),pxe.forEach(t),w5o=i(x),Tu=n(x,"LI",{});var _xe=s(Tu);ofe=n(_xe,"STRONG",{});var Qgt=s(ofe);A5o=r(Qgt,"vision-text-dual-encoder"),Qgt.forEach(t),L5o=r(_xe," \u2014 "),cD=n(_xe,"A",{href:!0});var Wgt=s(cD);y5o=r(Wgt,"VisionTextDualEncoderModel"),Wgt.forEach(t),x5o=r(_xe," (VisionTextDualEncoder model)"),_xe.forEach(t),$5o=i(x),Mu=n(x,"LI",{});var uxe=s(Mu);rfe=n(uxe,"STRONG",{});var Hgt=s(rfe);k5o=r(Hgt,"visual_bert"),Hgt.forEach(t),S5o=r(uxe," \u2014 "),fD=n(uxe,"A",{href:!0});var Ugt=s(fD);R5o=r(Ugt,"VisualBertModel"),Ugt.forEach(t),P5o=r(uxe," (VisualBERT model)"),uxe.forEach(t),B5o=i(x),Eu=n(x,"LI",{});var bxe=s(Eu);tfe=n(bxe,"STRONG",{});var Jgt=s(tfe);I5o=r(Jgt,"vit"),Jgt.forEach(t),N5o=r(bxe," \u2014 "),mD=n(bxe,"A",{href:!0});var Ygt=s(mD);q5o=r(Ygt,"ViTModel"),Ygt.forEach(t),j5o=r(bxe," (ViT model)"),bxe.forEach(t),D5o=i(x),Cu=n(x,"LI",{});var vxe=s(Cu);afe=n(vxe,"STRONG",{});var Kgt=s(afe);G5o=r(Kgt,"vit_mae"),Kgt.forEach(t),O5o=r(vxe," \u2014 "),gD=n(vxe,"A",{href:!0});var Zgt=s(gD);V5o=r(Zgt,"ViTMAEModel"),Zgt.forEach(t),X5o=r(vxe," (ViTMAE model)"),vxe.forEach(t),z5o=i(x),wu=n(x,"LI",{});var Fxe=s(wu);nfe=n(Fxe,"STRONG",{});var eht=s(nfe);Q5o=r(eht,"wav2vec2"),eht.forEach(t),W5o=r(Fxe," \u2014 "),hD=n(Fxe,"A",{href:!0});var oht=s(hD);H5o=r(oht,"Wav2Vec2Model"),oht.forEach(t),U5o=r(Fxe," (Wav2Vec2 model)"),Fxe.forEach(t),J5o=i(x),Au=n(x,"LI",{});var Txe=s(Au);sfe=n(Txe,"STRONG",{});var rht=s(sfe);Y5o=r(rht,"wav2vec2-conformer"),rht.forEach(t),K5o=r(Txe," \u2014 "),pD=n(Txe,"A",{href:!0});var tht=s(pD);Z5o=r(tht,"Wav2Vec2ConformerModel"),tht.forEach(t),e0o=r(Txe," (Wav2Vec2-Conformer model)"),Txe.forEach(t),o0o=i(x),Lu=n(x,"LI",{});var Mxe=s(Lu);lfe=n(Mxe,"STRONG",{});var aht=s(lfe);r0o=r(aht,"wavlm"),aht.forEach(t),t0o=r(Mxe," \u2014 "),_D=n(Mxe,"A",{href:!0});var nht=s(_D);a0o=r(nht,"WavLMModel"),nht.forEach(t),n0o=r(Mxe," (WavLM model)"),Mxe.forEach(t),s0o=i(x),yu=n(x,"LI",{});var Exe=s(yu);ife=n(Exe,"STRONG",{});var sht=s(ife);l0o=r(sht,"xglm"),sht.forEach(t),i0o=r(Exe," \u2014 "),uD=n(Exe,"A",{href:!0});var lht=s(uD);d0o=r(lht,"XGLMModel"),lht.forEach(t),c0o=r(Exe," (XGLM model)"),Exe.forEach(t),f0o=i(x),xu=n(x,"LI",{});var Cxe=s(xu);dfe=n(Cxe,"STRONG",{});var iht=s(dfe);m0o=r(iht,"xlm"),iht.forEach(t),g0o=r(Cxe," \u2014 "),bD=n(Cxe,"A",{href:!0});var dht=s(bD);h0o=r(dht,"XLMModel"),dht.forEach(t),p0o=r(Cxe," (XLM model)"),Cxe.forEach(t),_0o=i(x),$u=n(x,"LI",{});var wxe=s($u);cfe=n(wxe,"STRONG",{});var cht=s(cfe);u0o=r(cht,"xlm-prophetnet"),cht.forEach(t),b0o=r(wxe," \u2014 "),vD=n(wxe,"A",{href:!0});var fht=s(vD);v0o=r(fht,"XLMProphetNetModel"),fht.forEach(t),F0o=r(wxe," (XLM-ProphetNet model)"),wxe.forEach(t),T0o=i(x),ku=n(x,"LI",{});var Axe=s(ku);ffe=n(Axe,"STRONG",{});var mht=s(ffe);M0o=r(mht,"xlm-roberta"),mht.forEach(t),E0o=r(Axe," \u2014 "),FD=n(Axe,"A",{href:!0});var ght=s(FD);C0o=r(ght,"XLMRobertaModel"),ght.forEach(t),w0o=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),A0o=i(x),Su=n(x,"LI",{});var Lxe=s(Su);mfe=n(Lxe,"STRONG",{});var hht=s(mfe);L0o=r(hht,"xlm-roberta-xl"),hht.forEach(t),y0o=r(Lxe," \u2014 "),TD=n(Lxe,"A",{href:!0});var pht=s(TD);x0o=r(pht,"XLMRobertaXLModel"),pht.forEach(t),$0o=r(Lxe," (XLM-RoBERTa-XL model)"),Lxe.forEach(t),k0o=i(x),Ru=n(x,"LI",{});var yxe=s(Ru);gfe=n(yxe,"STRONG",{});var _ht=s(gfe);S0o=r(_ht,"xlnet"),_ht.forEach(t),R0o=r(yxe," \u2014 "),MD=n(yxe,"A",{href:!0});var uht=s(MD);P0o=r(uht,"XLNetModel"),uht.forEach(t),B0o=r(yxe," (XLNet model)"),yxe.forEach(t),I0o=i(x),Pu=n(x,"LI",{});var xxe=s(Pu);hfe=n(xxe,"STRONG",{});var bht=s(hfe);N0o=r(bht,"yolos"),bht.forEach(t),q0o=r(xxe," \u2014 "),ED=n(xxe,"A",{href:!0});var vht=s(ED);j0o=r(vht,"YolosModel"),vht.forEach(t),D0o=r(xxe," (YOLOS model)"),xxe.forEach(t),G0o=i(x),Bu=n(x,"LI",{});var $xe=s(Bu);pfe=n($xe,"STRONG",{});var Fht=s(pfe);O0o=r(Fht,"yoso"),Fht.forEach(t),V0o=r($xe," \u2014 "),CD=n($xe,"A",{href:!0});var Tht=s(CD);X0o=r(Tht,"YosoModel"),Tht.forEach(t),z0o=r($xe," (YOSO model)"),$xe.forEach(t),x.forEach(t),Q0o=i(aa),Iu=n(aa,"P",{});var kxe=s(Iu);W0o=r(kxe,"The model is set in evaluation mode by default using "),_fe=n(kxe,"CODE",{});var Mht=s(_fe);H0o=r(Mht,"model.eval()"),Mht.forEach(t),U0o=r(kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(kxe,"CODE",{});var Eht=s(ufe);J0o=r(Eht,"model.train()"),Eht.forEach(t),kxe.forEach(t),Y0o=i(aa),T(Nu.$$.fragment,aa),aa.forEach(t),Zs.forEach(t),qOe=i(f),Di=n(f,"H2",{class:!0});var XXe=s(Di);qu=n(XXe,"A",{id:!0,class:!0,href:!0});var Cht=s(qu);bfe=n(Cht,"SPAN",{});var wht=s(bfe);T(py.$$.fragment,wht),wht.forEach(t),Cht.forEach(t),K0o=i(XXe),vfe=n(XXe,"SPAN",{});var Aht=s(vfe);Z0o=r(Aht,"AutoModelForPreTraining"),Aht.forEach(t),XXe.forEach(t),jOe=i(f),$o=n(f,"DIV",{class:!0});var el=s($o);T(_y.$$.fragment,el),ewo=i(el),Gi=n(el,"P",{});var Voe=s(Gi);owo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wD=n(Voe,"A",{href:!0});var Lht=s(wD);rwo=r(Lht,"from_pretrained()"),Lht.forEach(t),two=r(Voe," class method or the "),AD=n(Voe,"A",{href:!0});var yht=s(AD);awo=r(yht,"from_config()"),yht.forEach(t),nwo=r(Voe,` class
method.`),Voe.forEach(t),swo=i(el),uy=n(el,"P",{});var zXe=s(uy);lwo=r(zXe,"This class cannot be instantiated directly using "),Ffe=n(zXe,"CODE",{});var xht=s(Ffe);iwo=r(xht,"__init__()"),xht.forEach(t),dwo=r(zXe," (throws an error)."),zXe.forEach(t),cwo=i(el),st=n(el,"DIV",{class:!0});var OA=s(st);T(by.$$.fragment,OA),fwo=i(OA),Tfe=n(OA,"P",{});var $ht=s(Tfe);mwo=r($ht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$ht.forEach(t),gwo=i(OA),Oi=n(OA,"P",{});var Xoe=s(Oi);hwo=r(Xoe,`Note:
Loading a model from its configuration file does `),Mfe=n(Xoe,"STRONG",{});var kht=s(Mfe);pwo=r(kht,"not"),kht.forEach(t),_wo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=n(Xoe,"A",{href:!0});var Sht=s(LD);uwo=r(Sht,"from_pretrained()"),Sht.forEach(t),bwo=r(Xoe," to load the model weights."),Xoe.forEach(t),vwo=i(OA),T(ju.$$.fragment,OA),OA.forEach(t),Fwo=i(el),Ye=n(el,"DIV",{class:!0});var na=s(Ye);T(vy.$$.fragment,na),Two=i(na),Efe=n(na,"P",{});var Rht=s(Efe);Mwo=r(Rht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rht.forEach(t),Ewo=i(na),Pa=n(na,"P",{});var VA=s(Pa);Cwo=r(VA,"The model class to instantiate is selected based on the "),Cfe=n(VA,"CODE",{});var Pht=s(Cfe);wwo=r(Pht,"model_type"),Pht.forEach(t),Awo=r(VA,` property of the config object (either
passed as an argument or loaded from `),wfe=n(VA,"CODE",{});var Bht=s(wfe);Lwo=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),ywo=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=n(VA,"CODE",{});var Iht=s(Afe);xwo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),$wo=r(VA,":"),VA.forEach(t),kwo=i(na),G=n(na,"UL",{});var O=s(G);Du=n(O,"LI",{});var Sxe=s(Du);Lfe=n(Sxe,"STRONG",{});var Nht=s(Lfe);Swo=r(Nht,"albert"),Nht.forEach(t),Rwo=r(Sxe," \u2014 "),yD=n(Sxe,"A",{href:!0});var qht=s(yD);Pwo=r(qht,"AlbertForPreTraining"),qht.forEach(t),Bwo=r(Sxe," (ALBERT model)"),Sxe.forEach(t),Iwo=i(O),Gu=n(O,"LI",{});var Rxe=s(Gu);yfe=n(Rxe,"STRONG",{});var jht=s(yfe);Nwo=r(jht,"bart"),jht.forEach(t),qwo=r(Rxe," \u2014 "),xD=n(Rxe,"A",{href:!0});var Dht=s(xD);jwo=r(Dht,"BartForConditionalGeneration"),Dht.forEach(t),Dwo=r(Rxe," (BART model)"),Rxe.forEach(t),Gwo=i(O),Ou=n(O,"LI",{});var Pxe=s(Ou);xfe=n(Pxe,"STRONG",{});var Ght=s(xfe);Owo=r(Ght,"bert"),Ght.forEach(t),Vwo=r(Pxe," \u2014 "),$D=n(Pxe,"A",{href:!0});var Oht=s($D);Xwo=r(Oht,"BertForPreTraining"),Oht.forEach(t),zwo=r(Pxe," (BERT model)"),Pxe.forEach(t),Qwo=i(O),Vu=n(O,"LI",{});var Bxe=s(Vu);$fe=n(Bxe,"STRONG",{});var Vht=s($fe);Wwo=r(Vht,"big_bird"),Vht.forEach(t),Hwo=r(Bxe," \u2014 "),kD=n(Bxe,"A",{href:!0});var Xht=s(kD);Uwo=r(Xht,"BigBirdForPreTraining"),Xht.forEach(t),Jwo=r(Bxe," (BigBird model)"),Bxe.forEach(t),Ywo=i(O),Xu=n(O,"LI",{});var Ixe=s(Xu);kfe=n(Ixe,"STRONG",{});var zht=s(kfe);Kwo=r(zht,"bloom"),zht.forEach(t),Zwo=r(Ixe," \u2014 "),SD=n(Ixe,"A",{href:!0});var Qht=s(SD);eAo=r(Qht,"BloomForCausalLM"),Qht.forEach(t),oAo=r(Ixe," (BLOOM model)"),Ixe.forEach(t),rAo=i(O),zu=n(O,"LI",{});var Nxe=s(zu);Sfe=n(Nxe,"STRONG",{});var Wht=s(Sfe);tAo=r(Wht,"camembert"),Wht.forEach(t),aAo=r(Nxe," \u2014 "),RD=n(Nxe,"A",{href:!0});var Hht=s(RD);nAo=r(Hht,"CamembertForMaskedLM"),Hht.forEach(t),sAo=r(Nxe," (CamemBERT model)"),Nxe.forEach(t),lAo=i(O),Qu=n(O,"LI",{});var qxe=s(Qu);Rfe=n(qxe,"STRONG",{});var Uht=s(Rfe);iAo=r(Uht,"ctrl"),Uht.forEach(t),dAo=r(qxe," \u2014 "),PD=n(qxe,"A",{href:!0});var Jht=s(PD);cAo=r(Jht,"CTRLLMHeadModel"),Jht.forEach(t),fAo=r(qxe," (CTRL model)"),qxe.forEach(t),mAo=i(O),Wu=n(O,"LI",{});var jxe=s(Wu);Pfe=n(jxe,"STRONG",{});var Yht=s(Pfe);gAo=r(Yht,"data2vec-text"),Yht.forEach(t),hAo=r(jxe," \u2014 "),BD=n(jxe,"A",{href:!0});var Kht=s(BD);pAo=r(Kht,"Data2VecTextForMaskedLM"),Kht.forEach(t),_Ao=r(jxe," (Data2VecText model)"),jxe.forEach(t),uAo=i(O),Hu=n(O,"LI",{});var Dxe=s(Hu);Bfe=n(Dxe,"STRONG",{});var Zht=s(Bfe);bAo=r(Zht,"deberta"),Zht.forEach(t),vAo=r(Dxe," \u2014 "),ID=n(Dxe,"A",{href:!0});var ept=s(ID);FAo=r(ept,"DebertaForMaskedLM"),ept.forEach(t),TAo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),MAo=i(O),Uu=n(O,"LI",{});var Gxe=s(Uu);Ife=n(Gxe,"STRONG",{});var opt=s(Ife);EAo=r(opt,"deberta-v2"),opt.forEach(t),CAo=r(Gxe," \u2014 "),ND=n(Gxe,"A",{href:!0});var rpt=s(ND);wAo=r(rpt,"DebertaV2ForMaskedLM"),rpt.forEach(t),AAo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),LAo=i(O),Ju=n(O,"LI",{});var Oxe=s(Ju);Nfe=n(Oxe,"STRONG",{});var tpt=s(Nfe);yAo=r(tpt,"distilbert"),tpt.forEach(t),xAo=r(Oxe," \u2014 "),qD=n(Oxe,"A",{href:!0});var apt=s(qD);$Ao=r(apt,"DistilBertForMaskedLM"),apt.forEach(t),kAo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),SAo=i(O),Yu=n(O,"LI",{});var Vxe=s(Yu);qfe=n(Vxe,"STRONG",{});var npt=s(qfe);RAo=r(npt,"electra"),npt.forEach(t),PAo=r(Vxe," \u2014 "),jD=n(Vxe,"A",{href:!0});var spt=s(jD);BAo=r(spt,"ElectraForPreTraining"),spt.forEach(t),IAo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),NAo=i(O),Ku=n(O,"LI",{});var Xxe=s(Ku);jfe=n(Xxe,"STRONG",{});var lpt=s(jfe);qAo=r(lpt,"flaubert"),lpt.forEach(t),jAo=r(Xxe," \u2014 "),DD=n(Xxe,"A",{href:!0});var ipt=s(DD);DAo=r(ipt,"FlaubertWithLMHeadModel"),ipt.forEach(t),GAo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),OAo=i(O),Zu=n(O,"LI",{});var zxe=s(Zu);Dfe=n(zxe,"STRONG",{});var dpt=s(Dfe);VAo=r(dpt,"flava"),dpt.forEach(t),XAo=r(zxe," \u2014 "),GD=n(zxe,"A",{href:!0});var cpt=s(GD);zAo=r(cpt,"FlavaForPreTraining"),cpt.forEach(t),QAo=r(zxe," (FLAVA model)"),zxe.forEach(t),WAo=i(O),e1=n(O,"LI",{});var Qxe=s(e1);Gfe=n(Qxe,"STRONG",{});var fpt=s(Gfe);HAo=r(fpt,"fnet"),fpt.forEach(t),UAo=r(Qxe," \u2014 "),OD=n(Qxe,"A",{href:!0});var mpt=s(OD);JAo=r(mpt,"FNetForPreTraining"),mpt.forEach(t),YAo=r(Qxe," (FNet model)"),Qxe.forEach(t),KAo=i(O),o1=n(O,"LI",{});var Wxe=s(o1);Ofe=n(Wxe,"STRONG",{});var gpt=s(Ofe);ZAo=r(gpt,"fsmt"),gpt.forEach(t),e6o=r(Wxe," \u2014 "),VD=n(Wxe,"A",{href:!0});var hpt=s(VD);o6o=r(hpt,"FSMTForConditionalGeneration"),hpt.forEach(t),r6o=r(Wxe," (FairSeq Machine-Translation model)"),Wxe.forEach(t),t6o=i(O),r1=n(O,"LI",{});var Hxe=s(r1);Vfe=n(Hxe,"STRONG",{});var ppt=s(Vfe);a6o=r(ppt,"funnel"),ppt.forEach(t),n6o=r(Hxe," \u2014 "),XD=n(Hxe,"A",{href:!0});var _pt=s(XD);s6o=r(_pt,"FunnelForPreTraining"),_pt.forEach(t),l6o=r(Hxe," (Funnel Transformer model)"),Hxe.forEach(t),i6o=i(O),t1=n(O,"LI",{});var Uxe=s(t1);Xfe=n(Uxe,"STRONG",{});var upt=s(Xfe);d6o=r(upt,"gpt2"),upt.forEach(t),c6o=r(Uxe," \u2014 "),zD=n(Uxe,"A",{href:!0});var bpt=s(zD);f6o=r(bpt,"GPT2LMHeadModel"),bpt.forEach(t),m6o=r(Uxe," (OpenAI GPT-2 model)"),Uxe.forEach(t),g6o=i(O),a1=n(O,"LI",{});var Jxe=s(a1);zfe=n(Jxe,"STRONG",{});var vpt=s(zfe);h6o=r(vpt,"ibert"),vpt.forEach(t),p6o=r(Jxe," \u2014 "),QD=n(Jxe,"A",{href:!0});var Fpt=s(QD);_6o=r(Fpt,"IBertForMaskedLM"),Fpt.forEach(t),u6o=r(Jxe," (I-BERT model)"),Jxe.forEach(t),b6o=i(O),n1=n(O,"LI",{});var Yxe=s(n1);Qfe=n(Yxe,"STRONG",{});var Tpt=s(Qfe);v6o=r(Tpt,"layoutlm"),Tpt.forEach(t),F6o=r(Yxe," \u2014 "),WD=n(Yxe,"A",{href:!0});var Mpt=s(WD);T6o=r(Mpt,"LayoutLMForMaskedLM"),Mpt.forEach(t),M6o=r(Yxe," (LayoutLM model)"),Yxe.forEach(t),E6o=i(O),s1=n(O,"LI",{});var Kxe=s(s1);Wfe=n(Kxe,"STRONG",{});var Ept=s(Wfe);C6o=r(Ept,"longformer"),Ept.forEach(t),w6o=r(Kxe," \u2014 "),HD=n(Kxe,"A",{href:!0});var Cpt=s(HD);A6o=r(Cpt,"LongformerForMaskedLM"),Cpt.forEach(t),L6o=r(Kxe," (Longformer model)"),Kxe.forEach(t),y6o=i(O),l1=n(O,"LI",{});var Zxe=s(l1);Hfe=n(Zxe,"STRONG",{});var wpt=s(Hfe);x6o=r(wpt,"lxmert"),wpt.forEach(t),$6o=r(Zxe," \u2014 "),UD=n(Zxe,"A",{href:!0});var Apt=s(UD);k6o=r(Apt,"LxmertForPreTraining"),Apt.forEach(t),S6o=r(Zxe," (LXMERT model)"),Zxe.forEach(t),R6o=i(O),i1=n(O,"LI",{});var e$e=s(i1);Ufe=n(e$e,"STRONG",{});var Lpt=s(Ufe);P6o=r(Lpt,"megatron-bert"),Lpt.forEach(t),B6o=r(e$e," \u2014 "),JD=n(e$e,"A",{href:!0});var ypt=s(JD);I6o=r(ypt,"MegatronBertForPreTraining"),ypt.forEach(t),N6o=r(e$e," (Megatron-BERT model)"),e$e.forEach(t),q6o=i(O),d1=n(O,"LI",{});var o$e=s(d1);Jfe=n(o$e,"STRONG",{});var xpt=s(Jfe);j6o=r(xpt,"mobilebert"),xpt.forEach(t),D6o=r(o$e," \u2014 "),YD=n(o$e,"A",{href:!0});var $pt=s(YD);G6o=r($pt,"MobileBertForPreTraining"),$pt.forEach(t),O6o=r(o$e," (MobileBERT model)"),o$e.forEach(t),V6o=i(O),c1=n(O,"LI",{});var r$e=s(c1);Yfe=n(r$e,"STRONG",{});var kpt=s(Yfe);X6o=r(kpt,"mpnet"),kpt.forEach(t),z6o=r(r$e," \u2014 "),KD=n(r$e,"A",{href:!0});var Spt=s(KD);Q6o=r(Spt,"MPNetForMaskedLM"),Spt.forEach(t),W6o=r(r$e," (MPNet model)"),r$e.forEach(t),H6o=i(O),f1=n(O,"LI",{});var t$e=s(f1);Kfe=n(t$e,"STRONG",{});var Rpt=s(Kfe);U6o=r(Rpt,"nezha"),Rpt.forEach(t),J6o=r(t$e," \u2014 "),ZD=n(t$e,"A",{href:!0});var Ppt=s(ZD);Y6o=r(Ppt,"NezhaForPreTraining"),Ppt.forEach(t),K6o=r(t$e," (Nezha model)"),t$e.forEach(t),Z6o=i(O),m1=n(O,"LI",{});var a$e=s(m1);Zfe=n(a$e,"STRONG",{});var Bpt=s(Zfe);eLo=r(Bpt,"openai-gpt"),Bpt.forEach(t),oLo=r(a$e," \u2014 "),eG=n(a$e,"A",{href:!0});var Ipt=s(eG);rLo=r(Ipt,"OpenAIGPTLMHeadModel"),Ipt.forEach(t),tLo=r(a$e," (OpenAI GPT model)"),a$e.forEach(t),aLo=i(O),g1=n(O,"LI",{});var n$e=s(g1);eme=n(n$e,"STRONG",{});var Npt=s(eme);nLo=r(Npt,"retribert"),Npt.forEach(t),sLo=r(n$e," \u2014 "),oG=n(n$e,"A",{href:!0});var qpt=s(oG);lLo=r(qpt,"RetriBertModel"),qpt.forEach(t),iLo=r(n$e," (RetriBERT model)"),n$e.forEach(t),dLo=i(O),h1=n(O,"LI",{});var s$e=s(h1);ome=n(s$e,"STRONG",{});var jpt=s(ome);cLo=r(jpt,"roberta"),jpt.forEach(t),fLo=r(s$e," \u2014 "),rG=n(s$e,"A",{href:!0});var Dpt=s(rG);mLo=r(Dpt,"RobertaForMaskedLM"),Dpt.forEach(t),gLo=r(s$e," (RoBERTa model)"),s$e.forEach(t),hLo=i(O),p1=n(O,"LI",{});var l$e=s(p1);rme=n(l$e,"STRONG",{});var Gpt=s(rme);pLo=r(Gpt,"splinter"),Gpt.forEach(t),_Lo=r(l$e," \u2014 "),tG=n(l$e,"A",{href:!0});var Opt=s(tG);uLo=r(Opt,"SplinterForPreTraining"),Opt.forEach(t),bLo=r(l$e," (Splinter model)"),l$e.forEach(t),vLo=i(O),_1=n(O,"LI",{});var i$e=s(_1);tme=n(i$e,"STRONG",{});var Vpt=s(tme);FLo=r(Vpt,"squeezebert"),Vpt.forEach(t),TLo=r(i$e," \u2014 "),aG=n(i$e,"A",{href:!0});var Xpt=s(aG);MLo=r(Xpt,"SqueezeBertForMaskedLM"),Xpt.forEach(t),ELo=r(i$e," (SqueezeBERT model)"),i$e.forEach(t),CLo=i(O),u1=n(O,"LI",{});var d$e=s(u1);ame=n(d$e,"STRONG",{});var zpt=s(ame);wLo=r(zpt,"t5"),zpt.forEach(t),ALo=r(d$e," \u2014 "),nG=n(d$e,"A",{href:!0});var Qpt=s(nG);LLo=r(Qpt,"T5ForConditionalGeneration"),Qpt.forEach(t),yLo=r(d$e," (T5 model)"),d$e.forEach(t),xLo=i(O),b1=n(O,"LI",{});var c$e=s(b1);nme=n(c$e,"STRONG",{});var Wpt=s(nme);$Lo=r(Wpt,"tapas"),Wpt.forEach(t),kLo=r(c$e," \u2014 "),sG=n(c$e,"A",{href:!0});var Hpt=s(sG);SLo=r(Hpt,"TapasForMaskedLM"),Hpt.forEach(t),RLo=r(c$e," (TAPAS model)"),c$e.forEach(t),PLo=i(O),v1=n(O,"LI",{});var f$e=s(v1);sme=n(f$e,"STRONG",{});var Upt=s(sme);BLo=r(Upt,"transfo-xl"),Upt.forEach(t),ILo=r(f$e," \u2014 "),lG=n(f$e,"A",{href:!0});var Jpt=s(lG);NLo=r(Jpt,"TransfoXLLMHeadModel"),Jpt.forEach(t),qLo=r(f$e," (Transformer-XL model)"),f$e.forEach(t),jLo=i(O),F1=n(O,"LI",{});var m$e=s(F1);lme=n(m$e,"STRONG",{});var Ypt=s(lme);DLo=r(Ypt,"unispeech"),Ypt.forEach(t),GLo=r(m$e," \u2014 "),iG=n(m$e,"A",{href:!0});var Kpt=s(iG);OLo=r(Kpt,"UniSpeechForPreTraining"),Kpt.forEach(t),VLo=r(m$e," (UniSpeech model)"),m$e.forEach(t),XLo=i(O),T1=n(O,"LI",{});var g$e=s(T1);ime=n(g$e,"STRONG",{});var Zpt=s(ime);zLo=r(Zpt,"unispeech-sat"),Zpt.forEach(t),QLo=r(g$e," \u2014 "),dG=n(g$e,"A",{href:!0});var e_t=s(dG);WLo=r(e_t,"UniSpeechSatForPreTraining"),e_t.forEach(t),HLo=r(g$e," (UniSpeechSat model)"),g$e.forEach(t),ULo=i(O),M1=n(O,"LI",{});var h$e=s(M1);dme=n(h$e,"STRONG",{});var o_t=s(dme);JLo=r(o_t,"visual_bert"),o_t.forEach(t),YLo=r(h$e," \u2014 "),cG=n(h$e,"A",{href:!0});var r_t=s(cG);KLo=r(r_t,"VisualBertForPreTraining"),r_t.forEach(t),ZLo=r(h$e," (VisualBERT model)"),h$e.forEach(t),eyo=i(O),E1=n(O,"LI",{});var p$e=s(E1);cme=n(p$e,"STRONG",{});var t_t=s(cme);oyo=r(t_t,"vit_mae"),t_t.forEach(t),ryo=r(p$e," \u2014 "),fG=n(p$e,"A",{href:!0});var a_t=s(fG);tyo=r(a_t,"ViTMAEForPreTraining"),a_t.forEach(t),ayo=r(p$e," (ViTMAE model)"),p$e.forEach(t),nyo=i(O),C1=n(O,"LI",{});var _$e=s(C1);fme=n(_$e,"STRONG",{});var n_t=s(fme);syo=r(n_t,"wav2vec2"),n_t.forEach(t),lyo=r(_$e," \u2014 "),mG=n(_$e,"A",{href:!0});var s_t=s(mG);iyo=r(s_t,"Wav2Vec2ForPreTraining"),s_t.forEach(t),dyo=r(_$e," (Wav2Vec2 model)"),_$e.forEach(t),cyo=i(O),w1=n(O,"LI",{});var u$e=s(w1);mme=n(u$e,"STRONG",{});var l_t=s(mme);fyo=r(l_t,"wav2vec2-conformer"),l_t.forEach(t),myo=r(u$e," \u2014 "),gG=n(u$e,"A",{href:!0});var i_t=s(gG);gyo=r(i_t,"Wav2Vec2ConformerForPreTraining"),i_t.forEach(t),hyo=r(u$e," (Wav2Vec2-Conformer model)"),u$e.forEach(t),pyo=i(O),A1=n(O,"LI",{});var b$e=s(A1);gme=n(b$e,"STRONG",{});var d_t=s(gme);_yo=r(d_t,"xlm"),d_t.forEach(t),uyo=r(b$e," \u2014 "),hG=n(b$e,"A",{href:!0});var c_t=s(hG);byo=r(c_t,"XLMWithLMHeadModel"),c_t.forEach(t),vyo=r(b$e," (XLM model)"),b$e.forEach(t),Fyo=i(O),L1=n(O,"LI",{});var v$e=s(L1);hme=n(v$e,"STRONG",{});var f_t=s(hme);Tyo=r(f_t,"xlm-roberta"),f_t.forEach(t),Myo=r(v$e," \u2014 "),pG=n(v$e,"A",{href:!0});var m_t=s(pG);Eyo=r(m_t,"XLMRobertaForMaskedLM"),m_t.forEach(t),Cyo=r(v$e," (XLM-RoBERTa model)"),v$e.forEach(t),wyo=i(O),y1=n(O,"LI",{});var F$e=s(y1);pme=n(F$e,"STRONG",{});var g_t=s(pme);Ayo=r(g_t,"xlm-roberta-xl"),g_t.forEach(t),Lyo=r(F$e," \u2014 "),_G=n(F$e,"A",{href:!0});var h_t=s(_G);yyo=r(h_t,"XLMRobertaXLForMaskedLM"),h_t.forEach(t),xyo=r(F$e," (XLM-RoBERTa-XL model)"),F$e.forEach(t),$yo=i(O),x1=n(O,"LI",{});var T$e=s(x1);_me=n(T$e,"STRONG",{});var p_t=s(_me);kyo=r(p_t,"xlnet"),p_t.forEach(t),Syo=r(T$e," \u2014 "),uG=n(T$e,"A",{href:!0});var __t=s(uG);Ryo=r(__t,"XLNetLMHeadModel"),__t.forEach(t),Pyo=r(T$e," (XLNet model)"),T$e.forEach(t),O.forEach(t),Byo=i(na),$1=n(na,"P",{});var M$e=s($1);Iyo=r(M$e,"The model is set in evaluation mode by default using "),ume=n(M$e,"CODE",{});var u_t=s(ume);Nyo=r(u_t,"model.eval()"),u_t.forEach(t),qyo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(M$e,"CODE",{});var b_t=s(bme);jyo=r(b_t,"model.train()"),b_t.forEach(t),M$e.forEach(t),Dyo=i(na),T(k1.$$.fragment,na),na.forEach(t),el.forEach(t),DOe=i(f),Vi=n(f,"H2",{class:!0});var QXe=s(Vi);S1=n(QXe,"A",{id:!0,class:!0,href:!0});var v_t=s(S1);vme=n(v_t,"SPAN",{});var F_t=s(vme);T(Fy.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),Gyo=i(QXe),Fme=n(QXe,"SPAN",{});var T_t=s(Fme);Oyo=r(T_t,"AutoModelForCausalLM"),T_t.forEach(t),QXe.forEach(t),GOe=i(f),ko=n(f,"DIV",{class:!0});var ol=s(ko);T(Ty.$$.fragment,ol),Vyo=i(ol),Xi=n(ol,"P",{});var zoe=s(Xi);Xyo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bG=n(zoe,"A",{href:!0});var M_t=s(bG);zyo=r(M_t,"from_pretrained()"),M_t.forEach(t),Qyo=r(zoe," class method or the "),vG=n(zoe,"A",{href:!0});var E_t=s(vG);Wyo=r(E_t,"from_config()"),E_t.forEach(t),Hyo=r(zoe,` class
method.`),zoe.forEach(t),Uyo=i(ol),My=n(ol,"P",{});var WXe=s(My);Jyo=r(WXe,"This class cannot be instantiated directly using "),Tme=n(WXe,"CODE",{});var C_t=s(Tme);Yyo=r(C_t,"__init__()"),C_t.forEach(t),Kyo=r(WXe," (throws an error)."),WXe.forEach(t),Zyo=i(ol),lt=n(ol,"DIV",{class:!0});var XA=s(lt);T(Ey.$$.fragment,XA),e8o=i(XA),Mme=n(XA,"P",{});var w_t=s(Mme);o8o=r(w_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w_t.forEach(t),r8o=i(XA),zi=n(XA,"P",{});var Qoe=s(zi);t8o=r(Qoe,`Note:
Loading a model from its configuration file does `),Eme=n(Qoe,"STRONG",{});var A_t=s(Eme);a8o=r(A_t,"not"),A_t.forEach(t),n8o=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(Qoe,"A",{href:!0});var L_t=s(FG);s8o=r(L_t,"from_pretrained()"),L_t.forEach(t),l8o=r(Qoe," to load the model weights."),Qoe.forEach(t),i8o=i(XA),T(R1.$$.fragment,XA),XA.forEach(t),d8o=i(ol),Ke=n(ol,"DIV",{class:!0});var sa=s(Ke);T(Cy.$$.fragment,sa),c8o=i(sa),Cme=n(sa,"P",{});var y_t=s(Cme);f8o=r(y_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),y_t.forEach(t),m8o=i(sa),Ba=n(sa,"P",{});var zA=s(Ba);g8o=r(zA,"The model class to instantiate is selected based on the "),wme=n(zA,"CODE",{});var x_t=s(wme);h8o=r(x_t,"model_type"),x_t.forEach(t),p8o=r(zA,` property of the config object (either
passed as an argument or loaded from `),Ame=n(zA,"CODE",{});var $_t=s(Ame);_8o=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),u8o=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(zA,"CODE",{});var k_t=s(Lme);b8o=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),v8o=r(zA,":"),zA.forEach(t),F8o=i(sa),z=n(sa,"UL",{});var Q=s(z);P1=n(Q,"LI",{});var E$e=s(P1);yme=n(E$e,"STRONG",{});var S_t=s(yme);T8o=r(S_t,"bart"),S_t.forEach(t),M8o=r(E$e," \u2014 "),TG=n(E$e,"A",{href:!0});var R_t=s(TG);E8o=r(R_t,"BartForCausalLM"),R_t.forEach(t),C8o=r(E$e," (BART model)"),E$e.forEach(t),w8o=i(Q),B1=n(Q,"LI",{});var C$e=s(B1);xme=n(C$e,"STRONG",{});var P_t=s(xme);A8o=r(P_t,"bert"),P_t.forEach(t),L8o=r(C$e," \u2014 "),MG=n(C$e,"A",{href:!0});var B_t=s(MG);y8o=r(B_t,"BertLMHeadModel"),B_t.forEach(t),x8o=r(C$e," (BERT model)"),C$e.forEach(t),$8o=i(Q),I1=n(Q,"LI",{});var w$e=s(I1);$me=n(w$e,"STRONG",{});var I_t=s($me);k8o=r(I_t,"bert-generation"),I_t.forEach(t),S8o=r(w$e," \u2014 "),EG=n(w$e,"A",{href:!0});var N_t=s(EG);R8o=r(N_t,"BertGenerationDecoder"),N_t.forEach(t),P8o=r(w$e," (Bert Generation model)"),w$e.forEach(t),B8o=i(Q),N1=n(Q,"LI",{});var A$e=s(N1);kme=n(A$e,"STRONG",{});var q_t=s(kme);I8o=r(q_t,"big_bird"),q_t.forEach(t),N8o=r(A$e," \u2014 "),CG=n(A$e,"A",{href:!0});var j_t=s(CG);q8o=r(j_t,"BigBirdForCausalLM"),j_t.forEach(t),j8o=r(A$e," (BigBird model)"),A$e.forEach(t),D8o=i(Q),q1=n(Q,"LI",{});var L$e=s(q1);Sme=n(L$e,"STRONG",{});var D_t=s(Sme);G8o=r(D_t,"bigbird_pegasus"),D_t.forEach(t),O8o=r(L$e," \u2014 "),wG=n(L$e,"A",{href:!0});var G_t=s(wG);V8o=r(G_t,"BigBirdPegasusForCausalLM"),G_t.forEach(t),X8o=r(L$e," (BigBird-Pegasus model)"),L$e.forEach(t),z8o=i(Q),j1=n(Q,"LI",{});var y$e=s(j1);Rme=n(y$e,"STRONG",{});var O_t=s(Rme);Q8o=r(O_t,"blenderbot"),O_t.forEach(t),W8o=r(y$e," \u2014 "),AG=n(y$e,"A",{href:!0});var V_t=s(AG);H8o=r(V_t,"BlenderbotForCausalLM"),V_t.forEach(t),U8o=r(y$e," (Blenderbot model)"),y$e.forEach(t),J8o=i(Q),D1=n(Q,"LI",{});var x$e=s(D1);Pme=n(x$e,"STRONG",{});var X_t=s(Pme);Y8o=r(X_t,"blenderbot-small"),X_t.forEach(t),K8o=r(x$e," \u2014 "),LG=n(x$e,"A",{href:!0});var z_t=s(LG);Z8o=r(z_t,"BlenderbotSmallForCausalLM"),z_t.forEach(t),e9o=r(x$e," (BlenderbotSmall model)"),x$e.forEach(t),o9o=i(Q),G1=n(Q,"LI",{});var $$e=s(G1);Bme=n($$e,"STRONG",{});var Q_t=s(Bme);r9o=r(Q_t,"bloom"),Q_t.forEach(t),t9o=r($$e," \u2014 "),yG=n($$e,"A",{href:!0});var W_t=s(yG);a9o=r(W_t,"BloomForCausalLM"),W_t.forEach(t),n9o=r($$e," (BLOOM model)"),$$e.forEach(t),s9o=i(Q),O1=n(Q,"LI",{});var k$e=s(O1);Ime=n(k$e,"STRONG",{});var H_t=s(Ime);l9o=r(H_t,"camembert"),H_t.forEach(t),i9o=r(k$e," \u2014 "),xG=n(k$e,"A",{href:!0});var U_t=s(xG);d9o=r(U_t,"CamembertForCausalLM"),U_t.forEach(t),c9o=r(k$e," (CamemBERT model)"),k$e.forEach(t),f9o=i(Q),V1=n(Q,"LI",{});var S$e=s(V1);Nme=n(S$e,"STRONG",{});var J_t=s(Nme);m9o=r(J_t,"codegen"),J_t.forEach(t),g9o=r(S$e," \u2014 "),$G=n(S$e,"A",{href:!0});var Y_t=s($G);h9o=r(Y_t,"CodeGenForCausalLM"),Y_t.forEach(t),p9o=r(S$e," (CodeGen model)"),S$e.forEach(t),_9o=i(Q),X1=n(Q,"LI",{});var R$e=s(X1);qme=n(R$e,"STRONG",{});var K_t=s(qme);u9o=r(K_t,"ctrl"),K_t.forEach(t),b9o=r(R$e," \u2014 "),kG=n(R$e,"A",{href:!0});var Z_t=s(kG);v9o=r(Z_t,"CTRLLMHeadModel"),Z_t.forEach(t),F9o=r(R$e," (CTRL model)"),R$e.forEach(t),T9o=i(Q),z1=n(Q,"LI",{});var P$e=s(z1);jme=n(P$e,"STRONG",{});var eut=s(jme);M9o=r(eut,"data2vec-text"),eut.forEach(t),E9o=r(P$e," \u2014 "),SG=n(P$e,"A",{href:!0});var out=s(SG);C9o=r(out,"Data2VecTextForCausalLM"),out.forEach(t),w9o=r(P$e," (Data2VecText model)"),P$e.forEach(t),A9o=i(Q),Q1=n(Q,"LI",{});var B$e=s(Q1);Dme=n(B$e,"STRONG",{});var rut=s(Dme);L9o=r(rut,"electra"),rut.forEach(t),y9o=r(B$e," \u2014 "),RG=n(B$e,"A",{href:!0});var tut=s(RG);x9o=r(tut,"ElectraForCausalLM"),tut.forEach(t),$9o=r(B$e," (ELECTRA model)"),B$e.forEach(t),k9o=i(Q),W1=n(Q,"LI",{});var I$e=s(W1);Gme=n(I$e,"STRONG",{});var aut=s(Gme);S9o=r(aut,"gpt2"),aut.forEach(t),R9o=r(I$e," \u2014 "),PG=n(I$e,"A",{href:!0});var nut=s(PG);P9o=r(nut,"GPT2LMHeadModel"),nut.forEach(t),B9o=r(I$e," (OpenAI GPT-2 model)"),I$e.forEach(t),I9o=i(Q),H1=n(Q,"LI",{});var N$e=s(H1);Ome=n(N$e,"STRONG",{});var sut=s(Ome);N9o=r(sut,"gpt_neo"),sut.forEach(t),q9o=r(N$e," \u2014 "),BG=n(N$e,"A",{href:!0});var lut=s(BG);j9o=r(lut,"GPTNeoForCausalLM"),lut.forEach(t),D9o=r(N$e," (GPT Neo model)"),N$e.forEach(t),G9o=i(Q),U1=n(Q,"LI",{});var q$e=s(U1);Vme=n(q$e,"STRONG",{});var iut=s(Vme);O9o=r(iut,"gpt_neox"),iut.forEach(t),V9o=r(q$e," \u2014 "),IG=n(q$e,"A",{href:!0});var dut=s(IG);X9o=r(dut,"GPTNeoXForCausalLM"),dut.forEach(t),z9o=r(q$e," (GPT NeoX model)"),q$e.forEach(t),Q9o=i(Q),J1=n(Q,"LI",{});var j$e=s(J1);Xme=n(j$e,"STRONG",{});var cut=s(Xme);W9o=r(cut,"gptj"),cut.forEach(t),H9o=r(j$e," \u2014 "),NG=n(j$e,"A",{href:!0});var fut=s(NG);U9o=r(fut,"GPTJForCausalLM"),fut.forEach(t),J9o=r(j$e," (GPT-J model)"),j$e.forEach(t),Y9o=i(Q),Y1=n(Q,"LI",{});var D$e=s(Y1);zme=n(D$e,"STRONG",{});var mut=s(zme);K9o=r(mut,"marian"),mut.forEach(t),Z9o=r(D$e," \u2014 "),qG=n(D$e,"A",{href:!0});var gut=s(qG);exo=r(gut,"MarianForCausalLM"),gut.forEach(t),oxo=r(D$e," (Marian model)"),D$e.forEach(t),rxo=i(Q),K1=n(Q,"LI",{});var G$e=s(K1);Qme=n(G$e,"STRONG",{});var hut=s(Qme);txo=r(hut,"mbart"),hut.forEach(t),axo=r(G$e," \u2014 "),jG=n(G$e,"A",{href:!0});var put=s(jG);nxo=r(put,"MBartForCausalLM"),put.forEach(t),sxo=r(G$e," (mBART model)"),G$e.forEach(t),lxo=i(Q),Z1=n(Q,"LI",{});var O$e=s(Z1);Wme=n(O$e,"STRONG",{});var _ut=s(Wme);ixo=r(_ut,"megatron-bert"),_ut.forEach(t),dxo=r(O$e," \u2014 "),DG=n(O$e,"A",{href:!0});var uut=s(DG);cxo=r(uut,"MegatronBertForCausalLM"),uut.forEach(t),fxo=r(O$e," (Megatron-BERT model)"),O$e.forEach(t),mxo=i(Q),e7=n(Q,"LI",{});var V$e=s(e7);Hme=n(V$e,"STRONG",{});var but=s(Hme);gxo=r(but,"openai-gpt"),but.forEach(t),hxo=r(V$e," \u2014 "),GG=n(V$e,"A",{href:!0});var vut=s(GG);pxo=r(vut,"OpenAIGPTLMHeadModel"),vut.forEach(t),_xo=r(V$e," (OpenAI GPT model)"),V$e.forEach(t),uxo=i(Q),o7=n(Q,"LI",{});var X$e=s(o7);Ume=n(X$e,"STRONG",{});var Fut=s(Ume);bxo=r(Fut,"opt"),Fut.forEach(t),vxo=r(X$e," \u2014 "),OG=n(X$e,"A",{href:!0});var Tut=s(OG);Fxo=r(Tut,"OPTForCausalLM"),Tut.forEach(t),Txo=r(X$e," (OPT model)"),X$e.forEach(t),Mxo=i(Q),r7=n(Q,"LI",{});var z$e=s(r7);Jme=n(z$e,"STRONG",{});var Mut=s(Jme);Exo=r(Mut,"pegasus"),Mut.forEach(t),Cxo=r(z$e," \u2014 "),VG=n(z$e,"A",{href:!0});var Eut=s(VG);wxo=r(Eut,"PegasusForCausalLM"),Eut.forEach(t),Axo=r(z$e," (Pegasus model)"),z$e.forEach(t),Lxo=i(Q),t7=n(Q,"LI",{});var Q$e=s(t7);Yme=n(Q$e,"STRONG",{});var Cut=s(Yme);yxo=r(Cut,"plbart"),Cut.forEach(t),xxo=r(Q$e," \u2014 "),XG=n(Q$e,"A",{href:!0});var wut=s(XG);$xo=r(wut,"PLBartForCausalLM"),wut.forEach(t),kxo=r(Q$e," (PLBart model)"),Q$e.forEach(t),Sxo=i(Q),a7=n(Q,"LI",{});var W$e=s(a7);Kme=n(W$e,"STRONG",{});var Aut=s(Kme);Rxo=r(Aut,"prophetnet"),Aut.forEach(t),Pxo=r(W$e," \u2014 "),zG=n(W$e,"A",{href:!0});var Lut=s(zG);Bxo=r(Lut,"ProphetNetForCausalLM"),Lut.forEach(t),Ixo=r(W$e," (ProphetNet model)"),W$e.forEach(t),Nxo=i(Q),n7=n(Q,"LI",{});var H$e=s(n7);Zme=n(H$e,"STRONG",{});var yut=s(Zme);qxo=r(yut,"qdqbert"),yut.forEach(t),jxo=r(H$e," \u2014 "),QG=n(H$e,"A",{href:!0});var xut=s(QG);Dxo=r(xut,"QDQBertLMHeadModel"),xut.forEach(t),Gxo=r(H$e," (QDQBert model)"),H$e.forEach(t),Oxo=i(Q),s7=n(Q,"LI",{});var U$e=s(s7);ege=n(U$e,"STRONG",{});var $ut=s(ege);Vxo=r($ut,"reformer"),$ut.forEach(t),Xxo=r(U$e," \u2014 "),WG=n(U$e,"A",{href:!0});var kut=s(WG);zxo=r(kut,"ReformerModelWithLMHead"),kut.forEach(t),Qxo=r(U$e," (Reformer model)"),U$e.forEach(t),Wxo=i(Q),l7=n(Q,"LI",{});var J$e=s(l7);oge=n(J$e,"STRONG",{});var Sut=s(oge);Hxo=r(Sut,"rembert"),Sut.forEach(t),Uxo=r(J$e," \u2014 "),HG=n(J$e,"A",{href:!0});var Rut=s(HG);Jxo=r(Rut,"RemBertForCausalLM"),Rut.forEach(t),Yxo=r(J$e," (RemBERT model)"),J$e.forEach(t),Kxo=i(Q),i7=n(Q,"LI",{});var Y$e=s(i7);rge=n(Y$e,"STRONG",{});var Put=s(rge);Zxo=r(Put,"roberta"),Put.forEach(t),e$o=r(Y$e," \u2014 "),UG=n(Y$e,"A",{href:!0});var But=s(UG);o$o=r(But,"RobertaForCausalLM"),But.forEach(t),r$o=r(Y$e," (RoBERTa model)"),Y$e.forEach(t),t$o=i(Q),d7=n(Q,"LI",{});var K$e=s(d7);tge=n(K$e,"STRONG",{});var Iut=s(tge);a$o=r(Iut,"roformer"),Iut.forEach(t),n$o=r(K$e," \u2014 "),JG=n(K$e,"A",{href:!0});var Nut=s(JG);s$o=r(Nut,"RoFormerForCausalLM"),Nut.forEach(t),l$o=r(K$e," (RoFormer model)"),K$e.forEach(t),i$o=i(Q),c7=n(Q,"LI",{});var Z$e=s(c7);age=n(Z$e,"STRONG",{});var qut=s(age);d$o=r(qut,"speech_to_text_2"),qut.forEach(t),c$o=r(Z$e," \u2014 "),YG=n(Z$e,"A",{href:!0});var jut=s(YG);f$o=r(jut,"Speech2Text2ForCausalLM"),jut.forEach(t),m$o=r(Z$e," (Speech2Text2 model)"),Z$e.forEach(t),g$o=i(Q),f7=n(Q,"LI",{});var eke=s(f7);nge=n(eke,"STRONG",{});var Dut=s(nge);h$o=r(Dut,"transfo-xl"),Dut.forEach(t),p$o=r(eke," \u2014 "),KG=n(eke,"A",{href:!0});var Gut=s(KG);_$o=r(Gut,"TransfoXLLMHeadModel"),Gut.forEach(t),u$o=r(eke," (Transformer-XL model)"),eke.forEach(t),b$o=i(Q),m7=n(Q,"LI",{});var oke=s(m7);sge=n(oke,"STRONG",{});var Out=s(sge);v$o=r(Out,"trocr"),Out.forEach(t),F$o=r(oke," \u2014 "),ZG=n(oke,"A",{href:!0});var Vut=s(ZG);T$o=r(Vut,"TrOCRForCausalLM"),Vut.forEach(t),M$o=r(oke," (TrOCR model)"),oke.forEach(t),E$o=i(Q),g7=n(Q,"LI",{});var rke=s(g7);lge=n(rke,"STRONG",{});var Xut=s(lge);C$o=r(Xut,"xglm"),Xut.forEach(t),w$o=r(rke," \u2014 "),eO=n(rke,"A",{href:!0});var zut=s(eO);A$o=r(zut,"XGLMForCausalLM"),zut.forEach(t),L$o=r(rke," (XGLM model)"),rke.forEach(t),y$o=i(Q),h7=n(Q,"LI",{});var tke=s(h7);ige=n(tke,"STRONG",{});var Qut=s(ige);x$o=r(Qut,"xlm"),Qut.forEach(t),$$o=r(tke," \u2014 "),oO=n(tke,"A",{href:!0});var Wut=s(oO);k$o=r(Wut,"XLMWithLMHeadModel"),Wut.forEach(t),S$o=r(tke," (XLM model)"),tke.forEach(t),R$o=i(Q),p7=n(Q,"LI",{});var ake=s(p7);dge=n(ake,"STRONG",{});var Hut=s(dge);P$o=r(Hut,"xlm-prophetnet"),Hut.forEach(t),B$o=r(ake," \u2014 "),rO=n(ake,"A",{href:!0});var Uut=s(rO);I$o=r(Uut,"XLMProphetNetForCausalLM"),Uut.forEach(t),N$o=r(ake," (XLM-ProphetNet model)"),ake.forEach(t),q$o=i(Q),_7=n(Q,"LI",{});var nke=s(_7);cge=n(nke,"STRONG",{});var Jut=s(cge);j$o=r(Jut,"xlm-roberta"),Jut.forEach(t),D$o=r(nke," \u2014 "),tO=n(nke,"A",{href:!0});var Yut=s(tO);G$o=r(Yut,"XLMRobertaForCausalLM"),Yut.forEach(t),O$o=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),V$o=i(Q),u7=n(Q,"LI",{});var ske=s(u7);fge=n(ske,"STRONG",{});var Kut=s(fge);X$o=r(Kut,"xlm-roberta-xl"),Kut.forEach(t),z$o=r(ske," \u2014 "),aO=n(ske,"A",{href:!0});var Zut=s(aO);Q$o=r(Zut,"XLMRobertaXLForCausalLM"),Zut.forEach(t),W$o=r(ske," (XLM-RoBERTa-XL model)"),ske.forEach(t),H$o=i(Q),b7=n(Q,"LI",{});var lke=s(b7);mge=n(lke,"STRONG",{});var e1t=s(mge);U$o=r(e1t,"xlnet"),e1t.forEach(t),J$o=r(lke," \u2014 "),nO=n(lke,"A",{href:!0});var o1t=s(nO);Y$o=r(o1t,"XLNetLMHeadModel"),o1t.forEach(t),K$o=r(lke," (XLNet model)"),lke.forEach(t),Q.forEach(t),Z$o=i(sa),v7=n(sa,"P",{});var ike=s(v7);eko=r(ike,"The model is set in evaluation mode by default using "),gge=n(ike,"CODE",{});var r1t=s(gge);oko=r(r1t,"model.eval()"),r1t.forEach(t),rko=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(ike,"CODE",{});var t1t=s(hge);tko=r(t1t,"model.train()"),t1t.forEach(t),ike.forEach(t),ako=i(sa),T(F7.$$.fragment,sa),sa.forEach(t),ol.forEach(t),OOe=i(f),Qi=n(f,"H2",{class:!0});var HXe=s(Qi);T7=n(HXe,"A",{id:!0,class:!0,href:!0});var a1t=s(T7);pge=n(a1t,"SPAN",{});var n1t=s(pge);T(wy.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),nko=i(HXe),_ge=n(HXe,"SPAN",{});var s1t=s(_ge);sko=r(s1t,"AutoModelForMaskedLM"),s1t.forEach(t),HXe.forEach(t),VOe=i(f),So=n(f,"DIV",{class:!0});var rl=s(So);T(Ay.$$.fragment,rl),lko=i(rl),Wi=n(rl,"P",{});var Woe=s(Wi);iko=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sO=n(Woe,"A",{href:!0});var l1t=s(sO);dko=r(l1t,"from_pretrained()"),l1t.forEach(t),cko=r(Woe," class method or the "),lO=n(Woe,"A",{href:!0});var i1t=s(lO);fko=r(i1t,"from_config()"),i1t.forEach(t),mko=r(Woe,` class
method.`),Woe.forEach(t),gko=i(rl),Ly=n(rl,"P",{});var UXe=s(Ly);hko=r(UXe,"This class cannot be instantiated directly using "),uge=n(UXe,"CODE",{});var d1t=s(uge);pko=r(d1t,"__init__()"),d1t.forEach(t),_ko=r(UXe," (throws an error)."),UXe.forEach(t),uko=i(rl),it=n(rl,"DIV",{class:!0});var QA=s(it);T(yy.$$.fragment,QA),bko=i(QA),bge=n(QA,"P",{});var c1t=s(bge);vko=r(c1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c1t.forEach(t),Fko=i(QA),Hi=n(QA,"P",{});var Hoe=s(Hi);Tko=r(Hoe,`Note:
Loading a model from its configuration file does `),vge=n(Hoe,"STRONG",{});var f1t=s(vge);Mko=r(f1t,"not"),f1t.forEach(t),Eko=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(Hoe,"A",{href:!0});var m1t=s(iO);Cko=r(m1t,"from_pretrained()"),m1t.forEach(t),wko=r(Hoe," to load the model weights."),Hoe.forEach(t),Ako=i(QA),T(M7.$$.fragment,QA),QA.forEach(t),Lko=i(rl),Ze=n(rl,"DIV",{class:!0});var la=s(Ze);T(xy.$$.fragment,la),yko=i(la),Fge=n(la,"P",{});var g1t=s(Fge);xko=r(g1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g1t.forEach(t),$ko=i(la),Ia=n(la,"P",{});var WA=s(Ia);kko=r(WA,"The model class to instantiate is selected based on the "),Tge=n(WA,"CODE",{});var h1t=s(Tge);Sko=r(h1t,"model_type"),h1t.forEach(t),Rko=r(WA,` property of the config object (either
passed as an argument or loaded from `),Mge=n(WA,"CODE",{});var p1t=s(Mge);Pko=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),Bko=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(WA,"CODE",{});var _1t=s(Ege);Iko=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),Nko=r(WA,":"),WA.forEach(t),qko=i(la),W=n(la,"UL",{});var U=s(W);E7=n(U,"LI",{});var dke=s(E7);Cge=n(dke,"STRONG",{});var u1t=s(Cge);jko=r(u1t,"albert"),u1t.forEach(t),Dko=r(dke," \u2014 "),dO=n(dke,"A",{href:!0});var b1t=s(dO);Gko=r(b1t,"AlbertForMaskedLM"),b1t.forEach(t),Oko=r(dke," (ALBERT model)"),dke.forEach(t),Vko=i(U),C7=n(U,"LI",{});var cke=s(C7);wge=n(cke,"STRONG",{});var v1t=s(wge);Xko=r(v1t,"bart"),v1t.forEach(t),zko=r(cke," \u2014 "),cO=n(cke,"A",{href:!0});var F1t=s(cO);Qko=r(F1t,"BartForConditionalGeneration"),F1t.forEach(t),Wko=r(cke," (BART model)"),cke.forEach(t),Hko=i(U),w7=n(U,"LI",{});var fke=s(w7);Age=n(fke,"STRONG",{});var T1t=s(Age);Uko=r(T1t,"bert"),T1t.forEach(t),Jko=r(fke," \u2014 "),fO=n(fke,"A",{href:!0});var M1t=s(fO);Yko=r(M1t,"BertForMaskedLM"),M1t.forEach(t),Kko=r(fke," (BERT model)"),fke.forEach(t),Zko=i(U),A7=n(U,"LI",{});var mke=s(A7);Lge=n(mke,"STRONG",{});var E1t=s(Lge);eSo=r(E1t,"big_bird"),E1t.forEach(t),oSo=r(mke," \u2014 "),mO=n(mke,"A",{href:!0});var C1t=s(mO);rSo=r(C1t,"BigBirdForMaskedLM"),C1t.forEach(t),tSo=r(mke," (BigBird model)"),mke.forEach(t),aSo=i(U),L7=n(U,"LI",{});var gke=s(L7);yge=n(gke,"STRONG",{});var w1t=s(yge);nSo=r(w1t,"camembert"),w1t.forEach(t),sSo=r(gke," \u2014 "),gO=n(gke,"A",{href:!0});var A1t=s(gO);lSo=r(A1t,"CamembertForMaskedLM"),A1t.forEach(t),iSo=r(gke," (CamemBERT model)"),gke.forEach(t),dSo=i(U),y7=n(U,"LI",{});var hke=s(y7);xge=n(hke,"STRONG",{});var L1t=s(xge);cSo=r(L1t,"convbert"),L1t.forEach(t),fSo=r(hke," \u2014 "),hO=n(hke,"A",{href:!0});var y1t=s(hO);mSo=r(y1t,"ConvBertForMaskedLM"),y1t.forEach(t),gSo=r(hke," (ConvBERT model)"),hke.forEach(t),hSo=i(U),x7=n(U,"LI",{});var pke=s(x7);$ge=n(pke,"STRONG",{});var x1t=s($ge);pSo=r(x1t,"data2vec-text"),x1t.forEach(t),_So=r(pke," \u2014 "),pO=n(pke,"A",{href:!0});var $1t=s(pO);uSo=r($1t,"Data2VecTextForMaskedLM"),$1t.forEach(t),bSo=r(pke," (Data2VecText model)"),pke.forEach(t),vSo=i(U),$7=n(U,"LI",{});var _ke=s($7);kge=n(_ke,"STRONG",{});var k1t=s(kge);FSo=r(k1t,"deberta"),k1t.forEach(t),TSo=r(_ke," \u2014 "),_O=n(_ke,"A",{href:!0});var S1t=s(_O);MSo=r(S1t,"DebertaForMaskedLM"),S1t.forEach(t),ESo=r(_ke," (DeBERTa model)"),_ke.forEach(t),CSo=i(U),k7=n(U,"LI",{});var uke=s(k7);Sge=n(uke,"STRONG",{});var R1t=s(Sge);wSo=r(R1t,"deberta-v2"),R1t.forEach(t),ASo=r(uke," \u2014 "),uO=n(uke,"A",{href:!0});var P1t=s(uO);LSo=r(P1t,"DebertaV2ForMaskedLM"),P1t.forEach(t),ySo=r(uke," (DeBERTa-v2 model)"),uke.forEach(t),xSo=i(U),S7=n(U,"LI",{});var bke=s(S7);Rge=n(bke,"STRONG",{});var B1t=s(Rge);$So=r(B1t,"distilbert"),B1t.forEach(t),kSo=r(bke," \u2014 "),bO=n(bke,"A",{href:!0});var I1t=s(bO);SSo=r(I1t,"DistilBertForMaskedLM"),I1t.forEach(t),RSo=r(bke," (DistilBERT model)"),bke.forEach(t),PSo=i(U),R7=n(U,"LI",{});var vke=s(R7);Pge=n(vke,"STRONG",{});var N1t=s(Pge);BSo=r(N1t,"electra"),N1t.forEach(t),ISo=r(vke," \u2014 "),vO=n(vke,"A",{href:!0});var q1t=s(vO);NSo=r(q1t,"ElectraForMaskedLM"),q1t.forEach(t),qSo=r(vke," (ELECTRA model)"),vke.forEach(t),jSo=i(U),P7=n(U,"LI",{});var Fke=s(P7);Bge=n(Fke,"STRONG",{});var j1t=s(Bge);DSo=r(j1t,"flaubert"),j1t.forEach(t),GSo=r(Fke," \u2014 "),FO=n(Fke,"A",{href:!0});var D1t=s(FO);OSo=r(D1t,"FlaubertWithLMHeadModel"),D1t.forEach(t),VSo=r(Fke," (FlauBERT model)"),Fke.forEach(t),XSo=i(U),B7=n(U,"LI",{});var Tke=s(B7);Ige=n(Tke,"STRONG",{});var G1t=s(Ige);zSo=r(G1t,"fnet"),G1t.forEach(t),QSo=r(Tke," \u2014 "),TO=n(Tke,"A",{href:!0});var O1t=s(TO);WSo=r(O1t,"FNetForMaskedLM"),O1t.forEach(t),HSo=r(Tke," (FNet model)"),Tke.forEach(t),USo=i(U),I7=n(U,"LI",{});var Mke=s(I7);Nge=n(Mke,"STRONG",{});var V1t=s(Nge);JSo=r(V1t,"funnel"),V1t.forEach(t),YSo=r(Mke," \u2014 "),MO=n(Mke,"A",{href:!0});var X1t=s(MO);KSo=r(X1t,"FunnelForMaskedLM"),X1t.forEach(t),ZSo=r(Mke," (Funnel Transformer model)"),Mke.forEach(t),eRo=i(U),N7=n(U,"LI",{});var Eke=s(N7);qge=n(Eke,"STRONG",{});var z1t=s(qge);oRo=r(z1t,"ibert"),z1t.forEach(t),rRo=r(Eke," \u2014 "),EO=n(Eke,"A",{href:!0});var Q1t=s(EO);tRo=r(Q1t,"IBertForMaskedLM"),Q1t.forEach(t),aRo=r(Eke," (I-BERT model)"),Eke.forEach(t),nRo=i(U),q7=n(U,"LI",{});var Cke=s(q7);jge=n(Cke,"STRONG",{});var W1t=s(jge);sRo=r(W1t,"layoutlm"),W1t.forEach(t),lRo=r(Cke," \u2014 "),CO=n(Cke,"A",{href:!0});var H1t=s(CO);iRo=r(H1t,"LayoutLMForMaskedLM"),H1t.forEach(t),dRo=r(Cke," (LayoutLM model)"),Cke.forEach(t),cRo=i(U),j7=n(U,"LI",{});var wke=s(j7);Dge=n(wke,"STRONG",{});var U1t=s(Dge);fRo=r(U1t,"longformer"),U1t.forEach(t),mRo=r(wke," \u2014 "),wO=n(wke,"A",{href:!0});var J1t=s(wO);gRo=r(J1t,"LongformerForMaskedLM"),J1t.forEach(t),hRo=r(wke," (Longformer model)"),wke.forEach(t),pRo=i(U),D7=n(U,"LI",{});var Ake=s(D7);Gge=n(Ake,"STRONG",{});var Y1t=s(Gge);_Ro=r(Y1t,"luke"),Y1t.forEach(t),uRo=r(Ake," \u2014 "),AO=n(Ake,"A",{href:!0});var K1t=s(AO);bRo=r(K1t,"LukeForMaskedLM"),K1t.forEach(t),vRo=r(Ake," (LUKE model)"),Ake.forEach(t),FRo=i(U),G7=n(U,"LI",{});var Lke=s(G7);Oge=n(Lke,"STRONG",{});var Z1t=s(Oge);TRo=r(Z1t,"mbart"),Z1t.forEach(t),MRo=r(Lke," \u2014 "),LO=n(Lke,"A",{href:!0});var e7t=s(LO);ERo=r(e7t,"MBartForConditionalGeneration"),e7t.forEach(t),CRo=r(Lke," (mBART model)"),Lke.forEach(t),wRo=i(U),O7=n(U,"LI",{});var yke=s(O7);Vge=n(yke,"STRONG",{});var o7t=s(Vge);ARo=r(o7t,"megatron-bert"),o7t.forEach(t),LRo=r(yke," \u2014 "),yO=n(yke,"A",{href:!0});var r7t=s(yO);yRo=r(r7t,"MegatronBertForMaskedLM"),r7t.forEach(t),xRo=r(yke," (Megatron-BERT model)"),yke.forEach(t),$Ro=i(U),V7=n(U,"LI",{});var xke=s(V7);Xge=n(xke,"STRONG",{});var t7t=s(Xge);kRo=r(t7t,"mobilebert"),t7t.forEach(t),SRo=r(xke," \u2014 "),xO=n(xke,"A",{href:!0});var a7t=s(xO);RRo=r(a7t,"MobileBertForMaskedLM"),a7t.forEach(t),PRo=r(xke," (MobileBERT model)"),xke.forEach(t),BRo=i(U),X7=n(U,"LI",{});var $ke=s(X7);zge=n($ke,"STRONG",{});var n7t=s(zge);IRo=r(n7t,"mpnet"),n7t.forEach(t),NRo=r($ke," \u2014 "),$O=n($ke,"A",{href:!0});var s7t=s($O);qRo=r(s7t,"MPNetForMaskedLM"),s7t.forEach(t),jRo=r($ke," (MPNet model)"),$ke.forEach(t),DRo=i(U),z7=n(U,"LI",{});var kke=s(z7);Qge=n(kke,"STRONG",{});var l7t=s(Qge);GRo=r(l7t,"nezha"),l7t.forEach(t),ORo=r(kke," \u2014 "),kO=n(kke,"A",{href:!0});var i7t=s(kO);VRo=r(i7t,"NezhaForMaskedLM"),i7t.forEach(t),XRo=r(kke," (Nezha model)"),kke.forEach(t),zRo=i(U),Q7=n(U,"LI",{});var Ske=s(Q7);Wge=n(Ske,"STRONG",{});var d7t=s(Wge);QRo=r(d7t,"nystromformer"),d7t.forEach(t),WRo=r(Ske," \u2014 "),SO=n(Ske,"A",{href:!0});var c7t=s(SO);HRo=r(c7t,"NystromformerForMaskedLM"),c7t.forEach(t),URo=r(Ske," (Nystr\xF6mformer model)"),Ske.forEach(t),JRo=i(U),W7=n(U,"LI",{});var Rke=s(W7);Hge=n(Rke,"STRONG",{});var f7t=s(Hge);YRo=r(f7t,"perceiver"),f7t.forEach(t),KRo=r(Rke," \u2014 "),RO=n(Rke,"A",{href:!0});var m7t=s(RO);ZRo=r(m7t,"PerceiverForMaskedLM"),m7t.forEach(t),ePo=r(Rke," (Perceiver model)"),Rke.forEach(t),oPo=i(U),H7=n(U,"LI",{});var Pke=s(H7);Uge=n(Pke,"STRONG",{});var g7t=s(Uge);rPo=r(g7t,"qdqbert"),g7t.forEach(t),tPo=r(Pke," \u2014 "),PO=n(Pke,"A",{href:!0});var h7t=s(PO);aPo=r(h7t,"QDQBertForMaskedLM"),h7t.forEach(t),nPo=r(Pke," (QDQBert model)"),Pke.forEach(t),sPo=i(U),U7=n(U,"LI",{});var Bke=s(U7);Jge=n(Bke,"STRONG",{});var p7t=s(Jge);lPo=r(p7t,"reformer"),p7t.forEach(t),iPo=r(Bke," \u2014 "),BO=n(Bke,"A",{href:!0});var _7t=s(BO);dPo=r(_7t,"ReformerForMaskedLM"),_7t.forEach(t),cPo=r(Bke," (Reformer model)"),Bke.forEach(t),fPo=i(U),J7=n(U,"LI",{});var Ike=s(J7);Yge=n(Ike,"STRONG",{});var u7t=s(Yge);mPo=r(u7t,"rembert"),u7t.forEach(t),gPo=r(Ike," \u2014 "),IO=n(Ike,"A",{href:!0});var b7t=s(IO);hPo=r(b7t,"RemBertForMaskedLM"),b7t.forEach(t),pPo=r(Ike," (RemBERT model)"),Ike.forEach(t),_Po=i(U),Y7=n(U,"LI",{});var Nke=s(Y7);Kge=n(Nke,"STRONG",{});var v7t=s(Kge);uPo=r(v7t,"roberta"),v7t.forEach(t),bPo=r(Nke," \u2014 "),NO=n(Nke,"A",{href:!0});var F7t=s(NO);vPo=r(F7t,"RobertaForMaskedLM"),F7t.forEach(t),FPo=r(Nke," (RoBERTa model)"),Nke.forEach(t),TPo=i(U),K7=n(U,"LI",{});var qke=s(K7);Zge=n(qke,"STRONG",{});var T7t=s(Zge);MPo=r(T7t,"roformer"),T7t.forEach(t),EPo=r(qke," \u2014 "),qO=n(qke,"A",{href:!0});var M7t=s(qO);CPo=r(M7t,"RoFormerForMaskedLM"),M7t.forEach(t),wPo=r(qke," (RoFormer model)"),qke.forEach(t),APo=i(U),Z7=n(U,"LI",{});var jke=s(Z7);ehe=n(jke,"STRONG",{});var E7t=s(ehe);LPo=r(E7t,"squeezebert"),E7t.forEach(t),yPo=r(jke," \u2014 "),jO=n(jke,"A",{href:!0});var C7t=s(jO);xPo=r(C7t,"SqueezeBertForMaskedLM"),C7t.forEach(t),$Po=r(jke," (SqueezeBERT model)"),jke.forEach(t),kPo=i(U),e2=n(U,"LI",{});var Dke=s(e2);ohe=n(Dke,"STRONG",{});var w7t=s(ohe);SPo=r(w7t,"tapas"),w7t.forEach(t),RPo=r(Dke," \u2014 "),DO=n(Dke,"A",{href:!0});var A7t=s(DO);PPo=r(A7t,"TapasForMaskedLM"),A7t.forEach(t),BPo=r(Dke," (TAPAS model)"),Dke.forEach(t),IPo=i(U),o2=n(U,"LI",{});var Gke=s(o2);rhe=n(Gke,"STRONG",{});var L7t=s(rhe);NPo=r(L7t,"wav2vec2"),L7t.forEach(t),qPo=r(Gke," \u2014 "),the=n(Gke,"CODE",{});var y7t=s(the);jPo=r(y7t,"Wav2Vec2ForMaskedLM"),y7t.forEach(t),DPo=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),GPo=i(U),r2=n(U,"LI",{});var Oke=s(r2);ahe=n(Oke,"STRONG",{});var x7t=s(ahe);OPo=r(x7t,"xlm"),x7t.forEach(t),VPo=r(Oke," \u2014 "),GO=n(Oke,"A",{href:!0});var $7t=s(GO);XPo=r($7t,"XLMWithLMHeadModel"),$7t.forEach(t),zPo=r(Oke," (XLM model)"),Oke.forEach(t),QPo=i(U),t2=n(U,"LI",{});var Vke=s(t2);nhe=n(Vke,"STRONG",{});var k7t=s(nhe);WPo=r(k7t,"xlm-roberta"),k7t.forEach(t),HPo=r(Vke," \u2014 "),OO=n(Vke,"A",{href:!0});var S7t=s(OO);UPo=r(S7t,"XLMRobertaForMaskedLM"),S7t.forEach(t),JPo=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),YPo=i(U),a2=n(U,"LI",{});var Xke=s(a2);she=n(Xke,"STRONG",{});var R7t=s(she);KPo=r(R7t,"xlm-roberta-xl"),R7t.forEach(t),ZPo=r(Xke," \u2014 "),VO=n(Xke,"A",{href:!0});var P7t=s(VO);eBo=r(P7t,"XLMRobertaXLForMaskedLM"),P7t.forEach(t),oBo=r(Xke," (XLM-RoBERTa-XL model)"),Xke.forEach(t),rBo=i(U),n2=n(U,"LI",{});var zke=s(n2);lhe=n(zke,"STRONG",{});var B7t=s(lhe);tBo=r(B7t,"yoso"),B7t.forEach(t),aBo=r(zke," \u2014 "),XO=n(zke,"A",{href:!0});var I7t=s(XO);nBo=r(I7t,"YosoForMaskedLM"),I7t.forEach(t),sBo=r(zke," (YOSO model)"),zke.forEach(t),U.forEach(t),lBo=i(la),s2=n(la,"P",{});var Qke=s(s2);iBo=r(Qke,"The model is set in evaluation mode by default using "),ihe=n(Qke,"CODE",{});var N7t=s(ihe);dBo=r(N7t,"model.eval()"),N7t.forEach(t),cBo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(Qke,"CODE",{});var q7t=s(dhe);fBo=r(q7t,"model.train()"),q7t.forEach(t),Qke.forEach(t),mBo=i(la),T(l2.$$.fragment,la),la.forEach(t),rl.forEach(t),XOe=i(f),Ui=n(f,"H2",{class:!0});var JXe=s(Ui);i2=n(JXe,"A",{id:!0,class:!0,href:!0});var j7t=s(i2);che=n(j7t,"SPAN",{});var D7t=s(che);T($y.$$.fragment,D7t),D7t.forEach(t),j7t.forEach(t),gBo=i(JXe),fhe=n(JXe,"SPAN",{});var G7t=s(fhe);hBo=r(G7t,"AutoModelForSeq2SeqLM"),G7t.forEach(t),JXe.forEach(t),zOe=i(f),Ro=n(f,"DIV",{class:!0});var tl=s(Ro);T(ky.$$.fragment,tl),pBo=i(tl),Ji=n(tl,"P",{});var Uoe=s(Ji);_Bo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zO=n(Uoe,"A",{href:!0});var O7t=s(zO);uBo=r(O7t,"from_pretrained()"),O7t.forEach(t),bBo=r(Uoe," class method or the "),QO=n(Uoe,"A",{href:!0});var V7t=s(QO);vBo=r(V7t,"from_config()"),V7t.forEach(t),FBo=r(Uoe,` class
method.`),Uoe.forEach(t),TBo=i(tl),Sy=n(tl,"P",{});var YXe=s(Sy);MBo=r(YXe,"This class cannot be instantiated directly using "),mhe=n(YXe,"CODE",{});var X7t=s(mhe);EBo=r(X7t,"__init__()"),X7t.forEach(t),CBo=r(YXe," (throws an error)."),YXe.forEach(t),wBo=i(tl),dt=n(tl,"DIV",{class:!0});var HA=s(dt);T(Ry.$$.fragment,HA),ABo=i(HA),ghe=n(HA,"P",{});var z7t=s(ghe);LBo=r(z7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),z7t.forEach(t),yBo=i(HA),Yi=n(HA,"P",{});var Joe=s(Yi);xBo=r(Joe,`Note:
Loading a model from its configuration file does `),hhe=n(Joe,"STRONG",{});var Q7t=s(hhe);$Bo=r(Q7t,"not"),Q7t.forEach(t),kBo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Joe,"A",{href:!0});var W7t=s(WO);SBo=r(W7t,"from_pretrained()"),W7t.forEach(t),RBo=r(Joe," to load the model weights."),Joe.forEach(t),PBo=i(HA),T(d2.$$.fragment,HA),HA.forEach(t),BBo=i(tl),eo=n(tl,"DIV",{class:!0});var ia=s(eo);T(Py.$$.fragment,ia),IBo=i(ia),phe=n(ia,"P",{});var H7t=s(phe);NBo=r(H7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H7t.forEach(t),qBo=i(ia),Na=n(ia,"P",{});var UA=s(Na);jBo=r(UA,"The model class to instantiate is selected based on the "),_he=n(UA,"CODE",{});var U7t=s(_he);DBo=r(U7t,"model_type"),U7t.forEach(t),GBo=r(UA,` property of the config object (either
passed as an argument or loaded from `),uhe=n(UA,"CODE",{});var J7t=s(uhe);OBo=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),VBo=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(UA,"CODE",{});var Y7t=s(bhe);XBo=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),zBo=r(UA,":"),UA.forEach(t),QBo=i(ia),pe=n(ia,"UL",{});var be=s(pe);c2=n(be,"LI",{});var Wke=s(c2);vhe=n(Wke,"STRONG",{});var K7t=s(vhe);WBo=r(K7t,"bart"),K7t.forEach(t),HBo=r(Wke," \u2014 "),HO=n(Wke,"A",{href:!0});var Z7t=s(HO);UBo=r(Z7t,"BartForConditionalGeneration"),Z7t.forEach(t),JBo=r(Wke," (BART model)"),Wke.forEach(t),YBo=i(be),f2=n(be,"LI",{});var Hke=s(f2);Fhe=n(Hke,"STRONG",{});var e2t=s(Fhe);KBo=r(e2t,"bigbird_pegasus"),e2t.forEach(t),ZBo=r(Hke," \u2014 "),UO=n(Hke,"A",{href:!0});var o2t=s(UO);eIo=r(o2t,"BigBirdPegasusForConditionalGeneration"),o2t.forEach(t),oIo=r(Hke," (BigBird-Pegasus model)"),Hke.forEach(t),rIo=i(be),m2=n(be,"LI",{});var Uke=s(m2);The=n(Uke,"STRONG",{});var r2t=s(The);tIo=r(r2t,"blenderbot"),r2t.forEach(t),aIo=r(Uke," \u2014 "),JO=n(Uke,"A",{href:!0});var t2t=s(JO);nIo=r(t2t,"BlenderbotForConditionalGeneration"),t2t.forEach(t),sIo=r(Uke," (Blenderbot model)"),Uke.forEach(t),lIo=i(be),g2=n(be,"LI",{});var Jke=s(g2);Mhe=n(Jke,"STRONG",{});var a2t=s(Mhe);iIo=r(a2t,"blenderbot-small"),a2t.forEach(t),dIo=r(Jke," \u2014 "),YO=n(Jke,"A",{href:!0});var n2t=s(YO);cIo=r(n2t,"BlenderbotSmallForConditionalGeneration"),n2t.forEach(t),fIo=r(Jke," (BlenderbotSmall model)"),Jke.forEach(t),mIo=i(be),h2=n(be,"LI",{});var Yke=s(h2);Ehe=n(Yke,"STRONG",{});var s2t=s(Ehe);gIo=r(s2t,"encoder-decoder"),s2t.forEach(t),hIo=r(Yke," \u2014 "),KO=n(Yke,"A",{href:!0});var l2t=s(KO);pIo=r(l2t,"EncoderDecoderModel"),l2t.forEach(t),_Io=r(Yke," (Encoder decoder model)"),Yke.forEach(t),uIo=i(be),p2=n(be,"LI",{});var Kke=s(p2);Che=n(Kke,"STRONG",{});var i2t=s(Che);bIo=r(i2t,"fsmt"),i2t.forEach(t),vIo=r(Kke," \u2014 "),ZO=n(Kke,"A",{href:!0});var d2t=s(ZO);FIo=r(d2t,"FSMTForConditionalGeneration"),d2t.forEach(t),TIo=r(Kke," (FairSeq Machine-Translation model)"),Kke.forEach(t),MIo=i(be),_2=n(be,"LI",{});var Zke=s(_2);whe=n(Zke,"STRONG",{});var c2t=s(whe);EIo=r(c2t,"led"),c2t.forEach(t),CIo=r(Zke," \u2014 "),eV=n(Zke,"A",{href:!0});var f2t=s(eV);wIo=r(f2t,"LEDForConditionalGeneration"),f2t.forEach(t),AIo=r(Zke," (LED model)"),Zke.forEach(t),LIo=i(be),u2=n(be,"LI",{});var eSe=s(u2);Ahe=n(eSe,"STRONG",{});var m2t=s(Ahe);yIo=r(m2t,"longt5"),m2t.forEach(t),xIo=r(eSe," \u2014 "),oV=n(eSe,"A",{href:!0});var g2t=s(oV);$Io=r(g2t,"LongT5ForConditionalGeneration"),g2t.forEach(t),kIo=r(eSe," (LongT5 model)"),eSe.forEach(t),SIo=i(be),b2=n(be,"LI",{});var oSe=s(b2);Lhe=n(oSe,"STRONG",{});var h2t=s(Lhe);RIo=r(h2t,"m2m_100"),h2t.forEach(t),PIo=r(oSe," \u2014 "),rV=n(oSe,"A",{href:!0});var p2t=s(rV);BIo=r(p2t,"M2M100ForConditionalGeneration"),p2t.forEach(t),IIo=r(oSe," (M2M100 model)"),oSe.forEach(t),NIo=i(be),v2=n(be,"LI",{});var rSe=s(v2);yhe=n(rSe,"STRONG",{});var _2t=s(yhe);qIo=r(_2t,"marian"),_2t.forEach(t),jIo=r(rSe," \u2014 "),tV=n(rSe,"A",{href:!0});var u2t=s(tV);DIo=r(u2t,"MarianMTModel"),u2t.forEach(t),GIo=r(rSe," (Marian model)"),rSe.forEach(t),OIo=i(be),F2=n(be,"LI",{});var tSe=s(F2);xhe=n(tSe,"STRONG",{});var b2t=s(xhe);VIo=r(b2t,"mbart"),b2t.forEach(t),XIo=r(tSe," \u2014 "),aV=n(tSe,"A",{href:!0});var v2t=s(aV);zIo=r(v2t,"MBartForConditionalGeneration"),v2t.forEach(t),QIo=r(tSe," (mBART model)"),tSe.forEach(t),WIo=i(be),T2=n(be,"LI",{});var aSe=s(T2);$he=n(aSe,"STRONG",{});var F2t=s($he);HIo=r(F2t,"mt5"),F2t.forEach(t),UIo=r(aSe," \u2014 "),nV=n(aSe,"A",{href:!0});var T2t=s(nV);JIo=r(T2t,"MT5ForConditionalGeneration"),T2t.forEach(t),YIo=r(aSe," (MT5 model)"),aSe.forEach(t),KIo=i(be),M2=n(be,"LI",{});var nSe=s(M2);khe=n(nSe,"STRONG",{});var M2t=s(khe);ZIo=r(M2t,"pegasus"),M2t.forEach(t),eNo=r(nSe," \u2014 "),sV=n(nSe,"A",{href:!0});var E2t=s(sV);oNo=r(E2t,"PegasusForConditionalGeneration"),E2t.forEach(t),rNo=r(nSe," (Pegasus model)"),nSe.forEach(t),tNo=i(be),E2=n(be,"LI",{});var sSe=s(E2);She=n(sSe,"STRONG",{});var C2t=s(She);aNo=r(C2t,"plbart"),C2t.forEach(t),nNo=r(sSe," \u2014 "),lV=n(sSe,"A",{href:!0});var w2t=s(lV);sNo=r(w2t,"PLBartForConditionalGeneration"),w2t.forEach(t),lNo=r(sSe," (PLBart model)"),sSe.forEach(t),iNo=i(be),C2=n(be,"LI",{});var lSe=s(C2);Rhe=n(lSe,"STRONG",{});var A2t=s(Rhe);dNo=r(A2t,"prophetnet"),A2t.forEach(t),cNo=r(lSe," \u2014 "),iV=n(lSe,"A",{href:!0});var L2t=s(iV);fNo=r(L2t,"ProphetNetForConditionalGeneration"),L2t.forEach(t),mNo=r(lSe," (ProphetNet model)"),lSe.forEach(t),gNo=i(be),w2=n(be,"LI",{});var iSe=s(w2);Phe=n(iSe,"STRONG",{});var y2t=s(Phe);hNo=r(y2t,"t5"),y2t.forEach(t),pNo=r(iSe," \u2014 "),dV=n(iSe,"A",{href:!0});var x2t=s(dV);_No=r(x2t,"T5ForConditionalGeneration"),x2t.forEach(t),uNo=r(iSe," (T5 model)"),iSe.forEach(t),bNo=i(be),A2=n(be,"LI",{});var dSe=s(A2);Bhe=n(dSe,"STRONG",{});var $2t=s(Bhe);vNo=r($2t,"xlm-prophetnet"),$2t.forEach(t),FNo=r(dSe," \u2014 "),cV=n(dSe,"A",{href:!0});var k2t=s(cV);TNo=r(k2t,"XLMProphetNetForConditionalGeneration"),k2t.forEach(t),MNo=r(dSe," (XLM-ProphetNet model)"),dSe.forEach(t),be.forEach(t),ENo=i(ia),L2=n(ia,"P",{});var cSe=s(L2);CNo=r(cSe,"The model is set in evaluation mode by default using "),Ihe=n(cSe,"CODE",{});var S2t=s(Ihe);wNo=r(S2t,"model.eval()"),S2t.forEach(t),ANo=r(cSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(cSe,"CODE",{});var R2t=s(Nhe);LNo=r(R2t,"model.train()"),R2t.forEach(t),cSe.forEach(t),yNo=i(ia),T(y2.$$.fragment,ia),ia.forEach(t),tl.forEach(t),QOe=i(f),Ki=n(f,"H2",{class:!0});var KXe=s(Ki);x2=n(KXe,"A",{id:!0,class:!0,href:!0});var P2t=s(x2);qhe=n(P2t,"SPAN",{});var B2t=s(qhe);T(By.$$.fragment,B2t),B2t.forEach(t),P2t.forEach(t),xNo=i(KXe),jhe=n(KXe,"SPAN",{});var I2t=s(jhe);$No=r(I2t,"AutoModelForSequenceClassification"),I2t.forEach(t),KXe.forEach(t),WOe=i(f),Po=n(f,"DIV",{class:!0});var al=s(Po);T(Iy.$$.fragment,al),kNo=i(al),Zi=n(al,"P",{});var Yoe=s(Zi);SNo=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fV=n(Yoe,"A",{href:!0});var N2t=s(fV);RNo=r(N2t,"from_pretrained()"),N2t.forEach(t),PNo=r(Yoe," class method or the "),mV=n(Yoe,"A",{href:!0});var q2t=s(mV);BNo=r(q2t,"from_config()"),q2t.forEach(t),INo=r(Yoe,` class
method.`),Yoe.forEach(t),NNo=i(al),Ny=n(al,"P",{});var ZXe=s(Ny);qNo=r(ZXe,"This class cannot be instantiated directly using "),Dhe=n(ZXe,"CODE",{});var j2t=s(Dhe);jNo=r(j2t,"__init__()"),j2t.forEach(t),DNo=r(ZXe," (throws an error)."),ZXe.forEach(t),GNo=i(al),ct=n(al,"DIV",{class:!0});var JA=s(ct);T(qy.$$.fragment,JA),ONo=i(JA),Ghe=n(JA,"P",{});var D2t=s(Ghe);VNo=r(D2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),D2t.forEach(t),XNo=i(JA),ed=n(JA,"P",{});var Koe=s(ed);zNo=r(Koe,`Note:
Loading a model from its configuration file does `),Ohe=n(Koe,"STRONG",{});var G2t=s(Ohe);QNo=r(G2t,"not"),G2t.forEach(t),WNo=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(Koe,"A",{href:!0});var O2t=s(gV);HNo=r(O2t,"from_pretrained()"),O2t.forEach(t),UNo=r(Koe," to load the model weights."),Koe.forEach(t),JNo=i(JA),T($2.$$.fragment,JA),JA.forEach(t),YNo=i(al),oo=n(al,"DIV",{class:!0});var da=s(oo);T(jy.$$.fragment,da),KNo=i(da),Vhe=n(da,"P",{});var V2t=s(Vhe);ZNo=r(V2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),V2t.forEach(t),eqo=i(da),qa=n(da,"P",{});var YA=s(qa);oqo=r(YA,"The model class to instantiate is selected based on the "),Xhe=n(YA,"CODE",{});var X2t=s(Xhe);rqo=r(X2t,"model_type"),X2t.forEach(t),tqo=r(YA,` property of the config object (either
passed as an argument or loaded from `),zhe=n(YA,"CODE",{});var z2t=s(zhe);aqo=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),nqo=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(YA,"CODE",{});var Q2t=s(Qhe);sqo=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),lqo=r(YA,":"),YA.forEach(t),iqo=i(da),N=n(da,"UL",{});var q=s(N);k2=n(q,"LI",{});var fSe=s(k2);Whe=n(fSe,"STRONG",{});var W2t=s(Whe);dqo=r(W2t,"albert"),W2t.forEach(t),cqo=r(fSe," \u2014 "),hV=n(fSe,"A",{href:!0});var H2t=s(hV);fqo=r(H2t,"AlbertForSequenceClassification"),H2t.forEach(t),mqo=r(fSe," (ALBERT model)"),fSe.forEach(t),gqo=i(q),S2=n(q,"LI",{});var mSe=s(S2);Hhe=n(mSe,"STRONG",{});var U2t=s(Hhe);hqo=r(U2t,"bart"),U2t.forEach(t),pqo=r(mSe," \u2014 "),pV=n(mSe,"A",{href:!0});var J2t=s(pV);_qo=r(J2t,"BartForSequenceClassification"),J2t.forEach(t),uqo=r(mSe," (BART model)"),mSe.forEach(t),bqo=i(q),R2=n(q,"LI",{});var gSe=s(R2);Uhe=n(gSe,"STRONG",{});var Y2t=s(Uhe);vqo=r(Y2t,"bert"),Y2t.forEach(t),Fqo=r(gSe," \u2014 "),_V=n(gSe,"A",{href:!0});var K2t=s(_V);Tqo=r(K2t,"BertForSequenceClassification"),K2t.forEach(t),Mqo=r(gSe," (BERT model)"),gSe.forEach(t),Eqo=i(q),P2=n(q,"LI",{});var hSe=s(P2);Jhe=n(hSe,"STRONG",{});var Z2t=s(Jhe);Cqo=r(Z2t,"big_bird"),Z2t.forEach(t),wqo=r(hSe," \u2014 "),uV=n(hSe,"A",{href:!0});var ebt=s(uV);Aqo=r(ebt,"BigBirdForSequenceClassification"),ebt.forEach(t),Lqo=r(hSe," (BigBird model)"),hSe.forEach(t),yqo=i(q),B2=n(q,"LI",{});var pSe=s(B2);Yhe=n(pSe,"STRONG",{});var obt=s(Yhe);xqo=r(obt,"bigbird_pegasus"),obt.forEach(t),$qo=r(pSe," \u2014 "),bV=n(pSe,"A",{href:!0});var rbt=s(bV);kqo=r(rbt,"BigBirdPegasusForSequenceClassification"),rbt.forEach(t),Sqo=r(pSe," (BigBird-Pegasus model)"),pSe.forEach(t),Rqo=i(q),I2=n(q,"LI",{});var _Se=s(I2);Khe=n(_Se,"STRONG",{});var tbt=s(Khe);Pqo=r(tbt,"bloom"),tbt.forEach(t),Bqo=r(_Se," \u2014 "),vV=n(_Se,"A",{href:!0});var abt=s(vV);Iqo=r(abt,"BloomForSequenceClassification"),abt.forEach(t),Nqo=r(_Se," (BLOOM model)"),_Se.forEach(t),qqo=i(q),N2=n(q,"LI",{});var uSe=s(N2);Zhe=n(uSe,"STRONG",{});var nbt=s(Zhe);jqo=r(nbt,"camembert"),nbt.forEach(t),Dqo=r(uSe," \u2014 "),FV=n(uSe,"A",{href:!0});var sbt=s(FV);Gqo=r(sbt,"CamembertForSequenceClassification"),sbt.forEach(t),Oqo=r(uSe," (CamemBERT model)"),uSe.forEach(t),Vqo=i(q),q2=n(q,"LI",{});var bSe=s(q2);epe=n(bSe,"STRONG",{});var lbt=s(epe);Xqo=r(lbt,"canine"),lbt.forEach(t),zqo=r(bSe," \u2014 "),TV=n(bSe,"A",{href:!0});var ibt=s(TV);Qqo=r(ibt,"CanineForSequenceClassification"),ibt.forEach(t),Wqo=r(bSe," (CANINE model)"),bSe.forEach(t),Hqo=i(q),j2=n(q,"LI",{});var vSe=s(j2);ope=n(vSe,"STRONG",{});var dbt=s(ope);Uqo=r(dbt,"convbert"),dbt.forEach(t),Jqo=r(vSe," \u2014 "),MV=n(vSe,"A",{href:!0});var cbt=s(MV);Yqo=r(cbt,"ConvBertForSequenceClassification"),cbt.forEach(t),Kqo=r(vSe," (ConvBERT model)"),vSe.forEach(t),Zqo=i(q),D2=n(q,"LI",{});var FSe=s(D2);rpe=n(FSe,"STRONG",{});var fbt=s(rpe);ejo=r(fbt,"ctrl"),fbt.forEach(t),ojo=r(FSe," \u2014 "),EV=n(FSe,"A",{href:!0});var mbt=s(EV);rjo=r(mbt,"CTRLForSequenceClassification"),mbt.forEach(t),tjo=r(FSe," (CTRL model)"),FSe.forEach(t),ajo=i(q),G2=n(q,"LI",{});var TSe=s(G2);tpe=n(TSe,"STRONG",{});var gbt=s(tpe);njo=r(gbt,"data2vec-text"),gbt.forEach(t),sjo=r(TSe," \u2014 "),CV=n(TSe,"A",{href:!0});var hbt=s(CV);ljo=r(hbt,"Data2VecTextForSequenceClassification"),hbt.forEach(t),ijo=r(TSe," (Data2VecText model)"),TSe.forEach(t),djo=i(q),O2=n(q,"LI",{});var MSe=s(O2);ape=n(MSe,"STRONG",{});var pbt=s(ape);cjo=r(pbt,"deberta"),pbt.forEach(t),fjo=r(MSe," \u2014 "),wV=n(MSe,"A",{href:!0});var _bt=s(wV);mjo=r(_bt,"DebertaForSequenceClassification"),_bt.forEach(t),gjo=r(MSe," (DeBERTa model)"),MSe.forEach(t),hjo=i(q),V2=n(q,"LI",{});var ESe=s(V2);npe=n(ESe,"STRONG",{});var ubt=s(npe);pjo=r(ubt,"deberta-v2"),ubt.forEach(t),_jo=r(ESe," \u2014 "),AV=n(ESe,"A",{href:!0});var bbt=s(AV);ujo=r(bbt,"DebertaV2ForSequenceClassification"),bbt.forEach(t),bjo=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),vjo=i(q),X2=n(q,"LI",{});var CSe=s(X2);spe=n(CSe,"STRONG",{});var vbt=s(spe);Fjo=r(vbt,"distilbert"),vbt.forEach(t),Tjo=r(CSe," \u2014 "),LV=n(CSe,"A",{href:!0});var Fbt=s(LV);Mjo=r(Fbt,"DistilBertForSequenceClassification"),Fbt.forEach(t),Ejo=r(CSe," (DistilBERT model)"),CSe.forEach(t),Cjo=i(q),z2=n(q,"LI",{});var wSe=s(z2);lpe=n(wSe,"STRONG",{});var Tbt=s(lpe);wjo=r(Tbt,"electra"),Tbt.forEach(t),Ajo=r(wSe," \u2014 "),yV=n(wSe,"A",{href:!0});var Mbt=s(yV);Ljo=r(Mbt,"ElectraForSequenceClassification"),Mbt.forEach(t),yjo=r(wSe," (ELECTRA model)"),wSe.forEach(t),xjo=i(q),Q2=n(q,"LI",{});var ASe=s(Q2);ipe=n(ASe,"STRONG",{});var Ebt=s(ipe);$jo=r(Ebt,"flaubert"),Ebt.forEach(t),kjo=r(ASe," \u2014 "),xV=n(ASe,"A",{href:!0});var Cbt=s(xV);Sjo=r(Cbt,"FlaubertForSequenceClassification"),Cbt.forEach(t),Rjo=r(ASe," (FlauBERT model)"),ASe.forEach(t),Pjo=i(q),W2=n(q,"LI",{});var LSe=s(W2);dpe=n(LSe,"STRONG",{});var wbt=s(dpe);Bjo=r(wbt,"fnet"),wbt.forEach(t),Ijo=r(LSe," \u2014 "),$V=n(LSe,"A",{href:!0});var Abt=s($V);Njo=r(Abt,"FNetForSequenceClassification"),Abt.forEach(t),qjo=r(LSe," (FNet model)"),LSe.forEach(t),jjo=i(q),H2=n(q,"LI",{});var ySe=s(H2);cpe=n(ySe,"STRONG",{});var Lbt=s(cpe);Djo=r(Lbt,"funnel"),Lbt.forEach(t),Gjo=r(ySe," \u2014 "),kV=n(ySe,"A",{href:!0});var ybt=s(kV);Ojo=r(ybt,"FunnelForSequenceClassification"),ybt.forEach(t),Vjo=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),Xjo=i(q),U2=n(q,"LI",{});var xSe=s(U2);fpe=n(xSe,"STRONG",{});var xbt=s(fpe);zjo=r(xbt,"gpt2"),xbt.forEach(t),Qjo=r(xSe," \u2014 "),SV=n(xSe,"A",{href:!0});var $bt=s(SV);Wjo=r($bt,"GPT2ForSequenceClassification"),$bt.forEach(t),Hjo=r(xSe," (OpenAI GPT-2 model)"),xSe.forEach(t),Ujo=i(q),J2=n(q,"LI",{});var $Se=s(J2);mpe=n($Se,"STRONG",{});var kbt=s(mpe);Jjo=r(kbt,"gpt_neo"),kbt.forEach(t),Yjo=r($Se," \u2014 "),RV=n($Se,"A",{href:!0});var Sbt=s(RV);Kjo=r(Sbt,"GPTNeoForSequenceClassification"),Sbt.forEach(t),Zjo=r($Se," (GPT Neo model)"),$Se.forEach(t),eDo=i(q),Y2=n(q,"LI",{});var kSe=s(Y2);gpe=n(kSe,"STRONG",{});var Rbt=s(gpe);oDo=r(Rbt,"gptj"),Rbt.forEach(t),rDo=r(kSe," \u2014 "),PV=n(kSe,"A",{href:!0});var Pbt=s(PV);tDo=r(Pbt,"GPTJForSequenceClassification"),Pbt.forEach(t),aDo=r(kSe," (GPT-J model)"),kSe.forEach(t),nDo=i(q),K2=n(q,"LI",{});var SSe=s(K2);hpe=n(SSe,"STRONG",{});var Bbt=s(hpe);sDo=r(Bbt,"ibert"),Bbt.forEach(t),lDo=r(SSe," \u2014 "),BV=n(SSe,"A",{href:!0});var Ibt=s(BV);iDo=r(Ibt,"IBertForSequenceClassification"),Ibt.forEach(t),dDo=r(SSe," (I-BERT model)"),SSe.forEach(t),cDo=i(q),Z2=n(q,"LI",{});var RSe=s(Z2);ppe=n(RSe,"STRONG",{});var Nbt=s(ppe);fDo=r(Nbt,"layoutlm"),Nbt.forEach(t),mDo=r(RSe," \u2014 "),IV=n(RSe,"A",{href:!0});var qbt=s(IV);gDo=r(qbt,"LayoutLMForSequenceClassification"),qbt.forEach(t),hDo=r(RSe," (LayoutLM model)"),RSe.forEach(t),pDo=i(q),eb=n(q,"LI",{});var PSe=s(eb);_pe=n(PSe,"STRONG",{});var jbt=s(_pe);_Do=r(jbt,"layoutlmv2"),jbt.forEach(t),uDo=r(PSe," \u2014 "),NV=n(PSe,"A",{href:!0});var Dbt=s(NV);bDo=r(Dbt,"LayoutLMv2ForSequenceClassification"),Dbt.forEach(t),vDo=r(PSe," (LayoutLMv2 model)"),PSe.forEach(t),FDo=i(q),ob=n(q,"LI",{});var BSe=s(ob);upe=n(BSe,"STRONG",{});var Gbt=s(upe);TDo=r(Gbt,"layoutlmv3"),Gbt.forEach(t),MDo=r(BSe," \u2014 "),qV=n(BSe,"A",{href:!0});var Obt=s(qV);EDo=r(Obt,"LayoutLMv3ForSequenceClassification"),Obt.forEach(t),CDo=r(BSe," (LayoutLMv3 model)"),BSe.forEach(t),wDo=i(q),rb=n(q,"LI",{});var ISe=s(rb);bpe=n(ISe,"STRONG",{});var Vbt=s(bpe);ADo=r(Vbt,"led"),Vbt.forEach(t),LDo=r(ISe," \u2014 "),jV=n(ISe,"A",{href:!0});var Xbt=s(jV);yDo=r(Xbt,"LEDForSequenceClassification"),Xbt.forEach(t),xDo=r(ISe," (LED model)"),ISe.forEach(t),$Do=i(q),tb=n(q,"LI",{});var NSe=s(tb);vpe=n(NSe,"STRONG",{});var zbt=s(vpe);kDo=r(zbt,"longformer"),zbt.forEach(t),SDo=r(NSe," \u2014 "),DV=n(NSe,"A",{href:!0});var Qbt=s(DV);RDo=r(Qbt,"LongformerForSequenceClassification"),Qbt.forEach(t),PDo=r(NSe," (Longformer model)"),NSe.forEach(t),BDo=i(q),ab=n(q,"LI",{});var qSe=s(ab);Fpe=n(qSe,"STRONG",{});var Wbt=s(Fpe);IDo=r(Wbt,"mbart"),Wbt.forEach(t),NDo=r(qSe," \u2014 "),GV=n(qSe,"A",{href:!0});var Hbt=s(GV);qDo=r(Hbt,"MBartForSequenceClassification"),Hbt.forEach(t),jDo=r(qSe," (mBART model)"),qSe.forEach(t),DDo=i(q),nb=n(q,"LI",{});var jSe=s(nb);Tpe=n(jSe,"STRONG",{});var Ubt=s(Tpe);GDo=r(Ubt,"megatron-bert"),Ubt.forEach(t),ODo=r(jSe," \u2014 "),OV=n(jSe,"A",{href:!0});var Jbt=s(OV);VDo=r(Jbt,"MegatronBertForSequenceClassification"),Jbt.forEach(t),XDo=r(jSe," (Megatron-BERT model)"),jSe.forEach(t),zDo=i(q),sb=n(q,"LI",{});var DSe=s(sb);Mpe=n(DSe,"STRONG",{});var Ybt=s(Mpe);QDo=r(Ybt,"mobilebert"),Ybt.forEach(t),WDo=r(DSe," \u2014 "),VV=n(DSe,"A",{href:!0});var Kbt=s(VV);HDo=r(Kbt,"MobileBertForSequenceClassification"),Kbt.forEach(t),UDo=r(DSe," (MobileBERT model)"),DSe.forEach(t),JDo=i(q),lb=n(q,"LI",{});var GSe=s(lb);Epe=n(GSe,"STRONG",{});var Zbt=s(Epe);YDo=r(Zbt,"mpnet"),Zbt.forEach(t),KDo=r(GSe," \u2014 "),XV=n(GSe,"A",{href:!0});var e4t=s(XV);ZDo=r(e4t,"MPNetForSequenceClassification"),e4t.forEach(t),eGo=r(GSe," (MPNet model)"),GSe.forEach(t),oGo=i(q),ib=n(q,"LI",{});var OSe=s(ib);Cpe=n(OSe,"STRONG",{});var o4t=s(Cpe);rGo=r(o4t,"nezha"),o4t.forEach(t),tGo=r(OSe," \u2014 "),zV=n(OSe,"A",{href:!0});var r4t=s(zV);aGo=r(r4t,"NezhaForSequenceClassification"),r4t.forEach(t),nGo=r(OSe," (Nezha model)"),OSe.forEach(t),sGo=i(q),db=n(q,"LI",{});var VSe=s(db);wpe=n(VSe,"STRONG",{});var t4t=s(wpe);lGo=r(t4t,"nystromformer"),t4t.forEach(t),iGo=r(VSe," \u2014 "),QV=n(VSe,"A",{href:!0});var a4t=s(QV);dGo=r(a4t,"NystromformerForSequenceClassification"),a4t.forEach(t),cGo=r(VSe," (Nystr\xF6mformer model)"),VSe.forEach(t),fGo=i(q),cb=n(q,"LI",{});var XSe=s(cb);Ape=n(XSe,"STRONG",{});var n4t=s(Ape);mGo=r(n4t,"openai-gpt"),n4t.forEach(t),gGo=r(XSe," \u2014 "),WV=n(XSe,"A",{href:!0});var s4t=s(WV);hGo=r(s4t,"OpenAIGPTForSequenceClassification"),s4t.forEach(t),pGo=r(XSe," (OpenAI GPT model)"),XSe.forEach(t),_Go=i(q),fb=n(q,"LI",{});var zSe=s(fb);Lpe=n(zSe,"STRONG",{});var l4t=s(Lpe);uGo=r(l4t,"perceiver"),l4t.forEach(t),bGo=r(zSe," \u2014 "),HV=n(zSe,"A",{href:!0});var i4t=s(HV);vGo=r(i4t,"PerceiverForSequenceClassification"),i4t.forEach(t),FGo=r(zSe," (Perceiver model)"),zSe.forEach(t),TGo=i(q),mb=n(q,"LI",{});var QSe=s(mb);ype=n(QSe,"STRONG",{});var d4t=s(ype);MGo=r(d4t,"plbart"),d4t.forEach(t),EGo=r(QSe," \u2014 "),UV=n(QSe,"A",{href:!0});var c4t=s(UV);CGo=r(c4t,"PLBartForSequenceClassification"),c4t.forEach(t),wGo=r(QSe," (PLBart model)"),QSe.forEach(t),AGo=i(q),gb=n(q,"LI",{});var WSe=s(gb);xpe=n(WSe,"STRONG",{});var f4t=s(xpe);LGo=r(f4t,"qdqbert"),f4t.forEach(t),yGo=r(WSe," \u2014 "),JV=n(WSe,"A",{href:!0});var m4t=s(JV);xGo=r(m4t,"QDQBertForSequenceClassification"),m4t.forEach(t),$Go=r(WSe," (QDQBert model)"),WSe.forEach(t),kGo=i(q),hb=n(q,"LI",{});var HSe=s(hb);$pe=n(HSe,"STRONG",{});var g4t=s($pe);SGo=r(g4t,"reformer"),g4t.forEach(t),RGo=r(HSe," \u2014 "),YV=n(HSe,"A",{href:!0});var h4t=s(YV);PGo=r(h4t,"ReformerForSequenceClassification"),h4t.forEach(t),BGo=r(HSe," (Reformer model)"),HSe.forEach(t),IGo=i(q),pb=n(q,"LI",{});var USe=s(pb);kpe=n(USe,"STRONG",{});var p4t=s(kpe);NGo=r(p4t,"rembert"),p4t.forEach(t),qGo=r(USe," \u2014 "),KV=n(USe,"A",{href:!0});var _4t=s(KV);jGo=r(_4t,"RemBertForSequenceClassification"),_4t.forEach(t),DGo=r(USe," (RemBERT model)"),USe.forEach(t),GGo=i(q),_b=n(q,"LI",{});var JSe=s(_b);Spe=n(JSe,"STRONG",{});var u4t=s(Spe);OGo=r(u4t,"roberta"),u4t.forEach(t),VGo=r(JSe," \u2014 "),ZV=n(JSe,"A",{href:!0});var b4t=s(ZV);XGo=r(b4t,"RobertaForSequenceClassification"),b4t.forEach(t),zGo=r(JSe," (RoBERTa model)"),JSe.forEach(t),QGo=i(q),ub=n(q,"LI",{});var YSe=s(ub);Rpe=n(YSe,"STRONG",{});var v4t=s(Rpe);WGo=r(v4t,"roformer"),v4t.forEach(t),HGo=r(YSe," \u2014 "),eX=n(YSe,"A",{href:!0});var F4t=s(eX);UGo=r(F4t,"RoFormerForSequenceClassification"),F4t.forEach(t),JGo=r(YSe," (RoFormer model)"),YSe.forEach(t),YGo=i(q),bb=n(q,"LI",{});var KSe=s(bb);Ppe=n(KSe,"STRONG",{});var T4t=s(Ppe);KGo=r(T4t,"squeezebert"),T4t.forEach(t),ZGo=r(KSe," \u2014 "),oX=n(KSe,"A",{href:!0});var M4t=s(oX);eOo=r(M4t,"SqueezeBertForSequenceClassification"),M4t.forEach(t),oOo=r(KSe," (SqueezeBERT model)"),KSe.forEach(t),rOo=i(q),vb=n(q,"LI",{});var ZSe=s(vb);Bpe=n(ZSe,"STRONG",{});var E4t=s(Bpe);tOo=r(E4t,"tapas"),E4t.forEach(t),aOo=r(ZSe," \u2014 "),rX=n(ZSe,"A",{href:!0});var C4t=s(rX);nOo=r(C4t,"TapasForSequenceClassification"),C4t.forEach(t),sOo=r(ZSe," (TAPAS model)"),ZSe.forEach(t),lOo=i(q),Fb=n(q,"LI",{});var eRe=s(Fb);Ipe=n(eRe,"STRONG",{});var w4t=s(Ipe);iOo=r(w4t,"transfo-xl"),w4t.forEach(t),dOo=r(eRe," \u2014 "),tX=n(eRe,"A",{href:!0});var A4t=s(tX);cOo=r(A4t,"TransfoXLForSequenceClassification"),A4t.forEach(t),fOo=r(eRe," (Transformer-XL model)"),eRe.forEach(t),mOo=i(q),Tb=n(q,"LI",{});var oRe=s(Tb);Npe=n(oRe,"STRONG",{});var L4t=s(Npe);gOo=r(L4t,"xlm"),L4t.forEach(t),hOo=r(oRe," \u2014 "),aX=n(oRe,"A",{href:!0});var y4t=s(aX);pOo=r(y4t,"XLMForSequenceClassification"),y4t.forEach(t),_Oo=r(oRe," (XLM model)"),oRe.forEach(t),uOo=i(q),Mb=n(q,"LI",{});var rRe=s(Mb);qpe=n(rRe,"STRONG",{});var x4t=s(qpe);bOo=r(x4t,"xlm-roberta"),x4t.forEach(t),vOo=r(rRe," \u2014 "),nX=n(rRe,"A",{href:!0});var $4t=s(nX);FOo=r($4t,"XLMRobertaForSequenceClassification"),$4t.forEach(t),TOo=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),MOo=i(q),Eb=n(q,"LI",{});var tRe=s(Eb);jpe=n(tRe,"STRONG",{});var k4t=s(jpe);EOo=r(k4t,"xlm-roberta-xl"),k4t.forEach(t),COo=r(tRe," \u2014 "),sX=n(tRe,"A",{href:!0});var S4t=s(sX);wOo=r(S4t,"XLMRobertaXLForSequenceClassification"),S4t.forEach(t),AOo=r(tRe," (XLM-RoBERTa-XL model)"),tRe.forEach(t),LOo=i(q),Cb=n(q,"LI",{});var aRe=s(Cb);Dpe=n(aRe,"STRONG",{});var R4t=s(Dpe);yOo=r(R4t,"xlnet"),R4t.forEach(t),xOo=r(aRe," \u2014 "),lX=n(aRe,"A",{href:!0});var P4t=s(lX);$Oo=r(P4t,"XLNetForSequenceClassification"),P4t.forEach(t),kOo=r(aRe," (XLNet model)"),aRe.forEach(t),SOo=i(q),wb=n(q,"LI",{});var nRe=s(wb);Gpe=n(nRe,"STRONG",{});var B4t=s(Gpe);ROo=r(B4t,"yoso"),B4t.forEach(t),POo=r(nRe," \u2014 "),iX=n(nRe,"A",{href:!0});var I4t=s(iX);BOo=r(I4t,"YosoForSequenceClassification"),I4t.forEach(t),IOo=r(nRe," (YOSO model)"),nRe.forEach(t),q.forEach(t),NOo=i(da),Ab=n(da,"P",{});var sRe=s(Ab);qOo=r(sRe,"The model is set in evaluation mode by default using "),Ope=n(sRe,"CODE",{});var N4t=s(Ope);jOo=r(N4t,"model.eval()"),N4t.forEach(t),DOo=r(sRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n(sRe,"CODE",{});var q4t=s(Vpe);GOo=r(q4t,"model.train()"),q4t.forEach(t),sRe.forEach(t),OOo=i(da),T(Lb.$$.fragment,da),da.forEach(t),al.forEach(t),HOe=i(f),od=n(f,"H2",{class:!0});var eze=s(od);yb=n(eze,"A",{id:!0,class:!0,href:!0});var j4t=s(yb);Xpe=n(j4t,"SPAN",{});var D4t=s(Xpe);T(Dy.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),VOo=i(eze),zpe=n(eze,"SPAN",{});var G4t=s(zpe);XOo=r(G4t,"AutoModelForMultipleChoice"),G4t.forEach(t),eze.forEach(t),UOe=i(f),Bo=n(f,"DIV",{class:!0});var nl=s(Bo);T(Gy.$$.fragment,nl),zOo=i(nl),rd=n(nl,"P",{});var Zoe=s(rd);QOo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dX=n(Zoe,"A",{href:!0});var O4t=s(dX);WOo=r(O4t,"from_pretrained()"),O4t.forEach(t),HOo=r(Zoe," class method or the "),cX=n(Zoe,"A",{href:!0});var V4t=s(cX);UOo=r(V4t,"from_config()"),V4t.forEach(t),JOo=r(Zoe,` class
method.`),Zoe.forEach(t),YOo=i(nl),Oy=n(nl,"P",{});var oze=s(Oy);KOo=r(oze,"This class cannot be instantiated directly using "),Qpe=n(oze,"CODE",{});var X4t=s(Qpe);ZOo=r(X4t,"__init__()"),X4t.forEach(t),eVo=r(oze," (throws an error)."),oze.forEach(t),oVo=i(nl),ft=n(nl,"DIV",{class:!0});var KA=s(ft);T(Vy.$$.fragment,KA),rVo=i(KA),Wpe=n(KA,"P",{});var z4t=s(Wpe);tVo=r(z4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z4t.forEach(t),aVo=i(KA),td=n(KA,"P",{});var ere=s(td);nVo=r(ere,`Note:
Loading a model from its configuration file does `),Hpe=n(ere,"STRONG",{});var Q4t=s(Hpe);sVo=r(Q4t,"not"),Q4t.forEach(t),lVo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(ere,"A",{href:!0});var W4t=s(fX);iVo=r(W4t,"from_pretrained()"),W4t.forEach(t),dVo=r(ere," to load the model weights."),ere.forEach(t),cVo=i(KA),T(xb.$$.fragment,KA),KA.forEach(t),fVo=i(nl),ro=n(nl,"DIV",{class:!0});var ca=s(ro);T(Xy.$$.fragment,ca),mVo=i(ca),Upe=n(ca,"P",{});var H4t=s(Upe);gVo=r(H4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H4t.forEach(t),hVo=i(ca),ja=n(ca,"P",{});var ZA=s(ja);pVo=r(ZA,"The model class to instantiate is selected based on the "),Jpe=n(ZA,"CODE",{});var U4t=s(Jpe);_Vo=r(U4t,"model_type"),U4t.forEach(t),uVo=r(ZA,` property of the config object (either
passed as an argument or loaded from `),Ype=n(ZA,"CODE",{});var J4t=s(Ype);bVo=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),vVo=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=n(ZA,"CODE",{});var Y4t=s(Kpe);FVo=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),TVo=r(ZA,":"),ZA.forEach(t),MVo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);$b=n(ee,"LI",{});var lRe=s($b);Zpe=n(lRe,"STRONG",{});var K4t=s(Zpe);EVo=r(K4t,"albert"),K4t.forEach(t),CVo=r(lRe," \u2014 "),mX=n(lRe,"A",{href:!0});var Z4t=s(mX);wVo=r(Z4t,"AlbertForMultipleChoice"),Z4t.forEach(t),AVo=r(lRe," (ALBERT model)"),lRe.forEach(t),LVo=i(ee),kb=n(ee,"LI",{});var iRe=s(kb);e_e=n(iRe,"STRONG",{});var e3t=s(e_e);yVo=r(e3t,"bert"),e3t.forEach(t),xVo=r(iRe," \u2014 "),gX=n(iRe,"A",{href:!0});var o3t=s(gX);$Vo=r(o3t,"BertForMultipleChoice"),o3t.forEach(t),kVo=r(iRe," (BERT model)"),iRe.forEach(t),SVo=i(ee),Sb=n(ee,"LI",{});var dRe=s(Sb);o_e=n(dRe,"STRONG",{});var r3t=s(o_e);RVo=r(r3t,"big_bird"),r3t.forEach(t),PVo=r(dRe," \u2014 "),hX=n(dRe,"A",{href:!0});var t3t=s(hX);BVo=r(t3t,"BigBirdForMultipleChoice"),t3t.forEach(t),IVo=r(dRe," (BigBird model)"),dRe.forEach(t),NVo=i(ee),Rb=n(ee,"LI",{});var cRe=s(Rb);r_e=n(cRe,"STRONG",{});var a3t=s(r_e);qVo=r(a3t,"camembert"),a3t.forEach(t),jVo=r(cRe," \u2014 "),pX=n(cRe,"A",{href:!0});var n3t=s(pX);DVo=r(n3t,"CamembertForMultipleChoice"),n3t.forEach(t),GVo=r(cRe," (CamemBERT model)"),cRe.forEach(t),OVo=i(ee),Pb=n(ee,"LI",{});var fRe=s(Pb);t_e=n(fRe,"STRONG",{});var s3t=s(t_e);VVo=r(s3t,"canine"),s3t.forEach(t),XVo=r(fRe," \u2014 "),_X=n(fRe,"A",{href:!0});var l3t=s(_X);zVo=r(l3t,"CanineForMultipleChoice"),l3t.forEach(t),QVo=r(fRe," (CANINE model)"),fRe.forEach(t),WVo=i(ee),Bb=n(ee,"LI",{});var mRe=s(Bb);a_e=n(mRe,"STRONG",{});var i3t=s(a_e);HVo=r(i3t,"convbert"),i3t.forEach(t),UVo=r(mRe," \u2014 "),uX=n(mRe,"A",{href:!0});var d3t=s(uX);JVo=r(d3t,"ConvBertForMultipleChoice"),d3t.forEach(t),YVo=r(mRe," (ConvBERT model)"),mRe.forEach(t),KVo=i(ee),Ib=n(ee,"LI",{});var gRe=s(Ib);n_e=n(gRe,"STRONG",{});var c3t=s(n_e);ZVo=r(c3t,"data2vec-text"),c3t.forEach(t),eXo=r(gRe," \u2014 "),bX=n(gRe,"A",{href:!0});var f3t=s(bX);oXo=r(f3t,"Data2VecTextForMultipleChoice"),f3t.forEach(t),rXo=r(gRe," (Data2VecText model)"),gRe.forEach(t),tXo=i(ee),Nb=n(ee,"LI",{});var hRe=s(Nb);s_e=n(hRe,"STRONG",{});var m3t=s(s_e);aXo=r(m3t,"deberta-v2"),m3t.forEach(t),nXo=r(hRe," \u2014 "),vX=n(hRe,"A",{href:!0});var g3t=s(vX);sXo=r(g3t,"DebertaV2ForMultipleChoice"),g3t.forEach(t),lXo=r(hRe," (DeBERTa-v2 model)"),hRe.forEach(t),iXo=i(ee),qb=n(ee,"LI",{});var pRe=s(qb);l_e=n(pRe,"STRONG",{});var h3t=s(l_e);dXo=r(h3t,"distilbert"),h3t.forEach(t),cXo=r(pRe," \u2014 "),FX=n(pRe,"A",{href:!0});var p3t=s(FX);fXo=r(p3t,"DistilBertForMultipleChoice"),p3t.forEach(t),mXo=r(pRe," (DistilBERT model)"),pRe.forEach(t),gXo=i(ee),jb=n(ee,"LI",{});var _Re=s(jb);i_e=n(_Re,"STRONG",{});var _3t=s(i_e);hXo=r(_3t,"electra"),_3t.forEach(t),pXo=r(_Re," \u2014 "),TX=n(_Re,"A",{href:!0});var u3t=s(TX);_Xo=r(u3t,"ElectraForMultipleChoice"),u3t.forEach(t),uXo=r(_Re," (ELECTRA model)"),_Re.forEach(t),bXo=i(ee),Db=n(ee,"LI",{});var uRe=s(Db);d_e=n(uRe,"STRONG",{});var b3t=s(d_e);vXo=r(b3t,"flaubert"),b3t.forEach(t),FXo=r(uRe," \u2014 "),MX=n(uRe,"A",{href:!0});var v3t=s(MX);TXo=r(v3t,"FlaubertForMultipleChoice"),v3t.forEach(t),MXo=r(uRe," (FlauBERT model)"),uRe.forEach(t),EXo=i(ee),Gb=n(ee,"LI",{});var bRe=s(Gb);c_e=n(bRe,"STRONG",{});var F3t=s(c_e);CXo=r(F3t,"fnet"),F3t.forEach(t),wXo=r(bRe," \u2014 "),EX=n(bRe,"A",{href:!0});var T3t=s(EX);AXo=r(T3t,"FNetForMultipleChoice"),T3t.forEach(t),LXo=r(bRe," (FNet model)"),bRe.forEach(t),yXo=i(ee),Ob=n(ee,"LI",{});var vRe=s(Ob);f_e=n(vRe,"STRONG",{});var M3t=s(f_e);xXo=r(M3t,"funnel"),M3t.forEach(t),$Xo=r(vRe," \u2014 "),CX=n(vRe,"A",{href:!0});var E3t=s(CX);kXo=r(E3t,"FunnelForMultipleChoice"),E3t.forEach(t),SXo=r(vRe," (Funnel Transformer model)"),vRe.forEach(t),RXo=i(ee),Vb=n(ee,"LI",{});var FRe=s(Vb);m_e=n(FRe,"STRONG",{});var C3t=s(m_e);PXo=r(C3t,"ibert"),C3t.forEach(t),BXo=r(FRe," \u2014 "),wX=n(FRe,"A",{href:!0});var w3t=s(wX);IXo=r(w3t,"IBertForMultipleChoice"),w3t.forEach(t),NXo=r(FRe," (I-BERT model)"),FRe.forEach(t),qXo=i(ee),Xb=n(ee,"LI",{});var TRe=s(Xb);g_e=n(TRe,"STRONG",{});var A3t=s(g_e);jXo=r(A3t,"longformer"),A3t.forEach(t),DXo=r(TRe," \u2014 "),AX=n(TRe,"A",{href:!0});var L3t=s(AX);GXo=r(L3t,"LongformerForMultipleChoice"),L3t.forEach(t),OXo=r(TRe," (Longformer model)"),TRe.forEach(t),VXo=i(ee),zb=n(ee,"LI",{});var MRe=s(zb);h_e=n(MRe,"STRONG",{});var y3t=s(h_e);XXo=r(y3t,"megatron-bert"),y3t.forEach(t),zXo=r(MRe," \u2014 "),LX=n(MRe,"A",{href:!0});var x3t=s(LX);QXo=r(x3t,"MegatronBertForMultipleChoice"),x3t.forEach(t),WXo=r(MRe," (Megatron-BERT model)"),MRe.forEach(t),HXo=i(ee),Qb=n(ee,"LI",{});var ERe=s(Qb);p_e=n(ERe,"STRONG",{});var $3t=s(p_e);UXo=r($3t,"mobilebert"),$3t.forEach(t),JXo=r(ERe," \u2014 "),yX=n(ERe,"A",{href:!0});var k3t=s(yX);YXo=r(k3t,"MobileBertForMultipleChoice"),k3t.forEach(t),KXo=r(ERe," (MobileBERT model)"),ERe.forEach(t),ZXo=i(ee),Wb=n(ee,"LI",{});var CRe=s(Wb);__e=n(CRe,"STRONG",{});var S3t=s(__e);ezo=r(S3t,"mpnet"),S3t.forEach(t),ozo=r(CRe," \u2014 "),xX=n(CRe,"A",{href:!0});var R3t=s(xX);rzo=r(R3t,"MPNetForMultipleChoice"),R3t.forEach(t),tzo=r(CRe," (MPNet model)"),CRe.forEach(t),azo=i(ee),Hb=n(ee,"LI",{});var wRe=s(Hb);u_e=n(wRe,"STRONG",{});var P3t=s(u_e);nzo=r(P3t,"nezha"),P3t.forEach(t),szo=r(wRe," \u2014 "),$X=n(wRe,"A",{href:!0});var B3t=s($X);lzo=r(B3t,"NezhaForMultipleChoice"),B3t.forEach(t),izo=r(wRe," (Nezha model)"),wRe.forEach(t),dzo=i(ee),Ub=n(ee,"LI",{});var ARe=s(Ub);b_e=n(ARe,"STRONG",{});var I3t=s(b_e);czo=r(I3t,"nystromformer"),I3t.forEach(t),fzo=r(ARe," \u2014 "),kX=n(ARe,"A",{href:!0});var N3t=s(kX);mzo=r(N3t,"NystromformerForMultipleChoice"),N3t.forEach(t),gzo=r(ARe," (Nystr\xF6mformer model)"),ARe.forEach(t),hzo=i(ee),Jb=n(ee,"LI",{});var LRe=s(Jb);v_e=n(LRe,"STRONG",{});var q3t=s(v_e);pzo=r(q3t,"qdqbert"),q3t.forEach(t),_zo=r(LRe," \u2014 "),SX=n(LRe,"A",{href:!0});var j3t=s(SX);uzo=r(j3t,"QDQBertForMultipleChoice"),j3t.forEach(t),bzo=r(LRe," (QDQBert model)"),LRe.forEach(t),vzo=i(ee),Yb=n(ee,"LI",{});var yRe=s(Yb);F_e=n(yRe,"STRONG",{});var D3t=s(F_e);Fzo=r(D3t,"rembert"),D3t.forEach(t),Tzo=r(yRe," \u2014 "),RX=n(yRe,"A",{href:!0});var G3t=s(RX);Mzo=r(G3t,"RemBertForMultipleChoice"),G3t.forEach(t),Ezo=r(yRe," (RemBERT model)"),yRe.forEach(t),Czo=i(ee),Kb=n(ee,"LI",{});var xRe=s(Kb);T_e=n(xRe,"STRONG",{});var O3t=s(T_e);wzo=r(O3t,"roberta"),O3t.forEach(t),Azo=r(xRe," \u2014 "),PX=n(xRe,"A",{href:!0});var V3t=s(PX);Lzo=r(V3t,"RobertaForMultipleChoice"),V3t.forEach(t),yzo=r(xRe," (RoBERTa model)"),xRe.forEach(t),xzo=i(ee),Zb=n(ee,"LI",{});var $Re=s(Zb);M_e=n($Re,"STRONG",{});var X3t=s(M_e);$zo=r(X3t,"roformer"),X3t.forEach(t),kzo=r($Re," \u2014 "),BX=n($Re,"A",{href:!0});var z3t=s(BX);Szo=r(z3t,"RoFormerForMultipleChoice"),z3t.forEach(t),Rzo=r($Re," (RoFormer model)"),$Re.forEach(t),Pzo=i(ee),e4=n(ee,"LI",{});var kRe=s(e4);E_e=n(kRe,"STRONG",{});var Q3t=s(E_e);Bzo=r(Q3t,"squeezebert"),Q3t.forEach(t),Izo=r(kRe," \u2014 "),IX=n(kRe,"A",{href:!0});var W3t=s(IX);Nzo=r(W3t,"SqueezeBertForMultipleChoice"),W3t.forEach(t),qzo=r(kRe," (SqueezeBERT model)"),kRe.forEach(t),jzo=i(ee),o4=n(ee,"LI",{});var SRe=s(o4);C_e=n(SRe,"STRONG",{});var H3t=s(C_e);Dzo=r(H3t,"xlm"),H3t.forEach(t),Gzo=r(SRe," \u2014 "),NX=n(SRe,"A",{href:!0});var U3t=s(NX);Ozo=r(U3t,"XLMForMultipleChoice"),U3t.forEach(t),Vzo=r(SRe," (XLM model)"),SRe.forEach(t),Xzo=i(ee),r4=n(ee,"LI",{});var RRe=s(r4);w_e=n(RRe,"STRONG",{});var J3t=s(w_e);zzo=r(J3t,"xlm-roberta"),J3t.forEach(t),Qzo=r(RRe," \u2014 "),qX=n(RRe,"A",{href:!0});var Y3t=s(qX);Wzo=r(Y3t,"XLMRobertaForMultipleChoice"),Y3t.forEach(t),Hzo=r(RRe," (XLM-RoBERTa model)"),RRe.forEach(t),Uzo=i(ee),t4=n(ee,"LI",{});var PRe=s(t4);A_e=n(PRe,"STRONG",{});var K3t=s(A_e);Jzo=r(K3t,"xlm-roberta-xl"),K3t.forEach(t),Yzo=r(PRe," \u2014 "),jX=n(PRe,"A",{href:!0});var Z3t=s(jX);Kzo=r(Z3t,"XLMRobertaXLForMultipleChoice"),Z3t.forEach(t),Zzo=r(PRe," (XLM-RoBERTa-XL model)"),PRe.forEach(t),eQo=i(ee),a4=n(ee,"LI",{});var BRe=s(a4);L_e=n(BRe,"STRONG",{});var evt=s(L_e);oQo=r(evt,"xlnet"),evt.forEach(t),rQo=r(BRe," \u2014 "),DX=n(BRe,"A",{href:!0});var ovt=s(DX);tQo=r(ovt,"XLNetForMultipleChoice"),ovt.forEach(t),aQo=r(BRe," (XLNet model)"),BRe.forEach(t),nQo=i(ee),n4=n(ee,"LI",{});var IRe=s(n4);y_e=n(IRe,"STRONG",{});var rvt=s(y_e);sQo=r(rvt,"yoso"),rvt.forEach(t),lQo=r(IRe," \u2014 "),GX=n(IRe,"A",{href:!0});var tvt=s(GX);iQo=r(tvt,"YosoForMultipleChoice"),tvt.forEach(t),dQo=r(IRe," (YOSO model)"),IRe.forEach(t),ee.forEach(t),cQo=i(ca),s4=n(ca,"P",{});var NRe=s(s4);fQo=r(NRe,"The model is set in evaluation mode by default using "),x_e=n(NRe,"CODE",{});var avt=s(x_e);mQo=r(avt,"model.eval()"),avt.forEach(t),gQo=r(NRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=n(NRe,"CODE",{});var nvt=s($_e);hQo=r(nvt,"model.train()"),nvt.forEach(t),NRe.forEach(t),pQo=i(ca),T(l4.$$.fragment,ca),ca.forEach(t),nl.forEach(t),JOe=i(f),ad=n(f,"H2",{class:!0});var rze=s(ad);i4=n(rze,"A",{id:!0,class:!0,href:!0});var svt=s(i4);k_e=n(svt,"SPAN",{});var lvt=s(k_e);T(zy.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),_Qo=i(rze),S_e=n(rze,"SPAN",{});var ivt=s(S_e);uQo=r(ivt,"AutoModelForNextSentencePrediction"),ivt.forEach(t),rze.forEach(t),YOe=i(f),Io=n(f,"DIV",{class:!0});var sl=s(Io);T(Qy.$$.fragment,sl),bQo=i(sl),nd=n(sl,"P",{});var ore=s(nd);vQo=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OX=n(ore,"A",{href:!0});var dvt=s(OX);FQo=r(dvt,"from_pretrained()"),dvt.forEach(t),TQo=r(ore," class method or the "),VX=n(ore,"A",{href:!0});var cvt=s(VX);MQo=r(cvt,"from_config()"),cvt.forEach(t),EQo=r(ore,` class
method.`),ore.forEach(t),CQo=i(sl),Wy=n(sl,"P",{});var tze=s(Wy);wQo=r(tze,"This class cannot be instantiated directly using "),R_e=n(tze,"CODE",{});var fvt=s(R_e);AQo=r(fvt,"__init__()"),fvt.forEach(t),LQo=r(tze," (throws an error)."),tze.forEach(t),yQo=i(sl),mt=n(sl,"DIV",{class:!0});var e6=s(mt);T(Hy.$$.fragment,e6),xQo=i(e6),P_e=n(e6,"P",{});var mvt=s(P_e);$Qo=r(mvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mvt.forEach(t),kQo=i(e6),sd=n(e6,"P",{});var rre=s(sd);SQo=r(rre,`Note:
Loading a model from its configuration file does `),B_e=n(rre,"STRONG",{});var gvt=s(B_e);RQo=r(gvt,"not"),gvt.forEach(t),PQo=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(rre,"A",{href:!0});var hvt=s(XX);BQo=r(hvt,"from_pretrained()"),hvt.forEach(t),IQo=r(rre," to load the model weights."),rre.forEach(t),NQo=i(e6),T(d4.$$.fragment,e6),e6.forEach(t),qQo=i(sl),to=n(sl,"DIV",{class:!0});var fa=s(to);T(Uy.$$.fragment,fa),jQo=i(fa),I_e=n(fa,"P",{});var pvt=s(I_e);DQo=r(pvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pvt.forEach(t),GQo=i(fa),Da=n(fa,"P",{});var o6=s(Da);OQo=r(o6,"The model class to instantiate is selected based on the "),N_e=n(o6,"CODE",{});var _vt=s(N_e);VQo=r(_vt,"model_type"),_vt.forEach(t),XQo=r(o6,` property of the config object (either
passed as an argument or loaded from `),q_e=n(o6,"CODE",{});var uvt=s(q_e);zQo=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),QQo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(o6,"CODE",{});var bvt=s(j_e);WQo=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),HQo=r(o6,":"),o6.forEach(t),UQo=i(fa),No=n(fa,"UL",{});var ma=s(No);c4=n(ma,"LI",{});var qRe=s(c4);D_e=n(qRe,"STRONG",{});var vvt=s(D_e);JQo=r(vvt,"bert"),vvt.forEach(t),YQo=r(qRe," \u2014 "),zX=n(qRe,"A",{href:!0});var Fvt=s(zX);KQo=r(Fvt,"BertForNextSentencePrediction"),Fvt.forEach(t),ZQo=r(qRe," (BERT model)"),qRe.forEach(t),eWo=i(ma),f4=n(ma,"LI",{});var jRe=s(f4);G_e=n(jRe,"STRONG",{});var Tvt=s(G_e);oWo=r(Tvt,"fnet"),Tvt.forEach(t),rWo=r(jRe," \u2014 "),QX=n(jRe,"A",{href:!0});var Mvt=s(QX);tWo=r(Mvt,"FNetForNextSentencePrediction"),Mvt.forEach(t),aWo=r(jRe," (FNet model)"),jRe.forEach(t),nWo=i(ma),m4=n(ma,"LI",{});var DRe=s(m4);O_e=n(DRe,"STRONG",{});var Evt=s(O_e);sWo=r(Evt,"megatron-bert"),Evt.forEach(t),lWo=r(DRe," \u2014 "),WX=n(DRe,"A",{href:!0});var Cvt=s(WX);iWo=r(Cvt,"MegatronBertForNextSentencePrediction"),Cvt.forEach(t),dWo=r(DRe," (Megatron-BERT model)"),DRe.forEach(t),cWo=i(ma),g4=n(ma,"LI",{});var GRe=s(g4);V_e=n(GRe,"STRONG",{});var wvt=s(V_e);fWo=r(wvt,"mobilebert"),wvt.forEach(t),mWo=r(GRe," \u2014 "),HX=n(GRe,"A",{href:!0});var Avt=s(HX);gWo=r(Avt,"MobileBertForNextSentencePrediction"),Avt.forEach(t),hWo=r(GRe," (MobileBERT model)"),GRe.forEach(t),pWo=i(ma),h4=n(ma,"LI",{});var ORe=s(h4);X_e=n(ORe,"STRONG",{});var Lvt=s(X_e);_Wo=r(Lvt,"nezha"),Lvt.forEach(t),uWo=r(ORe," \u2014 "),UX=n(ORe,"A",{href:!0});var yvt=s(UX);bWo=r(yvt,"NezhaForNextSentencePrediction"),yvt.forEach(t),vWo=r(ORe," (Nezha model)"),ORe.forEach(t),FWo=i(ma),p4=n(ma,"LI",{});var VRe=s(p4);z_e=n(VRe,"STRONG",{});var xvt=s(z_e);TWo=r(xvt,"qdqbert"),xvt.forEach(t),MWo=r(VRe," \u2014 "),JX=n(VRe,"A",{href:!0});var $vt=s(JX);EWo=r($vt,"QDQBertForNextSentencePrediction"),$vt.forEach(t),CWo=r(VRe," (QDQBert model)"),VRe.forEach(t),ma.forEach(t),wWo=i(fa),_4=n(fa,"P",{});var XRe=s(_4);AWo=r(XRe,"The model is set in evaluation mode by default using "),Q_e=n(XRe,"CODE",{});var kvt=s(Q_e);LWo=r(kvt,"model.eval()"),kvt.forEach(t),yWo=r(XRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(XRe,"CODE",{});var Svt=s(W_e);xWo=r(Svt,"model.train()"),Svt.forEach(t),XRe.forEach(t),$Wo=i(fa),T(u4.$$.fragment,fa),fa.forEach(t),sl.forEach(t),KOe=i(f),ld=n(f,"H2",{class:!0});var aze=s(ld);b4=n(aze,"A",{id:!0,class:!0,href:!0});var Rvt=s(b4);H_e=n(Rvt,"SPAN",{});var Pvt=s(H_e);T(Jy.$$.fragment,Pvt),Pvt.forEach(t),Rvt.forEach(t),kWo=i(aze),U_e=n(aze,"SPAN",{});var Bvt=s(U_e);SWo=r(Bvt,"AutoModelForTokenClassification"),Bvt.forEach(t),aze.forEach(t),ZOe=i(f),qo=n(f,"DIV",{class:!0});var ll=s(qo);T(Yy.$$.fragment,ll),RWo=i(ll),id=n(ll,"P",{});var tre=s(id);PWo=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YX=n(tre,"A",{href:!0});var Ivt=s(YX);BWo=r(Ivt,"from_pretrained()"),Ivt.forEach(t),IWo=r(tre," class method or the "),KX=n(tre,"A",{href:!0});var Nvt=s(KX);NWo=r(Nvt,"from_config()"),Nvt.forEach(t),qWo=r(tre,` class
method.`),tre.forEach(t),jWo=i(ll),Ky=n(ll,"P",{});var nze=s(Ky);DWo=r(nze,"This class cannot be instantiated directly using "),J_e=n(nze,"CODE",{});var qvt=s(J_e);GWo=r(qvt,"__init__()"),qvt.forEach(t),OWo=r(nze," (throws an error)."),nze.forEach(t),VWo=i(ll),gt=n(ll,"DIV",{class:!0});var r6=s(gt);T(Zy.$$.fragment,r6),XWo=i(r6),Y_e=n(r6,"P",{});var jvt=s(Y_e);zWo=r(jvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jvt.forEach(t),QWo=i(r6),dd=n(r6,"P",{});var are=s(dd);WWo=r(are,`Note:
Loading a model from its configuration file does `),K_e=n(are,"STRONG",{});var Dvt=s(K_e);HWo=r(Dvt,"not"),Dvt.forEach(t),UWo=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(are,"A",{href:!0});var Gvt=s(ZX);JWo=r(Gvt,"from_pretrained()"),Gvt.forEach(t),YWo=r(are," to load the model weights."),are.forEach(t),KWo=i(r6),T(v4.$$.fragment,r6),r6.forEach(t),ZWo=i(ll),ao=n(ll,"DIV",{class:!0});var ga=s(ao);T(e8.$$.fragment,ga),eHo=i(ga),Z_e=n(ga,"P",{});var Ovt=s(Z_e);oHo=r(Ovt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ovt.forEach(t),rHo=i(ga),Ga=n(ga,"P",{});var t6=s(Ga);tHo=r(t6,"The model class to instantiate is selected based on the "),eue=n(t6,"CODE",{});var Vvt=s(eue);aHo=r(Vvt,"model_type"),Vvt.forEach(t),nHo=r(t6,` property of the config object (either
passed as an argument or loaded from `),oue=n(t6,"CODE",{});var Xvt=s(oue);sHo=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),lHo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(t6,"CODE",{});var zvt=s(rue);iHo=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),dHo=r(t6,":"),t6.forEach(t),cHo=i(ga),H=n(ga,"UL",{});var J=s(H);F4=n(J,"LI",{});var zRe=s(F4);tue=n(zRe,"STRONG",{});var Qvt=s(tue);fHo=r(Qvt,"albert"),Qvt.forEach(t),mHo=r(zRe," \u2014 "),ez=n(zRe,"A",{href:!0});var Wvt=s(ez);gHo=r(Wvt,"AlbertForTokenClassification"),Wvt.forEach(t),hHo=r(zRe," (ALBERT model)"),zRe.forEach(t),pHo=i(J),T4=n(J,"LI",{});var QRe=s(T4);aue=n(QRe,"STRONG",{});var Hvt=s(aue);_Ho=r(Hvt,"bert"),Hvt.forEach(t),uHo=r(QRe," \u2014 "),oz=n(QRe,"A",{href:!0});var Uvt=s(oz);bHo=r(Uvt,"BertForTokenClassification"),Uvt.forEach(t),vHo=r(QRe," (BERT model)"),QRe.forEach(t),FHo=i(J),M4=n(J,"LI",{});var WRe=s(M4);nue=n(WRe,"STRONG",{});var Jvt=s(nue);THo=r(Jvt,"big_bird"),Jvt.forEach(t),MHo=r(WRe," \u2014 "),rz=n(WRe,"A",{href:!0});var Yvt=s(rz);EHo=r(Yvt,"BigBirdForTokenClassification"),Yvt.forEach(t),CHo=r(WRe," (BigBird model)"),WRe.forEach(t),wHo=i(J),E4=n(J,"LI",{});var HRe=s(E4);sue=n(HRe,"STRONG",{});var Kvt=s(sue);AHo=r(Kvt,"bloom"),Kvt.forEach(t),LHo=r(HRe," \u2014 "),tz=n(HRe,"A",{href:!0});var Zvt=s(tz);yHo=r(Zvt,"BloomForTokenClassification"),Zvt.forEach(t),xHo=r(HRe," (BLOOM model)"),HRe.forEach(t),$Ho=i(J),C4=n(J,"LI",{});var URe=s(C4);lue=n(URe,"STRONG",{});var eFt=s(lue);kHo=r(eFt,"camembert"),eFt.forEach(t),SHo=r(URe," \u2014 "),az=n(URe,"A",{href:!0});var oFt=s(az);RHo=r(oFt,"CamembertForTokenClassification"),oFt.forEach(t),PHo=r(URe," (CamemBERT model)"),URe.forEach(t),BHo=i(J),w4=n(J,"LI",{});var JRe=s(w4);iue=n(JRe,"STRONG",{});var rFt=s(iue);IHo=r(rFt,"canine"),rFt.forEach(t),NHo=r(JRe," \u2014 "),nz=n(JRe,"A",{href:!0});var tFt=s(nz);qHo=r(tFt,"CanineForTokenClassification"),tFt.forEach(t),jHo=r(JRe," (CANINE model)"),JRe.forEach(t),DHo=i(J),A4=n(J,"LI",{});var YRe=s(A4);due=n(YRe,"STRONG",{});var aFt=s(due);GHo=r(aFt,"convbert"),aFt.forEach(t),OHo=r(YRe," \u2014 "),sz=n(YRe,"A",{href:!0});var nFt=s(sz);VHo=r(nFt,"ConvBertForTokenClassification"),nFt.forEach(t),XHo=r(YRe," (ConvBERT model)"),YRe.forEach(t),zHo=i(J),L4=n(J,"LI",{});var KRe=s(L4);cue=n(KRe,"STRONG",{});var sFt=s(cue);QHo=r(sFt,"data2vec-text"),sFt.forEach(t),WHo=r(KRe," \u2014 "),lz=n(KRe,"A",{href:!0});var lFt=s(lz);HHo=r(lFt,"Data2VecTextForTokenClassification"),lFt.forEach(t),UHo=r(KRe," (Data2VecText model)"),KRe.forEach(t),JHo=i(J),y4=n(J,"LI",{});var ZRe=s(y4);fue=n(ZRe,"STRONG",{});var iFt=s(fue);YHo=r(iFt,"deberta"),iFt.forEach(t),KHo=r(ZRe," \u2014 "),iz=n(ZRe,"A",{href:!0});var dFt=s(iz);ZHo=r(dFt,"DebertaForTokenClassification"),dFt.forEach(t),eUo=r(ZRe," (DeBERTa model)"),ZRe.forEach(t),oUo=i(J),x4=n(J,"LI",{});var ePe=s(x4);mue=n(ePe,"STRONG",{});var cFt=s(mue);rUo=r(cFt,"deberta-v2"),cFt.forEach(t),tUo=r(ePe," \u2014 "),dz=n(ePe,"A",{href:!0});var fFt=s(dz);aUo=r(fFt,"DebertaV2ForTokenClassification"),fFt.forEach(t),nUo=r(ePe," (DeBERTa-v2 model)"),ePe.forEach(t),sUo=i(J),$4=n(J,"LI",{});var oPe=s($4);gue=n(oPe,"STRONG",{});var mFt=s(gue);lUo=r(mFt,"distilbert"),mFt.forEach(t),iUo=r(oPe," \u2014 "),cz=n(oPe,"A",{href:!0});var gFt=s(cz);dUo=r(gFt,"DistilBertForTokenClassification"),gFt.forEach(t),cUo=r(oPe," (DistilBERT model)"),oPe.forEach(t),fUo=i(J),k4=n(J,"LI",{});var rPe=s(k4);hue=n(rPe,"STRONG",{});var hFt=s(hue);mUo=r(hFt,"electra"),hFt.forEach(t),gUo=r(rPe," \u2014 "),fz=n(rPe,"A",{href:!0});var pFt=s(fz);hUo=r(pFt,"ElectraForTokenClassification"),pFt.forEach(t),pUo=r(rPe," (ELECTRA model)"),rPe.forEach(t),_Uo=i(J),S4=n(J,"LI",{});var tPe=s(S4);pue=n(tPe,"STRONG",{});var _Ft=s(pue);uUo=r(_Ft,"flaubert"),_Ft.forEach(t),bUo=r(tPe," \u2014 "),mz=n(tPe,"A",{href:!0});var uFt=s(mz);vUo=r(uFt,"FlaubertForTokenClassification"),uFt.forEach(t),FUo=r(tPe," (FlauBERT model)"),tPe.forEach(t),TUo=i(J),R4=n(J,"LI",{});var aPe=s(R4);_ue=n(aPe,"STRONG",{});var bFt=s(_ue);MUo=r(bFt,"fnet"),bFt.forEach(t),EUo=r(aPe," \u2014 "),gz=n(aPe,"A",{href:!0});var vFt=s(gz);CUo=r(vFt,"FNetForTokenClassification"),vFt.forEach(t),wUo=r(aPe," (FNet model)"),aPe.forEach(t),AUo=i(J),P4=n(J,"LI",{});var nPe=s(P4);uue=n(nPe,"STRONG",{});var FFt=s(uue);LUo=r(FFt,"funnel"),FFt.forEach(t),yUo=r(nPe," \u2014 "),hz=n(nPe,"A",{href:!0});var TFt=s(hz);xUo=r(TFt,"FunnelForTokenClassification"),TFt.forEach(t),$Uo=r(nPe," (Funnel Transformer model)"),nPe.forEach(t),kUo=i(J),B4=n(J,"LI",{});var sPe=s(B4);bue=n(sPe,"STRONG",{});var MFt=s(bue);SUo=r(MFt,"gpt2"),MFt.forEach(t),RUo=r(sPe," \u2014 "),pz=n(sPe,"A",{href:!0});var EFt=s(pz);PUo=r(EFt,"GPT2ForTokenClassification"),EFt.forEach(t),BUo=r(sPe," (OpenAI GPT-2 model)"),sPe.forEach(t),IUo=i(J),I4=n(J,"LI",{});var lPe=s(I4);vue=n(lPe,"STRONG",{});var CFt=s(vue);NUo=r(CFt,"ibert"),CFt.forEach(t),qUo=r(lPe," \u2014 "),_z=n(lPe,"A",{href:!0});var wFt=s(_z);jUo=r(wFt,"IBertForTokenClassification"),wFt.forEach(t),DUo=r(lPe," (I-BERT model)"),lPe.forEach(t),GUo=i(J),N4=n(J,"LI",{});var iPe=s(N4);Fue=n(iPe,"STRONG",{});var AFt=s(Fue);OUo=r(AFt,"layoutlm"),AFt.forEach(t),VUo=r(iPe," \u2014 "),uz=n(iPe,"A",{href:!0});var LFt=s(uz);XUo=r(LFt,"LayoutLMForTokenClassification"),LFt.forEach(t),zUo=r(iPe," (LayoutLM model)"),iPe.forEach(t),QUo=i(J),q4=n(J,"LI",{});var dPe=s(q4);Tue=n(dPe,"STRONG",{});var yFt=s(Tue);WUo=r(yFt,"layoutlmv2"),yFt.forEach(t),HUo=r(dPe," \u2014 "),bz=n(dPe,"A",{href:!0});var xFt=s(bz);UUo=r(xFt,"LayoutLMv2ForTokenClassification"),xFt.forEach(t),JUo=r(dPe," (LayoutLMv2 model)"),dPe.forEach(t),YUo=i(J),j4=n(J,"LI",{});var cPe=s(j4);Mue=n(cPe,"STRONG",{});var $Ft=s(Mue);KUo=r($Ft,"layoutlmv3"),$Ft.forEach(t),ZUo=r(cPe," \u2014 "),vz=n(cPe,"A",{href:!0});var kFt=s(vz);eJo=r(kFt,"LayoutLMv3ForTokenClassification"),kFt.forEach(t),oJo=r(cPe," (LayoutLMv3 model)"),cPe.forEach(t),rJo=i(J),D4=n(J,"LI",{});var fPe=s(D4);Eue=n(fPe,"STRONG",{});var SFt=s(Eue);tJo=r(SFt,"longformer"),SFt.forEach(t),aJo=r(fPe," \u2014 "),Fz=n(fPe,"A",{href:!0});var RFt=s(Fz);nJo=r(RFt,"LongformerForTokenClassification"),RFt.forEach(t),sJo=r(fPe," (Longformer model)"),fPe.forEach(t),lJo=i(J),G4=n(J,"LI",{});var mPe=s(G4);Cue=n(mPe,"STRONG",{});var PFt=s(Cue);iJo=r(PFt,"megatron-bert"),PFt.forEach(t),dJo=r(mPe," \u2014 "),Tz=n(mPe,"A",{href:!0});var BFt=s(Tz);cJo=r(BFt,"MegatronBertForTokenClassification"),BFt.forEach(t),fJo=r(mPe," (Megatron-BERT model)"),mPe.forEach(t),mJo=i(J),O4=n(J,"LI",{});var gPe=s(O4);wue=n(gPe,"STRONG",{});var IFt=s(wue);gJo=r(IFt,"mobilebert"),IFt.forEach(t),hJo=r(gPe," \u2014 "),Mz=n(gPe,"A",{href:!0});var NFt=s(Mz);pJo=r(NFt,"MobileBertForTokenClassification"),NFt.forEach(t),_Jo=r(gPe," (MobileBERT model)"),gPe.forEach(t),uJo=i(J),V4=n(J,"LI",{});var hPe=s(V4);Aue=n(hPe,"STRONG",{});var qFt=s(Aue);bJo=r(qFt,"mpnet"),qFt.forEach(t),vJo=r(hPe," \u2014 "),Ez=n(hPe,"A",{href:!0});var jFt=s(Ez);FJo=r(jFt,"MPNetForTokenClassification"),jFt.forEach(t),TJo=r(hPe," (MPNet model)"),hPe.forEach(t),MJo=i(J),X4=n(J,"LI",{});var pPe=s(X4);Lue=n(pPe,"STRONG",{});var DFt=s(Lue);EJo=r(DFt,"nezha"),DFt.forEach(t),CJo=r(pPe," \u2014 "),Cz=n(pPe,"A",{href:!0});var GFt=s(Cz);wJo=r(GFt,"NezhaForTokenClassification"),GFt.forEach(t),AJo=r(pPe," (Nezha model)"),pPe.forEach(t),LJo=i(J),z4=n(J,"LI",{});var _Pe=s(z4);yue=n(_Pe,"STRONG",{});var OFt=s(yue);yJo=r(OFt,"nystromformer"),OFt.forEach(t),xJo=r(_Pe," \u2014 "),wz=n(_Pe,"A",{href:!0});var VFt=s(wz);$Jo=r(VFt,"NystromformerForTokenClassification"),VFt.forEach(t),kJo=r(_Pe," (Nystr\xF6mformer model)"),_Pe.forEach(t),SJo=i(J),Q4=n(J,"LI",{});var uPe=s(Q4);xue=n(uPe,"STRONG",{});var XFt=s(xue);RJo=r(XFt,"qdqbert"),XFt.forEach(t),PJo=r(uPe," \u2014 "),Az=n(uPe,"A",{href:!0});var zFt=s(Az);BJo=r(zFt,"QDQBertForTokenClassification"),zFt.forEach(t),IJo=r(uPe," (QDQBert model)"),uPe.forEach(t),NJo=i(J),W4=n(J,"LI",{});var bPe=s(W4);$ue=n(bPe,"STRONG",{});var QFt=s($ue);qJo=r(QFt,"rembert"),QFt.forEach(t),jJo=r(bPe," \u2014 "),Lz=n(bPe,"A",{href:!0});var WFt=s(Lz);DJo=r(WFt,"RemBertForTokenClassification"),WFt.forEach(t),GJo=r(bPe," (RemBERT model)"),bPe.forEach(t),OJo=i(J),H4=n(J,"LI",{});var vPe=s(H4);kue=n(vPe,"STRONG",{});var HFt=s(kue);VJo=r(HFt,"roberta"),HFt.forEach(t),XJo=r(vPe," \u2014 "),yz=n(vPe,"A",{href:!0});var UFt=s(yz);zJo=r(UFt,"RobertaForTokenClassification"),UFt.forEach(t),QJo=r(vPe," (RoBERTa model)"),vPe.forEach(t),WJo=i(J),U4=n(J,"LI",{});var FPe=s(U4);Sue=n(FPe,"STRONG",{});var JFt=s(Sue);HJo=r(JFt,"roformer"),JFt.forEach(t),UJo=r(FPe," \u2014 "),xz=n(FPe,"A",{href:!0});var YFt=s(xz);JJo=r(YFt,"RoFormerForTokenClassification"),YFt.forEach(t),YJo=r(FPe," (RoFormer model)"),FPe.forEach(t),KJo=i(J),J4=n(J,"LI",{});var TPe=s(J4);Rue=n(TPe,"STRONG",{});var KFt=s(Rue);ZJo=r(KFt,"squeezebert"),KFt.forEach(t),eYo=r(TPe," \u2014 "),$z=n(TPe,"A",{href:!0});var ZFt=s($z);oYo=r(ZFt,"SqueezeBertForTokenClassification"),ZFt.forEach(t),rYo=r(TPe," (SqueezeBERT model)"),TPe.forEach(t),tYo=i(J),Y4=n(J,"LI",{});var MPe=s(Y4);Pue=n(MPe,"STRONG",{});var eTt=s(Pue);aYo=r(eTt,"xlm"),eTt.forEach(t),nYo=r(MPe," \u2014 "),kz=n(MPe,"A",{href:!0});var oTt=s(kz);sYo=r(oTt,"XLMForTokenClassification"),oTt.forEach(t),lYo=r(MPe," (XLM model)"),MPe.forEach(t),iYo=i(J),K4=n(J,"LI",{});var EPe=s(K4);Bue=n(EPe,"STRONG",{});var rTt=s(Bue);dYo=r(rTt,"xlm-roberta"),rTt.forEach(t),cYo=r(EPe," \u2014 "),Sz=n(EPe,"A",{href:!0});var tTt=s(Sz);fYo=r(tTt,"XLMRobertaForTokenClassification"),tTt.forEach(t),mYo=r(EPe," (XLM-RoBERTa model)"),EPe.forEach(t),gYo=i(J),Z4=n(J,"LI",{});var CPe=s(Z4);Iue=n(CPe,"STRONG",{});var aTt=s(Iue);hYo=r(aTt,"xlm-roberta-xl"),aTt.forEach(t),pYo=r(CPe," \u2014 "),Rz=n(CPe,"A",{href:!0});var nTt=s(Rz);_Yo=r(nTt,"XLMRobertaXLForTokenClassification"),nTt.forEach(t),uYo=r(CPe," (XLM-RoBERTa-XL model)"),CPe.forEach(t),bYo=i(J),e3=n(J,"LI",{});var wPe=s(e3);Nue=n(wPe,"STRONG",{});var sTt=s(Nue);vYo=r(sTt,"xlnet"),sTt.forEach(t),FYo=r(wPe," \u2014 "),Pz=n(wPe,"A",{href:!0});var lTt=s(Pz);TYo=r(lTt,"XLNetForTokenClassification"),lTt.forEach(t),MYo=r(wPe," (XLNet model)"),wPe.forEach(t),EYo=i(J),o3=n(J,"LI",{});var APe=s(o3);que=n(APe,"STRONG",{});var iTt=s(que);CYo=r(iTt,"yoso"),iTt.forEach(t),wYo=r(APe," \u2014 "),Bz=n(APe,"A",{href:!0});var dTt=s(Bz);AYo=r(dTt,"YosoForTokenClassification"),dTt.forEach(t),LYo=r(APe," (YOSO model)"),APe.forEach(t),J.forEach(t),yYo=i(ga),r3=n(ga,"P",{});var LPe=s(r3);xYo=r(LPe,"The model is set in evaluation mode by default using "),jue=n(LPe,"CODE",{});var cTt=s(jue);$Yo=r(cTt,"model.eval()"),cTt.forEach(t),kYo=r(LPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(LPe,"CODE",{});var fTt=s(Due);SYo=r(fTt,"model.train()"),fTt.forEach(t),LPe.forEach(t),RYo=i(ga),T(t3.$$.fragment,ga),ga.forEach(t),ll.forEach(t),eVe=i(f),cd=n(f,"H2",{class:!0});var sze=s(cd);a3=n(sze,"A",{id:!0,class:!0,href:!0});var mTt=s(a3);Gue=n(mTt,"SPAN",{});var gTt=s(Gue);T(o8.$$.fragment,gTt),gTt.forEach(t),mTt.forEach(t),PYo=i(sze),Oue=n(sze,"SPAN",{});var hTt=s(Oue);BYo=r(hTt,"AutoModelForQuestionAnswering"),hTt.forEach(t),sze.forEach(t),oVe=i(f),jo=n(f,"DIV",{class:!0});var il=s(jo);T(r8.$$.fragment,il),IYo=i(il),fd=n(il,"P",{});var nre=s(fd);NYo=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=n(nre,"A",{href:!0});var pTt=s(Iz);qYo=r(pTt,"from_pretrained()"),pTt.forEach(t),jYo=r(nre," class method or the "),Nz=n(nre,"A",{href:!0});var _Tt=s(Nz);DYo=r(_Tt,"from_config()"),_Tt.forEach(t),GYo=r(nre,` class
method.`),nre.forEach(t),OYo=i(il),t8=n(il,"P",{});var lze=s(t8);VYo=r(lze,"This class cannot be instantiated directly using "),Vue=n(lze,"CODE",{});var uTt=s(Vue);XYo=r(uTt,"__init__()"),uTt.forEach(t),zYo=r(lze," (throws an error)."),lze.forEach(t),QYo=i(il),ht=n(il,"DIV",{class:!0});var a6=s(ht);T(a8.$$.fragment,a6),WYo=i(a6),Xue=n(a6,"P",{});var bTt=s(Xue);HYo=r(bTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bTt.forEach(t),UYo=i(a6),md=n(a6,"P",{});var sre=s(md);JYo=r(sre,`Note:
Loading a model from its configuration file does `),zue=n(sre,"STRONG",{});var vTt=s(zue);YYo=r(vTt,"not"),vTt.forEach(t),KYo=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(sre,"A",{href:!0});var FTt=s(qz);ZYo=r(FTt,"from_pretrained()"),FTt.forEach(t),eKo=r(sre," to load the model weights."),sre.forEach(t),oKo=i(a6),T(n3.$$.fragment,a6),a6.forEach(t),rKo=i(il),no=n(il,"DIV",{class:!0});var ha=s(no);T(n8.$$.fragment,ha),tKo=i(ha),Que=n(ha,"P",{});var TTt=s(Que);aKo=r(TTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TTt.forEach(t),nKo=i(ha),Oa=n(ha,"P",{});var n6=s(Oa);sKo=r(n6,"The model class to instantiate is selected based on the "),Wue=n(n6,"CODE",{});var MTt=s(Wue);lKo=r(MTt,"model_type"),MTt.forEach(t),iKo=r(n6,` property of the config object (either
passed as an argument or loaded from `),Hue=n(n6,"CODE",{});var ETt=s(Hue);dKo=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),cKo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(n6,"CODE",{});var CTt=s(Uue);fKo=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),mKo=r(n6,":"),n6.forEach(t),gKo=i(ha),V=n(ha,"UL",{});var X=s(V);s3=n(X,"LI",{});var yPe=s(s3);Jue=n(yPe,"STRONG",{});var wTt=s(Jue);hKo=r(wTt,"albert"),wTt.forEach(t),pKo=r(yPe," \u2014 "),jz=n(yPe,"A",{href:!0});var ATt=s(jz);_Ko=r(ATt,"AlbertForQuestionAnswering"),ATt.forEach(t),uKo=r(yPe," (ALBERT model)"),yPe.forEach(t),bKo=i(X),l3=n(X,"LI",{});var xPe=s(l3);Yue=n(xPe,"STRONG",{});var LTt=s(Yue);vKo=r(LTt,"bart"),LTt.forEach(t),FKo=r(xPe," \u2014 "),Dz=n(xPe,"A",{href:!0});var yTt=s(Dz);TKo=r(yTt,"BartForQuestionAnswering"),yTt.forEach(t),MKo=r(xPe," (BART model)"),xPe.forEach(t),EKo=i(X),i3=n(X,"LI",{});var $Pe=s(i3);Kue=n($Pe,"STRONG",{});var xTt=s(Kue);CKo=r(xTt,"bert"),xTt.forEach(t),wKo=r($Pe," \u2014 "),Gz=n($Pe,"A",{href:!0});var $Tt=s(Gz);AKo=r($Tt,"BertForQuestionAnswering"),$Tt.forEach(t),LKo=r($Pe," (BERT model)"),$Pe.forEach(t),yKo=i(X),d3=n(X,"LI",{});var kPe=s(d3);Zue=n(kPe,"STRONG",{});var kTt=s(Zue);xKo=r(kTt,"big_bird"),kTt.forEach(t),$Ko=r(kPe," \u2014 "),Oz=n(kPe,"A",{href:!0});var STt=s(Oz);kKo=r(STt,"BigBirdForQuestionAnswering"),STt.forEach(t),SKo=r(kPe," (BigBird model)"),kPe.forEach(t),RKo=i(X),c3=n(X,"LI",{});var SPe=s(c3);e1e=n(SPe,"STRONG",{});var RTt=s(e1e);PKo=r(RTt,"bigbird_pegasus"),RTt.forEach(t),BKo=r(SPe," \u2014 "),Vz=n(SPe,"A",{href:!0});var PTt=s(Vz);IKo=r(PTt,"BigBirdPegasusForQuestionAnswering"),PTt.forEach(t),NKo=r(SPe," (BigBird-Pegasus model)"),SPe.forEach(t),qKo=i(X),f3=n(X,"LI",{});var RPe=s(f3);o1e=n(RPe,"STRONG",{});var BTt=s(o1e);jKo=r(BTt,"camembert"),BTt.forEach(t),DKo=r(RPe," \u2014 "),Xz=n(RPe,"A",{href:!0});var ITt=s(Xz);GKo=r(ITt,"CamembertForQuestionAnswering"),ITt.forEach(t),OKo=r(RPe," (CamemBERT model)"),RPe.forEach(t),VKo=i(X),m3=n(X,"LI",{});var PPe=s(m3);r1e=n(PPe,"STRONG",{});var NTt=s(r1e);XKo=r(NTt,"canine"),NTt.forEach(t),zKo=r(PPe," \u2014 "),zz=n(PPe,"A",{href:!0});var qTt=s(zz);QKo=r(qTt,"CanineForQuestionAnswering"),qTt.forEach(t),WKo=r(PPe," (CANINE model)"),PPe.forEach(t),HKo=i(X),g3=n(X,"LI",{});var BPe=s(g3);t1e=n(BPe,"STRONG",{});var jTt=s(t1e);UKo=r(jTt,"convbert"),jTt.forEach(t),JKo=r(BPe," \u2014 "),Qz=n(BPe,"A",{href:!0});var DTt=s(Qz);YKo=r(DTt,"ConvBertForQuestionAnswering"),DTt.forEach(t),KKo=r(BPe," (ConvBERT model)"),BPe.forEach(t),ZKo=i(X),h3=n(X,"LI",{});var IPe=s(h3);a1e=n(IPe,"STRONG",{});var GTt=s(a1e);eZo=r(GTt,"data2vec-text"),GTt.forEach(t),oZo=r(IPe," \u2014 "),Wz=n(IPe,"A",{href:!0});var OTt=s(Wz);rZo=r(OTt,"Data2VecTextForQuestionAnswering"),OTt.forEach(t),tZo=r(IPe," (Data2VecText model)"),IPe.forEach(t),aZo=i(X),p3=n(X,"LI",{});var NPe=s(p3);n1e=n(NPe,"STRONG",{});var VTt=s(n1e);nZo=r(VTt,"deberta"),VTt.forEach(t),sZo=r(NPe," \u2014 "),Hz=n(NPe,"A",{href:!0});var XTt=s(Hz);lZo=r(XTt,"DebertaForQuestionAnswering"),XTt.forEach(t),iZo=r(NPe," (DeBERTa model)"),NPe.forEach(t),dZo=i(X),_3=n(X,"LI",{});var qPe=s(_3);s1e=n(qPe,"STRONG",{});var zTt=s(s1e);cZo=r(zTt,"deberta-v2"),zTt.forEach(t),fZo=r(qPe," \u2014 "),Uz=n(qPe,"A",{href:!0});var QTt=s(Uz);mZo=r(QTt,"DebertaV2ForQuestionAnswering"),QTt.forEach(t),gZo=r(qPe," (DeBERTa-v2 model)"),qPe.forEach(t),hZo=i(X),u3=n(X,"LI",{});var jPe=s(u3);l1e=n(jPe,"STRONG",{});var WTt=s(l1e);pZo=r(WTt,"distilbert"),WTt.forEach(t),_Zo=r(jPe," \u2014 "),Jz=n(jPe,"A",{href:!0});var HTt=s(Jz);uZo=r(HTt,"DistilBertForQuestionAnswering"),HTt.forEach(t),bZo=r(jPe," (DistilBERT model)"),jPe.forEach(t),vZo=i(X),b3=n(X,"LI",{});var DPe=s(b3);i1e=n(DPe,"STRONG",{});var UTt=s(i1e);FZo=r(UTt,"electra"),UTt.forEach(t),TZo=r(DPe," \u2014 "),Yz=n(DPe,"A",{href:!0});var JTt=s(Yz);MZo=r(JTt,"ElectraForQuestionAnswering"),JTt.forEach(t),EZo=r(DPe," (ELECTRA model)"),DPe.forEach(t),CZo=i(X),v3=n(X,"LI",{});var GPe=s(v3);d1e=n(GPe,"STRONG",{});var YTt=s(d1e);wZo=r(YTt,"flaubert"),YTt.forEach(t),AZo=r(GPe," \u2014 "),Kz=n(GPe,"A",{href:!0});var KTt=s(Kz);LZo=r(KTt,"FlaubertForQuestionAnsweringSimple"),KTt.forEach(t),yZo=r(GPe," (FlauBERT model)"),GPe.forEach(t),xZo=i(X),F3=n(X,"LI",{});var OPe=s(F3);c1e=n(OPe,"STRONG",{});var ZTt=s(c1e);$Zo=r(ZTt,"fnet"),ZTt.forEach(t),kZo=r(OPe," \u2014 "),Zz=n(OPe,"A",{href:!0});var eMt=s(Zz);SZo=r(eMt,"FNetForQuestionAnswering"),eMt.forEach(t),RZo=r(OPe," (FNet model)"),OPe.forEach(t),PZo=i(X),T3=n(X,"LI",{});var VPe=s(T3);f1e=n(VPe,"STRONG",{});var oMt=s(f1e);BZo=r(oMt,"funnel"),oMt.forEach(t),IZo=r(VPe," \u2014 "),eQ=n(VPe,"A",{href:!0});var rMt=s(eQ);NZo=r(rMt,"FunnelForQuestionAnswering"),rMt.forEach(t),qZo=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),jZo=i(X),M3=n(X,"LI",{});var XPe=s(M3);m1e=n(XPe,"STRONG",{});var tMt=s(m1e);DZo=r(tMt,"gptj"),tMt.forEach(t),GZo=r(XPe," \u2014 "),oQ=n(XPe,"A",{href:!0});var aMt=s(oQ);OZo=r(aMt,"GPTJForQuestionAnswering"),aMt.forEach(t),VZo=r(XPe," (GPT-J model)"),XPe.forEach(t),XZo=i(X),E3=n(X,"LI",{});var zPe=s(E3);g1e=n(zPe,"STRONG",{});var nMt=s(g1e);zZo=r(nMt,"ibert"),nMt.forEach(t),QZo=r(zPe," \u2014 "),rQ=n(zPe,"A",{href:!0});var sMt=s(rQ);WZo=r(sMt,"IBertForQuestionAnswering"),sMt.forEach(t),HZo=r(zPe," (I-BERT model)"),zPe.forEach(t),UZo=i(X),C3=n(X,"LI",{});var QPe=s(C3);h1e=n(QPe,"STRONG",{});var lMt=s(h1e);JZo=r(lMt,"layoutlmv2"),lMt.forEach(t),YZo=r(QPe," \u2014 "),tQ=n(QPe,"A",{href:!0});var iMt=s(tQ);KZo=r(iMt,"LayoutLMv2ForQuestionAnswering"),iMt.forEach(t),ZZo=r(QPe," (LayoutLMv2 model)"),QPe.forEach(t),eer=i(X),w3=n(X,"LI",{});var WPe=s(w3);p1e=n(WPe,"STRONG",{});var dMt=s(p1e);oer=r(dMt,"layoutlmv3"),dMt.forEach(t),rer=r(WPe," \u2014 "),aQ=n(WPe,"A",{href:!0});var cMt=s(aQ);ter=r(cMt,"LayoutLMv3ForQuestionAnswering"),cMt.forEach(t),aer=r(WPe," (LayoutLMv3 model)"),WPe.forEach(t),ner=i(X),A3=n(X,"LI",{});var HPe=s(A3);_1e=n(HPe,"STRONG",{});var fMt=s(_1e);ser=r(fMt,"led"),fMt.forEach(t),ler=r(HPe," \u2014 "),nQ=n(HPe,"A",{href:!0});var mMt=s(nQ);ier=r(mMt,"LEDForQuestionAnswering"),mMt.forEach(t),der=r(HPe," (LED model)"),HPe.forEach(t),cer=i(X),L3=n(X,"LI",{});var UPe=s(L3);u1e=n(UPe,"STRONG",{});var gMt=s(u1e);fer=r(gMt,"longformer"),gMt.forEach(t),mer=r(UPe," \u2014 "),sQ=n(UPe,"A",{href:!0});var hMt=s(sQ);ger=r(hMt,"LongformerForQuestionAnswering"),hMt.forEach(t),her=r(UPe," (Longformer model)"),UPe.forEach(t),per=i(X),y3=n(X,"LI",{});var JPe=s(y3);b1e=n(JPe,"STRONG",{});var pMt=s(b1e);_er=r(pMt,"lxmert"),pMt.forEach(t),uer=r(JPe," \u2014 "),lQ=n(JPe,"A",{href:!0});var _Mt=s(lQ);ber=r(_Mt,"LxmertForQuestionAnswering"),_Mt.forEach(t),ver=r(JPe," (LXMERT model)"),JPe.forEach(t),Fer=i(X),x3=n(X,"LI",{});var YPe=s(x3);v1e=n(YPe,"STRONG",{});var uMt=s(v1e);Ter=r(uMt,"mbart"),uMt.forEach(t),Mer=r(YPe," \u2014 "),iQ=n(YPe,"A",{href:!0});var bMt=s(iQ);Eer=r(bMt,"MBartForQuestionAnswering"),bMt.forEach(t),Cer=r(YPe," (mBART model)"),YPe.forEach(t),wer=i(X),$3=n(X,"LI",{});var KPe=s($3);F1e=n(KPe,"STRONG",{});var vMt=s(F1e);Aer=r(vMt,"megatron-bert"),vMt.forEach(t),Ler=r(KPe," \u2014 "),dQ=n(KPe,"A",{href:!0});var FMt=s(dQ);yer=r(FMt,"MegatronBertForQuestionAnswering"),FMt.forEach(t),xer=r(KPe," (Megatron-BERT model)"),KPe.forEach(t),$er=i(X),k3=n(X,"LI",{});var ZPe=s(k3);T1e=n(ZPe,"STRONG",{});var TMt=s(T1e);ker=r(TMt,"mobilebert"),TMt.forEach(t),Ser=r(ZPe," \u2014 "),cQ=n(ZPe,"A",{href:!0});var MMt=s(cQ);Rer=r(MMt,"MobileBertForQuestionAnswering"),MMt.forEach(t),Per=r(ZPe," (MobileBERT model)"),ZPe.forEach(t),Ber=i(X),S3=n(X,"LI",{});var eBe=s(S3);M1e=n(eBe,"STRONG",{});var EMt=s(M1e);Ier=r(EMt,"mpnet"),EMt.forEach(t),Ner=r(eBe," \u2014 "),fQ=n(eBe,"A",{href:!0});var CMt=s(fQ);qer=r(CMt,"MPNetForQuestionAnswering"),CMt.forEach(t),jer=r(eBe," (MPNet model)"),eBe.forEach(t),Der=i(X),R3=n(X,"LI",{});var oBe=s(R3);E1e=n(oBe,"STRONG",{});var wMt=s(E1e);Ger=r(wMt,"nezha"),wMt.forEach(t),Oer=r(oBe," \u2014 "),mQ=n(oBe,"A",{href:!0});var AMt=s(mQ);Ver=r(AMt,"NezhaForQuestionAnswering"),AMt.forEach(t),Xer=r(oBe," (Nezha model)"),oBe.forEach(t),zer=i(X),P3=n(X,"LI",{});var rBe=s(P3);C1e=n(rBe,"STRONG",{});var LMt=s(C1e);Qer=r(LMt,"nystromformer"),LMt.forEach(t),Wer=r(rBe," \u2014 "),gQ=n(rBe,"A",{href:!0});var yMt=s(gQ);Her=r(yMt,"NystromformerForQuestionAnswering"),yMt.forEach(t),Uer=r(rBe," (Nystr\xF6mformer model)"),rBe.forEach(t),Jer=i(X),B3=n(X,"LI",{});var tBe=s(B3);w1e=n(tBe,"STRONG",{});var xMt=s(w1e);Yer=r(xMt,"qdqbert"),xMt.forEach(t),Ker=r(tBe," \u2014 "),hQ=n(tBe,"A",{href:!0});var $Mt=s(hQ);Zer=r($Mt,"QDQBertForQuestionAnswering"),$Mt.forEach(t),eor=r(tBe," (QDQBert model)"),tBe.forEach(t),oor=i(X),I3=n(X,"LI",{});var aBe=s(I3);A1e=n(aBe,"STRONG",{});var kMt=s(A1e);ror=r(kMt,"reformer"),kMt.forEach(t),tor=r(aBe," \u2014 "),pQ=n(aBe,"A",{href:!0});var SMt=s(pQ);aor=r(SMt,"ReformerForQuestionAnswering"),SMt.forEach(t),nor=r(aBe," (Reformer model)"),aBe.forEach(t),sor=i(X),N3=n(X,"LI",{});var nBe=s(N3);L1e=n(nBe,"STRONG",{});var RMt=s(L1e);lor=r(RMt,"rembert"),RMt.forEach(t),ior=r(nBe," \u2014 "),_Q=n(nBe,"A",{href:!0});var PMt=s(_Q);dor=r(PMt,"RemBertForQuestionAnswering"),PMt.forEach(t),cor=r(nBe," (RemBERT model)"),nBe.forEach(t),mor=i(X),q3=n(X,"LI",{});var sBe=s(q3);y1e=n(sBe,"STRONG",{});var BMt=s(y1e);gor=r(BMt,"roberta"),BMt.forEach(t),hor=r(sBe," \u2014 "),uQ=n(sBe,"A",{href:!0});var IMt=s(uQ);por=r(IMt,"RobertaForQuestionAnswering"),IMt.forEach(t),_or=r(sBe," (RoBERTa model)"),sBe.forEach(t),uor=i(X),j3=n(X,"LI",{});var lBe=s(j3);x1e=n(lBe,"STRONG",{});var NMt=s(x1e);bor=r(NMt,"roformer"),NMt.forEach(t),vor=r(lBe," \u2014 "),bQ=n(lBe,"A",{href:!0});var qMt=s(bQ);For=r(qMt,"RoFormerForQuestionAnswering"),qMt.forEach(t),Tor=r(lBe," (RoFormer model)"),lBe.forEach(t),Mor=i(X),D3=n(X,"LI",{});var iBe=s(D3);$1e=n(iBe,"STRONG",{});var jMt=s($1e);Eor=r(jMt,"splinter"),jMt.forEach(t),Cor=r(iBe," \u2014 "),vQ=n(iBe,"A",{href:!0});var DMt=s(vQ);wor=r(DMt,"SplinterForQuestionAnswering"),DMt.forEach(t),Aor=r(iBe," (Splinter model)"),iBe.forEach(t),Lor=i(X),G3=n(X,"LI",{});var dBe=s(G3);k1e=n(dBe,"STRONG",{});var GMt=s(k1e);yor=r(GMt,"squeezebert"),GMt.forEach(t),xor=r(dBe," \u2014 "),FQ=n(dBe,"A",{href:!0});var OMt=s(FQ);$or=r(OMt,"SqueezeBertForQuestionAnswering"),OMt.forEach(t),kor=r(dBe," (SqueezeBERT model)"),dBe.forEach(t),Sor=i(X),O3=n(X,"LI",{});var cBe=s(O3);S1e=n(cBe,"STRONG",{});var VMt=s(S1e);Ror=r(VMt,"xlm"),VMt.forEach(t),Por=r(cBe," \u2014 "),TQ=n(cBe,"A",{href:!0});var XMt=s(TQ);Bor=r(XMt,"XLMForQuestionAnsweringSimple"),XMt.forEach(t),Ior=r(cBe," (XLM model)"),cBe.forEach(t),Nor=i(X),V3=n(X,"LI",{});var fBe=s(V3);R1e=n(fBe,"STRONG",{});var zMt=s(R1e);qor=r(zMt,"xlm-roberta"),zMt.forEach(t),jor=r(fBe," \u2014 "),MQ=n(fBe,"A",{href:!0});var QMt=s(MQ);Dor=r(QMt,"XLMRobertaForQuestionAnswering"),QMt.forEach(t),Gor=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),Oor=i(X),X3=n(X,"LI",{});var mBe=s(X3);P1e=n(mBe,"STRONG",{});var WMt=s(P1e);Vor=r(WMt,"xlm-roberta-xl"),WMt.forEach(t),Xor=r(mBe," \u2014 "),EQ=n(mBe,"A",{href:!0});var HMt=s(EQ);zor=r(HMt,"XLMRobertaXLForQuestionAnswering"),HMt.forEach(t),Qor=r(mBe," (XLM-RoBERTa-XL model)"),mBe.forEach(t),Wor=i(X),z3=n(X,"LI",{});var gBe=s(z3);B1e=n(gBe,"STRONG",{});var UMt=s(B1e);Hor=r(UMt,"xlnet"),UMt.forEach(t),Uor=r(gBe," \u2014 "),CQ=n(gBe,"A",{href:!0});var JMt=s(CQ);Jor=r(JMt,"XLNetForQuestionAnsweringSimple"),JMt.forEach(t),Yor=r(gBe," (XLNet model)"),gBe.forEach(t),Kor=i(X),Q3=n(X,"LI",{});var hBe=s(Q3);I1e=n(hBe,"STRONG",{});var YMt=s(I1e);Zor=r(YMt,"yoso"),YMt.forEach(t),err=r(hBe," \u2014 "),wQ=n(hBe,"A",{href:!0});var KMt=s(wQ);orr=r(KMt,"YosoForQuestionAnswering"),KMt.forEach(t),rrr=r(hBe," (YOSO model)"),hBe.forEach(t),X.forEach(t),trr=i(ha),W3=n(ha,"P",{});var pBe=s(W3);arr=r(pBe,"The model is set in evaluation mode by default using "),N1e=n(pBe,"CODE",{});var ZMt=s(N1e);nrr=r(ZMt,"model.eval()"),ZMt.forEach(t),srr=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(pBe,"CODE",{});var eEt=s(q1e);lrr=r(eEt,"model.train()"),eEt.forEach(t),pBe.forEach(t),irr=i(ha),T(H3.$$.fragment,ha),ha.forEach(t),il.forEach(t),rVe=i(f),gd=n(f,"H2",{class:!0});var ize=s(gd);U3=n(ize,"A",{id:!0,class:!0,href:!0});var oEt=s(U3);j1e=n(oEt,"SPAN",{});var rEt=s(j1e);T(s8.$$.fragment,rEt),rEt.forEach(t),oEt.forEach(t),drr=i(ize),D1e=n(ize,"SPAN",{});var tEt=s(D1e);crr=r(tEt,"AutoModelForTableQuestionAnswering"),tEt.forEach(t),ize.forEach(t),tVe=i(f),Do=n(f,"DIV",{class:!0});var dl=s(Do);T(l8.$$.fragment,dl),frr=i(dl),hd=n(dl,"P",{});var lre=s(hd);mrr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AQ=n(lre,"A",{href:!0});var aEt=s(AQ);grr=r(aEt,"from_pretrained()"),aEt.forEach(t),hrr=r(lre," class method or the "),LQ=n(lre,"A",{href:!0});var nEt=s(LQ);prr=r(nEt,"from_config()"),nEt.forEach(t),_rr=r(lre,` class
method.`),lre.forEach(t),urr=i(dl),i8=n(dl,"P",{});var dze=s(i8);brr=r(dze,"This class cannot be instantiated directly using "),G1e=n(dze,"CODE",{});var sEt=s(G1e);vrr=r(sEt,"__init__()"),sEt.forEach(t),Frr=r(dze," (throws an error)."),dze.forEach(t),Trr=i(dl),pt=n(dl,"DIV",{class:!0});var s6=s(pt);T(d8.$$.fragment,s6),Mrr=i(s6),O1e=n(s6,"P",{});var lEt=s(O1e);Err=r(lEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lEt.forEach(t),Crr=i(s6),pd=n(s6,"P",{});var ire=s(pd);wrr=r(ire,`Note:
Loading a model from its configuration file does `),V1e=n(ire,"STRONG",{});var iEt=s(V1e);Arr=r(iEt,"not"),iEt.forEach(t),Lrr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(ire,"A",{href:!0});var dEt=s(yQ);yrr=r(dEt,"from_pretrained()"),dEt.forEach(t),xrr=r(ire," to load the model weights."),ire.forEach(t),$rr=i(s6),T(J3.$$.fragment,s6),s6.forEach(t),krr=i(dl),so=n(dl,"DIV",{class:!0});var pa=s(so);T(c8.$$.fragment,pa),Srr=i(pa),X1e=n(pa,"P",{});var cEt=s(X1e);Rrr=r(cEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cEt.forEach(t),Prr=i(pa),Va=n(pa,"P",{});var l6=s(Va);Brr=r(l6,"The model class to instantiate is selected based on the "),z1e=n(l6,"CODE",{});var fEt=s(z1e);Irr=r(fEt,"model_type"),fEt.forEach(t),Nrr=r(l6,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(l6,"CODE",{});var mEt=s(Q1e);qrr=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),jrr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(l6,"CODE",{});var gEt=s(W1e);Drr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),Grr=r(l6,":"),l6.forEach(t),Orr=i(pa),H1e=n(pa,"UL",{});var hEt=s(H1e);Y3=n(hEt,"LI",{});var _Be=s(Y3);U1e=n(_Be,"STRONG",{});var pEt=s(U1e);Vrr=r(pEt,"tapas"),pEt.forEach(t),Xrr=r(_Be," \u2014 "),xQ=n(_Be,"A",{href:!0});var _Et=s(xQ);zrr=r(_Et,"TapasForQuestionAnswering"),_Et.forEach(t),Qrr=r(_Be," (TAPAS model)"),_Be.forEach(t),hEt.forEach(t),Wrr=i(pa),K3=n(pa,"P",{});var uBe=s(K3);Hrr=r(uBe,"The model is set in evaluation mode by default using "),J1e=n(uBe,"CODE",{});var uEt=s(J1e);Urr=r(uEt,"model.eval()"),uEt.forEach(t),Jrr=r(uBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=n(uBe,"CODE",{});var bEt=s(Y1e);Yrr=r(bEt,"model.train()"),bEt.forEach(t),uBe.forEach(t),Krr=i(pa),T(Z3.$$.fragment,pa),pa.forEach(t),dl.forEach(t),aVe=i(f),_d=n(f,"H2",{class:!0});var cze=s(_d);ev=n(cze,"A",{id:!0,class:!0,href:!0});var vEt=s(ev);K1e=n(vEt,"SPAN",{});var FEt=s(K1e);T(f8.$$.fragment,FEt),FEt.forEach(t),vEt.forEach(t),Zrr=i(cze),Z1e=n(cze,"SPAN",{});var TEt=s(Z1e);etr=r(TEt,"AutoModelForImageClassification"),TEt.forEach(t),cze.forEach(t),nVe=i(f),Go=n(f,"DIV",{class:!0});var cl=s(Go);T(m8.$$.fragment,cl),otr=i(cl),ud=n(cl,"P",{});var dre=s(ud);rtr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=n(dre,"A",{href:!0});var MEt=s($Q);ttr=r(MEt,"from_pretrained()"),MEt.forEach(t),atr=r(dre," class method or the "),kQ=n(dre,"A",{href:!0});var EEt=s(kQ);ntr=r(EEt,"from_config()"),EEt.forEach(t),str=r(dre,` class
method.`),dre.forEach(t),ltr=i(cl),g8=n(cl,"P",{});var fze=s(g8);itr=r(fze,"This class cannot be instantiated directly using "),e7e=n(fze,"CODE",{});var CEt=s(e7e);dtr=r(CEt,"__init__()"),CEt.forEach(t),ctr=r(fze," (throws an error)."),fze.forEach(t),ftr=i(cl),_t=n(cl,"DIV",{class:!0});var i6=s(_t);T(h8.$$.fragment,i6),mtr=i(i6),o7e=n(i6,"P",{});var wEt=s(o7e);gtr=r(wEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wEt.forEach(t),htr=i(i6),bd=n(i6,"P",{});var cre=s(bd);ptr=r(cre,`Note:
Loading a model from its configuration file does `),r7e=n(cre,"STRONG",{});var AEt=s(r7e);_tr=r(AEt,"not"),AEt.forEach(t),utr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(cre,"A",{href:!0});var LEt=s(SQ);btr=r(LEt,"from_pretrained()"),LEt.forEach(t),vtr=r(cre," to load the model weights."),cre.forEach(t),Ftr=i(i6),T(ov.$$.fragment,i6),i6.forEach(t),Ttr=i(cl),lo=n(cl,"DIV",{class:!0});var _a=s(lo);T(p8.$$.fragment,_a),Mtr=i(_a),t7e=n(_a,"P",{});var yEt=s(t7e);Etr=r(yEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yEt.forEach(t),Ctr=i(_a),Xa=n(_a,"P",{});var d6=s(Xa);wtr=r(d6,"The model class to instantiate is selected based on the "),a7e=n(d6,"CODE",{});var xEt=s(a7e);Atr=r(xEt,"model_type"),xEt.forEach(t),Ltr=r(d6,` property of the config object (either
passed as an argument or loaded from `),n7e=n(d6,"CODE",{});var $Et=s(n7e);ytr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),xtr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(d6,"CODE",{});var kEt=s(s7e);$tr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),ktr=r(d6,":"),d6.forEach(t),Str=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);rv=n(Te,"LI",{});var bBe=s(rv);l7e=n(bBe,"STRONG",{});var SEt=s(l7e);Rtr=r(SEt,"beit"),SEt.forEach(t),Ptr=r(bBe," \u2014 "),RQ=n(bBe,"A",{href:!0});var REt=s(RQ);Btr=r(REt,"BeitForImageClassification"),REt.forEach(t),Itr=r(bBe," (BEiT model)"),bBe.forEach(t),Ntr=i(Te),tv=n(Te,"LI",{});var vBe=s(tv);i7e=n(vBe,"STRONG",{});var PEt=s(i7e);qtr=r(PEt,"convnext"),PEt.forEach(t),jtr=r(vBe," \u2014 "),PQ=n(vBe,"A",{href:!0});var BEt=s(PQ);Dtr=r(BEt,"ConvNextForImageClassification"),BEt.forEach(t),Gtr=r(vBe," (ConvNeXT model)"),vBe.forEach(t),Otr=i(Te),av=n(Te,"LI",{});var FBe=s(av);d7e=n(FBe,"STRONG",{});var IEt=s(d7e);Vtr=r(IEt,"cvt"),IEt.forEach(t),Xtr=r(FBe," \u2014 "),BQ=n(FBe,"A",{href:!0});var NEt=s(BQ);ztr=r(NEt,"CvtForImageClassification"),NEt.forEach(t),Qtr=r(FBe," (CvT model)"),FBe.forEach(t),Wtr=i(Te),nv=n(Te,"LI",{});var TBe=s(nv);c7e=n(TBe,"STRONG",{});var qEt=s(c7e);Htr=r(qEt,"data2vec-vision"),qEt.forEach(t),Utr=r(TBe," \u2014 "),IQ=n(TBe,"A",{href:!0});var jEt=s(IQ);Jtr=r(jEt,"Data2VecVisionForImageClassification"),jEt.forEach(t),Ytr=r(TBe," (Data2VecVision model)"),TBe.forEach(t),Ktr=i(Te),Qs=n(Te,"LI",{});var cS=s(Qs);f7e=n(cS,"STRONG",{});var DEt=s(f7e);Ztr=r(DEt,"deit"),DEt.forEach(t),ear=r(cS," \u2014 "),NQ=n(cS,"A",{href:!0});var GEt=s(NQ);oar=r(GEt,"DeiTForImageClassification"),GEt.forEach(t),rar=r(cS," or "),qQ=n(cS,"A",{href:!0});var OEt=s(qQ);tar=r(OEt,"DeiTForImageClassificationWithTeacher"),OEt.forEach(t),aar=r(cS," (DeiT model)"),cS.forEach(t),nar=i(Te),sv=n(Te,"LI",{});var MBe=s(sv);m7e=n(MBe,"STRONG",{});var VEt=s(m7e);sar=r(VEt,"imagegpt"),VEt.forEach(t),lar=r(MBe," \u2014 "),jQ=n(MBe,"A",{href:!0});var XEt=s(jQ);iar=r(XEt,"ImageGPTForImageClassification"),XEt.forEach(t),dar=r(MBe," (ImageGPT model)"),MBe.forEach(t),car=i(Te),Ws=n(Te,"LI",{});var fS=s(Ws);g7e=n(fS,"STRONG",{});var zEt=s(g7e);far=r(zEt,"levit"),zEt.forEach(t),mar=r(fS," \u2014 "),DQ=n(fS,"A",{href:!0});var QEt=s(DQ);gar=r(QEt,"LevitForImageClassification"),QEt.forEach(t),har=r(fS," or "),GQ=n(fS,"A",{href:!0});var WEt=s(GQ);par=r(WEt,"LevitForImageClassificationWithTeacher"),WEt.forEach(t),_ar=r(fS," (LeViT model)"),fS.forEach(t),uar=i(Te),ut=n(Te,"LI",{});var xf=s(ut);h7e=n(xf,"STRONG",{});var HEt=s(h7e);bar=r(HEt,"perceiver"),HEt.forEach(t),Far=r(xf," \u2014 "),OQ=n(xf,"A",{href:!0});var UEt=s(OQ);Tar=r(UEt,"PerceiverForImageClassificationLearned"),UEt.forEach(t),Mar=r(xf," or "),VQ=n(xf,"A",{href:!0});var JEt=s(VQ);Ear=r(JEt,"PerceiverForImageClassificationFourier"),JEt.forEach(t),Car=r(xf," or "),XQ=n(xf,"A",{href:!0});var YEt=s(XQ);war=r(YEt,"PerceiverForImageClassificationConvProcessing"),YEt.forEach(t),Aar=r(xf," (Perceiver model)"),xf.forEach(t),Lar=i(Te),lv=n(Te,"LI",{});var EBe=s(lv);p7e=n(EBe,"STRONG",{});var KEt=s(p7e);yar=r(KEt,"poolformer"),KEt.forEach(t),xar=r(EBe," \u2014 "),zQ=n(EBe,"A",{href:!0});var ZEt=s(zQ);$ar=r(ZEt,"PoolFormerForImageClassification"),ZEt.forEach(t),kar=r(EBe," (PoolFormer model)"),EBe.forEach(t),Sar=i(Te),iv=n(Te,"LI",{});var CBe=s(iv);_7e=n(CBe,"STRONG",{});var eCt=s(_7e);Rar=r(eCt,"regnet"),eCt.forEach(t),Par=r(CBe," \u2014 "),QQ=n(CBe,"A",{href:!0});var oCt=s(QQ);Bar=r(oCt,"RegNetForImageClassification"),oCt.forEach(t),Iar=r(CBe," (RegNet model)"),CBe.forEach(t),Nar=i(Te),dv=n(Te,"LI",{});var wBe=s(dv);u7e=n(wBe,"STRONG",{});var rCt=s(u7e);qar=r(rCt,"resnet"),rCt.forEach(t),jar=r(wBe," \u2014 "),WQ=n(wBe,"A",{href:!0});var tCt=s(WQ);Dar=r(tCt,"ResNetForImageClassification"),tCt.forEach(t),Gar=r(wBe," (ResNet model)"),wBe.forEach(t),Oar=i(Te),cv=n(Te,"LI",{});var ABe=s(cv);b7e=n(ABe,"STRONG",{});var aCt=s(b7e);Var=r(aCt,"segformer"),aCt.forEach(t),Xar=r(ABe," \u2014 "),HQ=n(ABe,"A",{href:!0});var nCt=s(HQ);zar=r(nCt,"SegformerForImageClassification"),nCt.forEach(t),Qar=r(ABe," (SegFormer model)"),ABe.forEach(t),War=i(Te),fv=n(Te,"LI",{});var LBe=s(fv);v7e=n(LBe,"STRONG",{});var sCt=s(v7e);Har=r(sCt,"swin"),sCt.forEach(t),Uar=r(LBe," \u2014 "),UQ=n(LBe,"A",{href:!0});var lCt=s(UQ);Jar=r(lCt,"SwinForImageClassification"),lCt.forEach(t),Yar=r(LBe," (Swin Transformer model)"),LBe.forEach(t),Kar=i(Te),mv=n(Te,"LI",{});var yBe=s(mv);F7e=n(yBe,"STRONG",{});var iCt=s(F7e);Zar=r(iCt,"van"),iCt.forEach(t),enr=r(yBe," \u2014 "),JQ=n(yBe,"A",{href:!0});var dCt=s(JQ);onr=r(dCt,"VanForImageClassification"),dCt.forEach(t),rnr=r(yBe," (VAN model)"),yBe.forEach(t),tnr=i(Te),gv=n(Te,"LI",{});var xBe=s(gv);T7e=n(xBe,"STRONG",{});var cCt=s(T7e);anr=r(cCt,"vit"),cCt.forEach(t),nnr=r(xBe," \u2014 "),YQ=n(xBe,"A",{href:!0});var fCt=s(YQ);snr=r(fCt,"ViTForImageClassification"),fCt.forEach(t),lnr=r(xBe," (ViT model)"),xBe.forEach(t),Te.forEach(t),inr=i(_a),hv=n(_a,"P",{});var $Be=s(hv);dnr=r($Be,"The model is set in evaluation mode by default using "),M7e=n($Be,"CODE",{});var mCt=s(M7e);cnr=r(mCt,"model.eval()"),mCt.forEach(t),fnr=r($Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E7e=n($Be,"CODE",{});var gCt=s(E7e);mnr=r(gCt,"model.train()"),gCt.forEach(t),$Be.forEach(t),gnr=i(_a),T(pv.$$.fragment,_a),_a.forEach(t),cl.forEach(t),sVe=i(f),vd=n(f,"H2",{class:!0});var mze=s(vd);_v=n(mze,"A",{id:!0,class:!0,href:!0});var hCt=s(_v);C7e=n(hCt,"SPAN",{});var pCt=s(C7e);T(_8.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),hnr=i(mze),w7e=n(mze,"SPAN",{});var _Ct=s(w7e);pnr=r(_Ct,"AutoModelForVision2Seq"),_Ct.forEach(t),mze.forEach(t),lVe=i(f),Oo=n(f,"DIV",{class:!0});var fl=s(Oo);T(u8.$$.fragment,fl),_nr=i(fl),Fd=n(fl,"P",{});var fre=s(Fd);unr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KQ=n(fre,"A",{href:!0});var uCt=s(KQ);bnr=r(uCt,"from_pretrained()"),uCt.forEach(t),vnr=r(fre," class method or the "),ZQ=n(fre,"A",{href:!0});var bCt=s(ZQ);Fnr=r(bCt,"from_config()"),bCt.forEach(t),Tnr=r(fre,` class
method.`),fre.forEach(t),Mnr=i(fl),b8=n(fl,"P",{});var gze=s(b8);Enr=r(gze,"This class cannot be instantiated directly using "),A7e=n(gze,"CODE",{});var vCt=s(A7e);Cnr=r(vCt,"__init__()"),vCt.forEach(t),wnr=r(gze," (throws an error)."),gze.forEach(t),Anr=i(fl),bt=n(fl,"DIV",{class:!0});var c6=s(bt);T(v8.$$.fragment,c6),Lnr=i(c6),L7e=n(c6,"P",{});var FCt=s(L7e);ynr=r(FCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FCt.forEach(t),xnr=i(c6),Td=n(c6,"P",{});var mre=s(Td);$nr=r(mre,`Note:
Loading a model from its configuration file does `),y7e=n(mre,"STRONG",{});var TCt=s(y7e);knr=r(TCt,"not"),TCt.forEach(t),Snr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(mre,"A",{href:!0});var MCt=s(eW);Rnr=r(MCt,"from_pretrained()"),MCt.forEach(t),Pnr=r(mre," to load the model weights."),mre.forEach(t),Bnr=i(c6),T(uv.$$.fragment,c6),c6.forEach(t),Inr=i(fl),io=n(fl,"DIV",{class:!0});var ua=s(io);T(F8.$$.fragment,ua),Nnr=i(ua),x7e=n(ua,"P",{});var ECt=s(x7e);qnr=r(ECt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ECt.forEach(t),jnr=i(ua),za=n(ua,"P",{});var f6=s(za);Dnr=r(f6,"The model class to instantiate is selected based on the "),$7e=n(f6,"CODE",{});var CCt=s($7e);Gnr=r(CCt,"model_type"),CCt.forEach(t),Onr=r(f6,` property of the config object (either
passed as an argument or loaded from `),k7e=n(f6,"CODE",{});var wCt=s(k7e);Vnr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),Xnr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(f6,"CODE",{});var ACt=s(S7e);znr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),Qnr=r(f6,":"),f6.forEach(t),Wnr=i(ua),R7e=n(ua,"UL",{});var LCt=s(R7e);bv=n(LCt,"LI",{});var kBe=s(bv);P7e=n(kBe,"STRONG",{});var yCt=s(P7e);Hnr=r(yCt,"vision-encoder-decoder"),yCt.forEach(t),Unr=r(kBe," \u2014 "),oW=n(kBe,"A",{href:!0});var xCt=s(oW);Jnr=r(xCt,"VisionEncoderDecoderModel"),xCt.forEach(t),Ynr=r(kBe," (Vision Encoder decoder model)"),kBe.forEach(t),LCt.forEach(t),Knr=i(ua),vv=n(ua,"P",{});var SBe=s(vv);Znr=r(SBe,"The model is set in evaluation mode by default using "),B7e=n(SBe,"CODE",{});var $Ct=s(B7e);esr=r($Ct,"model.eval()"),$Ct.forEach(t),osr=r(SBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I7e=n(SBe,"CODE",{});var kCt=s(I7e);rsr=r(kCt,"model.train()"),kCt.forEach(t),SBe.forEach(t),tsr=i(ua),T(Fv.$$.fragment,ua),ua.forEach(t),fl.forEach(t),iVe=i(f),Md=n(f,"H2",{class:!0});var hze=s(Md);Tv=n(hze,"A",{id:!0,class:!0,href:!0});var SCt=s(Tv);N7e=n(SCt,"SPAN",{});var RCt=s(N7e);T(T8.$$.fragment,RCt),RCt.forEach(t),SCt.forEach(t),asr=i(hze),q7e=n(hze,"SPAN",{});var PCt=s(q7e);nsr=r(PCt,"AutoModelForVisualQuestionAnswering"),PCt.forEach(t),hze.forEach(t),dVe=i(f),Vo=n(f,"DIV",{class:!0});var ml=s(Vo);T(M8.$$.fragment,ml),ssr=i(ml),Ed=n(ml,"P",{});var gre=s(Ed);lsr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),rW=n(gre,"A",{href:!0});var BCt=s(rW);isr=r(BCt,"from_pretrained()"),BCt.forEach(t),dsr=r(gre," class method or the "),tW=n(gre,"A",{href:!0});var ICt=s(tW);csr=r(ICt,"from_config()"),ICt.forEach(t),fsr=r(gre,` class
method.`),gre.forEach(t),msr=i(ml),E8=n(ml,"P",{});var pze=s(E8);gsr=r(pze,"This class cannot be instantiated directly using "),j7e=n(pze,"CODE",{});var NCt=s(j7e);hsr=r(NCt,"__init__()"),NCt.forEach(t),psr=r(pze," (throws an error)."),pze.forEach(t),_sr=i(ml),vt=n(ml,"DIV",{class:!0});var m6=s(vt);T(C8.$$.fragment,m6),usr=i(m6),D7e=n(m6,"P",{});var qCt=s(D7e);bsr=r(qCt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),qCt.forEach(t),vsr=i(m6),Cd=n(m6,"P",{});var hre=s(Cd);Fsr=r(hre,`Note:
Loading a model from its configuration file does `),G7e=n(hre,"STRONG",{});var jCt=s(G7e);Tsr=r(jCt,"not"),jCt.forEach(t),Msr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(hre,"A",{href:!0});var DCt=s(aW);Esr=r(DCt,"from_pretrained()"),DCt.forEach(t),Csr=r(hre," to load the model weights."),hre.forEach(t),wsr=i(m6),T(Mv.$$.fragment,m6),m6.forEach(t),Asr=i(ml),co=n(ml,"DIV",{class:!0});var ba=s(co);T(w8.$$.fragment,ba),Lsr=i(ba),O7e=n(ba,"P",{});var GCt=s(O7e);ysr=r(GCt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),GCt.forEach(t),xsr=i(ba),Qa=n(ba,"P",{});var g6=s(Qa);$sr=r(g6,"The model class to instantiate is selected based on the "),V7e=n(g6,"CODE",{});var OCt=s(V7e);ksr=r(OCt,"model_type"),OCt.forEach(t),Ssr=r(g6,` property of the config object (either
passed as an argument or loaded from `),X7e=n(g6,"CODE",{});var VCt=s(X7e);Rsr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),Psr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(g6,"CODE",{});var XCt=s(z7e);Bsr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),Isr=r(g6,":"),g6.forEach(t),Nsr=i(ba),Q7e=n(ba,"UL",{});var zCt=s(Q7e);Ev=n(zCt,"LI",{});var RBe=s(Ev);W7e=n(RBe,"STRONG",{});var QCt=s(W7e);qsr=r(QCt,"vilt"),QCt.forEach(t),jsr=r(RBe," \u2014 "),nW=n(RBe,"A",{href:!0});var WCt=s(nW);Dsr=r(WCt,"ViltForQuestionAnswering"),WCt.forEach(t),Gsr=r(RBe," (ViLT model)"),RBe.forEach(t),zCt.forEach(t),Osr=i(ba),Cv=n(ba,"P",{});var PBe=s(Cv);Vsr=r(PBe,"The model is set in evaluation mode by default using "),H7e=n(PBe,"CODE",{});var HCt=s(H7e);Xsr=r(HCt,"model.eval()"),HCt.forEach(t),zsr=r(PBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U7e=n(PBe,"CODE",{});var UCt=s(U7e);Qsr=r(UCt,"model.train()"),UCt.forEach(t),PBe.forEach(t),Wsr=i(ba),T(wv.$$.fragment,ba),ba.forEach(t),ml.forEach(t),cVe=i(f),wd=n(f,"H2",{class:!0});var _ze=s(wd);Av=n(_ze,"A",{id:!0,class:!0,href:!0});var JCt=s(Av);J7e=n(JCt,"SPAN",{});var YCt=s(J7e);T(A8.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),Hsr=i(_ze),Y7e=n(_ze,"SPAN",{});var KCt=s(Y7e);Usr=r(KCt,"AutoModelForAudioClassification"),KCt.forEach(t),_ze.forEach(t),fVe=i(f),Xo=n(f,"DIV",{class:!0});var gl=s(Xo);T(L8.$$.fragment,gl),Jsr=i(gl),Ad=n(gl,"P",{});var pre=s(Ad);Ysr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sW=n(pre,"A",{href:!0});var ZCt=s(sW);Ksr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),Zsr=r(pre," class method or the "),lW=n(pre,"A",{href:!0});var e5t=s(lW);elr=r(e5t,"from_config()"),e5t.forEach(t),olr=r(pre,` class
method.`),pre.forEach(t),rlr=i(gl),y8=n(gl,"P",{});var uze=s(y8);tlr=r(uze,"This class cannot be instantiated directly using "),K7e=n(uze,"CODE",{});var o5t=s(K7e);alr=r(o5t,"__init__()"),o5t.forEach(t),nlr=r(uze," (throws an error)."),uze.forEach(t),slr=i(gl),Ft=n(gl,"DIV",{class:!0});var h6=s(Ft);T(x8.$$.fragment,h6),llr=i(h6),Z7e=n(h6,"P",{});var r5t=s(Z7e);ilr=r(r5t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),r5t.forEach(t),dlr=i(h6),Ld=n(h6,"P",{});var _re=s(Ld);clr=r(_re,`Note:
Loading a model from its configuration file does `),e2e=n(_re,"STRONG",{});var t5t=s(e2e);flr=r(t5t,"not"),t5t.forEach(t),mlr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(_re,"A",{href:!0});var a5t=s(iW);glr=r(a5t,"from_pretrained()"),a5t.forEach(t),hlr=r(_re," to load the model weights."),_re.forEach(t),plr=i(h6),T(Lv.$$.fragment,h6),h6.forEach(t),_lr=i(gl),fo=n(gl,"DIV",{class:!0});var va=s(fo);T($8.$$.fragment,va),ulr=i(va),o2e=n(va,"P",{});var n5t=s(o2e);blr=r(n5t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),n5t.forEach(t),vlr=i(va),Wa=n(va,"P",{});var p6=s(Wa);Flr=r(p6,"The model class to instantiate is selected based on the "),r2e=n(p6,"CODE",{});var s5t=s(r2e);Tlr=r(s5t,"model_type"),s5t.forEach(t),Mlr=r(p6,` property of the config object (either
passed as an argument or loaded from `),t2e=n(p6,"CODE",{});var l5t=s(t2e);Elr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Clr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(p6,"CODE",{});var i5t=s(a2e);wlr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),Alr=r(p6,":"),p6.forEach(t),Llr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);yv=n(ze,"LI",{});var BBe=s(yv);n2e=n(BBe,"STRONG",{});var d5t=s(n2e);ylr=r(d5t,"data2vec-audio"),d5t.forEach(t),xlr=r(BBe," \u2014 "),dW=n(BBe,"A",{href:!0});var c5t=s(dW);$lr=r(c5t,"Data2VecAudioForSequenceClassification"),c5t.forEach(t),klr=r(BBe," (Data2VecAudio model)"),BBe.forEach(t),Slr=i(ze),xv=n(ze,"LI",{});var IBe=s(xv);s2e=n(IBe,"STRONG",{});var f5t=s(s2e);Rlr=r(f5t,"hubert"),f5t.forEach(t),Plr=r(IBe," \u2014 "),cW=n(IBe,"A",{href:!0});var m5t=s(cW);Blr=r(m5t,"HubertForSequenceClassification"),m5t.forEach(t),Ilr=r(IBe," (Hubert model)"),IBe.forEach(t),Nlr=i(ze),$v=n(ze,"LI",{});var NBe=s($v);l2e=n(NBe,"STRONG",{});var g5t=s(l2e);qlr=r(g5t,"sew"),g5t.forEach(t),jlr=r(NBe," \u2014 "),fW=n(NBe,"A",{href:!0});var h5t=s(fW);Dlr=r(h5t,"SEWForSequenceClassification"),h5t.forEach(t),Glr=r(NBe," (SEW model)"),NBe.forEach(t),Olr=i(ze),kv=n(ze,"LI",{});var qBe=s(kv);i2e=n(qBe,"STRONG",{});var p5t=s(i2e);Vlr=r(p5t,"sew-d"),p5t.forEach(t),Xlr=r(qBe," \u2014 "),mW=n(qBe,"A",{href:!0});var _5t=s(mW);zlr=r(_5t,"SEWDForSequenceClassification"),_5t.forEach(t),Qlr=r(qBe," (SEW-D model)"),qBe.forEach(t),Wlr=i(ze),Sv=n(ze,"LI",{});var jBe=s(Sv);d2e=n(jBe,"STRONG",{});var u5t=s(d2e);Hlr=r(u5t,"unispeech"),u5t.forEach(t),Ulr=r(jBe," \u2014 "),gW=n(jBe,"A",{href:!0});var b5t=s(gW);Jlr=r(b5t,"UniSpeechForSequenceClassification"),b5t.forEach(t),Ylr=r(jBe," (UniSpeech model)"),jBe.forEach(t),Klr=i(ze),Rv=n(ze,"LI",{});var DBe=s(Rv);c2e=n(DBe,"STRONG",{});var v5t=s(c2e);Zlr=r(v5t,"unispeech-sat"),v5t.forEach(t),eir=r(DBe," \u2014 "),hW=n(DBe,"A",{href:!0});var F5t=s(hW);oir=r(F5t,"UniSpeechSatForSequenceClassification"),F5t.forEach(t),rir=r(DBe," (UniSpeechSat model)"),DBe.forEach(t),tir=i(ze),Pv=n(ze,"LI",{});var GBe=s(Pv);f2e=n(GBe,"STRONG",{});var T5t=s(f2e);air=r(T5t,"wav2vec2"),T5t.forEach(t),nir=r(GBe," \u2014 "),pW=n(GBe,"A",{href:!0});var M5t=s(pW);sir=r(M5t,"Wav2Vec2ForSequenceClassification"),M5t.forEach(t),lir=r(GBe," (Wav2Vec2 model)"),GBe.forEach(t),iir=i(ze),Bv=n(ze,"LI",{});var OBe=s(Bv);m2e=n(OBe,"STRONG",{});var E5t=s(m2e);dir=r(E5t,"wav2vec2-conformer"),E5t.forEach(t),cir=r(OBe," \u2014 "),_W=n(OBe,"A",{href:!0});var C5t=s(_W);fir=r(C5t,"Wav2Vec2ConformerForSequenceClassification"),C5t.forEach(t),mir=r(OBe," (Wav2Vec2-Conformer model)"),OBe.forEach(t),gir=i(ze),Iv=n(ze,"LI",{});var VBe=s(Iv);g2e=n(VBe,"STRONG",{});var w5t=s(g2e);hir=r(w5t,"wavlm"),w5t.forEach(t),pir=r(VBe," \u2014 "),uW=n(VBe,"A",{href:!0});var A5t=s(uW);_ir=r(A5t,"WavLMForSequenceClassification"),A5t.forEach(t),uir=r(VBe," (WavLM model)"),VBe.forEach(t),ze.forEach(t),bir=i(va),Nv=n(va,"P",{});var XBe=s(Nv);vir=r(XBe,"The model is set in evaluation mode by default using "),h2e=n(XBe,"CODE",{});var L5t=s(h2e);Fir=r(L5t,"model.eval()"),L5t.forEach(t),Tir=r(XBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=n(XBe,"CODE",{});var y5t=s(p2e);Mir=r(y5t,"model.train()"),y5t.forEach(t),XBe.forEach(t),Eir=i(va),T(qv.$$.fragment,va),va.forEach(t),gl.forEach(t),mVe=i(f),yd=n(f,"H2",{class:!0});var bze=s(yd);jv=n(bze,"A",{id:!0,class:!0,href:!0});var x5t=s(jv);_2e=n(x5t,"SPAN",{});var $5t=s(_2e);T(k8.$$.fragment,$5t),$5t.forEach(t),x5t.forEach(t),Cir=i(bze),u2e=n(bze,"SPAN",{});var k5t=s(u2e);wir=r(k5t,"AutoModelForAudioFrameClassification"),k5t.forEach(t),bze.forEach(t),gVe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(S8.$$.fragment,hl),Air=i(hl),xd=n(hl,"P",{});var ure=s(xd);Lir=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bW=n(ure,"A",{href:!0});var S5t=s(bW);yir=r(S5t,"from_pretrained()"),S5t.forEach(t),xir=r(ure," class method or the "),vW=n(ure,"A",{href:!0});var R5t=s(vW);$ir=r(R5t,"from_config()"),R5t.forEach(t),kir=r(ure,` class
method.`),ure.forEach(t),Sir=i(hl),R8=n(hl,"P",{});var vze=s(R8);Rir=r(vze,"This class cannot be instantiated directly using "),b2e=n(vze,"CODE",{});var P5t=s(b2e);Pir=r(P5t,"__init__()"),P5t.forEach(t),Bir=r(vze," (throws an error)."),vze.forEach(t),Iir=i(hl),Tt=n(hl,"DIV",{class:!0});var _6=s(Tt);T(P8.$$.fragment,_6),Nir=i(_6),v2e=n(_6,"P",{});var B5t=s(v2e);qir=r(B5t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),B5t.forEach(t),jir=i(_6),$d=n(_6,"P",{});var bre=s($d);Dir=r(bre,`Note:
Loading a model from its configuration file does `),F2e=n(bre,"STRONG",{});var I5t=s(F2e);Gir=r(I5t,"not"),I5t.forEach(t),Oir=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(bre,"A",{href:!0});var N5t=s(FW);Vir=r(N5t,"from_pretrained()"),N5t.forEach(t),Xir=r(bre," to load the model weights."),bre.forEach(t),zir=i(_6),T(Dv.$$.fragment,_6),_6.forEach(t),Qir=i(hl),mo=n(hl,"DIV",{class:!0});var Fa=s(mo);T(B8.$$.fragment,Fa),Wir=i(Fa),T2e=n(Fa,"P",{});var q5t=s(T2e);Hir=r(q5t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),q5t.forEach(t),Uir=i(Fa),Ha=n(Fa,"P",{});var u6=s(Ha);Jir=r(u6,"The model class to instantiate is selected based on the "),M2e=n(u6,"CODE",{});var j5t=s(M2e);Yir=r(j5t,"model_type"),j5t.forEach(t),Kir=r(u6,` property of the config object (either
passed as an argument or loaded from `),E2e=n(u6,"CODE",{});var D5t=s(E2e);Zir=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),edr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(u6,"CODE",{});var G5t=s(C2e);odr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),rdr=r(u6,":"),u6.forEach(t),tdr=i(Fa),et=n(Fa,"UL",{});var pl=s(et);Gv=n(pl,"LI",{});var zBe=s(Gv);w2e=n(zBe,"STRONG",{});var O5t=s(w2e);adr=r(O5t,"data2vec-audio"),O5t.forEach(t),ndr=r(zBe," \u2014 "),TW=n(zBe,"A",{href:!0});var V5t=s(TW);sdr=r(V5t,"Data2VecAudioForAudioFrameClassification"),V5t.forEach(t),ldr=r(zBe," (Data2VecAudio model)"),zBe.forEach(t),idr=i(pl),Ov=n(pl,"LI",{});var QBe=s(Ov);A2e=n(QBe,"STRONG",{});var X5t=s(A2e);ddr=r(X5t,"unispeech-sat"),X5t.forEach(t),cdr=r(QBe," \u2014 "),MW=n(QBe,"A",{href:!0});var z5t=s(MW);fdr=r(z5t,"UniSpeechSatForAudioFrameClassification"),z5t.forEach(t),mdr=r(QBe," (UniSpeechSat model)"),QBe.forEach(t),gdr=i(pl),Vv=n(pl,"LI",{});var WBe=s(Vv);L2e=n(WBe,"STRONG",{});var Q5t=s(L2e);hdr=r(Q5t,"wav2vec2"),Q5t.forEach(t),pdr=r(WBe," \u2014 "),EW=n(WBe,"A",{href:!0});var W5t=s(EW);_dr=r(W5t,"Wav2Vec2ForAudioFrameClassification"),W5t.forEach(t),udr=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),bdr=i(pl),Xv=n(pl,"LI",{});var HBe=s(Xv);y2e=n(HBe,"STRONG",{});var H5t=s(y2e);vdr=r(H5t,"wav2vec2-conformer"),H5t.forEach(t),Fdr=r(HBe," \u2014 "),CW=n(HBe,"A",{href:!0});var U5t=s(CW);Tdr=r(U5t,"Wav2Vec2ConformerForAudioFrameClassification"),U5t.forEach(t),Mdr=r(HBe," (Wav2Vec2-Conformer model)"),HBe.forEach(t),Edr=i(pl),zv=n(pl,"LI",{});var UBe=s(zv);x2e=n(UBe,"STRONG",{});var J5t=s(x2e);Cdr=r(J5t,"wavlm"),J5t.forEach(t),wdr=r(UBe," \u2014 "),wW=n(UBe,"A",{href:!0});var Y5t=s(wW);Adr=r(Y5t,"WavLMForAudioFrameClassification"),Y5t.forEach(t),Ldr=r(UBe," (WavLM model)"),UBe.forEach(t),pl.forEach(t),ydr=i(Fa),Qv=n(Fa,"P",{});var JBe=s(Qv);xdr=r(JBe,"The model is set in evaluation mode by default using "),$2e=n(JBe,"CODE",{});var K5t=s($2e);$dr=r(K5t,"model.eval()"),K5t.forEach(t),kdr=r(JBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=n(JBe,"CODE",{});var Z5t=s(k2e);Sdr=r(Z5t,"model.train()"),Z5t.forEach(t),JBe.forEach(t),Rdr=i(Fa),T(Wv.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),hVe=i(f),kd=n(f,"H2",{class:!0});var Fze=s(kd);Hv=n(Fze,"A",{id:!0,class:!0,href:!0});var e0t=s(Hv);S2e=n(e0t,"SPAN",{});var o0t=s(S2e);T(I8.$$.fragment,o0t),o0t.forEach(t),e0t.forEach(t),Pdr=i(Fze),R2e=n(Fze,"SPAN",{});var r0t=s(R2e);Bdr=r(r0t,"AutoModelForCTC"),r0t.forEach(t),Fze.forEach(t),pVe=i(f),Qo=n(f,"DIV",{class:!0});var _l=s(Qo);T(N8.$$.fragment,_l),Idr=i(_l),Sd=n(_l,"P",{});var vre=s(Sd);Ndr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AW=n(vre,"A",{href:!0});var t0t=s(AW);qdr=r(t0t,"from_pretrained()"),t0t.forEach(t),jdr=r(vre," class method or the "),LW=n(vre,"A",{href:!0});var a0t=s(LW);Ddr=r(a0t,"from_config()"),a0t.forEach(t),Gdr=r(vre,` class
method.`),vre.forEach(t),Odr=i(_l),q8=n(_l,"P",{});var Tze=s(q8);Vdr=r(Tze,"This class cannot be instantiated directly using "),P2e=n(Tze,"CODE",{});var n0t=s(P2e);Xdr=r(n0t,"__init__()"),n0t.forEach(t),zdr=r(Tze," (throws an error)."),Tze.forEach(t),Qdr=i(_l),Mt=n(_l,"DIV",{class:!0});var b6=s(Mt);T(j8.$$.fragment,b6),Wdr=i(b6),B2e=n(b6,"P",{});var s0t=s(B2e);Hdr=r(s0t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),s0t.forEach(t),Udr=i(b6),Rd=n(b6,"P",{});var Fre=s(Rd);Jdr=r(Fre,`Note:
Loading a model from its configuration file does `),I2e=n(Fre,"STRONG",{});var l0t=s(I2e);Ydr=r(l0t,"not"),l0t.forEach(t),Kdr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Fre,"A",{href:!0});var i0t=s(yW);Zdr=r(i0t,"from_pretrained()"),i0t.forEach(t),ecr=r(Fre," to load the model weights."),Fre.forEach(t),ocr=i(b6),T(Uv.$$.fragment,b6),b6.forEach(t),rcr=i(_l),go=n(_l,"DIV",{class:!0});var Ta=s(go);T(D8.$$.fragment,Ta),tcr=i(Ta),N2e=n(Ta,"P",{});var d0t=s(N2e);acr=r(d0t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),d0t.forEach(t),ncr=i(Ta),Ua=n(Ta,"P",{});var v6=s(Ua);scr=r(v6,"The model class to instantiate is selected based on the "),q2e=n(v6,"CODE",{});var c0t=s(q2e);lcr=r(c0t,"model_type"),c0t.forEach(t),icr=r(v6,` property of the config object (either
passed as an argument or loaded from `),j2e=n(v6,"CODE",{});var f0t=s(j2e);dcr=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),ccr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(v6,"CODE",{});var m0t=s(D2e);fcr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),mcr=r(v6,":"),v6.forEach(t),gcr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);Jv=n(Be,"LI",{});var YBe=s(Jv);G2e=n(YBe,"STRONG",{});var g0t=s(G2e);hcr=r(g0t,"data2vec-audio"),g0t.forEach(t),pcr=r(YBe," \u2014 "),xW=n(YBe,"A",{href:!0});var h0t=s(xW);_cr=r(h0t,"Data2VecAudioForCTC"),h0t.forEach(t),ucr=r(YBe," (Data2VecAudio model)"),YBe.forEach(t),bcr=i(Be),Yv=n(Be,"LI",{});var KBe=s(Yv);O2e=n(KBe,"STRONG",{});var p0t=s(O2e);vcr=r(p0t,"hubert"),p0t.forEach(t),Fcr=r(KBe," \u2014 "),$W=n(KBe,"A",{href:!0});var _0t=s($W);Tcr=r(_0t,"HubertForCTC"),_0t.forEach(t),Mcr=r(KBe," (Hubert model)"),KBe.forEach(t),Ecr=i(Be),Kv=n(Be,"LI",{});var ZBe=s(Kv);V2e=n(ZBe,"STRONG",{});var u0t=s(V2e);Ccr=r(u0t,"mctct"),u0t.forEach(t),wcr=r(ZBe," \u2014 "),kW=n(ZBe,"A",{href:!0});var b0t=s(kW);Acr=r(b0t,"MCTCTForCTC"),b0t.forEach(t),Lcr=r(ZBe," (M-CTC-T model)"),ZBe.forEach(t),ycr=i(Be),Zv=n(Be,"LI",{});var eIe=s(Zv);X2e=n(eIe,"STRONG",{});var v0t=s(X2e);xcr=r(v0t,"sew"),v0t.forEach(t),$cr=r(eIe," \u2014 "),SW=n(eIe,"A",{href:!0});var F0t=s(SW);kcr=r(F0t,"SEWForCTC"),F0t.forEach(t),Scr=r(eIe," (SEW model)"),eIe.forEach(t),Rcr=i(Be),eF=n(Be,"LI",{});var oIe=s(eF);z2e=n(oIe,"STRONG",{});var T0t=s(z2e);Pcr=r(T0t,"sew-d"),T0t.forEach(t),Bcr=r(oIe," \u2014 "),RW=n(oIe,"A",{href:!0});var M0t=s(RW);Icr=r(M0t,"SEWDForCTC"),M0t.forEach(t),Ncr=r(oIe," (SEW-D model)"),oIe.forEach(t),qcr=i(Be),oF=n(Be,"LI",{});var rIe=s(oF);Q2e=n(rIe,"STRONG",{});var E0t=s(Q2e);jcr=r(E0t,"unispeech"),E0t.forEach(t),Dcr=r(rIe," \u2014 "),PW=n(rIe,"A",{href:!0});var C0t=s(PW);Gcr=r(C0t,"UniSpeechForCTC"),C0t.forEach(t),Ocr=r(rIe," (UniSpeech model)"),rIe.forEach(t),Vcr=i(Be),rF=n(Be,"LI",{});var tIe=s(rF);W2e=n(tIe,"STRONG",{});var w0t=s(W2e);Xcr=r(w0t,"unispeech-sat"),w0t.forEach(t),zcr=r(tIe," \u2014 "),BW=n(tIe,"A",{href:!0});var A0t=s(BW);Qcr=r(A0t,"UniSpeechSatForCTC"),A0t.forEach(t),Wcr=r(tIe," (UniSpeechSat model)"),tIe.forEach(t),Hcr=i(Be),tF=n(Be,"LI",{});var aIe=s(tF);H2e=n(aIe,"STRONG",{});var L0t=s(H2e);Ucr=r(L0t,"wav2vec2"),L0t.forEach(t),Jcr=r(aIe," \u2014 "),IW=n(aIe,"A",{href:!0});var y0t=s(IW);Ycr=r(y0t,"Wav2Vec2ForCTC"),y0t.forEach(t),Kcr=r(aIe," (Wav2Vec2 model)"),aIe.forEach(t),Zcr=i(Be),aF=n(Be,"LI",{});var nIe=s(aF);U2e=n(nIe,"STRONG",{});var x0t=s(U2e);efr=r(x0t,"wav2vec2-conformer"),x0t.forEach(t),ofr=r(nIe," \u2014 "),NW=n(nIe,"A",{href:!0});var $0t=s(NW);rfr=r($0t,"Wav2Vec2ConformerForCTC"),$0t.forEach(t),tfr=r(nIe," (Wav2Vec2-Conformer model)"),nIe.forEach(t),afr=i(Be),nF=n(Be,"LI",{});var sIe=s(nF);J2e=n(sIe,"STRONG",{});var k0t=s(J2e);nfr=r(k0t,"wavlm"),k0t.forEach(t),sfr=r(sIe," \u2014 "),qW=n(sIe,"A",{href:!0});var S0t=s(qW);lfr=r(S0t,"WavLMForCTC"),S0t.forEach(t),ifr=r(sIe," (WavLM model)"),sIe.forEach(t),Be.forEach(t),dfr=i(Ta),sF=n(Ta,"P",{});var lIe=s(sF);cfr=r(lIe,"The model is set in evaluation mode by default using "),Y2e=n(lIe,"CODE",{});var R0t=s(Y2e);ffr=r(R0t,"model.eval()"),R0t.forEach(t),mfr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K2e=n(lIe,"CODE",{});var P0t=s(K2e);gfr=r(P0t,"model.train()"),P0t.forEach(t),lIe.forEach(t),hfr=i(Ta),T(lF.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),_Ve=i(f),Pd=n(f,"H2",{class:!0});var Mze=s(Pd);iF=n(Mze,"A",{id:!0,class:!0,href:!0});var B0t=s(iF);Z2e=n(B0t,"SPAN",{});var I0t=s(Z2e);T(G8.$$.fragment,I0t),I0t.forEach(t),B0t.forEach(t),pfr=i(Mze),ebe=n(Mze,"SPAN",{});var N0t=s(ebe);_fr=r(N0t,"AutoModelForSpeechSeq2Seq"),N0t.forEach(t),Mze.forEach(t),uVe=i(f),Wo=n(f,"DIV",{class:!0});var ul=s(Wo);T(O8.$$.fragment,ul),ufr=i(ul),Bd=n(ul,"P",{});var Tre=s(Bd);bfr=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jW=n(Tre,"A",{href:!0});var q0t=s(jW);vfr=r(q0t,"from_pretrained()"),q0t.forEach(t),Ffr=r(Tre," class method or the "),DW=n(Tre,"A",{href:!0});var j0t=s(DW);Tfr=r(j0t,"from_config()"),j0t.forEach(t),Mfr=r(Tre,` class
method.`),Tre.forEach(t),Efr=i(ul),V8=n(ul,"P",{});var Eze=s(V8);Cfr=r(Eze,"This class cannot be instantiated directly using "),obe=n(Eze,"CODE",{});var D0t=s(obe);wfr=r(D0t,"__init__()"),D0t.forEach(t),Afr=r(Eze," (throws an error)."),Eze.forEach(t),Lfr=i(ul),Et=n(ul,"DIV",{class:!0});var F6=s(Et);T(X8.$$.fragment,F6),yfr=i(F6),rbe=n(F6,"P",{});var G0t=s(rbe);xfr=r(G0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),G0t.forEach(t),$fr=i(F6),Id=n(F6,"P",{});var Mre=s(Id);kfr=r(Mre,`Note:
Loading a model from its configuration file does `),tbe=n(Mre,"STRONG",{});var O0t=s(tbe);Sfr=r(O0t,"not"),O0t.forEach(t),Rfr=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(Mre,"A",{href:!0});var V0t=s(GW);Pfr=r(V0t,"from_pretrained()"),V0t.forEach(t),Bfr=r(Mre," to load the model weights."),Mre.forEach(t),Ifr=i(F6),T(dF.$$.fragment,F6),F6.forEach(t),Nfr=i(ul),ho=n(ul,"DIV",{class:!0});var Ma=s(ho);T(z8.$$.fragment,Ma),qfr=i(Ma),abe=n(Ma,"P",{});var X0t=s(abe);jfr=r(X0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),X0t.forEach(t),Dfr=i(Ma),Ja=n(Ma,"P",{});var T6=s(Ja);Gfr=r(T6,"The model class to instantiate is selected based on the "),nbe=n(T6,"CODE",{});var z0t=s(nbe);Ofr=r(z0t,"model_type"),z0t.forEach(t),Vfr=r(T6,` property of the config object (either
passed as an argument or loaded from `),sbe=n(T6,"CODE",{});var Q0t=s(sbe);Xfr=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),zfr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(T6,"CODE",{});var W0t=s(lbe);Qfr=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),Wfr=r(T6,":"),T6.forEach(t),Hfr=i(Ma),Q8=n(Ma,"UL",{});var Cze=s(Q8);cF=n(Cze,"LI",{});var iIe=s(cF);ibe=n(iIe,"STRONG",{});var H0t=s(ibe);Ufr=r(H0t,"speech-encoder-decoder"),H0t.forEach(t),Jfr=r(iIe," \u2014 "),OW=n(iIe,"A",{href:!0});var U0t=s(OW);Yfr=r(U0t,"SpeechEncoderDecoderModel"),U0t.forEach(t),Kfr=r(iIe," (Speech Encoder decoder model)"),iIe.forEach(t),Zfr=i(Cze),fF=n(Cze,"LI",{});var dIe=s(fF);dbe=n(dIe,"STRONG",{});var J0t=s(dbe);emr=r(J0t,"speech_to_text"),J0t.forEach(t),omr=r(dIe," \u2014 "),VW=n(dIe,"A",{href:!0});var Y0t=s(VW);rmr=r(Y0t,"Speech2TextForConditionalGeneration"),Y0t.forEach(t),tmr=r(dIe," (Speech2Text model)"),dIe.forEach(t),Cze.forEach(t),amr=i(Ma),mF=n(Ma,"P",{});var cIe=s(mF);nmr=r(cIe,"The model is set in evaluation mode by default using "),cbe=n(cIe,"CODE",{});var K0t=s(cbe);smr=r(K0t,"model.eval()"),K0t.forEach(t),lmr=r(cIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=n(cIe,"CODE",{});var Z0t=s(fbe);imr=r(Z0t,"model.train()"),Z0t.forEach(t),cIe.forEach(t),dmr=i(Ma),T(gF.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),bVe=i(f),Nd=n(f,"H2",{class:!0});var wze=s(Nd);hF=n(wze,"A",{id:!0,class:!0,href:!0});var ewt=s(hF);mbe=n(ewt,"SPAN",{});var owt=s(mbe);T(W8.$$.fragment,owt),owt.forEach(t),ewt.forEach(t),cmr=i(wze),gbe=n(wze,"SPAN",{});var rwt=s(gbe);fmr=r(rwt,"AutoModelForAudioXVector"),rwt.forEach(t),wze.forEach(t),vVe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(H8.$$.fragment,bl),mmr=i(bl),qd=n(bl,"P",{});var Ere=s(qd);gmr=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),XW=n(Ere,"A",{href:!0});var twt=s(XW);hmr=r(twt,"from_pretrained()"),twt.forEach(t),pmr=r(Ere," class method or the "),zW=n(Ere,"A",{href:!0});var awt=s(zW);_mr=r(awt,"from_config()"),awt.forEach(t),umr=r(Ere,` class
method.`),Ere.forEach(t),bmr=i(bl),U8=n(bl,"P",{});var Aze=s(U8);vmr=r(Aze,"This class cannot be instantiated directly using "),hbe=n(Aze,"CODE",{});var nwt=s(hbe);Fmr=r(nwt,"__init__()"),nwt.forEach(t),Tmr=r(Aze," (throws an error)."),Aze.forEach(t),Mmr=i(bl),Ct=n(bl,"DIV",{class:!0});var M6=s(Ct);T(J8.$$.fragment,M6),Emr=i(M6),pbe=n(M6,"P",{});var swt=s(pbe);Cmr=r(swt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),swt.forEach(t),wmr=i(M6),jd=n(M6,"P",{});var Cre=s(jd);Amr=r(Cre,`Note:
Loading a model from its configuration file does `),_be=n(Cre,"STRONG",{});var lwt=s(_be);Lmr=r(lwt,"not"),lwt.forEach(t),ymr=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(Cre,"A",{href:!0});var iwt=s(QW);xmr=r(iwt,"from_pretrained()"),iwt.forEach(t),$mr=r(Cre," to load the model weights."),Cre.forEach(t),kmr=i(M6),T(pF.$$.fragment,M6),M6.forEach(t),Smr=i(bl),po=n(bl,"DIV",{class:!0});var Ea=s(po);T(Y8.$$.fragment,Ea),Rmr=i(Ea),ube=n(Ea,"P",{});var dwt=s(ube);Pmr=r(dwt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),dwt.forEach(t),Bmr=i(Ea),Ya=n(Ea,"P",{});var E6=s(Ya);Imr=r(E6,"The model class to instantiate is selected based on the "),bbe=n(E6,"CODE",{});var cwt=s(bbe);Nmr=r(cwt,"model_type"),cwt.forEach(t),qmr=r(E6,` property of the config object (either
passed as an argument or loaded from `),vbe=n(E6,"CODE",{});var fwt=s(vbe);jmr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),Dmr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(E6,"CODE",{});var mwt=s(Fbe);Gmr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),Omr=r(E6,":"),E6.forEach(t),Vmr=i(Ea),ot=n(Ea,"UL",{});var vl=s(ot);_F=n(vl,"LI",{});var fIe=s(_F);Tbe=n(fIe,"STRONG",{});var gwt=s(Tbe);Xmr=r(gwt,"data2vec-audio"),gwt.forEach(t),zmr=r(fIe," \u2014 "),WW=n(fIe,"A",{href:!0});var hwt=s(WW);Qmr=r(hwt,"Data2VecAudioForXVector"),hwt.forEach(t),Wmr=r(fIe," (Data2VecAudio model)"),fIe.forEach(t),Hmr=i(vl),uF=n(vl,"LI",{});var mIe=s(uF);Mbe=n(mIe,"STRONG",{});var pwt=s(Mbe);Umr=r(pwt,"unispeech-sat"),pwt.forEach(t),Jmr=r(mIe," \u2014 "),HW=n(mIe,"A",{href:!0});var _wt=s(HW);Ymr=r(_wt,"UniSpeechSatForXVector"),_wt.forEach(t),Kmr=r(mIe," (UniSpeechSat model)"),mIe.forEach(t),Zmr=i(vl),bF=n(vl,"LI",{});var gIe=s(bF);Ebe=n(gIe,"STRONG",{});var uwt=s(Ebe);egr=r(uwt,"wav2vec2"),uwt.forEach(t),ogr=r(gIe," \u2014 "),UW=n(gIe,"A",{href:!0});var bwt=s(UW);rgr=r(bwt,"Wav2Vec2ForXVector"),bwt.forEach(t),tgr=r(gIe," (Wav2Vec2 model)"),gIe.forEach(t),agr=i(vl),vF=n(vl,"LI",{});var hIe=s(vF);Cbe=n(hIe,"STRONG",{});var vwt=s(Cbe);ngr=r(vwt,"wav2vec2-conformer"),vwt.forEach(t),sgr=r(hIe," \u2014 "),JW=n(hIe,"A",{href:!0});var Fwt=s(JW);lgr=r(Fwt,"Wav2Vec2ConformerForXVector"),Fwt.forEach(t),igr=r(hIe," (Wav2Vec2-Conformer model)"),hIe.forEach(t),dgr=i(vl),FF=n(vl,"LI",{});var pIe=s(FF);wbe=n(pIe,"STRONG",{});var Twt=s(wbe);cgr=r(Twt,"wavlm"),Twt.forEach(t),fgr=r(pIe," \u2014 "),YW=n(pIe,"A",{href:!0});var Mwt=s(YW);mgr=r(Mwt,"WavLMForXVector"),Mwt.forEach(t),ggr=r(pIe," (WavLM model)"),pIe.forEach(t),vl.forEach(t),hgr=i(Ea),TF=n(Ea,"P",{});var _Ie=s(TF);pgr=r(_Ie,"The model is set in evaluation mode by default using "),Abe=n(_Ie,"CODE",{});var Ewt=s(Abe);_gr=r(Ewt,"model.eval()"),Ewt.forEach(t),ugr=r(_Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=n(_Ie,"CODE",{});var Cwt=s(Lbe);bgr=r(Cwt,"model.train()"),Cwt.forEach(t),_Ie.forEach(t),vgr=i(Ea),T(MF.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),FVe=i(f),Dd=n(f,"H2",{class:!0});var Lze=s(Dd);EF=n(Lze,"A",{id:!0,class:!0,href:!0});var wwt=s(EF);ybe=n(wwt,"SPAN",{});var Awt=s(ybe);T(K8.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),Fgr=i(Lze),xbe=n(Lze,"SPAN",{});var Lwt=s(xbe);Tgr=r(Lwt,"AutoModelForMaskedImageModeling"),Lwt.forEach(t),Lze.forEach(t),TVe=i(f),Uo=n(f,"DIV",{class:!0});var Fl=s(Uo);T(Z8.$$.fragment,Fl),Mgr=i(Fl),Gd=n(Fl,"P",{});var wre=s(Gd);Egr=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KW=n(wre,"A",{href:!0});var ywt=s(KW);Cgr=r(ywt,"from_pretrained()"),ywt.forEach(t),wgr=r(wre," class method or the "),ZW=n(wre,"A",{href:!0});var xwt=s(ZW);Agr=r(xwt,"from_config()"),xwt.forEach(t),Lgr=r(wre,` class
method.`),wre.forEach(t),ygr=i(Fl),e9=n(Fl,"P",{});var yze=s(e9);xgr=r(yze,"This class cannot be instantiated directly using "),$be=n(yze,"CODE",{});var $wt=s($be);$gr=r($wt,"__init__()"),$wt.forEach(t),kgr=r(yze," (throws an error)."),yze.forEach(t),Sgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var C6=s(wt);T(o9.$$.fragment,C6),Rgr=i(C6),kbe=n(C6,"P",{});var kwt=s(kbe);Pgr=r(kwt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kwt.forEach(t),Bgr=i(C6),Od=n(C6,"P",{});var Are=s(Od);Igr=r(Are,`Note:
Loading a model from its configuration file does `),Sbe=n(Are,"STRONG",{});var Swt=s(Sbe);Ngr=r(Swt,"not"),Swt.forEach(t),qgr=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(Are,"A",{href:!0});var Rwt=s(eH);jgr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),Dgr=r(Are," to load the model weights."),Are.forEach(t),Ggr=i(C6),T(CF.$$.fragment,C6),C6.forEach(t),Ogr=i(Fl),_o=n(Fl,"DIV",{class:!0});var Ca=s(_o);T(r9.$$.fragment,Ca),Vgr=i(Ca),Rbe=n(Ca,"P",{});var Pwt=s(Rbe);Xgr=r(Pwt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Pwt.forEach(t),zgr=i(Ca),Ka=n(Ca,"P",{});var w6=s(Ka);Qgr=r(w6,"The model class to instantiate is selected based on the "),Pbe=n(w6,"CODE",{});var Bwt=s(Pbe);Wgr=r(Bwt,"model_type"),Bwt.forEach(t),Hgr=r(w6,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(w6,"CODE",{});var Iwt=s(Bbe);Ugr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),Jgr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(w6,"CODE",{});var Nwt=s(Ibe);Ygr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),Kgr=r(w6,":"),w6.forEach(t),Zgr=i(Ca),Vd=n(Ca,"UL",{});var Lre=s(Vd);wF=n(Lre,"LI",{});var uIe=s(wF);Nbe=n(uIe,"STRONG",{});var qwt=s(Nbe);ehr=r(qwt,"deit"),qwt.forEach(t),ohr=r(uIe," \u2014 "),oH=n(uIe,"A",{href:!0});var jwt=s(oH);rhr=r(jwt,"DeiTForMaskedImageModeling"),jwt.forEach(t),thr=r(uIe," (DeiT model)"),uIe.forEach(t),ahr=i(Lre),AF=n(Lre,"LI",{});var bIe=s(AF);qbe=n(bIe,"STRONG",{});var Dwt=s(qbe);nhr=r(Dwt,"swin"),Dwt.forEach(t),shr=r(bIe," \u2014 "),rH=n(bIe,"A",{href:!0});var Gwt=s(rH);lhr=r(Gwt,"SwinForMaskedImageModeling"),Gwt.forEach(t),ihr=r(bIe," (Swin Transformer model)"),bIe.forEach(t),dhr=i(Lre),LF=n(Lre,"LI",{});var vIe=s(LF);jbe=n(vIe,"STRONG",{});var Owt=s(jbe);chr=r(Owt,"vit"),Owt.forEach(t),fhr=r(vIe," \u2014 "),tH=n(vIe,"A",{href:!0});var Vwt=s(tH);mhr=r(Vwt,"ViTForMaskedImageModeling"),Vwt.forEach(t),ghr=r(vIe," (ViT model)"),vIe.forEach(t),Lre.forEach(t),hhr=i(Ca),yF=n(Ca,"P",{});var FIe=s(yF);phr=r(FIe,"The model is set in evaluation mode by default using "),Dbe=n(FIe,"CODE",{});var Xwt=s(Dbe);_hr=r(Xwt,"model.eval()"),Xwt.forEach(t),uhr=r(FIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=n(FIe,"CODE",{});var zwt=s(Gbe);bhr=r(zwt,"model.train()"),zwt.forEach(t),FIe.forEach(t),vhr=i(Ca),T(xF.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),MVe=i(f),Xd=n(f,"H2",{class:!0});var xze=s(Xd);$F=n(xze,"A",{id:!0,class:!0,href:!0});var Qwt=s($F);Obe=n(Qwt,"SPAN",{});var Wwt=s(Obe);T(t9.$$.fragment,Wwt),Wwt.forEach(t),Qwt.forEach(t),Fhr=i(xze),Vbe=n(xze,"SPAN",{});var Hwt=s(Vbe);Thr=r(Hwt,"AutoModelForObjectDetection"),Hwt.forEach(t),xze.forEach(t),EVe=i(f),Jo=n(f,"DIV",{class:!0});var Tl=s(Jo);T(a9.$$.fragment,Tl),Mhr=i(Tl),zd=n(Tl,"P",{});var yre=s(zd);Ehr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),aH=n(yre,"A",{href:!0});var Uwt=s(aH);Chr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),whr=r(yre," class method or the "),nH=n(yre,"A",{href:!0});var Jwt=s(nH);Ahr=r(Jwt,"from_config()"),Jwt.forEach(t),Lhr=r(yre,` class
method.`),yre.forEach(t),yhr=i(Tl),n9=n(Tl,"P",{});var $ze=s(n9);xhr=r($ze,"This class cannot be instantiated directly using "),Xbe=n($ze,"CODE",{});var Ywt=s(Xbe);$hr=r(Ywt,"__init__()"),Ywt.forEach(t),khr=r($ze," (throws an error)."),$ze.forEach(t),Shr=i(Tl),At=n(Tl,"DIV",{class:!0});var A6=s(At);T(s9.$$.fragment,A6),Rhr=i(A6),zbe=n(A6,"P",{});var Kwt=s(zbe);Phr=r(Kwt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Kwt.forEach(t),Bhr=i(A6),Qd=n(A6,"P",{});var xre=s(Qd);Ihr=r(xre,`Note:
Loading a model from its configuration file does `),Qbe=n(xre,"STRONG",{});var Zwt=s(Qbe);Nhr=r(Zwt,"not"),Zwt.forEach(t),qhr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(xre,"A",{href:!0});var eAt=s(sH);jhr=r(eAt,"from_pretrained()"),eAt.forEach(t),Dhr=r(xre," to load the model weights."),xre.forEach(t),Ghr=i(A6),T(kF.$$.fragment,A6),A6.forEach(t),Ohr=i(Tl),uo=n(Tl,"DIV",{class:!0});var wa=s(uo);T(l9.$$.fragment,wa),Vhr=i(wa),Wbe=n(wa,"P",{});var oAt=s(Wbe);Xhr=r(oAt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),oAt.forEach(t),zhr=i(wa),Za=n(wa,"P",{});var L6=s(Za);Qhr=r(L6,"The model class to instantiate is selected based on the "),Hbe=n(L6,"CODE",{});var rAt=s(Hbe);Whr=r(rAt,"model_type"),rAt.forEach(t),Hhr=r(L6,` property of the config object (either
passed as an argument or loaded from `),Ube=n(L6,"CODE",{});var tAt=s(Ube);Uhr=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),Jhr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(L6,"CODE",{});var aAt=s(Jbe);Yhr=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),Khr=r(L6,":"),L6.forEach(t),Zhr=i(wa),i9=n(wa,"UL",{});var kze=s(i9);SF=n(kze,"LI",{});var TIe=s(SF);Ybe=n(TIe,"STRONG",{});var nAt=s(Ybe);epr=r(nAt,"detr"),nAt.forEach(t),opr=r(TIe," \u2014 "),lH=n(TIe,"A",{href:!0});var sAt=s(lH);rpr=r(sAt,"DetrForObjectDetection"),sAt.forEach(t),tpr=r(TIe," (DETR model)"),TIe.forEach(t),apr=i(kze),RF=n(kze,"LI",{});var MIe=s(RF);Kbe=n(MIe,"STRONG",{});var lAt=s(Kbe);npr=r(lAt,"yolos"),lAt.forEach(t),spr=r(MIe," \u2014 "),iH=n(MIe,"A",{href:!0});var iAt=s(iH);lpr=r(iAt,"YolosForObjectDetection"),iAt.forEach(t),ipr=r(MIe," (YOLOS model)"),MIe.forEach(t),kze.forEach(t),dpr=i(wa),PF=n(wa,"P",{});var EIe=s(PF);cpr=r(EIe,"The model is set in evaluation mode by default using "),Zbe=n(EIe,"CODE",{});var dAt=s(Zbe);fpr=r(dAt,"model.eval()"),dAt.forEach(t),mpr=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=n(EIe,"CODE",{});var cAt=s(e4e);gpr=r(cAt,"model.train()"),cAt.forEach(t),EIe.forEach(t),hpr=i(wa),T(BF.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),CVe=i(f),Wd=n(f,"H2",{class:!0});var Sze=s(Wd);IF=n(Sze,"A",{id:!0,class:!0,href:!0});var fAt=s(IF);o4e=n(fAt,"SPAN",{});var mAt=s(o4e);T(d9.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),ppr=i(Sze),r4e=n(Sze,"SPAN",{});var gAt=s(r4e);_pr=r(gAt,"AutoModelForImageSegmentation"),gAt.forEach(t),Sze.forEach(t),wVe=i(f),Yo=n(f,"DIV",{class:!0});var Ml=s(Yo);T(c9.$$.fragment,Ml),upr=i(Ml),Hd=n(Ml,"P",{});var $re=s(Hd);bpr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dH=n($re,"A",{href:!0});var hAt=s(dH);vpr=r(hAt,"from_pretrained()"),hAt.forEach(t),Fpr=r($re," class method or the "),cH=n($re,"A",{href:!0});var pAt=s(cH);Tpr=r(pAt,"from_config()"),pAt.forEach(t),Mpr=r($re,` class
method.`),$re.forEach(t),Epr=i(Ml),f9=n(Ml,"P",{});var Rze=s(f9);Cpr=r(Rze,"This class cannot be instantiated directly using "),t4e=n(Rze,"CODE",{});var _At=s(t4e);wpr=r(_At,"__init__()"),_At.forEach(t),Apr=r(Rze," (throws an error)."),Rze.forEach(t),Lpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var y6=s(Lt);T(m9.$$.fragment,y6),ypr=i(y6),a4e=n(y6,"P",{});var uAt=s(a4e);xpr=r(uAt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),uAt.forEach(t),$pr=i(y6),Ud=n(y6,"P",{});var kre=s(Ud);kpr=r(kre,`Note:
Loading a model from its configuration file does `),n4e=n(kre,"STRONG",{});var bAt=s(n4e);Spr=r(bAt,"not"),bAt.forEach(t),Rpr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(kre,"A",{href:!0});var vAt=s(fH);Ppr=r(vAt,"from_pretrained()"),vAt.forEach(t),Bpr=r(kre," to load the model weights."),kre.forEach(t),Ipr=i(y6),T(NF.$$.fragment,y6),y6.forEach(t),Npr=i(Ml),bo=n(Ml,"DIV",{class:!0});var Aa=s(bo);T(g9.$$.fragment,Aa),qpr=i(Aa),s4e=n(Aa,"P",{});var FAt=s(s4e);jpr=r(FAt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),FAt.forEach(t),Dpr=i(Aa),en=n(Aa,"P",{});var x6=s(en);Gpr=r(x6,"The model class to instantiate is selected based on the "),l4e=n(x6,"CODE",{});var TAt=s(l4e);Opr=r(TAt,"model_type"),TAt.forEach(t),Vpr=r(x6,` property of the config object (either
passed as an argument or loaded from `),i4e=n(x6,"CODE",{});var MAt=s(i4e);Xpr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),zpr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=n(x6,"CODE",{});var EAt=s(d4e);Qpr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),Wpr=r(x6,":"),x6.forEach(t),Hpr=i(Aa),c4e=n(Aa,"UL",{});var CAt=s(c4e);qF=n(CAt,"LI",{});var CIe=s(qF);f4e=n(CIe,"STRONG",{});var wAt=s(f4e);Upr=r(wAt,"detr"),wAt.forEach(t),Jpr=r(CIe," \u2014 "),mH=n(CIe,"A",{href:!0});var AAt=s(mH);Ypr=r(AAt,"DetrForSegmentation"),AAt.forEach(t),Kpr=r(CIe," (DETR model)"),CIe.forEach(t),CAt.forEach(t),Zpr=i(Aa),jF=n(Aa,"P",{});var wIe=s(jF);e_r=r(wIe,"The model is set in evaluation mode by default using "),m4e=n(wIe,"CODE",{});var LAt=s(m4e);o_r=r(LAt,"model.eval()"),LAt.forEach(t),r_r=r(wIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g4e=n(wIe,"CODE",{});var yAt=s(g4e);t_r=r(yAt,"model.train()"),yAt.forEach(t),wIe.forEach(t),a_r=i(Aa),T(DF.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),AVe=i(f),Jd=n(f,"H2",{class:!0});var Pze=s(Jd);GF=n(Pze,"A",{id:!0,class:!0,href:!0});var xAt=s(GF);h4e=n(xAt,"SPAN",{});var $At=s(h4e);T(h9.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),n_r=i(Pze),p4e=n(Pze,"SPAN",{});var kAt=s(p4e);s_r=r(kAt,"AutoModelForSemanticSegmentation"),kAt.forEach(t),Pze.forEach(t),LVe=i(f),Ko=n(f,"DIV",{class:!0});var El=s(Ko);T(p9.$$.fragment,El),l_r=i(El),Yd=n(El,"P",{});var Sre=s(Yd);i_r=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gH=n(Sre,"A",{href:!0});var SAt=s(gH);d_r=r(SAt,"from_pretrained()"),SAt.forEach(t),c_r=r(Sre," class method or the "),hH=n(Sre,"A",{href:!0});var RAt=s(hH);f_r=r(RAt,"from_config()"),RAt.forEach(t),m_r=r(Sre,` class
method.`),Sre.forEach(t),g_r=i(El),_9=n(El,"P",{});var Bze=s(_9);h_r=r(Bze,"This class cannot be instantiated directly using "),_4e=n(Bze,"CODE",{});var PAt=s(_4e);p_r=r(PAt,"__init__()"),PAt.forEach(t),__r=r(Bze," (throws an error)."),Bze.forEach(t),u_r=i(El),yt=n(El,"DIV",{class:!0});var $6=s(yt);T(u9.$$.fragment,$6),b_r=i($6),u4e=n($6,"P",{});var BAt=s(u4e);v_r=r(BAt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),BAt.forEach(t),F_r=i($6),Kd=n($6,"P",{});var Rre=s(Kd);T_r=r(Rre,`Note:
Loading a model from its configuration file does `),b4e=n(Rre,"STRONG",{});var IAt=s(b4e);M_r=r(IAt,"not"),IAt.forEach(t),E_r=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Rre,"A",{href:!0});var NAt=s(pH);C_r=r(NAt,"from_pretrained()"),NAt.forEach(t),w_r=r(Rre," to load the model weights."),Rre.forEach(t),A_r=i($6),T(OF.$$.fragment,$6),$6.forEach(t),L_r=i(El),vo=n(El,"DIV",{class:!0});var La=s(vo);T(b9.$$.fragment,La),y_r=i(La),v4e=n(La,"P",{});var qAt=s(v4e);x_r=r(qAt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qAt.forEach(t),$_r=i(La),on=n(La,"P",{});var k6=s(on);k_r=r(k6,"The model class to instantiate is selected based on the "),F4e=n(k6,"CODE",{});var jAt=s(F4e);S_r=r(jAt,"model_type"),jAt.forEach(t),R_r=r(k6,` property of the config object (either
passed as an argument or loaded from `),T4e=n(k6,"CODE",{});var DAt=s(T4e);P_r=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),B_r=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=n(k6,"CODE",{});var GAt=s(M4e);I_r=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),N_r=r(k6,":"),k6.forEach(t),q_r=i(La),rn=n(La,"UL",{});var S6=s(rn);VF=n(S6,"LI",{});var AIe=s(VF);E4e=n(AIe,"STRONG",{});var OAt=s(E4e);j_r=r(OAt,"beit"),OAt.forEach(t),D_r=r(AIe," \u2014 "),_H=n(AIe,"A",{href:!0});var VAt=s(_H);G_r=r(VAt,"BeitForSemanticSegmentation"),VAt.forEach(t),O_r=r(AIe," (BEiT model)"),AIe.forEach(t),V_r=i(S6),XF=n(S6,"LI",{});var LIe=s(XF);C4e=n(LIe,"STRONG",{});var XAt=s(C4e);X_r=r(XAt,"data2vec-vision"),XAt.forEach(t),z_r=r(LIe," \u2014 "),uH=n(LIe,"A",{href:!0});var zAt=s(uH);Q_r=r(zAt,"Data2VecVisionForSemanticSegmentation"),zAt.forEach(t),W_r=r(LIe," (Data2VecVision model)"),LIe.forEach(t),H_r=i(S6),zF=n(S6,"LI",{});var yIe=s(zF);w4e=n(yIe,"STRONG",{});var QAt=s(w4e);U_r=r(QAt,"dpt"),QAt.forEach(t),J_r=r(yIe," \u2014 "),bH=n(yIe,"A",{href:!0});var WAt=s(bH);Y_r=r(WAt,"DPTForSemanticSegmentation"),WAt.forEach(t),K_r=r(yIe," (DPT model)"),yIe.forEach(t),Z_r=i(S6),QF=n(S6,"LI",{});var xIe=s(QF);A4e=n(xIe,"STRONG",{});var HAt=s(A4e);eur=r(HAt,"segformer"),HAt.forEach(t),our=r(xIe," \u2014 "),vH=n(xIe,"A",{href:!0});var UAt=s(vH);rur=r(UAt,"SegformerForSemanticSegmentation"),UAt.forEach(t),tur=r(xIe," (SegFormer model)"),xIe.forEach(t),S6.forEach(t),aur=i(La),WF=n(La,"P",{});var $Ie=s(WF);nur=r($Ie,"The model is set in evaluation mode by default using "),L4e=n($Ie,"CODE",{});var JAt=s(L4e);sur=r(JAt,"model.eval()"),JAt.forEach(t),lur=r($Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=n($Ie,"CODE",{});var YAt=s(y4e);iur=r(YAt,"model.train()"),YAt.forEach(t),$Ie.forEach(t),dur=i(La),T(HF.$$.fragment,La),La.forEach(t),El.forEach(t),yVe=i(f),Zd=n(f,"H2",{class:!0});var Ize=s(Zd);UF=n(Ize,"A",{id:!0,class:!0,href:!0});var KAt=s(UF);x4e=n(KAt,"SPAN",{});var ZAt=s(x4e);T(v9.$$.fragment,ZAt),ZAt.forEach(t),KAt.forEach(t),cur=i(Ize),$4e=n(Ize,"SPAN",{});var e6t=s($4e);fur=r(e6t,"AutoModelForInstanceSegmentation"),e6t.forEach(t),Ize.forEach(t),xVe=i(f),Zo=n(f,"DIV",{class:!0});var Cl=s(Zo);T(F9.$$.fragment,Cl),mur=i(Cl),ec=n(Cl,"P",{});var Pre=s(ec);gur=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),FH=n(Pre,"A",{href:!0});var o6t=s(FH);hur=r(o6t,"from_pretrained()"),o6t.forEach(t),pur=r(Pre," class method or the "),TH=n(Pre,"A",{href:!0});var r6t=s(TH);_ur=r(r6t,"from_config()"),r6t.forEach(t),uur=r(Pre,` class
method.`),Pre.forEach(t),bur=i(Cl),T9=n(Cl,"P",{});var Nze=s(T9);vur=r(Nze,"This class cannot be instantiated directly using "),k4e=n(Nze,"CODE",{});var t6t=s(k4e);Fur=r(t6t,"__init__()"),t6t.forEach(t),Tur=r(Nze," (throws an error)."),Nze.forEach(t),Mur=i(Cl),xt=n(Cl,"DIV",{class:!0});var R6=s(xt);T(M9.$$.fragment,R6),Eur=i(R6),S4e=n(R6,"P",{});var a6t=s(S4e);Cur=r(a6t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),a6t.forEach(t),wur=i(R6),oc=n(R6,"P",{});var Bre=s(oc);Aur=r(Bre,`Note:
Loading a model from its configuration file does `),R4e=n(Bre,"STRONG",{});var n6t=s(R4e);Lur=r(n6t,"not"),n6t.forEach(t),yur=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Bre,"A",{href:!0});var s6t=s(MH);xur=r(s6t,"from_pretrained()"),s6t.forEach(t),$ur=r(Bre," to load the model weights."),Bre.forEach(t),kur=i(R6),T(JF.$$.fragment,R6),R6.forEach(t),Sur=i(Cl),Fo=n(Cl,"DIV",{class:!0});var ya=s(Fo);T(E9.$$.fragment,ya),Rur=i(ya),P4e=n(ya,"P",{});var l6t=s(P4e);Pur=r(l6t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),l6t.forEach(t),Bur=i(ya),tn=n(ya,"P",{});var P6=s(tn);Iur=r(P6,"The model class to instantiate is selected based on the "),B4e=n(P6,"CODE",{});var i6t=s(B4e);Nur=r(i6t,"model_type"),i6t.forEach(t),qur=r(P6,` property of the config object (either
passed as an argument or loaded from `),I4e=n(P6,"CODE",{});var d6t=s(I4e);jur=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),Dur=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(P6,"CODE",{});var c6t=s(N4e);Gur=r(c6t,"pretrained_model_name_or_path"),c6t.forEach(t),Our=r(P6,":"),P6.forEach(t),Vur=i(ya),q4e=n(ya,"UL",{});var f6t=s(q4e);YF=n(f6t,"LI",{});var kIe=s(YF);j4e=n(kIe,"STRONG",{});var m6t=s(j4e);Xur=r(m6t,"maskformer"),m6t.forEach(t),zur=r(kIe," \u2014 "),EH=n(kIe,"A",{href:!0});var g6t=s(EH);Qur=r(g6t,"MaskFormerForInstanceSegmentation"),g6t.forEach(t),Wur=r(kIe," (MaskFormer model)"),kIe.forEach(t),f6t.forEach(t),Hur=i(ya),KF=n(ya,"P",{});var SIe=s(KF);Uur=r(SIe,"The model is set in evaluation mode by default using "),D4e=n(SIe,"CODE",{});var h6t=s(D4e);Jur=r(h6t,"model.eval()"),h6t.forEach(t),Yur=r(SIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=n(SIe,"CODE",{});var p6t=s(G4e);Kur=r(p6t,"model.train()"),p6t.forEach(t),SIe.forEach(t),Zur=i(ya),T(ZF.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),$Ve=i(f),rc=n(f,"H2",{class:!0});var qze=s(rc);eT=n(qze,"A",{id:!0,class:!0,href:!0});var _6t=s(eT);O4e=n(_6t,"SPAN",{});var u6t=s(O4e);T(C9.$$.fragment,u6t),u6t.forEach(t),_6t.forEach(t),e1r=i(qze),V4e=n(qze,"SPAN",{});var b6t=s(V4e);o1r=r(b6t,"TFAutoModel"),b6t.forEach(t),qze.forEach(t),kVe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(w9.$$.fragment,wl),r1r=i(wl),tc=n(wl,"P",{});var Ire=s(tc);t1r=r(Ire,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CH=n(Ire,"A",{href:!0});var v6t=s(CH);a1r=r(v6t,"from_pretrained()"),v6t.forEach(t),n1r=r(Ire," class method or the "),wH=n(Ire,"A",{href:!0});var F6t=s(wH);s1r=r(F6t,"from_config()"),F6t.forEach(t),l1r=r(Ire,` class
method.`),Ire.forEach(t),i1r=i(wl),A9=n(wl,"P",{});var jze=s(A9);d1r=r(jze,"This class cannot be instantiated directly using "),X4e=n(jze,"CODE",{});var T6t=s(X4e);c1r=r(T6t,"__init__()"),T6t.forEach(t),f1r=r(jze," (throws an error)."),jze.forEach(t),m1r=i(wl),$t=n(wl,"DIV",{class:!0});var B6=s($t);T(L9.$$.fragment,B6),g1r=i(B6),z4e=n(B6,"P",{});var M6t=s(z4e);h1r=r(M6t,"Instantiates one of the base model classes of the library from a configuration."),M6t.forEach(t),p1r=i(B6),ac=n(B6,"P",{});var Nre=s(ac);_1r=r(Nre,`Note:
Loading a model from its configuration file does `),Q4e=n(Nre,"STRONG",{});var E6t=s(Q4e);u1r=r(E6t,"not"),E6t.forEach(t),b1r=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(Nre,"A",{href:!0});var C6t=s(AH);v1r=r(C6t,"from_pretrained()"),C6t.forEach(t),F1r=r(Nre," to load the model weights."),Nre.forEach(t),T1r=i(B6),T(oT.$$.fragment,B6),B6.forEach(t),M1r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(y9.$$.fragment,Al),E1r=i(Al),W4e=n(Al,"P",{});var w6t=s(W4e);C1r=r(w6t,"Instantiate one of the base model classes of the library from a pretrained model."),w6t.forEach(t),w1r=i(Al),an=n(Al,"P",{});var I6=s(an);A1r=r(I6,"The model class to instantiate is selected based on the "),H4e=n(I6,"CODE",{});var A6t=s(H4e);L1r=r(A6t,"model_type"),A6t.forEach(t),y1r=r(I6,` property of the config object (either
passed as an argument or loaded from `),U4e=n(I6,"CODE",{});var L6t=s(U4e);x1r=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),$1r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(I6,"CODE",{});var y6t=s(J4e);k1r=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),S1r=r(I6,":"),I6.forEach(t),R1r=i(Al),j=n(Al,"UL",{});var D=s(j);rT=n(D,"LI",{});var RIe=s(rT);Y4e=n(RIe,"STRONG",{});var x6t=s(Y4e);P1r=r(x6t,"albert"),x6t.forEach(t),B1r=r(RIe," \u2014 "),LH=n(RIe,"A",{href:!0});var $6t=s(LH);I1r=r($6t,"TFAlbertModel"),$6t.forEach(t),N1r=r(RIe," (ALBERT model)"),RIe.forEach(t),q1r=i(D),tT=n(D,"LI",{});var PIe=s(tT);K4e=n(PIe,"STRONG",{});var k6t=s(K4e);j1r=r(k6t,"bart"),k6t.forEach(t),D1r=r(PIe," \u2014 "),yH=n(PIe,"A",{href:!0});var S6t=s(yH);G1r=r(S6t,"TFBartModel"),S6t.forEach(t),O1r=r(PIe," (BART model)"),PIe.forEach(t),V1r=i(D),aT=n(D,"LI",{});var BIe=s(aT);Z4e=n(BIe,"STRONG",{});var R6t=s(Z4e);X1r=r(R6t,"bert"),R6t.forEach(t),z1r=r(BIe," \u2014 "),xH=n(BIe,"A",{href:!0});var P6t=s(xH);Q1r=r(P6t,"TFBertModel"),P6t.forEach(t),W1r=r(BIe," (BERT model)"),BIe.forEach(t),H1r=i(D),nT=n(D,"LI",{});var IIe=s(nT);e3e=n(IIe,"STRONG",{});var B6t=s(e3e);U1r=r(B6t,"blenderbot"),B6t.forEach(t),J1r=r(IIe," \u2014 "),$H=n(IIe,"A",{href:!0});var I6t=s($H);Y1r=r(I6t,"TFBlenderbotModel"),I6t.forEach(t),K1r=r(IIe," (Blenderbot model)"),IIe.forEach(t),Z1r=i(D),sT=n(D,"LI",{});var NIe=s(sT);o3e=n(NIe,"STRONG",{});var N6t=s(o3e);e7r=r(N6t,"blenderbot-small"),N6t.forEach(t),o7r=r(NIe," \u2014 "),kH=n(NIe,"A",{href:!0});var q6t=s(kH);r7r=r(q6t,"TFBlenderbotSmallModel"),q6t.forEach(t),t7r=r(NIe," (BlenderbotSmall model)"),NIe.forEach(t),a7r=i(D),lT=n(D,"LI",{});var qIe=s(lT);r3e=n(qIe,"STRONG",{});var j6t=s(r3e);n7r=r(j6t,"camembert"),j6t.forEach(t),s7r=r(qIe," \u2014 "),SH=n(qIe,"A",{href:!0});var D6t=s(SH);l7r=r(D6t,"TFCamembertModel"),D6t.forEach(t),i7r=r(qIe," (CamemBERT model)"),qIe.forEach(t),d7r=i(D),iT=n(D,"LI",{});var jIe=s(iT);t3e=n(jIe,"STRONG",{});var G6t=s(t3e);c7r=r(G6t,"clip"),G6t.forEach(t),f7r=r(jIe," \u2014 "),RH=n(jIe,"A",{href:!0});var O6t=s(RH);m7r=r(O6t,"TFCLIPModel"),O6t.forEach(t),g7r=r(jIe," (CLIP model)"),jIe.forEach(t),h7r=i(D),dT=n(D,"LI",{});var DIe=s(dT);a3e=n(DIe,"STRONG",{});var V6t=s(a3e);p7r=r(V6t,"convbert"),V6t.forEach(t),_7r=r(DIe," \u2014 "),PH=n(DIe,"A",{href:!0});var X6t=s(PH);u7r=r(X6t,"TFConvBertModel"),X6t.forEach(t),b7r=r(DIe," (ConvBERT model)"),DIe.forEach(t),v7r=i(D),cT=n(D,"LI",{});var GIe=s(cT);n3e=n(GIe,"STRONG",{});var z6t=s(n3e);F7r=r(z6t,"convnext"),z6t.forEach(t),T7r=r(GIe," \u2014 "),BH=n(GIe,"A",{href:!0});var Q6t=s(BH);M7r=r(Q6t,"TFConvNextModel"),Q6t.forEach(t),E7r=r(GIe," (ConvNeXT model)"),GIe.forEach(t),C7r=i(D),fT=n(D,"LI",{});var OIe=s(fT);s3e=n(OIe,"STRONG",{});var W6t=s(s3e);w7r=r(W6t,"ctrl"),W6t.forEach(t),A7r=r(OIe," \u2014 "),IH=n(OIe,"A",{href:!0});var H6t=s(IH);L7r=r(H6t,"TFCTRLModel"),H6t.forEach(t),y7r=r(OIe," (CTRL model)"),OIe.forEach(t),x7r=i(D),mT=n(D,"LI",{});var VIe=s(mT);l3e=n(VIe,"STRONG",{});var U6t=s(l3e);$7r=r(U6t,"data2vec-vision"),U6t.forEach(t),k7r=r(VIe," \u2014 "),NH=n(VIe,"A",{href:!0});var J6t=s(NH);S7r=r(J6t,"TFData2VecVisionModel"),J6t.forEach(t),R7r=r(VIe," (Data2VecVision model)"),VIe.forEach(t),P7r=i(D),gT=n(D,"LI",{});var XIe=s(gT);i3e=n(XIe,"STRONG",{});var Y6t=s(i3e);B7r=r(Y6t,"deberta"),Y6t.forEach(t),I7r=r(XIe," \u2014 "),qH=n(XIe,"A",{href:!0});var K6t=s(qH);N7r=r(K6t,"TFDebertaModel"),K6t.forEach(t),q7r=r(XIe," (DeBERTa model)"),XIe.forEach(t),j7r=i(D),hT=n(D,"LI",{});var zIe=s(hT);d3e=n(zIe,"STRONG",{});var Z6t=s(d3e);D7r=r(Z6t,"deberta-v2"),Z6t.forEach(t),G7r=r(zIe," \u2014 "),jH=n(zIe,"A",{href:!0});var eLt=s(jH);O7r=r(eLt,"TFDebertaV2Model"),eLt.forEach(t),V7r=r(zIe," (DeBERTa-v2 model)"),zIe.forEach(t),X7r=i(D),pT=n(D,"LI",{});var QIe=s(pT);c3e=n(QIe,"STRONG",{});var oLt=s(c3e);z7r=r(oLt,"distilbert"),oLt.forEach(t),Q7r=r(QIe," \u2014 "),DH=n(QIe,"A",{href:!0});var rLt=s(DH);W7r=r(rLt,"TFDistilBertModel"),rLt.forEach(t),H7r=r(QIe," (DistilBERT model)"),QIe.forEach(t),U7r=i(D),_T=n(D,"LI",{});var WIe=s(_T);f3e=n(WIe,"STRONG",{});var tLt=s(f3e);J7r=r(tLt,"dpr"),tLt.forEach(t),Y7r=r(WIe," \u2014 "),GH=n(WIe,"A",{href:!0});var aLt=s(GH);K7r=r(aLt,"TFDPRQuestionEncoder"),aLt.forEach(t),Z7r=r(WIe," (DPR model)"),WIe.forEach(t),e2r=i(D),uT=n(D,"LI",{});var HIe=s(uT);m3e=n(HIe,"STRONG",{});var nLt=s(m3e);o2r=r(nLt,"electra"),nLt.forEach(t),r2r=r(HIe," \u2014 "),OH=n(HIe,"A",{href:!0});var sLt=s(OH);t2r=r(sLt,"TFElectraModel"),sLt.forEach(t),a2r=r(HIe," (ELECTRA model)"),HIe.forEach(t),n2r=i(D),bT=n(D,"LI",{});var UIe=s(bT);g3e=n(UIe,"STRONG",{});var lLt=s(g3e);s2r=r(lLt,"flaubert"),lLt.forEach(t),l2r=r(UIe," \u2014 "),VH=n(UIe,"A",{href:!0});var iLt=s(VH);i2r=r(iLt,"TFFlaubertModel"),iLt.forEach(t),d2r=r(UIe," (FlauBERT model)"),UIe.forEach(t),c2r=i(D),Hs=n(D,"LI",{});var mS=s(Hs);h3e=n(mS,"STRONG",{});var dLt=s(h3e);f2r=r(dLt,"funnel"),dLt.forEach(t),m2r=r(mS," \u2014 "),XH=n(mS,"A",{href:!0});var cLt=s(XH);g2r=r(cLt,"TFFunnelModel"),cLt.forEach(t),h2r=r(mS," or "),zH=n(mS,"A",{href:!0});var fLt=s(zH);p2r=r(fLt,"TFFunnelBaseModel"),fLt.forEach(t),_2r=r(mS," (Funnel Transformer model)"),mS.forEach(t),u2r=i(D),vT=n(D,"LI",{});var JIe=s(vT);p3e=n(JIe,"STRONG",{});var mLt=s(p3e);b2r=r(mLt,"gpt2"),mLt.forEach(t),v2r=r(JIe," \u2014 "),QH=n(JIe,"A",{href:!0});var gLt=s(QH);F2r=r(gLt,"TFGPT2Model"),gLt.forEach(t),T2r=r(JIe," (OpenAI GPT-2 model)"),JIe.forEach(t),M2r=i(D),FT=n(D,"LI",{});var YIe=s(FT);_3e=n(YIe,"STRONG",{});var hLt=s(_3e);E2r=r(hLt,"gptj"),hLt.forEach(t),C2r=r(YIe," \u2014 "),WH=n(YIe,"A",{href:!0});var pLt=s(WH);w2r=r(pLt,"TFGPTJModel"),pLt.forEach(t),A2r=r(YIe," (GPT-J model)"),YIe.forEach(t),L2r=i(D),TT=n(D,"LI",{});var KIe=s(TT);u3e=n(KIe,"STRONG",{});var _Lt=s(u3e);y2r=r(_Lt,"hubert"),_Lt.forEach(t),x2r=r(KIe," \u2014 "),HH=n(KIe,"A",{href:!0});var uLt=s(HH);$2r=r(uLt,"TFHubertModel"),uLt.forEach(t),k2r=r(KIe," (Hubert model)"),KIe.forEach(t),S2r=i(D),MT=n(D,"LI",{});var ZIe=s(MT);b3e=n(ZIe,"STRONG",{});var bLt=s(b3e);R2r=r(bLt,"layoutlm"),bLt.forEach(t),P2r=r(ZIe," \u2014 "),UH=n(ZIe,"A",{href:!0});var vLt=s(UH);B2r=r(vLt,"TFLayoutLMModel"),vLt.forEach(t),I2r=r(ZIe," (LayoutLM model)"),ZIe.forEach(t),N2r=i(D),ET=n(D,"LI",{});var eNe=s(ET);v3e=n(eNe,"STRONG",{});var FLt=s(v3e);q2r=r(FLt,"led"),FLt.forEach(t),j2r=r(eNe," \u2014 "),JH=n(eNe,"A",{href:!0});var TLt=s(JH);D2r=r(TLt,"TFLEDModel"),TLt.forEach(t),G2r=r(eNe," (LED model)"),eNe.forEach(t),O2r=i(D),CT=n(D,"LI",{});var oNe=s(CT);F3e=n(oNe,"STRONG",{});var MLt=s(F3e);V2r=r(MLt,"longformer"),MLt.forEach(t),X2r=r(oNe," \u2014 "),YH=n(oNe,"A",{href:!0});var ELt=s(YH);z2r=r(ELt,"TFLongformerModel"),ELt.forEach(t),Q2r=r(oNe," (Longformer model)"),oNe.forEach(t),W2r=i(D),wT=n(D,"LI",{});var rNe=s(wT);T3e=n(rNe,"STRONG",{});var CLt=s(T3e);H2r=r(CLt,"lxmert"),CLt.forEach(t),U2r=r(rNe," \u2014 "),KH=n(rNe,"A",{href:!0});var wLt=s(KH);J2r=r(wLt,"TFLxmertModel"),wLt.forEach(t),Y2r=r(rNe," (LXMERT model)"),rNe.forEach(t),K2r=i(D),AT=n(D,"LI",{});var tNe=s(AT);M3e=n(tNe,"STRONG",{});var ALt=s(M3e);Z2r=r(ALt,"marian"),ALt.forEach(t),ebr=r(tNe," \u2014 "),ZH=n(tNe,"A",{href:!0});var LLt=s(ZH);obr=r(LLt,"TFMarianModel"),LLt.forEach(t),rbr=r(tNe," (Marian model)"),tNe.forEach(t),tbr=i(D),LT=n(D,"LI",{});var aNe=s(LT);E3e=n(aNe,"STRONG",{});var yLt=s(E3e);abr=r(yLt,"mbart"),yLt.forEach(t),nbr=r(aNe," \u2014 "),eU=n(aNe,"A",{href:!0});var xLt=s(eU);sbr=r(xLt,"TFMBartModel"),xLt.forEach(t),lbr=r(aNe," (mBART model)"),aNe.forEach(t),ibr=i(D),yT=n(D,"LI",{});var nNe=s(yT);C3e=n(nNe,"STRONG",{});var $Lt=s(C3e);dbr=r($Lt,"mobilebert"),$Lt.forEach(t),cbr=r(nNe," \u2014 "),oU=n(nNe,"A",{href:!0});var kLt=s(oU);fbr=r(kLt,"TFMobileBertModel"),kLt.forEach(t),mbr=r(nNe," (MobileBERT model)"),nNe.forEach(t),gbr=i(D),xT=n(D,"LI",{});var sNe=s(xT);w3e=n(sNe,"STRONG",{});var SLt=s(w3e);hbr=r(SLt,"mpnet"),SLt.forEach(t),pbr=r(sNe," \u2014 "),rU=n(sNe,"A",{href:!0});var RLt=s(rU);_br=r(RLt,"TFMPNetModel"),RLt.forEach(t),ubr=r(sNe," (MPNet model)"),sNe.forEach(t),bbr=i(D),$T=n(D,"LI",{});var lNe=s($T);A3e=n(lNe,"STRONG",{});var PLt=s(A3e);vbr=r(PLt,"mt5"),PLt.forEach(t),Fbr=r(lNe," \u2014 "),tU=n(lNe,"A",{href:!0});var BLt=s(tU);Tbr=r(BLt,"TFMT5Model"),BLt.forEach(t),Mbr=r(lNe," (MT5 model)"),lNe.forEach(t),Ebr=i(D),kT=n(D,"LI",{});var iNe=s(kT);L3e=n(iNe,"STRONG",{});var ILt=s(L3e);Cbr=r(ILt,"openai-gpt"),ILt.forEach(t),wbr=r(iNe," \u2014 "),aU=n(iNe,"A",{href:!0});var NLt=s(aU);Abr=r(NLt,"TFOpenAIGPTModel"),NLt.forEach(t),Lbr=r(iNe," (OpenAI GPT model)"),iNe.forEach(t),ybr=i(D),ST=n(D,"LI",{});var dNe=s(ST);y3e=n(dNe,"STRONG",{});var qLt=s(y3e);xbr=r(qLt,"opt"),qLt.forEach(t),$br=r(dNe," \u2014 "),nU=n(dNe,"A",{href:!0});var jLt=s(nU);kbr=r(jLt,"TFOPTModel"),jLt.forEach(t),Sbr=r(dNe," (OPT model)"),dNe.forEach(t),Rbr=i(D),RT=n(D,"LI",{});var cNe=s(RT);x3e=n(cNe,"STRONG",{});var DLt=s(x3e);Pbr=r(DLt,"pegasus"),DLt.forEach(t),Bbr=r(cNe," \u2014 "),sU=n(cNe,"A",{href:!0});var GLt=s(sU);Ibr=r(GLt,"TFPegasusModel"),GLt.forEach(t),Nbr=r(cNe," (Pegasus model)"),cNe.forEach(t),qbr=i(D),PT=n(D,"LI",{});var fNe=s(PT);$3e=n(fNe,"STRONG",{});var OLt=s($3e);jbr=r(OLt,"rembert"),OLt.forEach(t),Dbr=r(fNe," \u2014 "),lU=n(fNe,"A",{href:!0});var VLt=s(lU);Gbr=r(VLt,"TFRemBertModel"),VLt.forEach(t),Obr=r(fNe," (RemBERT model)"),fNe.forEach(t),Vbr=i(D),BT=n(D,"LI",{});var mNe=s(BT);k3e=n(mNe,"STRONG",{});var XLt=s(k3e);Xbr=r(XLt,"roberta"),XLt.forEach(t),zbr=r(mNe," \u2014 "),iU=n(mNe,"A",{href:!0});var zLt=s(iU);Qbr=r(zLt,"TFRobertaModel"),zLt.forEach(t),Wbr=r(mNe," (RoBERTa model)"),mNe.forEach(t),Hbr=i(D),IT=n(D,"LI",{});var gNe=s(IT);S3e=n(gNe,"STRONG",{});var QLt=s(S3e);Ubr=r(QLt,"roformer"),QLt.forEach(t),Jbr=r(gNe," \u2014 "),dU=n(gNe,"A",{href:!0});var WLt=s(dU);Ybr=r(WLt,"TFRoFormerModel"),WLt.forEach(t),Kbr=r(gNe," (RoFormer model)"),gNe.forEach(t),Zbr=i(D),NT=n(D,"LI",{});var hNe=s(NT);R3e=n(hNe,"STRONG",{});var HLt=s(R3e);e4r=r(HLt,"speech_to_text"),HLt.forEach(t),o4r=r(hNe," \u2014 "),cU=n(hNe,"A",{href:!0});var ULt=s(cU);r4r=r(ULt,"TFSpeech2TextModel"),ULt.forEach(t),t4r=r(hNe," (Speech2Text model)"),hNe.forEach(t),a4r=i(D),qT=n(D,"LI",{});var pNe=s(qT);P3e=n(pNe,"STRONG",{});var JLt=s(P3e);n4r=r(JLt,"swin"),JLt.forEach(t),s4r=r(pNe," \u2014 "),fU=n(pNe,"A",{href:!0});var YLt=s(fU);l4r=r(YLt,"TFSwinModel"),YLt.forEach(t),i4r=r(pNe," (Swin Transformer model)"),pNe.forEach(t),d4r=i(D),jT=n(D,"LI",{});var _Ne=s(jT);B3e=n(_Ne,"STRONG",{});var KLt=s(B3e);c4r=r(KLt,"t5"),KLt.forEach(t),f4r=r(_Ne," \u2014 "),mU=n(_Ne,"A",{href:!0});var ZLt=s(mU);m4r=r(ZLt,"TFT5Model"),ZLt.forEach(t),g4r=r(_Ne," (T5 model)"),_Ne.forEach(t),h4r=i(D),DT=n(D,"LI",{});var uNe=s(DT);I3e=n(uNe,"STRONG",{});var eyt=s(I3e);p4r=r(eyt,"tapas"),eyt.forEach(t),_4r=r(uNe," \u2014 "),gU=n(uNe,"A",{href:!0});var oyt=s(gU);u4r=r(oyt,"TFTapasModel"),oyt.forEach(t),b4r=r(uNe," (TAPAS model)"),uNe.forEach(t),v4r=i(D),GT=n(D,"LI",{});var bNe=s(GT);N3e=n(bNe,"STRONG",{});var ryt=s(N3e);F4r=r(ryt,"transfo-xl"),ryt.forEach(t),T4r=r(bNe," \u2014 "),hU=n(bNe,"A",{href:!0});var tyt=s(hU);M4r=r(tyt,"TFTransfoXLModel"),tyt.forEach(t),E4r=r(bNe," (Transformer-XL model)"),bNe.forEach(t),C4r=i(D),OT=n(D,"LI",{});var vNe=s(OT);q3e=n(vNe,"STRONG",{});var ayt=s(q3e);w4r=r(ayt,"vit"),ayt.forEach(t),A4r=r(vNe," \u2014 "),pU=n(vNe,"A",{href:!0});var nyt=s(pU);L4r=r(nyt,"TFViTModel"),nyt.forEach(t),y4r=r(vNe," (ViT model)"),vNe.forEach(t),x4r=i(D),VT=n(D,"LI",{});var FNe=s(VT);j3e=n(FNe,"STRONG",{});var syt=s(j3e);$4r=r(syt,"vit_mae"),syt.forEach(t),k4r=r(FNe," \u2014 "),_U=n(FNe,"A",{href:!0});var lyt=s(_U);S4r=r(lyt,"TFViTMAEModel"),lyt.forEach(t),R4r=r(FNe," (ViTMAE model)"),FNe.forEach(t),P4r=i(D),XT=n(D,"LI",{});var TNe=s(XT);D3e=n(TNe,"STRONG",{});var iyt=s(D3e);B4r=r(iyt,"wav2vec2"),iyt.forEach(t),I4r=r(TNe," \u2014 "),uU=n(TNe,"A",{href:!0});var dyt=s(uU);N4r=r(dyt,"TFWav2Vec2Model"),dyt.forEach(t),q4r=r(TNe," (Wav2Vec2 model)"),TNe.forEach(t),j4r=i(D),zT=n(D,"LI",{});var MNe=s(zT);G3e=n(MNe,"STRONG",{});var cyt=s(G3e);D4r=r(cyt,"xlm"),cyt.forEach(t),G4r=r(MNe," \u2014 "),bU=n(MNe,"A",{href:!0});var fyt=s(bU);O4r=r(fyt,"TFXLMModel"),fyt.forEach(t),V4r=r(MNe," (XLM model)"),MNe.forEach(t),X4r=i(D),QT=n(D,"LI",{});var ENe=s(QT);O3e=n(ENe,"STRONG",{});var myt=s(O3e);z4r=r(myt,"xlm-roberta"),myt.forEach(t),Q4r=r(ENe," \u2014 "),vU=n(ENe,"A",{href:!0});var gyt=s(vU);W4r=r(gyt,"TFXLMRobertaModel"),gyt.forEach(t),H4r=r(ENe," (XLM-RoBERTa model)"),ENe.forEach(t),U4r=i(D),WT=n(D,"LI",{});var CNe=s(WT);V3e=n(CNe,"STRONG",{});var hyt=s(V3e);J4r=r(hyt,"xlnet"),hyt.forEach(t),Y4r=r(CNe," \u2014 "),FU=n(CNe,"A",{href:!0});var pyt=s(FU);K4r=r(pyt,"TFXLNetModel"),pyt.forEach(t),Z4r=r(CNe," (XLNet model)"),CNe.forEach(t),D.forEach(t),e3r=i(Al),T(HT.$$.fragment,Al),Al.forEach(t),wl.forEach(t),SVe=i(f),nc=n(f,"H2",{class:!0});var Dze=s(nc);UT=n(Dze,"A",{id:!0,class:!0,href:!0});var _yt=s(UT);X3e=n(_yt,"SPAN",{});var uyt=s(X3e);T(x9.$$.fragment,uyt),uyt.forEach(t),_yt.forEach(t),o3r=i(Dze),z3e=n(Dze,"SPAN",{});var byt=s(z3e);r3r=r(byt,"TFAutoModelForPreTraining"),byt.forEach(t),Dze.forEach(t),RVe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T($9.$$.fragment,Ll),t3r=i(Ll),sc=n(Ll,"P",{});var qre=s(sc);a3r=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TU=n(qre,"A",{href:!0});var vyt=s(TU);n3r=r(vyt,"from_pretrained()"),vyt.forEach(t),s3r=r(qre," class method or the "),MU=n(qre,"A",{href:!0});var Fyt=s(MU);l3r=r(Fyt,"from_config()"),Fyt.forEach(t),i3r=r(qre,` class
method.`),qre.forEach(t),d3r=i(Ll),k9=n(Ll,"P",{});var Gze=s(k9);c3r=r(Gze,"This class cannot be instantiated directly using "),Q3e=n(Gze,"CODE",{});var Tyt=s(Q3e);f3r=r(Tyt,"__init__()"),Tyt.forEach(t),m3r=r(Gze," (throws an error)."),Gze.forEach(t),g3r=i(Ll),kt=n(Ll,"DIV",{class:!0});var N6=s(kt);T(S9.$$.fragment,N6),h3r=i(N6),W3e=n(N6,"P",{});var Myt=s(W3e);p3r=r(Myt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Myt.forEach(t),_3r=i(N6),lc=n(N6,"P",{});var jre=s(lc);u3r=r(jre,`Note:
Loading a model from its configuration file does `),H3e=n(jre,"STRONG",{});var Eyt=s(H3e);b3r=r(Eyt,"not"),Eyt.forEach(t),v3r=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(jre,"A",{href:!0});var Cyt=s(EU);F3r=r(Cyt,"from_pretrained()"),Cyt.forEach(t),T3r=r(jre," to load the model weights."),jre.forEach(t),M3r=i(N6),T(JT.$$.fragment,N6),N6.forEach(t),E3r=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(R9.$$.fragment,yl),C3r=i(yl),U3e=n(yl,"P",{});var wyt=s(U3e);w3r=r(wyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wyt.forEach(t),A3r=i(yl),nn=n(yl,"P",{});var q6=s(nn);L3r=r(q6,"The model class to instantiate is selected based on the "),J3e=n(q6,"CODE",{});var Ayt=s(J3e);y3r=r(Ayt,"model_type"),Ayt.forEach(t),x3r=r(q6,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(q6,"CODE",{});var Lyt=s(Y3e);$3r=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),k3r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(q6,"CODE",{});var yyt=s(K3e);S3r=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),R3r=r(q6,":"),q6.forEach(t),P3r=i(yl),se=n(yl,"UL",{});var le=s(se);YT=n(le,"LI",{});var wNe=s(YT);Z3e=n(wNe,"STRONG",{});var xyt=s(Z3e);B3r=r(xyt,"albert"),xyt.forEach(t),I3r=r(wNe," \u2014 "),CU=n(wNe,"A",{href:!0});var $yt=s(CU);N3r=r($yt,"TFAlbertForPreTraining"),$yt.forEach(t),q3r=r(wNe," (ALBERT model)"),wNe.forEach(t),j3r=i(le),KT=n(le,"LI",{});var ANe=s(KT);eve=n(ANe,"STRONG",{});var kyt=s(eve);D3r=r(kyt,"bart"),kyt.forEach(t),G3r=r(ANe," \u2014 "),wU=n(ANe,"A",{href:!0});var Syt=s(wU);O3r=r(Syt,"TFBartForConditionalGeneration"),Syt.forEach(t),V3r=r(ANe," (BART model)"),ANe.forEach(t),X3r=i(le),ZT=n(le,"LI",{});var LNe=s(ZT);ove=n(LNe,"STRONG",{});var Ryt=s(ove);z3r=r(Ryt,"bert"),Ryt.forEach(t),Q3r=r(LNe," \u2014 "),AU=n(LNe,"A",{href:!0});var Pyt=s(AU);W3r=r(Pyt,"TFBertForPreTraining"),Pyt.forEach(t),H3r=r(LNe," (BERT model)"),LNe.forEach(t),U3r=i(le),eM=n(le,"LI",{});var yNe=s(eM);rve=n(yNe,"STRONG",{});var Byt=s(rve);J3r=r(Byt,"camembert"),Byt.forEach(t),Y3r=r(yNe," \u2014 "),LU=n(yNe,"A",{href:!0});var Iyt=s(LU);K3r=r(Iyt,"TFCamembertForMaskedLM"),Iyt.forEach(t),Z3r=r(yNe," (CamemBERT model)"),yNe.forEach(t),evr=i(le),oM=n(le,"LI",{});var xNe=s(oM);tve=n(xNe,"STRONG",{});var Nyt=s(tve);ovr=r(Nyt,"ctrl"),Nyt.forEach(t),rvr=r(xNe," \u2014 "),yU=n(xNe,"A",{href:!0});var qyt=s(yU);tvr=r(qyt,"TFCTRLLMHeadModel"),qyt.forEach(t),avr=r(xNe," (CTRL model)"),xNe.forEach(t),nvr=i(le),rM=n(le,"LI",{});var $Ne=s(rM);ave=n($Ne,"STRONG",{});var jyt=s(ave);svr=r(jyt,"distilbert"),jyt.forEach(t),lvr=r($Ne," \u2014 "),xU=n($Ne,"A",{href:!0});var Dyt=s(xU);ivr=r(Dyt,"TFDistilBertForMaskedLM"),Dyt.forEach(t),dvr=r($Ne," (DistilBERT model)"),$Ne.forEach(t),cvr=i(le),tM=n(le,"LI",{});var kNe=s(tM);nve=n(kNe,"STRONG",{});var Gyt=s(nve);fvr=r(Gyt,"electra"),Gyt.forEach(t),mvr=r(kNe," \u2014 "),$U=n(kNe,"A",{href:!0});var Oyt=s($U);gvr=r(Oyt,"TFElectraForPreTraining"),Oyt.forEach(t),hvr=r(kNe," (ELECTRA model)"),kNe.forEach(t),pvr=i(le),aM=n(le,"LI",{});var SNe=s(aM);sve=n(SNe,"STRONG",{});var Vyt=s(sve);_vr=r(Vyt,"flaubert"),Vyt.forEach(t),uvr=r(SNe," \u2014 "),kU=n(SNe,"A",{href:!0});var Xyt=s(kU);bvr=r(Xyt,"TFFlaubertWithLMHeadModel"),Xyt.forEach(t),vvr=r(SNe," (FlauBERT model)"),SNe.forEach(t),Fvr=i(le),nM=n(le,"LI",{});var RNe=s(nM);lve=n(RNe,"STRONG",{});var zyt=s(lve);Tvr=r(zyt,"funnel"),zyt.forEach(t),Mvr=r(RNe," \u2014 "),SU=n(RNe,"A",{href:!0});var Qyt=s(SU);Evr=r(Qyt,"TFFunnelForPreTraining"),Qyt.forEach(t),Cvr=r(RNe," (Funnel Transformer model)"),RNe.forEach(t),wvr=i(le),sM=n(le,"LI",{});var PNe=s(sM);ive=n(PNe,"STRONG",{});var Wyt=s(ive);Avr=r(Wyt,"gpt2"),Wyt.forEach(t),Lvr=r(PNe," \u2014 "),RU=n(PNe,"A",{href:!0});var Hyt=s(RU);yvr=r(Hyt,"TFGPT2LMHeadModel"),Hyt.forEach(t),xvr=r(PNe," (OpenAI GPT-2 model)"),PNe.forEach(t),$vr=i(le),lM=n(le,"LI",{});var BNe=s(lM);dve=n(BNe,"STRONG",{});var Uyt=s(dve);kvr=r(Uyt,"layoutlm"),Uyt.forEach(t),Svr=r(BNe," \u2014 "),PU=n(BNe,"A",{href:!0});var Jyt=s(PU);Rvr=r(Jyt,"TFLayoutLMForMaskedLM"),Jyt.forEach(t),Pvr=r(BNe," (LayoutLM model)"),BNe.forEach(t),Bvr=i(le),iM=n(le,"LI",{});var INe=s(iM);cve=n(INe,"STRONG",{});var Yyt=s(cve);Ivr=r(Yyt,"lxmert"),Yyt.forEach(t),Nvr=r(INe," \u2014 "),BU=n(INe,"A",{href:!0});var Kyt=s(BU);qvr=r(Kyt,"TFLxmertForPreTraining"),Kyt.forEach(t),jvr=r(INe," (LXMERT model)"),INe.forEach(t),Dvr=i(le),dM=n(le,"LI",{});var NNe=s(dM);fve=n(NNe,"STRONG",{});var Zyt=s(fve);Gvr=r(Zyt,"mobilebert"),Zyt.forEach(t),Ovr=r(NNe," \u2014 "),IU=n(NNe,"A",{href:!0});var e8t=s(IU);Vvr=r(e8t,"TFMobileBertForPreTraining"),e8t.forEach(t),Xvr=r(NNe," (MobileBERT model)"),NNe.forEach(t),zvr=i(le),cM=n(le,"LI",{});var qNe=s(cM);mve=n(qNe,"STRONG",{});var o8t=s(mve);Qvr=r(o8t,"mpnet"),o8t.forEach(t),Wvr=r(qNe," \u2014 "),NU=n(qNe,"A",{href:!0});var r8t=s(NU);Hvr=r(r8t,"TFMPNetForMaskedLM"),r8t.forEach(t),Uvr=r(qNe," (MPNet model)"),qNe.forEach(t),Jvr=i(le),fM=n(le,"LI",{});var jNe=s(fM);gve=n(jNe,"STRONG",{});var t8t=s(gve);Yvr=r(t8t,"openai-gpt"),t8t.forEach(t),Kvr=r(jNe," \u2014 "),qU=n(jNe,"A",{href:!0});var a8t=s(qU);Zvr=r(a8t,"TFOpenAIGPTLMHeadModel"),a8t.forEach(t),eFr=r(jNe," (OpenAI GPT model)"),jNe.forEach(t),oFr=i(le),mM=n(le,"LI",{});var DNe=s(mM);hve=n(DNe,"STRONG",{});var n8t=s(hve);rFr=r(n8t,"roberta"),n8t.forEach(t),tFr=r(DNe," \u2014 "),jU=n(DNe,"A",{href:!0});var s8t=s(jU);aFr=r(s8t,"TFRobertaForMaskedLM"),s8t.forEach(t),nFr=r(DNe," (RoBERTa model)"),DNe.forEach(t),sFr=i(le),gM=n(le,"LI",{});var GNe=s(gM);pve=n(GNe,"STRONG",{});var l8t=s(pve);lFr=r(l8t,"t5"),l8t.forEach(t),iFr=r(GNe," \u2014 "),DU=n(GNe,"A",{href:!0});var i8t=s(DU);dFr=r(i8t,"TFT5ForConditionalGeneration"),i8t.forEach(t),cFr=r(GNe," (T5 model)"),GNe.forEach(t),fFr=i(le),hM=n(le,"LI",{});var ONe=s(hM);_ve=n(ONe,"STRONG",{});var d8t=s(_ve);mFr=r(d8t,"tapas"),d8t.forEach(t),gFr=r(ONe," \u2014 "),GU=n(ONe,"A",{href:!0});var c8t=s(GU);hFr=r(c8t,"TFTapasForMaskedLM"),c8t.forEach(t),pFr=r(ONe," (TAPAS model)"),ONe.forEach(t),_Fr=i(le),pM=n(le,"LI",{});var VNe=s(pM);uve=n(VNe,"STRONG",{});var f8t=s(uve);uFr=r(f8t,"transfo-xl"),f8t.forEach(t),bFr=r(VNe," \u2014 "),OU=n(VNe,"A",{href:!0});var m8t=s(OU);vFr=r(m8t,"TFTransfoXLLMHeadModel"),m8t.forEach(t),FFr=r(VNe," (Transformer-XL model)"),VNe.forEach(t),TFr=i(le),_M=n(le,"LI",{});var XNe=s(_M);bve=n(XNe,"STRONG",{});var g8t=s(bve);MFr=r(g8t,"vit_mae"),g8t.forEach(t),EFr=r(XNe," \u2014 "),VU=n(XNe,"A",{href:!0});var h8t=s(VU);CFr=r(h8t,"TFViTMAEForPreTraining"),h8t.forEach(t),wFr=r(XNe," (ViTMAE model)"),XNe.forEach(t),AFr=i(le),uM=n(le,"LI",{});var zNe=s(uM);vve=n(zNe,"STRONG",{});var p8t=s(vve);LFr=r(p8t,"xlm"),p8t.forEach(t),yFr=r(zNe," \u2014 "),XU=n(zNe,"A",{href:!0});var _8t=s(XU);xFr=r(_8t,"TFXLMWithLMHeadModel"),_8t.forEach(t),$Fr=r(zNe," (XLM model)"),zNe.forEach(t),kFr=i(le),bM=n(le,"LI",{});var QNe=s(bM);Fve=n(QNe,"STRONG",{});var u8t=s(Fve);SFr=r(u8t,"xlm-roberta"),u8t.forEach(t),RFr=r(QNe," \u2014 "),zU=n(QNe,"A",{href:!0});var b8t=s(zU);PFr=r(b8t,"TFXLMRobertaForMaskedLM"),b8t.forEach(t),BFr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),IFr=i(le),vM=n(le,"LI",{});var WNe=s(vM);Tve=n(WNe,"STRONG",{});var v8t=s(Tve);NFr=r(v8t,"xlnet"),v8t.forEach(t),qFr=r(WNe," \u2014 "),QU=n(WNe,"A",{href:!0});var F8t=s(QU);jFr=r(F8t,"TFXLNetLMHeadModel"),F8t.forEach(t),DFr=r(WNe," (XLNet model)"),WNe.forEach(t),le.forEach(t),GFr=i(yl),T(FM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),PVe=i(f),ic=n(f,"H2",{class:!0});var Oze=s(ic);TM=n(Oze,"A",{id:!0,class:!0,href:!0});var T8t=s(TM);Mve=n(T8t,"SPAN",{});var M8t=s(Mve);T(P9.$$.fragment,M8t),M8t.forEach(t),T8t.forEach(t),OFr=i(Oze),Eve=n(Oze,"SPAN",{});var E8t=s(Eve);VFr=r(E8t,"TFAutoModelForCausalLM"),E8t.forEach(t),Oze.forEach(t),BVe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(B9.$$.fragment,xl),XFr=i(xl),dc=n(xl,"P",{});var Dre=s(dc);zFr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WU=n(Dre,"A",{href:!0});var C8t=s(WU);QFr=r(C8t,"from_pretrained()"),C8t.forEach(t),WFr=r(Dre," class method or the "),HU=n(Dre,"A",{href:!0});var w8t=s(HU);HFr=r(w8t,"from_config()"),w8t.forEach(t),UFr=r(Dre,` class
method.`),Dre.forEach(t),JFr=i(xl),I9=n(xl,"P",{});var Vze=s(I9);YFr=r(Vze,"This class cannot be instantiated directly using "),Cve=n(Vze,"CODE",{});var A8t=s(Cve);KFr=r(A8t,"__init__()"),A8t.forEach(t),ZFr=r(Vze," (throws an error)."),Vze.forEach(t),eTr=i(xl),St=n(xl,"DIV",{class:!0});var j6=s(St);T(N9.$$.fragment,j6),oTr=i(j6),wve=n(j6,"P",{});var L8t=s(wve);rTr=r(L8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),L8t.forEach(t),tTr=i(j6),cc=n(j6,"P",{});var Gre=s(cc);aTr=r(Gre,`Note:
Loading a model from its configuration file does `),Ave=n(Gre,"STRONG",{});var y8t=s(Ave);nTr=r(y8t,"not"),y8t.forEach(t),sTr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(Gre,"A",{href:!0});var x8t=s(UU);lTr=r(x8t,"from_pretrained()"),x8t.forEach(t),iTr=r(Gre," to load the model weights."),Gre.forEach(t),dTr=i(j6),T(MM.$$.fragment,j6),j6.forEach(t),cTr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(q9.$$.fragment,$l),fTr=i($l),Lve=n($l,"P",{});var $8t=s(Lve);mTr=r($8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$8t.forEach(t),gTr=i($l),sn=n($l,"P",{});var D6=s(sn);hTr=r(D6,"The model class to instantiate is selected based on the "),yve=n(D6,"CODE",{});var k8t=s(yve);pTr=r(k8t,"model_type"),k8t.forEach(t),_Tr=r(D6,` property of the config object (either
passed as an argument or loaded from `),xve=n(D6,"CODE",{});var S8t=s(xve);uTr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),bTr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(D6,"CODE",{});var R8t=s($ve);vTr=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),FTr=r(D6,":"),D6.forEach(t),TTr=i($l),Me=n($l,"UL",{});var Ce=s(Me);EM=n(Ce,"LI",{});var HNe=s(EM);kve=n(HNe,"STRONG",{});var P8t=s(kve);MTr=r(P8t,"bert"),P8t.forEach(t),ETr=r(HNe," \u2014 "),JU=n(HNe,"A",{href:!0});var B8t=s(JU);CTr=r(B8t,"TFBertLMHeadModel"),B8t.forEach(t),wTr=r(HNe," (BERT model)"),HNe.forEach(t),ATr=i(Ce),CM=n(Ce,"LI",{});var UNe=s(CM);Sve=n(UNe,"STRONG",{});var I8t=s(Sve);LTr=r(I8t,"camembert"),I8t.forEach(t),yTr=r(UNe," \u2014 "),YU=n(UNe,"A",{href:!0});var N8t=s(YU);xTr=r(N8t,"TFCamembertForCausalLM"),N8t.forEach(t),$Tr=r(UNe," (CamemBERT model)"),UNe.forEach(t),kTr=i(Ce),wM=n(Ce,"LI",{});var JNe=s(wM);Rve=n(JNe,"STRONG",{});var q8t=s(Rve);STr=r(q8t,"ctrl"),q8t.forEach(t),RTr=r(JNe," \u2014 "),KU=n(JNe,"A",{href:!0});var j8t=s(KU);PTr=r(j8t,"TFCTRLLMHeadModel"),j8t.forEach(t),BTr=r(JNe," (CTRL model)"),JNe.forEach(t),ITr=i(Ce),AM=n(Ce,"LI",{});var YNe=s(AM);Pve=n(YNe,"STRONG",{});var D8t=s(Pve);NTr=r(D8t,"gpt2"),D8t.forEach(t),qTr=r(YNe," \u2014 "),ZU=n(YNe,"A",{href:!0});var G8t=s(ZU);jTr=r(G8t,"TFGPT2LMHeadModel"),G8t.forEach(t),DTr=r(YNe," (OpenAI GPT-2 model)"),YNe.forEach(t),GTr=i(Ce),LM=n(Ce,"LI",{});var KNe=s(LM);Bve=n(KNe,"STRONG",{});var O8t=s(Bve);OTr=r(O8t,"gptj"),O8t.forEach(t),VTr=r(KNe," \u2014 "),eJ=n(KNe,"A",{href:!0});var V8t=s(eJ);XTr=r(V8t,"TFGPTJForCausalLM"),V8t.forEach(t),zTr=r(KNe," (GPT-J model)"),KNe.forEach(t),QTr=i(Ce),yM=n(Ce,"LI",{});var ZNe=s(yM);Ive=n(ZNe,"STRONG",{});var X8t=s(Ive);WTr=r(X8t,"openai-gpt"),X8t.forEach(t),HTr=r(ZNe," \u2014 "),oJ=n(ZNe,"A",{href:!0});var z8t=s(oJ);UTr=r(z8t,"TFOpenAIGPTLMHeadModel"),z8t.forEach(t),JTr=r(ZNe," (OpenAI GPT model)"),ZNe.forEach(t),YTr=i(Ce),xM=n(Ce,"LI",{});var eqe=s(xM);Nve=n(eqe,"STRONG",{});var Q8t=s(Nve);KTr=r(Q8t,"opt"),Q8t.forEach(t),ZTr=r(eqe," \u2014 "),rJ=n(eqe,"A",{href:!0});var W8t=s(rJ);eMr=r(W8t,"TFOPTForCausalLM"),W8t.forEach(t),oMr=r(eqe," (OPT model)"),eqe.forEach(t),rMr=i(Ce),$M=n(Ce,"LI",{});var oqe=s($M);qve=n(oqe,"STRONG",{});var H8t=s(qve);tMr=r(H8t,"rembert"),H8t.forEach(t),aMr=r(oqe," \u2014 "),tJ=n(oqe,"A",{href:!0});var U8t=s(tJ);nMr=r(U8t,"TFRemBertForCausalLM"),U8t.forEach(t),sMr=r(oqe," (RemBERT model)"),oqe.forEach(t),lMr=i(Ce),kM=n(Ce,"LI",{});var rqe=s(kM);jve=n(rqe,"STRONG",{});var J8t=s(jve);iMr=r(J8t,"roberta"),J8t.forEach(t),dMr=r(rqe," \u2014 "),aJ=n(rqe,"A",{href:!0});var Y8t=s(aJ);cMr=r(Y8t,"TFRobertaForCausalLM"),Y8t.forEach(t),fMr=r(rqe," (RoBERTa model)"),rqe.forEach(t),mMr=i(Ce),SM=n(Ce,"LI",{});var tqe=s(SM);Dve=n(tqe,"STRONG",{});var K8t=s(Dve);gMr=r(K8t,"roformer"),K8t.forEach(t),hMr=r(tqe," \u2014 "),nJ=n(tqe,"A",{href:!0});var Z8t=s(nJ);pMr=r(Z8t,"TFRoFormerForCausalLM"),Z8t.forEach(t),_Mr=r(tqe," (RoFormer model)"),tqe.forEach(t),uMr=i(Ce),RM=n(Ce,"LI",{});var aqe=s(RM);Gve=n(aqe,"STRONG",{});var e9t=s(Gve);bMr=r(e9t,"transfo-xl"),e9t.forEach(t),vMr=r(aqe," \u2014 "),sJ=n(aqe,"A",{href:!0});var o9t=s(sJ);FMr=r(o9t,"TFTransfoXLLMHeadModel"),o9t.forEach(t),TMr=r(aqe," (Transformer-XL model)"),aqe.forEach(t),MMr=i(Ce),PM=n(Ce,"LI",{});var nqe=s(PM);Ove=n(nqe,"STRONG",{});var r9t=s(Ove);EMr=r(r9t,"xlm"),r9t.forEach(t),CMr=r(nqe," \u2014 "),lJ=n(nqe,"A",{href:!0});var t9t=s(lJ);wMr=r(t9t,"TFXLMWithLMHeadModel"),t9t.forEach(t),AMr=r(nqe," (XLM model)"),nqe.forEach(t),LMr=i(Ce),BM=n(Ce,"LI",{});var sqe=s(BM);Vve=n(sqe,"STRONG",{});var a9t=s(Vve);yMr=r(a9t,"xlnet"),a9t.forEach(t),xMr=r(sqe," \u2014 "),iJ=n(sqe,"A",{href:!0});var n9t=s(iJ);$Mr=r(n9t,"TFXLNetLMHeadModel"),n9t.forEach(t),kMr=r(sqe," (XLNet model)"),sqe.forEach(t),Ce.forEach(t),SMr=i($l),T(IM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),IVe=i(f),fc=n(f,"H2",{class:!0});var Xze=s(fc);NM=n(Xze,"A",{id:!0,class:!0,href:!0});var s9t=s(NM);Xve=n(s9t,"SPAN",{});var l9t=s(Xve);T(j9.$$.fragment,l9t),l9t.forEach(t),s9t.forEach(t),RMr=i(Xze),zve=n(Xze,"SPAN",{});var i9t=s(zve);PMr=r(i9t,"TFAutoModelForImageClassification"),i9t.forEach(t),Xze.forEach(t),NVe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(D9.$$.fragment,kl),BMr=i(kl),mc=n(kl,"P",{});var Ore=s(mc);IMr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dJ=n(Ore,"A",{href:!0});var d9t=s(dJ);NMr=r(d9t,"from_pretrained()"),d9t.forEach(t),qMr=r(Ore," class method or the "),cJ=n(Ore,"A",{href:!0});var c9t=s(cJ);jMr=r(c9t,"from_config()"),c9t.forEach(t),DMr=r(Ore,` class
method.`),Ore.forEach(t),GMr=i(kl),G9=n(kl,"P",{});var zze=s(G9);OMr=r(zze,"This class cannot be instantiated directly using "),Qve=n(zze,"CODE",{});var f9t=s(Qve);VMr=r(f9t,"__init__()"),f9t.forEach(t),XMr=r(zze," (throws an error)."),zze.forEach(t),zMr=i(kl),Rt=n(kl,"DIV",{class:!0});var G6=s(Rt);T(O9.$$.fragment,G6),QMr=i(G6),Wve=n(G6,"P",{});var m9t=s(Wve);WMr=r(m9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m9t.forEach(t),HMr=i(G6),gc=n(G6,"P",{});var Vre=s(gc);UMr=r(Vre,`Note:
Loading a model from its configuration file does `),Hve=n(Vre,"STRONG",{});var g9t=s(Hve);JMr=r(g9t,"not"),g9t.forEach(t),YMr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(Vre,"A",{href:!0});var h9t=s(fJ);KMr=r(h9t,"from_pretrained()"),h9t.forEach(t),ZMr=r(Vre," to load the model weights."),Vre.forEach(t),eEr=i(G6),T(qM.$$.fragment,G6),G6.forEach(t),oEr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(V9.$$.fragment,Sl),rEr=i(Sl),Uve=n(Sl,"P",{});var p9t=s(Uve);tEr=r(p9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p9t.forEach(t),aEr=i(Sl),ln=n(Sl,"P",{});var O6=s(ln);nEr=r(O6,"The model class to instantiate is selected based on the "),Jve=n(O6,"CODE",{});var _9t=s(Jve);sEr=r(_9t,"model_type"),_9t.forEach(t),lEr=r(O6,` property of the config object (either
passed as an argument or loaded from `),Yve=n(O6,"CODE",{});var u9t=s(Yve);iEr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),dEr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(O6,"CODE",{});var b9t=s(Kve);cEr=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),fEr=r(O6,":"),O6.forEach(t),mEr=i(Sl),dn=n(Sl,"UL",{});var V6=s(dn);jM=n(V6,"LI",{});var lqe=s(jM);Zve=n(lqe,"STRONG",{});var v9t=s(Zve);gEr=r(v9t,"convnext"),v9t.forEach(t),hEr=r(lqe," \u2014 "),mJ=n(lqe,"A",{href:!0});var F9t=s(mJ);pEr=r(F9t,"TFConvNextForImageClassification"),F9t.forEach(t),_Er=r(lqe," (ConvNeXT model)"),lqe.forEach(t),uEr=i(V6),DM=n(V6,"LI",{});var iqe=s(DM);eFe=n(iqe,"STRONG",{});var T9t=s(eFe);bEr=r(T9t,"data2vec-vision"),T9t.forEach(t),vEr=r(iqe," \u2014 "),gJ=n(iqe,"A",{href:!0});var M9t=s(gJ);FEr=r(M9t,"TFData2VecVisionForImageClassification"),M9t.forEach(t),TEr=r(iqe," (Data2VecVision model)"),iqe.forEach(t),MEr=i(V6),GM=n(V6,"LI",{});var dqe=s(GM);oFe=n(dqe,"STRONG",{});var E9t=s(oFe);EEr=r(E9t,"swin"),E9t.forEach(t),CEr=r(dqe," \u2014 "),hJ=n(dqe,"A",{href:!0});var C9t=s(hJ);wEr=r(C9t,"TFSwinForImageClassification"),C9t.forEach(t),AEr=r(dqe," (Swin Transformer model)"),dqe.forEach(t),LEr=i(V6),OM=n(V6,"LI",{});var cqe=s(OM);rFe=n(cqe,"STRONG",{});var w9t=s(rFe);yEr=r(w9t,"vit"),w9t.forEach(t),xEr=r(cqe," \u2014 "),pJ=n(cqe,"A",{href:!0});var A9t=s(pJ);$Er=r(A9t,"TFViTForImageClassification"),A9t.forEach(t),kEr=r(cqe," (ViT model)"),cqe.forEach(t),V6.forEach(t),SEr=i(Sl),T(VM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),qVe=i(f),hc=n(f,"H2",{class:!0});var Qze=s(hc);XM=n(Qze,"A",{id:!0,class:!0,href:!0});var L9t=s(XM);tFe=n(L9t,"SPAN",{});var y9t=s(tFe);T(X9.$$.fragment,y9t),y9t.forEach(t),L9t.forEach(t),REr=i(Qze),aFe=n(Qze,"SPAN",{});var x9t=s(aFe);PEr=r(x9t,"TFAutoModelForMaskedLM"),x9t.forEach(t),Qze.forEach(t),jVe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(z9.$$.fragment,Rl),BEr=i(Rl),pc=n(Rl,"P",{});var Xre=s(pc);IEr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_J=n(Xre,"A",{href:!0});var $9t=s(_J);NEr=r($9t,"from_pretrained()"),$9t.forEach(t),qEr=r(Xre," class method or the "),uJ=n(Xre,"A",{href:!0});var k9t=s(uJ);jEr=r(k9t,"from_config()"),k9t.forEach(t),DEr=r(Xre,` class
method.`),Xre.forEach(t),GEr=i(Rl),Q9=n(Rl,"P",{});var Wze=s(Q9);OEr=r(Wze,"This class cannot be instantiated directly using "),nFe=n(Wze,"CODE",{});var S9t=s(nFe);VEr=r(S9t,"__init__()"),S9t.forEach(t),XEr=r(Wze," (throws an error)."),Wze.forEach(t),zEr=i(Rl),Pt=n(Rl,"DIV",{class:!0});var X6=s(Pt);T(W9.$$.fragment,X6),QEr=i(X6),sFe=n(X6,"P",{});var R9t=s(sFe);WEr=r(R9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R9t.forEach(t),HEr=i(X6),_c=n(X6,"P",{});var zre=s(_c);UEr=r(zre,`Note:
Loading a model from its configuration file does `),lFe=n(zre,"STRONG",{});var P9t=s(lFe);JEr=r(P9t,"not"),P9t.forEach(t),YEr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(zre,"A",{href:!0});var B9t=s(bJ);KEr=r(B9t,"from_pretrained()"),B9t.forEach(t),ZEr=r(zre," to load the model weights."),zre.forEach(t),eCr=i(X6),T(zM.$$.fragment,X6),X6.forEach(t),oCr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(H9.$$.fragment,Pl),rCr=i(Pl),iFe=n(Pl,"P",{});var I9t=s(iFe);tCr=r(I9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I9t.forEach(t),aCr=i(Pl),cn=n(Pl,"P",{});var z6=s(cn);nCr=r(z6,"The model class to instantiate is selected based on the "),dFe=n(z6,"CODE",{});var N9t=s(dFe);sCr=r(N9t,"model_type"),N9t.forEach(t),lCr=r(z6,` property of the config object (either
passed as an argument or loaded from `),cFe=n(z6,"CODE",{});var q9t=s(cFe);iCr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),dCr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(z6,"CODE",{});var j9t=s(fFe);cCr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),fCr=r(z6,":"),z6.forEach(t),mCr=i(Pl),ie=n(Pl,"UL",{});var fe=s(ie);QM=n(fe,"LI",{});var fqe=s(QM);mFe=n(fqe,"STRONG",{});var D9t=s(mFe);gCr=r(D9t,"albert"),D9t.forEach(t),hCr=r(fqe," \u2014 "),vJ=n(fqe,"A",{href:!0});var G9t=s(vJ);pCr=r(G9t,"TFAlbertForMaskedLM"),G9t.forEach(t),_Cr=r(fqe," (ALBERT model)"),fqe.forEach(t),uCr=i(fe),WM=n(fe,"LI",{});var mqe=s(WM);gFe=n(mqe,"STRONG",{});var O9t=s(gFe);bCr=r(O9t,"bert"),O9t.forEach(t),vCr=r(mqe," \u2014 "),FJ=n(mqe,"A",{href:!0});var V9t=s(FJ);FCr=r(V9t,"TFBertForMaskedLM"),V9t.forEach(t),TCr=r(mqe," (BERT model)"),mqe.forEach(t),MCr=i(fe),HM=n(fe,"LI",{});var gqe=s(HM);hFe=n(gqe,"STRONG",{});var X9t=s(hFe);ECr=r(X9t,"camembert"),X9t.forEach(t),CCr=r(gqe," \u2014 "),TJ=n(gqe,"A",{href:!0});var z9t=s(TJ);wCr=r(z9t,"TFCamembertForMaskedLM"),z9t.forEach(t),ACr=r(gqe," (CamemBERT model)"),gqe.forEach(t),LCr=i(fe),UM=n(fe,"LI",{});var hqe=s(UM);pFe=n(hqe,"STRONG",{});var Q9t=s(pFe);yCr=r(Q9t,"convbert"),Q9t.forEach(t),xCr=r(hqe," \u2014 "),MJ=n(hqe,"A",{href:!0});var W9t=s(MJ);$Cr=r(W9t,"TFConvBertForMaskedLM"),W9t.forEach(t),kCr=r(hqe," (ConvBERT model)"),hqe.forEach(t),SCr=i(fe),JM=n(fe,"LI",{});var pqe=s(JM);_Fe=n(pqe,"STRONG",{});var H9t=s(_Fe);RCr=r(H9t,"deberta"),H9t.forEach(t),PCr=r(pqe," \u2014 "),EJ=n(pqe,"A",{href:!0});var U9t=s(EJ);BCr=r(U9t,"TFDebertaForMaskedLM"),U9t.forEach(t),ICr=r(pqe," (DeBERTa model)"),pqe.forEach(t),NCr=i(fe),YM=n(fe,"LI",{});var _qe=s(YM);uFe=n(_qe,"STRONG",{});var J9t=s(uFe);qCr=r(J9t,"deberta-v2"),J9t.forEach(t),jCr=r(_qe," \u2014 "),CJ=n(_qe,"A",{href:!0});var Y9t=s(CJ);DCr=r(Y9t,"TFDebertaV2ForMaskedLM"),Y9t.forEach(t),GCr=r(_qe," (DeBERTa-v2 model)"),_qe.forEach(t),OCr=i(fe),KM=n(fe,"LI",{});var uqe=s(KM);bFe=n(uqe,"STRONG",{});var K9t=s(bFe);VCr=r(K9t,"distilbert"),K9t.forEach(t),XCr=r(uqe," \u2014 "),wJ=n(uqe,"A",{href:!0});var Z9t=s(wJ);zCr=r(Z9t,"TFDistilBertForMaskedLM"),Z9t.forEach(t),QCr=r(uqe," (DistilBERT model)"),uqe.forEach(t),WCr=i(fe),ZM=n(fe,"LI",{});var bqe=s(ZM);vFe=n(bqe,"STRONG",{});var ext=s(vFe);HCr=r(ext,"electra"),ext.forEach(t),UCr=r(bqe," \u2014 "),AJ=n(bqe,"A",{href:!0});var oxt=s(AJ);JCr=r(oxt,"TFElectraForMaskedLM"),oxt.forEach(t),YCr=r(bqe," (ELECTRA model)"),bqe.forEach(t),KCr=i(fe),eE=n(fe,"LI",{});var vqe=s(eE);FFe=n(vqe,"STRONG",{});var rxt=s(FFe);ZCr=r(rxt,"flaubert"),rxt.forEach(t),e5r=r(vqe," \u2014 "),LJ=n(vqe,"A",{href:!0});var txt=s(LJ);o5r=r(txt,"TFFlaubertWithLMHeadModel"),txt.forEach(t),r5r=r(vqe," (FlauBERT model)"),vqe.forEach(t),t5r=i(fe),oE=n(fe,"LI",{});var Fqe=s(oE);TFe=n(Fqe,"STRONG",{});var axt=s(TFe);a5r=r(axt,"funnel"),axt.forEach(t),n5r=r(Fqe," \u2014 "),yJ=n(Fqe,"A",{href:!0});var nxt=s(yJ);s5r=r(nxt,"TFFunnelForMaskedLM"),nxt.forEach(t),l5r=r(Fqe," (Funnel Transformer model)"),Fqe.forEach(t),i5r=i(fe),rE=n(fe,"LI",{});var Tqe=s(rE);MFe=n(Tqe,"STRONG",{});var sxt=s(MFe);d5r=r(sxt,"layoutlm"),sxt.forEach(t),c5r=r(Tqe," \u2014 "),xJ=n(Tqe,"A",{href:!0});var lxt=s(xJ);f5r=r(lxt,"TFLayoutLMForMaskedLM"),lxt.forEach(t),m5r=r(Tqe," (LayoutLM model)"),Tqe.forEach(t),g5r=i(fe),tE=n(fe,"LI",{});var Mqe=s(tE);EFe=n(Mqe,"STRONG",{});var ixt=s(EFe);h5r=r(ixt,"longformer"),ixt.forEach(t),p5r=r(Mqe," \u2014 "),$J=n(Mqe,"A",{href:!0});var dxt=s($J);_5r=r(dxt,"TFLongformerForMaskedLM"),dxt.forEach(t),u5r=r(Mqe," (Longformer model)"),Mqe.forEach(t),b5r=i(fe),aE=n(fe,"LI",{});var Eqe=s(aE);CFe=n(Eqe,"STRONG",{});var cxt=s(CFe);v5r=r(cxt,"mobilebert"),cxt.forEach(t),F5r=r(Eqe," \u2014 "),kJ=n(Eqe,"A",{href:!0});var fxt=s(kJ);T5r=r(fxt,"TFMobileBertForMaskedLM"),fxt.forEach(t),M5r=r(Eqe," (MobileBERT model)"),Eqe.forEach(t),E5r=i(fe),nE=n(fe,"LI",{});var Cqe=s(nE);wFe=n(Cqe,"STRONG",{});var mxt=s(wFe);C5r=r(mxt,"mpnet"),mxt.forEach(t),w5r=r(Cqe," \u2014 "),SJ=n(Cqe,"A",{href:!0});var gxt=s(SJ);A5r=r(gxt,"TFMPNetForMaskedLM"),gxt.forEach(t),L5r=r(Cqe," (MPNet model)"),Cqe.forEach(t),y5r=i(fe),sE=n(fe,"LI",{});var wqe=s(sE);AFe=n(wqe,"STRONG",{});var hxt=s(AFe);x5r=r(hxt,"rembert"),hxt.forEach(t),$5r=r(wqe," \u2014 "),RJ=n(wqe,"A",{href:!0});var pxt=s(RJ);k5r=r(pxt,"TFRemBertForMaskedLM"),pxt.forEach(t),S5r=r(wqe," (RemBERT model)"),wqe.forEach(t),R5r=i(fe),lE=n(fe,"LI",{});var Aqe=s(lE);LFe=n(Aqe,"STRONG",{});var _xt=s(LFe);P5r=r(_xt,"roberta"),_xt.forEach(t),B5r=r(Aqe," \u2014 "),PJ=n(Aqe,"A",{href:!0});var uxt=s(PJ);I5r=r(uxt,"TFRobertaForMaskedLM"),uxt.forEach(t),N5r=r(Aqe," (RoBERTa model)"),Aqe.forEach(t),q5r=i(fe),iE=n(fe,"LI",{});var Lqe=s(iE);yFe=n(Lqe,"STRONG",{});var bxt=s(yFe);j5r=r(bxt,"roformer"),bxt.forEach(t),D5r=r(Lqe," \u2014 "),BJ=n(Lqe,"A",{href:!0});var vxt=s(BJ);G5r=r(vxt,"TFRoFormerForMaskedLM"),vxt.forEach(t),O5r=r(Lqe," (RoFormer model)"),Lqe.forEach(t),V5r=i(fe),dE=n(fe,"LI",{});var yqe=s(dE);xFe=n(yqe,"STRONG",{});var Fxt=s(xFe);X5r=r(Fxt,"tapas"),Fxt.forEach(t),z5r=r(yqe," \u2014 "),IJ=n(yqe,"A",{href:!0});var Txt=s(IJ);Q5r=r(Txt,"TFTapasForMaskedLM"),Txt.forEach(t),W5r=r(yqe," (TAPAS model)"),yqe.forEach(t),H5r=i(fe),cE=n(fe,"LI",{});var xqe=s(cE);$Fe=n(xqe,"STRONG",{});var Mxt=s($Fe);U5r=r(Mxt,"xlm"),Mxt.forEach(t),J5r=r(xqe," \u2014 "),NJ=n(xqe,"A",{href:!0});var Ext=s(NJ);Y5r=r(Ext,"TFXLMWithLMHeadModel"),Ext.forEach(t),K5r=r(xqe," (XLM model)"),xqe.forEach(t),Z5r=i(fe),fE=n(fe,"LI",{});var $qe=s(fE);kFe=n($qe,"STRONG",{});var Cxt=s(kFe);e0r=r(Cxt,"xlm-roberta"),Cxt.forEach(t),o0r=r($qe," \u2014 "),qJ=n($qe,"A",{href:!0});var wxt=s(qJ);r0r=r(wxt,"TFXLMRobertaForMaskedLM"),wxt.forEach(t),t0r=r($qe," (XLM-RoBERTa model)"),$qe.forEach(t),fe.forEach(t),a0r=i(Pl),T(mE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),DVe=i(f),uc=n(f,"H2",{class:!0});var Hze=s(uc);gE=n(Hze,"A",{id:!0,class:!0,href:!0});var Axt=s(gE);SFe=n(Axt,"SPAN",{});var Lxt=s(SFe);T(U9.$$.fragment,Lxt),Lxt.forEach(t),Axt.forEach(t),n0r=i(Hze),RFe=n(Hze,"SPAN",{});var yxt=s(RFe);s0r=r(yxt,"TFAutoModelForSeq2SeqLM"),yxt.forEach(t),Hze.forEach(t),GVe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(J9.$$.fragment,Bl),l0r=i(Bl),bc=n(Bl,"P",{});var Qre=s(bc);i0r=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jJ=n(Qre,"A",{href:!0});var xxt=s(jJ);d0r=r(xxt,"from_pretrained()"),xxt.forEach(t),c0r=r(Qre," class method or the "),DJ=n(Qre,"A",{href:!0});var $xt=s(DJ);f0r=r($xt,"from_config()"),$xt.forEach(t),m0r=r(Qre,` class
method.`),Qre.forEach(t),g0r=i(Bl),Y9=n(Bl,"P",{});var Uze=s(Y9);h0r=r(Uze,"This class cannot be instantiated directly using "),PFe=n(Uze,"CODE",{});var kxt=s(PFe);p0r=r(kxt,"__init__()"),kxt.forEach(t),_0r=r(Uze," (throws an error)."),Uze.forEach(t),u0r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var Q6=s(Bt);T(K9.$$.fragment,Q6),b0r=i(Q6),BFe=n(Q6,"P",{});var Sxt=s(BFe);v0r=r(Sxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sxt.forEach(t),F0r=i(Q6),vc=n(Q6,"P",{});var Wre=s(vc);T0r=r(Wre,`Note:
Loading a model from its configuration file does `),IFe=n(Wre,"STRONG",{});var Rxt=s(IFe);M0r=r(Rxt,"not"),Rxt.forEach(t),E0r=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Wre,"A",{href:!0});var Pxt=s(GJ);C0r=r(Pxt,"from_pretrained()"),Pxt.forEach(t),w0r=r(Wre," to load the model weights."),Wre.forEach(t),A0r=i(Q6),T(hE.$$.fragment,Q6),Q6.forEach(t),L0r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(Z9.$$.fragment,Il),y0r=i(Il),NFe=n(Il,"P",{});var Bxt=s(NFe);x0r=r(Bxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bxt.forEach(t),$0r=i(Il),fn=n(Il,"P",{});var W6=s(fn);k0r=r(W6,"The model class to instantiate is selected based on the "),qFe=n(W6,"CODE",{});var Ixt=s(qFe);S0r=r(Ixt,"model_type"),Ixt.forEach(t),R0r=r(W6,` property of the config object (either
passed as an argument or loaded from `),jFe=n(W6,"CODE",{});var Nxt=s(jFe);P0r=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),B0r=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(W6,"CODE",{});var qxt=s(DFe);I0r=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),N0r=r(W6,":"),W6.forEach(t),q0r=i(Il),ye=n(Il,"UL",{});var Ie=s(ye);pE=n(Ie,"LI",{});var kqe=s(pE);GFe=n(kqe,"STRONG",{});var jxt=s(GFe);j0r=r(jxt,"bart"),jxt.forEach(t),D0r=r(kqe," \u2014 "),OJ=n(kqe,"A",{href:!0});var Dxt=s(OJ);G0r=r(Dxt,"TFBartForConditionalGeneration"),Dxt.forEach(t),O0r=r(kqe," (BART model)"),kqe.forEach(t),V0r=i(Ie),_E=n(Ie,"LI",{});var Sqe=s(_E);OFe=n(Sqe,"STRONG",{});var Gxt=s(OFe);X0r=r(Gxt,"blenderbot"),Gxt.forEach(t),z0r=r(Sqe," \u2014 "),VJ=n(Sqe,"A",{href:!0});var Oxt=s(VJ);Q0r=r(Oxt,"TFBlenderbotForConditionalGeneration"),Oxt.forEach(t),W0r=r(Sqe," (Blenderbot model)"),Sqe.forEach(t),H0r=i(Ie),uE=n(Ie,"LI",{});var Rqe=s(uE);VFe=n(Rqe,"STRONG",{});var Vxt=s(VFe);U0r=r(Vxt,"blenderbot-small"),Vxt.forEach(t),J0r=r(Rqe," \u2014 "),XJ=n(Rqe,"A",{href:!0});var Xxt=s(XJ);Y0r=r(Xxt,"TFBlenderbotSmallForConditionalGeneration"),Xxt.forEach(t),K0r=r(Rqe," (BlenderbotSmall model)"),Rqe.forEach(t),Z0r=i(Ie),bE=n(Ie,"LI",{});var Pqe=s(bE);XFe=n(Pqe,"STRONG",{});var zxt=s(XFe);ewr=r(zxt,"encoder-decoder"),zxt.forEach(t),owr=r(Pqe," \u2014 "),zJ=n(Pqe,"A",{href:!0});var Qxt=s(zJ);rwr=r(Qxt,"TFEncoderDecoderModel"),Qxt.forEach(t),twr=r(Pqe," (Encoder decoder model)"),Pqe.forEach(t),awr=i(Ie),vE=n(Ie,"LI",{});var Bqe=s(vE);zFe=n(Bqe,"STRONG",{});var Wxt=s(zFe);nwr=r(Wxt,"led"),Wxt.forEach(t),swr=r(Bqe," \u2014 "),QJ=n(Bqe,"A",{href:!0});var Hxt=s(QJ);lwr=r(Hxt,"TFLEDForConditionalGeneration"),Hxt.forEach(t),iwr=r(Bqe," (LED model)"),Bqe.forEach(t),dwr=i(Ie),FE=n(Ie,"LI",{});var Iqe=s(FE);QFe=n(Iqe,"STRONG",{});var Uxt=s(QFe);cwr=r(Uxt,"marian"),Uxt.forEach(t),fwr=r(Iqe," \u2014 "),WJ=n(Iqe,"A",{href:!0});var Jxt=s(WJ);mwr=r(Jxt,"TFMarianMTModel"),Jxt.forEach(t),gwr=r(Iqe," (Marian model)"),Iqe.forEach(t),hwr=i(Ie),TE=n(Ie,"LI",{});var Nqe=s(TE);WFe=n(Nqe,"STRONG",{});var Yxt=s(WFe);pwr=r(Yxt,"mbart"),Yxt.forEach(t),_wr=r(Nqe," \u2014 "),HJ=n(Nqe,"A",{href:!0});var Kxt=s(HJ);uwr=r(Kxt,"TFMBartForConditionalGeneration"),Kxt.forEach(t),bwr=r(Nqe," (mBART model)"),Nqe.forEach(t),vwr=i(Ie),ME=n(Ie,"LI",{});var qqe=s(ME);HFe=n(qqe,"STRONG",{});var Zxt=s(HFe);Fwr=r(Zxt,"mt5"),Zxt.forEach(t),Twr=r(qqe," \u2014 "),UJ=n(qqe,"A",{href:!0});var e$t=s(UJ);Mwr=r(e$t,"TFMT5ForConditionalGeneration"),e$t.forEach(t),Ewr=r(qqe," (MT5 model)"),qqe.forEach(t),Cwr=i(Ie),EE=n(Ie,"LI",{});var jqe=s(EE);UFe=n(jqe,"STRONG",{});var o$t=s(UFe);wwr=r(o$t,"pegasus"),o$t.forEach(t),Awr=r(jqe," \u2014 "),JJ=n(jqe,"A",{href:!0});var r$t=s(JJ);Lwr=r(r$t,"TFPegasusForConditionalGeneration"),r$t.forEach(t),ywr=r(jqe," (Pegasus model)"),jqe.forEach(t),xwr=i(Ie),CE=n(Ie,"LI",{});var Dqe=s(CE);JFe=n(Dqe,"STRONG",{});var t$t=s(JFe);$wr=r(t$t,"t5"),t$t.forEach(t),kwr=r(Dqe," \u2014 "),YJ=n(Dqe,"A",{href:!0});var a$t=s(YJ);Swr=r(a$t,"TFT5ForConditionalGeneration"),a$t.forEach(t),Rwr=r(Dqe," (T5 model)"),Dqe.forEach(t),Ie.forEach(t),Pwr=i(Il),T(wE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),OVe=i(f),Fc=n(f,"H2",{class:!0});var Jze=s(Fc);AE=n(Jze,"A",{id:!0,class:!0,href:!0});var n$t=s(AE);YFe=n(n$t,"SPAN",{});var s$t=s(YFe);T(ex.$$.fragment,s$t),s$t.forEach(t),n$t.forEach(t),Bwr=i(Jze),KFe=n(Jze,"SPAN",{});var l$t=s(KFe);Iwr=r(l$t,"TFAutoModelForSequenceClassification"),l$t.forEach(t),Jze.forEach(t),VVe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(ox.$$.fragment,Nl),Nwr=i(Nl),Tc=n(Nl,"P",{});var Hre=s(Tc);qwr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KJ=n(Hre,"A",{href:!0});var i$t=s(KJ);jwr=r(i$t,"from_pretrained()"),i$t.forEach(t),Dwr=r(Hre," class method or the "),ZJ=n(Hre,"A",{href:!0});var d$t=s(ZJ);Gwr=r(d$t,"from_config()"),d$t.forEach(t),Owr=r(Hre,` class
method.`),Hre.forEach(t),Vwr=i(Nl),rx=n(Nl,"P",{});var Yze=s(rx);Xwr=r(Yze,"This class cannot be instantiated directly using "),ZFe=n(Yze,"CODE",{});var c$t=s(ZFe);zwr=r(c$t,"__init__()"),c$t.forEach(t),Qwr=r(Yze," (throws an error)."),Yze.forEach(t),Wwr=i(Nl),It=n(Nl,"DIV",{class:!0});var H6=s(It);T(tx.$$.fragment,H6),Hwr=i(H6),eTe=n(H6,"P",{});var f$t=s(eTe);Uwr=r(f$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f$t.forEach(t),Jwr=i(H6),Mc=n(H6,"P",{});var Ure=s(Mc);Ywr=r(Ure,`Note:
Loading a model from its configuration file does `),oTe=n(Ure,"STRONG",{});var m$t=s(oTe);Kwr=r(m$t,"not"),m$t.forEach(t),Zwr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(Ure,"A",{href:!0});var g$t=s(eY);eAr=r(g$t,"from_pretrained()"),g$t.forEach(t),oAr=r(Ure," to load the model weights."),Ure.forEach(t),rAr=i(H6),T(LE.$$.fragment,H6),H6.forEach(t),tAr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(ax.$$.fragment,ql),aAr=i(ql),rTe=n(ql,"P",{});var h$t=s(rTe);nAr=r(h$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h$t.forEach(t),sAr=i(ql),mn=n(ql,"P",{});var U6=s(mn);lAr=r(U6,"The model class to instantiate is selected based on the "),tTe=n(U6,"CODE",{});var p$t=s(tTe);iAr=r(p$t,"model_type"),p$t.forEach(t),dAr=r(U6,` property of the config object (either
passed as an argument or loaded from `),aTe=n(U6,"CODE",{});var _$t=s(aTe);cAr=r(_$t,"pretrained_model_name_or_path"),_$t.forEach(t),fAr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(U6,"CODE",{});var u$t=s(nTe);mAr=r(u$t,"pretrained_model_name_or_path"),u$t.forEach(t),gAr=r(U6,":"),U6.forEach(t),hAr=i(ql),te=n(ql,"UL",{});var ne=s(te);yE=n(ne,"LI",{});var Gqe=s(yE);sTe=n(Gqe,"STRONG",{});var b$t=s(sTe);pAr=r(b$t,"albert"),b$t.forEach(t),_Ar=r(Gqe," \u2014 "),oY=n(Gqe,"A",{href:!0});var v$t=s(oY);uAr=r(v$t,"TFAlbertForSequenceClassification"),v$t.forEach(t),bAr=r(Gqe," (ALBERT model)"),Gqe.forEach(t),vAr=i(ne),xE=n(ne,"LI",{});var Oqe=s(xE);lTe=n(Oqe,"STRONG",{});var F$t=s(lTe);FAr=r(F$t,"bert"),F$t.forEach(t),TAr=r(Oqe," \u2014 "),rY=n(Oqe,"A",{href:!0});var T$t=s(rY);MAr=r(T$t,"TFBertForSequenceClassification"),T$t.forEach(t),EAr=r(Oqe," (BERT model)"),Oqe.forEach(t),CAr=i(ne),$E=n(ne,"LI",{});var Vqe=s($E);iTe=n(Vqe,"STRONG",{});var M$t=s(iTe);wAr=r(M$t,"camembert"),M$t.forEach(t),AAr=r(Vqe," \u2014 "),tY=n(Vqe,"A",{href:!0});var E$t=s(tY);LAr=r(E$t,"TFCamembertForSequenceClassification"),E$t.forEach(t),yAr=r(Vqe," (CamemBERT model)"),Vqe.forEach(t),xAr=i(ne),kE=n(ne,"LI",{});var Xqe=s(kE);dTe=n(Xqe,"STRONG",{});var C$t=s(dTe);$Ar=r(C$t,"convbert"),C$t.forEach(t),kAr=r(Xqe," \u2014 "),aY=n(Xqe,"A",{href:!0});var w$t=s(aY);SAr=r(w$t,"TFConvBertForSequenceClassification"),w$t.forEach(t),RAr=r(Xqe," (ConvBERT model)"),Xqe.forEach(t),PAr=i(ne),SE=n(ne,"LI",{});var zqe=s(SE);cTe=n(zqe,"STRONG",{});var A$t=s(cTe);BAr=r(A$t,"ctrl"),A$t.forEach(t),IAr=r(zqe," \u2014 "),nY=n(zqe,"A",{href:!0});var L$t=s(nY);NAr=r(L$t,"TFCTRLForSequenceClassification"),L$t.forEach(t),qAr=r(zqe," (CTRL model)"),zqe.forEach(t),jAr=i(ne),RE=n(ne,"LI",{});var Qqe=s(RE);fTe=n(Qqe,"STRONG",{});var y$t=s(fTe);DAr=r(y$t,"deberta"),y$t.forEach(t),GAr=r(Qqe," \u2014 "),sY=n(Qqe,"A",{href:!0});var x$t=s(sY);OAr=r(x$t,"TFDebertaForSequenceClassification"),x$t.forEach(t),VAr=r(Qqe," (DeBERTa model)"),Qqe.forEach(t),XAr=i(ne),PE=n(ne,"LI",{});var Wqe=s(PE);mTe=n(Wqe,"STRONG",{});var $$t=s(mTe);zAr=r($$t,"deberta-v2"),$$t.forEach(t),QAr=r(Wqe," \u2014 "),lY=n(Wqe,"A",{href:!0});var k$t=s(lY);WAr=r(k$t,"TFDebertaV2ForSequenceClassification"),k$t.forEach(t),HAr=r(Wqe," (DeBERTa-v2 model)"),Wqe.forEach(t),UAr=i(ne),BE=n(ne,"LI",{});var Hqe=s(BE);gTe=n(Hqe,"STRONG",{});var S$t=s(gTe);JAr=r(S$t,"distilbert"),S$t.forEach(t),YAr=r(Hqe," \u2014 "),iY=n(Hqe,"A",{href:!0});var R$t=s(iY);KAr=r(R$t,"TFDistilBertForSequenceClassification"),R$t.forEach(t),ZAr=r(Hqe," (DistilBERT model)"),Hqe.forEach(t),e6r=i(ne),IE=n(ne,"LI",{});var Uqe=s(IE);hTe=n(Uqe,"STRONG",{});var P$t=s(hTe);o6r=r(P$t,"electra"),P$t.forEach(t),r6r=r(Uqe," \u2014 "),dY=n(Uqe,"A",{href:!0});var B$t=s(dY);t6r=r(B$t,"TFElectraForSequenceClassification"),B$t.forEach(t),a6r=r(Uqe," (ELECTRA model)"),Uqe.forEach(t),n6r=i(ne),NE=n(ne,"LI",{});var Jqe=s(NE);pTe=n(Jqe,"STRONG",{});var I$t=s(pTe);s6r=r(I$t,"flaubert"),I$t.forEach(t),l6r=r(Jqe," \u2014 "),cY=n(Jqe,"A",{href:!0});var N$t=s(cY);i6r=r(N$t,"TFFlaubertForSequenceClassification"),N$t.forEach(t),d6r=r(Jqe," (FlauBERT model)"),Jqe.forEach(t),c6r=i(ne),qE=n(ne,"LI",{});var Yqe=s(qE);_Te=n(Yqe,"STRONG",{});var q$t=s(_Te);f6r=r(q$t,"funnel"),q$t.forEach(t),m6r=r(Yqe," \u2014 "),fY=n(Yqe,"A",{href:!0});var j$t=s(fY);g6r=r(j$t,"TFFunnelForSequenceClassification"),j$t.forEach(t),h6r=r(Yqe," (Funnel Transformer model)"),Yqe.forEach(t),p6r=i(ne),jE=n(ne,"LI",{});var Kqe=s(jE);uTe=n(Kqe,"STRONG",{});var D$t=s(uTe);_6r=r(D$t,"gpt2"),D$t.forEach(t),u6r=r(Kqe," \u2014 "),mY=n(Kqe,"A",{href:!0});var G$t=s(mY);b6r=r(G$t,"TFGPT2ForSequenceClassification"),G$t.forEach(t),v6r=r(Kqe," (OpenAI GPT-2 model)"),Kqe.forEach(t),F6r=i(ne),DE=n(ne,"LI",{});var Zqe=s(DE);bTe=n(Zqe,"STRONG",{});var O$t=s(bTe);T6r=r(O$t,"gptj"),O$t.forEach(t),M6r=r(Zqe," \u2014 "),gY=n(Zqe,"A",{href:!0});var V$t=s(gY);E6r=r(V$t,"TFGPTJForSequenceClassification"),V$t.forEach(t),C6r=r(Zqe," (GPT-J model)"),Zqe.forEach(t),w6r=i(ne),GE=n(ne,"LI",{});var eje=s(GE);vTe=n(eje,"STRONG",{});var X$t=s(vTe);A6r=r(X$t,"layoutlm"),X$t.forEach(t),L6r=r(eje," \u2014 "),hY=n(eje,"A",{href:!0});var z$t=s(hY);y6r=r(z$t,"TFLayoutLMForSequenceClassification"),z$t.forEach(t),x6r=r(eje," (LayoutLM model)"),eje.forEach(t),$6r=i(ne),OE=n(ne,"LI",{});var oje=s(OE);FTe=n(oje,"STRONG",{});var Q$t=s(FTe);k6r=r(Q$t,"longformer"),Q$t.forEach(t),S6r=r(oje," \u2014 "),pY=n(oje,"A",{href:!0});var W$t=s(pY);R6r=r(W$t,"TFLongformerForSequenceClassification"),W$t.forEach(t),P6r=r(oje," (Longformer model)"),oje.forEach(t),B6r=i(ne),VE=n(ne,"LI",{});var rje=s(VE);TTe=n(rje,"STRONG",{});var H$t=s(TTe);I6r=r(H$t,"mobilebert"),H$t.forEach(t),N6r=r(rje," \u2014 "),_Y=n(rje,"A",{href:!0});var U$t=s(_Y);q6r=r(U$t,"TFMobileBertForSequenceClassification"),U$t.forEach(t),j6r=r(rje," (MobileBERT model)"),rje.forEach(t),D6r=i(ne),XE=n(ne,"LI",{});var tje=s(XE);MTe=n(tje,"STRONG",{});var J$t=s(MTe);G6r=r(J$t,"mpnet"),J$t.forEach(t),O6r=r(tje," \u2014 "),uY=n(tje,"A",{href:!0});var Y$t=s(uY);V6r=r(Y$t,"TFMPNetForSequenceClassification"),Y$t.forEach(t),X6r=r(tje," (MPNet model)"),tje.forEach(t),z6r=i(ne),zE=n(ne,"LI",{});var aje=s(zE);ETe=n(aje,"STRONG",{});var K$t=s(ETe);Q6r=r(K$t,"openai-gpt"),K$t.forEach(t),W6r=r(aje," \u2014 "),bY=n(aje,"A",{href:!0});var Z$t=s(bY);H6r=r(Z$t,"TFOpenAIGPTForSequenceClassification"),Z$t.forEach(t),U6r=r(aje," (OpenAI GPT model)"),aje.forEach(t),J6r=i(ne),QE=n(ne,"LI",{});var nje=s(QE);CTe=n(nje,"STRONG",{});var ekt=s(CTe);Y6r=r(ekt,"rembert"),ekt.forEach(t),K6r=r(nje," \u2014 "),vY=n(nje,"A",{href:!0});var okt=s(vY);Z6r=r(okt,"TFRemBertForSequenceClassification"),okt.forEach(t),eLr=r(nje," (RemBERT model)"),nje.forEach(t),oLr=i(ne),WE=n(ne,"LI",{});var sje=s(WE);wTe=n(sje,"STRONG",{});var rkt=s(wTe);rLr=r(rkt,"roberta"),rkt.forEach(t),tLr=r(sje," \u2014 "),FY=n(sje,"A",{href:!0});var tkt=s(FY);aLr=r(tkt,"TFRobertaForSequenceClassification"),tkt.forEach(t),nLr=r(sje," (RoBERTa model)"),sje.forEach(t),sLr=i(ne),HE=n(ne,"LI",{});var lje=s(HE);ATe=n(lje,"STRONG",{});var akt=s(ATe);lLr=r(akt,"roformer"),akt.forEach(t),iLr=r(lje," \u2014 "),TY=n(lje,"A",{href:!0});var nkt=s(TY);dLr=r(nkt,"TFRoFormerForSequenceClassification"),nkt.forEach(t),cLr=r(lje," (RoFormer model)"),lje.forEach(t),fLr=i(ne),UE=n(ne,"LI",{});var ije=s(UE);LTe=n(ije,"STRONG",{});var skt=s(LTe);mLr=r(skt,"tapas"),skt.forEach(t),gLr=r(ije," \u2014 "),MY=n(ije,"A",{href:!0});var lkt=s(MY);hLr=r(lkt,"TFTapasForSequenceClassification"),lkt.forEach(t),pLr=r(ije," (TAPAS model)"),ije.forEach(t),_Lr=i(ne),JE=n(ne,"LI",{});var dje=s(JE);yTe=n(dje,"STRONG",{});var ikt=s(yTe);uLr=r(ikt,"transfo-xl"),ikt.forEach(t),bLr=r(dje," \u2014 "),EY=n(dje,"A",{href:!0});var dkt=s(EY);vLr=r(dkt,"TFTransfoXLForSequenceClassification"),dkt.forEach(t),FLr=r(dje," (Transformer-XL model)"),dje.forEach(t),TLr=i(ne),YE=n(ne,"LI",{});var cje=s(YE);xTe=n(cje,"STRONG",{});var ckt=s(xTe);MLr=r(ckt,"xlm"),ckt.forEach(t),ELr=r(cje," \u2014 "),CY=n(cje,"A",{href:!0});var fkt=s(CY);CLr=r(fkt,"TFXLMForSequenceClassification"),fkt.forEach(t),wLr=r(cje," (XLM model)"),cje.forEach(t),ALr=i(ne),KE=n(ne,"LI",{});var fje=s(KE);$Te=n(fje,"STRONG",{});var mkt=s($Te);LLr=r(mkt,"xlm-roberta"),mkt.forEach(t),yLr=r(fje," \u2014 "),wY=n(fje,"A",{href:!0});var gkt=s(wY);xLr=r(gkt,"TFXLMRobertaForSequenceClassification"),gkt.forEach(t),$Lr=r(fje," (XLM-RoBERTa model)"),fje.forEach(t),kLr=i(ne),ZE=n(ne,"LI",{});var mje=s(ZE);kTe=n(mje,"STRONG",{});var hkt=s(kTe);SLr=r(hkt,"xlnet"),hkt.forEach(t),RLr=r(mje," \u2014 "),AY=n(mje,"A",{href:!0});var pkt=s(AY);PLr=r(pkt,"TFXLNetForSequenceClassification"),pkt.forEach(t),BLr=r(mje," (XLNet model)"),mje.forEach(t),ne.forEach(t),ILr=i(ql),T(eC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),XVe=i(f),Ec=n(f,"H2",{class:!0});var Kze=s(Ec);oC=n(Kze,"A",{id:!0,class:!0,href:!0});var _kt=s(oC);STe=n(_kt,"SPAN",{});var ukt=s(STe);T(nx.$$.fragment,ukt),ukt.forEach(t),_kt.forEach(t),NLr=i(Kze),RTe=n(Kze,"SPAN",{});var bkt=s(RTe);qLr=r(bkt,"TFAutoModelForMultipleChoice"),bkt.forEach(t),Kze.forEach(t),zVe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(sx.$$.fragment,jl),jLr=i(jl),Cc=n(jl,"P",{});var Jre=s(Cc);DLr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LY=n(Jre,"A",{href:!0});var vkt=s(LY);GLr=r(vkt,"from_pretrained()"),vkt.forEach(t),OLr=r(Jre," class method or the "),yY=n(Jre,"A",{href:!0});var Fkt=s(yY);VLr=r(Fkt,"from_config()"),Fkt.forEach(t),XLr=r(Jre,` class
method.`),Jre.forEach(t),zLr=i(jl),lx=n(jl,"P",{});var Zze=s(lx);QLr=r(Zze,"This class cannot be instantiated directly using "),PTe=n(Zze,"CODE",{});var Tkt=s(PTe);WLr=r(Tkt,"__init__()"),Tkt.forEach(t),HLr=r(Zze," (throws an error)."),Zze.forEach(t),ULr=i(jl),Nt=n(jl,"DIV",{class:!0});var J6=s(Nt);T(ix.$$.fragment,J6),JLr=i(J6),BTe=n(J6,"P",{});var Mkt=s(BTe);YLr=r(Mkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mkt.forEach(t),KLr=i(J6),wc=n(J6,"P",{});var Yre=s(wc);ZLr=r(Yre,`Note:
Loading a model from its configuration file does `),ITe=n(Yre,"STRONG",{});var Ekt=s(ITe);eyr=r(Ekt,"not"),Ekt.forEach(t),oyr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Yre,"A",{href:!0});var Ckt=s(xY);ryr=r(Ckt,"from_pretrained()"),Ckt.forEach(t),tyr=r(Yre," to load the model weights."),Yre.forEach(t),ayr=i(J6),T(rC.$$.fragment,J6),J6.forEach(t),nyr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(dx.$$.fragment,Dl),syr=i(Dl),NTe=n(Dl,"P",{});var wkt=s(NTe);lyr=r(wkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wkt.forEach(t),iyr=i(Dl),gn=n(Dl,"P",{});var Y6=s(gn);dyr=r(Y6,"The model class to instantiate is selected based on the "),qTe=n(Y6,"CODE",{});var Akt=s(qTe);cyr=r(Akt,"model_type"),Akt.forEach(t),fyr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),jTe=n(Y6,"CODE",{});var Lkt=s(jTe);myr=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),gyr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(Y6,"CODE",{});var ykt=s(DTe);hyr=r(ykt,"pretrained_model_name_or_path"),ykt.forEach(t),pyr=r(Y6,":"),Y6.forEach(t),_yr=i(Dl),_e=n(Dl,"UL",{});var ve=s(_e);tC=n(ve,"LI",{});var gje=s(tC);GTe=n(gje,"STRONG",{});var xkt=s(GTe);uyr=r(xkt,"albert"),xkt.forEach(t),byr=r(gje," \u2014 "),$Y=n(gje,"A",{href:!0});var $kt=s($Y);vyr=r($kt,"TFAlbertForMultipleChoice"),$kt.forEach(t),Fyr=r(gje," (ALBERT model)"),gje.forEach(t),Tyr=i(ve),aC=n(ve,"LI",{});var hje=s(aC);OTe=n(hje,"STRONG",{});var kkt=s(OTe);Myr=r(kkt,"bert"),kkt.forEach(t),Eyr=r(hje," \u2014 "),kY=n(hje,"A",{href:!0});var Skt=s(kY);Cyr=r(Skt,"TFBertForMultipleChoice"),Skt.forEach(t),wyr=r(hje," (BERT model)"),hje.forEach(t),Ayr=i(ve),nC=n(ve,"LI",{});var pje=s(nC);VTe=n(pje,"STRONG",{});var Rkt=s(VTe);Lyr=r(Rkt,"camembert"),Rkt.forEach(t),yyr=r(pje," \u2014 "),SY=n(pje,"A",{href:!0});var Pkt=s(SY);xyr=r(Pkt,"TFCamembertForMultipleChoice"),Pkt.forEach(t),$yr=r(pje," (CamemBERT model)"),pje.forEach(t),kyr=i(ve),sC=n(ve,"LI",{});var _je=s(sC);XTe=n(_je,"STRONG",{});var Bkt=s(XTe);Syr=r(Bkt,"convbert"),Bkt.forEach(t),Ryr=r(_je," \u2014 "),RY=n(_je,"A",{href:!0});var Ikt=s(RY);Pyr=r(Ikt,"TFConvBertForMultipleChoice"),Ikt.forEach(t),Byr=r(_je," (ConvBERT model)"),_je.forEach(t),Iyr=i(ve),lC=n(ve,"LI",{});var uje=s(lC);zTe=n(uje,"STRONG",{});var Nkt=s(zTe);Nyr=r(Nkt,"distilbert"),Nkt.forEach(t),qyr=r(uje," \u2014 "),PY=n(uje,"A",{href:!0});var qkt=s(PY);jyr=r(qkt,"TFDistilBertForMultipleChoice"),qkt.forEach(t),Dyr=r(uje," (DistilBERT model)"),uje.forEach(t),Gyr=i(ve),iC=n(ve,"LI",{});var bje=s(iC);QTe=n(bje,"STRONG",{});var jkt=s(QTe);Oyr=r(jkt,"electra"),jkt.forEach(t),Vyr=r(bje," \u2014 "),BY=n(bje,"A",{href:!0});var Dkt=s(BY);Xyr=r(Dkt,"TFElectraForMultipleChoice"),Dkt.forEach(t),zyr=r(bje," (ELECTRA model)"),bje.forEach(t),Qyr=i(ve),dC=n(ve,"LI",{});var vje=s(dC);WTe=n(vje,"STRONG",{});var Gkt=s(WTe);Wyr=r(Gkt,"flaubert"),Gkt.forEach(t),Hyr=r(vje," \u2014 "),IY=n(vje,"A",{href:!0});var Okt=s(IY);Uyr=r(Okt,"TFFlaubertForMultipleChoice"),Okt.forEach(t),Jyr=r(vje," (FlauBERT model)"),vje.forEach(t),Yyr=i(ve),cC=n(ve,"LI",{});var Fje=s(cC);HTe=n(Fje,"STRONG",{});var Vkt=s(HTe);Kyr=r(Vkt,"funnel"),Vkt.forEach(t),Zyr=r(Fje," \u2014 "),NY=n(Fje,"A",{href:!0});var Xkt=s(NY);e8r=r(Xkt,"TFFunnelForMultipleChoice"),Xkt.forEach(t),o8r=r(Fje," (Funnel Transformer model)"),Fje.forEach(t),r8r=i(ve),fC=n(ve,"LI",{});var Tje=s(fC);UTe=n(Tje,"STRONG",{});var zkt=s(UTe);t8r=r(zkt,"longformer"),zkt.forEach(t),a8r=r(Tje," \u2014 "),qY=n(Tje,"A",{href:!0});var Qkt=s(qY);n8r=r(Qkt,"TFLongformerForMultipleChoice"),Qkt.forEach(t),s8r=r(Tje," (Longformer model)"),Tje.forEach(t),l8r=i(ve),mC=n(ve,"LI",{});var Mje=s(mC);JTe=n(Mje,"STRONG",{});var Wkt=s(JTe);i8r=r(Wkt,"mobilebert"),Wkt.forEach(t),d8r=r(Mje," \u2014 "),jY=n(Mje,"A",{href:!0});var Hkt=s(jY);c8r=r(Hkt,"TFMobileBertForMultipleChoice"),Hkt.forEach(t),f8r=r(Mje," (MobileBERT model)"),Mje.forEach(t),m8r=i(ve),gC=n(ve,"LI",{});var Eje=s(gC);YTe=n(Eje,"STRONG",{});var Ukt=s(YTe);g8r=r(Ukt,"mpnet"),Ukt.forEach(t),h8r=r(Eje," \u2014 "),DY=n(Eje,"A",{href:!0});var Jkt=s(DY);p8r=r(Jkt,"TFMPNetForMultipleChoice"),Jkt.forEach(t),_8r=r(Eje," (MPNet model)"),Eje.forEach(t),u8r=i(ve),hC=n(ve,"LI",{});var Cje=s(hC);KTe=n(Cje,"STRONG",{});var Ykt=s(KTe);b8r=r(Ykt,"rembert"),Ykt.forEach(t),v8r=r(Cje," \u2014 "),GY=n(Cje,"A",{href:!0});var Kkt=s(GY);F8r=r(Kkt,"TFRemBertForMultipleChoice"),Kkt.forEach(t),T8r=r(Cje," (RemBERT model)"),Cje.forEach(t),M8r=i(ve),pC=n(ve,"LI",{});var wje=s(pC);ZTe=n(wje,"STRONG",{});var Zkt=s(ZTe);E8r=r(Zkt,"roberta"),Zkt.forEach(t),C8r=r(wje," \u2014 "),OY=n(wje,"A",{href:!0});var eSt=s(OY);w8r=r(eSt,"TFRobertaForMultipleChoice"),eSt.forEach(t),A8r=r(wje," (RoBERTa model)"),wje.forEach(t),L8r=i(ve),_C=n(ve,"LI",{});var Aje=s(_C);eMe=n(Aje,"STRONG",{});var oSt=s(eMe);y8r=r(oSt,"roformer"),oSt.forEach(t),x8r=r(Aje," \u2014 "),VY=n(Aje,"A",{href:!0});var rSt=s(VY);$8r=r(rSt,"TFRoFormerForMultipleChoice"),rSt.forEach(t),k8r=r(Aje," (RoFormer model)"),Aje.forEach(t),S8r=i(ve),uC=n(ve,"LI",{});var Lje=s(uC);oMe=n(Lje,"STRONG",{});var tSt=s(oMe);R8r=r(tSt,"xlm"),tSt.forEach(t),P8r=r(Lje," \u2014 "),XY=n(Lje,"A",{href:!0});var aSt=s(XY);B8r=r(aSt,"TFXLMForMultipleChoice"),aSt.forEach(t),I8r=r(Lje," (XLM model)"),Lje.forEach(t),N8r=i(ve),bC=n(ve,"LI",{});var yje=s(bC);rMe=n(yje,"STRONG",{});var nSt=s(rMe);q8r=r(nSt,"xlm-roberta"),nSt.forEach(t),j8r=r(yje," \u2014 "),zY=n(yje,"A",{href:!0});var sSt=s(zY);D8r=r(sSt,"TFXLMRobertaForMultipleChoice"),sSt.forEach(t),G8r=r(yje," (XLM-RoBERTa model)"),yje.forEach(t),O8r=i(ve),vC=n(ve,"LI",{});var xje=s(vC);tMe=n(xje,"STRONG",{});var lSt=s(tMe);V8r=r(lSt,"xlnet"),lSt.forEach(t),X8r=r(xje," \u2014 "),QY=n(xje,"A",{href:!0});var iSt=s(QY);z8r=r(iSt,"TFXLNetForMultipleChoice"),iSt.forEach(t),Q8r=r(xje," (XLNet model)"),xje.forEach(t),ve.forEach(t),W8r=i(Dl),T(FC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),QVe=i(f),Ac=n(f,"H2",{class:!0});var eQe=s(Ac);TC=n(eQe,"A",{id:!0,class:!0,href:!0});var dSt=s(TC);aMe=n(dSt,"SPAN",{});var cSt=s(aMe);T(cx.$$.fragment,cSt),cSt.forEach(t),dSt.forEach(t),H8r=i(eQe),nMe=n(eQe,"SPAN",{});var fSt=s(nMe);U8r=r(fSt,"TFAutoModelForNextSentencePrediction"),fSt.forEach(t),eQe.forEach(t),WVe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(fx.$$.fragment,Gl),J8r=i(Gl),Lc=n(Gl,"P",{});var Kre=s(Lc);Y8r=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=n(Kre,"A",{href:!0});var mSt=s(WY);K8r=r(mSt,"from_pretrained()"),mSt.forEach(t),Z8r=r(Kre," class method or the "),HY=n(Kre,"A",{href:!0});var gSt=s(HY);e9r=r(gSt,"from_config()"),gSt.forEach(t),o9r=r(Kre,` class
method.`),Kre.forEach(t),r9r=i(Gl),mx=n(Gl,"P",{});var oQe=s(mx);t9r=r(oQe,"This class cannot be instantiated directly using "),sMe=n(oQe,"CODE",{});var hSt=s(sMe);a9r=r(hSt,"__init__()"),hSt.forEach(t),n9r=r(oQe," (throws an error)."),oQe.forEach(t),s9r=i(Gl),qt=n(Gl,"DIV",{class:!0});var K6=s(qt);T(gx.$$.fragment,K6),l9r=i(K6),lMe=n(K6,"P",{});var pSt=s(lMe);i9r=r(pSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pSt.forEach(t),d9r=i(K6),yc=n(K6,"P",{});var Zre=s(yc);c9r=r(Zre,`Note:
Loading a model from its configuration file does `),iMe=n(Zre,"STRONG",{});var _St=s(iMe);f9r=r(_St,"not"),_St.forEach(t),m9r=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(Zre,"A",{href:!0});var uSt=s(UY);g9r=r(uSt,"from_pretrained()"),uSt.forEach(t),h9r=r(Zre," to load the model weights."),Zre.forEach(t),p9r=i(K6),T(MC.$$.fragment,K6),K6.forEach(t),_9r=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(hx.$$.fragment,Ol),u9r=i(Ol),dMe=n(Ol,"P",{});var bSt=s(dMe);b9r=r(bSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bSt.forEach(t),v9r=i(Ol),hn=n(Ol,"P",{});var Z6=s(hn);F9r=r(Z6,"The model class to instantiate is selected based on the "),cMe=n(Z6,"CODE",{});var vSt=s(cMe);T9r=r(vSt,"model_type"),vSt.forEach(t),M9r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),fMe=n(Z6,"CODE",{});var FSt=s(fMe);E9r=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),C9r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(Z6,"CODE",{});var TSt=s(mMe);w9r=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),A9r=r(Z6,":"),Z6.forEach(t),L9r=i(Ol),px=n(Ol,"UL",{});var rQe=s(px);EC=n(rQe,"LI",{});var $je=s(EC);gMe=n($je,"STRONG",{});var MSt=s(gMe);y9r=r(MSt,"bert"),MSt.forEach(t),x9r=r($je," \u2014 "),JY=n($je,"A",{href:!0});var ESt=s(JY);$9r=r(ESt,"TFBertForNextSentencePrediction"),ESt.forEach(t),k9r=r($je," (BERT model)"),$je.forEach(t),S9r=i(rQe),CC=n(rQe,"LI",{});var kje=s(CC);hMe=n(kje,"STRONG",{});var CSt=s(hMe);R9r=r(CSt,"mobilebert"),CSt.forEach(t),P9r=r(kje," \u2014 "),YY=n(kje,"A",{href:!0});var wSt=s(YY);B9r=r(wSt,"TFMobileBertForNextSentencePrediction"),wSt.forEach(t),I9r=r(kje," (MobileBERT model)"),kje.forEach(t),rQe.forEach(t),N9r=i(Ol),T(wC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),HVe=i(f),xc=n(f,"H2",{class:!0});var tQe=s(xc);AC=n(tQe,"A",{id:!0,class:!0,href:!0});var ASt=s(AC);pMe=n(ASt,"SPAN",{});var LSt=s(pMe);T(_x.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),q9r=i(tQe),_Me=n(tQe,"SPAN",{});var ySt=s(_Me);j9r=r(ySt,"TFAutoModelForTableQuestionAnswering"),ySt.forEach(t),tQe.forEach(t),UVe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(ux.$$.fragment,Vl),D9r=i(Vl),$c=n(Vl,"P",{});var ete=s($c);G9r=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KY=n(ete,"A",{href:!0});var xSt=s(KY);O9r=r(xSt,"from_pretrained()"),xSt.forEach(t),V9r=r(ete," class method or the "),ZY=n(ete,"A",{href:!0});var $St=s(ZY);X9r=r($St,"from_config()"),$St.forEach(t),z9r=r(ete,` class
method.`),ete.forEach(t),Q9r=i(Vl),bx=n(Vl,"P",{});var aQe=s(bx);W9r=r(aQe,"This class cannot be instantiated directly using "),uMe=n(aQe,"CODE",{});var kSt=s(uMe);H9r=r(kSt,"__init__()"),kSt.forEach(t),U9r=r(aQe," (throws an error)."),aQe.forEach(t),J9r=i(Vl),jt=n(Vl,"DIV",{class:!0});var eL=s(jt);T(vx.$$.fragment,eL),Y9r=i(eL),bMe=n(eL,"P",{});var SSt=s(bMe);K9r=r(SSt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SSt.forEach(t),Z9r=i(eL),kc=n(eL,"P",{});var ote=s(kc);exr=r(ote,`Note:
Loading a model from its configuration file does `),vMe=n(ote,"STRONG",{});var RSt=s(vMe);oxr=r(RSt,"not"),RSt.forEach(t),rxr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(ote,"A",{href:!0});var PSt=s(eK);txr=r(PSt,"from_pretrained()"),PSt.forEach(t),axr=r(ote," to load the model weights."),ote.forEach(t),nxr=i(eL),T(LC.$$.fragment,eL),eL.forEach(t),sxr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(Fx.$$.fragment,Xl),lxr=i(Xl),FMe=n(Xl,"P",{});var BSt=s(FMe);ixr=r(BSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BSt.forEach(t),dxr=i(Xl),pn=n(Xl,"P",{});var oL=s(pn);cxr=r(oL,"The model class to instantiate is selected based on the "),TMe=n(oL,"CODE",{});var ISt=s(TMe);fxr=r(ISt,"model_type"),ISt.forEach(t),mxr=r(oL,` property of the config object (either
passed as an argument or loaded from `),MMe=n(oL,"CODE",{});var NSt=s(MMe);gxr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),hxr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=n(oL,"CODE",{});var qSt=s(EMe);pxr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),_xr=r(oL,":"),oL.forEach(t),uxr=i(Xl),CMe=n(Xl,"UL",{});var jSt=s(CMe);yC=n(jSt,"LI",{});var Sje=s(yC);wMe=n(Sje,"STRONG",{});var DSt=s(wMe);bxr=r(DSt,"tapas"),DSt.forEach(t),vxr=r(Sje," \u2014 "),oK=n(Sje,"A",{href:!0});var GSt=s(oK);Fxr=r(GSt,"TFTapasForQuestionAnswering"),GSt.forEach(t),Txr=r(Sje," (TAPAS model)"),Sje.forEach(t),jSt.forEach(t),Mxr=i(Xl),T(xC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),JVe=i(f),Sc=n(f,"H2",{class:!0});var nQe=s(Sc);$C=n(nQe,"A",{id:!0,class:!0,href:!0});var OSt=s($C);AMe=n(OSt,"SPAN",{});var VSt=s(AMe);T(Tx.$$.fragment,VSt),VSt.forEach(t),OSt.forEach(t),Exr=i(nQe),LMe=n(nQe,"SPAN",{});var XSt=s(LMe);Cxr=r(XSt,"TFAutoModelForTokenClassification"),XSt.forEach(t),nQe.forEach(t),YVe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(Mx.$$.fragment,zl),wxr=i(zl),Rc=n(zl,"P",{});var rte=s(Rc);Axr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rK=n(rte,"A",{href:!0});var zSt=s(rK);Lxr=r(zSt,"from_pretrained()"),zSt.forEach(t),yxr=r(rte," class method or the "),tK=n(rte,"A",{href:!0});var QSt=s(tK);xxr=r(QSt,"from_config()"),QSt.forEach(t),$xr=r(rte,` class
method.`),rte.forEach(t),kxr=i(zl),Ex=n(zl,"P",{});var sQe=s(Ex);Sxr=r(sQe,"This class cannot be instantiated directly using "),yMe=n(sQe,"CODE",{});var WSt=s(yMe);Rxr=r(WSt,"__init__()"),WSt.forEach(t),Pxr=r(sQe," (throws an error)."),sQe.forEach(t),Bxr=i(zl),Dt=n(zl,"DIV",{class:!0});var rL=s(Dt);T(Cx.$$.fragment,rL),Ixr=i(rL),xMe=n(rL,"P",{});var HSt=s(xMe);Nxr=r(HSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HSt.forEach(t),qxr=i(rL),Pc=n(rL,"P",{});var tte=s(Pc);jxr=r(tte,`Note:
Loading a model from its configuration file does `),$Me=n(tte,"STRONG",{});var USt=s($Me);Dxr=r(USt,"not"),USt.forEach(t),Gxr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(tte,"A",{href:!0});var JSt=s(aK);Oxr=r(JSt,"from_pretrained()"),JSt.forEach(t),Vxr=r(tte," to load the model weights."),tte.forEach(t),Xxr=i(rL),T(kC.$$.fragment,rL),rL.forEach(t),zxr=i(zl),qr=n(zl,"DIV",{class:!0});var Ql=s(qr);T(wx.$$.fragment,Ql),Qxr=i(Ql),kMe=n(Ql,"P",{});var YSt=s(kMe);Wxr=r(YSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YSt.forEach(t),Hxr=i(Ql),_n=n(Ql,"P",{});var tL=s(_n);Uxr=r(tL,"The model class to instantiate is selected based on the "),SMe=n(tL,"CODE",{});var KSt=s(SMe);Jxr=r(KSt,"model_type"),KSt.forEach(t),Yxr=r(tL,` property of the config object (either
passed as an argument or loaded from `),RMe=n(tL,"CODE",{});var ZSt=s(RMe);Kxr=r(ZSt,"pretrained_model_name_or_path"),ZSt.forEach(t),Zxr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(tL,"CODE",{});var eRt=s(PMe);e$r=r(eRt,"pretrained_model_name_or_path"),eRt.forEach(t),o$r=r(tL,":"),tL.forEach(t),r$r=i(Ql),de=n(Ql,"UL",{});var me=s(de);SC=n(me,"LI",{});var Rje=s(SC);BMe=n(Rje,"STRONG",{});var oRt=s(BMe);t$r=r(oRt,"albert"),oRt.forEach(t),a$r=r(Rje," \u2014 "),nK=n(Rje,"A",{href:!0});var rRt=s(nK);n$r=r(rRt,"TFAlbertForTokenClassification"),rRt.forEach(t),s$r=r(Rje," (ALBERT model)"),Rje.forEach(t),l$r=i(me),RC=n(me,"LI",{});var Pje=s(RC);IMe=n(Pje,"STRONG",{});var tRt=s(IMe);i$r=r(tRt,"bert"),tRt.forEach(t),d$r=r(Pje," \u2014 "),sK=n(Pje,"A",{href:!0});var aRt=s(sK);c$r=r(aRt,"TFBertForTokenClassification"),aRt.forEach(t),f$r=r(Pje," (BERT model)"),Pje.forEach(t),m$r=i(me),PC=n(me,"LI",{});var Bje=s(PC);NMe=n(Bje,"STRONG",{});var nRt=s(NMe);g$r=r(nRt,"camembert"),nRt.forEach(t),h$r=r(Bje," \u2014 "),lK=n(Bje,"A",{href:!0});var sRt=s(lK);p$r=r(sRt,"TFCamembertForTokenClassification"),sRt.forEach(t),_$r=r(Bje," (CamemBERT model)"),Bje.forEach(t),u$r=i(me),BC=n(me,"LI",{});var Ije=s(BC);qMe=n(Ije,"STRONG",{});var lRt=s(qMe);b$r=r(lRt,"convbert"),lRt.forEach(t),v$r=r(Ije," \u2014 "),iK=n(Ije,"A",{href:!0});var iRt=s(iK);F$r=r(iRt,"TFConvBertForTokenClassification"),iRt.forEach(t),T$r=r(Ije," (ConvBERT model)"),Ije.forEach(t),M$r=i(me),IC=n(me,"LI",{});var Nje=s(IC);jMe=n(Nje,"STRONG",{});var dRt=s(jMe);E$r=r(dRt,"deberta"),dRt.forEach(t),C$r=r(Nje," \u2014 "),dK=n(Nje,"A",{href:!0});var cRt=s(dK);w$r=r(cRt,"TFDebertaForTokenClassification"),cRt.forEach(t),A$r=r(Nje," (DeBERTa model)"),Nje.forEach(t),L$r=i(me),NC=n(me,"LI",{});var qje=s(NC);DMe=n(qje,"STRONG",{});var fRt=s(DMe);y$r=r(fRt,"deberta-v2"),fRt.forEach(t),x$r=r(qje," \u2014 "),cK=n(qje,"A",{href:!0});var mRt=s(cK);$$r=r(mRt,"TFDebertaV2ForTokenClassification"),mRt.forEach(t),k$r=r(qje," (DeBERTa-v2 model)"),qje.forEach(t),S$r=i(me),qC=n(me,"LI",{});var jje=s(qC);GMe=n(jje,"STRONG",{});var gRt=s(GMe);R$r=r(gRt,"distilbert"),gRt.forEach(t),P$r=r(jje," \u2014 "),fK=n(jje,"A",{href:!0});var hRt=s(fK);B$r=r(hRt,"TFDistilBertForTokenClassification"),hRt.forEach(t),I$r=r(jje," (DistilBERT model)"),jje.forEach(t),N$r=i(me),jC=n(me,"LI",{});var Dje=s(jC);OMe=n(Dje,"STRONG",{});var pRt=s(OMe);q$r=r(pRt,"electra"),pRt.forEach(t),j$r=r(Dje," \u2014 "),mK=n(Dje,"A",{href:!0});var _Rt=s(mK);D$r=r(_Rt,"TFElectraForTokenClassification"),_Rt.forEach(t),G$r=r(Dje," (ELECTRA model)"),Dje.forEach(t),O$r=i(me),DC=n(me,"LI",{});var Gje=s(DC);VMe=n(Gje,"STRONG",{});var uRt=s(VMe);V$r=r(uRt,"flaubert"),uRt.forEach(t),X$r=r(Gje," \u2014 "),gK=n(Gje,"A",{href:!0});var bRt=s(gK);z$r=r(bRt,"TFFlaubertForTokenClassification"),bRt.forEach(t),Q$r=r(Gje," (FlauBERT model)"),Gje.forEach(t),W$r=i(me),GC=n(me,"LI",{});var Oje=s(GC);XMe=n(Oje,"STRONG",{});var vRt=s(XMe);H$r=r(vRt,"funnel"),vRt.forEach(t),U$r=r(Oje," \u2014 "),hK=n(Oje,"A",{href:!0});var FRt=s(hK);J$r=r(FRt,"TFFunnelForTokenClassification"),FRt.forEach(t),Y$r=r(Oje," (Funnel Transformer model)"),Oje.forEach(t),K$r=i(me),OC=n(me,"LI",{});var Vje=s(OC);zMe=n(Vje,"STRONG",{});var TRt=s(zMe);Z$r=r(TRt,"layoutlm"),TRt.forEach(t),ekr=r(Vje," \u2014 "),pK=n(Vje,"A",{href:!0});var MRt=s(pK);okr=r(MRt,"TFLayoutLMForTokenClassification"),MRt.forEach(t),rkr=r(Vje," (LayoutLM model)"),Vje.forEach(t),tkr=i(me),VC=n(me,"LI",{});var Xje=s(VC);QMe=n(Xje,"STRONG",{});var ERt=s(QMe);akr=r(ERt,"longformer"),ERt.forEach(t),nkr=r(Xje," \u2014 "),_K=n(Xje,"A",{href:!0});var CRt=s(_K);skr=r(CRt,"TFLongformerForTokenClassification"),CRt.forEach(t),lkr=r(Xje," (Longformer model)"),Xje.forEach(t),ikr=i(me),XC=n(me,"LI",{});var zje=s(XC);WMe=n(zje,"STRONG",{});var wRt=s(WMe);dkr=r(wRt,"mobilebert"),wRt.forEach(t),ckr=r(zje," \u2014 "),uK=n(zje,"A",{href:!0});var ARt=s(uK);fkr=r(ARt,"TFMobileBertForTokenClassification"),ARt.forEach(t),mkr=r(zje," (MobileBERT model)"),zje.forEach(t),gkr=i(me),zC=n(me,"LI",{});var Qje=s(zC);HMe=n(Qje,"STRONG",{});var LRt=s(HMe);hkr=r(LRt,"mpnet"),LRt.forEach(t),pkr=r(Qje," \u2014 "),bK=n(Qje,"A",{href:!0});var yRt=s(bK);_kr=r(yRt,"TFMPNetForTokenClassification"),yRt.forEach(t),ukr=r(Qje," (MPNet model)"),Qje.forEach(t),bkr=i(me),QC=n(me,"LI",{});var Wje=s(QC);UMe=n(Wje,"STRONG",{});var xRt=s(UMe);vkr=r(xRt,"rembert"),xRt.forEach(t),Fkr=r(Wje," \u2014 "),vK=n(Wje,"A",{href:!0});var $Rt=s(vK);Tkr=r($Rt,"TFRemBertForTokenClassification"),$Rt.forEach(t),Mkr=r(Wje," (RemBERT model)"),Wje.forEach(t),Ekr=i(me),WC=n(me,"LI",{});var Hje=s(WC);JMe=n(Hje,"STRONG",{});var kRt=s(JMe);Ckr=r(kRt,"roberta"),kRt.forEach(t),wkr=r(Hje," \u2014 "),FK=n(Hje,"A",{href:!0});var SRt=s(FK);Akr=r(SRt,"TFRobertaForTokenClassification"),SRt.forEach(t),Lkr=r(Hje," (RoBERTa model)"),Hje.forEach(t),ykr=i(me),HC=n(me,"LI",{});var Uje=s(HC);YMe=n(Uje,"STRONG",{});var RRt=s(YMe);xkr=r(RRt,"roformer"),RRt.forEach(t),$kr=r(Uje," \u2014 "),TK=n(Uje,"A",{href:!0});var PRt=s(TK);kkr=r(PRt,"TFRoFormerForTokenClassification"),PRt.forEach(t),Skr=r(Uje," (RoFormer model)"),Uje.forEach(t),Rkr=i(me),UC=n(me,"LI",{});var Jje=s(UC);KMe=n(Jje,"STRONG",{});var BRt=s(KMe);Pkr=r(BRt,"xlm"),BRt.forEach(t),Bkr=r(Jje," \u2014 "),MK=n(Jje,"A",{href:!0});var IRt=s(MK);Ikr=r(IRt,"TFXLMForTokenClassification"),IRt.forEach(t),Nkr=r(Jje," (XLM model)"),Jje.forEach(t),qkr=i(me),JC=n(me,"LI",{});var Yje=s(JC);ZMe=n(Yje,"STRONG",{});var NRt=s(ZMe);jkr=r(NRt,"xlm-roberta"),NRt.forEach(t),Dkr=r(Yje," \u2014 "),EK=n(Yje,"A",{href:!0});var qRt=s(EK);Gkr=r(qRt,"TFXLMRobertaForTokenClassification"),qRt.forEach(t),Okr=r(Yje," (XLM-RoBERTa model)"),Yje.forEach(t),Vkr=i(me),YC=n(me,"LI",{});var Kje=s(YC);eEe=n(Kje,"STRONG",{});var jRt=s(eEe);Xkr=r(jRt,"xlnet"),jRt.forEach(t),zkr=r(Kje," \u2014 "),CK=n(Kje,"A",{href:!0});var DRt=s(CK);Qkr=r(DRt,"TFXLNetForTokenClassification"),DRt.forEach(t),Wkr=r(Kje," (XLNet model)"),Kje.forEach(t),me.forEach(t),Hkr=i(Ql),T(KC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),KVe=i(f),Bc=n(f,"H2",{class:!0});var lQe=s(Bc);ZC=n(lQe,"A",{id:!0,class:!0,href:!0});var GRt=s(ZC);oEe=n(GRt,"SPAN",{});var ORt=s(oEe);T(Ax.$$.fragment,ORt),ORt.forEach(t),GRt.forEach(t),Ukr=i(lQe),rEe=n(lQe,"SPAN",{});var VRt=s(rEe);Jkr=r(VRt,"TFAutoModelForQuestionAnswering"),VRt.forEach(t),lQe.forEach(t),ZVe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(Lx.$$.fragment,Wl),Ykr=i(Wl),Ic=n(Wl,"P",{});var ate=s(Ic);Kkr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wK=n(ate,"A",{href:!0});var XRt=s(wK);Zkr=r(XRt,"from_pretrained()"),XRt.forEach(t),eSr=r(ate," class method or the "),AK=n(ate,"A",{href:!0});var zRt=s(AK);oSr=r(zRt,"from_config()"),zRt.forEach(t),rSr=r(ate,` class
method.`),ate.forEach(t),tSr=i(Wl),yx=n(Wl,"P",{});var iQe=s(yx);aSr=r(iQe,"This class cannot be instantiated directly using "),tEe=n(iQe,"CODE",{});var QRt=s(tEe);nSr=r(QRt,"__init__()"),QRt.forEach(t),sSr=r(iQe," (throws an error)."),iQe.forEach(t),lSr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var aL=s(Gt);T(xx.$$.fragment,aL),iSr=i(aL),aEe=n(aL,"P",{});var WRt=s(aEe);dSr=r(WRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),WRt.forEach(t),cSr=i(aL),Nc=n(aL,"P",{});var nte=s(Nc);fSr=r(nte,`Note:
Loading a model from its configuration file does `),nEe=n(nte,"STRONG",{});var HRt=s(nEe);mSr=r(HRt,"not"),HRt.forEach(t),gSr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(nte,"A",{href:!0});var URt=s(LK);hSr=r(URt,"from_pretrained()"),URt.forEach(t),pSr=r(nte," to load the model weights."),nte.forEach(t),_Sr=i(aL),T(e5.$$.fragment,aL),aL.forEach(t),uSr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Hl=s(jr);T($x.$$.fragment,Hl),bSr=i(Hl),sEe=n(Hl,"P",{});var JRt=s(sEe);vSr=r(JRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JRt.forEach(t),FSr=i(Hl),un=n(Hl,"P",{});var nL=s(un);TSr=r(nL,"The model class to instantiate is selected based on the "),lEe=n(nL,"CODE",{});var YRt=s(lEe);MSr=r(YRt,"model_type"),YRt.forEach(t),ESr=r(nL,` property of the config object (either
passed as an argument or loaded from `),iEe=n(nL,"CODE",{});var KRt=s(iEe);CSr=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),wSr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(nL,"CODE",{});var ZRt=s(dEe);ASr=r(ZRt,"pretrained_model_name_or_path"),ZRt.forEach(t),LSr=r(nL,":"),nL.forEach(t),ySr=i(Hl),ce=n(Hl,"UL",{});var ge=s(ce);o5=n(ge,"LI",{});var Zje=s(o5);cEe=n(Zje,"STRONG",{});var ePt=s(cEe);xSr=r(ePt,"albert"),ePt.forEach(t),$Sr=r(Zje," \u2014 "),yK=n(Zje,"A",{href:!0});var oPt=s(yK);kSr=r(oPt,"TFAlbertForQuestionAnswering"),oPt.forEach(t),SSr=r(Zje," (ALBERT model)"),Zje.forEach(t),RSr=i(ge),r5=n(ge,"LI",{});var eDe=s(r5);fEe=n(eDe,"STRONG",{});var rPt=s(fEe);PSr=r(rPt,"bert"),rPt.forEach(t),BSr=r(eDe," \u2014 "),xK=n(eDe,"A",{href:!0});var tPt=s(xK);ISr=r(tPt,"TFBertForQuestionAnswering"),tPt.forEach(t),NSr=r(eDe," (BERT model)"),eDe.forEach(t),qSr=i(ge),t5=n(ge,"LI",{});var oDe=s(t5);mEe=n(oDe,"STRONG",{});var aPt=s(mEe);jSr=r(aPt,"camembert"),aPt.forEach(t),DSr=r(oDe," \u2014 "),$K=n(oDe,"A",{href:!0});var nPt=s($K);GSr=r(nPt,"TFCamembertForQuestionAnswering"),nPt.forEach(t),OSr=r(oDe," (CamemBERT model)"),oDe.forEach(t),VSr=i(ge),a5=n(ge,"LI",{});var rDe=s(a5);gEe=n(rDe,"STRONG",{});var sPt=s(gEe);XSr=r(sPt,"convbert"),sPt.forEach(t),zSr=r(rDe," \u2014 "),kK=n(rDe,"A",{href:!0});var lPt=s(kK);QSr=r(lPt,"TFConvBertForQuestionAnswering"),lPt.forEach(t),WSr=r(rDe," (ConvBERT model)"),rDe.forEach(t),HSr=i(ge),n5=n(ge,"LI",{});var tDe=s(n5);hEe=n(tDe,"STRONG",{});var iPt=s(hEe);USr=r(iPt,"deberta"),iPt.forEach(t),JSr=r(tDe," \u2014 "),SK=n(tDe,"A",{href:!0});var dPt=s(SK);YSr=r(dPt,"TFDebertaForQuestionAnswering"),dPt.forEach(t),KSr=r(tDe," (DeBERTa model)"),tDe.forEach(t),ZSr=i(ge),s5=n(ge,"LI",{});var aDe=s(s5);pEe=n(aDe,"STRONG",{});var cPt=s(pEe);eRr=r(cPt,"deberta-v2"),cPt.forEach(t),oRr=r(aDe," \u2014 "),RK=n(aDe,"A",{href:!0});var fPt=s(RK);rRr=r(fPt,"TFDebertaV2ForQuestionAnswering"),fPt.forEach(t),tRr=r(aDe," (DeBERTa-v2 model)"),aDe.forEach(t),aRr=i(ge),l5=n(ge,"LI",{});var nDe=s(l5);_Ee=n(nDe,"STRONG",{});var mPt=s(_Ee);nRr=r(mPt,"distilbert"),mPt.forEach(t),sRr=r(nDe," \u2014 "),PK=n(nDe,"A",{href:!0});var gPt=s(PK);lRr=r(gPt,"TFDistilBertForQuestionAnswering"),gPt.forEach(t),iRr=r(nDe," (DistilBERT model)"),nDe.forEach(t),dRr=i(ge),i5=n(ge,"LI",{});var sDe=s(i5);uEe=n(sDe,"STRONG",{});var hPt=s(uEe);cRr=r(hPt,"electra"),hPt.forEach(t),fRr=r(sDe," \u2014 "),BK=n(sDe,"A",{href:!0});var pPt=s(BK);mRr=r(pPt,"TFElectraForQuestionAnswering"),pPt.forEach(t),gRr=r(sDe," (ELECTRA model)"),sDe.forEach(t),hRr=i(ge),d5=n(ge,"LI",{});var lDe=s(d5);bEe=n(lDe,"STRONG",{});var _Pt=s(bEe);pRr=r(_Pt,"flaubert"),_Pt.forEach(t),_Rr=r(lDe," \u2014 "),IK=n(lDe,"A",{href:!0});var uPt=s(IK);uRr=r(uPt,"TFFlaubertForQuestionAnsweringSimple"),uPt.forEach(t),bRr=r(lDe," (FlauBERT model)"),lDe.forEach(t),vRr=i(ge),c5=n(ge,"LI",{});var iDe=s(c5);vEe=n(iDe,"STRONG",{});var bPt=s(vEe);FRr=r(bPt,"funnel"),bPt.forEach(t),TRr=r(iDe," \u2014 "),NK=n(iDe,"A",{href:!0});var vPt=s(NK);MRr=r(vPt,"TFFunnelForQuestionAnswering"),vPt.forEach(t),ERr=r(iDe," (Funnel Transformer model)"),iDe.forEach(t),CRr=i(ge),f5=n(ge,"LI",{});var dDe=s(f5);FEe=n(dDe,"STRONG",{});var FPt=s(FEe);wRr=r(FPt,"gptj"),FPt.forEach(t),ARr=r(dDe," \u2014 "),qK=n(dDe,"A",{href:!0});var TPt=s(qK);LRr=r(TPt,"TFGPTJForQuestionAnswering"),TPt.forEach(t),yRr=r(dDe," (GPT-J model)"),dDe.forEach(t),xRr=i(ge),m5=n(ge,"LI",{});var cDe=s(m5);TEe=n(cDe,"STRONG",{});var MPt=s(TEe);$Rr=r(MPt,"longformer"),MPt.forEach(t),kRr=r(cDe," \u2014 "),jK=n(cDe,"A",{href:!0});var EPt=s(jK);SRr=r(EPt,"TFLongformerForQuestionAnswering"),EPt.forEach(t),RRr=r(cDe," (Longformer model)"),cDe.forEach(t),PRr=i(ge),g5=n(ge,"LI",{});var fDe=s(g5);MEe=n(fDe,"STRONG",{});var CPt=s(MEe);BRr=r(CPt,"mobilebert"),CPt.forEach(t),IRr=r(fDe," \u2014 "),DK=n(fDe,"A",{href:!0});var wPt=s(DK);NRr=r(wPt,"TFMobileBertForQuestionAnswering"),wPt.forEach(t),qRr=r(fDe," (MobileBERT model)"),fDe.forEach(t),jRr=i(ge),h5=n(ge,"LI",{});var mDe=s(h5);EEe=n(mDe,"STRONG",{});var APt=s(EEe);DRr=r(APt,"mpnet"),APt.forEach(t),GRr=r(mDe," \u2014 "),GK=n(mDe,"A",{href:!0});var LPt=s(GK);ORr=r(LPt,"TFMPNetForQuestionAnswering"),LPt.forEach(t),VRr=r(mDe," (MPNet model)"),mDe.forEach(t),XRr=i(ge),p5=n(ge,"LI",{});var gDe=s(p5);CEe=n(gDe,"STRONG",{});var yPt=s(CEe);zRr=r(yPt,"rembert"),yPt.forEach(t),QRr=r(gDe," \u2014 "),OK=n(gDe,"A",{href:!0});var xPt=s(OK);WRr=r(xPt,"TFRemBertForQuestionAnswering"),xPt.forEach(t),HRr=r(gDe," (RemBERT model)"),gDe.forEach(t),URr=i(ge),_5=n(ge,"LI",{});var hDe=s(_5);wEe=n(hDe,"STRONG",{});var $Pt=s(wEe);JRr=r($Pt,"roberta"),$Pt.forEach(t),YRr=r(hDe," \u2014 "),VK=n(hDe,"A",{href:!0});var kPt=s(VK);KRr=r(kPt,"TFRobertaForQuestionAnswering"),kPt.forEach(t),ZRr=r(hDe," (RoBERTa model)"),hDe.forEach(t),ePr=i(ge),u5=n(ge,"LI",{});var pDe=s(u5);AEe=n(pDe,"STRONG",{});var SPt=s(AEe);oPr=r(SPt,"roformer"),SPt.forEach(t),rPr=r(pDe," \u2014 "),XK=n(pDe,"A",{href:!0});var RPt=s(XK);tPr=r(RPt,"TFRoFormerForQuestionAnswering"),RPt.forEach(t),aPr=r(pDe," (RoFormer model)"),pDe.forEach(t),nPr=i(ge),b5=n(ge,"LI",{});var _De=s(b5);LEe=n(_De,"STRONG",{});var PPt=s(LEe);sPr=r(PPt,"xlm"),PPt.forEach(t),lPr=r(_De," \u2014 "),zK=n(_De,"A",{href:!0});var BPt=s(zK);iPr=r(BPt,"TFXLMForQuestionAnsweringSimple"),BPt.forEach(t),dPr=r(_De," (XLM model)"),_De.forEach(t),cPr=i(ge),v5=n(ge,"LI",{});var uDe=s(v5);yEe=n(uDe,"STRONG",{});var IPt=s(yEe);fPr=r(IPt,"xlm-roberta"),IPt.forEach(t),mPr=r(uDe," \u2014 "),QK=n(uDe,"A",{href:!0});var NPt=s(QK);gPr=r(NPt,"TFXLMRobertaForQuestionAnswering"),NPt.forEach(t),hPr=r(uDe," (XLM-RoBERTa model)"),uDe.forEach(t),pPr=i(ge),F5=n(ge,"LI",{});var bDe=s(F5);xEe=n(bDe,"STRONG",{});var qPt=s(xEe);_Pr=r(qPt,"xlnet"),qPt.forEach(t),uPr=r(bDe," \u2014 "),WK=n(bDe,"A",{href:!0});var jPt=s(WK);bPr=r(jPt,"TFXLNetForQuestionAnsweringSimple"),jPt.forEach(t),vPr=r(bDe," (XLNet model)"),bDe.forEach(t),ge.forEach(t),FPr=i(Hl),T(T5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),eXe=i(f),qc=n(f,"H2",{class:!0});var dQe=s(qc);M5=n(dQe,"A",{id:!0,class:!0,href:!0});var DPt=s(M5);$Ee=n(DPt,"SPAN",{});var GPt=s($Ee);T(kx.$$.fragment,GPt),GPt.forEach(t),DPt.forEach(t),TPr=i(dQe),kEe=n(dQe,"SPAN",{});var OPt=s(kEe);MPr=r(OPt,"TFAutoModelForVision2Seq"),OPt.forEach(t),dQe.forEach(t),oXe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Sx.$$.fragment,Ul),EPr=i(Ul),jc=n(Ul,"P",{});var ste=s(jc);CPr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HK=n(ste,"A",{href:!0});var VPt=s(HK);wPr=r(VPt,"from_pretrained()"),VPt.forEach(t),APr=r(ste," class method or the "),UK=n(ste,"A",{href:!0});var XPt=s(UK);LPr=r(XPt,"from_config()"),XPt.forEach(t),yPr=r(ste,` class
method.`),ste.forEach(t),xPr=i(Ul),Rx=n(Ul,"P",{});var cQe=s(Rx);$Pr=r(cQe,"This class cannot be instantiated directly using "),SEe=n(cQe,"CODE",{});var zPt=s(SEe);kPr=r(zPt,"__init__()"),zPt.forEach(t),SPr=r(cQe," (throws an error)."),cQe.forEach(t),RPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var sL=s(Ot);T(Px.$$.fragment,sL),PPr=i(sL),REe=n(sL,"P",{});var QPt=s(REe);BPr=r(QPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QPt.forEach(t),IPr=i(sL),Dc=n(sL,"P",{});var lte=s(Dc);NPr=r(lte,`Note:
Loading a model from its configuration file does `),PEe=n(lte,"STRONG",{});var WPt=s(PEe);qPr=r(WPt,"not"),WPt.forEach(t),jPr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(lte,"A",{href:!0});var HPt=s(JK);DPr=r(HPt,"from_pretrained()"),HPt.forEach(t),GPr=r(lte," to load the model weights."),lte.forEach(t),OPr=i(sL),T(E5.$$.fragment,sL),sL.forEach(t),VPr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Bx.$$.fragment,Jl),XPr=i(Jl),BEe=n(Jl,"P",{});var UPt=s(BEe);zPr=r(UPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UPt.forEach(t),QPr=i(Jl),bn=n(Jl,"P",{});var lL=s(bn);WPr=r(lL,"The model class to instantiate is selected based on the "),IEe=n(lL,"CODE",{});var JPt=s(IEe);HPr=r(JPt,"model_type"),JPt.forEach(t),UPr=r(lL,` property of the config object (either
passed as an argument or loaded from `),NEe=n(lL,"CODE",{});var YPt=s(NEe);JPr=r(YPt,"pretrained_model_name_or_path"),YPt.forEach(t),YPr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(lL,"CODE",{});var KPt=s(qEe);KPr=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),ZPr=r(lL,":"),lL.forEach(t),eBr=i(Jl),jEe=n(Jl,"UL",{});var ZPt=s(jEe);C5=n(ZPt,"LI",{});var vDe=s(C5);DEe=n(vDe,"STRONG",{});var eBt=s(DEe);oBr=r(eBt,"vision-encoder-decoder"),eBt.forEach(t),rBr=r(vDe," \u2014 "),YK=n(vDe,"A",{href:!0});var oBt=s(YK);tBr=r(oBt,"TFVisionEncoderDecoderModel"),oBt.forEach(t),aBr=r(vDe," (Vision Encoder decoder model)"),vDe.forEach(t),ZPt.forEach(t),nBr=i(Jl),T(w5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),rXe=i(f),Gc=n(f,"H2",{class:!0});var fQe=s(Gc);A5=n(fQe,"A",{id:!0,class:!0,href:!0});var rBt=s(A5);GEe=n(rBt,"SPAN",{});var tBt=s(GEe);T(Ix.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),sBr=i(fQe),OEe=n(fQe,"SPAN",{});var aBt=s(OEe);lBr=r(aBt,"TFAutoModelForSpeechSeq2Seq"),aBt.forEach(t),fQe.forEach(t),tXe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Nx.$$.fragment,Yl),iBr=i(Yl),Oc=n(Yl,"P",{});var ite=s(Oc);dBr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KK=n(ite,"A",{href:!0});var nBt=s(KK);cBr=r(nBt,"from_pretrained()"),nBt.forEach(t),fBr=r(ite," class method or the "),ZK=n(ite,"A",{href:!0});var sBt=s(ZK);mBr=r(sBt,"from_config()"),sBt.forEach(t),gBr=r(ite,` class
method.`),ite.forEach(t),hBr=i(Yl),qx=n(Yl,"P",{});var mQe=s(qx);pBr=r(mQe,"This class cannot be instantiated directly using "),VEe=n(mQe,"CODE",{});var lBt=s(VEe);_Br=r(lBt,"__init__()"),lBt.forEach(t),uBr=r(mQe," (throws an error)."),mQe.forEach(t),bBr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var iL=s(Vt);T(jx.$$.fragment,iL),vBr=i(iL),XEe=n(iL,"P",{});var iBt=s(XEe);FBr=r(iBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iBt.forEach(t),TBr=i(iL),Vc=n(iL,"P",{});var dte=s(Vc);MBr=r(dte,`Note:
Loading a model from its configuration file does `),zEe=n(dte,"STRONG",{});var dBt=s(zEe);EBr=r(dBt,"not"),dBt.forEach(t),CBr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(dte,"A",{href:!0});var cBt=s(eZ);wBr=r(cBt,"from_pretrained()"),cBt.forEach(t),ABr=r(dte," to load the model weights."),dte.forEach(t),LBr=i(iL),T(L5.$$.fragment,iL),iL.forEach(t),yBr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Dx.$$.fragment,Kl),xBr=i(Kl),QEe=n(Kl,"P",{});var fBt=s(QEe);$Br=r(fBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fBt.forEach(t),kBr=i(Kl),vn=n(Kl,"P",{});var dL=s(vn);SBr=r(dL,"The model class to instantiate is selected based on the "),WEe=n(dL,"CODE",{});var mBt=s(WEe);RBr=r(mBt,"model_type"),mBt.forEach(t),PBr=r(dL,` property of the config object (either
passed as an argument or loaded from `),HEe=n(dL,"CODE",{});var gBt=s(HEe);BBr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),IBr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(dL,"CODE",{});var hBt=s(UEe);NBr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),qBr=r(dL,":"),dL.forEach(t),jBr=i(Kl),JEe=n(Kl,"UL",{});var pBt=s(JEe);y5=n(pBt,"LI",{});var FDe=s(y5);YEe=n(FDe,"STRONG",{});var _Bt=s(YEe);DBr=r(_Bt,"speech_to_text"),_Bt.forEach(t),GBr=r(FDe," \u2014 "),oZ=n(FDe,"A",{href:!0});var uBt=s(oZ);OBr=r(uBt,"TFSpeech2TextForConditionalGeneration"),uBt.forEach(t),VBr=r(FDe," (Speech2Text model)"),FDe.forEach(t),pBt.forEach(t),XBr=i(Kl),T(x5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),aXe=i(f),Xc=n(f,"H2",{class:!0});var gQe=s(Xc);$5=n(gQe,"A",{id:!0,class:!0,href:!0});var bBt=s($5);KEe=n(bBt,"SPAN",{});var vBt=s(KEe);T(Gx.$$.fragment,vBt),vBt.forEach(t),bBt.forEach(t),zBr=i(gQe),ZEe=n(gQe,"SPAN",{});var FBt=s(ZEe);QBr=r(FBt,"FlaxAutoModel"),FBt.forEach(t),gQe.forEach(t),nXe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(Ox.$$.fragment,Zl),WBr=i(Zl),zc=n(Zl,"P",{});var cte=s(zc);HBr=r(cte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rZ=n(cte,"A",{href:!0});var TBt=s(rZ);UBr=r(TBt,"from_pretrained()"),TBt.forEach(t),JBr=r(cte," class method or the "),tZ=n(cte,"A",{href:!0});var MBt=s(tZ);YBr=r(MBt,"from_config()"),MBt.forEach(t),KBr=r(cte,` class
method.`),cte.forEach(t),ZBr=i(Zl),Vx=n(Zl,"P",{});var hQe=s(Vx);eIr=r(hQe,"This class cannot be instantiated directly using "),eCe=n(hQe,"CODE",{});var EBt=s(eCe);oIr=r(EBt,"__init__()"),EBt.forEach(t),rIr=r(hQe," (throws an error)."),hQe.forEach(t),tIr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var cL=s(Xt);T(Xx.$$.fragment,cL),aIr=i(cL),oCe=n(cL,"P",{});var CBt=s(oCe);nIr=r(CBt,"Instantiates one of the base model classes of the library from a configuration."),CBt.forEach(t),sIr=i(cL),Qc=n(cL,"P",{});var fte=s(Qc);lIr=r(fte,`Note:
Loading a model from its configuration file does `),rCe=n(fte,"STRONG",{});var wBt=s(rCe);iIr=r(wBt,"not"),wBt.forEach(t),dIr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(fte,"A",{href:!0});var ABt=s(aZ);cIr=r(ABt,"from_pretrained()"),ABt.forEach(t),fIr=r(fte," to load the model weights."),fte.forEach(t),mIr=i(cL),T(k5.$$.fragment,cL),cL.forEach(t),gIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(zx.$$.fragment,ei),hIr=i(ei),tCe=n(ei,"P",{});var LBt=s(tCe);pIr=r(LBt,"Instantiate one of the base model classes of the library from a pretrained model."),LBt.forEach(t),_Ir=i(ei),Fn=n(ei,"P",{});var fL=s(Fn);uIr=r(fL,"The model class to instantiate is selected based on the "),aCe=n(fL,"CODE",{});var yBt=s(aCe);bIr=r(yBt,"model_type"),yBt.forEach(t),vIr=r(fL,` property of the config object (either
passed as an argument or loaded from `),nCe=n(fL,"CODE",{});var xBt=s(nCe);FIr=r(xBt,"pretrained_model_name_or_path"),xBt.forEach(t),TIr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n(fL,"CODE",{});var $Bt=s(sCe);MIr=r($Bt,"pretrained_model_name_or_path"),$Bt.forEach(t),EIr=r(fL,":"),fL.forEach(t),CIr=i(ei),oe=n(ei,"UL",{});var ae=s(oe);S5=n(ae,"LI",{});var TDe=s(S5);lCe=n(TDe,"STRONG",{});var kBt=s(lCe);wIr=r(kBt,"albert"),kBt.forEach(t),AIr=r(TDe," \u2014 "),nZ=n(TDe,"A",{href:!0});var SBt=s(nZ);LIr=r(SBt,"FlaxAlbertModel"),SBt.forEach(t),yIr=r(TDe," (ALBERT model)"),TDe.forEach(t),xIr=i(ae),R5=n(ae,"LI",{});var MDe=s(R5);iCe=n(MDe,"STRONG",{});var RBt=s(iCe);$Ir=r(RBt,"bart"),RBt.forEach(t),kIr=r(MDe," \u2014 "),sZ=n(MDe,"A",{href:!0});var PBt=s(sZ);SIr=r(PBt,"FlaxBartModel"),PBt.forEach(t),RIr=r(MDe," (BART model)"),MDe.forEach(t),PIr=i(ae),P5=n(ae,"LI",{});var EDe=s(P5);dCe=n(EDe,"STRONG",{});var BBt=s(dCe);BIr=r(BBt,"beit"),BBt.forEach(t),IIr=r(EDe," \u2014 "),lZ=n(EDe,"A",{href:!0});var IBt=s(lZ);NIr=r(IBt,"FlaxBeitModel"),IBt.forEach(t),qIr=r(EDe," (BEiT model)"),EDe.forEach(t),jIr=i(ae),B5=n(ae,"LI",{});var CDe=s(B5);cCe=n(CDe,"STRONG",{});var NBt=s(cCe);DIr=r(NBt,"bert"),NBt.forEach(t),GIr=r(CDe," \u2014 "),iZ=n(CDe,"A",{href:!0});var qBt=s(iZ);OIr=r(qBt,"FlaxBertModel"),qBt.forEach(t),VIr=r(CDe," (BERT model)"),CDe.forEach(t),XIr=i(ae),I5=n(ae,"LI",{});var wDe=s(I5);fCe=n(wDe,"STRONG",{});var jBt=s(fCe);zIr=r(jBt,"big_bird"),jBt.forEach(t),QIr=r(wDe," \u2014 "),dZ=n(wDe,"A",{href:!0});var DBt=s(dZ);WIr=r(DBt,"FlaxBigBirdModel"),DBt.forEach(t),HIr=r(wDe," (BigBird model)"),wDe.forEach(t),UIr=i(ae),N5=n(ae,"LI",{});var ADe=s(N5);mCe=n(ADe,"STRONG",{});var GBt=s(mCe);JIr=r(GBt,"blenderbot"),GBt.forEach(t),YIr=r(ADe," \u2014 "),cZ=n(ADe,"A",{href:!0});var OBt=s(cZ);KIr=r(OBt,"FlaxBlenderbotModel"),OBt.forEach(t),ZIr=r(ADe," (Blenderbot model)"),ADe.forEach(t),eNr=i(ae),q5=n(ae,"LI",{});var LDe=s(q5);gCe=n(LDe,"STRONG",{});var VBt=s(gCe);oNr=r(VBt,"blenderbot-small"),VBt.forEach(t),rNr=r(LDe," \u2014 "),fZ=n(LDe,"A",{href:!0});var XBt=s(fZ);tNr=r(XBt,"FlaxBlenderbotSmallModel"),XBt.forEach(t),aNr=r(LDe," (BlenderbotSmall model)"),LDe.forEach(t),nNr=i(ae),j5=n(ae,"LI",{});var yDe=s(j5);hCe=n(yDe,"STRONG",{});var zBt=s(hCe);sNr=r(zBt,"clip"),zBt.forEach(t),lNr=r(yDe," \u2014 "),mZ=n(yDe,"A",{href:!0});var QBt=s(mZ);iNr=r(QBt,"FlaxCLIPModel"),QBt.forEach(t),dNr=r(yDe," (CLIP model)"),yDe.forEach(t),cNr=i(ae),D5=n(ae,"LI",{});var xDe=s(D5);pCe=n(xDe,"STRONG",{});var WBt=s(pCe);fNr=r(WBt,"distilbert"),WBt.forEach(t),mNr=r(xDe," \u2014 "),gZ=n(xDe,"A",{href:!0});var HBt=s(gZ);gNr=r(HBt,"FlaxDistilBertModel"),HBt.forEach(t),hNr=r(xDe," (DistilBERT model)"),xDe.forEach(t),pNr=i(ae),G5=n(ae,"LI",{});var $De=s(G5);_Ce=n($De,"STRONG",{});var UBt=s(_Ce);_Nr=r(UBt,"electra"),UBt.forEach(t),uNr=r($De," \u2014 "),hZ=n($De,"A",{href:!0});var JBt=s(hZ);bNr=r(JBt,"FlaxElectraModel"),JBt.forEach(t),vNr=r($De," (ELECTRA model)"),$De.forEach(t),FNr=i(ae),O5=n(ae,"LI",{});var kDe=s(O5);uCe=n(kDe,"STRONG",{});var YBt=s(uCe);TNr=r(YBt,"gpt2"),YBt.forEach(t),MNr=r(kDe," \u2014 "),pZ=n(kDe,"A",{href:!0});var KBt=s(pZ);ENr=r(KBt,"FlaxGPT2Model"),KBt.forEach(t),CNr=r(kDe," (OpenAI GPT-2 model)"),kDe.forEach(t),wNr=i(ae),V5=n(ae,"LI",{});var SDe=s(V5);bCe=n(SDe,"STRONG",{});var ZBt=s(bCe);ANr=r(ZBt,"gpt_neo"),ZBt.forEach(t),LNr=r(SDe," \u2014 "),_Z=n(SDe,"A",{href:!0});var eIt=s(_Z);yNr=r(eIt,"FlaxGPTNeoModel"),eIt.forEach(t),xNr=r(SDe," (GPT Neo model)"),SDe.forEach(t),$Nr=i(ae),X5=n(ae,"LI",{});var RDe=s(X5);vCe=n(RDe,"STRONG",{});var oIt=s(vCe);kNr=r(oIt,"gptj"),oIt.forEach(t),SNr=r(RDe," \u2014 "),uZ=n(RDe,"A",{href:!0});var rIt=s(uZ);RNr=r(rIt,"FlaxGPTJModel"),rIt.forEach(t),PNr=r(RDe," (GPT-J model)"),RDe.forEach(t),BNr=i(ae),z5=n(ae,"LI",{});var PDe=s(z5);FCe=n(PDe,"STRONG",{});var tIt=s(FCe);INr=r(tIt,"longt5"),tIt.forEach(t),NNr=r(PDe," \u2014 "),bZ=n(PDe,"A",{href:!0});var aIt=s(bZ);qNr=r(aIt,"FlaxLongT5Model"),aIt.forEach(t),jNr=r(PDe," (LongT5 model)"),PDe.forEach(t),DNr=i(ae),Q5=n(ae,"LI",{});var BDe=s(Q5);TCe=n(BDe,"STRONG",{});var nIt=s(TCe);GNr=r(nIt,"marian"),nIt.forEach(t),ONr=r(BDe," \u2014 "),vZ=n(BDe,"A",{href:!0});var sIt=s(vZ);VNr=r(sIt,"FlaxMarianModel"),sIt.forEach(t),XNr=r(BDe," (Marian model)"),BDe.forEach(t),zNr=i(ae),W5=n(ae,"LI",{});var IDe=s(W5);MCe=n(IDe,"STRONG",{});var lIt=s(MCe);QNr=r(lIt,"mbart"),lIt.forEach(t),WNr=r(IDe," \u2014 "),FZ=n(IDe,"A",{href:!0});var iIt=s(FZ);HNr=r(iIt,"FlaxMBartModel"),iIt.forEach(t),UNr=r(IDe," (mBART model)"),IDe.forEach(t),JNr=i(ae),H5=n(ae,"LI",{});var NDe=s(H5);ECe=n(NDe,"STRONG",{});var dIt=s(ECe);YNr=r(dIt,"mt5"),dIt.forEach(t),KNr=r(NDe," \u2014 "),TZ=n(NDe,"A",{href:!0});var cIt=s(TZ);ZNr=r(cIt,"FlaxMT5Model"),cIt.forEach(t),eqr=r(NDe," (MT5 model)"),NDe.forEach(t),oqr=i(ae),U5=n(ae,"LI",{});var qDe=s(U5);CCe=n(qDe,"STRONG",{});var fIt=s(CCe);rqr=r(fIt,"opt"),fIt.forEach(t),tqr=r(qDe," \u2014 "),MZ=n(qDe,"A",{href:!0});var mIt=s(MZ);aqr=r(mIt,"FlaxOPTModel"),mIt.forEach(t),nqr=r(qDe," (OPT model)"),qDe.forEach(t),sqr=i(ae),J5=n(ae,"LI",{});var jDe=s(J5);wCe=n(jDe,"STRONG",{});var gIt=s(wCe);lqr=r(gIt,"pegasus"),gIt.forEach(t),iqr=r(jDe," \u2014 "),EZ=n(jDe,"A",{href:!0});var hIt=s(EZ);dqr=r(hIt,"FlaxPegasusModel"),hIt.forEach(t),cqr=r(jDe," (Pegasus model)"),jDe.forEach(t),fqr=i(ae),Y5=n(ae,"LI",{});var DDe=s(Y5);ACe=n(DDe,"STRONG",{});var pIt=s(ACe);mqr=r(pIt,"roberta"),pIt.forEach(t),gqr=r(DDe," \u2014 "),CZ=n(DDe,"A",{href:!0});var _It=s(CZ);hqr=r(_It,"FlaxRobertaModel"),_It.forEach(t),pqr=r(DDe," (RoBERTa model)"),DDe.forEach(t),_qr=i(ae),K5=n(ae,"LI",{});var GDe=s(K5);LCe=n(GDe,"STRONG",{});var uIt=s(LCe);uqr=r(uIt,"roformer"),uIt.forEach(t),bqr=r(GDe," \u2014 "),wZ=n(GDe,"A",{href:!0});var bIt=s(wZ);vqr=r(bIt,"FlaxRoFormerModel"),bIt.forEach(t),Fqr=r(GDe," (RoFormer model)"),GDe.forEach(t),Tqr=i(ae),Z5=n(ae,"LI",{});var ODe=s(Z5);yCe=n(ODe,"STRONG",{});var vIt=s(yCe);Mqr=r(vIt,"t5"),vIt.forEach(t),Eqr=r(ODe," \u2014 "),AZ=n(ODe,"A",{href:!0});var FIt=s(AZ);Cqr=r(FIt,"FlaxT5Model"),FIt.forEach(t),wqr=r(ODe," (T5 model)"),ODe.forEach(t),Aqr=i(ae),e0=n(ae,"LI",{});var VDe=s(e0);xCe=n(VDe,"STRONG",{});var TIt=s(xCe);Lqr=r(TIt,"vision-text-dual-encoder"),TIt.forEach(t),yqr=r(VDe," \u2014 "),LZ=n(VDe,"A",{href:!0});var MIt=s(LZ);xqr=r(MIt,"FlaxVisionTextDualEncoderModel"),MIt.forEach(t),$qr=r(VDe," (VisionTextDualEncoder model)"),VDe.forEach(t),kqr=i(ae),o0=n(ae,"LI",{});var XDe=s(o0);$Ce=n(XDe,"STRONG",{});var EIt=s($Ce);Sqr=r(EIt,"vit"),EIt.forEach(t),Rqr=r(XDe," \u2014 "),yZ=n(XDe,"A",{href:!0});var CIt=s(yZ);Pqr=r(CIt,"FlaxViTModel"),CIt.forEach(t),Bqr=r(XDe," (ViT model)"),XDe.forEach(t),Iqr=i(ae),r0=n(ae,"LI",{});var zDe=s(r0);kCe=n(zDe,"STRONG",{});var wIt=s(kCe);Nqr=r(wIt,"wav2vec2"),wIt.forEach(t),qqr=r(zDe," \u2014 "),xZ=n(zDe,"A",{href:!0});var AIt=s(xZ);jqr=r(AIt,"FlaxWav2Vec2Model"),AIt.forEach(t),Dqr=r(zDe," (Wav2Vec2 model)"),zDe.forEach(t),Gqr=i(ae),t0=n(ae,"LI",{});var QDe=s(t0);SCe=n(QDe,"STRONG",{});var LIt=s(SCe);Oqr=r(LIt,"xglm"),LIt.forEach(t),Vqr=r(QDe," \u2014 "),$Z=n(QDe,"A",{href:!0});var yIt=s($Z);Xqr=r(yIt,"FlaxXGLMModel"),yIt.forEach(t),zqr=r(QDe," (XGLM model)"),QDe.forEach(t),Qqr=i(ae),a0=n(ae,"LI",{});var WDe=s(a0);RCe=n(WDe,"STRONG",{});var xIt=s(RCe);Wqr=r(xIt,"xlm-roberta"),xIt.forEach(t),Hqr=r(WDe," \u2014 "),kZ=n(WDe,"A",{href:!0});var $It=s(kZ);Uqr=r($It,"FlaxXLMRobertaModel"),$It.forEach(t),Jqr=r(WDe," (XLM-RoBERTa model)"),WDe.forEach(t),ae.forEach(t),Yqr=i(ei),T(n0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),sXe=i(f),Wc=n(f,"H2",{class:!0});var pQe=s(Wc);s0=n(pQe,"A",{id:!0,class:!0,href:!0});var kIt=s(s0);PCe=n(kIt,"SPAN",{});var SIt=s(PCe);T(Qx.$$.fragment,SIt),SIt.forEach(t),kIt.forEach(t),Kqr=i(pQe),BCe=n(pQe,"SPAN",{});var RIt=s(BCe);Zqr=r(RIt,"FlaxAutoModelForCausalLM"),RIt.forEach(t),pQe.forEach(t),lXe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Wx.$$.fragment,oi),ejr=i(oi),Hc=n(oi,"P",{});var mte=s(Hc);ojr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=n(mte,"A",{href:!0});var PIt=s(SZ);rjr=r(PIt,"from_pretrained()"),PIt.forEach(t),tjr=r(mte," class method or the "),RZ=n(mte,"A",{href:!0});var BIt=s(RZ);ajr=r(BIt,"from_config()"),BIt.forEach(t),njr=r(mte,` class
method.`),mte.forEach(t),sjr=i(oi),Hx=n(oi,"P",{});var _Qe=s(Hx);ljr=r(_Qe,"This class cannot be instantiated directly using "),ICe=n(_Qe,"CODE",{});var IIt=s(ICe);ijr=r(IIt,"__init__()"),IIt.forEach(t),djr=r(_Qe," (throws an error)."),_Qe.forEach(t),cjr=i(oi),zt=n(oi,"DIV",{class:!0});var mL=s(zt);T(Ux.$$.fragment,mL),fjr=i(mL),NCe=n(mL,"P",{});var NIt=s(NCe);mjr=r(NIt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NIt.forEach(t),gjr=i(mL),Uc=n(mL,"P",{});var gte=s(Uc);hjr=r(gte,`Note:
Loading a model from its configuration file does `),qCe=n(gte,"STRONG",{});var qIt=s(qCe);pjr=r(qIt,"not"),qIt.forEach(t),_jr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(gte,"A",{href:!0});var jIt=s(PZ);ujr=r(jIt,"from_pretrained()"),jIt.forEach(t),bjr=r(gte," to load the model weights."),gte.forEach(t),vjr=i(mL),T(l0.$$.fragment,mL),mL.forEach(t),Fjr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Jx.$$.fragment,ri),Tjr=i(ri),jCe=n(ri,"P",{});var DIt=s(jCe);Mjr=r(DIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DIt.forEach(t),Ejr=i(ri),Tn=n(ri,"P",{});var gL=s(Tn);Cjr=r(gL,"The model class to instantiate is selected based on the "),DCe=n(gL,"CODE",{});var GIt=s(DCe);wjr=r(GIt,"model_type"),GIt.forEach(t),Ajr=r(gL,` property of the config object (either
passed as an argument or loaded from `),GCe=n(gL,"CODE",{});var OIt=s(GCe);Ljr=r(OIt,"pretrained_model_name_or_path"),OIt.forEach(t),yjr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(gL,"CODE",{});var VIt=s(OCe);xjr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),$jr=r(gL,":"),gL.forEach(t),kjr=i(ri),xe=n(ri,"UL",{});var Ne=s(xe);i0=n(Ne,"LI",{});var HDe=s(i0);VCe=n(HDe,"STRONG",{});var XIt=s(VCe);Sjr=r(XIt,"bart"),XIt.forEach(t),Rjr=r(HDe," \u2014 "),BZ=n(HDe,"A",{href:!0});var zIt=s(BZ);Pjr=r(zIt,"FlaxBartForCausalLM"),zIt.forEach(t),Bjr=r(HDe," (BART model)"),HDe.forEach(t),Ijr=i(Ne),d0=n(Ne,"LI",{});var UDe=s(d0);XCe=n(UDe,"STRONG",{});var QIt=s(XCe);Njr=r(QIt,"bert"),QIt.forEach(t),qjr=r(UDe," \u2014 "),IZ=n(UDe,"A",{href:!0});var WIt=s(IZ);jjr=r(WIt,"FlaxBertForCausalLM"),WIt.forEach(t),Djr=r(UDe," (BERT model)"),UDe.forEach(t),Gjr=i(Ne),c0=n(Ne,"LI",{});var JDe=s(c0);zCe=n(JDe,"STRONG",{});var HIt=s(zCe);Ojr=r(HIt,"big_bird"),HIt.forEach(t),Vjr=r(JDe," \u2014 "),NZ=n(JDe,"A",{href:!0});var UIt=s(NZ);Xjr=r(UIt,"FlaxBigBirdForCausalLM"),UIt.forEach(t),zjr=r(JDe," (BigBird model)"),JDe.forEach(t),Qjr=i(Ne),f0=n(Ne,"LI",{});var YDe=s(f0);QCe=n(YDe,"STRONG",{});var JIt=s(QCe);Wjr=r(JIt,"electra"),JIt.forEach(t),Hjr=r(YDe," \u2014 "),qZ=n(YDe,"A",{href:!0});var YIt=s(qZ);Ujr=r(YIt,"FlaxElectraForCausalLM"),YIt.forEach(t),Jjr=r(YDe," (ELECTRA model)"),YDe.forEach(t),Yjr=i(Ne),m0=n(Ne,"LI",{});var KDe=s(m0);WCe=n(KDe,"STRONG",{});var KIt=s(WCe);Kjr=r(KIt,"gpt2"),KIt.forEach(t),Zjr=r(KDe," \u2014 "),jZ=n(KDe,"A",{href:!0});var ZIt=s(jZ);eDr=r(ZIt,"FlaxGPT2LMHeadModel"),ZIt.forEach(t),oDr=r(KDe," (OpenAI GPT-2 model)"),KDe.forEach(t),rDr=i(Ne),g0=n(Ne,"LI",{});var ZDe=s(g0);HCe=n(ZDe,"STRONG",{});var eNt=s(HCe);tDr=r(eNt,"gpt_neo"),eNt.forEach(t),aDr=r(ZDe," \u2014 "),DZ=n(ZDe,"A",{href:!0});var oNt=s(DZ);nDr=r(oNt,"FlaxGPTNeoForCausalLM"),oNt.forEach(t),sDr=r(ZDe," (GPT Neo model)"),ZDe.forEach(t),lDr=i(Ne),h0=n(Ne,"LI",{});var eGe=s(h0);UCe=n(eGe,"STRONG",{});var rNt=s(UCe);iDr=r(rNt,"gptj"),rNt.forEach(t),dDr=r(eGe," \u2014 "),GZ=n(eGe,"A",{href:!0});var tNt=s(GZ);cDr=r(tNt,"FlaxGPTJForCausalLM"),tNt.forEach(t),fDr=r(eGe," (GPT-J model)"),eGe.forEach(t),mDr=i(Ne),p0=n(Ne,"LI",{});var oGe=s(p0);JCe=n(oGe,"STRONG",{});var aNt=s(JCe);gDr=r(aNt,"opt"),aNt.forEach(t),hDr=r(oGe," \u2014 "),OZ=n(oGe,"A",{href:!0});var nNt=s(OZ);pDr=r(nNt,"FlaxOPTForCausalLM"),nNt.forEach(t),_Dr=r(oGe," (OPT model)"),oGe.forEach(t),uDr=i(Ne),_0=n(Ne,"LI",{});var rGe=s(_0);YCe=n(rGe,"STRONG",{});var sNt=s(YCe);bDr=r(sNt,"roberta"),sNt.forEach(t),vDr=r(rGe," \u2014 "),VZ=n(rGe,"A",{href:!0});var lNt=s(VZ);FDr=r(lNt,"FlaxRobertaForCausalLM"),lNt.forEach(t),TDr=r(rGe," (RoBERTa model)"),rGe.forEach(t),MDr=i(Ne),u0=n(Ne,"LI",{});var tGe=s(u0);KCe=n(tGe,"STRONG",{});var iNt=s(KCe);EDr=r(iNt,"xglm"),iNt.forEach(t),CDr=r(tGe," \u2014 "),XZ=n(tGe,"A",{href:!0});var dNt=s(XZ);wDr=r(dNt,"FlaxXGLMForCausalLM"),dNt.forEach(t),ADr=r(tGe," (XGLM model)"),tGe.forEach(t),Ne.forEach(t),LDr=i(ri),T(b0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),iXe=i(f),Jc=n(f,"H2",{class:!0});var uQe=s(Jc);v0=n(uQe,"A",{id:!0,class:!0,href:!0});var cNt=s(v0);ZCe=n(cNt,"SPAN",{});var fNt=s(ZCe);T(Yx.$$.fragment,fNt),fNt.forEach(t),cNt.forEach(t),yDr=i(uQe),e5e=n(uQe,"SPAN",{});var mNt=s(e5e);xDr=r(mNt,"FlaxAutoModelForPreTraining"),mNt.forEach(t),uQe.forEach(t),dXe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(Kx.$$.fragment,ti),$Dr=i(ti),Yc=n(ti,"P",{});var hte=s(Yc);kDr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zZ=n(hte,"A",{href:!0});var gNt=s(zZ);SDr=r(gNt,"from_pretrained()"),gNt.forEach(t),RDr=r(hte," class method or the "),QZ=n(hte,"A",{href:!0});var hNt=s(QZ);PDr=r(hNt,"from_config()"),hNt.forEach(t),BDr=r(hte,` class
method.`),hte.forEach(t),IDr=i(ti),Zx=n(ti,"P",{});var bQe=s(Zx);NDr=r(bQe,"This class cannot be instantiated directly using "),o5e=n(bQe,"CODE",{});var pNt=s(o5e);qDr=r(pNt,"__init__()"),pNt.forEach(t),jDr=r(bQe," (throws an error)."),bQe.forEach(t),DDr=i(ti),Qt=n(ti,"DIV",{class:!0});var hL=s(Qt);T(e$.$$.fragment,hL),GDr=i(hL),r5e=n(hL,"P",{});var _Nt=s(r5e);ODr=r(_Nt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Nt.forEach(t),VDr=i(hL),Kc=n(hL,"P",{});var pte=s(Kc);XDr=r(pte,`Note:
Loading a model from its configuration file does `),t5e=n(pte,"STRONG",{});var uNt=s(t5e);zDr=r(uNt,"not"),uNt.forEach(t),QDr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(pte,"A",{href:!0});var bNt=s(WZ);WDr=r(bNt,"from_pretrained()"),bNt.forEach(t),HDr=r(pte," to load the model weights."),pte.forEach(t),UDr=i(hL),T(F0.$$.fragment,hL),hL.forEach(t),JDr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(o$.$$.fragment,ai),YDr=i(ai),a5e=n(ai,"P",{});var vNt=s(a5e);KDr=r(vNt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vNt.forEach(t),ZDr=i(ai),Mn=n(ai,"P",{});var pL=s(Mn);eGr=r(pL,"The model class to instantiate is selected based on the "),n5e=n(pL,"CODE",{});var FNt=s(n5e);oGr=r(FNt,"model_type"),FNt.forEach(t),rGr=r(pL,` property of the config object (either
passed as an argument or loaded from `),s5e=n(pL,"CODE",{});var TNt=s(s5e);tGr=r(TNt,"pretrained_model_name_or_path"),TNt.forEach(t),aGr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(pL,"CODE",{});var MNt=s(l5e);nGr=r(MNt,"pretrained_model_name_or_path"),MNt.forEach(t),sGr=r(pL,":"),pL.forEach(t),lGr=i(ai),Ee=n(ai,"UL",{});var we=s(Ee);T0=n(we,"LI",{});var aGe=s(T0);i5e=n(aGe,"STRONG",{});var ENt=s(i5e);iGr=r(ENt,"albert"),ENt.forEach(t),dGr=r(aGe," \u2014 "),HZ=n(aGe,"A",{href:!0});var CNt=s(HZ);cGr=r(CNt,"FlaxAlbertForPreTraining"),CNt.forEach(t),fGr=r(aGe," (ALBERT model)"),aGe.forEach(t),mGr=i(we),M0=n(we,"LI",{});var nGe=s(M0);d5e=n(nGe,"STRONG",{});var wNt=s(d5e);gGr=r(wNt,"bart"),wNt.forEach(t),hGr=r(nGe," \u2014 "),UZ=n(nGe,"A",{href:!0});var ANt=s(UZ);pGr=r(ANt,"FlaxBartForConditionalGeneration"),ANt.forEach(t),_Gr=r(nGe," (BART model)"),nGe.forEach(t),uGr=i(we),E0=n(we,"LI",{});var sGe=s(E0);c5e=n(sGe,"STRONG",{});var LNt=s(c5e);bGr=r(LNt,"bert"),LNt.forEach(t),vGr=r(sGe," \u2014 "),JZ=n(sGe,"A",{href:!0});var yNt=s(JZ);FGr=r(yNt,"FlaxBertForPreTraining"),yNt.forEach(t),TGr=r(sGe," (BERT model)"),sGe.forEach(t),MGr=i(we),C0=n(we,"LI",{});var lGe=s(C0);f5e=n(lGe,"STRONG",{});var xNt=s(f5e);EGr=r(xNt,"big_bird"),xNt.forEach(t),CGr=r(lGe," \u2014 "),YZ=n(lGe,"A",{href:!0});var $Nt=s(YZ);wGr=r($Nt,"FlaxBigBirdForPreTraining"),$Nt.forEach(t),AGr=r(lGe," (BigBird model)"),lGe.forEach(t),LGr=i(we),w0=n(we,"LI",{});var iGe=s(w0);m5e=n(iGe,"STRONG",{});var kNt=s(m5e);yGr=r(kNt,"electra"),kNt.forEach(t),xGr=r(iGe," \u2014 "),KZ=n(iGe,"A",{href:!0});var SNt=s(KZ);$Gr=r(SNt,"FlaxElectraForPreTraining"),SNt.forEach(t),kGr=r(iGe," (ELECTRA model)"),iGe.forEach(t),SGr=i(we),A0=n(we,"LI",{});var dGe=s(A0);g5e=n(dGe,"STRONG",{});var RNt=s(g5e);RGr=r(RNt,"longt5"),RNt.forEach(t),PGr=r(dGe," \u2014 "),ZZ=n(dGe,"A",{href:!0});var PNt=s(ZZ);BGr=r(PNt,"FlaxLongT5ForConditionalGeneration"),PNt.forEach(t),IGr=r(dGe," (LongT5 model)"),dGe.forEach(t),NGr=i(we),L0=n(we,"LI",{});var cGe=s(L0);h5e=n(cGe,"STRONG",{});var BNt=s(h5e);qGr=r(BNt,"mbart"),BNt.forEach(t),jGr=r(cGe," \u2014 "),eee=n(cGe,"A",{href:!0});var INt=s(eee);DGr=r(INt,"FlaxMBartForConditionalGeneration"),INt.forEach(t),GGr=r(cGe," (mBART model)"),cGe.forEach(t),OGr=i(we),y0=n(we,"LI",{});var fGe=s(y0);p5e=n(fGe,"STRONG",{});var NNt=s(p5e);VGr=r(NNt,"mt5"),NNt.forEach(t),XGr=r(fGe," \u2014 "),oee=n(fGe,"A",{href:!0});var qNt=s(oee);zGr=r(qNt,"FlaxMT5ForConditionalGeneration"),qNt.forEach(t),QGr=r(fGe," (MT5 model)"),fGe.forEach(t),WGr=i(we),x0=n(we,"LI",{});var mGe=s(x0);_5e=n(mGe,"STRONG",{});var jNt=s(_5e);HGr=r(jNt,"roberta"),jNt.forEach(t),UGr=r(mGe," \u2014 "),ree=n(mGe,"A",{href:!0});var DNt=s(ree);JGr=r(DNt,"FlaxRobertaForMaskedLM"),DNt.forEach(t),YGr=r(mGe," (RoBERTa model)"),mGe.forEach(t),KGr=i(we),$0=n(we,"LI",{});var gGe=s($0);u5e=n(gGe,"STRONG",{});var GNt=s(u5e);ZGr=r(GNt,"roformer"),GNt.forEach(t),eOr=r(gGe," \u2014 "),tee=n(gGe,"A",{href:!0});var ONt=s(tee);oOr=r(ONt,"FlaxRoFormerForMaskedLM"),ONt.forEach(t),rOr=r(gGe," (RoFormer model)"),gGe.forEach(t),tOr=i(we),k0=n(we,"LI",{});var hGe=s(k0);b5e=n(hGe,"STRONG",{});var VNt=s(b5e);aOr=r(VNt,"t5"),VNt.forEach(t),nOr=r(hGe," \u2014 "),aee=n(hGe,"A",{href:!0});var XNt=s(aee);sOr=r(XNt,"FlaxT5ForConditionalGeneration"),XNt.forEach(t),lOr=r(hGe," (T5 model)"),hGe.forEach(t),iOr=i(we),S0=n(we,"LI",{});var pGe=s(S0);v5e=n(pGe,"STRONG",{});var zNt=s(v5e);dOr=r(zNt,"wav2vec2"),zNt.forEach(t),cOr=r(pGe," \u2014 "),nee=n(pGe,"A",{href:!0});var QNt=s(nee);fOr=r(QNt,"FlaxWav2Vec2ForPreTraining"),QNt.forEach(t),mOr=r(pGe," (Wav2Vec2 model)"),pGe.forEach(t),gOr=i(we),R0=n(we,"LI",{});var _Ge=s(R0);F5e=n(_Ge,"STRONG",{});var WNt=s(F5e);hOr=r(WNt,"xlm-roberta"),WNt.forEach(t),pOr=r(_Ge," \u2014 "),see=n(_Ge,"A",{href:!0});var HNt=s(see);_Or=r(HNt,"FlaxXLMRobertaForMaskedLM"),HNt.forEach(t),uOr=r(_Ge," (XLM-RoBERTa model)"),_Ge.forEach(t),we.forEach(t),bOr=i(ai),T(P0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),cXe=i(f),Zc=n(f,"H2",{class:!0});var vQe=s(Zc);B0=n(vQe,"A",{id:!0,class:!0,href:!0});var UNt=s(B0);T5e=n(UNt,"SPAN",{});var JNt=s(T5e);T(r$.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),vOr=i(vQe),M5e=n(vQe,"SPAN",{});var YNt=s(M5e);FOr=r(YNt,"FlaxAutoModelForMaskedLM"),YNt.forEach(t),vQe.forEach(t),fXe=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(t$.$$.fragment,ni),TOr=i(ni),ef=n(ni,"P",{});var _te=s(ef);MOr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lee=n(_te,"A",{href:!0});var KNt=s(lee);EOr=r(KNt,"from_pretrained()"),KNt.forEach(t),COr=r(_te," class method or the "),iee=n(_te,"A",{href:!0});var ZNt=s(iee);wOr=r(ZNt,"from_config()"),ZNt.forEach(t),AOr=r(_te,` class
method.`),_te.forEach(t),LOr=i(ni),a$=n(ni,"P",{});var FQe=s(a$);yOr=r(FQe,"This class cannot be instantiated directly using "),E5e=n(FQe,"CODE",{});var eqt=s(E5e);xOr=r(eqt,"__init__()"),eqt.forEach(t),$Or=r(FQe," (throws an error)."),FQe.forEach(t),kOr=i(ni),Wt=n(ni,"DIV",{class:!0});var _L=s(Wt);T(n$.$$.fragment,_L),SOr=i(_L),C5e=n(_L,"P",{});var oqt=s(C5e);ROr=r(oqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oqt.forEach(t),POr=i(_L),of=n(_L,"P",{});var ute=s(of);BOr=r(ute,`Note:
Loading a model from its configuration file does `),w5e=n(ute,"STRONG",{});var rqt=s(w5e);IOr=r(rqt,"not"),rqt.forEach(t),NOr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(ute,"A",{href:!0});var tqt=s(dee);qOr=r(tqt,"from_pretrained()"),tqt.forEach(t),jOr=r(ute," to load the model weights."),ute.forEach(t),DOr=i(_L),T(I0.$$.fragment,_L),_L.forEach(t),GOr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(s$.$$.fragment,si),OOr=i(si),A5e=n(si,"P",{});var aqt=s(A5e);VOr=r(aqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aqt.forEach(t),XOr=i(si),En=n(si,"P",{});var uL=s(En);zOr=r(uL,"The model class to instantiate is selected based on the "),L5e=n(uL,"CODE",{});var nqt=s(L5e);QOr=r(nqt,"model_type"),nqt.forEach(t),WOr=r(uL,` property of the config object (either
passed as an argument or loaded from `),y5e=n(uL,"CODE",{});var sqt=s(y5e);HOr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),UOr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(uL,"CODE",{});var lqt=s(x5e);JOr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),YOr=r(uL,":"),uL.forEach(t),KOr=i(si),$e=n(si,"UL",{});var qe=s($e);N0=n(qe,"LI",{});var uGe=s(N0);$5e=n(uGe,"STRONG",{});var iqt=s($5e);ZOr=r(iqt,"albert"),iqt.forEach(t),eVr=r(uGe," \u2014 "),cee=n(uGe,"A",{href:!0});var dqt=s(cee);oVr=r(dqt,"FlaxAlbertForMaskedLM"),dqt.forEach(t),rVr=r(uGe," (ALBERT model)"),uGe.forEach(t),tVr=i(qe),q0=n(qe,"LI",{});var bGe=s(q0);k5e=n(bGe,"STRONG",{});var cqt=s(k5e);aVr=r(cqt,"bart"),cqt.forEach(t),nVr=r(bGe," \u2014 "),fee=n(bGe,"A",{href:!0});var fqt=s(fee);sVr=r(fqt,"FlaxBartForConditionalGeneration"),fqt.forEach(t),lVr=r(bGe," (BART model)"),bGe.forEach(t),iVr=i(qe),j0=n(qe,"LI",{});var vGe=s(j0);S5e=n(vGe,"STRONG",{});var mqt=s(S5e);dVr=r(mqt,"bert"),mqt.forEach(t),cVr=r(vGe," \u2014 "),mee=n(vGe,"A",{href:!0});var gqt=s(mee);fVr=r(gqt,"FlaxBertForMaskedLM"),gqt.forEach(t),mVr=r(vGe," (BERT model)"),vGe.forEach(t),gVr=i(qe),D0=n(qe,"LI",{});var FGe=s(D0);R5e=n(FGe,"STRONG",{});var hqt=s(R5e);hVr=r(hqt,"big_bird"),hqt.forEach(t),pVr=r(FGe," \u2014 "),gee=n(FGe,"A",{href:!0});var pqt=s(gee);_Vr=r(pqt,"FlaxBigBirdForMaskedLM"),pqt.forEach(t),uVr=r(FGe," (BigBird model)"),FGe.forEach(t),bVr=i(qe),G0=n(qe,"LI",{});var TGe=s(G0);P5e=n(TGe,"STRONG",{});var _qt=s(P5e);vVr=r(_qt,"distilbert"),_qt.forEach(t),FVr=r(TGe," \u2014 "),hee=n(TGe,"A",{href:!0});var uqt=s(hee);TVr=r(uqt,"FlaxDistilBertForMaskedLM"),uqt.forEach(t),MVr=r(TGe," (DistilBERT model)"),TGe.forEach(t),EVr=i(qe),O0=n(qe,"LI",{});var MGe=s(O0);B5e=n(MGe,"STRONG",{});var bqt=s(B5e);CVr=r(bqt,"electra"),bqt.forEach(t),wVr=r(MGe," \u2014 "),pee=n(MGe,"A",{href:!0});var vqt=s(pee);AVr=r(vqt,"FlaxElectraForMaskedLM"),vqt.forEach(t),LVr=r(MGe," (ELECTRA model)"),MGe.forEach(t),yVr=i(qe),V0=n(qe,"LI",{});var EGe=s(V0);I5e=n(EGe,"STRONG",{});var Fqt=s(I5e);xVr=r(Fqt,"mbart"),Fqt.forEach(t),$Vr=r(EGe," \u2014 "),_ee=n(EGe,"A",{href:!0});var Tqt=s(_ee);kVr=r(Tqt,"FlaxMBartForConditionalGeneration"),Tqt.forEach(t),SVr=r(EGe," (mBART model)"),EGe.forEach(t),RVr=i(qe),X0=n(qe,"LI",{});var CGe=s(X0);N5e=n(CGe,"STRONG",{});var Mqt=s(N5e);PVr=r(Mqt,"roberta"),Mqt.forEach(t),BVr=r(CGe," \u2014 "),uee=n(CGe,"A",{href:!0});var Eqt=s(uee);IVr=r(Eqt,"FlaxRobertaForMaskedLM"),Eqt.forEach(t),NVr=r(CGe," (RoBERTa model)"),CGe.forEach(t),qVr=i(qe),z0=n(qe,"LI",{});var wGe=s(z0);q5e=n(wGe,"STRONG",{});var Cqt=s(q5e);jVr=r(Cqt,"roformer"),Cqt.forEach(t),DVr=r(wGe," \u2014 "),bee=n(wGe,"A",{href:!0});var wqt=s(bee);GVr=r(wqt,"FlaxRoFormerForMaskedLM"),wqt.forEach(t),OVr=r(wGe," (RoFormer model)"),wGe.forEach(t),VVr=i(qe),Q0=n(qe,"LI",{});var AGe=s(Q0);j5e=n(AGe,"STRONG",{});var Aqt=s(j5e);XVr=r(Aqt,"xlm-roberta"),Aqt.forEach(t),zVr=r(AGe," \u2014 "),vee=n(AGe,"A",{href:!0});var Lqt=s(vee);QVr=r(Lqt,"FlaxXLMRobertaForMaskedLM"),Lqt.forEach(t),WVr=r(AGe," (XLM-RoBERTa model)"),AGe.forEach(t),qe.forEach(t),HVr=i(si),T(W0.$$.fragment,si),si.forEach(t),ni.forEach(t),mXe=i(f),rf=n(f,"H2",{class:!0});var TQe=s(rf);H0=n(TQe,"A",{id:!0,class:!0,href:!0});var yqt=s(H0);D5e=n(yqt,"SPAN",{});var xqt=s(D5e);T(l$.$$.fragment,xqt),xqt.forEach(t),yqt.forEach(t),UVr=i(TQe),G5e=n(TQe,"SPAN",{});var $qt=s(G5e);JVr=r($qt,"FlaxAutoModelForSeq2SeqLM"),$qt.forEach(t),TQe.forEach(t),gXe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(i$.$$.fragment,li),YVr=i(li),tf=n(li,"P",{});var bte=s(tf);KVr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fee=n(bte,"A",{href:!0});var kqt=s(Fee);ZVr=r(kqt,"from_pretrained()"),kqt.forEach(t),eXr=r(bte," class method or the "),Tee=n(bte,"A",{href:!0});var Sqt=s(Tee);oXr=r(Sqt,"from_config()"),Sqt.forEach(t),rXr=r(bte,` class
method.`),bte.forEach(t),tXr=i(li),d$=n(li,"P",{});var MQe=s(d$);aXr=r(MQe,"This class cannot be instantiated directly using "),O5e=n(MQe,"CODE",{});var Rqt=s(O5e);nXr=r(Rqt,"__init__()"),Rqt.forEach(t),sXr=r(MQe," (throws an error)."),MQe.forEach(t),lXr=i(li),Ht=n(li,"DIV",{class:!0});var bL=s(Ht);T(c$.$$.fragment,bL),iXr=i(bL),V5e=n(bL,"P",{});var Pqt=s(V5e);dXr=r(Pqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pqt.forEach(t),cXr=i(bL),af=n(bL,"P",{});var vte=s(af);fXr=r(vte,`Note:
Loading a model from its configuration file does `),X5e=n(vte,"STRONG",{});var Bqt=s(X5e);mXr=r(Bqt,"not"),Bqt.forEach(t),gXr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(vte,"A",{href:!0});var Iqt=s(Mee);hXr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),pXr=r(vte," to load the model weights."),vte.forEach(t),_Xr=i(bL),T(U0.$$.fragment,bL),bL.forEach(t),uXr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(f$.$$.fragment,ii),bXr=i(ii),z5e=n(ii,"P",{});var Nqt=s(z5e);vXr=r(Nqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nqt.forEach(t),FXr=i(ii),Cn=n(ii,"P",{});var vL=s(Cn);TXr=r(vL,"The model class to instantiate is selected based on the "),Q5e=n(vL,"CODE",{});var qqt=s(Q5e);MXr=r(qqt,"model_type"),qqt.forEach(t),EXr=r(vL,` property of the config object (either
passed as an argument or loaded from `),W5e=n(vL,"CODE",{});var jqt=s(W5e);CXr=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),wXr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(vL,"CODE",{});var Dqt=s(H5e);AXr=r(Dqt,"pretrained_model_name_or_path"),Dqt.forEach(t),LXr=r(vL,":"),vL.forEach(t),yXr=i(ii),ke=n(ii,"UL",{});var je=s(ke);J0=n(je,"LI",{});var LGe=s(J0);U5e=n(LGe,"STRONG",{});var Gqt=s(U5e);xXr=r(Gqt,"bart"),Gqt.forEach(t),$Xr=r(LGe," \u2014 "),Eee=n(LGe,"A",{href:!0});var Oqt=s(Eee);kXr=r(Oqt,"FlaxBartForConditionalGeneration"),Oqt.forEach(t),SXr=r(LGe," (BART model)"),LGe.forEach(t),RXr=i(je),Y0=n(je,"LI",{});var yGe=s(Y0);J5e=n(yGe,"STRONG",{});var Vqt=s(J5e);PXr=r(Vqt,"blenderbot"),Vqt.forEach(t),BXr=r(yGe," \u2014 "),Cee=n(yGe,"A",{href:!0});var Xqt=s(Cee);IXr=r(Xqt,"FlaxBlenderbotForConditionalGeneration"),Xqt.forEach(t),NXr=r(yGe," (Blenderbot model)"),yGe.forEach(t),qXr=i(je),K0=n(je,"LI",{});var xGe=s(K0);Y5e=n(xGe,"STRONG",{});var zqt=s(Y5e);jXr=r(zqt,"blenderbot-small"),zqt.forEach(t),DXr=r(xGe," \u2014 "),wee=n(xGe,"A",{href:!0});var Qqt=s(wee);GXr=r(Qqt,"FlaxBlenderbotSmallForConditionalGeneration"),Qqt.forEach(t),OXr=r(xGe," (BlenderbotSmall model)"),xGe.forEach(t),VXr=i(je),Z0=n(je,"LI",{});var $Ge=s(Z0);K5e=n($Ge,"STRONG",{});var Wqt=s(K5e);XXr=r(Wqt,"encoder-decoder"),Wqt.forEach(t),zXr=r($Ge," \u2014 "),Aee=n($Ge,"A",{href:!0});var Hqt=s(Aee);QXr=r(Hqt,"FlaxEncoderDecoderModel"),Hqt.forEach(t),WXr=r($Ge," (Encoder decoder model)"),$Ge.forEach(t),HXr=i(je),ew=n(je,"LI",{});var kGe=s(ew);Z5e=n(kGe,"STRONG",{});var Uqt=s(Z5e);UXr=r(Uqt,"longt5"),Uqt.forEach(t),JXr=r(kGe," \u2014 "),Lee=n(kGe,"A",{href:!0});var Jqt=s(Lee);YXr=r(Jqt,"FlaxLongT5ForConditionalGeneration"),Jqt.forEach(t),KXr=r(kGe," (LongT5 model)"),kGe.forEach(t),ZXr=i(je),ow=n(je,"LI",{});var SGe=s(ow);e0e=n(SGe,"STRONG",{});var Yqt=s(e0e);ezr=r(Yqt,"marian"),Yqt.forEach(t),ozr=r(SGe," \u2014 "),yee=n(SGe,"A",{href:!0});var Kqt=s(yee);rzr=r(Kqt,"FlaxMarianMTModel"),Kqt.forEach(t),tzr=r(SGe," (Marian model)"),SGe.forEach(t),azr=i(je),rw=n(je,"LI",{});var RGe=s(rw);o0e=n(RGe,"STRONG",{});var Zqt=s(o0e);nzr=r(Zqt,"mbart"),Zqt.forEach(t),szr=r(RGe," \u2014 "),xee=n(RGe,"A",{href:!0});var ejt=s(xee);lzr=r(ejt,"FlaxMBartForConditionalGeneration"),ejt.forEach(t),izr=r(RGe," (mBART model)"),RGe.forEach(t),dzr=i(je),tw=n(je,"LI",{});var PGe=s(tw);r0e=n(PGe,"STRONG",{});var ojt=s(r0e);czr=r(ojt,"mt5"),ojt.forEach(t),fzr=r(PGe," \u2014 "),$ee=n(PGe,"A",{href:!0});var rjt=s($ee);mzr=r(rjt,"FlaxMT5ForConditionalGeneration"),rjt.forEach(t),gzr=r(PGe," (MT5 model)"),PGe.forEach(t),hzr=i(je),aw=n(je,"LI",{});var BGe=s(aw);t0e=n(BGe,"STRONG",{});var tjt=s(t0e);pzr=r(tjt,"pegasus"),tjt.forEach(t),_zr=r(BGe," \u2014 "),kee=n(BGe,"A",{href:!0});var ajt=s(kee);uzr=r(ajt,"FlaxPegasusForConditionalGeneration"),ajt.forEach(t),bzr=r(BGe," (Pegasus model)"),BGe.forEach(t),vzr=i(je),nw=n(je,"LI",{});var IGe=s(nw);a0e=n(IGe,"STRONG",{});var njt=s(a0e);Fzr=r(njt,"t5"),njt.forEach(t),Tzr=r(IGe," \u2014 "),See=n(IGe,"A",{href:!0});var sjt=s(See);Mzr=r(sjt,"FlaxT5ForConditionalGeneration"),sjt.forEach(t),Ezr=r(IGe," (T5 model)"),IGe.forEach(t),je.forEach(t),Czr=i(ii),T(sw.$$.fragment,ii),ii.forEach(t),li.forEach(t),hXe=i(f),nf=n(f,"H2",{class:!0});var EQe=s(nf);lw=n(EQe,"A",{id:!0,class:!0,href:!0});var ljt=s(lw);n0e=n(ljt,"SPAN",{});var ijt=s(n0e);T(m$.$$.fragment,ijt),ijt.forEach(t),ljt.forEach(t),wzr=i(EQe),s0e=n(EQe,"SPAN",{});var djt=s(s0e);Azr=r(djt,"FlaxAutoModelForSequenceClassification"),djt.forEach(t),EQe.forEach(t),pXe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(g$.$$.fragment,di),Lzr=i(di),sf=n(di,"P",{});var Fte=s(sf);yzr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ree=n(Fte,"A",{href:!0});var cjt=s(Ree);xzr=r(cjt,"from_pretrained()"),cjt.forEach(t),$zr=r(Fte," class method or the "),Pee=n(Fte,"A",{href:!0});var fjt=s(Pee);kzr=r(fjt,"from_config()"),fjt.forEach(t),Szr=r(Fte,` class
method.`),Fte.forEach(t),Rzr=i(di),h$=n(di,"P",{});var CQe=s(h$);Pzr=r(CQe,"This class cannot be instantiated directly using "),l0e=n(CQe,"CODE",{});var mjt=s(l0e);Bzr=r(mjt,"__init__()"),mjt.forEach(t),Izr=r(CQe," (throws an error)."),CQe.forEach(t),Nzr=i(di),Ut=n(di,"DIV",{class:!0});var FL=s(Ut);T(p$.$$.fragment,FL),qzr=i(FL),i0e=n(FL,"P",{});var gjt=s(i0e);jzr=r(gjt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gjt.forEach(t),Dzr=i(FL),lf=n(FL,"P",{});var Tte=s(lf);Gzr=r(Tte,`Note:
Loading a model from its configuration file does `),d0e=n(Tte,"STRONG",{});var hjt=s(d0e);Ozr=r(hjt,"not"),hjt.forEach(t),Vzr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(Tte,"A",{href:!0});var pjt=s(Bee);Xzr=r(pjt,"from_pretrained()"),pjt.forEach(t),zzr=r(Tte," to load the model weights."),Tte.forEach(t),Qzr=i(FL),T(iw.$$.fragment,FL),FL.forEach(t),Wzr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(_$.$$.fragment,ci),Hzr=i(ci),c0e=n(ci,"P",{});var _jt=s(c0e);Uzr=r(_jt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_jt.forEach(t),Jzr=i(ci),wn=n(ci,"P",{});var TL=s(wn);Yzr=r(TL,"The model class to instantiate is selected based on the "),f0e=n(TL,"CODE",{});var ujt=s(f0e);Kzr=r(ujt,"model_type"),ujt.forEach(t),Zzr=r(TL,` property of the config object (either
passed as an argument or loaded from `),m0e=n(TL,"CODE",{});var bjt=s(m0e);eQr=r(bjt,"pretrained_model_name_or_path"),bjt.forEach(t),oQr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(TL,"CODE",{});var vjt=s(g0e);rQr=r(vjt,"pretrained_model_name_or_path"),vjt.forEach(t),tQr=r(TL,":"),TL.forEach(t),aQr=i(ci),Se=n(ci,"UL",{});var De=s(Se);dw=n(De,"LI",{});var NGe=s(dw);h0e=n(NGe,"STRONG",{});var Fjt=s(h0e);nQr=r(Fjt,"albert"),Fjt.forEach(t),sQr=r(NGe," \u2014 "),Iee=n(NGe,"A",{href:!0});var Tjt=s(Iee);lQr=r(Tjt,"FlaxAlbertForSequenceClassification"),Tjt.forEach(t),iQr=r(NGe," (ALBERT model)"),NGe.forEach(t),dQr=i(De),cw=n(De,"LI",{});var qGe=s(cw);p0e=n(qGe,"STRONG",{});var Mjt=s(p0e);cQr=r(Mjt,"bart"),Mjt.forEach(t),fQr=r(qGe," \u2014 "),Nee=n(qGe,"A",{href:!0});var Ejt=s(Nee);mQr=r(Ejt,"FlaxBartForSequenceClassification"),Ejt.forEach(t),gQr=r(qGe," (BART model)"),qGe.forEach(t),hQr=i(De),fw=n(De,"LI",{});var jGe=s(fw);_0e=n(jGe,"STRONG",{});var Cjt=s(_0e);pQr=r(Cjt,"bert"),Cjt.forEach(t),_Qr=r(jGe," \u2014 "),qee=n(jGe,"A",{href:!0});var wjt=s(qee);uQr=r(wjt,"FlaxBertForSequenceClassification"),wjt.forEach(t),bQr=r(jGe," (BERT model)"),jGe.forEach(t),vQr=i(De),mw=n(De,"LI",{});var DGe=s(mw);u0e=n(DGe,"STRONG",{});var Ajt=s(u0e);FQr=r(Ajt,"big_bird"),Ajt.forEach(t),TQr=r(DGe," \u2014 "),jee=n(DGe,"A",{href:!0});var Ljt=s(jee);MQr=r(Ljt,"FlaxBigBirdForSequenceClassification"),Ljt.forEach(t),EQr=r(DGe," (BigBird model)"),DGe.forEach(t),CQr=i(De),gw=n(De,"LI",{});var GGe=s(gw);b0e=n(GGe,"STRONG",{});var yjt=s(b0e);wQr=r(yjt,"distilbert"),yjt.forEach(t),AQr=r(GGe," \u2014 "),Dee=n(GGe,"A",{href:!0});var xjt=s(Dee);LQr=r(xjt,"FlaxDistilBertForSequenceClassification"),xjt.forEach(t),yQr=r(GGe," (DistilBERT model)"),GGe.forEach(t),xQr=i(De),hw=n(De,"LI",{});var OGe=s(hw);v0e=n(OGe,"STRONG",{});var $jt=s(v0e);$Qr=r($jt,"electra"),$jt.forEach(t),kQr=r(OGe," \u2014 "),Gee=n(OGe,"A",{href:!0});var kjt=s(Gee);SQr=r(kjt,"FlaxElectraForSequenceClassification"),kjt.forEach(t),RQr=r(OGe," (ELECTRA model)"),OGe.forEach(t),PQr=i(De),pw=n(De,"LI",{});var VGe=s(pw);F0e=n(VGe,"STRONG",{});var Sjt=s(F0e);BQr=r(Sjt,"mbart"),Sjt.forEach(t),IQr=r(VGe," \u2014 "),Oee=n(VGe,"A",{href:!0});var Rjt=s(Oee);NQr=r(Rjt,"FlaxMBartForSequenceClassification"),Rjt.forEach(t),qQr=r(VGe," (mBART model)"),VGe.forEach(t),jQr=i(De),_w=n(De,"LI",{});var XGe=s(_w);T0e=n(XGe,"STRONG",{});var Pjt=s(T0e);DQr=r(Pjt,"roberta"),Pjt.forEach(t),GQr=r(XGe," \u2014 "),Vee=n(XGe,"A",{href:!0});var Bjt=s(Vee);OQr=r(Bjt,"FlaxRobertaForSequenceClassification"),Bjt.forEach(t),VQr=r(XGe," (RoBERTa model)"),XGe.forEach(t),XQr=i(De),uw=n(De,"LI",{});var zGe=s(uw);M0e=n(zGe,"STRONG",{});var Ijt=s(M0e);zQr=r(Ijt,"roformer"),Ijt.forEach(t),QQr=r(zGe," \u2014 "),Xee=n(zGe,"A",{href:!0});var Njt=s(Xee);WQr=r(Njt,"FlaxRoFormerForSequenceClassification"),Njt.forEach(t),HQr=r(zGe," (RoFormer model)"),zGe.forEach(t),UQr=i(De),bw=n(De,"LI",{});var QGe=s(bw);E0e=n(QGe,"STRONG",{});var qjt=s(E0e);JQr=r(qjt,"xlm-roberta"),qjt.forEach(t),YQr=r(QGe," \u2014 "),zee=n(QGe,"A",{href:!0});var jjt=s(zee);KQr=r(jjt,"FlaxXLMRobertaForSequenceClassification"),jjt.forEach(t),ZQr=r(QGe," (XLM-RoBERTa model)"),QGe.forEach(t),De.forEach(t),eWr=i(ci),T(vw.$$.fragment,ci),ci.forEach(t),di.forEach(t),_Xe=i(f),df=n(f,"H2",{class:!0});var wQe=s(df);Fw=n(wQe,"A",{id:!0,class:!0,href:!0});var Djt=s(Fw);C0e=n(Djt,"SPAN",{});var Gjt=s(C0e);T(u$.$$.fragment,Gjt),Gjt.forEach(t),Djt.forEach(t),oWr=i(wQe),w0e=n(wQe,"SPAN",{});var Ojt=s(w0e);rWr=r(Ojt,"FlaxAutoModelForQuestionAnswering"),Ojt.forEach(t),wQe.forEach(t),uXe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(b$.$$.fragment,fi),tWr=i(fi),cf=n(fi,"P",{});var Mte=s(cf);aWr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qee=n(Mte,"A",{href:!0});var Vjt=s(Qee);nWr=r(Vjt,"from_pretrained()"),Vjt.forEach(t),sWr=r(Mte," class method or the "),Wee=n(Mte,"A",{href:!0});var Xjt=s(Wee);lWr=r(Xjt,"from_config()"),Xjt.forEach(t),iWr=r(Mte,` class
method.`),Mte.forEach(t),dWr=i(fi),v$=n(fi,"P",{});var AQe=s(v$);cWr=r(AQe,"This class cannot be instantiated directly using "),A0e=n(AQe,"CODE",{});var zjt=s(A0e);fWr=r(zjt,"__init__()"),zjt.forEach(t),mWr=r(AQe," (throws an error)."),AQe.forEach(t),gWr=i(fi),Jt=n(fi,"DIV",{class:!0});var ML=s(Jt);T(F$.$$.fragment,ML),hWr=i(ML),L0e=n(ML,"P",{});var Qjt=s(L0e);pWr=r(Qjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qjt.forEach(t),_Wr=i(ML),ff=n(ML,"P",{});var Ete=s(ff);uWr=r(Ete,`Note:
Loading a model from its configuration file does `),y0e=n(Ete,"STRONG",{});var Wjt=s(y0e);bWr=r(Wjt,"not"),Wjt.forEach(t),vWr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Ete,"A",{href:!0});var Hjt=s(Hee);FWr=r(Hjt,"from_pretrained()"),Hjt.forEach(t),TWr=r(Ete," to load the model weights."),Ete.forEach(t),MWr=i(ML),T(Tw.$$.fragment,ML),ML.forEach(t),EWr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(T$.$$.fragment,mi),CWr=i(mi),x0e=n(mi,"P",{});var Ujt=s(x0e);wWr=r(Ujt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ujt.forEach(t),AWr=i(mi),An=n(mi,"P",{});var EL=s(An);LWr=r(EL,"The model class to instantiate is selected based on the "),$0e=n(EL,"CODE",{});var Jjt=s($0e);yWr=r(Jjt,"model_type"),Jjt.forEach(t),xWr=r(EL,` property of the config object (either
passed as an argument or loaded from `),k0e=n(EL,"CODE",{});var Yjt=s(k0e);$Wr=r(Yjt,"pretrained_model_name_or_path"),Yjt.forEach(t),kWr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(EL,"CODE",{});var Kjt=s(S0e);SWr=r(Kjt,"pretrained_model_name_or_path"),Kjt.forEach(t),RWr=r(EL,":"),EL.forEach(t),PWr=i(mi),Re=n(mi,"UL",{});var Ge=s(Re);Mw=n(Ge,"LI",{});var WGe=s(Mw);R0e=n(WGe,"STRONG",{});var Zjt=s(R0e);BWr=r(Zjt,"albert"),Zjt.forEach(t),IWr=r(WGe," \u2014 "),Uee=n(WGe,"A",{href:!0});var eDt=s(Uee);NWr=r(eDt,"FlaxAlbertForQuestionAnswering"),eDt.forEach(t),qWr=r(WGe," (ALBERT model)"),WGe.forEach(t),jWr=i(Ge),Ew=n(Ge,"LI",{});var HGe=s(Ew);P0e=n(HGe,"STRONG",{});var oDt=s(P0e);DWr=r(oDt,"bart"),oDt.forEach(t),GWr=r(HGe," \u2014 "),Jee=n(HGe,"A",{href:!0});var rDt=s(Jee);OWr=r(rDt,"FlaxBartForQuestionAnswering"),rDt.forEach(t),VWr=r(HGe," (BART model)"),HGe.forEach(t),XWr=i(Ge),Cw=n(Ge,"LI",{});var UGe=s(Cw);B0e=n(UGe,"STRONG",{});var tDt=s(B0e);zWr=r(tDt,"bert"),tDt.forEach(t),QWr=r(UGe," \u2014 "),Yee=n(UGe,"A",{href:!0});var aDt=s(Yee);WWr=r(aDt,"FlaxBertForQuestionAnswering"),aDt.forEach(t),HWr=r(UGe," (BERT model)"),UGe.forEach(t),UWr=i(Ge),ww=n(Ge,"LI",{});var JGe=s(ww);I0e=n(JGe,"STRONG",{});var nDt=s(I0e);JWr=r(nDt,"big_bird"),nDt.forEach(t),YWr=r(JGe," \u2014 "),Kee=n(JGe,"A",{href:!0});var sDt=s(Kee);KWr=r(sDt,"FlaxBigBirdForQuestionAnswering"),sDt.forEach(t),ZWr=r(JGe," (BigBird model)"),JGe.forEach(t),eHr=i(Ge),Aw=n(Ge,"LI",{});var YGe=s(Aw);N0e=n(YGe,"STRONG",{});var lDt=s(N0e);oHr=r(lDt,"distilbert"),lDt.forEach(t),rHr=r(YGe," \u2014 "),Zee=n(YGe,"A",{href:!0});var iDt=s(Zee);tHr=r(iDt,"FlaxDistilBertForQuestionAnswering"),iDt.forEach(t),aHr=r(YGe," (DistilBERT model)"),YGe.forEach(t),nHr=i(Ge),Lw=n(Ge,"LI",{});var KGe=s(Lw);q0e=n(KGe,"STRONG",{});var dDt=s(q0e);sHr=r(dDt,"electra"),dDt.forEach(t),lHr=r(KGe," \u2014 "),eoe=n(KGe,"A",{href:!0});var cDt=s(eoe);iHr=r(cDt,"FlaxElectraForQuestionAnswering"),cDt.forEach(t),dHr=r(KGe," (ELECTRA model)"),KGe.forEach(t),cHr=i(Ge),yw=n(Ge,"LI",{});var ZGe=s(yw);j0e=n(ZGe,"STRONG",{});var fDt=s(j0e);fHr=r(fDt,"mbart"),fDt.forEach(t),mHr=r(ZGe," \u2014 "),ooe=n(ZGe,"A",{href:!0});var mDt=s(ooe);gHr=r(mDt,"FlaxMBartForQuestionAnswering"),mDt.forEach(t),hHr=r(ZGe," (mBART model)"),ZGe.forEach(t),pHr=i(Ge),xw=n(Ge,"LI",{});var eOe=s(xw);D0e=n(eOe,"STRONG",{});var gDt=s(D0e);_Hr=r(gDt,"roberta"),gDt.forEach(t),uHr=r(eOe," \u2014 "),roe=n(eOe,"A",{href:!0});var hDt=s(roe);bHr=r(hDt,"FlaxRobertaForQuestionAnswering"),hDt.forEach(t),vHr=r(eOe," (RoBERTa model)"),eOe.forEach(t),FHr=i(Ge),$w=n(Ge,"LI",{});var oOe=s($w);G0e=n(oOe,"STRONG",{});var pDt=s(G0e);THr=r(pDt,"roformer"),pDt.forEach(t),MHr=r(oOe," \u2014 "),toe=n(oOe,"A",{href:!0});var _Dt=s(toe);EHr=r(_Dt,"FlaxRoFormerForQuestionAnswering"),_Dt.forEach(t),CHr=r(oOe," (RoFormer model)"),oOe.forEach(t),wHr=i(Ge),kw=n(Ge,"LI",{});var rOe=s(kw);O0e=n(rOe,"STRONG",{});var uDt=s(O0e);AHr=r(uDt,"xlm-roberta"),uDt.forEach(t),LHr=r(rOe," \u2014 "),aoe=n(rOe,"A",{href:!0});var bDt=s(aoe);yHr=r(bDt,"FlaxXLMRobertaForQuestionAnswering"),bDt.forEach(t),xHr=r(rOe," (XLM-RoBERTa model)"),rOe.forEach(t),Ge.forEach(t),$Hr=i(mi),T(Sw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),bXe=i(f),mf=n(f,"H2",{class:!0});var LQe=s(mf);Rw=n(LQe,"A",{id:!0,class:!0,href:!0});var vDt=s(Rw);V0e=n(vDt,"SPAN",{});var FDt=s(V0e);T(M$.$$.fragment,FDt),FDt.forEach(t),vDt.forEach(t),kHr=i(LQe),X0e=n(LQe,"SPAN",{});var TDt=s(X0e);SHr=r(TDt,"FlaxAutoModelForTokenClassification"),TDt.forEach(t),LQe.forEach(t),vXe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(E$.$$.fragment,gi),RHr=i(gi),gf=n(gi,"P",{});var Cte=s(gf);PHr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=n(Cte,"A",{href:!0});var MDt=s(noe);BHr=r(MDt,"from_pretrained()"),MDt.forEach(t),IHr=r(Cte," class method or the "),soe=n(Cte,"A",{href:!0});var EDt=s(soe);NHr=r(EDt,"from_config()"),EDt.forEach(t),qHr=r(Cte,` class
method.`),Cte.forEach(t),jHr=i(gi),C$=n(gi,"P",{});var yQe=s(C$);DHr=r(yQe,"This class cannot be instantiated directly using "),z0e=n(yQe,"CODE",{});var CDt=s(z0e);GHr=r(CDt,"__init__()"),CDt.forEach(t),OHr=r(yQe," (throws an error)."),yQe.forEach(t),VHr=i(gi),Yt=n(gi,"DIV",{class:!0});var CL=s(Yt);T(w$.$$.fragment,CL),XHr=i(CL),Q0e=n(CL,"P",{});var wDt=s(Q0e);zHr=r(wDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wDt.forEach(t),QHr=i(CL),hf=n(CL,"P",{});var wte=s(hf);WHr=r(wte,`Note:
Loading a model from its configuration file does `),W0e=n(wte,"STRONG",{});var ADt=s(W0e);HHr=r(ADt,"not"),ADt.forEach(t),UHr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=n(wte,"A",{href:!0});var LDt=s(loe);JHr=r(LDt,"from_pretrained()"),LDt.forEach(t),YHr=r(wte," to load the model weights."),wte.forEach(t),KHr=i(CL),T(Pw.$$.fragment,CL),CL.forEach(t),ZHr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(A$.$$.fragment,hi),eUr=i(hi),H0e=n(hi,"P",{});var yDt=s(H0e);oUr=r(yDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yDt.forEach(t),rUr=i(hi),Ln=n(hi,"P",{});var wL=s(Ln);tUr=r(wL,"The model class to instantiate is selected based on the "),U0e=n(wL,"CODE",{});var xDt=s(U0e);aUr=r(xDt,"model_type"),xDt.forEach(t),nUr=r(wL,` property of the config object (either
passed as an argument or loaded from `),J0e=n(wL,"CODE",{});var $Dt=s(J0e);sUr=r($Dt,"pretrained_model_name_or_path"),$Dt.forEach(t),lUr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=n(wL,"CODE",{});var kDt=s(Y0e);iUr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),dUr=r(wL,":"),wL.forEach(t),cUr=i(hi),Ve=n(hi,"UL",{});var To=s(Ve);Bw=n(To,"LI",{});var tOe=s(Bw);K0e=n(tOe,"STRONG",{});var SDt=s(K0e);fUr=r(SDt,"albert"),SDt.forEach(t),mUr=r(tOe," \u2014 "),ioe=n(tOe,"A",{href:!0});var RDt=s(ioe);gUr=r(RDt,"FlaxAlbertForTokenClassification"),RDt.forEach(t),hUr=r(tOe," (ALBERT model)"),tOe.forEach(t),pUr=i(To),Iw=n(To,"LI",{});var aOe=s(Iw);Z0e=n(aOe,"STRONG",{});var PDt=s(Z0e);_Ur=r(PDt,"bert"),PDt.forEach(t),uUr=r(aOe," \u2014 "),doe=n(aOe,"A",{href:!0});var BDt=s(doe);bUr=r(BDt,"FlaxBertForTokenClassification"),BDt.forEach(t),vUr=r(aOe," (BERT model)"),aOe.forEach(t),FUr=i(To),Nw=n(To,"LI",{});var nOe=s(Nw);ewe=n(nOe,"STRONG",{});var IDt=s(ewe);TUr=r(IDt,"big_bird"),IDt.forEach(t),MUr=r(nOe," \u2014 "),coe=n(nOe,"A",{href:!0});var NDt=s(coe);EUr=r(NDt,"FlaxBigBirdForTokenClassification"),NDt.forEach(t),CUr=r(nOe," (BigBird model)"),nOe.forEach(t),wUr=i(To),qw=n(To,"LI",{});var sOe=s(qw);owe=n(sOe,"STRONG",{});var qDt=s(owe);AUr=r(qDt,"distilbert"),qDt.forEach(t),LUr=r(sOe," \u2014 "),foe=n(sOe,"A",{href:!0});var jDt=s(foe);yUr=r(jDt,"FlaxDistilBertForTokenClassification"),jDt.forEach(t),xUr=r(sOe," (DistilBERT model)"),sOe.forEach(t),$Ur=i(To),jw=n(To,"LI",{});var lOe=s(jw);rwe=n(lOe,"STRONG",{});var DDt=s(rwe);kUr=r(DDt,"electra"),DDt.forEach(t),SUr=r(lOe," \u2014 "),moe=n(lOe,"A",{href:!0});var GDt=s(moe);RUr=r(GDt,"FlaxElectraForTokenClassification"),GDt.forEach(t),PUr=r(lOe," (ELECTRA model)"),lOe.forEach(t),BUr=i(To),Dw=n(To,"LI",{});var iOe=s(Dw);twe=n(iOe,"STRONG",{});var ODt=s(twe);IUr=r(ODt,"roberta"),ODt.forEach(t),NUr=r(iOe," \u2014 "),goe=n(iOe,"A",{href:!0});var VDt=s(goe);qUr=r(VDt,"FlaxRobertaForTokenClassification"),VDt.forEach(t),jUr=r(iOe," (RoBERTa model)"),iOe.forEach(t),DUr=i(To),Gw=n(To,"LI",{});var dOe=s(Gw);awe=n(dOe,"STRONG",{});var XDt=s(awe);GUr=r(XDt,"roformer"),XDt.forEach(t),OUr=r(dOe," \u2014 "),hoe=n(dOe,"A",{href:!0});var zDt=s(hoe);VUr=r(zDt,"FlaxRoFormerForTokenClassification"),zDt.forEach(t),XUr=r(dOe," (RoFormer model)"),dOe.forEach(t),zUr=i(To),Ow=n(To,"LI",{});var cOe=s(Ow);nwe=n(cOe,"STRONG",{});var QDt=s(nwe);QUr=r(QDt,"xlm-roberta"),QDt.forEach(t),WUr=r(cOe," \u2014 "),poe=n(cOe,"A",{href:!0});var WDt=s(poe);HUr=r(WDt,"FlaxXLMRobertaForTokenClassification"),WDt.forEach(t),UUr=r(cOe," (XLM-RoBERTa model)"),cOe.forEach(t),To.forEach(t),JUr=i(hi),T(Vw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),FXe=i(f),pf=n(f,"H2",{class:!0});var xQe=s(pf);Xw=n(xQe,"A",{id:!0,class:!0,href:!0});var HDt=s(Xw);swe=n(HDt,"SPAN",{});var UDt=s(swe);T(L$.$$.fragment,UDt),UDt.forEach(t),HDt.forEach(t),YUr=i(xQe),lwe=n(xQe,"SPAN",{});var JDt=s(lwe);KUr=r(JDt,"FlaxAutoModelForMultipleChoice"),JDt.forEach(t),xQe.forEach(t),TXe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(y$.$$.fragment,pi),ZUr=i(pi),_f=n(pi,"P",{});var Ate=s(_f);eJr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_oe=n(Ate,"A",{href:!0});var YDt=s(_oe);oJr=r(YDt,"from_pretrained()"),YDt.forEach(t),rJr=r(Ate," class method or the "),uoe=n(Ate,"A",{href:!0});var KDt=s(uoe);tJr=r(KDt,"from_config()"),KDt.forEach(t),aJr=r(Ate,` class
method.`),Ate.forEach(t),nJr=i(pi),x$=n(pi,"P",{});var $Qe=s(x$);sJr=r($Qe,"This class cannot be instantiated directly using "),iwe=n($Qe,"CODE",{});var ZDt=s(iwe);lJr=r(ZDt,"__init__()"),ZDt.forEach(t),iJr=r($Qe," (throws an error)."),$Qe.forEach(t),dJr=i(pi),Kt=n(pi,"DIV",{class:!0});var AL=s(Kt);T($$.$$.fragment,AL),cJr=i(AL),dwe=n(AL,"P",{});var eGt=s(dwe);fJr=r(eGt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eGt.forEach(t),mJr=i(AL),uf=n(AL,"P",{});var Lte=s(uf);gJr=r(Lte,`Note:
Loading a model from its configuration file does `),cwe=n(Lte,"STRONG",{});var oGt=s(cwe);hJr=r(oGt,"not"),oGt.forEach(t),pJr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Lte,"A",{href:!0});var rGt=s(boe);_Jr=r(rGt,"from_pretrained()"),rGt.forEach(t),uJr=r(Lte," to load the model weights."),Lte.forEach(t),bJr=i(AL),T(zw.$$.fragment,AL),AL.forEach(t),vJr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(k$.$$.fragment,_i),FJr=i(_i),fwe=n(_i,"P",{});var tGt=s(fwe);TJr=r(tGt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tGt.forEach(t),MJr=i(_i),yn=n(_i,"P",{});var LL=s(yn);EJr=r(LL,"The model class to instantiate is selected based on the "),mwe=n(LL,"CODE",{});var aGt=s(mwe);CJr=r(aGt,"model_type"),aGt.forEach(t),wJr=r(LL,` property of the config object (either
passed as an argument or loaded from `),gwe=n(LL,"CODE",{});var nGt=s(gwe);AJr=r(nGt,"pretrained_model_name_or_path"),nGt.forEach(t),LJr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=n(LL,"CODE",{});var sGt=s(hwe);yJr=r(sGt,"pretrained_model_name_or_path"),sGt.forEach(t),xJr=r(LL,":"),LL.forEach(t),$Jr=i(_i),Xe=n(_i,"UL",{});var Mo=s(Xe);Qw=n(Mo,"LI",{});var fOe=s(Qw);pwe=n(fOe,"STRONG",{});var lGt=s(pwe);kJr=r(lGt,"albert"),lGt.forEach(t),SJr=r(fOe," \u2014 "),voe=n(fOe,"A",{href:!0});var iGt=s(voe);RJr=r(iGt,"FlaxAlbertForMultipleChoice"),iGt.forEach(t),PJr=r(fOe," (ALBERT model)"),fOe.forEach(t),BJr=i(Mo),Ww=n(Mo,"LI",{});var mOe=s(Ww);_we=n(mOe,"STRONG",{});var dGt=s(_we);IJr=r(dGt,"bert"),dGt.forEach(t),NJr=r(mOe," \u2014 "),Foe=n(mOe,"A",{href:!0});var cGt=s(Foe);qJr=r(cGt,"FlaxBertForMultipleChoice"),cGt.forEach(t),jJr=r(mOe," (BERT model)"),mOe.forEach(t),DJr=i(Mo),Hw=n(Mo,"LI",{});var gOe=s(Hw);uwe=n(gOe,"STRONG",{});var fGt=s(uwe);GJr=r(fGt,"big_bird"),fGt.forEach(t),OJr=r(gOe," \u2014 "),Toe=n(gOe,"A",{href:!0});var mGt=s(Toe);VJr=r(mGt,"FlaxBigBirdForMultipleChoice"),mGt.forEach(t),XJr=r(gOe," (BigBird model)"),gOe.forEach(t),zJr=i(Mo),Uw=n(Mo,"LI",{});var hOe=s(Uw);bwe=n(hOe,"STRONG",{});var gGt=s(bwe);QJr=r(gGt,"distilbert"),gGt.forEach(t),WJr=r(hOe," \u2014 "),Moe=n(hOe,"A",{href:!0});var hGt=s(Moe);HJr=r(hGt,"FlaxDistilBertForMultipleChoice"),hGt.forEach(t),UJr=r(hOe," (DistilBERT model)"),hOe.forEach(t),JJr=i(Mo),Jw=n(Mo,"LI",{});var pOe=s(Jw);vwe=n(pOe,"STRONG",{});var pGt=s(vwe);YJr=r(pGt,"electra"),pGt.forEach(t),KJr=r(pOe," \u2014 "),Eoe=n(pOe,"A",{href:!0});var _Gt=s(Eoe);ZJr=r(_Gt,"FlaxElectraForMultipleChoice"),_Gt.forEach(t),eYr=r(pOe," (ELECTRA model)"),pOe.forEach(t),oYr=i(Mo),Yw=n(Mo,"LI",{});var _Oe=s(Yw);Fwe=n(_Oe,"STRONG",{});var uGt=s(Fwe);rYr=r(uGt,"roberta"),uGt.forEach(t),tYr=r(_Oe," \u2014 "),Coe=n(_Oe,"A",{href:!0});var bGt=s(Coe);aYr=r(bGt,"FlaxRobertaForMultipleChoice"),bGt.forEach(t),nYr=r(_Oe," (RoBERTa model)"),_Oe.forEach(t),sYr=i(Mo),Kw=n(Mo,"LI",{});var uOe=s(Kw);Twe=n(uOe,"STRONG",{});var vGt=s(Twe);lYr=r(vGt,"roformer"),vGt.forEach(t),iYr=r(uOe," \u2014 "),woe=n(uOe,"A",{href:!0});var FGt=s(woe);dYr=r(FGt,"FlaxRoFormerForMultipleChoice"),FGt.forEach(t),cYr=r(uOe," (RoFormer model)"),uOe.forEach(t),fYr=i(Mo),Zw=n(Mo,"LI",{});var bOe=s(Zw);Mwe=n(bOe,"STRONG",{});var TGt=s(Mwe);mYr=r(TGt,"xlm-roberta"),TGt.forEach(t),gYr=r(bOe," \u2014 "),Aoe=n(bOe,"A",{href:!0});var MGt=s(Aoe);hYr=r(MGt,"FlaxXLMRobertaForMultipleChoice"),MGt.forEach(t),pYr=r(bOe," (XLM-RoBERTa model)"),bOe.forEach(t),Mo.forEach(t),_Yr=i(_i),T(eA.$$.fragment,_i),_i.forEach(t),pi.forEach(t),MXe=i(f),bf=n(f,"H2",{class:!0});var kQe=s(bf);oA=n(kQe,"A",{id:!0,class:!0,href:!0});var EGt=s(oA);Ewe=n(EGt,"SPAN",{});var CGt=s(Ewe);T(S$.$$.fragment,CGt),CGt.forEach(t),EGt.forEach(t),uYr=i(kQe),Cwe=n(kQe,"SPAN",{});var wGt=s(Cwe);bYr=r(wGt,"FlaxAutoModelForNextSentencePrediction"),wGt.forEach(t),kQe.forEach(t),EXe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(R$.$$.fragment,ui),vYr=i(ui),vf=n(ui,"P",{});var yte=s(vf);FYr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Loe=n(yte,"A",{href:!0});var AGt=s(Loe);TYr=r(AGt,"from_pretrained()"),AGt.forEach(t),MYr=r(yte," class method or the "),yoe=n(yte,"A",{href:!0});var LGt=s(yoe);EYr=r(LGt,"from_config()"),LGt.forEach(t),CYr=r(yte,` class
method.`),yte.forEach(t),wYr=i(ui),P$=n(ui,"P",{});var SQe=s(P$);AYr=r(SQe,"This class cannot be instantiated directly using "),wwe=n(SQe,"CODE",{});var yGt=s(wwe);LYr=r(yGt,"__init__()"),yGt.forEach(t),yYr=r(SQe," (throws an error)."),SQe.forEach(t),xYr=i(ui),Zt=n(ui,"DIV",{class:!0});var yL=s(Zt);T(B$.$$.fragment,yL),$Yr=i(yL),Awe=n(yL,"P",{});var xGt=s(Awe);kYr=r(xGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xGt.forEach(t),SYr=i(yL),Ff=n(yL,"P",{});var xte=s(Ff);RYr=r(xte,`Note:
Loading a model from its configuration file does `),Lwe=n(xte,"STRONG",{});var $Gt=s(Lwe);PYr=r($Gt,"not"),$Gt.forEach(t),BYr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=n(xte,"A",{href:!0});var kGt=s(xoe);IYr=r(kGt,"from_pretrained()"),kGt.forEach(t),NYr=r(xte," to load the model weights."),xte.forEach(t),qYr=i(yL),T(rA.$$.fragment,yL),yL.forEach(t),jYr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(I$.$$.fragment,bi),DYr=i(bi),ywe=n(bi,"P",{});var SGt=s(ywe);GYr=r(SGt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SGt.forEach(t),OYr=i(bi),xn=n(bi,"P",{});var xL=s(xn);VYr=r(xL,"The model class to instantiate is selected based on the "),xwe=n(xL,"CODE",{});var RGt=s(xwe);XYr=r(RGt,"model_type"),RGt.forEach(t),zYr=r(xL,` property of the config object (either
passed as an argument or loaded from `),$we=n(xL,"CODE",{});var PGt=s($we);QYr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),WYr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=n(xL,"CODE",{});var BGt=s(kwe);HYr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),UYr=r(xL,":"),xL.forEach(t),JYr=i(bi),Swe=n(bi,"UL",{});var IGt=s(Swe);tA=n(IGt,"LI",{});var vOe=s(tA);Rwe=n(vOe,"STRONG",{});var NGt=s(Rwe);YYr=r(NGt,"bert"),NGt.forEach(t),KYr=r(vOe," \u2014 "),$oe=n(vOe,"A",{href:!0});var qGt=s($oe);ZYr=r(qGt,"FlaxBertForNextSentencePrediction"),qGt.forEach(t),eKr=r(vOe," (BERT model)"),vOe.forEach(t),IGt.forEach(t),oKr=i(bi),T(aA.$$.fragment,bi),bi.forEach(t),ui.forEach(t),CXe=i(f),Tf=n(f,"H2",{class:!0});var RQe=s(Tf);nA=n(RQe,"A",{id:!0,class:!0,href:!0});var jGt=s(nA);Pwe=n(jGt,"SPAN",{});var DGt=s(Pwe);T(N$.$$.fragment,DGt),DGt.forEach(t),jGt.forEach(t),rKr=i(RQe),Bwe=n(RQe,"SPAN",{});var GGt=s(Bwe);tKr=r(GGt,"FlaxAutoModelForImageClassification"),GGt.forEach(t),RQe.forEach(t),wXe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(q$.$$.fragment,vi),aKr=i(vi),Mf=n(vi,"P",{});var $te=s(Mf);nKr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),koe=n($te,"A",{href:!0});var OGt=s(koe);sKr=r(OGt,"from_pretrained()"),OGt.forEach(t),lKr=r($te," class method or the "),Soe=n($te,"A",{href:!0});var VGt=s(Soe);iKr=r(VGt,"from_config()"),VGt.forEach(t),dKr=r($te,` class
method.`),$te.forEach(t),cKr=i(vi),j$=n(vi,"P",{});var PQe=s(j$);fKr=r(PQe,"This class cannot be instantiated directly using "),Iwe=n(PQe,"CODE",{});var XGt=s(Iwe);mKr=r(XGt,"__init__()"),XGt.forEach(t),gKr=r(PQe," (throws an error)."),PQe.forEach(t),hKr=i(vi),ea=n(vi,"DIV",{class:!0});var $L=s(ea);T(D$.$$.fragment,$L),pKr=i($L),Nwe=n($L,"P",{});var zGt=s(Nwe);_Kr=r(zGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zGt.forEach(t),uKr=i($L),Ef=n($L,"P",{});var kte=s(Ef);bKr=r(kte,`Note:
Loading a model from its configuration file does `),qwe=n(kte,"STRONG",{});var QGt=s(qwe);vKr=r(QGt,"not"),QGt.forEach(t),FKr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(kte,"A",{href:!0});var WGt=s(Roe);TKr=r(WGt,"from_pretrained()"),WGt.forEach(t),MKr=r(kte," to load the model weights."),kte.forEach(t),EKr=i($L),T(sA.$$.fragment,$L),$L.forEach(t),CKr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(G$.$$.fragment,Fi),wKr=i(Fi),jwe=n(Fi,"P",{});var HGt=s(jwe);AKr=r(HGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HGt.forEach(t),LKr=i(Fi),$n=n(Fi,"P",{});var kL=s($n);yKr=r(kL,"The model class to instantiate is selected based on the "),Dwe=n(kL,"CODE",{});var UGt=s(Dwe);xKr=r(UGt,"model_type"),UGt.forEach(t),$Kr=r(kL,` property of the config object (either
passed as an argument or loaded from `),Gwe=n(kL,"CODE",{});var JGt=s(Gwe);kKr=r(JGt,"pretrained_model_name_or_path"),JGt.forEach(t),SKr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=n(kL,"CODE",{});var YGt=s(Owe);RKr=r(YGt,"pretrained_model_name_or_path"),YGt.forEach(t),PKr=r(kL,":"),kL.forEach(t),BKr=i(Fi),O$=n(Fi,"UL",{});var BQe=s(O$);lA=n(BQe,"LI",{});var FOe=s(lA);Vwe=n(FOe,"STRONG",{});var KGt=s(Vwe);IKr=r(KGt,"beit"),KGt.forEach(t),NKr=r(FOe," \u2014 "),Poe=n(FOe,"A",{href:!0});var ZGt=s(Poe);qKr=r(ZGt,"FlaxBeitForImageClassification"),ZGt.forEach(t),jKr=r(FOe," (BEiT model)"),FOe.forEach(t),DKr=i(BQe),iA=n(BQe,"LI",{});var TOe=s(iA);Xwe=n(TOe,"STRONG",{});var eOt=s(Xwe);GKr=r(eOt,"vit"),eOt.forEach(t),OKr=r(TOe," \u2014 "),Boe=n(TOe,"A",{href:!0});var oOt=s(Boe);VKr=r(oOt,"FlaxViTForImageClassification"),oOt.forEach(t),XKr=r(TOe," (ViT model)"),TOe.forEach(t),BQe.forEach(t),zKr=i(Fi),T(dA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),AXe=i(f),Cf=n(f,"H2",{class:!0});var IQe=s(Cf);cA=n(IQe,"A",{id:!0,class:!0,href:!0});var rOt=s(cA);zwe=n(rOt,"SPAN",{});var tOt=s(zwe);T(V$.$$.fragment,tOt),tOt.forEach(t),rOt.forEach(t),QKr=i(IQe),Qwe=n(IQe,"SPAN",{});var aOt=s(Qwe);WKr=r(aOt,"FlaxAutoModelForVision2Seq"),aOt.forEach(t),IQe.forEach(t),LXe=i(f),wr=n(f,"DIV",{class:!0});var Ti=s(wr);T(X$.$$.fragment,Ti),HKr=i(Ti),wf=n(Ti,"P",{});var Ste=s(wf);UKr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ioe=n(Ste,"A",{href:!0});var nOt=s(Ioe);JKr=r(nOt,"from_pretrained()"),nOt.forEach(t),YKr=r(Ste," class method or the "),Noe=n(Ste,"A",{href:!0});var sOt=s(Noe);KKr=r(sOt,"from_config()"),sOt.forEach(t),ZKr=r(Ste,` class
method.`),Ste.forEach(t),eZr=i(Ti),z$=n(Ti,"P",{});var NQe=s(z$);oZr=r(NQe,"This class cannot be instantiated directly using "),Wwe=n(NQe,"CODE",{});var lOt=s(Wwe);rZr=r(lOt,"__init__()"),lOt.forEach(t),tZr=r(NQe," (throws an error)."),NQe.forEach(t),aZr=i(Ti),oa=n(Ti,"DIV",{class:!0});var SL=s(oa);T(Q$.$$.fragment,SL),nZr=i(SL),Hwe=n(SL,"P",{});var iOt=s(Hwe);sZr=r(iOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iOt.forEach(t),lZr=i(SL),Af=n(SL,"P",{});var Rte=s(Af);iZr=r(Rte,`Note:
Loading a model from its configuration file does `),Uwe=n(Rte,"STRONG",{});var dOt=s(Uwe);dZr=r(dOt,"not"),dOt.forEach(t),cZr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=n(Rte,"A",{href:!0});var cOt=s(qoe);fZr=r(cOt,"from_pretrained()"),cOt.forEach(t),mZr=r(Rte," to load the model weights."),Rte.forEach(t),gZr=i(SL),T(fA.$$.fragment,SL),SL.forEach(t),hZr=i(Ti),Zr=n(Ti,"DIV",{class:!0});var Mi=s(Zr);T(W$.$$.fragment,Mi),pZr=i(Mi),Jwe=n(Mi,"P",{});var fOt=s(Jwe);_Zr=r(fOt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fOt.forEach(t),uZr=i(Mi),kn=n(Mi,"P",{});var RL=s(kn);bZr=r(RL,"The model class to instantiate is selected based on the "),Ywe=n(RL,"CODE",{});var mOt=s(Ywe);vZr=r(mOt,"model_type"),mOt.forEach(t),FZr=r(RL,` property of the config object (either
passed as an argument or loaded from `),Kwe=n(RL,"CODE",{});var gOt=s(Kwe);TZr=r(gOt,"pretrained_model_name_or_path"),gOt.forEach(t),MZr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zwe=n(RL,"CODE",{});var hOt=s(Zwe);EZr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),CZr=r(RL,":"),RL.forEach(t),wZr=i(Mi),eAe=n(Mi,"UL",{});var pOt=s(eAe);mA=n(pOt,"LI",{});var MOe=s(mA);oAe=n(MOe,"STRONG",{});var _Ot=s(oAe);AZr=r(_Ot,"vision-encoder-decoder"),_Ot.forEach(t),LZr=r(MOe," \u2014 "),joe=n(MOe,"A",{href:!0});var uOt=s(joe);yZr=r(uOt,"FlaxVisionEncoderDecoderModel"),uOt.forEach(t),xZr=r(MOe," (Vision Encoder decoder model)"),MOe.forEach(t),pOt.forEach(t),$Zr=i(Mi),T(gA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(EXt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoTokenizer"),c(xi,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertModel"),c(Pf,"id","extending-the-auto-classes"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#extending-the-auto-classes"),c($i,"class","relative group"),c(If,"id","transformers.AutoConfig"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#transformers.AutoConfig"),c(ki,"class","relative group"),c(vS,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(FS,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertConfig"),c(TS,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartConfig"),c(MS,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitConfig"),c(ES,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertConfig"),c(CS,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(wS,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdConfig"),c(AS,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(LS,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(yS,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(xS,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomConfig"),c($S,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertConfig"),c(kS,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineConfig"),c(SS,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPConfig"),c(RS,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenConfig"),c(PS,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertConfig"),c(BS,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextConfig"),c(IS,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLConfig"),c(NS,"href","/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtConfig"),c(qS,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(jS,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(DS,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(GS,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaConfig"),c(OS,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(VS,"href","/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(XS,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTConfig"),c(zS,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrConfig"),c(QS,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertConfig"),c(WS,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRConfig"),c(HS,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTConfig"),c(US,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraConfig"),c(JS,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(YS,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertConfig"),c(KS,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaConfig"),c(ZS,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetConfig"),c(eR,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTConfig"),c(oR,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelConfig"),c(rR,"href","/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNConfig"),c(tR,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Config"),c(aR,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(nR,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(sR,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJConfig"),c(lR,"href","/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTConfig"),c(iR,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertConfig"),c(dR,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertConfig"),c(cR,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(fR,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(mR,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(gR,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(hR,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDConfig"),c(pR,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitConfig"),c(_R,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerConfig"),c(uR,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Config"),c(bR,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeConfig"),c(vR,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertConfig"),c(FR,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Config"),c(TR,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianConfig"),c(MR,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ER,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartConfig"),c(CR,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTConfig"),c(wR,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(AR,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(LR,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetConfig"),c(yR,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Config"),c(xR,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaConfig"),c($R,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(kR,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(SR,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTConfig"),c(RR,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusConfig"),c(PR,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverConfig"),c(BR,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartConfig"),c(IR,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(NR,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(qR,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(jR,"href","/docs/transformers/pr_17437/en/model_doc/rag#transformers.RagConfig"),c(DR,"href","/docs/transformers/pr_17437/en/model_doc/realm#transformers.RealmConfig"),c(GR,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerConfig"),c(OR,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetConfig"),c(VR,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertConfig"),c(XR,"href","/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetConfig"),c(zR,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertConfig"),c(QR,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaConfig"),c(WR,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerConfig"),c(HR,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerConfig"),c(UR,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWConfig"),c(JR,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDConfig"),c(YR,"href","/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(KR,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ZR,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(eP,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterConfig"),c(oP,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(rP,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinConfig"),c(tP,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Config"),c(aP,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasConfig"),c(nP,"href","/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(sP,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(lP,"href","/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRConfig"),c(iP,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(dP,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(cP,"href","/docs/transformers/pr_17437/en/model_doc/van#transformers.VanConfig"),c(fP,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltConfig"),c(mP,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gP,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hP,"href","/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(pP,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTConfig"),c(_P,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(uP,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bP,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(vP,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMConfig"),c(FP,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMConfig"),c(TP,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMConfig"),c(MP,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(EP,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(CP,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wP,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetConfig"),c(AP,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosConfig"),c(LP,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"id","transformers.AutoTokenizer"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoTokenizer"),c(Ri,"class","relative group"),c(yP,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xP,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizer"),c($P,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartTokenizer"),c(SP,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartTokenizerFast"),c(RP,"href","/docs/transformers/pr_17437/en/model_doc/barthez#transformers.BarthezTokenizer"),c(PP,"href","/docs/transformers/pr_17437/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BP,"href","/docs/transformers/pr_17437/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(IP,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(NP,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jP,"href","/docs/transformers/pr_17437/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DP,"href","/docs/transformers/pr_17437/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GP,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(OP,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(VP,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XP,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zP,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(QP,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(WP,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(HP,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(UP,"href","/docs/transformers/pr_17437/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(JP,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertTokenizer"),c(YP,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineTokenizer"),c(ZP,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizer"),c(eB,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oB,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(rB,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(tB,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aB,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17437/en/model_doc/cpm#transformers.CpmTokenizer"),c(sB,"href","/docs/transformers/pr_17437/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lB,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaTokenizer"),c(fB,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gB,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hB,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(pB,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(uB,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bB,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraTokenizer"),c(vB,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(FB,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(TB,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetTokenizer"),c(MB,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(EB,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(CB,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelTokenizer"),c(wB,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(AB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($B,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(kB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SB,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RB,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizer"),c(PB,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BB,"href","/docs/transformers/pr_17437/en/model_doc/herbert#transformers.HerbertTokenizer"),c(IB,"href","/docs/transformers/pr_17437/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(NB,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jB,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(GB,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(OB,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(VB,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(XB,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(zB,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(QB,"href","/docs/transformers/pr_17437/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(WB,"href","/docs/transformers/pr_17437/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(HB,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDTokenizer"),c(UB,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDTokenizerFast"),c(JB,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerTokenizer"),c(YB,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(KB,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Tokenizer"),c(ZB,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5TokenizerFast"),c(eI,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeTokenizer"),c(oI,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(rI,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(tI,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(aI,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianTokenizer"),c(nI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartTokenizer"),c(sI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(lI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(iI,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(dI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(cI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17437/en/model_doc/mluke#transformers.MLukeTokenizer"),c(mI,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(gI,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(pI,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(_I,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Tokenizer"),c(uI,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5TokenizerFast"),c(bI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(vI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(FI,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizer"),c(TI,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MI,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(EI,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(CI,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wI,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AI,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(LI,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(yI,"href","/docs/transformers/pr_17437/en/model_doc/phobert#transformers.PhobertTokenizer"),c(xI,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartTokenizer"),c($I,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(kI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(SI,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(RI,"href","/docs/transformers/pr_17437/en/model_doc/rag#transformers.RagTokenizer"),c(PI,"href","/docs/transformers/pr_17437/en/model_doc/realm#transformers.RealmTokenizer"),c(BI,"href","/docs/transformers/pr_17437/en/model_doc/realm#transformers.RealmTokenizerFast"),c(II,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerTokenizer"),c(NI,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(qI,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertTokenizer"),c(jI,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(DI,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(GI,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(OI,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VI,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XI,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(zI,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(QI,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(WI,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(HI,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterTokenizer"),c(UI,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(JI,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(YI,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(KI,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Tokenizer"),c(ZI,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5TokenizerFast"),c(eN,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasTokenizer"),c(oN,"href","/docs/transformers/pr_17437/en/model_doc/tapex#transformers.TapexTokenizer"),c(rN,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(tN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(aN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(nN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(cN,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMTokenizer"),c(fN,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(mN,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMTokenizer"),c(gN,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(hN,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(pN,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(_N,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uN,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bN,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(vN,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(FN,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizer"),c(TN,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoFeatureExtractor"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoFeatureExtractor"),c(Pi,"class","relative group"),c(MN,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(EN,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yN,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c($N,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IN,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(qN,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(jN,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oq,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"id","transformers.AutoProcessor"),c(mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mp,"href","#transformers.AutoProcessor"),c(Bi,"class","relative group"),c(rq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(tq,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPProcessor"),c(aq,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPProcessor"),c(nq,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(sq,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(lq,"href","/docs/transformers/pr_17437/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(iq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cq,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(fq,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(mq,"href","/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRProcessor"),c(gq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pq,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltProcessor"),c(_q,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(uq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vq,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pp,"id","transformers.AutoModel"),c(Pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pp,"href","#transformers.AutoModel"),c(Ni,"class","relative group"),c(Fq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mq,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eq,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertModel"),c(Cq,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartModel"),c(wq,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitModel"),c(Aq,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertModel"),c(Lq,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(yq,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdModel"),c(xq,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c($q,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(kq,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Sq,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomModel"),c(Rq,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertModel"),c(Pq,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineModel"),c(Bq,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.CLIPModel"),c(Iq,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenModel"),c(Nq,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertModel"),c(qq,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextModel"),c(jq,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLModel"),c(Dq,"href","/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtModel"),c(Gq,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Oq,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Vq,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Xq,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaModel"),c(zq,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Qq,"href","/docs/transformers/pr_17437/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Wq,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTModel"),c(Hq,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrModel"),c(Uq,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertModel"),c(Jq,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Yq,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTModel"),c(Kq,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraModel"),c(Zq,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertModel"),c(ej,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaModel"),c(oj,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetModel"),c(rj,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTModel"),c(tj,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelModel"),c(aj,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelBaseModel"),c(nj,"href","/docs/transformers/pr_17437/en/model_doc/glpn#transformers.GLPNModel"),c(sj,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2Model"),c(lj,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(ij,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(dj,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJModel"),c(cj,"href","/docs/transformers/pr_17437/en/model_doc/groupvit#transformers.GroupViTModel"),c(fj,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertModel"),c(mj,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertModel"),c(gj,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(hj,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(pj,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(_j,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(uj,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDModel"),c(bj,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitModel"),c(vj,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerModel"),c(Fj,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5Model"),c(Tj,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeModel"),c(Mj,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertModel"),c(Ej,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100Model"),c(Cj,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianModel"),c(wj,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Aj,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartModel"),c(Lj,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTModel"),c(yj,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(xj,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertModel"),c($j,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetModel"),c(kj,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5Model"),c(Sj,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaModel"),c(Rj,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Pj,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Bj,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTModel"),c(Ij,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusModel"),c(Nj,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverModel"),c(qj,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartModel"),c(jj,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Dj,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Gj,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Oj,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModel"),c(Vj,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetModel"),c(Xj,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertModel"),c(zj,"href","/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetModel"),c(Qj,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel"),c(Wj,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaModel"),c(Hj,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerModel"),c(Uj,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerModel"),c(Jj,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWModel"),c(Yj,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDModel"),c(Kj,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Zj,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterModel"),c(eD,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(oD,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinModel"),c(rD,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5Model"),c(tD,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasModel"),c(aD,"href","/docs/transformers/pr_17437/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(nD,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(sD,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechModel"),c(lD,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(iD,"href","/docs/transformers/pr_17437/en/model_doc/van#transformers.VanModel"),c(dD,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltModel"),c(cD,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(fD,"href","/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertModel"),c(mD,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTModel"),c(gD,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(hD,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(pD,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(_D,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMModel"),c(uD,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMModel"),c(bD,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMModel"),c(vD,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(FD,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(TD,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(MD,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetModel"),c(ED,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosModel"),c(CD,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForPreTraining"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForPreTraining"),c(Di,"class","relative group"),c(wD,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AD,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LD,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForPreTraining"),c(xD,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForPreTraining"),c(kD,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(SD,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM"),c(RD,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(BD,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ID,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ND,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(qD,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForPreTraining"),c(DD,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(GD,"href","/docs/transformers/pr_17437/en/model_doc/flava#transformers.FlavaForPreTraining"),c(OD,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForPreTraining"),c(VD,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(zD,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QD,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(WD,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(HD,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(UD,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(JD,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(YD,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(KD,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(eG,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oG,"href","/docs/transformers/pr_17437/en/model_doc/retribert#transformers.RetriBertModel"),c(rG,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tG,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(aG,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nG,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lG,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(iG,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(dG,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(cG,"href","/docs/transformers/pr_17437/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(fG,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(mG,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(gG,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(hG,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pG,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_G,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(uG,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S1,"id","transformers.AutoModelForCausalLM"),c(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S1,"href","#transformers.AutoModelForCausalLM"),c(Vi,"class","relative group"),c(bG,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForCausalLM"),c(MG,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertLMHeadModel"),c(EG,"href","/docs/transformers/pr_17437/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(CG,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wG,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(AG,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(LG,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(yG,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForCausalLM"),c(xG,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($G,"href","/docs/transformers/pr_17437/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(kG,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(SG,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(RG,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForCausalLM"),c(PG,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BG,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(IG,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(NG,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qG,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianForCausalLM"),c(jG,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForCausalLM"),c(DG,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(GG,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(OG,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.OPTForCausalLM"),c(VG,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(XG,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(zG,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(QG,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(WG,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(HG,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(UG,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(JG,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(YG,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(KG,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZG,"href","/docs/transformers/pr_17437/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(eO,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(oO,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(tO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(aO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(nO,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.AutoModelForMaskedLM"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.AutoModelForMaskedLM"),c(Qi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(cO,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMaskedLM"),c(mO,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(gO,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hO,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(pO,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(_O,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uO,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bO,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vO,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FO,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TO,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MO,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(EO,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CO,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wO,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AO,"href","/docs/transformers/pr_17437/en/model_doc/luke#transformers.LukeForMaskedLM"),c(LO,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(xO,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c($O,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kO,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(SO,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RO,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(PO,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(BO,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(IO,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(NO,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qO,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(jO,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DO,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GO,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VO,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XO,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i2,"id","transformers.AutoModelForSeq2SeqLM"),c(i2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ui,"class","relative group"),c(zO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(ZO,"href","/docs/transformers/pr_17437/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(oV,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17437/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.MarianMTModel"),c(aV,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_17437/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_17437/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x2,"id","transformers.AutoModelForSequenceClassification"),c(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x2,"href","#transformers.AutoModelForSequenceClassification"),c(Ki,"class","relative group"),c(fV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c($V,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17437/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForMultipleChoice"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForMultipleChoice"),c(od,"class","relative group"),c(dX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($X,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(RX,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(IX,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(qX,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(jX,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(DX,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(GX,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.AutoModelForNextSentencePrediction"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.AutoModelForNextSentencePrediction"),c(ad,"class","relative group"),c(OX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(QX,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(WX,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(HX,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(UX,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(JX,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.AutoModelForTokenClassification"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.AutoModelForTokenClassification"),c(ld,"class","relative group"),c(YX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(oz,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForTokenClassification"),c(rz,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(tz,"href","/docs/transformers/pr_17437/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(az,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(nz,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForTokenClassification"),c(sz,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(lz,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(iz,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(dz,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(cz,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(fz,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(mz,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gz,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(hz,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(pz,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(_z,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uz,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(bz,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vz,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(wz,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Az,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yz,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xz,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($z,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kz,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.AutoModelForQuestionAnswering"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.AutoModelForQuestionAnswering"),c(cd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17437/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17437/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Zz,"href","/docs/transformers/pr_17437/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17437/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17437/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17437/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17437/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17437/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17437/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17437/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17437/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17437/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MQ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wQ,"href","/docs/transformers/pr_17437/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.AutoModelForTableQuestionAnswering"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(gd,"class","relative group"),c(AQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForImageClassification"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForImageClassification"),c(_d,"class","relative group"),c($Q,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForImageClassification"),c(PQ,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(BQ,"href","/docs/transformers/pr_17437/en/model_doc/cvt#transformers.CvtForImageClassification"),c(IQ,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(NQ,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qQ,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jQ,"href","/docs/transformers/pr_17437/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DQ,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassification"),c(GQ,"href","/docs/transformers/pr_17437/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(OQ,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VQ,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XQ,"href","/docs/transformers/pr_17437/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zQ,"href","/docs/transformers/pr_17437/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(QQ,"href","/docs/transformers/pr_17437/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(WQ,"href","/docs/transformers/pr_17437/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HQ,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UQ,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForImageClassification"),c(JQ,"href","/docs/transformers/pr_17437/en/model_doc/van#transformers.VanForImageClassification"),c(YQ,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_v,"id","transformers.AutoModelForVision2Seq"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForVision2Seq"),c(vd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForVisualQuestionAnswering"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Md,"class","relative group"),c(rW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17437/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForAudioClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForAudioClassification"),c(wd,"class","relative group"),c(sW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioFrameClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioFrameClassification"),c(yd,"class","relative group"),c(bW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(wW,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForCTC"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForCTC"),c(kd,"class","relative group"),c(AW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c($W,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.HubertForCTC"),c(kW,"href","/docs/transformers/pr_17437/en/model_doc/mctct#transformers.MCTCTForCTC"),c(SW,"href","/docs/transformers/pr_17437/en/model_doc/sew#transformers.SEWForCTC"),c(RW,"href","/docs/transformers/pr_17437/en/model_doc/sew-d#transformers.SEWDForCTC"),c(PW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(BW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(IW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(NW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(qW,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Pd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17437/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(VW,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForAudioXVector"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(XW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(HW,"href","/docs/transformers/pr_17437/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(UW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(JW,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(YW,"href","/docs/transformers/pr_17437/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForMaskedImageModeling"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Dd,"class","relative group"),c(KW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17437/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(rH,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(tH,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForObjectDetection"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForObjectDetection"),c(Xd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForObjectDetection"),c(iH,"href","/docs/transformers/pr_17437/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForImageSegmentation"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForImageSegmentation"),c(Wd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17437/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForSemanticSegmentation"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Jd,"class","relative group"),c(gH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(uH,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(bH,"href","/docs/transformers/pr_17437/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(vH,"href","/docs/transformers/pr_17437/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForInstanceSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Zd,"class","relative group"),c(FH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17437/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.TFAutoModel"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.TFAutoModel"),c(rc,"class","relative group"),c(CH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertModel"),c(yH,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartModel"),c(xH,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertModel"),c($H,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(kH,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(SH,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertModel"),c(RH,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.TFCLIPModel"),c(PH,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertModel"),c(BH,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextModel"),c(IH,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLModel"),c(NH,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(qH,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaModel"),c(jH,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(DH,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(GH,"href","/docs/transformers/pr_17437/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(OH,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraModel"),c(VH,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(XH,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelModel"),c(zH,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(QH,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2Model"),c(WH,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJModel"),c(HH,"href","/docs/transformers/pr_17437/en/model_doc/hubert#transformers.TFHubertModel"),c(UH,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(JH,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDModel"),c(YH,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerModel"),c(KH,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertModel"),c(ZH,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianModel"),c(eU,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartModel"),c(oU,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(rU,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetModel"),c(tU,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5Model"),c(aU,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(nU,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTModel"),c(sU,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusModel"),c(lU,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertModel"),c(iU,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaModel"),c(dU,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cU,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fU,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinModel"),c(mU,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5Model"),c(gU,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasModel"),c(hU,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pU,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTModel"),c(_U,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uU,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bU,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMModel"),c(vU,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FU,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForPreTraining"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForPreTraining"),c(nc,"class","relative group"),c(TU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wU,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AU,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForPreTraining"),c(LU,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yU,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xU,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($U,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kU,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SU,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RU,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PU,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BU,"href","/docs/transformers/pr_17437/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IU,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(NU,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qU,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jU,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DU,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OU,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VU,"href","/docs/transformers/pr_17437/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XU,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zU,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(QU,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForCausalLM"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForCausalLM"),c(ic,"class","relative group"),c(WU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YU,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KU,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZU,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eJ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oJ,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rJ,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(tJ,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aJ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nJ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sJ,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lJ,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iJ,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.TFAutoModelForImageClassification"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.TFAutoModelForImageClassification"),c(fc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17437/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gJ,"href","/docs/transformers/pr_17437/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(hJ,"href","/docs/transformers/pr_17437/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(pJ,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForMaskedLM"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForMaskedLM"),c(hc,"class","relative group"),c(_J,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yJ,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($J,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qJ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(uc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QJ,"href","/docs/transformers/pr_17437/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.TFMarianMTModel"),c(HJ,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForSequenceClassification"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17437/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17437/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17437/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForMultipleChoice"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ec,"class","relative group"),c(LY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ac,"class","relative group"),c(WY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(YY,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xc,"class","relative group"),c(KY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/pr_17437/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForTokenClassification"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForTokenClassification"),c(Sc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(lK,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(iK,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(dK,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(cK,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(fK,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(gK,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(hK,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(pK,"href","/docs/transformers/pr_17437/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(_K,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(uK,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(bK,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(vK,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(FK,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(TK,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(MK,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(EK,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(CK,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForQuestionAnswering"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17437/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17437/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17437/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17437/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17437/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(NK,"href","/docs/transformers/pr_17437/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17437/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17437/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17437/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17437/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17437/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QK,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17437/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.TFAutoModelForVision2Seq"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.TFAutoModelForVision2Seq"),c(qc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Gc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17437/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModel"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModel"),c(Xc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertModel"),c(sZ,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartModel"),c(lZ,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitModel"),c(iZ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertModel"),c(dZ,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(cZ,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(fZ,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(mZ,"href","/docs/transformers/pr_17437/en/model_doc/clip#transformers.FlaxCLIPModel"),c(gZ,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(hZ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraModel"),c(pZ,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(_Z,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(uZ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(bZ,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(vZ,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianModel"),c(FZ,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartModel"),c(TZ,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5Model"),c(MZ,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTModel"),c(EZ,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(CZ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(wZ,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(AZ,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5Model"),c(LZ,"href","/docs/transformers/pr_17437/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(yZ,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTModel"),c(xZ,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c($Z,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(kZ,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForCausalLM"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Wc,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(IZ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(NZ,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(qZ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(jZ,"href","/docs/transformers/pr_17437/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(DZ,"href","/docs/transformers/pr_17437/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(GZ,"href","/docs/transformers/pr_17437/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(OZ,"href","/docs/transformers/pr_17437/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(VZ,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(XZ,"href","/docs/transformers/pr_17437/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.FlaxAutoModelForPreTraining"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Jc,"class","relative group"),c(zZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HZ,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(UZ,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(YZ,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(KZ,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ZZ,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tee,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aee,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(nee,"href","/docs/transformers/pr_17437/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(see,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForMaskedLM"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Zc,"class","relative group"),c(lee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cee,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(fee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mee,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(gee,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(hee,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(pee,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(_ee,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uee,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bee,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vee,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(rf,"class","relative group"),c(Fee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(wee,"href","/docs/transformers/pr_17437/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Aee,"href","/docs/transformers/pr_17437/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Lee,"href","/docs/transformers/pr_17437/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(yee,"href","/docs/transformers/pr_17437/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xee,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($ee,"href","/docs/transformers/pr_17437/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kee,"href","/docs/transformers/pr_17437/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(See,"href","/docs/transformers/pr_17437/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(nf,"class","relative group"),c(Ree,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(qee,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(jee,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Dee,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Oee,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Vee,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Xee,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zee,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(df,"class","relative group"),c(Qee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uee,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Jee,"href","/docs/transformers/pr_17437/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Yee,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Kee,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Zee,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(eoe,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ooe,"href","/docs/transformers/pr_17437/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(roe,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(toe,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(aoe,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(mf,"class","relative group"),c(noe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(soe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(loe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ioe,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(doe,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(coe,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(foe,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(moe,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(goe,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(hoe,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(poe,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(pf,"class","relative group"),c(_oe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(boe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(voe,"href","/docs/transformers/pr_17437/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Foe,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Toe,"href","/docs/transformers/pr_17437/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Moe,"href","/docs/transformers/pr_17437/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Eoe,"href","/docs/transformers/pr_17437/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Coe,"href","/docs/transformers/pr_17437/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(woe,"href","/docs/transformers/pr_17437/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Aoe,"href","/docs/transformers/pr_17437/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(oA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(bf,"class","relative group"),c(Loe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($oe,"href","/docs/transformers/pr_17437/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForImageClassification"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Tf,"class","relative group"),c(koe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/pr_17437/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Boe,"href","/docs/transformers/pr_17437/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cA,"id","transformers.FlaxAutoModelForVision2Seq"),c(cA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Cf,"class","relative group"),c(Ioe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Noe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qoe,"href","/docs/transformers/pr_17437/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(joe,"href","/docs/transformers/pr_17437/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ei),b(f,$f,u),b(f,at,u),e(at,Ci),e(at,wi),e(wi,PL),e(at,kf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ai),e(Qe,Rn),e(Rn,BL),e(Qe,Pn),e(Qe,Bn),e(Bn,IL),e(Qe,Li),e(Qe,In),e(In,NL),e(Qe,yi),b(f,Sf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,gS),e(Ae,xi),e(xi,hS),e(Ae,pS),b(f,Co,u),b(f,$a,u),e($a,_S),e($a,Rf),e(Rf,uS),e($a,qQe),b(f,EOe,u),b(f,$i,u),e($i,Pf),e(Pf,Pte),M(qL,Pte,null),e($i,jQe),e($i,Bte),e(Bte,DQe),b(f,COe,u),b(f,Nn,u),e(Nn,GQe),e(Nn,Ite),e(Ite,OQe),e(Nn,VQe),e(Nn,Nte),e(Nte,XQe),e(Nn,zQe),b(f,wOe,u),M(jL,f,u),b(f,AOe,u),b(f,bS,u),e(bS,QQe),b(f,LOe,u),M(Bf,f,u),b(f,yOe,u),b(f,ki,u),e(ki,If),e(If,qte),M(DL,qte,null),e(ki,WQe),e(ki,jte),e(jte,HQe),b(f,xOe,u),b(f,wo,u),M(GL,wo,null),e(wo,UQe),e(wo,OL),e(OL,JQe),e(OL,vS),e(vS,YQe),e(OL,KQe),e(wo,ZQe),e(wo,VL),e(VL,eWe),e(VL,Dte),e(Dte,oWe),e(VL,rWe),e(wo,tWe),e(wo,Ar),M(XL,Ar,null),e(Ar,aWe),e(Ar,Gte),e(Gte,nWe),e(Ar,sWe),e(Ar,Si),e(Si,lWe),e(Si,Ote),e(Ote,iWe),e(Si,dWe),e(Si,Vte),e(Vte,cWe),e(Si,fWe),e(Ar,mWe),e(Ar,A),e(A,Nf),e(Nf,Xte),e(Xte,gWe),e(Nf,hWe),e(Nf,FS),e(FS,pWe),e(Nf,_We),e(A,uWe),e(A,qf),e(qf,zte),e(zte,bWe),e(qf,vWe),e(qf,TS),e(TS,FWe),e(qf,TWe),e(A,MWe),e(A,jf),e(jf,Qte),e(Qte,EWe),e(jf,CWe),e(jf,MS),e(MS,wWe),e(jf,AWe),e(A,LWe),e(A,Df),e(Df,Wte),e(Wte,yWe),e(Df,xWe),e(Df,ES),e(ES,$We),e(Df,kWe),e(A,SWe),e(A,Gf),e(Gf,Hte),e(Hte,RWe),e(Gf,PWe),e(Gf,CS),e(CS,BWe),e(Gf,IWe),e(A,NWe),e(A,Of),e(Of,Ute),e(Ute,qWe),e(Of,jWe),e(Of,wS),e(wS,DWe),e(Of,GWe),e(A,OWe),e(A,Vf),e(Vf,Jte),e(Jte,VWe),e(Vf,XWe),e(Vf,AS),e(AS,zWe),e(Vf,QWe),e(A,WWe),e(A,Xf),e(Xf,Yte),e(Yte,HWe),e(Xf,UWe),e(Xf,LS),e(LS,JWe),e(Xf,YWe),e(A,KWe),e(A,zf),e(zf,Kte),e(Kte,ZWe),e(zf,eHe),e(zf,yS),e(yS,oHe),e(zf,rHe),e(A,tHe),e(A,Qf),e(Qf,Zte),e(Zte,aHe),e(Qf,nHe),e(Qf,xS),e(xS,sHe),e(Qf,lHe),e(A,iHe),e(A,Wf),e(Wf,eae),e(eae,dHe),e(Wf,cHe),e(Wf,$S),e($S,fHe),e(Wf,mHe),e(A,gHe),e(A,Hf),e(Hf,oae),e(oae,hHe),e(Hf,pHe),e(Hf,kS),e(kS,_He),e(Hf,uHe),e(A,bHe),e(A,Uf),e(Uf,rae),e(rae,vHe),e(Uf,FHe),e(Uf,SS),e(SS,THe),e(Uf,MHe),e(A,EHe),e(A,Jf),e(Jf,tae),e(tae,CHe),e(Jf,wHe),e(Jf,RS),e(RS,AHe),e(Jf,LHe),e(A,yHe),e(A,Yf),e(Yf,aae),e(aae,xHe),e(Yf,$He),e(Yf,PS),e(PS,kHe),e(Yf,SHe),e(A,RHe),e(A,Kf),e(Kf,nae),e(nae,PHe),e(Kf,BHe),e(Kf,BS),e(BS,IHe),e(Kf,NHe),e(A,qHe),e(A,Zf),e(Zf,sae),e(sae,jHe),e(Zf,DHe),e(Zf,IS),e(IS,GHe),e(Zf,OHe),e(A,VHe),e(A,em),e(em,lae),e(lae,XHe),e(em,zHe),e(em,NS),e(NS,QHe),e(em,WHe),e(A,HHe),e(A,om),e(om,iae),e(iae,UHe),e(om,JHe),e(om,qS),e(qS,YHe),e(om,KHe),e(A,ZHe),e(A,rm),e(rm,dae),e(dae,eUe),e(rm,oUe),e(rm,jS),e(jS,rUe),e(rm,tUe),e(A,aUe),e(A,tm),e(tm,cae),e(cae,nUe),e(tm,sUe),e(tm,DS),e(DS,lUe),e(tm,iUe),e(A,dUe),e(A,am),e(am,fae),e(fae,cUe),e(am,fUe),e(am,GS),e(GS,mUe),e(am,gUe),e(A,hUe),e(A,nm),e(nm,mae),e(mae,pUe),e(nm,_Ue),e(nm,OS),e(OS,uUe),e(nm,bUe),e(A,vUe),e(A,sm),e(sm,gae),e(gae,FUe),e(sm,TUe),e(sm,VS),e(VS,MUe),e(sm,EUe),e(A,CUe),e(A,lm),e(lm,hae),e(hae,wUe),e(lm,AUe),e(lm,XS),e(XS,LUe),e(lm,yUe),e(A,xUe),e(A,im),e(im,pae),e(pae,$Ue),e(im,kUe),e(im,zS),e(zS,SUe),e(im,RUe),e(A,PUe),e(A,dm),e(dm,_ae),e(_ae,BUe),e(dm,IUe),e(dm,QS),e(QS,NUe),e(dm,qUe),e(A,jUe),e(A,cm),e(cm,uae),e(uae,DUe),e(cm,GUe),e(cm,WS),e(WS,OUe),e(cm,VUe),e(A,XUe),e(A,fm),e(fm,bae),e(bae,zUe),e(fm,QUe),e(fm,HS),e(HS,WUe),e(fm,HUe),e(A,UUe),e(A,mm),e(mm,vae),e(vae,JUe),e(mm,YUe),e(mm,US),e(US,KUe),e(mm,ZUe),e(A,eJe),e(A,gm),e(gm,Fae),e(Fae,oJe),e(gm,rJe),e(gm,JS),e(JS,tJe),e(gm,aJe),e(A,nJe),e(A,hm),e(hm,Tae),e(Tae,sJe),e(hm,lJe),e(hm,YS),e(YS,iJe),e(hm,dJe),e(A,cJe),e(A,pm),e(pm,Mae),e(Mae,fJe),e(pm,mJe),e(pm,KS),e(KS,gJe),e(pm,hJe),e(A,pJe),e(A,_m),e(_m,Eae),e(Eae,_Je),e(_m,uJe),e(_m,ZS),e(ZS,bJe),e(_m,vJe),e(A,FJe),e(A,um),e(um,Cae),e(Cae,TJe),e(um,MJe),e(um,eR),e(eR,EJe),e(um,CJe),e(A,wJe),e(A,bm),e(bm,wae),e(wae,AJe),e(bm,LJe),e(bm,oR),e(oR,yJe),e(bm,xJe),e(A,$Je),e(A,vm),e(vm,Aae),e(Aae,kJe),e(vm,SJe),e(vm,rR),e(rR,RJe),e(vm,PJe),e(A,BJe),e(A,Fm),e(Fm,Lae),e(Lae,IJe),e(Fm,NJe),e(Fm,tR),e(tR,qJe),e(Fm,jJe),e(A,DJe),e(A,Tm),e(Tm,yae),e(yae,GJe),e(Tm,OJe),e(Tm,aR),e(aR,VJe),e(Tm,XJe),e(A,zJe),e(A,Mm),e(Mm,xae),e(xae,QJe),e(Mm,WJe),e(Mm,nR),e(nR,HJe),e(Mm,UJe),e(A,JJe),e(A,Em),e(Em,$ae),e($ae,YJe),e(Em,KJe),e(Em,sR),e(sR,ZJe),e(Em,eYe),e(A,oYe),e(A,Cm),e(Cm,kae),e(kae,rYe),e(Cm,tYe),e(Cm,lR),e(lR,aYe),e(Cm,nYe),e(A,sYe),e(A,wm),e(wm,Sae),e(Sae,lYe),e(wm,iYe),e(wm,iR),e(iR,dYe),e(wm,cYe),e(A,fYe),e(A,Am),e(Am,Rae),e(Rae,mYe),e(Am,gYe),e(Am,dR),e(dR,hYe),e(Am,pYe),e(A,_Ye),e(A,Lm),e(Lm,Pae),e(Pae,uYe),e(Lm,bYe),e(Lm,cR),e(cR,vYe),e(Lm,FYe),e(A,TYe),e(A,ym),e(ym,Bae),e(Bae,MYe),e(ym,EYe),e(ym,fR),e(fR,CYe),e(ym,wYe),e(A,AYe),e(A,xm),e(xm,Iae),e(Iae,LYe),e(xm,yYe),e(xm,mR),e(mR,xYe),e(xm,$Ye),e(A,kYe),e(A,$m),e($m,Nae),e(Nae,SYe),e($m,RYe),e($m,gR),e(gR,PYe),e($m,BYe),e(A,IYe),e(A,km),e(km,qae),e(qae,NYe),e(km,qYe),e(km,hR),e(hR,jYe),e(km,DYe),e(A,GYe),e(A,Sm),e(Sm,jae),e(jae,OYe),e(Sm,VYe),e(Sm,pR),e(pR,XYe),e(Sm,zYe),e(A,QYe),e(A,Rm),e(Rm,Dae),e(Dae,WYe),e(Rm,HYe),e(Rm,_R),e(_R,UYe),e(Rm,JYe),e(A,YYe),e(A,Pm),e(Pm,Gae),e(Gae,KYe),e(Pm,ZYe),e(Pm,uR),e(uR,eKe),e(Pm,oKe),e(A,rKe),e(A,Bm),e(Bm,Oae),e(Oae,tKe),e(Bm,aKe),e(Bm,bR),e(bR,nKe),e(Bm,sKe),e(A,lKe),e(A,Im),e(Im,Vae),e(Vae,iKe),e(Im,dKe),e(Im,vR),e(vR,cKe),e(Im,fKe),e(A,mKe),e(A,Nm),e(Nm,Xae),e(Xae,gKe),e(Nm,hKe),e(Nm,FR),e(FR,pKe),e(Nm,_Ke),e(A,uKe),e(A,qm),e(qm,zae),e(zae,bKe),e(qm,vKe),e(qm,TR),e(TR,FKe),e(qm,TKe),e(A,MKe),e(A,jm),e(jm,Qae),e(Qae,EKe),e(jm,CKe),e(jm,MR),e(MR,wKe),e(jm,AKe),e(A,LKe),e(A,Dm),e(Dm,Wae),e(Wae,yKe),e(Dm,xKe),e(Dm,ER),e(ER,$Ke),e(Dm,kKe),e(A,SKe),e(A,Gm),e(Gm,Hae),e(Hae,RKe),e(Gm,PKe),e(Gm,CR),e(CR,BKe),e(Gm,IKe),e(A,NKe),e(A,Om),e(Om,Uae),e(Uae,qKe),e(Om,jKe),e(Om,wR),e(wR,DKe),e(Om,GKe),e(A,OKe),e(A,Vm),e(Vm,Jae),e(Jae,VKe),e(Vm,XKe),e(Vm,AR),e(AR,zKe),e(Vm,QKe),e(A,WKe),e(A,Xm),e(Xm,Yae),e(Yae,HKe),e(Xm,UKe),e(Xm,LR),e(LR,JKe),e(Xm,YKe),e(A,KKe),e(A,zm),e(zm,Kae),e(Kae,ZKe),e(zm,eZe),e(zm,yR),e(yR,oZe),e(zm,rZe),e(A,tZe),e(A,Qm),e(Qm,Zae),e(Zae,aZe),e(Qm,nZe),e(Qm,xR),e(xR,sZe),e(Qm,lZe),e(A,iZe),e(A,Wm),e(Wm,ene),e(ene,dZe),e(Wm,cZe),e(Wm,$R),e($R,fZe),e(Wm,mZe),e(A,gZe),e(A,Hm),e(Hm,one),e(one,hZe),e(Hm,pZe),e(Hm,kR),e(kR,_Ze),e(Hm,uZe),e(A,bZe),e(A,Um),e(Um,rne),e(rne,vZe),e(Um,FZe),e(Um,SR),e(SR,TZe),e(Um,MZe),e(A,EZe),e(A,Jm),e(Jm,tne),e(tne,CZe),e(Jm,wZe),e(Jm,RR),e(RR,AZe),e(Jm,LZe),e(A,yZe),e(A,Ym),e(Ym,ane),e(ane,xZe),e(Ym,$Ze),e(Ym,PR),e(PR,kZe),e(Ym,SZe),e(A,RZe),e(A,Km),e(Km,nne),e(nne,PZe),e(Km,BZe),e(Km,BR),e(BR,IZe),e(Km,NZe),e(A,qZe),e(A,Zm),e(Zm,sne),e(sne,jZe),e(Zm,DZe),e(Zm,IR),e(IR,GZe),e(Zm,OZe),e(A,VZe),e(A,eg),e(eg,lne),e(lne,XZe),e(eg,zZe),e(eg,NR),e(NR,QZe),e(eg,WZe),e(A,HZe),e(A,og),e(og,ine),e(ine,UZe),e(og,JZe),e(og,qR),e(qR,YZe),e(og,KZe),e(A,ZZe),e(A,rg),e(rg,dne),e(dne,eeo),e(rg,oeo),e(rg,jR),e(jR,reo),e(rg,teo),e(A,aeo),e(A,tg),e(tg,cne),e(cne,neo),e(tg,seo),e(tg,DR),e(DR,leo),e(tg,ieo),e(A,deo),e(A,ag),e(ag,fne),e(fne,ceo),e(ag,feo),e(ag,GR),e(GR,meo),e(ag,geo),e(A,heo),e(A,ng),e(ng,mne),e(mne,peo),e(ng,_eo),e(ng,OR),e(OR,ueo),e(ng,beo),e(A,veo),e(A,sg),e(sg,gne),e(gne,Feo),e(sg,Teo),e(sg,VR),e(VR,Meo),e(sg,Eeo),e(A,Ceo),e(A,lg),e(lg,hne),e(hne,weo),e(lg,Aeo),e(lg,XR),e(XR,Leo),e(lg,yeo),e(A,xeo),e(A,ig),e(ig,pne),e(pne,$eo),e(ig,keo),e(ig,zR),e(zR,Seo),e(ig,Reo),e(A,Peo),e(A,dg),e(dg,_ne),e(_ne,Beo),e(dg,Ieo),e(dg,QR),e(QR,Neo),e(dg,qeo),e(A,jeo),e(A,cg),e(cg,une),e(une,Deo),e(cg,Geo),e(cg,WR),e(WR,Oeo),e(cg,Veo),e(A,Xeo),e(A,fg),e(fg,bne),e(bne,zeo),e(fg,Qeo),e(fg,HR),e(HR,Weo),e(fg,Heo),e(A,Ueo),e(A,mg),e(mg,vne),e(vne,Jeo),e(mg,Yeo),e(mg,UR),e(UR,Keo),e(mg,Zeo),e(A,eoo),e(A,gg),e(gg,Fne),e(Fne,ooo),e(gg,roo),e(gg,JR),e(JR,too),e(gg,aoo),e(A,noo),e(A,hg),e(hg,Tne),e(Tne,soo),e(hg,loo),e(hg,YR),e(YR,ioo),e(hg,doo),e(A,coo),e(A,pg),e(pg,Mne),e(Mne,foo),e(pg,moo),e(pg,KR),e(KR,goo),e(pg,hoo),e(A,poo),e(A,_g),e(_g,Ene),e(Ene,_oo),e(_g,uoo),e(_g,ZR),e(ZR,boo),e(_g,voo),e(A,Foo),e(A,ug),e(ug,Cne),e(Cne,Too),e(ug,Moo),e(ug,eP),e(eP,Eoo),e(ug,Coo),e(A,woo),e(A,bg),e(bg,wne),e(wne,Aoo),e(bg,Loo),e(bg,oP),e(oP,yoo),e(bg,xoo),e(A,$oo),e(A,vg),e(vg,Ane),e(Ane,koo),e(vg,Soo),e(vg,rP),e(rP,Roo),e(vg,Poo),e(A,Boo),e(A,Fg),e(Fg,Lne),e(Lne,Ioo),e(Fg,Noo),e(Fg,tP),e(tP,qoo),e(Fg,joo),e(A,Doo),e(A,Tg),e(Tg,yne),e(yne,Goo),e(Tg,Ooo),e(Tg,aP),e(aP,Voo),e(Tg,Xoo),e(A,zoo),e(A,Mg),e(Mg,xne),e(xne,Qoo),e(Mg,Woo),e(Mg,nP),e(nP,Hoo),e(Mg,Uoo),e(A,Joo),e(A,Eg),e(Eg,$ne),e($ne,Yoo),e(Eg,Koo),e(Eg,sP),e(sP,Zoo),e(Eg,ero),e(A,oro),e(A,Cg),e(Cg,kne),e(kne,rro),e(Cg,tro),e(Cg,lP),e(lP,aro),e(Cg,nro),e(A,sro),e(A,wg),e(wg,Sne),e(Sne,lro),e(wg,iro),e(wg,iP),e(iP,dro),e(wg,cro),e(A,fro),e(A,Ag),e(Ag,Rne),e(Rne,mro),e(Ag,gro),e(Ag,dP),e(dP,hro),e(Ag,pro),e(A,_ro),e(A,Lg),e(Lg,Pne),e(Pne,uro),e(Lg,bro),e(Lg,cP),e(cP,vro),e(Lg,Fro),e(A,Tro),e(A,yg),e(yg,Bne),e(Bne,Mro),e(yg,Ero),e(yg,fP),e(fP,Cro),e(yg,wro),e(A,Aro),e(A,xg),e(xg,Ine),e(Ine,Lro),e(xg,yro),e(xg,mP),e(mP,xro),e(xg,$ro),e(A,kro),e(A,$g),e($g,Nne),e(Nne,Sro),e($g,Rro),e($g,gP),e(gP,Pro),e($g,Bro),e(A,Iro),e(A,kg),e(kg,qne),e(qne,Nro),e(kg,qro),e(kg,hP),e(hP,jro),e(kg,Dro),e(A,Gro),e(A,Sg),e(Sg,jne),e(jne,Oro),e(Sg,Vro),e(Sg,pP),e(pP,Xro),e(Sg,zro),e(A,Qro),e(A,Rg),e(Rg,Dne),e(Dne,Wro),e(Rg,Hro),e(Rg,_P),e(_P,Uro),e(Rg,Jro),e(A,Yro),e(A,Pg),e(Pg,Gne),e(Gne,Kro),e(Pg,Zro),e(Pg,uP),e(uP,eto),e(Pg,oto),e(A,rto),e(A,Bg),e(Bg,One),e(One,tto),e(Bg,ato),e(Bg,bP),e(bP,nto),e(Bg,sto),e(A,lto),e(A,Ig),e(Ig,Vne),e(Vne,ito),e(Ig,dto),e(Ig,vP),e(vP,cto),e(Ig,fto),e(A,mto),e(A,Ng),e(Ng,Xne),e(Xne,gto),e(Ng,hto),e(Ng,FP),e(FP,pto),e(Ng,_to),e(A,uto),e(A,qg),e(qg,zne),e(zne,bto),e(qg,vto),e(qg,TP),e(TP,Fto),e(qg,Tto),e(A,Mto),e(A,jg),e(jg,Qne),e(Qne,Eto),e(jg,Cto),e(jg,MP),e(MP,wto),e(jg,Ato),e(A,Lto),e(A,Dg),e(Dg,Wne),e(Wne,yto),e(Dg,xto),e(Dg,EP),e(EP,$to),e(Dg,kto),e(A,Sto),e(A,Gg),e(Gg,Hne),e(Hne,Rto),e(Gg,Pto),e(Gg,CP),e(CP,Bto),e(Gg,Ito),e(A,Nto),e(A,Og),e(Og,Une),e(Une,qto),e(Og,jto),e(Og,wP),e(wP,Dto),e(Og,Gto),e(A,Oto),e(A,Vg),e(Vg,Jne),e(Jne,Vto),e(Vg,Xto),e(Vg,AP),e(AP,zto),e(Vg,Qto),e(A,Wto),e(A,Xg),e(Xg,Yne),e(Yne,Hto),e(Xg,Uto),e(Xg,LP),e(LP,Jto),e(Xg,Yto),e(Ar,Kto),M(zg,Ar,null),e(wo,Zto),e(wo,Qg),M(zL,Qg,null),e(Qg,eao),e(Qg,Kne),e(Kne,oao),b(f,$Oe,u),b(f,Ri,u),e(Ri,Wg),e(Wg,Zne),M(QL,Zne,null),e(Ri,rao),e(Ri,ese),e(ese,tao),b(f,kOe,u),b(f,Ao,u),M(WL,Ao,null),e(Ao,aao),e(Ao,HL),e(HL,nao),e(HL,yP),e(yP,sao),e(HL,lao),e(Ao,iao),e(Ao,UL),e(UL,dao),e(UL,ose),e(ose,cao),e(UL,fao),e(Ao,mao),e(Ao,Lr),M(JL,Lr,null),e(Lr,gao),e(Lr,rse),e(rse,hao),e(Lr,pao),e(Lr,ka),e(ka,_ao),e(ka,tse),e(tse,uao),e(ka,bao),e(ka,ase),e(ase,vao),e(ka,Fao),e(ka,nse),e(nse,Tao),e(ka,Mao),e(Lr,Eao),e(Lr,k),e(k,qn),e(qn,sse),e(sse,Cao),e(qn,wao),e(qn,xP),e(xP,Aao),e(qn,Lao),e(qn,$P),e($P,yao),e(qn,xao),e(k,$ao),e(k,jn),e(jn,lse),e(lse,kao),e(jn,Sao),e(jn,kP),e(kP,Rao),e(jn,Pao),e(jn,SP),e(SP,Bao),e(jn,Iao),e(k,Nao),e(k,Dn),e(Dn,ise),e(ise,qao),e(Dn,jao),e(Dn,RP),e(RP,Dao),e(Dn,Gao),e(Dn,PP),e(PP,Oao),e(Dn,Vao),e(k,Xao),e(k,Hg),e(Hg,dse),e(dse,zao),e(Hg,Qao),e(Hg,BP),e(BP,Wao),e(Hg,Hao),e(k,Uao),e(k,Gn),e(Gn,cse),e(cse,Jao),e(Gn,Yao),e(Gn,IP),e(IP,Kao),e(Gn,Zao),e(Gn,NP),e(NP,eno),e(Gn,ono),e(k,rno),e(k,Ug),e(Ug,fse),e(fse,tno),e(Ug,ano),e(Ug,qP),e(qP,nno),e(Ug,sno),e(k,lno),e(k,Jg),e(Jg,mse),e(mse,ino),e(Jg,dno),e(Jg,jP),e(jP,cno),e(Jg,fno),e(k,mno),e(k,Yg),e(Yg,gse),e(gse,gno),e(Yg,hno),e(Yg,DP),e(DP,pno),e(Yg,_no),e(k,uno),e(k,On),e(On,hse),e(hse,bno),e(On,vno),e(On,GP),e(GP,Fno),e(On,Tno),e(On,OP),e(OP,Mno),e(On,Eno),e(k,Cno),e(k,Vn),e(Vn,pse),e(pse,wno),e(Vn,Ano),e(Vn,VP),e(VP,Lno),e(Vn,yno),e(Vn,XP),e(XP,xno),e(Vn,$no),e(k,kno),e(k,Xn),e(Xn,_se),e(_se,Sno),e(Xn,Rno),e(Xn,zP),e(zP,Pno),e(Xn,Bno),e(Xn,QP),e(QP,Ino),e(Xn,Nno),e(k,qno),e(k,Kg),e(Kg,use),e(use,jno),e(Kg,Dno),e(Kg,WP),e(WP,Gno),e(Kg,Ono),e(k,Vno),e(k,Zg),e(Zg,bse),e(bse,Xno),e(Zg,zno),e(Zg,HP),e(HP,Qno),e(Zg,Wno),e(k,Hno),e(k,eh),e(eh,vse),e(vse,Uno),e(eh,Jno),e(eh,UP),e(UP,Yno),e(eh,Kno),e(k,Zno),e(k,zn),e(zn,Fse),e(Fse,eso),e(zn,oso),e(zn,JP),e(JP,rso),e(zn,tso),e(zn,YP),e(YP,aso),e(zn,nso),e(k,sso),e(k,oh),e(oh,Tse),e(Tse,lso),e(oh,iso),e(oh,KP),e(KP,dso),e(oh,cso),e(k,fso),e(k,Qn),e(Qn,Mse),e(Mse,mso),e(Qn,gso),e(Qn,ZP),e(ZP,hso),e(Qn,pso),e(Qn,eB),e(eB,_so),e(Qn,uso),e(k,bso),e(k,Wn),e(Wn,Ese),e(Ese,vso),e(Wn,Fso),e(Wn,oB),e(oB,Tso),e(Wn,Mso),e(Wn,rB),e(rB,Eso),e(Wn,Cso),e(k,wso),e(k,Hn),e(Hn,Cse),e(Cse,Aso),e(Hn,Lso),e(Hn,tB),e(tB,yso),e(Hn,xso),e(Hn,aB),e(aB,$so),e(Hn,kso),e(k,Sso),e(k,Un),e(Un,wse),e(wse,Rso),e(Un,Pso),e(Un,nB),e(nB,Bso),e(Un,Iso),e(Un,sB),e(sB,Nso),e(Un,qso),e(k,jso),e(k,rh),e(rh,Ase),e(Ase,Dso),e(rh,Gso),e(rh,lB),e(lB,Oso),e(rh,Vso),e(k,Xso),e(k,Jn),e(Jn,Lse),e(Lse,zso),e(Jn,Qso),e(Jn,iB),e(iB,Wso),e(Jn,Hso),e(Jn,dB),e(dB,Uso),e(Jn,Jso),e(k,Yso),e(k,Yn),e(Yn,yse),e(yse,Kso),e(Yn,Zso),e(Yn,cB),e(cB,elo),e(Yn,olo),e(Yn,fB),e(fB,rlo),e(Yn,tlo),e(k,alo),e(k,Kn),e(Kn,xse),e(xse,nlo),e(Kn,slo),e(Kn,mB),e(mB,llo),e(Kn,ilo),e(Kn,gB),e(gB,dlo),e(Kn,clo),e(k,flo),e(k,Zn),e(Zn,$se),e($se,mlo),e(Zn,glo),e(Zn,hB),e(hB,hlo),e(Zn,plo),e(Zn,pB),e(pB,_lo),e(Zn,ulo),e(k,blo),e(k,es),e(es,kse),e(kse,vlo),e(es,Flo),e(es,_B),e(_B,Tlo),e(es,Mlo),e(es,uB),e(uB,Elo),e(es,Clo),e(k,wlo),e(k,os),e(os,Sse),e(Sse,Alo),e(os,Llo),e(os,bB),e(bB,ylo),e(os,xlo),e(os,vB),e(vB,$lo),e(os,klo),e(k,Slo),e(k,th),e(th,Rse),e(Rse,Rlo),e(th,Plo),e(th,FB),e(FB,Blo),e(th,Ilo),e(k,Nlo),e(k,rs),e(rs,Pse),e(Pse,qlo),e(rs,jlo),e(rs,TB),e(TB,Dlo),e(rs,Glo),e(rs,MB),e(MB,Olo),e(rs,Vlo),e(k,Xlo),e(k,ah),e(ah,Bse),e(Bse,zlo),e(ah,Qlo),e(ah,EB),e(EB,Wlo),e(ah,Hlo),e(k,Ulo),e(k,ts),e(ts,Ise),e(Ise,Jlo),e(ts,Ylo),e(ts,CB),e(CB,Klo),e(ts,Zlo),e(ts,wB),e(wB,eio),e(ts,oio),e(k,rio),e(k,as),e(as,Nse),e(Nse,tio),e(as,aio),e(as,AB),e(AB,nio),e(as,sio),e(as,LB),e(LB,lio),e(as,iio),e(k,dio),e(k,ns),e(ns,qse),e(qse,cio),e(ns,fio),e(ns,yB),e(yB,mio),e(ns,gio),e(ns,xB),e(xB,hio),e(ns,pio),e(k,_io),e(k,nh),e(nh,jse),e(jse,uio),e(nh,bio),e(nh,$B),e($B,vio),e(nh,Fio),e(k,Tio),e(k,ss),e(ss,Dse),e(Dse,Mio),e(ss,Eio),e(ss,kB),e(kB,Cio),e(ss,wio),e(ss,SB),e(SB,Aio),e(ss,Lio),e(k,yio),e(k,ls),e(ls,Gse),e(Gse,xio),e(ls,$io),e(ls,RB),e(RB,kio),e(ls,Sio),e(ls,PB),e(PB,Rio),e(ls,Pio),e(k,Bio),e(k,is),e(is,Ose),e(Ose,Iio),e(is,Nio),e(is,BB),e(BB,qio),e(is,jio),e(is,IB),e(IB,Dio),e(is,Gio),e(k,Oio),e(k,sh),e(sh,Vse),e(Vse,Vio),e(sh,Xio),e(sh,NB),e(NB,zio),e(sh,Qio),e(k,Wio),e(k,ds),e(ds,Xse),e(Xse,Hio),e(ds,Uio),e(ds,qB),e(qB,Jio),e(ds,Yio),e(ds,jB),e(jB,Kio),e(ds,Zio),e(k,edo),e(k,cs),e(cs,zse),e(zse,odo),e(cs,rdo),e(cs,DB),e(DB,tdo),e(cs,ado),e(cs,GB),e(GB,ndo),e(cs,sdo),e(k,ldo),e(k,fs),e(fs,Qse),e(Qse,ido),e(fs,ddo),e(fs,OB),e(OB,cdo),e(fs,fdo),e(fs,VB),e(VB,mdo),e(fs,gdo),e(k,hdo),e(k,ms),e(ms,Wse),e(Wse,pdo),e(ms,_do),e(ms,XB),e(XB,udo),e(ms,bdo),e(ms,zB),e(zB,vdo),e(ms,Fdo),e(k,Tdo),e(k,gs),e(gs,Hse),e(Hse,Mdo),e(gs,Edo),e(gs,QB),e(QB,Cdo),e(gs,wdo),e(gs,WB),e(WB,Ado),e(gs,Ldo),e(k,ydo),e(k,hs),e(hs,Use),e(Use,xdo),e(hs,$do),e(hs,HB),e(HB,kdo),e(hs,Sdo),e(hs,UB),e(UB,Rdo),e(hs,Pdo),e(k,Bdo),e(k,ps),e(ps,Jse),e(Jse,Ido),e(ps,Ndo),e(ps,JB),e(JB,qdo),e(ps,jdo),e(ps,YB),e(YB,Ddo),e(ps,Gdo),e(k,Odo),e(k,_s),e(_s,Yse),e(Yse,Vdo),e(_s,Xdo),e(_s,KB),e(KB,zdo),e(_s,Qdo),e(_s,ZB),e(ZB,Wdo),e(_s,Hdo),e(k,Udo),e(k,lh),e(lh,Kse),e(Kse,Jdo),e(lh,Ydo),e(lh,eI),e(eI,Kdo),e(lh,Zdo),e(k,eco),e(k,us),e(us,Zse),e(Zse,oco),e(us,rco),e(us,oI),e(oI,tco),e(us,aco),e(us,rI),e(rI,nco),e(us,sco),e(k,lco),e(k,ih),e(ih,ele),e(ele,ico),e(ih,dco),e(ih,tI),e(tI,cco),e(ih,fco),e(k,mco),e(k,dh),e(dh,ole),e(ole,gco),e(dh,hco),e(dh,aI),e(aI,pco),e(dh,_co),e(k,uco),e(k,bs),e(bs,rle),e(rle,bco),e(bs,vco),e(bs,nI),e(nI,Fco),e(bs,Tco),e(bs,sI),e(sI,Mco),e(bs,Eco),e(k,Cco),e(k,vs),e(vs,tle),e(tle,wco),e(vs,Aco),e(vs,lI),e(lI,Lco),e(vs,yco),e(vs,iI),e(iI,xco),e(vs,$co),e(k,kco),e(k,Fs),e(Fs,ale),e(ale,Sco),e(Fs,Rco),e(Fs,dI),e(dI,Pco),e(Fs,Bco),e(Fs,cI),e(cI,Ico),e(Fs,Nco),e(k,qco),e(k,ch),e(ch,nle),e(nle,jco),e(ch,Dco),e(ch,fI),e(fI,Gco),e(ch,Oco),e(k,Vco),e(k,Ts),e(Ts,sle),e(sle,Xco),e(Ts,zco),e(Ts,mI),e(mI,Qco),e(Ts,Wco),e(Ts,gI),e(gI,Hco),e(Ts,Uco),e(k,Jco),e(k,Ms),e(Ms,lle),e(lle,Yco),e(Ms,Kco),e(Ms,hI),e(hI,Zco),e(Ms,efo),e(Ms,pI),e(pI,ofo),e(Ms,rfo),e(k,tfo),e(k,Es),e(Es,ile),e(ile,afo),e(Es,nfo),e(Es,_I),e(_I,sfo),e(Es,lfo),e(Es,uI),e(uI,ifo),e(Es,dfo),e(k,cfo),e(k,Cs),e(Cs,dle),e(dle,ffo),e(Cs,mfo),e(Cs,bI),e(bI,gfo),e(Cs,hfo),e(Cs,vI),e(vI,pfo),e(Cs,_fo),e(k,ufo),e(k,ws),e(ws,cle),e(cle,bfo),e(ws,vfo),e(ws,FI),e(FI,Ffo),e(ws,Tfo),e(ws,TI),e(TI,Mfo),e(ws,Efo),e(k,Cfo),e(k,As),e(As,fle),e(fle,wfo),e(As,Afo),e(As,MI),e(MI,Lfo),e(As,yfo),e(As,EI),e(EI,xfo),e(As,$fo),e(k,kfo),e(k,fh),e(fh,mle),e(mle,Sfo),e(fh,Rfo),e(fh,CI),e(CI,Pfo),e(fh,Bfo),e(k,Ifo),e(k,Ls),e(Ls,gle),e(gle,Nfo),e(Ls,qfo),e(Ls,wI),e(wI,jfo),e(Ls,Dfo),e(Ls,AI),e(AI,Gfo),e(Ls,Ofo),e(k,Vfo),e(k,mh),e(mh,hle),e(hle,Xfo),e(mh,zfo),e(mh,LI),e(LI,Qfo),e(mh,Wfo),e(k,Hfo),e(k,gh),e(gh,ple),e(ple,Ufo),e(gh,Jfo),e(gh,yI),e(yI,Yfo),e(gh,Kfo),e(k,Zfo),e(k,hh),e(hh,_le),e(_le,emo),e(hh,omo),e(hh,xI),e(xI,rmo),e(hh,tmo),e(k,amo),e(k,ph),e(ph,ule),e(ule,nmo),e(ph,smo),e(ph,$I),e($I,lmo),e(ph,imo),e(k,dmo),e(k,ys),e(ys,ble),e(ble,cmo),e(ys,fmo),e(ys,kI),e(kI,mmo),e(ys,gmo),e(ys,SI),e(SI,hmo),e(ys,pmo),e(k,_mo),e(k,_h),e(_h,vle),e(vle,umo),e(_h,bmo),e(_h,RI),e(RI,vmo),e(_h,Fmo),e(k,Tmo),e(k,xs),e(xs,Fle),e(Fle,Mmo),e(xs,Emo),e(xs,PI),e(PI,Cmo),e(xs,wmo),e(xs,BI),e(BI,Amo),e(xs,Lmo),e(k,ymo),e(k,$s),e($s,Tle),e(Tle,xmo),e($s,$mo),e($s,II),e(II,kmo),e($s,Smo),e($s,NI),e(NI,Rmo),e($s,Pmo),e(k,Bmo),e(k,ks),e(ks,Mle),e(Mle,Imo),e(ks,Nmo),e(ks,qI),e(qI,qmo),e(ks,jmo),e(ks,jI),e(jI,Dmo),e(ks,Gmo),e(k,Omo),e(k,Ss),e(Ss,Ele),e(Ele,Vmo),e(Ss,Xmo),e(Ss,DI),e(DI,zmo),e(Ss,Qmo),e(Ss,GI),e(GI,Wmo),e(Ss,Hmo),e(k,Umo),e(k,Rs),e(Rs,Cle),e(Cle,Jmo),e(Rs,Ymo),e(Rs,OI),e(OI,Kmo),e(Rs,Zmo),e(Rs,VI),e(VI,ego),e(Rs,ogo),e(k,rgo),e(k,Ps),e(Ps,wle),e(wle,tgo),e(Ps,ago),e(Ps,XI),e(XI,ngo),e(Ps,sgo),e(Ps,zI),e(zI,lgo),e(Ps,igo),e(k,dgo),e(k,uh),e(uh,Ale),e(Ale,cgo),e(uh,fgo),e(uh,QI),e(QI,mgo),e(uh,ggo),e(k,hgo),e(k,bh),e(bh,Lle),e(Lle,pgo),e(bh,_go),e(bh,WI),e(WI,ugo),e(bh,bgo),e(k,vgo),e(k,Bs),e(Bs,yle),e(yle,Fgo),e(Bs,Tgo),e(Bs,HI),e(HI,Mgo),e(Bs,Ego),e(Bs,UI),e(UI,Cgo),e(Bs,wgo),e(k,Ago),e(k,Is),e(Is,xle),e(xle,Lgo),e(Is,ygo),e(Is,JI),e(JI,xgo),e(Is,$go),e(Is,YI),e(YI,kgo),e(Is,Sgo),e(k,Rgo),e(k,Ns),e(Ns,$le),e($le,Pgo),e(Ns,Bgo),e(Ns,KI),e(KI,Igo),e(Ns,Ngo),e(Ns,ZI),e(ZI,qgo),e(Ns,jgo),e(k,Dgo),e(k,vh),e(vh,kle),e(kle,Ggo),e(vh,Ogo),e(vh,eN),e(eN,Vgo),e(vh,Xgo),e(k,zgo),e(k,Fh),e(Fh,Sle),e(Sle,Qgo),e(Fh,Wgo),e(Fh,oN),e(oN,Hgo),e(Fh,Ugo),e(k,Jgo),e(k,Th),e(Th,Rle),e(Rle,Ygo),e(Th,Kgo),e(Th,rN),e(rN,Zgo),e(Th,eho),e(k,oho),e(k,qs),e(qs,Ple),e(Ple,rho),e(qs,tho),e(qs,tN),e(tN,aho),e(qs,nho),e(qs,aN),e(aN,sho),e(qs,lho),e(k,iho),e(k,js),e(js,Ble),e(Ble,dho),e(js,cho),e(js,nN),e(nN,fho),e(js,mho),e(js,sN),e(sN,gho),e(js,hho),e(k,pho),e(k,Mh),e(Mh,Ile),e(Ile,_ho),e(Mh,uho),e(Mh,lN),e(lN,bho),e(Mh,vho),e(k,Fho),e(k,Eh),e(Eh,Nle),e(Nle,Tho),e(Eh,Mho),e(Eh,iN),e(iN,Eho),e(Eh,Cho),e(k,who),e(k,Ch),e(Ch,qle),e(qle,Aho),e(Ch,Lho),e(Ch,dN),e(dN,yho),e(Ch,xho),e(k,$ho),e(k,Ds),e(Ds,jle),e(jle,kho),e(Ds,Sho),e(Ds,cN),e(cN,Rho),e(Ds,Pho),e(Ds,fN),e(fN,Bho),e(Ds,Iho),e(k,Nho),e(k,wh),e(wh,Dle),e(Dle,qho),e(wh,jho),e(wh,mN),e(mN,Dho),e(wh,Gho),e(k,Oho),e(k,Ah),e(Ah,Gle),e(Gle,Vho),e(Ah,Xho),e(Ah,gN),e(gN,zho),e(Ah,Qho),e(k,Who),e(k,Gs),e(Gs,Ole),e(Ole,Hho),e(Gs,Uho),e(Gs,hN),e(hN,Jho),e(Gs,Yho),e(Gs,pN),e(pN,Kho),e(Gs,Zho),e(k,epo),e(k,Os),e(Os,Vle),e(Vle,opo),e(Os,rpo),e(Os,_N),e(_N,tpo),e(Os,apo),e(Os,uN),e(uN,npo),e(Os,spo),e(k,lpo),e(k,Vs),e(Vs,Xle),e(Xle,ipo),e(Vs,dpo),e(Vs,bN),e(bN,cpo),e(Vs,fpo),e(Vs,vN),e(vN,mpo),e(Vs,gpo),e(k,hpo),e(k,Xs),e(Xs,zle),e(zle,ppo),e(Xs,_po),e(Xs,FN),e(FN,upo),e(Xs,bpo),e(Xs,TN),e(TN,vpo),e(Xs,Fpo),e(Lr,Tpo),M(Lh,Lr,null),e(Ao,Mpo),e(Ao,yh),M(YL,yh,null),e(yh,Epo),e(yh,Qle),e(Qle,Cpo),b(f,SOe,u),b(f,Pi,u),e(Pi,xh),e(xh,Wle),M(KL,Wle,null),e(Pi,wpo),e(Pi,Hle),e(Hle,Apo),b(f,ROe,u),b(f,Lo,u),M(ZL,Lo,null),e(Lo,Lpo),e(Lo,ey),e(ey,ypo),e(ey,MN),e(MN,xpo),e(ey,$po),e(Lo,kpo),e(Lo,oy),e(oy,Spo),e(oy,Ule),e(Ule,Rpo),e(oy,Ppo),e(Lo,Bpo),e(Lo,He),M(ry,He,null),e(He,Ipo),e(He,Jle),e(Jle,Npo),e(He,qpo),e(He,Sa),e(Sa,jpo),e(Sa,Yle),e(Yle,Dpo),e(Sa,Gpo),e(Sa,Kle),e(Kle,Opo),e(Sa,Vpo),e(Sa,Zle),e(Zle,Xpo),e(Sa,zpo),e(He,Qpo),e(He,Y),e(Y,$h),e($h,eie),e(eie,Wpo),e($h,Hpo),e($h,EN),e(EN,Upo),e($h,Jpo),e(Y,Ypo),e(Y,kh),e(kh,oie),e(oie,Kpo),e(kh,Zpo),e(kh,CN),e(CN,e_o),e(kh,o_o),e(Y,r_o),e(Y,Sh),e(Sh,rie),e(rie,t_o),e(Sh,a_o),e(Sh,wN),e(wN,n_o),e(Sh,s_o),e(Y,l_o),e(Y,Rh),e(Rh,tie),e(tie,i_o),e(Rh,d_o),e(Rh,AN),e(AN,c_o),e(Rh,f_o),e(Y,m_o),e(Y,Ph),e(Ph,aie),e(aie,g_o),e(Ph,h_o),e(Ph,LN),e(LN,p_o),e(Ph,__o),e(Y,u_o),e(Y,Bh),e(Bh,nie),e(nie,b_o),e(Bh,v_o),e(Bh,yN),e(yN,F_o),e(Bh,T_o),e(Y,M_o),e(Y,Ih),e(Ih,sie),e(sie,E_o),e(Ih,C_o),e(Ih,xN),e(xN,w_o),e(Ih,A_o),e(Y,L_o),e(Y,Nh),e(Nh,lie),e(lie,y_o),e(Nh,x_o),e(Nh,$N),e($N,$_o),e(Nh,k_o),e(Y,S_o),e(Y,qh),e(qh,iie),e(iie,R_o),e(qh,P_o),e(qh,kN),e(kN,B_o),e(qh,I_o),e(Y,N_o),e(Y,jh),e(jh,die),e(die,q_o),e(jh,j_o),e(jh,SN),e(SN,D_o),e(jh,G_o),e(Y,O_o),e(Y,Dh),e(Dh,cie),e(cie,V_o),e(Dh,X_o),e(Dh,RN),e(RN,z_o),e(Dh,Q_o),e(Y,W_o),e(Y,Gh),e(Gh,fie),e(fie,H_o),e(Gh,U_o),e(Gh,PN),e(PN,J_o),e(Gh,Y_o),e(Y,K_o),e(Y,Oh),e(Oh,mie),e(mie,Z_o),e(Oh,euo),e(Oh,BN),e(BN,ouo),e(Oh,ruo),e(Y,tuo),e(Y,Vh),e(Vh,gie),e(gie,auo),e(Vh,nuo),e(Vh,IN),e(IN,suo),e(Vh,luo),e(Y,iuo),e(Y,Xh),e(Xh,hie),e(hie,duo),e(Xh,cuo),e(Xh,NN),e(NN,fuo),e(Xh,muo),e(Y,guo),e(Y,zh),e(zh,pie),e(pie,huo),e(zh,puo),e(zh,qN),e(qN,_uo),e(zh,uuo),e(Y,buo),e(Y,Qh),e(Qh,_ie),e(_ie,vuo),e(Qh,Fuo),e(Qh,jN),e(jN,Tuo),e(Qh,Muo),e(Y,Euo),e(Y,Wh),e(Wh,uie),e(uie,Cuo),e(Wh,wuo),e(Wh,DN),e(DN,Auo),e(Wh,Luo),e(Y,yuo),e(Y,Hh),e(Hh,bie),e(bie,xuo),e(Hh,$uo),e(Hh,GN),e(GN,kuo),e(Hh,Suo),e(Y,Ruo),e(Y,Uh),e(Uh,vie),e(vie,Puo),e(Uh,Buo),e(Uh,ON),e(ON,Iuo),e(Uh,Nuo),e(Y,quo),e(Y,Jh),e(Jh,Fie),e(Fie,juo),e(Jh,Duo),e(Jh,VN),e(VN,Guo),e(Jh,Ouo),e(Y,Vuo),e(Y,Yh),e(Yh,Tie),e(Tie,Xuo),e(Yh,zuo),e(Yh,XN),e(XN,Quo),e(Yh,Wuo),e(Y,Huo),e(Y,Kh),e(Kh,Mie),e(Mie,Uuo),e(Kh,Juo),e(Kh,zN),e(zN,Yuo),e(Kh,Kuo),e(Y,Zuo),e(Y,Zh),e(Zh,Eie),e(Eie,e1o),e(Zh,o1o),e(Zh,QN),e(QN,r1o),e(Zh,t1o),e(Y,a1o),e(Y,ep),e(ep,Cie),e(Cie,n1o),e(ep,s1o),e(ep,WN),e(WN,l1o),e(ep,i1o),e(Y,d1o),e(Y,op),e(op,wie),e(wie,c1o),e(op,f1o),e(op,HN),e(HN,m1o),e(op,g1o),e(Y,h1o),e(Y,rp),e(rp,Aie),e(Aie,p1o),e(rp,_1o),e(rp,UN),e(UN,u1o),e(rp,b1o),e(Y,v1o),e(Y,tp),e(tp,Lie),e(Lie,F1o),e(tp,T1o),e(tp,JN),e(JN,M1o),e(tp,E1o),e(Y,C1o),e(Y,ap),e(ap,yie),e(yie,w1o),e(ap,A1o),e(ap,YN),e(YN,L1o),e(ap,y1o),e(Y,x1o),e(Y,np),e(np,xie),e(xie,$1o),e(np,k1o),e(np,KN),e(KN,S1o),e(np,R1o),e(Y,P1o),e(Y,sp),e(sp,$ie),e($ie,B1o),e(sp,I1o),e(sp,ZN),e(ZN,N1o),e(sp,q1o),e(Y,j1o),e(Y,lp),e(lp,kie),e(kie,D1o),e(lp,G1o),e(lp,eq),e(eq,O1o),e(lp,V1o),e(Y,X1o),e(Y,ip),e(ip,Sie),e(Sie,z1o),e(ip,Q1o),e(ip,oq),e(oq,W1o),e(ip,H1o),e(He,U1o),M(dp,He,null),e(He,J1o),M(cp,He,null),e(Lo,Y1o),e(Lo,fp),M(ty,fp,null),e(fp,K1o),e(fp,Rie),e(Rie,Z1o),b(f,POe,u),b(f,Bi,u),e(Bi,mp),e(mp,Pie),M(ay,Pie,null),e(Bi,e7o),e(Bi,Bie),e(Bie,o7o),b(f,BOe,u),b(f,yo,u),M(ny,yo,null),e(yo,r7o),e(yo,sy),e(sy,t7o),e(sy,rq),e(rq,a7o),e(sy,n7o),e(yo,s7o),e(yo,ly),e(ly,l7o),e(ly,Iie),e(Iie,i7o),e(ly,d7o),e(yo,c7o),e(yo,Ue),M(iy,Ue,null),e(Ue,f7o),e(Ue,Nie),e(Nie,m7o),e(Ue,g7o),e(Ue,Ii),e(Ii,h7o),e(Ii,qie),e(qie,p7o),e(Ii,_7o),e(Ii,jie),e(jie,u7o),e(Ii,b7o),e(Ue,v7o),e(Ue,he),e(he,gp),e(gp,Die),e(Die,F7o),e(gp,T7o),e(gp,tq),e(tq,M7o),e(gp,E7o),e(he,C7o),e(he,hp),e(hp,Gie),e(Gie,w7o),e(hp,A7o),e(hp,Oie),e(Oie,L7o),e(hp,y7o),e(he,x7o),e(he,pp),e(pp,Vie),e(Vie,$7o),e(pp,k7o),e(pp,aq),e(aq,S7o),e(pp,R7o),e(he,P7o),e(he,_p),e(_p,Xie),e(Xie,B7o),e(_p,I7o),e(_p,nq),e(nq,N7o),e(_p,q7o),e(he,j7o),e(he,up),e(up,zie),e(zie,D7o),e(up,G7o),e(up,sq),e(sq,O7o),e(up,V7o),e(he,X7o),e(he,bp),e(bp,Qie),e(Qie,z7o),e(bp,Q7o),e(bp,lq),e(lq,W7o),e(bp,H7o),e(he,U7o),e(he,vp),e(vp,Wie),e(Wie,J7o),e(vp,Y7o),e(vp,iq),e(iq,K7o),e(vp,Z7o),e(he,e2o),e(he,Fp),e(Fp,Hie),e(Hie,o2o),e(Fp,r2o),e(Fp,dq),e(dq,t2o),e(Fp,a2o),e(he,n2o),e(he,Tp),e(Tp,Uie),e(Uie,s2o),e(Tp,l2o),e(Tp,cq),e(cq,i2o),e(Tp,d2o),e(he,c2o),e(he,Mp),e(Mp,Jie),e(Jie,f2o),e(Mp,m2o),e(Mp,fq),e(fq,g2o),e(Mp,h2o),e(he,p2o),e(he,Ep),e(Ep,Yie),e(Yie,_2o),e(Ep,u2o),e(Ep,mq),e(mq,b2o),e(Ep,v2o),e(he,F2o),e(he,Cp),e(Cp,Kie),e(Kie,T2o),e(Cp,M2o),e(Cp,gq),e(gq,E2o),e(Cp,C2o),e(he,w2o),e(he,wp),e(wp,Zie),e(Zie,A2o),e(wp,L2o),e(wp,hq),e(hq,y2o),e(wp,x2o),e(he,$2o),e(he,Ap),e(Ap,ede),e(ede,k2o),e(Ap,S2o),e(Ap,pq),e(pq,R2o),e(Ap,P2o),e(he,B2o),e(he,Lp),e(Lp,ode),e(ode,I2o),e(Lp,N2o),e(Lp,_q),e(_q,q2o),e(Lp,j2o),e(he,D2o),e(he,yp),e(yp,rde),e(rde,G2o),e(yp,O2o),e(yp,uq),e(uq,V2o),e(yp,X2o),e(he,z2o),e(he,xp),e(xp,tde),e(tde,Q2o),e(xp,W2o),e(xp,bq),e(bq,H2o),e(xp,U2o),e(he,J2o),e(he,$p),e($p,ade),e(ade,Y2o),e($p,K2o),e($p,vq),e(vq,Z2o),e($p,ebo),e(Ue,obo),M(kp,Ue,null),e(Ue,rbo),M(Sp,Ue,null),e(yo,tbo),e(yo,Rp),M(dy,Rp,null),e(Rp,abo),e(Rp,nde),e(nde,nbo),b(f,IOe,u),b(f,Ni,u),e(Ni,Pp),e(Pp,sde),M(cy,sde,null),e(Ni,sbo),e(Ni,lde),e(lde,lbo),b(f,NOe,u),b(f,xo,u),M(fy,xo,null),e(xo,ibo),e(xo,qi),e(qi,dbo),e(qi,Fq),e(Fq,cbo),e(qi,fbo),e(qi,Tq),e(Tq,mbo),e(qi,gbo),e(xo,hbo),e(xo,my),e(my,pbo),e(my,ide),e(ide,_bo),e(my,ubo),e(xo,bbo),e(xo,nt),M(gy,nt,null),e(nt,vbo),e(nt,dde),e(dde,Fbo),e(nt,Tbo),e(nt,ji),e(ji,Mbo),e(ji,cde),e(cde,Ebo),e(ji,Cbo),e(ji,Mq),e(Mq,wbo),e(ji,Abo),e(nt,Lbo),M(Bp,nt,null),e(xo,ybo),e(xo,Je),M(hy,Je,null),e(Je,xbo),e(Je,fde),e(fde,$bo),e(Je,kbo),e(Je,Ra),e(Ra,Sbo),e(Ra,mde),e(mde,Rbo),e(Ra,Pbo),e(Ra,gde),e(gde,Bbo),e(Ra,Ibo),e(Ra,hde),e(hde,Nbo),e(Ra,qbo),e(Je,jbo),e(Je,y),e(y,Ip),e(Ip,pde),e(pde,Dbo),e(Ip,Gbo),e(Ip,Eq),e(Eq,Obo),e(Ip,Vbo),e(y,Xbo),e(y,Np),e(Np,_de),e(_de,zbo),e(Np,Qbo),e(Np,Cq),e(Cq,Wbo),e(Np,Hbo),e(y,Ubo),e(y,qp),e(qp,ude),e(ude,Jbo),e(qp,Ybo),e(qp,wq),e(wq,Kbo),e(qp,Zbo),e(y,e4o),e(y,jp),e(jp,bde),e(bde,o4o),e(jp,r4o),e(jp,Aq),e(Aq,t4o),e(jp,a4o),e(y,n4o),e(y,Dp),e(Dp,vde),e(vde,s4o),e(Dp,l4o),e(Dp,Lq),e(Lq,i4o),e(Dp,d4o),e(y,c4o),e(y,Gp),e(Gp,Fde),e(Fde,f4o),e(Gp,m4o),e(Gp,yq),e(yq,g4o),e(Gp,h4o),e(y,p4o),e(y,Op),e(Op,Tde),e(Tde,_4o),e(Op,u4o),e(Op,xq),e(xq,b4o),e(Op,v4o),e(y,F4o),e(y,Vp),e(Vp,Mde),e(Mde,T4o),e(Vp,M4o),e(Vp,$q),e($q,E4o),e(Vp,C4o),e(y,w4o),e(y,Xp),e(Xp,Ede),e(Ede,A4o),e(Xp,L4o),e(Xp,kq),e(kq,y4o),e(Xp,x4o),e(y,$4o),e(y,zp),e(zp,Cde),e(Cde,k4o),e(zp,S4o),e(zp,Sq),e(Sq,R4o),e(zp,P4o),e(y,B4o),e(y,Qp),e(Qp,wde),e(wde,I4o),e(Qp,N4o),e(Qp,Rq),e(Rq,q4o),e(Qp,j4o),e(y,D4o),e(y,Wp),e(Wp,Ade),e(Ade,G4o),e(Wp,O4o),e(Wp,Pq),e(Pq,V4o),e(Wp,X4o),e(y,z4o),e(y,Hp),e(Hp,Lde),e(Lde,Q4o),e(Hp,W4o),e(Hp,Bq),e(Bq,H4o),e(Hp,U4o),e(y,J4o),e(y,Up),e(Up,yde),e(yde,Y4o),e(Up,K4o),e(Up,Iq),e(Iq,Z4o),e(Up,e3o),e(y,o3o),e(y,Jp),e(Jp,xde),e(xde,r3o),e(Jp,t3o),e(Jp,Nq),e(Nq,a3o),e(Jp,n3o),e(y,s3o),e(y,Yp),e(Yp,$de),e($de,l3o),e(Yp,i3o),e(Yp,qq),e(qq,d3o),e(Yp,c3o),e(y,f3o),e(y,Kp),e(Kp,kde),e(kde,m3o),e(Kp,g3o),e(Kp,jq),e(jq,h3o),e(Kp,p3o),e(y,_3o),e(y,Zp),e(Zp,Sde),e(Sde,u3o),e(Zp,b3o),e(Zp,Dq),e(Dq,v3o),e(Zp,F3o),e(y,T3o),e(y,e_),e(e_,Rde),e(Rde,M3o),e(e_,E3o),e(e_,Gq),e(Gq,C3o),e(e_,w3o),e(y,A3o),e(y,o_),e(o_,Pde),e(Pde,L3o),e(o_,y3o),e(o_,Oq),e(Oq,x3o),e(o_,$3o),e(y,k3o),e(y,r_),e(r_,Bde),e(Bde,S3o),e(r_,R3o),e(r_,Vq),e(Vq,P3o),e(r_,B3o),e(y,I3o),e(y,t_),e(t_,Ide),e(Ide,N3o),e(t_,q3o),e(t_,Xq),e(Xq,j3o),e(t_,D3o),e(y,G3o),e(y,a_),e(a_,Nde),e(Nde,O3o),e(a_,V3o),e(a_,zq),e(zq,X3o),e(a_,z3o),e(y,Q3o),e(y,n_),e(n_,qde),e(qde,W3o),e(n_,H3o),e(n_,Qq),e(Qq,U3o),e(n_,J3o),e(y,Y3o),e(y,s_),e(s_,jde),e(jde,K3o),e(s_,Z3o),e(s_,Wq),e(Wq,evo),e(s_,ovo),e(y,rvo),e(y,l_),e(l_,Dde),e(Dde,tvo),e(l_,avo),e(l_,Hq),e(Hq,nvo),e(l_,svo),e(y,lvo),e(y,i_),e(i_,Gde),e(Gde,ivo),e(i_,dvo),e(i_,Uq),e(Uq,cvo),e(i_,fvo),e(y,mvo),e(y,d_),e(d_,Ode),e(Ode,gvo),e(d_,hvo),e(d_,Jq),e(Jq,pvo),e(d_,_vo),e(y,uvo),e(y,c_),e(c_,Vde),e(Vde,bvo),e(c_,vvo),e(c_,Yq),e(Yq,Fvo),e(c_,Tvo),e(y,Mvo),e(y,f_),e(f_,Xde),e(Xde,Evo),e(f_,Cvo),e(f_,Kq),e(Kq,wvo),e(f_,Avo),e(y,Lvo),e(y,m_),e(m_,zde),e(zde,yvo),e(m_,xvo),e(m_,Zq),e(Zq,$vo),e(m_,kvo),e(y,Svo),e(y,g_),e(g_,Qde),e(Qde,Rvo),e(g_,Pvo),e(g_,ej),e(ej,Bvo),e(g_,Ivo),e(y,Nvo),e(y,h_),e(h_,Wde),e(Wde,qvo),e(h_,jvo),e(h_,oj),e(oj,Dvo),e(h_,Gvo),e(y,Ovo),e(y,p_),e(p_,Hde),e(Hde,Vvo),e(p_,Xvo),e(p_,rj),e(rj,zvo),e(p_,Qvo),e(y,Wvo),e(y,zs),e(zs,Ude),e(Ude,Hvo),e(zs,Uvo),e(zs,tj),e(tj,Jvo),e(zs,Yvo),e(zs,aj),e(aj,Kvo),e(zs,Zvo),e(y,eFo),e(y,__),e(__,Jde),e(Jde,oFo),e(__,rFo),e(__,nj),e(nj,tFo),e(__,aFo),e(y,nFo),e(y,u_),e(u_,Yde),e(Yde,sFo),e(u_,lFo),e(u_,sj),e(sj,iFo),e(u_,dFo),e(y,cFo),e(y,b_),e(b_,Kde),e(Kde,fFo),e(b_,mFo),e(b_,lj),e(lj,gFo),e(b_,hFo),e(y,pFo),e(y,v_),e(v_,Zde),e(Zde,_Fo),e(v_,uFo),e(v_,ij),e(ij,bFo),e(v_,vFo),e(y,FFo),e(y,F_),e(F_,ece),e(ece,TFo),e(F_,MFo),e(F_,dj),e(dj,EFo),e(F_,CFo),e(y,wFo),e(y,T_),e(T_,oce),e(oce,AFo),e(T_,LFo),e(T_,cj),e(cj,yFo),e(T_,xFo),e(y,$Fo),e(y,M_),e(M_,rce),e(rce,kFo),e(M_,SFo),e(M_,fj),e(fj,RFo),e(M_,PFo),e(y,BFo),e(y,E_),e(E_,tce),e(tce,IFo),e(E_,NFo),e(E_,mj),e(mj,qFo),e(E_,jFo),e(y,DFo),e(y,C_),e(C_,ace),e(ace,GFo),e(C_,OFo),e(C_,gj),e(gj,VFo),e(C_,XFo),e(y,zFo),e(y,w_),e(w_,nce),e(nce,QFo),e(w_,WFo),e(w_,hj),e(hj,HFo),e(w_,UFo),e(y,JFo),e(y,A_),e(A_,sce),e(sce,YFo),e(A_,KFo),e(A_,pj),e(pj,ZFo),e(A_,eTo),e(y,oTo),e(y,L_),e(L_,lce),e(lce,rTo),e(L_,tTo),e(L_,_j),e(_j,aTo),e(L_,nTo),e(y,sTo),e(y,y_),e(y_,ice),e(ice,lTo),e(y_,iTo),e(y_,uj),e(uj,dTo),e(y_,cTo),e(y,fTo),e(y,x_),e(x_,dce),e(dce,mTo),e(x_,gTo),e(x_,bj),e(bj,hTo),e(x_,pTo),e(y,_To),e(y,$_),e($_,cce),e(cce,uTo),e($_,bTo),e($_,vj),e(vj,vTo),e($_,FTo),e(y,TTo),e(y,k_),e(k_,fce),e(fce,MTo),e(k_,ETo),e(k_,Fj),e(Fj,CTo),e(k_,wTo),e(y,ATo),e(y,S_),e(S_,mce),e(mce,LTo),e(S_,yTo),e(S_,Tj),e(Tj,xTo),e(S_,$To),e(y,kTo),e(y,R_),e(R_,gce),e(gce,STo),e(R_,RTo),e(R_,Mj),e(Mj,PTo),e(R_,BTo),e(y,ITo),e(y,P_),e(P_,hce),e(hce,NTo),e(P_,qTo),e(P_,Ej),e(Ej,jTo),e(P_,DTo),e(y,GTo),e(y,B_),e(B_,pce),e(pce,OTo),e(B_,VTo),e(B_,Cj),e(Cj,XTo),e(B_,zTo),e(y,QTo),e(y,I_),e(I_,_ce),e(_ce,WTo),e(I_,HTo),e(I_,wj),e(wj,UTo),e(I_,JTo),e(y,YTo),e(y,N_),e(N_,uce),e(uce,KTo),e(N_,ZTo),e(N_,Aj),e(Aj,eMo),e(N_,oMo),e(y,rMo),e(y,q_),e(q_,bce),e(bce,tMo),e(q_,aMo),e(q_,Lj),e(Lj,nMo),e(q_,sMo),e(y,lMo),e(y,j_),e(j_,vce),e(vce,iMo),e(j_,dMo),e(j_,yj),e(yj,cMo),e(j_,fMo),e(y,mMo),e(y,D_),e(D_,Fce),e(Fce,gMo),e(D_,hMo),e(D_,xj),e(xj,pMo),e(D_,_Mo),e(y,uMo),e(y,G_),e(G_,Tce),e(Tce,bMo),e(G_,vMo),e(G_,$j),e($j,FMo),e(G_,TMo),e(y,MMo),e(y,O_),e(O_,Mce),e(Mce,EMo),e(O_,CMo),e(O_,kj),e(kj,wMo),e(O_,AMo),e(y,LMo),e(y,V_),e(V_,Ece),e(Ece,yMo),e(V_,xMo),e(V_,Sj),e(Sj,$Mo),e(V_,kMo),e(y,SMo),e(y,X_),e(X_,Cce),e(Cce,RMo),e(X_,PMo),e(X_,Rj),e(Rj,BMo),e(X_,IMo),e(y,NMo),e(y,z_),e(z_,wce),e(wce,qMo),e(z_,jMo),e(z_,Pj),e(Pj,DMo),e(z_,GMo),e(y,OMo),e(y,Q_),e(Q_,Ace),e(Ace,VMo),e(Q_,XMo),e(Q_,Bj),e(Bj,zMo),e(Q_,QMo),e(y,WMo),e(y,W_),e(W_,Lce),e(Lce,HMo),e(W_,UMo),e(W_,Ij),e(Ij,JMo),e(W_,YMo),e(y,KMo),e(y,H_),e(H_,yce),e(yce,ZMo),e(H_,eEo),e(H_,Nj),e(Nj,oEo),e(H_,rEo),e(y,tEo),e(y,U_),e(U_,xce),e(xce,aEo),e(U_,nEo),e(U_,qj),e(qj,sEo),e(U_,lEo),e(y,iEo),e(y,J_),e(J_,$ce),e($ce,dEo),e(J_,cEo),e(J_,jj),e(jj,fEo),e(J_,mEo),e(y,gEo),e(y,Y_),e(Y_,kce),e(kce,hEo),e(Y_,pEo),e(Y_,Dj),e(Dj,_Eo),e(Y_,uEo),e(y,bEo),e(y,K_),e(K_,Sce),e(Sce,vEo),e(K_,FEo),e(K_,Gj),e(Gj,TEo),e(K_,MEo),e(y,EEo),e(y,Z_),e(Z_,Rce),e(Rce,CEo),e(Z_,wEo),e(Z_,Oj),e(Oj,AEo),e(Z_,LEo),e(y,yEo),e(y,eu),e(eu,Pce),e(Pce,xEo),e(eu,$Eo),e(eu,Vj),e(Vj,kEo),e(eu,SEo),e(y,REo),e(y,ou),e(ou,Bce),e(Bce,PEo),e(ou,BEo),e(ou,Xj),e(Xj,IEo),e(ou,NEo),e(y,qEo),e(y,ru),e(ru,Ice),e(Ice,jEo),e(ru,DEo),e(ru,zj),e(zj,GEo),e(ru,OEo),e(y,VEo),e(y,tu),e(tu,Nce),e(Nce,XEo),e(tu,zEo),e(tu,Qj),e(Qj,QEo),e(tu,WEo),e(y,HEo),e(y,au),e(au,qce),e(qce,UEo),e(au,JEo),e(au,Wj),e(Wj,YEo),e(au,KEo),e(y,ZEo),e(y,nu),e(nu,jce),e(jce,eCo),e(nu,oCo),e(nu,Hj),e(Hj,rCo),e(nu,tCo),e(y,aCo),e(y,su),e(su,Dce),e(Dce,nCo),e(su,sCo),e(su,Uj),e(Uj,lCo),e(su,iCo),e(y,dCo),e(y,lu),e(lu,Gce),e(Gce,cCo),e(lu,fCo),e(lu,Jj),e(Jj,mCo),e(lu,gCo),e(y,hCo),e(y,iu),e(iu,Oce),e(Oce,pCo),e(iu,_Co),e(iu,Yj),e(Yj,uCo),e(iu,bCo),e(y,vCo),e(y,du),e(du,Vce),e(Vce,FCo),e(du,TCo),e(du,Kj),e(Kj,MCo),e(du,ECo),e(y,CCo),e(y,cu),e(cu,Xce),e(Xce,wCo),e(cu,ACo),e(cu,Zj),e(Zj,LCo),e(cu,yCo),e(y,xCo),e(y,fu),e(fu,zce),e(zce,$Co),e(fu,kCo),e(fu,eD),e(eD,SCo),e(fu,RCo),e(y,PCo),e(y,mu),e(mu,Qce),e(Qce,BCo),e(mu,ICo),e(mu,oD),e(oD,NCo),e(mu,qCo),e(y,jCo),e(y,gu),e(gu,Wce),e(Wce,DCo),e(gu,GCo),e(gu,rD),e(rD,OCo),e(gu,VCo),e(y,XCo),e(y,hu),e(hu,Hce),e(Hce,zCo),e(hu,QCo),e(hu,tD),e(tD,WCo),e(hu,HCo),e(y,UCo),e(y,pu),e(pu,Uce),e(Uce,JCo),e(pu,YCo),e(pu,aD),e(aD,KCo),e(pu,ZCo),e(y,e5o),e(y,_u),e(_u,Jce),e(Jce,o5o),e(_u,r5o),e(_u,nD),e(nD,t5o),e(_u,a5o),e(y,n5o),e(y,uu),e(uu,Yce),e(Yce,s5o),e(uu,l5o),e(uu,sD),e(sD,i5o),e(uu,d5o),e(y,c5o),e(y,bu),e(bu,Kce),e(Kce,f5o),e(bu,m5o),e(bu,lD),e(lD,g5o),e(bu,h5o),e(y,p5o),e(y,vu),e(vu,Zce),e(Zce,_5o),e(vu,u5o),e(vu,iD),e(iD,b5o),e(vu,v5o),e(y,F5o),e(y,Fu),e(Fu,efe),e(efe,T5o),e(Fu,M5o),e(Fu,dD),e(dD,E5o),e(Fu,C5o),e(y,w5o),e(y,Tu),e(Tu,ofe),e(ofe,A5o),e(Tu,L5o),e(Tu,cD),e(cD,y5o),e(Tu,x5o),e(y,$5o),e(y,Mu),e(Mu,rfe),e(rfe,k5o),e(Mu,S5o),e(Mu,fD),e(fD,R5o),e(Mu,P5o),e(y,B5o),e(y,Eu),e(Eu,tfe),e(tfe,I5o),e(Eu,N5o),e(Eu,mD),e(mD,q5o),e(Eu,j5o),e(y,D5o),e(y,Cu),e(Cu,afe),e(afe,G5o),e(Cu,O5o),e(Cu,gD),e(gD,V5o),e(Cu,X5o),e(y,z5o),e(y,wu),e(wu,nfe),e(nfe,Q5o),e(wu,W5o),e(wu,hD),e(hD,H5o),e(wu,U5o),e(y,J5o),e(y,Au),e(Au,sfe),e(sfe,Y5o),e(Au,K5o),e(Au,pD),e(pD,Z5o),e(Au,e0o),e(y,o0o),e(y,Lu),e(Lu,lfe),e(lfe,r0o),e(Lu,t0o),e(Lu,_D),e(_D,a0o),e(Lu,n0o),e(y,s0o),e(y,yu),e(yu,ife),e(ife,l0o),e(yu,i0o),e(yu,uD),e(uD,d0o),e(yu,c0o),e(y,f0o),e(y,xu),e(xu,dfe),e(dfe,m0o),e(xu,g0o),e(xu,bD),e(bD,h0o),e(xu,p0o),e(y,_0o),e(y,$u),e($u,cfe),e(cfe,u0o),e($u,b0o),e($u,vD),e(vD,v0o),e($u,F0o),e(y,T0o),e(y,ku),e(ku,ffe),e(ffe,M0o),e(ku,E0o),e(ku,FD),e(FD,C0o),e(ku,w0o),e(y,A0o),e(y,Su),e(Su,mfe),e(mfe,L0o),e(Su,y0o),e(Su,TD),e(TD,x0o),e(Su,$0o),e(y,k0o),e(y,Ru),e(Ru,gfe),e(gfe,S0o),e(Ru,R0o),e(Ru,MD),e(MD,P0o),e(Ru,B0o),e(y,I0o),e(y,Pu),e(Pu,hfe),e(hfe,N0o),e(Pu,q0o),e(Pu,ED),e(ED,j0o),e(Pu,D0o),e(y,G0o),e(y,Bu),e(Bu,pfe),e(pfe,O0o),e(Bu,V0o),e(Bu,CD),e(CD,X0o),e(Bu,z0o),e(Je,Q0o),e(Je,Iu),e(Iu,W0o),e(Iu,_fe),e(_fe,H0o),e(Iu,U0o),e(Iu,ufe),e(ufe,J0o),e(Je,Y0o),M(Nu,Je,null),b(f,qOe,u),b(f,Di,u),e(Di,qu),e(qu,bfe),M(py,bfe,null),e(Di,K0o),e(Di,vfe),e(vfe,Z0o),b(f,jOe,u),b(f,$o,u),M(_y,$o,null),e($o,ewo),e($o,Gi),e(Gi,owo),e(Gi,wD),e(wD,rwo),e(Gi,two),e(Gi,AD),e(AD,awo),e(Gi,nwo),e($o,swo),e($o,uy),e(uy,lwo),e(uy,Ffe),e(Ffe,iwo),e(uy,dwo),e($o,cwo),e($o,st),M(by,st,null),e(st,fwo),e(st,Tfe),e(Tfe,mwo),e(st,gwo),e(st,Oi),e(Oi,hwo),e(Oi,Mfe),e(Mfe,pwo),e(Oi,_wo),e(Oi,LD),e(LD,uwo),e(Oi,bwo),e(st,vwo),M(ju,st,null),e($o,Fwo),e($o,Ye),M(vy,Ye,null),e(Ye,Two),e(Ye,Efe),e(Efe,Mwo),e(Ye,Ewo),e(Ye,Pa),e(Pa,Cwo),e(Pa,Cfe),e(Cfe,wwo),e(Pa,Awo),e(Pa,wfe),e(wfe,Lwo),e(Pa,ywo),e(Pa,Afe),e(Afe,xwo),e(Pa,$wo),e(Ye,kwo),e(Ye,G),e(G,Du),e(Du,Lfe),e(Lfe,Swo),e(Du,Rwo),e(Du,yD),e(yD,Pwo),e(Du,Bwo),e(G,Iwo),e(G,Gu),e(Gu,yfe),e(yfe,Nwo),e(Gu,qwo),e(Gu,xD),e(xD,jwo),e(Gu,Dwo),e(G,Gwo),e(G,Ou),e(Ou,xfe),e(xfe,Owo),e(Ou,Vwo),e(Ou,$D),e($D,Xwo),e(Ou,zwo),e(G,Qwo),e(G,Vu),e(Vu,$fe),e($fe,Wwo),e(Vu,Hwo),e(Vu,kD),e(kD,Uwo),e(Vu,Jwo),e(G,Ywo),e(G,Xu),e(Xu,kfe),e(kfe,Kwo),e(Xu,Zwo),e(Xu,SD),e(SD,eAo),e(Xu,oAo),e(G,rAo),e(G,zu),e(zu,Sfe),e(Sfe,tAo),e(zu,aAo),e(zu,RD),e(RD,nAo),e(zu,sAo),e(G,lAo),e(G,Qu),e(Qu,Rfe),e(Rfe,iAo),e(Qu,dAo),e(Qu,PD),e(PD,cAo),e(Qu,fAo),e(G,mAo),e(G,Wu),e(Wu,Pfe),e(Pfe,gAo),e(Wu,hAo),e(Wu,BD),e(BD,pAo),e(Wu,_Ao),e(G,uAo),e(G,Hu),e(Hu,Bfe),e(Bfe,bAo),e(Hu,vAo),e(Hu,ID),e(ID,FAo),e(Hu,TAo),e(G,MAo),e(G,Uu),e(Uu,Ife),e(Ife,EAo),e(Uu,CAo),e(Uu,ND),e(ND,wAo),e(Uu,AAo),e(G,LAo),e(G,Ju),e(Ju,Nfe),e(Nfe,yAo),e(Ju,xAo),e(Ju,qD),e(qD,$Ao),e(Ju,kAo),e(G,SAo),e(G,Yu),e(Yu,qfe),e(qfe,RAo),e(Yu,PAo),e(Yu,jD),e(jD,BAo),e(Yu,IAo),e(G,NAo),e(G,Ku),e(Ku,jfe),e(jfe,qAo),e(Ku,jAo),e(Ku,DD),e(DD,DAo),e(Ku,GAo),e(G,OAo),e(G,Zu),e(Zu,Dfe),e(Dfe,VAo),e(Zu,XAo),e(Zu,GD),e(GD,zAo),e(Zu,QAo),e(G,WAo),e(G,e1),e(e1,Gfe),e(Gfe,HAo),e(e1,UAo),e(e1,OD),e(OD,JAo),e(e1,YAo),e(G,KAo),e(G,o1),e(o1,Ofe),e(Ofe,ZAo),e(o1,e6o),e(o1,VD),e(VD,o6o),e(o1,r6o),e(G,t6o),e(G,r1),e(r1,Vfe),e(Vfe,a6o),e(r1,n6o),e(r1,XD),e(XD,s6o),e(r1,l6o),e(G,i6o),e(G,t1),e(t1,Xfe),e(Xfe,d6o),e(t1,c6o),e(t1,zD),e(zD,f6o),e(t1,m6o),e(G,g6o),e(G,a1),e(a1,zfe),e(zfe,h6o),e(a1,p6o),e(a1,QD),e(QD,_6o),e(a1,u6o),e(G,b6o),e(G,n1),e(n1,Qfe),e(Qfe,v6o),e(n1,F6o),e(n1,WD),e(WD,T6o),e(n1,M6o),e(G,E6o),e(G,s1),e(s1,Wfe),e(Wfe,C6o),e(s1,w6o),e(s1,HD),e(HD,A6o),e(s1,L6o),e(G,y6o),e(G,l1),e(l1,Hfe),e(Hfe,x6o),e(l1,$6o),e(l1,UD),e(UD,k6o),e(l1,S6o),e(G,R6o),e(G,i1),e(i1,Ufe),e(Ufe,P6o),e(i1,B6o),e(i1,JD),e(JD,I6o),e(i1,N6o),e(G,q6o),e(G,d1),e(d1,Jfe),e(Jfe,j6o),e(d1,D6o),e(d1,YD),e(YD,G6o),e(d1,O6o),e(G,V6o),e(G,c1),e(c1,Yfe),e(Yfe,X6o),e(c1,z6o),e(c1,KD),e(KD,Q6o),e(c1,W6o),e(G,H6o),e(G,f1),e(f1,Kfe),e(Kfe,U6o),e(f1,J6o),e(f1,ZD),e(ZD,Y6o),e(f1,K6o),e(G,Z6o),e(G,m1),e(m1,Zfe),e(Zfe,eLo),e(m1,oLo),e(m1,eG),e(eG,rLo),e(m1,tLo),e(G,aLo),e(G,g1),e(g1,eme),e(eme,nLo),e(g1,sLo),e(g1,oG),e(oG,lLo),e(g1,iLo),e(G,dLo),e(G,h1),e(h1,ome),e(ome,cLo),e(h1,fLo),e(h1,rG),e(rG,mLo),e(h1,gLo),e(G,hLo),e(G,p1),e(p1,rme),e(rme,pLo),e(p1,_Lo),e(p1,tG),e(tG,uLo),e(p1,bLo),e(G,vLo),e(G,_1),e(_1,tme),e(tme,FLo),e(_1,TLo),e(_1,aG),e(aG,MLo),e(_1,ELo),e(G,CLo),e(G,u1),e(u1,ame),e(ame,wLo),e(u1,ALo),e(u1,nG),e(nG,LLo),e(u1,yLo),e(G,xLo),e(G,b1),e(b1,nme),e(nme,$Lo),e(b1,kLo),e(b1,sG),e(sG,SLo),e(b1,RLo),e(G,PLo),e(G,v1),e(v1,sme),e(sme,BLo),e(v1,ILo),e(v1,lG),e(lG,NLo),e(v1,qLo),e(G,jLo),e(G,F1),e(F1,lme),e(lme,DLo),e(F1,GLo),e(F1,iG),e(iG,OLo),e(F1,VLo),e(G,XLo),e(G,T1),e(T1,ime),e(ime,zLo),e(T1,QLo),e(T1,dG),e(dG,WLo),e(T1,HLo),e(G,ULo),e(G,M1),e(M1,dme),e(dme,JLo),e(M1,YLo),e(M1,cG),e(cG,KLo),e(M1,ZLo),e(G,eyo),e(G,E1),e(E1,cme),e(cme,oyo),e(E1,ryo),e(E1,fG),e(fG,tyo),e(E1,ayo),e(G,nyo),e(G,C1),e(C1,fme),e(fme,syo),e(C1,lyo),e(C1,mG),e(mG,iyo),e(C1,dyo),e(G,cyo),e(G,w1),e(w1,mme),e(mme,fyo),e(w1,myo),e(w1,gG),e(gG,gyo),e(w1,hyo),e(G,pyo),e(G,A1),e(A1,gme),e(gme,_yo),e(A1,uyo),e(A1,hG),e(hG,byo),e(A1,vyo),e(G,Fyo),e(G,L1),e(L1,hme),e(hme,Tyo),e(L1,Myo),e(L1,pG),e(pG,Eyo),e(L1,Cyo),e(G,wyo),e(G,y1),e(y1,pme),e(pme,Ayo),e(y1,Lyo),e(y1,_G),e(_G,yyo),e(y1,xyo),e(G,$yo),e(G,x1),e(x1,_me),e(_me,kyo),e(x1,Syo),e(x1,uG),e(uG,Ryo),e(x1,Pyo),e(Ye,Byo),e(Ye,$1),e($1,Iyo),e($1,ume),e(ume,Nyo),e($1,qyo),e($1,bme),e(bme,jyo),e(Ye,Dyo),M(k1,Ye,null),b(f,DOe,u),b(f,Vi,u),e(Vi,S1),e(S1,vme),M(Fy,vme,null),e(Vi,Gyo),e(Vi,Fme),e(Fme,Oyo),b(f,GOe,u),b(f,ko,u),M(Ty,ko,null),e(ko,Vyo),e(ko,Xi),e(Xi,Xyo),e(Xi,bG),e(bG,zyo),e(Xi,Qyo),e(Xi,vG),e(vG,Wyo),e(Xi,Hyo),e(ko,Uyo),e(ko,My),e(My,Jyo),e(My,Tme),e(Tme,Yyo),e(My,Kyo),e(ko,Zyo),e(ko,lt),M(Ey,lt,null),e(lt,e8o),e(lt,Mme),e(Mme,o8o),e(lt,r8o),e(lt,zi),e(zi,t8o),e(zi,Eme),e(Eme,a8o),e(zi,n8o),e(zi,FG),e(FG,s8o),e(zi,l8o),e(lt,i8o),M(R1,lt,null),e(ko,d8o),e(ko,Ke),M(Cy,Ke,null),e(Ke,c8o),e(Ke,Cme),e(Cme,f8o),e(Ke,m8o),e(Ke,Ba),e(Ba,g8o),e(Ba,wme),e(wme,h8o),e(Ba,p8o),e(Ba,Ame),e(Ame,_8o),e(Ba,u8o),e(Ba,Lme),e(Lme,b8o),e(Ba,v8o),e(Ke,F8o),e(Ke,z),e(z,P1),e(P1,yme),e(yme,T8o),e(P1,M8o),e(P1,TG),e(TG,E8o),e(P1,C8o),e(z,w8o),e(z,B1),e(B1,xme),e(xme,A8o),e(B1,L8o),e(B1,MG),e(MG,y8o),e(B1,x8o),e(z,$8o),e(z,I1),e(I1,$me),e($me,k8o),e(I1,S8o),e(I1,EG),e(EG,R8o),e(I1,P8o),e(z,B8o),e(z,N1),e(N1,kme),e(kme,I8o),e(N1,N8o),e(N1,CG),e(CG,q8o),e(N1,j8o),e(z,D8o),e(z,q1),e(q1,Sme),e(Sme,G8o),e(q1,O8o),e(q1,wG),e(wG,V8o),e(q1,X8o),e(z,z8o),e(z,j1),e(j1,Rme),e(Rme,Q8o),e(j1,W8o),e(j1,AG),e(AG,H8o),e(j1,U8o),e(z,J8o),e(z,D1),e(D1,Pme),e(Pme,Y8o),e(D1,K8o),e(D1,LG),e(LG,Z8o),e(D1,e9o),e(z,o9o),e(z,G1),e(G1,Bme),e(Bme,r9o),e(G1,t9o),e(G1,yG),e(yG,a9o),e(G1,n9o),e(z,s9o),e(z,O1),e(O1,Ime),e(Ime,l9o),e(O1,i9o),e(O1,xG),e(xG,d9o),e(O1,c9o),e(z,f9o),e(z,V1),e(V1,Nme),e(Nme,m9o),e(V1,g9o),e(V1,$G),e($G,h9o),e(V1,p9o),e(z,_9o),e(z,X1),e(X1,qme),e(qme,u9o),e(X1,b9o),e(X1,kG),e(kG,v9o),e(X1,F9o),e(z,T9o),e(z,z1),e(z1,jme),e(jme,M9o),e(z1,E9o),e(z1,SG),e(SG,C9o),e(z1,w9o),e(z,A9o),e(z,Q1),e(Q1,Dme),e(Dme,L9o),e(Q1,y9o),e(Q1,RG),e(RG,x9o),e(Q1,$9o),e(z,k9o),e(z,W1),e(W1,Gme),e(Gme,S9o),e(W1,R9o),e(W1,PG),e(PG,P9o),e(W1,B9o),e(z,I9o),e(z,H1),e(H1,Ome),e(Ome,N9o),e(H1,q9o),e(H1,BG),e(BG,j9o),e(H1,D9o),e(z,G9o),e(z,U1),e(U1,Vme),e(Vme,O9o),e(U1,V9o),e(U1,IG),e(IG,X9o),e(U1,z9o),e(z,Q9o),e(z,J1),e(J1,Xme),e(Xme,W9o),e(J1,H9o),e(J1,NG),e(NG,U9o),e(J1,J9o),e(z,Y9o),e(z,Y1),e(Y1,zme),e(zme,K9o),e(Y1,Z9o),e(Y1,qG),e(qG,exo),e(Y1,oxo),e(z,rxo),e(z,K1),e(K1,Qme),e(Qme,txo),e(K1,axo),e(K1,jG),e(jG,nxo),e(K1,sxo),e(z,lxo),e(z,Z1),e(Z1,Wme),e(Wme,ixo),e(Z1,dxo),e(Z1,DG),e(DG,cxo),e(Z1,fxo),e(z,mxo),e(z,e7),e(e7,Hme),e(Hme,gxo),e(e7,hxo),e(e7,GG),e(GG,pxo),e(e7,_xo),e(z,uxo),e(z,o7),e(o7,Ume),e(Ume,bxo),e(o7,vxo),e(o7,OG),e(OG,Fxo),e(o7,Txo),e(z,Mxo),e(z,r7),e(r7,Jme),e(Jme,Exo),e(r7,Cxo),e(r7,VG),e(VG,wxo),e(r7,Axo),e(z,Lxo),e(z,t7),e(t7,Yme),e(Yme,yxo),e(t7,xxo),e(t7,XG),e(XG,$xo),e(t7,kxo),e(z,Sxo),e(z,a7),e(a7,Kme),e(Kme,Rxo),e(a7,Pxo),e(a7,zG),e(zG,Bxo),e(a7,Ixo),e(z,Nxo),e(z,n7),e(n7,Zme),e(Zme,qxo),e(n7,jxo),e(n7,QG),e(QG,Dxo),e(n7,Gxo),e(z,Oxo),e(z,s7),e(s7,ege),e(ege,Vxo),e(s7,Xxo),e(s7,WG),e(WG,zxo),e(s7,Qxo),e(z,Wxo),e(z,l7),e(l7,oge),e(oge,Hxo),e(l7,Uxo),e(l7,HG),e(HG,Jxo),e(l7,Yxo),e(z,Kxo),e(z,i7),e(i7,rge),e(rge,Zxo),e(i7,e$o),e(i7,UG),e(UG,o$o),e(i7,r$o),e(z,t$o),e(z,d7),e(d7,tge),e(tge,a$o),e(d7,n$o),e(d7,JG),e(JG,s$o),e(d7,l$o),e(z,i$o),e(z,c7),e(c7,age),e(age,d$o),e(c7,c$o),e(c7,YG),e(YG,f$o),e(c7,m$o),e(z,g$o),e(z,f7),e(f7,nge),e(nge,h$o),e(f7,p$o),e(f7,KG),e(KG,_$o),e(f7,u$o),e(z,b$o),e(z,m7),e(m7,sge),e(sge,v$o),e(m7,F$o),e(m7,ZG),e(ZG,T$o),e(m7,M$o),e(z,E$o),e(z,g7),e(g7,lge),e(lge,C$o),e(g7,w$o),e(g7,eO),e(eO,A$o),e(g7,L$o),e(z,y$o),e(z,h7),e(h7,ige),e(ige,x$o),e(h7,$$o),e(h7,oO),e(oO,k$o),e(h7,S$o),e(z,R$o),e(z,p7),e(p7,dge),e(dge,P$o),e(p7,B$o),e(p7,rO),e(rO,I$o),e(p7,N$o),e(z,q$o),e(z,_7),e(_7,cge),e(cge,j$o),e(_7,D$o),e(_7,tO),e(tO,G$o),e(_7,O$o),e(z,V$o),e(z,u7),e(u7,fge),e(fge,X$o),e(u7,z$o),e(u7,aO),e(aO,Q$o),e(u7,W$o),e(z,H$o),e(z,b7),e(b7,mge),e(mge,U$o),e(b7,J$o),e(b7,nO),e(nO,Y$o),e(b7,K$o),e(Ke,Z$o),e(Ke,v7),e(v7,eko),e(v7,gge),e(gge,oko),e(v7,rko),e(v7,hge),e(hge,tko),e(Ke,ako),M(F7,Ke,null),b(f,OOe,u),b(f,Qi,u),e(Qi,T7),e(T7,pge),M(wy,pge,null),e(Qi,nko),e(Qi,_ge),e(_ge,sko),b(f,VOe,u),b(f,So,u),M(Ay,So,null),e(So,lko),e(So,Wi),e(Wi,iko),e(Wi,sO),e(sO,dko),e(Wi,cko),e(Wi,lO),e(lO,fko),e(Wi,mko),e(So,gko),e(So,Ly),e(Ly,hko),e(Ly,uge),e(uge,pko),e(Ly,_ko),e(So,uko),e(So,it),M(yy,it,null),e(it,bko),e(it,bge),e(bge,vko),e(it,Fko),e(it,Hi),e(Hi,Tko),e(Hi,vge),e(vge,Mko),e(Hi,Eko),e(Hi,iO),e(iO,Cko),e(Hi,wko),e(it,Ako),M(M7,it,null),e(So,Lko),e(So,Ze),M(xy,Ze,null),e(Ze,yko),e(Ze,Fge),e(Fge,xko),e(Ze,$ko),e(Ze,Ia),e(Ia,kko),e(Ia,Tge),e(Tge,Sko),e(Ia,Rko),e(Ia,Mge),e(Mge,Pko),e(Ia,Bko),e(Ia,Ege),e(Ege,Iko),e(Ia,Nko),e(Ze,qko),e(Ze,W),e(W,E7),e(E7,Cge),e(Cge,jko),e(E7,Dko),e(E7,dO),e(dO,Gko),e(E7,Oko),e(W,Vko),e(W,C7),e(C7,wge),e(wge,Xko),e(C7,zko),e(C7,cO),e(cO,Qko),e(C7,Wko),e(W,Hko),e(W,w7),e(w7,Age),e(Age,Uko),e(w7,Jko),e(w7,fO),e(fO,Yko),e(w7,Kko),e(W,Zko),e(W,A7),e(A7,Lge),e(Lge,eSo),e(A7,oSo),e(A7,mO),e(mO,rSo),e(A7,tSo),e(W,aSo),e(W,L7),e(L7,yge),e(yge,nSo),e(L7,sSo),e(L7,gO),e(gO,lSo),e(L7,iSo),e(W,dSo),e(W,y7),e(y7,xge),e(xge,cSo),e(y7,fSo),e(y7,hO),e(hO,mSo),e(y7,gSo),e(W,hSo),e(W,x7),e(x7,$ge),e($ge,pSo),e(x7,_So),e(x7,pO),e(pO,uSo),e(x7,bSo),e(W,vSo),e(W,$7),e($7,kge),e(kge,FSo),e($7,TSo),e($7,_O),e(_O,MSo),e($7,ESo),e(W,CSo),e(W,k7),e(k7,Sge),e(Sge,wSo),e(k7,ASo),e(k7,uO),e(uO,LSo),e(k7,ySo),e(W,xSo),e(W,S7),e(S7,Rge),e(Rge,$So),e(S7,kSo),e(S7,bO),e(bO,SSo),e(S7,RSo),e(W,PSo),e(W,R7),e(R7,Pge),e(Pge,BSo),e(R7,ISo),e(R7,vO),e(vO,NSo),e(R7,qSo),e(W,jSo),e(W,P7),e(P7,Bge),e(Bge,DSo),e(P7,GSo),e(P7,FO),e(FO,OSo),e(P7,VSo),e(W,XSo),e(W,B7),e(B7,Ige),e(Ige,zSo),e(B7,QSo),e(B7,TO),e(TO,WSo),e(B7,HSo),e(W,USo),e(W,I7),e(I7,Nge),e(Nge,JSo),e(I7,YSo),e(I7,MO),e(MO,KSo),e(I7,ZSo),e(W,eRo),e(W,N7),e(N7,qge),e(qge,oRo),e(N7,rRo),e(N7,EO),e(EO,tRo),e(N7,aRo),e(W,nRo),e(W,q7),e(q7,jge),e(jge,sRo),e(q7,lRo),e(q7,CO),e(CO,iRo),e(q7,dRo),e(W,cRo),e(W,j7),e(j7,Dge),e(Dge,fRo),e(j7,mRo),e(j7,wO),e(wO,gRo),e(j7,hRo),e(W,pRo),e(W,D7),e(D7,Gge),e(Gge,_Ro),e(D7,uRo),e(D7,AO),e(AO,bRo),e(D7,vRo),e(W,FRo),e(W,G7),e(G7,Oge),e(Oge,TRo),e(G7,MRo),e(G7,LO),e(LO,ERo),e(G7,CRo),e(W,wRo),e(W,O7),e(O7,Vge),e(Vge,ARo),e(O7,LRo),e(O7,yO),e(yO,yRo),e(O7,xRo),e(W,$Ro),e(W,V7),e(V7,Xge),e(Xge,kRo),e(V7,SRo),e(V7,xO),e(xO,RRo),e(V7,PRo),e(W,BRo),e(W,X7),e(X7,zge),e(zge,IRo),e(X7,NRo),e(X7,$O),e($O,qRo),e(X7,jRo),e(W,DRo),e(W,z7),e(z7,Qge),e(Qge,GRo),e(z7,ORo),e(z7,kO),e(kO,VRo),e(z7,XRo),e(W,zRo),e(W,Q7),e(Q7,Wge),e(Wge,QRo),e(Q7,WRo),e(Q7,SO),e(SO,HRo),e(Q7,URo),e(W,JRo),e(W,W7),e(W7,Hge),e(Hge,YRo),e(W7,KRo),e(W7,RO),e(RO,ZRo),e(W7,ePo),e(W,oPo),e(W,H7),e(H7,Uge),e(Uge,rPo),e(H7,tPo),e(H7,PO),e(PO,aPo),e(H7,nPo),e(W,sPo),e(W,U7),e(U7,Jge),e(Jge,lPo),e(U7,iPo),e(U7,BO),e(BO,dPo),e(U7,cPo),e(W,fPo),e(W,J7),e(J7,Yge),e(Yge,mPo),e(J7,gPo),e(J7,IO),e(IO,hPo),e(J7,pPo),e(W,_Po),e(W,Y7),e(Y7,Kge),e(Kge,uPo),e(Y7,bPo),e(Y7,NO),e(NO,vPo),e(Y7,FPo),e(W,TPo),e(W,K7),e(K7,Zge),e(Zge,MPo),e(K7,EPo),e(K7,qO),e(qO,CPo),e(K7,wPo),e(W,APo),e(W,Z7),e(Z7,ehe),e(ehe,LPo),e(Z7,yPo),e(Z7,jO),e(jO,xPo),e(Z7,$Po),e(W,kPo),e(W,e2),e(e2,ohe),e(ohe,SPo),e(e2,RPo),e(e2,DO),e(DO,PPo),e(e2,BPo),e(W,IPo),e(W,o2),e(o2,rhe),e(rhe,NPo),e(o2,qPo),e(o2,the),e(the,jPo),e(o2,DPo),e(W,GPo),e(W,r2),e(r2,ahe),e(ahe,OPo),e(r2,VPo),e(r2,GO),e(GO,XPo),e(r2,zPo),e(W,QPo),e(W,t2),e(t2,nhe),e(nhe,WPo),e(t2,HPo),e(t2,OO),e(OO,UPo),e(t2,JPo),e(W,YPo),e(W,a2),e(a2,she),e(she,KPo),e(a2,ZPo),e(a2,VO),e(VO,eBo),e(a2,oBo),e(W,rBo),e(W,n2),e(n2,lhe),e(lhe,tBo),e(n2,aBo),e(n2,XO),e(XO,nBo),e(n2,sBo),e(Ze,lBo),e(Ze,s2),e(s2,iBo),e(s2,ihe),e(ihe,dBo),e(s2,cBo),e(s2,dhe),e(dhe,fBo),e(Ze,mBo),M(l2,Ze,null),b(f,XOe,u),b(f,Ui,u),e(Ui,i2),e(i2,che),M($y,che,null),e(Ui,gBo),e(Ui,fhe),e(fhe,hBo),b(f,zOe,u),b(f,Ro,u),M(ky,Ro,null),e(Ro,pBo),e(Ro,Ji),e(Ji,_Bo),e(Ji,zO),e(zO,uBo),e(Ji,bBo),e(Ji,QO),e(QO,vBo),e(Ji,FBo),e(Ro,TBo),e(Ro,Sy),e(Sy,MBo),e(Sy,mhe),e(mhe,EBo),e(Sy,CBo),e(Ro,wBo),e(Ro,dt),M(Ry,dt,null),e(dt,ABo),e(dt,ghe),e(ghe,LBo),e(dt,yBo),e(dt,Yi),e(Yi,xBo),e(Yi,hhe),e(hhe,$Bo),e(Yi,kBo),e(Yi,WO),e(WO,SBo),e(Yi,RBo),e(dt,PBo),M(d2,dt,null),e(Ro,BBo),e(Ro,eo),M(Py,eo,null),e(eo,IBo),e(eo,phe),e(phe,NBo),e(eo,qBo),e(eo,Na),e(Na,jBo),e(Na,_he),e(_he,DBo),e(Na,GBo),e(Na,uhe),e(uhe,OBo),e(Na,VBo),e(Na,bhe),e(bhe,XBo),e(Na,zBo),e(eo,QBo),e(eo,pe),e(pe,c2),e(c2,vhe),e(vhe,WBo),e(c2,HBo),e(c2,HO),e(HO,UBo),e(c2,JBo),e(pe,YBo),e(pe,f2),e(f2,Fhe),e(Fhe,KBo),e(f2,ZBo),e(f2,UO),e(UO,eIo),e(f2,oIo),e(pe,rIo),e(pe,m2),e(m2,The),e(The,tIo),e(m2,aIo),e(m2,JO),e(JO,nIo),e(m2,sIo),e(pe,lIo),e(pe,g2),e(g2,Mhe),e(Mhe,iIo),e(g2,dIo),e(g2,YO),e(YO,cIo),e(g2,fIo),e(pe,mIo),e(pe,h2),e(h2,Ehe),e(Ehe,gIo),e(h2,hIo),e(h2,KO),e(KO,pIo),e(h2,_Io),e(pe,uIo),e(pe,p2),e(p2,Che),e(Che,bIo),e(p2,vIo),e(p2,ZO),e(ZO,FIo),e(p2,TIo),e(pe,MIo),e(pe,_2),e(_2,whe),e(whe,EIo),e(_2,CIo),e(_2,eV),e(eV,wIo),e(_2,AIo),e(pe,LIo),e(pe,u2),e(u2,Ahe),e(Ahe,yIo),e(u2,xIo),e(u2,oV),e(oV,$Io),e(u2,kIo),e(pe,SIo),e(pe,b2),e(b2,Lhe),e(Lhe,RIo),e(b2,PIo),e(b2,rV),e(rV,BIo),e(b2,IIo),e(pe,NIo),e(pe,v2),e(v2,yhe),e(yhe,qIo),e(v2,jIo),e(v2,tV),e(tV,DIo),e(v2,GIo),e(pe,OIo),e(pe,F2),e(F2,xhe),e(xhe,VIo),e(F2,XIo),e(F2,aV),e(aV,zIo),e(F2,QIo),e(pe,WIo),e(pe,T2),e(T2,$he),e($he,HIo),e(T2,UIo),e(T2,nV),e(nV,JIo),e(T2,YIo),e(pe,KIo),e(pe,M2),e(M2,khe),e(khe,ZIo),e(M2,eNo),e(M2,sV),e(sV,oNo),e(M2,rNo),e(pe,tNo),e(pe,E2),e(E2,She),e(She,aNo),e(E2,nNo),e(E2,lV),e(lV,sNo),e(E2,lNo),e(pe,iNo),e(pe,C2),e(C2,Rhe),e(Rhe,dNo),e(C2,cNo),e(C2,iV),e(iV,fNo),e(C2,mNo),e(pe,gNo),e(pe,w2),e(w2,Phe),e(Phe,hNo),e(w2,pNo),e(w2,dV),e(dV,_No),e(w2,uNo),e(pe,bNo),e(pe,A2),e(A2,Bhe),e(Bhe,vNo),e(A2,FNo),e(A2,cV),e(cV,TNo),e(A2,MNo),e(eo,ENo),e(eo,L2),e(L2,CNo),e(L2,Ihe),e(Ihe,wNo),e(L2,ANo),e(L2,Nhe),e(Nhe,LNo),e(eo,yNo),M(y2,eo,null),b(f,QOe,u),b(f,Ki,u),e(Ki,x2),e(x2,qhe),M(By,qhe,null),e(Ki,xNo),e(Ki,jhe),e(jhe,$No),b(f,WOe,u),b(f,Po,u),M(Iy,Po,null),e(Po,kNo),e(Po,Zi),e(Zi,SNo),e(Zi,fV),e(fV,RNo),e(Zi,PNo),e(Zi,mV),e(mV,BNo),e(Zi,INo),e(Po,NNo),e(Po,Ny),e(Ny,qNo),e(Ny,Dhe),e(Dhe,jNo),e(Ny,DNo),e(Po,GNo),e(Po,ct),M(qy,ct,null),e(ct,ONo),e(ct,Ghe),e(Ghe,VNo),e(ct,XNo),e(ct,ed),e(ed,zNo),e(ed,Ohe),e(Ohe,QNo),e(ed,WNo),e(ed,gV),e(gV,HNo),e(ed,UNo),e(ct,JNo),M($2,ct,null),e(Po,YNo),e(Po,oo),M(jy,oo,null),e(oo,KNo),e(oo,Vhe),e(Vhe,ZNo),e(oo,eqo),e(oo,qa),e(qa,oqo),e(qa,Xhe),e(Xhe,rqo),e(qa,tqo),e(qa,zhe),e(zhe,aqo),e(qa,nqo),e(qa,Qhe),e(Qhe,sqo),e(qa,lqo),e(oo,iqo),e(oo,N),e(N,k2),e(k2,Whe),e(Whe,dqo),e(k2,cqo),e(k2,hV),e(hV,fqo),e(k2,mqo),e(N,gqo),e(N,S2),e(S2,Hhe),e(Hhe,hqo),e(S2,pqo),e(S2,pV),e(pV,_qo),e(S2,uqo),e(N,bqo),e(N,R2),e(R2,Uhe),e(Uhe,vqo),e(R2,Fqo),e(R2,_V),e(_V,Tqo),e(R2,Mqo),e(N,Eqo),e(N,P2),e(P2,Jhe),e(Jhe,Cqo),e(P2,wqo),e(P2,uV),e(uV,Aqo),e(P2,Lqo),e(N,yqo),e(N,B2),e(B2,Yhe),e(Yhe,xqo),e(B2,$qo),e(B2,bV),e(bV,kqo),e(B2,Sqo),e(N,Rqo),e(N,I2),e(I2,Khe),e(Khe,Pqo),e(I2,Bqo),e(I2,vV),e(vV,Iqo),e(I2,Nqo),e(N,qqo),e(N,N2),e(N2,Zhe),e(Zhe,jqo),e(N2,Dqo),e(N2,FV),e(FV,Gqo),e(N2,Oqo),e(N,Vqo),e(N,q2),e(q2,epe),e(epe,Xqo),e(q2,zqo),e(q2,TV),e(TV,Qqo),e(q2,Wqo),e(N,Hqo),e(N,j2),e(j2,ope),e(ope,Uqo),e(j2,Jqo),e(j2,MV),e(MV,Yqo),e(j2,Kqo),e(N,Zqo),e(N,D2),e(D2,rpe),e(rpe,ejo),e(D2,ojo),e(D2,EV),e(EV,rjo),e(D2,tjo),e(N,ajo),e(N,G2),e(G2,tpe),e(tpe,njo),e(G2,sjo),e(G2,CV),e(CV,ljo),e(G2,ijo),e(N,djo),e(N,O2),e(O2,ape),e(ape,cjo),e(O2,fjo),e(O2,wV),e(wV,mjo),e(O2,gjo),e(N,hjo),e(N,V2),e(V2,npe),e(npe,pjo),e(V2,_jo),e(V2,AV),e(AV,ujo),e(V2,bjo),e(N,vjo),e(N,X2),e(X2,spe),e(spe,Fjo),e(X2,Tjo),e(X2,LV),e(LV,Mjo),e(X2,Ejo),e(N,Cjo),e(N,z2),e(z2,lpe),e(lpe,wjo),e(z2,Ajo),e(z2,yV),e(yV,Ljo),e(z2,yjo),e(N,xjo),e(N,Q2),e(Q2,ipe),e(ipe,$jo),e(Q2,kjo),e(Q2,xV),e(xV,Sjo),e(Q2,Rjo),e(N,Pjo),e(N,W2),e(W2,dpe),e(dpe,Bjo),e(W2,Ijo),e(W2,$V),e($V,Njo),e(W2,qjo),e(N,jjo),e(N,H2),e(H2,cpe),e(cpe,Djo),e(H2,Gjo),e(H2,kV),e(kV,Ojo),e(H2,Vjo),e(N,Xjo),e(N,U2),e(U2,fpe),e(fpe,zjo),e(U2,Qjo),e(U2,SV),e(SV,Wjo),e(U2,Hjo),e(N,Ujo),e(N,J2),e(J2,mpe),e(mpe,Jjo),e(J2,Yjo),e(J2,RV),e(RV,Kjo),e(J2,Zjo),e(N,eDo),e(N,Y2),e(Y2,gpe),e(gpe,oDo),e(Y2,rDo),e(Y2,PV),e(PV,tDo),e(Y2,aDo),e(N,nDo),e(N,K2),e(K2,hpe),e(hpe,sDo),e(K2,lDo),e(K2,BV),e(BV,iDo),e(K2,dDo),e(N,cDo),e(N,Z2),e(Z2,ppe),e(ppe,fDo),e(Z2,mDo),e(Z2,IV),e(IV,gDo),e(Z2,hDo),e(N,pDo),e(N,eb),e(eb,_pe),e(_pe,_Do),e(eb,uDo),e(eb,NV),e(NV,bDo),e(eb,vDo),e(N,FDo),e(N,ob),e(ob,upe),e(upe,TDo),e(ob,MDo),e(ob,qV),e(qV,EDo),e(ob,CDo),e(N,wDo),e(N,rb),e(rb,bpe),e(bpe,ADo),e(rb,LDo),e(rb,jV),e(jV,yDo),e(rb,xDo),e(N,$Do),e(N,tb),e(tb,vpe),e(vpe,kDo),e(tb,SDo),e(tb,DV),e(DV,RDo),e(tb,PDo),e(N,BDo),e(N,ab),e(ab,Fpe),e(Fpe,IDo),e(ab,NDo),e(ab,GV),e(GV,qDo),e(ab,jDo),e(N,DDo),e(N,nb),e(nb,Tpe),e(Tpe,GDo),e(nb,ODo),e(nb,OV),e(OV,VDo),e(nb,XDo),e(N,zDo),e(N,sb),e(sb,Mpe),e(Mpe,QDo),e(sb,WDo),e(sb,VV),e(VV,HDo),e(sb,UDo),e(N,JDo),e(N,lb),e(lb,Epe),e(Epe,YDo),e(lb,KDo),e(lb,XV),e(XV,ZDo),e(lb,eGo),e(N,oGo),e(N,ib),e(ib,Cpe),e(Cpe,rGo),e(ib,tGo),e(ib,zV),e(zV,aGo),e(ib,nGo),e(N,sGo),e(N,db),e(db,wpe),e(wpe,lGo),e(db,iGo),e(db,QV),e(QV,dGo),e(db,cGo),e(N,fGo),e(N,cb),e(cb,Ape),e(Ape,mGo),e(cb,gGo),e(cb,WV),e(WV,hGo),e(cb,pGo),e(N,_Go),e(N,fb),e(fb,Lpe),e(Lpe,uGo),e(fb,bGo),e(fb,HV),e(HV,vGo),e(fb,FGo),e(N,TGo),e(N,mb),e(mb,ype),e(ype,MGo),e(mb,EGo),e(mb,UV),e(UV,CGo),e(mb,wGo),e(N,AGo),e(N,gb),e(gb,xpe),e(xpe,LGo),e(gb,yGo),e(gb,JV),e(JV,xGo),e(gb,$Go),e(N,kGo),e(N,hb),e(hb,$pe),e($pe,SGo),e(hb,RGo),e(hb,YV),e(YV,PGo),e(hb,BGo),e(N,IGo),e(N,pb),e(pb,kpe),e(kpe,NGo),e(pb,qGo),e(pb,KV),e(KV,jGo),e(pb,DGo),e(N,GGo),e(N,_b),e(_b,Spe),e(Spe,OGo),e(_b,VGo),e(_b,ZV),e(ZV,XGo),e(_b,zGo),e(N,QGo),e(N,ub),e(ub,Rpe),e(Rpe,WGo),e(ub,HGo),e(ub,eX),e(eX,UGo),e(ub,JGo),e(N,YGo),e(N,bb),e(bb,Ppe),e(Ppe,KGo),e(bb,ZGo),e(bb,oX),e(oX,eOo),e(bb,oOo),e(N,rOo),e(N,vb),e(vb,Bpe),e(Bpe,tOo),e(vb,aOo),e(vb,rX),e(rX,nOo),e(vb,sOo),e(N,lOo),e(N,Fb),e(Fb,Ipe),e(Ipe,iOo),e(Fb,dOo),e(Fb,tX),e(tX,cOo),e(Fb,fOo),e(N,mOo),e(N,Tb),e(Tb,Npe),e(Npe,gOo),e(Tb,hOo),e(Tb,aX),e(aX,pOo),e(Tb,_Oo),e(N,uOo),e(N,Mb),e(Mb,qpe),e(qpe,bOo),e(Mb,vOo),e(Mb,nX),e(nX,FOo),e(Mb,TOo),e(N,MOo),e(N,Eb),e(Eb,jpe),e(jpe,EOo),e(Eb,COo),e(Eb,sX),e(sX,wOo),e(Eb,AOo),e(N,LOo),e(N,Cb),e(Cb,Dpe),e(Dpe,yOo),e(Cb,xOo),e(Cb,lX),e(lX,$Oo),e(Cb,kOo),e(N,SOo),e(N,wb),e(wb,Gpe),e(Gpe,ROo),e(wb,POo),e(wb,iX),e(iX,BOo),e(wb,IOo),e(oo,NOo),e(oo,Ab),e(Ab,qOo),e(Ab,Ope),e(Ope,jOo),e(Ab,DOo),e(Ab,Vpe),e(Vpe,GOo),e(oo,OOo),M(Lb,oo,null),b(f,HOe,u),b(f,od,u),e(od,yb),e(yb,Xpe),M(Dy,Xpe,null),e(od,VOo),e(od,zpe),e(zpe,XOo),b(f,UOe,u),b(f,Bo,u),M(Gy,Bo,null),e(Bo,zOo),e(Bo,rd),e(rd,QOo),e(rd,dX),e(dX,WOo),e(rd,HOo),e(rd,cX),e(cX,UOo),e(rd,JOo),e(Bo,YOo),e(Bo,Oy),e(Oy,KOo),e(Oy,Qpe),e(Qpe,ZOo),e(Oy,eVo),e(Bo,oVo),e(Bo,ft),M(Vy,ft,null),e(ft,rVo),e(ft,Wpe),e(Wpe,tVo),e(ft,aVo),e(ft,td),e(td,nVo),e(td,Hpe),e(Hpe,sVo),e(td,lVo),e(td,fX),e(fX,iVo),e(td,dVo),e(ft,cVo),M(xb,ft,null),e(Bo,fVo),e(Bo,ro),M(Xy,ro,null),e(ro,mVo),e(ro,Upe),e(Upe,gVo),e(ro,hVo),e(ro,ja),e(ja,pVo),e(ja,Jpe),e(Jpe,_Vo),e(ja,uVo),e(ja,Ype),e(Ype,bVo),e(ja,vVo),e(ja,Kpe),e(Kpe,FVo),e(ja,TVo),e(ro,MVo),e(ro,Z),e(Z,$b),e($b,Zpe),e(Zpe,EVo),e($b,CVo),e($b,mX),e(mX,wVo),e($b,AVo),e(Z,LVo),e(Z,kb),e(kb,e_e),e(e_e,yVo),e(kb,xVo),e(kb,gX),e(gX,$Vo),e(kb,kVo),e(Z,SVo),e(Z,Sb),e(Sb,o_e),e(o_e,RVo),e(Sb,PVo),e(Sb,hX),e(hX,BVo),e(Sb,IVo),e(Z,NVo),e(Z,Rb),e(Rb,r_e),e(r_e,qVo),e(Rb,jVo),e(Rb,pX),e(pX,DVo),e(Rb,GVo),e(Z,OVo),e(Z,Pb),e(Pb,t_e),e(t_e,VVo),e(Pb,XVo),e(Pb,_X),e(_X,zVo),e(Pb,QVo),e(Z,WVo),e(Z,Bb),e(Bb,a_e),e(a_e,HVo),e(Bb,UVo),e(Bb,uX),e(uX,JVo),e(Bb,YVo),e(Z,KVo),e(Z,Ib),e(Ib,n_e),e(n_e,ZVo),e(Ib,eXo),e(Ib,bX),e(bX,oXo),e(Ib,rXo),e(Z,tXo),e(Z,Nb),e(Nb,s_e),e(s_e,aXo),e(Nb,nXo),e(Nb,vX),e(vX,sXo),e(Nb,lXo),e(Z,iXo),e(Z,qb),e(qb,l_e),e(l_e,dXo),e(qb,cXo),e(qb,FX),e(FX,fXo),e(qb,mXo),e(Z,gXo),e(Z,jb),e(jb,i_e),e(i_e,hXo),e(jb,pXo),e(jb,TX),e(TX,_Xo),e(jb,uXo),e(Z,bXo),e(Z,Db),e(Db,d_e),e(d_e,vXo),e(Db,FXo),e(Db,MX),e(MX,TXo),e(Db,MXo),e(Z,EXo),e(Z,Gb),e(Gb,c_e),e(c_e,CXo),e(Gb,wXo),e(Gb,EX),e(EX,AXo),e(Gb,LXo),e(Z,yXo),e(Z,Ob),e(Ob,f_e),e(f_e,xXo),e(Ob,$Xo),e(Ob,CX),e(CX,kXo),e(Ob,SXo),e(Z,RXo),e(Z,Vb),e(Vb,m_e),e(m_e,PXo),e(Vb,BXo),e(Vb,wX),e(wX,IXo),e(Vb,NXo),e(Z,qXo),e(Z,Xb),e(Xb,g_e),e(g_e,jXo),e(Xb,DXo),e(Xb,AX),e(AX,GXo),e(Xb,OXo),e(Z,VXo),e(Z,zb),e(zb,h_e),e(h_e,XXo),e(zb,zXo),e(zb,LX),e(LX,QXo),e(zb,WXo),e(Z,HXo),e(Z,Qb),e(Qb,p_e),e(p_e,UXo),e(Qb,JXo),e(Qb,yX),e(yX,YXo),e(Qb,KXo),e(Z,ZXo),e(Z,Wb),e(Wb,__e),e(__e,ezo),e(Wb,ozo),e(Wb,xX),e(xX,rzo),e(Wb,tzo),e(Z,azo),e(Z,Hb),e(Hb,u_e),e(u_e,nzo),e(Hb,szo),e(Hb,$X),e($X,lzo),e(Hb,izo),e(Z,dzo),e(Z,Ub),e(Ub,b_e),e(b_e,czo),e(Ub,fzo),e(Ub,kX),e(kX,mzo),e(Ub,gzo),e(Z,hzo),e(Z,Jb),e(Jb,v_e),e(v_e,pzo),e(Jb,_zo),e(Jb,SX),e(SX,uzo),e(Jb,bzo),e(Z,vzo),e(Z,Yb),e(Yb,F_e),e(F_e,Fzo),e(Yb,Tzo),e(Yb,RX),e(RX,Mzo),e(Yb,Ezo),e(Z,Czo),e(Z,Kb),e(Kb,T_e),e(T_e,wzo),e(Kb,Azo),e(Kb,PX),e(PX,Lzo),e(Kb,yzo),e(Z,xzo),e(Z,Zb),e(Zb,M_e),e(M_e,$zo),e(Zb,kzo),e(Zb,BX),e(BX,Szo),e(Zb,Rzo),e(Z,Pzo),e(Z,e4),e(e4,E_e),e(E_e,Bzo),e(e4,Izo),e(e4,IX),e(IX,Nzo),e(e4,qzo),e(Z,jzo),e(Z,o4),e(o4,C_e),e(C_e,Dzo),e(o4,Gzo),e(o4,NX),e(NX,Ozo),e(o4,Vzo),e(Z,Xzo),e(Z,r4),e(r4,w_e),e(w_e,zzo),e(r4,Qzo),e(r4,qX),e(qX,Wzo),e(r4,Hzo),e(Z,Uzo),e(Z,t4),e(t4,A_e),e(A_e,Jzo),e(t4,Yzo),e(t4,jX),e(jX,Kzo),e(t4,Zzo),e(Z,eQo),e(Z,a4),e(a4,L_e),e(L_e,oQo),e(a4,rQo),e(a4,DX),e(DX,tQo),e(a4,aQo),e(Z,nQo),e(Z,n4),e(n4,y_e),e(y_e,sQo),e(n4,lQo),e(n4,GX),e(GX,iQo),e(n4,dQo),e(ro,cQo),e(ro,s4),e(s4,fQo),e(s4,x_e),e(x_e,mQo),e(s4,gQo),e(s4,$_e),e($_e,hQo),e(ro,pQo),M(l4,ro,null),b(f,JOe,u),b(f,ad,u),e(ad,i4),e(i4,k_e),M(zy,k_e,null),e(ad,_Qo),e(ad,S_e),e(S_e,uQo),b(f,YOe,u),b(f,Io,u),M(Qy,Io,null),e(Io,bQo),e(Io,nd),e(nd,vQo),e(nd,OX),e(OX,FQo),e(nd,TQo),e(nd,VX),e(VX,MQo),e(nd,EQo),e(Io,CQo),e(Io,Wy),e(Wy,wQo),e(Wy,R_e),e(R_e,AQo),e(Wy,LQo),e(Io,yQo),e(Io,mt),M(Hy,mt,null),e(mt,xQo),e(mt,P_e),e(P_e,$Qo),e(mt,kQo),e(mt,sd),e(sd,SQo),e(sd,B_e),e(B_e,RQo),e(sd,PQo),e(sd,XX),e(XX,BQo),e(sd,IQo),e(mt,NQo),M(d4,mt,null),e(Io,qQo),e(Io,to),M(Uy,to,null),e(to,jQo),e(to,I_e),e(I_e,DQo),e(to,GQo),e(to,Da),e(Da,OQo),e(Da,N_e),e(N_e,VQo),e(Da,XQo),e(Da,q_e),e(q_e,zQo),e(Da,QQo),e(Da,j_e),e(j_e,WQo),e(Da,HQo),e(to,UQo),e(to,No),e(No,c4),e(c4,D_e),e(D_e,JQo),e(c4,YQo),e(c4,zX),e(zX,KQo),e(c4,ZQo),e(No,eWo),e(No,f4),e(f4,G_e),e(G_e,oWo),e(f4,rWo),e(f4,QX),e(QX,tWo),e(f4,aWo),e(No,nWo),e(No,m4),e(m4,O_e),e(O_e,sWo),e(m4,lWo),e(m4,WX),e(WX,iWo),e(m4,dWo),e(No,cWo),e(No,g4),e(g4,V_e),e(V_e,fWo),e(g4,mWo),e(g4,HX),e(HX,gWo),e(g4,hWo),e(No,pWo),e(No,h4),e(h4,X_e),e(X_e,_Wo),e(h4,uWo),e(h4,UX),e(UX,bWo),e(h4,vWo),e(No,FWo),e(No,p4),e(p4,z_e),e(z_e,TWo),e(p4,MWo),e(p4,JX),e(JX,EWo),e(p4,CWo),e(to,wWo),e(to,_4),e(_4,AWo),e(_4,Q_e),e(Q_e,LWo),e(_4,yWo),e(_4,W_e),e(W_e,xWo),e(to,$Wo),M(u4,to,null),b(f,KOe,u),b(f,ld,u),e(ld,b4),e(b4,H_e),M(Jy,H_e,null),e(ld,kWo),e(ld,U_e),e(U_e,SWo),b(f,ZOe,u),b(f,qo,u),M(Yy,qo,null),e(qo,RWo),e(qo,id),e(id,PWo),e(id,YX),e(YX,BWo),e(id,IWo),e(id,KX),e(KX,NWo),e(id,qWo),e(qo,jWo),e(qo,Ky),e(Ky,DWo),e(Ky,J_e),e(J_e,GWo),e(Ky,OWo),e(qo,VWo),e(qo,gt),M(Zy,gt,null),e(gt,XWo),e(gt,Y_e),e(Y_e,zWo),e(gt,QWo),e(gt,dd),e(dd,WWo),e(dd,K_e),e(K_e,HWo),e(dd,UWo),e(dd,ZX),e(ZX,JWo),e(dd,YWo),e(gt,KWo),M(v4,gt,null),e(qo,ZWo),e(qo,ao),M(e8,ao,null),e(ao,eHo),e(ao,Z_e),e(Z_e,oHo),e(ao,rHo),e(ao,Ga),e(Ga,tHo),e(Ga,eue),e(eue,aHo),e(Ga,nHo),e(Ga,oue),e(oue,sHo),e(Ga,lHo),e(Ga,rue),e(rue,iHo),e(Ga,dHo),e(ao,cHo),e(ao,H),e(H,F4),e(F4,tue),e(tue,fHo),e(F4,mHo),e(F4,ez),e(ez,gHo),e(F4,hHo),e(H,pHo),e(H,T4),e(T4,aue),e(aue,_Ho),e(T4,uHo),e(T4,oz),e(oz,bHo),e(T4,vHo),e(H,FHo),e(H,M4),e(M4,nue),e(nue,THo),e(M4,MHo),e(M4,rz),e(rz,EHo),e(M4,CHo),e(H,wHo),e(H,E4),e(E4,sue),e(sue,AHo),e(E4,LHo),e(E4,tz),e(tz,yHo),e(E4,xHo),e(H,$Ho),e(H,C4),e(C4,lue),e(lue,kHo),e(C4,SHo),e(C4,az),e(az,RHo),e(C4,PHo),e(H,BHo),e(H,w4),e(w4,iue),e(iue,IHo),e(w4,NHo),e(w4,nz),e(nz,qHo),e(w4,jHo),e(H,DHo),e(H,A4),e(A4,due),e(due,GHo),e(A4,OHo),e(A4,sz),e(sz,VHo),e(A4,XHo),e(H,zHo),e(H,L4),e(L4,cue),e(cue,QHo),e(L4,WHo),e(L4,lz),e(lz,HHo),e(L4,UHo),e(H,JHo),e(H,y4),e(y4,fue),e(fue,YHo),e(y4,KHo),e(y4,iz),e(iz,ZHo),e(y4,eUo),e(H,oUo),e(H,x4),e(x4,mue),e(mue,rUo),e(x4,tUo),e(x4,dz),e(dz,aUo),e(x4,nUo),e(H,sUo),e(H,$4),e($4,gue),e(gue,lUo),e($4,iUo),e($4,cz),e(cz,dUo),e($4,cUo),e(H,fUo),e(H,k4),e(k4,hue),e(hue,mUo),e(k4,gUo),e(k4,fz),e(fz,hUo),e(k4,pUo),e(H,_Uo),e(H,S4),e(S4,pue),e(pue,uUo),e(S4,bUo),e(S4,mz),e(mz,vUo),e(S4,FUo),e(H,TUo),e(H,R4),e(R4,_ue),e(_ue,MUo),e(R4,EUo),e(R4,gz),e(gz,CUo),e(R4,wUo),e(H,AUo),e(H,P4),e(P4,uue),e(uue,LUo),e(P4,yUo),e(P4,hz),e(hz,xUo),e(P4,$Uo),e(H,kUo),e(H,B4),e(B4,bue),e(bue,SUo),e(B4,RUo),e(B4,pz),e(pz,PUo),e(B4,BUo),e(H,IUo),e(H,I4),e(I4,vue),e(vue,NUo),e(I4,qUo),e(I4,_z),e(_z,jUo),e(I4,DUo),e(H,GUo),e(H,N4),e(N4,Fue),e(Fue,OUo),e(N4,VUo),e(N4,uz),e(uz,XUo),e(N4,zUo),e(H,QUo),e(H,q4),e(q4,Tue),e(Tue,WUo),e(q4,HUo),e(q4,bz),e(bz,UUo),e(q4,JUo),e(H,YUo),e(H,j4),e(j4,Mue),e(Mue,KUo),e(j4,ZUo),e(j4,vz),e(vz,eJo),e(j4,oJo),e(H,rJo),e(H,D4),e(D4,Eue),e(Eue,tJo),e(D4,aJo),e(D4,Fz),e(Fz,nJo),e(D4,sJo),e(H,lJo),e(H,G4),e(G4,Cue),e(Cue,iJo),e(G4,dJo),e(G4,Tz),e(Tz,cJo),e(G4,fJo),e(H,mJo),e(H,O4),e(O4,wue),e(wue,gJo),e(O4,hJo),e(O4,Mz),e(Mz,pJo),e(O4,_Jo),e(H,uJo),e(H,V4),e(V4,Aue),e(Aue,bJo),e(V4,vJo),e(V4,Ez),e(Ez,FJo),e(V4,TJo),e(H,MJo),e(H,X4),e(X4,Lue),e(Lue,EJo),e(X4,CJo),e(X4,Cz),e(Cz,wJo),e(X4,AJo),e(H,LJo),e(H,z4),e(z4,yue),e(yue,yJo),e(z4,xJo),e(z4,wz),e(wz,$Jo),e(z4,kJo),e(H,SJo),e(H,Q4),e(Q4,xue),e(xue,RJo),e(Q4,PJo),e(Q4,Az),e(Az,BJo),e(Q4,IJo),e(H,NJo),e(H,W4),e(W4,$ue),e($ue,qJo),e(W4,jJo),e(W4,Lz),e(Lz,DJo),e(W4,GJo),e(H,OJo),e(H,H4),e(H4,kue),e(kue,VJo),e(H4,XJo),e(H4,yz),e(yz,zJo),e(H4,QJo),e(H,WJo),e(H,U4),e(U4,Sue),e(Sue,HJo),e(U4,UJo),e(U4,xz),e(xz,JJo),e(U4,YJo),e(H,KJo),e(H,J4),e(J4,Rue),e(Rue,ZJo),e(J4,eYo),e(J4,$z),e($z,oYo),e(J4,rYo),e(H,tYo),e(H,Y4),e(Y4,Pue),e(Pue,aYo),e(Y4,nYo),e(Y4,kz),e(kz,sYo),e(Y4,lYo),e(H,iYo),e(H,K4),e(K4,Bue),e(Bue,dYo),e(K4,cYo),e(K4,Sz),e(Sz,fYo),e(K4,mYo),e(H,gYo),e(H,Z4),e(Z4,Iue),e(Iue,hYo),e(Z4,pYo),e(Z4,Rz),e(Rz,_Yo),e(Z4,uYo),e(H,bYo),e(H,e3),e(e3,Nue),e(Nue,vYo),e(e3,FYo),e(e3,Pz),e(Pz,TYo),e(e3,MYo),e(H,EYo),e(H,o3),e(o3,que),e(que,CYo),e(o3,wYo),e(o3,Bz),e(Bz,AYo),e(o3,LYo),e(ao,yYo),e(ao,r3),e(r3,xYo),e(r3,jue),e(jue,$Yo),e(r3,kYo),e(r3,Due),e(Due,SYo),e(ao,RYo),M(t3,ao,null),b(f,eVe,u),b(f,cd,u),e(cd,a3),e(a3,Gue),M(o8,Gue,null),e(cd,PYo),e(cd,Oue),e(Oue,BYo),b(f,oVe,u),b(f,jo,u),M(r8,jo,null),e(jo,IYo),e(jo,fd),e(fd,NYo),e(fd,Iz),e(Iz,qYo),e(fd,jYo),e(fd,Nz),e(Nz,DYo),e(fd,GYo),e(jo,OYo),e(jo,t8),e(t8,VYo),e(t8,Vue),e(Vue,XYo),e(t8,zYo),e(jo,QYo),e(jo,ht),M(a8,ht,null),e(ht,WYo),e(ht,Xue),e(Xue,HYo),e(ht,UYo),e(ht,md),e(md,JYo),e(md,zue),e(zue,YYo),e(md,KYo),e(md,qz),e(qz,ZYo),e(md,eKo),e(ht,oKo),M(n3,ht,null),e(jo,rKo),e(jo,no),M(n8,no,null),e(no,tKo),e(no,Que),e(Que,aKo),e(no,nKo),e(no,Oa),e(Oa,sKo),e(Oa,Wue),e(Wue,lKo),e(Oa,iKo),e(Oa,Hue),e(Hue,dKo),e(Oa,cKo),e(Oa,Uue),e(Uue,fKo),e(Oa,mKo),e(no,gKo),e(no,V),e(V,s3),e(s3,Jue),e(Jue,hKo),e(s3,pKo),e(s3,jz),e(jz,_Ko),e(s3,uKo),e(V,bKo),e(V,l3),e(l3,Yue),e(Yue,vKo),e(l3,FKo),e(l3,Dz),e(Dz,TKo),e(l3,MKo),e(V,EKo),e(V,i3),e(i3,Kue),e(Kue,CKo),e(i3,wKo),e(i3,Gz),e(Gz,AKo),e(i3,LKo),e(V,yKo),e(V,d3),e(d3,Zue),e(Zue,xKo),e(d3,$Ko),e(d3,Oz),e(Oz,kKo),e(d3,SKo),e(V,RKo),e(V,c3),e(c3,e1e),e(e1e,PKo),e(c3,BKo),e(c3,Vz),e(Vz,IKo),e(c3,NKo),e(V,qKo),e(V,f3),e(f3,o1e),e(o1e,jKo),e(f3,DKo),e(f3,Xz),e(Xz,GKo),e(f3,OKo),e(V,VKo),e(V,m3),e(m3,r1e),e(r1e,XKo),e(m3,zKo),e(m3,zz),e(zz,QKo),e(m3,WKo),e(V,HKo),e(V,g3),e(g3,t1e),e(t1e,UKo),e(g3,JKo),e(g3,Qz),e(Qz,YKo),e(g3,KKo),e(V,ZKo),e(V,h3),e(h3,a1e),e(a1e,eZo),e(h3,oZo),e(h3,Wz),e(Wz,rZo),e(h3,tZo),e(V,aZo),e(V,p3),e(p3,n1e),e(n1e,nZo),e(p3,sZo),e(p3,Hz),e(Hz,lZo),e(p3,iZo),e(V,dZo),e(V,_3),e(_3,s1e),e(s1e,cZo),e(_3,fZo),e(_3,Uz),e(Uz,mZo),e(_3,gZo),e(V,hZo),e(V,u3),e(u3,l1e),e(l1e,pZo),e(u3,_Zo),e(u3,Jz),e(Jz,uZo),e(u3,bZo),e(V,vZo),e(V,b3),e(b3,i1e),e(i1e,FZo),e(b3,TZo),e(b3,Yz),e(Yz,MZo),e(b3,EZo),e(V,CZo),e(V,v3),e(v3,d1e),e(d1e,wZo),e(v3,AZo),e(v3,Kz),e(Kz,LZo),e(v3,yZo),e(V,xZo),e(V,F3),e(F3,c1e),e(c1e,$Zo),e(F3,kZo),e(F3,Zz),e(Zz,SZo),e(F3,RZo),e(V,PZo),e(V,T3),e(T3,f1e),e(f1e,BZo),e(T3,IZo),e(T3,eQ),e(eQ,NZo),e(T3,qZo),e(V,jZo),e(V,M3),e(M3,m1e),e(m1e,DZo),e(M3,GZo),e(M3,oQ),e(oQ,OZo),e(M3,VZo),e(V,XZo),e(V,E3),e(E3,g1e),e(g1e,zZo),e(E3,QZo),e(E3,rQ),e(rQ,WZo),e(E3,HZo),e(V,UZo),e(V,C3),e(C3,h1e),e(h1e,JZo),e(C3,YZo),e(C3,tQ),e(tQ,KZo),e(C3,ZZo),e(V,eer),e(V,w3),e(w3,p1e),e(p1e,oer),e(w3,rer),e(w3,aQ),e(aQ,ter),e(w3,aer),e(V,ner),e(V,A3),e(A3,_1e),e(_1e,ser),e(A3,ler),e(A3,nQ),e(nQ,ier),e(A3,der),e(V,cer),e(V,L3),e(L3,u1e),e(u1e,fer),e(L3,mer),e(L3,sQ),e(sQ,ger),e(L3,her),e(V,per),e(V,y3),e(y3,b1e),e(b1e,_er),e(y3,uer),e(y3,lQ),e(lQ,ber),e(y3,ver),e(V,Fer),e(V,x3),e(x3,v1e),e(v1e,Ter),e(x3,Mer),e(x3,iQ),e(iQ,Eer),e(x3,Cer),e(V,wer),e(V,$3),e($3,F1e),e(F1e,Aer),e($3,Ler),e($3,dQ),e(dQ,yer),e($3,xer),e(V,$er),e(V,k3),e(k3,T1e),e(T1e,ker),e(k3,Ser),e(k3,cQ),e(cQ,Rer),e(k3,Per),e(V,Ber),e(V,S3),e(S3,M1e),e(M1e,Ier),e(S3,Ner),e(S3,fQ),e(fQ,qer),e(S3,jer),e(V,Der),e(V,R3),e(R3,E1e),e(E1e,Ger),e(R3,Oer),e(R3,mQ),e(mQ,Ver),e(R3,Xer),e(V,zer),e(V,P3),e(P3,C1e),e(C1e,Qer),e(P3,Wer),e(P3,gQ),e(gQ,Her),e(P3,Uer),e(V,Jer),e(V,B3),e(B3,w1e),e(w1e,Yer),e(B3,Ker),e(B3,hQ),e(hQ,Zer),e(B3,eor),e(V,oor),e(V,I3),e(I3,A1e),e(A1e,ror),e(I3,tor),e(I3,pQ),e(pQ,aor),e(I3,nor),e(V,sor),e(V,N3),e(N3,L1e),e(L1e,lor),e(N3,ior),e(N3,_Q),e(_Q,dor),e(N3,cor),e(V,mor),e(V,q3),e(q3,y1e),e(y1e,gor),e(q3,hor),e(q3,uQ),e(uQ,por),e(q3,_or),e(V,uor),e(V,j3),e(j3,x1e),e(x1e,bor),e(j3,vor),e(j3,bQ),e(bQ,For),e(j3,Tor),e(V,Mor),e(V,D3),e(D3,$1e),e($1e,Eor),e(D3,Cor),e(D3,vQ),e(vQ,wor),e(D3,Aor),e(V,Lor),e(V,G3),e(G3,k1e),e(k1e,yor),e(G3,xor),e(G3,FQ),e(FQ,$or),e(G3,kor),e(V,Sor),e(V,O3),e(O3,S1e),e(S1e,Ror),e(O3,Por),e(O3,TQ),e(TQ,Bor),e(O3,Ior),e(V,Nor),e(V,V3),e(V3,R1e),e(R1e,qor),e(V3,jor),e(V3,MQ),e(MQ,Dor),e(V3,Gor),e(V,Oor),e(V,X3),e(X3,P1e),e(P1e,Vor),e(X3,Xor),e(X3,EQ),e(EQ,zor),e(X3,Qor),e(V,Wor),e(V,z3),e(z3,B1e),e(B1e,Hor),e(z3,Uor),e(z3,CQ),e(CQ,Jor),e(z3,Yor),e(V,Kor),e(V,Q3),e(Q3,I1e),e(I1e,Zor),e(Q3,err),e(Q3,wQ),e(wQ,orr),e(Q3,rrr),e(no,trr),e(no,W3),e(W3,arr),e(W3,N1e),e(N1e,nrr),e(W3,srr),e(W3,q1e),e(q1e,lrr),e(no,irr),M(H3,no,null),b(f,rVe,u),b(f,gd,u),e(gd,U3),e(U3,j1e),M(s8,j1e,null),e(gd,drr),e(gd,D1e),e(D1e,crr),b(f,tVe,u),b(f,Do,u),M(l8,Do,null),e(Do,frr),e(Do,hd),e(hd,mrr),e(hd,AQ),e(AQ,grr),e(hd,hrr),e(hd,LQ),e(LQ,prr),e(hd,_rr),e(Do,urr),e(Do,i8),e(i8,brr),e(i8,G1e),e(G1e,vrr),e(i8,Frr),e(Do,Trr),e(Do,pt),M(d8,pt,null),e(pt,Mrr),e(pt,O1e),e(O1e,Err),e(pt,Crr),e(pt,pd),e(pd,wrr),e(pd,V1e),e(V1e,Arr),e(pd,Lrr),e(pd,yQ),e(yQ,yrr),e(pd,xrr),e(pt,$rr),M(J3,pt,null),e(Do,krr),e(Do,so),M(c8,so,null),e(so,Srr),e(so,X1e),e(X1e,Rrr),e(so,Prr),e(so,Va),e(Va,Brr),e(Va,z1e),e(z1e,Irr),e(Va,Nrr),e(Va,Q1e),e(Q1e,qrr),e(Va,jrr),e(Va,W1e),e(W1e,Drr),e(Va,Grr),e(so,Orr),e(so,H1e),e(H1e,Y3),e(Y3,U1e),e(U1e,Vrr),e(Y3,Xrr),e(Y3,xQ),e(xQ,zrr),e(Y3,Qrr),e(so,Wrr),e(so,K3),e(K3,Hrr),e(K3,J1e),e(J1e,Urr),e(K3,Jrr),e(K3,Y1e),e(Y1e,Yrr),e(so,Krr),M(Z3,so,null),b(f,aVe,u),b(f,_d,u),e(_d,ev),e(ev,K1e),M(f8,K1e,null),e(_d,Zrr),e(_d,Z1e),e(Z1e,etr),b(f,nVe,u),b(f,Go,u),M(m8,Go,null),e(Go,otr),e(Go,ud),e(ud,rtr),e(ud,$Q),e($Q,ttr),e(ud,atr),e(ud,kQ),e(kQ,ntr),e(ud,str),e(Go,ltr),e(Go,g8),e(g8,itr),e(g8,e7e),e(e7e,dtr),e(g8,ctr),e(Go,ftr),e(Go,_t),M(h8,_t,null),e(_t,mtr),e(_t,o7e),e(o7e,gtr),e(_t,htr),e(_t,bd),e(bd,ptr),e(bd,r7e),e(r7e,_tr),e(bd,utr),e(bd,SQ),e(SQ,btr),e(bd,vtr),e(_t,Ftr),M(ov,_t,null),e(Go,Ttr),e(Go,lo),M(p8,lo,null),e(lo,Mtr),e(lo,t7e),e(t7e,Etr),e(lo,Ctr),e(lo,Xa),e(Xa,wtr),e(Xa,a7e),e(a7e,Atr),e(Xa,Ltr),e(Xa,n7e),e(n7e,ytr),e(Xa,xtr),e(Xa,s7e),e(s7e,$tr),e(Xa,ktr),e(lo,Str),e(lo,Fe),e(Fe,rv),e(rv,l7e),e(l7e,Rtr),e(rv,Ptr),e(rv,RQ),e(RQ,Btr),e(rv,Itr),e(Fe,Ntr),e(Fe,tv),e(tv,i7e),e(i7e,qtr),e(tv,jtr),e(tv,PQ),e(PQ,Dtr),e(tv,Gtr),e(Fe,Otr),e(Fe,av),e(av,d7e),e(d7e,Vtr),e(av,Xtr),e(av,BQ),e(BQ,ztr),e(av,Qtr),e(Fe,Wtr),e(Fe,nv),e(nv,c7e),e(c7e,Htr),e(nv,Utr),e(nv,IQ),e(IQ,Jtr),e(nv,Ytr),e(Fe,Ktr),e(Fe,Qs),e(Qs,f7e),e(f7e,Ztr),e(Qs,ear),e(Qs,NQ),e(NQ,oar),e(Qs,rar),e(Qs,qQ),e(qQ,tar),e(Qs,aar),e(Fe,nar),e(Fe,sv),e(sv,m7e),e(m7e,sar),e(sv,lar),e(sv,jQ),e(jQ,iar),e(sv,dar),e(Fe,car),e(Fe,Ws),e(Ws,g7e),e(g7e,far),e(Ws,mar),e(Ws,DQ),e(DQ,gar),e(Ws,har),e(Ws,GQ),e(GQ,par),e(Ws,_ar),e(Fe,uar),e(Fe,ut),e(ut,h7e),e(h7e,bar),e(ut,Far),e(ut,OQ),e(OQ,Tar),e(ut,Mar),e(ut,VQ),e(VQ,Ear),e(ut,Car),e(ut,XQ),e(XQ,war),e(ut,Aar),e(Fe,Lar),e(Fe,lv),e(lv,p7e),e(p7e,yar),e(lv,xar),e(lv,zQ),e(zQ,$ar),e(lv,kar),e(Fe,Sar),e(Fe,iv),e(iv,_7e),e(_7e,Rar),e(iv,Par),e(iv,QQ),e(QQ,Bar),e(iv,Iar),e(Fe,Nar),e(Fe,dv),e(dv,u7e),e(u7e,qar),e(dv,jar),e(dv,WQ),e(WQ,Dar),e(dv,Gar),e(Fe,Oar),e(Fe,cv),e(cv,b7e),e(b7e,Var),e(cv,Xar),e(cv,HQ),e(HQ,zar),e(cv,Qar),e(Fe,War),e(Fe,fv),e(fv,v7e),e(v7e,Har),e(fv,Uar),e(fv,UQ),e(UQ,Jar),e(fv,Yar),e(Fe,Kar),e(Fe,mv),e(mv,F7e),e(F7e,Zar),e(mv,enr),e(mv,JQ),e(JQ,onr),e(mv,rnr),e(Fe,tnr),e(Fe,gv),e(gv,T7e),e(T7e,anr),e(gv,nnr),e(gv,YQ),e(YQ,snr),e(gv,lnr),e(lo,inr),e(lo,hv),e(hv,dnr),e(hv,M7e),e(M7e,cnr),e(hv,fnr),e(hv,E7e),e(E7e,mnr),e(lo,gnr),M(pv,lo,null),b(f,sVe,u),b(f,vd,u),e(vd,_v),e(_v,C7e),M(_8,C7e,null),e(vd,hnr),e(vd,w7e),e(w7e,pnr),b(f,lVe,u),b(f,Oo,u),M(u8,Oo,null),e(Oo,_nr),e(Oo,Fd),e(Fd,unr),e(Fd,KQ),e(KQ,bnr),e(Fd,vnr),e(Fd,ZQ),e(ZQ,Fnr),e(Fd,Tnr),e(Oo,Mnr),e(Oo,b8),e(b8,Enr),e(b8,A7e),e(A7e,Cnr),e(b8,wnr),e(Oo,Anr),e(Oo,bt),M(v8,bt,null),e(bt,Lnr),e(bt,L7e),e(L7e,ynr),e(bt,xnr),e(bt,Td),e(Td,$nr),e(Td,y7e),e(y7e,knr),e(Td,Snr),e(Td,eW),e(eW,Rnr),e(Td,Pnr),e(bt,Bnr),M(uv,bt,null),e(Oo,Inr),e(Oo,io),M(F8,io,null),e(io,Nnr),e(io,x7e),e(x7e,qnr),e(io,jnr),e(io,za),e(za,Dnr),e(za,$7e),e($7e,Gnr),e(za,Onr),e(za,k7e),e(k7e,Vnr),e(za,Xnr),e(za,S7e),e(S7e,znr),e(za,Qnr),e(io,Wnr),e(io,R7e),e(R7e,bv),e(bv,P7e),e(P7e,Hnr),e(bv,Unr),e(bv,oW),e(oW,Jnr),e(bv,Ynr),e(io,Knr),e(io,vv),e(vv,Znr),e(vv,B7e),e(B7e,esr),e(vv,osr),e(vv,I7e),e(I7e,rsr),e(io,tsr),M(Fv,io,null),b(f,iVe,u),b(f,Md,u),e(Md,Tv),e(Tv,N7e),M(T8,N7e,null),e(Md,asr),e(Md,q7e),e(q7e,nsr),b(f,dVe,u),b(f,Vo,u),M(M8,Vo,null),e(Vo,ssr),e(Vo,Ed),e(Ed,lsr),e(Ed,rW),e(rW,isr),e(Ed,dsr),e(Ed,tW),e(tW,csr),e(Ed,fsr),e(Vo,msr),e(Vo,E8),e(E8,gsr),e(E8,j7e),e(j7e,hsr),e(E8,psr),e(Vo,_sr),e(Vo,vt),M(C8,vt,null),e(vt,usr),e(vt,D7e),e(D7e,bsr),e(vt,vsr),e(vt,Cd),e(Cd,Fsr),e(Cd,G7e),e(G7e,Tsr),e(Cd,Msr),e(Cd,aW),e(aW,Esr),e(Cd,Csr),e(vt,wsr),M(Mv,vt,null),e(Vo,Asr),e(Vo,co),M(w8,co,null),e(co,Lsr),e(co,O7e),e(O7e,ysr),e(co,xsr),e(co,Qa),e(Qa,$sr),e(Qa,V7e),e(V7e,ksr),e(Qa,Ssr),e(Qa,X7e),e(X7e,Rsr),e(Qa,Psr),e(Qa,z7e),e(z7e,Bsr),e(Qa,Isr),e(co,Nsr),e(co,Q7e),e(Q7e,Ev),e(Ev,W7e),e(W7e,qsr),e(Ev,jsr),e(Ev,nW),e(nW,Dsr),e(Ev,Gsr),e(co,Osr),e(co,Cv),e(Cv,Vsr),e(Cv,H7e),e(H7e,Xsr),e(Cv,zsr),e(Cv,U7e),e(U7e,Qsr),e(co,Wsr),M(wv,co,null),b(f,cVe,u),b(f,wd,u),e(wd,Av),e(Av,J7e),M(A8,J7e,null),e(wd,Hsr),e(wd,Y7e),e(Y7e,Usr),b(f,fVe,u),b(f,Xo,u),M(L8,Xo,null),e(Xo,Jsr),e(Xo,Ad),e(Ad,Ysr),e(Ad,sW),e(sW,Ksr),e(Ad,Zsr),e(Ad,lW),e(lW,elr),e(Ad,olr),e(Xo,rlr),e(Xo,y8),e(y8,tlr),e(y8,K7e),e(K7e,alr),e(y8,nlr),e(Xo,slr),e(Xo,Ft),M(x8,Ft,null),e(Ft,llr),e(Ft,Z7e),e(Z7e,ilr),e(Ft,dlr),e(Ft,Ld),e(Ld,clr),e(Ld,e2e),e(e2e,flr),e(Ld,mlr),e(Ld,iW),e(iW,glr),e(Ld,hlr),e(Ft,plr),M(Lv,Ft,null),e(Xo,_lr),e(Xo,fo),M($8,fo,null),e(fo,ulr),e(fo,o2e),e(o2e,blr),e(fo,vlr),e(fo,Wa),e(Wa,Flr),e(Wa,r2e),e(r2e,Tlr),e(Wa,Mlr),e(Wa,t2e),e(t2e,Elr),e(Wa,Clr),e(Wa,a2e),e(a2e,wlr),e(Wa,Alr),e(fo,Llr),e(fo,Pe),e(Pe,yv),e(yv,n2e),e(n2e,ylr),e(yv,xlr),e(yv,dW),e(dW,$lr),e(yv,klr),e(Pe,Slr),e(Pe,xv),e(xv,s2e),e(s2e,Rlr),e(xv,Plr),e(xv,cW),e(cW,Blr),e(xv,Ilr),e(Pe,Nlr),e(Pe,$v),e($v,l2e),e(l2e,qlr),e($v,jlr),e($v,fW),e(fW,Dlr),e($v,Glr),e(Pe,Olr),e(Pe,kv),e(kv,i2e),e(i2e,Vlr),e(kv,Xlr),e(kv,mW),e(mW,zlr),e(kv,Qlr),e(Pe,Wlr),e(Pe,Sv),e(Sv,d2e),e(d2e,Hlr),e(Sv,Ulr),e(Sv,gW),e(gW,Jlr),e(Sv,Ylr),e(Pe,Klr),e(Pe,Rv),e(Rv,c2e),e(c2e,Zlr),e(Rv,eir),e(Rv,hW),e(hW,oir),e(Rv,rir),e(Pe,tir),e(Pe,Pv),e(Pv,f2e),e(f2e,air),e(Pv,nir),e(Pv,pW),e(pW,sir),e(Pv,lir),e(Pe,iir),e(Pe,Bv),e(Bv,m2e),e(m2e,dir),e(Bv,cir),e(Bv,_W),e(_W,fir),e(Bv,mir),e(Pe,gir),e(Pe,Iv),e(Iv,g2e),e(g2e,hir),e(Iv,pir),e(Iv,uW),e(uW,_ir),e(Iv,uir),e(fo,bir),e(fo,Nv),e(Nv,vir),e(Nv,h2e),e(h2e,Fir),e(Nv,Tir),e(Nv,p2e),e(p2e,Mir),e(fo,Eir),M(qv,fo,null),b(f,mVe,u),b(f,yd,u),e(yd,jv),e(jv,_2e),M(k8,_2e,null),e(yd,Cir),e(yd,u2e),e(u2e,wir),b(f,gVe,u),b(f,zo,u),M(S8,zo,null),e(zo,Air),e(zo,xd),e(xd,Lir),e(xd,bW),e(bW,yir),e(xd,xir),e(xd,vW),e(vW,$ir),e(xd,kir),e(zo,Sir),e(zo,R8),e(R8,Rir),e(R8,b2e),e(b2e,Pir),e(R8,Bir),e(zo,Iir),e(zo,Tt),M(P8,Tt,null),e(Tt,Nir),e(Tt,v2e),e(v2e,qir),e(Tt,jir),e(Tt,$d),e($d,Dir),e($d,F2e),e(F2e,Gir),e($d,Oir),e($d,FW),e(FW,Vir),e($d,Xir),e(Tt,zir),M(Dv,Tt,null),e(zo,Qir),e(zo,mo),M(B8,mo,null),e(mo,Wir),e(mo,T2e),e(T2e,Hir),e(mo,Uir),e(mo,Ha),e(Ha,Jir),e(Ha,M2e),e(M2e,Yir),e(Ha,Kir),e(Ha,E2e),e(E2e,Zir),e(Ha,edr),e(Ha,C2e),e(C2e,odr),e(Ha,rdr),e(mo,tdr),e(mo,et),e(et,Gv),e(Gv,w2e),e(w2e,adr),e(Gv,ndr),e(Gv,TW),e(TW,sdr),e(Gv,ldr),e(et,idr),e(et,Ov),e(Ov,A2e),e(A2e,ddr),e(Ov,cdr),e(Ov,MW),e(MW,fdr),e(Ov,mdr),e(et,gdr),e(et,Vv),e(Vv,L2e),e(L2e,hdr),e(Vv,pdr),e(Vv,EW),e(EW,_dr),e(Vv,udr),e(et,bdr),e(et,Xv),e(Xv,y2e),e(y2e,vdr),e(Xv,Fdr),e(Xv,CW),e(CW,Tdr),e(Xv,Mdr),e(et,Edr),e(et,zv),e(zv,x2e),e(x2e,Cdr),e(zv,wdr),e(zv,wW),e(wW,Adr),e(zv,Ldr),e(mo,ydr),e(mo,Qv),e(Qv,xdr),e(Qv,$2e),e($2e,$dr),e(Qv,kdr),e(Qv,k2e),e(k2e,Sdr),e(mo,Rdr),M(Wv,mo,null),b(f,hVe,u),b(f,kd,u),e(kd,Hv),e(Hv,S2e),M(I8,S2e,null),e(kd,Pdr),e(kd,R2e),e(R2e,Bdr),b(f,pVe,u),b(f,Qo,u),M(N8,Qo,null),e(Qo,Idr),e(Qo,Sd),e(Sd,Ndr),e(Sd,AW),e(AW,qdr),e(Sd,jdr),e(Sd,LW),e(LW,Ddr),e(Sd,Gdr),e(Qo,Odr),e(Qo,q8),e(q8,Vdr),e(q8,P2e),e(P2e,Xdr),e(q8,zdr),e(Qo,Qdr),e(Qo,Mt),M(j8,Mt,null),e(Mt,Wdr),e(Mt,B2e),e(B2e,Hdr),e(Mt,Udr),e(Mt,Rd),e(Rd,Jdr),e(Rd,I2e),e(I2e,Ydr),e(Rd,Kdr),e(Rd,yW),e(yW,Zdr),e(Rd,ecr),e(Mt,ocr),M(Uv,Mt,null),e(Qo,rcr),e(Qo,go),M(D8,go,null),e(go,tcr),e(go,N2e),e(N2e,acr),e(go,ncr),e(go,Ua),e(Ua,scr),e(Ua,q2e),e(q2e,lcr),e(Ua,icr),e(Ua,j2e),e(j2e,dcr),e(Ua,ccr),e(Ua,D2e),e(D2e,fcr),e(Ua,mcr),e(go,gcr),e(go,Le),e(Le,Jv),e(Jv,G2e),e(G2e,hcr),e(Jv,pcr),e(Jv,xW),e(xW,_cr),e(Jv,ucr),e(Le,bcr),e(Le,Yv),e(Yv,O2e),e(O2e,vcr),e(Yv,Fcr),e(Yv,$W),e($W,Tcr),e(Yv,Mcr),e(Le,Ecr),e(Le,Kv),e(Kv,V2e),e(V2e,Ccr),e(Kv,wcr),e(Kv,kW),e(kW,Acr),e(Kv,Lcr),e(Le,ycr),e(Le,Zv),e(Zv,X2e),e(X2e,xcr),e(Zv,$cr),e(Zv,SW),e(SW,kcr),e(Zv,Scr),e(Le,Rcr),e(Le,eF),e(eF,z2e),e(z2e,Pcr),e(eF,Bcr),e(eF,RW),e(RW,Icr),e(eF,Ncr),e(Le,qcr),e(Le,oF),e(oF,Q2e),e(Q2e,jcr),e(oF,Dcr),e(oF,PW),e(PW,Gcr),e(oF,Ocr),e(Le,Vcr),e(Le,rF),e(rF,W2e),e(W2e,Xcr),e(rF,zcr),e(rF,BW),e(BW,Qcr),e(rF,Wcr),e(Le,Hcr),e(Le,tF),e(tF,H2e),e(H2e,Ucr),e(tF,Jcr),e(tF,IW),e(IW,Ycr),e(tF,Kcr),e(Le,Zcr),e(Le,aF),e(aF,U2e),e(U2e,efr),e(aF,ofr),e(aF,NW),e(NW,rfr),e(aF,tfr),e(Le,afr),e(Le,nF),e(nF,J2e),e(J2e,nfr),e(nF,sfr),e(nF,qW),e(qW,lfr),e(nF,ifr),e(go,dfr),e(go,sF),e(sF,cfr),e(sF,Y2e),e(Y2e,ffr),e(sF,mfr),e(sF,K2e),e(K2e,gfr),e(go,hfr),M(lF,go,null),b(f,_Ve,u),b(f,Pd,u),e(Pd,iF),e(iF,Z2e),M(G8,Z2e,null),e(Pd,pfr),e(Pd,ebe),e(ebe,_fr),b(f,uVe,u),b(f,Wo,u),M(O8,Wo,null),e(Wo,ufr),e(Wo,Bd),e(Bd,bfr),e(Bd,jW),e(jW,vfr),e(Bd,Ffr),e(Bd,DW),e(DW,Tfr),e(Bd,Mfr),e(Wo,Efr),e(Wo,V8),e(V8,Cfr),e(V8,obe),e(obe,wfr),e(V8,Afr),e(Wo,Lfr),e(Wo,Et),M(X8,Et,null),e(Et,yfr),e(Et,rbe),e(rbe,xfr),e(Et,$fr),e(Et,Id),e(Id,kfr),e(Id,tbe),e(tbe,Sfr),e(Id,Rfr),e(Id,GW),e(GW,Pfr),e(Id,Bfr),e(Et,Ifr),M(dF,Et,null),e(Wo,Nfr),e(Wo,ho),M(z8,ho,null),e(ho,qfr),e(ho,abe),e(abe,jfr),e(ho,Dfr),e(ho,Ja),e(Ja,Gfr),e(Ja,nbe),e(nbe,Ofr),e(Ja,Vfr),e(Ja,sbe),e(sbe,Xfr),e(Ja,zfr),e(Ja,lbe),e(lbe,Qfr),e(Ja,Wfr),e(ho,Hfr),e(ho,Q8),e(Q8,cF),e(cF,ibe),e(ibe,Ufr),e(cF,Jfr),e(cF,OW),e(OW,Yfr),e(cF,Kfr),e(Q8,Zfr),e(Q8,fF),e(fF,dbe),e(dbe,emr),e(fF,omr),e(fF,VW),e(VW,rmr),e(fF,tmr),e(ho,amr),e(ho,mF),e(mF,nmr),e(mF,cbe),e(cbe,smr),e(mF,lmr),e(mF,fbe),e(fbe,imr),e(ho,dmr),M(gF,ho,null),b(f,bVe,u),b(f,Nd,u),e(Nd,hF),e(hF,mbe),M(W8,mbe,null),e(Nd,cmr),e(Nd,gbe),e(gbe,fmr),b(f,vVe,u),b(f,Ho,u),M(H8,Ho,null),e(Ho,mmr),e(Ho,qd),e(qd,gmr),e(qd,XW),e(XW,hmr),e(qd,pmr),e(qd,zW),e(zW,_mr),e(qd,umr),e(Ho,bmr),e(Ho,U8),e(U8,vmr),e(U8,hbe),e(hbe,Fmr),e(U8,Tmr),e(Ho,Mmr),e(Ho,Ct),M(J8,Ct,null),e(Ct,Emr),e(Ct,pbe),e(pbe,Cmr),e(Ct,wmr),e(Ct,jd),e(jd,Amr),e(jd,_be),e(_be,Lmr),e(jd,ymr),e(jd,QW),e(QW,xmr),e(jd,$mr),e(Ct,kmr),M(pF,Ct,null),e(Ho,Smr),e(Ho,po),M(Y8,po,null),e(po,Rmr),e(po,ube),e(ube,Pmr),e(po,Bmr),e(po,Ya),e(Ya,Imr),e(Ya,bbe),e(bbe,Nmr),e(Ya,qmr),e(Ya,vbe),e(vbe,jmr),e(Ya,Dmr),e(Ya,Fbe),e(Fbe,Gmr),e(Ya,Omr),e(po,Vmr),e(po,ot),e(ot,_F),e(_F,Tbe),e(Tbe,Xmr),e(_F,zmr),e(_F,WW),e(WW,Qmr),e(_F,Wmr),e(ot,Hmr),e(ot,uF),e(uF,Mbe),e(Mbe,Umr),e(uF,Jmr),e(uF,HW),e(HW,Ymr),e(uF,Kmr),e(ot,Zmr),e(ot,bF),e(bF,Ebe),e(Ebe,egr),e(bF,ogr),e(bF,UW),e(UW,rgr),e(bF,tgr),e(ot,agr),e(ot,vF),e(vF,Cbe),e(Cbe,ngr),e(vF,sgr),e(vF,JW),e(JW,lgr),e(vF,igr),e(ot,dgr),e(ot,FF),e(FF,wbe),e(wbe,cgr),e(FF,fgr),e(FF,YW),e(YW,mgr),e(FF,ggr),e(po,hgr),e(po,TF),e(TF,pgr),e(TF,Abe),e(Abe,_gr),e(TF,ugr),e(TF,Lbe),e(Lbe,bgr),e(po,vgr),M(MF,po,null),b(f,FVe,u),b(f,Dd,u),e(Dd,EF),e(EF,ybe),M(K8,ybe,null),e(Dd,Fgr),e(Dd,xbe),e(xbe,Tgr),b(f,TVe,u),b(f,Uo,u),M(Z8,Uo,null),e(Uo,Mgr),e(Uo,Gd),e(Gd,Egr),e(Gd,KW),e(KW,Cgr),e(Gd,wgr),e(Gd,ZW),e(ZW,Agr),e(Gd,Lgr),e(Uo,ygr),e(Uo,e9),e(e9,xgr),e(e9,$be),e($be,$gr),e(e9,kgr),e(Uo,Sgr),e(Uo,wt),M(o9,wt,null),e(wt,Rgr),e(wt,kbe),e(kbe,Pgr),e(wt,Bgr),e(wt,Od),e(Od,Igr),e(Od,Sbe),e(Sbe,Ngr),e(Od,qgr),e(Od,eH),e(eH,jgr),e(Od,Dgr),e(wt,Ggr),M(CF,wt,null),e(Uo,Ogr),e(Uo,_o),M(r9,_o,null),e(_o,Vgr),e(_o,Rbe),e(Rbe,Xgr),e(_o,zgr),e(_o,Ka),e(Ka,Qgr),e(Ka,Pbe),e(Pbe,Wgr),e(Ka,Hgr),e(Ka,Bbe),e(Bbe,Ugr),e(Ka,Jgr),e(Ka,Ibe),e(Ibe,Ygr),e(Ka,Kgr),e(_o,Zgr),e(_o,Vd),e(Vd,wF),e(wF,Nbe),e(Nbe,ehr),e(wF,ohr),e(wF,oH),e(oH,rhr),e(wF,thr),e(Vd,ahr),e(Vd,AF),e(AF,qbe),e(qbe,nhr),e(AF,shr),e(AF,rH),e(rH,lhr),e(AF,ihr),e(Vd,dhr),e(Vd,LF),e(LF,jbe),e(jbe,chr),e(LF,fhr),e(LF,tH),e(tH,mhr),e(LF,ghr),e(_o,hhr),e(_o,yF),e(yF,phr),e(yF,Dbe),e(Dbe,_hr),e(yF,uhr),e(yF,Gbe),e(Gbe,bhr),e(_o,vhr),M(xF,_o,null),b(f,MVe,u),b(f,Xd,u),e(Xd,$F),e($F,Obe),M(t9,Obe,null),e(Xd,Fhr),e(Xd,Vbe),e(Vbe,Thr),b(f,EVe,u),b(f,Jo,u),M(a9,Jo,null),e(Jo,Mhr),e(Jo,zd),e(zd,Ehr),e(zd,aH),e(aH,Chr),e(zd,whr),e(zd,nH),e(nH,Ahr),e(zd,Lhr),e(Jo,yhr),e(Jo,n9),e(n9,xhr),e(n9,Xbe),e(Xbe,$hr),e(n9,khr),e(Jo,Shr),e(Jo,At),M(s9,At,null),e(At,Rhr),e(At,zbe),e(zbe,Phr),e(At,Bhr),e(At,Qd),e(Qd,Ihr),e(Qd,Qbe),e(Qbe,Nhr),e(Qd,qhr),e(Qd,sH),e(sH,jhr),e(Qd,Dhr),e(At,Ghr),M(kF,At,null),e(Jo,Ohr),e(Jo,uo),M(l9,uo,null),e(uo,Vhr),e(uo,Wbe),e(Wbe,Xhr),e(uo,zhr),e(uo,Za),e(Za,Qhr),e(Za,Hbe),e(Hbe,Whr),e(Za,Hhr),e(Za,Ube),e(Ube,Uhr),e(Za,Jhr),e(Za,Jbe),e(Jbe,Yhr),e(Za,Khr),e(uo,Zhr),e(uo,i9),e(i9,SF),e(SF,Ybe),e(Ybe,epr),e(SF,opr),e(SF,lH),e(lH,rpr),e(SF,tpr),e(i9,apr),e(i9,RF),e(RF,Kbe),e(Kbe,npr),e(RF,spr),e(RF,iH),e(iH,lpr),e(RF,ipr),e(uo,dpr),e(uo,PF),e(PF,cpr),e(PF,Zbe),e(Zbe,fpr),e(PF,mpr),e(PF,e4e),e(e4e,gpr),e(uo,hpr),M(BF,uo,null),b(f,CVe,u),b(f,Wd,u),e(Wd,IF),e(IF,o4e),M(d9,o4e,null),e(Wd,ppr),e(Wd,r4e),e(r4e,_pr),b(f,wVe,u),b(f,Yo,u),M(c9,Yo,null),e(Yo,upr),e(Yo,Hd),e(Hd,bpr),e(Hd,dH),e(dH,vpr),e(Hd,Fpr),e(Hd,cH),e(cH,Tpr),e(Hd,Mpr),e(Yo,Epr),e(Yo,f9),e(f9,Cpr),e(f9,t4e),e(t4e,wpr),e(f9,Apr),e(Yo,Lpr),e(Yo,Lt),M(m9,Lt,null),e(Lt,ypr),e(Lt,a4e),e(a4e,xpr),e(Lt,$pr),e(Lt,Ud),e(Ud,kpr),e(Ud,n4e),e(n4e,Spr),e(Ud,Rpr),e(Ud,fH),e(fH,Ppr),e(Ud,Bpr),e(Lt,Ipr),M(NF,Lt,null),e(Yo,Npr),e(Yo,bo),M(g9,bo,null),e(bo,qpr),e(bo,s4e),e(s4e,jpr),e(bo,Dpr),e(bo,en),e(en,Gpr),e(en,l4e),e(l4e,Opr),e(en,Vpr),e(en,i4e),e(i4e,Xpr),e(en,zpr),e(en,d4e),e(d4e,Qpr),e(en,Wpr),e(bo,Hpr),e(bo,c4e),e(c4e,qF),e(qF,f4e),e(f4e,Upr),e(qF,Jpr),e(qF,mH),e(mH,Ypr),e(qF,Kpr),e(bo,Zpr),e(bo,jF),e(jF,e_r),e(jF,m4e),e(m4e,o_r),e(jF,r_r),e(jF,g4e),e(g4e,t_r),e(bo,a_r),M(DF,bo,null),b(f,AVe,u),b(f,Jd,u),e(Jd,GF),e(GF,h4e),M(h9,h4e,null),e(Jd,n_r),e(Jd,p4e),e(p4e,s_r),b(f,LVe,u),b(f,Ko,u),M(p9,Ko,null),e(Ko,l_r),e(Ko,Yd),e(Yd,i_r),e(Yd,gH),e(gH,d_r),e(Yd,c_r),e(Yd,hH),e(hH,f_r),e(Yd,m_r),e(Ko,g_r),e(Ko,_9),e(_9,h_r),e(_9,_4e),e(_4e,p_r),e(_9,__r),e(Ko,u_r),e(Ko,yt),M(u9,yt,null),e(yt,b_r),e(yt,u4e),e(u4e,v_r),e(yt,F_r),e(yt,Kd),e(Kd,T_r),e(Kd,b4e),e(b4e,M_r),e(Kd,E_r),e(Kd,pH),e(pH,C_r),e(Kd,w_r),e(yt,A_r),M(OF,yt,null),e(Ko,L_r),e(Ko,vo),M(b9,vo,null),e(vo,y_r),e(vo,v4e),e(v4e,x_r),e(vo,$_r),e(vo,on),e(on,k_r),e(on,F4e),e(F4e,S_r),e(on,R_r),e(on,T4e),e(T4e,P_r),e(on,B_r),e(on,M4e),e(M4e,I_r),e(on,N_r),e(vo,q_r),e(vo,rn),e(rn,VF),e(VF,E4e),e(E4e,j_r),e(VF,D_r),e(VF,_H),e(_H,G_r),e(VF,O_r),e(rn,V_r),e(rn,XF),e(XF,C4e),e(C4e,X_r),e(XF,z_r),e(XF,uH),e(uH,Q_r),e(XF,W_r),e(rn,H_r),e(rn,zF),e(zF,w4e),e(w4e,U_r),e(zF,J_r),e(zF,bH),e(bH,Y_r),e(zF,K_r),e(rn,Z_r),e(rn,QF),e(QF,A4e),e(A4e,eur),e(QF,our),e(QF,vH),e(vH,rur),e(QF,tur),e(vo,aur),e(vo,WF),e(WF,nur),e(WF,L4e),e(L4e,sur),e(WF,lur),e(WF,y4e),e(y4e,iur),e(vo,dur),M(HF,vo,null),b(f,yVe,u),b(f,Zd,u),e(Zd,UF),e(UF,x4e),M(v9,x4e,null),e(Zd,cur),e(Zd,$4e),e($4e,fur),b(f,xVe,u),b(f,Zo,u),M(F9,Zo,null),e(Zo,mur),e(Zo,ec),e(ec,gur),e(ec,FH),e(FH,hur),e(ec,pur),e(ec,TH),e(TH,_ur),e(ec,uur),e(Zo,bur),e(Zo,T9),e(T9,vur),e(T9,k4e),e(k4e,Fur),e(T9,Tur),e(Zo,Mur),e(Zo,xt),M(M9,xt,null),e(xt,Eur),e(xt,S4e),e(S4e,Cur),e(xt,wur),e(xt,oc),e(oc,Aur),e(oc,R4e),e(R4e,Lur),e(oc,yur),e(oc,MH),e(MH,xur),e(oc,$ur),e(xt,kur),M(JF,xt,null),e(Zo,Sur),e(Zo,Fo),M(E9,Fo,null),e(Fo,Rur),e(Fo,P4e),e(P4e,Pur),e(Fo,Bur),e(Fo,tn),e(tn,Iur),e(tn,B4e),e(B4e,Nur),e(tn,qur),e(tn,I4e),e(I4e,jur),e(tn,Dur),e(tn,N4e),e(N4e,Gur),e(tn,Our),e(Fo,Vur),e(Fo,q4e),e(q4e,YF),e(YF,j4e),e(j4e,Xur),e(YF,zur),e(YF,EH),e(EH,Qur),e(YF,Wur),e(Fo,Hur),e(Fo,KF),e(KF,Uur),e(KF,D4e),e(D4e,Jur),e(KF,Yur),e(KF,G4e),e(G4e,Kur),e(Fo,Zur),M(ZF,Fo,null),b(f,$Ve,u),b(f,rc,u),e(rc,eT),e(eT,O4e),M(C9,O4e,null),e(rc,e1r),e(rc,V4e),e(V4e,o1r),b(f,kVe,u),b(f,er,u),M(w9,er,null),e(er,r1r),e(er,tc),e(tc,t1r),e(tc,CH),e(CH,a1r),e(tc,n1r),e(tc,wH),e(wH,s1r),e(tc,l1r),e(er,i1r),e(er,A9),e(A9,d1r),e(A9,X4e),e(X4e,c1r),e(A9,f1r),e(er,m1r),e(er,$t),M(L9,$t,null),e($t,g1r),e($t,z4e),e(z4e,h1r),e($t,p1r),e($t,ac),e(ac,_1r),e(ac,Q4e),e(Q4e,u1r),e(ac,b1r),e(ac,AH),e(AH,v1r),e(ac,F1r),e($t,T1r),M(oT,$t,null),e(er,M1r),e(er,yr),M(y9,yr,null),e(yr,E1r),e(yr,W4e),e(W4e,C1r),e(yr,w1r),e(yr,an),e(an,A1r),e(an,H4e),e(H4e,L1r),e(an,y1r),e(an,U4e),e(U4e,x1r),e(an,$1r),e(an,J4e),e(J4e,k1r),e(an,S1r),e(yr,R1r),e(yr,j),e(j,rT),e(rT,Y4e),e(Y4e,P1r),e(rT,B1r),e(rT,LH),e(LH,I1r),e(rT,N1r),e(j,q1r),e(j,tT),e(tT,K4e),e(K4e,j1r),e(tT,D1r),e(tT,yH),e(yH,G1r),e(tT,O1r),e(j,V1r),e(j,aT),e(aT,Z4e),e(Z4e,X1r),e(aT,z1r),e(aT,xH),e(xH,Q1r),e(aT,W1r),e(j,H1r),e(j,nT),e(nT,e3e),e(e3e,U1r),e(nT,J1r),e(nT,$H),e($H,Y1r),e(nT,K1r),e(j,Z1r),e(j,sT),e(sT,o3e),e(o3e,e7r),e(sT,o7r),e(sT,kH),e(kH,r7r),e(sT,t7r),e(j,a7r),e(j,lT),e(lT,r3e),e(r3e,n7r),e(lT,s7r),e(lT,SH),e(SH,l7r),e(lT,i7r),e(j,d7r),e(j,iT),e(iT,t3e),e(t3e,c7r),e(iT,f7r),e(iT,RH),e(RH,m7r),e(iT,g7r),e(j,h7r),e(j,dT),e(dT,a3e),e(a3e,p7r),e(dT,_7r),e(dT,PH),e(PH,u7r),e(dT,b7r),e(j,v7r),e(j,cT),e(cT,n3e),e(n3e,F7r),e(cT,T7r),e(cT,BH),e(BH,M7r),e(cT,E7r),e(j,C7r),e(j,fT),e(fT,s3e),e(s3e,w7r),e(fT,A7r),e(fT,IH),e(IH,L7r),e(fT,y7r),e(j,x7r),e(j,mT),e(mT,l3e),e(l3e,$7r),e(mT,k7r),e(mT,NH),e(NH,S7r),e(mT,R7r),e(j,P7r),e(j,gT),e(gT,i3e),e(i3e,B7r),e(gT,I7r),e(gT,qH),e(qH,N7r),e(gT,q7r),e(j,j7r),e(j,hT),e(hT,d3e),e(d3e,D7r),e(hT,G7r),e(hT,jH),e(jH,O7r),e(hT,V7r),e(j,X7r),e(j,pT),e(pT,c3e),e(c3e,z7r),e(pT,Q7r),e(pT,DH),e(DH,W7r),e(pT,H7r),e(j,U7r),e(j,_T),e(_T,f3e),e(f3e,J7r),e(_T,Y7r),e(_T,GH),e(GH,K7r),e(_T,Z7r),e(j,e2r),e(j,uT),e(uT,m3e),e(m3e,o2r),e(uT,r2r),e(uT,OH),e(OH,t2r),e(uT,a2r),e(j,n2r),e(j,bT),e(bT,g3e),e(g3e,s2r),e(bT,l2r),e(bT,VH),e(VH,i2r),e(bT,d2r),e(j,c2r),e(j,Hs),e(Hs,h3e),e(h3e,f2r),e(Hs,m2r),e(Hs,XH),e(XH,g2r),e(Hs,h2r),e(Hs,zH),e(zH,p2r),e(Hs,_2r),e(j,u2r),e(j,vT),e(vT,p3e),e(p3e,b2r),e(vT,v2r),e(vT,QH),e(QH,F2r),e(vT,T2r),e(j,M2r),e(j,FT),e(FT,_3e),e(_3e,E2r),e(FT,C2r),e(FT,WH),e(WH,w2r),e(FT,A2r),e(j,L2r),e(j,TT),e(TT,u3e),e(u3e,y2r),e(TT,x2r),e(TT,HH),e(HH,$2r),e(TT,k2r),e(j,S2r),e(j,MT),e(MT,b3e),e(b3e,R2r),e(MT,P2r),e(MT,UH),e(UH,B2r),e(MT,I2r),e(j,N2r),e(j,ET),e(ET,v3e),e(v3e,q2r),e(ET,j2r),e(ET,JH),e(JH,D2r),e(ET,G2r),e(j,O2r),e(j,CT),e(CT,F3e),e(F3e,V2r),e(CT,X2r),e(CT,YH),e(YH,z2r),e(CT,Q2r),e(j,W2r),e(j,wT),e(wT,T3e),e(T3e,H2r),e(wT,U2r),e(wT,KH),e(KH,J2r),e(wT,Y2r),e(j,K2r),e(j,AT),e(AT,M3e),e(M3e,Z2r),e(AT,ebr),e(AT,ZH),e(ZH,obr),e(AT,rbr),e(j,tbr),e(j,LT),e(LT,E3e),e(E3e,abr),e(LT,nbr),e(LT,eU),e(eU,sbr),e(LT,lbr),e(j,ibr),e(j,yT),e(yT,C3e),e(C3e,dbr),e(yT,cbr),e(yT,oU),e(oU,fbr),e(yT,mbr),e(j,gbr),e(j,xT),e(xT,w3e),e(w3e,hbr),e(xT,pbr),e(xT,rU),e(rU,_br),e(xT,ubr),e(j,bbr),e(j,$T),e($T,A3e),e(A3e,vbr),e($T,Fbr),e($T,tU),e(tU,Tbr),e($T,Mbr),e(j,Ebr),e(j,kT),e(kT,L3e),e(L3e,Cbr),e(kT,wbr),e(kT,aU),e(aU,Abr),e(kT,Lbr),e(j,ybr),e(j,ST),e(ST,y3e),e(y3e,xbr),e(ST,$br),e(ST,nU),e(nU,kbr),e(ST,Sbr),e(j,Rbr),e(j,RT),e(RT,x3e),e(x3e,Pbr),e(RT,Bbr),e(RT,sU),e(sU,Ibr),e(RT,Nbr),e(j,qbr),e(j,PT),e(PT,$3e),e($3e,jbr),e(PT,Dbr),e(PT,lU),e(lU,Gbr),e(PT,Obr),e(j,Vbr),e(j,BT),e(BT,k3e),e(k3e,Xbr),e(BT,zbr),e(BT,iU),e(iU,Qbr),e(BT,Wbr),e(j,Hbr),e(j,IT),e(IT,S3e),e(S3e,Ubr),e(IT,Jbr),e(IT,dU),e(dU,Ybr),e(IT,Kbr),e(j,Zbr),e(j,NT),e(NT,R3e),e(R3e,e4r),e(NT,o4r),e(NT,cU),e(cU,r4r),e(NT,t4r),e(j,a4r),e(j,qT),e(qT,P3e),e(P3e,n4r),e(qT,s4r),e(qT,fU),e(fU,l4r),e(qT,i4r),e(j,d4r),e(j,jT),e(jT,B3e),e(B3e,c4r),e(jT,f4r),e(jT,mU),e(mU,m4r),e(jT,g4r),e(j,h4r),e(j,DT),e(DT,I3e),e(I3e,p4r),e(DT,_4r),e(DT,gU),e(gU,u4r),e(DT,b4r),e(j,v4r),e(j,GT),e(GT,N3e),e(N3e,F4r),e(GT,T4r),e(GT,hU),e(hU,M4r),e(GT,E4r),e(j,C4r),e(j,OT),e(OT,q3e),e(q3e,w4r),e(OT,A4r),e(OT,pU),e(pU,L4r),e(OT,y4r),e(j,x4r),e(j,VT),e(VT,j3e),e(j3e,$4r),e(VT,k4r),e(VT,_U),e(_U,S4r),e(VT,R4r),e(j,P4r),e(j,XT),e(XT,D3e),e(D3e,B4r),e(XT,I4r),e(XT,uU),e(uU,N4r),e(XT,q4r),e(j,j4r),e(j,zT),e(zT,G3e),e(G3e,D4r),e(zT,G4r),e(zT,bU),e(bU,O4r),e(zT,V4r),e(j,X4r),e(j,QT),e(QT,O3e),e(O3e,z4r),e(QT,Q4r),e(QT,vU),e(vU,W4r),e(QT,H4r),e(j,U4r),e(j,WT),e(WT,V3e),e(V3e,J4r),e(WT,Y4r),e(WT,FU),e(FU,K4r),e(WT,Z4r),e(yr,e3r),M(HT,yr,null),b(f,SVe,u),b(f,nc,u),e(nc,UT),e(UT,X3e),M(x9,X3e,null),e(nc,o3r),e(nc,z3e),e(z3e,r3r),b(f,RVe,u),b(f,or,u),M($9,or,null),e(or,t3r),e(or,sc),e(sc,a3r),e(sc,TU),e(TU,n3r),e(sc,s3r),e(sc,MU),e(MU,l3r),e(sc,i3r),e(or,d3r),e(or,k9),e(k9,c3r),e(k9,Q3e),e(Q3e,f3r),e(k9,m3r),e(or,g3r),e(or,kt),M(S9,kt,null),e(kt,h3r),e(kt,W3e),e(W3e,p3r),e(kt,_3r),e(kt,lc),e(lc,u3r),e(lc,H3e),e(H3e,b3r),e(lc,v3r),e(lc,EU),e(EU,F3r),e(lc,T3r),e(kt,M3r),M(JT,kt,null),e(or,E3r),e(or,xr),M(R9,xr,null),e(xr,C3r),e(xr,U3e),e(U3e,w3r),e(xr,A3r),e(xr,nn),e(nn,L3r),e(nn,J3e),e(J3e,y3r),e(nn,x3r),e(nn,Y3e),e(Y3e,$3r),e(nn,k3r),e(nn,K3e),e(K3e,S3r),e(nn,R3r),e(xr,P3r),e(xr,se),e(se,YT),e(YT,Z3e),e(Z3e,B3r),e(YT,I3r),e(YT,CU),e(CU,N3r),e(YT,q3r),e(se,j3r),e(se,KT),e(KT,eve),e(eve,D3r),e(KT,G3r),e(KT,wU),e(wU,O3r),e(KT,V3r),e(se,X3r),e(se,ZT),e(ZT,ove),e(ove,z3r),e(ZT,Q3r),e(ZT,AU),e(AU,W3r),e(ZT,H3r),e(se,U3r),e(se,eM),e(eM,rve),e(rve,J3r),e(eM,Y3r),e(eM,LU),e(LU,K3r),e(eM,Z3r),e(se,evr),e(se,oM),e(oM,tve),e(tve,ovr),e(oM,rvr),e(oM,yU),e(yU,tvr),e(oM,avr),e(se,nvr),e(se,rM),e(rM,ave),e(ave,svr),e(rM,lvr),e(rM,xU),e(xU,ivr),e(rM,dvr),e(se,cvr),e(se,tM),e(tM,nve),e(nve,fvr),e(tM,mvr),e(tM,$U),e($U,gvr),e(tM,hvr),e(se,pvr),e(se,aM),e(aM,sve),e(sve,_vr),e(aM,uvr),e(aM,kU),e(kU,bvr),e(aM,vvr),e(se,Fvr),e(se,nM),e(nM,lve),e(lve,Tvr),e(nM,Mvr),e(nM,SU),e(SU,Evr),e(nM,Cvr),e(se,wvr),e(se,sM),e(sM,ive),e(ive,Avr),e(sM,Lvr),e(sM,RU),e(RU,yvr),e(sM,xvr),e(se,$vr),e(se,lM),e(lM,dve),e(dve,kvr),e(lM,Svr),e(lM,PU),e(PU,Rvr),e(lM,Pvr),e(se,Bvr),e(se,iM),e(iM,cve),e(cve,Ivr),e(iM,Nvr),e(iM,BU),e(BU,qvr),e(iM,jvr),e(se,Dvr),e(se,dM),e(dM,fve),e(fve,Gvr),e(dM,Ovr),e(dM,IU),e(IU,Vvr),e(dM,Xvr),e(se,zvr),e(se,cM),e(cM,mve),e(mve,Qvr),e(cM,Wvr),e(cM,NU),e(NU,Hvr),e(cM,Uvr),e(se,Jvr),e(se,fM),e(fM,gve),e(gve,Yvr),e(fM,Kvr),e(fM,qU),e(qU,Zvr),e(fM,eFr),e(se,oFr),e(se,mM),e(mM,hve),e(hve,rFr),e(mM,tFr),e(mM,jU),e(jU,aFr),e(mM,nFr),e(se,sFr),e(se,gM),e(gM,pve),e(pve,lFr),e(gM,iFr),e(gM,DU),e(DU,dFr),e(gM,cFr),e(se,fFr),e(se,hM),e(hM,_ve),e(_ve,mFr),e(hM,gFr),e(hM,GU),e(GU,hFr),e(hM,pFr),e(se,_Fr),e(se,pM),e(pM,uve),e(uve,uFr),e(pM,bFr),e(pM,OU),e(OU,vFr),e(pM,FFr),e(se,TFr),e(se,_M),e(_M,bve),e(bve,MFr),e(_M,EFr),e(_M,VU),e(VU,CFr),e(_M,wFr),e(se,AFr),e(se,uM),e(uM,vve),e(vve,LFr),e(uM,yFr),e(uM,XU),e(XU,xFr),e(uM,$Fr),e(se,kFr),e(se,bM),e(bM,Fve),e(Fve,SFr),e(bM,RFr),e(bM,zU),e(zU,PFr),e(bM,BFr),e(se,IFr),e(se,vM),e(vM,Tve),e(Tve,NFr),e(vM,qFr),e(vM,QU),e(QU,jFr),e(vM,DFr),e(xr,GFr),M(FM,xr,null),b(f,PVe,u),b(f,ic,u),e(ic,TM),e(TM,Mve),M(P9,Mve,null),e(ic,OFr),e(ic,Eve),e(Eve,VFr),b(f,BVe,u),b(f,rr,u),M(B9,rr,null),e(rr,XFr),e(rr,dc),e(dc,zFr),e(dc,WU),e(WU,QFr),e(dc,WFr),e(dc,HU),e(HU,HFr),e(dc,UFr),e(rr,JFr),e(rr,I9),e(I9,YFr),e(I9,Cve),e(Cve,KFr),e(I9,ZFr),e(rr,eTr),e(rr,St),M(N9,St,null),e(St,oTr),e(St,wve),e(wve,rTr),e(St,tTr),e(St,cc),e(cc,aTr),e(cc,Ave),e(Ave,nTr),e(cc,sTr),e(cc,UU),e(UU,lTr),e(cc,iTr),e(St,dTr),M(MM,St,null),e(rr,cTr),e(rr,$r),M(q9,$r,null),e($r,fTr),e($r,Lve),e(Lve,mTr),e($r,gTr),e($r,sn),e(sn,hTr),e(sn,yve),e(yve,pTr),e(sn,_Tr),e(sn,xve),e(xve,uTr),e(sn,bTr),e(sn,$ve),e($ve,vTr),e(sn,FTr),e($r,TTr),e($r,Me),e(Me,EM),e(EM,kve),e(kve,MTr),e(EM,ETr),e(EM,JU),e(JU,CTr),e(EM,wTr),e(Me,ATr),e(Me,CM),e(CM,Sve),e(Sve,LTr),e(CM,yTr),e(CM,YU),e(YU,xTr),e(CM,$Tr),e(Me,kTr),e(Me,wM),e(wM,Rve),e(Rve,STr),e(wM,RTr),e(wM,KU),e(KU,PTr),e(wM,BTr),e(Me,ITr),e(Me,AM),e(AM,Pve),e(Pve,NTr),e(AM,qTr),e(AM,ZU),e(ZU,jTr),e(AM,DTr),e(Me,GTr),e(Me,LM),e(LM,Bve),e(Bve,OTr),e(LM,VTr),e(LM,eJ),e(eJ,XTr),e(LM,zTr),e(Me,QTr),e(Me,yM),e(yM,Ive),e(Ive,WTr),e(yM,HTr),e(yM,oJ),e(oJ,UTr),e(yM,JTr),e(Me,YTr),e(Me,xM),e(xM,Nve),e(Nve,KTr),e(xM,ZTr),e(xM,rJ),e(rJ,eMr),e(xM,oMr),e(Me,rMr),e(Me,$M),e($M,qve),e(qve,tMr),e($M,aMr),e($M,tJ),e(tJ,nMr),e($M,sMr),e(Me,lMr),e(Me,kM),e(kM,jve),e(jve,iMr),e(kM,dMr),e(kM,aJ),e(aJ,cMr),e(kM,fMr),e(Me,mMr),e(Me,SM),e(SM,Dve),e(Dve,gMr),e(SM,hMr),e(SM,nJ),e(nJ,pMr),e(SM,_Mr),e(Me,uMr),e(Me,RM),e(RM,Gve),e(Gve,bMr),e(RM,vMr),e(RM,sJ),e(sJ,FMr),e(RM,TMr),e(Me,MMr),e(Me,PM),e(PM,Ove),e(Ove,EMr),e(PM,CMr),e(PM,lJ),e(lJ,wMr),e(PM,AMr),e(Me,LMr),e(Me,BM),e(BM,Vve),e(Vve,yMr),e(BM,xMr),e(BM,iJ),e(iJ,$Mr),e(BM,kMr),e($r,SMr),M(IM,$r,null),b(f,IVe,u),b(f,fc,u),e(fc,NM),e(NM,Xve),M(j9,Xve,null),e(fc,RMr),e(fc,zve),e(zve,PMr),b(f,NVe,u),b(f,tr,u),M(D9,tr,null),e(tr,BMr),e(tr,mc),e(mc,IMr),e(mc,dJ),e(dJ,NMr),e(mc,qMr),e(mc,cJ),e(cJ,jMr),e(mc,DMr),e(tr,GMr),e(tr,G9),e(G9,OMr),e(G9,Qve),e(Qve,VMr),e(G9,XMr),e(tr,zMr),e(tr,Rt),M(O9,Rt,null),e(Rt,QMr),e(Rt,Wve),e(Wve,WMr),e(Rt,HMr),e(Rt,gc),e(gc,UMr),e(gc,Hve),e(Hve,JMr),e(gc,YMr),e(gc,fJ),e(fJ,KMr),e(gc,ZMr),e(Rt,eEr),M(qM,Rt,null),e(tr,oEr),e(tr,kr),M(V9,kr,null),e(kr,rEr),e(kr,Uve),e(Uve,tEr),e(kr,aEr),e(kr,ln),e(ln,nEr),e(ln,Jve),e(Jve,sEr),e(ln,lEr),e(ln,Yve),e(Yve,iEr),e(ln,dEr),e(ln,Kve),e(Kve,cEr),e(ln,fEr),e(kr,mEr),e(kr,dn),e(dn,jM),e(jM,Zve),e(Zve,gEr),e(jM,hEr),e(jM,mJ),e(mJ,pEr),e(jM,_Er),e(dn,uEr),e(dn,DM),e(DM,eFe),e(eFe,bEr),e(DM,vEr),e(DM,gJ),e(gJ,FEr),e(DM,TEr),e(dn,MEr),e(dn,GM),e(GM,oFe),e(oFe,EEr),e(GM,CEr),e(GM,hJ),e(hJ,wEr),e(GM,AEr),e(dn,LEr),e(dn,OM),e(OM,rFe),e(rFe,yEr),e(OM,xEr),e(OM,pJ),e(pJ,$Er),e(OM,kEr),e(kr,SEr),M(VM,kr,null),b(f,qVe,u),b(f,hc,u),e(hc,XM),e(XM,tFe),M(X9,tFe,null),e(hc,REr),e(hc,aFe),e(aFe,PEr),b(f,jVe,u),b(f,ar,u),M(z9,ar,null),e(ar,BEr),e(ar,pc),e(pc,IEr),e(pc,_J),e(_J,NEr),e(pc,qEr),e(pc,uJ),e(uJ,jEr),e(pc,DEr),e(ar,GEr),e(ar,Q9),e(Q9,OEr),e(Q9,nFe),e(nFe,VEr),e(Q9,XEr),e(ar,zEr),e(ar,Pt),M(W9,Pt,null),e(Pt,QEr),e(Pt,sFe),e(sFe,WEr),e(Pt,HEr),e(Pt,_c),e(_c,UEr),e(_c,lFe),e(lFe,JEr),e(_c,YEr),e(_c,bJ),e(bJ,KEr),e(_c,ZEr),e(Pt,eCr),M(zM,Pt,null),e(ar,oCr),e(ar,Sr),M(H9,Sr,null),e(Sr,rCr),e(Sr,iFe),e(iFe,tCr),e(Sr,aCr),e(Sr,cn),e(cn,nCr),e(cn,dFe),e(dFe,sCr),e(cn,lCr),e(cn,cFe),e(cFe,iCr),e(cn,dCr),e(cn,fFe),e(fFe,cCr),e(cn,fCr),e(Sr,mCr),e(Sr,ie),e(ie,QM),e(QM,mFe),e(mFe,gCr),e(QM,hCr),e(QM,vJ),e(vJ,pCr),e(QM,_Cr),e(ie,uCr),e(ie,WM),e(WM,gFe),e(gFe,bCr),e(WM,vCr),e(WM,FJ),e(FJ,FCr),e(WM,TCr),e(ie,MCr),e(ie,HM),e(HM,hFe),e(hFe,ECr),e(HM,CCr),e(HM,TJ),e(TJ,wCr),e(HM,ACr),e(ie,LCr),e(ie,UM),e(UM,pFe),e(pFe,yCr),e(UM,xCr),e(UM,MJ),e(MJ,$Cr),e(UM,kCr),e(ie,SCr),e(ie,JM),e(JM,_Fe),e(_Fe,RCr),e(JM,PCr),e(JM,EJ),e(EJ,BCr),e(JM,ICr),e(ie,NCr),e(ie,YM),e(YM,uFe),e(uFe,qCr),e(YM,jCr),e(YM,CJ),e(CJ,DCr),e(YM,GCr),e(ie,OCr),e(ie,KM),e(KM,bFe),e(bFe,VCr),e(KM,XCr),e(KM,wJ),e(wJ,zCr),e(KM,QCr),e(ie,WCr),e(ie,ZM),e(ZM,vFe),e(vFe,HCr),e(ZM,UCr),e(ZM,AJ),e(AJ,JCr),e(ZM,YCr),e(ie,KCr),e(ie,eE),e(eE,FFe),e(FFe,ZCr),e(eE,e5r),e(eE,LJ),e(LJ,o5r),e(eE,r5r),e(ie,t5r),e(ie,oE),e(oE,TFe),e(TFe,a5r),e(oE,n5r),e(oE,yJ),e(yJ,s5r),e(oE,l5r),e(ie,i5r),e(ie,rE),e(rE,MFe),e(MFe,d5r),e(rE,c5r),e(rE,xJ),e(xJ,f5r),e(rE,m5r),e(ie,g5r),e(ie,tE),e(tE,EFe),e(EFe,h5r),e(tE,p5r),e(tE,$J),e($J,_5r),e(tE,u5r),e(ie,b5r),e(ie,aE),e(aE,CFe),e(CFe,v5r),e(aE,F5r),e(aE,kJ),e(kJ,T5r),e(aE,M5r),e(ie,E5r),e(ie,nE),e(nE,wFe),e(wFe,C5r),e(nE,w5r),e(nE,SJ),e(SJ,A5r),e(nE,L5r),e(ie,y5r),e(ie,sE),e(sE,AFe),e(AFe,x5r),e(sE,$5r),e(sE,RJ),e(RJ,k5r),e(sE,S5r),e(ie,R5r),e(ie,lE),e(lE,LFe),e(LFe,P5r),e(lE,B5r),e(lE,PJ),e(PJ,I5r),e(lE,N5r),e(ie,q5r),e(ie,iE),e(iE,yFe),e(yFe,j5r),e(iE,D5r),e(iE,BJ),e(BJ,G5r),e(iE,O5r),e(ie,V5r),e(ie,dE),e(dE,xFe),e(xFe,X5r),e(dE,z5r),e(dE,IJ),e(IJ,Q5r),e(dE,W5r),e(ie,H5r),e(ie,cE),e(cE,$Fe),e($Fe,U5r),e(cE,J5r),e(cE,NJ),e(NJ,Y5r),e(cE,K5r),e(ie,Z5r),e(ie,fE),e(fE,kFe),e(kFe,e0r),e(fE,o0r),e(fE,qJ),e(qJ,r0r),e(fE,t0r),e(Sr,a0r),M(mE,Sr,null),b(f,DVe,u),b(f,uc,u),e(uc,gE),e(gE,SFe),M(U9,SFe,null),e(uc,n0r),e(uc,RFe),e(RFe,s0r),b(f,GVe,u),b(f,nr,u),M(J9,nr,null),e(nr,l0r),e(nr,bc),e(bc,i0r),e(bc,jJ),e(jJ,d0r),e(bc,c0r),e(bc,DJ),e(DJ,f0r),e(bc,m0r),e(nr,g0r),e(nr,Y9),e(Y9,h0r),e(Y9,PFe),e(PFe,p0r),e(Y9,_0r),e(nr,u0r),e(nr,Bt),M(K9,Bt,null),e(Bt,b0r),e(Bt,BFe),e(BFe,v0r),e(Bt,F0r),e(Bt,vc),e(vc,T0r),e(vc,IFe),e(IFe,M0r),e(vc,E0r),e(vc,GJ),e(GJ,C0r),e(vc,w0r),e(Bt,A0r),M(hE,Bt,null),e(nr,L0r),e(nr,Rr),M(Z9,Rr,null),e(Rr,y0r),e(Rr,NFe),e(NFe,x0r),e(Rr,$0r),e(Rr,fn),e(fn,k0r),e(fn,qFe),e(qFe,S0r),e(fn,R0r),e(fn,jFe),e(jFe,P0r),e(fn,B0r),e(fn,DFe),e(DFe,I0r),e(fn,N0r),e(Rr,q0r),e(Rr,ye),e(ye,pE),e(pE,GFe),e(GFe,j0r),e(pE,D0r),e(pE,OJ),e(OJ,G0r),e(pE,O0r),e(ye,V0r),e(ye,_E),e(_E,OFe),e(OFe,X0r),e(_E,z0r),e(_E,VJ),e(VJ,Q0r),e(_E,W0r),e(ye,H0r),e(ye,uE),e(uE,VFe),e(VFe,U0r),e(uE,J0r),e(uE,XJ),e(XJ,Y0r),e(uE,K0r),e(ye,Z0r),e(ye,bE),e(bE,XFe),e(XFe,ewr),e(bE,owr),e(bE,zJ),e(zJ,rwr),e(bE,twr),e(ye,awr),e(ye,vE),e(vE,zFe),e(zFe,nwr),e(vE,swr),e(vE,QJ),e(QJ,lwr),e(vE,iwr),e(ye,dwr),e(ye,FE),e(FE,QFe),e(QFe,cwr),e(FE,fwr),e(FE,WJ),e(WJ,mwr),e(FE,gwr),e(ye,hwr),e(ye,TE),e(TE,WFe),e(WFe,pwr),e(TE,_wr),e(TE,HJ),e(HJ,uwr),e(TE,bwr),e(ye,vwr),e(ye,ME),e(ME,HFe),e(HFe,Fwr),e(ME,Twr),e(ME,UJ),e(UJ,Mwr),e(ME,Ewr),e(ye,Cwr),e(ye,EE),e(EE,UFe),e(UFe,wwr),e(EE,Awr),e(EE,JJ),e(JJ,Lwr),e(EE,ywr),e(ye,xwr),e(ye,CE),e(CE,JFe),e(JFe,$wr),e(CE,kwr),e(CE,YJ),e(YJ,Swr),e(CE,Rwr),e(Rr,Pwr),M(wE,Rr,null),b(f,OVe,u),b(f,Fc,u),e(Fc,AE),e(AE,YFe),M(ex,YFe,null),e(Fc,Bwr),e(Fc,KFe),e(KFe,Iwr),b(f,VVe,u),b(f,sr,u),M(ox,sr,null),e(sr,Nwr),e(sr,Tc),e(Tc,qwr),e(Tc,KJ),e(KJ,jwr),e(Tc,Dwr),e(Tc,ZJ),e(ZJ,Gwr),e(Tc,Owr),e(sr,Vwr),e(sr,rx),e(rx,Xwr),e(rx,ZFe),e(ZFe,zwr),e(rx,Qwr),e(sr,Wwr),e(sr,It),M(tx,It,null),e(It,Hwr),e(It,eTe),e(eTe,Uwr),e(It,Jwr),e(It,Mc),e(Mc,Ywr),e(Mc,oTe),e(oTe,Kwr),e(Mc,Zwr),e(Mc,eY),e(eY,eAr),e(Mc,oAr),e(It,rAr),M(LE,It,null),e(sr,tAr),e(sr,Pr),M(ax,Pr,null),e(Pr,aAr),e(Pr,rTe),e(rTe,nAr),e(Pr,sAr),e(Pr,mn),e(mn,lAr),e(mn,tTe),e(tTe,iAr),e(mn,dAr),e(mn,aTe),e(aTe,cAr),e(mn,fAr),e(mn,nTe),e(nTe,mAr),e(mn,gAr),e(Pr,hAr),e(Pr,te),e(te,yE),e(yE,sTe),e(sTe,pAr),e(yE,_Ar),e(yE,oY),e(oY,uAr),e(yE,bAr),e(te,vAr),e(te,xE),e(xE,lTe),e(lTe,FAr),e(xE,TAr),e(xE,rY),e(rY,MAr),e(xE,EAr),e(te,CAr),e(te,$E),e($E,iTe),e(iTe,wAr),e($E,AAr),e($E,tY),e(tY,LAr),e($E,yAr),e(te,xAr),e(te,kE),e(kE,dTe),e(dTe,$Ar),e(kE,kAr),e(kE,aY),e(aY,SAr),e(kE,RAr),e(te,PAr),e(te,SE),e(SE,cTe),e(cTe,BAr),e(SE,IAr),e(SE,nY),e(nY,NAr),e(SE,qAr),e(te,jAr),e(te,RE),e(RE,fTe),e(fTe,DAr),e(RE,GAr),e(RE,sY),e(sY,OAr),e(RE,VAr),e(te,XAr),e(te,PE),e(PE,mTe),e(mTe,zAr),e(PE,QAr),e(PE,lY),e(lY,WAr),e(PE,HAr),e(te,UAr),e(te,BE),e(BE,gTe),e(gTe,JAr),e(BE,YAr),e(BE,iY),e(iY,KAr),e(BE,ZAr),e(te,e6r),e(te,IE),e(IE,hTe),e(hTe,o6r),e(IE,r6r),e(IE,dY),e(dY,t6r),e(IE,a6r),e(te,n6r),e(te,NE),e(NE,pTe),e(pTe,s6r),e(NE,l6r),e(NE,cY),e(cY,i6r),e(NE,d6r),e(te,c6r),e(te,qE),e(qE,_Te),e(_Te,f6r),e(qE,m6r),e(qE,fY),e(fY,g6r),e(qE,h6r),e(te,p6r),e(te,jE),e(jE,uTe),e(uTe,_6r),e(jE,u6r),e(jE,mY),e(mY,b6r),e(jE,v6r),e(te,F6r),e(te,DE),e(DE,bTe),e(bTe,T6r),e(DE,M6r),e(DE,gY),e(gY,E6r),e(DE,C6r),e(te,w6r),e(te,GE),e(GE,vTe),e(vTe,A6r),e(GE,L6r),e(GE,hY),e(hY,y6r),e(GE,x6r),e(te,$6r),e(te,OE),e(OE,FTe),e(FTe,k6r),e(OE,S6r),e(OE,pY),e(pY,R6r),e(OE,P6r),e(te,B6r),e(te,VE),e(VE,TTe),e(TTe,I6r),e(VE,N6r),e(VE,_Y),e(_Y,q6r),e(VE,j6r),e(te,D6r),e(te,XE),e(XE,MTe),e(MTe,G6r),e(XE,O6r),e(XE,uY),e(uY,V6r),e(XE,X6r),e(te,z6r),e(te,zE),e(zE,ETe),e(ETe,Q6r),e(zE,W6r),e(zE,bY),e(bY,H6r),e(zE,U6r),e(te,J6r),e(te,QE),e(QE,CTe),e(CTe,Y6r),e(QE,K6r),e(QE,vY),e(vY,Z6r),e(QE,eLr),e(te,oLr),e(te,WE),e(WE,wTe),e(wTe,rLr),e(WE,tLr),e(WE,FY),e(FY,aLr),e(WE,nLr),e(te,sLr),e(te,HE),e(HE,ATe),e(ATe,lLr),e(HE,iLr),e(HE,TY),e(TY,dLr),e(HE,cLr),e(te,fLr),e(te,UE),e(UE,LTe),e(LTe,mLr),e(UE,gLr),e(UE,MY),e(MY,hLr),e(UE,pLr),e(te,_Lr),e(te,JE),e(JE,yTe),e(yTe,uLr),e(JE,bLr),e(JE,EY),e(EY,vLr),e(JE,FLr),e(te,TLr),e(te,YE),e(YE,xTe),e(xTe,MLr),e(YE,ELr),e(YE,CY),e(CY,CLr),e(YE,wLr),e(te,ALr),e(te,KE),e(KE,$Te),e($Te,LLr),e(KE,yLr),e(KE,wY),e(wY,xLr),e(KE,$Lr),e(te,kLr),e(te,ZE),e(ZE,kTe),e(kTe,SLr),e(ZE,RLr),e(ZE,AY),e(AY,PLr),e(ZE,BLr),e(Pr,ILr),M(eC,Pr,null),b(f,XVe,u),b(f,Ec,u),e(Ec,oC),e(oC,STe),M(nx,STe,null),e(Ec,NLr),e(Ec,RTe),e(RTe,qLr),b(f,zVe,u),b(f,lr,u),M(sx,lr,null),e(lr,jLr),e(lr,Cc),e(Cc,DLr),e(Cc,LY),e(LY,GLr),e(Cc,OLr),e(Cc,yY),e(yY,VLr),e(Cc,XLr),e(lr,zLr),e(lr,lx),e(lx,QLr),e(lx,PTe),e(PTe,WLr),e(lx,HLr),e(lr,ULr),e(lr,Nt),M(ix,Nt,null),e(Nt,JLr),e(Nt,BTe),e(BTe,YLr),e(Nt,KLr),e(Nt,wc),e(wc,ZLr),e(wc,ITe),e(ITe,eyr),e(wc,oyr),e(wc,xY),e(xY,ryr),e(wc,tyr),e(Nt,ayr),M(rC,Nt,null),e(lr,nyr),e(lr,Br),M(dx,Br,null),e(Br,syr),e(Br,NTe),e(NTe,lyr),e(Br,iyr),e(Br,gn),e(gn,dyr),e(gn,qTe),e(qTe,cyr),e(gn,fyr),e(gn,jTe),e(jTe,myr),e(gn,gyr),e(gn,DTe),e(DTe,hyr),e(gn,pyr),e(Br,_yr),e(Br,_e),e(_e,tC),e(tC,GTe),e(GTe,uyr),e(tC,byr),e(tC,$Y),e($Y,vyr),e(tC,Fyr),e(_e,Tyr),e(_e,aC),e(aC,OTe),e(OTe,Myr),e(aC,Eyr),e(aC,kY),e(kY,Cyr),e(aC,wyr),e(_e,Ayr),e(_e,nC),e(nC,VTe),e(VTe,Lyr),e(nC,yyr),e(nC,SY),e(SY,xyr),e(nC,$yr),e(_e,kyr),e(_e,sC),e(sC,XTe),e(XTe,Syr),e(sC,Ryr),e(sC,RY),e(RY,Pyr),e(sC,Byr),e(_e,Iyr),e(_e,lC),e(lC,zTe),e(zTe,Nyr),e(lC,qyr),e(lC,PY),e(PY,jyr),e(lC,Dyr),e(_e,Gyr),e(_e,iC),e(iC,QTe),e(QTe,Oyr),e(iC,Vyr),e(iC,BY),e(BY,Xyr),e(iC,zyr),e(_e,Qyr),e(_e,dC),e(dC,WTe),e(WTe,Wyr),e(dC,Hyr),e(dC,IY),e(IY,Uyr),e(dC,Jyr),e(_e,Yyr),e(_e,cC),e(cC,HTe),e(HTe,Kyr),e(cC,Zyr),e(cC,NY),e(NY,e8r),e(cC,o8r),e(_e,r8r),e(_e,fC),e(fC,UTe),e(UTe,t8r),e(fC,a8r),e(fC,qY),e(qY,n8r),e(fC,s8r),e(_e,l8r),e(_e,mC),e(mC,JTe),e(JTe,i8r),e(mC,d8r),e(mC,jY),e(jY,c8r),e(mC,f8r),e(_e,m8r),e(_e,gC),e(gC,YTe),e(YTe,g8r),e(gC,h8r),e(gC,DY),e(DY,p8r),e(gC,_8r),e(_e,u8r),e(_e,hC),e(hC,KTe),e(KTe,b8r),e(hC,v8r),e(hC,GY),e(GY,F8r),e(hC,T8r),e(_e,M8r),e(_e,pC),e(pC,ZTe),e(ZTe,E8r),e(pC,C8r),e(pC,OY),e(OY,w8r),e(pC,A8r),e(_e,L8r),e(_e,_C),e(_C,eMe),e(eMe,y8r),e(_C,x8r),e(_C,VY),e(VY,$8r),e(_C,k8r),e(_e,S8r),e(_e,uC),e(uC,oMe),e(oMe,R8r),e(uC,P8r),e(uC,XY),e(XY,B8r),e(uC,I8r),e(_e,N8r),e(_e,bC),e(bC,rMe),e(rMe,q8r),e(bC,j8r),e(bC,zY),e(zY,D8r),e(bC,G8r),e(_e,O8r),e(_e,vC),e(vC,tMe),e(tMe,V8r),e(vC,X8r),e(vC,QY),e(QY,z8r),e(vC,Q8r),e(Br,W8r),M(FC,Br,null),b(f,QVe,u),b(f,Ac,u),e(Ac,TC),e(TC,aMe),M(cx,aMe,null),e(Ac,H8r),e(Ac,nMe),e(nMe,U8r),b(f,WVe,u),b(f,ir,u),M(fx,ir,null),e(ir,J8r),e(ir,Lc),e(Lc,Y8r),e(Lc,WY),e(WY,K8r),e(Lc,Z8r),e(Lc,HY),e(HY,e9r),e(Lc,o9r),e(ir,r9r),e(ir,mx),e(mx,t9r),e(mx,sMe),e(sMe,a9r),e(mx,n9r),e(ir,s9r),e(ir,qt),M(gx,qt,null),e(qt,l9r),e(qt,lMe),e(lMe,i9r),e(qt,d9r),e(qt,yc),e(yc,c9r),e(yc,iMe),e(iMe,f9r),e(yc,m9r),e(yc,UY),e(UY,g9r),e(yc,h9r),e(qt,p9r),M(MC,qt,null),e(ir,_9r),e(ir,Ir),M(hx,Ir,null),e(Ir,u9r),e(Ir,dMe),e(dMe,b9r),e(Ir,v9r),e(Ir,hn),e(hn,F9r),e(hn,cMe),e(cMe,T9r),e(hn,M9r),e(hn,fMe),e(fMe,E9r),e(hn,C9r),e(hn,mMe),e(mMe,w9r),e(hn,A9r),e(Ir,L9r),e(Ir,px),e(px,EC),e(EC,gMe),e(gMe,y9r),e(EC,x9r),e(EC,JY),e(JY,$9r),e(EC,k9r),e(px,S9r),e(px,CC),e(CC,hMe),e(hMe,R9r),e(CC,P9r),e(CC,YY),e(YY,B9r),e(CC,I9r),e(Ir,N9r),M(wC,Ir,null),b(f,HVe,u),b(f,xc,u),e(xc,AC),e(AC,pMe),M(_x,pMe,null),e(xc,q9r),e(xc,_Me),e(_Me,j9r),b(f,UVe,u),b(f,dr,u),M(ux,dr,null),e(dr,D9r),e(dr,$c),e($c,G9r),e($c,KY),e(KY,O9r),e($c,V9r),e($c,ZY),e(ZY,X9r),e($c,z9r),e(dr,Q9r),e(dr,bx),e(bx,W9r),e(bx,uMe),e(uMe,H9r),e(bx,U9r),e(dr,J9r),e(dr,jt),M(vx,jt,null),e(jt,Y9r),e(jt,bMe),e(bMe,K9r),e(jt,Z9r),e(jt,kc),e(kc,exr),e(kc,vMe),e(vMe,oxr),e(kc,rxr),e(kc,eK),e(eK,txr),e(kc,axr),e(jt,nxr),M(LC,jt,null),e(dr,sxr),e(dr,Nr),M(Fx,Nr,null),e(Nr,lxr),e(Nr,FMe),e(FMe,ixr),e(Nr,dxr),e(Nr,pn),e(pn,cxr),e(pn,TMe),e(TMe,fxr),e(pn,mxr),e(pn,MMe),e(MMe,gxr),e(pn,hxr),e(pn,EMe),e(EMe,pxr),e(pn,_xr),e(Nr,uxr),e(Nr,CMe),e(CMe,yC),e(yC,wMe),e(wMe,bxr),e(yC,vxr),e(yC,oK),e(oK,Fxr),e(yC,Txr),e(Nr,Mxr),M(xC,Nr,null),b(f,JVe,u),b(f,Sc,u),e(Sc,$C),e($C,AMe),M(Tx,AMe,null),e(Sc,Exr),e(Sc,LMe),e(LMe,Cxr),b(f,YVe,u),b(f,cr,u),M(Mx,cr,null),e(cr,wxr),e(cr,Rc),e(Rc,Axr),e(Rc,rK),e(rK,Lxr),e(Rc,yxr),e(Rc,tK),e(tK,xxr),e(Rc,$xr),e(cr,kxr),e(cr,Ex),e(Ex,Sxr),e(Ex,yMe),e(yMe,Rxr),e(Ex,Pxr),e(cr,Bxr),e(cr,Dt),M(Cx,Dt,null),e(Dt,Ixr),e(Dt,xMe),e(xMe,Nxr),e(Dt,qxr),e(Dt,Pc),e(Pc,jxr),e(Pc,$Me),e($Me,Dxr),e(Pc,Gxr),e(Pc,aK),e(aK,Oxr),e(Pc,Vxr),e(Dt,Xxr),M(kC,Dt,null),e(cr,zxr),e(cr,qr),M(wx,qr,null),e(qr,Qxr),e(qr,kMe),e(kMe,Wxr),e(qr,Hxr),e(qr,_n),e(_n,Uxr),e(_n,SMe),e(SMe,Jxr),e(_n,Yxr),e(_n,RMe),e(RMe,Kxr),e(_n,Zxr),e(_n,PMe),e(PMe,e$r),e(_n,o$r),e(qr,r$r),e(qr,de),e(de,SC),e(SC,BMe),e(BMe,t$r),e(SC,a$r),e(SC,nK),e(nK,n$r),e(SC,s$r),e(de,l$r),e(de,RC),e(RC,IMe),e(IMe,i$r),e(RC,d$r),e(RC,sK),e(sK,c$r),e(RC,f$r),e(de,m$r),e(de,PC),e(PC,NMe),e(NMe,g$r),e(PC,h$r),e(PC,lK),e(lK,p$r),e(PC,_$r),e(de,u$r),e(de,BC),e(BC,qMe),e(qMe,b$r),e(BC,v$r),e(BC,iK),e(iK,F$r),e(BC,T$r),e(de,M$r),e(de,IC),e(IC,jMe),e(jMe,E$r),e(IC,C$r),e(IC,dK),e(dK,w$r),e(IC,A$r),e(de,L$r),e(de,NC),e(NC,DMe),e(DMe,y$r),e(NC,x$r),e(NC,cK),e(cK,$$r),e(NC,k$r),e(de,S$r),e(de,qC),e(qC,GMe),e(GMe,R$r),e(qC,P$r),e(qC,fK),e(fK,B$r),e(qC,I$r),e(de,N$r),e(de,jC),e(jC,OMe),e(OMe,q$r),e(jC,j$r),e(jC,mK),e(mK,D$r),e(jC,G$r),e(de,O$r),e(de,DC),e(DC,VMe),e(VMe,V$r),e(DC,X$r),e(DC,gK),e(gK,z$r),e(DC,Q$r),e(de,W$r),e(de,GC),e(GC,XMe),e(XMe,H$r),e(GC,U$r),e(GC,hK),e(hK,J$r),e(GC,Y$r),e(de,K$r),e(de,OC),e(OC,zMe),e(zMe,Z$r),e(OC,ekr),e(OC,pK),e(pK,okr),e(OC,rkr),e(de,tkr),e(de,VC),e(VC,QMe),e(QMe,akr),e(VC,nkr),e(VC,_K),e(_K,skr),e(VC,lkr),e(de,ikr),e(de,XC),e(XC,WMe),e(WMe,dkr),e(XC,ckr),e(XC,uK),e(uK,fkr),e(XC,mkr),e(de,gkr),e(de,zC),e(zC,HMe),e(HMe,hkr),e(zC,pkr),e(zC,bK),e(bK,_kr),e(zC,ukr),e(de,bkr),e(de,QC),e(QC,UMe),e(UMe,vkr),e(QC,Fkr),e(QC,vK),e(vK,Tkr),e(QC,Mkr),e(de,Ekr),e(de,WC),e(WC,JMe),e(JMe,Ckr),e(WC,wkr),e(WC,FK),e(FK,Akr),e(WC,Lkr),e(de,ykr),e(de,HC),e(HC,YMe),e(YMe,xkr),e(HC,$kr),e(HC,TK),e(TK,kkr),e(HC,Skr),e(de,Rkr),e(de,UC),e(UC,KMe),e(KMe,Pkr),e(UC,Bkr),e(UC,MK),e(MK,Ikr),e(UC,Nkr),e(de,qkr),e(de,JC),e(JC,ZMe),e(ZMe,jkr),e(JC,Dkr),e(JC,EK),e(EK,Gkr),e(JC,Okr),e(de,Vkr),e(de,YC),e(YC,eEe),e(eEe,Xkr),e(YC,zkr),e(YC,CK),e(CK,Qkr),e(YC,Wkr),e(qr,Hkr),M(KC,qr,null),b(f,KVe,u),b(f,Bc,u),e(Bc,ZC),e(ZC,oEe),M(Ax,oEe,null),e(Bc,Ukr),e(Bc,rEe),e(rEe,Jkr),b(f,ZVe,u),b(f,fr,u),M(Lx,fr,null),e(fr,Ykr),e(fr,Ic),e(Ic,Kkr),e(Ic,wK),e(wK,Zkr),e(Ic,eSr),e(Ic,AK),e(AK,oSr),e(Ic,rSr),e(fr,tSr),e(fr,yx),e(yx,aSr),e(yx,tEe),e(tEe,nSr),e(yx,sSr),e(fr,lSr),e(fr,Gt),M(xx,Gt,null),e(Gt,iSr),e(Gt,aEe),e(aEe,dSr),e(Gt,cSr),e(Gt,Nc),e(Nc,fSr),e(Nc,nEe),e(nEe,mSr),e(Nc,gSr),e(Nc,LK),e(LK,hSr),e(Nc,pSr),e(Gt,_Sr),M(e5,Gt,null),e(fr,uSr),e(fr,jr),M($x,jr,null),e(jr,bSr),e(jr,sEe),e(sEe,vSr),e(jr,FSr),e(jr,un),e(un,TSr),e(un,lEe),e(lEe,MSr),e(un,ESr),e(un,iEe),e(iEe,CSr),e(un,wSr),e(un,dEe),e(dEe,ASr),e(un,LSr),e(jr,ySr),e(jr,ce),e(ce,o5),e(o5,cEe),e(cEe,xSr),e(o5,$Sr),e(o5,yK),e(yK,kSr),e(o5,SSr),e(ce,RSr),e(ce,r5),e(r5,fEe),e(fEe,PSr),e(r5,BSr),e(r5,xK),e(xK,ISr),e(r5,NSr),e(ce,qSr),e(ce,t5),e(t5,mEe),e(mEe,jSr),e(t5,DSr),e(t5,$K),e($K,GSr),e(t5,OSr),e(ce,VSr),e(ce,a5),e(a5,gEe),e(gEe,XSr),e(a5,zSr),e(a5,kK),e(kK,QSr),e(a5,WSr),e(ce,HSr),e(ce,n5),e(n5,hEe),e(hEe,USr),e(n5,JSr),e(n5,SK),e(SK,YSr),e(n5,KSr),e(ce,ZSr),e(ce,s5),e(s5,pEe),e(pEe,eRr),e(s5,oRr),e(s5,RK),e(RK,rRr),e(s5,tRr),e(ce,aRr),e(ce,l5),e(l5,_Ee),e(_Ee,nRr),e(l5,sRr),e(l5,PK),e(PK,lRr),e(l5,iRr),e(ce,dRr),e(ce,i5),e(i5,uEe),e(uEe,cRr),e(i5,fRr),e(i5,BK),e(BK,mRr),e(i5,gRr),e(ce,hRr),e(ce,d5),e(d5,bEe),e(bEe,pRr),e(d5,_Rr),e(d5,IK),e(IK,uRr),e(d5,bRr),e(ce,vRr),e(ce,c5),e(c5,vEe),e(vEe,FRr),e(c5,TRr),e(c5,NK),e(NK,MRr),e(c5,ERr),e(ce,CRr),e(ce,f5),e(f5,FEe),e(FEe,wRr),e(f5,ARr),e(f5,qK),e(qK,LRr),e(f5,yRr),e(ce,xRr),e(ce,m5),e(m5,TEe),e(TEe,$Rr),e(m5,kRr),e(m5,jK),e(jK,SRr),e(m5,RRr),e(ce,PRr),e(ce,g5),e(g5,MEe),e(MEe,BRr),e(g5,IRr),e(g5,DK),e(DK,NRr),e(g5,qRr),e(ce,jRr),e(ce,h5),e(h5,EEe),e(EEe,DRr),e(h5,GRr),e(h5,GK),e(GK,ORr),e(h5,VRr),e(ce,XRr),e(ce,p5),e(p5,CEe),e(CEe,zRr),e(p5,QRr),e(p5,OK),e(OK,WRr),e(p5,HRr),e(ce,URr),e(ce,_5),e(_5,wEe),e(wEe,JRr),e(_5,YRr),e(_5,VK),e(VK,KRr),e(_5,ZRr),e(ce,ePr),e(ce,u5),e(u5,AEe),e(AEe,oPr),e(u5,rPr),e(u5,XK),e(XK,tPr),e(u5,aPr),e(ce,nPr),e(ce,b5),e(b5,LEe),e(LEe,sPr),e(b5,lPr),e(b5,zK),e(zK,iPr),e(b5,dPr),e(ce,cPr),e(ce,v5),e(v5,yEe),e(yEe,fPr),e(v5,mPr),e(v5,QK),e(QK,gPr),e(v5,hPr),e(ce,pPr),e(ce,F5),e(F5,xEe),e(xEe,_Pr),e(F5,uPr),e(F5,WK),e(WK,bPr),e(F5,vPr),e(jr,FPr),M(T5,jr,null),b(f,eXe,u),b(f,qc,u),e(qc,M5),e(M5,$Ee),M(kx,$Ee,null),e(qc,TPr),e(qc,kEe),e(kEe,MPr),b(f,oXe,u),b(f,mr,u),M(Sx,mr,null),e(mr,EPr),e(mr,jc),e(jc,CPr),e(jc,HK),e(HK,wPr),e(jc,APr),e(jc,UK),e(UK,LPr),e(jc,yPr),e(mr,xPr),e(mr,Rx),e(Rx,$Pr),e(Rx,SEe),e(SEe,kPr),e(Rx,SPr),e(mr,RPr),e(mr,Ot),M(Px,Ot,null),e(Ot,PPr),e(Ot,REe),e(REe,BPr),e(Ot,IPr),e(Ot,Dc),e(Dc,NPr),e(Dc,PEe),e(PEe,qPr),e(Dc,jPr),e(Dc,JK),e(JK,DPr),e(Dc,GPr),e(Ot,OPr),M(E5,Ot,null),e(mr,VPr),e(mr,Dr),M(Bx,Dr,null),e(Dr,XPr),e(Dr,BEe),e(BEe,zPr),e(Dr,QPr),e(Dr,bn),e(bn,WPr),e(bn,IEe),e(IEe,HPr),e(bn,UPr),e(bn,NEe),e(NEe,JPr),e(bn,YPr),e(bn,qEe),e(qEe,KPr),e(bn,ZPr),e(Dr,eBr),e(Dr,jEe),e(jEe,C5),e(C5,DEe),e(DEe,oBr),e(C5,rBr),e(C5,YK),e(YK,tBr),e(C5,aBr),e(Dr,nBr),M(w5,Dr,null),b(f,rXe,u),b(f,Gc,u),e(Gc,A5),e(A5,GEe),M(Ix,GEe,null),e(Gc,sBr),e(Gc,OEe),e(OEe,lBr),b(f,tXe,u),b(f,gr,u),M(Nx,gr,null),e(gr,iBr),e(gr,Oc),e(Oc,dBr),e(Oc,KK),e(KK,cBr),e(Oc,fBr),e(Oc,ZK),e(ZK,mBr),e(Oc,gBr),e(gr,hBr),e(gr,qx),e(qx,pBr),e(qx,VEe),e(VEe,_Br),e(qx,uBr),e(gr,bBr),e(gr,Vt),M(jx,Vt,null),e(Vt,vBr),e(Vt,XEe),e(XEe,FBr),e(Vt,TBr),e(Vt,Vc),e(Vc,MBr),e(Vc,zEe),e(zEe,EBr),e(Vc,CBr),e(Vc,eZ),e(eZ,wBr),e(Vc,ABr),e(Vt,LBr),M(L5,Vt,null),e(gr,yBr),e(gr,Gr),M(Dx,Gr,null),e(Gr,xBr),e(Gr,QEe),e(QEe,$Br),e(Gr,kBr),e(Gr,vn),e(vn,SBr),e(vn,WEe),e(WEe,RBr),e(vn,PBr),e(vn,HEe),e(HEe,BBr),e(vn,IBr),e(vn,UEe),e(UEe,NBr),e(vn,qBr),e(Gr,jBr),e(Gr,JEe),e(JEe,y5),e(y5,YEe),e(YEe,DBr),e(y5,GBr),e(y5,oZ),e(oZ,OBr),e(y5,VBr),e(Gr,XBr),M(x5,Gr,null),b(f,aXe,u),b(f,Xc,u),e(Xc,$5),e($5,KEe),M(Gx,KEe,null),e(Xc,zBr),e(Xc,ZEe),e(ZEe,QBr),b(f,nXe,u),b(f,hr,u),M(Ox,hr,null),e(hr,WBr),e(hr,zc),e(zc,HBr),e(zc,rZ),e(rZ,UBr),e(zc,JBr),e(zc,tZ),e(tZ,YBr),e(zc,KBr),e(hr,ZBr),e(hr,Vx),e(Vx,eIr),e(Vx,eCe),e(eCe,oIr),e(Vx,rIr),e(hr,tIr),e(hr,Xt),M(Xx,Xt,null),e(Xt,aIr),e(Xt,oCe),e(oCe,nIr),e(Xt,sIr),e(Xt,Qc),e(Qc,lIr),e(Qc,rCe),e(rCe,iIr),e(Qc,dIr),e(Qc,aZ),e(aZ,cIr),e(Qc,fIr),e(Xt,mIr),M(k5,Xt,null),e(hr,gIr),e(hr,Or),M(zx,Or,null),e(Or,hIr),e(Or,tCe),e(tCe,pIr),e(Or,_Ir),e(Or,Fn),e(Fn,uIr),e(Fn,aCe),e(aCe,bIr),e(Fn,vIr),e(Fn,nCe),e(nCe,FIr),e(Fn,TIr),e(Fn,sCe),e(sCe,MIr),e(Fn,EIr),e(Or,CIr),e(Or,oe),e(oe,S5),e(S5,lCe),e(lCe,wIr),e(S5,AIr),e(S5,nZ),e(nZ,LIr),e(S5,yIr),e(oe,xIr),e(oe,R5),e(R5,iCe),e(iCe,$Ir),e(R5,kIr),e(R5,sZ),e(sZ,SIr),e(R5,RIr),e(oe,PIr),e(oe,P5),e(P5,dCe),e(dCe,BIr),e(P5,IIr),e(P5,lZ),e(lZ,NIr),e(P5,qIr),e(oe,jIr),e(oe,B5),e(B5,cCe),e(cCe,DIr),e(B5,GIr),e(B5,iZ),e(iZ,OIr),e(B5,VIr),e(oe,XIr),e(oe,I5),e(I5,fCe),e(fCe,zIr),e(I5,QIr),e(I5,dZ),e(dZ,WIr),e(I5,HIr),e(oe,UIr),e(oe,N5),e(N5,mCe),e(mCe,JIr),e(N5,YIr),e(N5,cZ),e(cZ,KIr),e(N5,ZIr),e(oe,eNr),e(oe,q5),e(q5,gCe),e(gCe,oNr),e(q5,rNr),e(q5,fZ),e(fZ,tNr),e(q5,aNr),e(oe,nNr),e(oe,j5),e(j5,hCe),e(hCe,sNr),e(j5,lNr),e(j5,mZ),e(mZ,iNr),e(j5,dNr),e(oe,cNr),e(oe,D5),e(D5,pCe),e(pCe,fNr),e(D5,mNr),e(D5,gZ),e(gZ,gNr),e(D5,hNr),e(oe,pNr),e(oe,G5),e(G5,_Ce),e(_Ce,_Nr),e(G5,uNr),e(G5,hZ),e(hZ,bNr),e(G5,vNr),e(oe,FNr),e(oe,O5),e(O5,uCe),e(uCe,TNr),e(O5,MNr),e(O5,pZ),e(pZ,ENr),e(O5,CNr),e(oe,wNr),e(oe,V5),e(V5,bCe),e(bCe,ANr),e(V5,LNr),e(V5,_Z),e(_Z,yNr),e(V5,xNr),e(oe,$Nr),e(oe,X5),e(X5,vCe),e(vCe,kNr),e(X5,SNr),e(X5,uZ),e(uZ,RNr),e(X5,PNr),e(oe,BNr),e(oe,z5),e(z5,FCe),e(FCe,INr),e(z5,NNr),e(z5,bZ),e(bZ,qNr),e(z5,jNr),e(oe,DNr),e(oe,Q5),e(Q5,TCe),e(TCe,GNr),e(Q5,ONr),e(Q5,vZ),e(vZ,VNr),e(Q5,XNr),e(oe,zNr),e(oe,W5),e(W5,MCe),e(MCe,QNr),e(W5,WNr),e(W5,FZ),e(FZ,HNr),e(W5,UNr),e(oe,JNr),e(oe,H5),e(H5,ECe),e(ECe,YNr),e(H5,KNr),e(H5,TZ),e(TZ,ZNr),e(H5,eqr),e(oe,oqr),e(oe,U5),e(U5,CCe),e(CCe,rqr),e(U5,tqr),e(U5,MZ),e(MZ,aqr),e(U5,nqr),e(oe,sqr),e(oe,J5),e(J5,wCe),e(wCe,lqr),e(J5,iqr),e(J5,EZ),e(EZ,dqr),e(J5,cqr),e(oe,fqr),e(oe,Y5),e(Y5,ACe),e(ACe,mqr),e(Y5,gqr),e(Y5,CZ),e(CZ,hqr),e(Y5,pqr),e(oe,_qr),e(oe,K5),e(K5,LCe),e(LCe,uqr),e(K5,bqr),e(K5,wZ),e(wZ,vqr),e(K5,Fqr),e(oe,Tqr),e(oe,Z5),e(Z5,yCe),e(yCe,Mqr),e(Z5,Eqr),e(Z5,AZ),e(AZ,Cqr),e(Z5,wqr),e(oe,Aqr),e(oe,e0),e(e0,xCe),e(xCe,Lqr),e(e0,yqr),e(e0,LZ),e(LZ,xqr),e(e0,$qr),e(oe,kqr),e(oe,o0),e(o0,$Ce),e($Ce,Sqr),e(o0,Rqr),e(o0,yZ),e(yZ,Pqr),e(o0,Bqr),e(oe,Iqr),e(oe,r0),e(r0,kCe),e(kCe,Nqr),e(r0,qqr),e(r0,xZ),e(xZ,jqr),e(r0,Dqr),e(oe,Gqr),e(oe,t0),e(t0,SCe),e(SCe,Oqr),e(t0,Vqr),e(t0,$Z),e($Z,Xqr),e(t0,zqr),e(oe,Qqr),e(oe,a0),e(a0,RCe),e(RCe,Wqr),e(a0,Hqr),e(a0,kZ),e(kZ,Uqr),e(a0,Jqr),e(Or,Yqr),M(n0,Or,null),b(f,sXe,u),b(f,Wc,u),e(Wc,s0),e(s0,PCe),M(Qx,PCe,null),e(Wc,Kqr),e(Wc,BCe),e(BCe,Zqr),b(f,lXe,u),b(f,pr,u),M(Wx,pr,null),e(pr,ejr),e(pr,Hc),e(Hc,ojr),e(Hc,SZ),e(SZ,rjr),e(Hc,tjr),e(Hc,RZ),e(RZ,ajr),e(Hc,njr),e(pr,sjr),e(pr,Hx),e(Hx,ljr),e(Hx,ICe),e(ICe,ijr),e(Hx,djr),e(pr,cjr),e(pr,zt),M(Ux,zt,null),e(zt,fjr),e(zt,NCe),e(NCe,mjr),e(zt,gjr),e(zt,Uc),e(Uc,hjr),e(Uc,qCe),e(qCe,pjr),e(Uc,_jr),e(Uc,PZ),e(PZ,ujr),e(Uc,bjr),e(zt,vjr),M(l0,zt,null),e(pr,Fjr),e(pr,Vr),M(Jx,Vr,null),e(Vr,Tjr),e(Vr,jCe),e(jCe,Mjr),e(Vr,Ejr),e(Vr,Tn),e(Tn,Cjr),e(Tn,DCe),e(DCe,wjr),e(Tn,Ajr),e(Tn,GCe),e(GCe,Ljr),e(Tn,yjr),e(Tn,OCe),e(OCe,xjr),e(Tn,$jr),e(Vr,kjr),e(Vr,xe),e(xe,i0),e(i0,VCe),e(VCe,Sjr),e(i0,Rjr),e(i0,BZ),e(BZ,Pjr),e(i0,Bjr),e(xe,Ijr),e(xe,d0),e(d0,XCe),e(XCe,Njr),e(d0,qjr),e(d0,IZ),e(IZ,jjr),e(d0,Djr),e(xe,Gjr),e(xe,c0),e(c0,zCe),e(zCe,Ojr),e(c0,Vjr),e(c0,NZ),e(NZ,Xjr),e(c0,zjr),e(xe,Qjr),e(xe,f0),e(f0,QCe),e(QCe,Wjr),e(f0,Hjr),e(f0,qZ),e(qZ,Ujr),e(f0,Jjr),e(xe,Yjr),e(xe,m0),e(m0,WCe),e(WCe,Kjr),e(m0,Zjr),e(m0,jZ),e(jZ,eDr),e(m0,oDr),e(xe,rDr),e(xe,g0),e(g0,HCe),e(HCe,tDr),e(g0,aDr),e(g0,DZ),e(DZ,nDr),e(g0,sDr),e(xe,lDr),e(xe,h0),e(h0,UCe),e(UCe,iDr),e(h0,dDr),e(h0,GZ),e(GZ,cDr),e(h0,fDr),e(xe,mDr),e(xe,p0),e(p0,JCe),e(JCe,gDr),e(p0,hDr),e(p0,OZ),e(OZ,pDr),e(p0,_Dr),e(xe,uDr),e(xe,_0),e(_0,YCe),e(YCe,bDr),e(_0,vDr),e(_0,VZ),e(VZ,FDr),e(_0,TDr),e(xe,MDr),e(xe,u0),e(u0,KCe),e(KCe,EDr),e(u0,CDr),e(u0,XZ),e(XZ,wDr),e(u0,ADr),e(Vr,LDr),M(b0,Vr,null),b(f,iXe,u),b(f,Jc,u),e(Jc,v0),e(v0,ZCe),M(Yx,ZCe,null),e(Jc,yDr),e(Jc,e5e),e(e5e,xDr),b(f,dXe,u),b(f,_r,u),M(Kx,_r,null),e(_r,$Dr),e(_r,Yc),e(Yc,kDr),e(Yc,zZ),e(zZ,SDr),e(Yc,RDr),e(Yc,QZ),e(QZ,PDr),e(Yc,BDr),e(_r,IDr),e(_r,Zx),e(Zx,NDr),e(Zx,o5e),e(o5e,qDr),e(Zx,jDr),e(_r,DDr),e(_r,Qt),M(e$,Qt,null),e(Qt,GDr),e(Qt,r5e),e(r5e,ODr),e(Qt,VDr),e(Qt,Kc),e(Kc,XDr),e(Kc,t5e),e(t5e,zDr),e(Kc,QDr),e(Kc,WZ),e(WZ,WDr),e(Kc,HDr),e(Qt,UDr),M(F0,Qt,null),e(_r,JDr),e(_r,Xr),M(o$,Xr,null),e(Xr,YDr),e(Xr,a5e),e(a5e,KDr),e(Xr,ZDr),e(Xr,Mn),e(Mn,eGr),e(Mn,n5e),e(n5e,oGr),e(Mn,rGr),e(Mn,s5e),e(s5e,tGr),e(Mn,aGr),e(Mn,l5e),e(l5e,nGr),e(Mn,sGr),e(Xr,lGr),e(Xr,Ee),e(Ee,T0),e(T0,i5e),e(i5e,iGr),e(T0,dGr),e(T0,HZ),e(HZ,cGr),e(T0,fGr),e(Ee,mGr),e(Ee,M0),e(M0,d5e),e(d5e,gGr),e(M0,hGr),e(M0,UZ),e(UZ,pGr),e(M0,_Gr),e(Ee,uGr),e(Ee,E0),e(E0,c5e),e(c5e,bGr),e(E0,vGr),e(E0,JZ),e(JZ,FGr),e(E0,TGr),e(Ee,MGr),e(Ee,C0),e(C0,f5e),e(f5e,EGr),e(C0,CGr),e(C0,YZ),e(YZ,wGr),e(C0,AGr),e(Ee,LGr),e(Ee,w0),e(w0,m5e),e(m5e,yGr),e(w0,xGr),e(w0,KZ),e(KZ,$Gr),e(w0,kGr),e(Ee,SGr),e(Ee,A0),e(A0,g5e),e(g5e,RGr),e(A0,PGr),e(A0,ZZ),e(ZZ,BGr),e(A0,IGr),e(Ee,NGr),e(Ee,L0),e(L0,h5e),e(h5e,qGr),e(L0,jGr),e(L0,eee),e(eee,DGr),e(L0,GGr),e(Ee,OGr),e(Ee,y0),e(y0,p5e),e(p5e,VGr),e(y0,XGr),e(y0,oee),e(oee,zGr),e(y0,QGr),e(Ee,WGr),e(Ee,x0),e(x0,_5e),e(_5e,HGr),e(x0,UGr),e(x0,ree),e(ree,JGr),e(x0,YGr),e(Ee,KGr),e(Ee,$0),e($0,u5e),e(u5e,ZGr),e($0,eOr),e($0,tee),e(tee,oOr),e($0,rOr),e(Ee,tOr),e(Ee,k0),e(k0,b5e),e(b5e,aOr),e(k0,nOr),e(k0,aee),e(aee,sOr),e(k0,lOr),e(Ee,iOr),e(Ee,S0),e(S0,v5e),e(v5e,dOr),e(S0,cOr),e(S0,nee),e(nee,fOr),e(S0,mOr),e(Ee,gOr),e(Ee,R0),e(R0,F5e),e(F5e,hOr),e(R0,pOr),e(R0,see),e(see,_Or),e(R0,uOr),e(Xr,bOr),M(P0,Xr,null),b(f,cXe,u),b(f,Zc,u),e(Zc,B0),e(B0,T5e),M(r$,T5e,null),e(Zc,vOr),e(Zc,M5e),e(M5e,FOr),b(f,fXe,u),b(f,ur,u),M(t$,ur,null),e(ur,TOr),e(ur,ef),e(ef,MOr),e(ef,lee),e(lee,EOr),e(ef,COr),e(ef,iee),e(iee,wOr),e(ef,AOr),e(ur,LOr),e(ur,a$),e(a$,yOr),e(a$,E5e),e(E5e,xOr),e(a$,$Or),e(ur,kOr),e(ur,Wt),M(n$,Wt,null),e(Wt,SOr),e(Wt,C5e),e(C5e,ROr),e(Wt,POr),e(Wt,of),e(of,BOr),e(of,w5e),e(w5e,IOr),e(of,NOr),e(of,dee),e(dee,qOr),e(of,jOr),e(Wt,DOr),M(I0,Wt,null),e(ur,GOr),e(ur,zr),M(s$,zr,null),e(zr,OOr),e(zr,A5e),e(A5e,VOr),e(zr,XOr),e(zr,En),e(En,zOr),e(En,L5e),e(L5e,QOr),e(En,WOr),e(En,y5e),e(y5e,HOr),e(En,UOr),e(En,x5e),e(x5e,JOr),e(En,YOr),e(zr,KOr),e(zr,$e),e($e,N0),e(N0,$5e),e($5e,ZOr),e(N0,eVr),e(N0,cee),e(cee,oVr),e(N0,rVr),e($e,tVr),e($e,q0),e(q0,k5e),e(k5e,aVr),e(q0,nVr),e(q0,fee),e(fee,sVr),e(q0,lVr),e($e,iVr),e($e,j0),e(j0,S5e),e(S5e,dVr),e(j0,cVr),e(j0,mee),e(mee,fVr),e(j0,mVr),e($e,gVr),e($e,D0),e(D0,R5e),e(R5e,hVr),e(D0,pVr),e(D0,gee),e(gee,_Vr),e(D0,uVr),e($e,bVr),e($e,G0),e(G0,P5e),e(P5e,vVr),e(G0,FVr),e(G0,hee),e(hee,TVr),e(G0,MVr),e($e,EVr),e($e,O0),e(O0,B5e),e(B5e,CVr),e(O0,wVr),e(O0,pee),e(pee,AVr),e(O0,LVr),e($e,yVr),e($e,V0),e(V0,I5e),e(I5e,xVr),e(V0,$Vr),e(V0,_ee),e(_ee,kVr),e(V0,SVr),e($e,RVr),e($e,X0),e(X0,N5e),e(N5e,PVr),e(X0,BVr),e(X0,uee),e(uee,IVr),e(X0,NVr),e($e,qVr),e($e,z0),e(z0,q5e),e(q5e,jVr),e(z0,DVr),e(z0,bee),e(bee,GVr),e(z0,OVr),e($e,VVr),e($e,Q0),e(Q0,j5e),e(j5e,XVr),e(Q0,zVr),e(Q0,vee),e(vee,QVr),e(Q0,WVr),e(zr,HVr),M(W0,zr,null),b(f,mXe,u),b(f,rf,u),e(rf,H0),e(H0,D5e),M(l$,D5e,null),e(rf,UVr),e(rf,G5e),e(G5e,JVr),b(f,gXe,u),b(f,br,u),M(i$,br,null),e(br,YVr),e(br,tf),e(tf,KVr),e(tf,Fee),e(Fee,ZVr),e(tf,eXr),e(tf,Tee),e(Tee,oXr),e(tf,rXr),e(br,tXr),e(br,d$),e(d$,aXr),e(d$,O5e),e(O5e,nXr),e(d$,sXr),e(br,lXr),e(br,Ht),M(c$,Ht,null),e(Ht,iXr),e(Ht,V5e),e(V5e,dXr),e(Ht,cXr),e(Ht,af),e(af,fXr),e(af,X5e),e(X5e,mXr),e(af,gXr),e(af,Mee),e(Mee,hXr),e(af,pXr),e(Ht,_Xr),M(U0,Ht,null),e(br,uXr),e(br,Qr),M(f$,Qr,null),e(Qr,bXr),e(Qr,z5e),e(z5e,vXr),e(Qr,FXr),e(Qr,Cn),e(Cn,TXr),e(Cn,Q5e),e(Q5e,MXr),e(Cn,EXr),e(Cn,W5e),e(W5e,CXr),e(Cn,wXr),e(Cn,H5e),e(H5e,AXr),e(Cn,LXr),e(Qr,yXr),e(Qr,ke),e(ke,J0),e(J0,U5e),e(U5e,xXr),e(J0,$Xr),e(J0,Eee),e(Eee,kXr),e(J0,SXr),e(ke,RXr),e(ke,Y0),e(Y0,J5e),e(J5e,PXr),e(Y0,BXr),e(Y0,Cee),e(Cee,IXr),e(Y0,NXr),e(ke,qXr),e(ke,K0),e(K0,Y5e),e(Y5e,jXr),e(K0,DXr),e(K0,wee),e(wee,GXr),e(K0,OXr),e(ke,VXr),e(ke,Z0),e(Z0,K5e),e(K5e,XXr),e(Z0,zXr),e(Z0,Aee),e(Aee,QXr),e(Z0,WXr),e(ke,HXr),e(ke,ew),e(ew,Z5e),e(Z5e,UXr),e(ew,JXr),e(ew,Lee),e(Lee,YXr),e(ew,KXr),e(ke,ZXr),e(ke,ow),e(ow,e0e),e(e0e,ezr),e(ow,ozr),e(ow,yee),e(yee,rzr),e(ow,tzr),e(ke,azr),e(ke,rw),e(rw,o0e),e(o0e,nzr),e(rw,szr),e(rw,xee),e(xee,lzr),e(rw,izr),e(ke,dzr),e(ke,tw),e(tw,r0e),e(r0e,czr),e(tw,fzr),e(tw,$ee),e($ee,mzr),e(tw,gzr),e(ke,hzr),e(ke,aw),e(aw,t0e),e(t0e,pzr),e(aw,_zr),e(aw,kee),e(kee,uzr),e(aw,bzr),e(ke,vzr),e(ke,nw),e(nw,a0e),e(a0e,Fzr),e(nw,Tzr),e(nw,See),e(See,Mzr),e(nw,Ezr),e(Qr,Czr),M(sw,Qr,null),b(f,hXe,u),b(f,nf,u),e(nf,lw),e(lw,n0e),M(m$,n0e,null),e(nf,wzr),e(nf,s0e),e(s0e,Azr),b(f,pXe,u),b(f,vr,u),M(g$,vr,null),e(vr,Lzr),e(vr,sf),e(sf,yzr),e(sf,Ree),e(Ree,xzr),e(sf,$zr),e(sf,Pee),e(Pee,kzr),e(sf,Szr),e(vr,Rzr),e(vr,h$),e(h$,Pzr),e(h$,l0e),e(l0e,Bzr),e(h$,Izr),e(vr,Nzr),e(vr,Ut),M(p$,Ut,null),e(Ut,qzr),e(Ut,i0e),e(i0e,jzr),e(Ut,Dzr),e(Ut,lf),e(lf,Gzr),e(lf,d0e),e(d0e,Ozr),e(lf,Vzr),e(lf,Bee),e(Bee,Xzr),e(lf,zzr),e(Ut,Qzr),M(iw,Ut,null),e(vr,Wzr),e(vr,Wr),M(_$,Wr,null),e(Wr,Hzr),e(Wr,c0e),e(c0e,Uzr),e(Wr,Jzr),e(Wr,wn),e(wn,Yzr),e(wn,f0e),e(f0e,Kzr),e(wn,Zzr),e(wn,m0e),e(m0e,eQr),e(wn,oQr),e(wn,g0e),e(g0e,rQr),e(wn,tQr),e(Wr,aQr),e(Wr,Se),e(Se,dw),e(dw,h0e),e(h0e,nQr),e(dw,sQr),e(dw,Iee),e(Iee,lQr),e(dw,iQr),e(Se,dQr),e(Se,cw),e(cw,p0e),e(p0e,cQr),e(cw,fQr),e(cw,Nee),e(Nee,mQr),e(cw,gQr),e(Se,hQr),e(Se,fw),e(fw,_0e),e(_0e,pQr),e(fw,_Qr),e(fw,qee),e(qee,uQr),e(fw,bQr),e(Se,vQr),e(Se,mw),e(mw,u0e),e(u0e,FQr),e(mw,TQr),e(mw,jee),e(jee,MQr),e(mw,EQr),e(Se,CQr),e(Se,gw),e(gw,b0e),e(b0e,wQr),e(gw,AQr),e(gw,Dee),e(Dee,LQr),e(gw,yQr),e(Se,xQr),e(Se,hw),e(hw,v0e),e(v0e,$Qr),e(hw,kQr),e(hw,Gee),e(Gee,SQr),e(hw,RQr),e(Se,PQr),e(Se,pw),e(pw,F0e),e(F0e,BQr),e(pw,IQr),e(pw,Oee),e(Oee,NQr),e(pw,qQr),e(Se,jQr),e(Se,_w),e(_w,T0e),e(T0e,DQr),e(_w,GQr),e(_w,Vee),e(Vee,OQr),e(_w,VQr),e(Se,XQr),e(Se,uw),e(uw,M0e),e(M0e,zQr),e(uw,QQr),e(uw,Xee),e(Xee,WQr),e(uw,HQr),e(Se,UQr),e(Se,bw),e(bw,E0e),e(E0e,JQr),e(bw,YQr),e(bw,zee),e(zee,KQr),e(bw,ZQr),e(Wr,eWr),M(vw,Wr,null),b(f,_Xe,u),b(f,df,u),e(df,Fw),e(Fw,C0e),M(u$,C0e,null),e(df,oWr),e(df,w0e),e(w0e,rWr),b(f,uXe,u),b(f,Fr,u),M(b$,Fr,null),e(Fr,tWr),e(Fr,cf),e(cf,aWr),e(cf,Qee),e(Qee,nWr),e(cf,sWr),e(cf,Wee),e(Wee,lWr),e(cf,iWr),e(Fr,dWr),e(Fr,v$),e(v$,cWr),e(v$,A0e),e(A0e,fWr),e(v$,mWr),e(Fr,gWr),e(Fr,Jt),M(F$,Jt,null),e(Jt,hWr),e(Jt,L0e),e(L0e,pWr),e(Jt,_Wr),e(Jt,ff),e(ff,uWr),e(ff,y0e),e(y0e,bWr),e(ff,vWr),e(ff,Hee),e(Hee,FWr),e(ff,TWr),e(Jt,MWr),M(Tw,Jt,null),e(Fr,EWr),e(Fr,Hr),M(T$,Hr,null),e(Hr,CWr),e(Hr,x0e),e(x0e,wWr),e(Hr,AWr),e(Hr,An),e(An,LWr),e(An,$0e),e($0e,yWr),e(An,xWr),e(An,k0e),e(k0e,$Wr),e(An,kWr),e(An,S0e),e(S0e,SWr),e(An,RWr),e(Hr,PWr),e(Hr,Re),e(Re,Mw),e(Mw,R0e),e(R0e,BWr),e(Mw,IWr),e(Mw,Uee),e(Uee,NWr),e(Mw,qWr),e(Re,jWr),e(Re,Ew),e(Ew,P0e),e(P0e,DWr),e(Ew,GWr),e(Ew,Jee),e(Jee,OWr),e(Ew,VWr),e(Re,XWr),e(Re,Cw),e(Cw,B0e),e(B0e,zWr),e(Cw,QWr),e(Cw,Yee),e(Yee,WWr),e(Cw,HWr),e(Re,UWr),e(Re,ww),e(ww,I0e),e(I0e,JWr),e(ww,YWr),e(ww,Kee),e(Kee,KWr),e(ww,ZWr),e(Re,eHr),e(Re,Aw),e(Aw,N0e),e(N0e,oHr),e(Aw,rHr),e(Aw,Zee),e(Zee,tHr),e(Aw,aHr),e(Re,nHr),e(Re,Lw),e(Lw,q0e),e(q0e,sHr),e(Lw,lHr),e(Lw,eoe),e(eoe,iHr),e(Lw,dHr),e(Re,cHr),e(Re,yw),e(yw,j0e),e(j0e,fHr),e(yw,mHr),e(yw,ooe),e(ooe,gHr),e(yw,hHr),e(Re,pHr),e(Re,xw),e(xw,D0e),e(D0e,_Hr),e(xw,uHr),e(xw,roe),e(roe,bHr),e(xw,vHr),e(Re,FHr),e(Re,$w),e($w,G0e),e(G0e,THr),e($w,MHr),e($w,toe),e(toe,EHr),e($w,CHr),e(Re,wHr),e(Re,kw),e(kw,O0e),e(O0e,AHr),e(kw,LHr),e(kw,aoe),e(aoe,yHr),e(kw,xHr),e(Hr,$Hr),M(Sw,Hr,null),b(f,bXe,u),b(f,mf,u),e(mf,Rw),e(Rw,V0e),M(M$,V0e,null),e(mf,kHr),e(mf,X0e),e(X0e,SHr),b(f,vXe,u),b(f,Tr,u),M(E$,Tr,null),e(Tr,RHr),e(Tr,gf),e(gf,PHr),e(gf,noe),e(noe,BHr),e(gf,IHr),e(gf,soe),e(soe,NHr),e(gf,qHr),e(Tr,jHr),e(Tr,C$),e(C$,DHr),e(C$,z0e),e(z0e,GHr),e(C$,OHr),e(Tr,VHr),e(Tr,Yt),M(w$,Yt,null),e(Yt,XHr),e(Yt,Q0e),e(Q0e,zHr),e(Yt,QHr),e(Yt,hf),e(hf,WHr),e(hf,W0e),e(W0e,HHr),e(hf,UHr),e(hf,loe),e(loe,JHr),e(hf,YHr),e(Yt,KHr),M(Pw,Yt,null),e(Tr,ZHr),e(Tr,Ur),M(A$,Ur,null),e(Ur,eUr),e(Ur,H0e),e(H0e,oUr),e(Ur,rUr),e(Ur,Ln),e(Ln,tUr),e(Ln,U0e),e(U0e,aUr),e(Ln,nUr),e(Ln,J0e),e(J0e,sUr),e(Ln,lUr),e(Ln,Y0e),e(Y0e,iUr),e(Ln,dUr),e(Ur,cUr),e(Ur,Ve),e(Ve,Bw),e(Bw,K0e),e(K0e,fUr),e(Bw,mUr),e(Bw,ioe),e(ioe,gUr),e(Bw,hUr),e(Ve,pUr),e(Ve,Iw),e(Iw,Z0e),e(Z0e,_Ur),e(Iw,uUr),e(Iw,doe),e(doe,bUr),e(Iw,vUr),e(Ve,FUr),e(Ve,Nw),e(Nw,ewe),e(ewe,TUr),e(Nw,MUr),e(Nw,coe),e(coe,EUr),e(Nw,CUr),e(Ve,wUr),e(Ve,qw),e(qw,owe),e(owe,AUr),e(qw,LUr),e(qw,foe),e(foe,yUr),e(qw,xUr),e(Ve,$Ur),e(Ve,jw),e(jw,rwe),e(rwe,kUr),e(jw,SUr),e(jw,moe),e(moe,RUr),e(jw,PUr),e(Ve,BUr),e(Ve,Dw),e(Dw,twe),e(twe,IUr),e(Dw,NUr),e(Dw,goe),e(goe,qUr),e(Dw,jUr),e(Ve,DUr),e(Ve,Gw),e(Gw,awe),e(awe,GUr),e(Gw,OUr),e(Gw,hoe),e(hoe,VUr),e(Gw,XUr),e(Ve,zUr),e(Ve,Ow),e(Ow,nwe),e(nwe,QUr),e(Ow,WUr),e(Ow,poe),e(poe,HUr),e(Ow,UUr),e(Ur,JUr),M(Vw,Ur,null),b(f,FXe,u),b(f,pf,u),e(pf,Xw),e(Xw,swe),M(L$,swe,null),e(pf,YUr),e(pf,lwe),e(lwe,KUr),b(f,TXe,u),b(f,Mr,u),M(y$,Mr,null),e(Mr,ZUr),e(Mr,_f),e(_f,eJr),e(_f,_oe),e(_oe,oJr),e(_f,rJr),e(_f,uoe),e(uoe,tJr),e(_f,aJr),e(Mr,nJr),e(Mr,x$),e(x$,sJr),e(x$,iwe),e(iwe,lJr),e(x$,iJr),e(Mr,dJr),e(Mr,Kt),M($$,Kt,null),e(Kt,cJr),e(Kt,dwe),e(dwe,fJr),e(Kt,mJr),e(Kt,uf),e(uf,gJr),e(uf,cwe),e(cwe,hJr),e(uf,pJr),e(uf,boe),e(boe,_Jr),e(uf,uJr),e(Kt,bJr),M(zw,Kt,null),e(Mr,vJr),e(Mr,Jr),M(k$,Jr,null),e(Jr,FJr),e(Jr,fwe),e(fwe,TJr),e(Jr,MJr),e(Jr,yn),e(yn,EJr),e(yn,mwe),e(mwe,CJr),e(yn,wJr),e(yn,gwe),e(gwe,AJr),e(yn,LJr),e(yn,hwe),e(hwe,yJr),e(yn,xJr),e(Jr,$Jr),e(Jr,Xe),e(Xe,Qw),e(Qw,pwe),e(pwe,kJr),e(Qw,SJr),e(Qw,voe),e(voe,RJr),e(Qw,PJr),e(Xe,BJr),e(Xe,Ww),e(Ww,_we),e(_we,IJr),e(Ww,NJr),e(Ww,Foe),e(Foe,qJr),e(Ww,jJr),e(Xe,DJr),e(Xe,Hw),e(Hw,uwe),e(uwe,GJr),e(Hw,OJr),e(Hw,Toe),e(Toe,VJr),e(Hw,XJr),e(Xe,zJr),e(Xe,Uw),e(Uw,bwe),e(bwe,QJr),e(Uw,WJr),e(Uw,Moe),e(Moe,HJr),e(Uw,UJr),e(Xe,JJr),e(Xe,Jw),e(Jw,vwe),e(vwe,YJr),e(Jw,KJr),e(Jw,Eoe),e(Eoe,ZJr),e(Jw,eYr),e(Xe,oYr),e(Xe,Yw),e(Yw,Fwe),e(Fwe,rYr),e(Yw,tYr),e(Yw,Coe),e(Coe,aYr),e(Yw,nYr),e(Xe,sYr),e(Xe,Kw),e(Kw,Twe),e(Twe,lYr),e(Kw,iYr),e(Kw,woe),e(woe,dYr),e(Kw,cYr),e(Xe,fYr),e(Xe,Zw),e(Zw,Mwe),e(Mwe,mYr),e(Zw,gYr),e(Zw,Aoe),e(Aoe,hYr),e(Zw,pYr),e(Jr,_Yr),M(eA,Jr,null),b(f,MXe,u),b(f,bf,u),e(bf,oA),e(oA,Ewe),M(S$,Ewe,null),e(bf,uYr),e(bf,Cwe),e(Cwe,bYr),b(f,EXe,u),b(f,Er,u),M(R$,Er,null),e(Er,vYr),e(Er,vf),e(vf,FYr),e(vf,Loe),e(Loe,TYr),e(vf,MYr),e(vf,yoe),e(yoe,EYr),e(vf,CYr),e(Er,wYr),e(Er,P$),e(P$,AYr),e(P$,wwe),e(wwe,LYr),e(P$,yYr),e(Er,xYr),e(Er,Zt),M(B$,Zt,null),e(Zt,$Yr),e(Zt,Awe),e(Awe,kYr),e(Zt,SYr),e(Zt,Ff),e(Ff,RYr),e(Ff,Lwe),e(Lwe,PYr),e(Ff,BYr),e(Ff,xoe),e(xoe,IYr),e(Ff,NYr),e(Zt,qYr),M(rA,Zt,null),e(Er,jYr),e(Er,Yr),M(I$,Yr,null),e(Yr,DYr),e(Yr,ywe),e(ywe,GYr),e(Yr,OYr),e(Yr,xn),e(xn,VYr),e(xn,xwe),e(xwe,XYr),e(xn,zYr),e(xn,$we),e($we,QYr),e(xn,WYr),e(xn,kwe),e(kwe,HYr),e(xn,UYr),e(Yr,JYr),e(Yr,Swe),e(Swe,tA),e(tA,Rwe),e(Rwe,YYr),e(tA,KYr),e(tA,$oe),e($oe,ZYr),e(tA,eKr),e(Yr,oKr),M(aA,Yr,null),b(f,CXe,u),b(f,Tf,u),e(Tf,nA),e(nA,Pwe),M(N$,Pwe,null),e(Tf,rKr),e(Tf,Bwe),e(Bwe,tKr),b(f,wXe,u),b(f,Cr,u),M(q$,Cr,null),e(Cr,aKr),e(Cr,Mf),e(Mf,nKr),e(Mf,koe),e(koe,sKr),e(Mf,lKr),e(Mf,Soe),e(Soe,iKr),e(Mf,dKr),e(Cr,cKr),e(Cr,j$),e(j$,fKr),e(j$,Iwe),e(Iwe,mKr),e(j$,gKr),e(Cr,hKr),e(Cr,ea),M(D$,ea,null),e(ea,pKr),e(ea,Nwe),e(Nwe,_Kr),e(ea,uKr),e(ea,Ef),e(Ef,bKr),e(Ef,qwe),e(qwe,vKr),e(Ef,FKr),e(Ef,Roe),e(Roe,TKr),e(Ef,MKr),e(ea,EKr),M(sA,ea,null),e(Cr,CKr),e(Cr,Kr),M(G$,Kr,null),e(Kr,wKr),e(Kr,jwe),e(jwe,AKr),e(Kr,LKr),e(Kr,$n),e($n,yKr),e($n,Dwe),e(Dwe,xKr),e($n,$Kr),e($n,Gwe),e(Gwe,kKr),e($n,SKr),e($n,Owe),e(Owe,RKr),e($n,PKr),e(Kr,BKr),e(Kr,O$),e(O$,lA),e(lA,Vwe),e(Vwe,IKr),e(lA,NKr),e(lA,Poe),e(Poe,qKr),e(lA,jKr),e(O$,DKr),e(O$,iA),e(iA,Xwe),e(Xwe,GKr),e(iA,OKr),e(iA,Boe),e(Boe,VKr),e(iA,XKr),e(Kr,zKr),M(dA,Kr,null),b(f,AXe,u),b(f,Cf,u),e(Cf,cA),e(cA,zwe),M(V$,zwe,null),e(Cf,QKr),e(Cf,Qwe),e(Qwe,WKr),b(f,LXe,u),b(f,wr,u),M(X$,wr,null),e(wr,HKr),e(wr,wf),e(wf,UKr),e(wf,Ioe),e(Ioe,JKr),e(wf,YKr),e(wf,Noe),e(Noe,KKr),e(wf,ZKr),e(wr,eZr),e(wr,z$),e(z$,oZr),e(z$,Wwe),e(Wwe,rZr),e(z$,tZr),e(wr,aZr),e(wr,oa),M(Q$,oa,null),e(oa,nZr),e(oa,Hwe),e(Hwe,sZr),e(oa,lZr),e(oa,Af),e(Af,iZr),e(Af,Uwe),e(Uwe,dZr),e(Af,cZr),e(Af,qoe),e(qoe,fZr),e(Af,mZr),e(oa,gZr),M(fA,oa,null),e(wr,hZr),e(wr,Zr),M(W$,Zr,null),e(Zr,pZr),e(Zr,Jwe),e(Jwe,_Zr),e(Zr,uZr),e(Zr,kn),e(kn,bZr),e(kn,Ywe),e(Ywe,vZr),e(kn,FZr),e(kn,Kwe),e(Kwe,TZr),e(kn,MZr),e(kn,Zwe),e(Zwe,EZr),e(kn,CZr),e(Zr,wZr),e(Zr,eAe),e(eAe,mA),e(mA,oAe),e(oAe,AZr),e(mA,LZr),e(mA,joe),e(joe,yZr),e(mA,xZr),e(Zr,$Zr),M(gA,Zr,null),yXe=!0},p(f,[u]){const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),Bf.$set(H$);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),zg.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),Lh.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),dp.$set(aAe);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),cp.$set(U$);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),kp.$set(nAe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),Sp.$set(Sn);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),Bp.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),Nu.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),ju.$set(iAe);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),k1.$set(J$);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),R1.$set(dAe);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),F7.$set(Y$);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),M7.$set(cAe);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),l2.$set(K$);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),d2.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),y2.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),$2.$set(gAe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),Lb.$set(Lf);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),xb.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),l4.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),d4.$set(_Ae);const Z$={};u&2&&(Z$.$$scope={dirty:u,ctx:f}),u4.$set(Z$);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),v4.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),t3.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),n3.$set(vAe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),H3.$set(rt);const ek={};u&2&&(ek.$$scope={dirty:u,ctx:f}),J3.$set(ek);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),Z3.$set(FAe);const ok={};u&2&&(ok.$$scope={dirty:u,ctx:f}),ov.$set(ok);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),pv.$set(TAe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),uv.$set(tt);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),Fv.$set(MAe);const yf={};u&2&&(yf.$$scope={dirty:u,ctx:f}),Mv.$set(yf);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),wv.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),Lv.$set(CAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),qv.$set(L);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),Dv.$set(hA);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),Wv.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),Uv.$set(AAe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),lF.$set(pA);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),dF.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),gF.$set(yAe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),pF.$set(_A);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),MF.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),CF.$set($Ae);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),xF.$set(uA);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),kF.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),BF.$set(SAe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),NF.$set(bA);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),DF.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),OF.$set(PAe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),HF.$set(vA);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),JF.$set(BAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),ZF.$set(IAe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),oT.$set(FA);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),HT.$set(NAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),JT.$set(qAe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),FM.$set(TA);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),MM.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),IM.$set(DAe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),qM.$set(MA);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),VM.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),zM.$set(OAe);const EA={};u&2&&(EA.$$scope={dirty:u,ctx:f}),mE.$set(EA);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),hE.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),wE.$set(XAe);const CA={};u&2&&(CA.$$scope={dirty:u,ctx:f}),LE.$set(CA);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),eC.$set(zAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),rC.$set(QAe);const wA={};u&2&&(wA.$$scope={dirty:u,ctx:f}),FC.$set(wA);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),MC.$set(WAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),wC.$set(HAe);const AA={};u&2&&(AA.$$scope={dirty:u,ctx:f}),LC.$set(AA);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),xC.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),kC.$set(JAe);const LA={};u&2&&(LA.$$scope={dirty:u,ctx:f}),KC.$set(LA);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),e5.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),T5.$set(KAe);const yA={};u&2&&(yA.$$scope={dirty:u,ctx:f}),E5.$set(yA);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),w5.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),L5.$set(e6e);const xA={};u&2&&(xA.$$scope={dirty:u,ctx:f}),x5.$set(xA);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),k5.$set(o6e);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),n0.$set(r6e);const $A={};u&2&&($A.$$scope={dirty:u,ctx:f}),l0.$set($A);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),b0.$set(t6e);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),F0.$set(a6e);const kA={};u&2&&(kA.$$scope={dirty:u,ctx:f}),P0.$set(kA);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),I0.$set(n6e);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),W0.$set(s6e);const SA={};u&2&&(SA.$$scope={dirty:u,ctx:f}),U0.$set(SA);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),sw.$set(l6e);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),iw.$set(i6e);const RA={};u&2&&(RA.$$scope={dirty:u,ctx:f}),vw.$set(RA);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),Tw.$set(d6e);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),Sw.$set(c6e);const PA={};u&2&&(PA.$$scope={dirty:u,ctx:f}),Pw.$set(PA);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),Vw.$set(f6e);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),zw.$set(m6e);const BA={};u&2&&(BA.$$scope={dirty:u,ctx:f}),eA.$set(BA);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),rA.$set(g6e);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),aA.$set(h6e);const IA={};u&2&&(IA.$$scope={dirty:u,ctx:f}),sA.$set(IA);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),dA.$set(p6e);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),fA.$set(_6e);const NA={};u&2&&(NA.$$scope={dirty:u,ctx:f}),gA.$set(NA)},i(f){yXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(Bf.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(XL.$$.fragment,f),E(zg.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(JL.$$.fragment,f),E(Lh.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ry.$$.fragment,f),E(dp.$$.fragment,f),E(cp.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(iy.$$.fragment,f),E(kp.$$.fragment,f),E(Sp.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(Bp.$$.fragment,f),E(hy.$$.fragment,f),E(Nu.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(ju.$$.fragment,f),E(vy.$$.fragment,f),E(k1.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(R1.$$.fragment,f),E(Cy.$$.fragment,f),E(F7.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(M7.$$.fragment,f),E(xy.$$.fragment,f),E(l2.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(d2.$$.fragment,f),E(Py.$$.fragment,f),E(y2.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E($2.$$.fragment,f),E(jy.$$.fragment,f),E(Lb.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(xb.$$.fragment,f),E(Xy.$$.fragment,f),E(l4.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(d4.$$.fragment,f),E(Uy.$$.fragment,f),E(u4.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(v4.$$.fragment,f),E(e8.$$.fragment,f),E(t3.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(n3.$$.fragment,f),E(n8.$$.fragment,f),E(H3.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(J3.$$.fragment,f),E(c8.$$.fragment,f),E(Z3.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(ov.$$.fragment,f),E(p8.$$.fragment,f),E(pv.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(uv.$$.fragment,f),E(F8.$$.fragment,f),E(Fv.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(Mv.$$.fragment,f),E(w8.$$.fragment,f),E(wv.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(Lv.$$.fragment,f),E($8.$$.fragment,f),E(qv.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(Dv.$$.fragment,f),E(B8.$$.fragment,f),E(Wv.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(Uv.$$.fragment,f),E(D8.$$.fragment,f),E(lF.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(dF.$$.fragment,f),E(z8.$$.fragment,f),E(gF.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(pF.$$.fragment,f),E(Y8.$$.fragment,f),E(MF.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(CF.$$.fragment,f),E(r9.$$.fragment,f),E(xF.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(kF.$$.fragment,f),E(l9.$$.fragment,f),E(BF.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(NF.$$.fragment,f),E(g9.$$.fragment,f),E(DF.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(OF.$$.fragment,f),E(b9.$$.fragment,f),E(HF.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(JF.$$.fragment,f),E(E9.$$.fragment,f),E(ZF.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(oT.$$.fragment,f),E(y9.$$.fragment,f),E(HT.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(JT.$$.fragment,f),E(R9.$$.fragment,f),E(FM.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(MM.$$.fragment,f),E(q9.$$.fragment,f),E(IM.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(qM.$$.fragment,f),E(V9.$$.fragment,f),E(VM.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(zM.$$.fragment,f),E(H9.$$.fragment,f),E(mE.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(hE.$$.fragment,f),E(Z9.$$.fragment,f),E(wE.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(LE.$$.fragment,f),E(ax.$$.fragment,f),E(eC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(rC.$$.fragment,f),E(dx.$$.fragment,f),E(FC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(MC.$$.fragment,f),E(hx.$$.fragment,f),E(wC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(LC.$$.fragment,f),E(Fx.$$.fragment,f),E(xC.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(kC.$$.fragment,f),E(wx.$$.fragment,f),E(KC.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(e5.$$.fragment,f),E($x.$$.fragment,f),E(T5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(E5.$$.fragment,f),E(Bx.$$.fragment,f),E(w5.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(L5.$$.fragment,f),E(Dx.$$.fragment,f),E(x5.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(k5.$$.fragment,f),E(zx.$$.fragment,f),E(n0.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(l0.$$.fragment,f),E(Jx.$$.fragment,f),E(b0.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(F0.$$.fragment,f),E(o$.$$.fragment,f),E(P0.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(I0.$$.fragment,f),E(s$.$$.fragment,f),E(W0.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(U0.$$.fragment,f),E(f$.$$.fragment,f),E(sw.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(iw.$$.fragment,f),E(_$.$$.fragment,f),E(vw.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(Tw.$$.fragment,f),E(T$.$$.fragment,f),E(Sw.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(Pw.$$.fragment,f),E(A$.$$.fragment,f),E(Vw.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(zw.$$.fragment,f),E(k$.$$.fragment,f),E(eA.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(rA.$$.fragment,f),E(I$.$$.fragment,f),E(aA.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(sA.$$.fragment,f),E(G$.$$.fragment,f),E(dA.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(fA.$$.fragment,f),E(W$.$$.fragment,f),E(gA.$$.fragment,f),yXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(Bf.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(XL.$$.fragment,f),C(zg.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(JL.$$.fragment,f),C(Lh.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ry.$$.fragment,f),C(dp.$$.fragment,f),C(cp.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(iy.$$.fragment,f),C(kp.$$.fragment,f),C(Sp.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(Bp.$$.fragment,f),C(hy.$$.fragment,f),C(Nu.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(ju.$$.fragment,f),C(vy.$$.fragment,f),C(k1.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(R1.$$.fragment,f),C(Cy.$$.fragment,f),C(F7.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(M7.$$.fragment,f),C(xy.$$.fragment,f),C(l2.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(d2.$$.fragment,f),C(Py.$$.fragment,f),C(y2.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C($2.$$.fragment,f),C(jy.$$.fragment,f),C(Lb.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(xb.$$.fragment,f),C(Xy.$$.fragment,f),C(l4.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(d4.$$.fragment,f),C(Uy.$$.fragment,f),C(u4.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(v4.$$.fragment,f),C(e8.$$.fragment,f),C(t3.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(n3.$$.fragment,f),C(n8.$$.fragment,f),C(H3.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(J3.$$.fragment,f),C(c8.$$.fragment,f),C(Z3.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(ov.$$.fragment,f),C(p8.$$.fragment,f),C(pv.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(uv.$$.fragment,f),C(F8.$$.fragment,f),C(Fv.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(Mv.$$.fragment,f),C(w8.$$.fragment,f),C(wv.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(Lv.$$.fragment,f),C($8.$$.fragment,f),C(qv.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(Dv.$$.fragment,f),C(B8.$$.fragment,f),C(Wv.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(Uv.$$.fragment,f),C(D8.$$.fragment,f),C(lF.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(dF.$$.fragment,f),C(z8.$$.fragment,f),C(gF.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(pF.$$.fragment,f),C(Y8.$$.fragment,f),C(MF.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(CF.$$.fragment,f),C(r9.$$.fragment,f),C(xF.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(kF.$$.fragment,f),C(l9.$$.fragment,f),C(BF.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(NF.$$.fragment,f),C(g9.$$.fragment,f),C(DF.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(OF.$$.fragment,f),C(b9.$$.fragment,f),C(HF.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(JF.$$.fragment,f),C(E9.$$.fragment,f),C(ZF.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(oT.$$.fragment,f),C(y9.$$.fragment,f),C(HT.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(JT.$$.fragment,f),C(R9.$$.fragment,f),C(FM.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(MM.$$.fragment,f),C(q9.$$.fragment,f),C(IM.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(qM.$$.fragment,f),C(V9.$$.fragment,f),C(VM.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(zM.$$.fragment,f),C(H9.$$.fragment,f),C(mE.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(hE.$$.fragment,f),C(Z9.$$.fragment,f),C(wE.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(LE.$$.fragment,f),C(ax.$$.fragment,f),C(eC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(rC.$$.fragment,f),C(dx.$$.fragment,f),C(FC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(MC.$$.fragment,f),C(hx.$$.fragment,f),C(wC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(LC.$$.fragment,f),C(Fx.$$.fragment,f),C(xC.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(kC.$$.fragment,f),C(wx.$$.fragment,f),C(KC.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(e5.$$.fragment,f),C($x.$$.fragment,f),C(T5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(E5.$$.fragment,f),C(Bx.$$.fragment,f),C(w5.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(L5.$$.fragment,f),C(Dx.$$.fragment,f),C(x5.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(k5.$$.fragment,f),C(zx.$$.fragment,f),C(n0.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(l0.$$.fragment,f),C(Jx.$$.fragment,f),C(b0.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(F0.$$.fragment,f),C(o$.$$.fragment,f),C(P0.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(I0.$$.fragment,f),C(s$.$$.fragment,f),C(W0.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(U0.$$.fragment,f),C(f$.$$.fragment,f),C(sw.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(iw.$$.fragment,f),C(_$.$$.fragment,f),C(vw.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(Tw.$$.fragment,f),C(T$.$$.fragment,f),C(Sw.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(Pw.$$.fragment,f),C(A$.$$.fragment,f),C(Vw.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(zw.$$.fragment,f),C(k$.$$.fragment,f),C(eA.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(rA.$$.fragment,f),C(I$.$$.fragment,f),C(aA.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(sA.$$.fragment,f),C(G$.$$.fragment,f),C(dA.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(fA.$$.fragment,f),C(W$.$$.fragment,f),C(gA.$$.fragment,f),yXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t($f),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(Sf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(EOe),f&&t($i),w(qL),f&&t(COe),f&&t(Nn),f&&t(wOe),w(jL,f),f&&t(AOe),f&&t(bS),f&&t(LOe),w(Bf,f),f&&t(yOe),f&&t(ki),w(DL),f&&t(xOe),f&&t(wo),w(GL),w(XL),w(zg),w(zL),f&&t($Oe),f&&t(Ri),w(QL),f&&t(kOe),f&&t(Ao),w(WL),w(JL),w(Lh),w(YL),f&&t(SOe),f&&t(Pi),w(KL),f&&t(ROe),f&&t(Lo),w(ZL),w(ry),w(dp),w(cp),w(ty),f&&t(POe),f&&t(Bi),w(ay),f&&t(BOe),f&&t(yo),w(ny),w(iy),w(kp),w(Sp),w(dy),f&&t(IOe),f&&t(Ni),w(cy),f&&t(NOe),f&&t(xo),w(fy),w(gy),w(Bp),w(hy),w(Nu),f&&t(qOe),f&&t(Di),w(py),f&&t(jOe),f&&t($o),w(_y),w(by),w(ju),w(vy),w(k1),f&&t(DOe),f&&t(Vi),w(Fy),f&&t(GOe),f&&t(ko),w(Ty),w(Ey),w(R1),w(Cy),w(F7),f&&t(OOe),f&&t(Qi),w(wy),f&&t(VOe),f&&t(So),w(Ay),w(yy),w(M7),w(xy),w(l2),f&&t(XOe),f&&t(Ui),w($y),f&&t(zOe),f&&t(Ro),w(ky),w(Ry),w(d2),w(Py),w(y2),f&&t(QOe),f&&t(Ki),w(By),f&&t(WOe),f&&t(Po),w(Iy),w(qy),w($2),w(jy),w(Lb),f&&t(HOe),f&&t(od),w(Dy),f&&t(UOe),f&&t(Bo),w(Gy),w(Vy),w(xb),w(Xy),w(l4),f&&t(JOe),f&&t(ad),w(zy),f&&t(YOe),f&&t(Io),w(Qy),w(Hy),w(d4),w(Uy),w(u4),f&&t(KOe),f&&t(ld),w(Jy),f&&t(ZOe),f&&t(qo),w(Yy),w(Zy),w(v4),w(e8),w(t3),f&&t(eVe),f&&t(cd),w(o8),f&&t(oVe),f&&t(jo),w(r8),w(a8),w(n3),w(n8),w(H3),f&&t(rVe),f&&t(gd),w(s8),f&&t(tVe),f&&t(Do),w(l8),w(d8),w(J3),w(c8),w(Z3),f&&t(aVe),f&&t(_d),w(f8),f&&t(nVe),f&&t(Go),w(m8),w(h8),w(ov),w(p8),w(pv),f&&t(sVe),f&&t(vd),w(_8),f&&t(lVe),f&&t(Oo),w(u8),w(v8),w(uv),w(F8),w(Fv),f&&t(iVe),f&&t(Md),w(T8),f&&t(dVe),f&&t(Vo),w(M8),w(C8),w(Mv),w(w8),w(wv),f&&t(cVe),f&&t(wd),w(A8),f&&t(fVe),f&&t(Xo),w(L8),w(x8),w(Lv),w($8),w(qv),f&&t(mVe),f&&t(yd),w(k8),f&&t(gVe),f&&t(zo),w(S8),w(P8),w(Dv),w(B8),w(Wv),f&&t(hVe),f&&t(kd),w(I8),f&&t(pVe),f&&t(Qo),w(N8),w(j8),w(Uv),w(D8),w(lF),f&&t(_Ve),f&&t(Pd),w(G8),f&&t(uVe),f&&t(Wo),w(O8),w(X8),w(dF),w(z8),w(gF),f&&t(bVe),f&&t(Nd),w(W8),f&&t(vVe),f&&t(Ho),w(H8),w(J8),w(pF),w(Y8),w(MF),f&&t(FVe),f&&t(Dd),w(K8),f&&t(TVe),f&&t(Uo),w(Z8),w(o9),w(CF),w(r9),w(xF),f&&t(MVe),f&&t(Xd),w(t9),f&&t(EVe),f&&t(Jo),w(a9),w(s9),w(kF),w(l9),w(BF),f&&t(CVe),f&&t(Wd),w(d9),f&&t(wVe),f&&t(Yo),w(c9),w(m9),w(NF),w(g9),w(DF),f&&t(AVe),f&&t(Jd),w(h9),f&&t(LVe),f&&t(Ko),w(p9),w(u9),w(OF),w(b9),w(HF),f&&t(yVe),f&&t(Zd),w(v9),f&&t(xVe),f&&t(Zo),w(F9),w(M9),w(JF),w(E9),w(ZF),f&&t($Ve),f&&t(rc),w(C9),f&&t(kVe),f&&t(er),w(w9),w(L9),w(oT),w(y9),w(HT),f&&t(SVe),f&&t(nc),w(x9),f&&t(RVe),f&&t(or),w($9),w(S9),w(JT),w(R9),w(FM),f&&t(PVe),f&&t(ic),w(P9),f&&t(BVe),f&&t(rr),w(B9),w(N9),w(MM),w(q9),w(IM),f&&t(IVe),f&&t(fc),w(j9),f&&t(NVe),f&&t(tr),w(D9),w(O9),w(qM),w(V9),w(VM),f&&t(qVe),f&&t(hc),w(X9),f&&t(jVe),f&&t(ar),w(z9),w(W9),w(zM),w(H9),w(mE),f&&t(DVe),f&&t(uc),w(U9),f&&t(GVe),f&&t(nr),w(J9),w(K9),w(hE),w(Z9),w(wE),f&&t(OVe),f&&t(Fc),w(ex),f&&t(VVe),f&&t(sr),w(ox),w(tx),w(LE),w(ax),w(eC),f&&t(XVe),f&&t(Ec),w(nx),f&&t(zVe),f&&t(lr),w(sx),w(ix),w(rC),w(dx),w(FC),f&&t(QVe),f&&t(Ac),w(cx),f&&t(WVe),f&&t(ir),w(fx),w(gx),w(MC),w(hx),w(wC),f&&t(HVe),f&&t(xc),w(_x),f&&t(UVe),f&&t(dr),w(ux),w(vx),w(LC),w(Fx),w(xC),f&&t(JVe),f&&t(Sc),w(Tx),f&&t(YVe),f&&t(cr),w(Mx),w(Cx),w(kC),w(wx),w(KC),f&&t(KVe),f&&t(Bc),w(Ax),f&&t(ZVe),f&&t(fr),w(Lx),w(xx),w(e5),w($x),w(T5),f&&t(eXe),f&&t(qc),w(kx),f&&t(oXe),f&&t(mr),w(Sx),w(Px),w(E5),w(Bx),w(w5),f&&t(rXe),f&&t(Gc),w(Ix),f&&t(tXe),f&&t(gr),w(Nx),w(jx),w(L5),w(Dx),w(x5),f&&t(aXe),f&&t(Xc),w(Gx),f&&t(nXe),f&&t(hr),w(Ox),w(Xx),w(k5),w(zx),w(n0),f&&t(sXe),f&&t(Wc),w(Qx),f&&t(lXe),f&&t(pr),w(Wx),w(Ux),w(l0),w(Jx),w(b0),f&&t(iXe),f&&t(Jc),w(Yx),f&&t(dXe),f&&t(_r),w(Kx),w(e$),w(F0),w(o$),w(P0),f&&t(cXe),f&&t(Zc),w(r$),f&&t(fXe),f&&t(ur),w(t$),w(n$),w(I0),w(s$),w(W0),f&&t(mXe),f&&t(rf),w(l$),f&&t(gXe),f&&t(br),w(i$),w(c$),w(U0),w(f$),w(sw),f&&t(hXe),f&&t(nf),w(m$),f&&t(pXe),f&&t(vr),w(g$),w(p$),w(iw),w(_$),w(vw),f&&t(_Xe),f&&t(df),w(u$),f&&t(uXe),f&&t(Fr),w(b$),w(F$),w(Tw),w(T$),w(Sw),f&&t(bXe),f&&t(mf),w(M$),f&&t(vXe),f&&t(Tr),w(E$),w(w$),w(Pw),w(A$),w(Vw),f&&t(FXe),f&&t(pf),w(L$),f&&t(TXe),f&&t(Mr),w(y$),w($$),w(zw),w(k$),w(eA),f&&t(MXe),f&&t(bf),w(S$),f&&t(EXe),f&&t(Er),w(R$),w(B$),w(rA),w(I$),w(aA),f&&t(CXe),f&&t(Tf),w(N$),f&&t(wXe),f&&t(Cr),w(q$),w(D$),w(sA),w(G$),w(dA),f&&t(AXe),f&&t(Cf),w(V$),f&&t(LXe),f&&t(wr),w(X$),w(Q$),w(fA),w(W$),w(gA)}}}const EXt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function CXt($){return MOt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kXt extends bOt{constructor(g){super();vOt(this,g,CXt,MXt,FOt,{})}}export{kXt as default,EXt as metadata};
